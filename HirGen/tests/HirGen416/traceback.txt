==========mod==========
#[version = "0.0.5"]
def @func_9446() -> (Tensor[(3, 16, 5), float64],) {
  %0 = @func_6406() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_10445() -> Tensor[(3, 16, 5), uint8] {
  %2 = @func_8560() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %2.0
}

def @func_10761() -> Tensor[(11, 6, 7), float64] {
  %3 = @func_7043() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), float64]) */;
  %3.1
}

def @func_2730(%var_2703: Tensor[(1, 5, 5), float32]) -> Tensor[(16, 5, 5), float32] {
  %4 = cast(%var_2703, dtype="float32") /* ty=Tensor[(1, 5, 5), float32] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %6 = floor_divide(%4, %5) /* ty=Tensor[(16, 5, 5), float32] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  atanh(%7) /* ty=Tensor[(16, 5, 5), float32] */
}

def @func_10043(%var_9993: Tensor[(6, 15, 10), float32]) -> (Tensor[(6, 15, 10), float64],) {
  %8 = cast(%var_9993, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
  %9 = atan(%8) /* ty=Tensor[(6, 15, 10), float32] */;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(6, 15, 10), float64] */;
  %11 = log2(%10) /* ty=Tensor[(6, 15, 10), float64] */;
  (%11,)
}

def @func_6734() -> (Tensor[(3, 16, 5), float64],) {
  %12 = @func_5599() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %13 = %12.0;
  (%13,)
}

def @func_5599() -> (Tensor[(3, 16, 5), float64],) {
  %14 = @func_4537() /* ty=(Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float64]) */;
  %15 = %14.1;
  (%15,)
}

def @func_3777(%var_3761: Tensor[(77, 6), bool], %var_3763: Tensor[(77, 6), bool]) -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), float32], Tensor[(77, 6), int16]) {
  %16 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %17 = cast(%var_3761, dtype="bool") /* ty=Tensor[(77, 6), bool] */;
  %18 = reshape(%17, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), bool] */;
  %19 = @func_1660(%18) /* ty=(Tensor[(11, 6, 7), float64], Tensor[(11, 6, 7), float32]) */;
  %20 = cast(%var_3763, dtype="int16") /* ty=Tensor[(77, 6), int16] */;
  %21 = shape_of(%var_3761, dtype="int32") /* ty=Tensor[(2), int32] */;
  %22 = cast(%var_3761, dtype="int16") /* ty=Tensor[(77, 6), int16] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %24 = %16.0;
  %25 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
  %26 = %19.1;
  %27 = left_shift(%22, %23) /* ty=Tensor[(77, 6), int16] */;
  (%24, %25, %26, %27)
}

def @func_1693() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) {
  %28 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %29 = %28.1;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %31 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %32 = log(%30) /* ty=Tensor[(3, 16, 5), float32] */;
  %33 = %31.2;
  (%32, %33)
}

def @func_703() -> Tensor[(3, 16, 5), float64] {
  @func_511() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_5943() -> Tensor[(11, 6, 7), float64] {
  %34 = @func_2673() /* ty=(Tensor[(11, 6, 7), float64],) */;
  %34.0
}

def @func_7043() -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), float64]) {
  %35 = @func_3935() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */;
  %36 = %35.1;
  %37 = @func_5373() /* ty=Tensor[(11, 6, 7), float64] */;
  (%36, %37)
}

def @func_7408() -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(14, 7, 10), uint32], Tensor[(980), uint32]) {
  %38 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
  %39 = @func_4270() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(980), uint32] */, dtype="uint32") /* ty=Tensor[(980), uint32] */;
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(980), uint32] */, dtype="uint32") /* ty=Tensor[(980), uint32] */;
  %42 = reshape(%40, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint32] */;
  %43 = reshape(%41, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint32] */;
  %44 = @func_5739() /* ty=Tensor[(3, 16, 5), float32] */;
  %45 = %38.1;
  %46 = %39.0;
  %47 = @func_6474(%42, %43) /* ty=Tensor[(14, 7, 10), uint32] */;
  (%44, %45, %46, %47, meta[relay.Constant][1] /* ty=Tensor[(980), uint32] */)
}

def @func_8711(%var_8697: Tensor[(2704, 1), float32]) -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(2704, 1), float32]) {
  %48 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %49 = @func_2137() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) */;
  %50 = cast(%var_8697, dtype="float32") /* ty=Tensor[(2704, 1), float32] */;
  %51 = cast(%var_8697, dtype="float32") /* ty=Tensor[(2704, 1), float32] */;
  %52 = reshape(%50, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
  %53 = reshape(%51, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
  %54 = @func_3642(%52, %53) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(2704), int32], Tensor[(3, 16, 5), float32], Tensor[(2704), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), bool], Tensor[(3, 16, 5), uint8]) */;
  %55 = %48.0;
  %56 = %49.0;
  %57 = %54.7;
  (%55, %56, %57, %var_8697)
}

def @func_6204(%var_6192: Tensor[(5, 3, 5), uint8], %var_6193: Tensor[(5, 3, 5), uint8]) -> Tensor[(5, 3, 5), bool] {
  %58 = cast(%var_6193, dtype="bool") /* ty=Tensor[(5, 3, 5), bool] */;
  %59 = shape_of(%var_6192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_6192, dtype="bool") /* ty=Tensor[(5, 3, 5), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%60, %61) /* ty=Tensor[(5, 3, 5), bool] */
}

def @func_47() -> Tensor[(11, 6, 7), bool] {
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 1, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 1, 7), bool] */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 6, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
  logical_or(%62, %63) /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_5234() -> Tensor[(3, 16, 5), float32] {
  @func_4028() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_5950() -> Tensor[(11, 6, 7), bool] {
  %64 = @func_1424() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */;
  %64.5
}

def @func_3481(%var_3455: Tensor[(15, 5, 12), float32]) -> (Tensor[(15, 5, 12), float32], Tensor[(3, 16, 5), uint8], Tensor[(15, 5, 12), uint64]) {
  %65 = cast(%var_3455, dtype="float32") /* ty=Tensor[(15, 5, 12), float32] */;
  %66 = cast(%var_3455, dtype="float32") /* ty=Tensor[(15, 5, 12), float32] */;
  %67 = sigmoid(%66) /* ty=Tensor[(15, 5, 12), float32] */;
  %68 = cast(%var_3455, dtype="uint64") /* ty=Tensor[(15, 5, 12), uint64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="uint64") /* ty=Tensor[(15, 5, 12), uint64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %72 = tan(%65) /* ty=Tensor[(15, 5, 12), float32] */;
  %73 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %74 = subtract(%70, %71) /* ty=Tensor[(15, 5, 12), uint64] */;
  (%72, %73, %74)
}

def @func_1660(%var_1636: Tensor[(11, 6, 7), bool]) -> (Tensor[(11, 6, 7), float64], Tensor[(11, 6, 7), float32]) {
  %75 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %76 = %75.2;
  %77 = cast(%var_1636, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %81 = cast(%76, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %82 = divide(%79, %80) /* ty=Tensor[(11, 6, 7), float64] */;
  %83 = sigmoid(%81) /* ty=Tensor[(11, 6, 7), float32] */;
  (%82, %83)
}

def @func_4149() -> Tensor[(3, 16, 5), uint8] {
  @func_148() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_2673() -> (Tensor[(11, 6, 7), float64],) {
  %84 = @func_2137() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %87 = acos(%86) /* ty=Tensor[(11, 6, 7), float64] */;
  (%87,)
}

def @func_5492(%var_5452: Tensor[(4, 2, 7), float32]) -> (Tensor[(6, 3, 6), bool], Tensor[(108), float64], Tensor[(4, 2, 7), float64]) {
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %89 = reshape(%88, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(4, 2, 7), float32] */;
  %91 = sinh(%90) /* ty=Tensor[(4, 2, 7), float32] */;
  %92 = cast(%var_5452, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = greater_equal(%94, %95) /* ty=Tensor[(4, 2, 7), bool] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(4, 2, 7), float64] */;
  %98 = @func_4339(%89) /* ty=Tensor[(6, 3, 6), bool] */;
  %99 = exp(%97) /* ty=Tensor[(4, 2, 7), float64] */;
  (%98, meta[relay.Constant][4] /* ty=Tensor[(108), float64] */, %99)
}

def @func_76() -> Tensor[(3, 16, 5), float64] {
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 16, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 5), float64] */;
  asinh(%100) /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_2318(%var_2312: Tensor[(5, 14, 13), float32]) -> (Tensor[(5, 14, 13), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
  %101 = cast(%var_2312, dtype="float32") /* ty=Tensor[(5, 14, 13), float32] */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %103 = reshape(%102, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %104 = @func_680(%103) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %105 = asin(%101) /* ty=Tensor[(5, 14, 13), float32] */;
  %106 = %104.1;
  (%105, %106, meta[relay.Constant][7] /* ty=Tensor[(288), float64] */)
}

def @func_3974() -> Tensor[(3, 16, 5), float64] {
  %107 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %107.1
}

def @func_1466() -> (Tensor[(16, 13, 13), float32],) {
  %108 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %109 = %108.4;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %111 = sin(%110) /* ty=Tensor[(16, 13, 13), float32] */;
  (%111,)
}

def @func_7588() -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float32], Tensor[(198), float64], Tensor[(3, 16, 5), float64]) {
  %112 = @func_7485() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32]) */;
  %113 = @func_4157() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %114 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %115 = %114.0;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %117 = erf(%116) /* ty=Tensor[(3, 16, 5), float32] */;
  %118 = cast(%117, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %119 = reshape(%118, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %120 = @func_2020(%119) /* ty=(Tensor[(4, 14, 4), float64], Tensor[(198), float64], Tensor[(3, 16, 5), uint64]) */;
  %121 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %122 = %112.0;
  %123 = %113.0;
  %124 = %120.1;
  %125 = %121.0;
  (%122, %123, %117, %124, %125)
}

def @func_234() -> (Tensor[(8, 1, 11), float32],) {
  %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 1, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 11), float32] */;
  %127 = cosh(%126) /* ty=Tensor[(8, 1, 11), float32] */;
  (%127,)
}

def @func_4910() -> Tensor[(3, 16, 5), float64] {
  %128 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %128.0
}

def @func_511() -> Tensor[(3, 16, 5), float64] {
  %129 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %129.0
}

def @func_8392() -> (Tensor[(3, 16, 5), float32], Tensor[(6, 15, 10), float32], Tensor[(90, 10), float32]) {
  %130 = @func_8282() /* ty=(Tensor[(3, 16, 5), float32],) */;
  %131 = cast(meta[relay.Constant][9] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %132 = reshape(%131, newshape=[6, 15, 10]) /* ty=Tensor[(6, 15, 10), float32] */;
  %133 = %130.0;
  %134 = @func_2740(%132) /* ty=Tensor[(6, 15, 10), float32] */;
  (%133, %134, meta[relay.Constant][9] /* ty=Tensor[(90, 10), float32] */)
}

def @func_9628(%var_9588: Tensor[(4, 7, 6), float64], %var_9589: Tensor[(4, 7, 6), float64]) -> (Tensor[(4, 7, 6), float64], Tensor[(3, 16, 5), float32], Tensor[(224), float64], Tensor[(224), float64]) {
  %135 = cast(%var_9589, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %136 = shape_of(%var_9588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_9588, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %139 = cast(meta[relay.Constant][10] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %140 = reshape(%139, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %141 = @func_2205(%140) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
  %142 = floor_mod(%137, %138) /* ty=Tensor[(4, 7, 6), float64] */;
  %143 = @func_6768() /* ty=Tensor[(3, 16, 5), float32] */;
  %144 = %141.3;
  (%142, %143, %144, meta[relay.Constant][10] /* ty=Tensor[(224), float64] */)
}

def @func_6598() -> Tensor[(3, 16, 5), float32] {
  @func_3803() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_7076() -> Tensor[(11, 6, 7), bool] {
  @func_6901() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_2747() -> Tensor[(3, 16, 5), float64] {
  %145 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %145.0
}

def @func_7485() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32]) {
  %146 = @func_4270() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %147 = @func_3416() /* ty=(Tensor[(3, 16, 5), float32],) */;
  %148 = %146.0;
  %149 = %147.0;
  (%148, %149)
}

def @func_8654() -> Tensor[(3, 16, 5), float64] {
  %150 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %150.1
}

def @func_4935() -> Tensor[(16, 13, 13), float32] {
  %151 = @func_1466() /* ty=(Tensor[(16, 13, 13), float32],) */;
  %151.0
}

def @func_4486() -> (Tensor[(3, 16, 5), float64], Tensor[(2704), float32]) {
  %152 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %153 = @func_4439() /* ty=(Tensor[(2704), float32],) */;
  %154 = %152.0;
  %155 = %153.0;
  (%154, %155)
}

def @func_3803() -> Tensor[(3, 16, 5), float32] {
  %156 = @func_1928() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */;
  %156.1
}

def @func_480(%var_460: Tensor[(12, 12, 2), float64]) -> (Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) {
  %157 = cast(%var_460, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %158 = cast(%var_460, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
  %159 = exp(%157) /* ty=Tensor[(12, 12, 2), float64] */;
  %160 = acos(%158) /* ty=Tensor[(12, 12, 2), float32] */;
  (%159, %160)
}

def @func_2740(%var_2737: Tensor[(6, 15, 10), float32]) -> Tensor[(6, 15, 10), float32] {
  %161 = cast(%var_2737, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
  atanh(%161) /* ty=Tensor[(6, 15, 10), float32] */
}

def @func_4676() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  %162 = @func_4028() /* ty=Tensor[(3, 16, 5), float32] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(3, 16, 5), float64] */;
  %164 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %165 = atanh(%163) /* ty=Tensor[(3, 16, 5), float64] */;
  (%164, %165)
}

def @func_3724(%var_3715: Tensor[(10, 13, 3), float64]) -> (Tensor[(10, 13, 3), float64], Tensor[(3, 16, 5), float64]) {
  %166 = cast(%var_3715, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %167 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %168 = sin(%166) /* ty=Tensor[(10, 13, 3), float64] */;
  %169 = %167.0;
  (%168, %169)
}

def @func_1928() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  %170 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %171 = %170.0;
  %172 = cast(%171, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %173 = reshape(%172, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %174 = @func_1822(%173) /* ty=(Tensor[(3, 16, 5), float32],) */;
  %175 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
  %176 = %174.0;
  %177 = %175.0;
  (%171, %176, %177)
}

def @func_9107() -> (Tensor[(3, 16, 5), float32],) {
  %178 = @func_4796() /* ty=Tensor[(3, 16, 5), float32] */;
  (%178,)
}

def @func_5531() -> Tensor[(3, 16, 5), uint8] {
  @func_4149() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_8765() -> (Tensor[(3, 16, 5), float64], Tensor[(192), float64], Tensor[(5, 2), float64], Tensor[(288), float64]) {
  %179 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 2), float64] */;
  %180 = cast(meta[relay.Constant][12] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %181 = reshape(%179, newshape=[2, 5]) /* ty=Tensor[(2, 5), float64] */;
  %182 = reshape(%180, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %183 = @func_5590(%181, %182) /* ty=(Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) */;
  %184 = @func_6283() /* ty=Tensor[(3, 16, 5), float64] */;
  %185 = %183.4;
  (%184, %185, meta[relay.Constant][11] /* ty=Tensor[(5, 2), float64] */, meta[relay.Constant][12] /* ty=Tensor[(288), float64] */)
}

def @func_10613() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(650), float64]) {
  %186 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %187 = cast(meta[relay.Constant][13] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %188 = reshape(%187, newshape=[650]) /* ty=Tensor[(650), float64] */;
  %189 = @func_5161(%188) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(5, 13, 10), float64], Tensor[(650), float64]) */;
  %190 = %186.3;
  %191 = %189.0;
  (%190, %191, meta[relay.Constant][13] /* ty=Tensor[(650), float64] */)
}

def @func_3193() -> (Tensor[(16, 13, 13), float32],) {
  %192 = @func_3181() /* ty=(Tensor[(16, 13, 13), float32],) */;
  %193 = %192.0;
  (%193,)
}

def @func_4339(%var_4317: Tensor[(6, 3, 6), float64]) -> Tensor[(6, 3, 6), bool] {
  %194 = cast(%var_4317, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %195 = asin(%194) /* ty=Tensor[(6, 3, 6), float64] */;
  %196 = cast(%195, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %197 = shape_of(%var_4317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_4317, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%198, %199) /* ty=Tensor[(6, 3, 6), bool] */
}

def @func_8035() -> Tensor[(3, 16, 5), float32] {
  @func_3803() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_4587() -> (Tensor[(3, 16, 5), float64],) {
  %200 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %201 = %200.0;
  (%201,)
}

def @func_10550(%var_10474: Tensor[(65, 10), float64], %var_10487: Tensor[(56, 12), float32], %var_10545: Tensor[(2704), float32]) -> (Tensor[(3, 16, 5), float32], Tensor[(5, 13, 10), float64], Tensor[(65, 10), float64], Tensor[(3, 14, 16), float32], Tensor[(56, 12), float64], Tensor[(16, 13, 13), float32], Tensor[(2704), float32]) {
  %202 = cast(%var_10474, dtype="float64") /* ty=Tensor[(65, 10), float64] */;
  %203 = cast(%var_10474, dtype="float64") /* ty=Tensor[(65, 10), float64] */;
  %204 = reshape(%202, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %205 = reshape(%203, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %206 = cast(%var_10487, dtype="float32") /* ty=Tensor[(56, 12), float32] */;
  %207 = reshape(%206, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), float32] */;
  %208 = cast(%var_10487, dtype="float64") /* ty=Tensor[(56, 12), float64] */;
  %209 = cast(%var_10545, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %210 = reshape(%209, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float32] */;
  %211 = @func_567(%210) /* ty=(Tensor[(16, 13, 13), float32],) */;
  %212 = @func_6598() /* ty=Tensor[(3, 16, 5), float32] */;
  %213 = @func_4220(%204, %205) /* ty=Tensor[(5, 13, 10), float64] */;
  %214 = @func_4249(%207) /* ty=Tensor[(3, 14, 16), float32] */;
  %215 = cosh(%208) /* ty=Tensor[(56, 12), float64] */;
  %216 = %211.0;
  (%212, %213, %var_10474, %214, %215, %216, %var_10545)
}

def @func_5590(%var_5544: Tensor[(2, 5), float64], %var_5551: Tensor[(288), float64]) -> (Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) {
  %217 = cast(%var_5544, dtype="float64") /* ty=Tensor[(2, 5), float64] */;
  %218 = cast(%var_5551, dtype="float64") /* ty=Tensor[(288), float64] */;
  %219 = reshape(%218, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %220 = @func_680(%219) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %222 = reshape(%221, newshape=[8, 2, 12]) /* ty=Tensor[(8, 2, 12), float64] */;
  %223 = tan(%217) /* ty=Tensor[(2, 5), float64] */;
  %224 = %220.1;
  %225 = @func_1591(%222) /* ty=Tensor[(8, 2, 12), float64] */;
  (%223, %224, %var_5551, %225, meta[relay.Constant][14] /* ty=Tensor[(192), float64] */)
}

def @func_2764() -> Tensor[(2704), float32] {
  %226 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %226.3
}

def @func_8560() -> (Tensor[(3, 16, 5), uint8],) {
  %227 = @func_6860() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %228 = %227.0;
  (%228,)
}

def @func_8493() -> (Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) {
  %229 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %230 = @func_4157() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %231 = %229.1;
  %232 = %230.0;
  (%231, %232)
}

def @func_10403() -> Tensor[(11, 6, 7), bool] {
  @func_6901() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_9857() -> Tensor[(3, 16, 5), uint8] {
  %233 = @func_6860() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %233.0
}

def @func_9795(%var_9784: Tensor[(13, 12, 13), int64], %var_9785: Tensor[(13, 12, 13), int64]) -> (Tensor[(13, 12, 13), int64],) {
  %234 = cast(%var_9785, dtype="int64") /* ty=Tensor[(13, 12, 13), int64] */;
  %235 = shape_of(%var_9784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_9784, dtype="int64") /* ty=Tensor[(13, 12, 13), int64] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %238 = bitwise_or(%236, %237) /* ty=Tensor[(13, 12, 13), int64] */;
  (%238,)
}

def @func_328(%var_317: Tensor[(11, 2, 15), float64]) -> (Tensor[(11, 2, 15), float64], Tensor[(3, 16, 5), float64]) {
  %239 = cast(%var_317, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %240 = log2(%239) /* ty=Tensor[(11, 2, 15), float64] */;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %242 = cos(%241) /* ty=Tensor[(11, 2, 15), float64] */;
  %243 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  (%242, %243)
}

def @func_2020(%var_2001: Tensor[(3, 16, 5), uint8]) -> (Tensor[(4, 14, 4), float64], Tensor[(198), float64], Tensor[(3, 16, 5), uint64]) {
  %244 = cast(meta[relay.Constant][15] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %245 = reshape(%244, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), float64] */;
  %246 = @func_1739(%245) /* ty=(Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) */;
  %247 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %248 = %247.0;
  %249 = cast(%var_2001, dtype="uint64") /* ty=Tensor[(3, 16, 5), uint64] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="uint64") /* ty=Tensor[(3, 16, 5), uint64] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %253 = %246.1;
  %254 = left_shift(%251, %252) /* ty=Tensor[(3, 16, 5), uint64] */;
  (%253, meta[relay.Constant][15] /* ty=Tensor[(198), float64] */, %254)
}

def @func_2832(%var_2812: Tensor[(234), int8]) -> (Tensor[(3, 16, 5), uint8], Tensor[(13, 3, 6), float64], Tensor[(234), int8], Tensor[(288), float64]) {
  %255 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
  %256 = cast(%var_2812, dtype="int8") /* ty=Tensor[(234), int8] */;
  %257 = cast(%var_2812, dtype="int8") /* ty=Tensor[(234), int8] */;
  %258 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %259 = reshape(%256, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
  %260 = reshape(%257, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
  %261 = reshape(%258, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %262 = @func_771(%259, %260, %261) /* ty=(Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) */;
  %263 = %255.1;
  %264 = %262.0;
  (%263, %264, %var_2812, meta[relay.Constant][16] /* ty=Tensor[(288), float64] */)
}

def @func_10637() -> (Tensor[(3, 16, 5), float64],) {
  %265 = @func_6406() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %266 = %265.0;
  (%266,)
}

def @func_4439() -> (Tensor[(2704), float32],) {
  %267 = @func_2764() /* ty=Tensor[(2704), float32] */;
  (%267,)
}

def @func_1174() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
  %268 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %270 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
  %271 = cos(%269) /* ty=Tensor[(3, 16, 5), float32] */;
  (%270, %271)
}

def @func_4270() -> (Tensor[(3, 16, 5), uint8],) {
  %272 = @func_3935() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */;
  %273 = %272.1;
  (%273,)
}

def @func_6474(%var_6461: Tensor[(14, 7, 10), uint32], %var_6462: Tensor[(14, 7, 10), uint32]) -> Tensor[(14, 7, 10), uint32] {
  %274 = cast(%var_6462, dtype="uint32") /* ty=Tensor[(14, 7, 10), uint32] */;
  %275 = shape_of(%var_6461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_6461, dtype="uint32") /* ty=Tensor[(14, 7, 10), uint32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%276, %277) /* ty=Tensor[(14, 7, 10), uint32] */
}

def @func_2137() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) {
  %278 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %279 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %280 = %278.0;
  %281 = %279.0;
  (%280, %281)
}

def @func_207() -> (Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) {
  %282 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %283 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %286 = %282.0;
  %287 = sin(%285) /* ty=Tensor[(11, 6, 7), float32] */;
  %288 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%286, %287, %288)
}

def @func_3416() -> (Tensor[(3, 16, 5), float32],) {
  %289 = @func_3005() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) */;
  %290 = %289.2;
  (%290,)
}

def @func_3954() -> (Tensor[(8, 7, 10), float32],) {
  %291 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %292 = sinh(%291) /* ty=Tensor[(8, 7, 10), float32] */;
  (%292,)
}

def @func_771(%var_725: Tensor[(13, 3, 6), int8], %var_726: Tensor[(13, 3, 6), int8], %var_751: Tensor[(288), float64]) -> (Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) {
  %293 = cast(%var_726, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %294 = shape_of(%var_725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_725, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = greater_equal(%295, %296) /* ty=Tensor[(13, 3, 6), bool] */;
  %298 = cast(%var_725, dtype="float64") /* ty=Tensor[(13, 3, 6), float64] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="float64") /* ty=Tensor[(13, 3, 6), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %302 = cast(%var_751, dtype="float64") /* ty=Tensor[(288), float64] */;
  %303 = reshape(%302, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %304 = @func_680(%303) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %305 = divide(%300, %301) /* ty=Tensor[(13, 3, 6), float64] */;
  %306 = %304.2;
  %307 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
  (%305, %306, %var_751, %307)
}

def @func_6901() -> Tensor[(11, 6, 7), bool] {
  @func_5950() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_8675() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(16, 13, 13), float32]) {
  %308 = @func_4149() /* ty=Tensor[(3, 16, 5), uint8] */;
  %309 = @func_4910() /* ty=Tensor[(3, 16, 5), float64] */;
  %310 = @func_6768() /* ty=Tensor[(3, 16, 5), float32] */;
  %311 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
  (%308, %309, %310, %311)
}

def @func_4411(%var_4400: Tensor[(8, 7, 10), float32]) -> (Tensor[(3, 16, 5), float64], Tensor[(8, 7, 10), bool], Tensor[(8, 7, 10), bool]) {
  %312 = @func_4307() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
  %313 = @func_3954() /* ty=(Tensor[(8, 7, 10), float32],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %316 = log2(%315) /* ty=Tensor[(8, 7, 10), float32] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %318 = rsqrt(%317) /* ty=Tensor[(8, 7, 10), float32] */;
  %319 = cast(%var_4400, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = cast(%314, dtype="int16") /* ty=Tensor[(8, 7, 10), int16] */;
  %324 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%316, dtype="int16") /* ty=Tensor[(8, 7, 10), int16] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %327 = maximum(%325, %326) /* ty=Tensor[(8, 7, 10), int16] */;
  %328 = cast(%327, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
  %329 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%318, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = %312.1;
  %333 = equal(%321, %322) /* ty=Tensor[(8, 7, 10), bool] */;
  %334 = logical_or(%330, %331) /* ty=Tensor[(8, 7, 10), bool] */;
  (%332, %333, %334)
}

def @func_4136(%var_4113: Tensor[(288), float64]) -> (Tensor[(8, 1, 11), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), int64], Tensor[(2, 120), uint8], Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float32]) {
  %335 = @func_234() /* ty=(Tensor[(8, 1, 11), float32],) */;
  %336 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %337 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 120), uint8] */, dtype="uint8") /* ty=Tensor[(2, 120), uint8] */;
  %338 = reshape(%337, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %339 = @func_2524(%338) /* ty=Tensor[(3, 16, 5), int64] */;
  %340 = cast(%339, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %341 = reshape(%340, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %342 = @func_1822(%341) /* ty=(Tensor[(3, 16, 5), float32],) */;
  %343 = cast(%var_4113, dtype="float64") /* ty=Tensor[(288), float64] */;
  %344 = reshape(%343, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %345 = @func_480(%344) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) */;
  %346 = @func_2778() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %347 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %348 = @func_3923() /* ty=(Tensor[(3, 16, 5), float32],) */;
  %349 = %335.0;
  %350 = %336.0;
  %351 = %342.0;
  %352 = %345.0;
  %353 = %346.0;
  %354 = %347.0;
  %355 = %348.0;
  (%349, %350, %339, meta[relay.Constant][18] /* ty=Tensor[(2, 120), uint8] */, %351, %352, %var_4113, %353, %354, %355)
}

def @func_6764() -> (Tensor[(4, 2, 10), float64],) {
  %356 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %357 = atanh(%356) /* ty=Tensor[(4, 2, 10), float64] */;
  (%357,)
}

def @func_7250(%var_7234: Tensor[(11, 6, 7), float64]) -> (Tensor[(11, 6, 7), bool],) {
  %358 = @func_6079() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %361 = log2(%360) /* ty=Tensor[(11, 6, 7), float64] */;
  %362 = cast(%var_7234, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = less_equal(%364, %365) /* ty=Tensor[(11, 6, 7), bool] */;
  (%366,)
}

def @func_1871() -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) {
  %367 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %368 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %369 = %367.0;
  %370 = %368.0;
  (%369, %370)
}

def @func_4537() -> (Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float64]) {
  %371 = @func_3193() /* ty=(Tensor[(16, 13, 13), float32],) */;
  %372 = @func_2778() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %373 = %371.0;
  %374 = %372.0;
  (%373, %374)
}

def @func_1554() -> (Tensor[(3, 16, 5), float64],) {
  %375 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %376 = %375.0;
  %377 = cast(%376, dtype="float64") /* ty=Tensor[(3, 16, 5), float64] */;
  %378 = acos(%377) /* ty=Tensor[(3, 16, 5), float64] */;
  (%378,)
}

def @func_3855() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) {
  %379 = @func_2137() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) */;
  %380 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %381 = %379.1;
  %382 = %380.0;
  (%381, %382)
}

def @func_1739(%var_1727: Tensor[(2, 11, 9), float64]) -> (Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) {
  %383 = cast(%var_1727, dtype="float64") /* ty=Tensor[(2, 11, 9), float64] */;
  %384 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 14), float64] */;
  %385 = reshape(%384, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
  %386 = rsqrt(%383) /* ty=Tensor[(2, 11, 9), float64] */;
  %387 = @func_993(%385) /* ty=Tensor[(4, 14, 4), float64] */;
  (%386, %387, meta[relay.Constant][20] /* ty=Tensor[(16, 14), float64] */)
}

def @func_2205(%var_2203: Tensor[(224), float64]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  %388 = @func_1928() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */;
  %389 = cast(%var_2203, dtype="float64") /* ty=Tensor[(224), float64] */;
  %390 = reshape(%389, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
  %391 = @func_511() /* ty=Tensor[(3, 16, 5), float64] */;
  %392 = %388.0;
  %393 = @func_993(%390) /* ty=Tensor[(4, 14, 4), float64] */;
  (%391, %392, %393, %var_2203)
}

def @func_6860() -> (Tensor[(3, 16, 5), uint8],) {
  %394 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %395 = %394.3;
  (%395,)
}

def @func_365() -> (Tensor[(3, 16, 5), uint8],) {
  %396 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%396,)
}

def @main() -> (Tensor[(3, 16, 5), float64], Tensor[(2028), int64], Tensor[(13, 12, 13), float64]) {
  %397 = @func_3855() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %398 = cast(meta[relay.Constant][21] /* ty=Tensor[(2028), int64] */, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %399 = cast(meta[relay.Constant][21] /* ty=Tensor[(2028), int64] */, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %400 = reshape(%398, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), int64] */;
  %401 = reshape(%399, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), int64] */;
  %402 = @func_9795(%400, %401) /* ty=(Tensor[(13, 12, 13), int64],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %405 = %397.1;
  %406 = asinh(%404) /* ty=Tensor[(13, 12, 13), float64] */;
  (%405, meta[relay.Constant][21] /* ty=Tensor[(2028), int64] */, %406)
}

def @func_2089() -> (Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), bool]) {
  %407 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %408 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
  %409 = %407.2;
  (%408, %409)
}

def @func_1822(%var_1812: Tensor[(3, 16, 5), uint8]) -> (Tensor[(3, 16, 5), float32],) {
  %410 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %411 = %410.0;
  %412 = cast(%var_1812, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %416 = subtract(%414, %415) /* ty=Tensor[(3, 16, 5), float32] */;
  (%416,)
}

def @func_4796() -> Tensor[(3, 16, 5), float32] {
  @func_3269() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_8282() -> (Tensor[(3, 16, 5), float32],) {
  %417 = @func_4796() /* ty=Tensor[(3, 16, 5), float32] */;
  (%417,)
}

def @func_9557() -> (Tensor[(3, 16, 5), float64],) {
  %418 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %419 = %418.0;
  (%419,)
}

def @func_9407() -> Tensor[(3, 16, 5), float32] {
  @func_5739() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_4618() -> (Tensor[(11, 6, 7), bool],) {
  %420 = @func_3005() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) */;
  %421 = %420.0;
  (%421,)
}

def @func_297() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) {
  %422 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %423 = %422.0;
  %424 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %425 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%423, %424, %425)
}

def @func_5161(%var_5157: Tensor[(650), float64]) -> (Tensor[(3, 16, 5), uint8], Tensor[(5, 13, 10), float64], Tensor[(650), float64]) {
  %426 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %427 = cast(%var_5157, dtype="float64") /* ty=Tensor[(650), float64] */;
  %428 = cast(%var_5157, dtype="float64") /* ty=Tensor[(650), float64] */;
  %429 = reshape(%427, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %430 = reshape(%428, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %431 = %426.2;
  %432 = @func_4220(%429, %430) /* ty=Tensor[(5, 13, 10), float64] */;
  (%431, %432, %var_5157)
}

def @func_3019() -> Tensor[(3, 16, 5), uint8] {
  %433 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %433.0
}

def @func_1591(%var_1588: Tensor[(8, 2, 12), float64]) -> Tensor[(8, 2, 12), float64] {
  %434 = cast(%var_1588, dtype="float64") /* ty=Tensor[(8, 2, 12), float64] */;
  asin(%434) /* ty=Tensor[(8, 2, 12), float64] */
}

def @func_4814() -> Tensor[(3, 16, 5), uint8] {
  @func_2849() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_7971() -> Tensor[(11, 6, 7), float64] {
  @func_5943() /* ty=Tensor[(11, 6, 7), float64] */
}

def @func_6084() -> (Tensor[(3, 16, 5), uint8],) {
  %435 = @func_5008() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
  %436 = %435.0;
  (%436,)
}

def @func_8948() -> (Tensor[(3, 16, 5), float64],) {
  %437 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %438 = %437.1;
  (%438,)
}

def @func_3935() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) {
  %439 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %440 = @func_3803() /* ty=Tensor[(3, 16, 5), float32] */;
  %441 = %439.3;
  (%440, %441)
}

def @func_2929(%var_2916: Tensor[(2704), float32]) -> (Tensor[(2704), int32],) {
  %442 = @func_2764() /* ty=Tensor[(2704), float32] */;
  %443 = cast(%var_2916, dtype="int32") /* ty=Tensor[(2704), int32] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(1), int32] */;
  %445 = cast(%442, dtype="int32") /* ty=Tensor[(2704), int32] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?), int32] */;
  %447 = left_shift(%445, %446) /* ty=Tensor[(2704), int32] */;
  (%447,)
}

def @func_2506() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  %448 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
  %449 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %450 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %451 = %448.0;
  %452 = %449.1;
  %453 = %450.0;
  (%451, %452, %453)
}

def @func_7868() -> (Tensor[(11, 6, 7), float64],) {
  %454 = @func_5943() /* ty=Tensor[(11, 6, 7), float64] */;
  (%454,)
}

def @func_7927() -> (Tensor[(3, 16, 5), uint8],) {
  %455 = @func_2849() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%455,)
}

def @func_993(%var_981: Tensor[(4, 14, 4), float64]) -> Tensor[(4, 14, 4), float64] {
  %456 = cast(%var_981, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  rsqrt(%456) /* ty=Tensor[(4, 14, 4), float64] */
}

def @func_4956(%var_4937: Tensor[(16, 3, 10), uint16], %var_4938: Tensor[(16, 3, 10), uint16]) -> (Tensor[(11, 6, 7), bool], Tensor[(16, 3, 10), int64]) {
  %457 = @func_4618() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %458 = cast(%var_4937, dtype="float32") /* ty=Tensor[(16, 3, 10), float32] */;
  %459 = asinh(%458) /* ty=Tensor[(16, 3, 10), float32] */;
  %460 = cast(%var_4938, dtype="uint16") /* ty=Tensor[(16, 3, 10), uint16] */;
  %461 = shape_of(%var_4937, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_4937, dtype="uint16") /* ty=Tensor[(16, 3, 10), uint16] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %464 = multiply(%462, %463) /* ty=Tensor[(16, 3, 10), uint16] */;
  %465 = cast(%464, dtype="int64") /* ty=Tensor[(16, 3, 10), int64] */;
  %466 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%459, dtype="int64") /* ty=Tensor[(16, 3, 10), int64] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %469 = %457.0;
  %470 = bitwise_and(%467, %468) /* ty=Tensor[(16, 3, 10), int64] */;
  (%469, %470)
}

def @func_6768() -> Tensor[(3, 16, 5), float32] {
  @func_4028() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_6151() -> (Tensor[(11, 6, 7), bool],) {
  %471 = @func_5950() /* ty=Tensor[(11, 6, 7), bool] */;
  (%471,)
}

def @func_2265() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) {
  %472 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %473 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %474 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %475 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %476 = @func_234() /* ty=(Tensor[(8, 1, 11), float32],) */;
  %477 = %472.0;
  %478 = %473.0;
  %479 = %474.0;
  %480 = %475.1;
  %481 = %476.0;
  (%477, %478, %479, %480, %481)
}

def @func_3064() -> Tensor[(3, 16, 5), uint8] {
  %482 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %482.2
}

def @func_7806() -> (Tensor[(3, 16, 5), float32],) {
  %483 = @func_5739() /* ty=Tensor[(3, 16, 5), float32] */;
  (%483,)
}

def @func_6515() -> (Tensor[(3, 16, 5), float32],) {
  %484 = @func_5234() /* ty=Tensor[(3, 16, 5), float32] */;
  (%484,)
}

def @func_6406() -> (Tensor[(3, 16, 5), float64],) {
  %485 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %486 = %485.1;
  (%486,)
}

def @func_567(%var_559: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), float32],) {
  %487 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %488 = shape_of(%var_559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_559, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %491 = floor_mod(%489, %490) /* ty=Tensor[(16, 13, 13), float32] */;
  (%491,)
}

def @func_4220(%var_4215: Tensor[(5, 13, 10), float64], %var_4216: Tensor[(5, 13, 10), float64]) -> Tensor[(5, 13, 10), float64] {
  %492 = cast(%var_4216, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %493 = shape_of(%var_4215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_4215, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%494, %495) /* ty=Tensor[(5, 13, 10), float64] */
}

def @func_5771() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8]) {
  %496 = @func_1424() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */;
  %497 = %496.1;
  %498 = @func_4149() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%497, %498)
}

def @func_8435(%var_8403: Tensor[(3, 3, 5), int64], %var_8425: Tensor[(1, 900), float32]) -> (Tensor[(3, 3, 5), int64], Tensor[(11, 6, 7), bool], Tensor[(6, 15, 10), float32], Tensor[(1, 900), float32], Tensor[(3, 16, 5), float64]) {
  %499 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 3, 5), int64] */, dtype="int64") /* ty=Tensor[(3, 3, 5), int64] */;
  %500 = shape_of(%var_8403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%var_8403, dtype="int64") /* ty=Tensor[(3, 3, 5), int64] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %503 = @func_7588() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float32], Tensor[(198), float64], Tensor[(3, 16, 5), float64]) */;
  %504 = cast(%var_8425, dtype="float32") /* ty=Tensor[(1, 900), float32] */;
  %505 = reshape(%504, newshape=[6, 15, 10]) /* ty=Tensor[(6, 15, 10), float32] */;
  %506 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %507 = multiply(%501, %502) /* ty=Tensor[(3, 3, 5), int64] */;
  %508 = %503.1;
  %509 = @func_2740(%505) /* ty=Tensor[(6, 15, 10), float32] */;
  %510 = %506.0;
  (%507, %508, %509, %var_8425, %510)
}

def @func_3181() -> (Tensor[(16, 13, 13), float32],) {
  %511 = @func_1466() /* ty=(Tensor[(16, 13, 13), float32],) */;
  %512 = %511.0;
  (%512,)
}

def @func_2524(%var_2519: Tensor[(3, 16, 5), uint8]) -> Tensor[(3, 16, 5), int64] {
  %513 = @func_1928() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */;
  %514 = %513.0;
  %515 = cast(%var_2519, dtype="int64") /* ty=Tensor[(3, 16, 5), int64] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="int64") /* ty=Tensor[(3, 16, 5), int64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%517, %518) /* ty=Tensor[(3, 16, 5), int64] */
}

def @func_7199() -> (Tensor[(3, 16, 5), uint8],) {
  %519 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %520 = %519.0;
  (%520,)
}

def @func_4028() -> Tensor[(3, 16, 5), float32] {
  @func_3269() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_9246(%var_9205: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), bool], Tensor[(16, 13, 13), float32], Tensor[(980), uint32]) {
  %521 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
  %522 = cast(%var_9205, dtype="bool") /* ty=Tensor[(16, 13, 13), bool] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="bool") /* ty=Tensor[(16, 13, 13), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = cast(%521, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %527 = @func_7408() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(14, 7, 10), uint32], Tensor[(980), uint32]) */;
  %528 = logical_and(%524, %525) /* ty=Tensor[(16, 13, 13), bool] */;
  %529 = log2(%526) /* ty=Tensor[(16, 13, 13), float32] */;
  %530 = %527.4;
  (%528, %529, %530)
}

def @func_5538() -> (Tensor[(2704), float32],) {
  %531 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
  %532 = %531.0;
  (%532,)
}

def @func_1793() -> (Tensor[(3, 16, 5), uint8],) {
  %533 = @func_1424() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */;
  %534 = %533.1;
  (%534,)
}

def @func_1128() -> (Tensor[(3, 16, 5), float64],) {
  %535 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %536 = %535.0;
  (%536,)
}

def @func_9315(%var_9303: Tensor[(16, 16, 16), float32], %var_9309: Tensor[(16, 16, 16), float32]) -> (Tensor[(16, 16, 16), float32], Tensor[(3, 16, 5), float64], Tensor[(16, 16, 16), float32]) {
  %537 = cast(%var_9303, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
  %538 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(16, 16, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %541 = @func_6406() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %542 = cast(%var_9309, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
  %543 = shape_of(%var_9303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_9303, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %546 = divide(%539, %540) /* ty=Tensor[(16, 16, 16), float32] */;
  %547 = %541.0;
  %548 = floor_divide(%544, %545) /* ty=Tensor[(16, 16, 16), float32] */;
  (%546, %547, %548)
}

def @func_2607() -> (Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) {
  %549 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %550 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
  %551 = %549.3;
  %552 = %550.2;
  (%551, %552)
}

def @func_5645(%var_5640: Tensor[(16, 13, 13), float32]) -> Tensor[(16, 13, 13), uint16] {
  %553 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
  %554 = cast(%var_5640, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%556, %557) /* ty=Tensor[(16, 13, 13), uint16] */
}

def @func_8791() -> Tensor[(3, 16, 5), uint8] {
  @func_3064() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_7467() -> (Tensor[(3, 16, 5), float64], Tensor[(5, 14, 13), float32], Tensor[(910), float32]) {
  %558 = cast(meta[relay.Constant][25] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %559 = reshape(%558, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float32] */;
  %560 = @func_2318(%559) /* ty=(Tensor[(5, 14, 13), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %561 = @func_511() /* ty=Tensor[(3, 16, 5), float64] */;
  %562 = %560.0;
  (%561, %562, meta[relay.Constant][25] /* ty=Tensor[(910), float32] */)
}

def @func_664() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) {
  %563 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %564 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %565 = %563.0;
  %566 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %567 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %568 = %564.0;
  (%565, %566, %567, %568)
}

def @func_9360() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) {
  %569 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %570 = %569.0;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %572 = tan(%571) /* ty=Tensor[(3, 16, 5), float32] */;
  %573 = @func_8833() /* ty=Tensor[(3, 16, 5), float64] */;
  (%572, %573)
}

def @func_8961() -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  %574 = @func_6151() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %575 = @func_5234() /* ty=Tensor[(3, 16, 5), float32] */;
  %576 = %574.0;
  (%575, %576)
}

def @func_3923() -> (Tensor[(3, 16, 5), float32],) {
  %577 = @func_2747() /* ty=Tensor[(3, 16, 5), float64] */;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %579 = asin(%578) /* ty=Tensor[(3, 16, 5), float32] */;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %581 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%577, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %584 = floor_divide(%582, %583) /* ty=Tensor[(3, 16, 5), float32] */;
  (%584,)
}

def @func_3642(%var_3577: Tensor[(2704), float32], %var_3598: Tensor[(2704), float32]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(2704), int32], Tensor[(3, 16, 5), float32], Tensor[(2704), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), bool], Tensor[(3, 16, 5), uint8]) {
  %585 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %586 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %587 = cast(%var_3577, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %588 = reshape(%587, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
  %589 = @func_2929(%588) /* ty=(Tensor[(2704), int32],) */;
  %590 = %586.0;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %592 = %585.0;
  %593 = cast(%592, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %594 = reshape(%591, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), float32] */;
  %595 = reshape(%593, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %596 = @func_2427(%594, %595) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %597 = cast(%var_3598, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %598 = shape_of(%var_3577, dtype="int32") /* ty=Tensor[(1), int32] */;
  %599 = cast(%var_3577, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?), bool] */;
  %601 = logical_or(%599, %600) /* ty=Tensor[(2704), bool] */;
  %602 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
  %603 = %602.0;
  %604 = cast(%var_3577, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(1), int32] */;
  %606 = cast(%603, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?), bool] */;
  %608 = logical_and(%606, %607) /* ty=Tensor[(2704), bool] */;
  %609 = cast(%608, dtype="int32") /* ty=Tensor[(2704), int32] */;
  %610 = shape_of(%601, dtype="int32") /* ty=Tensor[(1), int32] */;
  %611 = cast(%601, dtype="int32") /* ty=Tensor[(2704), int32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?), int32] */;
  %613 = logical_xor(%611, %612) /* ty=Tensor[(2704), int32] */;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %615 = log10(%614) /* ty=Tensor[(2704), float64] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %617 = @func_2089() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), bool]) */;
  %618 = cast(%601, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %619 = shape_of(%615, dtype="int32") /* ty=Tensor[(1), int32] */;
  %620 = cast(%615, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?), bool] */;
  %622 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
  %623 = %589.0;
  %624 = %596.1;
  %625 = exp(%616) /* ty=Tensor[(2704), float64] */;
  %626 = %617.1;
  %627 = less_equal(%620, %621) /* ty=Tensor[(2704), bool] */;
  %628 = %622.0;
  (%592, %590, %623, %624, %625, %626, %627, %628)
}

def @func_5934(%var_5890: Tensor[(15, 5, 10), float32]) -> (Tensor[(15, 5, 10), float64], Tensor[(8, 1, 11), float32]) {
  %629 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 10), float32] */;
  %630 = cast(%var_5890, dtype="float32") /* ty=Tensor[(15, 5, 10), float32] */;
  %631 = floor_mod(%629, %630) /* ty=Tensor[(15, 5, 10), float32] */;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %633 = @func_234() /* ty=(Tensor[(8, 1, 11), float32],) */;
  %634 = sigmoid(%632) /* ty=Tensor[(15, 5, 10), float64] */;
  %635 = %633.0;
  (%634, %635)
}

def @func_4307() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  %636 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %637 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %638 = %636.2;
  %639 = %637.1;
  (%638, %639)
}

def @func_10745() -> (Tensor[(3, 16, 5), uint8],) {
  %640 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %641 = %640.3;
  (%641,)
}

def @func_4157() -> (Tensor[(11, 6, 7), bool],) {
  %642 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
  (%642,)
}

def @func_10289() -> (Tensor[(3, 16, 5), float64], Tensor[(15, 5, 10), float64], Tensor[(750), float32], Tensor[(3, 16, 5), float64]) {
  %643 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %644 = cast(meta[relay.Constant][27] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %645 = reshape(%644, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), float32] */;
  %646 = @func_5934(%645) /* ty=(Tensor[(15, 5, 10), float64], Tensor[(8, 1, 11), float32]) */;
  %647 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %648 = %643.0;
  %649 = %646.0;
  %650 = %647.0;
  (%648, %649, meta[relay.Constant][27] /* ty=Tensor[(750), float32] */, %650)
}

def @func_6532(%var_6527: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), int16],) {
  %651 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
  %652 = cast(%var_6527, dtype="int16") /* ty=Tensor[(16, 13, 13), int16] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="int16") /* ty=Tensor[(16, 13, 13), int16] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %656 = multiply(%654, %655) /* ty=Tensor[(16, 13, 13), int16] */;
  (%656,)
}

def @func_9183() -> Tensor[(3, 16, 5), uint8] {
  @func_3019() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_6283() -> Tensor[(3, 16, 5), float64] {
  %657 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %657.0
}

def @func_5136() -> Tensor[(3, 16, 5), float32] {
  @func_3803() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_836(%var_831: Tensor[(288), float64]) -> (Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float32], Tensor[(288), float64]) {
  %658 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %661 = cast(%var_831, dtype="float64") /* ty=Tensor[(288), float64] */;
  %662 = reshape(%661, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %663 = @func_480(%662) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) */;
  %664 = cosh(%660) /* ty=Tensor[(3, 16, 5), float32] */;
  %665 = %663.1;
  (%664, %665, %var_831)
}

def @func_1424() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) {
  %666 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %667 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %668 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %669 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %670 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
  %671 = %666.0;
  %672 = %667.0;
  %673 = %668.0;
  %674 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
  %675 = %669.0;
  %676 = %670.0;
  (%671, %672, %673, %674, %675, %676)
}

def @func_979() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) {
  %677 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %678 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
  %679 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
  %680 = %679.1;
  %681 = cast(%680, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
  %682 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%678, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = cast(meta[relay.Constant][28] /* ty=Tensor[(2704), float32] */, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %686 = reshape(%685, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float32] */;
  %687 = @func_567(%686) /* ty=(Tensor[(16, 13, 13), float32],) */;
  %688 = %687.0;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %690 = %677.1;
  %691 = @func_511() /* ty=Tensor[(3, 16, 5), float64] */;
  %692 = greater(%683, %684) /* ty=Tensor[(11, 6, 7), bool] */;
  %693 = sinh(%689) /* ty=Tensor[(16, 13, 13), float32] */;
  (%690, %691, %692, meta[relay.Constant][28] /* ty=Tensor[(2704), float32] */, %693)
}

def @func_5008() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  %694 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %695 = %694.2;
  %696 = @func_3504() /* ty=Tensor[(3, 16, 5), float64] */;
  (%695, %696)
}

def @func_8310() -> Tensor[(3, 16, 5), uint8] {
  %697 = @func_4307() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
  %697.0
}

def @func_5717(%var_5670: Tensor[(2704), float32], %var_5682: Tensor[(900), float32], %var_5687: Tensor[(462), bool]) -> (Tensor[(2704), bool], Tensor[(900), float32], Tensor[(77, 6), int16], Tensor[(462), bool], Tensor[(3, 16, 5), float32]) {
  %698 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
  %699 = %698.0;
  %700 = cast(%var_5670, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(1), int32] */;
  %702 = cast(%699, dtype="bool") /* ty=Tensor[(2704), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?), bool] */;
  %704 = cast(%var_5687, dtype="bool") /* ty=Tensor[(462), bool] */;
  %705 = cast(%var_5687, dtype="bool") /* ty=Tensor[(462), bool] */;
  %706 = reshape(%704, newshape=[77, 6]) /* ty=Tensor[(77, 6), bool] */;
  %707 = reshape(%705, newshape=[77, 6]) /* ty=Tensor[(77, 6), bool] */;
  %708 = @func_3777(%706, %707) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), float32], Tensor[(77, 6), int16]) */;
  %709 = cast(%var_5682, dtype="float32") /* ty=Tensor[(900), float32] */;
  %710 = reshape(%709, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
  %711 = @func_3481(%710) /* ty=(Tensor[(15, 5, 12), float32], Tensor[(3, 16, 5), uint8], Tensor[(15, 5, 12), uint64]) */;
  %712 = %711.1;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %714 = equal(%702, %703) /* ty=Tensor[(2704), bool] */;
  %715 = %708.3;
  %716 = atan(%713) /* ty=Tensor[(3, 16, 5), float32] */;
  (%714, %var_5682, %715, %var_5687, %716)
}

def @func_1258() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) {
  %717 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %718 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  (%717, %718)
}

def @func_3269() -> Tensor[(3, 16, 5), float32] {
  %719 = @func_3005() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) */;
  %719.2
}

def @func_8833() -> Tensor[(3, 16, 5), float64] {
  %720 = @func_6734() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %720.0
}

def @func_148() -> Tensor[(3, 16, 5), uint8] {
  %721 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %722 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %723 = cast(%722, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %724 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%721, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%725, %726) /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_3005() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) {
  %727 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %728 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %729 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %730 = cast(meta[relay.Constant][29] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %731 = reshape(%730, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), float64] */;
  %732 = @func_1739(%731) /* ty=(Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) */;
  %733 = %727.0;
  %734 = %728.0;
  %735 = %729.1;
  %736 = %732.1;
  (%733, %734, %735, %736, meta[relay.Constant][29] /* ty=Tensor[(198), float64] */)
}

def @func_8229() -> (Tensor[(3, 16, 5), float32],) {
  %737 = @func_5136() /* ty=Tensor[(3, 16, 5), float32] */;
  (%737,)
}

def @func_9053(%var_9008: Tensor[(104, 26), float32], %var_9012: Tensor[(10), float64], %var_9013: Tensor[(288), float64]) -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(462), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(462), bool], Tensor[(104, 26), float32], Tensor[(900), float32], Tensor[(2, 5), float64], Tensor[(10), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(234), int8], Tensor[(3, 16, 5), float64], Tensor[(224), float64]) {
  %738 = cast(meta[relay.Constant][30] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %739 = reshape(%738, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), float64] */;
  %740 = @func_7250(%739) /* ty=(Tensor[(11, 6, 7), bool],) */;
  %741 = @func_3416() /* ty=(Tensor[(3, 16, 5), float32],) */;
  %742 = @func_5279() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %743 = cast(%var_9008, dtype="float32") /* ty=Tensor[(104, 26), float32] */;
  %744 = cast(meta[relay.Constant][31] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %745 = %740.0;
  %746 = cast(%745, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
  %747 = reshape(%743, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
  %748 = reshape(%744, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %749 = reshape(%746, newshape=[462]) /* ty=Tensor[(462), bool] */;
  %750 = @func_5717(%747, %748, %749) /* ty=(Tensor[(2704), bool], Tensor[(900), float32], Tensor[(77, 6), int16], Tensor[(462), bool], Tensor[(3, 16, 5), float32]) */;
  %751 = cast(%var_9012, dtype="float64") /* ty=Tensor[(10), float64] */;
  %752 = cast(%var_9013, dtype="float64") /* ty=Tensor[(288), float64] */;
  %753 = reshape(%751, newshape=[2, 5]) /* ty=Tensor[(2, 5), float64] */;
  %754 = reshape(%752, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %755 = @func_5590(%753, %754) /* ty=(Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) */;
  %756 = cast(meta[relay.Constant][32] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %757 = cast(meta[relay.Constant][32] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
  %758 = cast(%var_9013, dtype="float64") /* ty=Tensor[(288), float64] */;
  %759 = reshape(%756, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
  %760 = reshape(%757, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
  %761 = reshape(%758, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %762 = @func_771(%759, %760, %761) /* ty=(Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) */;
  %763 = cast(meta[relay.Constant][33] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %764 = reshape(%763, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %765 = @func_2205(%764) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
  %766 = @func_6598() /* ty=Tensor[(3, 16, 5), float32] */;
  %767 = %741.0;
  %768 = %742.0;
  %769 = @func_6901() /* ty=Tensor[(11, 6, 7), bool] */;
  %770 = %750.3;
  %771 = %755.0;
  %772 = %762.2;
  %773 = %765.0;
  (%766, %745, meta[relay.Constant][30] /* ty=Tensor[(462), float64] */, %767, %768, %769, %770, %var_9008, meta[relay.Constant][31] /* ty=Tensor[(900), float32] */, %771, %var_9012, %var_9013, %772, meta[relay.Constant][32] /* ty=Tensor[(234), int8] */, %773, meta[relay.Constant][33] /* ty=Tensor[(224), float64] */)
}

def @func_8134(%var_8111: Tensor[(240, 2), uint16]) -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(16, 3, 10), int64], Tensor[(240, 2), uint16]) {
  %774 = cast(%var_8111, dtype="uint16") /* ty=Tensor[(240, 2), uint16] */;
  %775 = cast(%var_8111, dtype="uint16") /* ty=Tensor[(240, 2), uint16] */;
  %776 = reshape(%774, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint16] */;
  %777 = reshape(%775, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint16] */;
  %778 = @func_4956(%776, %777) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(16, 3, 10), int64]) */;
  %779 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %780 = @func_6768() /* ty=Tensor[(3, 16, 5), float32] */;
  %781 = %778.1;
  (%779, %780, %781, %var_8111)
}

def @func_5856(%var_5833: float64, %var_5834: Tensor[(13, 1, 13), float64]) -> (Tensor[(13, 1, 13), float64], Tensor[(13, 1, 13), float64], Tensor[(16, 13, 13), float32]) {
  %782 = cast(%var_5833, dtype="float64") /* ty=float64 */;
  %783 = cast(%var_5834, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
  %784 = cast(%var_5834, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
  %785 = @func_3181() /* ty=(Tensor[(16, 13, 13), float32],) */;
  %786 = floor_divide(%782, %783) /* ty=Tensor[(13, 1, 13), float64] */;
  %787 = log2(%784) /* ty=Tensor[(13, 1, 13), float64] */;
  %788 = %785.0;
  (%786, %787, %788)
}

def @func_8518(%var_8515: Tensor[(16, 12, 4), float64]) -> (Tensor[(16, 12, 4), float64],) {
  %789 = cast(%var_8515, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
  %790 = log(%789) /* ty=Tensor[(16, 12, 4), float64] */;
  (%790,)
}

def @func_9580() -> (Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float32]) {
  %791 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %792 = @func_3935() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */;
  %793 = %791.4;
  %794 = %792.0;
  (%793, %794)
}

def @func_431() -> (Tensor[(3, 16, 5), float64],) {
  %795 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  (%795,)
}

def @func_2778() -> (Tensor[(3, 16, 5), float64],) {
  %796 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %797 = %796.0;
  (%797,)
}

def @func_158() -> (Tensor[(11, 6, 7), bool],) {
  %798 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
  (%798,)
}

def @func_3504() -> Tensor[(3, 16, 5), float64] {
  %799 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %799.1
}

def @func_4249(%var_4241: Tensor[(3, 14, 16), float32]) -> Tensor[(3, 14, 16), float32] {
  %800 = cast(%var_4241, dtype="float32") /* ty=Tensor[(3, 14, 16), float32] */;
  acosh(%800) /* ty=Tensor[(3, 14, 16), float32] */
}

def @func_680(%var_674: Tensor[(288), float64]) -> (Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
  %801 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
  %802 = cast(%var_674, dtype="float64") /* ty=Tensor[(288), float64] */;
  %803 = reshape(%802, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %804 = @func_480(%803) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) */;
  %805 = %801.0;
  %806 = %804.0;
  (%805, %806, %var_674)
}

def @func_2849() -> Tensor[(3, 16, 5), uint8] {
  %807 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %807.0
}

def @func_5061() -> (Tensor[(3, 16, 5), float64],) {
  %808 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %809 = %808.1;
  (%809,)
}

def @func_6812(%var_6804: Tensor[(3, 3, 8), bool], %var_6805: Tensor[(3, 3, 8), bool]) -> (Tensor[(3, 3, 8), bool], Tensor[(3, 3, 8), float32]) {
  %810 = cast(%var_6805, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %811 = shape_of(%var_6804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%var_6804, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %814 = cast(%var_6805, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
  %815 = logical_and(%812, %813) /* ty=Tensor[(3, 3, 8), bool] */;
  %816 = acosh(%814) /* ty=Tensor[(3, 3, 8), float32] */;
  (%815, %816)
}

def @func_10147() -> (Tensor[(11, 6, 7), float64],) {
  %817 = @func_5373() /* ty=Tensor[(11, 6, 7), float64] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %819 = cosh(%818) /* ty=Tensor[(11, 6, 7), float64] */;
  (%819,)
}

def @func_5279() -> (Tensor[(3, 16, 5), uint8],) {
  %820 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %821 = %820.0;
  (%821,)
}

def @func_7693() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
  %822 = @func_6079() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %823 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %824 = cast(%823, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %825 = reshape(%824, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %826 = @func_1822(%825) /* ty=(Tensor[(3, 16, 5), float32],) */;
  %827 = %822.0;
  %828 = %826.0;
  (%827, %823, %828)
}

def @func_6346() -> Tensor[(3, 16, 5), uint8] {
  %829 = @func_5771() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8]) */;
  %829.0
}

def @func_2427(%var_2395: Tensor[(3, 16, 5), float32], %var_2421: Tensor[(3, 16, 5), uint8]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
  %830 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %831 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %832 = %831.1;
  %833 = cast(%var_2395, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %837 = bitwise_and(%835, %836) /* ty=Tensor[(3, 16, 5), uint8] */;
  %838 = cast(%var_2421, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%837, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %842 = %830.0;
  %843 = power(%840, %841) /* ty=Tensor[(3, 16, 5), float32] */;
  (%842, %843)
}

def @func_10816() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) {
  %844 = @func_4676() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
  %845 = @func_8354() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %846 = @func_7693() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %847 = %844.0;
  %848 = %845.0;
  %849 = %846.2;
  %850 = @func_3019() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%847, %848, %849, %850)
}

def @func_7998() -> (Tensor[(4, 2, 10), float64],) {
  %851 = @func_6764() /* ty=(Tensor[(4, 2, 10), float64],) */;
  %852 = %851.0;
  (%852,)
}

def @func_5739() -> Tensor[(3, 16, 5), float32] {
  %853 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %853.1
}

def @func_8354() -> (Tensor[(3, 16, 5), float64],) {
  %854 = @func_4910() /* ty=Tensor[(3, 16, 5), float64] */;
  (%854,)
}

def @func_6079() -> (Tensor[(11, 6, 7), bool],) {
  %855 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
  %856 = %855.1;
  (%856,)
}

def @func_5373() -> Tensor[(11, 6, 7), float64] {
  %857 = @func_2673() /* ty=(Tensor[(11, 6, 7), float64],) */;
  %857.0
}

def @func_9728() -> (Tensor[(3, 16, 5), float64],) {
  %858 = @func_5599() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %859 = %858.0;
  (%859,)
}

def @func_6262(%var_6245: Tensor[(12, 3, 15), float64], %var_6258: Tensor[(12, 3, 15), float32]) -> Tensor[(12, 3, 15), bool] {
  %860 = cast(%var_6245, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %861 = atanh(%860) /* ty=Tensor[(12, 3, 15), float64] */;
  %862 = cast(%861, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %863 = tan(%862) /* ty=Tensor[(12, 3, 15), float64] */;
  %864 = cast(%863, dtype="float32") /* ty=Tensor[(12, 3, 15), float32] */;
  %865 = cos(%864) /* ty=Tensor[(12, 3, 15), float32] */;
  %866 = cast(%var_6258, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%868, %869) /* ty=Tensor[(12, 3, 15), bool] */
}

def @func_7172() -> Tensor[(3, 16, 5), uint8] {
  @func_6346() /* ty=Tensor[(3, 16, 5), uint8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8136(%var_8135: Tensor[(240, 2), uint16]) -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(16, 3, 10), int64], Tensor[(240, 2), uint16]) {
  %8 = fn (%var_8111: Tensor[(240, 2), uint16]) -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(16, 3, 10), int64], Tensor[(240, 2), uint16]) {
    %0 = cast(%var_8111, dtype="uint16") /* ty=Tensor[(240, 2), uint16] */;
    %1 = cast(%var_8111, dtype="uint16") /* ty=Tensor[(240, 2), uint16] */;
    %2 = reshape(%0, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint16] */;
    %3 = reshape(%1, newshape=[16, 3, 10]) /* ty=Tensor[(16, 3, 10), uint16] */;
    %4 = @func_4956(%2, %3) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(16, 3, 10), int64]) */;
    %5 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
    %6 = @func_6768() /* ty=Tensor[(3, 16, 5), float32] */;
    %7 = %4.1;
    (%5, %6, %7, %var_8111)
  };
  %8(%var_8135) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(16, 3, 10), int64], Tensor[(240, 2), uint16]) */
}

def @func_664() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) {
  %9 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %10 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %11 = %9.0;
  %12 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %13 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %14 = %10.0;
  (%11, %12, %13, %14)
}

def @func_1260() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) {
  @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */
}

def @func_7487() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32]) {
  @func_7485() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32]) */
}

def @func_8791() -> Tensor[(3, 16, 5), uint8] {
  @func_3064() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_3855() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) {
  %15 = @func_2137() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) */;
  %16 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %17 = %15.1;
  %18 = %16.0;
  (%17, %18)
}

def @func_4956(%var_4937: Tensor[(16, 3, 10), uint16], %var_4938: Tensor[(16, 3, 10), uint16]) -> (Tensor[(11, 6, 7), bool], Tensor[(16, 3, 10), int64]) {
  %19 = @func_4618() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %20 = cast(%var_4937, dtype="float32") /* ty=Tensor[(16, 3, 10), float32] */;
  %21 = asinh(%20) /* ty=Tensor[(16, 3, 10), float32] */;
  %22 = cast(%var_4938, dtype="uint16") /* ty=Tensor[(16, 3, 10), uint16] */;
  %23 = shape_of(%var_4937, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_4937, dtype="uint16") /* ty=Tensor[(16, 3, 10), uint16] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %26 = multiply(%24, %25) /* ty=Tensor[(16, 3, 10), uint16] */;
  %27 = cast(%26, dtype="int64") /* ty=Tensor[(16, 3, 10), int64] */;
  %28 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%21, dtype="int64") /* ty=Tensor[(16, 3, 10), int64] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %31 = %19.0;
  %32 = bitwise_and(%29, %30) /* ty=Tensor[(16, 3, 10), int64] */;
  (%31, %32)
}

def @func_3935() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) {
  %33 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %34 = @func_3803() /* ty=Tensor[(3, 16, 5), float32] */;
  %35 = %33.3;
  (%34, %35)
}

def @func_2508() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  @func_2506() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */
}

def @func_1795() -> (Tensor[(3, 16, 5), uint8],) {
  @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_6285() -> Tensor[(3, 16, 5), float64] {
  @func_6283() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_9859() -> Tensor[(3, 16, 5), uint8] {
  @func_9857() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_6204(%var_6192: Tensor[(5, 3, 5), uint8], %var_6193: Tensor[(5, 3, 5), uint8]) -> Tensor[(5, 3, 5), bool] {
  %36 = cast(%var_6193, dtype="bool") /* ty=Tensor[(5, 3, 5), bool] */;
  %37 = shape_of(%var_6192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_6192, dtype="bool") /* ty=Tensor[(5, 3, 5), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%38, %39) /* ty=Tensor[(5, 3, 5), bool] */
}

def @func_7468() -> (Tensor[(3, 16, 5), float64], Tensor[(5, 14, 13), float32], Tensor[(910), float32]) {
  %45 = fn () -> (Tensor[(3, 16, 5), float64], Tensor[(5, 14, 13), float32], Tensor[(910), float32]) {
    %40 = cast(meta[relay.Constant][0] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
    %41 = reshape(%40, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float32] */;
    %42 = @func_2318(%41) /* ty=(Tensor[(5, 14, 13), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
    %43 = @func_511() /* ty=Tensor[(3, 16, 5), float64] */;
    %44 = %42.0;
    (%43, %44, meta[relay.Constant][0] /* ty=Tensor[(910), float32] */)
  };
  %45() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(5, 14, 13), float32], Tensor[(910), float32]) */
}

def @func_10639() -> (Tensor[(3, 16, 5), float64],) {
  @func_10637() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_3955() -> (Tensor[(8, 7, 10), float32],) {
  %48 = fn () -> (Tensor[(8, 7, 10), float32],) {
    %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
    %47 = sinh(%46) /* ty=Tensor[(8, 7, 10), float32] */;
    (%47,)
  };
  %48() /* ty=(Tensor[(8, 7, 10), float32],) */
}

def @func_3780(%var_3778: Tensor[(77, 6), bool], %var_3779: Tensor[(77, 6), bool]) -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), float32], Tensor[(77, 6), int16]) {
  %61 = fn (%var_3761: Tensor[(77, 6), bool], %var_3763: Tensor[(77, 6), bool]) -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), float32], Tensor[(77, 6), int16]) {
    %49 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
    %50 = cast(%var_3761, dtype="bool") /* ty=Tensor[(77, 6), bool] */;
    %51 = reshape(%50, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), bool] */;
    %52 = @func_1660(%51) /* ty=(Tensor[(11, 6, 7), float64], Tensor[(11, 6, 7), float32]) */;
    %53 = cast(%var_3763, dtype="int16") /* ty=Tensor[(77, 6), int16] */;
    %54 = shape_of(%var_3761, dtype="int32") /* ty=Tensor[(2), int32] */;
    %55 = cast(%var_3761, dtype="int16") /* ty=Tensor[(77, 6), int16] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %57 = %49.0;
    %58 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
    %59 = %52.1;
    %60 = left_shift(%55, %56) /* ty=Tensor[(77, 6), int16] */;
    (%57, %58, %59, %60)
  };
  %61(%var_3778, %var_3779) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), float32], Tensor[(77, 6), int16]) */
}

def @func_4960(%var_4958: Tensor[(16, 3, 10), uint16], %var_4959: Tensor[(16, 3, 10), uint16]) -> (Tensor[(11, 6, 7), bool], Tensor[(16, 3, 10), int64]) {
  @func_4956(%var_4958, %var_4959) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(16, 3, 10), int64]) */
}

def @func_4271() -> (Tensor[(3, 16, 5), uint8],) {
  %64 = fn () -> (Tensor[(3, 16, 5), uint8],) {
    %62 = @func_3935() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */;
    %63 = %62.1;
    (%63,)
  };
  %64() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_9632(%var_9630: Tensor[(4, 7, 6), float64], %var_9631: Tensor[(4, 7, 6), float64]) -> (Tensor[(4, 7, 6), float64], Tensor[(3, 16, 5), float32], Tensor[(224), float64], Tensor[(224), float64]) {
  @func_9628(%var_9630, %var_9631) /* ty=(Tensor[(4, 7, 6), float64], Tensor[(3, 16, 5), float32], Tensor[(224), float64], Tensor[(224), float64]) */
}

def @func_432() -> (Tensor[(3, 16, 5), float64],) {
  %66 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %65 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
    (%65,)
  };
  %66() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_5137() -> Tensor[(3, 16, 5), float32] {
  %67 = fn () -> Tensor[(3, 16, 5), float32] {
    @func_3803() /* ty=Tensor[(3, 16, 5), float32] */
  };
  %67() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_5740() -> Tensor[(3, 16, 5), float32] {
  %69 = fn () -> Tensor[(3, 16, 5), float32] {
    %68 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
    %68.1
  };
  %69() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_9408() -> Tensor[(3, 16, 5), float32] {
  %70 = fn () -> Tensor[(3, 16, 5), float32] {
    @func_5739() /* ty=Tensor[(3, 16, 5), float32] */
  };
  %70() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_3066() -> Tensor[(3, 16, 5), uint8] {
  @func_3064() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_666() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) {
  @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */
}

def @func_6153() -> (Tensor[(11, 6, 7), bool],) {
  @func_6151() /* ty=(Tensor[(11, 6, 7), bool],) */
}

def @func_836(%var_831: Tensor[(288), float64]) -> (Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float32], Tensor[(288), float64]) {
  %71 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %72 = %71.0;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %74 = cast(%var_831, dtype="float64") /* ty=Tensor[(288), float64] */;
  %75 = reshape(%74, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %76 = @func_480(%75) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) */;
  %77 = cosh(%73) /* ty=Tensor[(3, 16, 5), float32] */;
  %78 = %76.1;
  (%77, %78, %var_831)
}

def @func_2023(%var_2021: Tensor[(3, 16, 5), uint8]) -> (Tensor[(4, 14, 4), float64], Tensor[(198), float64], Tensor[(3, 16, 5), uint64]) {
  @func_2020(%var_2021) /* ty=(Tensor[(4, 14, 4), float64], Tensor[(198), float64], Tensor[(3, 16, 5), uint64]) */
}

def @func_1128() -> (Tensor[(3, 16, 5), float64],) {
  %79 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %80 = %79.0;
  (%80,)
}

def @func_10637() -> (Tensor[(3, 16, 5), float64],) {
  %81 = @func_6406() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %82 = %81.0;
  (%82,)
}

def @func_3645(%var_3643: Tensor[(2704), float32], %var_3644: Tensor[(2704), float32]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(2704), int32], Tensor[(3, 16, 5), float32], Tensor[(2704), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), bool], Tensor[(3, 16, 5), uint8]) {
  %127 = fn (%var_3577: Tensor[(2704), float32], %var_3598: Tensor[(2704), float32]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(2704), int32], Tensor[(3, 16, 5), float32], Tensor[(2704), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), bool], Tensor[(3, 16, 5), uint8]) {
    %83 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
    %84 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
    %85 = cast(%var_3577, dtype="float32") /* ty=Tensor[(2704), float32] */;
    %86 = reshape(%85, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
    %87 = @func_2929(%86) /* ty=(Tensor[(2704), int32],) */;
    %88 = %84.0;
    %89 = cast(%88, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %90 = %83.0;
    %91 = cast(%90, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
    %92 = reshape(%89, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), float32] */;
    %93 = reshape(%91, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
    %94 = @func_2427(%92, %93) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
    %95 = cast(%var_3598, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %96 = shape_of(%var_3577, dtype="int32") /* ty=Tensor[(1), int32] */;
    %97 = cast(%var_3577, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?), bool] */;
    %99 = logical_or(%97, %98) /* ty=Tensor[(2704), bool] */;
    %100 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
    %101 = %100.0;
    %102 = cast(%var_3577, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(1), int32] */;
    %104 = cast(%101, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?), bool] */;
    %106 = logical_and(%104, %105) /* ty=Tensor[(2704), bool] */;
    %107 = cast(%106, dtype="int32") /* ty=Tensor[(2704), int32] */;
    %108 = shape_of(%99, dtype="int32") /* ty=Tensor[(1), int32] */;
    %109 = cast(%99, dtype="int32") /* ty=Tensor[(2704), int32] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?), int32] */;
    %111 = logical_xor(%109, %110) /* ty=Tensor[(2704), int32] */;
    %112 = cast(%111, dtype="float64") /* ty=Tensor[(2704), float64] */;
    %113 = log10(%112) /* ty=Tensor[(2704), float64] */;
    %114 = cast(%113, dtype="float64") /* ty=Tensor[(2704), float64] */;
    %115 = @func_2089() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), bool]) */;
    %116 = cast(%99, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %117 = shape_of(%113, dtype="int32") /* ty=Tensor[(1), int32] */;
    %118 = cast(%113, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?), bool] */;
    %120 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
    %121 = %87.0;
    %122 = %94.1;
    %123 = exp(%114) /* ty=Tensor[(2704), float64] */;
    %124 = %115.1;
    %125 = less_equal(%118, %119) /* ty=Tensor[(2704), bool] */;
    %126 = %120.0;
    (%90, %88, %121, %122, %123, %124, %125, %126)
  };
  %127(%var_3643, %var_3644) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(2704), int32], Tensor[(3, 16, 5), float32], Tensor[(2704), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), bool], Tensor[(3, 16, 5), uint8]) */
}

def @func_2849() -> Tensor[(3, 16, 5), uint8] {
  %128 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %128.0
}

def @func_365() -> (Tensor[(3, 16, 5), uint8],) {
  %129 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%129,)
}

def @func_980() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) {
  %147 = fn () -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) {
    %130 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
    %131 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
    %132 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
    %133 = %132.1;
    %134 = cast(%133, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
    %135 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%131, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %138 = cast(meta[relay.Constant][2] /* ty=Tensor[(2704), float32] */, dtype="float32") /* ty=Tensor[(2704), float32] */;
    %139 = reshape(%138, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float32] */;
    %140 = @func_567(%139) /* ty=(Tensor[(16, 13, 13), float32],) */;
    %141 = %140.0;
    %142 = cast(%141, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
    %143 = %130.1;
    %144 = @func_511() /* ty=Tensor[(3, 16, 5), float64] */;
    %145 = greater(%136, %137) /* ty=Tensor[(11, 6, 7), bool] */;
    %146 = sinh(%142) /* ty=Tensor[(16, 13, 13), float32] */;
    (%143, %144, %145, meta[relay.Constant][2] /* ty=Tensor[(2704), float32] */, %146)
  };
  %147() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */
}

def @func_4589() -> (Tensor[(3, 16, 5), float64],) {
  @func_4587() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_4308() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  %152 = fn () -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
    %148 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
    %149 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
    %150 = %148.2;
    %151 = %149.1;
    (%150, %151)
  };
  %152() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */
}

def @func_5945() -> Tensor[(11, 6, 7), float64] {
  @func_5943() /* ty=Tensor[(11, 6, 7), float64] */
}

def @func_1793() -> (Tensor[(3, 16, 5), uint8],) {
  %153 = @func_1424() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */;
  %154 = %153.1;
  (%154,)
}

def @func_1426() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) {
  @func_1424() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */
}

def @func_48() -> Tensor[(11, 6, 7), bool] {
  %157 = fn () -> Tensor[(11, 6, 7), bool] {
    %155 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 1, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 1, 7), bool] */;
    %156 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 6, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
    logical_or(%155, %156) /* ty=Tensor[(11, 6, 7), bool] */
  };
  %157() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_4814() -> Tensor[(3, 16, 5), uint8] {
  @func_2849() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_4413(%var_4412: Tensor[(8, 7, 10), float32]) -> (Tensor[(3, 16, 5), float64], Tensor[(8, 7, 10), bool], Tensor[(8, 7, 10), bool]) {
  %181 = fn (%var_4400: Tensor[(8, 7, 10), float32]) -> (Tensor[(3, 16, 5), float64], Tensor[(8, 7, 10), bool], Tensor[(8, 7, 10), bool]) {
    %158 = @func_4307() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
    %159 = @func_3954() /* ty=(Tensor[(8, 7, 10), float32],) */;
    %160 = %159.0;
    %161 = cast(%160, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
    %162 = log2(%161) /* ty=Tensor[(8, 7, 10), float32] */;
    %163 = cast(%162, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
    %164 = rsqrt(%163) /* ty=Tensor[(8, 7, 10), float32] */;
    %165 = cast(%var_4400, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
    %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %167 = cast(%164, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %169 = cast(%160, dtype="int16") /* ty=Tensor[(8, 7, 10), int16] */;
    %170 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %171 = cast(%162, dtype="int16") /* ty=Tensor[(8, 7, 10), int16] */;
    %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %173 = maximum(%171, %172) /* ty=Tensor[(8, 7, 10), int16] */;
    %174 = cast(%173, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
    %175 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%164, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %178 = %158.1;
    %179 = equal(%167, %168) /* ty=Tensor[(8, 7, 10), bool] */;
    %180 = logical_or(%176, %177) /* ty=Tensor[(8, 7, 10), bool] */;
    (%178, %179, %180)
  };
  %181(%var_4412) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(8, 7, 10), bool], Tensor[(8, 7, 10), bool]) */
}

def @func_6408() -> (Tensor[(3, 16, 5), float64],) {
  @func_6406() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_2932(%var_2930: Tensor[(2704), float32]) -> (Tensor[(2704), int32],) {
  @func_2929(%var_2930) /* ty=(Tensor[(2704), int32],) */
}

def @func_3006() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) {
  %192 = fn () -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) {
    %182 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
    %183 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %184 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
    %185 = cast(meta[relay.Constant][5] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %186 = reshape(%185, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), float64] */;
    %187 = @func_1739(%186) /* ty=(Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) */;
    %188 = %182.0;
    %189 = %183.0;
    %190 = %184.1;
    %191 = %187.1;
    (%188, %189, %190, %191, meta[relay.Constant][5] /* ty=Tensor[(198), float64] */)
  };
  %192() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) */
}

def @func_8562() -> (Tensor[(3, 16, 5), uint8],) {
  @func_8560() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_5532() -> Tensor[(3, 16, 5), uint8] {
  %193 = fn () -> Tensor[(3, 16, 5), uint8] {
    @func_4149() /* ty=Tensor[(3, 16, 5), uint8] */
  };
  %193() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_2779() -> (Tensor[(3, 16, 5), float64],) {
  %196 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %194 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %195 = %194.0;
    (%195,)
  };
  %196() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_5164(%var_5162: Tensor[(650), float64]) -> (Tensor[(3, 16, 5), uint8], Tensor[(5, 13, 10), float64], Tensor[(650), float64]) {
  @func_5161(%var_5162) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(5, 13, 10), float64], Tensor[(650), float64]) */
}

def @func_2267() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) {
  @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */
}

def @func_1741(%var_1740: Tensor[(2, 11, 9), float64]) -> (Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) {
  %202 = fn (%var_1727: Tensor[(2, 11, 9), float64]) -> (Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) {
    %197 = cast(%var_1727, dtype="float64") /* ty=Tensor[(2, 11, 9), float64] */;
    %198 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 14), float64] */;
    %199 = reshape(%198, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
    %200 = rsqrt(%197) /* ty=Tensor[(2, 11, 9), float64] */;
    %201 = @func_993(%199) /* ty=Tensor[(4, 14, 4), float64] */;
    (%200, %201, meta[relay.Constant][6] /* ty=Tensor[(16, 14), float64] */)
  };
  %202(%var_1740) /* ty=(Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) */
}

def @func_209() -> (Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) {
  @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */
}

def @func_8518(%var_8515: Tensor[(16, 12, 4), float64]) -> (Tensor[(16, 12, 4), float64],) {
  %203 = cast(%var_8515, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
  %204 = log(%203) /* ty=Tensor[(16, 12, 4), float64] */;
  (%204,)
}

def @func_8713(%var_8712: Tensor[(2704, 1), float32]) -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(2704, 1), float32]) {
  %215 = fn (%var_8697: Tensor[(2704, 1), float32]) -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(2704, 1), float32]) {
    %205 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
    %206 = @func_2137() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) */;
    %207 = cast(%var_8697, dtype="float32") /* ty=Tensor[(2704, 1), float32] */;
    %208 = cast(%var_8697, dtype="float32") /* ty=Tensor[(2704, 1), float32] */;
    %209 = reshape(%207, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
    %210 = reshape(%208, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
    %211 = @func_3642(%209, %210) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(2704), int32], Tensor[(3, 16, 5), float32], Tensor[(2704), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), bool], Tensor[(3, 16, 5), uint8]) */;
    %212 = %205.0;
    %213 = %206.0;
    %214 = %211.7;
    (%212, %213, %214, %var_8697)
  };
  %215(%var_8712) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(2704, 1), float32]) */
}

def @func_10148() -> (Tensor[(11, 6, 7), float64],) {
  %219 = fn () -> (Tensor[(11, 6, 7), float64],) {
    %216 = @func_5373() /* ty=Tensor[(11, 6, 7), float64] */;
    %217 = cast(%216, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
    %218 = cosh(%217) /* ty=Tensor[(11, 6, 7), float64] */;
    (%218,)
  };
  %219() /* ty=(Tensor[(11, 6, 7), float64],) */
}

def @func_6081() -> (Tensor[(11, 6, 7), bool],) {
  @func_6079() /* ty=(Tensor[(11, 6, 7), bool],) */
}

def @func_9362() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) {
  @func_9360() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */
}

def @func_4157() -> (Tensor[(11, 6, 7), bool],) {
  %220 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
  (%220,)
}

def @func_5492(%var_5452: Tensor[(4, 2, 7), float32]) -> (Tensor[(6, 3, 6), bool], Tensor[(108), float64], Tensor[(4, 2, 7), float64]) {
  %221 = cast(meta[relay.Constant][7] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %222 = reshape(%221, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
  %223 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(4, 2, 7), float32] */;
  %224 = sinh(%223) /* ty=Tensor[(4, 2, 7), float32] */;
  %225 = cast(%var_5452, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %229 = greater_equal(%227, %228) /* ty=Tensor[(4, 2, 7), bool] */;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(4, 2, 7), float64] */;
  %231 = @func_4339(%222) /* ty=Tensor[(6, 3, 6), bool] */;
  %232 = exp(%230) /* ty=Tensor[(4, 2, 7), float64] */;
  (%231, meta[relay.Constant][7] /* ty=Tensor[(108), float64] */, %232)
}

def @func_4936() -> Tensor[(16, 13, 13), float32] {
  %234 = fn () -> Tensor[(16, 13, 13), float32] {
    %233 = @func_1466() /* ty=(Tensor[(16, 13, 13), float32],) */;
    %233.0
  };
  %234() /* ty=Tensor[(16, 13, 13), float32] */
}

def @func_7408() -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(14, 7, 10), uint32], Tensor[(980), uint32]) {
  %235 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
  %236 = @func_4270() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %237 = cast(meta[relay.Constant][9] /* ty=Tensor[(980), uint32] */, dtype="uint32") /* ty=Tensor[(980), uint32] */;
  %238 = cast(meta[relay.Constant][9] /* ty=Tensor[(980), uint32] */, dtype="uint32") /* ty=Tensor[(980), uint32] */;
  %239 = reshape(%237, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint32] */;
  %240 = reshape(%238, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint32] */;
  %241 = @func_5739() /* ty=Tensor[(3, 16, 5), float32] */;
  %242 = %235.1;
  %243 = %236.0;
  %244 = @func_6474(%239, %240) /* ty=Tensor[(14, 7, 10), uint32] */;
  (%241, %242, %243, %244, meta[relay.Constant][9] /* ty=Tensor[(980), uint32] */)
}

def @func_7870() -> (Tensor[(11, 6, 7), float64],) {
  @func_7868() /* ty=(Tensor[(11, 6, 7), float64],) */
}

def @func_4028() -> Tensor[(3, 16, 5), float32] {
  @func_3269() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_4223(%var_4221: Tensor[(5, 13, 10), float64], %var_4222: Tensor[(5, 13, 10), float64]) -> Tensor[(5, 13, 10), float64] {
  %249 = fn (%var_4215: Tensor[(5, 13, 10), float64], %var_4216: Tensor[(5, 13, 10), float64]) -> Tensor[(5, 13, 10), float64] {
    %245 = cast(%var_4216, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
    %246 = shape_of(%var_4215, dtype="int32") /* ty=Tensor[(3), int32] */;
    %247 = cast(%var_4215, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%247, %248) /* ty=Tensor[(5, 13, 10), float64] */
  };
  %249(%var_4221, %var_4222) /* ty=Tensor[(5, 13, 10), float64] */
}

def @func_2748() -> Tensor[(3, 16, 5), float64] {
  %251 = fn () -> Tensor[(3, 16, 5), float64] {
    %250 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
    %250.0
  };
  %251() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_10445() -> Tensor[(3, 16, 5), uint8] {
  %252 = @func_8560() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %252.0
}

def @func_8392() -> (Tensor[(3, 16, 5), float32], Tensor[(6, 15, 10), float32], Tensor[(90, 10), float32]) {
  %253 = @func_8282() /* ty=(Tensor[(3, 16, 5), float32],) */;
  %254 = cast(meta[relay.Constant][10] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %255 = reshape(%254, newshape=[6, 15, 10]) /* ty=Tensor[(6, 15, 10), float32] */;
  %256 = %253.0;
  %257 = @func_2740(%255) /* ty=Tensor[(6, 15, 10), float32] */;
  (%256, %257, meta[relay.Constant][10] /* ty=Tensor[(90, 10), float32] */)
}

def @func_5934(%var_5890: Tensor[(15, 5, 10), float32]) -> (Tensor[(15, 5, 10), float64], Tensor[(8, 1, 11), float32]) {
  %258 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 10), float32] */;
  %259 = cast(%var_5890, dtype="float32") /* ty=Tensor[(15, 5, 10), float32] */;
  %260 = floor_mod(%258, %259) /* ty=Tensor[(15, 5, 10), float32] */;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %262 = @func_234() /* ty=(Tensor[(8, 1, 11), float32],) */;
  %263 = sigmoid(%261) /* ty=Tensor[(15, 5, 10), float64] */;
  %264 = %262.0;
  (%263, %264)
}

def @func_8284() -> (Tensor[(3, 16, 5), float32],) {
  @func_8282() /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_6769() -> Tensor[(3, 16, 5), float32] {
  %265 = fn () -> Tensor[(3, 16, 5), float32] {
    @func_4028() /* ty=Tensor[(3, 16, 5), float32] */
  };
  %265() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_3724(%var_3715: Tensor[(10, 13, 3), float64]) -> (Tensor[(10, 13, 3), float64], Tensor[(3, 16, 5), float64]) {
  %266 = cast(%var_3715, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %267 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %268 = sin(%266) /* ty=Tensor[(10, 13, 3), float64] */;
  %269 = %267.0;
  (%268, %269)
}

def @func_9447() -> (Tensor[(3, 16, 5), float64],) {
  %272 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %270 = @func_6406() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %271 = %270.0;
    (%271,)
  };
  %272() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_1555() -> (Tensor[(3, 16, 5), float64],) {
  %277 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %273 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
    %274 = %273.0;
    %275 = cast(%274, dtype="float64") /* ty=Tensor[(3, 16, 5), float64] */;
    %276 = acos(%275) /* ty=Tensor[(3, 16, 5), float64] */;
    (%276,)
  };
  %277() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_1693() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) {
  %278 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %279 = %278.1;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %281 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %282 = log(%280) /* ty=Tensor[(3, 16, 5), float32] */;
  %283 = %281.2;
  (%282, %283)
}

def @func_3182() -> (Tensor[(16, 13, 13), float32],) {
  %286 = fn () -> (Tensor[(16, 13, 13), float32],) {
    %284 = @func_1466() /* ty=(Tensor[(16, 13, 13), float32],) */;
    %285 = %284.0;
    (%285,)
  };
  %286() /* ty=(Tensor[(16, 13, 13), float32],) */
}

def @func_6515() -> (Tensor[(3, 16, 5), float32],) {
  %287 = @func_5234() /* ty=Tensor[(3, 16, 5), float32] */;
  (%287,)
}

def @func_2835(%var_2833: Tensor[(234), int8]) -> (Tensor[(3, 16, 5), uint8], Tensor[(13, 3, 6), float64], Tensor[(234), int8], Tensor[(288), float64]) {
  @func_2832(%var_2833) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(13, 3, 6), float64], Tensor[(234), int8], Tensor[(288), float64]) */
}

def @func_4149() -> Tensor[(3, 16, 5), uint8] {
  @func_148() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_4159() -> (Tensor[(11, 6, 7), bool],) {
  @func_4157() /* ty=(Tensor[(11, 6, 7), bool],) */
}

def @func_5010() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  @func_5008() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */
}

def @func_567(%var_559: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), float32],) {
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %289 = shape_of(%var_559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_559, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %292 = floor_mod(%290, %291) /* ty=Tensor[(16, 13, 13), float32] */;
  (%292,)
}

def @func_2506() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  %293 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
  %294 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %295 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %296 = %293.0;
  %297 = %294.1;
  %298 = %295.0;
  (%296, %297, %298)
}

def @func_6262(%var_6245: Tensor[(12, 3, 15), float64], %var_6258: Tensor[(12, 3, 15), float32]) -> Tensor[(12, 3, 15), bool] {
  %299 = cast(%var_6245, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %300 = atanh(%299) /* ty=Tensor[(12, 3, 15), float64] */;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %302 = tan(%301) /* ty=Tensor[(12, 3, 15), float64] */;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(12, 3, 15), float32] */;
  %304 = cos(%303) /* ty=Tensor[(12, 3, 15), float32] */;
  %305 = cast(%var_6258, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%307, %308) /* ty=Tensor[(12, 3, 15), bool] */
}

def @func_2320(%var_2319: Tensor[(5, 14, 13), float32]) -> (Tensor[(5, 14, 13), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
  %315 = fn (%var_2312: Tensor[(5, 14, 13), float32]) -> (Tensor[(5, 14, 13), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
    %309 = cast(%var_2312, dtype="float32") /* ty=Tensor[(5, 14, 13), float32] */;
    %310 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %311 = reshape(%310, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %312 = @func_680(%311) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
    %313 = asin(%309) /* ty=Tensor[(5, 14, 13), float32] */;
    %314 = %312.1;
    (%313, %314, meta[relay.Constant][13] /* ty=Tensor[(288), float64] */)
  };
  %315(%var_2319) /* ty=(Tensor[(5, 14, 13), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */
}

def @func_9582() -> (Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float32]) {
  @func_9580() /* ty=(Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float32]) */
}

def @func_2431(%var_2429: Tensor[(3, 16, 5), float32], %var_2430: Tensor[(3, 16, 5), uint8]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
  @func_2427(%var_2429, %var_2430) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */
}

def @func_5951() -> Tensor[(11, 6, 7), bool] {
  %317 = fn () -> Tensor[(11, 6, 7), bool] {
    %316 = @func_1424() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */;
    %316.5
  };
  %317() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_6478(%var_6476: Tensor[(14, 7, 10), uint32], %var_6477: Tensor[(14, 7, 10), uint32]) -> Tensor[(14, 7, 10), uint32] {
  @func_6474(%var_6476, %var_6477) /* ty=Tensor[(14, 7, 10), uint32] */
}

def @func_5773() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8]) {
  @func_5771() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8]) */
}

def @func_10405() -> Tensor[(11, 6, 7), bool] {
  @func_10403() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_6208(%var_6206: Tensor[(5, 3, 5), uint8], %var_6207: Tensor[(5, 3, 5), uint8]) -> Tensor[(5, 3, 5), bool] {
  @func_6204(%var_6206, %var_6207) /* ty=Tensor[(5, 3, 5), bool] */
}

def @func_1130() -> (Tensor[(3, 16, 5), float64],) {
  @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_3803() -> Tensor[(3, 16, 5), float32] {
  %318 = @func_1928() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */;
  %318.1
}

def @func_3976() -> Tensor[(3, 16, 5), float64] {
  @func_3974() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_5161(%var_5157: Tensor[(650), float64]) -> (Tensor[(3, 16, 5), uint8], Tensor[(5, 13, 10), float64], Tensor[(650), float64]) {
  %319 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %320 = cast(%var_5157, dtype="float64") /* ty=Tensor[(650), float64] */;
  %321 = cast(%var_5157, dtype="float64") /* ty=Tensor[(650), float64] */;
  %322 = reshape(%320, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %323 = reshape(%321, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %324 = %319.2;
  %325 = @func_4220(%322, %323) /* ty=Tensor[(5, 13, 10), float64] */;
  (%324, %325, %var_5157)
}

def @func_2526(%var_2525: Tensor[(3, 16, 5), uint8]) -> Tensor[(3, 16, 5), int64] {
  %332 = fn (%var_2519: Tensor[(3, 16, 5), uint8]) -> Tensor[(3, 16, 5), int64] {
    %326 = @func_1928() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */;
    %327 = %326.0;
    %328 = cast(%var_2519, dtype="int64") /* ty=Tensor[(3, 16, 5), int64] */;
    %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
    %330 = cast(%327, dtype="int64") /* ty=Tensor[(3, 16, 5), int64] */;
    %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    logical_xor(%330, %331) /* ty=Tensor[(3, 16, 5), int64] */
  };
  %332(%var_2525) /* ty=Tensor[(3, 16, 5), int64] */
}

def @func_10762() -> Tensor[(11, 6, 7), float64] {
  %334 = fn () -> Tensor[(11, 6, 7), float64] {
    %333 = @func_7043() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), float64]) */;
    %333.1
  };
  %334() /* ty=Tensor[(11, 6, 7), float64] */
}

def @func_8835() -> Tensor[(3, 16, 5), float64] {
  @func_8833() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_4139(%var_4137: Tensor[(288), float64]) -> (Tensor[(8, 1, 11), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), int64], Tensor[(2, 120), uint8], Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float32]) {
  @func_4136(%var_4137) /* ty=(Tensor[(8, 1, 11), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), int64], Tensor[(2, 120), uint8], Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float32]) */
}

def @func_7252(%var_7251: Tensor[(11, 6, 7), float64]) -> (Tensor[(11, 6, 7), bool],) {
  %344 = fn (%var_7234: Tensor[(11, 6, 7), float64]) -> (Tensor[(11, 6, 7), bool],) {
    %335 = @func_6079() /* ty=(Tensor[(11, 6, 7), bool],) */;
    %336 = %335.0;
    %337 = cast(%336, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
    %338 = log2(%337) /* ty=Tensor[(11, 6, 7), float64] */;
    %339 = cast(%var_7234, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%338, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %343 = less_equal(%341, %342) /* ty=Tensor[(11, 6, 7), bool] */;
    (%343,)
  };
  %344(%var_7251) /* ty=(Tensor[(11, 6, 7), bool],) */
}

def @func_1258() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) {
  %345 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %346 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  (%345, %346)
}

def @func_6765() -> (Tensor[(4, 2, 10), float64],) {
  %349 = fn () -> (Tensor[(4, 2, 10), float64],) {
    %347 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
    %348 = atanh(%347) /* ty=Tensor[(4, 2, 10), float64] */;
    (%348,)
  };
  %349() /* ty=(Tensor[(4, 2, 10), float64],) */
}

def @func_9248(%var_9247: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), bool], Tensor[(16, 13, 13), float32], Tensor[(980), uint32]) {
  %360 = fn (%var_9205: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), bool], Tensor[(16, 13, 13), float32], Tensor[(980), uint32]) {
    %350 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
    %351 = cast(%var_9205, dtype="bool") /* ty=Tensor[(16, 13, 13), bool] */;
    %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %353 = cast(%350, dtype="bool") /* ty=Tensor[(16, 13, 13), bool] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %355 = cast(%350, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
    %356 = @func_7408() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(14, 7, 10), uint32], Tensor[(980), uint32]) */;
    %357 = logical_and(%353, %354) /* ty=Tensor[(16, 13, 13), bool] */;
    %358 = log2(%355) /* ty=Tensor[(16, 13, 13), float32] */;
    %359 = %356.4;
    (%357, %358, %359)
  };
  %360(%var_9247) /* ty=(Tensor[(16, 13, 13), bool], Tensor[(16, 13, 13), float32], Tensor[(980), uint32]) */
}

def @func_3505() -> Tensor[(3, 16, 5), float64] {
  %362 = fn () -> Tensor[(3, 16, 5), float64] {
    %361 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
    %361.1
  };
  %362() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_3020() -> Tensor[(3, 16, 5), uint8] {
  %364 = fn () -> Tensor[(3, 16, 5), uint8] {
    %363 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
    %363.0
  };
  %364() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_236() -> (Tensor[(8, 1, 11), float32],) {
  @func_234() /* ty=(Tensor[(8, 1, 11), float32],) */
}

def @func_7173() -> Tensor[(3, 16, 5), uint8] {
  %365 = fn () -> Tensor[(3, 16, 5), uint8] {
    @func_6346() /* ty=Tensor[(3, 16, 5), uint8] */
  };
  %365() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_7485() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32]) {
  %366 = @func_4270() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %367 = @func_3416() /* ty=(Tensor[(3, 16, 5), float32],) */;
  %368 = %366.0;
  %369 = %367.0;
  (%368, %369)
}

def @func_996(%var_994: Tensor[(4, 14, 4), float64]) -> Tensor[(4, 14, 4), float64] {
  @func_993(%var_994) /* ty=Tensor[(4, 14, 4), float64] */
}

def @func_7868() -> (Tensor[(11, 6, 7), float64],) {
  %370 = @func_5943() /* ty=Tensor[(11, 6, 7), float64] */;
  (%370,)
}

def @func_5937(%var_5935: Tensor[(15, 5, 10), float32]) -> (Tensor[(15, 5, 10), float64], Tensor[(8, 1, 11), float32]) {
  @func_5934(%var_5935) /* ty=(Tensor[(15, 5, 10), float64], Tensor[(8, 1, 11), float32]) */
}

def @func_6902() -> Tensor[(11, 6, 7), bool] {
  %371 = fn () -> Tensor[(11, 6, 7), bool] {
    @func_5950() /* ty=Tensor[(11, 6, 7), bool] */
  };
  %371() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_8230() -> (Tensor[(3, 16, 5), float32],) {
  %373 = fn () -> (Tensor[(3, 16, 5), float32],) {
    %372 = @func_5136() /* ty=Tensor[(3, 16, 5), float32] */;
    (%372,)
  };
  %373() /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_8435(%var_8403: Tensor[(3, 3, 5), int64], %var_8425: Tensor[(1, 900), float32]) -> (Tensor[(3, 3, 5), int64], Tensor[(11, 6, 7), bool], Tensor[(6, 15, 10), float32], Tensor[(1, 900), float32], Tensor[(3, 16, 5), float64]) {
  %374 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 3, 5), int64] */, dtype="int64") /* ty=Tensor[(3, 3, 5), int64] */;
  %375 = shape_of(%var_8403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_8403, dtype="int64") /* ty=Tensor[(3, 3, 5), int64] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %378 = @func_7588() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float32], Tensor[(198), float64], Tensor[(3, 16, 5), float64]) */;
  %379 = cast(%var_8425, dtype="float32") /* ty=Tensor[(1, 900), float32] */;
  %380 = reshape(%379, newshape=[6, 15, 10]) /* ty=Tensor[(6, 15, 10), float32] */;
  %381 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %382 = multiply(%376, %377) /* ty=Tensor[(3, 3, 5), int64] */;
  %383 = %378.1;
  %384 = @func_2740(%380) /* ty=Tensor[(6, 15, 10), float32] */;
  %385 = %381.0;
  (%382, %383, %384, %var_8425, %385)
}

def @main() -> (Tensor[(3, 16, 5), float64], Tensor[(2028), int64], Tensor[(13, 12, 13), float64]) {
  %386 = @func_3857() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %387 = cast(meta[relay.Constant][16] /* ty=Tensor[(2028), int64] */, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %388 = cast(meta[relay.Constant][16] /* ty=Tensor[(2028), int64] */, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %389 = reshape(%387, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), int64] */;
  %390 = reshape(%388, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), int64] */;
  %391 = @func_9798(%389, %390) /* ty=(Tensor[(13, 12, 13), int64],) */;
  %392 = %391.0;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %394 = %386.1;
  %395 = asinh(%393) /* ty=Tensor[(13, 12, 13), float64] */;
  (%394, meta[relay.Constant][16] /* ty=Tensor[(2028), int64] */, %395)
}

def @func_10291() -> (Tensor[(3, 16, 5), float64], Tensor[(15, 5, 10), float64], Tensor[(750), float32], Tensor[(3, 16, 5), float64]) {
  @func_10289() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(15, 5, 10), float64], Tensor[(750), float32], Tensor[(3, 16, 5), float64]) */
}

def @func_7199() -> (Tensor[(3, 16, 5), uint8],) {
  %396 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %397 = %396.0;
  (%397,)
}

def @func_5279() -> (Tensor[(3, 16, 5), uint8],) {
  %398 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %399 = %398.0;
  (%399,)
}

def @func_839(%var_837: Tensor[(288), float64]) -> (Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float32], Tensor[(288), float64]) {
  @func_836(%var_837) /* ty=(Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float32], Tensor[(288), float64]) */
}

def @func_3193() -> (Tensor[(16, 13, 13), float32],) {
  %400 = @func_3181() /* ty=(Tensor[(16, 13, 13), float32],) */;
  %401 = %400.0;
  (%401,)
}

def @func_6085() -> (Tensor[(3, 16, 5), uint8],) {
  %404 = fn () -> (Tensor[(3, 16, 5), uint8],) {
    %402 = @func_5008() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
    %403 = %402.0;
    (%403,)
  };
  %404() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_5943() -> Tensor[(11, 6, 7), float64] {
  %405 = @func_2673() /* ty=(Tensor[(11, 6, 7), float64],) */;
  %405.0
}

def @func_5593(%var_5591: Tensor[(2, 5), float64], %var_5592: Tensor[(288), float64]) -> (Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) {
  %415 = fn (%var_5544: Tensor[(2, 5), float64], %var_5551: Tensor[(288), float64]) -> (Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) {
    %406 = cast(%var_5544, dtype="float64") /* ty=Tensor[(2, 5), float64] */;
    %407 = cast(%var_5551, dtype="float64") /* ty=Tensor[(288), float64] */;
    %408 = reshape(%407, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %409 = @func_680(%408) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
    %410 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %411 = reshape(%410, newshape=[8, 2, 12]) /* ty=Tensor[(8, 2, 12), float64] */;
    %412 = tan(%406) /* ty=Tensor[(2, 5), float64] */;
    %413 = %409.1;
    %414 = @func_1591(%411) /* ty=Tensor[(8, 2, 12), float64] */;
    (%412, %413, %var_5551, %414, meta[relay.Constant][17] /* ty=Tensor[(192), float64] */)
  };
  %415(%var_5591, %var_5592) /* ty=(Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) */
}

def @func_2138() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) {
  %420 = fn () -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) {
    %416 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
    %417 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
    %418 = %416.0;
    %419 = %417.0;
    (%418, %419)
  };
  %420() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) */
}

def @func_2832(%var_2812: Tensor[(234), int8]) -> (Tensor[(3, 16, 5), uint8], Tensor[(13, 3, 6), float64], Tensor[(234), int8], Tensor[(288), float64]) {
  %421 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
  %422 = cast(%var_2812, dtype="int8") /* ty=Tensor[(234), int8] */;
  %423 = cast(%var_2812, dtype="int8") /* ty=Tensor[(234), int8] */;
  %424 = cast(meta[relay.Constant][18] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %425 = reshape(%422, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
  %426 = reshape(%423, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
  %427 = reshape(%424, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %428 = @func_771(%425, %426, %427) /* ty=(Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) */;
  %429 = %421.1;
  %430 = %428.0;
  (%429, %430, %var_2812, meta[relay.Constant][18] /* ty=Tensor[(288), float64] */)
}

def @func_8355() -> (Tensor[(3, 16, 5), float64],) {
  %432 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %431 = @func_4910() /* ty=Tensor[(3, 16, 5), float64] */;
    (%431,)
  };
  %432() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_7410() -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(14, 7, 10), uint32], Tensor[(980), uint32]) {
  @func_7408() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(14, 7, 10), uint32], Tensor[(980), uint32]) */
}

def @func_9628(%var_9588: Tensor[(4, 7, 6), float64], %var_9589: Tensor[(4, 7, 6), float64]) -> (Tensor[(4, 7, 6), float64], Tensor[(3, 16, 5), float32], Tensor[(224), float64], Tensor[(224), float64]) {
  %433 = cast(%var_9589, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %434 = shape_of(%var_9588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_9588, dtype="float64") /* ty=Tensor[(4, 7, 6), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %437 = cast(meta[relay.Constant][19] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %438 = reshape(%437, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %439 = @func_2205(%438) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
  %440 = floor_mod(%435, %436) /* ty=Tensor[(4, 7, 6), float64] */;
  %441 = @func_6768() /* ty=Tensor[(3, 16, 5), float32] */;
  %442 = %439.3;
  (%440, %441, %442, meta[relay.Constant][19] /* ty=Tensor[(224), float64] */)
}

def @func_682(%var_681: Tensor[(288), float64]) -> (Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
  %449 = fn (%var_674: Tensor[(288), float64]) -> (Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) {
    %443 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
    %444 = cast(%var_674, dtype="float64") /* ty=Tensor[(288), float64] */;
    %445 = reshape(%444, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
    %446 = @func_480(%445) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) */;
    %447 = %443.0;
    %448 = %446.0;
    (%447, %448, %var_674)
  };
  %449(%var_681) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */
}

def @func_1871() -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) {
  %450 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %451 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %452 = %450.0;
  %453 = %451.0;
  (%452, %453)
}

def @func_8282() -> (Tensor[(3, 16, 5), float32],) {
  %454 = @func_4796() /* ty=Tensor[(3, 16, 5), float32] */;
  (%454,)
}

def @func_4151() -> Tensor[(3, 16, 5), uint8] {
  @func_4149() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_8439(%var_8437: Tensor[(3, 3, 5), int64], %var_8438: Tensor[(1, 900), float32]) -> (Tensor[(3, 3, 5), int64], Tensor[(11, 6, 7), bool], Tensor[(6, 15, 10), float32], Tensor[(1, 900), float32], Tensor[(3, 16, 5), float64]) {
  @func_8435(%var_8437, %var_8438) /* ty=(Tensor[(3, 3, 5), int64], Tensor[(11, 6, 7), bool], Tensor[(6, 15, 10), float32], Tensor[(1, 900), float32], Tensor[(3, 16, 5), float64]) */
}

def @func_10817() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) {
  %462 = fn () -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) {
    %455 = @func_4676() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
    %456 = @func_8354() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %457 = @func_7693() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
    %458 = %455.0;
    %459 = %456.0;
    %460 = %457.2;
    %461 = @func_3019() /* ty=Tensor[(3, 16, 5), uint8] */;
    (%458, %459, %460, %461)
  };
  %462() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */
}

def @func_2765() -> Tensor[(2704), float32] {
  %464 = fn () -> Tensor[(2704), float32] {
    %463 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
    %463.3
  };
  %464() /* ty=Tensor[(2704), float32] */
}

def @func_10555(%var_10552: Tensor[(65, 10), float64], %var_10553: Tensor[(56, 12), float32], %var_10554: Tensor[(2704), float32]) -> (Tensor[(3, 16, 5), float32], Tensor[(5, 13, 10), float64], Tensor[(65, 10), float64], Tensor[(3, 14, 16), float32], Tensor[(56, 12), float64], Tensor[(16, 13, 13), float32], Tensor[(2704), float32]) {
  @func_10550(%var_10552, %var_10553, %var_10554) /* ty=(Tensor[(3, 16, 5), float32], Tensor[(5, 13, 10), float64], Tensor[(65, 10), float64], Tensor[(3, 14, 16), float32], Tensor[(56, 12), float64], Tensor[(16, 13, 13), float32], Tensor[(2704), float32]) */
}

def @func_2929(%var_2916: Tensor[(2704), float32]) -> (Tensor[(2704), int32],) {
  %465 = @func_2764() /* ty=Tensor[(2704), float32] */;
  %466 = cast(%var_2916, dtype="int32") /* ty=Tensor[(2704), int32] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(%465, dtype="int32") /* ty=Tensor[(2704), int32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), int32] */;
  %470 = left_shift(%468, %469) /* ty=Tensor[(2704), int32] */;
  (%470,)
}

def @func_512() -> Tensor[(3, 16, 5), float64] {
  %472 = fn () -> Tensor[(3, 16, 5), float64] {
    %471 = @func_431() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %471.0
  };
  %472() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_3805() -> Tensor[(3, 16, 5), float32] {
  @func_3803() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_4439() -> (Tensor[(2704), float32],) {
  %473 = @func_2764() /* ty=Tensor[(2704), float32] */;
  (%473,)
}

def @func_9729() -> (Tensor[(3, 16, 5), float64],) {
  %476 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %474 = @func_5599() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %475 = %474.0;
    (%475,)
  };
  %476() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_4797() -> Tensor[(3, 16, 5), float32] {
  %477 = fn () -> Tensor[(3, 16, 5), float32] {
    @func_3269() /* ty=Tensor[(3, 16, 5), float32] */
  };
  %477() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_207() -> (Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) {
  %478 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %479 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %480 = %479.0;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %482 = %478.0;
  %483 = sin(%481) /* ty=Tensor[(11, 6, 7), float32] */;
  %484 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%482, %483, %484)
}

def @func_10403() -> Tensor[(11, 6, 7), bool] {
  @func_6901() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_9559() -> (Tensor[(3, 16, 5), float64],) {
  @func_9557() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_7044() -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), float64]) {
  %488 = fn () -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), float64]) {
    %485 = @func_3935() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */;
    %486 = %485.1;
    %487 = @func_5373() /* ty=Tensor[(11, 6, 7), float64] */;
    (%486, %487)
  };
  %488() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), float64]) */
}

def @func_10746() -> (Tensor[(3, 16, 5), uint8],) {
  %491 = fn () -> (Tensor[(3, 16, 5), uint8],) {
    %489 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
    %490 = %489.3;
    (%490,)
  };
  %491() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_4816() -> Tensor[(3, 16, 5), uint8] {
  @func_4814() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_8494() -> (Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) {
  %496 = fn () -> (Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) {
    %492 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
    %493 = @func_4157() /* ty=(Tensor[(11, 6, 7), bool],) */;
    %494 = %492.1;
    %495 = %493.0;
    (%494, %495)
  };
  %496() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */
}

def @func_5008() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  %497 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %498 = %497.2;
  %499 = @func_3504() /* ty=Tensor[(3, 16, 5), float64] */;
  (%498, %499)
}

def @func_6283() -> Tensor[(3, 16, 5), float64] {
  %500 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %500.0
}

def @func_299() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) {
  @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */
}

def @func_9798(%var_9796: Tensor[(13, 12, 13), int64], %var_9797: Tensor[(13, 12, 13), int64]) -> (Tensor[(13, 12, 13), int64],) {
  %506 = fn (%var_9784: Tensor[(13, 12, 13), int64], %var_9785: Tensor[(13, 12, 13), int64]) -> (Tensor[(13, 12, 13), int64],) {
    %501 = cast(%var_9785, dtype="int64") /* ty=Tensor[(13, 12, 13), int64] */;
    %502 = shape_of(%var_9784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %503 = cast(%var_9784, dtype="int64") /* ty=Tensor[(13, 12, 13), int64] */;
    %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %505 = bitwise_or(%503, %504) /* ty=Tensor[(13, 12, 13), int64] */;
    (%505,)
  };
  %506(%var_9796, %var_9797) /* ty=(Tensor[(13, 12, 13), int64],) */
}

def @func_1824(%var_1823: Tensor[(3, 16, 5), uint8]) -> (Tensor[(3, 16, 5), float32],) {
  %514 = fn (%var_1812: Tensor[(3, 16, 5), uint8]) -> (Tensor[(3, 16, 5), float32],) {
    %507 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
    %508 = %507.0;
    %509 = cast(%var_1812, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%508, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %513 = subtract(%511, %512) /* ty=Tensor[(3, 16, 5), float32] */;
    (%513,)
  };
  %514(%var_1823) /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_3924() -> (Tensor[(3, 16, 5), float32],) {
  %523 = fn () -> (Tensor[(3, 16, 5), float32],) {
    %515 = @func_2747() /* ty=Tensor[(3, 16, 5), float64] */;
    %516 = cast(%515, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %517 = asin(%516) /* ty=Tensor[(3, 16, 5), float32] */;
    %518 = cast(%517, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %519 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(%515, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %522 = floor_divide(%520, %521) /* ty=Tensor[(3, 16, 5), float32] */;
    (%522,)
  };
  %523() /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_3270() -> Tensor[(3, 16, 5), float32] {
  %525 = fn () -> Tensor[(3, 16, 5), float32] {
    %524 = @func_3005() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) */;
    %524.2
  };
  %525() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_8521(%var_8519: Tensor[(16, 12, 4), float64]) -> (Tensor[(16, 12, 4), float64],) {
  @func_8518(%var_8519) /* ty=(Tensor[(16, 12, 4), float64],) */
}

def @func_4587() -> (Tensor[(3, 16, 5), float64],) {
  %526 = @func_1174() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */;
  %527 = %526.0;
  (%527,)
}

def @func_330(%var_329: Tensor[(11, 2, 15), float64]) -> (Tensor[(11, 2, 15), float64], Tensor[(3, 16, 5), float64]) {
  %533 = fn (%var_317: Tensor[(11, 2, 15), float64]) -> (Tensor[(11, 2, 15), float64], Tensor[(3, 16, 5), float64]) {
    %528 = cast(%var_317, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %529 = log2(%528) /* ty=Tensor[(11, 2, 15), float64] */;
    %530 = cast(%529, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %531 = cos(%530) /* ty=Tensor[(11, 2, 15), float64] */;
    %532 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
    (%531, %532)
  };
  %533(%var_329) /* ty=(Tensor[(11, 2, 15), float64], Tensor[(3, 16, 5), float64]) */
}

def @func_7999() -> (Tensor[(4, 2, 10), float64],) {
  %536 = fn () -> (Tensor[(4, 2, 10), float64],) {
    %534 = @func_6764() /* ty=(Tensor[(4, 2, 10), float64],) */;
    %535 = %534.0;
    (%535,)
  };
  %536() /* ty=(Tensor[(4, 2, 10), float64],) */
}

def @func_2608() -> (Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) {
  %541 = fn () -> (Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) {
    %537 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
    %538 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
    %539 = %537.3;
    %540 = %538.2;
    (%539, %540)
  };
  %541() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */
}

def @func_3418() -> (Tensor[(3, 16, 5), float32],) {
  @func_3416() /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_1591(%var_1588: Tensor[(8, 2, 12), float64]) -> Tensor[(8, 2, 12), float64] {
  %542 = cast(%var_1588, dtype="float64") /* ty=Tensor[(8, 2, 12), float64] */;
  asin(%542) /* ty=Tensor[(8, 2, 12), float64] */
}

def @func_482(%var_481: Tensor[(12, 12, 2), float64]) -> (Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) {
  %547 = fn (%var_460: Tensor[(12, 12, 2), float64]) -> (Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) {
    %543 = cast(%var_460, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
    %544 = cast(%var_460, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
    %545 = exp(%543) /* ty=Tensor[(12, 12, 2), float64] */;
    %546 = acos(%544) /* ty=Tensor[(12, 12, 2), float32] */;
    (%545, %546)
  };
  %547(%var_481) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) */
}

def @func_1467() -> (Tensor[(16, 13, 13), float32],) {
  %552 = fn () -> (Tensor[(16, 13, 13), float32],) {
    %548 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
    %549 = %548.4;
    %550 = cast(%549, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
    %551 = sin(%550) /* ty=Tensor[(16, 13, 13), float32] */;
    (%551,)
  };
  %552() /* ty=(Tensor[(16, 13, 13), float32],) */
}

def @func_1873() -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) {
  @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */
}

def @func_9857() -> Tensor[(3, 16, 5), uint8] {
  %553 = @func_6860() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %553.0
}

def @func_993(%var_981: Tensor[(4, 14, 4), float64]) -> Tensor[(4, 14, 4), float64] {
  %554 = cast(%var_981, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  rsqrt(%554) /* ty=Tensor[(4, 14, 4), float64] */
}

def @func_9557() -> (Tensor[(3, 16, 5), float64],) {
  %555 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %556 = %555.0;
  (%556,)
}

def @func_7077() -> Tensor[(11, 6, 7), bool] {
  %557 = fn () -> Tensor[(11, 6, 7), bool] {
    @func_6901() /* ty=Tensor[(11, 6, 7), bool] */
  };
  %557() /* ty=Tensor[(11, 6, 7), bool] */
}

def @func_2089() -> (Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), bool]) {
  %558 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %559 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
  %560 = %558.2;
  (%559, %560)
}

def @func_1424() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) {
  %561 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %562 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %563 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %564 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %565 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
  %566 = %561.0;
  %567 = %562.0;
  %568 = %563.0;
  %569 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
  %570 = %564.0;
  %571 = %565.0;
  (%566, %567, %568, %569, %570, %571)
}

def @func_8394() -> (Tensor[(3, 16, 5), float32], Tensor[(6, 15, 10), float32], Tensor[(90, 10), float32]) {
  @func_8392() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(6, 15, 10), float32], Tensor[(90, 10), float32]) */
}

def @func_6534(%var_6533: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), int16],) {
  %578 = fn (%var_6527: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), int16],) {
    %572 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
    %573 = cast(%var_6527, dtype="int16") /* ty=Tensor[(16, 13, 13), int16] */;
    %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%572, dtype="int16") /* ty=Tensor[(16, 13, 13), int16] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %577 = multiply(%575, %576) /* ty=Tensor[(16, 13, 13), int16] */;
    (%577,)
  };
  %578(%var_6533) /* ty=(Tensor[(16, 13, 13), int16],) */
}

def @func_7694() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
  %586 = fn () -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
    %579 = @func_6079() /* ty=(Tensor[(11, 6, 7), bool],) */;
    %580 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
    %581 = cast(%580, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
    %582 = reshape(%581, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
    %583 = @func_1822(%582) /* ty=(Tensor[(3, 16, 5), float32],) */;
    %584 = %579.0;
    %585 = %583.0;
    (%584, %580, %585)
  };
  %586() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */
}

def @func_4678() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  @func_4676() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */
}

def @func_705() -> Tensor[(3, 16, 5), float64] {
  @func_703() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_1663(%var_1661: Tensor[(11, 6, 7), bool]) -> (Tensor[(11, 6, 7), float64], Tensor[(11, 6, 7), float32]) {
  @func_1660(%var_1661) /* ty=(Tensor[(11, 6, 7), float64], Tensor[(11, 6, 7), float32]) */
}

def @func_3484(%var_3482: Tensor[(15, 5, 12), float32]) -> (Tensor[(15, 5, 12), float32], Tensor[(3, 16, 5), uint8], Tensor[(15, 5, 12), uint64]) {
  @func_3481(%var_3482) /* ty=(Tensor[(15, 5, 12), float32], Tensor[(3, 16, 5), uint8], Tensor[(15, 5, 12), uint64]) */
}

def @func_10550(%var_10474: Tensor[(65, 10), float64], %var_10487: Tensor[(56, 12), float32], %var_10545: Tensor[(2704), float32]) -> (Tensor[(3, 16, 5), float32], Tensor[(5, 13, 10), float64], Tensor[(65, 10), float64], Tensor[(3, 14, 16), float32], Tensor[(56, 12), float64], Tensor[(16, 13, 13), float32], Tensor[(2704), float32]) {
  %587 = cast(%var_10474, dtype="float64") /* ty=Tensor[(65, 10), float64] */;
  %588 = cast(%var_10474, dtype="float64") /* ty=Tensor[(65, 10), float64] */;
  %589 = reshape(%587, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %590 = reshape(%588, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), float64] */;
  %591 = cast(%var_10487, dtype="float32") /* ty=Tensor[(56, 12), float32] */;
  %592 = reshape(%591, newshape=[3, 14, 16]) /* ty=Tensor[(3, 14, 16), float32] */;
  %593 = cast(%var_10487, dtype="float64") /* ty=Tensor[(56, 12), float64] */;
  %594 = cast(%var_10545, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %595 = reshape(%594, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float32] */;
  %596 = @func_567(%595) /* ty=(Tensor[(16, 13, 13), float32],) */;
  %597 = @func_6598() /* ty=Tensor[(3, 16, 5), float32] */;
  %598 = @func_4220(%589, %590) /* ty=Tensor[(5, 13, 10), float64] */;
  %599 = @func_4249(%592) /* ty=Tensor[(3, 14, 16), float32] */;
  %600 = cosh(%593) /* ty=Tensor[(56, 12), float64] */;
  %601 = %596.0;
  (%597, %598, %var_10474, %599, %600, %601, %var_10545)
}

def @func_8767() -> (Tensor[(3, 16, 5), float64], Tensor[(192), float64], Tensor[(5, 2), float64], Tensor[(288), float64]) {
  @func_8765() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(192), float64], Tensor[(5, 2), float64], Tensor[(288), float64]) */
}

def @func_8793() -> Tensor[(3, 16, 5), uint8] {
  @func_8791() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_2674() -> (Tensor[(11, 6, 7), float64],) {
  %606 = fn () -> (Tensor[(11, 6, 7), float64],) {
    %602 = @func_2137() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64]) */;
    %603 = %602.0;
    %604 = cast(%603, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
    %605 = acos(%604) /* ty=Tensor[(11, 6, 7), float64] */;
    (%605,)
  };
  %606() /* ty=(Tensor[(11, 6, 7), float64],) */
}

def @func_6151() -> (Tensor[(11, 6, 7), bool],) {
  %607 = @func_5950() /* ty=Tensor[(11, 6, 7), bool] */;
  (%607,)
}

def @func_9183() -> Tensor[(3, 16, 5), uint8] {
  @func_3019() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_8310() -> Tensor[(3, 16, 5), uint8] {
  %608 = @func_4307() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) */;
  %608.0
}

def @func_5771() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8]) {
  %609 = @func_1424() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool]) */;
  %610 = %609.1;
  %611 = @func_4149() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%610, %611)
}

def @func_5647(%var_5646: Tensor[(16, 13, 13), float32]) -> Tensor[(16, 13, 13), uint16] {
  %617 = fn (%var_5640: Tensor[(16, 13, 13), float32]) -> Tensor[(16, 13, 13), uint16] {
    %612 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
    %613 = cast(%var_5640, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
    %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%612, dtype="uint16") /* ty=Tensor[(16, 13, 13), uint16] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    right_shift(%615, %616) /* ty=Tensor[(16, 13, 13), uint16] */
  };
  %617(%var_5646) /* ty=Tensor[(16, 13, 13), uint16] */
}

def @func_8036() -> Tensor[(3, 16, 5), float32] {
  %618 = fn () -> Tensor[(3, 16, 5), float32] {
    @func_3803() /* ty=Tensor[(3, 16, 5), float32] */
  };
  %618() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_703() -> Tensor[(3, 16, 5), float64] {
  @func_511() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_3937() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) {
  @func_3935() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */
}

def @func_4620() -> (Tensor[(11, 6, 7), bool],) {
  @func_4618() /* ty=(Tensor[(11, 6, 7), bool],) */
}

def @func_1175() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
  %623 = fn () -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
    %619 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
    %620 = cast(%619, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %621 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
    %622 = cos(%620) /* ty=Tensor[(3, 16, 5), float32] */;
    (%621, %622)
  };
  %623() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) */
}

def @func_3974() -> Tensor[(3, 16, 5), float64] {
  %624 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %624.1
}

def @func_8962() -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  %628 = fn () -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
    %625 = @func_6151() /* ty=(Tensor[(11, 6, 7), bool],) */;
    %626 = @func_5234() /* ty=Tensor[(3, 16, 5), float32] */;
    %627 = %625.0;
    (%626, %627)
  };
  %628() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */
}

def @func_3416() -> (Tensor[(3, 16, 5), float32],) {
  %629 = @func_3005() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) */;
  %630 = %629.2;
  (%630,)
}

def @func_234() -> (Tensor[(8, 1, 11), float32],) {
  %631 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 1, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 11), float32] */;
  %632 = cosh(%631) /* ty=Tensor[(8, 1, 11), float32] */;
  (%632,)
}

def @func_5062() -> (Tensor[(3, 16, 5), float64],) {
  %635 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %633 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
    %634 = %633.1;
    (%634,)
  };
  %635() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_9360() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) {
  %636 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %639 = tan(%638) /* ty=Tensor[(3, 16, 5), float32] */;
  %640 = @func_8833() /* ty=Tensor[(3, 16, 5), float64] */;
  (%639, %640)
}

def @func_4030() -> Tensor[(3, 16, 5), float32] {
  @func_4028() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_3481(%var_3455: Tensor[(15, 5, 12), float32]) -> (Tensor[(15, 5, 12), float32], Tensor[(3, 16, 5), uint8], Tensor[(15, 5, 12), uint64]) {
  %641 = cast(%var_3455, dtype="float32") /* ty=Tensor[(15, 5, 12), float32] */;
  %642 = cast(%var_3455, dtype="float32") /* ty=Tensor[(15, 5, 12), float32] */;
  %643 = sigmoid(%642) /* ty=Tensor[(15, 5, 12), float32] */;
  %644 = cast(%var_3455, dtype="uint64") /* ty=Tensor[(15, 5, 12), uint64] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="uint64") /* ty=Tensor[(15, 5, 12), uint64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %648 = tan(%641) /* ty=Tensor[(15, 5, 12), float32] */;
  %649 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %650 = subtract(%646, %647) /* ty=Tensor[(15, 5, 12), uint64] */;
  (%648, %649, %650)
}

def @func_5539() -> (Tensor[(2704), float32],) {
  %653 = fn () -> (Tensor[(2704), float32],) {
    %651 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
    %652 = %651.0;
    (%652,)
  };
  %653() /* ty=(Tensor[(2704), float32],) */
}

def @func_776(%var_773: Tensor[(13, 3, 6), int8], %var_774: Tensor[(13, 3, 6), int8], %var_775: Tensor[(288), float64]) -> (Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) {
  @func_771(%var_773, %var_774, %var_775) /* ty=(Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) */
}

def @func_4911() -> Tensor[(3, 16, 5), float64] {
  %655 = fn () -> Tensor[(3, 16, 5), float64] {
    %654 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %654.0
  };
  %655() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_5495(%var_5493: Tensor[(4, 2, 7), float32]) -> (Tensor[(6, 3, 6), bool], Tensor[(108), float64], Tensor[(4, 2, 7), float64]) {
  @func_5492(%var_5493) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(108), float64], Tensor[(4, 2, 7), float64]) */
}

def @func_8312() -> Tensor[(3, 16, 5), uint8] {
  @func_8310() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_5281() -> (Tensor[(3, 16, 5), uint8],) {
  @func_5279() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_4136(%var_4113: Tensor[(288), float64]) -> (Tensor[(8, 1, 11), float32], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), int64], Tensor[(2, 120), uint8], Tensor[(3, 16, 5), float32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float32]) {
  %656 = @func_234() /* ty=(Tensor[(8, 1, 11), float32],) */;
  %657 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %658 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 120), uint8] */, dtype="uint8") /* ty=Tensor[(2, 120), uint8] */;
  %659 = reshape(%658, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %660 = @func_2524(%659) /* ty=Tensor[(3, 16, 5), int64] */;
  %661 = cast(%660, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %662 = reshape(%661, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %663 = @func_1822(%662) /* ty=(Tensor[(3, 16, 5), float32],) */;
  %664 = cast(%var_4113, dtype="float64") /* ty=Tensor[(288), float64] */;
  %665 = reshape(%664, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %666 = @func_480(%665) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float32]) */;
  %667 = @func_2778() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %668 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %669 = @func_3923() /* ty=(Tensor[(3, 16, 5), float32],) */;
  %670 = %656.0;
  %671 = %657.0;
  %672 = %663.0;
  %673 = %666.0;
  %674 = %667.0;
  %675 = %668.0;
  %676 = %669.0;
  (%670, %671, %660, meta[relay.Constant][21] /* ty=Tensor[(2, 120), uint8] */, %672, %673, %var_4113, %674, %675, %676)
}

def @func_6816(%var_6814: Tensor[(3, 3, 8), bool], %var_6815: Tensor[(3, 3, 8), bool]) -> (Tensor[(3, 3, 8), bool], Tensor[(3, 3, 8), float32]) {
  @func_6812(%var_6814, %var_6815) /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 3, 8), float32]) */
}

def @func_367() -> (Tensor[(3, 16, 5), uint8],) {
  @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_2851() -> Tensor[(3, 16, 5), uint8] {
  @func_2849() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_2091() -> (Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), bool]) {
  @func_2089() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), bool]) */
}

def @func_4487() -> (Tensor[(3, 16, 5), float64], Tensor[(2704), float32]) {
  %681 = fn () -> (Tensor[(3, 16, 5), float64], Tensor[(2704), float32]) {
    %677 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %678 = @func_4439() /* ty=(Tensor[(2704), float32],) */;
    %679 = %677.0;
    %680 = %678.0;
    (%679, %680)
  };
  %681() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(2704), float32]) */
}

def @func_5859(%var_5857: float64, %var_5858: Tensor[(13, 1, 13), float64]) -> (Tensor[(13, 1, 13), float64], Tensor[(13, 1, 13), float64], Tensor[(16, 13, 13), float32]) {
  %689 = fn (%var_5833: float64, %var_5834: Tensor[(13, 1, 13), float64]) -> (Tensor[(13, 1, 13), float64], Tensor[(13, 1, 13), float64], Tensor[(16, 13, 13), float32]) {
    %682 = cast(%var_5833, dtype="float64") /* ty=float64 */;
    %683 = cast(%var_5834, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
    %684 = cast(%var_5834, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
    %685 = @func_3181() /* ty=(Tensor[(16, 13, 13), float32],) */;
    %686 = floor_divide(%682, %683) /* ty=Tensor[(13, 1, 13), float64] */;
    %687 = log2(%684) /* ty=Tensor[(13, 1, 13), float64] */;
    %688 = %685.0;
    (%686, %687, %688)
  };
  %689(%var_5857, %var_5858) /* ty=(Tensor[(13, 1, 13), float64], Tensor[(13, 1, 13), float64], Tensor[(16, 13, 13), float32]) */
}

def @func_5235() -> Tensor[(3, 16, 5), float32] {
  %690 = fn () -> Tensor[(3, 16, 5), float32] {
    @func_4028() /* ty=Tensor[(3, 16, 5), float32] */
  };
  %690() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_7589() -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float32], Tensor[(198), float64], Tensor[(3, 16, 5), float64]) {
  %705 = fn () -> (Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float32], Tensor[(198), float64], Tensor[(3, 16, 5), float64]) {
    %691 = @func_7485() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32]) */;
    %692 = @func_4157() /* ty=(Tensor[(11, 6, 7), bool],) */;
    %693 = @func_1793() /* ty=(Tensor[(3, 16, 5), uint8],) */;
    %694 = %693.0;
    %695 = cast(%694, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %696 = erf(%695) /* ty=Tensor[(3, 16, 5), float32] */;
    %697 = cast(%696, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
    %698 = reshape(%697, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
    %699 = @func_2020(%698) /* ty=(Tensor[(4, 14, 4), float64], Tensor[(198), float64], Tensor[(3, 16, 5), uint64]) */;
    %700 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %701 = %691.0;
    %702 = %692.0;
    %703 = %699.1;
    %704 = %700.0;
    (%701, %702, %696, %703, %704)
  };
  %705() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float32], Tensor[(198), float64], Tensor[(3, 16, 5), float64]) */
}

def @func_6347() -> Tensor[(3, 16, 5), uint8] {
  %707 = fn () -> Tensor[(3, 16, 5), uint8] {
    %706 = @func_5771() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8]) */;
    %706.0
  };
  %707() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_4537() -> (Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float64]) {
  %708 = @func_3193() /* ty=(Tensor[(16, 13, 13), float32],) */;
  %709 = @func_2778() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %710 = %708.0;
  %711 = %709.0;
  (%710, %711)
}

def @func_1695() -> (Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) {
  @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */
}

def @func_4676() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64]) {
  %712 = @func_4028() /* ty=Tensor[(3, 16, 5), float32] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(3, 16, 5), float64] */;
  %714 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  %715 = atanh(%713) /* ty=Tensor[(3, 16, 5), float64] */;
  (%714, %715)
}

def @func_1928() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  %716 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %717 = %716.0;
  %718 = cast(%717, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %719 = reshape(%718, newshape=[3, 16, 5]) /* ty=Tensor[(3, 16, 5), uint8] */;
  %720 = @func_1822(%719) /* ty=(Tensor[(3, 16, 5), float32],) */;
  %721 = @func_207() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(11, 6, 7), float32], Tensor[(3, 16, 5), uint8]) */;
  %722 = %720.0;
  %723 = %721.0;
  (%717, %722, %723)
}

def @func_7972() -> Tensor[(11, 6, 7), float64] {
  %724 = fn () -> Tensor[(11, 6, 7), float64] {
    @func_5943() /* ty=Tensor[(11, 6, 7), float64] */
  };
  %724() /* ty=Tensor[(11, 6, 7), float64] */
}

def @func_4618() -> (Tensor[(11, 6, 7), bool],) {
  %725 = @func_3005() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(4, 14, 4), float64], Tensor[(198), float64]) */;
  %726 = %725.0;
  (%726,)
}

def @func_3727(%var_3725: Tensor[(10, 13, 3), float64]) -> (Tensor[(10, 13, 3), float64], Tensor[(3, 16, 5), float64]) {
  @func_3724(%var_3725) /* ty=(Tensor[(10, 13, 3), float64], Tensor[(3, 16, 5), float64]) */
}

def @func_9108() -> (Tensor[(3, 16, 5), float32],) {
  %728 = fn () -> (Tensor[(3, 16, 5), float32],) {
    %727 = @func_4796() /* ty=Tensor[(3, 16, 5), float32] */;
    (%727,)
  };
  %728() /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_1660(%var_1636: Tensor[(11, 6, 7), bool]) -> (Tensor[(11, 6, 7), float64], Tensor[(11, 6, 7), float32]) {
  %729 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %730 = %729.2;
  %731 = cast(%var_1636, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %735 = cast(%730, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %736 = divide(%733, %734) /* ty=Tensor[(11, 6, 7), float64] */;
  %737 = sigmoid(%735) /* ty=Tensor[(11, 6, 7), float32] */;
  (%736, %737)
}

def @func_1930() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) {
  @func_1928() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */
}

def @func_9185() -> Tensor[(3, 16, 5), uint8] {
  @func_9183() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_4441() -> (Tensor[(2704), float32],) {
  @func_4439() /* ty=(Tensor[(2704), float32],) */
}

def @func_6860() -> (Tensor[(3, 16, 5), uint8],) {
  %738 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %739 = %738.3;
  (%739,)
}

def @func_2740(%var_2737: Tensor[(6, 15, 10), float32]) -> Tensor[(6, 15, 10), float32] {
  %740 = cast(%var_2737, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
  atanh(%740) /* ty=Tensor[(6, 15, 10), float32] */
}

def @func_8765() -> (Tensor[(3, 16, 5), float64], Tensor[(192), float64], Tensor[(5, 2), float64], Tensor[(288), float64]) {
  %741 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 2), float64] */;
  %742 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %743 = reshape(%741, newshape=[2, 5]) /* ty=Tensor[(2, 5), float64] */;
  %744 = reshape(%742, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %745 = @func_5590(%743, %744) /* ty=(Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) */;
  %746 = @func_6283() /* ty=Tensor[(3, 16, 5), float64] */;
  %747 = %745.4;
  (%746, %747, meta[relay.Constant][22] /* ty=Tensor[(5, 2), float64] */, meta[relay.Constant][23] /* ty=Tensor[(288), float64] */)
}

def @func_4341(%var_4340: Tensor[(6, 3, 6), float64]) -> Tensor[(6, 3, 6), bool] {
  %754 = fn (%var_4317: Tensor[(6, 3, 6), float64]) -> Tensor[(6, 3, 6), bool] {
    %748 = cast(%var_4317, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
    %749 = asin(%748) /* ty=Tensor[(6, 3, 6), float64] */;
    %750 = cast(%749, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
    %751 = shape_of(%var_4317, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(%var_4317, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%752, %753) /* ty=Tensor[(6, 3, 6), bool] */
  };
  %754(%var_4340) /* ty=Tensor[(6, 3, 6), bool] */
}

def @func_6735() -> (Tensor[(3, 16, 5), float64],) {
  %757 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %755 = @func_5599() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %756 = %755.0;
    (%756,)
  };
  %757() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_2207(%var_2206: Tensor[(224), float64]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  %764 = fn (%var_2203: Tensor[(224), float64]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
    %758 = @func_1928() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool]) */;
    %759 = cast(%var_2203, dtype="float64") /* ty=Tensor[(224), float64] */;
    %760 = reshape(%759, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
    %761 = @func_511() /* ty=Tensor[(3, 16, 5), float64] */;
    %762 = %758.0;
    %763 = @func_993(%760) /* ty=Tensor[(4, 14, 4), float64] */;
    (%761, %762, %763, %var_2203)
  };
  %764(%var_2206) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */
}

def @func_8560() -> (Tensor[(3, 16, 5), uint8],) {
  %765 = @func_6860() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %766 = %765.0;
  (%766,)
}

def @func_771(%var_725: Tensor[(13, 3, 6), int8], %var_726: Tensor[(13, 3, 6), int8], %var_751: Tensor[(288), float64]) -> (Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) {
  %767 = cast(%var_726, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %768 = shape_of(%var_725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_725, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = greater_equal(%769, %770) /* ty=Tensor[(13, 3, 6), bool] */;
  %772 = cast(%var_725, dtype="float64") /* ty=Tensor[(13, 3, 6), float64] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="float64") /* ty=Tensor[(13, 3, 6), float64] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %776 = cast(%var_751, dtype="float64") /* ty=Tensor[(288), float64] */;
  %777 = reshape(%776, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %778 = @func_680(%777) /* ty=(Tensor[(11, 6, 7), bool], Tensor[(12, 12, 2), float64], Tensor[(288), float64]) */;
  %779 = divide(%774, %775) /* ty=Tensor[(13, 3, 6), float64] */;
  %780 = %778.2;
  %781 = @func_703() /* ty=Tensor[(3, 16, 5), float64] */;
  (%779, %780, %var_751, %781)
}

def @func_77() -> Tensor[(3, 16, 5), float64] {
  %783 = fn () -> Tensor[(3, 16, 5), float64] {
    %782 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 16, 5), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 5), float64] */;
    asinh(%782) /* ty=Tensor[(3, 16, 5), float64] */
  };
  %783() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_10614() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(650), float64]) {
  %790 = fn () -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(650), float64]) {
    %784 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
    %785 = cast(meta[relay.Constant][25] /* ty=Tensor[(650), float64] */, dtype="float64") /* ty=Tensor[(650), float64] */;
    %786 = reshape(%785, newshape=[650]) /* ty=Tensor[(650), float64] */;
    %787 = @func_5161(%786) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(5, 13, 10), float64], Tensor[(650), float64]) */;
    %788 = %784.3;
    %789 = %787.0;
    (%788, %789, meta[relay.Constant][25] /* ty=Tensor[(650), float64] */)
  };
  %790() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(650), float64]) */
}

def @func_10289() -> (Tensor[(3, 16, 5), float64], Tensor[(15, 5, 10), float64], Tensor[(750), float32], Tensor[(3, 16, 5), float64]) {
  %791 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %792 = cast(meta[relay.Constant][26] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %793 = reshape(%792, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), float32] */;
  %794 = @func_5934(%793) /* ty=(Tensor[(15, 5, 10), float64], Tensor[(8, 1, 11), float32]) */;
  %795 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
  %796 = %791.0;
  %797 = %794.0;
  %798 = %795.0;
  (%796, %797, meta[relay.Constant][26] /* ty=Tensor[(750), float32] */, %798)
}

def @func_7928() -> (Tensor[(3, 16, 5), uint8],) {
  %800 = fn () -> (Tensor[(3, 16, 5), uint8],) {
    %799 = @func_2849() /* ty=Tensor[(3, 16, 5), uint8] */;
    (%799,)
  };
  %800() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_8675() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(16, 13, 13), float32]) {
  %801 = @func_4149() /* ty=Tensor[(3, 16, 5), uint8] */;
  %802 = @func_4910() /* ty=Tensor[(3, 16, 5), float64] */;
  %803 = @func_6768() /* ty=Tensor[(3, 16, 5), float32] */;
  %804 = @func_4935() /* ty=Tensor[(16, 13, 13), float32] */;
  (%801, %802, %803, %804)
}

def @func_8949() -> (Tensor[(3, 16, 5), float64],) {
  %807 = fn () -> (Tensor[(3, 16, 5), float64],) {
    %805 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
    %806 = %805.1;
    (%806,)
  };
  %807() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_4252(%var_4250: Tensor[(3, 14, 16), float32]) -> Tensor[(3, 14, 16), float32] {
  @func_4249(%var_4250) /* ty=Tensor[(3, 14, 16), float32] */
}

def @func_9580() -> (Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float32]) {
  %808 = @func_979() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), bool], Tensor[(2704), float32], Tensor[(16, 13, 13), float32]) */;
  %809 = @func_3935() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8]) */;
  %810 = %808.4;
  %811 = %809.0;
  (%810, %811)
}

def @func_6599() -> Tensor[(3, 16, 5), float32] {
  %812 = fn () -> Tensor[(3, 16, 5), float32] {
    @func_3803() /* ty=Tensor[(3, 16, 5), float32] */
  };
  %812() /* ty=Tensor[(3, 16, 5), float32] */
}

def @func_2743(%var_2741: Tensor[(6, 15, 10), float32]) -> Tensor[(6, 15, 10), float32] {
  @func_2740(%var_2741) /* ty=Tensor[(6, 15, 10), float32] */
}

def @func_9057(%var_9054: Tensor[(104, 26), float32], %var_9055: Tensor[(10), float64], %var_9056: Tensor[(288), float64]) -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(462), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(462), bool], Tensor[(104, 26), float32], Tensor[(900), float32], Tensor[(2, 5), float64], Tensor[(10), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(234), int8], Tensor[(3, 16, 5), float64], Tensor[(224), float64]) {
  %849 = fn (%var_9008: Tensor[(104, 26), float32], %var_9012: Tensor[(10), float64], %var_9013: Tensor[(288), float64]) -> (Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(462), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(462), bool], Tensor[(104, 26), float32], Tensor[(900), float32], Tensor[(2, 5), float64], Tensor[(10), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(234), int8], Tensor[(3, 16, 5), float64], Tensor[(224), float64]) {
    %813 = cast(meta[relay.Constant][27] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %814 = reshape(%813, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), float64] */;
    %815 = @func_7250(%814) /* ty=(Tensor[(11, 6, 7), bool],) */;
    %816 = @func_3416() /* ty=(Tensor[(3, 16, 5), float32],) */;
    %817 = @func_5279() /* ty=(Tensor[(3, 16, 5), uint8],) */;
    %818 = cast(%var_9008, dtype="float32") /* ty=Tensor[(104, 26), float32] */;
    %819 = cast(meta[relay.Constant][28] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %820 = %815.0;
    %821 = cast(%820, dtype="bool") /* ty=Tensor[(11, 6, 7), bool] */;
    %822 = reshape(%818, newshape=[2704]) /* ty=Tensor[(2704), float32] */;
    %823 = reshape(%819, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %824 = reshape(%821, newshape=[462]) /* ty=Tensor[(462), bool] */;
    %825 = @func_5717(%822, %823, %824) /* ty=(Tensor[(2704), bool], Tensor[(900), float32], Tensor[(77, 6), int16], Tensor[(462), bool], Tensor[(3, 16, 5), float32]) */;
    %826 = cast(%var_9012, dtype="float64") /* ty=Tensor[(10), float64] */;
    %827 = cast(%var_9013, dtype="float64") /* ty=Tensor[(288), float64] */;
    %828 = reshape(%826, newshape=[2, 5]) /* ty=Tensor[(2, 5), float64] */;
    %829 = reshape(%827, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %830 = @func_5590(%828, %829) /* ty=(Tensor[(2, 5), float64], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(8, 2, 12), float64], Tensor[(192), float64]) */;
    %831 = cast(meta[relay.Constant][29] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
    %832 = cast(meta[relay.Constant][29] /* ty=Tensor[(234), int8] */, dtype="int8") /* ty=Tensor[(234), int8] */;
    %833 = cast(%var_9013, dtype="float64") /* ty=Tensor[(288), float64] */;
    %834 = reshape(%831, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
    %835 = reshape(%832, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int8] */;
    %836 = reshape(%833, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %837 = @func_771(%834, %835, %836) /* ty=(Tensor[(13, 3, 6), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(3, 16, 5), float64]) */;
    %838 = cast(meta[relay.Constant][30] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
    %839 = reshape(%838, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %840 = @func_2205(%839) /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
    %841 = @func_6598() /* ty=Tensor[(3, 16, 5), float32] */;
    %842 = %816.0;
    %843 = %817.0;
    %844 = @func_6901() /* ty=Tensor[(11, 6, 7), bool] */;
    %845 = %825.3;
    %846 = %830.0;
    %847 = %837.2;
    %848 = %840.0;
    (%841, %820, meta[relay.Constant][27] /* ty=Tensor[(462), float64] */, %842, %843, %844, %845, %var_9008, meta[relay.Constant][28] /* ty=Tensor[(900), float32] */, %846, %var_9012, %var_9013, %847, meta[relay.Constant][29] /* ty=Tensor[(234), int8] */, %848, meta[relay.Constant][30] /* ty=Tensor[(224), float64] */)
  };
  %849(%var_9054, %var_9055, %var_9056) /* ty=(Tensor[(3, 16, 5), float32], Tensor[(11, 6, 7), bool], Tensor[(462), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool], Tensor[(462), bool], Tensor[(104, 26), float32], Tensor[(900), float32], Tensor[(2, 5), float64], Tensor[(10), float64], Tensor[(288), float64], Tensor[(288), float64], Tensor[(234), int8], Tensor[(3, 16, 5), float64], Tensor[(224), float64]) */
}

def @func_2732(%var_2731: Tensor[(1, 5, 5), float32]) -> Tensor[(16, 5, 5), float32] {
  %854 = fn (%var_2703: Tensor[(1, 5, 5), float32]) -> Tensor[(16, 5, 5), float32] {
    %850 = cast(%var_2703, dtype="float32") /* ty=Tensor[(1, 5, 5), float32] */;
    %851 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
    %852 = floor_divide(%850, %851) /* ty=Tensor[(16, 5, 5), float32] */;
    %853 = cast(%852, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
    atanh(%853) /* ty=Tensor[(16, 5, 5), float32] */
  };
  %854(%var_2731) /* ty=Tensor[(16, 5, 5), float32] */
}

def @func_7201() -> (Tensor[(3, 16, 5), uint8],) {
  @func_7199() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_8833() -> Tensor[(3, 16, 5), float64] {
  %855 = @func_6734() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %855.0
}

def @func_2020(%var_2001: Tensor[(3, 16, 5), uint8]) -> (Tensor[(4, 14, 4), float64], Tensor[(198), float64], Tensor[(3, 16, 5), uint64]) {
  %856 = cast(meta[relay.Constant][32] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %857 = reshape(%856, newshape=[2, 11, 9]) /* ty=Tensor[(2, 11, 9), float64] */;
  %858 = @func_1739(%857) /* ty=(Tensor[(2, 11, 9), float64], Tensor[(4, 14, 4), float64], Tensor[(16, 14), float64]) */;
  %859 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %860 = %859.0;
  %861 = cast(%var_2001, dtype="uint64") /* ty=Tensor[(3, 16, 5), uint64] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="uint64") /* ty=Tensor[(3, 16, 5), uint64] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %865 = %858.1;
  %866 = left_shift(%863, %864) /* ty=Tensor[(3, 16, 5), uint64] */;
  (%865, meta[relay.Constant][32] /* ty=Tensor[(198), float64] */, %866)
}

def @func_8677() -> (Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(16, 13, 13), float32]) {
  @func_8675() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(16, 13, 13), float32]) */
}

def @func_3064() -> Tensor[(3, 16, 5), uint8] {
  %867 = @func_297() /* ty=(Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %867.2
}

def @func_3195() -> (Tensor[(16, 13, 13), float32],) {
  @func_3193() /* ty=(Tensor[(16, 13, 13), float32],) */
}

def @func_6406() -> (Tensor[(3, 16, 5), float64],) {
  %868 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %869 = %868.1;
  (%869,)
}

def @func_7807() -> (Tensor[(3, 16, 5), float32],) {
  %871 = fn () -> (Tensor[(3, 16, 5), float32],) {
    %870 = @func_5739() /* ty=Tensor[(3, 16, 5), float32] */;
    (%870,)
  };
  %871() /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_2427(%var_2395: Tensor[(3, 16, 5), float32], %var_2421: Tensor[(3, 16, 5), uint8]) -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32]) {
  %872 = @func_1128() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %873 = @func_2265() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) */;
  %874 = %873.1;
  %875 = cast(%var_2395, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%874, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %879 = bitwise_and(%877, %878) /* ty=Tensor[(3, 16, 5), uint8] */;
  %880 = cast(%var_2421, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %884 = %872.0;
  %885 = power(%882, %883) /* ty=Tensor[(3, 16, 5), float32] */;
  (%884, %885)
}

def @func_6266(%var_6264: Tensor[(12, 3, 15), float64], %var_6265: Tensor[(12, 3, 15), float32]) -> Tensor[(12, 3, 15), bool] {
  @func_6262(%var_6264, %var_6265) /* ty=Tensor[(12, 3, 15), bool] */
}

def @func_8655() -> Tensor[(3, 16, 5), float64] {
  %887 = fn () -> Tensor[(3, 16, 5), float64] {
    %886 = @func_1258() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */;
    %886.1
  };
  %887() /* ty=Tensor[(3, 16, 5), float64] */
}

def @func_4539() -> (Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float64]) {
  @func_4537() /* ty=(Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float64]) */
}

def @func_6517() -> (Tensor[(3, 16, 5), float32],) {
  @func_6515() /* ty=(Tensor[(3, 16, 5), float32],) */
}

def @func_6862() -> (Tensor[(3, 16, 5), uint8],) {
  @func_6860() /* ty=(Tensor[(3, 16, 5), uint8],) */
}

def @func_1594(%var_1592: Tensor[(8, 2, 12), float64]) -> Tensor[(8, 2, 12), float64] {
  @func_1591(%var_1592) /* ty=Tensor[(8, 2, 12), float64] */
}

def @func_149() -> Tensor[(3, 16, 5), uint8] {
  %894 = fn () -> Tensor[(3, 16, 5), uint8] {
    %888 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
    %889 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
    %890 = cast(%889, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
    %891 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %892 = cast(%888, dtype="uint8") /* ty=Tensor[(3, 16, 5), uint8] */;
    %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    right_shift(%892, %893) /* ty=Tensor[(3, 16, 5), uint8] */
  };
  %894() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_4249(%var_4241: Tensor[(3, 14, 16), float32]) -> Tensor[(3, 14, 16), float32] {
  %895 = cast(%var_4241, dtype="float32") /* ty=Tensor[(3, 14, 16), float32] */;
  acosh(%895) /* ty=Tensor[(3, 14, 16), float32] */
}

def @func_2265() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), uint8], Tensor[(8, 1, 11), float32]) {
  %896 = @func_1554() /* ty=(Tensor[(3, 16, 5), float64],) */;
  %897 = @func_1693() /* ty=(Tensor[(3, 16, 5), float32], Tensor[(3, 16, 5), float64]) */;
  %898 = @func_365() /* ty=(Tensor[(3, 16, 5), uint8],) */;
  %899 = @func_664() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) */;
  %900 = @func_234() /* ty=(Tensor[(8, 1, 11), float32],) */;
  %901 = %896.0;
  %902 = %897.0;
  %903 = %898.0;
  %904 = %899.1;
  %905 = %900.0;
  (%901, %902, %903, %904, %905)
}

def @func_297() -> (Tensor[(11, 6, 7), bool], Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), uint8]) {
  %906 = @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */;
  %907 = %906.0;
  %908 = @func_76() /* ty=Tensor[(3, 16, 5), float64] */;
  %909 = @func_148() /* ty=Tensor[(3, 16, 5), uint8] */;
  (%907, %908, %909)
}

def @func_5599() -> (Tensor[(3, 16, 5), float64],) {
  %910 = @func_4537() /* ty=(Tensor[(16, 13, 13), float32], Tensor[(3, 16, 5), float64]) */;
  %911 = %910.1;
  (%911,)
}

def @func_160() -> (Tensor[(11, 6, 7), bool],) {
  @func_158() /* ty=(Tensor[(11, 6, 7), bool],) */
}

def @func_6812(%var_6804: Tensor[(3, 3, 8), bool], %var_6805: Tensor[(3, 3, 8), bool]) -> (Tensor[(3, 3, 8), bool], Tensor[(3, 3, 8), float32]) {
  %912 = cast(%var_6805, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %913 = shape_of(%var_6804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(%var_6804, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %916 = cast(%var_6805, dtype="float32") /* ty=Tensor[(3, 3, 8), float32] */;
  %917 = logical_and(%914, %915) /* ty=Tensor[(3, 3, 8), bool] */;
  %918 = acosh(%916) /* ty=Tensor[(3, 3, 8), float32] */;
  (%917, %918)
}

def @func_3857() -> (Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) {
  @func_3855() /* ty=(Tensor[(3, 16, 5), float64], Tensor[(3, 16, 5), float64]) */
}

def @func_10447() -> Tensor[(3, 16, 5), uint8] {
  @func_10445() /* ty=Tensor[(3, 16, 5), uint8] */
}

def @func_6079() -> (Tensor[(11, 6, 7), bool],) {
  %919 = @func_1871() /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(11, 6, 7), bool]) */;
  %920 = %919.1;
  (%920,)
}

def @func_5601() -> (Tensor[(3, 16, 5), float64],) {
  @func_5599() /* ty=(Tensor[(3, 16, 5), float64],) */
}

def @func_570(%var_568: Tensor[(16, 13, 13), float32]) -> (Tensor[(16, 13, 13), float32],) {
  @func_567(%var_568) /* ty=(Tensor[(16, 13, 13), float32],) */
}

def @func_5721(%var_5718: Tensor[(2704), float32], %var_5719: Tensor[(900), float32], %var_5720: Tensor[(462), bool]) -> (Tensor[(2704), bool], Tensor[(900), float32], Tensor[(77, 6), int16], Tensor[(462), bool], Tensor[(3, 16, 5), float32]) {
  %940 = fn (%var_5670: Tensor[(2704), float32], %var_5682: Tensor[(900), float32], %var_5687: Tensor[(462), bool]) -> (Tensor[(2704), bool], Tensor[(900), float32], Tensor[(77, 6), int16], Tensor[(462), bool], Tensor[(3, 16, 5), float32]) {
    %921 = @func_2607() /* ty=(Tensor[(2704), float32], Tensor[(3, 16, 5), uint8]) */;
    %922 = %921.0;
    %923 = cast(%var_5670, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %924 = shape_of(%922, dtype="int32") /* ty=Tensor[(1), int32] */;
    %925 = cast(%922, dtype="bool") /* ty=Tensor[(2704), bool] */;
    %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?), bool] */;
    %927 = cast(%var_5687, dtype="bool") /* ty=Tensor[(462), bool] */;
    %928 = cast(%var_5687, dtype="bool") /* ty=Tensor[(462), bool] */;
    %929 = reshape(%927, newshape=[77, 6]) /* ty=Tensor[(77, 6), bool] */;
    %930 = reshape(%928, newshape=[77, 6]) /* ty=Tensor[(77, 6), bool] */;
    %931 = @func_3777(%929, %930) /* ty=(Tensor[(3, 16, 5), uint8], Tensor[(3, 16, 5), float64], Tensor[(11, 6, 7), float32], Tensor[(77, 6), int16]) */;
    %932 = cast(%var_5682, dtype="float32") /* ty=Tensor[(900), float32] */;
    %933 = reshape(%932, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
    %934 = @func_3481(%933) /* ty=(Tensor[(15, 5, 12), float32], Tensor[(3, 16, 5), uint8], Tensor[(15, 5, 12), uint64]) */;
    %935 = %934.1;
    %936 = cast(%935, dtype="float32") /* ty=Tensor[(3, 16, 5), float32] */;
    %937 = equal(%925, %926) /* ty=Tensor[(2704), bool] */;
    %938 = %931.3;
    %939 = atan(%936) /* ty=Tensor[(3, 16, 5), float32] */;
    (%937, %var_5682, %938, %var_5687, %939)
  };
  %940(%var_5718, %var_5719, %var_5720) /* ty=(Tensor[(2704), bool], Tensor[(900), float32], Tensor[(77, 6), int16], Tensor[(462), bool], Tensor[(3, 16, 5), float32]) */
}

def @func_6474(%var_6461: Tensor[(14, 7, 10), uint32], %var_6462: Tensor[(14, 7, 10), uint32]) -> Tensor[(14, 7, 10), uint32] {
  %941 = cast(%var_6462, dtype="uint32") /* ty=Tensor[(14, 7, 10), uint32] */;
  %942 = shape_of(%var_6461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_6461, dtype="uint32") /* ty=Tensor[(14, 7, 10), uint32] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%943, %944) /* ty=Tensor[(14, 7, 10), uint32] */
}

def @func_10045(%var_10044: Tensor[(6, 15, 10), float32]) -> (Tensor[(6, 15, 10), float64],) {
  %949 = fn (%var_9993: Tensor[(6, 15, 10), float32]) -> (Tensor[(6, 15, 10), float64],) {
    %945 = cast(%var_9993, dtype="float32") /* ty=Tensor[(6, 15, 10), float32] */;
    %946 = atan(%945) /* ty=Tensor[(6, 15, 10), float32] */;
    %947 = cast(%946, dtype="float64") /* ty=Tensor[(6, 15, 10), float64] */;
    %948 = log2(%947) /* ty=Tensor[(6, 15, 10), float64] */;
    (%948,)
  };
  %949(%var_10044) /* ty=(Tensor[(6, 15, 10), float64],) */
}

def @func_158() -> (Tensor[(11, 6, 7), bool],) {
  %950 = @func_47() /* ty=Tensor[(11, 6, 7), bool] */;
  (%950,)
}

def @func_5374() -> Tensor[(11, 6, 7), float64] {
  %952 = fn () -> Tensor[(11, 6, 7), float64] {
    %951 = @func_2673() /* ty=(Tensor[(11, 6, 7), float64],) */;
    %951.0
  };
  %952() /* ty=Tensor[(11, 6, 7), float64] */
}

def @func_9318(%var_9316: Tensor[(16, 16, 16), float32], %var_9317: Tensor[(16, 16, 16), float32]) -> (Tensor[(16, 16, 16), float32], Tensor[(3, 16, 5), float64], Tensor[(16, 16, 16), float32]) {
  %965 = fn (%var_9303: Tensor[(16, 16, 16), float32], %var_9309: Tensor[(16, 16, 16), float32]) -> (Tensor[(16, 16, 16), float32], Tensor[(3, 16, 5), float64], Tensor[(16, 16, 16), float32]) {
    %953 = cast(%var_9303, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
    %954 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(16, 16, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %957 = @func_6406() /* ty=(Tensor[(3, 16, 5), float64],) */;
    %958 = cast(%var_9309, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
    %959 = shape_of(%var_9303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %960 = cast(%var_9303, dtype="float32") /* ty=Tensor[(16, 16, 16), float32] */;
    %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %962 = divide(%955, %956) /* ty=Tensor[(16, 16, 16), float32] */;
    %963 = %957.0;
    %964 = floor_divide(%960, %961) /* ty=Tensor[(16, 16, 16), float32] */;
    (%962, %963, %964)
  };
  %965(%var_9316, %var_9317) /* ty=(Tensor[(16, 16, 16), float32], Tensor[(3, 16, 5), float64], Tensor[(16, 16, 16), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
