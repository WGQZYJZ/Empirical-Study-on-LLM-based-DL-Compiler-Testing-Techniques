==========mod==========
#[version = "0.0.5"]
def @func_5979(%var_5974: Tensor[(10, 9, 13), float64]) -> (Tensor[(10, 9, 13), bool],) {
  %0 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
  %1 = cast(%var_5974, dtype="bool") /* ty=Tensor[(10, 9, 13), bool] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="bool") /* ty=Tensor[(10, 9, 13), bool] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %5 = greater_equal(%3, %4) /* ty=Tensor[(10, 9, 13), bool] */;
  (%5,)
}

def @func_7566(%var_7515: Tensor[(1170, 1), float64]) -> (Tensor[(1, 768), float64], Tensor[(10, 9, 13), bool], Tensor[(1170, 6), int16], Tensor[(12, 768), int64], Tensor[(9216), float32], Tensor[(10, 9, 13), int32], Tensor[(1, 768), float64], Tensor[(10, 9, 13), float32], Tensor[(1170, 6), float64]) {
  %6 = cast(%var_7515, dtype="float64") /* ty=Tensor[(1170, 1), float64] */;
  %7 = reshape(%6, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %8 = @func_5979(%7) /* ty=(Tensor[(10, 9, 13), bool],) */;
  %9 = cast(%var_7515, dtype="float32") /* ty=Tensor[(1170, 1), float32] */;
  %10 = sinh(%9) /* ty=Tensor[(1170, 1), float32] */;
  %11 = cast(%10, dtype="int16") /* ty=Tensor[(1170, 1), int16] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(1170, 6), float32] */, dtype="int16") /* ty=Tensor[(1170, 6), int16] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(9216), float32] */, dtype="float32") /* ty=Tensor[(9216), float32] */;
  %14 = reshape(%13, newshape=[12, 768]) /* ty=Tensor[(12, 768), float32] */;
  %15 = cast(%var_7515, dtype="float64") /* ty=Tensor[(1170, 1), float64] */;
  %16 = reshape(%15, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(1170, 6), float32] */, dtype="float32") /* ty=Tensor[(1170, 6), float32] */;
  %18 = sinh(%17) /* ty=Tensor[(1170, 6), float32] */;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(1170, 6), float64] */;
  %20 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
  %21 = %8.0;
  %22 = right_shift(%11, %12) /* ty=Tensor[(1170, 6), int16] */;
  %23 = @func_7351(%14) /* ty=Tensor[(12, 768), int64] */;
  %24 = @func_5471(%16) /* ty=Tensor[(10, 9, 13), int32] */;
  %25 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
  %26 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %27 = tan(%19) /* ty=Tensor[(1170, 6), float64] */;
  (%20, %21, %22, %23, meta[relay.Constant][1] /* ty=Tensor[(9216), float32] */, %24, %25, %26, %27)
}

def @func_3200(%var_3167: int16, %var_3168: Tensor[(264), float64], %var_3169: Tensor[(2016, 1), int64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(2016, 264), bool], Tensor[(2016, 1), uint32]) {
  %28 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %29 = cast(%var_3167, dtype="int16") /* ty=int16 */;
  %30 = cast(%var_3168, dtype="float64") /* ty=Tensor[(264), float64] */;
  %31 = cast(%var_3169, dtype="int64") /* ty=Tensor[(2016, 1), int64] */;
  %32 = reshape(%29, newshape=[]) /* ty=int16 */;
  %33 = reshape(%30, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %34 = reshape(%31, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %35 = @func_2376(%32, %33, %34) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
  %36 = cast(%var_3167, dtype="int16") /* ty=int16 */;
  %37 = cast(%var_3168, dtype="float64") /* ty=Tensor[(264), float64] */;
  %38 = cast(%var_3169, dtype="int64") /* ty=Tensor[(2016, 1), int64] */;
  %39 = reshape(%36, newshape=[]) /* ty=int16 */;
  %40 = reshape(%37, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %41 = reshape(%38, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %42 = @func_2376(%39, %40, %41) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
  %43 = cast(%var_3168, dtype="bool") /* ty=Tensor[(264), bool] */;
  %44 = cast(%var_3169, dtype="bool") /* ty=Tensor[(2016, 1), bool] */;
  %45 = cast(%var_3169, dtype="uint32") /* ty=Tensor[(2016, 1), uint32] */;
  %46 = cast(%var_3167, dtype="uint32") /* ty=uint32 */;
  %47 = %28.1;
  %48 = %35.3;
  %49 = %42.1;
  %50 = greater(%43, %44) /* ty=Tensor[(2016, 264), bool] */;
  %51 = logical_xor(%45, %46) /* ty=Tensor[(2016, 1), uint32] */;
  (%47, %48, %49, %50, %51)
}

def @func_6353() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) {
  %52 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %54 = reshape(%53, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %55 = @func_5979(%54) /* ty=(Tensor[(10, 9, 13), bool],) */;
  %56 = %55.0;
  (%52, %56)
}

def @func_7807(%var_7803: Tensor[(24), float64], %var_7804: Tensor[(2002), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64], Tensor[(24), float64], Tensor[(2002), float64]) {
  %57 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %58 = cast(%var_7803, dtype="float64") /* ty=Tensor[(24), float64] */;
  %59 = cast(%var_7804, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %60 = reshape(%58, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float64] */;
  %61 = reshape(%59, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %62 = @func_4901(%60, %61) /* ty=(Tensor[(2, 1, 12), float64], Tensor[(10, 9, 13), float64], Tensor[(2002), float64], Tensor[(2, 1, 12), float32], Tensor[(750), uint8], int16) */;
  %63 = %57.0;
  %64 = %62.1;
  (%63, %64, %var_7803, %var_7804)
}

def @func_3390() -> Tensor[(10, 9, 13), float64] {
  %65 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %65.0
}

def @func_2805(%var_2765: Tensor[(280), float64], %var_2769: Tensor[(2160), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(280), float64], Tensor[(9, 15, 3), int16], Tensor[(2160), float32]) {
  %66 = cast(%var_2765, dtype="float64") /* ty=Tensor[(280), float64] */;
  %67 = reshape(%66, newshape=[10, 4, 7]) /* ty=Tensor[(10, 4, 7), float64] */;
  %68 = cast(%var_2769, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %69 = reshape(%68, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %70 = @func_2112(%69) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(9, 15, 3), int16], Tensor[(405), float32]) */;
  %71 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
  %72 = @func_1917(%67) /* ty=Tensor[(10, 4, 7), float64] */;
  %73 = %70.5;
  (%71, %72, %var_2765, %73, %var_2769)
}

def @func_6332(%var_6308: Tensor[(768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(768), float32], Tensor[(10, 9, 13), int16], Tensor[(16, 6, 8), float32], int16, int16, Tensor[(10, 9, 13), float32], Tensor[(264, 1), float64], Tensor[(2016), int64]) {
  %74 = @func_3768() /* ty=Tensor[(10, 9, 13), float64] */;
  %75 = cast(%74, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %76 = reshape(%75, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %77 = cast(%var_6308, dtype="float32") /* ty=Tensor[(768), float32] */;
  %78 = reshape(%77, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %79 = @func_153(%78) /* ty=Tensor[(16, 6, 8), float32] */;
  %80 = cast(%79, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %81 = cast(meta[relay.Constant][2] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %82 = reshape(%81, newshape=[]) /* ty=int16 */;
  %83 = @func_1863(%82) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) */;
  %84 = %83.2;
  %85 = cast(%84, dtype="int16") /* ty=int16 */;
  %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(264, 1), float64] */, dtype="float64") /* ty=Tensor[(264, 1), float64] */;
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %88 = reshape(%85, newshape=[]) /* ty=int16 */;
  %89 = reshape(%86, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %90 = reshape(%87, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %91 = @func_2376(%88, %89, %90) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
  %92 = @func_4639(%76) /* ty=Tensor[(10, 9, 13), int16] */;
  %93 = erf(%80) /* ty=Tensor[(16, 6, 8), float32] */;
  %94 = %91.0;
  (%74, %var_6308, %92, %93, %84, meta[relay.Constant][2] /* ty=int16 */, %94, meta[relay.Constant][3] /* ty=Tensor[(264, 1), float64] */, meta[relay.Constant][4] /* ty=Tensor[(2016), int64] */)
}

def @func_360(%var_339: Tensor[(10, 5, 15), uint8]) -> (Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) {
  %95 = cast(%var_339, dtype="uint8") /* ty=Tensor[(10, 5, 15), uint8] */;
  %96 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 5, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 5, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 5, 15), uint8] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %99 = cast(meta[relay.Constant][6] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %100 = reshape(%99, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %101 = @func_153(%100) /* ty=Tensor[(16, 6, 8), float32] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(768), float32] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %104 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(768), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(768), float32] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?), bool] */;
  %107 = minimum(%97, %98) /* ty=Tensor[(10, 5, 15), uint8] */;
  %108 = atan(%102) /* ty=Tensor[(16, 6, 8), float32] */;
  %109 = less(%105, %106) /* ty=Tensor[(768), bool] */;
  (%107, %108, %109)
}

def @func_6699(%var_6499: Tensor[(144), float32], %var_6613: Tensor[(672), float32], %var_6638: Tensor[(6, 768), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(750), uint8], Tensor[(10, 2, 16), int16], Tensor[(144), float32], Tensor[(160), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(200), float64], Tensor[(672), float32], Tensor[(6, 768), bool], Tensor[(200), float64], Tensor[(14, 768), uint16], Tensor[(14, 768), float32]) {
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %111 = reshape(%110, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %112 = @func_3311(%111) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */;
  %113 = cast(%var_6499, dtype="float32") /* ty=Tensor[(144), float32] */;
  %114 = reshape(%113, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
  %115 = @func_5168(%114) /* ty=(Tensor[(12, 12, 15), bool], Tensor[(10, 2, 16), int16], Tensor[(12, 12, 15), float64]) */;
  %116 = @func_4718() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) */;
  %117 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %119 = cast(%var_6613, dtype="float32") /* ty=Tensor[(672), float32] */;
  %120 = reshape(%118, newshape=[200]) /* ty=Tensor[(200), float64] */;
  %121 = reshape(%119, newshape=[2, 336]) /* ty=Tensor[(2, 336), float32] */;
  %122 = @func_5864(%120, %121) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) */;
  %123 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
  %124 = cast(%123, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
  %125 = cast(%var_6638, dtype="bool") /* ty=Tensor[(6, 768), bool] */;
  %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %127 = cast(%var_6613, dtype="float32") /* ty=Tensor[(672), float32] */;
  %128 = reshape(%126, newshape=[200]) /* ty=Tensor[(200), float64] */;
  %129 = reshape(%127, newshape=[2, 336]) /* ty=Tensor[(2, 336), float32] */;
  %130 = @func_5864(%128, %129) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) */;
  %131 = @func_5617() /* ty=(Tensor[(14, 768), uint8],) */;
  %132 = %131.0;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %134 = acosh(%133) /* ty=Tensor[(14, 768), float64] */;
  %135 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 768), float64] */, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(2), int32] */;
  %137 = cast(%134, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %139 = greater_equal(%137, %138) /* ty=Tensor[(14, 768), bool] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %141 = sin(%140) /* ty=Tensor[(14, 768), float64] */;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %143 = log2(%142) /* ty=Tensor[(14, 768), float64] */;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %145 = tan(%144) /* ty=Tensor[(14, 768), float64] */;
  %146 = cast(%145, dtype="uint16") /* ty=Tensor[(14, 768), uint16] */;
  %147 = cast(%123, dtype="uint16") /* ty=Tensor[(1, 768), uint16] */;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
  %149 = cast(%123, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
  %150 = logical_and(%148, %149) /* ty=Tensor[(14, 768), bool] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
  %152 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
  %153 = @func_3520() /* ty=Tensor[(10, 9, 13), float32] */;
  %154 = %112.3;
  %155 = %115.1;
  %156 = %116.2;
  %157 = @func_6189() /* ty=Tensor[(10, 9, 13), float64] */;
  %158 = %117.0;
  %159 = %122.0;
  %160 = greater(%124, %125) /* ty=Tensor[(6, 768), bool] */;
  %161 = %130.2;
  %162 = multiply(%146, %147) /* ty=Tensor[(14, 768), uint16] */;
  %163 = sigmoid(%151) /* ty=Tensor[(14, 768), float32] */;
  (%152, %153, %154, meta[relay.Constant][8] /* ty=Tensor[(750), uint8] */, %155, %var_6499, %156, %157, %158, %159, meta[relay.Constant][9] /* ty=Tensor[(200), float64] */, %var_6613, %160, %161, %162, %163)
}

def @func_7195(%var_7145: Tensor[(90, 14), float64], %var_7170: Tensor[(405), int16], %var_7182: int16, %var_7183: Tensor[(264), float64], %var_7184: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(15, 14, 6), float64], Tensor[(90, 14), float64], Tensor[(10, 9, 13), float32], Tensor[(9, 15, 3), bool], Tensor[(405), int16], Tensor[(10, 9, 13), float64], Tensor[(2016, 264), bool], int16, Tensor[(264), float64], Tensor[(2016), int64]) {
  %164 = @func_5088() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
  %165 = cast(%var_7145, dtype="float64") /* ty=Tensor[(90, 14), float64] */;
  %166 = cast(%var_7145, dtype="float64") /* ty=Tensor[(90, 14), float64] */;
  %167 = reshape(%165, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
  %168 = reshape(%166, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
  %169 = @func_6443(%167, %168) /* ty=(Tensor[(15, 14, 6), float64],) */;
  %170 = @func_5088() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
  %171 = cast(%var_7170, dtype="int16") /* ty=Tensor[(405), int16] */;
  %172 = cast(%var_7170, dtype="int16") /* ty=Tensor[(405), int16] */;
  %173 = reshape(%171, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %174 = reshape(%172, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %175 = @func_4930() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %176 = cast(%var_7182, dtype="int16") /* ty=int16 */;
  %177 = cast(%var_7183, dtype="float64") /* ty=Tensor[(264), float64] */;
  %178 = cast(%var_7184, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %179 = reshape(%176, newshape=[]) /* ty=int16 */;
  %180 = reshape(%177, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %181 = reshape(%178, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), int64] */;
  %182 = @func_3200(%179, %180, %181) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(2016, 264), bool], Tensor[(2016, 1), uint32]) */;
  %183 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
  %184 = %164.0;
  %185 = %169.0;
  %186 = %170.1;
  %187 = @func_982(%173, %174) /* ty=Tensor[(9, 15, 3), bool] */;
  %188 = %175.2;
  %189 = %182.3;
  (%183, %184, %185, %var_7145, %186, %187, %var_7170, %188, %189, %var_7182, %var_7183, %var_7184)
}

def @func_1898(%var_1877: Tensor[(10, 1, 16), int16]) -> (Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) {
  %190 = cast(%var_1877, dtype="int16") /* ty=Tensor[(10, 1, 16), int16] */;
  %191 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 2, 16), int16] */, dtype="int16") /* ty=Tensor[(10, 2, 16), int16] */;
  %192 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 2, 16), int16] */, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %193 = bitwise_and(%190, %191) /* ty=Tensor[(10, 2, 16), int16] */;
  %194 = log2(%192) /* ty=Tensor[(10, 2, 16), float64] */;
  (%193, %194)
}

def @func_5517(%var_5495: Tensor[(13, 13, 13), float32], %var_5514: Tensor[(750), uint8]) -> (Tensor[(13, 13, 13), float32], Tensor[(768), bool], Tensor[(750), uint8]) {
  %195 = cast(%var_5495, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
  %196 = cast(%var_5514, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %197 = reshape(%196, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), uint8] */;
  %198 = @func_360(%197) /* ty=(Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) */;
  %199 = sinh(%195) /* ty=Tensor[(13, 13, 13), float32] */;
  %200 = %198.2;
  (%199, %200, %var_5514)
}

def @func_7351(%var_7344: Tensor[(12, 768), float32]) -> Tensor[(12, 768), int64] {
  %201 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %204 = sqrt(%203) /* ty=Tensor[(1, 768), float32] */;
  %205 = cast(%204, dtype="int64") /* ty=Tensor[(1, 768), int64] */;
  %206 = cast(%var_7344, dtype="int64") /* ty=Tensor[(12, 768), int64] */;
  subtract(%205, %206) /* ty=Tensor[(12, 768), int64] */
}

def @func_8429(%var_8427: Tensor[(10752), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(14, 768), uint8], Tensor[(10752), float64]) {
  %207 = cast(%var_8427, dtype="float64") /* ty=Tensor[(10752), float64] */;
  %208 = reshape(%207, newshape=[10752]) /* ty=Tensor[(10752), float64] */;
  %209 = @func_6010(%208) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8], Tensor[(10752), float64]) */;
  %210 = @func_3390() /* ty=Tensor[(10, 9, 13), float64] */;
  %211 = %209.1;
  (%210, %211, %var_8427)
}

def @func_3054() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float32], Tensor[(10, 4, 7), float32]) {
  %212 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %214 = reshape(%213, newshape=[10, 4, 7]) /* ty=Tensor[(10, 4, 7), float64] */;
  %215 = @func_1917(%214) /* ty=Tensor[(10, 4, 7), float64] */;
  %216 = cast(meta[relay.Constant][12] /* ty=Tensor[(280), float64] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="float32") /* ty=Tensor[(10, 4, 7), float32] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %220 = cast(%215, dtype="float32") /* ty=Tensor[(10, 4, 7), float32] */;
  %221 = %212.0;
  %222 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  %223 = floor_mod(%218, %219) /* ty=Tensor[(10, 4, 7), float32] */;
  %224 = sinh(%220) /* ty=Tensor[(10, 4, 7), float32] */;
  (%221, %222, %223, %224)
}

def @func_4506() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %225 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %226 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %227 = %225.0;
  (%226, %227)
}

def @func_5792(%var_5774: Tensor[(14, 768), float64]) -> (Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) {
  %228 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %229 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
  %230 = cast(%229, dtype="uint8") /* ty=Tensor[(1, 768), uint8] */;
  %231 = cast(%var_5774, dtype="uint8") /* ty=Tensor[(14, 768), uint8] */;
  %232 = %228.0;
  %233 = bitwise_and(%230, %231) /* ty=Tensor[(14, 768), uint8] */;
  (%232, %233)
}

def @func_4348() -> Tensor[(10, 9, 13), float64] {
  %234 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %234.2
}

def @func_5412() -> (Tensor[(10, 9, 13), float32],) {
  %235 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  (%235,)
}

def @func_6842() -> Tensor[(10, 9, 13), float32] {
  @func_6752() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_3736(%var_3720: Tensor[(10, 9, 13), float64]) -> (Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) {
  %236 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  %237 = cast(%var_3720, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %241 = bitwise_and(%239, %240) /* ty=Tensor[(10, 9, 13), int16] */;
  %242 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
  (%241, %242)
}

def @func_4386(%var_4353: Tensor[(3, 3, 7), uint8], %var_4354: Tensor[(3, 3, 7), uint8]) -> (Tensor[(3, 3, 7), uint8], Tensor[(3, 3, 7), bool], Tensor[(3, 3, 7), float64], Tensor[(10, 9, 13), float64]) {
  %243 = cast(%var_4354, dtype="uint8") /* ty=Tensor[(3, 3, 7), uint8] */;
  %244 = shape_of(%var_4353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%var_4353, dtype="uint8") /* ty=Tensor[(3, 3, 7), uint8] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %247 = cast(%var_4354, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
  %248 = shape_of(%var_4353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_4353, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %251 = cast(%var_4354, dtype="float64") /* ty=Tensor[(3, 3, 7), float64] */;
  %252 = multiply(%245, %246) /* ty=Tensor[(3, 3, 7), uint8] */;
  %253 = greater_equal(%249, %250) /* ty=Tensor[(3, 3, 7), bool] */;
  %254 = exp(%251) /* ty=Tensor[(3, 3, 7), float64] */;
  %255 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
  (%252, %253, %254, %255)
}

def @func_3239(%var_3234: Tensor[(5, 1, 5), float32]) -> Tensor[(5, 1, 5), float32] {
  %256 = cast(%var_3234, dtype="float32") /* ty=Tensor[(5, 1, 5), float32] */;
  log2(%256) /* ty=Tensor[(5, 1, 5), float32] */
}

def @func_3447(%var_3422: Tensor[(14, 11, 13), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(14, 11, 13), int64], Tensor[(14, 11, 13), float32]) {
  %257 = cast(%var_3422, dtype="float64") /* ty=Tensor[(14, 11, 13), float64] */;
  %258 = sqrt(%257) /* ty=Tensor[(14, 11, 13), float64] */;
  %259 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 11, 13), float64] */, dtype="int64") /* ty=Tensor[(14, 11, 13), int64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="int64") /* ty=Tensor[(14, 11, 13), int64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %263 = cast(%258, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
  %264 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
  %265 = maximum(%261, %262) /* ty=Tensor[(14, 11, 13), int64] */;
  %266 = asin(%263) /* ty=Tensor[(14, 11, 13), float32] */;
  (%264, %265, %266)
}

def @func_4639(%var_4628: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), int16] {
  %267 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %268 = %267.0;
  %269 = cast(%var_4628, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%271, %272) /* ty=Tensor[(10, 9, 13), int16] */
}

def @func_877(%var_873: Tensor[(11, 4, 6), float64]) -> Tensor[(11, 4, 6), float64] {
  %273 = cast(%var_873, dtype="float64") /* ty=Tensor[(11, 4, 6), float64] */;
  log(%273) /* ty=Tensor[(11, 4, 6), float64] */
}

def @func_1956() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %274 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %275 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %276 = %274.0;
  %277 = %275.0;
  (%276, %277)
}

def @func_2888(%var_2881: Tensor[(10, 9, 13), float64]) -> Tensor[(10, 9, 13), float32] {
  %278 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %279 = %278.0;
  %280 = cast(%var_2881, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%282, %283) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_7901() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(1, 768), float64], Tensor[(16, 6, 8), float32]) {
  %284 = @func_5361() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), bool], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(5, 56), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
  %285 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %288 = reshape(%287, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %289 = %284.1;
  %290 = @func_7379() /* ty=Tensor[(10, 9, 13), float32] */;
  %291 = @func_153(%288) /* ty=Tensor[(16, 6, 8), float32] */;
  (%289, %290, %286, %291)
}

def @func_7379() -> Tensor[(10, 9, 13), float32] {
  %292 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
  %292.0
}

def @func_5471(%var_5465: Tensor[(10, 9, 13), float64]) -> Tensor[(10, 9, 13), int32] {
  %293 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
  %294 = cast(%var_5465, dtype="int32") /* ty=Tensor[(10, 9, 13), int32] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int32") /* ty=Tensor[(10, 9, 13), int32] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%296, %297) /* ty=Tensor[(10, 9, 13), int32] */
}

def @func_1111(%var_1057: int64, %var_1058: Tensor[(12, 12, 14), int64], %var_1104: Tensor[(12, 12, 14), int64]) -> (Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) {
  %298 = cast(%var_1058, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %299 = log(%298) /* ty=Tensor[(12, 12, 14), float32] */;
  %300 = cast(%var_1057, dtype="bool") /* ty=bool */;
  %301 = cast(%var_1058, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %302 = less_equal(%300, %301) /* ty=Tensor[(12, 12, 14), bool] */;
  %303 = cast(%302, dtype="int8") /* ty=Tensor[(12, 12, 14), int8] */;
  %304 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%299, dtype="int8") /* ty=Tensor[(12, 12, 14), int8] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %307 = cast(%var_1104, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %308 = shape_of(%var_1058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%var_1058, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %311 = maximum(%305, %306) /* ty=Tensor[(12, 12, 14), int8] */;
  %312 = divide(%309, %310) /* ty=Tensor[(12, 12, 14), float32] */;
  (%311, %312)
}

def @func_6189() -> Tensor[(10, 9, 13), float64] {
  %313 = @func_4476() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %313.0
}

def @func_6391() -> (Tensor[(10, 9, 13), float32],) {
  %314 = @func_3054() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float32], Tensor[(10, 4, 7), float32]) */;
  %315 = %314.0;
  (%315,)
}

def @func_2242(%var_2224: Tensor[(672), float32], %var_2229: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(12, 7, 8), float32], float32, Tensor[(672), float32], Tensor[(12, 12, 14), int8], Tensor[(2016), int64]) {
  %316 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %317 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %318 = cast(-7.78367f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %319 = cast(%var_2224, dtype="float32") /* ty=Tensor[(672), float32] */;
  %320 = reshape(%318, newshape=[]) /* ty=float32 */;
  %321 = reshape(%319, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), float32] */;
  %322 = cast(-7.78367f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %323 = cast(%var_2229, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %324 = cast(%var_2229, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %325 = reshape(%322, newshape=[]) /* ty=int64 */;
  %326 = reshape(%323, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %327 = reshape(%324, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %328 = @func_1111(%325, %326, %327) /* ty=(Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) */;
  %329 = %316.0;
  %330 = %317.0;
  %331 = @func_724(%320, %321) /* ty=Tensor[(12, 7, 8), float32] */;
  %332 = %328.0;
  (%329, %330, %331, -7.78367f /* ty=float32 */, %var_2224, %332, %var_2229)
}

def @func_3636() -> (Tensor[(1, 768), float64],) {
  %333 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
  %334 = %333.2;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(1, 768), float64] */;
  %336 = exp(%335) /* ty=Tensor[(1, 768), float64] */;
  (%336,)
}

def @func_5277() -> (Tensor[(10, 9, 13), float32],) {
  %337 = @func_5088() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
  %338 = %337.1;
  (%338,)
}

def @func_6963(%var_6941: float64, %var_6942: Tensor[(14, 10, 14), float64], %var_6953: Tensor[(750), uint8]) -> (Tensor[(14, 10, 14), float64], Tensor[(750), uint8], Tensor[(70), int16], Tensor[(750), uint8], Tensor[(10, 9, 13), float32]) {
  %339 = cast(%var_6941, dtype="float64") /* ty=float64 */;
  %340 = cast(%var_6942, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
  %341 = cast(%var_6941, dtype="int16") /* ty=int16 */;
  %342 = cast(meta[relay.Constant][14] /* ty=Tensor[(70), int16] */, dtype="int16") /* ty=Tensor[(70), int16] */;
  %343 = cast(%var_6953, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %344 = reshape(%341, newshape=[]) /* ty=int16 */;
  %345 = reshape(%342, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
  %346 = reshape(%343, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %347 = @func_498(%344, %345, %346) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
  %348 = @func_4564() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %349 = power(%339, %340) /* ty=Tensor[(14, 10, 14), float64] */;
  %350 = %347.2;
  %351 = %348.0;
  (%349, %350, meta[relay.Constant][14] /* ty=Tensor[(70), int16] */, %var_6953, %351)
}

def @func_4476() -> (Tensor[(10, 9, 13), float64],) {
  %352 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  (%352,)
}

def @func_8011() -> Tensor[(10, 9, 13), float64] {
  %353 = @func_6253() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %353.0
}

def @func_7256() -> Tensor[(10, 9, 13), float32] {
  @func_5989() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_3104() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 5, 15), uint8], Tensor[(60, 36), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(10, 9, 13), float64]) {
  %354 = cast(meta[relay.Constant][15] /* ty=Tensor[(60, 36), float32] */, dtype="float32") /* ty=Tensor[(60, 36), float32] */;
  %355 = cast(meta[relay.Constant][15] /* ty=Tensor[(60, 36), float32] */, dtype="float32") /* ty=Tensor[(60, 36), float32] */;
  %356 = cast(meta[relay.Constant][16] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %357 = cast(meta[relay.Constant][17] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %358 = reshape(%354, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %359 = reshape(%355, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %360 = reshape(%356, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %361 = reshape(%357, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %362 = @func_1247(%358, %359, %360, %361) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %363 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %364 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %365 = %362.4;
  %366 = %363.0;
  (%364, %365, meta[relay.Constant][15] /* ty=Tensor[(60, 36), float32] */, meta[relay.Constant][16] /* ty=Tensor[(750), uint8] */, meta[relay.Constant][17] /* ty=Tensor[(768), float32] */, %366)
}

def @func_4215() -> (Tensor[(10, 9, 13), float64],) {
  %367 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
  (%367,)
}

def @func_724(%var_701: float32, %var_702: Tensor[(12, 7, 8), float32]) -> Tensor[(12, 7, 8), float32] {
  %368 = cast(%var_701, dtype="float32") /* ty=float32 */;
  %369 = cast(%var_702, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  power(%368, %369) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_2376(%var_2332: int16, %var_2355: Tensor[(264), float64], %var_2372: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) {
  %370 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %371 = cast(%var_2332, dtype="int16") /* ty=int16 */;
  %372 = reshape(%371, newshape=[]) /* ty=int16 */;
  %373 = @func_1863(%372) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) */;
  %374 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %375 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 20), int16] */, dtype="int16") /* ty=Tensor[(8, 20), int16] */;
  %376 = reshape(%375, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int16] */;
  %377 = @func_1898(%376) /* ty=(Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) */;
  %378 = cast(%var_2355, dtype="float64") /* ty=Tensor[(264), float64] */;
  %379 = reshape(%378, newshape=[11, 4, 6]) /* ty=Tensor[(11, 4, 6), float64] */;
  %380 = cast(%var_2332, dtype="int64") /* ty=int64 */;
  %381 = cast(%var_2372, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %382 = cast(%var_2372, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %383 = reshape(%380, newshape=[]) /* ty=int64 */;
  %384 = reshape(%381, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %385 = reshape(%382, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %386 = @func_1111(%383, %384, %385) /* ty=(Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) */;
  %387 = %370.0;
  %388 = %373.1;
  %389 = %374.0;
  %390 = %377.0;
  %391 = @func_877(%379) /* ty=Tensor[(11, 4, 6), float64] */;
  %392 = %386.1;
  (%387, %388, %var_2332, %389, %390, meta[relay.Constant][18] /* ty=Tensor[(8, 20), int16] */, %391, %var_2355, %392, %var_2372)
}

def @func_3283() -> Tensor[(10, 9, 13), float64] {
  %393 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %393.0
}

def @func_3311(%var_3299: Tensor[(750), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) {
  %394 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %395 = cast(meta[relay.Constant][19] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %396 = cast(meta[relay.Constant][19] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %397 = cast(%var_3299, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %398 = cast(meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %399 = reshape(%395, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %400 = reshape(%396, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %401 = reshape(%397, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %402 = reshape(%398, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %403 = @func_1247(%399, %400, %401, %402) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %404 = %394.2;
  %405 = %403.5;
  (%404, %405, meta[relay.Constant][19] /* ty=Tensor[(2160), float32] */, %var_3299, meta[relay.Constant][20] /* ty=Tensor[(768), float32] */)
}

def @func_5247() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16]) {
  %406 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %407 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %408 = %406.0;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %410 = reshape(%409, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %411 = %407.0;
  %412 = @func_4639(%410) /* ty=Tensor[(10, 9, 13), int16] */;
  (%408, %411, %412)
}

def @func_1863(%var_1847: int16) -> (Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) {
  %413 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %414 = %413.0;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %416 = cast(%var_1847, dtype="int16") /* ty=int16 */;
  %417 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 70), int16] */, dtype="int16") /* ty=Tensor[(1, 70), int16] */;
  %418 = cast(meta[relay.Constant][22] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %419 = reshape(%416, newshape=[]) /* ty=int16 */;
  %420 = reshape(%417, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
  %421 = reshape(%418, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %422 = @func_498(%419, %420, %421) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
  %423 = asin(%415) /* ty=Tensor[(10, 9, 13), float32] */;
  %424 = %422.2;
  (%423, %424, %var_1847, meta[relay.Constant][21] /* ty=Tensor[(1, 70), int16] */, meta[relay.Constant][22] /* ty=Tensor[(750), uint8] */)
}

def @func_4284() -> Tensor[(1, 768), float64] {
  %425 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
  %425.0
}

def @func_3614() -> (Tensor[(16, 6, 8), float32],) {
  %426 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
  %427 = %426.1;
  (%427,)
}

def @func_2406() -> Tensor[(10, 9, 13), float64] {
  %428 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %428.0
}

def @func_4046() -> Tensor[(10, 9, 13), float64] {
  %429 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %429.2
}

def @func_5168(%var_5130: Tensor[(12, 12, 1), float32]) -> (Tensor[(12, 12, 15), bool], Tensor[(10, 2, 16), int16], Tensor[(12, 12, 15), float64]) {
  %430 = cast(%var_5130, dtype="bool") /* ty=Tensor[(12, 12, 1), bool] */;
  %431 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %432 = @func_4718() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) */;
  %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %434 = atanh(%433) /* ty=Tensor[(12, 12, 15), float32] */;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
  %436 = less_equal(%430, %431) /* ty=Tensor[(12, 12, 15), bool] */;
  %437 = %432.1;
  %438 = sqrt(%435) /* ty=Tensor[(12, 12, 15), float64] */;
  (%436, %437, %438)
}

def @func_3072() -> Tensor[(10, 9, 13), float32] {
  %439 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %439.0
}

def @func_8254(%var_8245: Tensor[(5, 9, 9), uint32]) -> (Tensor[(5, 9, 9), uint32],) {
  %440 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 9, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
  %441 = shape_of(%var_8245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_8245, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %444 = bitwise_xor(%442, %443) /* ty=Tensor[(5, 9, 9), uint32] */;
  (%444,)
}

def @func_4901(%var_4865: Tensor[(2, 1, 12), float64], %var_4874: Tensor[(2002), float64]) -> (Tensor[(2, 1, 12), float64], Tensor[(10, 9, 13), float64], Tensor[(2002), float64], Tensor[(2, 1, 12), float32], Tensor[(750), uint8], int16) {
  %445 = cast(%var_4865, dtype="float64") /* ty=Tensor[(2, 1, 12), float64] */;
  %446 = cast(%var_4874, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %447 = reshape(%446, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), float64] */;
  %448 = @func_3447(%447) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(14, 11, 13), int64], Tensor[(14, 11, 13), float32]) */;
  %449 = cast(%var_4865, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %450 = cos(%449) /* ty=Tensor[(2, 1, 12), float32] */;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %452 = cosh(%451) /* ty=Tensor[(2, 1, 12), float32] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %454 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %455 = reshape(%454, newshape=[]) /* ty=int16 */;
  %456 = @func_1863(%455) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) */;
  %457 = atanh(%445) /* ty=Tensor[(2, 1, 12), float64] */;
  %458 = %448.0;
  %459 = log10(%453) /* ty=Tensor[(2, 1, 12), float32] */;
  %460 = %456.1;
  (%457, %458, %var_4874, %459, %460, meta[relay.Constant][25] /* ty=int16 */)
}

def @func_5361() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), bool], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(5, 56), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) {
  %461 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %462 = @func_3614() /* ty=(Tensor[(16, 6, 8), float32],) */;
  %463 = %462.0;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %465 = sigmoid(%464) /* ty=Tensor[(16, 6, 8), float32] */;
  %466 = cast(%463, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = @func_5247() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16]) */;
  %471 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 56), float64] */, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %472 = reshape(%471, newshape=[10, 4, 7]) /* ty=Tensor[(10, 4, 7), float64] */;
  %473 = @func_4243() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %474 = @func_3768() /* ty=Tensor[(10, 9, 13), float64] */;
  %475 = %461.0;
  %476 = not_equal(%468, %469) /* ty=Tensor[(16, 6, 8), bool] */;
  %477 = %470.2;
  %478 = @func_3768() /* ty=Tensor[(10, 9, 13), float64] */;
  %479 = @func_1917(%472) /* ty=Tensor[(10, 4, 7), float64] */;
  %480 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %481 = %473.0;
  (%474, %475, %476, %477, %478, %479, meta[relay.Constant][26] /* ty=Tensor[(5, 56), float64] */, %480, %481)
}

def @func_6999(%var_6980: Tensor[(13, 6, 7), uint8], %var_6981: Tensor[(13, 6, 7), uint8]) -> (Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float64]) {
  %482 = cast(%var_6981, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %483 = shape_of(%var_6980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_6980, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = cast(%var_6980, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
  %487 = greater_equal(%484, %485) /* ty=Tensor[(13, 6, 7), bool] */;
  %488 = cosh(%486) /* ty=Tensor[(13, 6, 7), float64] */;
  (%487, %488)
}

def @func_7478() -> (Tensor[(10, 9, 13), float32], Tensor[(10752), int64]) {
  %489 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
  %490 = cast(meta[relay.Constant][27] /* ty=Tensor[(10752), float64] */, dtype="float64") /* ty=Tensor[(10752), float64] */;
  %491 = reshape(%490, newshape=[14, 768]) /* ty=Tensor[(14, 768), float64] */;
  %492 = @func_5792(%491) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) */;
  %493 = %492.1;
  %494 = cast(%493, dtype="int64") /* ty=Tensor[(14, 768), int64] */;
  %495 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(10752), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %496 = cast(meta[relay.Constant][27] /* ty=Tensor[(10752), float64] */, dtype="int64") /* ty=Tensor[(10752), int64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?), int64] */;
  %498 = %489.0;
  %499 = logical_xor(%496, %497) /* ty=Tensor[(10752), int64] */;
  (%498, %499)
}

def @func_6241(%var_6229: Tensor[(9, 5, 12), float32]) -> (Tensor[(9, 5, 12), float32],) {
  %500 = cast(%var_6229, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
  %501 = cosh(%500) /* ty=Tensor[(9, 5, 12), float32] */;
  (%501,)
}

def @func_4718() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) {
  %502 = @func_4111() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %503 = cast(meta[relay.Constant][28] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %504 = reshape(%503, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int16] */;
  %505 = @func_1898(%504) /* ty=(Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) */;
  %506 = %502.0;
  %507 = %505.0;
  (%506, %507, meta[relay.Constant][28] /* ty=Tensor[(160), int16] */)
}

def @func_3768() -> Tensor[(10, 9, 13), float64] {
  %508 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %508.0
}

def @func_4450() -> (Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) {
  %509 = @func_4243() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %510 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 150), uint8] */, dtype="uint8") /* ty=Tensor[(5, 150), uint8] */;
  %511 = reshape(%510, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %512 = @func_3311(%511) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */;
  %513 = %509.0;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %515 = reshape(%514, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %516 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 150), uint8] */, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
  %517 = %512.4;
  %518 = @func_2888(%515) /* ty=Tensor[(10, 9, 13), float32] */;
  %519 = log10(%516) /* ty=Tensor[(5, 150), float32] */;
  (%513, %517, %518, %519)
}

def @func_6905() -> Tensor[(10, 9, 13), float64] {
  %520 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %520.2
}

def @func_3520() -> Tensor[(10, 9, 13), float32] {
  %521 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %521.0
}

def @func_5125() -> (Tensor[(11, 4, 6), float64],) {
  %522 = @func_3360() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(11, 4, 6), float64], Tensor[(264), float64]) */;
  %523 = %522.1;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(11, 4, 6), float64] */;
  %525 = sqrt(%524) /* ty=Tensor[(11, 4, 6), float64] */;
  (%525,)
}

def @func_5989() -> Tensor[(10, 9, 13), float32] {
  %526 = @func_5412() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %526.0
}

def @func_7957() -> (Tensor[(10, 9, 13), float32], Tensor[(405), bool]) {
  %527 = @func_4450() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) */;
  %528 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %529 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %530 = reshape(%528, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %531 = reshape(%529, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %532 = @func_982(%530, %531) /* ty=Tensor[(9, 15, 3), bool] */;
  %533 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), int16] */, dtype="bool") /* ty=Tensor[(405), bool] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = equal(%535, %536) /* ty=Tensor[(9, 15, 3), bool] */;
  %538 = cast(%537, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %539 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(405), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %540 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), int16] */, dtype="bool") /* ty=Tensor[(405), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), bool] */;
  %542 = %527.2;
  %543 = logical_and(%540, %541) /* ty=Tensor[(405), bool] */;
  (%542, %543)
}

def @func_8387() -> (Tensor[(16, 6, 8), float32],) {
  %544 = @func_4190() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32]) */;
  %545 = %544.1;
  (%545,)
}

def @func_7320() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(2, 768), float64]) {
  %546 = @func_4450() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) */;
  %547 = @func_6253() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %548 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
  %549 = %548.0;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %551 = tan(%550) /* ty=Tensor[(1, 768), float32] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %553 = asin(%552) /* ty=Tensor[(1, 768), float32] */;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(1, 768), float64] */;
  %555 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 768), float32] */, dtype="float64") /* ty=Tensor[(2, 768), float64] */;
  %556 = @func_4338() /* ty=Tensor[(10, 9, 13), float64] */;
  %557 = %546.0;
  %558 = %547.0;
  %559 = mod(%554, %555) /* ty=Tensor[(2, 768), float64] */;
  (%556, %557, %558, %559)
}

def @func_8095() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64]) {
  %560 = @func_7656() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %561 = @func_6353() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) */;
  %562 = %560.0;
  %563 = %561.0;
  (%562, %563)
}

def @func_7656() -> (Tensor[(10, 9, 13), float64],) {
  %564 = @func_6253() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %565 = %564.0;
  (%565,)
}

def @func_2621() -> (Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) {
  %566 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %567 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 768), float32] */, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %568 = reshape(%567, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %569 = %566.0;
  %570 = @func_153(%568) /* ty=Tensor[(16, 6, 8), float32] */;
  (%569, %570, meta[relay.Constant][32] /* ty=Tensor[(1, 768), float32] */)
}

def @main(%var_8529: Tensor[(405), uint32], %var_8585: Tensor[(11, 768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16], Tensor[(5, 9, 9), uint32], Tensor[(405), uint32], Tensor[(10, 9, 13), bool], Tensor[(10, 9, 13), float64], Tensor[(?, 768), int16], Tensor[(11, 768), uint64]) {
  %571 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %572 = %571.0;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %574 = reshape(%573, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %575 = cast(%var_8529, dtype="uint32") /* ty=Tensor[(405), uint32] */;
  %576 = reshape(%575, newshape=[5, 9, 9]) /* ty=Tensor[(5, 9, 9), uint32] */;
  %577 = @func_8254(%576) /* ty=(Tensor[(5, 9, 9), uint32],) */;
  %578 = @func_4639(%574) /* ty=Tensor[(10, 9, 13), int16] */;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %580 = reshape(%579, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %581 = @func_5979(%580) /* ty=(Tensor[(10, 9, 13), bool],) */;
  %582 = @func_7656() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %583 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %585 = log(%584) /* ty=Tensor[(1, 768), float32] */;
  %586 = cast(%583, dtype="int16") /* ty=Tensor[(1, 768), int16] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(2), int32] */;
  %588 = cast(%585, dtype="int16") /* ty=Tensor[(1, 768), int16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %590 = cast(%585, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
  %591 = cast(%var_8585, dtype="bool") /* ty=Tensor[(11, 768), bool] */;
  %592 = logical_or(%590, %591) /* ty=Tensor[(11, 768), bool] */;
  %593 = cast(%592, dtype="uint64") /* ty=Tensor[(11, 768), uint64] */;
  %594 = cast(%585, dtype="uint64") /* ty=Tensor[(1, 768), uint64] */;
  %595 = %577.0;
  %596 = %581.0;
  %597 = %582.0;
  %598 = left_shift(%588, %589) /* ty=Tensor[(?, 768), int16] */;
  %599 = add(%593, %594) /* ty=Tensor[(11, 768), uint64] */;
  (%572, %578, %595, %var_8529, %596, %597, %598, %599)
}

def @func_6010(%var_6007: Tensor[(10752), float64]) -> (Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8], Tensor[(10752), float64]) {
  %600 = cast(%var_6007, dtype="float64") /* ty=Tensor[(10752), float64] */;
  %601 = reshape(%600, newshape=[14, 768]) /* ty=Tensor[(14, 768), float64] */;
  %602 = @func_5792(%601) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) */;
  %603 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %604 = %602.1;
  (%603, %604, %var_6007)
}

def @func_2112(%var_2023: Tensor[(2160), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(9, 15, 3), int16], Tensor[(405), float32]) {
  %605 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %606 = cast(%var_2023, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %607 = cast(%var_2023, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %608 = cast(meta[relay.Constant][33] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %609 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %610 = reshape(%606, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %611 = reshape(%607, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %612 = reshape(%608, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %613 = reshape(%609, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %614 = @func_1247(%610, %611, %612, %613) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %615 = cast(meta[relay.Constant][35] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %616 = cast(meta[relay.Constant][35] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %617 = reshape(%615, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %618 = reshape(%616, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %619 = @func_982(%617, %618) /* ty=Tensor[(9, 15, 3), bool] */;
  %620 = cast(meta[relay.Constant][35] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="int16") /* ty=Tensor[(9, 15, 3), int16] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %624 = cast(meta[relay.Constant][35] /* ty=Tensor[(405), int16] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %625 = cos(%624) /* ty=Tensor[(405), float32] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(405), float32] */;
  %627 = %605.0;
  %628 = %614.3;
  %629 = bitwise_xor(%622, %623) /* ty=Tensor[(9, 15, 3), int16] */;
  %630 = cosh(%626) /* ty=Tensor[(405), float32] */;
  (%627, %628, %var_2023, meta[relay.Constant][33] /* ty=Tensor[(750), uint8] */, meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, %629, %630)
}

def @func_3360() -> (Tensor[(10, 9, 13), float32], Tensor[(11, 4, 6), float64], Tensor[(264), float64]) {
  %631 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %632 = cast(meta[relay.Constant][36] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %633 = reshape(%632, newshape=[11, 4, 6]) /* ty=Tensor[(11, 4, 6), float64] */;
  %634 = %631.0;
  %635 = @func_877(%633) /* ty=Tensor[(11, 4, 6), float64] */;
  (%634, %635, meta[relay.Constant][36] /* ty=Tensor[(264), float64] */)
}

def @func_4930() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %636 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %637 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %638 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %639 = %636.1;
  (%637, %638, %639)
}

def @func_1811() -> (Tensor[(10, 9, 13), float32],) {
  %640 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %641 = sqrt(%640) /* ty=Tensor[(10, 9, 13), float32] */;
  (%641,)
}

def @func_6253() -> (Tensor[(10, 9, 13), float64],) {
  %642 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
  (%642,)
}

def @func_5028(%var_5024: Tensor[(6, 12, 6), uint8]) -> Tensor[(6, 12, 6), uint8] {
  %643 = cast(%var_5024, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %644 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(6, 12, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 12, 6), uint8] */, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%645, %646) /* ty=Tensor[(6, 12, 6), uint8] */
}

def @func_3602(%var_3576: Tensor[(750), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(750), float64], Tensor[(10, 9, 13), float64]) {
  %647 = cast(%var_3576, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %648 = reshape(%647, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %649 = @func_3311(%648) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */;
  %650 = %649.3;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(750), float64] */;
  %652 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  %653 = sigmoid(%651) /* ty=Tensor[(750), float64] */;
  %654 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
  (%652, %var_3576, %653, %654)
}

def @func_5550() -> (Tensor[(10, 9, 13), float32],) {
  %655 = @func_4564() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %658 = sigmoid(%657) /* ty=Tensor[(10, 9, 13), float32] */;
  (%658,)
}

def @func_4243() -> (Tensor[(10, 9, 13), float32],) {
  %659 = @func_3520() /* ty=Tensor[(10, 9, 13), float32] */;
  (%659,)
}

def @func_1247(%var_1147: Tensor[(9, 15, 16), float32], %var_1148: Tensor[(9, 15, 16), float32], %var_1173: Tensor[(750), uint8], %var_1235: Tensor[(768), float32]) -> (Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) {
  %660 = cast(%var_1148, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %661 = shape_of(%var_1147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_1147, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %664 = cast(meta[relay.Constant][39] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %665 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 70), int16] */, dtype="int16") /* ty=Tensor[(1, 70), int16] */;
  %666 = cast(%var_1173, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %667 = reshape(%664, newshape=[]) /* ty=int16 */;
  %668 = reshape(%665, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
  %669 = reshape(%666, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %670 = @func_498(%667, %668, %669) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
  %671 = cast(meta[relay.Constant][39] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %672 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 70), int16] */, dtype="int16") /* ty=Tensor[(1, 70), int16] */;
  %673 = cast(%var_1173, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %674 = reshape(%671, newshape=[]) /* ty=int16 */;
  %675 = reshape(%672, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
  %676 = reshape(%673, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %677 = @func_498(%674, %675, %676) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
  %678 = %677.2;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(750), float32] */;
  %680 = cast(%var_1235, dtype="float32") /* ty=Tensor[(768), float32] */;
  %681 = reshape(%680, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %682 = not_equal(%662, %663) /* ty=Tensor[(9, 15, 16), bool] */;
  %683 = %670.3;
  %684 = sqrt(%679) /* ty=Tensor[(750), float32] */;
  %685 = @func_153(%681) /* ty=Tensor[(16, 6, 8), float32] */;
  (%682, meta[relay.Constant][39] /* ty=int16 */, meta[relay.Constant][40] /* ty=Tensor[(1, 70), int16] */, %var_1173, %683, %684, %685, %var_1235)
}

def @func_1828() -> (Tensor[(10, 9, 13), float64],) {
  %686 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %687 = %686.0;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %689 = rsqrt(%688) /* ty=Tensor[(10, 9, 13), float64] */;
  (%689,)
}

def @func_498(%var_454: int16, %var_455: Tensor[(5, 1, 14), int16], %var_466: Tensor[(750), uint8]) -> (Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) {
  %690 = cast(%var_454, dtype="bool") /* ty=bool */;
  %691 = cast(%var_455, dtype="bool") /* ty=Tensor[(5, 1, 14), bool] */;
  %692 = cast(%var_466, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %693 = reshape(%692, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), uint8] */;
  %694 = @func_360(%693) /* ty=(Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="uint8") /* ty=Tensor[(10, 5, 15), uint8] */;
  %697 = reshape(%696, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), uint8] */;
  %698 = @func_360(%697) /* ty=(Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) */;
  %699 = less(%690, %691) /* ty=Tensor[(5, 1, 14), bool] */;
  %700 = %698.0;
  (%699, %695, %var_466, %700)
}

def @func_4525(%var_4511: Tensor[(5, 10, 4), float64]) -> (Tensor[(5, 10, 4), float64],) {
  %701 = cast(%var_4511, dtype="float64") /* ty=Tensor[(5, 10, 4), float64] */;
  %702 = sinh(%701) /* ty=Tensor[(5, 10, 4), float64] */;
  (%702,)
}

def @func_7911(%var_7909: Tensor[(5, 234), float64]) -> (Tensor[(14, 768), uint8], Tensor[(10, 9, 13), float32], Tensor[(5, 234), float64]) {
  %703 = @func_5617() /* ty=(Tensor[(14, 768), uint8],) */;
  %704 = cast(%var_7909, dtype="float64") /* ty=Tensor[(5, 234), float64] */;
  %705 = reshape(%704, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %706 = %703.0;
  %707 = @func_2888(%705) /* ty=Tensor[(10, 9, 13), float32] */;
  (%706, %707, %var_7909)
}

def @func_8053() -> (Tensor[(10, 9, 13), float32],) {
  %708 = @func_6391() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %709 = %708.0;
  (%709,)
}

def @func_7430(%var_7424: int64) -> (Tensor[(10, 9, 13), float64], Tensor[(12, 12, 14), int8], int64, Tensor[(2016), int64]) {
  %710 = @func_6353() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) */;
  %711 = cast(%var_7424, dtype="int64") /* ty=int64 */;
  %712 = cast(meta[relay.Constant][41] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %713 = cast(meta[relay.Constant][41] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %714 = reshape(%711, newshape=[]) /* ty=int64 */;
  %715 = reshape(%712, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %716 = reshape(%713, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %717 = @func_1111(%714, %715, %716) /* ty=(Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) */;
  %718 = %710.0;
  %719 = %717.0;
  (%718, %719, %var_7424, meta[relay.Constant][41] /* ty=Tensor[(2016), int64] */)
}

def @func_3956() -> Tensor[(10, 9, 13), float32] {
  @func_3072() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_4338() -> Tensor[(10, 9, 13), float64] {
  @func_3390() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_5864(%var_5849: Tensor[(200), float64], %var_5859: Tensor[(2, 336), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) {
  %720 = @func_4215() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %721 = cast(%var_5849, dtype="float64") /* ty=Tensor[(200), float64] */;
  %722 = reshape(%721, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float64] */;
  %723 = @func_4525(%722) /* ty=(Tensor[(5, 10, 4), float64],) */;
  %724 = cast(%var_5859, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %725 = cast(meta[relay.Constant][42] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %726 = cast(meta[relay.Constant][43] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %727 = reshape(%724, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %728 = reshape(%725, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %729 = reshape(%726, newshape=[]) /* ty=int16 */;
  %730 = @func_4823(%727, %728, %729) /* ty=(Tensor[(768), float32], Tensor[(16, 6, 8), float32], Tensor[(672), float32], Tensor[(2016), int64], Tensor[(168, 4), float32], Tensor[(10, 9, 13), float32], int16, Tensor[(264), float64]) */;
  %731 = %720.0;
  %732 = %723.0;
  %733 = %730.6;
  (%731, %732, %var_5849, %733, %var_5859, meta[relay.Constant][42] /* ty=Tensor[(2016), int64] */, meta[relay.Constant][43] /* ty=int16 */)
}

def @func_3931(%var_3918: Tensor[(168, 4), float32], %var_3919: Tensor[(2016), int64]) -> (Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) {
  %734 = @func_3614() /* ty=(Tensor[(16, 6, 8), float32],) */;
  %735 = cast(%var_3918, dtype="float32") /* ty=Tensor[(168, 4), float32] */;
  %736 = cast(%var_3919, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %737 = reshape(%735, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %738 = reshape(%736, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %739 = @func_2242(%737, %738) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(12, 7, 8), float32], float32, Tensor[(672), float32], Tensor[(12, 12, 14), int8], Tensor[(2016), int64]) */;
  %740 = %734.0;
  %741 = %739.0;
  (%740, %741, %var_3918, %var_3919)
}

def @func_6762(%var_6758: Tensor[(14, 1, 13), float32]) -> (Tensor[(14, 1, 13), float32],) {
  %742 = cast(%var_6758, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
  %743 = tan(%742) /* ty=Tensor[(14, 1, 13), float32] */;
  (%743,)
}

def @func_6088(%var_6036: Tensor[(432), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(6, 12, 6), uint8], Tensor[(432), uint8], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) {
  %744 = cast(%var_6036, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %745 = reshape(%744, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %746 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %748 = reshape(%747, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %749 = @func_3736(%748) /* ty=(Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) */;
  %750 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %751 = @func_5028(%745) /* ty=Tensor[(6, 12, 6), uint8] */;
  %752 = %749.0;
  %753 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  (%746, %750, %751, %var_6036, %752, %753)
}

def @func_2481() -> (Tensor[(10, 9, 13), float64],) {
  %754 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %755 = %754.0;
  (%755,)
}

def @func_4190() -> (Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32]) {
  %756 = @func_4111() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %757 = @func_3614() /* ty=(Tensor[(16, 6, 8), float32],) */;
  %758 = %756.0;
  %759 = %757.0;
  (%758, %759)
}

def @func_4823(%var_4782: Tensor[(672), float32], %var_4783: Tensor[(2016), int64], %var_4803: int16) -> (Tensor[(768), float32], Tensor[(16, 6, 8), float32], Tensor[(672), float32], Tensor[(2016), int64], Tensor[(168, 4), float32], Tensor[(10, 9, 13), float32], int16, Tensor[(264), float64]) {
  %760 = @func_3104() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 5, 15), uint8], Tensor[(60, 36), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(10, 9, 13), float64]) */;
  %761 = cast(%var_4782, dtype="float32") /* ty=Tensor[(672), float32] */;
  %762 = cast(%var_4783, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %763 = reshape(%761, newshape=[168, 4]) /* ty=Tensor[(168, 4), float32] */;
  %764 = reshape(%762, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %765 = @func_3931(%763, %764) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) */;
  %766 = cast(%var_4782, dtype="float32") /* ty=Tensor[(672), float32] */;
  %767 = cast(%var_4783, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %768 = reshape(%766, newshape=[168, 4]) /* ty=Tensor[(168, 4), float32] */;
  %769 = reshape(%767, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %770 = @func_3931(%768, %769) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) */;
  %771 = cast(%var_4803, dtype="int16") /* ty=int16 */;
  %772 = cast(meta[relay.Constant][44] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %773 = cast(%var_4783, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %774 = reshape(%771, newshape=[]) /* ty=int16 */;
  %775 = reshape(%772, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %776 = reshape(%773, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %777 = @func_2376(%774, %775, %776) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
  %778 = %760.4;
  %779 = %765.0;
  %780 = %770.2;
  %781 = %777.3;
  (%778, %779, %var_4782, %var_4783, %780, %781, %var_4803, meta[relay.Constant][44] /* ty=Tensor[(264), float64] */)
}

def @func_2928() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %782 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
  %783 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %784 = %782.0;
  %785 = %783.0;
  %786 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  (%784, %785, %786)
}

def @func_6443(%var_6437: Tensor[(15, 14, 6), float64], %var_6438: Tensor[(15, 14, 6), float64]) -> (Tensor[(15, 14, 6), float64],) {
  %787 = cast(%var_6438, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %788 = shape_of(%var_6437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%var_6437, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %791 = floor_mod(%789, %790) /* ty=Tensor[(15, 14, 6), float64] */;
  (%791,)
}

def @func_7682(%var_7677: Tensor[(750), uint8], %var_7678: Tensor[(768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) {
  %792 = cast(meta[relay.Constant][45] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %793 = cast(meta[relay.Constant][45] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %794 = cast(%var_7677, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %795 = cast(%var_7678, dtype="float32") /* ty=Tensor[(768), float32] */;
  %796 = reshape(%792, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %797 = reshape(%793, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %798 = reshape(%794, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %799 = reshape(%795, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %800 = @func_1247(%796, %797, %798, %799) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %801 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
  %802 = %800.5;
  (%801, %802, meta[relay.Constant][45] /* ty=Tensor[(2160), float32] */, %var_7677, %var_7678)
}

def @func_4564() -> (Tensor[(10, 9, 13), float32],) {
  %803 = @func_4243() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %804 = %803.0;
  (%804,)
}

def @func_2854() -> Tensor[(10, 9, 13), float32] {
  %805 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %805.0
}

def @func_1917(%var_1910: Tensor[(10, 4, 7), float64]) -> Tensor[(10, 4, 7), float64] {
  %806 = cast(%var_1910, dtype="float64") /* ty=Tensor[(10, 4, 7), float64] */;
  acosh(%806) /* ty=Tensor[(10, 4, 7), float64] */
}

def @func_153(%var_130: Tensor[(16, 6, 8), float32]) -> Tensor[(16, 6, 8), float32] {
  %807 = cast(%var_130, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  acosh(%807) /* ty=Tensor[(16, 6, 8), float32] */
}

def @func_982(%var_972: Tensor[(9, 15, 3), int16], %var_973: Tensor[(9, 15, 3), int16]) -> Tensor[(9, 15, 3), bool] {
  %808 = cast(%var_973, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %809 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%var_972, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%810, %811) /* ty=Tensor[(9, 15, 3), bool] */
}

def @func_2681() -> Tensor[(10, 9, 13), float64] {
  %812 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %812.1
}

def @func_5617() -> (Tensor[(14, 768), uint8],) {
  %813 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
  %814 = %813.0;
  %815 = cast(%814, dtype="uint8") /* ty=Tensor[(1, 768), uint8] */;
  %816 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 768), float64] */, dtype="uint8") /* ty=Tensor[(14, 768), uint8] */;
  %817 = add(%815, %816) /* ty=Tensor[(14, 768), uint8] */;
  (%817,)
}

def @func_5088() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) {
  %818 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %819 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  (%818, %819)
}

def @func_7757(%var_7721: Tensor[(1, 144), float32], %var_7722: Tensor[(672), float32], %var_7744: Tensor[(32, 24), float32]) -> (Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(1, 144), float32], Tensor[(672), float32], Tensor[(2, 1080), float32], Tensor[(750), uint8], Tensor[(32, 24), float32], Tensor[(4608), float64]) {
  %820 = cast(%var_7721, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %821 = cast(%var_7722, dtype="float32") /* ty=Tensor[(672), float32] */;
  %822 = cast(meta[relay.Constant][47] /* ty=Tensor[(4608), float64] */, dtype="float64") /* ty=Tensor[(4608), float64] */;
  %823 = reshape(%820, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %824 = reshape(%821, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %825 = reshape(%822, newshape=[6, 768]) /* ty=Tensor[(6, 768), float64] */;
  %826 = @func_6699(%823, %824, %825) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(750), uint8], Tensor[(10, 2, 16), int16], Tensor[(144), float32], Tensor[(160), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(200), float64], Tensor[(672), float32], Tensor[(6, 768), bool], Tensor[(200), float64], Tensor[(14, 768), uint16], Tensor[(14, 768), float32]) */;
  %827 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 1080), float32] */, dtype="float32") /* ty=Tensor[(2, 1080), float32] */;
  %828 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 1080), float32] */, dtype="float32") /* ty=Tensor[(2, 1080), float32] */;
  %829 = cast(meta[relay.Constant][49] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %830 = cast(%var_7744, dtype="float32") /* ty=Tensor[(32, 24), float32] */;
  %831 = reshape(%827, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %832 = reshape(%828, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %833 = reshape(%829, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %834 = reshape(%830, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %835 = @func_1247(%831, %832, %833, %834) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %836 = %835.1;
  %837 = cast(meta[relay.Constant][47] /* ty=Tensor[(4608), float64] */, dtype="float64") /* ty=Tensor[(4608), float64] */;
  %838 = cast(%836, dtype="float64") /* ty=float64 */;
  %839 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %840 = %826.4;
  %841 = divide(%837, %838) /* ty=Tensor[(4608), float64] */;
  (%839, %840, %var_7721, %var_7722, meta[relay.Constant][48] /* ty=Tensor[(2, 1080), float32] */, meta[relay.Constant][49] /* ty=Tensor[(750), uint8] */, %var_7744, %841)
}

def @func_6752() -> Tensor[(10, 9, 13), float32] {
  @func_3072() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_5692(%var_5649: Tensor[(14, 768), uint8], %var_5667: Tensor[(14, 768), uint16], %var_5679: Tensor[(14, 768), float32]) -> (Tensor[(14, 768), float64], Tensor[(14, 768), bool], Tensor[(14, 768), float64], Tensor[(14, 768), float64]) {
  %842 = @func_5617() /* ty=(Tensor[(14, 768), uint8],) */;
  %843 = %842.0;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
  %845 = sqrt(%844) /* ty=Tensor[(14, 768), float32] */;
  %846 = cast(%var_5649, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(2), int32] */;
  %848 = cast(%845, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %850 = cast(%var_5649, dtype="uint16") /* ty=Tensor[(14, 768), uint16] */;
  %851 = shape_of(%843, dtype="int32") /* ty=Tensor[(2), int32] */;
  %852 = cast(%843, dtype="uint16") /* ty=Tensor[(14, 768), uint16] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %854 = bitwise_or(%852, %853) /* ty=Tensor[(14, 768), uint16] */;
  %855 = cast(%var_5667, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(2), int32] */;
  %857 = cast(%854, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %859 = cast(%845, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
  %860 = log(%859) /* ty=Tensor[(14, 768), float32] */;
  %861 = cast(%var_5679, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(2), int32] */;
  %863 = cast(%860, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %865 = cast(%845, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
  %866 = cos(%865) /* ty=Tensor[(14, 768), float32] */;
  %867 = cast(%var_5667, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(2), int32] */;
  %869 = cast(%866, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %871 = floor_mod(%848, %849) /* ty=Tensor[(14, 768), float64] */;
  %872 = equal(%857, %858) /* ty=Tensor[(14, 768), bool] */;
  %873 = divide(%863, %864) /* ty=Tensor[(14, 768), float64] */;
  %874 = floor_divide(%869, %870) /* ty=Tensor[(14, 768), float64] */;
  (%871, %872, %873, %874)
}

def @func_4111() -> (Tensor[(10, 9, 13), float32],) {
  %875 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  (%875,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_724(%var_701: float32, %var_702: Tensor[(12, 7, 8), float32]) -> Tensor[(12, 7, 8), float32] {
  %0 = cast(%var_701, dtype="float32") /* ty=float32 */;
  %1 = cast(%var_702, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  power(%0, %1) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_363(%var_361: Tensor[(10, 5, 15), uint8]) -> (Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) {
  @func_360(%var_361) /* ty=(Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) */
}

def @func_6244(%var_6242: Tensor[(9, 5, 12), float32]) -> (Tensor[(9, 5, 12), float32],) {
  @func_6241(%var_6242) /* ty=(Tensor[(9, 5, 12), float32],) */
}

def @func_7959() -> (Tensor[(10, 9, 13), float32], Tensor[(405), bool]) {
  @func_7957() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(405), bool]) */
}

def @func_3314(%var_3312: Tensor[(750), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) {
  @func_3311(%var_3312) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */
}

def @func_1900(%var_1899: Tensor[(10, 1, 16), int16]) -> (Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) {
  %7 = fn (%var_1877: Tensor[(10, 1, 16), int16]) -> (Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) {
    %2 = cast(%var_1877, dtype="int16") /* ty=Tensor[(10, 1, 16), int16] */;
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 2, 16), int16] */, dtype="int16") /* ty=Tensor[(10, 2, 16), int16] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 2, 16), int16] */, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %5 = bitwise_and(%2, %3) /* ty=Tensor[(10, 2, 16), int16] */;
    %6 = log2(%4) /* ty=Tensor[(10, 2, 16), float64] */;
    (%5, %6)
  };
  %7(%var_1899) /* ty=(Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) */
}

def @func_1920(%var_1918: Tensor[(10, 4, 7), float64]) -> Tensor[(10, 4, 7), float64] {
  @func_1917(%var_1918) /* ty=Tensor[(10, 4, 7), float64] */
}

def @func_5168(%var_5130: Tensor[(12, 12, 1), float32]) -> (Tensor[(12, 12, 15), bool], Tensor[(10, 2, 16), int16], Tensor[(12, 12, 15), float64]) {
  %8 = cast(%var_5130, dtype="bool") /* ty=Tensor[(12, 12, 1), bool] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %10 = @func_4718() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %12 = atanh(%11) /* ty=Tensor[(12, 12, 15), float32] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
  %14 = less_equal(%8, %9) /* ty=Tensor[(12, 12, 15), bool] */;
  %15 = %10.1;
  %16 = sqrt(%13) /* ty=Tensor[(12, 12, 15), float64] */;
  (%14, %15, %16)
}

def @func_3105() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 5, 15), uint8], Tensor[(60, 36), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(10, 9, 13), float64]) {
  %30 = fn () -> (Tensor[(10, 9, 13), float32], Tensor[(10, 5, 15), uint8], Tensor[(60, 36), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(10, 9, 13), float64]) {
    %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(60, 36), float32] */, dtype="float32") /* ty=Tensor[(60, 36), float32] */;
    %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(60, 36), float32] */, dtype="float32") /* ty=Tensor[(60, 36), float32] */;
    %19 = cast(meta[relay.Constant][3] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %20 = cast(meta[relay.Constant][4] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
    %21 = reshape(%17, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
    %22 = reshape(%18, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
    %23 = reshape(%19, newshape=[750]) /* ty=Tensor[(750), uint8] */;
    %24 = reshape(%20, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %25 = @func_1247(%21, %22, %23, %24) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
    %26 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %27 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
    %28 = %25.4;
    %29 = %26.0;
    (%27, %28, meta[relay.Constant][2] /* ty=Tensor[(60, 36), float32] */, meta[relay.Constant][3] /* ty=Tensor[(750), uint8] */, meta[relay.Constant][4] /* ty=Tensor[(768), float32] */, %29)
  };
  %30() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 5, 15), uint8], Tensor[(60, 36), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(10, 9, 13), float64]) */
}

def @func_6191() -> Tensor[(10, 9, 13), float64] {
  @func_6189() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_6447(%var_6445: Tensor[(15, 14, 6), float64], %var_6446: Tensor[(15, 14, 6), float64]) -> (Tensor[(15, 14, 6), float64],) {
  @func_6443(%var_6445, %var_6446) /* ty=(Tensor[(15, 14, 6), float64],) */
}

def @func_7380() -> Tensor[(10, 9, 13), float32] {
  %32 = fn () -> Tensor[(10, 9, 13), float32] {
    %31 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
    %31.0
  };
  %32() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_5090() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) {
  @func_5088() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */
}

def @func_5521(%var_5519: Tensor[(13, 13, 13), float32], %var_5520: Tensor[(750), uint8]) -> (Tensor[(13, 13, 13), float32], Tensor[(768), bool], Tensor[(750), uint8]) {
  @func_5517(%var_5519, %var_5520) /* ty=(Tensor[(13, 13, 13), float32], Tensor[(768), bool], Tensor[(750), uint8]) */
}

def @func_3615() -> (Tensor[(16, 6, 8), float32],) {
  %35 = fn () -> (Tensor[(16, 6, 8), float32],) {
    %33 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
    %34 = %33.1;
    (%34,)
  };
  %35() /* ty=(Tensor[(16, 6, 8), float32],) */
}

def @func_5868(%var_5866: Tensor[(200), float64], %var_5867: Tensor[(2, 336), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) {
  @func_5864(%var_5866, %var_5867) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) */
}

def @func_7757(%var_7721: Tensor[(1, 144), float32], %var_7722: Tensor[(672), float32], %var_7744: Tensor[(32, 24), float32]) -> (Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(1, 144), float32], Tensor[(672), float32], Tensor[(2, 1080), float32], Tensor[(750), uint8], Tensor[(32, 24), float32], Tensor[(4608), float64]) {
  %36 = cast(%var_7721, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %37 = cast(%var_7722, dtype="float32") /* ty=Tensor[(672), float32] */;
  %38 = cast(meta[relay.Constant][5] /* ty=Tensor[(4608), float64] */, dtype="float64") /* ty=Tensor[(4608), float64] */;
  %39 = reshape(%36, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %40 = reshape(%37, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %41 = reshape(%38, newshape=[6, 768]) /* ty=Tensor[(6, 768), float64] */;
  %42 = @func_6699(%39, %40, %41) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(750), uint8], Tensor[(10, 2, 16), int16], Tensor[(144), float32], Tensor[(160), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(200), float64], Tensor[(672), float32], Tensor[(6, 768), bool], Tensor[(200), float64], Tensor[(14, 768), uint16], Tensor[(14, 768), float32]) */;
  %43 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 1080), float32] */, dtype="float32") /* ty=Tensor[(2, 1080), float32] */;
  %44 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 1080), float32] */, dtype="float32") /* ty=Tensor[(2, 1080), float32] */;
  %45 = cast(meta[relay.Constant][7] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %46 = cast(%var_7744, dtype="float32") /* ty=Tensor[(32, 24), float32] */;
  %47 = reshape(%43, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %48 = reshape(%44, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %49 = reshape(%45, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %50 = reshape(%46, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %51 = @func_1247(%47, %48, %49, %50) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %52 = %51.1;
  %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(4608), float64] */, dtype="float64") /* ty=Tensor[(4608), float64] */;
  %54 = cast(%52, dtype="float64") /* ty=float64 */;
  %55 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %56 = %42.4;
  %57 = divide(%53, %54) /* ty=Tensor[(4608), float64] */;
  (%55, %56, %var_7721, %var_7722, meta[relay.Constant][6] /* ty=Tensor[(2, 1080), float32] */, meta[relay.Constant][7] /* ty=Tensor[(750), uint8] */, %var_7744, %57)
}

def @func_7902() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(1, 768), float64], Tensor[(16, 6, 8), float32]) {
  %66 = fn () -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(1, 768), float64], Tensor[(16, 6, 8), float32]) {
    %58 = @func_5361() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), bool], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(5, 56), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
    %59 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
    %60 = %59.0;
    %61 = cast(%60, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
    %62 = reshape(%61, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
    %63 = %58.1;
    %64 = @func_7379() /* ty=Tensor[(10, 9, 13), float32] */;
    %65 = @func_153(%62) /* ty=Tensor[(16, 6, 8), float32] */;
    (%63, %64, %60, %65)
  };
  %66() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(1, 768), float64], Tensor[(16, 6, 8), float32]) */
}

def @func_5247() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16]) {
  %67 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %68 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %69 = %67.0;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %71 = reshape(%70, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %72 = %68.0;
  %73 = @func_4639(%71) /* ty=Tensor[(10, 9, 13), int16] */;
  (%69, %72, %73)
}

def @func_986(%var_984: Tensor[(9, 15, 3), int16], %var_985: Tensor[(9, 15, 3), int16]) -> Tensor[(9, 15, 3), bool] {
  @func_982(%var_984, %var_985) /* ty=Tensor[(9, 15, 3), bool] */
}

def @func_3605(%var_3603: Tensor[(750), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(750), float64], Tensor[(10, 9, 13), float64]) {
  @func_3602(%var_3603) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(750), float64], Tensor[(10, 9, 13), float64]) */
}

def @func_4389(%var_4387: Tensor[(3, 3, 7), uint8], %var_4388: Tensor[(3, 3, 7), uint8]) -> (Tensor[(3, 3, 7), uint8], Tensor[(3, 3, 7), bool], Tensor[(3, 3, 7), float64], Tensor[(10, 9, 13), float64]) {
  %87 = fn (%var_4353: Tensor[(3, 3, 7), uint8], %var_4354: Tensor[(3, 3, 7), uint8]) -> (Tensor[(3, 3, 7), uint8], Tensor[(3, 3, 7), bool], Tensor[(3, 3, 7), float64], Tensor[(10, 9, 13), float64]) {
    %74 = cast(%var_4354, dtype="uint8") /* ty=Tensor[(3, 3, 7), uint8] */;
    %75 = shape_of(%var_4353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(%var_4353, dtype="uint8") /* ty=Tensor[(3, 3, 7), uint8] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %78 = cast(%var_4354, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
    %79 = shape_of(%var_4353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%var_4353, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %82 = cast(%var_4354, dtype="float64") /* ty=Tensor[(3, 3, 7), float64] */;
    %83 = multiply(%76, %77) /* ty=Tensor[(3, 3, 7), uint8] */;
    %84 = greater_equal(%80, %81) /* ty=Tensor[(3, 3, 7), bool] */;
    %85 = exp(%82) /* ty=Tensor[(3, 3, 7), float64] */;
    %86 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
    (%83, %84, %85, %86)
  };
  %87(%var_4387, %var_4388) /* ty=(Tensor[(3, 3, 7), uint8], Tensor[(3, 3, 7), bool], Tensor[(3, 3, 7), float64], Tensor[(10, 9, 13), float64]) */
}

def @func_2407() -> Tensor[(10, 9, 13), float64] {
  %89 = fn () -> Tensor[(10, 9, 13), float64] {
    %88 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %88.0
  };
  %89() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_7807(%var_7803: Tensor[(24), float64], %var_7804: Tensor[(2002), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64], Tensor[(24), float64], Tensor[(2002), float64]) {
  %90 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %91 = cast(%var_7803, dtype="float64") /* ty=Tensor[(24), float64] */;
  %92 = cast(%var_7804, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %93 = reshape(%91, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float64] */;
  %94 = reshape(%92, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %95 = @func_4901(%93, %94) /* ty=(Tensor[(2, 1, 12), float64], Tensor[(10, 9, 13), float64], Tensor[(2002), float64], Tensor[(2, 1, 12), float32], Tensor[(750), uint8], int16) */;
  %96 = %90.0;
  %97 = %95.1;
  (%96, %97, %var_7803, %var_7804)
}

def @func_1253(%var_1249: Tensor[(9, 15, 16), float32], %var_1250: Tensor[(9, 15, 16), float32], %var_1251: Tensor[(750), uint8], %var_1252: Tensor[(768), float32]) -> (Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) {
  @func_1247(%var_1249, %var_1250, %var_1251, %var_1252) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */
}

def @func_3390() -> Tensor[(10, 9, 13), float64] {
  %98 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %98.0
}

def @func_4930() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %99 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %100 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %101 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %102 = %99.1;
  (%100, %101, %102)
}

def @func_7480() -> (Tensor[(10, 9, 13), float32], Tensor[(10752), int64]) {
  @func_7478() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10752), int64]) */
}

def @func_3449(%var_3448: Tensor[(14, 11, 13), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(14, 11, 13), int64], Tensor[(14, 11, 13), float32]) {
  %113 = fn (%var_3422: Tensor[(14, 11, 13), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(14, 11, 13), int64], Tensor[(14, 11, 13), float32]) {
    %103 = cast(%var_3422, dtype="float64") /* ty=Tensor[(14, 11, 13), float64] */;
    %104 = sqrt(%103) /* ty=Tensor[(14, 11, 13), float64] */;
    %105 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 11, 13), float64] */, dtype="int64") /* ty=Tensor[(14, 11, 13), int64] */;
    %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%104, dtype="int64") /* ty=Tensor[(14, 11, 13), int64] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %109 = cast(%104, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
    %110 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
    %111 = maximum(%107, %108) /* ty=Tensor[(14, 11, 13), int64] */;
    %112 = asin(%109) /* ty=Tensor[(14, 11, 13), float32] */;
    (%110, %111, %112)
  };
  %113(%var_3448) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(14, 11, 13), int64], Tensor[(14, 11, 13), float32]) */
}

def @func_5982(%var_5980: Tensor[(10, 9, 13), float64]) -> (Tensor[(10, 9, 13), bool],) {
  @func_5979(%var_5980) /* ty=(Tensor[(10, 9, 13), bool],) */
}

def @func_5249() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16]) {
  @func_5247() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16]) */
}

def @func_6334(%var_6333: Tensor[(768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(768), float32], Tensor[(10, 9, 13), int16], Tensor[(16, 6, 8), float32], int16, int16, Tensor[(10, 9, 13), float32], Tensor[(264, 1), float64], Tensor[(2016), int64]) {
  %135 = fn (%var_6308: Tensor[(768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(768), float32], Tensor[(10, 9, 13), int16], Tensor[(16, 6, 8), float32], int16, int16, Tensor[(10, 9, 13), float32], Tensor[(264, 1), float64], Tensor[(2016), int64]) {
    %114 = @func_3768() /* ty=Tensor[(10, 9, 13), float64] */;
    %115 = cast(%114, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
    %116 = reshape(%115, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
    %117 = cast(%var_6308, dtype="float32") /* ty=Tensor[(768), float32] */;
    %118 = reshape(%117, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
    %119 = @func_153(%118) /* ty=Tensor[(16, 6, 8), float32] */;
    %120 = cast(%119, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
    %121 = cast(meta[relay.Constant][9] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %122 = reshape(%121, newshape=[]) /* ty=int16 */;
    %123 = @func_1863(%122) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) */;
    %124 = %123.2;
    %125 = cast(%124, dtype="int16") /* ty=int16 */;
    %126 = cast(meta[relay.Constant][10] /* ty=Tensor[(264, 1), float64] */, dtype="float64") /* ty=Tensor[(264, 1), float64] */;
    %127 = cast(meta[relay.Constant][11] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %128 = reshape(%125, newshape=[]) /* ty=int16 */;
    %129 = reshape(%126, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %130 = reshape(%127, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
    %131 = @func_2376(%128, %129, %130) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
    %132 = @func_4639(%116) /* ty=Tensor[(10, 9, 13), int16] */;
    %133 = erf(%120) /* ty=Tensor[(16, 6, 8), float32] */;
    %134 = %131.0;
    (%114, %var_6308, %132, %133, %124, meta[relay.Constant][9] /* ty=int16 */, %134, meta[relay.Constant][10] /* ty=Tensor[(264, 1), float64] */, meta[relay.Constant][11] /* ty=Tensor[(2016), int64] */)
  };
  %135(%var_6333) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(768), float32], Tensor[(10, 9, 13), int16], Tensor[(16, 6, 8), float32], int16, int16, Tensor[(10, 9, 13), float32], Tensor[(264, 1), float64], Tensor[(2016), int64]) */
}

def @func_4452() -> (Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) {
  @func_4450() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) */
}

def @func_1813() -> (Tensor[(10, 9, 13), float32],) {
  @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @func_5696(%var_5693: Tensor[(14, 768), uint8], %var_5694: Tensor[(14, 768), uint16], %var_5695: Tensor[(14, 768), float32]) -> (Tensor[(14, 768), float64], Tensor[(14, 768), bool], Tensor[(14, 768), float64], Tensor[(14, 768), float64]) {
  %169 = fn (%var_5649: Tensor[(14, 768), uint8], %var_5667: Tensor[(14, 768), uint16], %var_5679: Tensor[(14, 768), float32]) -> (Tensor[(14, 768), float64], Tensor[(14, 768), bool], Tensor[(14, 768), float64], Tensor[(14, 768), float64]) {
    %136 = @func_5617() /* ty=(Tensor[(14, 768), uint8],) */;
    %137 = %136.0;
    %138 = cast(%137, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
    %139 = sqrt(%138) /* ty=Tensor[(14, 768), float32] */;
    %140 = cast(%var_5649, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(2), int32] */;
    %142 = cast(%139, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %144 = cast(%var_5649, dtype="uint16") /* ty=Tensor[(14, 768), uint16] */;
    %145 = shape_of(%137, dtype="int32") /* ty=Tensor[(2), int32] */;
    %146 = cast(%137, dtype="uint16") /* ty=Tensor[(14, 768), uint16] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %148 = bitwise_or(%146, %147) /* ty=Tensor[(14, 768), uint16] */;
    %149 = cast(%var_5667, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
    %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
    %151 = cast(%148, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %153 = cast(%139, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
    %154 = log(%153) /* ty=Tensor[(14, 768), float32] */;
    %155 = cast(%var_5679, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(2), int32] */;
    %157 = cast(%154, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %159 = cast(%139, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
    %160 = cos(%159) /* ty=Tensor[(14, 768), float32] */;
    %161 = cast(%var_5667, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(2), int32] */;
    %163 = cast(%160, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %165 = floor_mod(%142, %143) /* ty=Tensor[(14, 768), float64] */;
    %166 = equal(%151, %152) /* ty=Tensor[(14, 768), bool] */;
    %167 = divide(%157, %158) /* ty=Tensor[(14, 768), float64] */;
    %168 = floor_divide(%163, %164) /* ty=Tensor[(14, 768), float64] */;
    (%165, %166, %167, %168)
  };
  %169(%var_5693, %var_5694, %var_5695) /* ty=(Tensor[(14, 768), float64], Tensor[(14, 768), bool], Tensor[(14, 768), float64], Tensor[(14, 768), float64]) */
}

def @func_4339() -> Tensor[(10, 9, 13), float64] {
  %170 = fn () -> Tensor[(10, 9, 13), float64] {
    @func_3390() /* ty=Tensor[(10, 9, 13), float64] */
  };
  %170() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_7568(%var_7567: Tensor[(1170, 1), float64]) -> (Tensor[(1, 768), float64], Tensor[(10, 9, 13), bool], Tensor[(1170, 6), int16], Tensor[(12, 768), int64], Tensor[(9216), float32], Tensor[(10, 9, 13), int32], Tensor[(1, 768), float64], Tensor[(10, 9, 13), float32], Tensor[(1170, 6), float64]) {
  %193 = fn (%var_7515: Tensor[(1170, 1), float64]) -> (Tensor[(1, 768), float64], Tensor[(10, 9, 13), bool], Tensor[(1170, 6), int16], Tensor[(12, 768), int64], Tensor[(9216), float32], Tensor[(10, 9, 13), int32], Tensor[(1, 768), float64], Tensor[(10, 9, 13), float32], Tensor[(1170, 6), float64]) {
    %171 = cast(%var_7515, dtype="float64") /* ty=Tensor[(1170, 1), float64] */;
    %172 = reshape(%171, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
    %173 = @func_5979(%172) /* ty=(Tensor[(10, 9, 13), bool],) */;
    %174 = cast(%var_7515, dtype="float32") /* ty=Tensor[(1170, 1), float32] */;
    %175 = sinh(%174) /* ty=Tensor[(1170, 1), float32] */;
    %176 = cast(%175, dtype="int16") /* ty=Tensor[(1170, 1), int16] */;
    %177 = cast(meta[relay.Constant][12] /* ty=Tensor[(1170, 6), float32] */, dtype="int16") /* ty=Tensor[(1170, 6), int16] */;
    %178 = cast(meta[relay.Constant][13] /* ty=Tensor[(9216), float32] */, dtype="float32") /* ty=Tensor[(9216), float32] */;
    %179 = reshape(%178, newshape=[12, 768]) /* ty=Tensor[(12, 768), float32] */;
    %180 = cast(%var_7515, dtype="float64") /* ty=Tensor[(1170, 1), float64] */;
    %181 = reshape(%180, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
    %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(1170, 6), float32] */, dtype="float32") /* ty=Tensor[(1170, 6), float32] */;
    %183 = sinh(%182) /* ty=Tensor[(1170, 6), float32] */;
    %184 = cast(%183, dtype="float64") /* ty=Tensor[(1170, 6), float64] */;
    %185 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
    %186 = %173.0;
    %187 = right_shift(%176, %177) /* ty=Tensor[(1170, 6), int16] */;
    %188 = @func_7351(%179) /* ty=Tensor[(12, 768), int64] */;
    %189 = @func_5471(%181) /* ty=Tensor[(10, 9, 13), int32] */;
    %190 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
    %191 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
    %192 = tan(%184) /* ty=Tensor[(1170, 6), float64] */;
    (%185, %186, %187, %188, meta[relay.Constant][13] /* ty=Tensor[(9216), float32] */, %189, %190, %191, %192)
  };
  %193(%var_7567) /* ty=(Tensor[(1, 768), float64], Tensor[(10, 9, 13), bool], Tensor[(1170, 6), int16], Tensor[(12, 768), int64], Tensor[(9216), float32], Tensor[(10, 9, 13), int32], Tensor[(1, 768), float64], Tensor[(10, 9, 13), float32], Tensor[(1170, 6), float64]) */
}

def @func_6254() -> (Tensor[(10, 9, 13), float64],) {
  %195 = fn () -> (Tensor[(10, 9, 13), float64],) {
    %194 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
    (%194,)
  };
  %195() /* ty=(Tensor[(10, 9, 13), float64],) */
}

def @func_1811() -> (Tensor[(10, 9, 13), float32],) {
  %196 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %197 = sqrt(%196) /* ty=Tensor[(10, 9, 13), float32] */;
  (%197,)
}

def @func_6241(%var_6229: Tensor[(9, 5, 12), float32]) -> (Tensor[(9, 5, 12), float32],) {
  %198 = cast(%var_6229, dtype="float32") /* ty=Tensor[(9, 5, 12), float32] */;
  %199 = cosh(%198) /* ty=Tensor[(9, 5, 12), float32] */;
  (%199,)
}

def @func_1958() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */
}

def @func_5991() -> Tensor[(10, 9, 13), float32] {
  @func_5989() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_2929() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %205 = fn () -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
    %200 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
    %201 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %202 = %200.0;
    %203 = %201.0;
    %204 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
    (%202, %203, %204)
  };
  %205() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */
}

def @func_6963(%var_6941: float64, %var_6942: Tensor[(14, 10, 14), float64], %var_6953: Tensor[(750), uint8]) -> (Tensor[(14, 10, 14), float64], Tensor[(750), uint8], Tensor[(70), int16], Tensor[(750), uint8], Tensor[(10, 9, 13), float32]) {
  %206 = cast(%var_6941, dtype="float64") /* ty=float64 */;
  %207 = cast(%var_6942, dtype="float64") /* ty=Tensor[(14, 10, 14), float64] */;
  %208 = cast(%var_6941, dtype="int16") /* ty=int16 */;
  %209 = cast(meta[relay.Constant][15] /* ty=Tensor[(70), int16] */, dtype="int16") /* ty=Tensor[(70), int16] */;
  %210 = cast(%var_6953, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %211 = reshape(%208, newshape=[]) /* ty=int16 */;
  %212 = reshape(%209, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
  %213 = reshape(%210, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %214 = @func_498(%211, %212, %213) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
  %215 = @func_4564() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %216 = power(%206, %207) /* ty=Tensor[(14, 10, 14), float64] */;
  %217 = %214.2;
  %218 = %215.0;
  (%216, %217, meta[relay.Constant][15] /* ty=Tensor[(70), int16] */, %var_6953, %218)
}

def @func_4450() -> (Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) {
  %219 = @func_4243() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %220 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 150), uint8] */, dtype="uint8") /* ty=Tensor[(5, 150), uint8] */;
  %221 = reshape(%220, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %222 = @func_3311(%221) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */;
  %223 = %219.0;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %225 = reshape(%224, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %226 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 150), uint8] */, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
  %227 = %222.4;
  %228 = @func_2888(%225) /* ty=Tensor[(10, 9, 13), float32] */;
  %229 = log10(%226) /* ty=Tensor[(5, 150), float32] */;
  (%223, %227, %228, %229)
}

def @func_982(%var_972: Tensor[(9, 15, 3), int16], %var_973: Tensor[(9, 15, 3), int16]) -> Tensor[(9, 15, 3), bool] {
  %230 = cast(%var_973, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %231 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_972, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%232, %233) /* ty=Tensor[(9, 15, 3), bool] */
}

def @func_879(%var_878: Tensor[(11, 4, 6), float64]) -> Tensor[(11, 4, 6), float64] {
  %235 = fn (%var_873: Tensor[(11, 4, 6), float64]) -> Tensor[(11, 4, 6), float64] {
    %234 = cast(%var_873, dtype="float64") /* ty=Tensor[(11, 4, 6), float64] */;
    log(%234) /* ty=Tensor[(11, 4, 6), float64] */
  };
  %235(%var_878) /* ty=Tensor[(11, 4, 6), float64] */
}

def @func_4286() -> Tensor[(1, 768), float64] {
  @func_4284() /* ty=Tensor[(1, 768), float64] */
}

def @func_4565() -> (Tensor[(10, 9, 13), float32],) {
  %238 = fn () -> (Tensor[(10, 9, 13), float32],) {
    %236 = @func_4243() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %237 = %236.0;
    (%237,)
  };
  %238() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @func_6090(%var_6089: Tensor[(432), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(6, 12, 6), uint8], Tensor[(432), uint8], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) {
  %249 = fn (%var_6036: Tensor[(432), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(6, 12, 6), uint8], Tensor[(432), uint8], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) {
    %239 = cast(%var_6036, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %240 = reshape(%239, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %241 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
    %242 = cast(%241, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
    %243 = reshape(%242, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
    %244 = @func_3736(%243) /* ty=(Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) */;
    %245 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
    %246 = @func_5028(%240) /* ty=Tensor[(6, 12, 6), uint8] */;
    %247 = %244.0;
    %248 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
    (%241, %245, %246, %var_6036, %247, %248)
  };
  %249(%var_6089) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(6, 12, 6), uint8], Tensor[(432), uint8], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) */
}

def @func_3242(%var_3240: Tensor[(5, 1, 5), float32]) -> Tensor[(5, 1, 5), float32] {
  @func_3239(%var_3240) /* ty=Tensor[(5, 1, 5), float32] */
}

def @func_2623() -> (Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) {
  @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */
}

def @func_6764(%var_6763: Tensor[(14, 1, 13), float32]) -> (Tensor[(14, 1, 13), float32],) {
  %252 = fn (%var_6758: Tensor[(14, 1, 13), float32]) -> (Tensor[(14, 1, 13), float32],) {
    %250 = cast(%var_6758, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
    %251 = tan(%250) /* ty=Tensor[(14, 1, 13), float32] */;
    (%251,)
  };
  %252(%var_6763) /* ty=(Tensor[(14, 1, 13), float32],) */
}

def @func_2621() -> (Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) {
  %253 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %254 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 768), float32] */, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %255 = reshape(%254, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %256 = %253.0;
  %257 = @func_153(%255) /* ty=Tensor[(16, 6, 8), float32] */;
  (%256, %257, meta[relay.Constant][17] /* ty=Tensor[(1, 768), float32] */)
}

def @func_1247(%var_1147: Tensor[(9, 15, 16), float32], %var_1148: Tensor[(9, 15, 16), float32], %var_1173: Tensor[(750), uint8], %var_1235: Tensor[(768), float32]) -> (Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) {
  %258 = cast(%var_1148, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %259 = shape_of(%var_1147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_1147, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = cast(meta[relay.Constant][18] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %263 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 70), int16] */, dtype="int16") /* ty=Tensor[(1, 70), int16] */;
  %264 = cast(%var_1173, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %265 = reshape(%262, newshape=[]) /* ty=int16 */;
  %266 = reshape(%263, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
  %267 = reshape(%264, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %268 = @func_498(%265, %266, %267) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
  %269 = cast(meta[relay.Constant][18] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %270 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 70), int16] */, dtype="int16") /* ty=Tensor[(1, 70), int16] */;
  %271 = cast(%var_1173, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %272 = reshape(%269, newshape=[]) /* ty=int16 */;
  %273 = reshape(%270, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
  %274 = reshape(%271, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %275 = @func_498(%272, %273, %274) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
  %276 = %275.2;
  %277 = cast(%276, dtype="float32") /* ty=Tensor[(750), float32] */;
  %278 = cast(%var_1235, dtype="float32") /* ty=Tensor[(768), float32] */;
  %279 = reshape(%278, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %280 = not_equal(%260, %261) /* ty=Tensor[(9, 15, 16), bool] */;
  %281 = %268.3;
  %282 = sqrt(%277) /* ty=Tensor[(750), float32] */;
  %283 = @func_153(%279) /* ty=Tensor[(16, 6, 8), float32] */;
  (%280, meta[relay.Constant][18] /* ty=int16 */, meta[relay.Constant][19] /* ty=Tensor[(1, 70), int16] */, %var_1173, %281, %282, %283, %var_1235)
}

def @func_7433(%var_7431: int64) -> (Tensor[(10, 9, 13), float64], Tensor[(12, 12, 14), int8], int64, Tensor[(2016), int64]) {
  @func_7430(%var_7431) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(12, 12, 14), int8], int64, Tensor[(2016), int64]) */
}

def @func_5277() -> (Tensor[(10, 9, 13), float32],) {
  %284 = @func_5088() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
  %285 = %284.1;
  (%285,)
}

def @func_6393() -> (Tensor[(10, 9, 13), float32],) {
  @func_6391() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @func_5795(%var_5793: Tensor[(14, 768), float64]) -> (Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) {
  @func_5792(%var_5793) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) */
}

def @func_1865(%var_1864: int16) -> (Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) {
  %298 = fn (%var_1847: int16) -> (Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) {
    %286 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %287 = %286.0;
    %288 = cast(%287, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
    %289 = cast(%var_1847, dtype="int16") /* ty=int16 */;
    %290 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 70), int16] */, dtype="int16") /* ty=Tensor[(1, 70), int16] */;
    %291 = cast(meta[relay.Constant][21] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %292 = reshape(%289, newshape=[]) /* ty=int16 */;
    %293 = reshape(%290, newshape=[5, 1, 14]) /* ty=Tensor[(5, 1, 14), int16] */;
    %294 = reshape(%291, newshape=[750]) /* ty=Tensor[(750), uint8] */;
    %295 = @func_498(%292, %293, %294) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */;
    %296 = asin(%288) /* ty=Tensor[(10, 9, 13), float32] */;
    %297 = %295.2;
    (%296, %297, %var_1847, meta[relay.Constant][20] /* ty=Tensor[(1, 70), int16] */, meta[relay.Constant][21] /* ty=Tensor[(750), uint8] */)
  };
  %298(%var_1864) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) */
}

def @func_5792(%var_5774: Tensor[(14, 768), float64]) -> (Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) {
  %299 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %300 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
  %301 = cast(%300, dtype="uint8") /* ty=Tensor[(1, 768), uint8] */;
  %302 = cast(%var_5774, dtype="uint8") /* ty=Tensor[(14, 768), uint8] */;
  %303 = %299.0;
  %304 = bitwise_and(%301, %302) /* ty=Tensor[(14, 768), uint8] */;
  (%303, %304)
}

def @func_728(%var_726: float32, %var_727: Tensor[(12, 7, 8), float32]) -> Tensor[(12, 7, 8), float32] {
  @func_724(%var_726, %var_727) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_7682(%var_7677: Tensor[(750), uint8], %var_7678: Tensor[(768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) {
  %305 = cast(meta[relay.Constant][22] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %306 = cast(meta[relay.Constant][22] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %307 = cast(%var_7677, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %308 = cast(%var_7678, dtype="float32") /* ty=Tensor[(768), float32] */;
  %309 = reshape(%305, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %310 = reshape(%306, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %311 = reshape(%307, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %312 = reshape(%308, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %313 = @func_1247(%309, %310, %311, %312) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %314 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
  %315 = %313.5;
  (%314, %315, meta[relay.Constant][22] /* ty=Tensor[(2160), float32] */, %var_7677, %var_7678)
}

def @func_7762(%var_7759: Tensor[(1, 144), float32], %var_7760: Tensor[(672), float32], %var_7761: Tensor[(32, 24), float32]) -> (Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(1, 144), float32], Tensor[(672), float32], Tensor[(2, 1080), float32], Tensor[(750), uint8], Tensor[(32, 24), float32], Tensor[(4608), float64]) {
  @func_7757(%var_7759, %var_7760, %var_7761) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(1, 144), float32], Tensor[(672), float32], Tensor[(2, 1080), float32], Tensor[(750), uint8], Tensor[(32, 24), float32], Tensor[(4608), float64]) */
}

def @func_8387() -> (Tensor[(16, 6, 8), float32],) {
  %316 = @func_4190() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32]) */;
  %317 = %316.1;
  (%317,)
}

def @func_3056() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float32], Tensor[(10, 4, 7), float32]) {
  @func_3054() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float32], Tensor[(10, 4, 7), float32]) */
}

def @func_3285() -> Tensor[(10, 9, 13), float64] {
  @func_3283() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_4641(%var_4640: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), int16] {
  %324 = fn (%var_4628: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), int16] {
    %318 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %319 = %318.0;
    %320 = cast(%var_4628, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
    %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%319, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    left_shift(%322, %323) /* ty=Tensor[(10, 9, 13), int16] */
  };
  %324(%var_4640) /* ty=Tensor[(10, 9, 13), int16] */
}

def @func_4191() -> (Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32]) {
  %329 = fn () -> (Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32]) {
    %325 = @func_4111() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %326 = @func_3614() /* ty=(Tensor[(16, 6, 8), float32],) */;
    %327 = %325.0;
    %328 = %326.0;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32]) */
}

def @func_6703(%var_6700: Tensor[(144), float32], %var_6701: Tensor[(672), float32], %var_6702: Tensor[(6, 768), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(750), uint8], Tensor[(10, 2, 16), int16], Tensor[(144), float32], Tensor[(160), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(200), float64], Tensor[(672), float32], Tensor[(6, 768), bool], Tensor[(200), float64], Tensor[(14, 768), uint16], Tensor[(14, 768), float32]) {
  %384 = fn (%var_6499: Tensor[(144), float32], %var_6613: Tensor[(672), float32], %var_6638: Tensor[(6, 768), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(750), uint8], Tensor[(10, 2, 16), int16], Tensor[(144), float32], Tensor[(160), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(200), float64], Tensor[(672), float32], Tensor[(6, 768), bool], Tensor[(200), float64], Tensor[(14, 768), uint16], Tensor[(14, 768), float32]) {
    %330 = cast(meta[relay.Constant][23] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %331 = reshape(%330, newshape=[750]) /* ty=Tensor[(750), uint8] */;
    %332 = @func_3311(%331) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */;
    %333 = cast(%var_6499, dtype="float32") /* ty=Tensor[(144), float32] */;
    %334 = reshape(%333, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
    %335 = @func_5168(%334) /* ty=(Tensor[(12, 12, 15), bool], Tensor[(10, 2, 16), int16], Tensor[(12, 12, 15), float64]) */;
    %336 = @func_4718() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) */;
    %337 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %338 = cast(meta[relay.Constant][24] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
    %339 = cast(%var_6613, dtype="float32") /* ty=Tensor[(672), float32] */;
    %340 = reshape(%338, newshape=[200]) /* ty=Tensor[(200), float64] */;
    %341 = reshape(%339, newshape=[2, 336]) /* ty=Tensor[(2, 336), float32] */;
    %342 = @func_5864(%340, %341) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) */;
    %343 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
    %344 = cast(%343, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
    %345 = cast(%var_6638, dtype="bool") /* ty=Tensor[(6, 768), bool] */;
    %346 = cast(meta[relay.Constant][24] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
    %347 = cast(%var_6613, dtype="float32") /* ty=Tensor[(672), float32] */;
    %348 = reshape(%346, newshape=[200]) /* ty=Tensor[(200), float64] */;
    %349 = reshape(%347, newshape=[2, 336]) /* ty=Tensor[(2, 336), float32] */;
    %350 = @func_5864(%348, %349) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) */;
    %351 = @func_5617() /* ty=(Tensor[(14, 768), uint8],) */;
    %352 = %351.0;
    %353 = cast(%352, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %354 = acosh(%353) /* ty=Tensor[(14, 768), float64] */;
    %355 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 768), float64] */, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
    %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(2), int32] */;
    %357 = cast(%354, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %359 = greater_equal(%357, %358) /* ty=Tensor[(14, 768), bool] */;
    %360 = cast(%359, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %361 = sin(%360) /* ty=Tensor[(14, 768), float64] */;
    %362 = cast(%361, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %363 = log2(%362) /* ty=Tensor[(14, 768), float64] */;
    %364 = cast(%363, dtype="float64") /* ty=Tensor[(14, 768), float64] */;
    %365 = tan(%364) /* ty=Tensor[(14, 768), float64] */;
    %366 = cast(%365, dtype="uint16") /* ty=Tensor[(14, 768), uint16] */;
    %367 = cast(%343, dtype="uint16") /* ty=Tensor[(1, 768), uint16] */;
    %368 = cast(%365, dtype="bool") /* ty=Tensor[(14, 768), bool] */;
    %369 = cast(%343, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
    %370 = logical_and(%368, %369) /* ty=Tensor[(14, 768), bool] */;
    %371 = cast(%370, dtype="float32") /* ty=Tensor[(14, 768), float32] */;
    %372 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
    %373 = @func_3520() /* ty=Tensor[(10, 9, 13), float32] */;
    %374 = %332.3;
    %375 = %335.1;
    %376 = %336.2;
    %377 = @func_6189() /* ty=Tensor[(10, 9, 13), float64] */;
    %378 = %337.0;
    %379 = %342.0;
    %380 = greater(%344, %345) /* ty=Tensor[(6, 768), bool] */;
    %381 = %350.2;
    %382 = multiply(%366, %367) /* ty=Tensor[(14, 768), uint16] */;
    %383 = sigmoid(%371) /* ty=Tensor[(14, 768), float32] */;
    (%372, %373, %374, meta[relay.Constant][23] /* ty=Tensor[(750), uint8] */, %375, %var_6499, %376, %377, %378, %379, meta[relay.Constant][24] /* ty=Tensor[(200), float64] */, %var_6613, %380, %381, %382, %383)
  };
  %384(%var_6700, %var_6701, %var_6702) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(750), uint8], Tensor[(10, 2, 16), int16], Tensor[(144), float32], Tensor[(160), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(200), float64], Tensor[(672), float32], Tensor[(6, 768), bool], Tensor[(200), float64], Tensor[(14, 768), uint16], Tensor[(14, 768), float32]) */
}

def @func_7258() -> Tensor[(10, 9, 13), float32] {
  @func_7256() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_6391() -> (Tensor[(10, 9, 13), float32],) {
  %385 = @func_3054() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float32], Tensor[(10, 4, 7), float32]) */;
  %386 = %385.0;
  (%386,)
}

def @func_5031(%var_5029: Tensor[(6, 12, 6), uint8]) -> Tensor[(6, 12, 6), uint8] {
  @func_5028(%var_5029) /* ty=Tensor[(6, 12, 6), uint8] */
}

def @func_7658() -> (Tensor[(10, 9, 13), float64],) {
  @func_7656() /* ty=(Tensor[(10, 9, 13), float64],) */
}

def @func_2891(%var_2889: Tensor[(10, 9, 13), float64]) -> Tensor[(10, 9, 13), float32] {
  @func_2888(%var_2889) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_3736(%var_3720: Tensor[(10, 9, 13), float64]) -> (Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) {
  %387 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  %388 = cast(%var_3720, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="int16") /* ty=Tensor[(10, 9, 13), int16] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %392 = bitwise_and(%390, %391) /* ty=Tensor[(10, 9, 13), int16] */;
  %393 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
  (%392, %393)
}

def @func_7686(%var_7684: Tensor[(750), uint8], %var_7685: Tensor[(768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) {
  @func_7682(%var_7684, %var_7685) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */
}

def @func_5127() -> (Tensor[(11, 4, 6), float64],) {
  @func_5125() /* ty=(Tensor[(11, 4, 6), float64],) */
}

def @func_6906() -> Tensor[(10, 9, 13), float64] {
  %395 = fn () -> Tensor[(10, 9, 13), float64] {
    %394 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %394.2
  };
  %395() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_4245() -> (Tensor[(10, 9, 13), float32],) {
  @func_4243() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @func_7811(%var_7809: Tensor[(24), float64], %var_7810: Tensor[(2002), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64], Tensor[(24), float64], Tensor[(2002), float64]) {
  @func_7807(%var_7809, %var_7810) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64], Tensor[(24), float64], Tensor[(2002), float64]) */
}

def @func_6999(%var_6980: Tensor[(13, 6, 7), uint8], %var_6981: Tensor[(13, 6, 7), uint8]) -> (Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float64]) {
  %396 = cast(%var_6981, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %397 = shape_of(%var_6980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_6980, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = cast(%var_6980, dtype="float64") /* ty=Tensor[(13, 6, 7), float64] */;
  %401 = greater_equal(%398, %399) /* ty=Tensor[(13, 6, 7), bool] */;
  %402 = cosh(%400) /* ty=Tensor[(13, 6, 7), float64] */;
  (%401, %402)
}

def @func_1917(%var_1910: Tensor[(10, 4, 7), float64]) -> Tensor[(10, 4, 7), float64] {
  %403 = cast(%var_1910, dtype="float64") /* ty=Tensor[(10, 4, 7), float64] */;
  acosh(%403) /* ty=Tensor[(10, 4, 7), float64] */
}

def @func_7354(%var_7352: Tensor[(12, 768), float32]) -> Tensor[(12, 768), int64] {
  @func_7351(%var_7352) /* ty=Tensor[(12, 768), int64] */
}

def @func_5550() -> (Tensor[(10, 9, 13), float32],) {
  %404 = @func_4564() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %405 = %404.0;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %407 = sigmoid(%406) /* ty=Tensor[(10, 9, 13), float32] */;
  (%407,)
}

def @func_8054() -> (Tensor[(10, 9, 13), float32],) {
  %410 = fn () -> (Tensor[(10, 9, 13), float32],) {
    %408 = @func_6391() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %409 = %408.0;
    (%409,)
  };
  %410() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @func_3602(%var_3576: Tensor[(750), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(750), float64], Tensor[(10, 9, 13), float64]) {
  %411 = cast(%var_3576, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %412 = reshape(%411, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %413 = @func_3311(%412) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) */;
  %414 = %413.3;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(750), float64] */;
  %416 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  %417 = sigmoid(%415) /* ty=Tensor[(750), float64] */;
  %418 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
  (%416, %var_3576, %417, %418)
}

def @func_4349() -> Tensor[(10, 9, 13), float64] {
  %420 = fn () -> Tensor[(10, 9, 13), float64] {
    %419 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %419.2
  };
  %420() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_5028(%var_5024: Tensor[(6, 12, 6), uint8]) -> Tensor[(6, 12, 6), uint8] {
  %421 = cast(%var_5024, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %422 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(6, 12, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 12, 6), uint8] */, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%423, %424) /* ty=Tensor[(6, 12, 6), uint8] */
}

def @func_6968(%var_6965: float64, %var_6966: Tensor[(14, 10, 14), float64], %var_6967: Tensor[(750), uint8]) -> (Tensor[(14, 10, 14), float64], Tensor[(750), uint8], Tensor[(70), int16], Tensor[(750), uint8], Tensor[(10, 9, 13), float32]) {
  @func_6963(%var_6965, %var_6966, %var_6967) /* ty=(Tensor[(14, 10, 14), float64], Tensor[(750), uint8], Tensor[(70), int16], Tensor[(750), uint8], Tensor[(10, 9, 13), float32]) */
}

def @func_8254(%var_8245: Tensor[(5, 9, 9), uint32]) -> (Tensor[(5, 9, 9), uint32],) {
  %425 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 9, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
  %426 = shape_of(%var_8245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_8245, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %429 = bitwise_xor(%427, %428) /* ty=Tensor[(5, 9, 9), uint32] */;
  (%429,)
}

def @func_2683() -> Tensor[(10, 9, 13), float64] {
  @func_2681() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_3392() -> Tensor[(10, 9, 13), float64] {
  @func_3390() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_3739(%var_3737: Tensor[(10, 9, 13), float64]) -> (Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) {
  @func_3736(%var_3737) /* ty=(Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64]) */
}

def @func_5412() -> (Tensor[(10, 9, 13), float32],) {
  %430 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  (%430,)
}

def @func_7478() -> (Tensor[(10, 9, 13), float32], Tensor[(10752), int64]) {
  %431 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
  %432 = cast(meta[relay.Constant][28] /* ty=Tensor[(10752), float64] */, dtype="float64") /* ty=Tensor[(10752), float64] */;
  %433 = reshape(%432, newshape=[14, 768]) /* ty=Tensor[(14, 768), float64] */;
  %434 = @func_5792(%433) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) */;
  %435 = %434.1;
  %436 = cast(%435, dtype="int64") /* ty=Tensor[(14, 768), int64] */;
  %437 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(10752), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %438 = cast(meta[relay.Constant][28] /* ty=Tensor[(10752), float64] */, dtype="int64") /* ty=Tensor[(10752), int64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), int64] */;
  %440 = %431.0;
  %441 = logical_xor(%438, %439) /* ty=Tensor[(10752), int64] */;
  (%440, %441)
}

def @func_2115(%var_2113: Tensor[(2160), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(9, 15, 3), int16], Tensor[(405), float32]) {
  @func_2112(%var_2113) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(9, 15, 3), int16], Tensor[(405), float32]) */
}

def @func_4243() -> (Tensor[(10, 9, 13), float32],) {
  %442 = @func_3520() /* ty=Tensor[(10, 9, 13), float32] */;
  (%442,)
}

def @func_8389() -> (Tensor[(16, 6, 8), float32],) {
  @func_8387() /* ty=(Tensor[(16, 6, 8), float32],) */
}

def @func_155(%var_154: Tensor[(16, 6, 8), float32]) -> Tensor[(16, 6, 8), float32] {
  %444 = fn (%var_130: Tensor[(16, 6, 8), float32]) -> Tensor[(16, 6, 8), float32] {
    %443 = cast(%var_130, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
    acosh(%443) /* ty=Tensor[(16, 6, 8), float32] */
  };
  %444(%var_154) /* ty=Tensor[(16, 6, 8), float32] */
}

def @func_3957() -> Tensor[(10, 9, 13), float32] {
  %445 = fn () -> Tensor[(10, 9, 13), float32] {
    @func_3072() /* ty=Tensor[(10, 9, 13), float32] */
  };
  %445() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_4508() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  @func_4506() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */
}

def @func_502(%var_499: int16, %var_500: Tensor[(5, 1, 14), int16], %var_501: Tensor[(750), uint8]) -> (Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) {
  %457 = fn (%var_454: int16, %var_455: Tensor[(5, 1, 14), int16], %var_466: Tensor[(750), uint8]) -> (Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) {
    %446 = cast(%var_454, dtype="bool") /* ty=bool */;
    %447 = cast(%var_455, dtype="bool") /* ty=Tensor[(5, 1, 14), bool] */;
    %448 = cast(%var_466, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %449 = reshape(%448, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), uint8] */;
    %450 = @func_360(%449) /* ty=(Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) */;
    %451 = %450.0;
    %452 = cast(%451, dtype="uint8") /* ty=Tensor[(10, 5, 15), uint8] */;
    %453 = reshape(%452, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), uint8] */;
    %454 = @func_360(%453) /* ty=(Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) */;
    %455 = less(%446, %447) /* ty=Tensor[(5, 1, 14), bool] */;
    %456 = %454.0;
    (%455, %451, %var_466, %456)
  };
  %457(%var_499, %var_500, %var_501) /* ty=(Tensor[(5, 1, 14), bool], Tensor[(10, 5, 15), uint8], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8]) */
}

def @func_3311(%var_3299: Tensor[(750), uint8]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), float32], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32]) {
  %458 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %459 = cast(meta[relay.Constant][29] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %460 = cast(meta[relay.Constant][29] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %461 = cast(%var_3299, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %462 = cast(meta[relay.Constant][30] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %463 = reshape(%459, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %464 = reshape(%460, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %465 = reshape(%461, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %466 = reshape(%462, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %467 = @func_1247(%463, %464, %465, %466) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %468 = %458.2;
  %469 = %467.5;
  (%468, %469, meta[relay.Constant][29] /* ty=Tensor[(2160), float32] */, %var_3299, meta[relay.Constant][30] /* ty=Tensor[(768), float32] */)
}

def @func_7430(%var_7424: int64) -> (Tensor[(10, 9, 13), float64], Tensor[(12, 12, 14), int8], int64, Tensor[(2016), int64]) {
  %470 = @func_6353() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) */;
  %471 = cast(%var_7424, dtype="int64") /* ty=int64 */;
  %472 = cast(meta[relay.Constant][31] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %473 = cast(meta[relay.Constant][31] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %474 = reshape(%471, newshape=[]) /* ty=int64 */;
  %475 = reshape(%472, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %476 = reshape(%473, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %477 = @func_1111(%474, %475, %476) /* ty=(Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) */;
  %478 = %470.0;
  %479 = %477.0;
  (%478, %479, %var_7424, meta[relay.Constant][31] /* ty=Tensor[(2016), int64] */)
}

def @func_7003(%var_7001: Tensor[(13, 6, 7), uint8], %var_7002: Tensor[(13, 6, 7), uint8]) -> (Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float64]) {
  @func_6999(%var_7001, %var_7002) /* ty=(Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float64]) */
}

def @func_4216() -> (Tensor[(10, 9, 13), float64],) {
  %481 = fn () -> (Tensor[(10, 9, 13), float64],) {
    %480 = @func_3283() /* ty=Tensor[(10, 9, 13), float64] */;
    (%480,)
  };
  %481() /* ty=(Tensor[(10, 9, 13), float64],) */
}

def @func_6443(%var_6437: Tensor[(15, 14, 6), float64], %var_6438: Tensor[(15, 14, 6), float64]) -> (Tensor[(15, 14, 6), float64],) {
  %482 = cast(%var_6438, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %483 = shape_of(%var_6437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_6437, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %486 = floor_mod(%484, %485) /* ty=Tensor[(15, 14, 6), float64] */;
  (%486,)
}

def @func_8012() -> Tensor[(10, 9, 13), float64] {
  %488 = fn () -> Tensor[(10, 9, 13), float64] {
    %487 = @func_6253() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %487.0
  };
  %488() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_4284() -> Tensor[(1, 768), float64] {
  %489 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
  %489.0
}

def @func_6843() -> Tensor[(10, 9, 13), float32] {
  %490 = fn () -> Tensor[(10, 9, 13), float32] {
    @func_6752() /* ty=Tensor[(10, 9, 13), float32] */
  };
  %490() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_7656() -> (Tensor[(10, 9, 13), float64],) {
  %491 = @func_6253() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %492 = %491.0;
  (%492,)
}

def @func_5088() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) {
  %493 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %494 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  (%493, %494)
}

def @func_5979(%var_5974: Tensor[(10, 9, 13), float64]) -> (Tensor[(10, 9, 13), bool],) {
  %495 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
  %496 = cast(%var_5974, dtype="bool") /* ty=Tensor[(10, 9, 13), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(10, 9, 13), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = greater_equal(%498, %499) /* ty=Tensor[(10, 9, 13), bool] */;
  (%500,)
}

def @func_2855() -> Tensor[(10, 9, 13), float32] {
  %502 = fn () -> Tensor[(10, 9, 13), float32] {
    %501 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %501.0
  };
  %502() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_6189() -> Tensor[(10, 9, 13), float64] {
  %503 = @func_4476() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %503.0
}

def @func_6013(%var_6011: Tensor[(10752), float64]) -> (Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8], Tensor[(10752), float64]) {
  @func_6010(%var_6011) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8], Tensor[(10752), float64]) */
}

def @func_3768() -> Tensor[(10, 9, 13), float64] {
  %504 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %504.0
}

def @func_1830() -> (Tensor[(10, 9, 13), float64],) {
  @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */
}

def @func_1956() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %505 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %506 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %507 = %505.0;
  %508 = %506.0;
  (%507, %508)
}

def @func_4506() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  %509 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %510 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
  %511 = %509.0;
  (%510, %511)
}

def @func_4525(%var_4511: Tensor[(5, 10, 4), float64]) -> (Tensor[(5, 10, 4), float64],) {
  %512 = cast(%var_4511, dtype="float64") /* ty=Tensor[(5, 10, 4), float64] */;
  %513 = sinh(%512) /* ty=Tensor[(5, 10, 4), float64] */;
  (%513,)
}

def @func_3073() -> Tensor[(10, 9, 13), float32] {
  %515 = fn () -> Tensor[(10, 9, 13), float32] {
    %514 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %514.0
  };
  %515() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_3283() -> Tensor[(10, 9, 13), float64] {
  %516 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %516.0
}

def @func_3361() -> (Tensor[(10, 9, 13), float32], Tensor[(11, 4, 6), float64], Tensor[(264), float64]) {
  %522 = fn () -> (Tensor[(10, 9, 13), float32], Tensor[(11, 4, 6), float64], Tensor[(264), float64]) {
    %517 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %518 = cast(meta[relay.Constant][32] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %519 = reshape(%518, newshape=[11, 4, 6]) /* ty=Tensor[(11, 4, 6), float64] */;
    %520 = %517.0;
    %521 = @func_877(%519) /* ty=Tensor[(11, 4, 6), float64] */;
    (%520, %521, meta[relay.Constant][32] /* ty=Tensor[(264), float64] */)
  };
  %522() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(11, 4, 6), float64], Tensor[(264), float64]) */
}

def @func_6753() -> Tensor[(10, 9, 13), float32] {
  %523 = fn () -> Tensor[(10, 9, 13), float32] {
    @func_3072() /* ty=Tensor[(10, 9, 13), float32] */
  };
  %523() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_5279() -> (Tensor[(10, 9, 13), float32],) {
  @func_5277() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @func_7913(%var_7912: Tensor[(5, 234), float64]) -> (Tensor[(14, 768), uint8], Tensor[(10, 9, 13), float32], Tensor[(5, 234), float64]) {
  %529 = fn (%var_7909: Tensor[(5, 234), float64]) -> (Tensor[(14, 768), uint8], Tensor[(10, 9, 13), float32], Tensor[(5, 234), float64]) {
    %524 = @func_5617() /* ty=(Tensor[(14, 768), uint8],) */;
    %525 = cast(%var_7909, dtype="float64") /* ty=Tensor[(5, 234), float64] */;
    %526 = reshape(%525, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
    %527 = %524.0;
    %528 = @func_2888(%526) /* ty=Tensor[(10, 9, 13), float32] */;
    (%527, %528, %var_7909)
  };
  %529(%var_7912) /* ty=(Tensor[(14, 768), uint8], Tensor[(10, 9, 13), float32], Tensor[(5, 234), float64]) */
}

def @func_360(%var_339: Tensor[(10, 5, 15), uint8]) -> (Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) {
  %530 = cast(%var_339, dtype="uint8") /* ty=Tensor[(10, 5, 15), uint8] */;
  %531 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(10, 5, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 5, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 5, 15), uint8] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %534 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %535 = reshape(%534, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %536 = @func_153(%535) /* ty=Tensor[(16, 6, 8), float32] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %538 = cast(meta[relay.Constant][35] /* ty=Tensor[(768), float32] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %539 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %540 = cast(meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), bool] */;
  %542 = minimum(%532, %533) /* ty=Tensor[(10, 5, 15), uint8] */;
  %543 = atan(%537) /* ty=Tensor[(16, 6, 8), float32] */;
  %544 = less(%540, %541) /* ty=Tensor[(768), bool] */;
  (%542, %543, %544)
}

def @func_2245(%var_2243: Tensor[(672), float32], %var_2244: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(12, 7, 8), float32], float32, Tensor[(672), float32], Tensor[(12, 12, 14), int8], Tensor[(2016), int64]) {
  %562 = fn (%var_2224: Tensor[(672), float32], %var_2229: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(12, 7, 8), float32], float32, Tensor[(672), float32], Tensor[(12, 12, 14), int8], Tensor[(2016), int64]) {
    %545 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %546 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %547 = cast(-7.78367f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %548 = cast(%var_2224, dtype="float32") /* ty=Tensor[(672), float32] */;
    %549 = reshape(%547, newshape=[]) /* ty=float32 */;
    %550 = reshape(%548, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), float32] */;
    %551 = cast(-7.78367f /* ty=float32 */, dtype="int64") /* ty=int64 */;
    %552 = cast(%var_2229, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %553 = cast(%var_2229, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %554 = reshape(%551, newshape=[]) /* ty=int64 */;
    %555 = reshape(%552, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
    %556 = reshape(%553, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
    %557 = @func_1111(%554, %555, %556) /* ty=(Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) */;
    %558 = %545.0;
    %559 = %546.0;
    %560 = @func_724(%549, %550) /* ty=Tensor[(12, 7, 8), float32] */;
    %561 = %557.0;
    (%558, %559, %560, -7.78367f /* ty=float32 */, %var_2224, %561, %var_2229)
  };
  %562(%var_2243, %var_2244) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(12, 7, 8), float32], float32, Tensor[(672), float32], Tensor[(12, 12, 14), int8], Tensor[(2016), int64]) */
}

def @func_5517(%var_5495: Tensor[(13, 13, 13), float32], %var_5514: Tensor[(750), uint8]) -> (Tensor[(13, 13, 13), float32], Tensor[(768), bool], Tensor[(750), uint8]) {
  %563 = cast(%var_5495, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
  %564 = cast(%var_5514, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %565 = reshape(%564, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), uint8] */;
  %566 = @func_360(%565) /* ty=(Tensor[(10, 5, 15), uint8], Tensor[(16, 6, 8), float32], Tensor[(768), bool]) */;
  %567 = sinh(%563) /* ty=Tensor[(13, 13, 13), float32] */;
  %568 = %566.2;
  (%567, %568, %var_5514)
}

def @func_4528(%var_4526: Tensor[(5, 10, 4), float64]) -> (Tensor[(5, 10, 4), float64],) {
  @func_4525(%var_4526) /* ty=(Tensor[(5, 10, 4), float64],) */
}

def @func_2376(%var_2332: int16, %var_2355: Tensor[(264), float64], %var_2372: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) {
  %569 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %570 = cast(%var_2332, dtype="int16") /* ty=int16 */;
  %571 = reshape(%570, newshape=[]) /* ty=int16 */;
  %572 = @func_1863(%571) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) */;
  %573 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %574 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 20), int16] */, dtype="int16") /* ty=Tensor[(8, 20), int16] */;
  %575 = reshape(%574, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int16] */;
  %576 = @func_1898(%575) /* ty=(Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) */;
  %577 = cast(%var_2355, dtype="float64") /* ty=Tensor[(264), float64] */;
  %578 = reshape(%577, newshape=[11, 4, 6]) /* ty=Tensor[(11, 4, 6), float64] */;
  %579 = cast(%var_2332, dtype="int64") /* ty=int64 */;
  %580 = cast(%var_2372, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %581 = cast(%var_2372, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %582 = reshape(%579, newshape=[]) /* ty=int64 */;
  %583 = reshape(%580, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %584 = reshape(%581, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int64] */;
  %585 = @func_1111(%582, %583, %584) /* ty=(Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) */;
  %586 = %569.0;
  %587 = %572.1;
  %588 = %573.0;
  %589 = %576.0;
  %590 = @func_877(%578) /* ty=Tensor[(11, 4, 6), float64] */;
  %591 = %585.1;
  (%586, %587, %var_2332, %588, %589, meta[relay.Constant][36] /* ty=Tensor[(8, 20), int16] */, %590, %var_2355, %591, %var_2372)
}

def @func_3637() -> (Tensor[(1, 768), float64],) {
  %596 = fn () -> (Tensor[(1, 768), float64],) {
    %592 = @func_2621() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), float32], Tensor[(1, 768), float32]) */;
    %593 = %592.2;
    %594 = cast(%593, dtype="float64") /* ty=Tensor[(1, 768), float64] */;
    %595 = exp(%594) /* ty=Tensor[(1, 768), float64] */;
    (%595,)
  };
  %596() /* ty=(Tensor[(1, 768), float64],) */
}

def @func_3934(%var_3932: Tensor[(168, 4), float32], %var_3933: Tensor[(2016), int64]) -> (Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) {
  %605 = fn (%var_3918: Tensor[(168, 4), float32], %var_3919: Tensor[(2016), int64]) -> (Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) {
    %597 = @func_3614() /* ty=(Tensor[(16, 6, 8), float32],) */;
    %598 = cast(%var_3918, dtype="float32") /* ty=Tensor[(168, 4), float32] */;
    %599 = cast(%var_3919, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %600 = reshape(%598, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %601 = reshape(%599, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
    %602 = @func_2242(%600, %601) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(12, 7, 8), float32], float32, Tensor[(672), float32], Tensor[(12, 12, 14), int8], Tensor[(2016), int64]) */;
    %603 = %597.0;
    %604 = %602.0;
    (%603, %604, %var_3918, %var_3919)
  };
  %605(%var_3932, %var_3933) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) */
}

def @func_8431(%var_8430: Tensor[(10752), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(14, 768), uint8], Tensor[(10752), float64]) {
  %611 = fn (%var_8427: Tensor[(10752), float64]) -> (Tensor[(10, 9, 13), float64], Tensor[(14, 768), uint8], Tensor[(10752), float64]) {
    %606 = cast(%var_8427, dtype="float64") /* ty=Tensor[(10752), float64] */;
    %607 = reshape(%606, newshape=[10752]) /* ty=Tensor[(10752), float64] */;
    %608 = @func_6010(%607) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8], Tensor[(10752), float64]) */;
    %609 = @func_3390() /* ty=Tensor[(10, 9, 13), float64] */;
    %610 = %608.1;
    (%609, %610, %var_8427)
  };
  %611(%var_8430) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(14, 768), uint8], Tensor[(10752), float64]) */
}

def @func_7321() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(2, 768), float64]) {
  %626 = fn () -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(2, 768), float64]) {
    %612 = @func_4450() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) */;
    %613 = @func_6253() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %614 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
    %615 = %614.0;
    %616 = cast(%615, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
    %617 = tan(%616) /* ty=Tensor[(1, 768), float32] */;
    %618 = cast(%617, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
    %619 = asin(%618) /* ty=Tensor[(1, 768), float32] */;
    %620 = cast(%619, dtype="float64") /* ty=Tensor[(1, 768), float64] */;
    %621 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 768), float32] */, dtype="float64") /* ty=Tensor[(2, 768), float64] */;
    %622 = @func_4338() /* ty=Tensor[(10, 9, 13), float64] */;
    %623 = %612.0;
    %624 = %613.0;
    %625 = mod(%620, %621) /* ty=Tensor[(2, 768), float64] */;
    (%622, %623, %624, %625)
  };
  %626() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(2, 768), float64]) */
}

def @func_5362() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), bool], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(5, 56), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) {
  %648 = fn () -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), bool], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(5, 56), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) {
    %627 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %628 = @func_3614() /* ty=(Tensor[(16, 6, 8), float32],) */;
    %629 = %628.0;
    %630 = cast(%629, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
    %631 = sigmoid(%630) /* ty=Tensor[(16, 6, 8), float32] */;
    %632 = cast(%629, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%631, dtype="bool") /* ty=Tensor[(16, 6, 8), bool] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %636 = @func_5247() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16]) */;
    %637 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 56), float64] */, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
    %638 = reshape(%637, newshape=[10, 4, 7]) /* ty=Tensor[(10, 4, 7), float64] */;
    %639 = @func_4243() /* ty=(Tensor[(10, 9, 13), float32],) */;
    %640 = @func_3768() /* ty=Tensor[(10, 9, 13), float64] */;
    %641 = %627.0;
    %642 = not_equal(%634, %635) /* ty=Tensor[(16, 6, 8), bool] */;
    %643 = %636.2;
    %644 = @func_3768() /* ty=Tensor[(10, 9, 13), float64] */;
    %645 = @func_1917(%638) /* ty=Tensor[(10, 4, 7), float64] */;
    %646 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
    %647 = %639.0;
    (%640, %641, %642, %643, %644, %645, meta[relay.Constant][38] /* ty=Tensor[(5, 56), float64] */, %646, %647)
  };
  %648() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(16, 6, 8), bool], Tensor[(10, 9, 13), int16], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(5, 56), float64], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */
}

def @func_2888(%var_2881: Tensor[(10, 9, 13), float64]) -> Tensor[(10, 9, 13), float32] {
  %649 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %650 = %649.0;
  %651 = cast(%var_2881, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%650, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%653, %654) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_6354() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) {
  %660 = fn () -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) {
    %655 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
    %656 = cast(%655, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
    %657 = reshape(%656, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
    %658 = @func_5979(%657) /* ty=(Tensor[(10, 9, 13), bool],) */;
    %659 = %658.0;
    (%655, %659)
  };
  %660() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) */
}

def @func_2112(%var_2023: Tensor[(2160), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(9, 15, 3), int16], Tensor[(405), float32]) {
  %661 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %662 = cast(%var_2023, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %663 = cast(%var_2023, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %665 = cast(meta[relay.Constant][40] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %666 = reshape(%662, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %667 = reshape(%663, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %668 = reshape(%664, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %669 = reshape(%665, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %670 = @func_1247(%666, %667, %668, %669) /* ty=(Tensor[(9, 15, 16), bool], int16, Tensor[(1, 70), int16], Tensor[(750), uint8], Tensor[(10, 5, 15), uint8], Tensor[(750), float32], Tensor[(16, 6, 8), float32], Tensor[(768), float32]) */;
  %671 = cast(meta[relay.Constant][41] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %672 = cast(meta[relay.Constant][41] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %673 = reshape(%671, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %674 = reshape(%672, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %675 = @func_982(%673, %674) /* ty=Tensor[(9, 15, 3), bool] */;
  %676 = cast(meta[relay.Constant][41] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="int16") /* ty=Tensor[(9, 15, 3), int16] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %680 = cast(meta[relay.Constant][41] /* ty=Tensor[(405), int16] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %681 = cos(%680) /* ty=Tensor[(405), float32] */;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(405), float32] */;
  %683 = %661.0;
  %684 = %670.3;
  %685 = bitwise_xor(%678, %679) /* ty=Tensor[(9, 15, 3), int16] */;
  %686 = cosh(%682) /* ty=Tensor[(405), float32] */;
  (%683, %684, %var_2023, meta[relay.Constant][39] /* ty=Tensor[(750), uint8] */, meta[relay.Constant][40] /* ty=Tensor[(768), float32] */, %685, %686)
}

def @func_4901(%var_4865: Tensor[(2, 1, 12), float64], %var_4874: Tensor[(2002), float64]) -> (Tensor[(2, 1, 12), float64], Tensor[(10, 9, 13), float64], Tensor[(2002), float64], Tensor[(2, 1, 12), float32], Tensor[(750), uint8], int16) {
  %687 = cast(%var_4865, dtype="float64") /* ty=Tensor[(2, 1, 12), float64] */;
  %688 = cast(%var_4874, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %689 = reshape(%688, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), float64] */;
  %690 = @func_3447(%689) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(14, 11, 13), int64], Tensor[(14, 11, 13), float32]) */;
  %691 = cast(%var_4865, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %692 = cos(%691) /* ty=Tensor[(2, 1, 12), float32] */;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %694 = cosh(%693) /* ty=Tensor[(2, 1, 12), float32] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %696 = cast(meta[relay.Constant][42] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %697 = reshape(%696, newshape=[]) /* ty=int16 */;
  %698 = @func_1863(%697) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(1, 70), int16], Tensor[(750), uint8]) */;
  %699 = atanh(%687) /* ty=Tensor[(2, 1, 12), float64] */;
  %700 = %690.0;
  %701 = log10(%695) /* ty=Tensor[(2, 1, 12), float32] */;
  %702 = %698.1;
  (%699, %700, %var_4874, %701, %702, meta[relay.Constant][42] /* ty=int16 */)
}

def @func_2381(%var_2378: int16, %var_2379: Tensor[(264), float64], %var_2380: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) {
  @func_2376(%var_2378, %var_2379, %var_2380) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */
}

def @func_7957() -> (Tensor[(10, 9, 13), float32], Tensor[(405), bool]) {
  %703 = @func_4450() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(768), float32], Tensor[(10, 9, 13), float32], Tensor[(5, 150), float32]) */;
  %704 = cast(meta[relay.Constant][43] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %705 = cast(meta[relay.Constant][43] /* ty=Tensor[(405), int16] */, dtype="int16") /* ty=Tensor[(405), int16] */;
  %706 = reshape(%704, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %707 = reshape(%705, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
  %708 = @func_982(%706, %707) /* ty=Tensor[(9, 15, 3), bool] */;
  %709 = cast(meta[relay.Constant][43] /* ty=Tensor[(405), int16] */, dtype="bool") /* ty=Tensor[(405), bool] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = equal(%711, %712) /* ty=Tensor[(9, 15, 3), bool] */;
  %714 = cast(%713, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %715 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(405), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %716 = cast(meta[relay.Constant][43] /* ty=Tensor[(405), int16] */, dtype="bool") /* ty=Tensor[(405), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?), bool] */;
  %718 = %703.2;
  %719 = logical_and(%716, %717) /* ty=Tensor[(405), bool] */;
  (%718, %719)
}

def @func_5414() -> (Tensor[(10, 9, 13), float32],) {
  @func_5412() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @func_1828() -> (Tensor[(10, 9, 13), float64],) {
  %720 = @func_1811() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %723 = rsqrt(%722) /* ty=Tensor[(10, 9, 13), float64] */;
  (%723,)
}

def @func_5864(%var_5849: Tensor[(200), float64], %var_5859: Tensor[(2, 336), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(5, 10, 4), float64], Tensor[(200), float64], int16, Tensor[(2, 336), float32], Tensor[(2016), int64], int16) {
  %724 = @func_4215() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %725 = cast(%var_5849, dtype="float64") /* ty=Tensor[(200), float64] */;
  %726 = reshape(%725, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float64] */;
  %727 = @func_4525(%726) /* ty=(Tensor[(5, 10, 4), float64],) */;
  %728 = cast(%var_5859, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %729 = cast(meta[relay.Constant][44] /* ty=Tensor[(2016), int64] */, dtype="int64") /* ty=Tensor[(2016), int64] */;
  %730 = cast(meta[relay.Constant][45] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %731 = reshape(%728, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %732 = reshape(%729, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
  %733 = reshape(%730, newshape=[]) /* ty=int16 */;
  %734 = @func_4823(%731, %732, %733) /* ty=(Tensor[(768), float32], Tensor[(16, 6, 8), float32], Tensor[(672), float32], Tensor[(2016), int64], Tensor[(168, 4), float32], Tensor[(10, 9, 13), float32], int16, Tensor[(264), float64]) */;
  %735 = %724.0;
  %736 = %727.0;
  %737 = %734.6;
  (%735, %736, %var_5849, %737, %var_5859, meta[relay.Constant][44] /* ty=Tensor[(2016), int64] */, meta[relay.Constant][45] /* ty=int16 */)
}

def @func_3204(%var_3201: int16, %var_3202: Tensor[(264), float64], %var_3203: Tensor[(2016, 1), int64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(2016, 264), bool], Tensor[(2016, 1), uint32]) {
  %762 = fn (%var_3167: int16, %var_3168: Tensor[(264), float64], %var_3169: Tensor[(2016, 1), int64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(2016, 264), bool], Tensor[(2016, 1), uint32]) {
    %738 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %739 = cast(%var_3167, dtype="int16") /* ty=int16 */;
    %740 = cast(%var_3168, dtype="float64") /* ty=Tensor[(264), float64] */;
    %741 = cast(%var_3169, dtype="int64") /* ty=Tensor[(2016, 1), int64] */;
    %742 = reshape(%739, newshape=[]) /* ty=int16 */;
    %743 = reshape(%740, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %744 = reshape(%741, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
    %745 = @func_2376(%742, %743, %744) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
    %746 = cast(%var_3167, dtype="int16") /* ty=int16 */;
    %747 = cast(%var_3168, dtype="float64") /* ty=Tensor[(264), float64] */;
    %748 = cast(%var_3169, dtype="int64") /* ty=Tensor[(2016, 1), int64] */;
    %749 = reshape(%746, newshape=[]) /* ty=int16 */;
    %750 = reshape(%747, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %751 = reshape(%748, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
    %752 = @func_2376(%749, %750, %751) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
    %753 = cast(%var_3168, dtype="bool") /* ty=Tensor[(264), bool] */;
    %754 = cast(%var_3169, dtype="bool") /* ty=Tensor[(2016, 1), bool] */;
    %755 = cast(%var_3169, dtype="uint32") /* ty=Tensor[(2016, 1), uint32] */;
    %756 = cast(%var_3167, dtype="uint32") /* ty=uint32 */;
    %757 = %738.1;
    %758 = %745.3;
    %759 = %752.1;
    %760 = greater(%753, %754) /* ty=Tensor[(2016, 264), bool] */;
    %761 = logical_xor(%755, %756) /* ty=Tensor[(2016, 1), uint32] */;
    (%757, %758, %759, %760, %761)
  };
  %762(%var_3201, %var_3202, %var_3203) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(2016, 264), bool], Tensor[(2016, 1), uint32]) */
}

def @func_4827(%var_4824: Tensor[(672), float32], %var_4825: Tensor[(2016), int64], %var_4826: int16) -> (Tensor[(768), float32], Tensor[(16, 6, 8), float32], Tensor[(672), float32], Tensor[(2016), int64], Tensor[(168, 4), float32], Tensor[(10, 9, 13), float32], int16, Tensor[(264), float64]) {
  %785 = fn (%var_4782: Tensor[(672), float32], %var_4783: Tensor[(2016), int64], %var_4803: int16) -> (Tensor[(768), float32], Tensor[(16, 6, 8), float32], Tensor[(672), float32], Tensor[(2016), int64], Tensor[(168, 4), float32], Tensor[(10, 9, 13), float32], int16, Tensor[(264), float64]) {
    %763 = @func_3104() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 5, 15), uint8], Tensor[(60, 36), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(10, 9, 13), float64]) */;
    %764 = cast(%var_4782, dtype="float32") /* ty=Tensor[(672), float32] */;
    %765 = cast(%var_4783, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %766 = reshape(%764, newshape=[168, 4]) /* ty=Tensor[(168, 4), float32] */;
    %767 = reshape(%765, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
    %768 = @func_3931(%766, %767) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) */;
    %769 = cast(%var_4782, dtype="float32") /* ty=Tensor[(672), float32] */;
    %770 = cast(%var_4783, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %771 = reshape(%769, newshape=[168, 4]) /* ty=Tensor[(168, 4), float32] */;
    %772 = reshape(%770, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
    %773 = @func_3931(%771, %772) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(10, 9, 13), float32], Tensor[(168, 4), float32], Tensor[(2016), int64]) */;
    %774 = cast(%var_4803, dtype="int16") /* ty=int16 */;
    %775 = cast(meta[relay.Constant][46] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %776 = cast(%var_4783, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %777 = reshape(%774, newshape=[]) /* ty=int16 */;
    %778 = reshape(%775, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %779 = reshape(%776, newshape=[2016]) /* ty=Tensor[(2016), int64] */;
    %780 = @func_2376(%777, %778, %779) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(750), uint8], int16, Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(8, 20), int16], Tensor[(11, 4, 6), float64], Tensor[(264), float64], Tensor[(12, 12, 14), float32], Tensor[(2016), int64]) */;
    %781 = %763.4;
    %782 = %768.0;
    %783 = %773.2;
    %784 = %780.3;
    (%781, %782, %var_4782, %var_4783, %783, %784, %var_4803, meta[relay.Constant][46] /* ty=Tensor[(264), float64] */)
  };
  %785(%var_4824, %var_4825, %var_4826) /* ty=(Tensor[(768), float32], Tensor[(16, 6, 8), float32], Tensor[(672), float32], Tensor[(2016), int64], Tensor[(168, 4), float32], Tensor[(10, 9, 13), float32], int16, Tensor[(264), float64]) */
}

def @func_3239(%var_3234: Tensor[(5, 1, 5), float32]) -> Tensor[(5, 1, 5), float32] {
  %786 = cast(%var_3234, dtype="float32") /* ty=Tensor[(5, 1, 5), float32] */;
  log2(%786) /* ty=Tensor[(5, 1, 5), float32] */
}

def @func_1115(%var_1112: int64, %var_1113: Tensor[(12, 12, 14), int64], %var_1114: Tensor[(12, 12, 14), int64]) -> (Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) {
  %802 = fn (%var_1057: int64, %var_1058: Tensor[(12, 12, 14), int64], %var_1104: Tensor[(12, 12, 14), int64]) -> (Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) {
    %787 = cast(%var_1058, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
    %788 = log(%787) /* ty=Tensor[(12, 12, 14), float32] */;
    %789 = cast(%var_1057, dtype="bool") /* ty=bool */;
    %790 = cast(%var_1058, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
    %791 = less_equal(%789, %790) /* ty=Tensor[(12, 12, 14), bool] */;
    %792 = cast(%791, dtype="int8") /* ty=Tensor[(12, 12, 14), int8] */;
    %793 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
    %794 = cast(%788, dtype="int8") /* ty=Tensor[(12, 12, 14), int8] */;
    %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %796 = cast(%var_1104, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
    %797 = shape_of(%var_1058, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%var_1058, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %800 = maximum(%794, %795) /* ty=Tensor[(12, 12, 14), int8] */;
    %801 = divide(%798, %799) /* ty=Tensor[(12, 12, 14), float32] */;
    (%800, %801)
  };
  %802(%var_1112, %var_1113, %var_1114) /* ty=(Tensor[(12, 12, 14), int8], Tensor[(12, 12, 14), float32]) */
}

def @func_8096() -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64]) {
  %807 = fn () -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64]) {
    %803 = @func_7656() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %804 = @func_6353() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), bool]) */;
    %805 = %803.0;
    %806 = %804.0;
    (%805, %806)
  };
  %807() /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float64]) */
}

def @func_3770() -> Tensor[(10, 9, 13), float64] {
  @func_3768() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_2681() -> Tensor[(10, 9, 13), float64] {
  %808 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %808.1
}

def @func_5125() -> (Tensor[(11, 4, 6), float64],) {
  %809 = @func_3360() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(11, 4, 6), float64], Tensor[(264), float64]) */;
  %810 = %809.1;
  %811 = cast(%810, dtype="float64") /* ty=Tensor[(11, 4, 6), float64] */;
  %812 = sqrt(%811) /* ty=Tensor[(11, 4, 6), float64] */;
  (%812,)
}

def @func_4932() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) {
  @func_4930() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */
}

def @func_4477() -> (Tensor[(10, 9, 13), float64],) {
  %814 = fn () -> (Tensor[(10, 9, 13), float64],) {
    %813 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
    (%813,)
  };
  %814() /* ty=(Tensor[(10, 9, 13), float64],) */
}

def @func_4718() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) {
  %815 = @func_4111() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %816 = cast(meta[relay.Constant][47] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %817 = reshape(%816, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int16] */;
  %818 = @func_1898(%817) /* ty=(Tensor[(10, 2, 16), int16], Tensor[(10, 2, 16), float64]) */;
  %819 = %815.0;
  %820 = %818.0;
  (%819, %820, meta[relay.Constant][47] /* ty=Tensor[(160), int16] */)
}

def @func_4047() -> Tensor[(10, 9, 13), float64] {
  %822 = fn () -> Tensor[(10, 9, 13), float64] {
    %821 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %821.2
  };
  %822() /* ty=Tensor[(10, 9, 13), float64] */
}

def @func_4112() -> (Tensor[(10, 9, 13), float32],) {
  %824 = fn () -> (Tensor[(10, 9, 13), float32],) {
    %823 = @func_3956() /* ty=Tensor[(10, 9, 13), float32] */;
    (%823,)
  };
  %824() /* ty=(Tensor[(10, 9, 13), float32],) */
}

def @main(%var_8529: Tensor[(405), uint32], %var_8585: Tensor[(11, 768), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), int16], Tensor[(5, 9, 9), uint32], Tensor[(405), uint32], Tensor[(10, 9, 13), bool], Tensor[(10, 9, 13), float64], Tensor[(?, 768), int16], Tensor[(11, 768), uint64]) {
  %825 = @func_2482() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %826 = @func_2481() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %827 = %826.0;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %829 = reshape(%828, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %830 = cast(%var_8529, dtype="uint32") /* ty=Tensor[(405), uint32] */;
  %831 = reshape(%830, newshape=[5, 9, 9]) /* ty=Tensor[(5, 9, 9), uint32] */;
  %832 = @func_8257(%831) /* ty=(Tensor[(5, 9, 9), uint32],) */;
  %833 = cast(%827, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %834 = reshape(%833, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %835 = @func_4639(%834) /* ty=Tensor[(10, 9, 13), int16] */;
  %836 = cast(%835, dtype="float64") /* ty=Tensor[(10, 9, 13), float64] */;
  %837 = reshape(%836, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float64] */;
  %838 = @func_5982(%837) /* ty=(Tensor[(10, 9, 13), bool],) */;
  %839 = @func_7658() /* ty=(Tensor[(10, 9, 13), float64],) */;
  %840 = @func_4284() /* ty=Tensor[(1, 768), float64] */;
  %841 = cast(%840, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %842 = log(%841) /* ty=Tensor[(1, 768), float32] */;
  %843 = cast(%840, dtype="int16") /* ty=Tensor[(1, 768), int16] */;
  %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(2), int32] */;
  %845 = cast(%842, dtype="int16") /* ty=Tensor[(1, 768), int16] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %847 = cast(%842, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
  %848 = cast(%var_8585, dtype="bool") /* ty=Tensor[(11, 768), bool] */;
  %849 = logical_or(%847, %848) /* ty=Tensor[(11, 768), bool] */;
  %850 = cast(%849, dtype="uint64") /* ty=Tensor[(11, 768), uint64] */;
  %851 = cast(%842, dtype="uint64") /* ty=Tensor[(1, 768), uint64] */;
  %852 = %825.0;
  %853 = @func_4639(%829) /* ty=Tensor[(10, 9, 13), int16] */;
  %854 = %832.0;
  %855 = %838.0;
  %856 = %839.0;
  %857 = left_shift(%845, %846) /* ty=Tensor[(?, 768), int16] */;
  %858 = add(%850, %851) /* ty=Tensor[(11, 768), uint64] */;
  (%852, %853, %854, %var_8529, %855, %856, %857, %858)
}

def @func_3521() -> Tensor[(10, 9, 13), float32] {
  %860 = fn () -> Tensor[(10, 9, 13), float32] {
    %859 = @func_2928() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %859.0
  };
  %860() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_5171(%var_5169: Tensor[(12, 12, 1), float32]) -> (Tensor[(12, 12, 15), bool], Tensor[(10, 2, 16), int16], Tensor[(12, 12, 15), float64]) {
  @func_5168(%var_5169) /* ty=(Tensor[(12, 12, 15), bool], Tensor[(10, 2, 16), int16], Tensor[(12, 12, 15), float64]) */
}

def @func_8257(%var_8255: Tensor[(5, 9, 9), uint32]) -> (Tensor[(5, 9, 9), uint32],) {
  @func_8254(%var_8255) /* ty=(Tensor[(5, 9, 9), uint32],) */
}

def @func_7256() -> Tensor[(10, 9, 13), float32] {
  @func_5989() /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_2482() -> (Tensor[(10, 9, 13), float64],) {
  %863 = fn () -> (Tensor[(10, 9, 13), float64],) {
    %861 = @func_1828() /* ty=(Tensor[(10, 9, 13), float64],) */;
    %862 = %861.0;
    (%862,)
  };
  %863() /* ty=(Tensor[(10, 9, 13), float64],) */
}

def @func_5618() -> (Tensor[(14, 768), uint8],) {
  %869 = fn () -> (Tensor[(14, 768), uint8],) {
    %864 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
    %865 = %864.0;
    %866 = cast(%865, dtype="uint8") /* ty=Tensor[(1, 768), uint8] */;
    %867 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 768), float64] */, dtype="uint8") /* ty=Tensor[(14, 768), uint8] */;
    %868 = add(%866, %867) /* ty=Tensor[(14, 768), uint8] */;
    (%868,)
  };
  %869() /* ty=(Tensor[(14, 768), uint8],) */
}

def @func_5989() -> Tensor[(10, 9, 13), float32] {
  %870 = @func_5412() /* ty=(Tensor[(10, 9, 13), float32],) */;
  %870.0
}

def @func_4720() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) {
  @func_4718() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 2, 16), int16], Tensor[(160), int16]) */
}

def @func_4905(%var_4903: Tensor[(2, 1, 12), float64], %var_4904: Tensor[(2002), float64]) -> (Tensor[(2, 1, 12), float64], Tensor[(10, 9, 13), float64], Tensor[(2002), float64], Tensor[(2, 1, 12), float32], Tensor[(750), uint8], int16) {
  @func_4901(%var_4903, %var_4904) /* ty=(Tensor[(2, 1, 12), float64], Tensor[(10, 9, 13), float64], Tensor[(2002), float64], Tensor[(2, 1, 12), float32], Tensor[(750), uint8], int16) */
}

def @func_6010(%var_6007: Tensor[(10752), float64]) -> (Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8], Tensor[(10752), float64]) {
  %871 = cast(%var_6007, dtype="float64") /* ty=Tensor[(10752), float64] */;
  %872 = reshape(%871, newshape=[14, 768]) /* ty=Tensor[(14, 768), float64] */;
  %873 = @func_5792(%872) /* ty=(Tensor[(10, 9, 13), float32], Tensor[(14, 768), uint8]) */;
  %874 = @func_3072() /* ty=Tensor[(10, 9, 13), float32] */;
  %875 = %873.1;
  (%874, %875, %var_6007)
}

def @func_2808(%var_2806: Tensor[(280), float64], %var_2807: Tensor[(2160), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(280), float64], Tensor[(9, 15, 3), int16], Tensor[(2160), float32]) {
  %884 = fn (%var_2765: Tensor[(280), float64], %var_2769: Tensor[(2160), float32]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(280), float64], Tensor[(9, 15, 3), int16], Tensor[(2160), float32]) {
    %876 = cast(%var_2765, dtype="float64") /* ty=Tensor[(280), float64] */;
    %877 = reshape(%876, newshape=[10, 4, 7]) /* ty=Tensor[(10, 4, 7), float64] */;
    %878 = cast(%var_2769, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %879 = reshape(%878, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %880 = @func_2112(%879) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(750), uint8], Tensor[(2160), float32], Tensor[(750), uint8], Tensor[(768), float32], Tensor[(9, 15, 3), int16], Tensor[(405), float32]) */;
    %881 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
    %882 = @func_1917(%877) /* ty=Tensor[(10, 4, 7), float64] */;
    %883 = %880.5;
    (%881, %882, %var_2765, %883, %var_2769)
  };
  %884(%var_2806, %var_2807) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float64], Tensor[(280), float64], Tensor[(9, 15, 3), int16], Tensor[(2160), float32]) */
}

def @func_3054() -> (Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64], Tensor[(10, 4, 7), float32], Tensor[(10, 4, 7), float32]) {
  %885 = @func_1956() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
  %886 = cast(meta[relay.Constant][49] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %887 = reshape(%886, newshape=[10, 4, 7]) /* ty=Tensor[(10, 4, 7), float64] */;
  %888 = @func_1917(%887) /* ty=Tensor[(10, 4, 7), float64] */;
  %889 = cast(meta[relay.Constant][49] /* ty=Tensor[(280), float64] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%888, dtype="float32") /* ty=Tensor[(10, 4, 7), float32] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %893 = cast(%888, dtype="float32") /* ty=Tensor[(10, 4, 7), float32] */;
  %894 = %885.0;
  %895 = @func_2681() /* ty=Tensor[(10, 9, 13), float64] */;
  %896 = floor_mod(%891, %892) /* ty=Tensor[(10, 4, 7), float32] */;
  %897 = sinh(%893) /* ty=Tensor[(10, 4, 7), float32] */;
  (%894, %895, %896, %897)
}

def @func_5473(%var_5472: Tensor[(10, 9, 13), float64]) -> Tensor[(10, 9, 13), int32] {
  %903 = fn (%var_5465: Tensor[(10, 9, 13), float64]) -> Tensor[(10, 9, 13), int32] {
    %898 = @func_2406() /* ty=Tensor[(10, 9, 13), float64] */;
    %899 = cast(%var_5465, dtype="int32") /* ty=Tensor[(10, 9, 13), int32] */;
    %900 = shape_of(%898, dtype="int32") /* ty=Tensor[(3), int32] */;
    %901 = cast(%898, dtype="int32") /* ty=Tensor[(10, 9, 13), int32] */;
    %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    right_shift(%901, %902) /* ty=Tensor[(10, 9, 13), int32] */
  };
  %903(%var_5472) /* ty=Tensor[(10, 9, 13), int32] */
}

def @func_7351(%var_7344: Tensor[(12, 768), float32]) -> Tensor[(12, 768), int64] {
  %904 = @func_3636() /* ty=(Tensor[(1, 768), float64],) */;
  %905 = %904.0;
  %906 = cast(%905, dtype="float32") /* ty=Tensor[(1, 768), float32] */;
  %907 = sqrt(%906) /* ty=Tensor[(1, 768), float32] */;
  %908 = cast(%907, dtype="int64") /* ty=Tensor[(1, 768), int64] */;
  %909 = cast(%var_7344, dtype="int64") /* ty=Tensor[(12, 768), int64] */;
  subtract(%908, %909) /* ty=Tensor[(12, 768), int64] */
}

def @func_7201(%var_7196: Tensor[(90, 14), float64], %var_7197: Tensor[(405), int16], %var_7198: int16, %var_7199: Tensor[(264), float64], %var_7200: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(15, 14, 6), float64], Tensor[(90, 14), float64], Tensor[(10, 9, 13), float32], Tensor[(9, 15, 3), bool], Tensor[(405), int16], Tensor[(10, 9, 13), float64], Tensor[(2016, 264), bool], int16, Tensor[(264), float64], Tensor[(2016), int64]) {
  %936 = fn (%var_7145: Tensor[(90, 14), float64], %var_7170: Tensor[(405), int16], %var_7182: int16, %var_7183: Tensor[(264), float64], %var_7184: Tensor[(2016), int64]) -> (Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(15, 14, 6), float64], Tensor[(90, 14), float64], Tensor[(10, 9, 13), float32], Tensor[(9, 15, 3), bool], Tensor[(405), int16], Tensor[(10, 9, 13), float64], Tensor[(2016, 264), bool], int16, Tensor[(264), float64], Tensor[(2016), int64]) {
    %910 = @func_5088() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
    %911 = cast(%var_7145, dtype="float64") /* ty=Tensor[(90, 14), float64] */;
    %912 = cast(%var_7145, dtype="float64") /* ty=Tensor[(90, 14), float64] */;
    %913 = reshape(%911, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
    %914 = reshape(%912, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
    %915 = @func_6443(%913, %914) /* ty=(Tensor[(15, 14, 6), float64],) */;
    %916 = @func_5088() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32]) */;
    %917 = cast(%var_7170, dtype="int16") /* ty=Tensor[(405), int16] */;
    %918 = cast(%var_7170, dtype="int16") /* ty=Tensor[(405), int16] */;
    %919 = reshape(%917, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
    %920 = reshape(%918, newshape=[9, 15, 3]) /* ty=Tensor[(9, 15, 3), int16] */;
    %921 = @func_4930() /* ty=(Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float32], Tensor[(10, 9, 13), float64]) */;
    %922 = cast(%var_7182, dtype="int16") /* ty=int16 */;
    %923 = cast(%var_7183, dtype="float64") /* ty=Tensor[(264), float64] */;
    %924 = cast(%var_7184, dtype="int64") /* ty=Tensor[(2016), int64] */;
    %925 = reshape(%922, newshape=[]) /* ty=int16 */;
    %926 = reshape(%923, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %927 = reshape(%924, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), int64] */;
    %928 = @func_3200(%925, %926, %927) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(750), uint8], Tensor[(2016, 264), bool], Tensor[(2016, 1), uint32]) */;
    %929 = @func_4046() /* ty=Tensor[(10, 9, 13), float64] */;
    %930 = %910.0;
    %931 = %915.0;
    %932 = %916.1;
    %933 = @func_982(%919, %920) /* ty=Tensor[(9, 15, 3), bool] */;
    %934 = %921.2;
    %935 = %928.3;
    (%929, %930, %931, %var_7145, %932, %933, %var_7170, %934, %935, %var_7182, %var_7183, %var_7184)
  };
  %936(%var_7196, %var_7197, %var_7198, %var_7199, %var_7200) /* ty=(Tensor[(10, 9, 13), float64], Tensor[(10, 9, 13), float32], Tensor[(15, 14, 6), float64], Tensor[(90, 14), float64], Tensor[(10, 9, 13), float32], Tensor[(9, 15, 3), bool], Tensor[(405), int16], Tensor[(10, 9, 13), float64], Tensor[(2016, 264), bool], int16, Tensor[(264), float64], Tensor[(2016), int64]) */
}

def @func_5552() -> (Tensor[(10, 9, 13), float32],) {
  @func_5550() /* ty=(Tensor[(10, 9, 13), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen467/build/output.py", line 2536, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:20:46] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

