==========mod==========
#[version = "0.0.5"]
def @func_6315() -> Tensor[(5, 11, 8), float64] {
  @func_815() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_206() -> (Tensor[(5, 11, 8), float64],) {
  %0 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %1 = %0.1;
  (%1,)
}

def @func_4912() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %2 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %3 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
  %4 = %2.0;
  (%3, %4)
}

def @func_6480(%var_6425: Tensor[(2310), float64]) -> (Tensor[(5, 11, 8), float64], float64, Tensor[(2310), float64], Tensor[(5, 11, 8), float64], Tensor[(15, 11, 14), float32]) {
  %5 = @func_2128() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %6 = cast(4.63965f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %7 = cast(%var_6425, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %8 = reshape(%6, newshape=[]) /* ty=float64 */;
  %9 = reshape(%7, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), float64] */;
  %10 = @func_1985(%8, %9) /* ty=(Tensor[(15, 11, 14), float64],) */;
  %11 = %10.0;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
  %13 = log2(%12) /* ty=Tensor[(15, 11, 14), float64] */;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %15 = @func_5662() /* ty=Tensor[(5, 11, 8), float64] */;
  %16 = %5.0;
  %17 = sin(%14) /* ty=Tensor[(15, 11, 14), float32] */;
  (%15, 4.63965f64 /* ty=float64 */, %var_6425, %16, %17)
}

def @func_2061() -> Tensor[(13, 8, 8), float64] {
  %18 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %18.0
}

def @func_4548() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), float64], Tensor[(11, 35), uint8]) {
  %19 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 35), uint8] */, dtype="uint8") /* ty=Tensor[(11, 35), uint8] */;
  %21 = reshape(%20, newshape=[11, 7, 5]) /* ty=Tensor[(11, 7, 5), uint8] */;
  %22 = @func_2670(%21) /* ty=(Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) */;
  %23 = %19.0;
  %24 = @func_876() /* ty=Tensor[(5, 11, 8), float64] */;
  %25 = %22.1;
  (%23, %24, %25, meta[relay.Constant][0] /* ty=Tensor[(11, 35), uint8] */)
}

def @func_2882(%var_2866: Tensor[(1, 42), uint32]) -> (Tensor[(5, 11, 8), float64], Tensor[(7, 7, 6), bool], Tensor[(1, 42), uint32], Tensor[(294), uint32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64], Tensor[(6, 1, 5), float64]) {
  %26 = @func_2710() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %27 = cast(%var_2866, dtype="uint32") /* ty=Tensor[(1, 42), uint32] */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(294), uint32] */, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %29 = reshape(%27, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint32] */;
  %30 = reshape(%28, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), uint32] */;
  %31 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %32 = %26.0;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %34 = reshape(%33, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %35 = @func_2217(%34) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %36 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %37 = @func_419(%29, %30) /* ty=Tensor[(7, 7, 6), bool] */;
  %38 = %31.0;
  %39 = %35.0;
  %40 = %36.1;
  (%32, %37, %var_2866, meta[relay.Constant][1] /* ty=Tensor[(294), uint32] */, %38, %39, %40)
}

def @func_8055() -> Tensor[(5, 11, 8), float64] {
  %41 = @func_4872() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %41.0
}

def @func_2128() -> (Tensor[(5, 11, 8), float64],) {
  %42 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
  (%42,)
}

def @func_3363(%var_3347: Tensor[(13, 10, 6), float32]) -> (Tensor[(13, 10, 6), float32], Tensor[(5, 11, 8), float64]) {
  %43 = cast(%var_3347, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
  %44 = asin(%43) /* ty=Tensor[(13, 10, 6), float32] */;
  %45 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
  (%44, %45)
}

def @func_5100(%var_5087: Tensor[(10, 2, 7), float64]) -> (Tensor[(10, 2, 7), float64], Tensor[(13, 8, 8), float64], Tensor[(10, 2, 7), float64]) {
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %47 = shape_of(%var_5087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_5087, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %50 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %52 = divide(%48, %49) /* ty=Tensor[(10, 2, 7), float64] */;
  %53 = %50.0;
  %54 = sqrt(%51) /* ty=Tensor[(10, 2, 7), float64] */;
  (%52, %53, %54)
}

def @func_4261() -> (Tensor[(5, 11, 8), float64], Tensor[(2, 16, 14), float64], Tensor[(448), float64]) {
  %55 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %58 = reshape(%56, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float64] */;
  %59 = reshape(%57, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float64] */;
  %60 = %55.0;
  %61 = @func_3152(%58, %59) /* ty=Tensor[(2, 16, 14), float64] */;
  (%60, %61, meta[relay.Constant][3] /* ty=Tensor[(448), float64] */)
}

def @func_3933() -> (Tensor[(5, 11, 8), float64],) {
  %62 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %63 = %62.0;
  (%63,)
}

def @func_89(%var_24: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %64 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %65 = %64.1;
  %66 = cast(%var_24, dtype="int8") /* ty=Tensor[(5, 11, 8), int8] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="int8") /* ty=Tensor[(5, 11, 8), int8] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %70 = cast(%65, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %71 = exp(%70) /* ty=Tensor[(5, 11, 8), float64] */;
  %72 = cast(%var_24, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %76 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %77 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %78 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %79 = maximum(%68, %69) /* ty=Tensor[(5, 11, 8), int8] */;
  %80 = greater(%74, %75) /* ty=Tensor[(5, 11, 8), bool] */;
  %81 = %76.0;
  %82 = %77.0;
  %83 = %78.1;
  (%79, %80, %81, %82, %83)
}

def @func_1688() -> (Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %84 = @func_1483() /* ty=Tensor[(15, 16, 10), float64] */;
  %85 = cast(%84, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
  %86 = sinh(%85) /* ty=Tensor[(15, 16, 10), float64] */;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %88 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %90 = reshape(%89, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %91 = @func_89(%90) /* ty=(Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %92 = atan(%87) /* ty=Tensor[(15, 16, 10), float32] */;
  %93 = %91.3;
  (%92, %88, %93)
}

def @func_3835() -> (Tensor[(5, 11, 8), float64],) {
  %94 = @func_2499() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %95 = %94.2;
  (%95,)
}

def @func_6155() -> Tensor[(5, 11, 8), float64] {
  @func_5959() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_7942() -> Tensor[(5, 11, 8), float32] {
  @func_3879() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_251(%var_240: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %96 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %97 = %96.0;
  %98 = cast(%var_240, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %102 = add(%100, %101) /* ty=Tensor[(5, 11, 8), float32] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %104 = reshape(%103, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %105 = @func_89(%104) /* ty=(Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %106 = %105.2;
  (%102, %106)
}

def @func_7728(%var_7725: Tensor[(160), float64]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), uint16], Tensor[(5, 8, 4), float64], Tensor[(160), float64]) {
  %107 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %108 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %109 = @func_6017() /* ty=(Tensor[(7, 15, 15), float32], Tensor[(13, 8, 8), float64]) */;
  %110 = %109.1;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %112 = atanh(%111) /* ty=Tensor[(13, 8, 8), float32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
  %114 = %107.1;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %116 = reshape(%115, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %117 = @func_385(%116) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint16]) */;
  %118 = cast(%var_7725, dtype="float64") /* ty=Tensor[(160), float64] */;
  %119 = reshape(%118, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
  %120 = @func_6120(%119) /* ty=(Tensor[(5, 8, 4), float64],) */;
  %121 = %108.0;
  %122 = log(%113) /* ty=Tensor[(13, 8, 8), float64] */;
  %123 = %117.1;
  %124 = %120.0;
  (%114, %121, %122, %123, %124, %var_7725)
}

def @func_6246() -> (Tensor[(5, 11, 8), float64],) {
  %125 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %126 = %125.0;
  (%126,)
}

def @func_5142() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) {
  %127 = @func_2710() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %128 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %129 = %127.0;
  (%128, %129)
}

def @func_8067() -> (Tensor[(5, 11, 8), float64],) {
  %130 = @func_6060() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) */;
  %131 = %130.0;
  (%131,)
}

def @func_4041() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %132 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %133 = @func_3047() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %134 = @func_3587() /* ty=Tensor[(5, 11, 8), float64] */;
  %135 = @func_1937() /* ty=Tensor[(5, 11, 8), float64] */;
  %136 = %132.0;
  %137 = %133.2;
  (%134, %135, %136, %137)
}

def @func_5378() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %138 = @func_5351() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %139 = %138.1;
  %140 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  (%139, %140)
}

def @func_2638() -> (Tensor[(5, 11, 8), float64],) {
  %141 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  (%141,)
}

def @func_7002() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) {
  %142 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %143 = @func_923() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %144 = @func_4231() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %145 = %142.1;
  %146 = %143.0;
  %147 = %144.0;
  (%145, %146, %147)
}

def @func_4231() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) {
  %148 = @func_3047() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %149 = @func_2187() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %150 = %148.0;
  %151 = %149.1;
  (%150, %151)
}

def @func_6017() -> (Tensor[(7, 15, 15), float32], Tensor[(13, 8, 8), float64]) {
  %152 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
  %153 = acosh(%152) /* ty=Tensor[(7, 15, 15), float32] */;
  %154 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  (%153, %154)
}

def @func_7376() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %155 = @func_6499() /* ty=Tensor[(5, 11, 8), float64] */;
  %156 = @func_2823() /* ty=Tensor[(5, 11, 8), float32] */;
  (%155, %156)
}

def @func_2538(%var_2535: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), float64],) {
  %157 = cast(%var_2535, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %158 = log(%157) /* ty=Tensor[(3, 16, 7), float64] */;
  (%158,)
}

def @func_2525() -> Tensor[(13, 8, 8), float64] {
  @func_2061() /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_8032() -> (Tensor[(5, 11, 8), float32],) {
  %159 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
  (%159,)
}

def @func_1205() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %160 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %161 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
  %162 = %160.4;
  (%161, %162)
}

def @func_2670(%var_2641: Tensor[(11, 7, 5), uint8]) -> (Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) {
  %163 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 7, 5), uint8] */, dtype="uint8") /* ty=Tensor[(11, 7, 5), uint8] */;
  %164 = shape_of(%var_2641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_2641, dtype="uint8") /* ty=Tensor[(11, 7, 5), uint8] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %167 = cast(%var_2641, dtype="float64") /* ty=Tensor[(11, 7, 5), float64] */;
  %168 = right_shift(%165, %166) /* ty=Tensor[(11, 7, 5), uint8] */;
  %169 = asinh(%167) /* ty=Tensor[(11, 7, 5), float64] */;
  %170 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  (%168, %169, %170)
}

def @func_815() -> Tensor[(5, 11, 8), float64] {
  %171 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %171.0
}

def @func_1483() -> Tensor[(15, 16, 10), float64] {
  %172 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
  rsqrt(%172) /* ty=Tensor[(15, 16, 10), float64] */
}

def @func_4121(%var_4110: Tensor[(30), float64], %var_4111: Tensor[(120), float32]) -> (Tensor[(11, 15), float64], Tensor[(6, 4, 5), uint16], Tensor[(30), float64], Tensor[(120), float32]) {
  %173 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 15), float64] */;
  %174 = cast(%var_4110, dtype="float64") /* ty=Tensor[(30), float64] */;
  %175 = cast(%var_4111, dtype="float32") /* ty=Tensor[(120), float32] */;
  %176 = reshape(%174, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
  %177 = reshape(%175, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %178 = @func_1377(%176, %177) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
  %179 = sigmoid(%173) /* ty=Tensor[(11, 15), float64] */;
  %180 = %178.6;
  (%179, %180, %var_4110, %var_4111)
}

def @func_6604() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %181 = @func_2499() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %182 = @func_6523() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %183 = %181.0;
  %184 = %182.0;
  (%183, %184)
}

def @func_7107() -> Tensor[(5, 11, 8), float64] {
  %185 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %185.1
}

def @func_6706(%var_6698: Tensor[(780), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(780), float32]) {
  %186 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %187 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %188 = cast(%var_6698, dtype="float32") /* ty=Tensor[(780), float32] */;
  %189 = reshape(%188, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), float32] */;
  %190 = @func_3363(%189) /* ty=(Tensor[(13, 10, 6), float32], Tensor[(5, 11, 8), float64]) */;
  %191 = %186.0;
  %192 = %187.1;
  %193 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  %194 = %190.1;
  (%191, %192, %193, %194, %var_6698)
}

def @func_385(%var_349: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint16]) {
  %195 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %196 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %197 = cast(%var_349, dtype="int32") /* ty=Tensor[(5, 11, 8), int32] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="int32") /* ty=Tensor[(5, 11, 8), int32] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %201 = logical_xor(%199, %200) /* ty=Tensor[(5, 11, 8), int32] */;
  %202 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 11, 8), int32] */, dtype="uint16") /* ty=Tensor[(5, 11, 8), uint16] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="uint16") /* ty=Tensor[(5, 11, 8), uint16] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %206 = %195.0;
  %207 = bitwise_and(%204, %205) /* ty=Tensor[(5, 11, 8), uint16] */;
  (%206, %207)
}

def @func_5828(%var_5783: Tensor[(7, 42), uint32], %var_5785: Tensor[(5, 11, 8), float64], %var_5821: Tensor[(7, 42), uint32]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(7, 42), int32]) {
  %208 = @func_5750() /* ty=(Tensor[(5, 11, 8), float32],) */;
  %209 = cast(%var_5783, dtype="uint32") /* ty=Tensor[(7, 42), uint32] */;
  %210 = cast(%var_5783, dtype="float32") /* ty=Tensor[(7, 42), float32] */;
  %211 = reshape(%209, newshape=[294]) /* ty=Tensor[(294), uint32] */;
  %212 = reshape(%210, newshape=[294]) /* ty=Tensor[(294), float32] */;
  %213 = @func_2369(%211, %212) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) */;
  %214 = @func_4317() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %215 = %214.1;
  %216 = cast(%var_5785, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = cast(%var_5821, dtype="int32") /* ty=Tensor[(7, 42), int32] */;
  %221 = shape_of(%var_5783, dtype="int32") /* ty=Tensor[(2), int32] */;
  %222 = cast(%var_5783, dtype="int32") /* ty=Tensor[(7, 42), int32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %224 = %208.0;
  %225 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  %226 = %213.1;
  %227 = logical_or(%218, %219) /* ty=Tensor[(5, 11, 8), bool] */;
  %228 = @func_2396() /* ty=Tensor[(5, 11, 8), float64] */;
  %229 = multiply(%222, %223) /* ty=Tensor[(7, 42), int32] */;
  (%224, %225, %226, %227, %228, %229)
}

def @func_7149() -> (Tensor[(5, 11, 8), float64],) {
  %230 = @func_5959() /* ty=Tensor[(5, 11, 8), float64] */;
  (%230,)
}

def @func_4872() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %231 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %232 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %233 = %231.1;
  %234 = %232.1;
  (%233, %234)
}

def @func_2072(%var_2066: Tensor[(3, 7, 5), uint64]) -> Tensor[(3, 7, 5), uint64] {
  %235 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 7, 5), uint64] */, dtype="uint64") /* ty=Tensor[(3, 7, 5), uint64] */;
  %236 = shape_of(%var_2066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%var_2066, dtype="uint64") /* ty=Tensor[(3, 7, 5), uint64] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%237, %238) /* ty=Tensor[(3, 7, 5), uint64] */
}

def @func_4317() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %239 = @func_3835() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %240 = @func_1713() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %241 = %239.0;
  %242 = %240.0;
  (%241, %242)
}

def @func_5316() -> (Tensor[(5, 11, 8), float64],) {
  %243 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  (%243,)
}

def @func_6721() -> Tensor[(5, 11, 8), float64] {
  %244 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %244.0
}

def @func_340() -> Tensor[(5, 11, 8), float64] {
  %245 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %245.0
}

def @func_8013() -> Tensor[(448), float64] {
  %246 = @func_4261() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(2, 16, 14), float64], Tensor[(448), float64]) */;
  %247 = %246.2;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(448), float64] */;
  log2(%248) /* ty=Tensor[(448), float64] */
}

def @func_6523() -> (Tensor[(5, 11, 8), float64],) {
  %249 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
  (%249,)
}

def @func_5643() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64]) {
  %250 = @func_3835() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %253 = reshape(%252, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %254 = @func_2217(%253) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %255 = %254.0;
  (%251, %255)
}

def @func_1544() -> Tensor[(5, 11, 8), float64] {
  %256 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %256.0
}

def @func_1080() -> Tensor[(5, 11, 8), float64] {
  %257 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %257.1
}

def @func_7217() -> (Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) {
  %258 = cast(meta[relay.Constant][10] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %259 = cast(meta[relay.Constant][11] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %260 = reshape(%258, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %261 = reshape(%259, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %262 = @func_4121(%260, %261) /* ty=(Tensor[(11, 15), float64], Tensor[(6, 4, 5), uint16], Tensor[(30), float64], Tensor[(120), float32]) */;
  %263 = @func_6924() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %264 = @func_4041() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %265 = %264.1;
  %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 11, 8), float64] */, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = %262.2;
  %271 = %263.1;
  %272 = not_equal(%268, %269) /* ty=Tensor[(5, 11, 8), bool] */;
  (%270, meta[relay.Constant][10] /* ty=Tensor[(30), float64] */, meta[relay.Constant][11] /* ty=Tensor[(120), float32] */, %271, %272)
}

def @func_5210() -> (Tensor[(5, 11, 8), float64],) {
  %273 = @func_4317() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %274 = %273.1;
  (%274,)
}

def @func_471() -> Tensor[(5, 11, 8), float32] {
  %275 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %276 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %277 = %276.1;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %279 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%275, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%280, %281) /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_6651() -> (Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) {
  %282 = @func_5741() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) */;
  %283 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %284 = %282.2;
  (%283, %284)
}

def @func_3047() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %285 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %286 = @func_1713() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %287 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %288 = %287.0;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %290 = reshape(%289, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %291 = @func_1633(%290) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) */;
  %292 = %285.0;
  %293 = %286.0;
  %294 = %291.6;
  (%292, %293, %288, %294)
}

def @func_5561() -> (Tensor[(5, 11, 8), float64],) {
  %295 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %296 = %295.1;
  (%296,)
}

def @func_942() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %297 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %298 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  %299 = %297.0;
  (%298, %299)
}

def @func_734() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %300 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %301 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %302 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
  %303 = %300.1;
  %304 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %305 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %306 = %301.0;
  (%302, %303, %304, %305, %306)
}

def @func_5261(%var_5250: Tensor[(385), uint8]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), uint8], Tensor[(385), uint8]) {
  %307 = @func_4086() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %308 = cast(%var_5250, dtype="uint8") /* ty=Tensor[(385), uint8] */;
  %309 = reshape(%308, newshape=[11, 7, 5]) /* ty=Tensor[(11, 7, 5), uint8] */;
  %310 = @func_2670(%309) /* ty=(Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) */;
  %311 = %307.0;
  %312 = @func_3587() /* ty=Tensor[(5, 11, 8), float64] */;
  %313 = %310.0;
  (%311, %312, %313, %var_5250)
}

def @func_610() -> Tensor[(5, 11, 8), float64] {
  %314 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %314.0
}

def @func_1633(%var_1570: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) {
  %315 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %316 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
  %317 = cast(%var_1570, dtype="int64") /* ty=Tensor[(5, 11, 8), int64] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="int64") /* ty=Tensor[(5, 11, 8), int64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %321 = bitwise_xor(%319, %320) /* ty=Tensor[(5, 11, 8), int64] */;
  %322 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 11, 8), int64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%321, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %326 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %327 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 11, 8), int64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %328 = reshape(%327, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %329 = @func_251(%328) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %330 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %331 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 11, 8), int64] */, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %332 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(5, 11, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 11, 8), int64] */, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %336 = %315.0;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %338 = reshape(%337, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %339 = divide(%324, %325) /* ty=Tensor[(5, 11, 8), float64] */;
  %340 = %326.2;
  %341 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
  %342 = %329.1;
  %343 = %330.4;
  %344 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
  %345 = less(%333, %334) /* ty=Tensor[(5, 11, 8), bool] */;
  %346 = %335.4;
  %347 = @func_1431(%338) /* ty=Tensor[(5, 11, 8), float64] */;
  (%336, %339, %340, %341, %342, %343, %344, %345, %346, %347)
}

def @func_5741() -> (Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) {
  %348 = @func_1483() /* ty=Tensor[(15, 16, 10), float64] */;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %350 = cast(%348, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
  %351 = asinh(%349) /* ty=Tensor[(15, 16, 10), float32] */;
  %352 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  %353 = acosh(%350) /* ty=Tensor[(15, 16, 10), float64] */;
  (%351, %352, %353)
}

def @func_4467() -> Tensor[(13, 8, 8), float32] {
  %354 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  cos(%356) /* ty=Tensor[(13, 8, 8), float32] */
}

def @func_1451() -> (Tensor[(13, 8, 8), float64],) {
  %357 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
  %358 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %361 = subtract(%359, %360) /* ty=Tensor[(13, 8, 8), uint16] */;
  %362 = cast(%361, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
  %363 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %366 = floor_divide(%364, %365) /* ty=Tensor[(13, 8, 8), float64] */;
  (%366,)
}

def @func_3308(%var_3286: Tensor[(120), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(30, 1), float64], Tensor[(120), float32]) {
  %367 = @func_1205() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %368 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %369 = %367.0;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %371 = reshape(%370, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %372 = @func_251(%371) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %373 = @func_1822() /* ty=(Tensor[(5, 11, 8), float32],) */;
  %374 = cast(meta[relay.Constant][17] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %375 = cast(%var_3286, dtype="float32") /* ty=Tensor[(120), float32] */;
  %376 = reshape(%374, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
  %377 = reshape(%375, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %378 = @func_1377(%376, %377) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
  %379 = %368.1;
  %380 = %372.1;
  %381 = %373.0;
  %382 = %378.2;
  (%369, %379, %380, %381, %382, meta[relay.Constant][17] /* ty=Tensor[(30, 1), float64] */, %var_3286)
}

def @func_923() -> (Tensor[(5, 11, 8), float64],) {
  %383 = @func_876() /* ty=Tensor[(5, 11, 8), float64] */;
  (%383,)
}

def @func_655() -> Tensor[(5, 11, 8), float64] {
  %384 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %384.0
}

def @func_853() -> Tensor[(5, 11, 8), float64] {
  @func_655() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_4775(%var_4728: Tensor[(1, 440), float64], %var_4745: Tensor[(832), float64]) -> (Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), uint64], Tensor[(1, 440), float64], Tensor[(13, 8, 8), int16], Tensor[(832), float32], Tensor[(5, 11, 8), float64]) {
  %385 = @func_4548() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), float64], Tensor[(11, 35), uint8]) */;
  %386 = cast(%var_4728, dtype="float64") /* ty=Tensor[(1, 440), float64] */;
  %387 = reshape(%386, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %388 = @func_2217(%387) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %389 = cast(%var_4745, dtype="float64") /* ty=Tensor[(832), float64] */;
  %390 = reshape(%389, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %391 = @func_2783(%390) /* ty=(Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) */;
  %392 = cast(%var_4745, dtype="float32") /* ty=Tensor[(832), float32] */;
  %393 = log(%392) /* ty=Tensor[(832), float32] */;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(832), float32] */;
  %395 = %385.2;
  %396 = %388.0;
  %397 = %391.0;
  %398 = rsqrt(%394) /* ty=Tensor[(832), float32] */;
  %399 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  (%395, %396, %var_4728, %397, %398, %399)
}

def @main(%var_8088: Tensor[(15, 10, 11), uint32], %var_8089: Tensor[(15, 10, 11), uint32], %var_8137: Tensor[(936), float64], %var_8159: Tensor[(110, 4), float64]) -> (Tensor[(110, 4), int64], Tensor[(5, 11, 8), float64], Tensor[(110, 4), float32], Tensor[(15, 10, 11), float64], Tensor[(5, 11, 8), float64], Tensor[(936), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(110, 4), float64], Tensor[(110, 4), uint16], Tensor[(15, 10, 11), float64]) {
  %400 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %401 = reshape(%400, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %402 = @func_1633(%401) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) */;
  %403 = %402.1;
  %404 = cast(%403, dtype="int64") /* ty=Tensor[(5, 11, 8), int64] */;
  %405 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(110, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 4), float64] */, dtype="int64") /* ty=Tensor[(110, 4), int64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %408 = @func_5351() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %409 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 4), float64] */, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %410 = rsqrt(%409) /* ty=Tensor[(110, 4), float32] */;
  %411 = @func_5495() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %414 = shape_of(%410, dtype="int32") /* ty=Tensor[(2), int32] */;
  %415 = cast(%410, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %417 = cast(%var_8089, dtype="uint32") /* ty=Tensor[(15, 10, 11), uint32] */;
  %418 = shape_of(%var_8088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_8088, dtype="uint32") /* ty=Tensor[(15, 10, 11), uint32] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %421 = bitwise_or(%419, %420) /* ty=Tensor[(15, 10, 11), uint32] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  %423 = cast(%var_8137, dtype="float64") /* ty=Tensor[(936), float64] */;
  %424 = reshape(%423, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %425 = @func_4346(%424) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) */;
  %426 = @func_5378() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %427 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %428 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %429 = cast(%410, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %430 = acos(%429) /* ty=Tensor[(110, 4), float64] */;
  %431 = cast(%var_8159, dtype="uint16") /* ty=Tensor[(110, 4), uint16] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(2), int32] */;
  %433 = cast(%430, dtype="uint16") /* ty=Tensor[(110, 4), uint16] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %435 = cast(%421, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  %436 = shape_of(%var_8088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_8088, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %439 = bitwise_or(%406, %407) /* ty=Tensor[(110, 4), int64] */;
  %440 = %408.0;
  %441 = divide(%415, %416) /* ty=Tensor[(110, 4), float32] */;
  %442 = log(%422) /* ty=Tensor[(15, 10, 11), float64] */;
  %443 = %425.1;
  %444 = %426.1;
  %445 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  %446 = %427.0;
  %447 = atanh(%428) /* ty=Tensor[(110, 4), float64] */;
  %448 = add(%433, %434) /* ty=Tensor[(110, 4), uint16] */;
  %449 = divide(%437, %438) /* ty=Tensor[(15, 10, 11), float64] */;
  (%439, %440, %441, %442, %443, %var_8137, %444, %445, %446, %447, %448, %449)
}

def @func_2369(%var_2335: Tensor[(294), uint32], %var_2359: Tensor[(294), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) {
  %450 = cast(meta[relay.Constant][19] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %451 = cast(%var_2335, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %452 = reshape(%450, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint32] */;
  %453 = reshape(%451, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), uint32] */;
  %454 = @func_419(%452, %453) /* ty=Tensor[(7, 7, 6), bool] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %456 = shape_of(%var_2335, dtype="int32") /* ty=Tensor[(1), int32] */;
  %457 = cast(%var_2335, dtype="float32") /* ty=Tensor[(294), float32] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?), float32] */;
  %459 = floor_mod(%457, %458) /* ty=Tensor[(294), float32] */;
  %460 = cast(%var_2359, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(1), int32] */;
  %462 = cast(%459, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %464 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  %465 = logical_xor(%462, %463) /* ty=Tensor[(294), uint32] */;
  (%464, meta[relay.Constant][19] /* ty=Tensor[(42), uint32] */, %465)
}

def @func_5495() -> (Tensor[(5, 11, 8), float64],) {
  %466 = @func_3587() /* ty=Tensor[(5, 11, 8), float64] */;
  (%466,)
}

def @func_6499() -> Tensor[(5, 11, 8), float64] {
  %467 = @func_4041() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %467.0
}

def @func_3724() -> (Tensor[(5, 11, 8), float64],) {
  %468 = @func_1205() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %469 = %468.1;
  (%469,)
}

def @func_6804() -> (Tensor[(13, 8, 8), float64],) {
  %470 = @func_6077() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(13, 6, 12), float64], Tensor[(468, 2), float64]) */;
  %471 = %470.1;
  (%471,)
}

def @func_419(%var_413: Tensor[(1, 7, 6), uint32], %var_414: Tensor[(7, 7, 6), uint32]) -> Tensor[(7, 7, 6), bool] {
  %472 = cast(%var_413, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
  %473 = cast(%var_414, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  greater(%472, %473) /* ty=Tensor[(7, 7, 6), bool] */
}

def @func_7627() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %474 = @func_4086() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %475 = @func_5561() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %476 = %474.0;
  %477 = %475.0;
  %478 = @func_6721() /* ty=Tensor[(5, 11, 8), float64] */;
  (%476, %477, %478)
}

def @func_3117(%var_3114: Tensor[(30), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) {
  %479 = @func_2638() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %480 = %479.0;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %482 = reshape(%481, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %483 = @func_1633(%482) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) */;
  %484 = cast(%var_3114, dtype="float64") /* ty=Tensor[(30), float64] */;
  %485 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %486 = reshape(%484, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
  %487 = reshape(%485, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %488 = @func_1377(%486, %487) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
  %489 = %483.7;
  %490 = %488.0;
  (%480, %489, %490, %var_3114, meta[relay.Constant][20] /* ty=Tensor[(120), float32] */)
}

def @func_1512() -> Tensor[(5, 11, 8), float32] {
  @func_471() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_4832(%var_4828: Tensor[(16, 3, 12), float64]) -> Tensor[(16, 3, 12), float64] {
  %491 = cast(%var_4828, dtype="float64") /* ty=Tensor[(16, 3, 12), float64] */;
  asinh(%491) /* ty=Tensor[(16, 3, 12), float64] */
}

def @func_2085(%var_2081: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
  %492 = cast(%var_2081, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
  cosh(%492) /* ty=Tensor[(8, 1, 9), float32] */
}

def @func_2422(%var_2408: Tensor[(72), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64]) {
  %493 = @func_1205() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %494 = cast(%var_2408, dtype="float32") /* ty=Tensor[(72), float32] */;
  %495 = reshape(%494, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %496 = @func_1483() /* ty=Tensor[(15, 16, 10), float64] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %498 = @func_1713() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %499 = %493.0;
  %500 = @func_2085(%495) /* ty=Tensor[(8, 1, 9), float32] */;
  %501 = log10(%497) /* ty=Tensor[(15, 16, 10), float32] */;
  %502 = %498.0;
  (%499, %500, %var_2408, %501, %502)
}

def @func_4822() -> Tensor[(13, 8, 8), float64] {
  %503 = @func_4231() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %503.0
}

def @func_1822() -> (Tensor[(5, 11, 8), float32],) {
  %504 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %506 = reshape(%505, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %507 = @func_89(%506) /* ty=(Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %508 = %507.1;
  %509 = cast(%508, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %510 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%504, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %513 = equal(%511, %512) /* ty=Tensor[(5, 11, 8), bool] */;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %515 = tan(%514) /* ty=Tensor[(5, 11, 8), float32] */;
  (%515,)
}

def @func_2043() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %516 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %517 = @func_1688() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %518 = %516.0;
  %519 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
  %520 = %517.1;
  (%518, %519, %520)
}

def @func_2217(%var_2201: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), uint64],) {
  %521 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %522 = %521.1;
  %523 = cast(%var_2201, dtype="uint64") /* ty=Tensor[(5, 11, 8), uint64] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="uint64") /* ty=Tensor[(5, 11, 8), uint64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %527 = multiply(%525, %526) /* ty=Tensor[(5, 11, 8), uint64] */;
  (%527,)
}

def @func_2478(%var_2467: Tensor[(2, 2, 3), float32]) -> (Tensor[(2, 2, 3), float32], Tensor[(5, 11, 8), float64]) {
  %528 = cast(%var_2467, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
  %529 = exp(%528) /* ty=Tensor[(2, 2, 3), float32] */;
  %530 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
  (%529, %530)
}

def @func_6077() -> (Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(13, 6, 12), float64], Tensor[(468, 2), float64]) {
  %531 = cast(meta[relay.Constant][21] /* ty=Tensor[(468, 2), float64] */, dtype="float64") /* ty=Tensor[(468, 2), float64] */;
  %532 = reshape(%531, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %533 = @func_4346(%532) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) */;
  %534 = @func_3879() /* ty=Tensor[(5, 11, 8), float32] */;
  %535 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %536 = %533.0;
  (%534, %535, %536, meta[relay.Constant][21] /* ty=Tensor[(468, 2), float64] */)
}

def @func_7536() -> (Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64]) {
  %537 = @func_6924() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %538 = @func_6060() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) */;
  %539 = %537.2;
  %540 = %538.0;
  (%539, %540)
}

def @func_1937() -> Tensor[(5, 11, 8), float64] {
  @func_340() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_3587() -> Tensor[(5, 11, 8), float64] {
  %541 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %541.0
}

def @func_1431(%var_1426: Tensor[(5, 11, 8), float64]) -> Tensor[(5, 11, 8), float64] {
  %542 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %543 = %542.0;
  %544 = cast(%var_1426, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%546, %547) /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_5662() -> Tensor[(5, 11, 8), float64] {
  @func_815() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_2396() -> Tensor[(5, 11, 8), float64] {
  %548 = @func_1688() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %548.1
}

def @func_12() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %549 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 11, 8), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %550 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 11, 8), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %551 = sqrt(%549) /* ty=Tensor[(5, 11, 8), float64] */;
  %552 = sigmoid(%550) /* ty=Tensor[(5, 11, 8), float64] */;
  (%551, %552)
}

def @func_3084(%var_3068: int64, %var_3069: Tensor[(3, 14, 16), int64]) -> (Tensor[(3, 14, 16), int64], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(5, 11, 8), float64]) {
  %553 = cast(%var_3068, dtype="int64") /* ty=int64 */;
  %554 = cast(%var_3069, dtype="int64") /* ty=Tensor[(3, 14, 16), int64] */;
  %555 = cast(meta[relay.Constant][23] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %556 = reshape(%555, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %557 = @func_251(%556) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %558 = logical_xor(%553, %554) /* ty=Tensor[(3, 14, 16), int64] */;
  %559 = %557.1;
  %560 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  (%558, %559, meta[relay.Constant][23] /* ty=Tensor[(440), float64] */, %560)
}

def @func_1377(%var_1283: Tensor[(5, 6), float64], %var_1371: Tensor[(6, 4, 5), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) {
  %561 = @func_923() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %562 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %564 = reshape(%563, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %565 = @func_251(%564) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %566 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %567 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %568 = %567.0;
  %569 = cast(%568, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %570 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%566, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %573 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %574 = cast(%var_1283, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %575 = cast(%var_1283, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %576 = reshape(%574, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %577 = reshape(%575, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %578 = @func_1247(%576, %577) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %579 = %578.1;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %581 = sigmoid(%580) /* ty=Tensor[(6, 1, 5), float64] */;
  %582 = cast(%var_1283, dtype="int16") /* ty=Tensor[(5, 6), int16] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="int16") /* ty=Tensor[(6, 1, 5), int16] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %586 = right_shift(%584, %585) /* ty=Tensor[(6, ?, 5), int16] */;
  %587 = cast(%586, dtype="float32") /* ty=Tensor[(6, ?, 5), float32] */;
  %588 = erf(%587) /* ty=Tensor[(6, ?, 5), float32] */;
  %589 = cast(%588, dtype="int16") /* ty=Tensor[(6, ?, 5), int16] */;
  %590 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 13, 5), float32] */, dtype="int16") /* ty=Tensor[(6, 13, 5), int16] */;
  %591 = cast(%581, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
  %592 = atan(%591) /* ty=Tensor[(6, 1, 5), float32] */;
  %593 = cast(%592, dtype="uint16") /* ty=Tensor[(6, 1, 5), uint16] */;
  %594 = cast(%var_1371, dtype="uint16") /* ty=Tensor[(6, 4, 5), uint16] */;
  %595 = %561.0;
  %596 = %565.1;
  %597 = right_shift(%571, %572) /* ty=Tensor[(5, 11, 8), int16] */;
  %598 = %573.1;
  %599 = multiply(%589, %590) /* ty=Tensor[(6, 13, 5), int16] */;
  %600 = right_shift(%593, %594) /* ty=Tensor[(6, 4, 5), uint16] */;
  (%562, %595, %596, %597, %598, %599, %600)
}

def @func_2499() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %601 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  %602 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  %603 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
  (%601, %602, %603)
}

def @func_3667(%var_3623: Tensor[(13, 8, 8), float64]) -> (Tensor[(13, 8, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(13, 8, 8), float32], Tensor[(13, 8, 8), float32]) {
  %604 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  %605 = cast(%var_3623, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = cast(meta[relay.Constant][25] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %610 = reshape(%609, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %611 = @func_2538(%610) /* ty=(Tensor[(3, 16, 7), float64],) */;
  %612 = cast(%604, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %613 = cast(%604, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %614 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  %615 = less(%607, %608) /* ty=Tensor[(13, 8, 8), bool] */;
  %616 = %611.0;
  %617 = sinh(%612) /* ty=Tensor[(13, 8, 8), float32] */;
  %618 = sin(%613) /* ty=Tensor[(13, 8, 8), float32] */;
  (%614, %615, %616, meta[relay.Constant][25] /* ty=Tensor[(336), float64] */, %617, %618)
}

def @func_319() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %619 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %622 = reshape(%621, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %623 = @func_251(%622) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %624 = cast(%620, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %625 = reshape(%624, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %626 = @func_251(%625) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %627 = %623.1;
  %628 = %626.0;
  (%620, %627, %628)
}

def @func_7352(%var_7249: Tensor[(3, 24), float32], %var_7273: Tensor[(8, 104), float64], %var_7333: Tensor[(3, 24), float32]) -> (Tensor[(120), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(8, 104), float64], Tensor[(5, 11, 8), float32], Tensor[(30), float64], Tensor[(3, 24), int32], Tensor[(3, 24), int64], Tensor[(3, 24), float64]) {
  %629 = @func_7217() /* ty=(Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %630 = @func_5378() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %631 = cast(%var_7273, dtype="float64") /* ty=Tensor[(8, 104), float64] */;
  %632 = reshape(%631, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %633 = @func_2783(%632) /* ty=(Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) */;
  %634 = @func_7217() /* ty=(Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %635 = cast(%var_7249, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %636 = asinh(%635) /* ty=Tensor[(3, 24), float32] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %638 = rsqrt(%637) /* ty=Tensor[(3, 24), float32] */;
  %639 = cast(%var_7249, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %640 = reshape(%639, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %641 = @func_2085(%640) /* ty=Tensor[(8, 1, 9), float32] */;
  %642 = cast(%641, dtype="int16") /* ty=Tensor[(8, 1, 9), int16] */;
  %643 = shape_of(%var_7249, dtype="int32") /* ty=Tensor[(2), int32] */;
  %644 = cast(%var_7249, dtype="int16") /* ty=Tensor[(3, 24), int16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %646 = logical_xor(%644, %645) /* ty=Tensor[(3, 24), int16] */;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %648 = shape_of(%638, dtype="int32") /* ty=Tensor[(2), int32] */;
  %649 = cast(%638, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %651 = add(%649, %650) /* ty=Tensor[(3, 24), float64] */;
  %652 = cast(%651, dtype="int32") /* ty=Tensor[(3, 24), int32] */;
  %653 = shape_of(%638, dtype="int32") /* ty=Tensor[(2), int32] */;
  %654 = cast(%638, dtype="int32") /* ty=Tensor[(3, 24), int32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %656 = cast(%var_7333, dtype="int64") /* ty=Tensor[(3, 24), int64] */;
  %657 = shape_of(%636, dtype="int32") /* ty=Tensor[(2), int32] */;
  %658 = cast(%636, dtype="int64") /* ty=Tensor[(3, 24), int64] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %660 = cast(%651, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %661 = %629.2;
  %662 = @func_4813() /* ty=Tensor[(5, 11, 8), float64] */;
  %663 = %630.0;
  %664 = @func_2396() /* ty=Tensor[(5, 11, 8), float64] */;
  %665 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
  %666 = %633.1;
  %667 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
  %668 = %634.1;
  %669 = bitwise_or(%654, %655) /* ty=Tensor[(3, 24), int32] */;
  %670 = maximum(%658, %659) /* ty=Tensor[(3, 24), int64] */;
  %671 = sigmoid(%660) /* ty=Tensor[(3, 24), float64] */;
  (%661, %662, %663, %664, %665, %666, %var_7273, %667, %668, %669, %670, %671)
}

def @func_4086() -> (Tensor[(5, 11, 8), float64],) {
  %672 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %673 = %672.0;
  (%673,)
}

def @func_4690() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %674 = @func_3981() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(294), uint32], Tensor[(294), uint32]) */;
  %675 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
  %676 = %674.0;
  (%675, %676)
}

def @func_1913() -> (Tensor[(5, 11, 8), float64],) {
  %677 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %678 = %677.0;
  (%678,)
}

def @func_6120(%var_6107: Tensor[(5, 8, 4), float64]) -> (Tensor[(5, 8, 4), float64],) {
  %679 = cast(%var_6107, dtype="float64") /* ty=Tensor[(5, 8, 4), float64] */;
  %680 = tan(%679) /* ty=Tensor[(5, 8, 4), float64] */;
  (%680,)
}

def @func_2783(%var_2751: Tensor[(13, 8, 8), float64]) -> (Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) {
  %681 = @func_2043() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %682 = %681.0;
  %683 = cast(%var_2751, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %687 = bitwise_and(%685, %686) /* ty=Tensor[(13, 8, 8), int16] */;
  %688 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  (%687, %688)
}

def @func_2936(%var_2915: Tensor[(4, 12, 3), uint32]) -> (Tensor[(4, 12, 3), bool], Tensor[(4, 12, 3), float64], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool]) {
  %689 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 3), uint32] */, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
  %690 = shape_of(%var_2915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_2915, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %693 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 3), uint32] */, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
  %694 = shape_of(%var_2915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_2915, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %697 = @func_1117() /* ty=(Tensor[(5, 11, 8), bool],) */;
  %698 = greater_equal(%691, %692) /* ty=Tensor[(4, 12, 3), bool] */;
  %699 = floor_mod(%695, %696) /* ty=Tensor[(4, 12, 3), float64] */;
  %700 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %701 = %697.0;
  (%698, %699, %700, %701)
}

def @func_4813() -> Tensor[(5, 11, 8), float64] {
  %702 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %702.1
}

def @func_5876() -> (Tensor[(5, 11, 8), float64],) {
  %703 = @func_2710() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %704 = %703.0;
  (%704,)
}

def @func_1985(%var_1977: float64, %var_1978: Tensor[(15, 11, 14), float64]) -> (Tensor[(15, 11, 14), float64],) {
  %705 = cast(%var_1977, dtype="float64") /* ty=float64 */;
  %706 = cast(%var_1978, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
  %707 = floor_mod(%705, %706) /* ty=Tensor[(15, 11, 14), float64] */;
  (%707,)
}

def @func_1416() -> (Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) {
  %708 = @func_923() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %709 = cast(meta[relay.Constant][27] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %710 = cast(meta[relay.Constant][27] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %711 = reshape(%709, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %712 = reshape(%710, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %713 = @func_1247(%711, %712) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %714 = cast(meta[relay.Constant][27] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %715 = %713.1;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %717 = reshape(%714, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %718 = reshape(%716, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %719 = @func_1247(%717, %718) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %720 = %719.0;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(6, ?, 5), float64] */;
  %722 = cast(meta[relay.Constant][27] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %723 = reshape(%721, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %724 = reshape(%722, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %725 = @func_1247(%723, %724) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %726 = %708.0;
  %727 = %725.1;
  (%726, %715, meta[relay.Constant][27] /* ty=Tensor[(30), float64] */, %720, %727)
}

def @func_7499(%var_7495: Tensor[(13, 5, 13), float32]) -> (Tensor[(13, 5, 13), float32],) {
  %728 = cast(%var_7495, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
  %729 = asin(%728) /* ty=Tensor[(13, 5, 13), float32] */;
  (%729,)
}

def @func_1117() -> (Tensor[(5, 11, 8), bool],) {
  %730 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %731 = %730.0;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %733 = asin(%732) /* ty=Tensor[(5, 11, 8), float32] */;
  %734 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
  %735 = cast(%734, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %736 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%733, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %739 = greater_equal(%737, %738) /* ty=Tensor[(5, 11, 8), bool] */;
  (%739,)
}

def @func_1247(%var_1207: Tensor[(6, 1, 5), float64], %var_1208: Tensor[(6, 1, 5), float64]) -> (Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %740 = cast(%var_1208, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %741 = shape_of(%var_1207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%var_1207, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %744 = cast(%var_1207, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %745 = cast(%var_1208, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %746 = shape_of(%var_1207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_1207, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %749 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %750 = minimum(%742, %743) /* ty=Tensor[(6, ?, 5), float64] */;
  %751 = acos(%744) /* ty=Tensor[(6, 1, 5), float64] */;
  %752 = add(%747, %748) /* ty=Tensor[(6, ?, 5), float64] */;
  %753 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  %754 = %749.2;
  (%750, %751, %752, %753, %754)
}

def @func_3981() -> (Tensor[(5, 11, 8), float64], Tensor[(294), uint32], Tensor[(294), uint32]) {
  %755 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %756 = cast(meta[relay.Constant][28] /* ty=Tensor[(294), uint32] */, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %757 = cast(meta[relay.Constant][28] /* ty=Tensor[(294), uint32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %758 = reshape(%756, newshape=[294]) /* ty=Tensor[(294), uint32] */;
  %759 = reshape(%757, newshape=[294]) /* ty=Tensor[(294), float32] */;
  %760 = @func_2369(%758, %759) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) */;
  %761 = %755.1;
  %762 = %760.2;
  (%761, %762, meta[relay.Constant][28] /* ty=Tensor[(294), uint32] */)
}

def @func_876() -> Tensor[(5, 11, 8), float64] {
  %763 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %763.0
}

def @func_3879() -> Tensor[(5, 11, 8), float32] {
  %764 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  atanh(%765) /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_4612(%var_4582: Tensor[(5, 6, 6), float32], %var_4588: Tensor[(5, 6, 6), float32], %var_4597: Tensor[(72), float32]) -> (Tensor[(5, 6, 6), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 6, 6), float32]) {
  %766 = cast(%var_4588, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  %767 = shape_of(%var_4582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_4582, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %770 = cast(%var_4597, dtype="float32") /* ty=Tensor[(72), float32] */;
  %771 = reshape(%770, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %772 = cast(%var_4582, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %773 = sigmoid(%772) /* ty=Tensor[(5, 6, 6), float32] */;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %775 = floor_divide(%768, %769) /* ty=Tensor[(5, 6, 6), float64] */;
  %776 = @func_2085(%771) /* ty=Tensor[(8, 1, 9), float32] */;
  %777 = sqrt(%774) /* ty=Tensor[(5, 6, 6), float32] */;
  (%775, %776, %var_4597, %777)
}

def @func_4947() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %778 = @func_1688() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %779 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
  %780 = %778.1;
  (%779, %780)
}

def @func_5519(%var_5515: Tensor[(30), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64]) {
  %781 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %782 = cast(%var_5515, dtype="float64") /* ty=Tensor[(30), float64] */;
  %783 = cast(%var_5515, dtype="float64") /* ty=Tensor[(30), float64] */;
  %784 = reshape(%782, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %785 = reshape(%783, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %786 = @func_1247(%784, %785) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %787 = %781.0;
  %788 = %786.3;
  (%787, %788, %var_5515)
}

def @func_6346() -> Tensor[(5, 11, 8), float64] {
  %789 = @func_5316() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %789.0
}

def @func_5193() -> (Tensor[(5, 11, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) {
  %790 = @func_1937() /* ty=Tensor[(5, 11, 8), float64] */;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %792 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %793 = reshape(%792, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %794 = @func_2422(%793) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64]) */;
  %795 = atan(%791) /* ty=Tensor[(5, 11, 8), float32] */;
  %796 = %794.2;
  (%795, %796, meta[relay.Constant][29] /* ty=Tensor[(72), float32] */)
}

def @func_7923() -> (Tensor[(5, 11, 8), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64]) {
  %797 = @func_5378() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %798 = cast(meta[relay.Constant][30] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %799 = reshape(%798, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %800 = @func_2538(%799) /* ty=(Tensor[(3, 16, 7), float64],) */;
  %801 = %797.1;
  %802 = %800.0;
  (%801, %802, meta[relay.Constant][30] /* ty=Tensor[(336), float64] */)
}

def @func_5351() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %803 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %804 = @func_2396() /* ty=Tensor[(5, 11, 8), float64] */;
  %805 = %803.0;
  (%804, %805)
}

def @func_3152(%var_3146: Tensor[(2, 16, 14), float64], %var_3147: Tensor[(2, 16, 14), float64]) -> Tensor[(2, 16, 14), float64] {
  %806 = cast(%var_3147, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %807 = shape_of(%var_3146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%var_3146, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%808, %809) /* ty=Tensor[(2, 16, 14), float64] */
}

def @func_1713() -> (Tensor[(5, 11, 8), float64],) {
  %810 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  (%810,)
}

def @func_4346(%var_4322: Tensor[(13, 6, 12), float64]) -> (Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) {
  %811 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 6, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %812 = shape_of(%var_4322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%var_4322, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %815 = @func_3724() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %816 = mod(%813, %814) /* ty=Tensor[(13, 6, 12), float64] */;
  %817 = %815.0;
  (%816, %817)
}

def @func_5959() -> Tensor[(5, 11, 8), float64] {
  %818 = @func_4041() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %818.2
}

def @func_7042(%var_7027: Tensor[(10, 7, 16), uint16], %var_7032: Tensor[(140), float64]) -> (Tensor[(10, 7, 16), uint16], Tensor[(10, 2, 7), float64], Tensor[(140), float64]) {
  %819 = cast(%var_7027, dtype="uint16") /* ty=Tensor[(10, 7, 16), uint16] */;
  %820 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(10, 7, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 7, 16), uint16] */, dtype="uint16") /* ty=Tensor[(10, 7, 16), uint16] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %823 = cast(%var_7032, dtype="float64") /* ty=Tensor[(140), float64] */;
  %824 = reshape(%823, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), float64] */;
  %825 = @func_5100(%824) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(13, 8, 8), float64], Tensor[(10, 2, 7), float64]) */;
  %826 = bitwise_xor(%821, %822) /* ty=Tensor[(10, 7, 16), uint16] */;
  %827 = %825.0;
  (%826, %827, %var_7032)
}

def @func_1753() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %828 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
  %829 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
  (%828, %829)
}

def @func_2187() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %830 = @func_1822() /* ty=(Tensor[(5, 11, 8), float32],) */;
  %831 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %832 = %830.0;
  %833 = %831.0;
  (%832, %833)
}

def @func_5602() -> (Tensor[(5, 11, 8), float64],) {
  %834 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %835 = %834.0;
  (%835,)
}

def @func_7405() -> Tensor[(5, 11, 8), float32] {
  %836 = @func_1822() /* ty=(Tensor[(5, 11, 8), float32],) */;
  %836.0
}

def @func_6047() -> Tensor[(5, 11, 8), float64] {
  %837 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %837.0
}

def @func_2710() -> (Tensor[(5, 11, 8), float64],) {
  %838 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %839 = %838.0;
  (%839,)
}

def @func_7132() -> Tensor[(5, 11, 8), float64] {
  %840 = @func_4086() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %840.0
}

def @func_6924() -> (Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) {
  %841 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %843 = tan(%842) /* ty=Tensor[(13, 8, 8), float32] */;
  %844 = cast(%841, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = @func_1117() /* ty=(Tensor[(5, 11, 8), bool],) */;
  %849 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  %850 = less_equal(%846, %847) /* ty=Tensor[(13, 8, 8), bool] */;
  %851 = %848.0;
  (%849, %850, %851)
}

def @func_6060() -> (Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) {
  %852 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
  %853 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  (%852, %853)
}

def @func_2823() -> Tensor[(5, 11, 8), float32] {
  @func_1512() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_6297(%var_6287: Tensor[(5, 11, 8), bool]) -> (Tensor[(5, 11, 8), float64],) {
  %854 = @func_1117() /* ty=(Tensor[(5, 11, 8), bool],) */;
  %855 = %854.0;
  %856 = cast(%var_6287, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%855, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %860 = floor_mod(%858, %859) /* ty=Tensor[(5, 11, 8), float64] */;
  (%860,)
}

def @func_2319(%var_2256: Tensor[(5, 11, 8), float64], %var_2314: Tensor[(120), float32]) -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), uint64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) {
  %861 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %862 = %861.4;
  %863 = cast(%var_2256, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %867 = cast(%862, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %868 = reshape(%867, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %869 = @func_2217(%868) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %870 = cast(meta[relay.Constant][33] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %871 = cast(%var_2314, dtype="float32") /* ty=Tensor[(120), float32] */;
  %872 = reshape(%870, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
  %873 = reshape(%871, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %874 = @func_1377(%872, %873) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
  %875 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  %876 = logical_and(%865, %866) /* ty=Tensor[(5, 11, 8), bool] */;
  %877 = %869.0;
  %878 = %874.0;
  (%875, %876, %877, %878, meta[relay.Constant][33] /* ty=Tensor[(30), float64] */, %var_2314)
}

def @func_5750() -> (Tensor[(5, 11, 8), float32],) {
  %879 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %880 = %879.1;
  (%880,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_854() -> Tensor[(5, 11, 8), float64] {
  %0 = fn () -> Tensor[(5, 11, 8), float64] {
    @func_655() /* ty=Tensor[(5, 11, 8), float64] */
  };
  %0() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_7730(%var_7729: Tensor[(160), float64]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), uint16], Tensor[(5, 8, 4), float64], Tensor[(160), float64]) {
  %19 = fn (%var_7725: Tensor[(160), float64]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), uint16], Tensor[(5, 8, 4), float64], Tensor[(160), float64]) {
    %1 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %2 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %3 = @func_6017() /* ty=(Tensor[(7, 15, 15), float32], Tensor[(13, 8, 8), float64]) */;
    %4 = %3.1;
    %5 = cast(%4, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
    %6 = atanh(%5) /* ty=Tensor[(13, 8, 8), float32] */;
    %7 = cast(%6, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
    %8 = %1.1;
    %9 = cast(%8, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %10 = reshape(%9, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %11 = @func_385(%10) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint16]) */;
    %12 = cast(%var_7725, dtype="float64") /* ty=Tensor[(160), float64] */;
    %13 = reshape(%12, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
    %14 = @func_6120(%13) /* ty=(Tensor[(5, 8, 4), float64],) */;
    %15 = %2.0;
    %16 = log(%7) /* ty=Tensor[(13, 8, 8), float64] */;
    %17 = %11.1;
    %18 = %14.0;
    (%8, %15, %16, %17, %18, %var_7725)
  };
  %19(%var_7729) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), uint16], Tensor[(5, 8, 4), float64], Tensor[(160), float64]) */
}

def @func_2638() -> (Tensor[(5, 11, 8), float64],) {
  %20 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  (%20,)
}

def @func_925() -> (Tensor[(5, 11, 8), float64],) {
  @func_923() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_1545() -> Tensor[(5, 11, 8), float64] {
  %22 = fn () -> Tensor[(5, 11, 8), float64] {
    %21 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %21.0
  };
  %22() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_6060() -> (Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) {
  %23 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
  %24 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  (%23, %24)
}

def @func_3880() -> Tensor[(5, 11, 8), float32] {
  %27 = fn () -> Tensor[(5, 11, 8), float32] {
    %25 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
    %26 = cast(%25, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
    atanh(%26) /* ty=Tensor[(5, 11, 8), float32] */
  };
  %27() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_14() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_657() -> Tensor[(5, 11, 8), float64] {
  @func_655() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_655() -> Tensor[(5, 11, 8), float64] {
  %28 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %28.0
}

def @func_2640() -> (Tensor[(5, 11, 8), float64],) {
  @func_2638() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_6049() -> Tensor[(5, 11, 8), float64] {
  @func_6047() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_5522(%var_5520: Tensor[(30), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64]) {
  @func_5519(%var_5520) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64]) */
}

def @func_5743() -> (Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) {
  @func_5741() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) */
}

def @func_7501(%var_7500: Tensor[(13, 5, 13), float32]) -> (Tensor[(13, 5, 13), float32],) {
  %31 = fn (%var_7495: Tensor[(13, 5, 13), float32]) -> (Tensor[(13, 5, 13), float32],) {
    %29 = cast(%var_7495, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
    %30 = asin(%29) /* ty=Tensor[(13, 5, 13), float32] */;
    (%30,)
  };
  %31(%var_7500) /* ty=(Tensor[(13, 5, 13), float32],) */
}

def @func_7377() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %34 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
    %32 = @func_6499() /* ty=Tensor[(5, 11, 8), float64] */;
    %33 = @func_2823() /* ty=Tensor[(5, 11, 8), float32] */;
    (%32, %33)
  };
  %34() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */
}

def @func_878() -> Tensor[(5, 11, 8), float64] {
  @func_876() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_1822() -> (Tensor[(5, 11, 8), float32],) {
  %35 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %37 = reshape(%36, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %38 = @func_89(%37) /* ty=(Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %39 = %38.1;
  %40 = cast(%39, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %41 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%35, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %44 = equal(%42, %43) /* ty=Tensor[(5, 11, 8), bool] */;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %46 = tan(%45) /* ty=Tensor[(5, 11, 8), float32] */;
  (%46,)
}

def @func_3155(%var_3153: Tensor[(2, 16, 14), float64], %var_3154: Tensor[(2, 16, 14), float64]) -> Tensor[(2, 16, 14), float64] {
  %51 = fn (%var_3146: Tensor[(2, 16, 14), float64], %var_3147: Tensor[(2, 16, 14), float64]) -> Tensor[(2, 16, 14), float64] {
    %47 = cast(%var_3147, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
    %48 = shape_of(%var_3146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %49 = cast(%var_3146, dtype="float64") /* ty=Tensor[(2, 16, 14), float64] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%49, %50) /* ty=Tensor[(2, 16, 14), float64] */
  };
  %51(%var_3153, %var_3154) /* ty=Tensor[(2, 16, 14), float64] */
}

def @func_5519(%var_5515: Tensor[(30), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64]) {
  %52 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %53 = cast(%var_5515, dtype="float64") /* ty=Tensor[(30), float64] */;
  %54 = cast(%var_5515, dtype="float64") /* ty=Tensor[(30), float64] */;
  %55 = reshape(%53, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %56 = reshape(%54, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %57 = @func_1247(%55, %56) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %58 = %52.0;
  %59 = %57.3;
  (%58, %59, %var_5515)
}

def @func_4873() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %64 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %60 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %61 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %62 = %60.1;
    %63 = %61.1;
    (%62, %63)
  };
  %64() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_2085(%var_2081: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
  %65 = cast(%var_2081, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
  cosh(%65) /* ty=Tensor[(8, 1, 9), float32] */
}

def @func_2783(%var_2751: Tensor[(13, 8, 8), float64]) -> (Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) {
  %66 = @func_2043() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %67 = %66.0;
  %68 = cast(%var_2751, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %72 = bitwise_and(%70, %71) /* ty=Tensor[(13, 8, 8), int16] */;
  %73 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  (%72, %73)
}

def @func_8013() -> Tensor[(448), float64] {
  %74 = @func_4261() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(2, 16, 14), float64], Tensor[(448), float64]) */;
  %75 = %74.2;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(448), float64] */;
  log2(%76) /* ty=Tensor[(448), float64] */
}

def @func_340() -> Tensor[(5, 11, 8), float64] {
  %77 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %77.0
}

def @func_817() -> Tensor[(5, 11, 8), float64] {
  @func_815() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_6315() -> Tensor[(5, 11, 8), float64] {
  @func_815() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_89(%var_24: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %78 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %79 = %78.1;
  %80 = cast(%var_24, dtype="int8") /* ty=Tensor[(5, 11, 8), int8] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="int8") /* ty=Tensor[(5, 11, 8), int8] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %84 = cast(%79, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %85 = exp(%84) /* ty=Tensor[(5, 11, 8), float64] */;
  %86 = cast(%var_24, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %91 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %92 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %93 = maximum(%82, %83) /* ty=Tensor[(5, 11, 8), int8] */;
  %94 = greater(%88, %89) /* ty=Tensor[(5, 11, 8), bool] */;
  %95 = %90.0;
  %96 = %91.0;
  %97 = %92.1;
  (%93, %94, %95, %96, %97)
}

def @func_2075(%var_2073: Tensor[(3, 7, 5), uint64]) -> Tensor[(3, 7, 5), uint64] {
  @func_2072(%var_2073) /* ty=Tensor[(3, 7, 5), uint64] */
}

def @func_1452() -> (Tensor[(13, 8, 8), float64],) {
  %108 = fn () -> (Tensor[(13, 8, 8), float64],) {
    %98 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
    %99 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %102 = subtract(%100, %101) /* ty=Tensor[(13, 8, 8), uint16] */;
    %103 = cast(%102, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
    %104 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 8, 8), uint16] */, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %107 = floor_divide(%105, %106) /* ty=Tensor[(13, 8, 8), float64] */;
    (%107,)
  };
  %108() /* ty=(Tensor[(13, 8, 8), float64],) */
}

def @func_2398() -> Tensor[(5, 11, 8), float64] {
  @func_2396() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_2527() -> Tensor[(13, 8, 8), float64] {
  @func_2525() /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_7004() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) {
  @func_7002() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) */
}

def @func_1377(%var_1283: Tensor[(5, 6), float64], %var_1371: Tensor[(6, 4, 5), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) {
  %109 = @func_923() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %110 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %112 = reshape(%111, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %113 = @func_251(%112) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %114 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %115 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %116 = %115.0;
  %117 = cast(%116, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %118 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%114, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %121 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %122 = cast(%var_1283, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %123 = cast(%var_1283, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %124 = reshape(%122, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %125 = reshape(%123, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %126 = @func_1247(%124, %125) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %127 = %126.1;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %129 = sigmoid(%128) /* ty=Tensor[(6, 1, 5), float64] */;
  %130 = cast(%var_1283, dtype="int16") /* ty=Tensor[(5, 6), int16] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="int16") /* ty=Tensor[(6, 1, 5), int16] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %134 = right_shift(%132, %133) /* ty=Tensor[(6, ?, 5), int16] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(6, ?, 5), float32] */;
  %136 = erf(%135) /* ty=Tensor[(6, ?, 5), float32] */;
  %137 = cast(%136, dtype="int16") /* ty=Tensor[(6, ?, 5), int16] */;
  %138 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 13, 5), float32] */, dtype="int16") /* ty=Tensor[(6, 13, 5), int16] */;
  %139 = cast(%129, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
  %140 = atan(%139) /* ty=Tensor[(6, 1, 5), float32] */;
  %141 = cast(%140, dtype="uint16") /* ty=Tensor[(6, 1, 5), uint16] */;
  %142 = cast(%var_1371, dtype="uint16") /* ty=Tensor[(6, 4, 5), uint16] */;
  %143 = %109.0;
  %144 = %113.1;
  %145 = right_shift(%119, %120) /* ty=Tensor[(5, 11, 8), int16] */;
  %146 = %121.1;
  %147 = multiply(%137, %138) /* ty=Tensor[(6, 13, 5), int16] */;
  %148 = right_shift(%141, %142) /* ty=Tensor[(6, 4, 5), uint16] */;
  (%110, %143, %144, %145, %146, %147, %148)
}

def @func_611() -> Tensor[(5, 11, 8), float64] {
  %150 = fn () -> Tensor[(5, 11, 8), float64] {
    %149 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %149.0
  };
  %150() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_387(%var_386: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint16]) {
  %164 = fn (%var_349: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint16]) {
    %151 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %152 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
    %153 = cast(%var_349, dtype="int32") /* ty=Tensor[(5, 11, 8), int32] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%152, dtype="int32") /* ty=Tensor[(5, 11, 8), int32] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %157 = logical_xor(%155, %156) /* ty=Tensor[(5, 11, 8), int32] */;
    %158 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 11, 8), int32] */, dtype="uint16") /* ty=Tensor[(5, 11, 8), uint16] */;
    %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
    %160 = cast(%157, dtype="uint16") /* ty=Tensor[(5, 11, 8), uint16] */;
    %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %162 = %151.0;
    %163 = bitwise_and(%160, %161) /* ty=Tensor[(5, 11, 8), uint16] */;
    (%162, %163)
  };
  %164(%var_386) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint16]) */
}

def @func_2072(%var_2066: Tensor[(3, 7, 5), uint64]) -> Tensor[(3, 7, 5), uint64] {
  %165 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 7, 5), uint64] */, dtype="uint64") /* ty=Tensor[(3, 7, 5), uint64] */;
  %166 = shape_of(%var_2066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_2066, dtype="uint64") /* ty=Tensor[(3, 7, 5), uint64] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%167, %168) /* ty=Tensor[(3, 7, 5), uint64] */
}

def @func_2319(%var_2256: Tensor[(5, 11, 8), float64], %var_2314: Tensor[(120), float32]) -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), uint64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) {
  %169 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %170 = %169.4;
  %171 = cast(%var_2256, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = cast(%170, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %176 = reshape(%175, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %177 = @func_2217(%176) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %178 = cast(meta[relay.Constant][5] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %179 = cast(%var_2314, dtype="float32") /* ty=Tensor[(120), float32] */;
  %180 = reshape(%178, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
  %181 = reshape(%179, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %182 = @func_1377(%180, %181) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
  %183 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  %184 = logical_and(%173, %174) /* ty=Tensor[(5, 11, 8), bool] */;
  %185 = %177.0;
  %186 = %182.0;
  (%183, %184, %185, %186, meta[relay.Constant][5] /* ty=Tensor[(30), float64] */, %var_2314)
}

def @func_253(%var_252: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %198 = fn (%var_240: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
    %187 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %188 = %187.0;
    %189 = cast(%var_240, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
    %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%188, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %193 = add(%191, %192) /* ty=Tensor[(5, 11, 8), float32] */;
    %194 = cast(%193, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %195 = reshape(%194, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %196 = @func_89(%195) /* ty=(Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %197 = %196.2;
    (%193, %197)
  };
  %198(%var_252) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_3308(%var_3286: Tensor[(120), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(30, 1), float64], Tensor[(120), float32]) {
  %199 = @func_1205() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %200 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %201 = %199.0;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %203 = reshape(%202, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %204 = @func_251(%203) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %205 = @func_1822() /* ty=(Tensor[(5, 11, 8), float32],) */;
  %206 = cast(meta[relay.Constant][6] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %207 = cast(%var_3286, dtype="float32") /* ty=Tensor[(120), float32] */;
  %208 = reshape(%206, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
  %209 = reshape(%207, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %210 = @func_1377(%208, %209) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
  %211 = %200.1;
  %212 = %204.1;
  %213 = %205.0;
  %214 = %210.2;
  (%201, %211, %212, %213, %214, meta[relay.Constant][6] /* ty=Tensor[(30, 1), float64] */, %var_3286)
}

def @func_6062() -> (Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) {
  @func_6060() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) */
}

def @func_5561() -> (Tensor[(5, 11, 8), float64],) {
  %215 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %216 = %215.1;
  (%216,)
}

def @func_4822() -> Tensor[(13, 8, 8), float64] {
  %217 = @func_4231() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %217.0
}

def @func_3365(%var_3364: Tensor[(13, 10, 6), float32]) -> (Tensor[(13, 10, 6), float32], Tensor[(5, 11, 8), float64]) {
  %221 = fn (%var_3347: Tensor[(13, 10, 6), float32]) -> (Tensor[(13, 10, 6), float32], Tensor[(5, 11, 8), float64]) {
    %218 = cast(%var_3347, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
    %219 = asin(%218) /* ty=Tensor[(13, 10, 6), float32] */;
    %220 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
    (%219, %220)
  };
  %221(%var_3364) /* ty=(Tensor[(13, 10, 6), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_6248() -> (Tensor[(5, 11, 8), float64],) {
  @func_6246() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_5878() -> (Tensor[(5, 11, 8), float64],) {
  @func_5876() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_2088(%var_2086: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
  @func_2085(%var_2086) /* ty=Tensor[(8, 1, 9), float32] */
}

def @func_4232() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) {
  %226 = fn () -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) {
    %222 = @func_3047() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %223 = @func_2187() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
    %224 = %222.0;
    %225 = %223.1;
    (%224, %225)
  };
  %226() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_7944() -> Tensor[(5, 11, 8), float32] {
  @func_7942() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_1914() -> (Tensor[(5, 11, 8), float64],) {
  %229 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %227 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %228 = %227.0;
    (%228,)
  };
  %229() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_5662() -> Tensor[(5, 11, 8), float64] {
  @func_815() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_2369(%var_2335: Tensor[(294), uint32], %var_2359: Tensor[(294), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) {
  %230 = cast(meta[relay.Constant][7] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %231 = cast(%var_2335, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %232 = reshape(%230, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint32] */;
  %233 = reshape(%231, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), uint32] */;
  %234 = @func_419(%232, %233) /* ty=Tensor[(7, 7, 6), bool] */;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %236 = shape_of(%var_2335, dtype="int32") /* ty=Tensor[(1), int32] */;
  %237 = cast(%var_2335, dtype="float32") /* ty=Tensor[(294), float32] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?), float32] */;
  %239 = floor_mod(%237, %238) /* ty=Tensor[(294), float32] */;
  %240 = cast(%var_2359, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(1), int32] */;
  %242 = cast(%239, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %244 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  %245 = logical_xor(%242, %243) /* ty=Tensor[(294), uint32] */;
  (%244, meta[relay.Constant][7] /* ty=Tensor[(42), uint32] */, %245)
}

def @func_3311(%var_3309: Tensor[(120), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(30, 1), float64], Tensor[(120), float32]) {
  @func_3308(%var_3309) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(30, 1), float64], Tensor[(120), float32]) */
}

def @func_4469() -> Tensor[(13, 8, 8), float32] {
  @func_4467() /* ty=Tensor[(13, 8, 8), float32] */
}

def @func_6525() -> (Tensor[(5, 11, 8), float64],) {
  @func_6523() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_2480(%var_2479: Tensor[(2, 2, 3), float32]) -> (Tensor[(2, 2, 3), float32], Tensor[(5, 11, 8), float64]) {
  %249 = fn (%var_2467: Tensor[(2, 2, 3), float32]) -> (Tensor[(2, 2, 3), float32], Tensor[(5, 11, 8), float64]) {
    %246 = cast(%var_2467, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
    %247 = exp(%246) /* ty=Tensor[(2, 2, 3), float32] */;
    %248 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
    (%247, %248)
  };
  %249(%var_2479) /* ty=(Tensor[(2, 2, 3), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_3119(%var_3118: Tensor[(30), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) {
  %262 = fn (%var_3114: Tensor[(30), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) {
    %250 = @func_2638() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %251 = %250.0;
    %252 = cast(%251, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %253 = reshape(%252, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %254 = @func_1633(%253) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) */;
    %255 = cast(%var_3114, dtype="float64") /* ty=Tensor[(30), float64] */;
    %256 = cast(meta[relay.Constant][8] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %257 = reshape(%255, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
    %258 = reshape(%256, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
    %259 = @func_1377(%257, %258) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
    %260 = %254.7;
    %261 = %259.0;
    (%251, %260, %261, %var_3114, meta[relay.Constant][8] /* ty=Tensor[(120), float32] */)
  };
  %262(%var_3118) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) */
}

def @func_5103(%var_5101: Tensor[(10, 2, 7), float64]) -> (Tensor[(10, 2, 7), float64], Tensor[(13, 8, 8), float64], Tensor[(10, 2, 7), float64]) {
  @func_5100(%var_5101) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(13, 8, 8), float64], Tensor[(10, 2, 7), float64]) */
}

def @func_2323(%var_2321: Tensor[(5, 11, 8), float64], %var_2322: Tensor[(120), float32]) -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), uint64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) {
  @func_2319(%var_2321, %var_2322) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), uint64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(120), float32]) */
}

def @func_3724() -> (Tensor[(5, 11, 8), float64],) {
  %263 = @func_1205() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %264 = %263.1;
  (%264,)
}

def @func_6297(%var_6287: Tensor[(5, 11, 8), bool]) -> (Tensor[(5, 11, 8), float64],) {
  %265 = @func_1117() /* ty=(Tensor[(5, 11, 8), bool],) */;
  %266 = %265.0;
  %267 = cast(%var_6287, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %271 = floor_mod(%269, %270) /* ty=Tensor[(5, 11, 8), float64] */;
  (%271,)
}

def @func_5318() -> (Tensor[(5, 11, 8), float64],) {
  @func_5316() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_4121(%var_4110: Tensor[(30), float64], %var_4111: Tensor[(120), float32]) -> (Tensor[(11, 15), float64], Tensor[(6, 4, 5), uint16], Tensor[(30), float64], Tensor[(120), float32]) {
  %272 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 15), float64] */;
  %273 = cast(%var_4110, dtype="float64") /* ty=Tensor[(30), float64] */;
  %274 = cast(%var_4111, dtype="float32") /* ty=Tensor[(120), float32] */;
  %275 = reshape(%273, newshape=[5, 6]) /* ty=Tensor[(5, 6), float64] */;
  %276 = reshape(%274, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %277 = @func_1377(%275, %276) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */;
  %278 = sigmoid(%272) /* ty=Tensor[(11, 15), float64] */;
  %279 = %277.6;
  (%278, %279, %var_4110, %var_4111)
}

def @func_2823() -> Tensor[(5, 11, 8), float32] {
  @func_1512() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_5643() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64]) {
  %280 = @func_3835() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %283 = reshape(%282, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %284 = @func_2217(%283) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %285 = %284.0;
  (%281, %285)
}

def @func_2063() -> Tensor[(13, 8, 8), float64] {
  @func_2061() /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_5604() -> (Tensor[(5, 11, 8), float64],) {
  @func_5602() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_4346(%var_4322: Tensor[(13, 6, 12), float64]) -> (Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) {
  %286 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 6, 12), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %287 = shape_of(%var_4322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_4322, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %290 = @func_3724() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %291 = mod(%288, %289) /* ty=Tensor[(13, 6, 12), float64] */;
  %292 = %290.0;
  (%291, %292)
}

def @func_5832(%var_5829: Tensor[(7, 42), uint32], %var_5830: Tensor[(5, 11, 8), float64], %var_5831: Tensor[(7, 42), uint32]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(7, 42), int32]) {
  %315 = fn (%var_5783: Tensor[(7, 42), uint32], %var_5785: Tensor[(5, 11, 8), float64], %var_5821: Tensor[(7, 42), uint32]) -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(7, 42), int32]) {
    %293 = @func_5750() /* ty=(Tensor[(5, 11, 8), float32],) */;
    %294 = cast(%var_5783, dtype="uint32") /* ty=Tensor[(7, 42), uint32] */;
    %295 = cast(%var_5783, dtype="float32") /* ty=Tensor[(7, 42), float32] */;
    %296 = reshape(%294, newshape=[294]) /* ty=Tensor[(294), uint32] */;
    %297 = reshape(%295, newshape=[294]) /* ty=Tensor[(294), float32] */;
    %298 = @func_2369(%296, %297) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) */;
    %299 = @func_4317() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %300 = %299.1;
    %301 = cast(%var_5785, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%300, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %305 = cast(%var_5821, dtype="int32") /* ty=Tensor[(7, 42), int32] */;
    %306 = shape_of(%var_5783, dtype="int32") /* ty=Tensor[(2), int32] */;
    %307 = cast(%var_5783, dtype="int32") /* ty=Tensor[(7, 42), int32] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %309 = %293.0;
    %310 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
    %311 = %298.1;
    %312 = logical_or(%303, %304) /* ty=Tensor[(5, 11, 8), bool] */;
    %313 = @func_2396() /* ty=Tensor[(5, 11, 8), float64] */;
    %314 = multiply(%307, %308) /* ty=Tensor[(7, 42), int32] */;
    (%309, %310, %311, %312, %313, %314)
  };
  %315(%var_5829, %var_5830, %var_5831) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(7, 42), int32]) */
}

def @func_5211() -> (Tensor[(5, 11, 8), float64],) {
  %318 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %316 = @func_4317() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %317 = %316.1;
    (%317,)
  };
  %318() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_6317() -> Tensor[(5, 11, 8), float64] {
  @func_6315() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_2425(%var_2423: Tensor[(72), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64]) {
  @func_2422(%var_2423) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_7942() -> Tensor[(5, 11, 8), float32] {
  @func_3879() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_3048() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %329 = fn () -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %319 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
    %320 = @func_1713() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %321 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %322 = %321.0;
    %323 = cast(%322, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %324 = reshape(%323, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %325 = @func_1633(%324) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) */;
    %326 = %319.0;
    %327 = %320.0;
    %328 = %325.6;
    (%326, %327, %322, %328)
  };
  %329() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_7002() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) {
  %330 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %331 = @func_923() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %332 = @func_4231() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %333 = %330.1;
  %334 = %331.0;
  %335 = %332.0;
  (%333, %334, %335)
}

def @func_2187() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %336 = @func_1822() /* ty=(Tensor[(5, 11, 8), float32],) */;
  %337 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %338 = %336.0;
  %339 = %337.0;
  (%338, %339)
}

def @func_4779(%var_4777: Tensor[(1, 440), float64], %var_4778: Tensor[(832), float64]) -> (Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), uint64], Tensor[(1, 440), float64], Tensor[(13, 8, 8), int16], Tensor[(832), float32], Tensor[(5, 11, 8), float64]) {
  @func_4775(%var_4777, %var_4778) /* ty=(Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), uint64], Tensor[(1, 440), float64], Tensor[(13, 8, 8), int16], Tensor[(832), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_5959() -> Tensor[(5, 11, 8), float64] {
  %340 = @func_4041() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %340.2
}

def @func_6018() -> (Tensor[(7, 15, 15), float32], Tensor[(13, 8, 8), float64]) {
  %344 = fn () -> (Tensor[(7, 15, 15), float32], Tensor[(13, 8, 8), float64]) {
    %341 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
    %342 = acosh(%341) /* ty=Tensor[(7, 15, 15), float32] */;
    %343 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
    (%342, %343)
  };
  %344() /* ty=(Tensor[(7, 15, 15), float32], Tensor[(13, 8, 8), float64]) */
}

def @func_1988(%var_1986: float64, %var_1987: Tensor[(15, 11, 14), float64]) -> (Tensor[(15, 11, 14), float64],) {
  %348 = fn (%var_1977: float64, %var_1978: Tensor[(15, 11, 14), float64]) -> (Tensor[(15, 11, 14), float64],) {
    %345 = cast(%var_1977, dtype="float64") /* ty=float64 */;
    %346 = cast(%var_1978, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
    %347 = floor_mod(%345, %346) /* ty=Tensor[(15, 11, 14), float64] */;
    (%347,)
  };
  %348(%var_1986, %var_1987) /* ty=(Tensor[(15, 11, 14), float64],) */
}

def @func_2712() -> (Tensor[(5, 11, 8), float64],) {
  @func_2710() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_5750() -> (Tensor[(5, 11, 8), float32],) {
  %349 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %350 = %349.1;
  (%350,)
}

def @func_5752() -> (Tensor[(5, 11, 8), float32],) {
  @func_5750() /* ty=(Tensor[(5, 11, 8), float32],) */
}

def @func_7042(%var_7027: Tensor[(10, 7, 16), uint16], %var_7032: Tensor[(140), float64]) -> (Tensor[(10, 7, 16), uint16], Tensor[(10, 2, 7), float64], Tensor[(140), float64]) {
  %351 = cast(%var_7027, dtype="uint16") /* ty=Tensor[(10, 7, 16), uint16] */;
  %352 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(10, 7, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 7, 16), uint16] */, dtype="uint16") /* ty=Tensor[(10, 7, 16), uint16] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %355 = cast(%var_7032, dtype="float64") /* ty=Tensor[(140), float64] */;
  %356 = reshape(%355, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), float64] */;
  %357 = @func_5100(%356) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(13, 8, 8), float64], Tensor[(10, 2, 7), float64]) */;
  %358 = bitwise_xor(%353, %354) /* ty=Tensor[(10, 7, 16), uint16] */;
  %359 = %357.0;
  (%358, %359, %var_7032)
}

def @func_5380() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_5378() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_4549() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), float64], Tensor[(11, 35), uint8]) {
  %367 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), float64], Tensor[(11, 35), uint8]) {
    %360 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %361 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 35), uint8] */, dtype="uint8") /* ty=Tensor[(11, 35), uint8] */;
    %362 = reshape(%361, newshape=[11, 7, 5]) /* ty=Tensor[(11, 7, 5), uint8] */;
    %363 = @func_2670(%362) /* ty=(Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) */;
    %364 = %360.0;
    %365 = @func_876() /* ty=Tensor[(5, 11, 8), float64] */;
    %366 = %363.1;
    (%364, %365, %366, meta[relay.Constant][13] /* ty=Tensor[(11, 35), uint8] */)
  };
  %367() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), float64], Tensor[(11, 35), uint8]) */
}

def @func_7046(%var_7044: Tensor[(10, 7, 16), uint16], %var_7045: Tensor[(140), float64]) -> (Tensor[(10, 7, 16), uint16], Tensor[(10, 2, 7), float64], Tensor[(140), float64]) {
  @func_7042(%var_7044, %var_7045) /* ty=(Tensor[(10, 7, 16), uint16], Tensor[(10, 2, 7), float64], Tensor[(140), float64]) */
}

def @func_7107() -> Tensor[(5, 11, 8), float64] {
  %368 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %368.1
}

def @func_7628() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %374 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %369 = @func_4086() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %370 = @func_5561() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %371 = %369.0;
    %372 = %370.0;
    %373 = @func_6721() /* ty=Tensor[(5, 11, 8), float64] */;
    (%371, %372, %373)
  };
  %374() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_1250(%var_1248: Tensor[(6, 1, 5), float64], %var_1249: Tensor[(6, 1, 5), float64]) -> (Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %390 = fn (%var_1207: Tensor[(6, 1, 5), float64], %var_1208: Tensor[(6, 1, 5), float64]) -> (Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
    %375 = cast(%var_1208, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
    %376 = shape_of(%var_1207, dtype="int32") /* ty=Tensor[(3), int32] */;
    %377 = cast(%var_1207, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %379 = cast(%var_1207, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
    %380 = cast(%var_1208, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
    %381 = shape_of(%var_1207, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%var_1207, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %384 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %385 = minimum(%377, %378) /* ty=Tensor[(6, ?, 5), float64] */;
    %386 = acos(%379) /* ty=Tensor[(6, 1, 5), float64] */;
    %387 = add(%382, %383) /* ty=Tensor[(6, ?, 5), float64] */;
    %388 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
    %389 = %384.2;
    (%385, %386, %387, %388, %389)
  };
  %390(%var_1248, %var_1249) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */
}

def @func_2396() -> Tensor[(5, 11, 8), float64] {
  %391 = @func_1688() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %391.1
}

def @func_6501() -> Tensor[(5, 11, 8), float64] {
  @func_6499() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_8068() -> (Tensor[(5, 11, 8), float64],) {
  %394 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %392 = @func_6060() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) */;
    %393 = %392.0;
    (%393,)
  };
  %394() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_944() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_5645() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64]) {
  @func_5643() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64]) */
}

def @func_4834(%var_4833: Tensor[(16, 3, 12), float64]) -> Tensor[(16, 3, 12), float64] {
  %396 = fn (%var_4828: Tensor[(16, 3, 12), float64]) -> Tensor[(16, 3, 12), float64] {
    %395 = cast(%var_4828, dtype="float64") /* ty=Tensor[(16, 3, 12), float64] */;
    asinh(%395) /* ty=Tensor[(16, 3, 12), float64] */
  };
  %396(%var_4833) /* ty=Tensor[(16, 3, 12), float64] */
}

def @func_3933() -> (Tensor[(5, 11, 8), float64],) {
  %397 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %398 = %397.0;
  (%398,)
}

def @func_422(%var_420: Tensor[(1, 7, 6), uint32], %var_421: Tensor[(7, 7, 6), uint32]) -> Tensor[(7, 7, 6), bool] {
  %401 = fn (%var_413: Tensor[(1, 7, 6), uint32], %var_414: Tensor[(7, 7, 6), uint32]) -> Tensor[(7, 7, 6), bool] {
    %399 = cast(%var_413, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
    %400 = cast(%var_414, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
    greater(%399, %400) /* ty=Tensor[(7, 7, 6), bool] */
  };
  %401(%var_420, %var_421) /* ty=Tensor[(7, 7, 6), bool] */
}

def @main(%var_8088: Tensor[(15, 10, 11), uint32], %var_8089: Tensor[(15, 10, 11), uint32], %var_8137: Tensor[(936), float64], %var_8159: Tensor[(110, 4), float64]) -> (Tensor[(110, 4), int64], Tensor[(5, 11, 8), float64], Tensor[(110, 4), float32], Tensor[(15, 10, 11), float64], Tensor[(5, 11, 8), float64], Tensor[(936), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(110, 4), float64], Tensor[(110, 4), uint16], Tensor[(15, 10, 11), float64]) {
  %402 = cast(meta[relay.Constant][14] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %403 = reshape(%402, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %404 = @func_1635(%403) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) */;
  %405 = %404.1;
  %406 = cast(%405, dtype="int64") /* ty=Tensor[(5, 11, 8), int64] */;
  %407 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(110, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %408 = cast(meta[relay.Constant][14] /* ty=Tensor[(110, 4), float64] */, dtype="int64") /* ty=Tensor[(110, 4), int64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %410 = @func_5353() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %411 = cast(meta[relay.Constant][14] /* ty=Tensor[(110, 4), float64] */, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %412 = rsqrt(%411) /* ty=Tensor[(110, 4), float32] */;
  %413 = @func_5496() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %414 = %413.0;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
  %416 = shape_of(%412, dtype="int32") /* ty=Tensor[(2), int32] */;
  %417 = cast(%412, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %419 = cast(%var_8089, dtype="uint32") /* ty=Tensor[(15, 10, 11), uint32] */;
  %420 = shape_of(%var_8088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_8088, dtype="uint32") /* ty=Tensor[(15, 10, 11), uint32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %423 = bitwise_or(%421, %422) /* ty=Tensor[(15, 10, 11), uint32] */;
  %424 = cast(%423, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  %425 = cast(%var_8137, dtype="float64") /* ty=Tensor[(936), float64] */;
  %426 = reshape(%425, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %427 = @func_4349(%426) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) */;
  %428 = @func_5380() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %429 = @func_321() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %430 = cast(meta[relay.Constant][14] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %431 = cast(%412, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %432 = acos(%431) /* ty=Tensor[(110, 4), float64] */;
  %433 = cast(%var_8159, dtype="uint16") /* ty=Tensor[(110, 4), uint16] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(%432, dtype="uint16") /* ty=Tensor[(110, 4), uint16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %437 = cast(%423, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  %438 = shape_of(%var_8088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_8088, dtype="float64") /* ty=Tensor[(15, 10, 11), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %441 = bitwise_or(%408, %409) /* ty=Tensor[(110, 4), int64] */;
  %442 = %410.0;
  %443 = divide(%417, %418) /* ty=Tensor[(110, 4), float32] */;
  %444 = log(%424) /* ty=Tensor[(15, 10, 11), float64] */;
  %445 = %427.1;
  %446 = %428.1;
  %447 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  %448 = %429.0;
  %449 = atanh(%430) /* ty=Tensor[(110, 4), float64] */;
  %450 = add(%435, %436) /* ty=Tensor[(110, 4), uint16] */;
  %451 = divide(%439, %440) /* ty=Tensor[(15, 10, 11), float64] */;
  (%441, %442, %443, %444, %445, %var_8137, %446, %447, %448, %449, %450, %451)
}

def @func_1688() -> (Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %452 = @func_1483() /* ty=Tensor[(15, 16, 10), float64] */;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
  %454 = sinh(%453) /* ty=Tensor[(15, 16, 10), float64] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %456 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %458 = reshape(%457, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %459 = @func_89(%458) /* ty=(Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %460 = atan(%455) /* ty=Tensor[(15, 16, 10), float32] */;
  %461 = %459.3;
  (%460, %456, %461)
}

def @func_2061() -> Tensor[(13, 8, 8), float64] {
  %462 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %462.0
}

def @func_1417() -> (Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) {
  %483 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) {
    %463 = @func_923() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %464 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %465 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %466 = reshape(%464, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %467 = reshape(%465, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %468 = @func_1247(%466, %467) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %469 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %470 = %468.1;
    %471 = cast(%470, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
    %472 = reshape(%469, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %473 = reshape(%471, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %474 = @func_1247(%472, %473) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %475 = %474.0;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(6, ?, 5), float64] */;
    %477 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %478 = reshape(%476, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %479 = reshape(%477, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %480 = @func_1247(%478, %479) /* ty=(Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64], Tensor[(6, ?, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %481 = %463.0;
    %482 = %480.1;
    (%481, %470, meta[relay.Constant][15] /* ty=Tensor[(30), float64] */, %475, %482)
  };
  %483() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */
}

def @func_7536() -> (Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64]) {
  %484 = @func_6924() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %485 = @func_6060() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), float64]) */;
  %486 = %484.2;
  %487 = %485.0;
  (%486, %487)
}

def @func_8056() -> Tensor[(5, 11, 8), float64] {
  %489 = fn () -> Tensor[(5, 11, 8), float64] {
    %488 = @func_4872() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %488.0
  };
  %489() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_6605() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %494 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %490 = @func_2499() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %491 = @func_6523() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %492 = %490.0;
    %493 = %491.0;
    (%492, %493)
  };
  %494() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_1754() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %497 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
    %495 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
    %496 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
    (%495, %496)
  };
  %497() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */
}

def @func_6806() -> (Tensor[(13, 8, 8), float64],) {
  @func_6804() /* ty=(Tensor[(13, 8, 8), float64],) */
}

def @func_7134() -> Tensor[(5, 11, 8), float64] {
  @func_7132() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_4814() -> Tensor[(5, 11, 8), float64] {
  %499 = fn () -> Tensor[(5, 11, 8), float64] {
    %498 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %498.1
  };
  %499() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_2710() -> (Tensor[(5, 11, 8), float64],) {
  %500 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %501 = %500.0;
  (%501,)
}

def @func_2422(%var_2408: Tensor[(72), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64]) {
  %502 = @func_1205() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %503 = cast(%var_2408, dtype="float32") /* ty=Tensor[(72), float32] */;
  %504 = reshape(%503, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %505 = @func_1483() /* ty=Tensor[(15, 16, 10), float64] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %507 = @func_1713() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %508 = %502.0;
  %509 = @func_2085(%504) /* ty=Tensor[(8, 1, 9), float32] */;
  %510 = log10(%506) /* ty=Tensor[(15, 16, 10), float32] */;
  %511 = %507.0;
  (%508, %509, %var_2408, %510, %511)
}

def @func_342() -> Tensor[(5, 11, 8), float64] {
  @func_340() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_2939(%var_2937: Tensor[(4, 12, 3), uint32]) -> (Tensor[(4, 12, 3), bool], Tensor[(4, 12, 3), float64], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool]) {
  @func_2936(%var_2937) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(4, 12, 3), float64], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool]) */
}

def @func_3836() -> (Tensor[(5, 11, 8), float64],) {
  %514 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %512 = @func_2499() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %513 = %512.2;
    (%513,)
  };
  %514() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_1690() -> (Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_1688() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_7538() -> (Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64]) {
  @func_7536() /* ty=(Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64]) */
}

def @func_6708(%var_6707: Tensor[(780), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(780), float32]) {
  %524 = fn (%var_6698: Tensor[(780), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(780), float32]) {
    %515 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %516 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
    %517 = cast(%var_6698, dtype="float32") /* ty=Tensor[(780), float32] */;
    %518 = reshape(%517, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), float32] */;
    %519 = @func_3363(%518) /* ty=(Tensor[(13, 10, 6), float32], Tensor[(5, 11, 8), float64]) */;
    %520 = %515.0;
    %521 = %516.1;
    %522 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
    %523 = %519.1;
    (%520, %521, %522, %523, %var_6698)
  };
  %524(%var_6707) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(780), float32]) */
}

def @func_3983() -> (Tensor[(5, 11, 8), float64], Tensor[(294), uint32], Tensor[(294), uint32]) {
  @func_3981() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(294), uint32], Tensor[(294), uint32]) */
}

def @func_4824() -> Tensor[(13, 8, 8), float64] {
  @func_4822() /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_876() -> Tensor[(5, 11, 8), float64] {
  %525 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %525.0
}

def @func_2673(%var_2671: Tensor[(11, 7, 5), uint8]) -> (Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) {
  @func_2670(%var_2671) /* ty=(Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_1081() -> Tensor[(5, 11, 8), float64] {
  %527 = fn () -> Tensor[(5, 11, 8), float64] {
    %526 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %526.1
  };
  %527() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_1937() -> Tensor[(5, 11, 8), float64] {
  @func_340() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_2936(%var_2915: Tensor[(4, 12, 3), uint32]) -> (Tensor[(4, 12, 3), bool], Tensor[(4, 12, 3), float64], Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), bool]) {
  %528 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 12, 3), uint32] */, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
  %529 = shape_of(%var_2915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%var_2915, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 12, 3), uint32] */, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
  %533 = shape_of(%var_2915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_2915, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %536 = @func_1117() /* ty=(Tensor[(5, 11, 8), bool],) */;
  %537 = greater_equal(%530, %531) /* ty=Tensor[(4, 12, 3), bool] */;
  %538 = floor_mod(%534, %535) /* ty=Tensor[(4, 12, 3), float64] */;
  %539 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %540 = %536.0;
  (%537, %538, %539, %540)
}

def @func_942() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %541 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %542 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  %543 = %541.0;
  (%542, %543)
}

def @func_4912() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %544 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %545 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
  %546 = %544.0;
  (%545, %546)
}

def @func_4087() -> (Tensor[(5, 11, 8), float64],) {
  %549 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %547 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %548 = %547.0;
    (%548,)
  };
  %549() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_5316() -> (Tensor[(5, 11, 8), float64],) {
  %550 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  (%550,)
}

def @func_8033() -> (Tensor[(5, 11, 8), float32],) {
  %552 = fn () -> (Tensor[(5, 11, 8), float32],) {
    %551 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
    (%551,)
  };
  %552() /* ty=(Tensor[(5, 11, 8), float32],) */
}

def @func_6499() -> Tensor[(5, 11, 8), float64] {
  %553 = @func_4041() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %553.0
}

def @func_5144() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_5142() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_1939() -> Tensor[(5, 11, 8), float64] {
  @func_1937() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_5353() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_5351() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_4318() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %558 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %554 = @func_3835() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %555 = @func_1713() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %556 = %554.0;
    %557 = %555.0;
    (%556, %557)
  };
  %558() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_2825() -> Tensor[(5, 11, 8), float32] {
  @func_2823() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_3670(%var_3668: Tensor[(13, 8, 8), float64]) -> (Tensor[(13, 8, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(13, 8, 8), float32], Tensor[(13, 8, 8), float32]) {
  @func_3667(%var_3668) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(13, 8, 8), float32], Tensor[(13, 8, 8), float32]) */
}

def @func_1381(%var_1379: Tensor[(5, 6), float64], %var_1380: Tensor[(6, 4, 5), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) {
  @func_1377(%var_1379, %var_1380) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), int16], Tensor[(5, 11, 8), float64], Tensor[(6, 13, 5), int16], Tensor[(6, 4, 5), uint16]) */
}

def @func_6246() -> (Tensor[(5, 11, 8), float64],) {
  %559 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %560 = %559.0;
  (%560,)
}

def @func_5496() -> (Tensor[(5, 11, 8), float64],) {
  %562 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %561 = @func_3587() /* ty=Tensor[(5, 11, 8), float64] */;
    (%561,)
  };
  %562() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_5876() -> (Tensor[(5, 11, 8), float64],) {
  %563 = @func_2710() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %564 = %563.0;
  (%564,)
}

def @func_319() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  %565 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %566 = %565.0;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %568 = reshape(%567, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %569 = @func_251(%568) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %570 = cast(%566, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %571 = reshape(%570, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %572 = @func_251(%571) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %573 = %569.1;
  %574 = %572.0;
  (%566, %573, %574)
}

def @func_2500() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %578 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %575 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
    %576 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
    %577 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
    (%575, %576, %577)
  };
  %578() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_6723() -> Tensor[(5, 11, 8), float64] {
  @func_6721() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_6652() -> (Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) {
  %582 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) {
    %579 = @func_5741() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) */;
    %580 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
    %581 = %579.2;
    (%580, %581)
  };
  %582() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) */
}

def @func_207() -> (Tensor[(5, 11, 8), float64],) {
  %585 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %583 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %584 = %583.1;
    (%584,)
  };
  %585() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_4125(%var_4123: Tensor[(30), float64], %var_4124: Tensor[(120), float32]) -> (Tensor[(11, 15), float64], Tensor[(6, 4, 5), uint16], Tensor[(30), float64], Tensor[(120), float32]) {
  @func_4121(%var_4123, %var_4124) /* ty=(Tensor[(11, 15), float64], Tensor[(6, 4, 5), uint16], Tensor[(30), float64], Tensor[(120), float32]) */
}

def @func_6079() -> (Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(13, 6, 12), float64], Tensor[(468, 2), float64]) {
  @func_6077() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(13, 6, 12), float64], Tensor[(468, 2), float64]) */
}

def @func_3588() -> Tensor[(5, 11, 8), float64] {
  %587 = fn () -> Tensor[(5, 11, 8), float64] {
    %586 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %586.0
  };
  %587() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_4041() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %588 = @func_1753() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %589 = @func_3047() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %590 = @func_3587() /* ty=Tensor[(5, 11, 8), float64] */;
  %591 = @func_1937() /* ty=Tensor[(5, 11, 8), float64] */;
  %592 = %588.0;
  %593 = %589.2;
  (%590, %591, %592, %593)
}

def @func_6300(%var_6298: Tensor[(5, 11, 8), bool]) -> (Tensor[(5, 11, 8), float64],) {
  @func_6297(%var_6298) /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_7150() -> (Tensor[(5, 11, 8), float64],) {
  %595 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %594 = @func_5959() /* ty=Tensor[(5, 11, 8), float64] */;
    (%594,)
  };
  %595() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_1635(%var_1634: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) {
  %629 = fn (%var_1570: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) {
    %596 = @func_942() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %597 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
    %598 = cast(%var_1570, dtype="int64") /* ty=Tensor[(5, 11, 8), int64] */;
    %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
    %600 = cast(%597, dtype="int64") /* ty=Tensor[(5, 11, 8), int64] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %602 = bitwise_xor(%600, %601) /* ty=Tensor[(5, 11, 8), int64] */;
    %603 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 11, 8), int64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%602, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %607 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
    %608 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 11, 8), int64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %609 = reshape(%608, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %610 = @func_251(%609) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
    %611 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
    %612 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 11, 8), int64] */, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %613 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 11, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 11, 8), int64] */, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %616 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
    %617 = %596.0;
    %618 = cast(%617, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %619 = reshape(%618, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %620 = divide(%605, %606) /* ty=Tensor[(5, 11, 8), float64] */;
    %621 = %607.2;
    %622 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
    %623 = %610.1;
    %624 = %611.4;
    %625 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
    %626 = less(%614, %615) /* ty=Tensor[(5, 11, 8), bool] */;
    %627 = %616.4;
    %628 = @func_1431(%619) /* ty=Tensor[(5, 11, 8), float64] */;
    (%617, %620, %621, %622, %623, %624, %625, %626, %627, %628)
  };
  %629(%var_1634) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(30), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), bool], Tensor[(6, 1, 5), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_4043() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_4041() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_3935() -> (Tensor[(5, 11, 8), float64],) {
  @func_3933() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_5142() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64]) {
  %630 = @func_2710() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %631 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %632 = %630.0;
  (%631, %632)
}

def @func_4948() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  %636 = fn () -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
    %633 = @func_1688() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %634 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
    %635 = %633.1;
    (%634, %635)
  };
  %636() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_5602() -> (Tensor[(5, 11, 8), float64],) {
  %637 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %638 = %637.0;
  (%638,)
}

def @func_5378() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %639 = @func_5351() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %640 = %639.1;
  %641 = @func_815() /* ty=Tensor[(5, 11, 8), float64] */;
  (%640, %641)
}

def @func_2128() -> (Tensor[(5, 11, 8), float64],) {
  %642 = @func_1080() /* ty=Tensor[(5, 11, 8), float64] */;
  (%642,)
}

def @func_1433(%var_1432: Tensor[(5, 11, 8), float64]) -> Tensor[(5, 11, 8), float64] {
  %649 = fn (%var_1426: Tensor[(5, 11, 8), float64]) -> Tensor[(5, 11, 8), float64] {
    %643 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %644 = %643.0;
    %645 = cast(%var_1426, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(%644, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%647, %648) /* ty=Tensor[(5, 11, 8), float64] */
  };
  %649(%var_1432) /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_4262() -> (Tensor[(5, 11, 8), float64], Tensor[(2, 16, 14), float64], Tensor[(448), float64]) {
  %657 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(2, 16, 14), float64], Tensor[(448), float64]) {
    %650 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
    %651 = cast(meta[relay.Constant][19] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %652 = cast(meta[relay.Constant][19] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %653 = reshape(%651, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float64] */;
    %654 = reshape(%652, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), float64] */;
    %655 = %650.0;
    %656 = @func_3152(%653, %654) /* ty=Tensor[(2, 16, 14), float64] */;
    (%655, %656, meta[relay.Constant][19] /* ty=Tensor[(448), float64] */)
  };
  %657() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(2, 16, 14), float64], Tensor[(448), float64]) */
}

def @func_1513() -> Tensor[(5, 11, 8), float32] {
  %658 = fn () -> Tensor[(5, 11, 8), float32] {
    @func_471() /* ty=Tensor[(5, 11, 8), float32] */
  };
  %658() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_7109() -> Tensor[(5, 11, 8), float64] {
  @func_7107() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_4914() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  @func_4912() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_736() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_7924() -> (Tensor[(5, 11, 8), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64]) {
  %665 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64]) {
    %659 = @func_5378() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %660 = cast(meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %661 = reshape(%660, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %662 = @func_2538(%661) /* ty=(Tensor[(3, 16, 7), float64],) */;
    %663 = %659.1;
    %664 = %662.0;
    (%663, %664, meta[relay.Constant][20] /* ty=Tensor[(336), float64] */)
  };
  %665() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(3, 16, 7), float64], Tensor[(336), float64]) */
}

def @func_5563() -> (Tensor[(5, 11, 8), float64],) {
  @func_5561() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_815() -> Tensor[(5, 11, 8), float64] {
  %666 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %666.0
}

def @func_3088(%var_3086: int64, %var_3087: Tensor[(3, 14, 16), int64]) -> (Tensor[(3, 14, 16), int64], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(5, 11, 8), float64]) {
  @func_3084(%var_3086, %var_3087) /* ty=(Tensor[(3, 14, 16), int64], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_5264(%var_5262: Tensor[(385), uint8]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), uint8], Tensor[(385), uint8]) {
  @func_5261(%var_5262) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), uint8], Tensor[(385), uint8]) */
}

def @func_2670(%var_2641: Tensor[(11, 7, 5), uint8]) -> (Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) {
  %667 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 7, 5), uint8] */, dtype="uint8") /* ty=Tensor[(11, 7, 5), uint8] */;
  %668 = shape_of(%var_2641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_2641, dtype="uint8") /* ty=Tensor[(11, 7, 5), uint8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %671 = cast(%var_2641, dtype="float64") /* ty=Tensor[(11, 7, 5), float64] */;
  %672 = right_shift(%669, %670) /* ty=Tensor[(11, 7, 5), uint8] */;
  %673 = asinh(%671) /* ty=Tensor[(11, 7, 5), float64] */;
  %674 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  (%672, %673, %674)
}

def @func_2373(%var_2371: Tensor[(294), uint32], %var_2372: Tensor[(294), float32]) -> (Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) {
  @func_2369(%var_2371, %var_2372) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) */
}

def @func_6120(%var_6107: Tensor[(5, 8, 4), float64]) -> (Tensor[(5, 8, 4), float64],) {
  %675 = cast(%var_6107, dtype="float64") /* ty=Tensor[(5, 8, 4), float64] */;
  %676 = tan(%675) /* ty=Tensor[(5, 8, 4), float64] */;
  (%676,)
}

def @func_2538(%var_2535: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), float64],) {
  %677 = cast(%var_2535, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %678 = log(%677) /* ty=Tensor[(3, 16, 7), float64] */;
  (%678,)
}

def @func_321() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) {
  @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */
}

def @func_1484() -> Tensor[(15, 16, 10), float64] {
  %680 = fn () -> Tensor[(15, 16, 10), float64] {
    %679 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
    rsqrt(%679) /* ty=Tensor[(15, 16, 10), float64] */
  };
  %680() /* ty=Tensor[(15, 16, 10), float64] */
}

def @func_8015() -> Tensor[(448), float64] {
  @func_8013() /* ty=Tensor[(448), float64] */
}

def @func_472() -> Tensor[(5, 11, 8), float32] {
  %688 = fn () -> Tensor[(5, 11, 8), float32] {
    %681 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
    %682 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %683 = %682.1;
    %684 = cast(%683, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
    %685 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%681, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%686, %687) /* ty=Tensor[(5, 11, 8), float32] */
  };
  %688() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_1206() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %692 = fn () -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %689 = @func_734() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %690 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
    %691 = %689.4;
    (%690, %691)
  };
  %692() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_5351() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %693 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %694 = @func_2396() /* ty=Tensor[(5, 11, 8), float64] */;
  %695 = %693.0;
  (%694, %695)
}

def @func_6347() -> Tensor[(5, 11, 8), float64] {
  %697 = fn () -> Tensor[(5, 11, 8), float64] {
    %696 = @func_5316() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %696.0
  };
  %697() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_4690() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %698 = @func_3981() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(294), uint32], Tensor[(294), uint32]) */;
  %699 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
  %700 = %698.0;
  (%699, %700)
}

def @func_2885(%var_2883: Tensor[(1, 42), uint32]) -> (Tensor[(5, 11, 8), float64], Tensor[(7, 7, 6), bool], Tensor[(1, 42), uint32], Tensor[(294), uint32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64], Tensor[(6, 1, 5), float64]) {
  @func_2882(%var_2883) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(7, 7, 6), bool], Tensor[(1, 42), uint32], Tensor[(294), uint32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64], Tensor[(6, 1, 5), float64]) */
}

def @func_6523() -> (Tensor[(5, 11, 8), float64],) {
  %701 = @func_853() /* ty=Tensor[(5, 11, 8), float64] */;
  (%701,)
}

def @func_7219() -> (Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) {
  @func_7217() /* ty=(Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */
}

def @func_5194() -> (Tensor[(5, 11, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) {
  %709 = fn () -> (Tensor[(5, 11, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) {
    %702 = @func_1937() /* ty=Tensor[(5, 11, 8), float64] */;
    %703 = cast(%702, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
    %704 = cast(meta[relay.Constant][23] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %705 = reshape(%704, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %706 = @func_2422(%705) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64]) */;
    %707 = atan(%703) /* ty=Tensor[(5, 11, 8), float32] */;
    %708 = %706.2;
    (%707, %708, meta[relay.Constant][23] /* ty=Tensor[(72), float32] */)
  };
  %709() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */
}

def @func_92(%var_90: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_89(%var_90) /* ty=(Tensor[(5, 11, 8), int8], Tensor[(5, 11, 8), bool], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_4617(%var_4614: Tensor[(5, 6, 6), float32], %var_4615: Tensor[(5, 6, 6), float32], %var_4616: Tensor[(72), float32]) -> (Tensor[(5, 6, 6), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 6, 6), float32]) {
  @func_4612(%var_4614, %var_4615, %var_4616) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 6, 6), float32]) */
}

def @func_6123(%var_6121: Tensor[(5, 8, 4), float64]) -> (Tensor[(5, 8, 4), float64],) {
  @func_6120(%var_6121) /* ty=(Tensor[(5, 8, 4), float64],) */
}

def @func_6924() -> (Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) {
  %710 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %712 = tan(%711) /* ty=Tensor[(13, 8, 8), float32] */;
  %713 = cast(%710, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %717 = @func_1117() /* ty=(Tensor[(5, 11, 8), bool],) */;
  %718 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  %719 = less_equal(%715, %716) /* ty=Tensor[(13, 8, 8), bool] */;
  %720 = %717.0;
  (%718, %719, %720)
}

def @func_4349(%var_4347: Tensor[(13, 6, 12), float64]) -> (Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) {
  @func_4346(%var_4347) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_7405() -> Tensor[(5, 11, 8), float32] {
  %721 = @func_1822() /* ty=(Tensor[(5, 11, 8), float32],) */;
  %721.0
}

def @func_6804() -> (Tensor[(13, 8, 8), float64],) {
  %722 = @func_6077() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(13, 6, 12), float64], Tensor[(468, 2), float64]) */;
  %723 = %722.1;
  (%723,)
}

def @func_2219(%var_2218: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), uint64],) {
  %731 = fn (%var_2201: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), uint64],) {
    %724 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %725 = %724.1;
    %726 = cast(%var_2201, dtype="uint64") /* ty=Tensor[(5, 11, 8), uint64] */;
    %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%725, dtype="uint64") /* ty=Tensor[(5, 11, 8), uint64] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %730 = multiply(%728, %729) /* ty=Tensor[(5, 11, 8), uint64] */;
    (%730,)
  };
  %731(%var_2218) /* ty=(Tensor[(5, 11, 8), uint64],) */
}

def @func_6077() -> (Tensor[(5, 11, 8), float32], Tensor[(13, 8, 8), float64], Tensor[(13, 6, 12), float64], Tensor[(468, 2), float64]) {
  %732 = cast(meta[relay.Constant][24] /* ty=Tensor[(468, 2), float64] */, dtype="float64") /* ty=Tensor[(468, 2), float64] */;
  %733 = reshape(%732, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %734 = @func_4346(%733) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(5, 11, 8), float64]) */;
  %735 = @func_3879() /* ty=Tensor[(5, 11, 8), float32] */;
  %736 = @func_2525() /* ty=Tensor[(13, 8, 8), float64] */;
  %737 = %734.0;
  (%735, %736, %737, meta[relay.Constant][24] /* ty=Tensor[(468, 2), float64] */)
}

def @func_1824() -> (Tensor[(5, 11, 8), float32],) {
  @func_1822() /* ty=(Tensor[(5, 11, 8), float32],) */
}

def @func_2882(%var_2866: Tensor[(1, 42), uint32]) -> (Tensor[(5, 11, 8), float64], Tensor[(7, 7, 6), bool], Tensor[(1, 42), uint32], Tensor[(294), uint32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), uint64], Tensor[(6, 1, 5), float64]) {
  %738 = @func_2710() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %739 = cast(%var_2866, dtype="uint32") /* ty=Tensor[(1, 42), uint32] */;
  %740 = cast(meta[relay.Constant][25] /* ty=Tensor[(294), uint32] */, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %741 = reshape(%739, newshape=[1, 7, 6]) /* ty=Tensor[(1, 7, 6), uint32] */;
  %742 = reshape(%740, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), uint32] */;
  %743 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %744 = %738.0;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %746 = reshape(%745, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %747 = @func_2217(%746) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %748 = @func_1416() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(6, 1, 5), float64], Tensor[(30), float64], Tensor[(6, ?, 5), float64], Tensor[(6, 1, 5), float64]) */;
  %749 = @func_419(%741, %742) /* ty=Tensor[(7, 7, 6), bool] */;
  %750 = %743.0;
  %751 = %747.0;
  %752 = %748.1;
  (%744, %749, %var_2866, meta[relay.Constant][25] /* ty=Tensor[(294), uint32] */, %750, %751, %752)
}

def @func_5261(%var_5250: Tensor[(385), uint8]) -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), uint8], Tensor[(385), uint8]) {
  %753 = @func_4086() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %754 = cast(%var_5250, dtype="uint8") /* ty=Tensor[(385), uint8] */;
  %755 = reshape(%754, newshape=[11, 7, 5]) /* ty=Tensor[(11, 7, 5), uint8] */;
  %756 = @func_2670(%755) /* ty=(Tensor[(11, 7, 5), uint8], Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), float64]) */;
  %757 = %753.0;
  %758 = @func_3587() /* ty=Tensor[(5, 11, 8), float64] */;
  %759 = %756.0;
  (%757, %758, %759, %var_5250)
}

def @func_4467() -> Tensor[(13, 8, 8), float32] {
  %760 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %761 = %760.0;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  cos(%762) /* ty=Tensor[(13, 8, 8), float32] */
}

def @func_6480(%var_6425: Tensor[(2310), float64]) -> (Tensor[(5, 11, 8), float64], float64, Tensor[(2310), float64], Tensor[(5, 11, 8), float64], Tensor[(15, 11, 14), float32]) {
  %763 = @func_2128() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %764 = cast(4.63965f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %765 = cast(%var_6425, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %766 = reshape(%764, newshape=[]) /* ty=float64 */;
  %767 = reshape(%765, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), float64] */;
  %768 = @func_1985(%766, %767) /* ty=(Tensor[(15, 11, 14), float64],) */;
  %769 = %768.0;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
  %771 = log2(%770) /* ty=Tensor[(15, 11, 14), float64] */;
  %772 = cast(%771, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %773 = @func_5662() /* ty=Tensor[(5, 11, 8), float64] */;
  %774 = %763.0;
  %775 = sin(%772) /* ty=Tensor[(15, 11, 14), float32] */;
  (%773, 4.63965f64 /* ty=float64 */, %var_6425, %774, %775)
}

def @func_6047() -> Tensor[(5, 11, 8), float64] {
  %776 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %776.0
}

def @func_6483(%var_6481: Tensor[(2310), float64]) -> (Tensor[(5, 11, 8), float64], float64, Tensor[(2310), float64], Tensor[(5, 11, 8), float64], Tensor[(15, 11, 14), float32]) {
  @func_6480(%var_6481) /* ty=(Tensor[(5, 11, 8), float64], float64, Tensor[(2310), float64], Tensor[(5, 11, 8), float64], Tensor[(15, 11, 14), float32]) */
}

def @func_7357(%var_7354: Tensor[(3, 24), float32], %var_7355: Tensor[(8, 104), float64], %var_7356: Tensor[(3, 24), float32]) -> (Tensor[(120), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(8, 104), float64], Tensor[(5, 11, 8), float32], Tensor[(30), float64], Tensor[(3, 24), int32], Tensor[(3, 24), int64], Tensor[(3, 24), float64]) {
  @func_7352(%var_7354, %var_7355, %var_7356) /* ty=(Tensor[(120), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(8, 104), float64], Tensor[(5, 11, 8), float32], Tensor[(30), float64], Tensor[(3, 24), int32], Tensor[(3, 24), int64], Tensor[(3, 24), float64]) */
}

def @func_5741() -> (Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(15, 16, 10), float64]) {
  %777 = @func_1483() /* ty=Tensor[(15, 16, 10), float64] */;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %779 = cast(%777, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
  %780 = asinh(%778) /* ty=Tensor[(15, 16, 10), float32] */;
  %781 = @func_655() /* ty=Tensor[(5, 11, 8), float64] */;
  %782 = acosh(%779) /* ty=Tensor[(15, 16, 10), float64] */;
  (%780, %781, %782)
}

def @func_3667(%var_3623: Tensor[(13, 8, 8), float64]) -> (Tensor[(13, 8, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(3, 16, 7), float64], Tensor[(336), float64], Tensor[(13, 8, 8), float32], Tensor[(13, 8, 8), float32]) {
  %783 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  %784 = cast(%var_3623, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %788 = cast(meta[relay.Constant][26] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %789 = reshape(%788, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %790 = @func_2538(%789) /* ty=(Tensor[(3, 16, 7), float64],) */;
  %791 = cast(%783, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %792 = cast(%783, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %793 = @func_2061() /* ty=Tensor[(13, 8, 8), float64] */;
  %794 = less(%786, %787) /* ty=Tensor[(13, 8, 8), bool] */;
  %795 = %790.0;
  %796 = sinh(%791) /* ty=Tensor[(13, 8, 8), float32] */;
  %797 = sin(%792) /* ty=Tensor[(13, 8, 8), float32] */;
  (%793, %794, %795, meta[relay.Constant][26] /* ty=Tensor[(336), float64] */, %796, %797)
}

def @func_6721() -> Tensor[(5, 11, 8), float64] {
  %798 = @func_1913() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %798.0
}

def @func_7407() -> Tensor[(5, 11, 8), float32] {
  @func_7405() /* ty=Tensor[(5, 11, 8), float32] */
}

def @func_1714() -> (Tensor[(5, 11, 8), float64],) {
  %800 = fn () -> (Tensor[(5, 11, 8), float64],) {
    %799 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
    (%799,)
  };
  %800() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_7352(%var_7249: Tensor[(3, 24), float32], %var_7273: Tensor[(8, 104), float64], %var_7333: Tensor[(3, 24), float32]) -> (Tensor[(120), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(8, 104), float64], Tensor[(5, 11, 8), float32], Tensor[(30), float64], Tensor[(3, 24), int32], Tensor[(3, 24), int64], Tensor[(3, 24), float64]) {
  %801 = @func_7217() /* ty=(Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %802 = @func_5378() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %803 = cast(%var_7273, dtype="float64") /* ty=Tensor[(8, 104), float64] */;
  %804 = reshape(%803, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %805 = @func_2783(%804) /* ty=(Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) */;
  %806 = @func_7217() /* ty=(Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %807 = cast(%var_7249, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %808 = asinh(%807) /* ty=Tensor[(3, 24), float32] */;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %810 = rsqrt(%809) /* ty=Tensor[(3, 24), float32] */;
  %811 = cast(%var_7249, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %812 = reshape(%811, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %813 = @func_2085(%812) /* ty=Tensor[(8, 1, 9), float32] */;
  %814 = cast(%813, dtype="int16") /* ty=Tensor[(8, 1, 9), int16] */;
  %815 = shape_of(%var_7249, dtype="int32") /* ty=Tensor[(2), int32] */;
  %816 = cast(%var_7249, dtype="int16") /* ty=Tensor[(3, 24), int16] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %818 = logical_xor(%816, %817) /* ty=Tensor[(3, 24), int16] */;
  %819 = cast(%818, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %820 = shape_of(%810, dtype="int32") /* ty=Tensor[(2), int32] */;
  %821 = cast(%810, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %823 = add(%821, %822) /* ty=Tensor[(3, 24), float64] */;
  %824 = cast(%823, dtype="int32") /* ty=Tensor[(3, 24), int32] */;
  %825 = shape_of(%810, dtype="int32") /* ty=Tensor[(2), int32] */;
  %826 = cast(%810, dtype="int32") /* ty=Tensor[(3, 24), int32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %828 = cast(%var_7333, dtype="int64") /* ty=Tensor[(3, 24), int64] */;
  %829 = shape_of(%808, dtype="int32") /* ty=Tensor[(2), int32] */;
  %830 = cast(%808, dtype="int64") /* ty=Tensor[(3, 24), int64] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %832 = cast(%823, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %833 = %801.2;
  %834 = @func_4813() /* ty=Tensor[(5, 11, 8), float64] */;
  %835 = %802.0;
  %836 = @func_2396() /* ty=Tensor[(5, 11, 8), float64] */;
  %837 = @func_1512() /* ty=Tensor[(5, 11, 8), float32] */;
  %838 = %805.1;
  %839 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
  %840 = %806.1;
  %841 = bitwise_or(%826, %827) /* ty=Tensor[(3, 24), int32] */;
  %842 = maximum(%830, %831) /* ty=Tensor[(3, 24), int64] */;
  %843 = sigmoid(%832) /* ty=Tensor[(3, 24), float64] */;
  (%833, %834, %835, %836, %837, %838, %var_7273, %839, %840, %841, %842, %843)
}

def @func_923() -> (Tensor[(5, 11, 8), float64],) {
  %844 = @func_876() /* ty=Tensor[(5, 11, 8), float64] */;
  (%844,)
}

def @func_2130() -> (Tensor[(5, 11, 8), float64],) {
  @func_2128() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_2044() -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %850 = fn () -> (Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
    %845 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
    %846 = @func_1688() /* ty=(Tensor[(15, 16, 10), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
    %847 = %845.0;
    %848 = @func_610() /* ty=Tensor[(5, 11, 8), float64] */;
    %849 = %846.1;
    (%847, %848, %849)
  };
  %850() /* ty=(Tensor[(13, 8, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_12() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %851 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 11, 8), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %852 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 11, 8), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %853 = sqrt(%851) /* ty=Tensor[(5, 11, 8), float64] */;
  %854 = sigmoid(%852) /* ty=Tensor[(5, 11, 8), float64] */;
  (%853, %854)
}

def @func_7217() -> (Tensor[(30), float64], Tensor[(30), float64], Tensor[(120), float32], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) {
  %855 = cast(meta[relay.Constant][28] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %856 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %857 = reshape(%855, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %858 = reshape(%856, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %859 = @func_4121(%857, %858) /* ty=(Tensor[(11, 15), float64], Tensor[(6, 4, 5), uint16], Tensor[(30), float64], Tensor[(120), float32]) */;
  %860 = @func_6924() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */;
  %861 = @func_4041() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %862 = %861.1;
  %863 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 11, 8), float64] */, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %867 = %859.2;
  %868 = %860.1;
  %869 = not_equal(%865, %866) /* ty=Tensor[(5, 11, 8), bool] */;
  (%867, meta[relay.Constant][28] /* ty=Tensor[(30), float64] */, meta[relay.Constant][29] /* ty=Tensor[(120), float32] */, %868, %869)
}

def @func_2189() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) {
  @func_2187() /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */
}

def @func_4612(%var_4582: Tensor[(5, 6, 6), float32], %var_4588: Tensor[(5, 6, 6), float32], %var_4597: Tensor[(72), float32]) -> (Tensor[(5, 6, 6), float64], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 6, 6), float32]) {
  %870 = cast(%var_4588, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  %871 = shape_of(%var_4582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%var_4582, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %874 = cast(%var_4597, dtype="float32") /* ty=Tensor[(72), float32] */;
  %875 = reshape(%874, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %876 = cast(%var_4582, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %877 = sigmoid(%876) /* ty=Tensor[(5, 6, 6), float32] */;
  %878 = cast(%877, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %879 = floor_divide(%872, %873) /* ty=Tensor[(5, 6, 6), float64] */;
  %880 = @func_2085(%875) /* ty=Tensor[(8, 1, 9), float32] */;
  %881 = sqrt(%878) /* ty=Tensor[(5, 6, 6), float32] */;
  (%879, %880, %var_4597, %881)
}

def @func_2786(%var_2784: Tensor[(13, 8, 8), float64]) -> (Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) {
  @func_2783(%var_2784) /* ty=(Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) */
}

def @func_2525() -> Tensor[(13, 8, 8), float64] {
  @func_2061() /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_3084(%var_3068: int64, %var_3069: Tensor[(3, 14, 16), int64]) -> (Tensor[(3, 14, 16), int64], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(5, 11, 8), float64]) {
  %882 = cast(%var_3068, dtype="int64") /* ty=int64 */;
  %883 = cast(%var_3069, dtype="int64") /* ty=Tensor[(3, 14, 16), int64] */;
  %884 = cast(meta[relay.Constant][31] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %885 = reshape(%884, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %886 = @func_251(%885) /* ty=(Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64]) */;
  %887 = logical_xor(%882, %883) /* ty=Tensor[(3, 14, 16), int64] */;
  %888 = %886.1;
  %889 = @func_1544() /* ty=Tensor[(5, 11, 8), float64] */;
  (%887, %888, meta[relay.Constant][31] /* ty=Tensor[(440), float64] */, %889)
}

def @func_5961() -> Tensor[(5, 11, 8), float64] {
  @func_5959() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_7132() -> Tensor[(5, 11, 8), float64] {
  %890 = @func_4086() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %890.0
}

def @func_5100(%var_5087: Tensor[(10, 2, 7), float64]) -> (Tensor[(10, 2, 7), float64], Tensor[(13, 8, 8), float64], Tensor[(10, 2, 7), float64]) {
  %891 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %892 = shape_of(%var_5087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%var_5087, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %895 = @func_1451() /* ty=(Tensor[(13, 8, 8), float64],) */;
  %896 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %897 = divide(%893, %894) /* ty=Tensor[(10, 2, 7), float64] */;
  %898 = %895.0;
  %899 = sqrt(%896) /* ty=Tensor[(10, 2, 7), float64] */;
  (%897, %898, %899)
}

def @func_6156() -> Tensor[(5, 11, 8), float64] {
  %900 = fn () -> Tensor[(5, 11, 8), float64] {
    @func_5959() /* ty=Tensor[(5, 11, 8), float64] */
  };
  %900() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_6926() -> (Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) {
  @func_6924() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(13, 8, 8), bool], Tensor[(5, 11, 8), bool]) */
}

def @func_5664() -> Tensor[(5, 11, 8), float64] {
  @func_5662() /* ty=Tensor[(5, 11, 8), float64] */
}

def @func_4775(%var_4728: Tensor[(1, 440), float64], %var_4745: Tensor[(832), float64]) -> (Tensor[(11, 7, 5), float64], Tensor[(5, 11, 8), uint64], Tensor[(1, 440), float64], Tensor[(13, 8, 8), int16], Tensor[(832), float32], Tensor[(5, 11, 8), float64]) {
  %901 = @func_4548() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(11, 7, 5), float64], Tensor[(11, 35), uint8]) */;
  %902 = cast(%var_4728, dtype="float64") /* ty=Tensor[(1, 440), float64] */;
  %903 = reshape(%902, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %904 = @func_2217(%903) /* ty=(Tensor[(5, 11, 8), uint64],) */;
  %905 = cast(%var_4745, dtype="float64") /* ty=Tensor[(832), float64] */;
  %906 = reshape(%905, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %907 = @func_2783(%906) /* ty=(Tensor[(13, 8, 8), int16], Tensor[(5, 11, 8), float64]) */;
  %908 = cast(%var_4745, dtype="float32") /* ty=Tensor[(832), float32] */;
  %909 = log(%908) /* ty=Tensor[(832), float32] */;
  %910 = cast(%909, dtype="float32") /* ty=Tensor[(832), float32] */;
  %911 = %901.2;
  %912 = %904.0;
  %913 = %907.0;
  %914 = rsqrt(%910) /* ty=Tensor[(832), float32] */;
  %915 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  (%911, %912, %var_4728, %913, %914, %915)
}

def @func_2541(%var_2539: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), float64],) {
  @func_2538(%var_2539) /* ty=(Tensor[(3, 16, 7), float64],) */
}

def @func_3981() -> (Tensor[(5, 11, 8), float64], Tensor[(294), uint32], Tensor[(294), uint32]) {
  %916 = @func_319() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float32]) */;
  %917 = cast(meta[relay.Constant][33] /* ty=Tensor[(294), uint32] */, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %918 = cast(meta[relay.Constant][33] /* ty=Tensor[(294), uint32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %919 = reshape(%917, newshape=[294]) /* ty=Tensor[(294), uint32] */;
  %920 = reshape(%918, newshape=[294]) /* ty=Tensor[(294), float32] */;
  %921 = @func_2369(%919, %920) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(42), uint32], Tensor[(294), uint32]) */;
  %922 = %916.1;
  %923 = %921.2;
  (%922, %923, meta[relay.Constant][33] /* ty=Tensor[(294), uint32] */)
}

def @func_734() -> (Tensor[(5, 11, 8), float32], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %924 = @func_12() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */;
  %925 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
  %926 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
  %927 = %924.1;
  %928 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %929 = @func_340() /* ty=Tensor[(5, 11, 8), float64] */;
  %930 = %925.0;
  (%926, %927, %928, %929, %930)
}

def @func_3726() -> (Tensor[(5, 11, 8), float64],) {
  @func_3724() /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_1118() -> (Tensor[(5, 11, 8), bool],) {
  %941 = fn () -> (Tensor[(5, 11, 8), bool],) {
    %931 = @func_206() /* ty=(Tensor[(5, 11, 8), float64],) */;
    %932 = %931.0;
    %933 = cast(%932, dtype="float32") /* ty=Tensor[(5, 11, 8), float32] */;
    %934 = asin(%933) /* ty=Tensor[(5, 11, 8), float32] */;
    %935 = @func_471() /* ty=Tensor[(5, 11, 8), float32] */;
    %936 = cast(%935, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %937 = shape_of(%934, dtype="int32") /* ty=Tensor[(3), int32] */;
    %938 = cast(%934, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %940 = greater_equal(%938, %939) /* ty=Tensor[(5, 11, 8), bool] */;
    (%940,)
  };
  %941() /* ty=(Tensor[(5, 11, 8), bool],) */
}

def @func_4692() -> (Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_4690() /* ty=(Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen253/build/output.py", line 3070, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:01:11] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

