==========mod==========
#[version = "0.0.5"]
def @func_3631(%var_3620: Tensor[(10, 10, 7), int32]) -> (Tensor[(10, 10, 7), bool],) {
  %0 = cast(%var_3620, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(10, 10, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 10, 7), int32] */, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = not_equal(%2, %3) /* ty=Tensor[(10, 10, 7), bool] */;
  (%4,)
}

def @func_3486(%var_3443: Tensor[(16, 14, 9), int32], %var_3444: Tensor[(16, 14, 9), int32], %var_3453: bool, %var_3480: Tensor[(7, 3, 9), int32]) -> (Tensor[(16, 14, 9), int32], Tensor[(11, 13, 11), bool], Tensor[(1573), bool], Tensor[(312), int8], Tensor[(1365), float32], Tensor[(189), int32], Tensor[(6, 4, 8), float32], Tensor[(7, 3, 9), int32], Tensor[(7, 3, 9), bool]) {
  %5 = cast(%var_3444, dtype="int32") /* ty=Tensor[(16, 14, 9), int32] */;
  %6 = shape_of(%var_3443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_3443, dtype="int32") /* ty=Tensor[(16, 14, 9), int32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %9 = cast(%var_3453, dtype="bool") /* ty=bool */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(1573), bool] */, dtype="bool") /* ty=Tensor[(1573), bool] */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(312), int8] */, dtype="int8") /* ty=Tensor[(312), int8] */;
  %12 = cast(meta[relay.Constant][3] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %13 = reshape(%9, newshape=[]) /* ty=bool */;
  %14 = reshape(%10, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), bool] */;
  %15 = reshape(%11, newshape=[312]) /* ty=Tensor[(312), int8] */;
  %16 = reshape(%12, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %17 = @func_3172(%13, %14, %15, %16) /* ty=(Tensor[(11, 13, 11), bool], uint16, Tensor[(312), int8], Tensor[(90), bool], Tensor[(1365), float32]) */;
  %18 = cast(%var_3453, dtype="float32") /* ty=float32 */;
  %19 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 4, 8), bool] */, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
  %20 = cast(meta[relay.Constant][4] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %21 = cast(meta[relay.Constant][4] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %22 = cast(meta[relay.Constant][4] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %23 = reshape(%21, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %24 = reshape(%22, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %25 = @func_470(%23, %24) /* ty=(Tensor[(7, 3, 9), int32],) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="int32") /* ty=Tensor[(7, 3, 9), int32] */;
  %28 = reshape(%20, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %29 = reshape(%27, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %30 = @func_470(%28, %29) /* ty=(Tensor[(7, 3, 9), int32],) */;
  %31 = cast(%var_3480, dtype="bool") /* ty=Tensor[(7, 3, 9), bool] */;
  %32 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%26, dtype="bool") /* ty=Tensor[(7, 3, 9), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = bitwise_or(%7, %8) /* ty=Tensor[(16, 14, 9), int32] */;
  %36 = %17.0;
  %37 = floor_divide(%18, %19) /* ty=Tensor[(6, 4, 8), float32] */;
  %38 = %30.0;
  %39 = less_equal(%33, %34) /* ty=Tensor[(7, 3, 9), bool] */;
  (%35, %36, meta[relay.Constant][1] /* ty=Tensor[(1573), bool] */, meta[relay.Constant][2] /* ty=Tensor[(312), int8] */, meta[relay.Constant][3] /* ty=Tensor[(1365), float32] */, meta[relay.Constant][4] /* ty=Tensor[(189), int32] */, %37, %38, %39)
}

def @func_1382(%var_1286: Tensor[(16, 4, 15), float32], %var_1296: Tensor[(220), float64], %var_1297: Tensor[(1365), float32], %var_1306: Tensor[(80), uint32]) -> (Tensor[(16, 4, 15), float32], Tensor[(220), float64], Tensor[(7, 13, 15), bool], Tensor[(5, 4, 4), float32], Tensor[(80), uint32], Tensor[(26), float32], Tensor[(16, 4, 15), int8], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(189), int32], Tensor[(7, 3, 9), float64], Tensor[(7, 13, 15), bool]) {
  %40 = cast(%var_1286, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %41 = acosh(%40) /* ty=Tensor[(16, 4, 15), float32] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %43 = cast(%var_1297, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %44 = reshape(%43, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %45 = cast(%var_1306, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %46 = cast(%var_1306, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %47 = cast(meta[relay.Constant][6] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %48 = reshape(%45, newshape=[5, 4, 4]) /* ty=Tensor[(5, 4, 4), uint32] */;
  %49 = reshape(%46, newshape=[5, 4, 4]) /* ty=Tensor[(5, 4, 4), uint32] */;
  %50 = reshape(%47, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %51 = @func_1271(%48, %49, %50) /* ty=(Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float32], Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(26), float32]) */;
  %52 = cast(%41, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %53 = atan(%52) /* ty=Tensor[(16, 4, 15), float32] */;
  %54 = cast(%41, dtype="int8") /* ty=Tensor[(16, 4, 15), int8] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="int8") /* ty=Tensor[(16, 4, 15), int8] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %58 = cast(%var_1296, dtype="float64") /* ty=Tensor[(220), float64] */;
  %59 = reshape(%58, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %60 = @func_320(%59) /* ty=Tensor[(5, 11, 4), float64] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %62 = reshape(%61, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %63 = cast(meta[relay.Constant][7] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %64 = cast(meta[relay.Constant][7] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %65 = reshape(%63, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %66 = reshape(%64, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %67 = @func_470(%65, %66) /* ty=(Tensor[(7, 3, 9), int32],) */;
  %68 = %67.0;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(7, 3, 9), float64] */;
  %70 = cast(%var_1296, dtype="float64") /* ty=Tensor[(220), float64] */;
  %71 = cast(%var_1297, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %72 = reshape(%70, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %73 = reshape(%71, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %74 = @func_600(%72, %73) /* ty=(Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) */;
  %75 = %74.1;
  %76 = cast(%var_1297, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %80 = sigmoid(%42) /* ty=Tensor[(16, 4, 15), float32] */;
  %81 = @func_451(%44) /* ty=Tensor[(7, 13, 15), bool] */;
  %82 = %51.1;
  %83 = add(%56, %57) /* ty=Tensor[(16, 4, 15), int8] */;
  %84 = @func_320(%62) /* ty=Tensor[(5, 11, 4), float64] */;
  %85 = sqrt(%69) /* ty=Tensor[(7, 3, 9), float64] */;
  %86 = logical_and(%78, %79) /* ty=Tensor[(7, 13, 15), bool] */;
  (%80, %var_1296, %81, %82, %var_1306, meta[relay.Constant][6] /* ty=Tensor[(26), float32] */, %83, %60, %84, meta[relay.Constant][7] /* ty=Tensor[(189), int32] */, %85, %86)
}

def @func_4933(%var_4930: Tensor[(12, 16, 9), float32]) -> (Tensor[(12, 16, 9), float32],) {
  %87 = cast(%var_4930, dtype="float32") /* ty=Tensor[(12, 16, 9), float32] */;
  %88 = sinh(%87) /* ty=Tensor[(12, 16, 9), float32] */;
  (%88,)
}

def @func_1921(%var_1904: Tensor[(6, 16, 8), float64]) -> (Tensor[(6, 16, 8), float64],) {
  %89 = cast(%var_1904, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %90 = tan(%89) /* ty=Tensor[(6, 16, 8), float64] */;
  (%90,)
}

def @func_5117(%var_5106: Tensor[(6, 5, 11), int64], %var_5107: Tensor[(6, 5, 11), int64]) -> (Tensor[(6, 5, 11), int64],) {
  %91 = cast(%var_5107, dtype="int64") /* ty=Tensor[(6, 5, 11), int64] */;
  %92 = shape_of(%var_5106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%var_5106, dtype="int64") /* ty=Tensor[(6, 5, 11), int64] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %95 = left_shift(%93, %94) /* ty=Tensor[(6, 5, 11), int64] */;
  (%95,)
}

def @func_6126(%var_6104: Tensor[(13, 16, 12), int64]) -> (Tensor[(13, 16, 12), float64], Tensor[(13, 16, 12), float64]) {
  %96 = cast(%var_6104, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
  %97 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(13, 16, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 16, 12), int64] */, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = not_equal(%98, %99) /* ty=Tensor[(13, 16, 12), bool] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %102 = cast(%100, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %103 = shape_of(%var_6104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_6104, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %106 = acos(%101) /* ty=Tensor[(13, 16, 12), float64] */;
  %107 = floor_divide(%104, %105) /* ty=Tensor[(13, 16, 12), float64] */;
  (%106, %107)
}

def @func_6264() -> Tensor[(1, 8, 4), float64] {
  %108 = @func_6245() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) */;
  %108.0
}

def @func_239(%var_195: uint64, %var_196: Tensor[(3600), uint64]) -> (Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), uint32], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), int32]) {
  %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 10, 10), float32] */, dtype="uint32") /* ty=Tensor[(12, 10, 10), uint32] */;
  %111 = cast(%var_195, dtype="uint32") /* ty=uint32 */;
  %112 = cast(%var_195, dtype="uint64") /* ty=uint64 */;
  %113 = cast(%var_196, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %114 = reshape(%112, newshape=[]) /* ty=uint64 */;
  %115 = reshape(%113, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %116 = cast(%var_195, dtype="uint64") /* ty=uint64 */;
  %117 = cast(%var_196, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %118 = reshape(%116, newshape=[]) /* ty=uint64 */;
  %119 = reshape(%117, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %120 = cast(%var_195, dtype="uint64") /* ty=uint64 */;
  %121 = cast(%var_196, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %122 = reshape(%120, newshape=[]) /* ty=uint64 */;
  %123 = reshape(%121, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %124 = @func_38(%122, %123) /* ty=Tensor[(15, 15, 16), uint64] */;
  %125 = cast(%var_196, dtype="int32") /* ty=Tensor[(3600), int32] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="int32") /* ty=Tensor[(15, 15, 16), int32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %129 = sigmoid(%109) /* ty=Tensor[(12, 10, 10), float32] */;
  %130 = add(%110, %111) /* ty=Tensor[(12, 10, 10), uint32] */;
  %131 = @func_38(%114, %115) /* ty=Tensor[(15, 15, 16), uint64] */;
  %132 = @func_38(%118, %119) /* ty=Tensor[(15, 15, 16), uint64] */;
  %133 = right_shift(%127, %128) /* ty=Tensor[(15, 15, 16), int32] */;
  (%129, %130, %131, %132, %133)
}

def @func_521(%var_498: Tensor[(5, 6, 3), bool], %var_499: Tensor[(5, 6, 3), bool]) -> (Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) {
  %134 = cast(%var_499, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
  %135 = shape_of(%var_498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%var_498, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = cast(%var_498, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
  %139 = sinh(%138) /* ty=Tensor[(5, 6, 3), float32] */;
  %140 = cast(%139, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
  %141 = shape_of(%var_499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_499, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = logical_or(%136, %137) /* ty=Tensor[(5, 6, 3), bool] */;
  %145 = greater(%142, %143) /* ty=Tensor[(5, 6, 3), bool] */;
  (%144, %145)
}

def @func_6570(%var_6561: Tensor[(4, 3, 7), uint32], %var_6567: Tensor[(1456), int64]) -> (Tensor[(4, 3, 7), uint32], Tensor[(13, 8, 14), float64], Tensor[(1456), int64]) {
  %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 3, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 3, 1), uint32] */;
  %147 = cast(%var_6561, dtype="uint32") /* ty=Tensor[(4, 3, 7), uint32] */;
  %148 = cast(%var_6567, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %149 = cast(%var_6567, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %150 = reshape(%148, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %151 = reshape(%149, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %152 = @func_2819(%150, %151) /* ty=(Tensor[(13, 8, 14), float64],) */;
  %153 = subtract(%146, %147) /* ty=Tensor[(4, 3, 7), uint32] */;
  %154 = %152.0;
  (%153, %154, %var_6567)
}

def @func_4252(%var_4169: float64, %var_4170: Tensor[(4, 12, 8), float64], %var_4195: Tensor[(28, 4), float32], %var_4196: Tensor[(1872), uint16], %var_4237: Tensor[(1, 220), float64]) -> (Tensor[(4, 12, 8), float64], Tensor[(28, 4), float32], Tensor[(1872), uint16], Tensor[(4, 12, 8), uint8], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365, 1), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 220), float64], Tensor[(6, 16, 8), float64], Tensor[(768), float64], Tensor[(4, 12, 8), float32]) {
  %155 = cast(%var_4169, dtype="float64") /* ty=float64 */;
  %156 = cast(%var_4170, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %157 = cast(%var_4170, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %158 = sin(%157) /* ty=Tensor[(4, 12, 8), float32] */;
  %159 = cast(%var_4195, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %160 = cast(%var_4169, dtype="uint16") /* ty=uint16 */;
  %161 = cast(%var_4196, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %162 = reshape(%159, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
  %163 = reshape(%160, newshape=[]) /* ty=uint16 */;
  %164 = reshape(%161, newshape=[12, 156]) /* ty=Tensor[(12, 156), uint16] */;
  %165 = @func_2328(%162, %163, %164) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(5, 6, 3), bool], Tensor[(90), bool], Tensor[(12, 13, 12), bool], uint16, Tensor[(12, 156), uint16]) */;
  %166 = %165.4;
  %167 = cast(%158, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %168 = cast(%166, dtype="uint8") /* ty=uint8 */;
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %170 = cast(meta[relay.Constant][12] /* ty=Tensor[(1365, 1), float32] */, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
  %171 = reshape(%169, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %172 = reshape(%170, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %173 = @func_1091(%171, %172) /* ty=(Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) */;
  %174 = cast(%var_4237, dtype="float64") /* ty=Tensor[(1, 220), float64] */;
  %175 = reshape(%174, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %177 = reshape(%176, newshape=[6, 16, 8]) /* ty=Tensor[(6, 16, 8), float64] */;
  %178 = @func_1921(%177) /* ty=(Tensor[(6, 16, 8), float64],) */;
  %179 = cast(%158, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %180 = cosh(%179) /* ty=Tensor[(4, 12, 8), float64] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %182 = power(%155, %156) /* ty=Tensor[(4, 12, 8), float64] */;
  %183 = left_shift(%167, %168) /* ty=Tensor[(4, 12, 8), uint8] */;
  %184 = %173.1;
  %185 = @func_320(%175) /* ty=Tensor[(5, 11, 4), float64] */;
  %186 = %178.0;
  %187 = log2(%181) /* ty=Tensor[(4, 12, 8), float32] */;
  (%182, %var_4195, %var_4196, %183, %184, meta[relay.Constant][11] /* ty=Tensor[(26), float32] */, meta[relay.Constant][12] /* ty=Tensor[(1365, 1), float32] */, %185, %var_4237, %186, meta[relay.Constant][13] /* ty=Tensor[(768), float64] */, %187)
}

def @func_1091(%var_1059: Tensor[(2, 13, 1), float32], %var_1066: Tensor[(1365), float32]) -> (Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) {
  %188 = cast(%var_1059, dtype="float32") /* ty=Tensor[(2, 13, 1), float32] */;
  %189 = cast(meta[relay.Constant][14] /* ty=Tensor[(55, 4), float64] */, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %190 = cast(%var_1066, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %191 = reshape(%189, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %192 = reshape(%190, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %193 = @func_600(%191, %192) /* ty=(Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) */;
  %194 = log(%188) /* ty=Tensor[(2, 13, 1), float32] */;
  %195 = %193.2;
  (%194, %195, meta[relay.Constant][14] /* ty=Tensor[(55, 4), float64] */, %var_1066)
}

def @func_6921(%var_6894: Tensor[(90), int32], %var_6906: Tensor[(120), int8], %var_6908: Tensor[(4), uint64]) -> (Tensor[(1, 8, 4), float64], Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(10, 12, 1), float32], Tensor[(120), int8], Tensor[(1, 3600), uint64], Tensor[(4), uint64], Tensor[(960), float32], Tensor[(15, 15, 16), uint64], Tensor[(192), int8]) {
  %196 = @func_6860() /* ty=Tensor[(1, 8, 4), float64] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
  %198 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %199 = cast(%var_6894, dtype="int32") /* ty=Tensor[(90), int32] */;
  %200 = reshape(%198, newshape=[]) /* ty=int32 */;
  %201 = reshape(%199, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), int32] */;
  %202 = cast(%var_6906, dtype="int8") /* ty=Tensor[(120), int8] */;
  %203 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 3600), uint64] */, dtype="uint64") /* ty=Tensor[(1, 3600), uint64] */;
  %204 = cast(%var_6908, dtype="uint64") /* ty=Tensor[(4), uint64] */;
  %205 = cast(meta[relay.Constant][16] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %206 = reshape(%202, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), int8] */;
  %207 = reshape(%203, newshape=[1800, 2]) /* ty=Tensor[(1800, 2), uint64] */;
  %208 = reshape(%204, newshape=[4]) /* ty=Tensor[(4), uint64] */;
  %209 = reshape(%205, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %210 = @func_4526(%206, %207, %208, %209) /* ty=(Tensor[(10, 12, 1), bool], Tensor[(13, 8, 14), float64], Tensor[(1456), int64], Tensor[(10, 12, 1), bool], Tensor[(15, 15, 16), uint64], Tensor[(1800, 2), uint64], Tensor[(10, 12, 1), float32], Tensor[(36, 2), float64], Tensor[(4), uint64], Tensor[(10, 96), float32]) */;
  %211 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %212 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %213 = reshape(%211, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), int8] */;
  %214 = reshape(%212, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), int8] */;
  %215 = @func_1486(%213, %214) /* ty=(Tensor[(8, 8, 3), int8], Tensor[(15, 15, 16), uint64], uint64, Tensor[(3600), uint64]) */;
  %216 = exp(%197) /* ty=Tensor[(1, 8, 4), float64] */;
  %217 = @func_4784(%200, %201) /* ty=Tensor[(15, 6, 1), int32] */;
  %218 = %210.6;
  %219 = %215.1;
  (%216, %217, 8 /* ty=int32 */, %var_6894, %218, %var_6906, meta[relay.Constant][15] /* ty=Tensor[(1, 3600), uint64] */, %var_6908, meta[relay.Constant][16] /* ty=Tensor[(960), float32] */, %219, meta[relay.Constant][17] /* ty=Tensor[(192), int8] */)
}

def @func_3258(%var_3243: uint64, %var_3244: Tensor[(4, 1), uint64], %var_3250: Tensor[(960), float32]) -> (Tensor[(4, 1), uint64], Tensor[(960), float32], Tensor[(36, 2), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) {
  %220 = cast(%var_3243, dtype="uint64") /* ty=uint64 */;
  %221 = cast(%var_3244, dtype="uint64") /* ty=Tensor[(4, 1), uint64] */;
  %222 = cast(meta[relay.Constant][18] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %223 = cast(%var_3250, dtype="float32") /* ty=Tensor[(960), float32] */;
  %224 = cast(meta[relay.Constant][19] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %225 = cast(meta[relay.Constant][20] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %226 = reshape(%222, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %227 = reshape(%223, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %228 = reshape(%224, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
  %229 = reshape(%225, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
  %230 = @func_2272(%226, %227, %228, %229) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
  %231 = logical_xor(%220, %221) /* ty=Tensor[(4, 1), uint64] */;
  %232 = %230.2;
  (%231, %232, meta[relay.Constant][18] /* ty=Tensor[(36, 2), float64] */, %var_3250, meta[relay.Constant][19] /* ty=Tensor[(220), float64] */, meta[relay.Constant][20] /* ty=Tensor[(90), bool] */)
}

def @func_7013() -> Tensor[(1, 8, 4), float64] {
  %233 = @func_6387() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
  cos(%235) /* ty=Tensor[(1, 8, 4), float64] */
}

def @func_6655(%var_6609: Tensor[(12, 8, 4), float64], %var_6653: bool) -> (Tensor[(12, 8, 4), bool], Tensor[(12, 8, 4), uint32], Tensor[(189), float32], bool) {
  %236 = @func_6360() /* ty=(Tensor[(1, 8, 4), float64],) */;
  %237 = %236.0;
  %238 = cast(%237, dtype="bool") /* ty=Tensor[(1, 8, 4), bool] */;
  %239 = cast(%var_6609, dtype="bool") /* ty=Tensor[(12, 8, 4), bool] */;
  %240 = cast(%var_6609, dtype="uint32") /* ty=Tensor[(12, 8, 4), uint32] */;
  %241 = cast(%237, dtype="uint32") /* ty=Tensor[(1, 8, 4), uint32] */;
  %242 = cast(%var_6653, dtype="bool") /* ty=bool */;
  %243 = reshape(%242, newshape=[]) /* ty=bool */;
  %244 = @func_6469(%243) /* ty=(Tensor[(1, 8, 4), float32], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365), float32], Tensor[(7, 3, 9), int32], Tensor[(2016), int32], bool, Tensor[(189), float32]) */;
  %245 = logical_and(%238, %239) /* ty=Tensor[(12, 8, 4), bool] */;
  %246 = minimum(%240, %241) /* ty=Tensor[(12, 8, 4), uint32] */;
  %247 = %244.7;
  (%245, %246, %247, %var_6653)
}

def @func_2328(%var_2310: Tensor[(4, 14, 2), float32], %var_2323: uint16, %var_2324: Tensor[(12, 156), uint16]) -> (Tensor[(4, 14, 2), float32], Tensor[(5, 6, 3), bool], Tensor[(90), bool], Tensor[(12, 13, 12), bool], uint16, Tensor[(12, 156), uint16]) {
  %248 = cast(%var_2310, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  %249 = cast(meta[relay.Constant][21] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %250 = cast(meta[relay.Constant][21] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %251 = reshape(%249, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %252 = reshape(%250, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %253 = @func_521(%251, %252) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
  %254 = cast(%var_2323, dtype="uint16") /* ty=uint16 */;
  %255 = cast(%var_2324, dtype="uint16") /* ty=Tensor[(12, 156), uint16] */;
  %256 = reshape(%254, newshape=[]) /* ty=uint16 */;
  %257 = reshape(%255, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), uint16] */;
  %258 = asinh(%248) /* ty=Tensor[(4, 14, 2), float32] */;
  %259 = %253.0;
  %260 = @func_993(%256, %257) /* ty=Tensor[(12, 13, 12), bool] */;
  (%258, %259, meta[relay.Constant][21] /* ty=Tensor[(90), bool] */, %260, %var_2323, %var_2324)
}

def @func_6213(%var_6177: Tensor[(14, 13, 6), float64], %var_6178: Tensor[(14, 13, 6), float64], %var_6190: Tensor[(20, 180), uint64]) -> (Tensor[(14, 13, 6), uint64], Tensor[(15, 15, 16), uint64], uint64, Tensor[(20, 180), uint64], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) {
  %261 = cast(%var_6178, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %262 = shape_of(%var_6177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_6177, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = not_equal(%263, %264) /* ty=Tensor[(14, 13, 6), bool] */;
  %266 = cast(%var_6177, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %270 = cast(meta[relay.Constant][22] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %271 = cast(%var_6190, dtype="uint64") /* ty=Tensor[(20, 180), uint64] */;
  %272 = reshape(%270, newshape=[]) /* ty=uint64 */;
  %273 = reshape(%271, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %274 = cast(meta[relay.Constant][23] /* ty=Tensor[(45, 2), bool] */, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %275 = cast(meta[relay.Constant][23] /* ty=Tensor[(45, 2), bool] */, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %276 = reshape(%274, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %277 = reshape(%275, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %278 = @func_521(%276, %277) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
  %279 = subtract(%268, %269) /* ty=Tensor[(14, 13, 6), uint64] */;
  %280 = @func_38(%272, %273) /* ty=Tensor[(15, 15, 16), uint64] */;
  %281 = %278.1;
  (%279, %280, meta[relay.Constant][22] /* ty=uint64 */, %var_6190, %281, meta[relay.Constant][23] /* ty=Tensor[(45, 2), bool] */)
}

def @func_4610(%var_4553: Tensor[(13, 5, 5), uint16], %var_4577: Tensor[(56, 26), int64]) -> (Tensor[(13, 5, 5), float32], Tensor[(13, 8, 14), float64], Tensor[(1152), float32], Tensor[(56, 26), int64], Tensor[(13, 5, 5), uint8]) {
  %282 = cast(%var_4553, dtype="uint16") /* ty=Tensor[(13, 5, 5), uint16] */;
  %283 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(13, 5, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 5, 5), uint16] */, dtype="uint16") /* ty=Tensor[(13, 5, 5), uint16] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %286 = maximum(%284, %285) /* ty=Tensor[(13, 5, 5), uint16] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  %288 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%var_4553, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %291 = cast(meta[relay.Constant][25] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %292 = cast(%var_4577, dtype="int64") /* ty=Tensor[(56, 26), int64] */;
  %293 = reshape(%291, newshape=[8, 9, 16]) /* ty=Tensor[(8, 9, 16), float32] */;
  %294 = reshape(%292, newshape=[728, 2]) /* ty=Tensor[(728, 2), int64] */;
  %295 = @func_3224(%293, %294) /* ty=(Tensor[(8, 9, 16), float32], Tensor[(13, 8, 14), float64], Tensor[(728, 2), int64]) */;
  %296 = cast(%var_4553, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %297 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%286, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = greater_equal(%298, %299) /* ty=Tensor[(13, 5, 5), bool] */;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  %302 = sigmoid(%301) /* ty=Tensor[(13, 5, 5), float32] */;
  %303 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 5, 5), uint16] */, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %304 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_4553, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = logical_or(%305, %306) /* ty=Tensor[(13, 5, 5), bool] */;
  %308 = cast(%307, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
  %309 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%302, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %312 = divide(%289, %290) /* ty=Tensor[(13, 5, 5), float32] */;
  %313 = %295.1;
  %314 = minimum(%310, %311) /* ty=Tensor[(13, 5, 5), uint8] */;
  (%312, %313, meta[relay.Constant][25] /* ty=Tensor[(1152), float32] */, %var_4577, %314)
}

def @func_2819(%var_2810: Tensor[(13, 8, 14), int64], %var_2811: Tensor[(13, 8, 14), int64]) -> (Tensor[(13, 8, 14), float64],) {
  %315 = cast(%var_2811, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
  %316 = shape_of(%var_2810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%var_2810, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %319 = bitwise_or(%317, %318) /* ty=Tensor[(13, 8, 14), int64] */;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(13, 8, 14), float64] */;
  %321 = tan(%320) /* ty=Tensor[(13, 8, 14), float64] */;
  (%321,)
}

def @func_6088(%var_6082: Tensor[(12, 11, 13), float32]) -> Tensor[(12, 11, 13), float32] {
  %322 = cast(%var_6082, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
  cosh(%322) /* ty=Tensor[(12, 11, 13), float32] */
}

def @func_38(%var_21: uint64, %var_22: Tensor[(15, 15, 16), uint64]) -> Tensor[(15, 15, 16), uint64] {
  %323 = cast(%var_21, dtype="uint64") /* ty=uint64 */;
  %324 = cast(%var_22, dtype="uint64") /* ty=Tensor[(15, 15, 16), uint64] */;
  add(%323, %324) /* ty=Tensor[(15, 15, 16), uint64] */
}

def @func_5214(%var_5201: int32, %var_5202: Tensor[(90), int32]) -> (Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(15, 13, 4), float32], Tensor[(6, 5, 11), int64], Tensor[(330), int64]) {
  %325 = cast(%var_5201, dtype="int32") /* ty=int32 */;
  %326 = cast(%var_5202, dtype="int32") /* ty=Tensor[(90), int32] */;
  %327 = reshape(%325, newshape=[]) /* ty=int32 */;
  %328 = reshape(%326, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), int32] */;
  %329 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %330 = atanh(%329) /* ty=Tensor[(15, 13, 4), float32] */;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %332 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), int64] */, dtype="int64") /* ty=Tensor[(330), int64] */;
  %333 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), int64] */, dtype="int64") /* ty=Tensor[(330), int64] */;
  %334 = reshape(%332, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), int64] */;
  %335 = reshape(%333, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), int64] */;
  %336 = @func_5117(%334, %335) /* ty=(Tensor[(6, 5, 11), int64],) */;
  %337 = @func_4784(%327, %328) /* ty=Tensor[(15, 6, 1), int32] */;
  %338 = atan(%331) /* ty=Tensor[(15, 13, 4), float32] */;
  %339 = %336.0;
  (%337, %var_5201, %var_5202, %338, %339, meta[relay.Constant][27] /* ty=Tensor[(330), int64] */)
}

def @func_6245() -> (Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) {
  %340 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 8, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
  %341 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 8, 4), float64] */, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
  %342 = sinh(%340) /* ty=Tensor[(1, 8, 4), float64] */;
  %343 = log(%341) /* ty=Tensor[(1, 8, 4), float32] */;
  (%342, %343)
}

def @func_7017() -> Tensor[(1, 8, 4), float32] {
  %344 = @func_6528() /* ty=(Tensor[(1, 8, 4), float32], Tensor[(80), uint32], Tensor[(1, 72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90, 1), bool]) */;
  %344.0
}

def @func_4640(%var_4620: int64, %var_4636: Tensor[(12, 15, 10), int64]) -> (Tensor[(2, 14, 6), bool], Tensor[(12, 15, 10), bool]) {
  %345 = cast(%var_4620, dtype="bool") /* ty=bool */;
  %346 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 14, 6), int64] */, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
  %347 = cast(%var_4620, dtype="bool") /* ty=bool */;
  %348 = cast(%var_4636, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
  %349 = greater(%345, %346) /* ty=Tensor[(2, 14, 6), bool] */;
  %350 = less(%347, %348) /* ty=Tensor[(12, 15, 10), bool] */;
  (%349, %350)
}

def @func_1486(%var_1464: Tensor[(8, 8, 3), int8], %var_1465: Tensor[(8, 8, 3), int8]) -> (Tensor[(8, 8, 3), int8], Tensor[(15, 15, 16), uint64], uint64, Tensor[(3600), uint64]) {
  %351 = cast(%var_1465, dtype="int8") /* ty=Tensor[(8, 8, 3), int8] */;
  %352 = shape_of(%var_1464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%var_1464, dtype="int8") /* ty=Tensor[(8, 8, 3), int8] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %355 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %356 = cast(meta[relay.Constant][31] /* ty=Tensor[(3600), uint64] */, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %357 = reshape(%355, newshape=[]) /* ty=uint64 */;
  %358 = reshape(%356, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %359 = bitwise_and(%353, %354) /* ty=Tensor[(8, 8, 3), int8] */;
  %360 = @func_38(%357, %358) /* ty=Tensor[(15, 15, 16), uint64] */;
  (%359, %360, meta[relay.Constant][30] /* ty=uint64 */, meta[relay.Constant][31] /* ty=Tensor[(3600), uint64] */)
}

def @func_6874() -> (Tensor[(1, 8, 4), float64],) {
  %361 = @func_6860() /* ty=Tensor[(1, 8, 4), float64] */;
  (%361,)
}

def @func_1271(%var_1248: Tensor[(5, 4, 4), uint32], %var_1249: Tensor[(5, 4, 4), uint32], %var_1259: Tensor[(26), float32]) -> (Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float32], Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(26), float32]) {
  %362 = cast(%var_1249, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
  %363 = shape_of(%var_1248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_1248, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %366 = cast(%var_1249, dtype="float32") /* ty=Tensor[(5, 4, 4), float32] */;
  %367 = cast(%var_1259, dtype="float32") /* ty=Tensor[(26), float32] */;
  %368 = cast(meta[relay.Constant][32] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %369 = reshape(%367, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %370 = reshape(%368, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %371 = @func_1091(%369, %370) /* ty=(Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) */;
  %372 = cast(%var_1259, dtype="float32") /* ty=Tensor[(26), float32] */;
  %373 = bitwise_and(%364, %365) /* ty=Tensor[(5, 4, 4), uint32] */;
  %374 = sigmoid(%366) /* ty=Tensor[(5, 4, 4), float32] */;
  %375 = %371.1;
  %376 = erf(%372) /* ty=Tensor[(26), float32] */;
  (%373, %374, %375, meta[relay.Constant][32] /* ty=Tensor[(1365), float32] */, %376)
}

def @func_6528() -> (Tensor[(1, 8, 4), float32], Tensor[(80), uint32], Tensor[(1, 72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90, 1), bool]) {
  %377 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 72), float64] */, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %378 = cast(meta[relay.Constant][34] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %379 = cast(meta[relay.Constant][35] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %380 = cast(meta[relay.Constant][36] /* ty=Tensor[(90, 1), bool] */, dtype="bool") /* ty=Tensor[(90, 1), bool] */;
  %381 = reshape(%377, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %382 = reshape(%378, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %383 = reshape(%379, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
  %384 = reshape(%380, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
  %385 = @func_2272(%381, %382, %383, %384) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
  %386 = @func_6288() /* ty=Tensor[(1, 8, 4), float32] */;
  %387 = %385.5;
  (%386, %387, meta[relay.Constant][33] /* ty=Tensor[(1, 72), float64] */, meta[relay.Constant][34] /* ty=Tensor[(960), float32] */, meta[relay.Constant][35] /* ty=Tensor[(220), float64] */, meta[relay.Constant][36] /* ty=Tensor[(90, 1), bool] */)
}

def @func_4784(%var_4766: int32, %var_4767: Tensor[(15, 6, 1), int32]) -> Tensor[(15, 6, 1), int32] {
  %388 = cast(%var_4766, dtype="int32") /* ty=int32 */;
  %389 = cast(%var_4767, dtype="int32") /* ty=Tensor[(15, 6, 1), int32] */;
  right_shift(%388, %389) /* ty=Tensor[(15, 6, 1), int32] */
}

def @func_1573(%var_1556: Tensor[(8, 7, 5), float32]) -> (Tensor[(8, 7, 5), float64],) {
  %390 = cast(%var_1556, dtype="float32") /* ty=Tensor[(8, 7, 5), float32] */;
  %391 = log10(%390) /* ty=Tensor[(8, 7, 5), float32] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(8, 7, 5), float64] */;
  %393 = asinh(%392) /* ty=Tensor[(8, 7, 5), float64] */;
  (%393,)
}

def @func_1867(%var_1775: Tensor[(8, 3, 13), int8], %var_1776: Tensor[(8, 3, 13), int8], %var_1793: Tensor[(8, 3, 13), int8], %var_1799: uint16, %var_1806: Tensor[(15, 6), bool], %var_1821: Tensor[(1, 1365), float32]) -> (Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) {
  %394 = cast(%var_1776, dtype="bool") /* ty=Tensor[(8, 3, 13), bool] */;
  %395 = shape_of(%var_1775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%var_1775, dtype="bool") /* ty=Tensor[(8, 3, 13), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = cast(%var_1793, dtype="uint8") /* ty=Tensor[(8, 3, 13), uint8] */;
  %399 = shape_of(%var_1775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_1775, dtype="uint8") /* ty=Tensor[(8, 3, 13), uint8] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %402 = cast(%var_1799, dtype="uint16") /* ty=uint16 */;
  %403 = cast(meta[relay.Constant][37] /* ty=Tensor[(1872, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1872, 1), uint16] */;
  %404 = reshape(%402, newshape=[]) /* ty=uint16 */;
  %405 = reshape(%403, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), uint16] */;
  %406 = cast(%var_1806, dtype="bool") /* ty=Tensor[(15, 6), bool] */;
  %407 = cast(%var_1806, dtype="bool") /* ty=Tensor[(15, 6), bool] */;
  %408 = reshape(%406, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %409 = reshape(%407, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %410 = @func_521(%408, %409) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
  %411 = cast(meta[relay.Constant][38] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %412 = cast(meta[relay.Constant][38] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %413 = reshape(%411, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %414 = reshape(%412, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %415 = @func_470(%413, %414) /* ty=(Tensor[(7, 3, 9), int32],) */;
  %416 = cast(%var_1821, dtype="float32") /* ty=Tensor[(1, 1365), float32] */;
  %417 = reshape(%416, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %418 = cast(%var_1799, dtype="uint64") /* ty=uint64 */;
  %419 = cast(meta[relay.Constant][39] /* ty=Tensor[(3600), uint64] */, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %420 = reshape(%418, newshape=[]) /* ty=uint64 */;
  %421 = reshape(%419, newshape=[3600]) /* ty=Tensor[(3600), uint64] */;
  %422 = @func_239(%420, %421) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), uint32], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), int32]) */;
  %423 = cast(meta[relay.Constant][37] /* ty=Tensor[(1872, 1), uint16] */, dtype="float64") /* ty=Tensor[(1872, 1), float64] */;
  %424 = log(%423) /* ty=Tensor[(1872, 1), float64] */;
  %425 = cast(meta[relay.Constant][37] /* ty=Tensor[(1872, 1), uint16] */, dtype="int64") /* ty=Tensor[(1872, 1), int64] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(2), int32] */;
  %427 = cast(%424, dtype="int64") /* ty=Tensor[(1872, 1), int64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %429 = bitwise_or(%427, %428) /* ty=Tensor[(1872, ?), int64] */;
  %430 = cast(%429, dtype="int32") /* ty=Tensor[(1872, ?), int32] */;
  %431 = shape_of(%424, dtype="int32") /* ty=Tensor[(2), int32] */;
  %432 = cast(%424, dtype="int32") /* ty=Tensor[(1872, 1), int32] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %434 = less(%396, %397) /* ty=Tensor[(8, 3, 13), bool] */;
  %435 = bitwise_xor(%400, %401) /* ty=Tensor[(8, 3, 13), uint8] */;
  %436 = @func_993(%404, %405) /* ty=Tensor[(12, 13, 12), bool] */;
  %437 = %410.0;
  %438 = %415.0;
  %439 = @func_451(%417) /* ty=Tensor[(7, 13, 15), bool] */;
  %440 = %422.4;
  %441 = bitwise_and(%432, %433) /* ty=Tensor[(1872, ?), int32] */;
  (%434, %435, %436, %var_1799, %437, %var_1806, %438, meta[relay.Constant][38] /* ty=Tensor[(189), int32] */, %439, %var_1821, %440, meta[relay.Constant][39] /* ty=Tensor[(3600), uint64] */, %441)
}

def @func_4005(%var_3988: Tensor[(16, 6, 8), float32]) -> Tensor[(16, 6, 8), float32] {
  %442 = cast(%var_3988, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  sin(%442) /* ty=Tensor[(16, 6, 8), float32] */
}

def @func_6499(%var_6493: float32, %var_6494: Tensor[(11, 16, 15), float32]) -> Tensor[(11, 16, 15), float32] {
  %443 = cast(%var_6493, dtype="float32") /* ty=float32 */;
  %444 = cast(%var_6494, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  floor_divide(%443, %444) /* ty=Tensor[(11, 16, 15), float32] */
}

def @func_600(%var_587: Tensor[(10, 2, 11), float64], %var_592: Tensor[(1365), float32]) -> (Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) {
  %445 = cast(-4.01712f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %446 = cast(%var_587, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %447 = cast(%var_592, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %448 = reshape(%447, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %449 = power(%445, %446) /* ty=Tensor[(10, 2, 11), float64] */;
  %450 = @func_451(%448) /* ty=Tensor[(7, 13, 15), bool] */;
  (%449, %450, %var_592)
}

def @func_6288() -> Tensor[(1, 8, 4), float32] {
  %451 = @func_6245() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) */;
  %451.1
}

def @func_6360() -> (Tensor[(1, 8, 4), float64],) {
  %452 = @func_6264() /* ty=Tensor[(1, 8, 4), float64] */;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
  %454 = log2(%453) /* ty=Tensor[(1, 8, 4), float64] */;
  (%454,)
}

def @func_6469(%var_6450: bool) -> (Tensor[(1, 8, 4), float32], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365), float32], Tensor[(7, 3, 9), int32], Tensor[(2016), int32], bool, Tensor[(189), float32]) {
  %455 = @func_6245() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) */;
  %456 = cast(meta[relay.Constant][40] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %457 = cast(meta[relay.Constant][41] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %458 = reshape(%456, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %459 = reshape(%457, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %460 = @func_1091(%458, %459) /* ty=(Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) */;
  %461 = cast(meta[relay.Constant][42] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %462 = cast(meta[relay.Constant][42] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %463 = cast(%var_6450, dtype="bool") /* ty=bool */;
  %464 = cast(meta[relay.Constant][43] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %465 = reshape(%461, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), int32] */;
  %466 = reshape(%462, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), int32] */;
  %467 = reshape(%463, newshape=[]) /* ty=bool */;
  %468 = reshape(%464, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %469 = @func_3486(%465, %466, %467, %468) /* ty=(Tensor[(16, 14, 9), int32], Tensor[(11, 13, 11), bool], Tensor[(1573), bool], Tensor[(312), int8], Tensor[(1365), float32], Tensor[(189), int32], Tensor[(6, 4, 8), float32], Tensor[(7, 3, 9), int32], Tensor[(7, 3, 9), bool]) */;
  %470 = cast(meta[relay.Constant][43] /* ty=Tensor[(189), int32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %471 = %455.1;
  %472 = %460.1;
  %473 = %469.7;
  %474 = sin(%470) /* ty=Tensor[(189), float32] */;
  (%471, %472, meta[relay.Constant][40] /* ty=Tensor[(26), float32] */, meta[relay.Constant][41] /* ty=Tensor[(1365), float32] */, %473, meta[relay.Constant][42] /* ty=Tensor[(2016), int32] */, %var_6450, %474)
}

def @func_2272(%var_2245: Tensor[(4, 9, 2), float64], %var_2262: Tensor[(960), float32], %var_2263: Tensor[(110, 2), float64], %var_2270: Tensor[(45, 2), bool]) -> (Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) {
  %475 = cast(%var_2245, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
  %476 = asinh(%475) /* ty=Tensor[(4, 9, 2), float64] */;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
  %478 = sin(%477) /* ty=Tensor[(4, 9, 2), float32] */;
  %479 = cast(%476, dtype="int16") /* ty=Tensor[(4, 9, 2), int16] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="int16") /* ty=Tensor[(4, 9, 2), int16] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %483 = cast(%var_2262, dtype="float32") /* ty=Tensor[(960), float32] */;
  %484 = cast(%var_2263, dtype="float64") /* ty=Tensor[(110, 2), float64] */;
  %485 = cast(meta[relay.Constant][44] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %486 = cast(meta[relay.Constant][45] /* ty=Tensor[(80), uint32] */, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %487 = reshape(%483, newshape=[16, 4, 15]) /* ty=Tensor[(16, 4, 15), float32] */;
  %488 = reshape(%484, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %489 = reshape(%485, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %490 = reshape(%486, newshape=[80]) /* ty=Tensor[(80), uint32] */;
  %491 = @func_1382(%487, %488, %489, %490) /* ty=(Tensor[(16, 4, 15), float32], Tensor[(220), float64], Tensor[(7, 13, 15), bool], Tensor[(5, 4, 4), float32], Tensor[(80), uint32], Tensor[(26), float32], Tensor[(16, 4, 15), int8], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(189), int32], Tensor[(7, 3, 9), float64], Tensor[(7, 13, 15), bool]) */;
  %492 = cast(%var_2270, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %493 = cast(%var_2270, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %494 = reshape(%492, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %495 = reshape(%493, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %496 = @func_521(%494, %495) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
  %497 = bitwise_or(%481, %482) /* ty=Tensor[(4, 9, 2), int16] */;
  %498 = %491.2;
  %499 = %496.1;
  (%497, %498, %var_2262, %var_2263, meta[relay.Constant][44] /* ty=Tensor[(1365), float32] */, meta[relay.Constant][45] /* ty=Tensor[(80), uint32] */, %499, %var_2270)
}

def @func_6387() -> (Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) {
  %500 = @func_6360() /* ty=(Tensor[(1, 8, 4), float64],) */;
  %501 = @func_6264() /* ty=Tensor[(1, 8, 4), float64] */;
  %502 = %500.0;
  (%501, %502)
}

def @func_5881(%var_5843: Tensor[(7, 3, 12), int64], %var_5844: Tensor[(7, 3, 12), int64], %var_5851: Tensor[(960), float32], %var_5852: Tensor[(55, 4), float64]) -> (Tensor[(4, 9, 2), int16], Tensor[(72), float64], Tensor[(960), float32], Tensor[(55, 4), float64], Tensor[(90), bool], Tensor[(7, 3, 12), float64], Tensor[(7, 3, 12), float32]) {
  %503 = cast(meta[relay.Constant][46] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %504 = cast(%var_5851, dtype="float32") /* ty=Tensor[(960), float32] */;
  %505 = cast(%var_5852, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %506 = cast(meta[relay.Constant][47] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %507 = reshape(%503, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %508 = reshape(%504, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %509 = reshape(%505, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
  %510 = reshape(%506, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
  %511 = @func_2272(%507, %508, %509, %510) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
  %512 = cast(%var_5843, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %513 = atanh(%512) /* ty=Tensor[(7, 3, 12), float32] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(7, 3, 12), float64] */;
  %515 = cast(%var_5844, dtype="int64") /* ty=Tensor[(7, 3, 12), int64] */;
  %516 = shape_of(%var_5843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_5843, dtype="int64") /* ty=Tensor[(7, 3, 12), int64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %519 = add(%517, %518) /* ty=Tensor[(7, 3, 12), int64] */;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %521 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%513, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %524 = %511.0;
  %525 = cos(%514) /* ty=Tensor[(7, 3, 12), float64] */;
  %526 = floor_divide(%522, %523) /* ty=Tensor[(7, 3, 12), float32] */;
  (%524, meta[relay.Constant][46] /* ty=Tensor[(72), float64] */, %var_5851, %var_5852, meta[relay.Constant][47] /* ty=Tensor[(90), bool] */, %525, %526)
}

def @func_3864(%var_3848: bool, %var_3849: Tensor[(8, 8, 12), bool], %var_3859: Tensor[(72), float64], %var_3860: Tensor[(960), float32], %var_3861: Tensor[(220), float64], %var_3862: Tensor[(90), bool]) -> (Tensor[(8, 8, 12), float64], Tensor[(110, 2), float64], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) {
  %527 = cast(%var_3848, dtype="bool") /* ty=bool */;
  %528 = cast(%var_3849, dtype="bool") /* ty=Tensor[(8, 8, 12), bool] */;
  %529 = logical_and(%527, %528) /* ty=Tensor[(8, 8, 12), bool] */;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
  %531 = cast(%var_3848, dtype="float64") /* ty=float64 */;
  %532 = cast(%var_3859, dtype="float64") /* ty=Tensor[(72), float64] */;
  %533 = cast(%var_3860, dtype="float32") /* ty=Tensor[(960), float32] */;
  %534 = cast(%var_3861, dtype="float64") /* ty=Tensor[(220), float64] */;
  %535 = cast(%var_3862, dtype="bool") /* ty=Tensor[(90), bool] */;
  %536 = reshape(%532, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %537 = reshape(%533, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %538 = reshape(%534, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
  %539 = reshape(%535, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
  %540 = @func_2272(%536, %537, %538, %539) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
  %541 = mod(%530, %531) /* ty=Tensor[(8, 8, 12), float64] */;
  %542 = %540.3;
  (%541, %542, %var_3859, %var_3860, %var_3861, %var_3862)
}

def @func_4526(%var_4475: Tensor[(10, 12, 1), int8], %var_4510: Tensor[(1800, 2), uint64], %var_4518: Tensor[(4), uint64], %var_4519: Tensor[(10, 96), float32]) -> (Tensor[(10, 12, 1), bool], Tensor[(13, 8, 14), float64], Tensor[(1456), int64], Tensor[(10, 12, 1), bool], Tensor[(15, 15, 16), uint64], Tensor[(1800, 2), uint64], Tensor[(10, 12, 1), float32], Tensor[(36, 2), float64], Tensor[(4), uint64], Tensor[(10, 96), float32]) {
  %543 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 12, 1), int8] */, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %544 = cast(%var_4475, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %545 = cast(meta[relay.Constant][49] /* ty=Tensor[(1456), int64] */, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %546 = cast(meta[relay.Constant][49] /* ty=Tensor[(1456), int64] */, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %547 = reshape(%545, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %548 = reshape(%546, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %549 = @func_2819(%547, %548) /* ty=(Tensor[(13, 8, 14), float64],) */;
  %550 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 12, 1), int8] */, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %551 = cast(%var_4475, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %552 = cast(meta[relay.Constant][50] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %553 = cast(%var_4510, dtype="uint64") /* ty=Tensor[(1800, 2), uint64] */;
  %554 = reshape(%552, newshape=[]) /* ty=uint64 */;
  %555 = reshape(%553, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %556 = cast(%var_4475, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %557 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 12, 1), int8] */, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %558 = logical_and(%556, %557) /* ty=Tensor[(10, 12, 1), bool] */;
  %559 = cast(meta[relay.Constant][50] /* ty=uint64 */, dtype="float32") /* ty=float32 */;
  %560 = cast(%558, dtype="float32") /* ty=Tensor[(10, 12, 1), float32] */;
  %561 = cast(meta[relay.Constant][50] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %562 = cast(%var_4518, dtype="uint64") /* ty=Tensor[(4), uint64] */;
  %563 = cast(%var_4519, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %564 = reshape(%561, newshape=[]) /* ty=uint64 */;
  %565 = reshape(%562, newshape=[4, 1]) /* ty=Tensor[(4, 1), uint64] */;
  %566 = reshape(%563, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %567 = @func_3258(%564, %565, %566) /* ty=(Tensor[(4, 1), uint64], Tensor[(960), float32], Tensor[(36, 2), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) */;
  %568 = not_equal(%543, %544) /* ty=Tensor[(10, 12, 1), bool] */;
  %569 = %549.0;
  %570 = greater(%550, %551) /* ty=Tensor[(10, 12, 1), bool] */;
  %571 = @func_38(%554, %555) /* ty=Tensor[(15, 15, 16), uint64] */;
  %572 = divide(%559, %560) /* ty=Tensor[(10, 12, 1), float32] */;
  %573 = %567.2;
  (%568, %569, meta[relay.Constant][49] /* ty=Tensor[(1456), int64] */, %570, %571, %var_4510, %572, %573, %var_4518, %var_4519)
}

def @func_6957() -> Tensor[(?, 8, 4), float32] {
  %574 = @func_6387() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) */;
  %575 = %574.1;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
  %577 = erf(%576) /* ty=Tensor[(1, 8, 4), float32] */;
  %578 = cast(%575, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%580, %581) /* ty=Tensor[(?, 8, 4), float32] */
}

def @func_3224(%var_3218: Tensor[(8, 9, 16), float32], %var_3222: Tensor[(728, 2), int64]) -> (Tensor[(8, 9, 16), float32], Tensor[(13, 8, 14), float64], Tensor[(728, 2), int64]) {
  %582 = cast(%var_3218, dtype="float32") /* ty=Tensor[(8, 9, 16), float32] */;
  %583 = cast(%var_3222, dtype="int64") /* ty=Tensor[(728, 2), int64] */;
  %584 = cast(%var_3222, dtype="int64") /* ty=Tensor[(728, 2), int64] */;
  %585 = reshape(%583, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %586 = reshape(%584, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %587 = @func_2819(%585, %586) /* ty=(Tensor[(13, 8, 14), float64],) */;
  %588 = sigmoid(%582) /* ty=Tensor[(8, 9, 16), float32] */;
  %589 = %587.0;
  (%588, %589, %var_3222)
}

def @main(%var_7034: Tensor[(14, 6, 1), bool], %var_7063: Tensor[(384), float64]) -> (Tensor[(14, 6, 1), bool], Tensor[(12, 13, 12), bool], Tensor[(936, 2), uint16], Tensor[(384), float64], Tensor[(189), float64]) {
  %590 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %591 = cast(%var_7034, dtype="bool") /* ty=Tensor[(14, 6, 1), bool] */;
  %592 = cast(True /* ty=bool */, dtype="uint16") /* ty=uint16 */;
  %593 = cast(meta[relay.Constant][51] /* ty=Tensor[(936, 2), uint16] */, dtype="uint16") /* ty=Tensor[(936, 2), uint16] */;
  %594 = reshape(%592, newshape=[]) /* ty=uint16 */;
  %595 = reshape(%593, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), uint16] */;
  %596 = cast(%var_7063, dtype="float64") /* ty=Tensor[(384), float64] */;
  %597 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %598 = reshape(%596, newshape=[12, 8, 4]) /* ty=Tensor[(12, 8, 4), float64] */;
  %599 = reshape(%597, newshape=[]) /* ty=bool */;
  %600 = @func_6655(%598, %599) /* ty=(Tensor[(12, 8, 4), bool], Tensor[(12, 8, 4), uint32], Tensor[(189), float32], bool) */;
  %601 = %600.2;
  %602 = cast(%601, dtype="float64") /* ty=Tensor[(189), float64] */;
  %603 = logical_or(%590, %591) /* ty=Tensor[(14, 6, 1), bool] */;
  %604 = @func_993(%594, %595) /* ty=Tensor[(12, 13, 12), bool] */;
  %605 = acos(%602) /* ty=Tensor[(189), float64] */;
  (%603, %604, meta[relay.Constant][51] /* ty=Tensor[(936, 2), uint16] */, %var_7063, %605)
}

def @func_993(%var_983: uint16, %var_984: Tensor[(12, 13, 12), uint16]) -> Tensor[(12, 13, 12), bool] {
  %606 = cast(%var_983, dtype="bool") /* ty=bool */;
  %607 = cast(%var_984, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
  less_equal(%606, %607) /* ty=Tensor[(12, 13, 12), bool] */
}

def @func_2957(%var_2946: Tensor[(10, 1, 5), float64]) -> Tensor[(10, 12, 5), float64] {
  %608 = cast(%var_2946, dtype="float64") /* ty=Tensor[(10, 1, 5), float64] */;
  %609 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  floor_mod(%608, %609) /* ty=Tensor[(10, 12, 5), float64] */
}

def @func_6076(%var_6064: Tensor[(16, 1, 14), float64]) -> (Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64]) {
  %610 = cast(%var_6064, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
  %611 = cast(%var_6064, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
  %612 = log10(%611) /* ty=Tensor[(16, 1, 14), float32] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
  %614 = acos(%610) /* ty=Tensor[(16, 1, 14), float64] */;
  %615 = cosh(%613) /* ty=Tensor[(16, 1, 14), float64] */;
  (%614, %615)
}

def @func_320(%var_317: Tensor[(5, 11, 4), float64]) -> Tensor[(5, 11, 4), float64] {
  %616 = cast(%var_317, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  exp(%616) /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_3172(%var_3160: bool, %var_3161: Tensor[(11, 13, 11), bool], %var_3166: Tensor[(312), int8], %var_3168: Tensor[(1365), float32]) -> (Tensor[(11, 13, 11), bool], uint16, Tensor[(312), int8], Tensor[(90), bool], Tensor[(1365), float32]) {
  %617 = cast(%var_3160, dtype="bool") /* ty=bool */;
  %618 = cast(%var_3161, dtype="bool") /* ty=Tensor[(11, 13, 11), bool] */;
  %619 = cast(%var_3166, dtype="int8") /* ty=Tensor[(312), int8] */;
  %620 = cast(%var_3166, dtype="int8") /* ty=Tensor[(312), int8] */;
  %621 = cast(%var_3166, dtype="int8") /* ty=Tensor[(312), int8] */;
  %622 = cast(%var_3160, dtype="uint16") /* ty=uint16 */;
  %623 = cast(meta[relay.Constant][53] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %624 = cast(%var_3168, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %625 = reshape(%619, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %626 = reshape(%620, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %627 = reshape(%621, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %628 = reshape(%622, newshape=[]) /* ty=uint16 */;
  %629 = reshape(%623, newshape=[15, 6]) /* ty=Tensor[(15, 6), bool] */;
  %630 = reshape(%624, newshape=[1, 1365]) /* ty=Tensor[(1, 1365), float32] */;
  %631 = @func_1867(%625, %626, %627, %628, %629, %630) /* ty=(Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) */;
  %632 = logical_or(%617, %618) /* ty=Tensor[(11, 13, 11), bool] */;
  %633 = %631.3;
  (%632, %633, %var_3166, meta[relay.Constant][53] /* ty=Tensor[(90), bool] */, %var_3168)
}

def @func_451(%var_414: Tensor[(7, 13, 15), float32]) -> Tensor[(7, 13, 15), bool] {
  %634 = cast(%var_414, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %635 = sigmoid(%634) /* ty=Tensor[(7, 13, 15), float32] */;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(7, 13, 15), float64] */;
  %637 = rsqrt(%636) /* ty=Tensor[(7, 13, 15), float64] */;
  %638 = cast(%635, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%640, %641) /* ty=Tensor[(7, 13, 15), bool] */
}

def @func_470(%var_458: Tensor[(7, 3, 9), int32], %var_459: Tensor[(7, 3, 9), int32]) -> (Tensor[(7, 3, 9), int32],) {
  %642 = cast(%var_459, dtype="int32") /* ty=Tensor[(7, 3, 9), int32] */;
  %643 = shape_of(%var_458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_458, dtype="int32") /* ty=Tensor[(7, 3, 9), int32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %646 = maximum(%644, %645) /* ty=Tensor[(7, 3, 9), int32] */;
  (%646,)
}

def @func_6860() -> Tensor[(1, 8, 4), float64] {
  %647 = @func_6387() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) */;
  %647.0
}

def @func_3367(%var_3349: Tensor[(312), int8], %var_3362: Tensor[(72), float64], %var_3363: Tensor[(960), float32]) -> (Tensor[(4, 14, 5), int64], Tensor[(12, 13, 12), bool], Tensor[(312), int8], uint16, Tensor[(90), bool], Tensor[(1365), float32], Tensor[(45, 2), bool], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64]) {
  %648 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
  %649 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(meta[relay.Constant][54] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %652 = cast(%var_3349, dtype="int8") /* ty=Tensor[(312), int8] */;
  %653 = cast(%var_3349, dtype="int8") /* ty=Tensor[(312), int8] */;
  %654 = cast(%var_3349, dtype="int8") /* ty=Tensor[(312), int8] */;
  %655 = cast(meta[relay.Constant][56] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %656 = cast(meta[relay.Constant][57] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %657 = cast(meta[relay.Constant][58] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %658 = reshape(%652, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %659 = reshape(%653, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %660 = reshape(%654, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %661 = reshape(%655, newshape=[]) /* ty=uint16 */;
  %662 = reshape(%656, newshape=[15, 6]) /* ty=Tensor[(15, 6), bool] */;
  %663 = reshape(%657, newshape=[1, 1365]) /* ty=Tensor[(1, 1365), float32] */;
  %664 = @func_1867(%658, %659, %660, %661, %662, %663) /* ty=(Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) */;
  %665 = cast(%var_3362, dtype="float64") /* ty=Tensor[(72), float64] */;
  %666 = cast(%var_3363, dtype="float32") /* ty=Tensor[(960), float32] */;
  %667 = cast(meta[relay.Constant][59] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %668 = cast(meta[relay.Constant][57] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %669 = reshape(%665, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %670 = reshape(%666, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %671 = reshape(%667, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
  %672 = reshape(%668, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
  %673 = @func_2272(%669, %670, %671, %672) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
  %674 = left_shift(%650, %651) /* ty=Tensor[(4, 14, 5), int64] */;
  %675 = %664.2;
  %676 = %673.7;
  (%674, %675, %var_3349, meta[relay.Constant][56] /* ty=uint16 */, meta[relay.Constant][57] /* ty=Tensor[(90), bool] */, meta[relay.Constant][58] /* ty=Tensor[(1365), float32] */, %676, %var_3362, %var_3363, meta[relay.Constant][59] /* ty=Tensor[(220), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_323(%var_321: Tensor[(5, 11, 4), float64]) -> Tensor[(5, 11, 4), float64] {
  @func_320(%var_321) /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_6874() -> (Tensor[(1, 8, 4), float64],) {
  %0 = @func_6860() /* ty=Tensor[(1, 8, 4), float64] */;
  (%0,)
}

def @func_454(%var_452: Tensor[(7, 13, 15), float32]) -> Tensor[(7, 13, 15), bool] {
  @func_451(%var_452) /* ty=Tensor[(7, 13, 15), bool] */
}

def @func_243(%var_241: uint64, %var_242: Tensor[(3600), uint64]) -> (Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), uint32], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), int32]) {
  @func_239(%var_241, %var_242) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), uint32], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), int32]) */
}

def @func_3491(%var_3487: Tensor[(16, 14, 9), int32], %var_3488: Tensor[(16, 14, 9), int32], %var_3489: bool, %var_3490: Tensor[(7, 3, 9), int32]) -> (Tensor[(16, 14, 9), int32], Tensor[(11, 13, 11), bool], Tensor[(1573), bool], Tensor[(312), int8], Tensor[(1365), float32], Tensor[(189), int32], Tensor[(6, 4, 8), float32], Tensor[(7, 3, 9), int32], Tensor[(7, 3, 9), bool]) {
  %36 = fn (%var_3443: Tensor[(16, 14, 9), int32], %var_3444: Tensor[(16, 14, 9), int32], %var_3453: bool, %var_3480: Tensor[(7, 3, 9), int32]) -> (Tensor[(16, 14, 9), int32], Tensor[(11, 13, 11), bool], Tensor[(1573), bool], Tensor[(312), int8], Tensor[(1365), float32], Tensor[(189), int32], Tensor[(6, 4, 8), float32], Tensor[(7, 3, 9), int32], Tensor[(7, 3, 9), bool]) {
    %1 = cast(%var_3444, dtype="int32") /* ty=Tensor[(16, 14, 9), int32] */;
    %2 = shape_of(%var_3443, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%var_3443, dtype="int32") /* ty=Tensor[(16, 14, 9), int32] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %5 = cast(%var_3453, dtype="bool") /* ty=bool */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1573), bool] */, dtype="bool") /* ty=Tensor[(1573), bool] */;
    %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), int8] */, dtype="int8") /* ty=Tensor[(312), int8] */;
    %8 = cast(meta[relay.Constant][2] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %9 = reshape(%5, newshape=[]) /* ty=bool */;
    %10 = reshape(%6, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), bool] */;
    %11 = reshape(%7, newshape=[312]) /* ty=Tensor[(312), int8] */;
    %12 = reshape(%8, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %13 = @func_3172(%9, %10, %11, %12) /* ty=(Tensor[(11, 13, 11), bool], uint16, Tensor[(312), int8], Tensor[(90), bool], Tensor[(1365), float32]) */;
    %14 = cast(%var_3453, dtype="float32") /* ty=float32 */;
    %15 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 4, 8), bool] */, dtype="float32") /* ty=Tensor[(6, 4, 8), float32] */;
    %16 = cast(meta[relay.Constant][3] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
    %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
    %18 = cast(meta[relay.Constant][3] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
    %19 = reshape(%17, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
    %20 = reshape(%18, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
    %21 = @func_470(%19, %20) /* ty=(Tensor[(7, 3, 9), int32],) */;
    %22 = %21.0;
    %23 = cast(%22, dtype="int32") /* ty=Tensor[(7, 3, 9), int32] */;
    %24 = reshape(%16, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
    %25 = reshape(%23, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
    %26 = @func_470(%24, %25) /* ty=(Tensor[(7, 3, 9), int32],) */;
    %27 = cast(%var_3480, dtype="bool") /* ty=Tensor[(7, 3, 9), bool] */;
    %28 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %29 = cast(%22, dtype="bool") /* ty=Tensor[(7, 3, 9), bool] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %31 = bitwise_or(%3, %4) /* ty=Tensor[(16, 14, 9), int32] */;
    %32 = %13.0;
    %33 = floor_divide(%14, %15) /* ty=Tensor[(6, 4, 8), float32] */;
    %34 = %26.0;
    %35 = less_equal(%29, %30) /* ty=Tensor[(7, 3, 9), bool] */;
    (%31, %32, meta[relay.Constant][0] /* ty=Tensor[(1573), bool] */, meta[relay.Constant][1] /* ty=Tensor[(312), int8] */, meta[relay.Constant][2] /* ty=Tensor[(1365), float32] */, meta[relay.Constant][3] /* ty=Tensor[(189), int32] */, %33, %34, %35)
  };
  %36(%var_3487, %var_3488, %var_3489, %var_3490) /* ty=(Tensor[(16, 14, 9), int32], Tensor[(11, 13, 11), bool], Tensor[(1573), bool], Tensor[(312), int8], Tensor[(1365), float32], Tensor[(189), int32], Tensor[(6, 4, 8), float32], Tensor[(7, 3, 9), int32], Tensor[(7, 3, 9), bool]) */
}

def @func_6129(%var_6127: Tensor[(13, 16, 12), int64]) -> (Tensor[(13, 16, 12), float64], Tensor[(13, 16, 12), float64]) {
  @func_6126(%var_6127) /* ty=(Tensor[(13, 16, 12), float64], Tensor[(13, 16, 12), float64]) */
}

def @func_7014() -> Tensor[(1, 8, 4), float64] {
  %40 = fn () -> Tensor[(1, 8, 4), float64] {
    %37 = @func_6387() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) */;
    %38 = %37.0;
    %39 = cast(%38, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
    cos(%39) /* ty=Tensor[(1, 8, 4), float64] */
  };
  %40() /* ty=Tensor[(1, 8, 4), float64] */
}

def @func_1575(%var_1574: Tensor[(8, 7, 5), float32]) -> (Tensor[(8, 7, 5), float64],) {
  %45 = fn (%var_1556: Tensor[(8, 7, 5), float32]) -> (Tensor[(8, 7, 5), float64],) {
    %41 = cast(%var_1556, dtype="float32") /* ty=Tensor[(8, 7, 5), float32] */;
    %42 = log10(%41) /* ty=Tensor[(8, 7, 5), float32] */;
    %43 = cast(%42, dtype="float64") /* ty=Tensor[(8, 7, 5), float64] */;
    %44 = asinh(%43) /* ty=Tensor[(8, 7, 5), float64] */;
    (%44,)
  };
  %45(%var_1574) /* ty=(Tensor[(8, 7, 5), float64],) */
}

def @func_6387() -> (Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) {
  %46 = @func_6360() /* ty=(Tensor[(1, 8, 4), float64],) */;
  %47 = @func_6264() /* ty=Tensor[(1, 8, 4), float64] */;
  %48 = %46.0;
  (%47, %48)
}

def @func_993(%var_983: uint16, %var_984: Tensor[(12, 13, 12), uint16]) -> Tensor[(12, 13, 12), bool] {
  %49 = cast(%var_983, dtype="bool") /* ty=bool */;
  %50 = cast(%var_984, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
  less_equal(%49, %50) /* ty=Tensor[(12, 13, 12), bool] */
}

def @func_6503(%var_6501: float32, %var_6502: Tensor[(11, 16, 15), float32]) -> Tensor[(11, 16, 15), float32] {
  @func_6499(%var_6501, %var_6502) /* ty=Tensor[(11, 16, 15), float32] */
}

def @func_6266() -> Tensor[(1, 8, 4), float64] {
  @func_6264() /* ty=Tensor[(1, 8, 4), float64] */
}

def @func_2819(%var_2810: Tensor[(13, 8, 14), int64], %var_2811: Tensor[(13, 8, 14), int64]) -> (Tensor[(13, 8, 14), float64],) {
  %51 = cast(%var_2811, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
  %52 = shape_of(%var_2810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_2810, dtype="int64") /* ty=Tensor[(13, 8, 14), int64] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %55 = bitwise_or(%53, %54) /* ty=Tensor[(13, 8, 14), int64] */;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(13, 8, 14), float64] */;
  %57 = tan(%56) /* ty=Tensor[(13, 8, 14), float64] */;
  (%57,)
}

def @func_2960(%var_2958: Tensor[(10, 1, 5), float64]) -> Tensor[(10, 12, 5), float64] {
  @func_2957(%var_2958) /* ty=Tensor[(10, 12, 5), float64] */
}

def @func_5218(%var_5216: int32, %var_5217: Tensor[(90), int32]) -> (Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(15, 13, 4), float32], Tensor[(6, 5, 11), int64], Tensor[(330), int64]) {
  @func_5214(%var_5216, %var_5217) /* ty=(Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(15, 13, 4), float32], Tensor[(6, 5, 11), int64], Tensor[(330), int64]) */
}

def @func_239(%var_195: uint64, %var_196: Tensor[(3600), uint64]) -> (Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), uint32], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), int32]) {
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 10, 10), float32] */, dtype="uint32") /* ty=Tensor[(12, 10, 10), uint32] */;
  %60 = cast(%var_195, dtype="uint32") /* ty=uint32 */;
  %61 = cast(%var_195, dtype="uint64") /* ty=uint64 */;
  %62 = cast(%var_196, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %63 = reshape(%61, newshape=[]) /* ty=uint64 */;
  %64 = reshape(%62, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %65 = cast(%var_195, dtype="uint64") /* ty=uint64 */;
  %66 = cast(%var_196, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %67 = reshape(%65, newshape=[]) /* ty=uint64 */;
  %68 = reshape(%66, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %69 = cast(%var_195, dtype="uint64") /* ty=uint64 */;
  %70 = cast(%var_196, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %71 = reshape(%69, newshape=[]) /* ty=uint64 */;
  %72 = reshape(%70, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %73 = @func_38(%71, %72) /* ty=Tensor[(15, 15, 16), uint64] */;
  %74 = cast(%var_196, dtype="int32") /* ty=Tensor[(3600), int32] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="int32") /* ty=Tensor[(15, 15, 16), int32] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %78 = sigmoid(%58) /* ty=Tensor[(12, 10, 10), float32] */;
  %79 = add(%59, %60) /* ty=Tensor[(12, 10, 10), uint32] */;
  %80 = @func_38(%63, %64) /* ty=Tensor[(15, 15, 16), uint64] */;
  %81 = @func_38(%67, %68) /* ty=Tensor[(15, 15, 16), uint64] */;
  %82 = right_shift(%76, %77) /* ty=Tensor[(15, 15, 16), int32] */;
  (%78, %79, %80, %81, %82)
}

def @func_6090(%var_6089: Tensor[(12, 11, 13), float32]) -> Tensor[(12, 11, 13), float32] {
  %84 = fn (%var_6082: Tensor[(12, 11, 13), float32]) -> Tensor[(12, 11, 13), float32] {
    %83 = cast(%var_6082, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
    cosh(%83) /* ty=Tensor[(12, 11, 13), float32] */
  };
  %84(%var_6089) /* ty=Tensor[(12, 11, 13), float32] */
}

def @func_2957(%var_2946: Tensor[(10, 1, 5), float64]) -> Tensor[(10, 12, 5), float64] {
  %85 = cast(%var_2946, dtype="float64") /* ty=Tensor[(10, 1, 5), float64] */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  floor_mod(%85, %86) /* ty=Tensor[(10, 12, 5), float64] */
}

def @func_604(%var_602: Tensor[(10, 2, 11), float64], %var_603: Tensor[(1365), float32]) -> (Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) {
  @func_600(%var_602, %var_603) /* ty=(Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) */
}

def @func_3633(%var_3632: Tensor[(10, 10, 7), int32]) -> (Tensor[(10, 10, 7), bool],) {
  %92 = fn (%var_3620: Tensor[(10, 10, 7), int32]) -> (Tensor[(10, 10, 7), bool],) {
    %87 = cast(%var_3620, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
    %88 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(10, 10, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 10, 7), int32] */, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %91 = not_equal(%89, %90) /* ty=Tensor[(10, 10, 7), bool] */;
    (%91,)
  };
  %92(%var_3632) /* ty=(Tensor[(10, 10, 7), bool],) */
}

def @func_1489(%var_1487: Tensor[(8, 8, 3), int8], %var_1488: Tensor[(8, 8, 3), int8]) -> (Tensor[(8, 8, 3), int8], Tensor[(15, 15, 16), uint64], uint64, Tensor[(3600), uint64]) {
  %103 = fn (%var_1464: Tensor[(8, 8, 3), int8], %var_1465: Tensor[(8, 8, 3), int8]) -> (Tensor[(8, 8, 3), int8], Tensor[(15, 15, 16), uint64], uint64, Tensor[(3600), uint64]) {
    %93 = cast(%var_1465, dtype="int8") /* ty=Tensor[(8, 8, 3), int8] */;
    %94 = shape_of(%var_1464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%var_1464, dtype="int8") /* ty=Tensor[(8, 8, 3), int8] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %97 = cast(meta[relay.Constant][8] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %98 = cast(meta[relay.Constant][9] /* ty=Tensor[(3600), uint64] */, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
    %99 = reshape(%97, newshape=[]) /* ty=uint64 */;
    %100 = reshape(%98, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
    %101 = bitwise_and(%95, %96) /* ty=Tensor[(8, 8, 3), int8] */;
    %102 = @func_38(%99, %100) /* ty=Tensor[(15, 15, 16), uint64] */;
    (%101, %102, meta[relay.Constant][8] /* ty=uint64 */, meta[relay.Constant][9] /* ty=Tensor[(3600), uint64] */)
  };
  %103(%var_1487, %var_1488) /* ty=(Tensor[(8, 8, 3), int8], Tensor[(15, 15, 16), uint64], uint64, Tensor[(3600), uint64]) */
}

def @func_2278(%var_2274: Tensor[(4, 9, 2), float64], %var_2275: Tensor[(960), float32], %var_2276: Tensor[(110, 2), float64], %var_2277: Tensor[(45, 2), bool]) -> (Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) {
  @func_2272(%var_2274, %var_2275, %var_2276, %var_2277) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */
}

def @func_4005(%var_3988: Tensor[(16, 6, 8), float32]) -> Tensor[(16, 6, 8), float32] {
  %104 = cast(%var_3988, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  sin(%104) /* ty=Tensor[(16, 6, 8), float32] */
}

def @func_6570(%var_6561: Tensor[(4, 3, 7), uint32], %var_6567: Tensor[(1456), int64]) -> (Tensor[(4, 3, 7), uint32], Tensor[(13, 8, 14), float64], Tensor[(1456), int64]) {
  %105 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 3, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 3, 1), uint32] */;
  %106 = cast(%var_6561, dtype="uint32") /* ty=Tensor[(4, 3, 7), uint32] */;
  %107 = cast(%var_6567, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %108 = cast(%var_6567, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %109 = reshape(%107, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %110 = reshape(%108, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %111 = @func_2819(%109, %110) /* ty=(Tensor[(13, 8, 14), float64],) */;
  %112 = subtract(%105, %106) /* ty=Tensor[(4, 3, 7), uint32] */;
  %113 = %111.0;
  (%112, %113, %var_6567)
}

def @func_3872(%var_3866: bool, %var_3867: Tensor[(8, 8, 12), bool], %var_3868: Tensor[(72), float64], %var_3869: Tensor[(960), float32], %var_3870: Tensor[(220), float64], %var_3871: Tensor[(90), bool]) -> (Tensor[(8, 8, 12), float64], Tensor[(110, 2), float64], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) {
  @func_3864(%var_3866, %var_3867, %var_3868, %var_3869, %var_3870, %var_3871) /* ty=(Tensor[(8, 8, 12), float64], Tensor[(110, 2), float64], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) */
}

def @func_41(%var_39: uint64, %var_40: Tensor[(15, 15, 16), uint64]) -> Tensor[(15, 15, 16), uint64] {
  %116 = fn (%var_21: uint64, %var_22: Tensor[(15, 15, 16), uint64]) -> Tensor[(15, 15, 16), uint64] {
    %114 = cast(%var_21, dtype="uint64") /* ty=uint64 */;
    %115 = cast(%var_22, dtype="uint64") /* ty=Tensor[(15, 15, 16), uint64] */;
    add(%114, %115) /* ty=Tensor[(15, 15, 16), uint64] */
  };
  %116(%var_39, %var_40) /* ty=Tensor[(15, 15, 16), uint64] */
}

def @func_4526(%var_4475: Tensor[(10, 12, 1), int8], %var_4510: Tensor[(1800, 2), uint64], %var_4518: Tensor[(4), uint64], %var_4519: Tensor[(10, 96), float32]) -> (Tensor[(10, 12, 1), bool], Tensor[(13, 8, 14), float64], Tensor[(1456), int64], Tensor[(10, 12, 1), bool], Tensor[(15, 15, 16), uint64], Tensor[(1800, 2), uint64], Tensor[(10, 12, 1), float32], Tensor[(36, 2), float64], Tensor[(4), uint64], Tensor[(10, 96), float32]) {
  %117 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 12, 1), int8] */, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %118 = cast(%var_4475, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(1456), int64] */, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %120 = cast(meta[relay.Constant][12] /* ty=Tensor[(1456), int64] */, dtype="int64") /* ty=Tensor[(1456), int64] */;
  %121 = reshape(%119, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %122 = reshape(%120, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
  %123 = @func_2819(%121, %122) /* ty=(Tensor[(13, 8, 14), float64],) */;
  %124 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 12, 1), int8] */, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %125 = cast(%var_4475, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %126 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %127 = cast(%var_4510, dtype="uint64") /* ty=Tensor[(1800, 2), uint64] */;
  %128 = reshape(%126, newshape=[]) /* ty=uint64 */;
  %129 = reshape(%127, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %130 = cast(%var_4475, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 12, 1), int8] */, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %132 = logical_and(%130, %131) /* ty=Tensor[(10, 12, 1), bool] */;
  %133 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="float32") /* ty=float32 */;
  %134 = cast(%132, dtype="float32") /* ty=Tensor[(10, 12, 1), float32] */;
  %135 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %136 = cast(%var_4518, dtype="uint64") /* ty=Tensor[(4), uint64] */;
  %137 = cast(%var_4519, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %138 = reshape(%135, newshape=[]) /* ty=uint64 */;
  %139 = reshape(%136, newshape=[4, 1]) /* ty=Tensor[(4, 1), uint64] */;
  %140 = reshape(%137, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %141 = @func_3258(%138, %139, %140) /* ty=(Tensor[(4, 1), uint64], Tensor[(960), float32], Tensor[(36, 2), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) */;
  %142 = not_equal(%117, %118) /* ty=Tensor[(10, 12, 1), bool] */;
  %143 = %123.0;
  %144 = greater(%124, %125) /* ty=Tensor[(10, 12, 1), bool] */;
  %145 = @func_38(%128, %129) /* ty=Tensor[(15, 15, 16), uint64] */;
  %146 = divide(%133, %134) /* ty=Tensor[(10, 12, 1), float32] */;
  %147 = %141.2;
  (%142, %143, meta[relay.Constant][12] /* ty=Tensor[(1456), int64] */, %144, %145, %var_4510, %146, %147, %var_4518, %var_4519)
}

def @func_6218(%var_6215: Tensor[(14, 13, 6), float64], %var_6216: Tensor[(14, 13, 6), float64], %var_6217: Tensor[(20, 180), uint64]) -> (Tensor[(14, 13, 6), uint64], Tensor[(15, 15, 16), uint64], uint64, Tensor[(20, 180), uint64], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) {
  @func_6213(%var_6215, %var_6216, %var_6217) /* ty=(Tensor[(14, 13, 6), uint64], Tensor[(15, 15, 16), uint64], uint64, Tensor[(20, 180), uint64], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */
}

def @func_6246() -> (Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) {
  %152 = fn () -> (Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) {
    %148 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 8, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
    %149 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 8, 4), float64] */, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
    %150 = sinh(%148) /* ty=Tensor[(1, 8, 4), float64] */;
    %151 = log(%149) /* ty=Tensor[(1, 8, 4), float32] */;
    (%150, %151)
  };
  %152() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) */
}

def @func_6529() -> (Tensor[(1, 8, 4), float32], Tensor[(80), uint32], Tensor[(1, 72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90, 1), bool]) {
  %164 = fn () -> (Tensor[(1, 8, 4), float32], Tensor[(80), uint32], Tensor[(1, 72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90, 1), bool]) {
    %153 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 72), float64] */, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
    %154 = cast(meta[relay.Constant][16] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %155 = cast(meta[relay.Constant][17] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %156 = cast(meta[relay.Constant][18] /* ty=Tensor[(90, 1), bool] */, dtype="bool") /* ty=Tensor[(90, 1), bool] */;
    %157 = reshape(%153, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
    %158 = reshape(%154, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %159 = reshape(%155, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
    %160 = reshape(%156, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
    %161 = @func_2272(%157, %158, %159, %160) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
    %162 = @func_6288() /* ty=Tensor[(1, 8, 4), float32] */;
    %163 = %161.5;
    (%162, %163, meta[relay.Constant][15] /* ty=Tensor[(1, 72), float64] */, meta[relay.Constant][16] /* ty=Tensor[(960), float32] */, meta[relay.Constant][17] /* ty=Tensor[(220), float64] */, meta[relay.Constant][18] /* ty=Tensor[(90, 1), bool] */)
  };
  %164() /* ty=(Tensor[(1, 8, 4), float32], Tensor[(80), uint32], Tensor[(1, 72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90, 1), bool]) */
}

def @func_600(%var_587: Tensor[(10, 2, 11), float64], %var_592: Tensor[(1365), float32]) -> (Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) {
  %165 = cast(-4.01712f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %166 = cast(%var_587, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %167 = cast(%var_592, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %168 = reshape(%167, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %169 = power(%165, %166) /* ty=Tensor[(10, 2, 11), float64] */;
  %170 = @func_451(%168) /* ty=Tensor[(7, 13, 15), bool] */;
  (%169, %170, %var_592)
}

def @func_6876() -> (Tensor[(1, 8, 4), float64],) {
  @func_6874() /* ty=(Tensor[(1, 8, 4), float64],) */
}

def @func_6472(%var_6470: bool) -> (Tensor[(1, 8, 4), float32], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365), float32], Tensor[(7, 3, 9), int32], Tensor[(2016), int32], bool, Tensor[(189), float32]) {
  @func_6469(%var_6470) /* ty=(Tensor[(1, 8, 4), float32], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365), float32], Tensor[(7, 3, 9), int32], Tensor[(2016), int32], bool, Tensor[(189), float32]) */
}

def @func_6925(%var_6922: Tensor[(90), int32], %var_6923: Tensor[(120), int8], %var_6924: Tensor[(4), uint64]) -> (Tensor[(1, 8, 4), float64], Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(10, 12, 1), float32], Tensor[(120), int8], Tensor[(1, 3600), uint64], Tensor[(4), uint64], Tensor[(960), float32], Tensor[(15, 15, 16), uint64], Tensor[(192), int8]) {
  %195 = fn (%var_6894: Tensor[(90), int32], %var_6906: Tensor[(120), int8], %var_6908: Tensor[(4), uint64]) -> (Tensor[(1, 8, 4), float64], Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(10, 12, 1), float32], Tensor[(120), int8], Tensor[(1, 3600), uint64], Tensor[(4), uint64], Tensor[(960), float32], Tensor[(15, 15, 16), uint64], Tensor[(192), int8]) {
    %171 = @func_6860() /* ty=Tensor[(1, 8, 4), float64] */;
    %172 = cast(%171, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
    %173 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %174 = cast(%var_6894, dtype="int32") /* ty=Tensor[(90), int32] */;
    %175 = reshape(%173, newshape=[]) /* ty=int32 */;
    %176 = reshape(%174, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), int32] */;
    %177 = cast(%var_6906, dtype="int8") /* ty=Tensor[(120), int8] */;
    %178 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 3600), uint64] */, dtype="uint64") /* ty=Tensor[(1, 3600), uint64] */;
    %179 = cast(%var_6908, dtype="uint64") /* ty=Tensor[(4), uint64] */;
    %180 = cast(meta[relay.Constant][20] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %181 = reshape(%177, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), int8] */;
    %182 = reshape(%178, newshape=[1800, 2]) /* ty=Tensor[(1800, 2), uint64] */;
    %183 = reshape(%179, newshape=[4]) /* ty=Tensor[(4), uint64] */;
    %184 = reshape(%180, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
    %185 = @func_4526(%181, %182, %183, %184) /* ty=(Tensor[(10, 12, 1), bool], Tensor[(13, 8, 14), float64], Tensor[(1456), int64], Tensor[(10, 12, 1), bool], Tensor[(15, 15, 16), uint64], Tensor[(1800, 2), uint64], Tensor[(10, 12, 1), float32], Tensor[(36, 2), float64], Tensor[(4), uint64], Tensor[(10, 96), float32]) */;
    %186 = cast(meta[relay.Constant][21] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
    %187 = cast(meta[relay.Constant][21] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
    %188 = reshape(%186, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), int8] */;
    %189 = reshape(%187, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), int8] */;
    %190 = @func_1486(%188, %189) /* ty=(Tensor[(8, 8, 3), int8], Tensor[(15, 15, 16), uint64], uint64, Tensor[(3600), uint64]) */;
    %191 = exp(%172) /* ty=Tensor[(1, 8, 4), float64] */;
    %192 = @func_4784(%175, %176) /* ty=Tensor[(15, 6, 1), int32] */;
    %193 = %185.6;
    %194 = %190.1;
    (%191, %192, 8 /* ty=int32 */, %var_6894, %193, %var_6906, meta[relay.Constant][19] /* ty=Tensor[(1, 3600), uint64] */, %var_6908, meta[relay.Constant][20] /* ty=Tensor[(960), float32] */, %194, meta[relay.Constant][21] /* ty=Tensor[(192), int8] */)
  };
  %195(%var_6922, %var_6923, %var_6924) /* ty=(Tensor[(1, 8, 4), float64], Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(10, 12, 1), float32], Tensor[(120), int8], Tensor[(1, 3600), uint64], Tensor[(4), uint64], Tensor[(960), float32], Tensor[(15, 15, 16), uint64], Tensor[(192), int8]) */
}

def @func_3371(%var_3368: Tensor[(312), int8], %var_3369: Tensor[(72), float64], %var_3370: Tensor[(960), float32]) -> (Tensor[(4, 14, 5), int64], Tensor[(12, 13, 12), bool], Tensor[(312), int8], uint16, Tensor[(90), bool], Tensor[(1365), float32], Tensor[(45, 2), bool], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64]) {
  %225 = fn (%var_3349: Tensor[(312), int8], %var_3362: Tensor[(72), float64], %var_3363: Tensor[(960), float32]) -> (Tensor[(4, 14, 5), int64], Tensor[(12, 13, 12), bool], Tensor[(312), int8], uint16, Tensor[(90), bool], Tensor[(1365), float32], Tensor[(45, 2), bool], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64]) {
    %196 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
    %197 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %198 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %200 = cast(%var_3349, dtype="int8") /* ty=Tensor[(312), int8] */;
    %201 = cast(%var_3349, dtype="int8") /* ty=Tensor[(312), int8] */;
    %202 = cast(%var_3349, dtype="int8") /* ty=Tensor[(312), int8] */;
    %203 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %204 = cast(meta[relay.Constant][25] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %205 = cast(meta[relay.Constant][26] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %206 = reshape(%200, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
    %207 = reshape(%201, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
    %208 = reshape(%202, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
    %209 = reshape(%203, newshape=[]) /* ty=uint16 */;
    %210 = reshape(%204, newshape=[15, 6]) /* ty=Tensor[(15, 6), bool] */;
    %211 = reshape(%205, newshape=[1, 1365]) /* ty=Tensor[(1, 1365), float32] */;
    %212 = @func_1867(%206, %207, %208, %209, %210, %211) /* ty=(Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) */;
    %213 = cast(%var_3362, dtype="float64") /* ty=Tensor[(72), float64] */;
    %214 = cast(%var_3363, dtype="float32") /* ty=Tensor[(960), float32] */;
    %215 = cast(meta[relay.Constant][27] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %216 = cast(meta[relay.Constant][25] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %217 = reshape(%213, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
    %218 = reshape(%214, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %219 = reshape(%215, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
    %220 = reshape(%216, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
    %221 = @func_2272(%217, %218, %219, %220) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
    %222 = left_shift(%198, %199) /* ty=Tensor[(4, 14, 5), int64] */;
    %223 = %212.2;
    %224 = %221.7;
    (%222, %223, %var_3349, meta[relay.Constant][24] /* ty=uint16 */, meta[relay.Constant][25] /* ty=Tensor[(90), bool] */, meta[relay.Constant][26] /* ty=Tensor[(1365), float32] */, %224, %var_3362, %var_3363, meta[relay.Constant][27] /* ty=Tensor[(220), float64] */)
  };
  %225(%var_3368, %var_3369, %var_3370) /* ty=(Tensor[(4, 14, 5), int64], Tensor[(12, 13, 12), bool], Tensor[(312), int8], uint16, Tensor[(90), bool], Tensor[(1365), float32], Tensor[(45, 2), bool], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64]) */
}

def @main(%var_7034: Tensor[(14, 6, 1), bool], %var_7063: Tensor[(384), float64]) -> (Tensor[(14, 6, 1), bool], Tensor[(12, 13, 12), bool], Tensor[(936, 2), uint16], Tensor[(384), float64], Tensor[(189), float64]) {
  %226 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %227 = cast(%var_7034, dtype="bool") /* ty=Tensor[(14, 6, 1), bool] */;
  %228 = cast(True /* ty=bool */, dtype="uint16") /* ty=uint16 */;
  %229 = cast(meta[relay.Constant][28] /* ty=Tensor[(936, 2), uint16] */, dtype="uint16") /* ty=Tensor[(936, 2), uint16] */;
  %230 = reshape(%228, newshape=[]) /* ty=uint16 */;
  %231 = reshape(%229, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), uint16] */;
  %232 = cast(%var_7063, dtype="float64") /* ty=Tensor[(384), float64] */;
  %233 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %234 = reshape(%232, newshape=[12, 8, 4]) /* ty=Tensor[(12, 8, 4), float64] */;
  %235 = reshape(%233, newshape=[]) /* ty=bool */;
  %236 = @func_6658(%234, %235) /* ty=(Tensor[(12, 8, 4), bool], Tensor[(12, 8, 4), uint32], Tensor[(189), float32], bool) */;
  %237 = %236.2;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(189), float64] */;
  %239 = logical_or(%226, %227) /* ty=Tensor[(14, 6, 1), bool] */;
  %240 = @func_993(%230, %231) /* ty=Tensor[(12, 13, 12), bool] */;
  %241 = acos(%238) /* ty=Tensor[(189), float64] */;
  (%239, %240, meta[relay.Constant][28] /* ty=Tensor[(936, 2), uint16] */, %var_7063, %241)
}

def @func_451(%var_414: Tensor[(7, 13, 15), float32]) -> Tensor[(7, 13, 15), bool] {
  %242 = cast(%var_414, dtype="float32") /* ty=Tensor[(7, 13, 15), float32] */;
  %243 = sigmoid(%242) /* ty=Tensor[(7, 13, 15), float32] */;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(7, 13, 15), float64] */;
  %245 = rsqrt(%244) /* ty=Tensor[(7, 13, 15), float64] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%248, %249) /* ty=Tensor[(7, 13, 15), bool] */
}

def @func_3172(%var_3160: bool, %var_3161: Tensor[(11, 13, 11), bool], %var_3166: Tensor[(312), int8], %var_3168: Tensor[(1365), float32]) -> (Tensor[(11, 13, 11), bool], uint16, Tensor[(312), int8], Tensor[(90), bool], Tensor[(1365), float32]) {
  %250 = cast(%var_3160, dtype="bool") /* ty=bool */;
  %251 = cast(%var_3161, dtype="bool") /* ty=Tensor[(11, 13, 11), bool] */;
  %252 = cast(%var_3166, dtype="int8") /* ty=Tensor[(312), int8] */;
  %253 = cast(%var_3166, dtype="int8") /* ty=Tensor[(312), int8] */;
  %254 = cast(%var_3166, dtype="int8") /* ty=Tensor[(312), int8] */;
  %255 = cast(%var_3160, dtype="uint16") /* ty=uint16 */;
  %256 = cast(meta[relay.Constant][29] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %257 = cast(%var_3168, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %258 = reshape(%252, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %259 = reshape(%253, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %260 = reshape(%254, newshape=[8, 3, 13]) /* ty=Tensor[(8, 3, 13), int8] */;
  %261 = reshape(%255, newshape=[]) /* ty=uint16 */;
  %262 = reshape(%256, newshape=[15, 6]) /* ty=Tensor[(15, 6), bool] */;
  %263 = reshape(%257, newshape=[1, 1365]) /* ty=Tensor[(1, 1365), float32] */;
  %264 = @func_1867(%258, %259, %260, %261, %262, %263) /* ty=(Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) */;
  %265 = logical_or(%250, %251) /* ty=Tensor[(11, 13, 11), bool] */;
  %266 = %264.3;
  (%265, %266, %var_3166, meta[relay.Constant][29] /* ty=Tensor[(90), bool] */, %var_3168)
}

def @func_4252(%var_4169: float64, %var_4170: Tensor[(4, 12, 8), float64], %var_4195: Tensor[(28, 4), float32], %var_4196: Tensor[(1872), uint16], %var_4237: Tensor[(1, 220), float64]) -> (Tensor[(4, 12, 8), float64], Tensor[(28, 4), float32], Tensor[(1872), uint16], Tensor[(4, 12, 8), uint8], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365, 1), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 220), float64], Tensor[(6, 16, 8), float64], Tensor[(768), float64], Tensor[(4, 12, 8), float32]) {
  %267 = cast(%var_4169, dtype="float64") /* ty=float64 */;
  %268 = cast(%var_4170, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %269 = cast(%var_4170, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %270 = sin(%269) /* ty=Tensor[(4, 12, 8), float32] */;
  %271 = cast(%var_4195, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %272 = cast(%var_4169, dtype="uint16") /* ty=uint16 */;
  %273 = cast(%var_4196, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %274 = reshape(%271, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
  %275 = reshape(%272, newshape=[]) /* ty=uint16 */;
  %276 = reshape(%273, newshape=[12, 156]) /* ty=Tensor[(12, 156), uint16] */;
  %277 = @func_2328(%274, %275, %276) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(5, 6, 3), bool], Tensor[(90), bool], Tensor[(12, 13, 12), bool], uint16, Tensor[(12, 156), uint16]) */;
  %278 = %277.4;
  %279 = cast(%270, dtype="uint8") /* ty=Tensor[(4, 12, 8), uint8] */;
  %280 = cast(%278, dtype="uint8") /* ty=uint8 */;
  %281 = cast(meta[relay.Constant][30] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %282 = cast(meta[relay.Constant][31] /* ty=Tensor[(1365, 1), float32] */, dtype="float32") /* ty=Tensor[(1365, 1), float32] */;
  %283 = reshape(%281, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %284 = reshape(%282, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %285 = @func_1091(%283, %284) /* ty=(Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) */;
  %286 = cast(%var_4237, dtype="float64") /* ty=Tensor[(1, 220), float64] */;
  %287 = reshape(%286, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %288 = cast(meta[relay.Constant][32] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %289 = reshape(%288, newshape=[6, 16, 8]) /* ty=Tensor[(6, 16, 8), float64] */;
  %290 = @func_1921(%289) /* ty=(Tensor[(6, 16, 8), float64],) */;
  %291 = cast(%270, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %292 = cosh(%291) /* ty=Tensor[(4, 12, 8), float64] */;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %294 = power(%267, %268) /* ty=Tensor[(4, 12, 8), float64] */;
  %295 = left_shift(%279, %280) /* ty=Tensor[(4, 12, 8), uint8] */;
  %296 = %285.1;
  %297 = @func_320(%287) /* ty=Tensor[(5, 11, 4), float64] */;
  %298 = %290.0;
  %299 = log2(%293) /* ty=Tensor[(4, 12, 8), float32] */;
  (%294, %var_4195, %var_4196, %295, %296, meta[relay.Constant][30] /* ty=Tensor[(26), float32] */, meta[relay.Constant][31] /* ty=Tensor[(1365, 1), float32] */, %297, %var_4237, %298, meta[relay.Constant][32] /* ty=Tensor[(768), float64] */, %299)
}

def @func_1275(%var_1272: Tensor[(5, 4, 4), uint32], %var_1273: Tensor[(5, 4, 4), uint32], %var_1274: Tensor[(26), float32]) -> (Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float32], Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(26), float32]) {
  %315 = fn (%var_1248: Tensor[(5, 4, 4), uint32], %var_1249: Tensor[(5, 4, 4), uint32], %var_1259: Tensor[(26), float32]) -> (Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float32], Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(26), float32]) {
    %300 = cast(%var_1249, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
    %301 = shape_of(%var_1248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%var_1248, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %304 = cast(%var_1249, dtype="float32") /* ty=Tensor[(5, 4, 4), float32] */;
    %305 = cast(%var_1259, dtype="float32") /* ty=Tensor[(26), float32] */;
    %306 = cast(meta[relay.Constant][33] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %307 = reshape(%305, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
    %308 = reshape(%306, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %309 = @func_1091(%307, %308) /* ty=(Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) */;
    %310 = cast(%var_1259, dtype="float32") /* ty=Tensor[(26), float32] */;
    %311 = bitwise_and(%302, %303) /* ty=Tensor[(5, 4, 4), uint32] */;
    %312 = sigmoid(%304) /* ty=Tensor[(5, 4, 4), float32] */;
    %313 = %309.1;
    %314 = erf(%310) /* ty=Tensor[(26), float32] */;
    (%311, %312, %313, meta[relay.Constant][33] /* ty=Tensor[(1365), float32] */, %314)
  };
  %315(%var_1272, %var_1273, %var_1274) /* ty=(Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float32], Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(26), float32]) */
}

def @func_5121(%var_5119: Tensor[(6, 5, 11), int64], %var_5120: Tensor[(6, 5, 11), int64]) -> (Tensor[(6, 5, 11), int64],) {
  @func_5117(%var_5119, %var_5120) /* ty=(Tensor[(6, 5, 11), int64],) */
}

def @func_1382(%var_1286: Tensor[(16, 4, 15), float32], %var_1296: Tensor[(220), float64], %var_1297: Tensor[(1365), float32], %var_1306: Tensor[(80), uint32]) -> (Tensor[(16, 4, 15), float32], Tensor[(220), float64], Tensor[(7, 13, 15), bool], Tensor[(5, 4, 4), float32], Tensor[(80), uint32], Tensor[(26), float32], Tensor[(16, 4, 15), int8], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(189), int32], Tensor[(7, 3, 9), float64], Tensor[(7, 13, 15), bool]) {
  %316 = cast(%var_1286, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %317 = acosh(%316) /* ty=Tensor[(16, 4, 15), float32] */;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %319 = cast(%var_1297, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %320 = reshape(%319, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %321 = cast(%var_1306, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %322 = cast(%var_1306, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %323 = cast(meta[relay.Constant][34] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %324 = reshape(%321, newshape=[5, 4, 4]) /* ty=Tensor[(5, 4, 4), uint32] */;
  %325 = reshape(%322, newshape=[5, 4, 4]) /* ty=Tensor[(5, 4, 4), uint32] */;
  %326 = reshape(%323, newshape=[26]) /* ty=Tensor[(26), float32] */;
  %327 = @func_1271(%324, %325, %326) /* ty=(Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float32], Tensor[(1365), float32], Tensor[(1365), float32], Tensor[(26), float32]) */;
  %328 = cast(%317, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %329 = atan(%328) /* ty=Tensor[(16, 4, 15), float32] */;
  %330 = cast(%317, dtype="int8") /* ty=Tensor[(16, 4, 15), int8] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="int8") /* ty=Tensor[(16, 4, 15), int8] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %334 = cast(%var_1296, dtype="float64") /* ty=Tensor[(220), float64] */;
  %335 = reshape(%334, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %336 = @func_320(%335) /* ty=Tensor[(5, 11, 4), float64] */;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %338 = reshape(%337, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %339 = cast(meta[relay.Constant][35] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %340 = cast(meta[relay.Constant][35] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %341 = reshape(%339, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %342 = reshape(%340, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %343 = @func_470(%341, %342) /* ty=(Tensor[(7, 3, 9), int32],) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(7, 3, 9), float64] */;
  %346 = cast(%var_1296, dtype="float64") /* ty=Tensor[(220), float64] */;
  %347 = cast(%var_1297, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %348 = reshape(%346, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %349 = reshape(%347, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %350 = @func_600(%348, %349) /* ty=(Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) */;
  %351 = %350.1;
  %352 = cast(%var_1297, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(7, 13, 15), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = sigmoid(%318) /* ty=Tensor[(16, 4, 15), float32] */;
  %357 = @func_451(%320) /* ty=Tensor[(7, 13, 15), bool] */;
  %358 = %327.1;
  %359 = add(%332, %333) /* ty=Tensor[(16, 4, 15), int8] */;
  %360 = @func_320(%338) /* ty=Tensor[(5, 11, 4), float64] */;
  %361 = sqrt(%345) /* ty=Tensor[(7, 3, 9), float64] */;
  %362 = logical_and(%354, %355) /* ty=Tensor[(7, 13, 15), bool] */;
  (%356, %var_1296, %357, %358, %var_1306, meta[relay.Constant][34] /* ty=Tensor[(26), float32] */, %359, %336, %360, meta[relay.Constant][35] /* ty=Tensor[(189), int32] */, %361, %362)
}

def @func_320(%var_317: Tensor[(5, 11, 4), float64]) -> Tensor[(5, 11, 4), float64] {
  %363 = cast(%var_317, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  exp(%363) /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_524(%var_522: Tensor[(5, 6, 3), bool], %var_523: Tensor[(5, 6, 3), bool]) -> (Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) {
  %376 = fn (%var_498: Tensor[(5, 6, 3), bool], %var_499: Tensor[(5, 6, 3), bool]) -> (Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) {
    %364 = cast(%var_499, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
    %365 = shape_of(%var_498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %366 = cast(%var_498, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %368 = cast(%var_498, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
    %369 = sinh(%368) /* ty=Tensor[(5, 6, 3), float32] */;
    %370 = cast(%369, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
    %371 = shape_of(%var_499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%var_499, dtype="bool") /* ty=Tensor[(5, 6, 3), bool] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %374 = logical_or(%366, %367) /* ty=Tensor[(5, 6, 3), bool] */;
    %375 = greater(%372, %373) /* ty=Tensor[(5, 6, 3), bool] */;
    (%374, %375)
  };
  %376(%var_522, %var_523) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */
}

def @func_6499(%var_6493: float32, %var_6494: Tensor[(11, 16, 15), float32]) -> Tensor[(11, 16, 15), float32] {
  %377 = cast(%var_6493, dtype="float32") /* ty=float32 */;
  %378 = cast(%var_6494, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  floor_divide(%377, %378) /* ty=Tensor[(11, 16, 15), float32] */
}

def @func_4259(%var_4254: float64, %var_4255: Tensor[(4, 12, 8), float64], %var_4256: Tensor[(28, 4), float32], %var_4257: Tensor[(1872), uint16], %var_4258: Tensor[(1, 220), float64]) -> (Tensor[(4, 12, 8), float64], Tensor[(28, 4), float32], Tensor[(1872), uint16], Tensor[(4, 12, 8), uint8], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365, 1), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 220), float64], Tensor[(6, 16, 8), float64], Tensor[(768), float64], Tensor[(4, 12, 8), float32]) {
  @func_4252(%var_4254, %var_4255, %var_4256, %var_4257, %var_4258) /* ty=(Tensor[(4, 12, 8), float64], Tensor[(28, 4), float32], Tensor[(1872), uint16], Tensor[(4, 12, 8), uint8], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365, 1), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 220), float64], Tensor[(6, 16, 8), float64], Tensor[(768), float64], Tensor[(4, 12, 8), float32]) */
}

def @func_1921(%var_1904: Tensor[(6, 16, 8), float64]) -> (Tensor[(6, 16, 8), float64],) {
  %379 = cast(%var_1904, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %380 = tan(%379) /* ty=Tensor[(6, 16, 8), float64] */;
  (%380,)
}

def @func_5881(%var_5843: Tensor[(7, 3, 12), int64], %var_5844: Tensor[(7, 3, 12), int64], %var_5851: Tensor[(960), float32], %var_5852: Tensor[(55, 4), float64]) -> (Tensor[(4, 9, 2), int16], Tensor[(72), float64], Tensor[(960), float32], Tensor[(55, 4), float64], Tensor[(90), bool], Tensor[(7, 3, 12), float64], Tensor[(7, 3, 12), float32]) {
  %381 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %382 = cast(%var_5851, dtype="float32") /* ty=Tensor[(960), float32] */;
  %383 = cast(%var_5852, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %384 = cast(meta[relay.Constant][37] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %385 = reshape(%381, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %386 = reshape(%382, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %387 = reshape(%383, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
  %388 = reshape(%384, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
  %389 = @func_2272(%385, %386, %387, %388) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
  %390 = cast(%var_5843, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %391 = atanh(%390) /* ty=Tensor[(7, 3, 12), float32] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(7, 3, 12), float64] */;
  %393 = cast(%var_5844, dtype="int64") /* ty=Tensor[(7, 3, 12), int64] */;
  %394 = shape_of(%var_5843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_5843, dtype="int64") /* ty=Tensor[(7, 3, 12), int64] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %397 = add(%395, %396) /* ty=Tensor[(7, 3, 12), int64] */;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %399 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%391, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = %389.0;
  %403 = cos(%392) /* ty=Tensor[(7, 3, 12), float64] */;
  %404 = floor_divide(%400, %401) /* ty=Tensor[(7, 3, 12), float32] */;
  (%402, meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, %var_5851, %var_5852, meta[relay.Constant][37] /* ty=Tensor[(90), bool] */, %403, %404)
}

def @func_997(%var_995: uint16, %var_996: Tensor[(12, 13, 12), uint16]) -> Tensor[(12, 13, 12), bool] {
  @func_993(%var_995, %var_996) /* ty=Tensor[(12, 13, 12), bool] */
}

def @func_4613(%var_4611: Tensor[(13, 5, 5), uint16], %var_4612: Tensor[(56, 26), int64]) -> (Tensor[(13, 5, 5), float32], Tensor[(13, 8, 14), float64], Tensor[(1152), float32], Tensor[(56, 26), int64], Tensor[(13, 5, 5), uint8]) {
  %438 = fn (%var_4553: Tensor[(13, 5, 5), uint16], %var_4577: Tensor[(56, 26), int64]) -> (Tensor[(13, 5, 5), float32], Tensor[(13, 8, 14), float64], Tensor[(1152), float32], Tensor[(56, 26), int64], Tensor[(13, 5, 5), uint8]) {
    %405 = cast(%var_4553, dtype="uint16") /* ty=Tensor[(13, 5, 5), uint16] */;
    %406 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(13, 5, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 5, 5), uint16] */, dtype="uint16") /* ty=Tensor[(13, 5, 5), uint16] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %409 = maximum(%407, %408) /* ty=Tensor[(13, 5, 5), uint16] */;
    %410 = cast(%409, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
    %411 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%var_4553, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %414 = cast(meta[relay.Constant][39] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %415 = cast(%var_4577, dtype="int64") /* ty=Tensor[(56, 26), int64] */;
    %416 = reshape(%414, newshape=[8, 9, 16]) /* ty=Tensor[(8, 9, 16), float32] */;
    %417 = reshape(%415, newshape=[728, 2]) /* ty=Tensor[(728, 2), int64] */;
    %418 = @func_3224(%416, %417) /* ty=(Tensor[(8, 9, 16), float32], Tensor[(13, 8, 14), float64], Tensor[(728, 2), int64]) */;
    %419 = cast(%var_4553, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %420 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(%409, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %423 = greater_equal(%421, %422) /* ty=Tensor[(13, 5, 5), bool] */;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
    %425 = sigmoid(%424) /* ty=Tensor[(13, 5, 5), float32] */;
    %426 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 5, 5), uint16] */, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %427 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%var_4553, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %430 = logical_or(%428, %429) /* ty=Tensor[(13, 5, 5), bool] */;
    %431 = cast(%430, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
    %432 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%425, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %435 = divide(%412, %413) /* ty=Tensor[(13, 5, 5), float32] */;
    %436 = %418.1;
    %437 = minimum(%433, %434) /* ty=Tensor[(13, 5, 5), uint8] */;
    (%435, %436, meta[relay.Constant][39] /* ty=Tensor[(1152), float32] */, %var_4577, %437)
  };
  %438(%var_4611, %var_4612) /* ty=(Tensor[(13, 5, 5), float32], Tensor[(13, 8, 14), float64], Tensor[(1152), float32], Tensor[(56, 26), int64], Tensor[(13, 5, 5), uint8]) */
}

def @func_1388(%var_1384: Tensor[(16, 4, 15), float32], %var_1385: Tensor[(220), float64], %var_1386: Tensor[(1365), float32], %var_1387: Tensor[(80), uint32]) -> (Tensor[(16, 4, 15), float32], Tensor[(220), float64], Tensor[(7, 13, 15), bool], Tensor[(5, 4, 4), float32], Tensor[(80), uint32], Tensor[(26), float32], Tensor[(16, 4, 15), int8], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(189), int32], Tensor[(7, 3, 9), float64], Tensor[(7, 13, 15), bool]) {
  @func_1382(%var_1384, %var_1385, %var_1386, %var_1387) /* ty=(Tensor[(16, 4, 15), float32], Tensor[(220), float64], Tensor[(7, 13, 15), bool], Tensor[(5, 4, 4), float32], Tensor[(80), uint32], Tensor[(26), float32], Tensor[(16, 4, 15), int8], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(189), int32], Tensor[(7, 3, 9), float64], Tensor[(7, 13, 15), bool]) */
}

def @func_6290() -> Tensor[(1, 8, 4), float32] {
  @func_6288() /* ty=Tensor[(1, 8, 4), float32] */
}

def @func_3227(%var_3225: Tensor[(8, 9, 16), float32], %var_3226: Tensor[(728, 2), int64]) -> (Tensor[(8, 9, 16), float32], Tensor[(13, 8, 14), float64], Tensor[(728, 2), int64]) {
  %447 = fn (%var_3218: Tensor[(8, 9, 16), float32], %var_3222: Tensor[(728, 2), int64]) -> (Tensor[(8, 9, 16), float32], Tensor[(13, 8, 14), float64], Tensor[(728, 2), int64]) {
    %439 = cast(%var_3218, dtype="float32") /* ty=Tensor[(8, 9, 16), float32] */;
    %440 = cast(%var_3222, dtype="int64") /* ty=Tensor[(728, 2), int64] */;
    %441 = cast(%var_3222, dtype="int64") /* ty=Tensor[(728, 2), int64] */;
    %442 = reshape(%440, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
    %443 = reshape(%441, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), int64] */;
    %444 = @func_2819(%442, %443) /* ty=(Tensor[(13, 8, 14), float64],) */;
    %445 = sigmoid(%439) /* ty=Tensor[(8, 9, 16), float32] */;
    %446 = %444.0;
    (%445, %446, %var_3222)
  };
  %447(%var_3225, %var_3226) /* ty=(Tensor[(8, 9, 16), float32], Tensor[(13, 8, 14), float64], Tensor[(728, 2), int64]) */
}

def @func_4008(%var_4006: Tensor[(16, 6, 8), float32]) -> Tensor[(16, 6, 8), float32] {
  @func_4005(%var_4006) /* ty=Tensor[(16, 6, 8), float32] */
}

def @func_6078(%var_6077: Tensor[(16, 1, 14), float64]) -> (Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64]) {
  %454 = fn (%var_6064: Tensor[(16, 1, 14), float64]) -> (Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64]) {
    %448 = cast(%var_6064, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
    %449 = cast(%var_6064, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
    %450 = log10(%449) /* ty=Tensor[(16, 1, 14), float32] */;
    %451 = cast(%450, dtype="float64") /* ty=Tensor[(16, 1, 14), float64] */;
    %452 = acos(%448) /* ty=Tensor[(16, 1, 14), float64] */;
    %453 = cosh(%451) /* ty=Tensor[(16, 1, 14), float64] */;
    (%452, %453)
  };
  %454(%var_6077) /* ty=(Tensor[(16, 1, 14), float64], Tensor[(16, 1, 14), float64]) */
}

def @func_3864(%var_3848: bool, %var_3849: Tensor[(8, 8, 12), bool], %var_3859: Tensor[(72), float64], %var_3860: Tensor[(960), float32], %var_3861: Tensor[(220), float64], %var_3862: Tensor[(90), bool]) -> (Tensor[(8, 8, 12), float64], Tensor[(110, 2), float64], Tensor[(72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) {
  %455 = cast(%var_3848, dtype="bool") /* ty=bool */;
  %456 = cast(%var_3849, dtype="bool") /* ty=Tensor[(8, 8, 12), bool] */;
  %457 = logical_and(%455, %456) /* ty=Tensor[(8, 8, 12), bool] */;
  %458 = cast(%457, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
  %459 = cast(%var_3848, dtype="float64") /* ty=float64 */;
  %460 = cast(%var_3859, dtype="float64") /* ty=Tensor[(72), float64] */;
  %461 = cast(%var_3860, dtype="float32") /* ty=Tensor[(960), float32] */;
  %462 = cast(%var_3861, dtype="float64") /* ty=Tensor[(220), float64] */;
  %463 = cast(%var_3862, dtype="bool") /* ty=Tensor[(90), bool] */;
  %464 = reshape(%460, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %465 = reshape(%461, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %466 = reshape(%462, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
  %467 = reshape(%463, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
  %468 = @func_2272(%464, %465, %466, %467) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
  %469 = mod(%458, %459) /* ty=Tensor[(8, 8, 12), float64] */;
  %470 = %468.3;
  (%469, %470, %var_3859, %var_3860, %var_3861, %var_3862)
}

def @func_6389() -> (Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) {
  @func_6387() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) */
}

def @func_3262(%var_3259: uint64, %var_3260: Tensor[(4, 1), uint64], %var_3261: Tensor[(960), float32]) -> (Tensor[(4, 1), uint64], Tensor[(960), float32], Tensor[(36, 2), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) {
  %484 = fn (%var_3243: uint64, %var_3244: Tensor[(4, 1), uint64], %var_3250: Tensor[(960), float32]) -> (Tensor[(4, 1), uint64], Tensor[(960), float32], Tensor[(36, 2), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) {
    %471 = cast(%var_3243, dtype="uint64") /* ty=uint64 */;
    %472 = cast(%var_3244, dtype="uint64") /* ty=Tensor[(4, 1), uint64] */;
    %473 = cast(meta[relay.Constant][40] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
    %474 = cast(%var_3250, dtype="float32") /* ty=Tensor[(960), float32] */;
    %475 = cast(meta[relay.Constant][41] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %476 = cast(meta[relay.Constant][42] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %477 = reshape(%473, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
    %478 = reshape(%474, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %479 = reshape(%475, newshape=[110, 2]) /* ty=Tensor[(110, 2), float64] */;
    %480 = reshape(%476, newshape=[45, 2]) /* ty=Tensor[(45, 2), bool] */;
    %481 = @func_2272(%477, %478, %479, %480) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) */;
    %482 = logical_xor(%471, %472) /* ty=Tensor[(4, 1), uint64] */;
    %483 = %481.2;
    (%482, %483, meta[relay.Constant][40] /* ty=Tensor[(36, 2), float64] */, %var_3250, meta[relay.Constant][41] /* ty=Tensor[(220), float64] */, meta[relay.Constant][42] /* ty=Tensor[(90), bool] */)
  };
  %484(%var_3259, %var_3260, %var_3261) /* ty=(Tensor[(4, 1), uint64], Tensor[(960), float32], Tensor[(36, 2), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90), bool]) */
}

def @func_6574(%var_6572: Tensor[(4, 3, 7), uint32], %var_6573: Tensor[(1456), int64]) -> (Tensor[(4, 3, 7), uint32], Tensor[(13, 8, 14), float64], Tensor[(1456), int64]) {
  @func_6570(%var_6572, %var_6573) /* ty=(Tensor[(4, 3, 7), uint32], Tensor[(13, 8, 14), float64], Tensor[(1456), int64]) */
}

def @func_6862() -> Tensor[(1, 8, 4), float64] {
  @func_6860() /* ty=Tensor[(1, 8, 4), float64] */
}

def @func_2272(%var_2245: Tensor[(4, 9, 2), float64], %var_2262: Tensor[(960), float32], %var_2263: Tensor[(110, 2), float64], %var_2270: Tensor[(45, 2), bool]) -> (Tensor[(4, 9, 2), int16], Tensor[(7, 13, 15), bool], Tensor[(960), float32], Tensor[(110, 2), float64], Tensor[(1365), float32], Tensor[(80), uint32], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) {
  %485 = cast(%var_2245, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
  %486 = asinh(%485) /* ty=Tensor[(4, 9, 2), float64] */;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
  %488 = sin(%487) /* ty=Tensor[(4, 9, 2), float32] */;
  %489 = cast(%486, dtype="int16") /* ty=Tensor[(4, 9, 2), int16] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="int16") /* ty=Tensor[(4, 9, 2), int16] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %493 = cast(%var_2262, dtype="float32") /* ty=Tensor[(960), float32] */;
  %494 = cast(%var_2263, dtype="float64") /* ty=Tensor[(110, 2), float64] */;
  %495 = cast(meta[relay.Constant][43] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %496 = cast(meta[relay.Constant][44] /* ty=Tensor[(80), uint32] */, dtype="uint32") /* ty=Tensor[(80), uint32] */;
  %497 = reshape(%493, newshape=[16, 4, 15]) /* ty=Tensor[(16, 4, 15), float32] */;
  %498 = reshape(%494, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %499 = reshape(%495, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %500 = reshape(%496, newshape=[80]) /* ty=Tensor[(80), uint32] */;
  %501 = @func_1382(%497, %498, %499, %500) /* ty=(Tensor[(16, 4, 15), float32], Tensor[(220), float64], Tensor[(7, 13, 15), bool], Tensor[(5, 4, 4), float32], Tensor[(80), uint32], Tensor[(26), float32], Tensor[(16, 4, 15), int8], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(189), int32], Tensor[(7, 3, 9), float64], Tensor[(7, 13, 15), bool]) */;
  %502 = cast(%var_2270, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %503 = cast(%var_2270, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %504 = reshape(%502, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %505 = reshape(%503, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %506 = @func_521(%504, %505) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
  %507 = bitwise_or(%491, %492) /* ty=Tensor[(4, 9, 2), int16] */;
  %508 = %501.2;
  %509 = %506.1;
  (%507, %508, %var_2262, %var_2263, meta[relay.Constant][43] /* ty=Tensor[(1365), float32] */, meta[relay.Constant][44] /* ty=Tensor[(80), uint32] */, %509, %var_2270)
}

def @func_2823(%var_2821: Tensor[(13, 8, 14), int64], %var_2822: Tensor[(13, 8, 14), int64]) -> (Tensor[(13, 8, 14), float64],) {
  @func_2819(%var_2821, %var_2822) /* ty=(Tensor[(13, 8, 14), float64],) */
}

def @func_6362() -> (Tensor[(1, 8, 4), float64],) {
  @func_6360() /* ty=(Tensor[(1, 8, 4), float64],) */
}

def @func_6264() -> Tensor[(1, 8, 4), float64] {
  %510 = @func_6245() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) */;
  %510.0
}

def @func_1091(%var_1059: Tensor[(2, 13, 1), float32], %var_1066: Tensor[(1365), float32]) -> (Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) {
  %511 = cast(%var_1059, dtype="float32") /* ty=Tensor[(2, 13, 1), float32] */;
  %512 = cast(meta[relay.Constant][45] /* ty=Tensor[(55, 4), float64] */, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %513 = cast(%var_1066, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %514 = reshape(%512, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %515 = reshape(%513, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %516 = @func_600(%514, %515) /* ty=(Tensor[(10, 2, 11), float64], Tensor[(7, 13, 15), bool], Tensor[(1365), float32]) */;
  %517 = log(%511) /* ty=Tensor[(2, 13, 1), float32] */;
  %518 = %516.2;
  (%517, %518, meta[relay.Constant][45] /* ty=Tensor[(55, 4), float64] */, %var_1066)
}

def @func_5214(%var_5201: int32, %var_5202: Tensor[(90), int32]) -> (Tensor[(15, 6, 1), int32], int32, Tensor[(90), int32], Tensor[(15, 13, 4), float32], Tensor[(6, 5, 11), int64], Tensor[(330), int64]) {
  %519 = cast(%var_5201, dtype="int32") /* ty=int32 */;
  %520 = cast(%var_5202, dtype="int32") /* ty=Tensor[(90), int32] */;
  %521 = reshape(%519, newshape=[]) /* ty=int32 */;
  %522 = reshape(%520, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), int32] */;
  %523 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %524 = atanh(%523) /* ty=Tensor[(15, 13, 4), float32] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %526 = cast(meta[relay.Constant][47] /* ty=Tensor[(330), int64] */, dtype="int64") /* ty=Tensor[(330), int64] */;
  %527 = cast(meta[relay.Constant][47] /* ty=Tensor[(330), int64] */, dtype="int64") /* ty=Tensor[(330), int64] */;
  %528 = reshape(%526, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), int64] */;
  %529 = reshape(%527, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), int64] */;
  %530 = @func_5117(%528, %529) /* ty=(Tensor[(6, 5, 11), int64],) */;
  %531 = @func_4784(%521, %522) /* ty=Tensor[(15, 6, 1), int32] */;
  %532 = atan(%525) /* ty=Tensor[(15, 13, 4), float32] */;
  %533 = %530.0;
  (%531, %var_5201, %var_5202, %532, %533, meta[relay.Constant][47] /* ty=Tensor[(330), int64] */)
}

def @func_6958() -> Tensor[(?, 8, 4), float32] {
  %542 = fn () -> Tensor[(?, 8, 4), float32] {
    %534 = @func_6387() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) */;
    %535 = %534.1;
    %536 = cast(%535, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
    %537 = erf(%536) /* ty=Tensor[(1, 8, 4), float32] */;
    %538 = cast(%535, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
    %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%537, dtype="float32") /* ty=Tensor[(1, 8, 4), float32] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%540, %541) /* ty=Tensor[(?, 8, 4), float32] */
  };
  %542() /* ty=Tensor[(?, 8, 4), float32] */
}

def @func_6360() -> (Tensor[(1, 8, 4), float64],) {
  %543 = @func_6264() /* ty=Tensor[(1, 8, 4), float64] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(1, 8, 4), float64] */;
  %545 = log2(%544) /* ty=Tensor[(1, 8, 4), float64] */;
  (%545,)
}

def @func_4532(%var_4528: Tensor[(10, 12, 1), int8], %var_4529: Tensor[(1800, 2), uint64], %var_4530: Tensor[(4), uint64], %var_4531: Tensor[(10, 96), float32]) -> (Tensor[(10, 12, 1), bool], Tensor[(13, 8, 14), float64], Tensor[(1456), int64], Tensor[(10, 12, 1), bool], Tensor[(15, 15, 16), uint64], Tensor[(1800, 2), uint64], Tensor[(10, 12, 1), float32], Tensor[(36, 2), float64], Tensor[(4), uint64], Tensor[(10, 96), float32]) {
  @func_4526(%var_4528, %var_4529, %var_4530, %var_4531) /* ty=(Tensor[(10, 12, 1), bool], Tensor[(13, 8, 14), float64], Tensor[(1456), int64], Tensor[(10, 12, 1), bool], Tensor[(15, 15, 16), uint64], Tensor[(1800, 2), uint64], Tensor[(10, 12, 1), float32], Tensor[(36, 2), float64], Tensor[(4), uint64], Tensor[(10, 96), float32]) */
}

def @func_6469(%var_6450: bool) -> (Tensor[(1, 8, 4), float32], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365), float32], Tensor[(7, 3, 9), int32], Tensor[(2016), int32], bool, Tensor[(189), float32]) {
  %546 = @func_6245() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) */;
  %547 = cast(meta[relay.Constant][48] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %548 = cast(meta[relay.Constant][49] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %549 = reshape(%547, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %550 = reshape(%548, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %551 = @func_1091(%549, %550) /* ty=(Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) */;
  %552 = cast(meta[relay.Constant][50] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %553 = cast(meta[relay.Constant][50] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %554 = cast(%var_6450, dtype="bool") /* ty=bool */;
  %555 = cast(meta[relay.Constant][51] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %556 = reshape(%552, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), int32] */;
  %557 = reshape(%553, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), int32] */;
  %558 = reshape(%554, newshape=[]) /* ty=bool */;
  %559 = reshape(%555, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %560 = @func_3486(%556, %557, %558, %559) /* ty=(Tensor[(16, 14, 9), int32], Tensor[(11, 13, 11), bool], Tensor[(1573), bool], Tensor[(312), int8], Tensor[(1365), float32], Tensor[(189), int32], Tensor[(6, 4, 8), float32], Tensor[(7, 3, 9), int32], Tensor[(7, 3, 9), bool]) */;
  %561 = cast(meta[relay.Constant][51] /* ty=Tensor[(189), int32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %562 = %546.1;
  %563 = %551.1;
  %564 = %560.7;
  %565 = sin(%561) /* ty=Tensor[(189), float32] */;
  (%562, %563, meta[relay.Constant][48] /* ty=Tensor[(26), float32] */, meta[relay.Constant][49] /* ty=Tensor[(1365), float32] */, %564, meta[relay.Constant][50] /* ty=Tensor[(2016), int32] */, %var_6450, %565)
}

def @func_5887(%var_5883: Tensor[(7, 3, 12), int64], %var_5884: Tensor[(7, 3, 12), int64], %var_5885: Tensor[(960), float32], %var_5886: Tensor[(55, 4), float64]) -> (Tensor[(4, 9, 2), int16], Tensor[(72), float64], Tensor[(960), float32], Tensor[(55, 4), float64], Tensor[(90), bool], Tensor[(7, 3, 12), float64], Tensor[(7, 3, 12), float32]) {
  @func_5881(%var_5883, %var_5884, %var_5885, %var_5886) /* ty=(Tensor[(4, 9, 2), int16], Tensor[(72), float64], Tensor[(960), float32], Tensor[(55, 4), float64], Tensor[(90), bool], Tensor[(7, 3, 12), float64], Tensor[(7, 3, 12), float32]) */
}

def @func_1095(%var_1093: Tensor[(2, 13, 1), float32], %var_1094: Tensor[(1365), float32]) -> (Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) {
  @func_1091(%var_1093, %var_1094) /* ty=(Tensor[(2, 13, 1), float32], Tensor[(1365), float32], Tensor[(55, 4), float64], Tensor[(1365), float32]) */
}

def @func_4787(%var_4785: int32, %var_4786: Tensor[(15, 6, 1), int32]) -> Tensor[(15, 6, 1), int32] {
  %568 = fn (%var_4766: int32, %var_4767: Tensor[(15, 6, 1), int32]) -> Tensor[(15, 6, 1), int32] {
    %566 = cast(%var_4766, dtype="int32") /* ty=int32 */;
    %567 = cast(%var_4767, dtype="int32") /* ty=Tensor[(15, 6, 1), int32] */;
    right_shift(%566, %567) /* ty=Tensor[(15, 6, 1), int32] */
  };
  %568(%var_4785, %var_4786) /* ty=Tensor[(15, 6, 1), int32] */
}

def @func_2332(%var_2329: Tensor[(4, 14, 2), float32], %var_2330: uint16, %var_2331: Tensor[(12, 156), uint16]) -> (Tensor[(4, 14, 2), float32], Tensor[(5, 6, 3), bool], Tensor[(90), bool], Tensor[(12, 13, 12), bool], uint16, Tensor[(12, 156), uint16]) {
  %582 = fn (%var_2310: Tensor[(4, 14, 2), float32], %var_2323: uint16, %var_2324: Tensor[(12, 156), uint16]) -> (Tensor[(4, 14, 2), float32], Tensor[(5, 6, 3), bool], Tensor[(90), bool], Tensor[(12, 13, 12), bool], uint16, Tensor[(12, 156), uint16]) {
    %569 = cast(%var_2310, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    %570 = cast(meta[relay.Constant][52] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %571 = cast(meta[relay.Constant][52] /* ty=Tensor[(90), bool] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %572 = reshape(%570, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
    %573 = reshape(%571, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
    %574 = @func_521(%572, %573) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
    %575 = cast(%var_2323, dtype="uint16") /* ty=uint16 */;
    %576 = cast(%var_2324, dtype="uint16") /* ty=Tensor[(12, 156), uint16] */;
    %577 = reshape(%575, newshape=[]) /* ty=uint16 */;
    %578 = reshape(%576, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), uint16] */;
    %579 = asinh(%569) /* ty=Tensor[(4, 14, 2), float32] */;
    %580 = %574.0;
    %581 = @func_993(%577, %578) /* ty=Tensor[(12, 13, 12), bool] */;
    (%579, %580, meta[relay.Constant][52] /* ty=Tensor[(90), bool] */, %581, %var_2323, %var_2324)
  };
  %582(%var_2329, %var_2330, %var_2331) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(5, 6, 3), bool], Tensor[(90), bool], Tensor[(12, 13, 12), bool], uint16, Tensor[(12, 156), uint16]) */
}

def @func_5117(%var_5106: Tensor[(6, 5, 11), int64], %var_5107: Tensor[(6, 5, 11), int64]) -> (Tensor[(6, 5, 11), int64],) {
  %583 = cast(%var_5107, dtype="int64") /* ty=Tensor[(6, 5, 11), int64] */;
  %584 = shape_of(%var_5106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%var_5106, dtype="int64") /* ty=Tensor[(6, 5, 11), int64] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %587 = left_shift(%585, %586) /* ty=Tensor[(6, 5, 11), int64] */;
  (%587,)
}

def @func_3178(%var_3174: bool, %var_3175: Tensor[(11, 13, 11), bool], %var_3176: Tensor[(312), int8], %var_3177: Tensor[(1365), float32]) -> (Tensor[(11, 13, 11), bool], uint16, Tensor[(312), int8], Tensor[(90), bool], Tensor[(1365), float32]) {
  @func_3172(%var_3174, %var_3175, %var_3176, %var_3177) /* ty=(Tensor[(11, 13, 11), bool], uint16, Tensor[(312), int8], Tensor[(90), bool], Tensor[(1365), float32]) */
}

def @func_7018() -> Tensor[(1, 8, 4), float32] {
  %589 = fn () -> Tensor[(1, 8, 4), float32] {
    %588 = @func_6528() /* ty=(Tensor[(1, 8, 4), float32], Tensor[(80), uint32], Tensor[(1, 72), float64], Tensor[(960), float32], Tensor[(220), float64], Tensor[(90, 1), bool]) */;
    %588.0
  };
  %589() /* ty=Tensor[(1, 8, 4), float32] */
}

def @func_6658(%var_6656: Tensor[(12, 8, 4), float64], %var_6657: bool) -> (Tensor[(12, 8, 4), bool], Tensor[(12, 8, 4), uint32], Tensor[(189), float32], bool) {
  %602 = fn (%var_6609: Tensor[(12, 8, 4), float64], %var_6653: bool) -> (Tensor[(12, 8, 4), bool], Tensor[(12, 8, 4), uint32], Tensor[(189), float32], bool) {
    %590 = @func_6360() /* ty=(Tensor[(1, 8, 4), float64],) */;
    %591 = %590.0;
    %592 = cast(%591, dtype="bool") /* ty=Tensor[(1, 8, 4), bool] */;
    %593 = cast(%var_6609, dtype="bool") /* ty=Tensor[(12, 8, 4), bool] */;
    %594 = cast(%var_6609, dtype="uint32") /* ty=Tensor[(12, 8, 4), uint32] */;
    %595 = cast(%591, dtype="uint32") /* ty=Tensor[(1, 8, 4), uint32] */;
    %596 = cast(%var_6653, dtype="bool") /* ty=bool */;
    %597 = reshape(%596, newshape=[]) /* ty=bool */;
    %598 = @func_6469(%597) /* ty=(Tensor[(1, 8, 4), float32], Tensor[(1365), float32], Tensor[(26), float32], Tensor[(1365), float32], Tensor[(7, 3, 9), int32], Tensor[(2016), int32], bool, Tensor[(189), float32]) */;
    %599 = logical_and(%592, %593) /* ty=Tensor[(12, 8, 4), bool] */;
    %600 = minimum(%594, %595) /* ty=Tensor[(12, 8, 4), uint32] */;
    %601 = %598.7;
    (%599, %600, %601, %var_6653)
  };
  %602(%var_6656, %var_6657) /* ty=(Tensor[(12, 8, 4), bool], Tensor[(12, 8, 4), uint32], Tensor[(189), float32], bool) */
}

def @func_6126(%var_6104: Tensor[(13, 16, 12), int64]) -> (Tensor[(13, 16, 12), float64], Tensor[(13, 16, 12), float64]) {
  %603 = cast(%var_6104, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
  %604 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(13, 16, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 16, 12), int64] */, dtype="bool") /* ty=Tensor[(13, 16, 12), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %607 = not_equal(%605, %606) /* ty=Tensor[(13, 16, 12), bool] */;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %609 = cast(%607, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %610 = shape_of(%var_6104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_6104, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %613 = acos(%608) /* ty=Tensor[(13, 16, 12), float64] */;
  %614 = floor_divide(%611, %612) /* ty=Tensor[(13, 16, 12), float64] */;
  (%613, %614)
}

def @func_6213(%var_6177: Tensor[(14, 13, 6), float64], %var_6178: Tensor[(14, 13, 6), float64], %var_6190: Tensor[(20, 180), uint64]) -> (Tensor[(14, 13, 6), uint64], Tensor[(15, 15, 16), uint64], uint64, Tensor[(20, 180), uint64], Tensor[(5, 6, 3), bool], Tensor[(45, 2), bool]) {
  %615 = cast(%var_6178, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %616 = shape_of(%var_6177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_6177, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = not_equal(%617, %618) /* ty=Tensor[(14, 13, 6), bool] */;
  %620 = cast(%var_6177, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %624 = cast(meta[relay.Constant][54] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %625 = cast(%var_6190, dtype="uint64") /* ty=Tensor[(20, 180), uint64] */;
  %626 = reshape(%624, newshape=[]) /* ty=uint64 */;
  %627 = reshape(%625, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), uint64] */;
  %628 = cast(meta[relay.Constant][55] /* ty=Tensor[(45, 2), bool] */, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %629 = cast(meta[relay.Constant][55] /* ty=Tensor[(45, 2), bool] */, dtype="bool") /* ty=Tensor[(45, 2), bool] */;
  %630 = reshape(%628, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %631 = reshape(%629, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %632 = @func_521(%630, %631) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
  %633 = subtract(%622, %623) /* ty=Tensor[(14, 13, 6), uint64] */;
  %634 = @func_38(%626, %627) /* ty=Tensor[(15, 15, 16), uint64] */;
  %635 = %632.1;
  (%633, %634, meta[relay.Constant][54] /* ty=uint64 */, %var_6190, %635, meta[relay.Constant][55] /* ty=Tensor[(45, 2), bool] */)
}

def @func_473(%var_471: Tensor[(7, 3, 9), int32], %var_472: Tensor[(7, 3, 9), int32]) -> (Tensor[(7, 3, 9), int32],) {
  %641 = fn (%var_458: Tensor[(7, 3, 9), int32], %var_459: Tensor[(7, 3, 9), int32]) -> (Tensor[(7, 3, 9), int32],) {
    %636 = cast(%var_459, dtype="int32") /* ty=Tensor[(7, 3, 9), int32] */;
    %637 = shape_of(%var_458, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%var_458, dtype="int32") /* ty=Tensor[(7, 3, 9), int32] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %640 = maximum(%638, %639) /* ty=Tensor[(7, 3, 9), int32] */;
    (%640,)
  };
  %641(%var_471, %var_472) /* ty=(Tensor[(7, 3, 9), int32],) */
}

def @func_6288() -> Tensor[(1, 8, 4), float32] {
  %642 = @func_6245() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float32]) */;
  %642.1
}

def @func_6860() -> Tensor[(1, 8, 4), float64] {
  %643 = @func_6387() /* ty=(Tensor[(1, 8, 4), float64], Tensor[(1, 8, 4), float64]) */;
  %643.0
}

def @func_1924(%var_1922: Tensor[(6, 16, 8), float64]) -> (Tensor[(6, 16, 8), float64],) {
  @func_1921(%var_1922) /* ty=(Tensor[(6, 16, 8), float64],) */
}

def @func_1875(%var_1869: Tensor[(8, 3, 13), int8], %var_1870: Tensor[(8, 3, 13), int8], %var_1871: Tensor[(8, 3, 13), int8], %var_1872: uint16, %var_1873: Tensor[(15, 6), bool], %var_1874: Tensor[(1, 1365), float32]) -> (Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) {
  @func_1867(%var_1869, %var_1870, %var_1871, %var_1872, %var_1873, %var_1874) /* ty=(Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) */
}

def @func_1867(%var_1775: Tensor[(8, 3, 13), int8], %var_1776: Tensor[(8, 3, 13), int8], %var_1793: Tensor[(8, 3, 13), int8], %var_1799: uint16, %var_1806: Tensor[(15, 6), bool], %var_1821: Tensor[(1, 1365), float32]) -> (Tensor[(8, 3, 13), bool], Tensor[(8, 3, 13), uint8], Tensor[(12, 13, 12), bool], uint16, Tensor[(5, 6, 3), bool], Tensor[(15, 6), bool], Tensor[(7, 3, 9), int32], Tensor[(189), int32], Tensor[(7, 13, 15), bool], Tensor[(1, 1365), float32], Tensor[(15, 15, 16), int32], Tensor[(3600), uint64], Tensor[(1872, ?), int32]) {
  %644 = cast(%var_1776, dtype="bool") /* ty=Tensor[(8, 3, 13), bool] */;
  %645 = shape_of(%var_1775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%var_1775, dtype="bool") /* ty=Tensor[(8, 3, 13), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = cast(%var_1793, dtype="uint8") /* ty=Tensor[(8, 3, 13), uint8] */;
  %649 = shape_of(%var_1775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%var_1775, dtype="uint8") /* ty=Tensor[(8, 3, 13), uint8] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %652 = cast(%var_1799, dtype="uint16") /* ty=uint16 */;
  %653 = cast(meta[relay.Constant][56] /* ty=Tensor[(1872, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1872, 1), uint16] */;
  %654 = reshape(%652, newshape=[]) /* ty=uint16 */;
  %655 = reshape(%653, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), uint16] */;
  %656 = cast(%var_1806, dtype="bool") /* ty=Tensor[(15, 6), bool] */;
  %657 = cast(%var_1806, dtype="bool") /* ty=Tensor[(15, 6), bool] */;
  %658 = reshape(%656, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %659 = reshape(%657, newshape=[5, 6, 3]) /* ty=Tensor[(5, 6, 3), bool] */;
  %660 = @func_521(%658, %659) /* ty=(Tensor[(5, 6, 3), bool], Tensor[(5, 6, 3), bool]) */;
  %661 = cast(meta[relay.Constant][57] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %662 = cast(meta[relay.Constant][57] /* ty=Tensor[(189), int32] */, dtype="int32") /* ty=Tensor[(189), int32] */;
  %663 = reshape(%661, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %664 = reshape(%662, newshape=[7, 3, 9]) /* ty=Tensor[(7, 3, 9), int32] */;
  %665 = @func_470(%663, %664) /* ty=(Tensor[(7, 3, 9), int32],) */;
  %666 = cast(%var_1821, dtype="float32") /* ty=Tensor[(1, 1365), float32] */;
  %667 = reshape(%666, newshape=[7, 13, 15]) /* ty=Tensor[(7, 13, 15), float32] */;
  %668 = cast(%var_1799, dtype="uint64") /* ty=uint64 */;
  %669 = cast(meta[relay.Constant][58] /* ty=Tensor[(3600), uint64] */, dtype="uint64") /* ty=Tensor[(3600), uint64] */;
  %670 = reshape(%668, newshape=[]) /* ty=uint64 */;
  %671 = reshape(%669, newshape=[3600]) /* ty=Tensor[(3600), uint64] */;
  %672 = @func_239(%670, %671) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), uint32], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), uint64], Tensor[(15, 15, 16), int32]) */;
  %673 = cast(meta[relay.Constant][56] /* ty=Tensor[(1872, 1), uint16] */, dtype="float64") /* ty=Tensor[(1872, 1), float64] */;
  %674 = log(%673) /* ty=Tensor[(1872, 1), float64] */;
  %675 = cast(meta[relay.Constant][56] /* ty=Tensor[(1872, 1), uint16] */, dtype="int64") /* ty=Tensor[(1872, 1), int64] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(2), int32] */;
  %677 = cast(%674, dtype="int64") /* ty=Tensor[(1872, 1), int64] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %679 = bitwise_or(%677, %678) /* ty=Tensor[(1872, ?), int64] */;
  %680 = cast(%679, dtype="int32") /* ty=Tensor[(1872, ?), int32] */;
  %681 = shape_of(%674, dtype="int32") /* ty=Tensor[(2), int32] */;
  %682 = cast(%674, dtype="int32") /* ty=Tensor[(1872, 1), int32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %684 = less(%646, %647) /* ty=Tensor[(8, 3, 13), bool] */;
  %685 = bitwise_xor(%650, %651) /* ty=Tensor[(8, 3, 13), uint8] */;
  %686 = @func_993(%654, %655) /* ty=Tensor[(12, 13, 12), bool] */;
  %687 = %660.0;
  %688 = %665.0;
  %689 = @func_451(%667) /* ty=Tensor[(7, 13, 15), bool] */;
  %690 = %672.4;
  %691 = bitwise_and(%682, %683) /* ty=Tensor[(1872, ?), int32] */;
  (%684, %685, %686, %var_1799, %687, %var_1806, %688, meta[relay.Constant][57] /* ty=Tensor[(189), int32] */, %689, %var_1821, %690, meta[relay.Constant][58] /* ty=Tensor[(3600), uint64] */, %691)
}

def @func_4643(%var_4641: int64, %var_4642: Tensor[(12, 15, 10), int64]) -> (Tensor[(2, 14, 6), bool], Tensor[(12, 15, 10), bool]) {
  %698 = fn (%var_4620: int64, %var_4636: Tensor[(12, 15, 10), int64]) -> (Tensor[(2, 14, 6), bool], Tensor[(12, 15, 10), bool]) {
    %692 = cast(%var_4620, dtype="bool") /* ty=bool */;
    %693 = cast(meta[relay.Constant][59] /* ty=Tensor[(2, 14, 6), int64] */, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
    %694 = cast(%var_4620, dtype="bool") /* ty=bool */;
    %695 = cast(%var_4636, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
    %696 = greater(%692, %693) /* ty=Tensor[(2, 14, 6), bool] */;
    %697 = less(%694, %695) /* ty=Tensor[(12, 15, 10), bool] */;
    (%696, %697)
  };
  %698(%var_4641, %var_4642) /* ty=(Tensor[(2, 14, 6), bool], Tensor[(12, 15, 10), bool]) */
}

def @func_4935(%var_4934: Tensor[(12, 16, 9), float32]) -> (Tensor[(12, 16, 9), float32],) {
  %701 = fn (%var_4930: Tensor[(12, 16, 9), float32]) -> (Tensor[(12, 16, 9), float32],) {
    %699 = cast(%var_4930, dtype="float32") /* ty=Tensor[(12, 16, 9), float32] */;
    %700 = sinh(%699) /* ty=Tensor[(12, 16, 9), float32] */;
    (%700,)
  };
  %701(%var_4934) /* ty=(Tensor[(12, 16, 9), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen234/build/output.py", line 1314, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:59:36] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

