import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_21 = relay.var("var_21", dtype = "uint64", shape = ())#candidate|21|()|var|uint64
var_22 = relay.var("var_22", dtype = "uint64", shape = (15, 15, 16))#candidate|22|(15, 15, 16)|var|uint64
bop_23 = relay.add(var_21.astype('uint64'), var_22.astype('uint64')) # shape=(15, 15, 16)
output = bop_23
output2 = bop_23
func_38 = relay.Function([var_21,var_22,], output)
mod['func_38'] = func_38
mod = relay.transform.InferType()(mod)
var_39 = relay.var("var_39", dtype = "uint64", shape = ())#candidate|39|()|var|uint64
var_40 = relay.var("var_40", dtype = "uint64", shape = (15, 15, 16))#candidate|40|(15, 15, 16)|var|uint64
output = func_38(var_39,var_40,)
func_41 = relay.Function([var_39,var_40,], output)
mutated_mod['func_41'] = func_41
mutated_mod = relay.transform.InferType()(mutated_mod)
const_188 = relay.const([[[8.020683,-9.459158,6.151893,-9.957576,7.330603,-9.947309,6.310629,0.263460,3.289054,-6.425177],[-6.471669,-4.136988,4.292589,4.023739,3.150716,-0.586489,9.648526,0.071922,-9.341216,8.313053],[-4.268860,-2.453407,-3.816676,1.094965,7.252204,0.904200,-3.093718,2.729102,-7.104534,5.347187],[0.173834,-9.474697,8.032620,4.737475,3.060617,2.601570,-8.317354,-7.962304,8.837445,0.146489],[4.627876,-5.729271,-5.040060,1.806075,8.682967,-8.364813,-4.193198,3.011335,-2.633305,2.933084],[0.203120,-3.863703,-2.343091,-5.808583,-4.075611,0.784148,-4.501558,-3.640212,2.154488,9.466985],[-7.671522,7.827616,5.728707,-2.267854,-3.205814,9.808056,-1.802537,9.380048,-9.710781,-7.230903],[2.364870,-3.798962,-1.795855,-6.537559,2.440761,-1.886179,1.401578,-0.150766,-3.548742,3.224413],[7.837822,-4.509311,-0.144681,-8.407226,-3.671140,2.779747,-9.212232,6.977151,-8.483229,-9.350400],[-3.628377,-7.807949,3.883393,-6.281163,1.236606,-8.150646,-6.451205,4.706969,-4.683942,-5.822537]],[[-6.089782,0.012973,1.151342,9.800261,-2.021074,0.537787,-2.770676,2.285285,0.363716,8.458458],[2.620684,9.904233,4.100300,-5.072145,-4.603675,-5.592384,-1.706458,-3.551474,-2.760892,-3.122231],[9.141046,4.597011,5.033011,2.385748,-5.344056,1.209659,-5.631015,-6.671968,5.729959,-7.500973],[8.576393,0.647088,-4.553197,3.832210,6.040370,3.313404,-4.220807,3.274871,1.227769,-0.567725],[8.319389,5.568269,-0.327771,9.078552,-2.423109,1.806279,-3.792954,-9.663820,-9.278713,-0.835640],[6.776727,3.748606,-0.335693,2.338813,8.399843,-5.091910,9.662527,6.082169,7.670060,-1.126593],[-3.212595,5.230141,-6.342870,8.917311,0.518709,-5.423655,5.228112,-5.622021,-5.843919,-4.893069],[8.508270,5.658586,-4.294605,-3.908678,4.386398,-3.830607,0.631113,0.071821,9.572647,-5.084470],[-0.284326,6.325934,-6.655424,3.775754,6.107792,3.412618,-6.866489,9.551881,5.691317,-6.166939],[-1.718817,-7.571131,-0.901923,0.335914,-7.095261,2.767937,4.005247,-2.615971,-0.570738,-7.841861]],[[2.830017,6.797045,-3.305309,0.561229,-3.593542,7.856436,-4.512377,-9.398776,3.758288,-6.898841],[-8.488050,-7.667268,-7.857335,0.035889,-7.994137,-7.401104,6.855478,-0.366864,-4.457312,0.338190],[8.560091,-3.229989,-1.364472,2.239826,-4.014439,6.456086,8.209644,-2.462319,2.273831,-1.073111],[-9.382767,4.663341,-8.569248,2.631489,5.346633,-3.400335,8.595032,-4.738001,8.383301,7.547508],[1.432763,-8.258891,-0.668417,-4.133785,3.461978,-7.549622,4.976475,5.473968,0.090131,5.397238],[-5.243999,0.224643,-8.058861,4.546147,0.028313,9.708579,-7.737347,3.576013,0.019089,-2.662214],[1.583821,-6.183355,-6.924563,-5.771928,-6.513492,2.789187,3.165859,7.024218,-7.382862,-4.879698],[7.195968,8.984960,8.930476,7.910883,-3.399014,6.102696,-4.470012,0.090556,-0.377406,-3.218822],[7.390570,4.001226,-5.922208,-7.999751,3.433375,9.589863,-1.788378,-7.625524,4.087246,-1.540575],[5.554131,6.414337,0.655179,1.711263,8.465895,9.219214,9.817311,5.596485,1.905716,-3.056955]],[[-0.173353,5.097031,-2.509307,9.084477,4.531407,-5.061859,0.264052,-2.296908,-0.490304,-7.635257],[3.679873,-8.779125,-3.541092,2.410191,6.094462,9.276556,3.127662,-0.556220,-1.796663,5.105978],[-0.534214,0.415700,-9.093171,-6.559792,8.176830,-4.582871,-2.962908,1.232179,-5.096539,-9.300586],[-6.984832,-3.467321,7.024674,-0.700927,-7.090566,8.399155,2.349830,-6.525889,1.767511,-9.787263],[-0.305358,7.318455,2.362740,1.042764,5.860294,6.363231,0.967458,8.609551,-7.115031,7.877648],[-2.839256,7.584624,5.656674,7.520976,2.602676,4.576097,-8.619523,-8.619549,0.727190,9.686537],[-9.914875,-8.980939,-7.348357,-4.010241,0.220391,0.234837,-3.501166,8.407785,9.984376,-1.509912],[-5.280381,-7.816455,4.084693,-7.440743,-4.562681,7.790393,-2.693511,8.808897,-7.814705,-2.766406],[4.147453,8.278542,-1.982687,3.570203,5.232657,-2.265454,7.277534,-8.399281,-9.342176,2.713258],[-6.570969,7.380271,-6.222451,-4.606968,-5.979904,6.540925,-9.727008,4.930107,4.333581,-9.387026]],[[2.235023,9.070686,3.190090,9.249978,-3.808739,6.415132,7.962007,-4.703671,7.104711,-0.852922],[1.239613,9.568430,-9.418111,-8.789256,8.572484,-2.826676,-1.750961,7.210092,0.663893,8.537017],[6.991916,6.299617,0.794140,-3.270120,-3.367480,-1.610920,-8.981898,8.889131,-2.441869,2.649649],[2.658834,-0.040609,1.260561,4.225843,-3.189135,-9.386610,5.473087,2.325419,0.295451,7.745066],[-9.680226,8.445085,6.714324,-0.533698,1.965704,4.784304,1.557092,-5.240737,3.035949,-6.339495],[-9.004948,3.844935,-4.604473,-6.032182,2.055336,2.607603,0.429668,-5.166683,9.615382,-6.617640],[-6.601749,1.745520,-2.306174,-3.104022,-1.565069,3.493429,-5.831023,-0.797957,0.833383,-4.438343],[7.021165,8.404399,0.354600,1.626804,-7.875621,0.724112,-3.221431,-4.931437,-1.608743,-5.651942],[3.502548,4.963968,6.121574,-7.925040,-2.751258,6.126091,-3.810872,-0.651816,-0.421032,5.986696],[6.138929,-8.849401,6.554532,-1.204309,2.784639,-5.043923,8.664638,-6.481213,-7.759978,3.965064]],[[-5.389735,-1.108166,4.965149,-2.564533,-9.388815,-5.886978,-2.744298,1.889589,-8.346449,9.702985],[6.447160,-6.271578,2.038471,0.302672,-6.310892,-3.052829,1.810893,0.097745,3.234818,-3.941373],[5.442016,5.197010,6.854516,-0.653619,7.933746,-0.437031,9.575787,5.819601,9.274631,-1.564659],[3.446204,-8.974500,4.664867,-5.827293,2.982218,3.093233,9.142703,-2.220129,6.247632,-2.677459],[-9.179757,4.201454,-5.583105,-0.774747,2.349140,8.702423,5.119973,8.368523,1.675973,6.944081],[9.783189,-1.661544,-2.042616,4.991658,4.386821,-5.374329,-5.127367,6.061867,-7.597943,3.307819],[0.535847,-0.664498,-1.788496,0.963415,7.204958,8.033990,5.708579,-5.622309,-5.450082,-9.537305],[6.498271,-8.392930,-1.538974,-3.967282,8.666166,9.250504,-2.937720,-6.385621,9.247345,2.071237],[-4.053541,1.368301,-8.564842,0.608680,-4.307352,-7.888132,-2.790405,0.585173,-4.512722,6.163163],[0.238898,-9.669730,3.380078,0.418995,5.131165,0.280053,0.402178,4.194539,-2.219156,-9.837111]],[[-7.025704,5.262181,2.387827,-2.781122,-5.227760,-8.300836,-4.722252,-9.426684,7.399680,-7.060457],[-1.759978,-8.661930,3.921065,7.816231,5.301848,-7.868065,-6.202132,-1.631631,-7.580812,9.545450],[9.450028,8.729744,7.857286,7.936982,6.156972,4.247762,0.026196,0.503404,0.617010,7.491379],[-6.355003,7.317992,1.987605,7.353350,-2.123372,-9.430476,-5.698426,5.552729,0.784722,-9.350406],[-7.929898,-9.688855,9.543117,-4.078666,-5.069761,8.999122,7.824853,2.103182,1.564772,6.883725],[-1.517258,8.478893,1.451037,-2.512031,5.699354,2.354435,-4.222135,4.445406,1.773621,-0.893059],[8.271937,-2.820258,-7.248356,3.458455,-0.122487,5.662768,2.858530,2.712939,7.420091,8.693963],[-0.276236,3.954362,6.437228,0.815582,-4.427548,-9.611694,7.024765,3.413837,0.429666,6.545027],[3.299650,-2.491966,8.130199,4.363335,1.099906,4.424741,7.362520,-2.127114,-7.771927,8.287986],[7.245998,-2.156023,-9.709673,7.626534,1.470445,-2.966936,9.916470,2.541557,-4.937880,-1.476046]],[[9.368211,-5.770167,-6.888163,8.611000,-4.010944,7.936917,7.346883,-1.969777,9.162148,8.548338],[2.354896,9.434260,-6.324138,0.519088,8.837213,-8.436506,-9.815792,2.928475,8.012611,6.195071],[4.656871,8.938453,-5.415062,5.267874,3.790788,-0.961346,-3.295574,-9.163163,-5.537194,6.059026],[2.193205,9.515597,-0.762298,-6.424131,3.958189,2.779780,-4.819772,3.722706,7.609981,8.553224],[5.778174,0.146501,7.201447,-0.364219,4.914982,-4.918726,7.002297,-6.162862,-1.362460,2.306308],[-0.109140,1.364505,-9.505671,-7.672321,6.511758,-0.525814,0.425518,-7.111540,1.726779,2.248867],[-6.873674,8.825007,0.460804,-3.245268,-8.381863,3.558039,-3.198575,-2.052662,-2.643891,-9.569960],[-8.131303,-5.515238,-1.589457,-5.323701,-4.896912,3.374136,8.913851,-4.263233,-3.532963,8.600551],[1.268884,-1.761888,6.322223,-1.683579,5.240469,6.402185,2.380858,2.933408,-0.817034,-8.357545],[7.243930,6.815530,-2.620919,3.258342,-8.967053,-3.274776,-3.055410,-0.454291,4.998876,0.264790]],[[8.925909,-9.380284,-1.229601,9.118050,6.886803,0.463626,9.786535,-2.358177,9.573120,-2.655889],[-1.332320,8.705509,1.571311,-9.442657,-1.937304,8.487686,-2.092567,-6.706985,-4.494758,2.983257],[8.556905,-9.999199,7.291197,3.848404,2.265267,9.962701,-9.078555,-0.949470,-1.884956,-1.069852],[-8.766695,-0.421416,1.798008,2.799131,-4.315906,9.003102,-8.934229,-9.768157,-7.223226,-9.318981],[-8.092134,0.849613,-6.194268,-0.959986,-0.331169,8.624033,9.252892,5.755825,-8.088450,-8.623813],[0.073665,1.710081,8.373546,-8.354068,9.391427,2.015392,-6.352905,-8.057194,-4.650922,7.920996],[6.518853,1.053182,-0.153425,2.728621,-0.575877,-8.545061,2.393143,0.536700,3.329591,5.377097],[-4.002618,-9.148160,1.517382,2.846175,-6.698877,2.081237,8.351388,-0.148373,8.120635,-1.268901],[4.176216,-0.246460,-1.190098,0.039319,0.119675,-3.579019,-1.901743,-4.930148,1.742766,5.226581],[-0.997671,1.952913,-6.554990,7.470914,1.585593,0.663862,-4.255036,-9.043693,2.905542,5.261623]],[[-6.186976,-8.688112,-8.429833,-8.299379,-0.013731,7.620136,-5.719635,-7.167178,-6.917217,2.814243],[1.499334,-3.029075,-1.140533,9.943021,6.259600,-4.130920,-3.500315,-0.682614,0.646323,2.949883],[-9.921410,-4.753774,6.625092,7.506782,-3.315130,-4.822176,3.408818,-9.392527,5.526452,6.347920],[-2.610174,-6.056530,-4.722243,6.503047,6.248001,3.765695,-9.856907,1.155464,-7.878800,7.646744],[5.686916,4.519624,7.307971,-7.166270,6.394997,6.235393,6.903463,-3.364722,-0.602781,2.625155],[-6.470290,7.155697,-8.156160,2.470809,-9.470191,7.794898,-2.432959,-0.963560,-9.836209,-7.144218],[8.398542,8.881097,6.625221,-8.078097,-8.643164,8.055755,8.871287,3.958705,4.739431,-7.254726],[4.469355,9.040640,-7.227921,3.065267,-8.246984,-6.872905,4.387643,-9.356937,-8.479174,-9.394575],[-5.401903,4.613578,6.035410,6.489771,1.155367,-8.334469,-1.986407,-2.809251,9.275403,7.301347],[9.843843,3.269304,-8.399898,7.530589,4.906181,8.280471,-5.097919,2.170938,6.989301,-6.346733]],[[-0.400966,1.441734,0.088914,-8.374694,-1.844670,-1.842534,7.613183,-7.635234,-4.495492,-0.803243],[-4.497717,5.546444,5.914186,-0.173164,-5.646139,2.427597,8.031329,6.474878,8.500963,4.876241],[5.899938,5.165924,-3.598721,-9.991371,-3.173738,-5.054190,-4.263159,0.774183,-6.426593,-0.540184],[-0.189335,0.925736,8.531309,-0.730785,-9.019049,-7.098384,-4.199417,0.761385,5.090318,5.093363],[-9.749684,-9.955730,0.163256,-5.362848,4.871058,-9.676512,2.716950,0.111095,-9.562974,4.541686],[-8.576975,9.221937,1.822844,6.519119,-2.343146,-6.413632,-6.224644,-6.177655,-0.695604,1.366117],[3.250999,-1.280634,5.531828,2.561380,1.906166,8.787270,-2.044445,-4.005119,7.962352,5.602991],[-0.039952,-9.499986,-7.424996,8.341030,-9.490171,9.850660,-9.530853,-8.442690,3.117623,-4.167557],[-2.154837,-1.506166,-0.436354,-8.540343,-6.267568,7.943173,-4.227436,5.893502,-2.233915,4.559885],[0.419173,4.318009,-9.091638,-5.822702,4.159094,7.932178,-1.008458,4.307187,-3.773979,-3.200122]],[[8.225359,-7.758144,9.021496,-7.780600,-8.857375,-0.093783,-5.369435,6.426779,2.328676,7.076465],[-1.199147,-5.336908,-2.448028,4.455079,-7.616332,-5.919044,-9.027612,5.919783,-4.364268,3.905271],[9.248907,0.482189,2.352261,5.822068,-9.747427,-3.891304,2.507604,1.849448,-9.253587,-0.360763],[-7.518742,-5.804696,9.170578,-3.048927,1.329508,-1.440172,-2.614985,6.943937,7.693824,-4.417760],[3.309397,-2.406141,-9.583297,-1.404065,1.767396,8.434894,9.439879,-7.659147,9.118502,7.144040],[-5.535895,1.274772,7.200430,5.842447,0.227506,-3.144209,-9.957556,0.375331,-3.348153,3.925746],[6.845478,5.971135,-3.555581,0.238646,-2.136015,-8.542038,0.487231,3.928450,-0.904498,0.839369],[6.252015,-5.794187,-4.198682,-4.873245,-0.365917,-6.414960,-2.745678,-6.904918,8.822649,-2.206924],[-8.172140,0.079203,-4.595477,-6.552452,2.639096,5.538517,5.324521,-7.006081,4.254294,-3.583531],[-6.036644,2.333174,-8.627041,2.043758,-9.103812,-0.713180,-7.097868,-4.813038,-7.185268,-7.862017]]], dtype = "float32")#candidate|188|(12, 10, 10)|const|float32
uop_189 = relay.sigmoid(const_188.astype('float32')) # shape=(12, 10, 10)
func_38_call = mod.get_global_var('func_38')
func_41_call = mutated_mod.get_global_var('func_41')
var_195 = relay.var("var_195", dtype = "uint64", shape = ())#candidate|195|()|var|uint64
var_196 = relay.var("var_196", dtype = "uint64", shape = (3600,))#candidate|196|(3600,)|var|uint64
call_194 = func_38_call(relay.reshape(var_195.astype('uint64'), []), relay.reshape(var_196.astype('uint64'), [15, 15, 16]), )
call_197 = func_38_call(relay.reshape(var_195.astype('uint64'), []), relay.reshape(var_196.astype('uint64'), [15, 15, 16]), )
bop_206 = relay.add(const_188.astype('uint32'), var_195.astype('uint32')) # shape=(12, 10, 10)
func_38_call = mod.get_global_var('func_38')
func_41_call = mutated_mod.get_global_var('func_41')
call_212 = func_38_call(relay.reshape(var_195.astype('uint64'), []), relay.reshape(var_196.astype('uint64'), [15, 15, 16]), )
call_213 = func_38_call(relay.reshape(var_195.astype('uint64'), []), relay.reshape(var_196.astype('uint64'), [15, 15, 16]), )
func_38_call = mod.get_global_var('func_38')
func_41_call = mutated_mod.get_global_var('func_41')
call_216 = func_38_call(relay.reshape(var_195.astype('uint64'), []), relay.reshape(var_196.astype('uint64'), [15, 15, 16]), )
call_217 = func_38_call(relay.reshape(var_195.astype('uint64'), []), relay.reshape(var_196.astype('uint64'), [15, 15, 16]), )
bop_226 = relay.right_shift(call_194.astype('int32'), relay.reshape(var_196.astype('int32'), relay.shape_of(call_194))) # shape=(15, 15, 16)
bop_229 = relay.right_shift(call_197.astype('int32'), relay.reshape(var_196.astype('int32'), relay.shape_of(call_197))) # shape=(15, 15, 16)
output = relay.Tuple([uop_189,bop_206,call_212,call_216,bop_226,])
output2 = relay.Tuple([uop_189,bop_206,call_213,call_217,bop_229,])
func_239 = relay.Function([var_195,var_196,], output)
mod['func_239'] = func_239
mod = relay.transform.InferType()(mod)
mutated_mod['func_239'] = func_239
mutated_mod = relay.transform.InferType()(mutated_mod)
func_239_call = mutated_mod.get_global_var('func_239')
var_241 = relay.var("var_241", dtype = "uint64", shape = ())#candidate|241|()|var|uint64
var_242 = relay.var("var_242", dtype = "uint64", shape = (3600,))#candidate|242|(3600,)|var|uint64
call_240 = func_239_call(var_241,var_242,)
output = call_240
func_243 = relay.Function([var_241,var_242,], output)
mutated_mod['func_243'] = func_243
mutated_mod = relay.transform.InferType()(mutated_mod)
var_317 = relay.var("var_317", dtype = "float64", shape = (5, 11, 4))#candidate|317|(5, 11, 4)|var|float64
uop_318 = relay.exp(var_317.astype('float64')) # shape=(5, 11, 4)
output = uop_318
output2 = uop_318
func_320 = relay.Function([var_317,], output)
mod['func_320'] = func_320
mod = relay.transform.InferType()(mod)
mutated_mod['func_320'] = func_320
mutated_mod = relay.transform.InferType()(mutated_mod)
var_321 = relay.var("var_321", dtype = "float64", shape = (5, 11, 4))#candidate|321|(5, 11, 4)|var|float64
func_320_call = mutated_mod.get_global_var('func_320')
call_322 = func_320_call(var_321)
output = call_322
func_323 = relay.Function([var_321], output)
mutated_mod['func_323'] = func_323
mutated_mod = relay.transform.InferType()(mutated_mod)
var_414 = relay.var("var_414", dtype = "float32", shape = (7, 13, 15))#candidate|414|(7, 13, 15)|var|float32
uop_415 = relay.sigmoid(var_414.astype('float32')) # shape=(7, 13, 15)
uop_443 = relay.rsqrt(uop_415.astype('float64')) # shape=(7, 13, 15)
bop_445 = relay.less_equal(uop_443.astype('bool'), relay.reshape(uop_415.astype('bool'), relay.shape_of(uop_443))) # shape=(7, 13, 15)
output = bop_445
output2 = bop_445
func_451 = relay.Function([var_414,], output)
mod['func_451'] = func_451
mod = relay.transform.InferType()(mod)
mutated_mod['func_451'] = func_451
mutated_mod = relay.transform.InferType()(mutated_mod)
var_452 = relay.var("var_452", dtype = "float32", shape = (7, 13, 15))#candidate|452|(7, 13, 15)|var|float32
func_451_call = mutated_mod.get_global_var('func_451')
call_453 = func_451_call(var_452)
output = call_453
func_454 = relay.Function([var_452], output)
mutated_mod['func_454'] = func_454
mutated_mod = relay.transform.InferType()(mutated_mod)
var_458 = relay.var("var_458", dtype = "int32", shape = (7, 3, 9))#candidate|458|(7, 3, 9)|var|int32
var_459 = relay.var("var_459", dtype = "int32", shape = (7, 3, 9))#candidate|459|(7, 3, 9)|var|int32
bop_460 = relay.maximum(var_458.astype('int32'), relay.reshape(var_459.astype('int32'), relay.shape_of(var_458))) # shape=(7, 3, 9)
output = relay.Tuple([bop_460,])
output2 = relay.Tuple([bop_460,])
func_470 = relay.Function([var_458,var_459,], output)
mod['func_470'] = func_470
mod = relay.transform.InferType()(mod)
var_471 = relay.var("var_471", dtype = "int32", shape = (7, 3, 9))#candidate|471|(7, 3, 9)|var|int32
var_472 = relay.var("var_472", dtype = "int32", shape = (7, 3, 9))#candidate|472|(7, 3, 9)|var|int32
output = func_470(var_471,var_472,)
func_473 = relay.Function([var_471,var_472,], output)
mutated_mod['func_473'] = func_473
mutated_mod = relay.transform.InferType()(mutated_mod)
var_498 = relay.var("var_498", dtype = "bool", shape = (5, 6, 3))#candidate|498|(5, 6, 3)|var|bool
var_499 = relay.var("var_499", dtype = "bool", shape = (5, 6, 3))#candidate|499|(5, 6, 3)|var|bool
bop_500 = relay.logical_or(var_498.astype('bool'), relay.reshape(var_499.astype('bool'), relay.shape_of(var_498))) # shape=(5, 6, 3)
uop_505 = relay.sinh(var_498.astype('float32')) # shape=(5, 6, 3)
bop_516 = relay.greater(var_499.astype('bool'), relay.reshape(uop_505.astype('bool'), relay.shape_of(var_499))) # shape=(5, 6, 3)
output = relay.Tuple([bop_500,bop_516,])
output2 = relay.Tuple([bop_500,bop_516,])
func_521 = relay.Function([var_498,var_499,], output)
mod['func_521'] = func_521
mod = relay.transform.InferType()(mod)
var_522 = relay.var("var_522", dtype = "bool", shape = (5, 6, 3))#candidate|522|(5, 6, 3)|var|bool
var_523 = relay.var("var_523", dtype = "bool", shape = (5, 6, 3))#candidate|523|(5, 6, 3)|var|bool
output = func_521(var_522,var_523,)
func_524 = relay.Function([var_522,var_523,], output)
mutated_mod['func_524'] = func_524
mutated_mod = relay.transform.InferType()(mutated_mod)
const_586 = relay.const(-4.017116, dtype = "float64")#candidate|586|()|const|float64
var_587 = relay.var("var_587", dtype = "float64", shape = (10, 2, 11))#candidate|587|(10, 2, 11)|var|float64
bop_588 = relay.power(const_586.astype('float64'), var_587.astype('float64')) # shape=(10, 2, 11)
func_451_call = mod.get_global_var('func_451')
func_454_call = mutated_mod.get_global_var('func_454')
var_592 = relay.var("var_592", dtype = "float32", shape = (1365,))#candidate|592|(1365,)|var|float32
call_591 = func_451_call(relay.reshape(var_592.astype('float32'), [7, 13, 15]))
call_593 = func_451_call(relay.reshape(var_592.astype('float32'), [7, 13, 15]))
output = relay.Tuple([bop_588,call_591,var_592,])
output2 = relay.Tuple([bop_588,call_593,var_592,])
func_600 = relay.Function([var_587,var_592,], output)
mod['func_600'] = func_600
mod = relay.transform.InferType()(mod)
mutated_mod['func_600'] = func_600
mutated_mod = relay.transform.InferType()(mutated_mod)
func_600_call = mutated_mod.get_global_var('func_600')
var_602 = relay.var("var_602", dtype = "float64", shape = (10, 2, 11))#candidate|602|(10, 2, 11)|var|float64
var_603 = relay.var("var_603", dtype = "float32", shape = (1365,))#candidate|603|(1365,)|var|float32
call_601 = func_600_call(var_602,var_603,)
output = call_601
func_604 = relay.Function([var_602,var_603,], output)
mutated_mod['func_604'] = func_604
mutated_mod = relay.transform.InferType()(mutated_mod)
var_983 = relay.var("var_983", dtype = "uint16", shape = ())#candidate|983|()|var|uint16
var_984 = relay.var("var_984", dtype = "uint16", shape = (12, 13, 12))#candidate|984|(12, 13, 12)|var|uint16
bop_985 = relay.less_equal(var_983.astype('bool'), var_984.astype('bool')) # shape=(12, 13, 12)
output = bop_985
output2 = bop_985
func_993 = relay.Function([var_983,var_984,], output)
mod['func_993'] = func_993
mod = relay.transform.InferType()(mod)
mutated_mod['func_993'] = func_993
mutated_mod = relay.transform.InferType()(mutated_mod)
func_993_call = mutated_mod.get_global_var('func_993')
var_995 = relay.var("var_995", dtype = "uint16", shape = ())#candidate|995|()|var|uint16
var_996 = relay.var("var_996", dtype = "uint16", shape = (12, 13, 12))#candidate|996|(12, 13, 12)|var|uint16
call_994 = func_993_call(var_995,var_996,)
output = call_994
func_997 = relay.Function([var_995,var_996,], output)
mutated_mod['func_997'] = func_997
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1059 = relay.var("var_1059", dtype = "float32", shape = (2, 13, 1))#candidate|1059|(2, 13, 1)|var|float32
uop_1060 = relay.log(var_1059.astype('float32')) # shape=(2, 13, 1)
func_600_call = mod.get_global_var('func_600')
func_604_call = mutated_mod.get_global_var('func_604')
const_1065 = relay.const([[8.676584,-4.619067,-5.039405,-6.920342],[-9.629487,-2.348713,3.586410,-7.791176],[-0.887434,4.932866,-0.357632,-2.514946],[-0.120289,-8.862534,-1.587921,2.733337],[5.772238,7.772909,-0.735350,0.656826],[-1.517255,3.302525,-8.406298,-7.527259],[5.319450,3.887919,-2.098103,6.216776],[-9.472645,9.486742,9.368326,-9.238566],[5.775387,-3.104376,5.997103,-8.504720],[4.690790,-0.891839,6.019054,-2.407001],[-6.759806,-3.632674,-3.928612,3.364099],[2.913525,6.827272,5.876414,5.178258],[-4.245363,5.297005,8.355706,3.163507],[0.383414,5.885285,7.674839,-8.468320],[5.522884,-5.758590,-5.086507,-6.881143],[0.394691,-5.220395,-4.876577,5.856135],[4.129120,-5.395656,-0.435261,-7.944128],[3.957641,-6.276750,8.721823,5.023474],[6.774572,-9.552613,4.826253,1.786713],[4.480476,-5.082588,6.153162,-4.742064],[-3.462728,8.358642,-4.724976,-8.301495],[5.482666,-1.073156,2.458173,-0.955951],[-1.923836,-3.344729,9.632682,-5.011053],[2.057258,-1.859371,-6.711207,-2.101656],[-1.352822,2.236029,4.757994,-5.340873],[-1.354892,1.875065,-7.146438,-8.475961],[0.114825,9.372596,-6.998220,2.321503],[-8.130736,-2.696816,-8.847372,3.778543],[-9.057916,1.207223,-2.552337,6.681607],[5.160522,8.252743,-5.860595,-8.195334],[-6.742673,-7.396906,5.665104,4.332639],[-2.744763,-9.371551,-6.529840,3.397496],[-4.057451,-5.105578,-3.896655,3.832834],[-2.732101,-3.736614,-1.847420,-0.436339],[-6.187136,6.834075,-8.750211,7.864793],[-7.634921,6.638798,2.215677,1.954332],[-8.092369,-1.036089,3.653281,-3.226415],[-2.930270,-6.064426,9.408106,-4.174281],[-3.286109,5.820195,-9.646161,2.151545],[-3.231007,7.323522,7.505595,5.539243],[-9.578364,-6.230345,6.404335,2.256390],[1.418218,-5.206651,9.836325,-6.527839],[-4.400798,-8.553965,-3.304300,4.138162],[8.489492,-6.009986,5.470167,-1.398781],[-8.011755,-0.590179,7.087813,7.455459],[2.650049,6.895673,-6.256699,-0.968000],[7.126300,0.860864,-5.043273,-2.243492],[5.239150,-2.897822,-8.704561,-4.756528],[-4.126886,-8.751235,5.250178,-3.087140],[2.699740,5.796743,-1.340525,-4.611546],[-6.345977,9.137747,-5.061743,-1.557237],[6.230031,-7.539831,7.793919,-1.554129],[5.153475,5.063889,-2.200461,-5.444375],[9.236597,-4.147433,9.077345,1.910967],[-0.072998,3.339729,-4.890357,1.730422]], dtype = "float64")#candidate|1065|(55, 4)|const|float64
var_1066 = relay.var("var_1066", dtype = "float32", shape = (1365,))#candidate|1066|(1365,)|var|float32
call_1064 = relay.TupleGetItem(func_600_call(relay.reshape(const_1065.astype('float64'), [10, 2, 11]), relay.reshape(var_1066.astype('float32'), [1365,]), ), 2)
call_1067 = relay.TupleGetItem(func_604_call(relay.reshape(const_1065.astype('float64'), [10, 2, 11]), relay.reshape(var_1066.astype('float32'), [1365,]), ), 2)
output = relay.Tuple([uop_1060,call_1064,const_1065,var_1066,])
output2 = relay.Tuple([uop_1060,call_1067,const_1065,var_1066,])
func_1091 = relay.Function([var_1059,var_1066,], output)
mod['func_1091'] = func_1091
mod = relay.transform.InferType()(mod)
mutated_mod['func_1091'] = func_1091
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1091_call = mutated_mod.get_global_var('func_1091')
var_1093 = relay.var("var_1093", dtype = "float32", shape = (2, 13, 1))#candidate|1093|(2, 13, 1)|var|float32
var_1094 = relay.var("var_1094", dtype = "float32", shape = (1365,))#candidate|1094|(1365,)|var|float32
call_1092 = func_1091_call(var_1093,var_1094,)
output = call_1092
func_1095 = relay.Function([var_1093,var_1094,], output)
mutated_mod['func_1095'] = func_1095
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1248 = relay.var("var_1248", dtype = "uint32", shape = (5, 4, 4))#candidate|1248|(5, 4, 4)|var|uint32
var_1249 = relay.var("var_1249", dtype = "uint32", shape = (5, 4, 4))#candidate|1249|(5, 4, 4)|var|uint32
bop_1250 = relay.bitwise_and(var_1248.astype('uint32'), relay.reshape(var_1249.astype('uint32'), relay.shape_of(var_1248))) # shape=(5, 4, 4)
uop_1256 = relay.sigmoid(var_1249.astype('float32')) # shape=(5, 4, 4)
func_1091_call = mod.get_global_var('func_1091')
func_1095_call = mutated_mod.get_global_var('func_1095')
var_1259 = relay.var("var_1259", dtype = "float32", shape = (26,))#candidate|1259|(26,)|var|float32
const_1260 = relay.const([3.010172,-2.437792,7.102967,-3.373045,-1.796955,-5.495568,-9.111830,-7.570041,-2.461930,0.181907,4.422887,2.911430,-6.466750,-3.960206,4.653111,-5.687554,4.077999,-8.568436,2.797303,-1.384488,-4.571996,1.512984,-3.966881,-6.579108,0.959081,7.794636,9.119015,2.041712,8.400400,2.967238,6.532855,8.730097,7.209172,7.961523,-2.273372,-8.471781,-5.687479,-5.353075,-7.795233,-4.922174,-7.876011,-9.598967,-3.807968,8.409639,0.325709,-5.171404,-4.915950,0.881699,-9.413411,-5.367338,-0.229580,6.410601,-5.075534,-0.650294,-0.545143,1.442318,-6.510011,-1.985242,5.864229,-7.203468,-9.307133,2.446136,-2.673509,-5.748301,-1.570977,-8.004760,-1.682914,5.802984,2.224593,4.848758,-7.347449,-7.362646,-4.445834,-9.126855,-0.938857,5.226464,9.343924,9.309078,5.185660,-1.871585,-0.973445,1.029332,-1.032261,0.905248,-0.856529,3.999381,8.626522,3.339092,-5.395835,7.280031,-6.251330,-3.455903,-4.745097,3.702503,9.523481,7.956775,-8.867303,-4.990522,9.640170,-3.831425,-5.288279,7.130781,9.489726,-4.778121,-7.012680,-1.095430,-8.116004,-7.042327,-7.118452,-5.281110,-9.533453,7.570162,-5.729751,6.302568,-8.212716,7.811264,-9.250204,-1.895133,6.690727,0.330192,6.024386,-7.753309,-4.716445,-3.067956,9.031712,7.082989,-9.182130,-7.663142,-0.412011,-9.774814,-6.686072,-4.812093,-0.247642,-7.442235,4.827068,0.821191,-1.346275,-5.596181,7.063029,4.266139,4.825103,-2.408350,-3.186317,3.563480,-3.624052,3.734264,7.781374,3.568856,-5.856254,-1.563590,-0.443225,-3.950365,1.347414,8.008571,3.008947,0.433401,1.323784,-3.935218,4.499503,5.208290,-7.051954,-9.479918,-7.640317,9.900387,1.287238,-1.850684,-8.899319,-6.473254,4.518554,-6.627230,3.916185,4.183775,1.687734,-7.043069,1.325879,-7.593693,-0.283354,-6.397524,4.565304,4.306263,2.398001,-6.873461,1.650496,5.162976,-7.116818,7.013184,-7.923745,7.942979,6.858885,-3.902528,5.354746,-3.727848,7.348902,-3.498220,-9.860449,9.573931,6.146198,4.046049,2.985951,4.011533,-9.741269,4.122078,1.521691,-6.581313,-4.909155,-5.768396,-4.051137,8.411095,1.908675,-9.497510,0.076781,2.316310,0.526448,4.698546,6.990246,-0.567119,-0.253316,-9.435731,-2.361395,-4.445192,0.864742,-3.469956,6.636030,4.799822,5.771060,-7.750877,-7.472389,0.965555,6.003045,-4.095860,4.905532,-4.971714,-4.067151,-8.172173,-0.813497,6.700972,7.392026,1.370492,8.787430,8.387996,-9.021171,3.483992,9.730138,-4.043963,-1.413375,6.652256,5.732886,5.855267,8.393348,6.567775,-4.313444,8.692183,-2.055698,-5.176827,-9.189511,8.161822,7.539352,6.980922,4.887367,2.275833,-2.807575,-7.742060,3.242130,9.306363,3.050484,-7.641165,9.669627,6.385532,-7.549767,9.465442,5.522610,1.140340,1.702216,2.445547,-7.039362,-6.503188,6.767681,-3.585449,-7.057645,4.838249,-2.205033,2.405684,-9.791286,-5.692704,-4.013665,9.867902,-8.589993,0.809310,7.295322,-2.470014,2.324691,-6.701696,1.320621,2.739453,-0.633415,2.593249,-8.768932,-8.204790,1.008760,7.130769,-0.489594,9.890390,1.175061,-9.457527,4.029460,-1.726335,-1.213737,-4.570666,-8.679474,8.591057,-4.693101,3.751829,-4.469470,5.791286,-3.833990,2.244567,3.284883,7.166376,6.124732,2.826476,3.569016,-3.361429,-3.460702,4.023319,-6.299604,5.669275,-6.349443,-3.699410,-8.145432,-0.177198,-2.621420,5.973050,1.291591,9.987653,5.015735,2.018598,-4.830443,-9.562735,-2.970393,3.097303,-9.196896,-7.574360,-2.347551,4.522937,-7.025950,8.275782,-2.435643,6.947041,-1.932664,-5.783485,8.674949,-3.477918,6.023226,4.945159,-6.790849,5.427038,2.242620,7.322772,-2.013922,5.640227,4.744232,8.804882,5.058220,0.118198,0.645425,8.545737,5.759731,6.034714,-0.964327,5.150546,7.836678,-1.740042,-3.157558,-8.546931,-4.652458,5.632091,7.979495,2.669281,3.585365,-1.712624,9.482031,-8.034085,4.861324,8.396226,-2.182938,-8.680847,9.966995,-6.133129,1.947861,-7.702130,-7.714148,5.996298,2.170297,7.511094,9.515376,5.415664,9.959128,9.298320,0.282890,2.802128,0.035664,-2.601120,-0.928491,-1.686972,3.319973,3.350152,5.343363,7.198515,-7.045337,6.419482,-6.968927,-4.807268,-1.100896,-7.147070,-1.899257,7.478154,-3.350682,0.926358,6.701064,-9.520308,-1.750861,-7.659435,-9.626130,-6.846405,-7.977172,-1.237294,5.717115,4.004634,-4.086614,1.566690,3.857014,0.792143,-0.404855,-6.726295,-3.531507,6.694067,-2.034848,-1.640720,8.000582,0.842373,6.711095,3.896204,-7.744819,-0.175915,-4.521806,-4.374526,5.710377,9.566450,-9.003837,5.719988,-3.926189,9.787854,-1.516193,3.928522,2.906827,-8.219964,-4.055420,3.251992,-2.216313,-6.974535,8.273907,-1.263719,-2.655408,0.166684,2.710377,5.651637,8.706712,-6.881651,1.974793,5.739552,7.837342,0.439544,0.142582,-4.442456,-7.656671,6.527028,2.951794,-5.142352,3.551351,-3.465083,-5.823496,6.409860,6.972650,-1.698224,6.520053,0.140077,6.421596,9.728864,6.824468,-2.377352,-2.015105,6.807310,0.129666,9.794026,0.220794,7.903387,7.617035,2.267341,-7.243883,0.928920,-4.853921,-9.056719,2.832546,-7.810434,-5.721755,4.488411,-8.166947,-3.283143,-4.282612,4.167840,-2.971240,-7.805166,6.245838,-8.648519,4.205964,9.441125,-3.396705,2.879820,2.249281,-9.142010,-1.621660,-3.028989,-4.381284,-1.521972,-5.696556,8.818015,-8.182507,3.241470,3.603003,6.065428,7.770950,-9.136062,9.096848,-6.903144,-1.709841,-1.988385,-7.073745,5.017571,1.696771,9.518857,5.167456,-7.092366,-6.567041,9.042177,8.129582,-7.348121,-6.802801,-2.032878,-7.591539,-7.510407,4.333823,4.758273,-5.619179,8.185298,-8.844836,5.835563,9.222261,5.718012,7.621005,9.251107,-8.554461,-9.785700,3.924956,-9.411189,8.632095,-2.632938,0.179537,-5.306293,-4.393944,7.596508,-3.720283,2.516642,1.894294,-5.434142,9.768096,7.709235,1.764574,-5.386427,9.420470,2.642026,-3.946799,7.113730,6.080126,9.364678,2.734613,7.530682,9.515435,3.120557,9.154337,-3.891356,-6.799340,-0.759988,1.149300,-3.554142,6.309172,7.036895,8.851768,5.596339,-5.960135,-7.709875,-5.134456,3.260996,-5.609428,-6.245551,-9.328528,2.041459,-2.444783,4.125367,-6.555500,-7.341662,9.313434,7.410021,9.647669,3.742930,5.013467,8.166441,1.828616,-5.975216,-5.680071,-6.466223,3.110151,7.657311,9.549033,5.650908,-9.138674,-8.057903,8.560829,-7.997666,-6.389087,-2.733646,0.146940,3.967518,-1.587326,1.195989,-2.958318,-0.952109,5.510903,-1.190722,-8.468515,-6.041532,7.684515,-8.357218,3.758556,3.780215,-9.716451,0.756908,-7.809468,9.646263,-5.651484,4.058276,-5.771915,-5.695800,5.803909,-2.187650,-5.826555,-7.648331,3.711165,-8.561168,8.689676,5.257732,6.944205,2.248769,7.683638,1.818552,9.368827,1.387522,-6.823825,4.300369,-2.137856,9.153972,4.150670,-4.390745,-8.361467,9.316487,4.670653,5.342940,0.131832,-2.392161,2.172902,0.843697,-5.716241,-1.727231,-2.587915,-4.147733,-3.130890,-3.377712,1.783824,-2.669232,9.749860,9.695732,-6.769395,-4.869556,0.743119,0.959341,-6.381538,-6.853324,3.923994,0.725319,-6.574747,-5.810583,2.704735,-0.196375,0.655398,-4.077141,-7.656333,4.055160,-9.301464,3.008386,-9.787991,6.768056,6.079373,9.864118,-4.240720,-2.980469,-4.176385,3.391757,5.980525,-7.678070,9.297379,-9.628844,-0.473368,-5.260156,0.387250,8.892447,-9.746212,-2.234509,-6.310877,-5.354696,-7.684195,1.515091,1.978657,-8.353038,2.453326,-1.721884,5.910989,-8.791246,-1.275407,-2.490659,-9.584184,-9.310644,-9.486264,-1.669714,-9.530173,-1.288473,-3.785346,-3.286012,-9.216048,-4.850677,3.690037,-7.700762,9.273303,0.445867,-6.339214,0.244826,3.604533,6.145604,-6.991783,-3.333840,7.407225,0.236562,-0.391141,2.542693,-6.828202,-1.615983,-1.172092,-9.275086,-8.552143,-0.994681,-9.339001,7.686238,3.628796,2.611421,3.616534,-9.398143,-4.836533,-7.654107,4.707357,-4.496528,8.937924,-5.710426,8.663781,-4.107968,-3.513640,-2.673425,-7.430078,-2.603459,3.367240,-2.417339,5.767072,8.495824,-1.436788,-7.756707,0.817330,-0.654802,-2.153141,9.497979,4.528532,7.869181,-9.105461,-8.042065,1.457550,-7.432081,1.706411,2.044481,0.184812,-6.126702,-7.973585,-2.283860,0.069992,5.517269,0.648722,-3.067142,-4.517707,-0.707122,1.595993,6.868384,9.290186,4.254122,-3.410046,1.983172,2.585494,-4.321404,-8.890666,-9.654915,0.466887,2.259662,-1.543402,0.177086,3.618389,4.715497,8.058956,-3.386030,-4.907591,0.592051,-7.636609,-4.080673,-6.885971,-4.573015,3.626836,5.724708,-8.262790,8.388961,-3.801381,4.202416,-1.584304,-5.742575,7.931383,-1.137511,5.802658,4.795113,-8.995382,3.434627,-7.799725,-4.089003,-8.693102,-6.594432,-0.146725,2.107491,-9.324262,5.916319,3.954528,-2.955382,-3.481126,-2.655492,-3.094110,3.699211,-2.990987,-3.302033,-1.625966,-1.647447,-0.659350,6.419964,7.050067,2.244698,7.596411,-3.717889,-0.703259,-5.909543,-9.134373,-6.498738,-3.937604,9.391924,2.651378,7.731440,-3.601663,-0.386467,-4.898292,-9.234800,9.457138,5.909519,-0.973752,2.459600,8.492854,6.053135,9.889146,-9.088714,5.419114,-5.492848,0.871784,5.110173,5.021022,-4.701203,8.539293,1.793831,-7.524688,-4.629251,2.720440,-9.636878,6.013149,-7.586429,9.861646,-4.388190,-7.030561,1.003490,-3.792942,-0.426793,7.744308,0.095025,3.927032,4.838098,4.754915,-0.379188,9.867484,8.550547,-8.322626,0.814506,7.581669,-5.799457,-7.465429,3.275857,-7.035002,0.963797,7.693142,0.667289,6.534679,-3.304859,-7.265539,7.412474,2.076671,-6.440562,-9.505577,-0.084595,5.869579,-6.278652,-3.265410,-5.869673,6.902127,-0.159260,-0.722120,4.576749,-5.937613,-9.443494,-0.490515,0.704450,3.706625,3.480553,3.858854,8.981362,-7.985571,8.411721,2.238542,-3.041426,9.517076,9.571087,-3.785040,1.882936,2.538287,9.698417,-0.190239,7.198251,-8.248431,8.527240,-7.416329,-0.826247,-2.006856,-5.231502,7.886993,-4.172787,4.395891,-0.287714,-5.500274,4.786621,4.207199,1.612706,7.696342,4.509326,6.217081,5.227899,2.376066,3.113339,9.104625,-4.359191,-6.897872,4.229856,-8.757247,0.463690,-1.043813,-3.367735,8.692628,5.351595,7.226362,-1.872915,7.182661,-2.236292,0.367473,1.938331,7.562289,3.316568,-5.309228,-0.201431,-3.605221,-8.960884,-4.298636,-8.048159,-0.111945,-6.141079,5.523041,4.833272,-5.508217,0.017809,8.746436,6.379293,-6.718895,-3.261033,7.603512,-4.359516,-0.610193,-4.047086,9.469964,-4.073331,-3.036640,1.044588,1.430528,4.756479,0.082381,4.853743,9.870667,3.706720,4.881446,-0.764597,-3.776408,-5.533381,7.044400,6.027159,2.041103,6.751645,-3.507886,3.094768,2.793181,-5.520403,-8.187600,3.327305,-7.101779,6.291974,-9.398206,-9.965081,-7.093446,1.094708,-4.451594,2.205595,-5.755518,8.413493,4.170912,-2.098647,4.788175,9.598251,-2.205155,3.915935,-9.367114,-8.133306,9.134775,2.329325,1.971456,2.807555,-5.252865,2.712236,0.456973,8.177815,-9.297943,6.438565,-4.026295,6.316743,6.952876,3.256339,1.203913,-0.500292,5.177433,3.079542,-1.887630,-1.258003,8.978183,4.307467,-3.892318,9.855041,-1.273735,6.632731,-5.247824,8.942854,9.331862,4.795578,-1.139739,5.533551,7.251100,-3.886579,-1.532506,-6.558312,2.114341,-8.642778,2.531352,-9.762695,0.968813,-7.665053,-9.834117,9.503604,4.755334,-6.108419,6.039466,6.108437,-8.840936,-0.043334,-7.667537,-7.673141,1.681109,2.914050,8.953827,-3.028710,8.648567,-1.889116,6.618676,-6.872892,-1.912265,-3.465467,-8.824064,-9.700644,-6.509939,5.264017,-2.306395,-8.574677,4.879712,-5.126860,5.183946,4.006868,4.082076,-6.054721,4.645772,4.727874,1.207164,2.730989,8.034898,1.815751,1.406624,-7.234648,-0.078641,5.367464,2.788459,-4.538218,-3.503975,4.459016,8.786257,-9.719300,-0.908674,-6.520926,-3.945659,-0.156063,-2.098326,8.318367,-3.938031,4.835744,-9.193714,-8.397795,-1.862049,-9.538009,-0.506311,-9.514032,8.570801,7.132756,7.052482,6.519167,5.223617,9.400622,0.151736,6.386995,1.166322,8.606089,9.386594,0.578760,-5.416567,8.569790,7.027673,5.417949,-3.481905,1.586021,-7.584175,3.656294,-0.999426,5.110597,8.732432,2.122943,0.712041,-2.903935,5.049557,-1.140996,3.150398,-8.913071,-6.485429,9.061789,-0.535475,-9.720828,-2.782371,6.237536,-5.253748,-7.751612,6.801994,-9.283285,-2.295973,-5.464976,-2.550798,-8.384189,-7.241054,1.142581,-8.974403,3.627643,9.181835,0.252409,-7.217754,-5.999513,-0.217998,-5.528330,-2.620992,-8.765183,-1.633551,-7.252670,-4.449037,-0.608892,-4.830354,2.082205,5.246460,1.474290,-5.299473,-9.312955,3.386914,2.084315,6.400435,-0.331672,8.754718,2.875925,6.673248,-8.785016,-9.054776,-9.755130,-2.170369,6.359823,-0.569998,-8.853655,2.614444,5.200078,6.853199,-6.306802,8.312017,1.286127,-7.700554,-8.581205,-7.334897,3.141064,1.526109,3.761464,0.625450,5.416258,-7.541602,-7.957866,-4.957500,-8.157695,-6.938695,9.093645,5.003905,-2.423910,4.987117,1.561126,-5.817933,-2.280227,-0.026636,9.662285,-5.898487,-8.709872,7.422863,-3.811023,-7.259351,6.498074,-7.391773,-6.640628,4.929130,9.337625,8.137516,3.802222,6.899522,-4.622655,3.337842,0.104449,-8.460330,-8.440873,-7.751366,-3.152813,-4.169744,9.164877,-4.833692,-8.745981,9.234159,-0.146795,8.965176,-7.525870,2.805032,-2.034662,-4.796423,-3.365765,8.929037,-0.471620,8.180931,7.838320,6.688013,-1.414201,-9.293750,0.364198,-1.187506,7.066884,8.550088,-1.711877,-5.454944,-1.203621,-4.676400,4.760530,8.888121,7.167256,-2.213088,-9.866320,-3.199018,7.499358,-5.500066,-1.987910,-8.847408,-4.949123,6.627480,-3.200251,9.796529,-1.818152,2.615993,-9.853800,-0.568677,-4.133655,-3.817799,-3.246367,8.880803,6.846857,-6.866323,0.063976,4.458048,7.301738,-4.232660,-8.045629,-6.221455,-0.140692,5.011419,-5.583041,-7.968801,-5.274345,-1.284246], dtype = "float32")#candidate|1260|(1365,)|const|float32
call_1258 = relay.TupleGetItem(func_1091_call(relay.reshape(var_1259.astype('float32'), [2, 13, 1]), relay.reshape(const_1260.astype('float32'), [1365,]), ), 1)
call_1261 = relay.TupleGetItem(func_1095_call(relay.reshape(var_1259.astype('float32'), [2, 13, 1]), relay.reshape(const_1260.astype('float32'), [1365,]), ), 1)
uop_1266 = relay.erf(var_1259.astype('float32')) # shape=(26,)
output = relay.Tuple([bop_1250,uop_1256,call_1258,const_1260,uop_1266,])
output2 = relay.Tuple([bop_1250,uop_1256,call_1261,const_1260,uop_1266,])
func_1271 = relay.Function([var_1248,var_1249,var_1259,], output)
mod['func_1271'] = func_1271
mod = relay.transform.InferType()(mod)
var_1272 = relay.var("var_1272", dtype = "uint32", shape = (5, 4, 4))#candidate|1272|(5, 4, 4)|var|uint32
var_1273 = relay.var("var_1273", dtype = "uint32", shape = (5, 4, 4))#candidate|1273|(5, 4, 4)|var|uint32
var_1274 = relay.var("var_1274", dtype = "float32", shape = (26,))#candidate|1274|(26,)|var|float32
output = func_1271(var_1272,var_1273,var_1274,)
func_1275 = relay.Function([var_1272,var_1273,var_1274,], output)
mutated_mod['func_1275'] = func_1275
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1286 = relay.var("var_1286", dtype = "float32", shape = (16, 4, 15))#candidate|1286|(16, 4, 15)|var|float32
uop_1287 = relay.acosh(var_1286.astype('float32')) # shape=(16, 4, 15)
uop_1291 = relay.sigmoid(uop_1287.astype('float32')) # shape=(16, 4, 15)
uop_1293 = relay.atan(uop_1287.astype('float32')) # shape=(16, 4, 15)
func_600_call = mod.get_global_var('func_600')
func_604_call = mutated_mod.get_global_var('func_604')
var_1296 = relay.var("var_1296", dtype = "float64", shape = (220,))#candidate|1296|(220,)|var|float64
var_1297 = relay.var("var_1297", dtype = "float32", shape = (1365,))#candidate|1297|(1365,)|var|float32
call_1295 = relay.TupleGetItem(func_600_call(relay.reshape(var_1296.astype('float64'), [10, 2, 11]), relay.reshape(var_1297.astype('float32'), [1365,]), ), 1)
call_1298 = relay.TupleGetItem(func_604_call(relay.reshape(var_1296.astype('float64'), [10, 2, 11]), relay.reshape(var_1297.astype('float32'), [1365,]), ), 1)
func_451_call = mod.get_global_var('func_451')
func_454_call = mutated_mod.get_global_var('func_454')
call_1301 = func_451_call(relay.reshape(var_1297.astype('float32'), [7, 13, 15]))
call_1302 = func_451_call(relay.reshape(var_1297.astype('float32'), [7, 13, 15]))
func_1271_call = mod.get_global_var('func_1271')
func_1275_call = mutated_mod.get_global_var('func_1275')
var_1306 = relay.var("var_1306", dtype = "uint32", shape = (80,))#candidate|1306|(80,)|var|uint32
const_1307 = relay.const([-0.182801,-8.731188,-1.509075,-7.571112,1.937488,-4.323581,-6.483717,-4.783084,5.245615,-6.990549,-3.670141,7.084492,0.240864,-8.384963,9.595906,-0.441734,-8.012088,4.106453,5.864698,4.359173,-1.585431,-0.366035,-6.157439,9.798336,5.860749,3.552424], dtype = "float32")#candidate|1307|(26,)|const|float32
call_1305 = relay.TupleGetItem(func_1271_call(relay.reshape(var_1306.astype('uint32'), [5, 4, 4]), relay.reshape(var_1306.astype('uint32'), [5, 4, 4]), relay.reshape(const_1307.astype('float32'), [26,]), ), 1)
call_1308 = relay.TupleGetItem(func_1275_call(relay.reshape(var_1306.astype('uint32'), [5, 4, 4]), relay.reshape(var_1306.astype('uint32'), [5, 4, 4]), relay.reshape(const_1307.astype('float32'), [26,]), ), 1)
bop_1311 = relay.add(uop_1293.astype('int8'), relay.reshape(uop_1287.astype('int8'), relay.shape_of(uop_1293))) # shape=(16, 4, 15)
func_320_call = mod.get_global_var('func_320')
func_323_call = mutated_mod.get_global_var('func_323')
call_1320 = func_320_call(relay.reshape(var_1296.astype('float64'), [5, 11, 4]))
call_1321 = func_320_call(relay.reshape(var_1296.astype('float64'), [5, 11, 4]))
func_320_call = mod.get_global_var('func_320')
func_323_call = mutated_mod.get_global_var('func_323')
call_1327 = func_320_call(relay.reshape(call_1320.astype('float64'), [5, 11, 4]))
call_1328 = func_320_call(relay.reshape(call_1320.astype('float64'), [5, 11, 4]))
func_470_call = mod.get_global_var('func_470')
func_473_call = mutated_mod.get_global_var('func_473')
const_1348 = relay.const([7,8,3,-7,-4,1,6,3,6,-10,9,10,-9,1,-10,-7,-6,-10,6,-7,8,2,-2,2,2,10,5,3,7,-6,-10,4,9,-4,-3,5,9,-7,-4,-10,2,-10,-9,1,-6,-3,-1,2,-4,8,9,1,3,-10,7,-1,-9,-8,-3,6,-5,8,9,9,-8,9,10,-7,7,8,-7,-7,-2,-7,-3,8,2,-5,10,4,-2,-7,-4,3,-4,-7,2,9,6,-2,-7,-8,-6,3,8,-4,-10,-1,7,-6,-7,-2,-7,-6,5,4,6,-4,-5,-10,4,-3,7,9,-2,-5,-9,9,-7,1,-2,-7,-6,-5,-8,6,-1,8,-7,-5,3,-7,8,10,-2,9,-7,2,-9,-6,4,-1,-5,4,-6,-10,-9,-5,4,4,8,7,2,-1,-10,8,-3,8,7,-9,-3,6,-5,-10,-8,-2,-8,6,-2,-10,5,4,-6,3,6,-10,10,-2,-9,-1,-9,-7,-4,6,7,-8,-4,10,7], dtype = "int32")#candidate|1348|(189,)|const|int32
call_1347 = relay.TupleGetItem(func_470_call(relay.reshape(const_1348.astype('int32'), [7, 3, 9]), relay.reshape(const_1348.astype('int32'), [7, 3, 9]), ), 0)
call_1349 = relay.TupleGetItem(func_473_call(relay.reshape(const_1348.astype('int32'), [7, 3, 9]), relay.reshape(const_1348.astype('int32'), [7, 3, 9]), ), 0)
uop_1357 = relay.sqrt(call_1347.astype('float64')) # shape=(7, 3, 9)
uop_1359 = relay.sqrt(call_1349.astype('float64')) # shape=(7, 3, 9)
bop_1373 = relay.logical_and(call_1295.astype('bool'), relay.reshape(var_1297.astype('bool'), relay.shape_of(call_1295))) # shape=(7, 13, 15)
bop_1376 = relay.logical_and(call_1298.astype('bool'), relay.reshape(var_1297.astype('bool'), relay.shape_of(call_1298))) # shape=(7, 13, 15)
output = relay.Tuple([uop_1291,var_1296,call_1301,call_1305,var_1306,const_1307,bop_1311,call_1320,call_1327,const_1348,uop_1357,bop_1373,])
output2 = relay.Tuple([uop_1291,var_1296,call_1302,call_1308,var_1306,const_1307,bop_1311,call_1321,call_1328,const_1348,uop_1359,bop_1376,])
func_1382 = relay.Function([var_1286,var_1296,var_1297,var_1306,], output)
mod['func_1382'] = func_1382
mod = relay.transform.InferType()(mod)
mutated_mod['func_1382'] = func_1382
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1382_call = mutated_mod.get_global_var('func_1382')
var_1384 = relay.var("var_1384", dtype = "float32", shape = (16, 4, 15))#candidate|1384|(16, 4, 15)|var|float32
var_1385 = relay.var("var_1385", dtype = "float64", shape = (220,))#candidate|1385|(220,)|var|float64
var_1386 = relay.var("var_1386", dtype = "float32", shape = (1365,))#candidate|1386|(1365,)|var|float32
var_1387 = relay.var("var_1387", dtype = "uint32", shape = (80,))#candidate|1387|(80,)|var|uint32
call_1383 = func_1382_call(var_1384,var_1385,var_1386,var_1387,)
output = call_1383
func_1388 = relay.Function([var_1384,var_1385,var_1386,var_1387,], output)
mutated_mod['func_1388'] = func_1388
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1464 = relay.var("var_1464", dtype = "int8", shape = (8, 8, 3))#candidate|1464|(8, 8, 3)|var|int8
var_1465 = relay.var("var_1465", dtype = "int8", shape = (8, 8, 3))#candidate|1465|(8, 8, 3)|var|int8
bop_1466 = relay.bitwise_and(var_1464.astype('int8'), relay.reshape(var_1465.astype('int8'), relay.shape_of(var_1464))) # shape=(8, 8, 3)
func_38_call = mod.get_global_var('func_38')
func_41_call = mutated_mod.get_global_var('func_41')
const_1483 = relay.const(-7, dtype = "uint64")#candidate|1483|()|const|uint64
const_1484 = relay.const([2,-6,5,-1,3,-9,6,9,-6,7,7,4,-9,-5,-10,9,8,10,-1,6,5,-10,1,-4,-10,8,-6,7,-9,-4,-1,-10,10,2,-3,7,4,-8,5,-1,2,-2,2,-6,10,-10,4,-3,2,-6,-6,4,8,-6,-3,-10,6,5,-9,-1,-10,-3,-2,9,-2,2,7,7,-7,10,9,5,2,-5,1,-2,-8,-5,1,-6,-8,10,-4,3,-1,-3,3,-6,-10,-7,-9,-1,-4,-7,2,-10,4,8,-9,9,-5,8,10,4,9,10,8,2,10,9,-5,-4,8,-6,4,5,-10,7,9,10,1,-3,-3,-3,6,-5,-10,9,1,-3,1,-2,10,-10,9,6,-2,-10,-8,8,-6,5,9,4,-9,5,-4,10,-6,-5,-4,8,-2,1,-3,5,9,5,-4,-10,-3,-5,-1,1,7,6,-6,7,3,9,-8,-5,-4,7,-7,-3,1,9,2,1,5,1,4,-3,-8,2,7,-3,8,-9,6,-7,-7,-8,8,10,-9,-7,3,-1,-2,-8,-2,10,-10,7,10,-2,-2,-9,10,-6,-2,-3,2,-5,8,-5,-4,-2,-5,-2,-5,-3,-5,-9,-2,5,5,7,3,-6,-7,1,8,-8,2,-8,-4,-6,-3,-3,8,-9,7,4,9,-1,1,-10,7,1,-7,8,10,-10,9,-10,-1,-1,6,-8,-5,3,-3,4,10,1,4,9,-3,9,-2,8,9,-10,5,1,-9,6,9,3,-5,9,4,-3,6,-1,-2,-2,10,-7,-1,5,-5,1,-2,5,9,-7,3,1,6,8,5,-1,3,2,-8,-4,-9,-9,7,8,-8,-8,7,-10,3,10,-9,3,-9,-6,1,10,-2,10,-2,7,5,3,-7,4,-3,10,-7,6,7,5,-1,-9,-3,-4,9,-9,9,6,-4,-5,-7,1,-7,2,-6,-1,1,9,9,2,-7,2,-10,-1,9,3,3,1,-8,4,-9,2,5,5,7,1,8,-9,2,-5,5,8,-2,8,2,-6,6,-1,9,4,3,9,1,-10,-7,-5,-4,10,1,-6,9,2,-7,-8,-8,2,10,-3,-7,-5,9,-9,-2,-9,-9,8,6,-5,2,9,6,1,1,10,-8,-4,-4,2,-2,-10,5,-10,7,-3,-7,-1,4,-2,8,6,-4,7,-3,-5,-9,9,5,2,-3,3,7,-4,7,-7,7,-5,4,-10,-10,-6,-1,2,2,-10,-10,6,8,-10,7,4,-3,-6,2,5,-10,10,6,7,-5,-5,-9,-4,-3,4,2,-6,6,1,8,9,-9,-7,-10,-4,-1,-1,10,-7,-10,6,8,6,-4,1,4,-9,-10,7,3,6,10,6,3,-4,-6,-4,2,8,10,9,-1,9,7,1,7,5,7,9,7,-2,4,7,9,-4,-7,4,-3,1,-9,1,-2,-5,-8,-8,8,7,-9,9,-2,-6,8,-8,3,1,4,7,-8,4,5,-2,3,4,-6,1,-8,8,8,-6,-5,-10,1,-4,10,-7,-1,9,-10,7,7,-5,-6,-2,-7,3,7,3,-3,-9,9,1,8,-6,-6,-6,3,-10,2,-3,-10,3,2,-5,6,-1,1,7,-3,-8,7,3,-5,1,5,-6,-2,2,6,-2,-5,-9,6,-6,8,9,-9,-7,5,10,4,7,-5,-2,8,5,-7,-10,10,-4,-1,4,-3,-4,1,-10,-2,-2,8,9,-10,-1,-9,-1,-8,-5,-6,-1,-2,-9,1,-9,-6,9,5,-2,-2,-3,4,10,-7,-3,6,1,-2,-2,-10,7,9,2,4,10,-4,9,-7,2,-5,-6,-10,10,7,-5,10,5,-8,7,10,9,2,-4,6,2,10,2,-5,9,2,-3,6,4,-6,5,10,-1,-2,9,10,1,9,7,-6,10,-2,2,10,1,9,-3,10,1,-9,-1,-4,-9,6,9,-6,-1,1,-6,1,8,-3,-1,4,-6,4,4,-10,1,10,-7,10,-5,-1,-3,-10,4,-1,-6,-7,-10,2,9,6,7,1,-4,-3,-1,2,9,-4,-3,8,-1,-4,5,4,7,3,10,7,6,-3,-6,-2,4,6,10,1,-8,-2,-10,-7,10,10,-6,4,-8,-1,-1,-7,-9,-6,-8,2,-9,-1,3,-5,-1,-3,-1,1,3,2,-6,-10,-4,6,1,-10,-4,-1,-2,-2,-9,-10,-3,8,4,1,-10,5,-7,-6,10,-3,10,5,-10,4,3,10,6,3,9,-10,-5,5,-9,-4,-8,5,-1,-9,-9,-10,7,-8,9,5,-5,9,3,4,4,8,5,1,6,-4,-2,-7,6,4,-9,3,7,4,7,-9,-3,4,-2,3,4,-3,4,9,-5,5,-3,8,2,7,7,10,-5,-10,-1,5,2,4,-7,-6,-6,-8,9,1,5,9,-6,-4,5,-5,6,-4,9,-4,2,1,-1,1,3,1,9,-2,1,3,-1,-4,2,7,5,8,-3,7,5,6,-9,-8,7,3,-5,5,7,-2,7,-10,1,2,-6,8,9,3,-8,-6,8,-6,6,-6,-1,3,8,-10,3,2,3,5,3,7,7,-10,-3,-8,6,-3,4,4,-9,-2,-6,-2,-6,8,2,-1,-1,4,5,-2,-7,9,8,5,8,10,4,1,-8,7,6,-1,-1,10,8,-1,6,-6,3,-4,1,-5,5,-2,8,-4,-1,1,1,-8,-5,4,8,8,1,6,-5,6,-8,-4,10,-1,5,3,-7,-3,-9,-4,6,2,-3,1,1,7,-6,8,-8,-6,-2,7,9,2,8,9,-9,3,-1,-1,2,4,8,3,-10,9,8,-3,-9,-7,4,-2,8,6,-2,2,4,1,5,-10,-4,10,6,-9,10,-5,-3,-7,4,10,8,-9,7,4,5,8,-2,1,2,6,-7,4,8,1,-5,-8,-3,7,7,2,5,3,-8,9,6,2,6,5,9,6,9,9,8,-9,-9,-9,1,-4,-8,-9,-10,-10,-6,10,3,1,7,1,8,-4,-3,1,-7,-4,-10,9,-5,6,-4,-9,2,6,-2,9,-8,-4,6,-6,-4,5,-5,-6,1,-2,-10,-1,-10,6,-7,1,5,-8,-3,-1,-5,1,-1,10,10,-9,2,-5,-1,4,3,3,1,9,6,-10,-8,-2,-9,3,2,-10,-5,9,-3,4,-8,-5,10,4,-4,10,-7,-1,5,-6,7,3,10,-10,5,-10,-4,-2,7,-4,-2,2,-7,10,10,-10,3,-1,-5,5,-6,3,-7,6,-2,-6,-3,6,5,1,-3,2,-4,8,-5,-9,5,1,-6,-8,7,3,-2,1,6,-3,-5,-4,8,-8,4,-4,-9,2,3,-2,-4,10,5,-3,5,1,-1,-1,-6,3,-8,8,1,-1,-10,5,-9,9,-8,6,-10,-7,1,-1,-7,-6,1,-2,-3,-7,7,4,8,-1,-8,4,-1,9,9,8,4,2,-9,-8,-9,-5,8,4,5,-6,2,10,-1,5,1,-5,-9,-10,1,-1,2,9,-7,10,10,-6,-8,-6,-5,8,-8,1,-1,-6,-9,-5,6,5,-8,-7,10,1,-10,-6,1,3,8,7,-6,-2,-1,-8,-2,10,7,-8,-3,-5,-9,-9,7,-8,-7,4,7,8,4,4,-10,-4,4,-6,-3,9,3,2,10,-5,-6,-2,-5,-2,-8,-3,-3,-7,-10,-3,3,-7,-1,-6,-9,-10,8,-8,2,-1,8,-9,4,-7,9,9,3,-8,-5,5,-3,-10,5,-5,-10,7,4,-7,2,-3,6,-2,-10,-5,-5,10,5,3,10,9,6,-5,4,9,8,8,5,-6,10,-9,-2,-5,1,-7,5,10,-3,-4,-9,-4,6,-2,2,6,-9,-9,6,-8,-1,7,-2,-1,-1,2,7,-6,10,6,8,-5,6,8,9,8,-10,8,-1,-6,4,-10,-6,6,6,7,3,-3,-6,-3,-8,5,-8,-9,-1,-1,5,-8,10,4,-7,2,-10,8,-5,-1,4,10,-10,-2,5,10,7,-8,1,4,2,-7,-2,-10,-8,1,-10,5,-1,-5,-10,-8,-2,-5,10,-10,-9,7,-3,-8,2,4,-10,2,-6,10,1,-5,4,-5,-1,-9,3,10,2,9,-7,6,4,1,-8,-7,10,-1,2,-1,2,-1,-3,-2,-1,3,-4,9,8,7,4,-4,-6,9,10,8,9,6,4,-10,-9,-7,1,-2,-6,6,2,4,-4,5,4,-5,-7,-6,-1,6,-9,-2,8,1,2,4,5,4,-1,-5,-4,-8,3,2,10,1,-2,10,-8,4,8,6,5,5,10,-3,-10,5,-6,-5,-4,8,3,4,10,-1,-5,2,-6,-8,-4,-9,3,-8,-1,-7,-3,-1,-4,-6,-4,-3,-2,10,1,-4,-8,-9,-7,2,-10,-4,-6,9,-1,-6,-2,5,3,3,5,9,2,-6,5,-8,-7,-9,-9,-2,-5,-9,-7,-4,2,-6,-7,-10,-5,8,2,-6,-10,1,7,-2,-2,-9,5,-1,3,2,2,-6,8,-6,2,1,-1,1,-8,8,2,-10,3,2,9,-5,-7,10,7,-10,-2,-10,5,-10,-2,4,-10,-1,-6,-10,-8,-9,-5,2,7,-2,-5,3,-4,5,-1,-2,-1,-3,-7,-3,-7,-1,3,6,-7,10,-1,-2,-6,-10,3,-8,-6,-3,-6,-7,-1,5,4,-6,2,-3,-9,-5,-9,1,-9,-8,2,8,-2,-10,7,-8,9,-2,-8,-3,9,1,4,-1,1,-10,1,-8,6,5,-5,4,7,-4,-4,-1,6,-10,3,5,-1,4,6,-6,-2,-8,5,1,-2,6,-4,9,-8,2,10,-3,6,-4,1,-7,-10,10,-8,5,7,-4,-10,-3,-1,10,-4,-4,-2,5,6,-6,6,2,-8,2,10,-8,-10,-9,-8,4,-3,4,-7,-1,-8,9,-5,-8,10,8,-9,-2,-9,-1,9,-9,-4,-10,-2,3,-7,6,5,-5,-5,7,-9,-4,-8,-5,10,1,-9,-4,1,-10,10,-2,-9,10,-10,-9,-3,-9,-6,10,-10,-10,2,-9,1,-3,5,-4,2,2,8,-5,4,4,10,-8,4,9,-1,-9,10,-1,-7,3,10,5,7,-1,-6,1,-8,6,6,-8,-6,9,-10,10,9,1,9,7,6,4,-4,7,3,-4,9,-8,-2,10,9,-1,5,6,-8,7,3,-7,8,9,-7,2,6,2,7,9,-4,-2,2,1,3,7,1,2,-10,-5,-3,-5,-9,6,9,-1,6,9,5,2,-10,-5,5,-2,-8,9,6,-2,-1,10,-4,4,-8,1,-5,-1,-2,-7,4,9,8,5,4,-8,8,6,1,-3,2,-10,7,-3,-8,7,2,5,-5,-4,10,5,-2,-9,10,-1,5,1,-3,-2,-5,-2,-4,6,7,-8,6,4,-6,-10,-6,9,2,-5,4,-5,-8,-7,6,-2,7,-10,5,10,9,-6,-1,-8,8,-8,-3,-3,-4,3,-4,-2,5,4,8,-1,-4,-1,5,9,-3,6,-2,6,9,-5,-4,-6,1,-1,3,-5,1,5,-5,9,-1,-5,4,-10,-1,-6,4,-6,-3,3,8,-5,3,-7,6,6,1,-2,-5,7,-1,-2,6,-9,6,-5,9,-5,1,9,-8,-7,-10,-3,3,-2,-5,-9,-4,-10,-2,7,8,-2,-6,6,-9,2,-2,-4,-4,-1,-3,-10,1,-9,6,2,8,2,-6,7,-3,-5,-1,-4,-5,2,5,5,3,-1,-10,2,9,-1,4,10,-4,-4,4,-9,-3,7,4,-6,-5,-7,-1,2,-3,-5,-10,6,-2,8,8,-6,-10,-1,-6,3,-5,8,-7,6,-5,1,-7,-9,7,6,-7,-10,-5,1,-9,5,-5,10,3,-4,-8,-4,-1,-6,2,-8,4,6,-9,3,1,2,8,8,9,-10,8,-3,-6,-9,-3,-7,-5,8,-10,-1,-6,-9,-6,-8,2,3,-9,-10,9,3,-8,-1,-3,-8,10,6,-6,-4,3,-9,-7,4,3,3,5,4,-10,8,-3,-8,8,3,-10,-8,7,7,-2,-2,-9,8,4,-7,8,8,4,6,-10,7,6,-3,3,-6,5,3,-6,-5,-3,-5,-10,2,-6,7,7,-6,-7,5,8,-6,-3,4,10,-8,-6,3,5,-9,6,-9,-7,-8,-1,-6,-8,10,3,-9,-5,-7,-1,6,-8,8,-2,8,9,6,1,-9,-8,10,-4,4,7,10,-4,5,3,5,-10,5,-1,1,4,-2,-10,-4,1,-6,1,-6,4,6,-7,-1,4,-8,8,8,1,6,2,10,10,-2,1,6,9,3,3,-3,-1,-3,-2,10,-10,-9,-6,6,4,-9,-5,-10,-8,-2,-6,-1,6,5,4,-3,4,9,-10,8,-10,-9,-5,-1,2,6,-6,7,1,-4,-9,-1,9,-3,-4,1,1,1,8,8,3,10,-9,5,-6,4,4,-8,-7,1,5,5,3,9,8,-1,-1,2,5,1,4,9,-3,2,10,-1,-7,-9,4,2,-7,-3,-4,-10,10,-2,-9,4,-8,3,-2,-10,-3,-9,-9,1,2,6,-10,-4,-8,-7,-7,-8,-9,-2,-5,10,-1,9,8,8,5,-5,-10,7,7,-4,5,9,3,5,-4,-8,-1,-7,-6,-8,-8,-7,-6,-4,-6,-9,-10,-7,2,3,-6,-10,-9,-6,1,7,1,-8,8,-1,-10,-7,9,-5,7,-4,8,-10,5,3,3,5,-4,10,5,-6,10,-7,-9,-9,-10,-9,-10,-7,-8,1,10,5,1,6,7,-2,7,-7,4,5,10,4,7,-3,2,4,1,6,5,7,3,-10,-9,-1,2,6,-1,9,2,3,-7,-5,-8,-8,10,6,5,8,-10,6,4,-3,-2,3,6,7,-4,-4,1,7,7,9,-9,7,-3,-3,-7,-3,9,-3,3,10,2,2,-6,-7,4,7,2,-5,9,3,2,-4,-2,-8,7,-2,2,10,-7,-2,-2,6,-5,8,-9,-9,-7,-4,10,-3,1,-3,1,10,-2,-1,-1,10,-10,-9,1,3,-3,-6,10,1,5,4,-9,6,-5,8,7,-2,-6,7,-1,5,9,8,-9,3,-2,1,-1,3,-5,-4,8,-9,-6,-2,-9,2,8,-9,10,-10,1,4,-8,2,1,-6,-1,-3,-1,6,4,8,-10,9,-3,2,10,-7,-6,-2,2,-4,-2,10,6,3,-3,-1,10,-1,-9,-6,-1,-9,-10,4,8,-5,-6,4,-10,-1,-10,6,-2,-2,1,2,-2,1,-10,6,-2,8,7,-10,-9,-1,-3,8,7,-8,1,-2,-9,-7,-7,-8,-5,7,-10,-2,-9,-7,-2,-10,8,-7,8,-2,-2,5,-1,8,-1,9,-3,-10,3,-5,-6,-4,-2,3,-10,-6,-5,4,6,-3,9,6,-10,4,-6,10,3,6,5,-7,8,9,-4,1,-7,7,-6,-7,1,-2,10,1,-4,-1,10,-3,-1,2,-7,5,7,9,-7,2,10,7,3,-5,8,-7,-6,-9,-7,4,5,-6,-3,8,3,-8,-3,3,6,5,6,2,-6,-10,-3,-5,-6,-3,-7,-9,-10,-3,3,-8,-6,2,-7,-7,-7,-4,-3,-9,1,6,-2,8,1,4,1,-2,5,10,-8,2,6,-8,-4,-6,10,3,-6,-3,-6,10,8,-4,-5,4,-5,-1,-4,-10,5,-3,9,-6,-1,-1,-7,-4,-4,-10,5,4,-2,-1,-5,5,6,-6,8,-9,2,-5,4,6,8,-8,-9,2,-1,-8,-3,-8,-2,5,6,-8,5,-9,-1,-6,-2,1,-9,5,-8,-6,-7,-2,-9,-1,-1,5,-2,-7,-1,1,9,5,7,-10,4,-5,-10,-9,4,-4,-9,-2,-3,-4,-2,-8,-1,1,-4,2,-4,-8,-4,5,-9,2,8,-8,5,-7,-1,7,9,-9,-6,-2,5,-9,1,6,3,-7,-4,-3,-1,5,7,-3,10,1,2,-10,-5,8,1,5,4,6,-9,8,-9,-1,4,3,7,-4,9,-7,-1,2,9,-7,-9,10,9,-7,10,5,1,2,1,-8,7,5,-10,-9,4,3,-8,1,-2,8,-4,8,2,-7,3,5,1,-10,-7,-2,-7,-4,8,2,4,2,4,5,-9,9,8,-5,-6,-1,-4,-5,10,3,7,-9,-7,8,2,-5,6,4,10,2,-4,8,-10,8,4,-9,9,1,1,-7,-3,-6,8,2,1,5,-10,3,8,1,3,5,10,-9,-5,3,-9,-6,9,7,5,5,-5,-5,-10,-6,-6,6,-7,6,1,2,8,-7,10,-9,5,8,4,4,-2,6,5,4,9,6,7,8,-7,-4,-8,-2,7,-5,-5,-5,-1,-5,-7,8,8,3,-3,-3,-5,-9,-10,-8,-3,9,1,-7,7,1,-2,7,5,5,3,10,3,-3,-2,-9,3,3,4,-6,-3,-4,-8,-2,2,-2,-3,5,4,10,-10,-1,9,-6,-7,3,-1,-2,7,-1,1,-6,-6,4,-2,7,5,4,5,6,-4,9,-5,4,7,3,-7,-4,-1,-4,-3,4,1,2,9,6,-5,1,-8,-2,-8,-2,-5,9,-7,8,4,-7,-1,8,5,5,1,-1,-1,-3,-9,6,-3,1,-8,9,-2,-4,7,7,8,-3,-10,-9,1,-9,-8,6,10,3,-8,-9,-1,5,6,10,-4,6,-1,-4,-6,-5,-8,8,-8,-5,5,7,6,6,4,8,10,1,-9,-6,-7,-1,-9,2,-2,-6,-8,3,-4,6,4,5,7,7,-2,1,1,-4,-1,-2,3,9,2,7,-10,6,-8,10,-9,-9,2,-2,-2,-7,-5,7,6,3,-6,6,3,2,2,-7,2,4,8,7,4,-6,-3,-9,6,9,-2,10,4,9,7,-9,-3,-3,10,-4,3,5,10,-5,6,10,8,5,3,9,9,-9,2,-5,3,9,9,2,-10,6,10,5,-6,-1,6,1,8,10,-3,4,-6,9,-1,-5,-9,-8,-6,8,-5,1,7,-7,-1,6,-3,9,5,5,1,6,10,1,-7,6,-8,-1,8,-3,-6,4,-9,-9,2,-10,-3,-5,10,-8,6,7,2,2,-8,10,2,-3,8,-7,7,7,4,4,-9,1,6,-3,7,-10,-8,1,6,-5,10,-7,7,-9,-6,-7,5,2,5,2,1,-9,2,-1,5,-3,7,-2,-1,-7,1,-4,1,10,1,10,-3,1,10,-2,-9,8,4,-10,8,-6,3,-9,-5,-4,10,8,-4,9,-2,-7,-7,-7,-6,7,-8,4,2,8,2,-6,8,6,-5,-6,-7,10,-9,-4,-5,8,6,7,-7,9,-8,2,1,8,4,-4,8,-4,2,1,-10,3,2,6,-6,1,-2,-2,4,8,5,-8,8,1,9,-1,2,5,-5,-5,7,-7,-10,1,-8,-1,-5,-7,8,-4,9,-6,-1,-6,5,7,1,3,2,5,-5,4,-5,4,6,-2,5,-7,10,-3,7,7,6,9,-3,8,1,1,-1,-9,5,4,-1,6,-4,-4,-1,-9,10,4,2,-5,-4], dtype = "uint64")#candidate|1484|(3600,)|const|uint64
call_1482 = func_38_call(relay.reshape(const_1483.astype('uint64'), []), relay.reshape(const_1484.astype('uint64'), [15, 15, 16]), )
call_1485 = func_38_call(relay.reshape(const_1483.astype('uint64'), []), relay.reshape(const_1484.astype('uint64'), [15, 15, 16]), )
output = relay.Tuple([bop_1466,call_1482,const_1483,const_1484,])
output2 = relay.Tuple([bop_1466,call_1485,const_1483,const_1484,])
func_1486 = relay.Function([var_1464,var_1465,], output)
mod['func_1486'] = func_1486
mod = relay.transform.InferType()(mod)
var_1487 = relay.var("var_1487", dtype = "int8", shape = (8, 8, 3))#candidate|1487|(8, 8, 3)|var|int8
var_1488 = relay.var("var_1488", dtype = "int8", shape = (8, 8, 3))#candidate|1488|(8, 8, 3)|var|int8
output = func_1486(var_1487,var_1488,)
func_1489 = relay.Function([var_1487,var_1488,], output)
mutated_mod['func_1489'] = func_1489
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1556 = relay.var("var_1556", dtype = "float32", shape = (8, 7, 5))#candidate|1556|(8, 7, 5)|var|float32
uop_1557 = relay.log10(var_1556.astype('float32')) # shape=(8, 7, 5)
uop_1559 = relay.asinh(uop_1557.astype('float64')) # shape=(8, 7, 5)
output = relay.Tuple([uop_1559,])
output2 = relay.Tuple([uop_1559,])
func_1573 = relay.Function([var_1556,], output)
mod['func_1573'] = func_1573
mod = relay.transform.InferType()(mod)
var_1574 = relay.var("var_1574", dtype = "float32", shape = (8, 7, 5))#candidate|1574|(8, 7, 5)|var|float32
output = func_1573(var_1574)
func_1575 = relay.Function([var_1574], output)
mutated_mod['func_1575'] = func_1575
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1775 = relay.var("var_1775", dtype = "int8", shape = (8, 3, 13))#candidate|1775|(8, 3, 13)|var|int8
var_1776 = relay.var("var_1776", dtype = "int8", shape = (8, 3, 13))#candidate|1776|(8, 3, 13)|var|int8
bop_1777 = relay.less(var_1775.astype('bool'), relay.reshape(var_1776.astype('bool'), relay.shape_of(var_1775))) # shape=(8, 3, 13)
var_1793 = relay.var("var_1793", dtype = "int8", shape = (8, 3, 13))#candidate|1793|(8, 3, 13)|var|int8
bop_1794 = relay.bitwise_xor(var_1775.astype('uint8'), relay.reshape(var_1793.astype('uint8'), relay.shape_of(var_1775))) # shape=(8, 3, 13)
func_993_call = mod.get_global_var('func_993')
func_997_call = mutated_mod.get_global_var('func_997')
var_1799 = relay.var("var_1799", dtype = "uint16", shape = ())#candidate|1799|()|var|uint16
const_1800 = relay.const([[-7],[2],[-1],[-1],[5],[10],[-4],[3],[7],[1],[-7],[-5],[4],[-3],[-9],[9],[-3],[9],[6],[-7],[-10],[6],[9],[-1],[9],[2],[-4],[-1],[4],[-1],[7],[1],[3],[-4],[-2],[9],[7],[-7],[5],[3],[-9],[1],[3],[-6],[-4],[-9],[8],[-10],[10],[9],[-4],[5],[2],[-8],[-1],[2],[-3],[7],[-3],[-2],[-9],[1],[-1],[-10],[5],[-4],[-8],[2],[2],[-6],[8],[-2],[10],[-8],[2],[1],[3],[3],[-3],[4],[2],[10],[-8],[9],[-10],[-2],[4],[-1],[5],[7],[-1],[1],[2],[-7],[-6],[-4],[-10],[8],[5],[-7],[-6],[-5],[-5],[5],[6],[-7],[2],[-1],[9],[9],[1],[-4],[8],[-1],[3],[9],[-9],[8],[-1],[-3],[-4],[-5],[8],[1],[4],[-5],[-3],[-7],[4],[3],[-10],[-7],[-1],[4],[-9],[-10],[-9],[9],[9],[-7],[8],[-9],[4],[2],[-8],[5],[1],[8],[8],[-3],[-8],[10],[-6],[-7],[9],[-1],[7],[-9],[-7],[-8],[8],[-4],[5],[1],[1],[10],[7],[-9],[9],[9],[9],[6],[-1],[6],[6],[5],[-9],[-2],[-9],[10],[7],[1],[8],[-8],[-5],[6],[8],[-9],[-6],[6],[-1],[7],[8],[-4],[4],[-6],[4],[6],[7],[-10],[2],[6],[9],[-8],[-2],[-9],[5],[-3],[-7],[1],[3],[-6],[-7],[8],[8],[-8],[-5],[2],[-2],[8],[-7],[9],[3],[9],[2],[-3],[9],[1],[-2],[2],[10],[-2],[-6],[8],[-5],[4],[-3],[7],[8],[8],[-6],[-7],[2],[3],[-9],[-6],[6],[-4],[2],[-10],[10],[10],[10],[1],[-3],[-8],[-2],[6],[-2],[-10],[3],[-10],[1],[1],[9],[10],[-7],[1],[10],[-5],[-1],[-2],[5],[8],[6],[-8],[1],[-7],[-5],[-8],[10],[-2],[-2],[6],[6],[-5],[-4],[1],[6],[9],[-7],[-10],[-9],[5],[-5],[-8],[2],[-4],[6],[-6],[-1],[1],[-1],[-7],[2],[-10],[2],[-9],[9],[5],[-6],[-1],[-5],[-3],[-6],[5],[-2],[-5],[7],[-10],[7],[-9],[-2],[-8],[-10],[-6],[-7],[5],[3],[5],[6],[9],[4],[-1],[-5],[1],[-4],[10],[9],[-8],[-2],[7],[1],[-3],[9],[6],[-10],[3],[8],[-9],[8],[-4],[2],[-8],[-2],[2],[-9],[5],[-1],[6],[8],[5],[-6],[2],[-6],[-8],[10],[-7],[-8],[3],[-9],[5],[-4],[-2],[9],[-2],[2],[5],[-8],[4],[9],[-8],[-6],[3],[-10],[-3],[3],[-9],[-8],[-9],[10],[6],[-3],[-10],[9],[6],[-7],[-6],[1],[-8],[-8],[-10],[-1],[-8],[-1],[-8],[10],[-1],[-4],[-3],[6],[-8],[6],[-10],[7],[-8],[1],[6],[8],[-4],[10],[-7],[5],[-3],[-10],[1],[-8],[3],[-7],[10],[2],[-9],[-5],[-6],[-8],[9],[-2],[10],[6],[-8],[2],[6],[-10],[-3],[-1],[1],[3],[6],[-4],[9],[3],[-1],[8],[-4],[-5],[-3],[-2],[6],[-8],[-9],[5],[4],[-7],[-4],[-5],[4],[-2],[-4],[-6],[-7],[3],[-7],[-10],[6],[-3],[-9],[-2],[-4],[5],[1],[-2],[-7],[2],[7],[10],[-9],[3],[-7],[-9],[1],[8],[10],[-4],[1],[4],[-7],[-1],[-1],[6],[10],[-9],[8],[-5],[4],[-9],[-7],[6],[-9],[2],[10],[-3],[2],[-3],[-4],[-10],[-4],[3],[2],[-8],[1],[-3],[4],[-6],[4],[2],[5],[2],[9],[8],[-4],[-10],[-9],[2],[-1],[8],[-8],[10],[4],[3],[-5],[-3],[10],[6],[1],[-5],[-4],[5],[7],[5],[-10],[2],[7],[9],[8],[-9],[-7],[-1],[-8],[-8],[-3],[-5],[-9],[-2],[-10],[6],[9],[-9],[8],[8],[-10],[-8],[1],[-7],[8],[-9],[-10],[10],[7],[-6],[9],[10],[-8],[6],[6],[3],[-3],[4],[4],[-5],[9],[-5],[-10],[-8],[7],[5],[-8],[3],[3],[3],[3],[5],[8],[-4],[-5],[5],[2],[-4],[-5],[1],[-8],[9],[1],[-1],[3],[-4],[-1],[6],[10],[-2],[-8],[-8],[-8],[-5],[5],[-8],[-10],[1],[1],[8],[6],[-4],[-2],[-8],[10],[-9],[8],[-1],[10],[-1],[9],[1],[6],[-3],[-2],[5],[-4],[6],[-1],[10],[4],[-10],[-9],[-1],[4],[-5],[1],[4],[-8],[8],[-9],[-9],[-2],[-1],[-9],[4],[2],[-6],[-6],[1],[8],[5],[-4],[9],[-6],[-1],[8],[8],[-2],[4],[-1],[5],[-4],[-8],[9],[-10],[-5],[-6],[-4],[10],[-2],[2],[10],[-1],[-2],[6],[-3],[9],[-3],[8],[6],[10],[-5],[-2],[-3],[-6],[3],[4],[-2],[8],[8],[-7],[4],[-8],[5],[-2],[4],[-4],[-10],[7],[-9],[10],[-2],[7],[-9],[-8],[-6],[10],[5],[8],[4],[10],[-2],[6],[-9],[7],[5],[-1],[-4],[-3],[-3],[10],[7],[1],[7],[-1],[9],[-8],[6],[-7],[4],[-4],[-3],[-8],[-5],[-10],[1],[8],[-9],[2],[-8],[7],[-2],[2],[-9],[-2],[3],[4],[3],[3],[-4],[-6],[2],[-4],[5],[-8],[-7],[-2],[-2],[-9],[-3],[5],[-9],[2],[-2],[1],[7],[-10],[-3],[9],[-10],[-1],[-2],[10],[-7],[-4],[-1],[8],[10],[3],[-6],[-10],[4],[-1],[4],[-3],[7],[-3],[-6],[4],[3],[-6],[8],[6],[4],[2],[6],[3],[1],[4],[-2],[-2],[-10],[-1],[-10],[-10],[4],[7],[7],[-2],[5],[-1],[5],[10],[7],[-3],[-1],[-9],[2],[7],[-4],[6],[2],[2],[9],[2],[-7],[4],[8],[9],[-9],[4],[7],[-3],[3],[10],[-7],[-7],[-2],[-8],[-2],[-4],[5],[2],[3],[7],[-4],[-2],[-4],[10],[2],[-7],[8],[8],[1],[-10],[10],[4],[3],[9],[7],[-8],[8],[-4],[2],[10],[-5],[7],[-10],[-3],[4],[-6],[9],[-10],[-5],[-8],[6],[5],[-5],[-6],[4],[3],[4],[-5],[6],[7],[-3],[-2],[10],[7],[-10],[8],[-1],[8],[6],[5],[2],[9],[9],[-10],[2],[-4],[-8],[-9],[8],[-6],[1],[2],[10],[9],[6],[6],[-3],[1],[9],[-6],[-9],[-7],[-5],[-7],[-2],[-1],[8],[-8],[5],[-2],[3],[-6],[3],[8],[-1],[4],[-5],[8],[9],[4],[10],[-6],[-9],[5],[-2],[-5],[-7],[1],[8],[-1],[-4],[-8],[-7],[-10],[4],[10],[9],[2],[-10],[4],[-6],[-9],[7],[2],[-1],[-6],[-9],[5],[-3],[-2],[9],[10],[-8],[8],[1],[-2],[-8],[-9],[-10],[2],[-5],[8],[5],[10],[8],[-6],[6],[5],[-10],[1],[-4],[8],[3],[8],[-10],[7],[-9],[7],[-8],[-3],[-1],[-3],[4],[-10],[-2],[4],[6],[-7],[9],[4],[-6],[-3],[8],[10],[-1],[4],[9],[-8],[7],[5],[-10],[3],[-1],[7],[-6],[9],[6],[6],[6],[-1],[6],[-8],[5],[5],[-5],[-1],[-9],[3],[7],[-10],[-2],[4],[3],[-3],[-5],[-5],[-4],[-7],[8],[-10],[4],[9],[10],[-3],[-3],[1],[-4],[-5],[-6],[-7],[7],[-3],[2],[7],[-1],[4],[-2],[9],[5],[8],[-9],[-7],[-3],[-1],[3],[1],[7],[-8],[-3],[-2],[5],[10],[-6],[-9],[4],[-3],[8],[5],[2],[-2],[1],[4],[5],[-10],[10],[3],[-5],[3],[5],[-6],[-9],[10],[-7],[-1],[-1],[4],[4],[4],[4],[8],[-6],[-7],[5],[6],[-2],[-8],[1],[10],[-5],[7],[-2],[9],[-2],[5],[-7],[-10],[-5],[5],[9],[-9],[4],[-3],[7],[3],[4],[5],[-10],[4],[-7],[8],[4],[-6],[4],[-9],[3],[-3],[-7],[-1],[2],[6],[3],[-4],[8],[-7],[-8],[9],[-4],[3],[6],[-1],[3],[-7],[-2],[5],[-4],[2],[4],[10],[-5],[-5],[3],[-7],[8],[-3],[3],[5],[-1],[6],[-3],[-9],[-4],[4],[-6],[-8],[-1],[-6],[-6],[9],[2],[-10],[9],[-10],[-10],[-6],[-9],[-9],[6],[9],[-8],[-5],[-9],[-5],[-3],[-10],[-10],[1],[-8],[2],[9],[-2],[-2],[1],[6],[10],[-4],[-7],[5],[9],[6],[-4],[-2],[8],[7],[-1],[-5],[-5],[5],[5],[-4],[9],[9],[3],[8],[1],[-3],[-2],[9],[8],[-7],[2],[-1],[-1],[3],[-10],[-10],[-8],[-5],[-4],[-5],[6],[-9],[5],[-8],[1],[2],[-9],[10],[-1],[-5],[-1],[10],[-3],[-2],[-7],[-1],[5],[1],[7],[-2],[5],[4],[7],[4],[-1],[9],[-4],[-1],[5],[6],[-10],[-4],[7],[6],[-7],[4],[4],[-7],[-4],[-1],[10],[6],[10],[-10],[3],[-6],[3],[10],[7],[5],[4],[-5],[-9],[-1],[3],[-7],[3],[-4],[-3],[7],[-2],[-10],[5],[6],[6],[6],[-1],[10],[3],[-3],[5],[-9],[3],[1],[-10],[3],[1],[7],[-1],[-8],[4],[-9],[-6],[5],[4],[8],[-7],[-8],[-10],[6],[7],[-4],[-3],[6],[5],[3],[9],[6],[-2],[-7],[-8],[6],[9],[6],[2],[3],[-1],[8],[1],[-8],[-10],[-8],[2],[4],[-3],[-2],[5],[-6],[1],[8],[-4],[-3],[-10],[-9],[-6],[7],[-7],[-5],[-7],[4],[-2],[-2],[-4],[1],[-10],[7],[10],[9],[10],[8],[2],[-4],[-10],[-9],[-9],[-10],[-9],[6],[-1],[-7],[6],[7],[3],[-5],[-1],[-10],[10],[-3],[2],[9],[4],[2],[2],[-7],[5],[-5],[7],[6],[-7],[4],[3],[4],[-2],[6],[-10],[-5],[4],[8],[-5],[2],[8],[-2],[1],[-6],[8],[8],[-7],[-7],[-9],[3],[7],[6],[7],[-1],[10],[4],[-1],[4],[4],[-10],[-3],[6],[-9],[9],[7],[9],[-1],[-7],[-8],[1],[-10],[-5],[-1],[2],[-10],[-8],[9],[3],[10],[-7],[-3],[8],[1],[10],[-4],[9],[-8],[-4],[5],[4],[6],[-8],[-7],[-4],[10],[-1],[10],[-7],[-7],[-2],[2],[2],[6],[-6],[-1],[6],[-2],[2],[-5],[8],[8],[10],[-1],[10],[-6],[8],[6],[7],[-7],[2],[-3],[3],[3],[9],[-2],[5],[6],[-9],[-2],[6],[1],[-7],[7],[8],[-9],[2],[-9],[9],[2],[1],[-5],[-5],[10],[8],[1],[4],[-2],[-9],[-5],[3],[-9],[5],[-1],[1],[-4],[-9],[-9],[-8],[8],[-2],[3],[-3],[7],[2],[-10],[5],[1],[7],[-8],[-5],[-1],[9],[-9],[-10],[6],[6],[-8],[-4],[10],[6],[-2],[-9],[-4],[-5],[5],[3],[4],[-7],[-1],[-2],[6],[6],[-6],[10],[8],[-5],[-8],[-3],[9],[3],[8],[1],[7],[7],[-2],[7],[-6],[4],[3],[5],[10],[2],[-4],[-8],[-3],[-8],[-6],[2],[-6],[5],[7],[-8],[5],[2],[-5],[-1],[-9],[-3],[-10],[-6],[4],[5],[-3],[-5],[-8],[-7],[-2],[-8],[6],[-7],[9],[8],[-3],[-10],[3],[-9],[2],[-9],[2],[3],[6],[-5],[-4],[5],[2],[-3],[-10],[-10],[-3],[9],[8],[5],[1],[-6],[9],[1],[1],[4],[-8],[7],[1],[-5],[-10],[-5],[7],[3],[1],[5],[3],[4],[-3],[9],[-2],[9],[-2],[-2],[-6],[-3],[3],[-3],[3],[6],[-3],[5],[-4],[-10],[-4],[1],[2],[8],[6],[-4],[-8],[-1],[8],[-1],[-8],[-4],[-2],[7],[-7],[-3],[3],[-9],[-3],[8],[6],[2],[-10],[4],[4],[8],[6],[3],[10],[2],[-6],[-10],[-8],[-6],[5],[-10],[8],[6],[-2],[-6],[8],[10],[-6],[10],[4],[3],[8],[3],[-2],[8],[-2],[8],[-8],[-10],[5],[-9],[-1],[-8],[4],[3],[1],[-10],[-7],[8],[-1],[-7],[-5],[-5],[-9],[5],[10],[-8],[-3],[-8],[-4],[4],[4],[8],[-4],[-3],[1],[10],[-4],[10],[9],[-7],[7],[9],[-4],[6],[-5],[5],[4],[-3],[8],[-5],[-7],[-6],[9],[4],[1],[-4],[1],[-10],[-10],[2],[7],[-5],[1],[-1],[-5],[1],[-1],[-2],[-4],[8],[-2],[-4],[8],[7],[-10],[-1],[6],[-10],[-7],[9],[9],[-5],[8],[-5],[-6],[8],[7],[-2],[-5],[1],[7],[4],[2],[-4],[7],[1],[3],[10],[-5],[-4],[8],[-10],[5],[10],[-10],[5],[6],[3],[-3],[7],[8],[10],[5],[-5],[-5],[-1],[2],[-7],[-3],[6],[7],[1],[1],[1],[8],[-6]], dtype = "uint16")#candidate|1800|(1872, 1)|const|uint16
call_1798 = func_993_call(relay.reshape(var_1799.astype('uint16'), []), relay.reshape(const_1800.astype('uint16'), [12, 13, 12]), )
call_1801 = func_993_call(relay.reshape(var_1799.astype('uint16'), []), relay.reshape(const_1800.astype('uint16'), [12, 13, 12]), )
func_521_call = mod.get_global_var('func_521')
func_524_call = mutated_mod.get_global_var('func_524')
var_1806 = relay.var("var_1806", dtype = "bool", shape = (15, 6))#candidate|1806|(15, 6)|var|bool
call_1805 = relay.TupleGetItem(func_521_call(relay.reshape(var_1806.astype('bool'), [5, 6, 3]), relay.reshape(var_1806.astype('bool'), [5, 6, 3]), ), 0)
call_1807 = relay.TupleGetItem(func_524_call(relay.reshape(var_1806.astype('bool'), [5, 6, 3]), relay.reshape(var_1806.astype('bool'), [5, 6, 3]), ), 0)
func_470_call = mod.get_global_var('func_470')
func_473_call = mutated_mod.get_global_var('func_473')
const_1817 = relay.const([-1,2,10,-9,-4,7,9,-8,4,1,10,-4,-9,2,-7,-6,1,-10,-9,-6,-8,-10,-8,8,-2,2,8,1,-1,9,-1,6,-4,-3,-7,-6,3,-4,4,2,10,-6,-8,-6,-1,6,-10,5,1,7,-6,-5,-8,-9,2,6,3,-2,10,-3,3,-4,4,-8,-7,4,-9,2,1,-8,3,5,-8,9,5,9,-3,-2,2,3,7,3,-8,3,-4,-2,-7,-5,6,-2,-7,-8,6,5,-1,7,6,6,-5,-3,10,-8,-4,1,-6,-8,4,3,-9,-9,-7,-10,8,-8,5,-4,9,-9,4,3,-2,4,1,7,-6,-2,-3,-9,-8,-4,10,-7,9,-4,-7,4,9,7,-5,-8,1,5,2,-4,1,-5,-5,4,10,6,4,-7,8,-1,-8,-6,-10,-2,-7,5,6,10,4,-3,3,-2,-9,-2,-2,-4,3,-1,2,-5,4,8,-10,9,-4,8,4,-6,8,-4,10,-3,7,-6,-1], dtype = "int32")#candidate|1817|(189,)|const|int32
call_1816 = relay.TupleGetItem(func_470_call(relay.reshape(const_1817.astype('int32'), [7, 3, 9]), relay.reshape(const_1817.astype('int32'), [7, 3, 9]), ), 0)
call_1818 = relay.TupleGetItem(func_473_call(relay.reshape(const_1817.astype('int32'), [7, 3, 9]), relay.reshape(const_1817.astype('int32'), [7, 3, 9]), ), 0)
func_451_call = mod.get_global_var('func_451')
func_454_call = mutated_mod.get_global_var('func_454')
var_1821 = relay.var("var_1821", dtype = "float32", shape = (1, 1365))#candidate|1821|(1, 1365)|var|float32
call_1820 = func_451_call(relay.reshape(var_1821.astype('float32'), [7, 13, 15]))
call_1822 = func_451_call(relay.reshape(var_1821.astype('float32'), [7, 13, 15]))
func_239_call = mod.get_global_var('func_239')
func_243_call = mutated_mod.get_global_var('func_243')
const_1841 = relay.const([-6,8,6,9,8,-10,-3,4,6,7,8,-7,-2,7,4,1,5,-1,-7,6,2,4,-4,5,2,7,-2,5,5,8,-3,1,-10,2,5,-5,-6,4,9,-2,-1,-3,5,-9,-9,10,-9,4,5,7,4,7,-10,1,-8,2,-2,-6,-2,-9,-3,-5,-2,-10,-4,5,10,9,-10,-9,3,-2,6,-4,-3,9,2,8,2,-8,-6,8,4,-6,-8,-5,-8,-6,4,-5,2,3,-8,5,1,-10,-8,-3,-6,7,7,4,2,2,-9,3,10,5,-6,-2,6,4,-10,6,-7,9,8,9,-3,-4,-9,6,-4,9,-5,-7,-3,-7,-7,9,8,7,-1,-4,9,-9,-6,8,-7,-9,8,-5,6,-5,3,-6,4,-6,4,-1,9,-3,-6,4,10,6,-1,10,-3,8,-1,-6,10,1,-2,-6,2,-6,10,2,5,-7,-10,-2,4,-8,6,1,6,9,4,-6,5,-5,-4,-5,4,5,-1,-7,-9,-9,9,-3,1,2,9,10,-2,1,1,-6,9,10,-10,-4,-4,-8,-2,7,-2,9,-8,7,3,7,5,-10,5,-6,-9,-8,5,5,6,3,2,1,-10,-2,-6,8,2,-8,9,4,6,10,-7,-9,10,10,1,-4,10,5,-4,-1,-4,-5,-5,-1,-2,-10,-10,1,10,-2,5,-3,1,-4,4,5,-4,-1,1,10,6,4,1,-6,1,2,-1,10,5,-8,9,7,4,-2,9,-10,-4,-1,-4,-3,-2,-8,2,-6,3,-7,9,-6,1,2,2,5,8,10,-10,6,10,6,3,-10,-9,-9,-1,3,-6,2,-9,-5,-2,1,-8,5,-1,1,-6,-10,-7,5,-7,10,5,1,-8,1,1,-1,8,-10,-10,3,-1,-2,4,-6,6,-4,5,-7,4,-2,-9,-8,10,4,-9,7,1,-8,-7,-8,10,5,9,-8,-9,2,5,5,-5,7,-5,4,4,-1,-6,-3,10,10,10,-6,10,7,5,-3,10,-6,4,2,-2,6,-1,2,7,-5,-2,5,7,9,3,-4,-2,7,10,4,4,10,1,9,4,6,-4,-9,-3,5,-10,9,9,8,7,3,-1,7,5,-1,-1,-4,-8,-6,-1,8,-9,-3,-7,10,-2,5,8,-7,-1,9,-5,-7,-7,-5,5,2,-2,-4,6,3,9,-1,-4,-7,7,5,10,-7,6,-7,-9,4,-6,10,-2,-9,-5,-9,1,1,3,-1,9,-2,-4,-5,10,4,-6,7,9,3,6,-2,8,-6,1,-4,7,-5,-4,4,10,9,4,7,2,9,10,7,-5,8,2,6,7,4,4,7,-8,1,4,9,-8,6,-10,-5,-7,10,-5,3,-8,3,-7,-7,9,-8,5,-9,-6,10,-7,10,8,-7,6,4,7,7,10,-10,1,-1,7,-7,2,-10,2,5,2,2,-2,-4,-6,4,5,4,-3,-2,5,-5,7,-6,-5,-9,-2,7,-9,-4,1,2,3,-4,3,9,5,4,7,-1,2,-1,2,10,-8,6,-6,7,-6,-8,-9,6,-8,6,-10,-10,-8,7,-1,-1,3,8,8,9,-8,-5,-1,-9,-1,6,5,-4,-9,4,7,-10,-5,-10,-4,8,-5,9,4,-6,-6,-6,10,-5,-8,10,-4,-8,9,-3,6,-6,-4,6,2,3,-6,-8,-9,-5,2,4,6,-5,9,-7,-1,3,-6,5,3,-6,9,5,-9,-4,-6,4,-10,6,-9,4,3,-5,-8,-9,-10,-2,-10,-4,-7,-9,9,-6,4,-8,-4,3,10,8,-10,-1,-3,9,1,-2,4,-3,5,-1,3,4,-4,5,-6,-3,2,-9,8,8,-3,-10,-4,-9,-4,1,-2,3,1,1,2,8,-2,9,-4,1,-9,-4,4,5,-8,3,9,-7,5,2,3,-3,6,7,9,7,7,-3,9,-8,2,8,-9,-4,2,-4,-5,-2,-9,8,4,-7,1,3,8,6,3,5,-8,4,6,-6,7,9,4,-3,7,1,-10,7,-6,-9,-8,8,-5,7,-2,-10,1,-2,-9,5,-5,-3,3,-4,-6,7,-9,-1,7,4,10,-10,-3,6,-9,7,9,8,1,-10,-7,10,-10,-8,6,-10,-6,-7,-3,1,4,-8,10,-5,-10,-10,10,2,-1,-10,-2,5,-1,7,5,-7,-9,-4,-3,-2,3,-9,-1,4,-9,1,3,1,8,9,7,-6,3,5,-8,6,-8,4,-5,-1,3,10,-10,1,7,3,7,10,1,3,-4,-3,-5,-2,-7,9,-7,-5,7,4,5,-10,1,10,9,1,6,4,3,4,-10,-10,-1,3,1,4,9,8,-7,-9,-4,8,8,-1,-1,-1,-9,10,-5,10,2,-10,1,10,8,4,2,4,-5,3,2,-7,-4,-1,-9,5,-4,-4,-4,-2,-4,6,8,5,5,-1,1,-7,4,8,-10,5,-7,-10,-3,-5,9,-2,3,4,7,-6,3,7,-5,1,7,9,6,7,4,-6,-7,-3,8,-10,-3,5,-4,-5,7,-4,3,8,-5,-9,-9,3,3,-8,-3,8,-7,-4,-5,-9,3,5,-7,5,10,-2,-1,6,-8,9,-1,7,-7,-8,-8,-7,8,-8,6,8,1,4,-2,-10,-3,2,-3,3,-2,4,-5,2,2,-10,-7,-4,-8,-10,1,3,-6,-9,7,-1,-4,-8,8,4,-10,-10,-7,-5,5,7,7,9,8,4,-3,-4,-4,5,2,1,6,-1,6,-7,-3,-4,-8,-6,4,-2,7,-1,8,-10,-5,-2,-2,5,-1,6,9,-4,6,1,-10,-4,-1,-9,-1,9,1,1,8,-1,8,-1,-1,4,-7,-7,10,-5,8,-1,-4,-7,4,8,3,9,9,8,8,-7,-9,-1,8,9,1,-5,2,10,1,8,-9,7,10,10,-9,3,3,-6,-2,-7,7,-8,5,5,-7,-1,-1,-4,6,-10,-3,3,-5,-7,4,-9,-5,9,4,5,8,-8,6,1,8,-7,2,-8,-8,5,-8,-4,3,4,-9,9,-7,-6,10,5,7,-8,-1,-8,-1,3,-9,-4,-10,10,-7,7,-5,-7,10,-1,-3,8,7,-4,-10,8,2,2,10,3,10,-1,5,-9,1,4,1,1,9,-6,10,2,6,8,-5,-1,-3,9,-2,2,10,-1,-9,9,-6,9,-9,-2,5,10,2,-5,6,2,-4,-3,-10,7,7,-7,3,10,9,8,3,5,9,-10,-6,3,9,-8,2,-8,1,1,5,7,-3,-9,-1,2,4,3,6,-2,3,4,5,-2,1,-2,5,2,2,-6,4,3,2,8,3,3,-1,-1,10,5,-9,8,4,-3,1,-1,9,-3,-9,9,4,-10,-8,3,8,-1,-3,-2,9,5,-7,7,10,7,4,3,-9,-4,8,6,5,5,-6,-7,4,-9,10,-9,5,-2,-3,6,10,10,7,-3,5,2,-5,-8,-3,-2,-10,-5,-8,-5,-6,2,3,5,9,-2,-6,-6,5,1,-1,-3,3,-10,-9,-1,-8,-10,-6,8,-10,2,7,8,1,10,-2,7,-2,-8,1,-5,-4,-7,7,8,8,-7,7,6,5,-4,-10,-6,-7,5,-4,7,5,-8,3,-2,-5,7,4,-2,1,10,6,-4,-8,10,-1,-10,5,9,-4,-9,9,3,-9,-2,2,2,8,8,6,10,7,2,-7,-9,1,2,-6,-3,3,-7,-9,-10,4,-3,-9,10,2,-9,-2,-10,8,2,10,-1,3,5,-7,-7,4,-3,-4,9,4,2,8,-10,-5,-10,-10,-5,9,4,-6,6,4,5,4,-1,3,6,-7,-8,1,-5,-1,5,-4,-5,-2,2,-2,-2,-2,5,-8,9,-7,8,-6,-2,-5,6,-8,10,4,5,-1,-2,-2,2,-8,-7,-7,3,-8,-2,-2,4,1,-9,10,-3,-3,-5,2,6,6,4,-8,1,-4,3,-3,-5,3,-1,9,3,1,-8,-3,2,10,7,5,-8,-8,4,-9,8,-4,-4,-5,5,-7,8,7,-1,7,5,-5,10,3,7,-2,4,5,9,9,5,-6,5,-4,10,-6,3,9,5,7,6,6,-9,9,1,3,3,-9,-3,-9,-6,2,-4,-5,5,-10,3,-10,-9,2,9,3,5,2,-7,-4,4,2,-7,9,-9,2,9,6,-10,-5,4,-1,-2,-10,4,1,8,-7,10,-6,7,3,-9,-1,9,-10,-5,-3,-5,-7,-5,-6,4,9,-9,3,2,-1,6,1,-1,-10,3,-5,-6,-9,3,-7,9,8,-10,6,-10,-4,3,2,8,10,7,2,-8,-6,6,-7,-9,5,-8,3,1,4,3,-10,10,-2,5,-10,-5,-5,2,-8,-7,-10,7,4,-1,4,6,2,-3,-5,-10,-3,-3,-8,10,-6,10,-3,1,4,8,5,1,-2,-6,5,1,-1,-8,-1,-4,7,-7,8,10,2,-10,-1,-6,7,9,-8,-10,7,5,-8,7,2,8,1,-1,-5,10,6,-9,10,5,-8,-4,-4,-3,9,-10,3,10,-7,7,-4,1,4,2,-8,9,-1,3,5,10,7,2,7,5,5,-9,10,-8,10,8,7,7,2,5,-7,1,4,-5,-7,6,-2,-10,5,-7,-10,-4,-4,-6,1,4,-6,-4,-10,1,9,7,4,-6,-7,-5,-7,3,10,-8,3,-10,8,-9,-3,6,-8,5,-2,3,3,-6,9,-2,1,9,-3,-2,3,1,-2,7,-10,3,3,-3,6,-7,-9,3,8,-3,-10,-3,-6,8,1,-5,-10,-5,6,9,7,4,-6,5,8,-6,3,-3,6,-5,9,-8,-10,-1,-2,6,-8,-3,-7,8,-6,-4,-6,6,-8,-8,2,-5,-10,-9,-9,-2,-5,-1,3,8,8,8,8,-5,-6,-5,-1,-1,7,5,-4,4,2,-4,7,-8,-3,-8,-2,-9,-5,9,5,9,1,-9,-1,-6,10,-1,1,3,-6,5,3,-8,-10,-6,-8,-8,-1,6,2,8,-4,-1,8,7,5,6,7,8,-3,-2,-3,2,1,-7,-1,-7,6,10,-1,10,8,-4,1,10,-8,7,-5,5,-8,-1,7,-6,7,9,-2,4,4,-4,-9,1,9,9,8,3,6,6,1,6,-9,-6,3,-10,-7,4,-1,5,2,5,6,5,-2,-5,7,1,-6,5,-6,-10,9,8,8,7,5,-1,2,5,9,6,-1,1,3,-1,-9,1,5,-8,-3,5,9,-1,4,-4,5,-10,-9,8,-7,3,7,5,-3,5,8,-4,-7,-9,-10,-7,-4,-1,-8,-7,7,-2,-3,-6,-8,2,2,2,-8,4,5,-3,8,4,-3,10,2,-4,-9,-1,1,2,7,7,-6,-5,10,-9,-2,-4,-5,-4,-8,-10,-1,3,-4,7,8,9,5,-4,2,5,8,8,8,8,2,-3,1,-5,9,-10,-8,-5,-5,-9,-4,-8,8,4,9,1,10,-6,-10,-7,5,-9,6,-5,1,-7,-2,7,-2,5,-1,-7,-2,5,4,-10,1,1,1,10,3,9,4,-5,-7,10,-9,-2,-9,-3,-8,1,4,7,-1,-9,4,-10,-6,-5,-7,10,3,9,8,5,6,-5,2,-6,-1,-7,-7,-3,2,-5,-6,-9,6,1,9,-9,-5,-5,-8,-10,-8,-4,-4,5,9,-6,-6,2,-2,-7,10,-6,-2,-2,2,9,-6,4,-4,-5,10,5,-6,-7,3,-9,-1,8,6,4,-1,-9,-10,7,3,-6,-5,8,-10,-10,-10,-6,4,4,5,9,3,-2,-2,-6,1,9,-2,7,-3,-7,-8,3,8,-3,7,10,1,-4,1,7,1,9,-4,-7,5,-9,8,4,-3,-10,10,-2,-2,-5,8,8,-9,-5,5,-7,8,5,2,-4,8,-5,4,1,-6,2,8,1,8,8,10,6,-5,-3,-10,-2,-1,-9,6,4,6,-4,-5,-2,3,-6,7,-10,-3,-9,-10,-3,10,7,-4,8,4,-4,8,-3,6,-5,-3,5,-8,1,5,-8,-8,3,-3,-1,4,7,1,-7,1,-10,-5,-2,-9,-8,7,-1,10,-6,-6,1,2,6,-9,-2,2,-5,-7,1,-10,-10,6,1,-5,8,-3,3,-6,3,-3,6,-7,4,9,-9,6,-5,9,8,-2,7,-3,3,1,-5,-10,-10,3,10,1,9,7,10,10,1,-4,7,1,9,5,6,4,-10,-4,-8,-10,-2,3,-4,-2,4,5,5,1,-8,7,-2,4,9,4,10,-6,-2,6,1,3,4,-9,6,3,8,9,-5,2,8,-1,2,3,-6,2,-7,-5,4,7,5,3,-2,-3,-5,8,3,-2,-9,-8,5,4,-6,-10,6,10,9,-5,8,-5,5,6,5,10,4,2,-8,1,7,4,-1,5,2,9,9,2,-7,1,-8,-7,9,-4,-6,-10,-6,-8,-3,-7,4,4,7,-9,-8,-6,1,1,-3,-6,-1,1,3,6,-4,-2,6,4,-3,8,3,-8,-7,4,-7,8,9,7,1,-1,-6,-3,-8,-8,2,-4,1,-9,2,-10,-8,-7,8,-2,-9,3,-3,-2,5,-3,9,4,-1,10,-8,4,-7,-4,7,3,6,-3,-4,1,-6,-8,4,-5,-5,-8,-3,1,-3,4,-1,-6,-5,-10,-8,8,-7,-9,8,-6,8,6,-4,1,1,7,-4,-1,-6,8,1,-7,4,-9,-9,3,-7,-7,7,-10,3,2,-2,6,1,-1,-2,1,2,8,5,7,2,4,-3,-10,2,6,5,4,-8,10,-3,7,3,7,7,-1,-1,10,1,-2,2,-1,-2,2,-7,-1,3,6,-1,5,10,-7,-3,4,-7,-9,4,3,-2,-5,7,-1,-2,-8,3,-1,7,5,6,-4,-8,1,2,8,-1,6,9,-10,-6,3,2,-4,3,1,-1,-2,9,-10,9,6,3,2,9,2,-2,5,-9,3,8,-3,8,-7,1,9,-7,2,6,9,-5,3,6,-1,8,-10,7,-5,-9,1,10,-9,-6,-5,4,10,-7,-7,2,1,-2,-6,2,-4,-4,10,7,-10,-8,-5,-1,2,-9,-2,-6,1,-1,7,-8,6,-7,7,4,7,4,-6,9,4,8,-9,8,4,-6,-7,-3,-6,9,-4,-1,-9,-7,2,5,-5,4,9,5,3,6,4,3,10,3,9,7,9,-2,-1,6,10,-10,-4,-2,-6,7,8,2,-5,1,1,9,3,10,8,10,8,7,-6,-8,-7,-2,8,2,1,7,-3,-1,-10,10,8,6,-9,9,1,-8,6,-3,6,-2,-9,6,-7,-8,-7,-7,-8,5,5,5,-5,6,2,8,7,2,10,9,4,-6,-6,8,-5,3,8,8,8,-5,-5,10,-4,7,-2,-1,4,9,-8,5,-1,5,-6,-3,9,9,-2,8,-1,7,-3,-2,-6,8,10,-9,-6,2,-1,8,-2,6,6,-7,-10,4,5,-2,-9,-4,8,1,2,-5,8,-3,-2,4,4,9,-8,-9,9,1,-2,8,-2,3,2,-5,3,3,-6,3,6,3,-5,6,-4,1,-4,7,7,10,-7,-4,-4,6,-1,9,3,1,4,3,4,5,4,-6,1,-2,2,1,-2,5,5,1,7,7,9,9,-3,-5,-6,8,8,8,-8,7,5,1,7,-10,-6,-6,-7,10,1,7,-6,-7,-6,6,3,4,-7,-9,-9,-9,-6,-9,1,-2,-3,-10,-5,3,1,7,-5,3,10,-8,-1,-3,1,-9,-3,5,-10,-5,1,6,9,9,6,10,3,4,-5,10,-1,10,-10,10,-9,2,-6,3,4,1,-3,-4,9,10,-5,1,1,-1,-6,8,-7,5,-1,-9,10,4,3,10,8,-5,4,10,-7,4,-4,-9,5,4,-4,-2,7,8,6,1,1,6,3,-9,-8,6,-5,5,-8,-5,-4,-7,-3,-2,-6,-2,10,-2,-3,-7,-4,-5,7,9,8,10,-1,4,3,-4,8,5,1,5,8,8,-5,3,10,-9,-7,10,-5,5,-10,-8,2,-8,-1,-8,-5,3,9,1,-9,8,7,-6,-6,-4,-8,7,-6,-5,-10,-7,1,-4,-7,10,3,-4,7,7,-10,10,-3,-10,-3,-7,-9,-7,-8,9,-4,-1,-8,-1,6,-8,1,6,6,5,2,2,8,-10,-8,2,-9,-3,10,1,6,-2,-9,2,-6,-5,-9,-8,4,-5,-8,-6,-2,3,7,-7,5,-9,-2,8,-8,-4,7,5,-1,-6,7,-9,5,10,8,-4,-1,-5,-3,-8,-5,-9,-8,6,7,10,5,3,-1,-9,-2,-2,-5,-3,10,-1,-8,9,-7,5,8,7,7,3,-3,-9,-7,-8,-7,-5,4,4,-8,-8,-10,10,2,-3,-9,9,1,9,-10,-2,-7,6,5,-5,-2,10,10,2,-9,-1,1,10,-1,-2,5,-9,-3,6,-4,-2,6,10,4,-7,7,3,7,2,4,8,7,4,2,-9,10,5,-5,-3,-9,4,-6,5,-2,-3,10,6,1,-9,-9,-9,2,-9,1,8,10,-5,10,-4,-9,-9,-10,-8,6,-4,-8,7,9,6,6,9,5,6,5,8,-7,-5,-3,-8,2,5,8,-1,6,8,-9,-1,2,10,5,3,4,-9,-5,-7,10,9,3,-7,-7,-2,4,1,-1,3,-8,8,-6,-8,-5,-10,-6,-4,-8,8,8,2,-3,7,-1,-8,7,-10,4,-6,2,3,-4,6,10,7,-4,-9,9,9,-6,-10,6,8,9,-6,-1,-10,-7,-6,10,4,-2,9,1,-3,8,2,5,-3,-7,7,9,2,4,3,-1,6,-2,-7,6,1,-5,-7,4,-7,10,-8,3,-4,-6,-9,-6,2,-3,-2,-9,2,-6,6,-10,3,-1,8,9,-9,1,-3,6,-4,4,-5,-6,9,-7,-4,-2,-6,5,4,-7,10,4,4,1,-8,-1,10,-1,3,-7,-4,3,-9,3,-6,-10,-10,-2,-4,-2,9,-5,-3,9,-4,-3,5,-8,8,-2,6,9,-4,-10,-3,1,6,-1,2,-6,-8,7,-7,-10,8,7,1,8,6,-6,-10,1,2,-6,-3,5,1,7,-4,-1,6,-6,6,2,4,3,6,-10,9,5,8,5,1,-5,6,9,6,9,-1,-5,1,-9,-3,5,6,-6,-1,4,-3,-7,7,-1,3,-4,-10,-9,9,6,-8,-6,1,9,-2,-4,-1,2,-8,10,2,8,-5,1,-7,-7,-7,9,4,-2,10,1,-6,7,7,-9,-3,1,4,-1,-10,-5,-3,7,-2,-6,-4,4,-10,-5,-10,6,-1,-1,-8,5,-3,4,-3,-5,-1,-7,-6,6,4,2,6,-5,-4,2,-1,9,7,1,-6,7,5,-4,-7,-8,-2,2,10,-6,8,-6,5,2,-9,-4,-9,-4,-6,-7,9,-1,8,10,5,-2,-4,-1,-4,-2,7,-7,6,-1,2,-5,-3,-3,-4,-7,-8,1,7,-2,-6,-3,-2,-9,4,1,8,-6,-4], dtype = "uint64")#candidate|1841|(3600,)|const|uint64
call_1840 = relay.TupleGetItem(func_239_call(relay.reshape(var_1799.astype('uint64'), []), relay.reshape(const_1841.astype('uint64'), [3600,]), ), 4)
call_1842 = relay.TupleGetItem(func_243_call(relay.reshape(var_1799.astype('uint64'), []), relay.reshape(const_1841.astype('uint64'), [3600,]), ), 4)
uop_1851 = relay.log(const_1800.astype('float64')) # shape=(1872, 1)
bop_1855 = relay.bitwise_or(uop_1851.astype('int64'), relay.reshape(const_1800.astype('int64'), relay.shape_of(uop_1851))) # shape=(1872, 1)
bop_1860 = relay.bitwise_and(uop_1851.astype('int32'), relay.reshape(bop_1855.astype('int32'), relay.shape_of(uop_1851))) # shape=(1872, 1)
output = relay.Tuple([bop_1777,bop_1794,call_1798,var_1799,call_1805,var_1806,call_1816,const_1817,call_1820,var_1821,call_1840,const_1841,bop_1860,])
output2 = relay.Tuple([bop_1777,bop_1794,call_1801,var_1799,call_1807,var_1806,call_1818,const_1817,call_1822,var_1821,call_1842,const_1841,bop_1860,])
func_1867 = relay.Function([var_1775,var_1776,var_1793,var_1799,var_1806,var_1821,], output)
mod['func_1867'] = func_1867
mod = relay.transform.InferType()(mod)
mutated_mod['func_1867'] = func_1867
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1867_call = mutated_mod.get_global_var('func_1867')
var_1869 = relay.var("var_1869", dtype = "int8", shape = (8, 3, 13))#candidate|1869|(8, 3, 13)|var|int8
var_1870 = relay.var("var_1870", dtype = "int8", shape = (8, 3, 13))#candidate|1870|(8, 3, 13)|var|int8
var_1871 = relay.var("var_1871", dtype = "int8", shape = (8, 3, 13))#candidate|1871|(8, 3, 13)|var|int8
var_1872 = relay.var("var_1872", dtype = "uint16", shape = ())#candidate|1872|()|var|uint16
var_1873 = relay.var("var_1873", dtype = "bool", shape = (15, 6))#candidate|1873|(15, 6)|var|bool
var_1874 = relay.var("var_1874", dtype = "float32", shape = (1, 1365))#candidate|1874|(1, 1365)|var|float32
call_1868 = func_1867_call(var_1869,var_1870,var_1871,var_1872,var_1873,var_1874,)
output = call_1868
func_1875 = relay.Function([var_1869,var_1870,var_1871,var_1872,var_1873,var_1874,], output)
mutated_mod['func_1875'] = func_1875
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1904 = relay.var("var_1904", dtype = "float64", shape = (6, 16, 8))#candidate|1904|(6, 16, 8)|var|float64
uop_1905 = relay.tan(var_1904.astype('float64')) # shape=(6, 16, 8)
output = relay.Tuple([uop_1905,])
output2 = relay.Tuple([uop_1905,])
func_1921 = relay.Function([var_1904,], output)
mod['func_1921'] = func_1921
mod = relay.transform.InferType()(mod)
mutated_mod['func_1921'] = func_1921
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1922 = relay.var("var_1922", dtype = "float64", shape = (6, 16, 8))#candidate|1922|(6, 16, 8)|var|float64
func_1921_call = mutated_mod.get_global_var('func_1921')
call_1923 = func_1921_call(var_1922)
output = call_1923
func_1924 = relay.Function([var_1922], output)
mutated_mod['func_1924'] = func_1924
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2245 = relay.var("var_2245", dtype = "float64", shape = (4, 9, 2))#candidate|2245|(4, 9, 2)|var|float64
uop_2246 = relay.asinh(var_2245.astype('float64')) # shape=(4, 9, 2)
uop_2255 = relay.sin(uop_2246.astype('float32')) # shape=(4, 9, 2)
bop_2258 = relay.bitwise_or(uop_2255.astype('int16'), relay.reshape(uop_2246.astype('int16'), relay.shape_of(uop_2255))) # shape=(4, 9, 2)
func_1382_call = mod.get_global_var('func_1382')
func_1388_call = mutated_mod.get_global_var('func_1388')
var_2262 = relay.var("var_2262", dtype = "float32", shape = (960,))#candidate|2262|(960,)|var|float32
var_2263 = relay.var("var_2263", dtype = "float64", shape = (110, 2))#candidate|2263|(110, 2)|var|float64
const_2264 = relay.const([1.779975,9.182855,-0.372464,-2.223419,-4.079933,-1.048091,-1.207170,4.656964,1.953894,3.455217,-4.817667,-2.041402,4.787868,-9.691200,-1.274762,-3.174130,6.423165,-1.469434,-0.952713,-3.255526,-0.695676,8.414940,5.461261,-6.746316,-0.932261,9.292259,2.564955,5.358775,-5.173249,3.368324,9.280761,1.211762,0.597470,-8.734665,-1.233826,-6.971563,9.581397,-1.786698,4.611118,-7.398588,-8.137654,-6.823108,6.435319,6.815591,-1.761678,-2.503477,-8.774734,-3.395610,0.257734,7.254933,3.082222,-9.466143,-0.368390,-3.171733,4.110652,1.507487,-7.259050,0.496505,-9.278288,-5.315230,-3.157687,-5.563528,-0.315507,-9.026904,5.592130,2.988420,-6.864406,2.022436,-0.202308,-8.874554,-4.496322,-2.203078,9.662482,-1.042805,-0.538892,-9.660484,7.644635,6.930994,-3.881903,7.427923,-5.965300,-0.313351,-9.519076,9.299950,6.589999,-9.132703,7.945305,2.688256,3.829762,-3.714208,-0.023993,-2.547147,0.687423,8.379326,3.639483,7.218626,0.074831,-8.868395,-5.222836,4.050205,2.098793,1.119539,-1.420877,-6.918550,7.218541,9.449664,6.686473,1.096266,7.221988,-8.421965,-1.188453,-2.416141,-3.461700,6.330248,-9.081218,-7.749337,3.252119,7.083156,-7.469163,3.320400,-3.893177,8.965587,-8.005051,8.202084,2.269274,-1.356728,1.035239,-0.262828,-0.240071,-6.161563,-7.932648,-4.153353,5.281402,2.523605,1.087203,3.305350,6.001631,-7.623275,4.069472,2.546077,8.079187,-3.680879,2.546654,-4.093425,4.089071,-6.280560,-7.786015,0.582720,-1.628777,8.712633,1.097885,-9.577499,-4.642527,-8.521993,-8.404939,-1.455138,0.263596,-1.997324,6.652228,-5.397698,-3.652602,-0.802630,-6.839348,-4.740368,-8.290526,-7.976880,-1.782241,-8.874947,0.772752,-5.772003,9.493398,-0.347904,-5.197415,5.036417,7.972350,-6.634627,-4.831934,-3.740867,-7.540384,-0.928362,3.896409,-7.312800,5.331173,-7.907117,8.447927,-4.084075,2.324223,2.036662,3.288626,-8.684253,0.863197,-2.304915,5.600355,-1.406877,5.595791,5.478406,8.960468,-4.722423,-3.500164,-5.081245,-5.776201,-8.422664,0.417589,2.164722,-8.208119,8.284226,-2.274187,-2.193214,5.438195,5.870594,6.841007,1.183045,-2.970975,5.763863,-6.700049,-7.778180,-4.319464,-8.935770,-5.067706,-0.279117,6.248928,-7.624858,-1.969477,-0.390945,4.786422,-2.319204,-2.043325,-7.543930,-4.962112,7.020992,2.620137,6.016743,1.276610,3.172939,7.424650,-7.745599,9.741212,-3.978853,7.745256,6.578611,-9.933036,0.593642,1.411743,9.835531,2.827967,-7.324600,-6.471158,-2.653143,-1.289295,0.205154,-0.520342,-8.460490,9.785830,7.888613,3.998534,6.453681,-5.677229,-7.955645,-4.710449,9.197049,4.029662,-4.185879,6.001718,6.960595,-2.461392,5.791905,-7.167528,3.284112,-0.174472,8.993192,6.181795,2.312922,0.594701,-9.336794,2.396278,-8.492596,7.674326,-8.863357,9.869300,-9.718015,3.999993,-5.898826,-3.140441,5.752737,-3.394396,-6.269447,9.465317,-4.865491,-1.867755,1.941499,-2.601933,-5.391636,-1.082410,1.659596,-5.620540,-4.916927,9.120122,7.901095,-3.124878,5.229808,4.273867,-9.861604,9.453368,-0.845357,2.820161,-1.078566,9.471218,-5.108438,5.343012,5.664456,1.918678,3.369855,6.029187,-9.820020,0.803778,-2.003512,-5.633591,-9.304550,7.101123,1.610645,-8.507505,6.792362,-6.537828,6.349973,3.484788,3.005050,-5.336070,4.662525,2.518784,8.659850,1.906260,-5.861840,6.600105,-4.061210,0.739801,5.513777,8.749462,2.592631,-8.703750,7.967359,5.867569,2.816017,-0.732396,0.039594,-2.223153,-5.338184,4.927651,1.129274,9.894199,9.718100,4.889939,-6.417228,1.493573,-0.250539,8.123325,3.110645,-4.336174,-6.526985,-9.235544,9.273222,1.837469,-2.847646,-7.320186,8.770410,5.210540,-4.718752,9.356781,9.926778,-1.130589,6.323547,-0.301571,-1.164243,9.348476,6.553691,4.327554,-7.011531,-0.802256,8.210318,3.458639,1.112361,7.941783,4.171841,-2.549248,-0.915176,2.671817,-7.162641,-0.529520,-6.018336,-7.446590,9.214770,-4.797441,-4.106769,1.356382,8.357483,-4.281224,6.197022,-6.304840,-3.204767,-5.820560,4.555192,-4.891139,2.135961,4.515683,-7.809703,5.505201,8.661208,-0.911074,-8.128788,2.818065,-1.907092,-7.467543,2.747688,-5.148486,-3.331432,-1.738363,-1.163513,7.132826,-7.696136,-0.331681,-8.658470,-1.653265,9.703376,9.799940,-9.309411,-7.137945,-1.388264,0.790931,2.058404,-8.588437,-1.351849,-9.993407,3.797231,-3.001015,-2.810827,9.550849,-7.089971,-4.830441,-7.343468,5.806457,-7.053701,2.246300,3.912892,-8.278147,-5.118875,-1.496885,-3.269795,-9.937429,-0.121571,8.833251,9.778567,-7.447544,-2.148348,6.763031,-6.860154,-6.489502,-3.396852,-4.368693,-3.158270,9.757147,9.621413,5.801156,-3.855885,4.832749,-1.607326,5.599333,9.787486,9.616264,-0.492298,-3.322134,9.760509,5.993184,-5.470846,9.899956,-3.158621,-0.087734,-6.365649,9.208028,4.437169,-9.051955,4.686660,3.527801,9.092072,6.441264,5.703487,-7.178561,-8.955868,9.064601,0.363347,5.228322,7.290432,0.474921,5.221224,-1.432468,-8.737968,-0.421628,-7.483602,-8.516755,-9.767148,0.438067,-8.797303,-0.341261,3.266802,5.582274,1.830436,-5.026141,-6.565948,-0.446168,1.901914,-5.260313,5.810523,7.205866,-2.830434,9.614484,6.959006,0.568292,5.734393,-8.354574,5.740576,9.777047,-6.783980,8.906878,-5.329907,-8.303046,-4.385240,2.522148,9.333668,4.452999,-7.315045,-7.147419,9.855089,0.553438,-8.740543,9.682592,-7.123477,-3.300109,-0.416246,7.150988,1.509346,-1.425038,7.752085,-3.006214,6.146459,-8.926730,-6.809898,6.441487,-6.580695,-0.460930,3.545311,-6.597645,3.525387,-4.406103,-5.477856,-7.522119,-6.891754,8.936359,-1.989327,-6.771818,2.941808,9.489230,-8.194679,8.251930,-6.568176,5.307523,0.706914,7.602292,-1.132535,3.369942,4.573505,-0.088490,-4.938761,3.840597,0.395067,-9.416674,3.595514,3.961276,7.851358,-8.749619,-0.420979,2.153418,-1.461198,-9.374285,-5.706092,5.345869,8.583368,3.094030,-7.139446,-7.506203,8.518668,-3.225784,2.682469,-5.166517,4.398800,-7.791732,-9.525067,3.277411,-8.880778,3.089081,3.178549,-5.659208,-0.223853,1.573944,7.728848,9.904684,-1.406500,1.706384,8.559256,-2.627554,-9.900065,-4.770649,-4.291974,5.195510,-0.793392,-2.737010,-7.951807,-5.083568,-8.058435,6.787236,-4.648305,-3.443744,-7.604155,-5.690987,4.247470,-0.352194,9.689989,-3.499489,7.659530,-7.566471,-2.949656,2.567606,7.727109,-7.666505,0.507202,2.378437,-8.337245,0.036033,4.764428,-0.398727,-1.551664,0.807831,5.505346,-3.523458,8.911377,-6.819578,6.006760,-0.288011,-0.263203,-2.195862,-4.945782,7.230514,-5.341348,-6.985007,-7.344140,-3.313709,0.031884,-7.672911,-0.113019,5.622876,3.535541,3.406749,-9.288898,8.540708,-3.215437,-4.955739,-4.805268,5.720653,-8.568151,-1.875461,-7.061660,-1.968993,-0.735284,2.256395,7.095679,3.359465,-9.178517,6.327776,-2.387232,8.589917,-3.608876,-0.513815,9.624343,2.460101,5.251661,-2.162690,6.076610,4.223077,8.529297,-4.960424,-1.945268,6.655390,-7.738918,4.029551,-7.896642,-3.958285,-8.818685,1.083999,-5.949362,-3.192196,-7.774820,-6.042902,4.495193,-7.537236,-5.759781,9.834323,-0.562287,6.354304,6.463325,3.834482,-3.773059,-5.935432,-3.421651,-7.363732,6.218315,-0.647577,-0.466031,8.487336,7.951240,-6.027814,-0.257080,-5.132691,5.423673,4.633816,-4.499740,-7.802788,-8.090375,3.493186,-5.476769,-1.398030,-5.316281,5.165489,1.020004,-5.876507,-7.268607,-4.952300,-8.769578,4.776492,-7.702932,-8.585875,-4.511123,9.342149,-4.311139,0.895940,6.514553,-2.245022,5.263816,-0.244142,-9.781927,6.920671,9.216424,2.628369,-3.112176,6.316191,4.399192,8.173259,-2.416638,8.787618,4.832558,5.635351,-0.741581,2.008180,-4.050377,-0.408777,-9.257231,0.661098,9.576807,-4.440298,-6.644605,-9.325349,8.257915,7.672644,1.751265,-7.289531,2.955847,2.024681,6.558610,0.954339,-2.488258,-5.459660,0.960237,-5.268406,-0.680909,-0.629225,0.348801,4.479156,-0.446568,-0.370731,7.511015,9.546839,0.160830,-2.764284,5.089408,-5.782149,4.537845,-5.410031,-0.162969,3.117386,8.855409,8.076125,-5.306844,-3.721321,2.667074,-4.384839,2.381616,-1.832219,-5.754061,-2.777153,-6.583559,6.775795,8.184494,6.661203,9.434178,7.631824,-9.411749,0.953566,1.165186,-2.649589,-4.009871,5.615145,-0.236572,-0.950821,-5.412485,-7.829414,3.101330,-3.358856,8.156629,3.394146,-8.787401,-1.630469,6.299482,0.665742,4.933053,-5.380886,1.044109,6.343218,5.191604,-3.566857,-8.343910,-9.790921,6.937956,1.544205,-8.431962,5.286343,1.737219,-9.570588,7.797843,8.199924,5.767861,-2.084528,4.132389,-5.270834,-6.462992,-9.416045,0.993066,-4.182758,3.364163,6.087263,-6.094464,-5.244649,-9.077065,7.943050,-5.404028,-9.036001,-5.852057,-6.416556,3.333628,-9.241241,-0.576843,-9.695820,0.931280,-2.826249,-6.298443,2.178538,-4.029081,-1.966624,-7.589830,-5.388982,-4.834393,-4.949697,8.829976,-8.442979,5.518379,-7.647995,4.631041,8.931974,-8.810721,9.345034,1.352860,2.510651,-8.964946,9.855586,4.306015,-4.752015,-7.215332,-6.721408,2.251704,-7.553288,2.551679,-6.188865,-8.821127,-4.654743,2.598821,7.322294,-4.437885,-1.513547,7.864859,7.791247,0.988837,-8.384697,-6.423757,-3.876787,-9.249067,-0.729689,3.758684,-1.271934,-9.400403,-4.846078,0.713611,-0.193130,1.651904,-5.918188,-3.497979,7.979394,7.832036,-6.191475,5.336793,-6.997161,0.913975,2.032717,6.549754,-6.340190,-5.912502,-0.195429,4.005317,3.023593,3.796482,7.839264,4.397683,-1.863347,-2.934988,-6.772517,9.958193,8.597182,5.846748,7.694375,5.521802,-1.070467,4.881927,8.345827,-9.061641,7.814967,-9.138664,8.620880,4.840456,7.434858,-3.608462,1.686642,-7.243661,7.175439,-7.844949,-6.789598,-3.926279,3.266947,2.213078,-2.335435,-1.150320,-5.232544,-4.661236,-9.448062,8.292839,-0.930411,-7.250103,2.251438,-5.794443,-6.665326,3.672800,-7.046987,-3.532283,1.906223,-4.745857,0.640628,1.456605,-0.409914,1.171599,-3.032858,-8.181498,9.005346,-2.019888,1.008612,6.862752,2.379787,-6.229924,-5.396031,-8.243729,3.318110,-1.771544,3.663100,-3.603148,5.969029,-4.803919,-9.329360,-1.842792,3.102963,-3.366534,-4.134218,7.994302,-9.655778,2.257515,-0.148220,7.757114,9.419706,-3.010715,3.092799,-8.092191,-5.414146,-4.745786,6.977772,-6.153191,-9.095436,9.387118,-0.095757,-5.184112,-6.461318,-0.044359,8.580421,-9.555745,7.405836,5.661854,8.449639,4.768362,7.872478,-5.161147,8.567241,5.039837,0.809690,-8.587565,8.402220,6.992029,-6.765551,-7.348203,5.955488,-5.347850,3.371823,6.214412,5.127128,4.325682,7.029297,3.750014,-8.583941,-6.298160,7.119187,-2.752112,3.383859,7.423677,4.041347,-8.943686,-3.588090,9.736439,-4.876794,0.382522,3.591706,-0.624892,-0.108046,6.391740,1.146741,6.755651,-1.413746,6.025058,7.499973,-3.847658,8.152299,6.249231,2.708022,4.792911,2.780072,-7.899715,2.417017,9.520721,-0.672213,8.273055,-7.457296,6.687188,-7.093886,0.365435,4.780018,-6.633063,-4.313307,-4.921265,-2.180627,3.828024,-5.268874,-5.515565,7.836173,-4.966900,7.787619,2.709527,-8.360891,-9.703461,7.299351,-9.284166,3.126684,4.590403,-7.879664,-6.519967,-3.393084,-1.975685,5.362819,-1.537565,7.219705,-8.188439,-2.007148,-6.956934,-8.825109,9.621200,-4.784591,-9.845386,-8.212763,0.173871,-3.884267,2.714089,-2.785894,2.044224,8.382611,-1.045653,-4.021504,2.733197,-4.630211,3.917891,-0.629546,-8.352191,-3.282684,8.280530,4.704654,5.958658,-0.763490,-4.682323,2.601483,-8.372629,1.495708,5.147688,1.215970,9.129868,-1.074916,7.578304,0.247161,-6.208438,-3.913315,2.053201,-1.937551,1.241479,5.409736,2.809653,-7.717527,0.808097,-2.124484,0.236528,3.439401,6.417240,-1.305562,0.544719,2.786684,4.670008,1.365915,5.462191,-1.159607,-2.967969,-3.180882,-0.477348,8.212125,-2.249444,-4.985338,2.036218,-4.776091,0.521211,4.374004,4.295018,-9.525819,7.320821,7.254555,-8.910554,1.099286,1.771993,-5.112966,-0.917002,-1.632214,-6.718061,6.427388,-2.802529,-1.728168,-9.960739,-0.801552,-9.816798,-0.130408,-7.652376,-2.593281,7.698968,4.514273,3.543568,-6.904236,5.897811,5.160215,4.973457,-1.488821,-6.049553,-9.770313,-8.111033,-8.616711,7.596864,-1.235962,-9.041492,-8.727211,0.129930,8.403328,-1.064647,-4.323474,-4.885441,8.974783,-9.196565,6.976652,-2.626582,4.116822,7.941625,-4.522534,2.048280,-7.538463,2.939137,6.009386,8.973268,-8.158882,9.714441,6.930448,-7.162714,4.536953,-5.662525,4.851458,-9.137462,-3.887758,5.083865,1.242050,7.123158,-2.588246,-3.279803,8.046091,-8.202386,3.614540,3.913661,4.275897,4.572544,-7.921077,-8.721547,7.054011,1.655702,-4.764163,-6.218981,3.850101,3.952180,-3.580133,5.251182,0.386219,4.815267,4.911759,-9.071563,-8.175884,-1.076447,5.072871,4.239509,6.701815,-8.787476,3.751491,4.866735,2.679730,-6.666959,7.179969,0.830828,-9.111833,2.674476,1.129411,-5.560969,-6.538639,1.413623,3.780828,-1.715497,6.929533,-8.462986,7.507614,7.244943,4.641397,-7.384075,9.925863,2.854884,0.206778,-5.098963,-4.603561,-9.753392,8.237117,3.330999,-5.173593,6.258212,-8.460012,-2.333378,-7.704488,-3.149943,-3.638571,-8.187970,1.161185,1.722379,-3.521517,6.524784,-0.922323,2.864198,2.417681,4.500486,-9.075587,3.130014,-4.786613,-4.267952,8.307589,-7.911796,-1.701124,-4.075938,4.651206,-8.028156,5.568291,-6.904928,1.057803,9.097989,-3.053103,2.840958,3.145005,-7.329709,-3.136093,-0.965793,8.875173,2.463106,7.671639,4.454664,9.604322,4.352234,-3.535183,1.060919,1.328747,-0.654854,8.786030,1.787640,1.434481,-7.773414,-4.117015,0.788944,-9.105117,7.749180,-6.402356,-6.720585,-4.586204,-0.193312,0.516321,5.841816,-6.294316,8.441594,8.453451,4.105811,-7.895123,-9.021795,-1.872493,-5.601727,5.819106,3.295988,1.069472], dtype = "float32")#candidate|2264|(1365,)|const|float32
const_2265 = relay.const([6,3,5,9,-1,2,5,1,9,4,-3,-4,-8,-2,4,6,-7,-3,-7,4,1,9,1,1,3,10,6,1,-4,10,4,9,-3,4,7,9,7,1,-8,-9,-10,7,5,-10,2,-9,6,-10,2,-10,-1,8,6,7,4,3,5,9,-7,-10,-1,-7,-7,-7,-8,-2,7,-8,-1,-7,3,10,9,9,-10,-6,6,-7,10,-5], dtype = "uint32")#candidate|2265|(80,)|const|uint32
call_2261 = relay.TupleGetItem(func_1382_call(relay.reshape(var_2262.astype('float32'), [16, 4, 15]), relay.reshape(var_2263.astype('float64'), [220,]), relay.reshape(const_2264.astype('float32'), [1365,]), relay.reshape(const_2265.astype('uint32'), [80,]), ), 2)
call_2266 = relay.TupleGetItem(func_1388_call(relay.reshape(var_2262.astype('float32'), [16, 4, 15]), relay.reshape(var_2263.astype('float64'), [220,]), relay.reshape(const_2264.astype('float32'), [1365,]), relay.reshape(const_2265.astype('uint32'), [80,]), ), 2)
func_521_call = mod.get_global_var('func_521')
func_524_call = mutated_mod.get_global_var('func_524')
var_2270 = relay.var("var_2270", dtype = "bool", shape = (45, 2))#candidate|2270|(45, 2)|var|bool
call_2269 = relay.TupleGetItem(func_521_call(relay.reshape(var_2270.astype('bool'), [5, 6, 3]), relay.reshape(var_2270.astype('bool'), [5, 6, 3]), ), 1)
call_2271 = relay.TupleGetItem(func_524_call(relay.reshape(var_2270.astype('bool'), [5, 6, 3]), relay.reshape(var_2270.astype('bool'), [5, 6, 3]), ), 1)
output = relay.Tuple([bop_2258,call_2261,var_2262,var_2263,const_2264,const_2265,call_2269,var_2270,])
output2 = relay.Tuple([bop_2258,call_2266,var_2262,var_2263,const_2264,const_2265,call_2271,var_2270,])
func_2272 = relay.Function([var_2245,var_2262,var_2263,var_2270,], output)
mod['func_2272'] = func_2272
mod = relay.transform.InferType()(mod)
mutated_mod['func_2272'] = func_2272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2272_call = mutated_mod.get_global_var('func_2272')
var_2274 = relay.var("var_2274", dtype = "float64", shape = (4, 9, 2))#candidate|2274|(4, 9, 2)|var|float64
var_2275 = relay.var("var_2275", dtype = "float32", shape = (960,))#candidate|2275|(960,)|var|float32
var_2276 = relay.var("var_2276", dtype = "float64", shape = (110, 2))#candidate|2276|(110, 2)|var|float64
var_2277 = relay.var("var_2277", dtype = "bool", shape = (45, 2))#candidate|2277|(45, 2)|var|bool
call_2273 = func_2272_call(var_2274,var_2275,var_2276,var_2277,)
output = call_2273
func_2278 = relay.Function([var_2274,var_2275,var_2276,var_2277,], output)
mutated_mod['func_2278'] = func_2278
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2310 = relay.var("var_2310", dtype = "float32", shape = (4, 14, 2))#candidate|2310|(4, 14, 2)|var|float32
uop_2311 = relay.asinh(var_2310.astype('float32')) # shape=(4, 14, 2)
func_521_call = mod.get_global_var('func_521')
func_524_call = mutated_mod.get_global_var('func_524')
const_2314 = relay.const([False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False], dtype = "bool")#candidate|2314|(90,)|const|bool
call_2313 = relay.TupleGetItem(func_521_call(relay.reshape(const_2314.astype('bool'), [5, 6, 3]), relay.reshape(const_2314.astype('bool'), [5, 6, 3]), ), 0)
call_2315 = relay.TupleGetItem(func_524_call(relay.reshape(const_2314.astype('bool'), [5, 6, 3]), relay.reshape(const_2314.astype('bool'), [5, 6, 3]), ), 0)
func_993_call = mod.get_global_var('func_993')
func_997_call = mutated_mod.get_global_var('func_997')
var_2323 = relay.var("var_2323", dtype = "uint16", shape = ())#candidate|2323|()|var|uint16
var_2324 = relay.var("var_2324", dtype = "uint16", shape = (12, 156))#candidate|2324|(12, 156)|var|uint16
call_2322 = func_993_call(relay.reshape(var_2323.astype('uint16'), []), relay.reshape(var_2324.astype('uint16'), [12, 13, 12]), )
call_2325 = func_993_call(relay.reshape(var_2323.astype('uint16'), []), relay.reshape(var_2324.astype('uint16'), [12, 13, 12]), )
output = relay.Tuple([uop_2311,call_2313,const_2314,call_2322,var_2323,var_2324,])
output2 = relay.Tuple([uop_2311,call_2315,const_2314,call_2325,var_2323,var_2324,])
func_2328 = relay.Function([var_2310,var_2323,var_2324,], output)
mod['func_2328'] = func_2328
mod = relay.transform.InferType()(mod)
var_2329 = relay.var("var_2329", dtype = "float32", shape = (4, 14, 2))#candidate|2329|(4, 14, 2)|var|float32
var_2330 = relay.var("var_2330", dtype = "uint16", shape = ())#candidate|2330|()|var|uint16
var_2331 = relay.var("var_2331", dtype = "uint16", shape = (12, 156))#candidate|2331|(12, 156)|var|uint16
output = func_2328(var_2329,var_2330,var_2331,)
func_2332 = relay.Function([var_2329,var_2330,var_2331,], output)
mutated_mod['func_2332'] = func_2332
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2810 = relay.var("var_2810", dtype = "int64", shape = (13, 8, 14))#candidate|2810|(13, 8, 14)|var|int64
var_2811 = relay.var("var_2811", dtype = "int64", shape = (13, 8, 14))#candidate|2811|(13, 8, 14)|var|int64
bop_2812 = relay.bitwise_or(var_2810.astype('int64'), relay.reshape(var_2811.astype('int64'), relay.shape_of(var_2810))) # shape=(13, 8, 14)
uop_2817 = relay.tan(bop_2812.astype('float64')) # shape=(13, 8, 14)
output = relay.Tuple([uop_2817,])
output2 = relay.Tuple([uop_2817,])
func_2819 = relay.Function([var_2810,var_2811,], output)
mod['func_2819'] = func_2819
mod = relay.transform.InferType()(mod)
mutated_mod['func_2819'] = func_2819
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2819_call = mutated_mod.get_global_var('func_2819')
var_2821 = relay.var("var_2821", dtype = "int64", shape = (13, 8, 14))#candidate|2821|(13, 8, 14)|var|int64
var_2822 = relay.var("var_2822", dtype = "int64", shape = (13, 8, 14))#candidate|2822|(13, 8, 14)|var|int64
call_2820 = func_2819_call(var_2821,var_2822,)
output = call_2820
func_2823 = relay.Function([var_2821,var_2822,], output)
mutated_mod['func_2823'] = func_2823
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2946 = relay.var("var_2946", dtype = "float64", shape = (10, 1, 5))#candidate|2946|(10, 1, 5)|var|float64
const_2947 = relay.const([[[-8.734608,-9.939367,3.658864,-4.816498,-3.945696],[4.363643,-4.090461,5.749023,-5.404488,-7.332250],[2.491310,9.605377,-8.273338,-5.279631,5.293209],[1.678991,-7.469324,5.052341,-9.179436,4.448005],[-3.471247,6.197618,5.983552,-3.400948,-0.310218],[-6.389028,-2.028218,9.154843,5.592460,4.193573],[0.442064,-7.239854,-2.455992,9.062209,7.377149],[-9.540965,1.984128,0.922516,-1.547715,-5.192696],[-5.170313,-1.924857,-3.885701,3.363302,-6.496135],[-6.631147,9.481313,2.116019,-3.180227,-2.761911],[3.924995,5.524954,9.288594,0.614858,-8.371417],[-0.571660,-6.455690,2.140326,-9.370715,9.925573]],[[-6.182982,-1.253550,-3.680609,1.521303,-4.326175],[8.586836,-1.004141,-2.309195,2.716422,4.915620],[1.759731,-0.781320,7.226510,7.060692,-1.587625],[-0.481860,-5.416435,9.997119,-8.709713,-9.747766],[-5.865212,9.280233,-0.773793,-5.452973,9.636443],[-1.821603,-5.907660,4.188041,-5.482897,8.389137],[6.840589,5.614243,5.100634,-1.622424,-3.261643],[-8.304225,-3.469164,5.224723,-0.994921,-1.154354],[-8.791671,-9.225929,8.382074,-3.530917,-6.659676],[0.797975,3.480004,-0.377989,2.680338,-8.734262],[7.730850,-7.585970,-7.349904,-7.192340,-0.983971],[3.712039,6.045835,6.691197,0.102699,4.693304]],[[4.926560,6.948642,7.767732,5.296684,-7.057970],[-9.133657,1.485083,-3.637987,1.216931,-7.662680],[0.667963,-1.081272,0.941660,-5.130678,2.678352],[0.197892,-5.086384,4.721390,-3.752367,-1.403930],[-7.995445,-2.502690,9.577656,-1.876263,2.266648],[-3.947185,-2.246712,-6.719393,-0.892181,-4.253202],[-0.703048,5.074724,-8.502232,-9.484400,5.828542],[4.977555,-4.385516,0.594267,-2.717775,-5.264926],[-2.973594,1.320676,9.605257,4.679423,-3.396666],[9.263880,8.074232,5.649753,9.634771,-6.131309],[-3.627523,-1.188143,4.276746,-7.560127,1.900215],[8.467670,-9.569340,-8.921675,-6.632692,9.243079]],[[2.739481,7.917062,6.499497,-4.968151,5.664471],[-9.663878,1.164842,-5.912202,-4.377867,-9.415143],[3.370783,-5.014828,-6.954397,8.008413,-3.978726],[8.603406,2.984747,-7.582352,5.574835,9.312817],[9.286494,-6.838973,-2.856584,2.733831,-6.382463],[6.413088,9.455391,7.337831,-2.720634,2.927301],[7.920902,4.873737,6.446735,-3.526441,-1.362657],[5.849960,4.549920,-0.867573,-6.129380,-9.334585],[-4.282387,-9.064697,5.005112,1.505202,-9.931156],[-3.568641,-0.491797,-8.571329,2.093290,-2.696976],[-3.838320,6.275627,-9.023757,-6.817566,5.844062],[7.748467,-4.195135,-0.311898,4.980071,0.748386]],[[-5.977550,7.008616,1.055923,-8.280168,-9.402963],[0.427679,9.379148,-5.229476,-2.416108,-4.701577],[-4.776272,4.943634,-3.181628,-4.322015,-3.912027],[7.425898,-3.433581,4.041936,2.623626,-0.946768],[-4.477461,-9.161290,5.511581,4.455313,9.142532],[9.810102,6.952630,-5.810097,-8.772737,3.503609],[1.070822,3.264298,-3.412710,8.379150,3.374989],[8.793416,8.121293,3.107581,3.323275,3.341608],[-2.942506,-7.814934,3.201796,5.350383,5.216623],[-2.763579,-3.316799,-3.336754,-0.038219,-4.516838],[-8.583847,-5.602603,7.201455,-2.773588,-3.679180],[-5.758920,-7.470709,6.652584,0.253043,-8.495271]],[[6.983578,3.249658,-4.353462,-9.727137,-3.845128],[-9.944467,3.147876,-3.022621,-5.373187,2.084885],[-6.308438,-1.094287,-9.049621,5.213528,-7.788457],[-0.288890,-7.856974,8.515184,-8.443068,-6.630425],[-9.695314,1.200368,9.268497,5.950300,-6.156821],[-7.968859,-7.665354,0.719787,-9.209798,-2.791550],[-6.915574,3.217771,2.842785,-5.834656,-5.290339],[-3.417122,7.836957,-9.016352,4.810960,3.194458],[-4.353806,0.334009,-8.161348,6.443655,3.816503],[4.508457,9.229183,-0.617568,-0.843017,-4.848298],[7.157865,5.680366,-3.150896,6.678578,2.692776],[9.509019,6.093110,-8.381204,8.647999,-4.977675]],[[-2.328144,9.245640,-8.281565,-7.863894,-3.205450],[-6.005316,0.250267,-5.540887,7.374871,3.343345],[-3.405424,8.602871,6.205838,8.396414,0.459367],[2.557622,-8.079185,4.698233,7.427605,5.388383],[-6.869434,6.169327,5.132423,9.361861,-2.035621],[-3.734650,7.991378,-9.027400,3.664592,-6.692209],[5.799819,-4.214315,-2.727154,1.176157,0.282706],[9.593304,-2.567244,5.677894,-1.884449,-6.871307],[-4.605419,-3.025940,-1.267014,-0.015956,-5.370671],[3.249795,8.364156,8.119195,6.874707,8.407458],[5.438054,5.782687,4.949458,-3.180858,2.823818],[-2.200232,7.727913,-5.540528,3.787297,4.975379]],[[3.469461,-5.495264,9.837089,-3.830672,-2.477852],[2.549947,-3.190525,8.032934,-3.660634,1.154255],[-5.374811,0.475453,-6.890875,-4.666765,-2.476989],[-9.140730,-7.255821,-3.127762,-1.511494,-7.300664],[-5.872609,6.641171,-0.745932,7.072567,-5.126524],[6.191491,-6.118441,-7.057783,-9.761179,6.444840],[-5.911779,-6.831569,-9.570552,-4.650178,7.795519],[0.663452,9.707242,-1.691873,4.953649,-1.513127],[-0.722011,-6.457875,-2.044759,-7.392455,9.594121],[3.771861,9.584000,-2.032613,6.700816,-7.095316],[-9.019404,-7.468669,-4.851940,7.428604,-0.926967],[8.916138,8.415134,-2.632710,-5.086302,-4.478713]],[[-3.583809,-5.416236,2.871577,4.267793,1.531197],[9.356291,1.699788,1.387244,-7.882545,1.137055],[-2.853493,-2.590310,-4.023896,7.857900,4.310822],[6.648855,-0.867826,9.325677,-1.957011,-5.808211],[-1.826804,6.792831,8.963994,-6.589782,-9.270538],[7.603957,-8.141384,-4.612927,-4.104625,-3.216813],[-1.515541,0.669397,3.445748,-9.170142,3.967378],[6.893970,5.553734,6.625019,-6.848758,-6.845728],[7.953511,6.763300,2.728869,-7.003164,-7.324068],[6.499402,-4.530819,0.516255,9.348232,-7.423902],[-1.948579,1.198203,-6.911360,-5.362356,-3.010294],[8.144656,-9.509741,8.495346,0.318952,6.361053]],[[-2.137642,-4.751937,4.323418,-2.513080,9.230380],[5.223881,2.957827,0.454971,7.094187,-3.150089],[1.206189,3.076713,-7.489584,4.305459,0.232698],[6.523224,-2.072263,-8.980986,4.678319,-7.639571],[1.104930,-9.109907,-1.657866,0.199209,-7.210561],[1.388090,1.520570,8.567720,-4.920237,4.553759],[-2.706643,7.005550,-6.695123,-3.943708,7.445308],[7.658374,0.489022,1.273477,0.968243,1.868502],[-9.394121,1.026815,-9.764220,4.623205,-8.657726],[-9.544631,-9.996365,9.929970,5.730616,-5.088334],[-7.876687,-9.952230,-9.028330,-0.336224,-2.448045],[6.055175,-5.939534,-5.519965,3.530823,2.381863]]], dtype = "float64")#candidate|2947|(10, 12, 5)|const|float64
bop_2948 = relay.floor_mod(var_2946.astype('float64'), const_2947.astype('float64')) # shape=(10, 12, 5)
output = bop_2948
output2 = bop_2948
func_2957 = relay.Function([var_2946,], output)
mod['func_2957'] = func_2957
mod = relay.transform.InferType()(mod)
mutated_mod['func_2957'] = func_2957
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2958 = relay.var("var_2958", dtype = "float64", shape = (10, 1, 5))#candidate|2958|(10, 1, 5)|var|float64
func_2957_call = mutated_mod.get_global_var('func_2957')
call_2959 = func_2957_call(var_2958)
output = call_2959
func_2960 = relay.Function([var_2958], output)
mutated_mod['func_2960'] = func_2960
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3160 = relay.var("var_3160", dtype = "bool", shape = ())#candidate|3160|()|var|bool
var_3161 = relay.var("var_3161", dtype = "bool", shape = (11, 13, 11))#candidate|3161|(11, 13, 11)|var|bool
bop_3162 = relay.logical_or(var_3160.astype('bool'), var_3161.astype('bool')) # shape=(11, 13, 11)
func_1867_call = mod.get_global_var('func_1867')
func_1875_call = mutated_mod.get_global_var('func_1875')
var_3166 = relay.var("var_3166", dtype = "int8", shape = (312,))#candidate|3166|(312,)|var|int8
const_3167 = relay.const([True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True], dtype = "bool")#candidate|3167|(90,)|const|bool
var_3168 = relay.var("var_3168", dtype = "float32", shape = (1365,))#candidate|3168|(1365,)|var|float32
call_3165 = relay.TupleGetItem(func_1867_call(relay.reshape(var_3166.astype('int8'), [8, 3, 13]), relay.reshape(var_3166.astype('int8'), [8, 3, 13]), relay.reshape(var_3166.astype('int8'), [8, 3, 13]), relay.reshape(var_3160.astype('uint16'), []), relay.reshape(const_3167.astype('bool'), [15, 6]), relay.reshape(var_3168.astype('float32'), [1, 1365]), ), 3)
call_3169 = relay.TupleGetItem(func_1875_call(relay.reshape(var_3166.astype('int8'), [8, 3, 13]), relay.reshape(var_3166.astype('int8'), [8, 3, 13]), relay.reshape(var_3166.astype('int8'), [8, 3, 13]), relay.reshape(var_3160.astype('uint16'), []), relay.reshape(const_3167.astype('bool'), [15, 6]), relay.reshape(var_3168.astype('float32'), [1, 1365]), ), 3)
output = relay.Tuple([bop_3162,call_3165,var_3166,const_3167,var_3168,])
output2 = relay.Tuple([bop_3162,call_3169,var_3166,const_3167,var_3168,])
func_3172 = relay.Function([var_3160,var_3161,var_3166,var_3168,], output)
mod['func_3172'] = func_3172
mod = relay.transform.InferType()(mod)
mutated_mod['func_3172'] = func_3172
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3172_call = mutated_mod.get_global_var('func_3172')
var_3174 = relay.var("var_3174", dtype = "bool", shape = ())#candidate|3174|()|var|bool
var_3175 = relay.var("var_3175", dtype = "bool", shape = (11, 13, 11))#candidate|3175|(11, 13, 11)|var|bool
var_3176 = relay.var("var_3176", dtype = "int8", shape = (312,))#candidate|3176|(312,)|var|int8
var_3177 = relay.var("var_3177", dtype = "float32", shape = (1365,))#candidate|3177|(1365,)|var|float32
call_3173 = func_3172_call(var_3174,var_3175,var_3176,var_3177,)
output = call_3173
func_3178 = relay.Function([var_3174,var_3175,var_3176,var_3177,], output)
mutated_mod['func_3178'] = func_3178
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3218 = relay.var("var_3218", dtype = "float32", shape = (8, 9, 16))#candidate|3218|(8, 9, 16)|var|float32
uop_3219 = relay.sigmoid(var_3218.astype('float32')) # shape=(8, 9, 16)
func_2819_call = mod.get_global_var('func_2819')
func_2823_call = mutated_mod.get_global_var('func_2823')
var_3222 = relay.var("var_3222", dtype = "int64", shape = (728, 2))#candidate|3222|(728, 2)|var|int64
call_3221 = relay.TupleGetItem(func_2819_call(relay.reshape(var_3222.astype('int64'), [13, 8, 14]), relay.reshape(var_3222.astype('int64'), [13, 8, 14]), ), 0)
call_3223 = relay.TupleGetItem(func_2823_call(relay.reshape(var_3222.astype('int64'), [13, 8, 14]), relay.reshape(var_3222.astype('int64'), [13, 8, 14]), ), 0)
output = relay.Tuple([uop_3219,call_3221,var_3222,])
output2 = relay.Tuple([uop_3219,call_3223,var_3222,])
func_3224 = relay.Function([var_3218,var_3222,], output)
mod['func_3224'] = func_3224
mod = relay.transform.InferType()(mod)
var_3225 = relay.var("var_3225", dtype = "float32", shape = (8, 9, 16))#candidate|3225|(8, 9, 16)|var|float32
var_3226 = relay.var("var_3226", dtype = "int64", shape = (728, 2))#candidate|3226|(728, 2)|var|int64
output = func_3224(var_3225,var_3226,)
func_3227 = relay.Function([var_3225,var_3226,], output)
mutated_mod['func_3227'] = func_3227
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3243 = relay.var("var_3243", dtype = "uint64", shape = ())#candidate|3243|()|var|uint64
var_3244 = relay.var("var_3244", dtype = "uint64", shape = (4, 1))#candidate|3244|(4, 1)|var|uint64
bop_3245 = relay.logical_xor(var_3243.astype('uint64'), var_3244.astype('uint64')) # shape=(4, 1)
func_2272_call = mod.get_global_var('func_2272')
func_2278_call = mutated_mod.get_global_var('func_2278')
const_3249 = relay.const([[1.558683,-2.045721],[6.152233,-9.494690],[1.513273,-3.225723],[-4.670525,0.992410],[-7.058849,-1.754869],[-8.248413,-2.865097],[-6.435634,7.713679],[3.626807,-2.831705],[-4.417375,-6.791148],[-5.060611,0.186721],[-5.018108,2.340208],[-4.075036,-1.150499],[8.403903,-7.446313],[0.556109,-9.519625],[-5.404798,-8.524252],[-6.288631,9.427078],[-6.051853,-7.100445],[-0.780194,-5.343333],[5.058310,6.756506],[-9.501857,9.261782],[-4.528569,3.181700],[-0.489749,-1.763262],[2.515609,-1.528245],[5.832277,2.453093],[-9.267558,-4.296112],[9.248853,8.628343],[9.076507,-7.547948],[-6.854292,2.963272],[5.261444,3.487452],[-7.122811,5.459193],[-1.289162,-1.438944],[1.307002,5.172949],[9.957924,-1.526171],[-2.760027,-7.596570],[4.855595,-1.421882],[-0.805442,-4.002442]], dtype = "float64")#candidate|3249|(36, 2)|const|float64
var_3250 = relay.var("var_3250", dtype = "float32", shape = (960,))#candidate|3250|(960,)|var|float32
const_3251 = relay.const([2.592411,4.932851,5.128635,-6.500724,3.153568,9.803601,-6.137298,0.961460,1.763725,-6.361283,9.397631,1.290969,-8.764287,3.151031,7.656354,0.200133,-2.837503,1.648249,-5.860505,-6.089417,8.225020,9.365811,1.447908,0.592457,-9.272982,-8.734840,-1.795319,-6.643176,2.692544,0.053397,-1.833084,4.472591,4.475187,-9.173925,-5.863225,7.822548,-5.080532,2.036672,1.488885,-0.267057,-0.319078,-7.452564,1.504966,3.973732,-1.046331,3.348078,-1.771910,8.190308,-6.899491,4.988645,-5.698694,-7.153222,3.012548,2.669523,-2.125688,8.090426,-6.529129,5.902970,-6.122146,-6.574955,0.564363,5.712699,-8.679983,-1.283398,-7.895778,6.778412,-2.965781,3.409570,-9.432587,3.263113,5.237065,1.902960,-2.791283,9.188595,-8.602031,1.402170,0.602261,4.505919,9.935679,-6.911785,6.580929,-3.300812,5.964886,1.639083,-9.217608,-9.283582,0.488597,-1.888037,5.413095,-2.030696,5.046761,9.641541,-9.928123,8.253827,-7.566353,7.434571,9.896762,-4.064557,-7.917109,-9.012554,-7.292814,-0.495279,0.070183,0.446594,-8.910351,-4.935536,2.137570,-4.008521,-3.532767,9.223819,-2.281533,-3.986374,-6.539371,-8.835326,-4.615818,-8.115539,-9.605756,5.719016,0.102921,-6.326933,-4.700843,5.124837,-4.617323,-3.427337,6.414655,-2.910207,-3.767255,-4.768778,0.201973,4.493657,8.943895,-3.351706,-5.682420,5.049161,-4.608954,9.629370,-6.365955,-6.193797,9.058988,4.960018,-9.447385,-5.382739,-6.360751,8.934036,2.987369,-0.747347,-8.130393,-5.459370,-4.575728,-3.942906,9.955892,6.881140,8.808587,0.378349,-0.687579,9.401227,-8.677553,-9.506228,-3.411406,-0.696323,-2.113583,0.955817,0.605669,-2.675336,0.422677,-0.194722,-3.905430,0.779271,8.904100,-8.410434,5.619347,-0.166912,7.519331,6.723569,-1.217038,-2.540555,-8.766314,-6.877837,6.652117,1.767159,3.347407,-1.415494,1.976926,5.605434,-8.775440,8.468738,-5.070468,2.207737,-6.441954,4.230366,-3.489720,1.500025,4.295979,-7.116051,-5.132685,-0.838350,6.418500,-3.915880,-7.054715,1.794022,1.835296,-0.472412,-7.327814,-0.995755,-2.941915,0.045463,8.852664,6.482069,-6.247956,4.798899,5.804804,7.882879,-1.186398,-3.178029,3.397357,9.160035,-9.215738,-4.079747,6.300744,8.119153], dtype = "float64")#candidate|3251|(220,)|const|float64
const_3252 = relay.const([False,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True], dtype = "bool")#candidate|3252|(90,)|const|bool
call_3248 = relay.TupleGetItem(func_2272_call(relay.reshape(const_3249.astype('float64'), [4, 9, 2]), relay.reshape(var_3250.astype('float32'), [960,]), relay.reshape(const_3251.astype('float64'), [110, 2]), relay.reshape(const_3252.astype('bool'), [45, 2]), ), 2)
call_3253 = relay.TupleGetItem(func_2278_call(relay.reshape(const_3249.astype('float64'), [4, 9, 2]), relay.reshape(var_3250.astype('float32'), [960,]), relay.reshape(const_3251.astype('float64'), [110, 2]), relay.reshape(const_3252.astype('bool'), [45, 2]), ), 2)
output = relay.Tuple([bop_3245,call_3248,const_3249,var_3250,const_3251,const_3252,])
output2 = relay.Tuple([bop_3245,call_3253,const_3249,var_3250,const_3251,const_3252,])
func_3258 = relay.Function([var_3243,var_3244,var_3250,], output)
mod['func_3258'] = func_3258
mod = relay.transform.InferType()(mod)
var_3259 = relay.var("var_3259", dtype = "uint64", shape = ())#candidate|3259|()|var|uint64
var_3260 = relay.var("var_3260", dtype = "uint64", shape = (4, 1))#candidate|3260|(4, 1)|var|uint64
var_3261 = relay.var("var_3261", dtype = "float32", shape = (960,))#candidate|3261|(960,)|var|float32
output = func_3258(var_3259,var_3260,var_3261,)
func_3262 = relay.Function([var_3259,var_3260,var_3261,], output)
mutated_mod['func_3262'] = func_3262
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3329 = relay.const([[[4,3,9,1,3],[7,-9,5,3,1],[-10,-8,-1,-9,7],[-8,6,-2,-9,4],[7,6,-6,-8,-6],[6,5,-10,-6,-9],[10,5,-1,4,-2],[-2,8,4,2,2],[-10,5,-4,-4,-3],[-5,-10,-1,-7,-1],[-1,-7,2,4,-1],[1,7,-9,-2,-3],[-3,9,1,6,-5],[9,1,-7,-7,-6]],[[-7,10,-4,5,1],[2,10,-9,9,1],[2,10,-5,-6,-7],[-1,-3,8,-1,5],[3,-7,-7,4,-10],[2,4,-7,10,-1],[8,-3,6,-10,6],[-8,3,4,10,9],[-4,5,-6,8,6],[5,5,8,-1,8],[-4,-10,2,10,-3],[-5,2,6,-2,4],[-8,-3,6,4,-10],[5,-9,-4,9,2]],[[-2,1,-6,-2,3],[-6,4,6,1,-5],[2,-6,5,9,-1],[-5,7,7,-5,10],[6,1,-5,9,-6],[-8,6,-9,-1,4],[9,-7,7,2,4],[2,-9,-9,9,-2],[-2,-5,-4,9,5],[9,7,2,1,-8],[7,-4,-2,-3,-1],[-7,-7,1,-9,7],[6,-9,2,-6,7],[-8,3,-3,7,7]],[[-2,10,9,9,2],[3,3,-10,3,-10],[2,-5,1,2,-3],[-5,3,4,-7,-3],[10,8,10,-8,7],[-5,5,-6,7,4],[4,7,-5,1,-4],[4,10,5,1,3],[1,-9,-8,-3,-10],[7,8,-1,-4,6],[5,-10,-3,5,8],[4,-7,-4,-7,-10],[-5,10,2,6,-6],[-4,4,7,8,-1]]], dtype = "int64")#candidate|3329|(4, 14, 5)|const|int64
const_3330 = relay.const([[[-6,8,1,-3,-4],[2,-2,-4,4,1],[-4,-2,-10,5,-1],[-5,-7,5,7,-6],[-1,-3,-7,-9,6],[8,-2,8,1,3],[-4,1,1,1,5],[9,10,-10,-8,-6],[6,6,-4,10,-8],[7,1,-5,-3,-2],[-6,6,-4,-2,5],[9,-2,1,-9,-3],[-2,-9,10,7,4],[4,2,-7,8,9]],[[5,-7,4,7,7],[-2,-2,-3,-7,-6],[2,1,3,8,-7],[-7,6,-1,1,4],[8,8,7,2,6],[6,-9,-9,5,4],[-4,-6,4,-1,-5],[-3,-10,-5,-6,2],[-5,7,-5,4,6],[4,8,2,-7,-7],[7,7,4,-6,-9],[2,5,7,8,10],[1,5,3,-1,2],[3,9,7,-6,-6]],[[1,10,-9,-8,8],[2,3,9,7,-6],[-10,-8,-1,-4,10],[-3,-8,-9,-9,6],[4,-9,7,2,-7],[-5,-7,8,10,6],[-4,10,-1,-10,7],[-8,-4,-9,4,-7],[10,-2,4,7,-3],[-3,2,-8,-4,3],[-4,4,7,-1,5],[-4,1,-1,5,1],[1,-5,-7,5,-3],[5,-7,-7,2,-7]],[[-9,9,-8,-7,8],[-3,1,-1,-10,2],[-5,1,7,8,8],[-4,8,-7,6,1],[1,3,1,2,2],[-5,4,9,-5,-1],[-4,-8,-2,1,10],[-2,-6,-4,-10,-8],[-4,-7,10,10,-3],[-10,7,9,4,5],[-4,4,-1,6,-7],[-4,-7,9,-7,7],[-9,-4,5,-6,-5],[-1,-8,-8,-5,2]]], dtype = "int64")#candidate|3330|(4, 14, 5)|const|int64
bop_3331 = relay.left_shift(const_3329.astype('int64'), relay.reshape(const_3330.astype('int64'), relay.shape_of(const_3329))) # shape=(4, 14, 5)
func_1867_call = mod.get_global_var('func_1867')
func_1875_call = mutated_mod.get_global_var('func_1875')
var_3349 = relay.var("var_3349", dtype = "int8", shape = (312,))#candidate|3349|(312,)|var|int8
const_3350 = relay.const(4, dtype = "uint16")#candidate|3350|()|const|uint16
const_3351 = relay.const([True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False], dtype = "bool")#candidate|3351|(90,)|const|bool
const_3352 = relay.const([7.510316,5.674958,3.942899,1.139302,4.565452,-1.402045,-5.374879,7.252300,-1.403848,-4.512533,-3.406233,-2.850745,-9.326805,2.970310,-9.221669,-4.213830,3.259200,-7.113549,-4.625272,7.435651,7.595027,-7.173638,4.624124,-5.558238,0.100771,2.860012,5.790675,-1.339382,7.838237,5.240573,8.066378,4.867204,9.550366,4.119368,4.488097,7.555530,-2.758516,-8.554401,-9.489061,3.747904,1.436945,0.802399,-3.215002,4.019298,9.752277,8.803546,-6.193355,7.408992,1.943640,-2.689731,4.552814,5.922636,8.259180,-1.134980,-8.623500,-6.936293,-3.033220,-1.761967,0.143360,-0.312769,9.299536,8.248638,-4.321661,5.325036,9.072573,-4.855316,-8.798858,-8.111916,-3.110579,4.239521,7.267543,-7.606895,2.909477,-4.654563,-5.526279,-8.935653,8.666320,-9.134467,-9.698586,0.885168,9.009225,9.488140,6.039703,7.630514,-0.519059,0.246523,-4.465468,1.968872,-0.878577,4.582706,-0.975705,-5.152839,4.369369,8.107252,8.286290,-4.884274,-4.880497,-7.083427,4.390009,9.278250,-2.773573,7.450445,2.434651,-0.675835,3.908799,-7.974910,3.655516,4.919197,6.777712,3.279191,2.480920,6.644710,1.004548,6.257433,-8.084467,-6.164294,0.496819,5.070566,-5.939129,1.037214,5.131445,1.549983,-4.266211,-6.495218,5.991020,-2.667712,4.108115,-4.791020,8.213970,8.101928,3.579321,-8.249239,-7.408082,9.388603,-8.964152,-7.845199,-3.739497,-2.522448,-0.806519,6.784571,-4.159557,-5.561843,1.720008,-3.227035,-5.493753,-1.750294,1.946976,1.849644,2.983114,-5.048537,2.148059,2.144852,-7.226308,-4.269687,-5.494191,-2.208659,-4.548759,-8.437175,-5.274127,-2.870567,7.270894,-8.680654,-6.433814,-1.734392,-5.617133,1.224480,9.093531,1.313928,-7.936472,-2.911152,6.512149,-7.211783,1.166633,-6.830474,5.832370,-4.822306,2.871787,-3.410221,-8.130578,4.292454,7.746202,-7.095358,-7.813120,0.314649,-1.959164,6.094311,-8.680844,3.750610,7.695080,4.591860,-9.888089,4.030154,-0.219761,5.066361,-3.478787,8.739740,4.888414,-0.510330,-4.622180,5.036494,2.867312,-9.919815,-0.439094,4.982530,5.402326,-5.441781,-6.627050,-8.496019,9.099953,-5.543926,-2.166150,-3.800506,0.152838,8.825494,-4.957554,-9.028150,-7.855890,8.060077,-4.856120,-1.133873,-6.994995,-6.315814,-7.862471,4.455822,-9.193816,0.744054,-1.363724,6.578197,-4.316221,5.699695,9.614608,-2.269403,-0.592065,-4.686294,-8.651677,1.760288,3.753391,9.349795,-8.281378,-7.301692,-7.193517,0.315723,0.853597,5.750060,-1.640052,-6.253109,-3.218828,4.791204,-5.622750,-6.296848,-2.258974,0.449576,6.315555,9.692785,-6.207871,-1.062794,0.188431,1.290129,-7.530633,-6.960356,2.585958,-8.853990,8.123619,-6.201587,6.771198,-3.925346,-3.104390,-7.285196,-8.668261,1.409772,0.175495,-2.541091,-6.556054,8.634629,-1.597933,3.236206,-3.629166,0.440733,9.254072,7.983297,-8.448688,-8.531407,-7.743879,-8.737679,-2.316589,0.925422,-0.420147,-3.356953,9.604249,2.953840,1.946389,8.480259,6.003396,7.631941,-6.951492,4.190135,-2.279686,-1.629981,-5.542651,4.150096,-1.055366,-3.157962,-8.565384,9.402943,-0.088872,2.039730,3.341716,7.999673,-3.272425,8.047240,-2.216199,9.703830,-4.574718,9.922288,4.694441,5.030435,7.149693,-9.809825,-4.422461,7.458033,-4.903673,-9.712840,1.141005,-6.974590,-2.724081,-8.672073,1.595728,0.689672,0.814118,-3.075760,-3.300432,6.223898,-6.827953,8.446119,6.153809,7.520483,-5.656915,-9.569358,-5.885196,2.471901,-1.610378,5.703430,9.695004,-8.826016,9.216538,4.677779,-0.981013,4.307523,-1.155831,-8.510212,0.294189,-5.030015,1.156215,4.538553,9.711898,4.371532,-6.569627,8.099338,5.681256,4.802797,1.472334,-1.576562,3.487383,-9.109208,0.731984,7.872110,-6.895010,-6.280574,-3.620284,9.611095,-6.469092,-5.052236,3.160036,-3.225142,1.051106,3.496319,3.289068,-0.165651,0.769000,-4.381804,9.504319,2.748248,9.061895,-2.616709,3.312099,-0.595155,-0.244640,8.943375,-6.139853,-3.940935,2.888073,-2.369024,-1.983031,5.402265,3.668715,-0.824837,7.866122,6.548169,7.553425,3.999848,4.212474,-4.036723,-5.738654,-8.315722,0.747595,-7.391013,-7.271449,1.461038,4.400499,7.813368,6.521290,-2.683073,8.658339,9.665175,7.503737,-0.631847,-9.873358,-3.870300,-0.303984,-3.368003,5.711450,-6.714826,9.430572,-3.326335,-5.996231,-7.705970,2.771630,-3.067753,-8.387789,4.394827,-0.139560,-4.731551,-1.024212,2.095023,5.933087,3.371939,-3.534152,6.450912,5.463158,0.064665,3.168773,6.868542,-4.124453,8.954474,-6.438693,-1.745648,-0.286008,5.253797,7.095180,8.040583,-8.019509,6.019569,-5.452737,2.349254,7.821315,7.991050,-5.318596,1.819049,1.779071,4.070052,-7.609450,-7.745695,-1.207018,6.589507,7.930725,4.774218,4.920622,-2.351595,3.574636,-1.374207,-8.512889,2.724626,-7.887782,5.917912,6.716386,2.291316,-6.420669,5.096582,-5.073645,-9.347931,4.043139,7.004557,1.717529,5.600892,7.331677,7.026275,4.823594,-8.872042,2.030130,7.084267,-7.519826,-5.822246,4.643762,-5.525137,3.595710,0.564457,-0.023307,1.280485,-6.192268,-5.341543,-1.763419,-4.132066,-6.596239,-2.371909,-6.679193,-6.336900,-4.303292,-6.838718,-4.950164,5.751219,9.678858,4.977904,-0.705719,8.355422,2.316896,-6.125806,2.571282,2.596382,-6.079705,-1.884974,-6.510222,2.308815,1.811503,-6.826725,-5.167969,8.961768,-8.196781,5.487261,-7.157201,3.040671,-6.148713,5.190619,-7.088254,9.579065,-6.194920,-5.306478,1.517079,-5.953697,8.788968,-8.363779,-8.915585,6.232445,-7.782206,3.700652,-7.620389,-6.929692,7.102530,-2.160360,2.461235,-0.437699,3.329288,-3.065704,-3.480499,-1.330143,0.443536,-5.053474,-3.545032,-7.116098,-7.894846,3.009473,-4.754728,-6.501191,-4.821179,-8.749170,-5.999890,0.988514,8.075299,-0.345404,-7.665611,5.334765,-0.777473,-8.944513,3.463419,9.375877,-8.807536,-8.142480,6.691262,-8.226858,-7.111041,4.537420,3.682875,-3.773228,-7.117802,3.524458,1.913732,-0.620056,-2.499773,2.957322,2.025803,9.956274,5.435747,-6.157103,-9.396214,-8.244290,6.893518,-3.751350,5.752576,5.929112,9.556535,-6.849752,4.041274,-0.820022,9.610111,-6.842561,1.953151,1.997412,5.718299,9.149908,-1.234630,-9.755675,2.869611,2.134277,-2.865862,-1.472520,0.771935,-7.413753,4.917086,-6.395686,-0.417489,4.683031,-4.673967,7.187695,-8.871103,-0.284474,-7.050680,1.870345,2.618252,-5.666304,5.884270,9.663239,-1.582708,-7.713346,9.485277,-2.762174,7.568111,5.091846,-2.859228,6.147376,9.974620,-7.545603,4.577330,6.434439,-6.264776,-8.898336,-9.163825,-9.509758,2.082153,-7.778100,1.988155,3.941336,-7.543107,-1.398214,6.907847,0.654205,9.823499,-8.302596,1.394592,4.099628,-7.826109,-1.756465,-1.843295,6.158630,0.894242,-2.347212,-9.051241,2.160201,-4.980806,-5.532356,5.126748,-2.807001,4.079876,8.832818,-2.091799,-9.174579,-4.728962,4.343215,7.546819,4.695719,-7.883737,9.248695,2.147888,9.841943,-1.588029,2.209594,3.445288,3.049448,-7.043275,-3.040363,1.987573,4.892141,9.652959,-2.648728,2.435660,6.352618,3.066614,3.581775,9.319818,-5.682567,-5.449638,6.534481,0.014454,-2.489551,-8.746963,-9.210684,7.691887,3.241826,-2.785554,9.851214,4.345071,3.378050,3.242564,7.105424,9.591730,-1.922714,6.992728,-0.886267,-9.642968,0.278906,5.377262,0.691528,7.294239,4.282647,-7.296782,-0.575555,2.103653,5.916326,-4.826717,6.716311,-4.530645,5.959807,7.910157,1.591520,-1.642548,-6.075458,-6.939663,-6.360230,4.739557,-0.140719,-2.780043,2.907693,-2.544943,-2.967218,-3.529664,3.825287,6.122360,-2.674206,-9.813542,3.027135,-6.958111,-8.433649,7.937716,8.301048,-1.040556,-8.258023,-8.446258,-5.132340,-2.681838,5.790595,-4.827705,-0.247477,7.679268,-2.041738,-8.136684,-3.749893,-4.173775,5.934623,3.678872,-2.109427,-9.460937,-9.784976,-9.532391,-9.172237,0.074245,8.776861,-7.795569,7.705233,5.221158,2.040810,2.380128,-8.220848,-5.752750,2.826911,-1.896590,8.940647,5.978734,1.980962,-5.584057,-3.189418,1.752327,2.910150,9.605298,0.859535,-3.157374,-3.944274,-1.730610,4.586077,8.230961,-4.474819,-9.356723,-1.026461,3.298534,-8.525669,0.025767,3.772790,-7.104279,-1.859097,-8.354779,-5.588366,-4.425958,-3.649786,-2.973775,0.031960,9.506266,9.158436,1.246630,0.329491,-8.784077,-7.735351,-1.388762,-2.721259,-7.018671,5.278179,3.871682,-2.441002,-1.290100,-3.050701,-6.079984,-9.096442,-4.701575,-6.240328,-8.658112,-1.051594,9.747795,-7.149559,0.929668,-8.367583,-4.605745,-9.395478,-5.624530,8.381062,8.156227,9.826025,-0.246131,2.711012,6.369993,-9.106404,8.458549,-8.101089,-4.460418,9.517149,-5.989512,1.267760,7.339493,-7.781215,-5.638403,-3.957135,9.230536,-7.645718,-9.487955,-6.401852,4.665764,9.930721,-1.543335,6.490947,-6.564116,-5.954188,-6.960994,4.142831,7.302687,7.590739,-7.469798,3.292363,0.038126,5.538567,-3.653615,-4.660901,-4.505383,-6.802724,9.553003,2.047828,-6.242793,-5.452165,-5.719536,-0.761487,6.376350,9.766770,-1.104372,-4.970587,-0.970304,5.456445,1.453350,-6.651934,1.902984,-8.273335,-6.875729,-1.837262,7.648465,-2.671367,7.214096,6.488081,-1.558951,-7.460172,-7.771325,5.460356,-2.729467,2.450428,-3.775987,5.041631,-9.511453,-5.747989,-0.698006,-4.634525,-0.709057,7.288789,9.431821,-7.728194,4.412580,-8.238535,1.361413,3.033303,-8.198672,-1.972153,-9.731805,-7.838953,7.141961,-7.637813,-5.103174,-6.655155,3.936951,-6.364819,-2.292765,-2.979672,9.070550,0.906457,-1.728899,-2.585125,4.279644,3.149862,-6.016512,7.662184,0.989586,5.212173,-2.420675,-0.078491,1.771344,-8.820033,5.632549,-7.743479,-9.464380,-1.669510,-8.967195,5.529795,7.344591,8.915158,4.419787,7.155265,-6.294976,-0.140366,-4.285759,-2.468240,5.155000,-6.528859,-6.696389,5.563844,-3.650772,8.309332,-3.679102,6.328719,-3.328956,6.999667,6.006668,-8.894001,-4.021051,-9.094986,1.331735,-9.313236,5.266828,9.380915,5.842622,-7.855120,-3.804267,-6.012401,1.194061,-3.334866,9.813408,6.015388,9.006856,-4.973493,-2.169087,-7.941525,-8.035844,-5.689171,3.716011,0.948620,-9.150161,2.875527,4.436090,9.715001,7.890557,-2.568343,4.195309,3.547669,8.114753,-7.937561,-3.567183,3.430131,-3.381611,-8.713612,-0.626013,-5.885296,-8.030073,5.084472,-2.525351,-4.150471,1.750527,-7.799548,-5.440747,4.584117,7.472355,9.817199,-7.969470,-6.689319,-6.224167,4.150311,-3.196773,6.711725,3.130141,5.114482,1.619197,5.285466,-1.034230,2.806851,6.160434,2.887586,2.488307,-5.782388,7.133541,-1.777053,9.536697,-7.800526,3.758227,-3.961866,5.929605,-3.095139,1.833964,4.690284,6.893008,-8.774151,0.241404,-4.843320,-1.924941,-6.033380,4.085567,9.127362,-5.292146,3.539711,7.446253,-4.267038,1.670095,0.130396,-4.586652,-6.033935,-8.985907,-2.024538,-1.100257,-2.914113,4.129289,7.435585,3.808487,-8.145391,-3.881592,5.349373,0.185932,-5.909189,5.218135,-5.518748,-6.801825,5.476683,6.375834,-4.240509,-2.087976,8.055942,-9.024547,2.099518,2.258554,5.991564,8.317733,-3.554658,1.422696,4.984217,-1.279215,-2.242748,-0.638468,3.759090,-8.177567,-6.291482,-2.701487,-1.539073,-9.666959,-6.195866,5.273249,6.365418,7.072359,-4.499967,6.797418,6.962459,0.496448,-3.654705,5.268309,0.312948,-7.567430,0.323033,2.299538,0.755604,0.042417,-4.687598,0.032399,1.591545,9.606947,0.824407,1.260216,-5.829147,3.515743,-4.639316,1.585939,-9.560348,9.610505,-4.724319,7.055273,-5.380499,-5.345686,-8.688167,9.025819,-0.502366,9.237293,9.207173,-1.789191,2.574953,-3.530384,-6.740475,1.989859,0.627634,-8.857281,-2.120087,0.402292,-2.967065,1.865937,-9.562554,-1.761720,6.515309,-7.113594,-9.506993,-6.896062,-7.606339,-4.752605,-9.940591,0.392041,-4.177428,-4.056429,-4.503894,-5.309133,3.846519,5.753951,-7.659098,-6.102117,1.867375,-2.152837,4.254359,0.412193,8.386840,-5.999762,2.148322,-9.342846,-6.408805,-7.760861,-2.541595,2.955876,-2.456795,4.981106,6.167243,-5.919034,3.161567,-7.960019,-2.891464,-7.736178,0.889142,6.999907,0.661595,9.850909,-0.699006,-4.138631,-8.306879,-8.144038,-9.836529,3.099793,4.798189,-3.033885,-7.071253,3.898760,-7.412784,-3.338873,0.272103,-7.051326,3.692356,-6.872508,-3.577384,5.315282,-6.594151,5.577203,9.731785,-8.923343,6.029313,4.794441,-8.911942,-7.493100,1.538506,-6.089458,-2.360451,0.862679,-6.276815,-4.948546,-2.211760,7.987328,2.335905,3.730206,9.799602,-5.521759,-1.568090,-3.190349,-4.360063,8.150302,-1.846755,-3.317132,-0.360407,-7.443034,3.399402,9.447548,-4.304797,8.955659,-7.935957,9.070140,-1.284584,-2.826751,1.142349,5.234089,0.174665,3.665274,8.191062,-2.860547,7.569807,-1.952253,7.093711,-0.227255,1.334720,-6.606165,-2.010105,7.788146,0.056121,0.242639,5.182428,-3.911009,7.629684,-9.219433,-7.053708,1.093264,9.173461,-7.910794,8.433055,2.190203,-4.274273,-2.436201,8.888981,-1.845821,9.938173,1.529031,-3.108227,7.292252,-9.969408,-3.940648,1.924097,-9.647843,-9.171308,0.383840,-7.159871,-3.576259,-1.396671,3.084663,-2.624816,-1.623200,-1.959504,-5.644151,-2.124684,-4.263954,4.758865,0.906439,-3.155781,-4.790650,-7.614166,7.809271,-7.616430,-0.872182,-8.279333,-5.031515,8.153293,0.231143,-7.966608,-8.343494,2.426661,3.588405,-6.214138,5.011853,8.797977,6.326853,-5.344373,-5.723062,-3.911935,7.119060,-3.049892,4.982443,8.760223,8.512697,4.059919,-9.543524,5.679065,8.345977,-4.224735,-5.739570,-2.845943,3.771059,-6.872648,0.503989,-8.225539,-6.231859,-6.986657,-9.422185,-4.820333,-1.295012,-1.054352,-3.562440,-8.622159,2.297282,6.197622,-7.978811,2.139296,-2.663366,0.135874,-4.454816,-2.076889,5.035546,-8.264843,-9.464821,2.392347,-4.437372,5.934329,7.482159,3.420191,-4.124153,5.559972,-5.337764,8.292252,-2.964278,8.786136,-7.827903,3.153980,-0.870719], dtype = "float32")#candidate|3352|(1365,)|const|float32
call_3348 = relay.TupleGetItem(func_1867_call(relay.reshape(var_3349.astype('int8'), [8, 3, 13]), relay.reshape(var_3349.astype('int8'), [8, 3, 13]), relay.reshape(var_3349.astype('int8'), [8, 3, 13]), relay.reshape(const_3350.astype('uint16'), []), relay.reshape(const_3351.astype('bool'), [15, 6]), relay.reshape(const_3352.astype('float32'), [1, 1365]), ), 2)
call_3353 = relay.TupleGetItem(func_1875_call(relay.reshape(var_3349.astype('int8'), [8, 3, 13]), relay.reshape(var_3349.astype('int8'), [8, 3, 13]), relay.reshape(var_3349.astype('int8'), [8, 3, 13]), relay.reshape(const_3350.astype('uint16'), []), relay.reshape(const_3351.astype('bool'), [15, 6]), relay.reshape(const_3352.astype('float32'), [1, 1365]), ), 2)
func_2272_call = mod.get_global_var('func_2272')
func_2278_call = mutated_mod.get_global_var('func_2278')
var_3362 = relay.var("var_3362", dtype = "float64", shape = (72,))#candidate|3362|(72,)|var|float64
var_3363 = relay.var("var_3363", dtype = "float32", shape = (960,))#candidate|3363|(960,)|var|float32
const_3364 = relay.const([-5.610318,1.984896,5.965756,2.672104,6.242283,-7.887843,-0.283371,-8.805100,-0.547686,8.299406,4.525862,5.450354,-2.268118,-5.923562,-4.543263,6.708586,9.628133,-7.040612,-8.095466,-7.457090,1.210695,-4.773413,-3.593060,-6.949487,8.488762,2.049600,7.626727,-4.798006,-4.424120,-9.506629,-2.846602,5.014952,-3.590660,-5.234307,2.907111,-3.669610,6.280167,7.708055,2.719813,-3.338837,5.881680,5.209906,4.546634,6.160040,9.855520,-2.947828,0.994668,4.445082,-8.230347,3.772415,-0.343825,-4.573822,-4.770521,7.897447,7.525099,1.421418,2.019172,-2.754102,-1.521901,-6.781079,9.245496,3.156724,-3.435451,-3.599003,-3.549335,9.524394,8.390049,-4.878928,8.852145,3.063946,-5.244310,2.344468,-9.076612,-3.605391,2.290836,-0.955792,1.066326,-0.518434,-2.988871,-1.804608,-1.676788,5.999270,3.831324,0.813753,0.213059,-6.414617,5.522586,6.544391,2.185031,0.673083,-6.865642,6.551700,5.166225,3.446100,-4.557869,7.537522,5.163618,-2.740543,-8.768546,3.955669,-6.749389,3.754775,-0.504944,5.253179,-6.065189,-3.227252,-5.982871,8.295897,8.470838,9.741137,-8.183191,-7.407656,9.186093,3.837202,5.351249,8.412283,-2.991555,1.268256,3.976362,-0.748721,0.247331,-0.569537,-3.272429,-1.594550,5.812118,1.445811,-9.970958,6.726500,-3.064455,7.193376,-1.131962,1.454931,-1.001956,7.772780,-2.181394,0.682532,-6.958623,8.329343,5.428412,8.187415,-2.441390,6.910334,-0.918710,-0.116465,8.294070,-9.094777,8.745904,-9.143606,0.311423,8.172239,1.049125,5.364451,5.170522,-2.050997,-7.971035,0.044664,-9.148470,5.736711,2.918620,0.835244,-3.822188,-8.930348,8.258226,1.156055,-8.028371,-0.802452,2.173894,-4.715099,5.647759,-8.557075,-2.808341,-7.424843,-3.822210,4.653344,4.627590,-6.324804,8.443394,7.559214,3.513951,0.718988,-4.725091,2.117641,9.546165,-0.060433,-7.963174,8.146729,-3.024591,1.279337,3.111137,-2.045713,6.140935,-1.921029,-7.878616,6.343313,-1.734738,7.331494,6.922131,5.853343,-8.600746,0.293357,-1.704954,4.475865,-9.849721,5.774436,-1.880909,-4.735216,-5.501932,-5.633232,6.377428,-7.171853,-6.915233,-6.247949,-5.903387,-2.844942,7.855376,4.137667,-2.161263,-5.063668,7.175093,8.516942], dtype = "float64")#candidate|3364|(220,)|const|float64
call_3361 = relay.TupleGetItem(func_2272_call(relay.reshape(var_3362.astype('float64'), [4, 9, 2]), relay.reshape(var_3363.astype('float32'), [960,]), relay.reshape(const_3364.astype('float64'), [110, 2]), relay.reshape(const_3351.astype('bool'), [45, 2]), ), 7)
call_3365 = relay.TupleGetItem(func_2278_call(relay.reshape(var_3362.astype('float64'), [4, 9, 2]), relay.reshape(var_3363.astype('float32'), [960,]), relay.reshape(const_3364.astype('float64'), [110, 2]), relay.reshape(const_3351.astype('bool'), [45, 2]), ), 7)
output = relay.Tuple([bop_3331,call_3348,var_3349,const_3350,const_3351,const_3352,call_3361,var_3362,var_3363,const_3364,])
output2 = relay.Tuple([bop_3331,call_3353,var_3349,const_3350,const_3351,const_3352,call_3365,var_3362,var_3363,const_3364,])
func_3367 = relay.Function([var_3349,var_3362,var_3363,], output)
mod['func_3367'] = func_3367
mod = relay.transform.InferType()(mod)
var_3368 = relay.var("var_3368", dtype = "int8", shape = (312,))#candidate|3368|(312,)|var|int8
var_3369 = relay.var("var_3369", dtype = "float64", shape = (72,))#candidate|3369|(72,)|var|float64
var_3370 = relay.var("var_3370", dtype = "float32", shape = (960,))#candidate|3370|(960,)|var|float32
output = func_3367(var_3368,var_3369,var_3370,)
func_3371 = relay.Function([var_3368,var_3369,var_3370,], output)
mutated_mod['func_3371'] = func_3371
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3443 = relay.var("var_3443", dtype = "int32", shape = (16, 14, 9))#candidate|3443|(16, 14, 9)|var|int32
var_3444 = relay.var("var_3444", dtype = "int32", shape = (16, 14, 9))#candidate|3444|(16, 14, 9)|var|int32
bop_3445 = relay.bitwise_or(var_3443.astype('int32'), relay.reshape(var_3444.astype('int32'), relay.shape_of(var_3443))) # shape=(16, 14, 9)
func_3172_call = mod.get_global_var('func_3172')
func_3178_call = mutated_mod.get_global_var('func_3178')
var_3453 = relay.var("var_3453", dtype = "bool", shape = ())#candidate|3453|()|var|bool
const_3454 = relay.const([True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False], dtype = "bool")#candidate|3454|(1573,)|const|bool
const_3455 = relay.const([-8,7,10,8,-5,-2,-3,10,7,7,3,4,1,3,4,3,8,-3,-7,-8,-5,5,5,7,1,9,10,-3,7,-1,5,3,5,2,9,4,2,-2,-9,8,5,-7,1,3,8,-1,1,4,9,10,8,2,5,7,-2,-5,4,-1,-2,5,10,10,-9,9,-4,8,3,4,-3,-4,-9,4,-1,-10,-1,2,10,-5,10,-9,-3,8,6,-3,-4,5,-6,-7,-4,-9,-2,8,-4,-1,7,1,-8,3,3,-4,-5,-10,-10,7,4,10,-8,7,1,10,-9,-5,2,-2,6,-1,9,-1,10,4,5,-1,-4,8,-8,3,-9,-8,-10,3,-8,-6,-8,7,-6,-4,-7,-3,5,8,8,-3,-2,8,-1,8,7,-8,3,-3,-8,-10,-3,-6,4,10,-5,-1,-3,-9,-1,-8,4,-3,3,6,4,6,8,-4,6,-8,-8,-10,-9,-9,-9,-7,3,8,10,7,1,-1,-5,-3,10,2,10,3,2,-8,-7,3,-8,7,-6,-2,-6,-8,-8,2,2,-8,-7,-2,10,-1,8,8,7,-4,8,2,8,6,10,-6,1,5,-2,8,-10,3,-5,5,-6,4,4,-9,5,10,3,-6,-7,-2,-1,-5,1,8,-8,-7,2,8,9,-2,-5,8,6,2,-8,-6,-7,9,-6,-8,-1,-9,-8,3,-6,-2,7,9,-5,-9,-5,3,4,4,10,-6,-6,-6,-2,4,3,-9,5,4,-6,4,-7,-5,-10,3,-2,-10,4,5,-8,1,2,-2,7,8,10,-7,10,8,-3,-9,-9,-3,9,-8,4,8,1,-4,7,-2], dtype = "int8")#candidate|3455|(312,)|const|int8
const_3456 = relay.const([-4.063861,-8.105787,-1.817399,0.293796,-0.107149,-0.068590,-8.955103,-2.006859,-1.704157,-3.070749,-3.380767,-8.333876,-7.974329,-9.216944,6.509457,5.727425,7.316734,-1.131876,2.531463,0.810767,8.793621,-9.640237,2.657434,-0.757724,5.226351,-6.859723,7.116984,-9.251632,2.813959,3.558288,2.129859,-3.392263,4.755159,-2.539753,-0.224356,-5.767526,-6.296568,8.971976,-8.564091,4.479243,9.188368,7.361463,-5.782253,-9.448768,-2.814039,-5.893190,-2.781826,-6.855692,-0.179325,6.238839,-6.812295,-9.413956,-6.359472,4.094648,0.979173,-3.372018,-1.568677,8.719898,5.521367,-0.927644,-8.933827,6.739348,-3.481070,-8.365140,-2.966047,5.190736,2.392706,5.314522,-1.603684,-8.736933,0.280132,-0.655242,-5.160441,9.900520,7.414258,8.072355,-8.646333,-8.483901,9.952489,3.606165,-5.513888,-0.352246,-8.574934,3.318329,-9.320962,5.378445,-4.869914,8.715946,8.613545,-8.673524,9.110502,-7.465748,-8.383556,-7.709772,6.945111,-7.588336,-3.420254,-6.378236,-4.994566,9.520979,0.385168,5.884650,-1.613003,1.952391,0.566891,-7.518632,6.361169,-5.982078,-5.206560,5.762548,6.310965,7.511812,8.533854,-9.473474,-6.214619,-8.905222,-5.601465,6.910011,9.879963,1.836814,3.191495,1.629414,-0.044393,-9.220366,-3.939752,3.893319,4.815840,7.210385,-2.357269,3.043749,-3.727711,-9.563536,8.641079,8.441319,-5.126175,4.189328,8.289788,5.496884,-9.802534,-3.914784,3.963670,-8.287361,-2.410504,3.472843,-7.510894,8.490518,0.652353,2.530576,-3.065617,4.253295,0.016481,-9.452070,1.429139,0.895420,7.947777,-7.099024,9.140766,-3.217069,-3.377063,-9.495898,-5.279263,9.281026,5.229635,-1.633477,-0.558025,9.272376,-5.398891,-4.754805,1.619965,1.464020,4.604696,5.073969,4.271889,-7.538890,-1.570416,-0.993149,4.524141,-9.642938,-3.942827,-9.998874,-5.540862,5.360165,1.101404,-1.461444,8.936175,7.562976,5.810800,8.018949,-2.532181,-3.280789,-8.066575,8.159511,2.606550,-0.206382,-9.361217,-4.695596,-6.535125,4.712446,7.409174,-8.960495,-9.806251,7.956383,8.032030,-6.308317,-5.433311,-9.379553,7.525506,-3.201235,5.114851,-0.052967,9.851254,-8.850132,-8.074152,0.018153,9.128054,-8.165205,-2.502100,9.085126,-8.701753,4.014981,-3.806655,9.296791,-9.827265,-6.255613,6.580529,9.631028,4.642812,-1.039650,-0.032871,7.085362,-3.062482,4.130804,9.292727,-0.132635,-5.702746,7.609351,6.872803,-8.102006,-7.377592,1.898751,5.694991,5.746829,-3.273799,1.549232,4.621145,-7.628094,-9.348188,-3.391421,-1.026330,-6.816419,0.840676,0.465552,-7.394314,-7.005678,3.056739,-5.478122,-1.976078,0.584884,-4.228529,0.189653,-0.075826,4.566471,6.390610,-2.606908,-1.314500,-8.870615,-3.328734,-2.160152,8.620744,-7.714654,-9.181919,-3.735552,-9.155994,1.917239,-5.664839,-9.462502,-6.915397,8.370024,-4.917787,1.701443,-8.836726,-9.956395,9.555876,-2.999735,3.607039,3.070510,9.118056,-1.129800,-9.874553,-4.049953,1.830486,8.355346,-5.811556,1.750199,-3.708502,9.955550,5.970465,-4.799177,-9.976163,2.038515,3.202603,0.549085,-2.913370,-9.146234,0.547978,0.816233,5.234954,-8.025610,-2.830198,-9.092133,-0.886644,9.155513,0.513139,5.924748,-8.641022,2.598234,7.193210,6.062865,4.483326,-0.084039,-2.920508,6.251659,-1.220206,-2.971930,2.701563,-6.969449,-4.696667,3.583668,0.776837,-0.739332,-6.351841,6.064081,-2.722655,6.415991,-9.527754,6.782872,-6.108904,-0.393738,-0.749239,6.235916,-1.141783,-6.174637,2.844312,-2.290352,-2.628901,3.308304,2.586886,-2.910503,6.726807,6.273601,-1.272684,-7.134083,1.583252,5.655451,5.106892,4.537878,-9.284529,8.634354,-3.674790,-1.640389,-4.857473,8.559214,-4.683264,5.202267,7.974224,8.501296,8.037721,-8.953235,6.760654,7.075441,-6.337075,-8.392336,-5.028302,9.510378,6.149326,3.744018,2.645822,2.327329,-7.929284,5.552310,5.931109,7.659965,-7.136105,0.643885,-6.105798,2.463198,-9.703511,2.274475,4.256863,3.310552,3.198731,-8.989370,0.597551,-1.391646,-5.880573,0.562280,5.323802,1.645821,8.449122,6.550919,1.470156,-5.708934,-2.413410,-9.245859,-4.963939,-1.707038,-4.422265,-7.561563,5.146229,1.799527,-4.476274,5.922788,-9.922513,-0.597956,-2.745965,2.534950,-4.342774,8.842645,0.361513,-9.107738,7.209401,0.314124,1.777390,2.892180,7.000454,-4.347674,0.690671,4.059751,-9.806556,5.074248,5.609823,-6.198032,2.386074,-7.695295,2.289823,-7.029108,0.761308,-8.075598,-6.887977,2.597037,7.040179,8.577829,-4.071666,-7.930301,-5.985200,7.154639,-5.384627,4.690071,0.506743,-5.946271,-2.956867,9.386191,0.092153,-6.767020,8.866413,6.141295,-5.907216,6.790396,1.237264,2.513212,-1.755207,2.045220,4.809812,-1.636523,-4.529844,9.117547,4.773118,-1.265844,1.325088,-0.955052,2.662083,0.331239,5.648219,-8.944685,-0.720867,-3.403786,-1.249760,9.510658,7.823722,-0.562585,-7.744988,-9.797753,-8.596179,-9.246922,-4.349007,-8.121040,-4.445166,4.497828,-0.881816,-4.113119,1.977330,0.635920,-2.247583,3.076640,-5.113855,0.372898,-7.194934,4.420786,2.483266,-1.713089,-7.790548,2.449303,-1.535363,-6.869521,-2.997695,6.855286,-1.737346,0.847739,5.676195,-8.522077,-4.451534,-9.597155,7.030026,4.142683,-9.914959,-4.578538,-9.341316,5.761980,-3.749117,3.225968,9.589306,7.376515,-5.297792,-8.547017,1.197979,0.443045,0.811759,-5.747645,2.426854,8.379694,6.881553,7.274611,0.441725,-7.762051,-0.123263,-2.922665,-0.622739,6.892311,-5.704501,-5.149041,-2.542893,6.364221,-9.191166,8.768281,6.639453,7.637488,-4.192265,-9.181043,5.709446,-7.305348,-3.197926,6.353985,-6.085346,6.927346,5.984949,-5.231869,-0.681269,2.335698,-7.088252,-7.320851,7.599778,-0.663105,-5.172328,4.328969,-5.773191,-1.788631,-7.683337,6.494850,-3.107425,6.633047,9.727302,-5.081639,7.462946,-4.082103,-7.517258,5.085464,-6.885228,0.315794,-1.525397,-7.906652,-3.682425,1.469907,7.235790,8.725791,-9.928447,3.089897,4.650055,5.741845,0.948996,-1.855055,-9.379058,7.648901,3.691347,-2.368332,6.867030,-9.772138,2.736982,-2.118364,1.079973,-7.488328,-4.846068,7.223539,5.085623,-7.481917,-3.774185,-0.722279,-0.308706,1.287943,6.574104,4.114836,-1.672989,-3.017999,8.060588,-5.621980,3.023829,-5.928356,-6.866847,7.630679,-6.394627,-9.613483,-7.401197,-1.188629,-8.620893,-3.358608,1.592711,-2.424772,-8.894469,5.593538,9.555729,-9.146888,-5.538049,-4.651592,-1.775131,4.022236,1.876886,4.803467,-8.969990,-8.848745,7.325277,-1.700997,-2.289845,-4.672161,-0.002786,9.364783,-2.803375,-6.832519,-8.197811,0.963858,-9.667743,-4.461090,2.450069,1.129034,3.676537,-1.873141,-8.572612,3.655572,-1.787501,0.996565,0.344086,-7.012505,-5.624300,-6.906447,-1.486247,8.333264,-9.522035,-5.032826,7.356738,-7.607074,-4.024784,0.561678,4.840180,4.116949,9.274909,-1.499816,4.585120,-0.888471,1.860810,6.338390,-7.562111,-0.748616,-3.050016,-8.550178,-8.453185,-0.253085,-2.766757,-6.153620,-2.292277,1.506823,-0.967353,-7.862557,-4.448823,-2.305976,5.943103,4.152586,-6.667187,5.089832,9.488419,3.304590,-6.654653,-4.772238,3.047012,-9.030466,-4.051293,8.318175,-2.661937,4.601525,-1.933243,-4.169751,5.520556,-9.612228,-9.800742,-5.897375,1.267621,7.407192,3.404385,-8.053155,-9.112463,-9.954634,-1.440345,-9.909017,1.041841,-1.147688,4.577607,8.312386,-8.089250,-8.782071,2.602474,-5.821757,-6.985818,-7.180812,3.276938,8.835950,-9.209507,2.041684,2.666797,8.753168,7.859427,6.220256,-3.595951,8.574050,-4.519588,5.085246,-6.486890,-6.401034,-9.668707,-4.264506,-9.891418,0.693304,8.537897,6.309960,-8.448739,4.560896,-4.073764,-0.937909,1.699451,-0.628694,-3.743856,-3.379241,6.223073,4.967476,3.181720,-6.886577,8.368892,-0.055187,-5.791244,-7.844880,-5.864883,-2.114369,-0.652375,-3.063952,-3.130710,6.105327,-9.630576,7.814638,-4.573496,9.431578,-5.359916,9.807601,-0.048456,-4.447142,-9.827643,2.916475,-0.301377,9.679268,8.477638,-5.069865,-0.418052,-7.189730,5.861893,8.401812,-7.121528,-1.619953,-3.891641,3.337995,6.151205,2.818587,-8.370640,2.385177,-4.495402,5.983879,-2.403474,1.761670,8.679124,1.674972,3.074781,-3.779548,-4.124289,-7.203126,9.983995,2.770150,3.266554,-4.907595,0.505739,-4.194337,-4.262666,8.398308,3.257150,-9.995958,-7.425989,-0.582250,-5.405341,-5.086875,4.305021,5.253544,-1.121103,6.255941,2.674402,6.828535,8.713744,-4.926938,4.611278,-3.057672,-3.391377,2.625959,3.379184,-0.034013,-8.575751,-9.256212,3.049224,-7.702767,-5.594250,0.957594,6.743187,-2.702596,-8.313243,8.358741,2.826770,-7.531224,-7.344998,-5.162894,3.410442,2.604357,0.164104,5.180237,1.418225,-9.434820,-1.093326,1.066085,-6.166322,-8.743884,-3.662828,-2.338482,-7.807357,7.409475,-1.187419,-0.364067,-0.832443,-1.566473,9.670946,-8.063733,5.238481,-5.329817,-0.440897,-1.505588,4.459460,8.180091,-9.569562,0.855994,-6.843933,3.682325,1.550628,4.999178,7.464723,3.315107,1.225144,0.011938,3.318723,-9.565118,4.026685,-6.218774,-8.697456,-2.639396,-4.248149,9.780429,-9.480230,3.897195,-2.621131,9.335364,-6.530768,-6.970812,-5.079734,0.827886,9.633338,4.175018,-3.453119,3.868095,7.009648,4.873570,-9.157842,-2.831519,1.677467,-3.125988,-9.041371,5.760675,-8.550314,6.010553,5.890186,-8.891837,-2.151492,0.498461,-8.025119,7.597294,-3.600843,9.062903,5.028306,4.274306,6.742489,-3.513396,9.275212,9.175365,4.918886,-8.846678,2.158058,7.788766,-9.749927,-3.154411,-1.805248,-8.248138,-9.415811,5.160967,2.273900,-1.344917,-3.200237,9.868728,-9.541527,3.436922,2.609088,-8.638777,0.561931,-4.793267,-4.950520,-2.145198,5.690777,0.771665,-7.268038,1.065172,0.371554,-4.681756,0.168958,1.488164,-9.117462,2.435810,-1.244524,-8.732603,-4.854836,7.696118,1.372210,6.126196,-2.130419,-2.786650,6.420684,-2.506838,9.767860,-3.850788,-3.154135,-8.189132,-2.418099,-8.214731,5.267811,-9.289799,-0.015524,-1.058119,8.184081,-7.300744,-2.021645,-2.051282,-1.226690,-7.978709,-3.392377,-5.652704,-8.094561,3.970167,3.606861,1.479501,5.072700,-2.008268,6.902294,7.400976,-8.508301,-8.771659,3.226814,-0.522991,-9.496151,3.097086,9.127526,3.747646,8.292429,-9.775788,5.847746,4.399296,-1.346096,-0.197556,7.030143,-7.368526,5.848012,-3.289003,-8.043405,-3.739322,-2.700420,4.617671,-5.599118,8.950165,0.355218,-7.328810,-0.948537,4.704512,9.426665,-3.831764,-2.347068,-0.283713,-2.370423,-2.435550,1.813630,9.759372,-7.424790,8.929476,6.712142,-1.257716,-8.195641,0.867341,5.368448,1.024472,-3.373266,1.971868,1.512515,-2.079062,-3.158225,-3.980273,-7.451948,9.074911,-3.354753,9.256348,-5.899465,-3.908724,-3.517582,1.692540,9.306655,-7.278255,-3.291749,-1.331290,7.335924,5.588073,2.677099,5.985094,9.710723,-0.834377,9.584068,-9.568252,-0.221909,-5.193016,-6.536616,-8.843488,0.878371,-2.155162,-5.422308,0.445739,1.375158,0.341506,-1.577042,-6.955770,-0.746480,1.105313,-8.445210,3.732310,-6.349438,3.847163,3.042745,-7.569794,-2.243055,-7.412941,7.878834,-2.776054,9.542552,3.810641,-1.573803,9.631080,5.799669,-0.939448,-0.509904,-1.957610,-0.419955,-4.728418,8.691372,-8.113229,4.148126,-3.865325,-2.626031,8.997231,-9.566154,1.958365,3.629148,4.277186,2.341806,-1.882557,1.924719,-7.688672,0.215982,5.994707,-8.439638,-1.134061,3.875521,-8.826826,-8.877056,0.611248,1.253574,3.637795,3.825106,3.619069,4.525518,3.350114,-7.504119,-1.805778,-8.337918,-9.900056,0.864143,-7.327333,0.367259,-5.996997,-6.952672,-2.908422,-6.828673,-6.200178,3.507332,-0.884151,-0.824013,3.391226,4.826141,-8.819575,-5.512398,-4.061419,3.436684,-7.747704,-5.050292,-2.646647,-3.297327,-6.703240,6.016373,-1.146814,-6.461280,8.375354,-0.168483,4.973451,-9.682855,8.660510,-8.364948,-7.965034,-0.509176,-7.576679,6.554661,-2.806496,5.321848,-6.322227,9.350558,6.959096,4.560277,-7.690691,-3.022573,5.768657,5.128623,9.997533,4.185301,-6.889198,-3.688409,-9.345417,0.288606,4.798767,6.005542,5.057735,-7.594090,-5.479071,2.859837,-0.712919,-0.270085,-2.317892,-3.519410,2.417475,1.197687,-6.855733,-2.930996,7.134737,2.529230,-9.686575,-2.508816,6.141842,1.830399,-1.084120,4.016423,-6.223575,8.372486,8.876884,-2.269266,8.571339,-7.872024,7.822344,-0.657569,2.900563,8.117174,-1.708410,2.128137,-0.179466,9.244484,-3.907874,7.884062,-4.463062,7.867364,9.344994,-3.613551,-0.521908,-1.981889,7.587440,-7.522811,-9.738196,-8.202094,-7.375425,-3.316851,-1.492560,4.372064,-0.549510,4.792887,5.890528,0.461334,-6.451896,7.976302,-1.667187,-9.120001,-2.766279,-1.281435,-9.834614,6.002581,1.304404,-8.711298,8.140779,-0.630721,-5.833889,-2.364569,-2.073240,-2.781738,9.182448,9.490287,3.948516,0.560505,5.490097,-4.939881,4.526347,-1.433680,-2.750001,-1.443925,-6.264009,0.515779,0.786758,2.641931,3.212814,-6.059680,5.019817,2.956010,-3.172682,0.139982,-4.590496,9.460193,5.721058,-6.865740,-1.198293,-3.551910,5.536323,-7.104894,9.532024,1.275854,2.208033,-0.276848,8.726961,-7.634499,-3.517033,0.099266,2.846480,-6.179529,-3.416693,-7.445101,-0.011292,-4.953148,9.591609,-4.004374,-8.290999,9.381561,8.736542,-4.620045,6.860767,-6.981245,-7.604997,2.898502,5.905210,6.306870,-8.788503,-1.919600,-1.507832,6.555013,8.956144,-5.216929,6.943577,-0.320597,5.543751,7.331627,2.255624,3.435498,-8.834556,5.177389,-1.705565,8.448033,1.652777,6.273242,-5.679594,9.556398,-4.251571,5.298525,6.337206,3.723120,4.841882,-5.730096,-5.766952,-7.209762,-2.700829,-3.917490,-0.903930,6.864000,-4.657914,7.213032,3.683843,-0.237177,6.584978,7.786812,4.318075,9.068482,-2.006547,9.683373,6.129618,1.894704,-6.698796,8.306178,3.511929,-4.883479,2.654281,8.700400,-5.857943,1.413264,2.118808,-8.625450], dtype = "float32")#candidate|3456|(1365,)|const|float32
call_3452 = relay.TupleGetItem(func_3172_call(relay.reshape(var_3453.astype('bool'), []), relay.reshape(const_3454.astype('bool'), [11, 13, 11]), relay.reshape(const_3455.astype('int8'), [312,]), relay.reshape(const_3456.astype('float32'), [1365,]), ), 0)
call_3457 = relay.TupleGetItem(func_3178_call(relay.reshape(var_3453.astype('bool'), []), relay.reshape(const_3454.astype('bool'), [11, 13, 11]), relay.reshape(const_3455.astype('int8'), [312,]), relay.reshape(const_3456.astype('float32'), [1365,]), ), 0)
func_470_call = mod.get_global_var('func_470')
func_473_call = mutated_mod.get_global_var('func_473')
const_3461 = relay.const([-1,-3,9,5,2,-4,3,2,-4,-6,-6,-10,-2,-5,4,-6,-8,-1,6,7,-3,-10,-7,-6,3,7,3,-8,-10,1,-4,8,5,9,5,-9,8,-5,-2,-8,-3,4,4,2,6,7,2,4,-5,9,8,8,-7,-3,-6,-6,5,4,4,5,-3,10,8,-1,4,2,-7,-1,7,-5,-4,1,-3,-1,3,6,6,1,9,-6,-1,-8,3,5,3,3,1,9,9,10,5,9,-2,-7,2,6,6,-2,-3,-8,-6,-4,-5,2,2,-7,8,10,8,-4,1,-4,4,-5,-2,3,-4,-5,-9,-4,-9,-10,8,-10,5,7,-4,4,-6,4,2,3,6,8,7,8,2,4,6,-6,-7,-9,-5,-10,-2,8,4,3,-1,5,10,3,-9,-3,2,10,-4,2,-1,-2,-9,-10,-2,-2,1,-1,1,6,3,-9,-9,-4,-5,6,-1,3,-7,-10,6,-1,1,2,6,-4,-5,3,9,1,-6], dtype = "int32")#candidate|3461|(189,)|const|int32
call_3460 = relay.TupleGetItem(func_470_call(relay.reshape(const_3461.astype('int32'), [7, 3, 9]), relay.reshape(const_3461.astype('int32'), [7, 3, 9]), ), 0)
call_3462 = relay.TupleGetItem(func_473_call(relay.reshape(const_3461.astype('int32'), [7, 3, 9]), relay.reshape(const_3461.astype('int32'), [7, 3, 9]), ), 0)
const_3471 = relay.const([[[True,False,True,False,True,False,False,True],[False,False,False,True,False,False,True,True],[False,False,False,True,True,False,False,False],[False,True,True,True,True,True,True,False]],[[True,False,False,True,False,False,False,True],[False,True,False,True,True,True,False,False],[True,False,True,False,True,True,True,True],[True,False,False,False,True,False,False,True]],[[False,False,False,True,True,False,False,True],[True,False,False,True,False,False,True,True],[True,False,False,False,True,True,True,False],[True,True,False,True,True,False,False,False]],[[True,False,True,False,False,True,True,False],[True,False,True,True,False,False,True,True],[False,True,True,True,False,False,False,True],[False,False,False,True,True,False,True,False]],[[False,False,False,True,True,True,True,True],[True,False,False,False,False,True,True,False],[False,True,True,False,True,True,False,True],[False,False,True,True,True,False,True,True]],[[True,True,False,False,False,True,True,False],[True,False,False,True,True,True,True,False],[False,True,False,False,False,False,True,False],[True,False,True,False,True,False,True,False]]], dtype = "bool")#candidate|3471|(6, 4, 8)|const|bool
bop_3472 = relay.floor_divide(var_3453.astype('float32'), const_3471.astype('float32')) # shape=(6, 4, 8)
func_470_call = mod.get_global_var('func_470')
func_473_call = mutated_mod.get_global_var('func_473')
call_3476 = relay.TupleGetItem(func_470_call(relay.reshape(const_3461.astype('int32'), [7, 3, 9]), relay.reshape(call_3460.astype('int32'), [7, 3, 9]), ), 0)
call_3477 = relay.TupleGetItem(func_473_call(relay.reshape(const_3461.astype('int32'), [7, 3, 9]), relay.reshape(call_3460.astype('int32'), [7, 3, 9]), ), 0)
var_3480 = relay.var("var_3480", dtype = "int32", shape = (7, 3, 9))#candidate|3480|(7, 3, 9)|var|int32
bop_3481 = relay.less_equal(call_3460.astype('bool'), relay.reshape(var_3480.astype('bool'), relay.shape_of(call_3460))) # shape=(7, 3, 9)
bop_3484 = relay.less_equal(call_3462.astype('bool'), relay.reshape(var_3480.astype('bool'), relay.shape_of(call_3462))) # shape=(7, 3, 9)
output = relay.Tuple([bop_3445,call_3452,const_3454,const_3455,const_3456,const_3461,bop_3472,call_3476,bop_3481,])
output2 = relay.Tuple([bop_3445,call_3457,const_3454,const_3455,const_3456,const_3461,bop_3472,call_3477,bop_3484,])
func_3486 = relay.Function([var_3443,var_3444,var_3453,var_3480,], output)
mod['func_3486'] = func_3486
mod = relay.transform.InferType()(mod)
var_3487 = relay.var("var_3487", dtype = "int32", shape = (16, 14, 9))#candidate|3487|(16, 14, 9)|var|int32
var_3488 = relay.var("var_3488", dtype = "int32", shape = (16, 14, 9))#candidate|3488|(16, 14, 9)|var|int32
var_3489 = relay.var("var_3489", dtype = "bool", shape = ())#candidate|3489|()|var|bool
var_3490 = relay.var("var_3490", dtype = "int32", shape = (7, 3, 9))#candidate|3490|(7, 3, 9)|var|int32
output = func_3486(var_3487,var_3488,var_3489,var_3490,)
func_3491 = relay.Function([var_3487,var_3488,var_3489,var_3490,], output)
mutated_mod['func_3491'] = func_3491
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3619 = relay.const([[[7,8,-5,-4,-8,8,2],[-1,-3,-7,6,-5,-6,5],[-6,-4,10,1,-2,4,8],[2,-3,6,-2,2,5,-10],[8,4,6,5,9,-1,-10],[3,-6,-9,-7,-5,-8,-9],[-8,-5,-6,10,-5,8,-2],[-7,4,10,4,-9,4,2],[-4,-4,-1,9,-8,-7,-6],[8,-4,10,-6,7,4,3]],[[-3,10,5,8,-5,-3,-5],[-5,-7,-9,-10,10,3,-8],[-5,-5,-5,6,10,-7,-10],[-7,3,6,-7,-1,-5,-2],[10,5,10,-4,4,-6,3],[-1,-6,-9,-10,-8,-1,-3],[2,7,5,7,-4,10,-2],[-4,2,7,-4,8,1,-3],[7,-9,1,-2,9,-4,2],[-1,-4,9,-2,5,-3,2]],[[-9,6,-2,8,10,2,3],[2,-1,10,-10,1,-7,8],[9,4,4,7,-5,-9,-7],[6,-8,5,-1,-7,6,-1],[-4,3,-8,5,-4,-9,-7],[4,1,6,-8,1,8,10],[-5,6,-1,-7,5,2,4],[10,10,-7,-6,4,-4,3],[2,5,-8,9,10,-10,-5],[6,-6,1,2,10,-3,-2]],[[-9,6,-10,-9,1,-10,3],[8,6,9,2,-9,10,-2],[4,-9,-9,-4,-5,9,-4],[-9,-1,-7,4,-9,8,3],[-9,-2,-9,6,5,8,7],[-7,6,-8,-6,-4,-2,7],[10,1,-4,-2,3,2,-10],[-7,-10,5,-2,-5,-9,7],[9,-3,-3,-8,-7,-10,8],[8,4,2,2,2,-2,2]],[[-5,5,4,-2,-2,4,1],[-10,7,5,-3,-7,-8,-9],[-7,2,-10,5,6,-1,-10],[-10,8,-7,7,-6,1,-7],[4,9,-7,-3,-9,2,-10],[4,7,-8,-3,8,9,2],[7,10,5,3,2,8,-6],[7,-3,-5,-4,-5,-10,-6],[-7,10,10,-7,9,7,-8],[3,7,-10,-10,3,10,10]],[[1,10,6,3,-1,-3,2],[2,-6,4,6,8,-10,9],[-6,-1,-4,-6,2,8,-2],[4,10,-2,4,4,9,-5],[2,9,2,7,-1,-10,-2],[8,9,6,9,-8,3,2],[-3,-2,-2,2,-3,4,2],[8,-10,6,10,9,-1,4],[-8,-7,-5,5,-10,-1,-10],[10,9,-3,-4,-8,-2,-4]],[[3,-6,-4,3,10,7,9],[-6,5,8,-3,2,-4,2],[7,-9,-5,5,-8,1,8],[-9,-7,5,-8,-3,6,8],[6,-5,9,-5,-9,-8,-9],[-4,-8,-6,-9,-5,4,9],[5,-9,1,-4,-10,-7,-1],[7,-3,-9,-5,5,5,-10],[-10,-8,-8,6,3,-10,-8],[3,1,1,10,-6,-6,10]],[[3,-8,-10,-9,-5,6,2],[-10,-4,-2,-2,10,7,-8],[10,-4,-7,7,-1,6,9],[4,1,-4,7,-9,-2,-3],[-6,2,9,1,8,-5,-4],[5,-4,-7,-2,-9,8,10],[-6,9,-3,10,-4,-10,-8],[-1,8,4,-6,-7,1,-1],[-4,8,-5,-4,7,2,4],[4,-9,-4,5,-8,-10,-1]],[[-3,-1,3,-6,6,9,-5],[-5,-5,3,-7,10,5,-5],[3,6,-8,2,6,-2,-10],[-8,-3,6,-5,3,-5,6],[-9,7,-6,-7,-1,6,6],[2,10,-3,-6,-1,7,4],[7,4,-2,-7,5,3,-2],[3,-8,6,-8,10,-5,4],[-5,5,-8,-9,9,9,1],[-10,-2,2,10,7,-6,-2]],[[8,-4,2,-6,-6,1,10],[-9,-9,-3,-4,10,-3,-1],[-1,-10,9,-3,-1,1,1],[-5,1,3,3,-10,1,10],[-8,4,6,-10,8,-7,-10],[8,-10,6,7,1,5,8],[3,3,2,3,-9,-4,4],[-6,10,10,7,1,-5,-7],[-6,-8,6,2,-7,8,6],[5,-5,-8,6,-7,4,-10]]], dtype = "int32")#candidate|3619|(10, 10, 7)|const|int32
var_3620 = relay.var("var_3620", dtype = "int32", shape = (10, 10, 7))#candidate|3620|(10, 10, 7)|var|int32
bop_3621 = relay.not_equal(const_3619.astype('bool'), relay.reshape(var_3620.astype('bool'), relay.shape_of(const_3619))) # shape=(10, 10, 7)
output = relay.Tuple([bop_3621,])
output2 = relay.Tuple([bop_3621,])
func_3631 = relay.Function([var_3620,], output)
mod['func_3631'] = func_3631
mod = relay.transform.InferType()(mod)
var_3632 = relay.var("var_3632", dtype = "int32", shape = (10, 10, 7))#candidate|3632|(10, 10, 7)|var|int32
output = func_3631(var_3632)
func_3633 = relay.Function([var_3632], output)
mutated_mod['func_3633'] = func_3633
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3848 = relay.var("var_3848", dtype = "bool", shape = ())#candidate|3848|()|var|bool
var_3849 = relay.var("var_3849", dtype = "bool", shape = (8, 8, 12))#candidate|3849|(8, 8, 12)|var|bool
bop_3850 = relay.logical_and(var_3848.astype('bool'), var_3849.astype('bool')) # shape=(8, 8, 12)
bop_3853 = relay.mod(bop_3850.astype('float64'), var_3848.astype('float64')) # shape=(8, 8, 12)
func_2272_call = mod.get_global_var('func_2272')
func_2278_call = mutated_mod.get_global_var('func_2278')
var_3859 = relay.var("var_3859", dtype = "float64", shape = (72,))#candidate|3859|(72,)|var|float64
var_3860 = relay.var("var_3860", dtype = "float32", shape = (960,))#candidate|3860|(960,)|var|float32
var_3861 = relay.var("var_3861", dtype = "float64", shape = (220,))#candidate|3861|(220,)|var|float64
var_3862 = relay.var("var_3862", dtype = "bool", shape = (90,))#candidate|3862|(90,)|var|bool
call_3858 = relay.TupleGetItem(func_2272_call(relay.reshape(var_3859.astype('float64'), [4, 9, 2]), relay.reshape(var_3860.astype('float32'), [960,]), relay.reshape(var_3861.astype('float64'), [110, 2]), relay.reshape(var_3862.astype('bool'), [45, 2]), ), 3)
call_3863 = relay.TupleGetItem(func_2278_call(relay.reshape(var_3859.astype('float64'), [4, 9, 2]), relay.reshape(var_3860.astype('float32'), [960,]), relay.reshape(var_3861.astype('float64'), [110, 2]), relay.reshape(var_3862.astype('bool'), [45, 2]), ), 3)
output = relay.Tuple([bop_3853,call_3858,var_3859,var_3860,var_3861,var_3862,])
output2 = relay.Tuple([bop_3853,call_3863,var_3859,var_3860,var_3861,var_3862,])
func_3864 = relay.Function([var_3848,var_3849,var_3859,var_3860,var_3861,var_3862,], output)
mod['func_3864'] = func_3864
mod = relay.transform.InferType()(mod)
mutated_mod['func_3864'] = func_3864
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3864_call = mutated_mod.get_global_var('func_3864')
var_3866 = relay.var("var_3866", dtype = "bool", shape = ())#candidate|3866|()|var|bool
var_3867 = relay.var("var_3867", dtype = "bool", shape = (8, 8, 12))#candidate|3867|(8, 8, 12)|var|bool
var_3868 = relay.var("var_3868", dtype = "float64", shape = (72,))#candidate|3868|(72,)|var|float64
var_3869 = relay.var("var_3869", dtype = "float32", shape = (960,))#candidate|3869|(960,)|var|float32
var_3870 = relay.var("var_3870", dtype = "float64", shape = (220,))#candidate|3870|(220,)|var|float64
var_3871 = relay.var("var_3871", dtype = "bool", shape = (90,))#candidate|3871|(90,)|var|bool
call_3865 = func_3864_call(var_3866,var_3867,var_3868,var_3869,var_3870,var_3871,)
output = call_3865
func_3872 = relay.Function([var_3866,var_3867,var_3868,var_3869,var_3870,var_3871,], output)
mutated_mod['func_3872'] = func_3872
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3988 = relay.var("var_3988", dtype = "float32", shape = (16, 6, 8))#candidate|3988|(16, 6, 8)|var|float32
uop_3989 = relay.sin(var_3988.astype('float32')) # shape=(16, 6, 8)
output = uop_3989
output2 = uop_3989
func_4005 = relay.Function([var_3988,], output)
mod['func_4005'] = func_4005
mod = relay.transform.InferType()(mod)
mutated_mod['func_4005'] = func_4005
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4006 = relay.var("var_4006", dtype = "float32", shape = (16, 6, 8))#candidate|4006|(16, 6, 8)|var|float32
func_4005_call = mutated_mod.get_global_var('func_4005')
call_4007 = func_4005_call(var_4006)
output = call_4007
func_4008 = relay.Function([var_4006], output)
mutated_mod['func_4008'] = func_4008
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4169 = relay.var("var_4169", dtype = "float64", shape = ())#candidate|4169|()|var|float64
var_4170 = relay.var("var_4170", dtype = "float64", shape = (4, 12, 8))#candidate|4170|(4, 12, 8)|var|float64
bop_4171 = relay.power(var_4169.astype('float64'), var_4170.astype('float64')) # shape=(4, 12, 8)
uop_4189 = relay.sin(var_4170.astype('float32')) # shape=(4, 12, 8)
func_2328_call = mod.get_global_var('func_2328')
func_2332_call = mutated_mod.get_global_var('func_2332')
var_4195 = relay.var("var_4195", dtype = "float32", shape = (28, 4))#candidate|4195|(28, 4)|var|float32
var_4196 = relay.var("var_4196", dtype = "uint16", shape = (1872,))#candidate|4196|(1872,)|var|uint16
call_4194 = relay.TupleGetItem(func_2328_call(relay.reshape(var_4195.astype('float32'), [4, 14, 2]), relay.reshape(var_4169.astype('uint16'), []), relay.reshape(var_4196.astype('uint16'), [12, 156]), ), 4)
call_4197 = relay.TupleGetItem(func_2332_call(relay.reshape(var_4195.astype('float32'), [4, 14, 2]), relay.reshape(var_4169.astype('uint16'), []), relay.reshape(var_4196.astype('uint16'), [12, 156]), ), 4)
bop_4208 = relay.left_shift(uop_4189.astype('uint8'), call_4194.astype('uint8')) # shape=(4, 12, 8)
bop_4211 = relay.left_shift(uop_4189.astype('uint8'), call_4197.astype('uint8')) # shape=(4, 12, 8)
func_1091_call = mod.get_global_var('func_1091')
func_1095_call = mutated_mod.get_global_var('func_1095')
const_4225 = relay.const([-4.381509,-7.851934,8.630889,4.935281,-0.094486,-4.363100,-3.037684,-9.616463,5.201716,1.201149,9.927670,-7.453575,1.512807,4.051001,5.255315,-3.356135,-8.004482,-7.438037,-2.440616,-8.004923,0.417532,0.547219,-6.689260,-7.496490,1.944929,7.790389], dtype = "float32")#candidate|4225|(26,)|const|float32
const_4226 = relay.const([[2.596600],[-4.849227],[-7.495751],[-6.775198],[-7.355299],[-3.317830],[4.901977],[-8.099361],[0.303370],[-3.644042],[-7.230547],[-6.472912],[3.833194],[5.443683],[-4.761713],[6.189297],[3.758621],[-5.830567],[-1.048296],[6.556756],[0.821006],[2.246835],[1.777303],[2.484556],[7.600445],[-3.385595],[4.687911],[7.253145],[-1.946799],[1.004672],[-9.218745],[-4.785935],[-0.565259],[2.657388],[5.086361],[6.641651],[8.656219],[-9.236242],[-5.009869],[7.858010],[5.143062],[5.576582],[-5.387370],[2.373026],[9.112902],[-3.100812],[-3.918677],[-7.324256],[4.309902],[2.081360],[-8.421511],[3.261911],[-9.440921],[-7.669574],[-7.256063],[-2.883426],[7.125119],[-8.379397],[-9.359424],[5.731487],[-4.097248],[3.817837],[-3.903320],[0.740812],[-4.675069],[2.633614],[-6.027638],[-1.157351],[-2.597431],[4.451942],[-2.292901],[-6.795814],[-7.991905],[-5.271637],[5.368732],[-9.493085],[4.401172],[-6.854974],[7.863931],[2.688804],[-1.900392],[-6.079443],[5.056456],[5.455936],[5.330980],[-5.544939],[-2.593405],[-4.590653],[-1.978655],[9.334497],[-0.145100],[5.331509],[-5.814313],[6.976101],[-3.399728],[3.871430],[6.975193],[2.379207],[-7.700788],[-8.303153],[2.043087],[7.677585],[-0.607938],[-3.738440],[-9.090535],[-8.837183],[-3.267127],[-5.006016],[6.851983],[-2.750389],[-8.792040],[-7.879516],[-8.183192],[7.360463],[7.926450],[-1.046906],[-1.562717],[-8.053885],[3.031203],[7.266726],[2.336612],[-6.820240],[-3.809360],[-2.835847],[8.053185],[5.296268],[-3.706315],[1.676865],[6.398318],[0.970330],[6.229787],[6.015548],[8.680239],[-3.851902],[7.117538],[6.567727],[8.161730],[-8.165573],[-0.271921],[3.597917],[1.697313],[-3.625942],[-9.071381],[-4.908436],[-7.529004],[-4.325882],[-4.058856],[1.529103],[-4.338367],[-9.216661],[-1.804380],[-2.204044],[-1.850039],[4.999689],[9.137128],[-2.954327],[1.988899],[-3.875224],[-8.359087],[8.621849],[-4.963505],[-0.530127],[1.693396],[-1.865363],[4.994701],[8.835118],[-0.085753],[0.014359],[-4.361528],[-0.304677],[1.420732],[6.315674],[5.898952],[6.006742],[-6.028516],[-7.937188],[-3.167660],[6.716062],[-7.499635],[9.342159],[7.833798],[3.848292],[-2.789542],[-2.297298],[9.492152],[-8.862654],[6.512546],[5.327224],[3.425020],[-9.035322],[3.790089],[-6.063696],[-1.312549],[-2.009909],[-9.176166],[-1.338840],[-7.353554],[7.543144],[8.604792],[-9.063956],[-0.536099],[9.705243],[-5.054053],[-4.632549],[1.469076],[7.044748],[5.652365],[2.129338],[-0.593882],[0.377768],[1.523366],[-6.585012],[9.311553],[6.536873],[4.604633],[-5.974485],[-2.388767],[8.686369],[-9.323082],[5.810848],[-5.954283],[0.528718],[-5.035374],[3.902037],[-2.484505],[8.196805],[5.738466],[6.382674],[-5.808083],[8.961551],[-8.656352],[9.778433],[4.275475],[6.411665],[7.423441],[-8.659987],[-2.379814],[8.411773],[-9.949902],[4.586541],[0.420911],[-8.019440],[-3.151769],[-8.300394],[-5.957090],[-5.560761],[1.255511],[-9.265556],[-9.814076],[-8.921285],[-7.998970],[0.950698],[-8.151719],[2.706136],[-5.066744],[8.576326],[-0.591419],[-6.863818],[-0.572567],[3.169307],[-5.515031],[8.676218],[7.070524],[-2.708253],[-1.877427],[1.266879],[5.869381],[8.794019],[-4.350922],[-5.692928],[1.698640],[-7.771154],[-0.146171],[-0.872527],[6.173181],[3.575652],[3.379045],[1.675167],[-8.663942],[-7.349666],[9.444989],[1.908710],[-6.510660],[-7.812374],[-8.828487],[8.227094],[7.721607],[5.491872],[-7.785717],[-0.766155],[0.038640],[1.987226],[-0.376914],[3.734653],[9.287538],[4.464951],[-1.951371],[0.635745],[6.118784],[5.159110],[5.258930],[2.132846],[-8.394924],[-4.512392],[-0.696264],[6.317795],[-7.363454],[-2.498871],[0.353582],[-9.147761],[9.428755],[5.667535],[-0.674129],[9.696118],[0.889907],[2.325091],[0.629204],[6.168112],[4.223418],[5.623655],[-9.484052],[2.899870],[5.571781],[7.331399],[-7.148687],[4.875541],[-6.617823],[0.389795],[-6.789936],[-3.571938],[8.689193],[-8.603988],[5.087747],[-7.506113],[2.821128],[-8.707867],[-8.276347],[-8.995070],[-5.291865],[8.800345],[7.250064],[-1.715650],[3.573442],[7.208919],[-0.165097],[4.209239],[7.462390],[3.561953],[6.293121],[-0.947228],[6.985731],[-1.279747],[-0.518642],[6.228813],[0.381528],[7.168667],[-0.792146],[-4.722244],[6.422447],[1.102158],[1.568754],[3.987476],[-9.415362],[4.464384],[8.386234],[-4.590322],[2.565339],[-0.986586],[9.325531],[-9.569521],[-4.747875],[-2.460606],[6.199745],[1.905141],[-6.951342],[2.122630],[1.246410],[-1.391966],[4.377273],[-5.426523],[5.507748],[9.342650],[6.450373],[2.537912],[6.577294],[3.352352],[0.892186],[-6.751225],[-5.572621],[-9.148872],[-0.815987],[4.472040],[-5.423523],[2.274217],[4.962986],[-6.305173],[-9.178727],[0.389483],[-5.465276],[6.550208],[-3.331176],[6.296716],[-8.139358],[2.841895],[1.870423],[6.772787],[3.635985],[-1.903787],[-8.055421],[3.353442],[4.742227],[9.638702],[5.433649],[0.041665],[9.569892],[9.121386],[-4.434031],[7.578917],[9.426117],[6.722481],[-1.905571],[-4.978840],[5.694943],[-8.009244],[7.847778],[-3.629588],[6.483324],[-7.742768],[-2.039801],[-0.711173],[-5.157616],[-4.901657],[8.577438],[0.427056],[-2.267917],[7.114674],[3.741313],[-8.898457],[-5.783066],[7.505892],[-8.936800],[-4.706504],[3.281288],[-2.612164],[2.817257],[9.195524],[-5.207736],[-3.160499],[2.599555],[-3.231691],[-6.682011],[3.425356],[-5.631850],[1.445737],[-4.594143],[-2.641494],[-6.215690],[-3.827499],[8.574197],[0.339441],[-1.773945],[5.627210],[-3.814959],[-8.223760],[8.574189],[0.940095],[-5.524066],[-4.576470],[-1.171631],[-6.877307],[-0.534398],[1.034162],[3.693701],[-2.961082],[-6.079576],[9.570497],[-3.056769],[-3.964832],[-8.886733],[-2.964063],[6.229059],[-1.444180],[-2.135317],[-1.009071],[-7.768979],[5.771909],[5.848405],[9.624224],[2.914656],[-8.130490],[2.159185],[-1.777790],[-7.116980],[4.790240],[5.953576],[-3.673334],[5.063587],[-3.211324],[3.857474],[0.923608],[3.751323],[-6.891684],[6.354818],[-2.227922],[3.708038],[2.187429],[-9.129832],[-6.371695],[-2.475153],[-6.104718],[-2.006624],[-2.208512],[1.580277],[5.467569],[-4.947967],[-6.872678],[-0.819228],[-3.589072],[-0.637370],[-0.605275],[3.484704],[-8.703577],[0.880805],[-6.513477],[-7.496921],[5.378696],[-4.115671],[3.567767],[-9.975129],[-4.313751],[9.263816],[0.668494],[-1.759670],[5.875539],[-5.899459],[-7.022748],[1.714967],[2.218703],[-3.197132],[-4.657373],[-8.448118],[1.820635],[-6.073527],[-5.672474],[7.762422],[8.166230],[5.471568],[-4.217417],[-1.786282],[-4.480552],[7.487191],[9.144340],[-8.449405],[0.825554],[-1.875427],[8.329402],[3.273972],[4.580809],[0.628440],[0.745219],[1.298432],[5.816598],[5.434921],[-7.117959],[-3.954499],[-3.778235],[9.794282],[-9.123999],[-6.167103],[-8.196653],[-1.601204],[-7.818798],[-3.967329],[8.191769],[1.222852],[4.446259],[0.902868],[-5.575376],[-7.813269],[-9.140263],[6.422117],[0.754199],[-6.324027],[-3.553097],[3.697654],[-6.856679],[7.620723],[-3.510260],[-8.940561],[7.921817],[-4.283312],[-4.963232],[-4.148134],[-4.780885],[5.148123],[8.452708],[6.936814],[-7.237355],[-1.553041],[-6.159337],[9.462568],[7.050943],[2.275464],[0.238260],[0.264619],[-0.802525],[6.598952],[9.593256],[4.207066],[-8.628222],[6.363522],[8.203095],[-7.934162],[-7.095487],[1.629814],[0.242815],[5.885100],[8.185779],[-9.739373],[7.158435],[0.497733],[5.659650],[-1.387357],[-6.728762],[-7.873199],[0.534600],[-5.053787],[-8.270940],[-9.248814],[-5.267263],[0.149651],[-0.268698],[-4.106608],[-4.964401],[-5.005800],[2.951281],[6.687558],[-2.884064],[2.119433],[2.661430],[-1.780855],[0.821497],[3.236031],[3.396359],[8.980767],[4.940042],[1.427907],[3.913822],[2.002813],[-1.841975],[4.504262],[-7.980550],[-6.290120],[8.843893],[9.123633],[7.363936],[6.773048],[1.531607],[-6.586253],[-6.536403],[-8.852861],[9.233642],[4.405061],[1.596403],[-0.246801],[2.815177],[0.554999],[-2.209182],[-6.685504],[-0.039504],[-5.760997],[9.060724],[-2.025234],[-6.085684],[-7.421085],[-0.779212],[8.531515],[-0.473196],[2.237868],[3.016328],[-2.218708],[4.249736],[-6.948196],[2.937953],[4.083648],[1.130165],[-9.251777],[3.596498],[1.615169],[9.960551],[-0.799777],[-8.334439],[1.051772],[5.949544],[-1.193265],[-5.877130],[0.554409],[1.925397],[1.638055],[-7.606627],[-6.418565],[-5.334807],[6.340183],[3.845250],[-4.124688],[-0.125828],[7.806500],[-4.887575],[8.450649],[4.288771],[-2.472405],[-1.078822],[9.514637],[-3.911187],[8.725617],[-7.514240],[-6.073909],[-8.018428],[-1.698538],[-1.818694],[-2.664634],[-3.398887],[4.183576],[3.964322],[-9.741301],[-1.597335],[-4.740983],[-5.191138],[-6.253369],[5.066879],[9.155449],[1.904289],[-1.244688],[0.285876],[-0.122813],[3.211515],[-2.822740],[-3.397642],[-1.757792],[6.370443],[-9.508868],[-1.155402],[-8.757345],[-4.585842],[5.013554],[-3.685243],[3.664579],[-0.848527],[1.516231],[6.888227],[3.701535],[2.511573],[-1.572826],[3.935244],[5.369582],[0.336171],[-2.568104],[-5.924175],[-1.712097],[-8.727586],[-7.263674],[-0.075810],[-1.021390],[-8.064957],[2.526008],[1.640589],[-9.381993],[-4.415816],[-3.911690],[-0.426685],[-6.984208],[5.072548],[2.502958],[-9.843281],[1.405204],[4.365946],[1.363239],[8.178142],[-2.519637],[-2.535480],[2.841790],[-9.637757],[-3.211147],[-8.137438],[-9.718916],[-8.431442],[-2.163296],[3.734110],[6.189540],[2.711936],[-6.645574],[3.578306],[7.766882],[-7.434397],[-4.085764],[9.568956],[-0.454305],[9.510702],[-3.329370],[-9.802000],[-8.270433],[-6.433228],[-1.902221],[-8.769721],[1.311836],[-4.532606],[-6.363677],[0.790326],[6.905512],[0.465733],[-8.325099],[7.904309],[-7.444141],[9.456147],[3.425510],[8.943927],[-0.132206],[-4.881646],[-5.414661],[8.365992],[4.226417],[8.575802],[3.216789],[7.649522],[-1.018395],[-4.674396],[8.552756],[-6.450580],[-3.957780],[-6.848347],[5.541951],[-0.268805],[3.949828],[-5.519562],[9.062946],[7.478550],[-5.723325],[8.299900],[-8.820409],[-2.188210],[9.987857],[5.638195],[-0.460661],[5.094896],[-5.115106],[-4.102951],[5.386712],[5.017244],[-6.347923],[-8.726427],[8.496171],[-1.387616],[3.400057],[9.101190],[-1.515576],[-3.441854],[-9.437073],[-7.102136],[6.578005],[-8.498360],[1.077360],[6.860796],[2.215096],[-9.266143],[4.309026],[0.337018],[-7.810032],[-1.187713],[6.006459],[4.177979],[5.699493],[-3.798739],[-5.280367],[-4.874038],[-1.138238],[9.270645],[-9.552069],[-2.245851],[7.804387],[6.880736],[-9.923225],[-0.212284],[-6.422367],[-8.026076],[-8.271422],[1.718307],[1.231017],[-3.300000],[-3.400101],[-1.320052],[9.882187],[-0.784717],[-7.958692],[9.216830],[5.867492],[-6.542186],[5.393080],[9.302850],[3.944980],[-2.866194],[8.388334],[1.553892],[4.183860],[-3.773442],[2.297918],[-7.681422],[-8.573064],[-7.564127],[2.605195],[8.868445],[-9.497582],[-3.970502],[-6.079701],[7.356436],[8.655268],[8.146560],[4.381699],[-0.575172],[-6.460944],[-0.196389],[5.729239],[-8.802636],[5.733808],[-3.409092],[-9.032643],[-6.832166],[-6.212377],[5.650868],[-1.785669],[-5.788670],[-8.057650],[-3.611686],[0.461888],[-7.072685],[-7.104884],[9.701528],[0.435150],[0.899354],[-8.548658],[8.189342],[4.462142],[4.127920],[2.265613],[-8.003428],[6.866653],[0.647278],[2.360253],[5.352746],[-2.725641],[-5.354887],[-2.650038],[-4.020941],[-8.515432],[-7.003878],[-2.024712],[3.551169],[7.037654],[2.813093],[8.016100],[-2.112152],[-3.690642],[-3.527479],[-8.208823],[-2.562724],[8.154991],[5.468306],[-7.428005],[0.796729],[4.305830],[1.082725],[-7.299578],[-2.623771],[4.178243],[-2.425863],[7.903545],[8.035904],[-9.268088],[6.388501],[6.322510],[-8.649791],[9.574905],[-1.132640],[6.984091],[-3.592834],[-0.393065],[-2.959778],[-2.922152],[-1.510067],[-6.742130],[2.483582],[-8.455591],[-3.183884],[-6.326710],[4.969749],[6.792294],[3.093580],[9.482683],[4.594946],[8.261064],[6.770380],[9.299978],[-6.670538],[-0.098156],[-0.314687],[9.774771],[8.420702],[-2.529113],[6.963383],[3.664886],[6.048724],[-2.843908],[4.556091],[-8.468064],[-2.857764],[-6.358501],[7.875024],[-8.226945],[-9.776710],[4.061334],[6.459804],[-5.665008],[-2.577021],[-6.509427],[6.099917],[-4.383230],[3.551270],[2.959949],[-3.214187],[2.997280],[-3.524568],[-6.659418],[2.129503],[2.363643],[-4.661366],[-6.652204],[-0.566530],[-6.039297],[-6.939805],[-6.307933],[-1.956690],[-0.796566],[2.140186],[8.666059],[1.709373],[-4.313832],[-9.670491],[-8.563797],[1.226382],[9.194187],[-6.946872],[-1.341651],[-6.457142],[7.249059],[0.374191],[8.495857],[-1.091013],[7.239757],[7.367330],[1.982825],[1.485632],[-0.011706],[-3.580544],[-2.341992],[7.208226],[6.148809],[2.447475],[-2.439839],[-0.363724],[-0.135915],[1.443350],[-9.156953],[0.625204],[8.937999],[-3.266776],[-9.769438],[-7.256158],[3.581404],[1.330333],[4.261135],[-5.474301],[-9.629965],[-8.845379],[4.928854],[-6.842920],[-6.867980],[3.852722],[7.098517],[3.418706],[-9.778504],[8.021849],[7.116866],[0.670142],[-2.956304],[-3.913718],[5.020889],[0.136581],[1.407415],[-1.954255],[-8.204431],[-5.558960],[-2.901732],[3.768984],[2.292855],[-3.981174],[-8.255239],[-2.301152],[-7.392955],[6.088463],[-0.133122],[-8.686668],[-9.248665],[4.446754],[8.265614],[-6.255203],[-3.714733],[-2.096092],[2.555062],[-6.016726],[-3.878419],[-4.341797],[-0.758784],[1.498842],[-0.627902],[2.001078],[-9.215994],[9.590715],[3.214409],[-1.393407],[-4.423463],[7.452246],[-4.022409],[-4.590882],[6.676360],[-8.944012],[2.954103],[5.926314],[7.087530],[-5.127081],[3.259454],[-2.074687],[8.849155],[-9.951900],[-8.069544],[0.722593],[3.894317],[5.698549],[0.486708],[3.782335],[-8.672940],[-4.855340],[-3.445956],[7.058827],[-2.894787],[-4.522707],[3.563689],[-2.950004],[-2.246228],[-7.309154],[4.520872],[6.599665],[-4.475740],[-4.525821],[-0.779004],[-1.962273],[4.727119],[5.275144],[-7.978419],[7.574041],[-2.911251],[-5.704187],[-3.621418],[7.950393],[5.156630],[4.566995],[6.717519],[-2.446564],[0.695813],[9.953480],[-9.408272],[-0.904017],[4.941279],[-0.814132],[-7.192774],[-1.590409],[7.407812],[1.695819],[7.051166],[-2.170136],[-1.099918],[-5.610867],[-6.828918],[3.715286],[6.430165],[-3.913606],[-8.245656],[-9.309640],[-3.902560],[-5.601631],[-2.373035],[8.751230],[5.488090],[-9.221118],[1.850590],[-7.612183],[-1.259891],[-0.740268],[7.708282],[7.053420],[-2.947433],[-5.285555],[-7.904553],[-3.053258],[3.445367],[-6.691739],[-8.320826],[3.628973],[-5.212325],[-5.540975],[-5.388226],[4.753558],[4.801031],[-1.158826],[5.141945],[-1.037892],[9.056491],[-1.483007],[3.634576],[-9.272506],[0.197696],[-4.088097],[-4.826949],[-1.994529],[0.833882],[3.010494],[6.602549],[9.449292],[-5.269106],[9.998501],[1.926764],[4.020662],[-7.690970],[-7.843450],[1.078875],[3.447225],[9.981251],[-7.686340],[4.073476],[-0.605097],[8.051012],[0.910315],[-3.820230],[-8.603088],[-6.066737],[-6.517467],[5.592926],[-0.324523],[-3.168270],[7.743931],[3.598372],[-1.003266],[-5.886374],[-1.187439],[1.421148],[3.723096],[-7.105594],[4.608463],[6.316064],[8.097448],[2.936820],[1.585651],[-2.931077],[4.604973],[-5.949108],[-9.132649],[0.363389],[4.262266],[5.428494],[5.706034],[-5.970629],[0.141851],[2.881065],[-6.137051],[-7.329363],[-1.789894],[7.613236],[-4.402500],[4.742809],[-4.242408],[-9.881120],[9.629255],[-3.491497],[-3.008055],[4.391108],[-6.933156],[-8.278470],[-3.082031],[1.773737],[-6.771406],[7.857303],[3.320935],[-9.569695],[-4.296063],[8.440118],[8.381443],[6.258529],[2.164555],[3.304794],[8.762866],[-2.097346],[1.182885],[4.242838],[-5.347554],[-9.435097],[9.357875],[-6.560046],[-1.576958],[-2.856320],[-2.044341],[-2.927336],[-0.940193],[9.226824],[7.503227],[5.366952],[5.445315],[-8.180633],[-1.044973],[-5.625223],[-6.152035],[6.878873],[-6.433345],[4.326014],[-9.908018],[4.159750],[1.760864],[-8.986584],[8.736276],[-7.172804],[4.610324],[2.754019],[8.074012],[4.144712],[-4.719708],[-1.616846],[-0.368663],[-6.110011],[2.129544],[6.296653],[0.644538],[4.832349],[-4.427449],[-8.394883],[8.672246],[-1.901614],[-8.974446],[2.804187],[-6.158482],[7.572435],[-6.374445],[2.397061],[5.976957],[-1.910102],[5.265558],[-7.040425],[-6.155098],[-6.417209]], dtype = "float32")#candidate|4226|(1365, 1)|const|float32
call_4224 = relay.TupleGetItem(func_1091_call(relay.reshape(const_4225.astype('float32'), [2, 13, 1]), relay.reshape(const_4226.astype('float32'), [1365,]), ), 1)
call_4227 = relay.TupleGetItem(func_1095_call(relay.reshape(const_4225.astype('float32'), [2, 13, 1]), relay.reshape(const_4226.astype('float32'), [1365,]), ), 1)
func_320_call = mod.get_global_var('func_320')
func_323_call = mutated_mod.get_global_var('func_323')
var_4237 = relay.var("var_4237", dtype = "float64", shape = (1, 220))#candidate|4237|(1, 220)|var|float64
call_4236 = func_320_call(relay.reshape(var_4237.astype('float64'), [5, 11, 4]))
call_4238 = func_320_call(relay.reshape(var_4237.astype('float64'), [5, 11, 4]))
uop_4239 = relay.cosh(uop_4189.astype('float64')) # shape=(4, 12, 8)
func_1921_call = mod.get_global_var('func_1921')
func_1924_call = mutated_mod.get_global_var('func_1924')
const_4244 = relay.const([2.136183,5.033587,3.417804,4.372974,-3.268363,-2.852401,-6.509768,0.217552,-9.863668,1.009407,2.374071,-0.709529,-2.047299,3.771498,-8.548842,1.450360,8.709282,0.798316,0.639625,-1.039559,3.889274,1.979691,7.601961,-0.738888,5.464607,-1.493951,1.143436,1.480602,8.431354,4.854518,2.037439,-7.110529,-2.759484,6.746314,-0.910972,7.493954,8.119589,-1.409637,7.581376,-8.283965,-2.222869,-9.337838,-6.042913,8.511511,-9.084675,8.216223,8.682897,-3.427294,5.018289,-1.315131,8.159428,-8.301683,-5.730337,-5.529771,7.856677,5.508239,0.388465,2.973024,2.887169,-4.683122,-2.786664,-9.846287,0.064280,6.702686,-6.972152,-6.709691,4.967403,-2.303010,0.213757,7.227027,-2.870051,-6.718057,-9.981880,3.799138,-0.292590,1.963526,1.507120,8.775527,-8.499771,-5.784926,-6.609285,5.679067,7.484675,8.681211,-4.712470,9.955928,4.686524,-4.932046,-0.917957,-1.620518,5.726039,1.324892,7.851092,0.152424,4.008081,-4.951613,1.232808,8.540175,-0.874454,3.655933,7.125599,3.829926,0.241732,2.829301,6.685411,-6.033090,2.720560,0.756084,-7.784141,3.790396,-4.937673,9.922308,4.867499,-1.952642,-2.083648,-8.054141,9.930495,-9.944530,4.484271,-4.968879,6.272727,-9.149546,-2.650462,4.948044,-1.711830,-4.921315,0.589896,-7.779651,-0.028173,-5.392165,0.110780,-5.611827,-8.634604,7.392213,-5.566761,-1.206327,-6.008333,7.762796,-0.819124,-9.695874,5.472129,-6.832580,-6.962259,5.341887,1.720312,0.752318,-5.884117,0.730550,0.600472,-8.352689,-4.955497,4.547385,0.866161,2.607298,-9.777636,1.632058,-9.691040,-7.515650,-0.348021,8.804188,7.076307,-7.041108,3.760363,-6.120475,-9.998468,-0.510479,0.895665,-2.638815,-8.265261,-2.611328,1.658820,-8.796853,8.107674,-3.689943,-4.952683,-1.669038,4.537664,2.193937,-8.965299,4.510608,7.748584,-3.599225,5.924808,2.084152,-3.860736,-9.957653,7.377146,-4.640907,6.241355,1.723676,-1.239071,8.958297,-4.434646,-6.784029,-0.390364,-0.761895,-8.435888,-4.313182,3.942832,4.420902,-6.919528,8.977298,5.692115,-0.257395,-3.565645,-3.456135,4.496135,-8.685489,2.105898,9.367607,-5.765512,0.825186,-1.760623,9.174147,9.764180,8.073193,-4.969932,-4.823657,-1.795290,4.462680,-7.530095,-7.431968,1.061490,3.675416,9.101156,6.623719,-6.248698,-7.832887,-1.410330,-7.066328,4.735402,7.764667,-4.777587,6.106218,2.906490,-5.135543,-9.565295,1.578535,6.273067,-9.946019,6.400215,9.948477,-5.392212,-4.826934,1.568502,1.535319,3.935169,-9.847983,-4.306107,-6.764718,-6.641175,4.685538,1.615228,5.733227,6.897757,-6.185758,3.903431,1.422361,6.862626,-0.093595,-7.226026,5.707098,5.083514,-9.443962,5.737060,9.226651,5.968815,5.657697,6.013327,5.077844,-4.693095,-6.595038,0.001680,-0.651797,6.776439,8.460715,-3.334183,5.126059,1.734790,8.729740,4.686854,-8.571162,0.245174,5.413689,-7.772391,2.837747,-0.470215,-5.212797,6.557142,6.276211,-3.882706,0.641177,7.066200,-7.366388,-4.070580,-0.625970,-4.032459,-4.488955,-8.481622,-8.351558,-2.091717,6.037888,2.289841,2.307226,-3.883738,-4.613691,9.301163,4.054110,-1.048324,4.084614,4.102753,-9.668341,4.441238,6.865881,5.473666,-8.082355,-3.348041,-1.366858,-9.706296,-4.766473,-0.476581,7.052935,-4.055701,6.168554,-7.140978,5.073678,-8.785561,9.873821,-0.997761,9.741958,-9.324439,-4.009643,1.360390,4.502096,-1.635648,0.195034,-8.360093,-0.547644,6.380586,0.040791,2.358080,-6.902805,2.919802,2.222992,-2.337100,4.732740,-3.278073,5.572131,-1.003374,3.582627,3.460548,-8.213337,2.753578,-8.763252,-1.326043,-0.169882,9.407552,6.497754,-5.807126,-7.166065,7.642425,-9.212749,2.720407,3.095200,-9.126816,-4.036748,5.284017,5.452256,-0.529127,-1.885652,3.160059,-3.267637,3.781273,8.542763,-1.428132,-3.356028,9.267679,5.876795,5.882464,0.324420,-0.513746,6.028000,-7.277956,-0.371114,-4.515346,0.668184,-9.156900,-4.544181,6.616835,2.635319,-0.866210,5.613238,-2.240439,-4.024730,8.180340,9.647932,-5.180680,-1.939915,5.332695,0.784782,3.861175,-3.172170,-2.311633,2.682034,-1.241786,7.037252,-8.209757,9.945117,3.018873,-4.170647,9.583896,-5.496472,-5.331803,-8.189786,-2.755629,-0.730162,-8.603842,2.770058,9.235203,-3.510029,7.017182,-5.301913,-3.574402,5.667458,-2.527563,-7.796533,1.896157,3.220276,1.888995,-7.987418,9.757903,6.124459,0.341368,-9.386233,4.498634,-4.597161,-1.895021,5.708856,-8.067674,-6.696943,-4.776260,-9.986354,-7.351703,-9.346730,8.683661,1.502012,4.488316,-1.479584,8.135149,6.850338,9.834362,8.013182,7.390187,-9.755685,7.117769,-5.637995,-7.143125,-6.239027,-0.990606,-5.544439,8.635332,-0.954117,7.288020,0.550602,9.797901,6.245476,-1.339320,-6.567598,4.786118,-9.702399,3.954117,6.459238,8.774668,-0.841496,-0.175298,-3.923661,-7.645300,-4.518361,2.259219,-7.201977,-8.520777,-5.615054,9.382832,-2.690179,3.830164,6.473817,7.404525,-7.015934,-5.088272,-2.142521,-6.689101,-7.887896,0.663679,-8.369129,-4.574960,0.126990,-7.854248,-7.630760,-3.588174,7.685492,1.517181,7.720395,8.969317,9.551766,-6.343439,-9.865358,-4.808525,-8.013546,8.049428,6.075836,7.472983,-6.403715,-2.704686,8.750912,-4.165698,-4.581398,-9.877687,-8.573462,-2.482005,7.753394,-3.404653,7.314893,3.175987,-9.669144,-2.949057,-2.014659,2.185052,9.816571,7.124309,-3.266038,4.912447,6.886338,-5.341575,1.739374,-0.492307,-3.253938,-2.569637,9.129843,1.540631,-9.923949,4.322919,9.615590,-9.369686,-6.548576,-0.561249,7.008729,-5.639474,3.348725,-1.041255,6.577290,8.373152,2.466411,7.737650,9.784275,7.516227,-3.737032,1.037545,6.068763,-3.901383,2.685047,-2.910996,3.029211,-3.789040,-9.145449,8.683271,3.502212,2.096662,9.335099,7.776181,8.617192,-4.862682,-1.311082,1.432653,6.634230,5.498843,-5.611113,2.192927,-5.420954,-5.030899,0.630885,-6.208793,3.611278,2.654511,-1.380193,7.639881,1.662506,2.031523,7.410392,4.024424,1.807305,-1.666449,7.014550,9.688683,0.373918,-7.186653,7.722947,1.157424,-6.910917,8.875797,5.876483,-7.397841,0.419273,-4.845779,-9.523252,4.907543,4.056549,-3.325111,-3.561218,-5.808758,4.747185,-9.012070,-3.945220,2.149462,-8.820601,8.240871,-1.482929,4.854353,-4.264143,-0.056798,1.523272,-3.651861,9.861963,9.971056,-6.146453,8.765190,-0.369172,-4.281395,7.630538,8.624067,2.692899,-2.845907,-4.353769,1.800885,5.219579,-3.532810,2.001983,8.576839,6.125924,-8.066631,4.953251,3.590443,7.161055,-3.453124,-4.428482,1.667592,-8.212387,6.753728,9.268666,7.949339,-9.169463,2.429809,-8.820439,6.931123,-3.304661,0.528261,7.287227,0.897037,4.882286,-2.412688,-8.009116,1.160294,4.420097,9.447346,5.218472,6.549852,-8.748775,0.599238,-4.322733,-8.538207,0.814847,-6.695085,0.617645,3.769928,2.632930,-9.654549,2.174333,-5.308679,-4.929579,0.856450,7.550912,8.758324,-4.579095,-1.875124,6.465386,6.687657,3.504976,-9.426273,2.019945,2.735932,7.421323,-2.366204,3.460179,0.780738,0.323684,7.057496,1.216083,-6.413163,4.132585,-2.520393,-6.910391,3.962622,3.806293,-3.009465,-2.538996,8.262628,4.530708,-9.529403,2.358040,-3.748510,6.432410,6.719366,-4.252855,-5.842313,-4.672726,1.344064,-1.724478,-2.574804,-7.438383,-1.531349,-2.433087,-2.370384,-2.136810,-4.135922,-4.672532,-1.931599,-0.607449,-5.854631,8.640020,8.663130,-3.468930,-9.303712,7.213141,-2.425305,4.050961,-5.873633,1.395141,0.460762,-7.912187,0.180606,-1.690656,-1.651577,7.598426,-3.951775,0.790675,-7.412240,-3.147312,-0.157669,-6.119196,4.302703,5.272306,5.296226,-8.632693,-3.280630,6.655982,1.572636,4.758961,-9.896950,-1.918538,-8.470683,-4.881309,9.206040,2.157100,2.779443,9.368368,-8.033781,-5.624660,8.602862,-4.585724], dtype = "float64")#candidate|4244|(768,)|const|float64
call_4243 = relay.TupleGetItem(func_1921_call(relay.reshape(const_4244.astype('float64'), [6, 16, 8])), 0)
call_4245 = relay.TupleGetItem(func_1924_call(relay.reshape(const_4244.astype('float64'), [6, 16, 8])), 0)
uop_4248 = relay.log2(uop_4239.astype('float32')) # shape=(4, 12, 8)
output = relay.Tuple([bop_4171,var_4195,var_4196,bop_4208,call_4224,const_4225,const_4226,call_4236,var_4237,call_4243,const_4244,uop_4248,])
output2 = relay.Tuple([bop_4171,var_4195,var_4196,bop_4211,call_4227,const_4225,const_4226,call_4238,var_4237,call_4245,const_4244,uop_4248,])
func_4252 = relay.Function([var_4169,var_4170,var_4195,var_4196,var_4237,], output)
mod['func_4252'] = func_4252
mod = relay.transform.InferType()(mod)
mutated_mod['func_4252'] = func_4252
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4252_call = mutated_mod.get_global_var('func_4252')
var_4254 = relay.var("var_4254", dtype = "float64", shape = ())#candidate|4254|()|var|float64
var_4255 = relay.var("var_4255", dtype = "float64", shape = (4, 12, 8))#candidate|4255|(4, 12, 8)|var|float64
var_4256 = relay.var("var_4256", dtype = "float32", shape = (28, 4))#candidate|4256|(28, 4)|var|float32
var_4257 = relay.var("var_4257", dtype = "uint16", shape = (1872,))#candidate|4257|(1872,)|var|uint16
var_4258 = relay.var("var_4258", dtype = "float64", shape = (1, 220))#candidate|4258|(1, 220)|var|float64
call_4253 = func_4252_call(var_4254,var_4255,var_4256,var_4257,var_4258,)
output = call_4253
func_4259 = relay.Function([var_4254,var_4255,var_4256,var_4257,var_4258,], output)
mutated_mod['func_4259'] = func_4259
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4474 = relay.const([[[-5],[-1],[8],[3],[2],[-8],[2],[-2],[6],[-2],[-5],[8]]], dtype = "int8")#candidate|4474|(1, 12, 1)|const|int8
var_4475 = relay.var("var_4475", dtype = "int8", shape = (10, 12, 1))#candidate|4475|(10, 12, 1)|var|int8
bop_4476 = relay.not_equal(const_4474.astype('bool'), var_4475.astype('bool')) # shape=(10, 12, 1)
bop_4483 = relay.logical_and(var_4475.astype('bool'), const_4474.astype('bool')) # shape=(10, 12, 1)
func_2819_call = mod.get_global_var('func_2819')
func_2823_call = mutated_mod.get_global_var('func_2823')
const_4491 = relay.const([-1,9,-4,-5,-4,7,-4,9,-9,-7,10,-9,9,-9,3,6,-2,-9,5,-9,4,6,4,8,-4,4,-4,-8,-9,6,5,-9,9,5,3,-7,-3,6,8,1,-7,-5,2,-6,4,-4,-7,10,-2,-2,-1,3,-1,1,1,3,-1,-10,6,3,-1,-1,-1,-4,7,7,6,2,-6,-1,7,6,-6,8,-6,4,-7,6,5,10,-8,10,6,5,4,-3,-2,8,7,8,6,-9,-6,-2,6,4,10,10,-7,10,-1,-4,-1,-8,6,-10,-9,-7,5,-9,1,5,-9,-7,-9,10,9,-2,-4,-9,-8,5,9,6,9,-4,-1,10,-3,-8,4,-2,-10,5,7,-6,-4,-4,-3,6,-6,-2,1,-6,-1,-9,-2,9,-9,8,10,-1,-7,5,7,-9,6,-1,5,3,4,10,7,8,4,2,-3,6,9,-9,-7,-1,-2,-1,-4,1,-8,-3,-10,3,-8,8,7,3,-9,4,1,-8,2,9,6,3,1,-1,7,-5,-10,-8,8,4,-4,-3,8,7,3,-5,8,-4,-1,1,10,3,-8,-8,-2,4,-3,-10,-10,-10,-7,-3,10,-3,2,-9,10,2,-4,-6,5,2,-9,-8,3,6,-10,2,-6,-2,-3,-1,-2,-2,-5,3,-10,-5,-9,-2,10,2,-6,-3,3,1,4,-8,-4,3,1,-9,-2,4,9,6,3,-1,-4,1,10,1,3,2,-10,-7,2,-3,-2,8,2,-1,1,4,-6,3,9,2,3,-9,9,-7,-2,7,-7,5,8,4,8,7,7,4,3,-5,-7,3,-10,9,1,8,-1,-7,9,-10,-3,4,8,3,-3,-2,-3,-8,-5,7,-1,6,-9,10,-6,8,-9,9,-2,1,-1,6,7,-6,-9,10,1,-3,-1,-10,-5,-6,3,-4,-8,-10,9,2,10,-10,-3,10,-6,-6,-7,-6,5,9,-7,-2,-1,3,-10,5,3,8,6,3,2,9,-4,-2,-6,8,5,10,4,-5,8,-4,-5,-10,10,-3,3,-2,8,7,-4,-1,6,-6,-7,-7,-2,10,3,8,-3,8,4,4,-3,-10,-7,7,-2,-6,-5,-6,3,-4,-5,-4,5,6,-9,5,-1,-10,-4,2,1,7,-10,-4,-8,-3,-3,3,6,-9,-10,-8,7,-7,-4,-1,6,2,-10,3,7,10,1,-7,-3,-4,1,1,-2,1,9,3,-9,-3,3,6,10,-9,-1,9,-5,6,7,-3,8,-6,-3,2,6,-2,1,-1,6,-3,-8,-3,-9,6,6,6,-3,-1,-3,-10,-10,10,-10,4,2,-7,2,-3,8,-7,-9,6,-7,-8,-2,9,-1,-3,1,1,5,-6,-7,-7,8,-9,9,9,-4,4,7,6,-4,3,4,-3,-3,5,-5,4,8,-2,-9,-1,-8,-9,-10,-5,3,4,-1,8,5,3,-8,5,10,-3,6,4,-10,-1,7,7,-3,1,7,5,5,-3,-4,-10,-4,5,-10,-6,-3,1,4,-2,-2,-8,-2,-2,-2,9,1,-10,6,-7,-6,5,1,-9,-7,-9,-4,7,-1,-3,3,-8,-5,9,6,6,-8,-3,-10,-3,5,-5,10,-7,2,-5,3,-9,-4,10,4,-5,-8,1,-1,4,-8,-5,4,9,-1,8,10,4,6,7,1,-4,2,-8,2,9,2,6,7,1,4,5,7,-9,5,-4,-1,7,4,6,-7,3,10,-7,-7,-6,8,-6,-1,9,-4,-4,1,-6,-5,10,7,3,-5,6,-9,-4,4,-1,4,10,-4,2,-6,-10,-1,4,4,-7,10,-2,6,5,5,-4,5,-8,10,4,-8,-8,-7,-9,2,1,-1,-2,-8,-8,10,-3,-8,7,10,-6,8,-9,8,7,8,-3,-10,8,9,-10,-10,7,-3,-7,-6,3,-7,-10,-10,5,2,7,-3,9,-2,5,3,9,-6,10,9,5,-6,1,1,-4,-3,4,-9,-2,-1,5,6,-1,10,4,5,-5,6,6,1,-10,-2,-2,7,-4,-8,-4,2,-9,-5,4,-4,-10,7,6,6,2,-10,3,-8,-8,5,-5,7,3,-6,-3,-8,-1,-9,-4,-4,-4,-3,-4,3,1,5,-7,7,6,7,-8,-2,-1,-7,-5,3,9,-8,9,4,9,4,-4,6,-8,9,9,4,-4,6,6,-1,-5,6,8,4,3,-3,-2,-7,3,6,-9,1,3,-1,9,2,10,-8,1,-8,-3,-9,2,-3,2,-7,10,-2,-7,2,8,-10,3,7,-1,6,5,-8,1,-2,-3,-6,6,7,-5,-9,-2,-9,6,-7,-10,10,-10,4,2,-6,6,-7,2,-8,-3,-7,-6,8,-4,-1,-9,2,1,-1,-6,7,1,-6,8,-9,3,-7,-4,-2,-1,-3,-6,-10,-2,10,-9,10,1,-2,-10,-3,7,-1,-5,9,6,6,6,-8,8,8,7,7,2,10,-10,-6,-10,-8,-9,-1,-9,-8,-7,-5,8,-2,1,-2,9,-6,4,-6,8,9,10,-6,-9,4,-3,-10,-4,6,2,-10,-10,1,-10,-8,4,-8,9,3,-8,-3,8,2,8,9,5,-2,-10,1,-4,10,8,2,2,5,-2,3,-2,6,-2,-9,-6,4,-7,-8,5,9,-6,1,4,-9,4,10,6,7,1,-5,-10,5,-7,8,-8,7,8,3,-4,2,-4,-6,-6,-8,-3,-6,-3,10,-1,-2,-5,-7,7,-7,-2,-10,1,9,-1,4,2,-6,-10,-5,-5,2,-7,5,8,-4,-10,9,2,-9,-6,8,-5,-3,3,6,6,-9,6,7,-5,6,-5,9,4,-2,-2,-10,-7,10,2,7,5,-3,10,-4,-10,2,-7,5,-8,-6,7,5,-9,-3,2,-3,6,9,3,-10,-6,-8,-3,6,10,-10,-8,-3,2,1,8,3,7,1,-5,-3,-5,-4,6,8,4,4,-2,8,-5,-10,-3,8,-4,10,-1,-2,7,-5,-8,8,-10,3,-9,6,9,6,10,2,4,7,8,-2,-5,-6,9,-4,-6,10,7,-1,5,-10,3,1,7,-1,-5,-8,1,5,9,8,8,3,6,-4,1,-6,-8,-2,-2,10,7,2,-1,7,-8,-5,2,4,2,-9,-3,-9,-9,-6,3,2,3,7,1,-3,-10,-5,-8,10,-6,7,3,10,7,7,-3,2,-3,9,-7,-2,3,-9,8,-1,10,6,3,7,2,-2,3,1,6,-9,-2,-8,-2,-4,-6,-7,-4,-10,-6,1,-3,5,10,1,5,7,-4,-10,1,7,2,4,6,5,2,-4,-10,2,-6,-5,4,-6,-6,5,2,-5,-9,-2,-4,8,4,3,-10,5,-8,5,-10,-2,-9,6,-2,-8,1,-3,7,-4,-3,7,2,9,10,-3,7,9,-4,-1,-5,7,-9,2,4,-6,-3,-10,5,-6,-5,9,4,-10,-2,-7,10,-6,4,4,4,-5,-5,3,-6,8,7,3,-5,2,-6,8,-2,-4,2,4,-9,4,-6,7,5,-1,-3,6,9,-9,6,10,10,4,-1,-10,9,-8,3,7,3,4,4,5,-7,-8,-10,1,-2,5,-5,-6,1,1,1,5,6,9,-9,-3,9,-1,2,2,-9,7,-2,-10,9,10,-9,-4,-4,5,9,10,-3,-6,5,9,5,-9,1,3,-3,1,-5,7,10,-5,-1,-7,-5,7,3,3,-2,-6,-6,-4,-1,10,-2,7,8,10,-6,4,-10,-1,-9,-10,1,-5,-6,-5,-5,-2,2,8,-9,1,-5,-7,8,-7,-6,-7,4,1,2,-6,-1,-4,6,-2,10,2,-8,10,9,-4,-6,-2,-4,10,-9,3,-5,-2,8,-7,7,6,10,-5,3], dtype = "int64")#candidate|4491|(1456,)|const|int64
call_4490 = relay.TupleGetItem(func_2819_call(relay.reshape(const_4491.astype('int64'), [13, 8, 14]), relay.reshape(const_4491.astype('int64'), [13, 8, 14]), ), 0)
call_4492 = relay.TupleGetItem(func_2823_call(relay.reshape(const_4491.astype('int64'), [13, 8, 14]), relay.reshape(const_4491.astype('int64'), [13, 8, 14]), ), 0)
bop_4503 = relay.greater(const_4474.astype('bool'), var_4475.astype('bool')) # shape=(10, 12, 1)
func_38_call = mod.get_global_var('func_38')
func_41_call = mutated_mod.get_global_var('func_41')
const_4509 = relay.const(-5, dtype = "uint64")#candidate|4509|()|const|uint64
var_4510 = relay.var("var_4510", dtype = "uint64", shape = (1800, 2))#candidate|4510|(1800, 2)|var|uint64
call_4508 = func_38_call(relay.reshape(const_4509.astype('uint64'), []), relay.reshape(var_4510.astype('uint64'), [15, 15, 16]), )
call_4511 = func_38_call(relay.reshape(const_4509.astype('uint64'), []), relay.reshape(var_4510.astype('uint64'), [15, 15, 16]), )
bop_4514 = relay.divide(const_4509.astype('float32'), bop_4483.astype('float32')) # shape=(10, 12, 1)
func_3258_call = mod.get_global_var('func_3258')
func_3262_call = mutated_mod.get_global_var('func_3262')
var_4518 = relay.var("var_4518", dtype = "uint64", shape = (4,))#candidate|4518|(4,)|var|uint64
var_4519 = relay.var("var_4519", dtype = "float32", shape = (10, 96))#candidate|4519|(10, 96)|var|float32
call_4517 = relay.TupleGetItem(func_3258_call(relay.reshape(const_4509.astype('uint64'), []), relay.reshape(var_4518.astype('uint64'), [4, 1]), relay.reshape(var_4519.astype('float32'), [960,]), ), 2)
call_4520 = relay.TupleGetItem(func_3262_call(relay.reshape(const_4509.astype('uint64'), []), relay.reshape(var_4518.astype('uint64'), [4, 1]), relay.reshape(var_4519.astype('float32'), [960,]), ), 2)
output = relay.Tuple([bop_4476,call_4490,const_4491,bop_4503,call_4508,var_4510,bop_4514,call_4517,var_4518,var_4519,])
output2 = relay.Tuple([bop_4476,call_4492,const_4491,bop_4503,call_4511,var_4510,bop_4514,call_4520,var_4518,var_4519,])
func_4526 = relay.Function([var_4475,var_4510,var_4518,var_4519,], output)
mod['func_4526'] = func_4526
mod = relay.transform.InferType()(mod)
mutated_mod['func_4526'] = func_4526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4526_call = mutated_mod.get_global_var('func_4526')
var_4528 = relay.var("var_4528", dtype = "int8", shape = (10, 12, 1))#candidate|4528|(10, 12, 1)|var|int8
var_4529 = relay.var("var_4529", dtype = "uint64", shape = (1800, 2))#candidate|4529|(1800, 2)|var|uint64
var_4530 = relay.var("var_4530", dtype = "uint64", shape = (4,))#candidate|4530|(4,)|var|uint64
var_4531 = relay.var("var_4531", dtype = "float32", shape = (10, 96))#candidate|4531|(10, 96)|var|float32
call_4527 = func_4526_call(var_4528,var_4529,var_4530,var_4531,)
output = call_4527
func_4532 = relay.Function([var_4528,var_4529,var_4530,var_4531,], output)
mutated_mod['func_4532'] = func_4532
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4552 = relay.const([[[6,-3,4,6,-3],[1,-3,-1,9,-2],[6,-1,4,-6,-1],[-5,6,8,1,9],[6,9,-5,6,10]],[[6,5,2,7,2],[-2,2,7,9,5],[4,-10,-1,-3,-10],[-6,8,-6,-1,-10],[-10,4,-2,4,-10]],[[1,-2,-7,5,1],[3,-2,1,1,8],[8,6,1,-10,-9],[-6,4,-3,-1,3],[2,1,4,1,-5]],[[9,-8,-5,2,4],[8,6,-5,5,5],[-8,-3,-2,-3,4],[-1,-3,-9,8,6],[7,-9,5,9,-2]],[[9,5,10,-1,-10],[3,10,-2,6,10],[-1,3,-9,-6,10],[7,7,-3,7,2],[-9,-1,-2,-5,3]],[[8,4,6,2,6],[-1,3,-2,6,10],[-9,2,-7,-2,-1],[-10,1,-10,1,-10],[-6,-7,10,7,3]],[[4,8,5,-8,-10],[2,-10,5,-1,-4],[3,-1,-10,4,-6],[7,-2,-6,10,3],[-5,-1,-9,6,5]],[[8,-1,10,9,1],[2,7,-4,-8,7],[4,6,6,4,-5],[4,-6,-4,8,-10],[-1,6,-4,-9,5]],[[-4,7,-6,5,-8],[8,-4,7,-1,-1],[2,1,10,-8,-8],[6,-4,3,-9,-2],[9,-7,4,-10,8]],[[6,-5,-10,2,7],[-3,-3,-7,10,5],[1,4,8,3,-3],[-1,-1,-5,3,-10],[-9,-3,-1,9,4]],[[-5,-9,-6,-7,4],[10,-10,-2,-3,-2],[3,-6,-4,-7,-10],[10,-8,4,-7,-1],[-2,8,3,7,-5]],[[8,2,6,-5,-2],[4,2,-2,-5,9],[2,8,-3,10,-6],[-3,-2,-2,-1,-1],[-2,7,-6,2,10]],[[7,3,1,-6,-8],[-5,1,-3,8,-10],[9,4,7,4,9],[-1,5,-2,7,-9],[-2,-5,-4,4,6]]], dtype = "uint16")#candidate|4552|(13, 5, 5)|const|uint16
var_4553 = relay.var("var_4553", dtype = "uint16", shape = (13, 5, 5))#candidate|4553|(13, 5, 5)|var|uint16
bop_4554 = relay.maximum(const_4552.astype('uint16'), relay.reshape(var_4553.astype('uint16'), relay.shape_of(const_4552))) # shape=(13, 5, 5)
bop_4560 = relay.divide(var_4553.astype('float32'), relay.reshape(bop_4554.astype('float32'), relay.shape_of(var_4553))) # shape=(13, 5, 5)
bop_4572 = relay.greater_equal(bop_4554.astype('bool'), relay.reshape(var_4553.astype('bool'), relay.shape_of(bop_4554))) # shape=(13, 5, 5)
func_3224_call = mod.get_global_var('func_3224')
func_3227_call = mutated_mod.get_global_var('func_3227')
const_4576 = relay.const([1.608963,0.238790,5.217643,9.230094,9.379568,6.142540,2.777870,-9.490731,-2.741734,-9.387485,-3.881982,-4.569800,-9.338162,6.720303,5.547957,3.032857,-2.391527,-4.934441,1.238106,1.018132,-3.125148,4.509185,3.004407,4.960011,-3.048145,-0.136208,4.581279,-5.528580,1.616097,8.934695,6.450758,-5.115420,3.974290,2.829586,-1.806830,-7.657254,5.923453,-3.900465,8.717764,-3.846649,6.324051,-7.375789,-8.376316,-8.922971,-1.316590,-2.504955,1.738083,3.549696,3.654440,8.105273,-7.159323,-5.360398,-0.511468,-6.428252,-2.430062,2.061686,-9.282595,-2.127546,-9.684270,-9.629138,1.668936,-0.962390,7.412719,6.538518,-9.563922,5.482526,-8.358680,6.385954,-8.342891,-7.597412,-6.601112,1.460632,5.555936,4.035241,-2.243273,-4.633595,-0.876175,-8.676400,6.803879,-3.338893,3.982954,-0.717462,6.996544,-3.554739,9.742867,3.776857,-1.295572,-6.410207,-4.652358,6.371757,-5.308988,-0.675024,8.530381,-1.757116,9.549111,-7.459164,-5.496274,-1.781928,-4.757949,-4.070880,-5.771258,-3.498627,-8.017836,-6.734268,-6.451522,3.266204,-5.766187,-2.858874,8.308948,-8.934688,3.558504,2.883441,8.362504,-1.370341,-9.559724,8.506108,-1.924007,6.422805,4.990339,7.346668,6.172077,-9.348833,5.526557,1.813008,6.296963,8.525110,0.466143,0.976604,-4.497108,-5.119575,-0.214905,3.214185,8.804298,6.166990,5.405601,5.183774,9.531690,-4.432057,-5.280003,4.280785,3.742317,-5.554823,9.349504,5.754139,5.312709,-6.466305,2.681660,-2.702432,-8.035710,5.157509,5.414424,8.115273,-8.103032,3.595197,0.985373,1.666562,4.776470,4.967309,6.733864,-5.152224,5.272653,-1.609741,5.123478,3.362644,-2.578565,0.784499,2.447014,-6.056573,-7.043466,-0.331587,1.127505,-0.614791,-8.860969,7.075079,-7.547604,-9.343804,9.155459,-5.333962,-3.314523,-6.064443,8.628744,-2.815590,-8.640135,-3.178028,-7.045126,6.248202,-5.054012,-3.063043,8.410995,-1.888892,6.844692,8.667186,2.165157,2.592405,-2.057041,-8.274643,8.971854,-6.792697,-0.998032,-3.263327,-1.867849,-1.779624,7.159633,0.557499,-0.793487,-6.551237,-7.387642,-3.486792,-1.783371,3.608761,-6.683846,-1.110364,-9.708154,0.686022,2.398999,4.076903,2.875631,7.999946,-3.769075,-2.537206,-8.742922,3.599107,-2.579303,6.149224,3.323525,4.422648,-6.312686,-4.144650,0.070954,6.878324,1.035090,-3.943785,-5.048008,-9.402479,-0.822510,-3.117993,5.477990,6.172714,8.264820,-0.169875,-8.038675,-8.658640,8.334515,1.942508,1.030395,-5.377241,-5.136339,7.912976,-7.514208,1.749721,-8.191622,4.297803,8.505325,-8.765465,2.348463,-9.762045,-7.738300,3.619797,9.213307,-7.212802,9.733757,8.173175,4.451877,0.498691,-4.683449,-2.809165,-5.065468,7.484317,1.185017,-1.478438,-4.577507,-1.966868,-8.452201,2.300948,-9.503680,-1.326707,-4.017633,9.334605,-7.604325,4.456015,-0.881365,-9.899412,0.638298,-8.637898,6.366140,-6.882783,4.099592,-5.033735,-4.924825,7.984250,-2.995072,-7.543262,-9.372988,-3.698713,-1.574625,8.964941,-0.252110,7.129571,1.010069,-8.624728,2.937841,1.599089,7.439570,-1.901394,2.976320,-6.435886,5.436772,-9.644897,4.756224,-5.512202,-8.164188,-3.506583,5.805993,-5.870472,2.255891,2.255396,5.699881,-5.348559,5.016270,-6.343269,-9.043679,-7.272927,-2.784256,0.454928,7.668121,0.799877,-3.089333,-6.923819,-1.224816,-4.806207,1.768068,-7.059782,-9.406271,6.614328,9.715452,-0.961978,8.163637,0.393532,2.763347,9.053094,-2.782408,-8.997249,-3.985921,1.654137,-9.381596,-9.409749,6.785473,-4.194848,8.157918,8.931527,-9.535970,8.396509,-7.034802,5.856377,9.656385,9.944645,6.878536,-2.174610,-8.946674,-4.584834,-9.531478,3.635327,3.218575,1.604808,1.289682,9.032219,2.573415,4.998963,2.261359,5.502813,4.242092,9.007430,0.090159,-9.226364,3.224541,-2.959458,-5.055589,1.246110,7.730657,-2.944496,-3.110296,-1.964612,-5.929505,5.691864,-8.849873,4.163908,2.072604,4.432290,-2.679438,4.950372,-7.267194,5.275679,1.585699,2.538562,-6.139129,8.657052,2.260799,-7.635329,-4.250031,-3.070753,-3.180731,-3.639648,-3.897604,-5.211468,-1.059935,-3.628550,7.129914,8.707998,-8.572167,-9.514736,-3.668625,5.442763,2.418549,-5.750817,-4.373712,8.964009,-1.189990,-5.419430,9.589315,2.085201,-0.410857,-4.726514,-1.269007,-7.134541,-9.620595,5.856133,2.847788,8.425504,-8.118755,-3.411555,-3.177583,4.057248,3.847082,8.455389,4.056323,-4.025612,-1.311746,2.060030,-3.517083,7.623558,-8.627191,-9.221540,-5.211957,4.876454,7.747628,9.580009,1.113645,-0.271024,-3.340531,3.206057,-3.087660,-7.037044,-3.578674,5.300036,6.748494,-3.123899,0.977825,9.774760,-0.164621,-7.874073,-5.094448,8.195213,0.144685,4.202558,3.170064,4.248858,-3.878495,-0.629019,1.190937,-9.302980,-5.424028,0.216395,5.097240,4.457385,5.586492,6.510618,5.669443,5.432234,-9.352320,3.014796,0.461101,9.316071,-8.127770,-7.675829,-9.877426,-1.308334,2.156606,-3.439673,4.288481,-1.586727,-1.399260,-1.105436,-3.248219,-4.439312,-9.769096,-1.309984,-2.801959,-3.925760,2.329007,-6.834749,8.086206,6.867081,-6.638044,7.324505,2.248871,-5.396525,9.917314,-9.104602,-7.308039,-8.515575,-8.234121,-4.654691,-9.948694,1.850802,-0.711144,9.712355,-8.157902,-4.521898,1.017478,-0.559241,-1.090030,-8.520468,-0.826508,1.440357,2.372477,4.614305,8.237366,-6.039486,-2.486593,7.274647,1.949763,-1.854961,4.213470,9.431613,-6.744491,-0.443558,-1.708017,-2.671547,5.623113,-3.306363,9.007529,-4.571589,2.474116,6.666540,-3.280150,-1.941374,9.308679,0.277772,-1.453632,2.558264,1.821986,3.946238,-0.739484,-1.328131,3.048568,-1.282677,-9.949617,7.039921,5.043081,-9.421131,-2.452097,-4.649407,7.754549,-8.230074,-0.529804,0.389490,9.660321,6.103047,-3.161116,3.066228,-3.628721,3.686329,-3.780936,8.883210,2.732378,0.320026,-5.766400,3.541358,-1.430427,5.955333,-9.979598,-3.893006,4.476260,3.780511,0.885518,-3.002628,2.539416,-3.583200,-4.918101,0.651504,4.477755,5.374898,-8.676043,-7.859849,6.628895,4.619254,-1.379543,6.653864,-2.836525,7.896675,-9.033575,2.851919,7.130965,7.380576,9.581714,6.419124,-9.939833,8.048189,-5.291812,8.384185,7.286538,8.171801,-5.212418,-4.848312,4.053195,-5.019549,9.449501,0.596787,5.439318,-3.136705,-1.318502,-7.577159,9.708988,6.233192,8.877322,6.534014,-4.280775,-4.267765,1.438283,8.035534,-6.849675,-2.748898,1.641249,7.479918,2.532481,-4.011073,7.393692,-7.154275,-1.814585,-2.694656,-7.217628,-0.865196,-1.412193,1.144629,8.732351,7.594297,-2.619124,8.740146,4.459551,-6.557225,8.064742,-1.465273,4.285335,1.655677,6.134880,3.460617,1.558672,-6.614643,-5.281910,4.506372,-8.215348,-1.707113,9.126602,-8.205647,-8.117260,3.451817,6.241340,-0.436213,-6.952560,-2.932535,-4.404060,8.330713,-7.738873,7.076454,3.424565,-8.415235,9.412979,-4.542478,2.320856,-4.600992,7.780549,7.294512,8.449340,-6.809165,2.503920,3.805946,-1.281915,3.923062,-5.537833,-3.102288,8.454756,4.544787,6.757515,2.193198,3.949030,-7.591662,7.199938,4.470965,9.115208,-0.986820,3.127658,-0.221050,-3.647200,-5.443044,1.694148,-7.426128,7.816983,8.219959,7.865615,0.411883,-0.830680,-9.087308,7.860358,8.094434,3.512253,7.069941,0.661726,-9.146996,9.839153,6.933416,9.556990,-9.159333,3.668055,8.995276,-9.976444,2.768352,-2.187435,8.265262,-7.146880,5.255798,-1.486303,-2.962708,-9.338172,-5.486305,9.011093,-5.263699,0.276545,0.343693,1.352411,-4.243373,-7.679902,-0.123365,2.312548,-6.896135,-7.990291,4.029951,8.172376,9.134598,-2.226759,7.326870,0.849764,0.976296,-9.737072,5.013849,1.514677,-1.731002,-7.712663,9.952269,-8.875948,6.092773,0.328801,7.157539,-1.777148,-6.888883,-5.993921,-0.185080,-5.457789,2.166168,-4.654658,-1.117701,-1.388903,3.168073,1.934721,-4.017783,8.561741,3.852421,-5.782083,3.840941,1.237007,2.957364,5.200359,7.423475,9.016669,9.801988,8.051719,-1.895108,-6.407032,-6.005114,-0.105925,7.965639,-9.187743,-8.035191,2.392626,2.862892,3.512482,8.536243,-0.376582,-5.533872,2.863402,-6.048288,6.495977,-7.342348,-0.717621,-8.925010,3.050889,-9.231820,-5.876085,-8.411167,-0.205419,-8.078620,-5.689128,2.750054,-5.735562,3.426613,9.476165,-9.253953,-1.127656,-8.356053,-3.517652,5.121313,-5.250922,6.702759,-8.818617,-1.124808,-1.401230,-8.785015,-2.184197,6.626194,-7.752344,-4.757785,-2.308411,-4.093186,5.550890,-9.015965,2.402049,9.047926,6.063675,-3.807383,-4.256009,7.542814,9.523091,-1.235472,2.929619,-6.021150,-2.722767,4.270686,-8.052316,1.122227,-9.411483,6.519428,0.347469,1.655909,0.112830,-3.462143,-7.338307,-2.886723,1.992844,-4.610238,3.408376,-3.239760,0.082528,-0.432834,-2.186662,-7.138658,7.575883,-8.490862,-7.160245,-5.524159,-1.509448,-6.969798,-8.327383,-4.857675,5.576209,-2.336695,-2.274001,-7.345558,-3.799158,6.699985,-4.032994,0.924591,4.979394,-8.081404,4.151877,0.246279,5.933187,-4.466635,7.039620,8.885700,6.567912,2.854771,7.419216,-3.641604,-8.021535,-3.266446,7.257872,3.989079,0.981291,-6.112918,-5.206684,-1.637357,1.938753,8.521018,-2.287711,7.131031,-4.719206,9.588955,-8.898608,6.896632,8.687268,8.313494,2.166407,4.436716,-7.476817,4.757249,9.976737,-7.343915,-4.874946,7.223895,9.385609,3.595015,9.091244,6.017678,-3.507457,6.941359,-5.679459,-6.863124,8.250781,-9.436350,4.979940,-8.438538,-4.637324,-9.264627,-6.912831,5.302509,-9.149752,1.089467,6.830112,-1.722411,8.460736,6.846482,-1.946318,3.799428,2.865762,-5.194113,2.629648,6.019488,5.901826,-0.542268,-1.592260,9.122227,-8.604748,-6.580383,4.508556,1.590192,-7.050269,-8.242736,-8.005584,-5.121921,-0.019554,2.317443,5.084648,5.967527,-3.098204,-2.138675,8.402525,0.739945,-9.081455,1.165018,-5.053118,-5.722506,4.187243,-3.856078,-3.526359,9.484889,5.381770,-9.888200,2.335177,7.257109,-1.794874,-5.272234,-3.337219,0.799455,-0.338844,-8.634643,-4.038139,9.240688,-6.174584,9.765755,1.505182,8.273404,2.207073,7.457126,1.596877,-1.320385,3.593847,8.322885,4.865411,-7.011855,0.229590,-7.782165,-9.591922,8.082755,7.662051,4.855898,0.064091,6.986730,8.856824,0.913053,-0.872804,-2.705616,9.095565,6.342970,-5.152927,-2.426357,-6.071703,2.664298,-5.125447,8.959639,-0.966419,-8.023162,5.328085,-2.774769,6.803400,7.144794,-6.627769,8.310808,7.853174,-6.418884,-8.247149,8.921960,0.544082,8.013265,6.140256,-1.670059,-9.262167,5.153283,-2.729399,-2.703696,-9.695263,4.696308,7.667493,-6.058678,2.471988,-4.954245,9.277033,4.624113,2.605565,-9.187690,8.575246,-5.143893,-2.759887,-4.941632,5.332034,-4.275901,-2.570102,-1.352095,-1.871252,0.045388,6.186597,8.643327,6.229889,-7.515328,-3.478661,-3.213723,2.712029,1.575116,-2.539742,-4.854283,-2.017161,9.243033,9.285580,-8.948861,-1.057194,0.479760,5.228717,-7.024072,9.422487,1.322475,-5.018831,-8.380764,-9.311623,3.513497,9.109313,7.391192,-3.175038,-3.138319,-5.189573,9.368128,-3.381410,2.301702,5.002671,3.260138,-7.984452,-0.698062,-9.192289,-1.443473,-9.609844,2.809556,6.481028,8.177093,-6.286915,5.732701,-9.164679,4.486422,-7.625372,9.084940,9.190678,-7.276369,7.643473,-7.190358,3.746678,5.606623,-4.123962,4.477797,8.190868,4.451172,2.339152,-1.145472,2.692825,-4.714461,-9.367228,9.948193,-7.756058,0.154907,1.034525,7.968589,-2.230540,-8.633047,-4.987542,4.801840,3.829887,8.480564,4.649972,-1.545494,9.854876,-0.391088,-3.193801,6.690362,-2.568251,9.767324,-2.329617,-1.624547,2.207699,3.376908,9.210611,9.386566,1.752963,3.987578,-5.603211,9.802832,-8.840860,-1.206184], dtype = "float32")#candidate|4576|(1152,)|const|float32
var_4577 = relay.var("var_4577", dtype = "int64", shape = (56, 26))#candidate|4577|(56, 26)|var|int64
call_4575 = relay.TupleGetItem(func_3224_call(relay.reshape(const_4576.astype('float32'), [8, 9, 16]), relay.reshape(var_4577.astype('int64'), [728, 2]), ), 1)
call_4578 = relay.TupleGetItem(func_3227_call(relay.reshape(const_4576.astype('float32'), [8, 9, 16]), relay.reshape(var_4577.astype('int64'), [728, 2]), ), 1)
bop_4581 = relay.logical_or(var_4553.astype('bool'), relay.reshape(const_4552.astype('bool'), relay.shape_of(var_4553))) # shape=(13, 5, 5)
uop_4592 = relay.sigmoid(bop_4572.astype('float32')) # shape=(13, 5, 5)
bop_4595 = relay.minimum(uop_4592.astype('uint8'), relay.reshape(bop_4581.astype('uint8'), relay.shape_of(uop_4592))) # shape=(13, 5, 5)
output = relay.Tuple([bop_4560,call_4575,const_4576,var_4577,bop_4595,])
output2 = relay.Tuple([bop_4560,call_4578,const_4576,var_4577,bop_4595,])
func_4610 = relay.Function([var_4553,var_4577,], output)
mod['func_4610'] = func_4610
mod = relay.transform.InferType()(mod)
var_4611 = relay.var("var_4611", dtype = "uint16", shape = (13, 5, 5))#candidate|4611|(13, 5, 5)|var|uint16
var_4612 = relay.var("var_4612", dtype = "int64", shape = (56, 26))#candidate|4612|(56, 26)|var|int64
output = func_4610(var_4611,var_4612,)
func_4613 = relay.Function([var_4611,var_4612,], output)
mutated_mod['func_4613'] = func_4613
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4620 = relay.var("var_4620", dtype = "int64", shape = ())#candidate|4620|()|var|int64
const_4621 = relay.const([[[-3,-7,1,-7,-5,-1],[2,-4,8,-1,-5,-2],[-6,5,-4,-6,-5,3],[10,6,-6,-6,4,-9],[1,1,-7,-4,-10,1],[-3,4,-9,3,-8,-3],[-10,3,10,-6,-1,8],[-2,3,1,-9,-10,-10],[9,-6,-6,9,9,-8],[5,-1,1,-6,-2,-8],[-2,5,7,1,-3,-10],[8,-3,-5,-8,-4,-9],[-8,9,-6,3,1,10],[-5,3,7,-7,5,4]],[[10,2,-10,-1,8,8],[-9,3,-9,10,-5,-4],[-8,-9,-10,5,-6,-5],[8,7,-8,-1,8,-8],[9,2,1,-6,4,2],[-2,-3,-3,-7,6,8],[-2,2,-5,6,-10,-7],[2,-10,3,-10,8,-3],[4,2,7,8,1,9],[2,-9,2,1,-3,10],[-2,9,6,1,-6,-9],[-2,-2,7,-8,-5,-1],[-7,10,-5,4,-3,-9],[8,8,-4,-7,-4,-9]]], dtype = "int64")#candidate|4621|(2, 14, 6)|const|int64
bop_4622 = relay.greater(var_4620.astype('bool'), const_4621.astype('bool')) # shape=(2, 14, 6)
var_4636 = relay.var("var_4636", dtype = "int64", shape = (12, 15, 10))#candidate|4636|(12, 15, 10)|var|int64
bop_4637 = relay.less(var_4620.astype('bool'), var_4636.astype('bool')) # shape=(12, 15, 10)
output = relay.Tuple([bop_4622,bop_4637,])
output2 = relay.Tuple([bop_4622,bop_4637,])
func_4640 = relay.Function([var_4620,var_4636,], output)
mod['func_4640'] = func_4640
mod = relay.transform.InferType()(mod)
var_4641 = relay.var("var_4641", dtype = "int64", shape = ())#candidate|4641|()|var|int64
var_4642 = relay.var("var_4642", dtype = "int64", shape = (12, 15, 10))#candidate|4642|(12, 15, 10)|var|int64
output = func_4640(var_4641,var_4642,)
func_4643 = relay.Function([var_4641,var_4642,], output)
mutated_mod['func_4643'] = func_4643
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4766 = relay.var("var_4766", dtype = "int32", shape = ())#candidate|4766|()|var|int32
var_4767 = relay.var("var_4767", dtype = "int32", shape = (15, 6, 1))#candidate|4767|(15, 6, 1)|var|int32
bop_4768 = relay.right_shift(var_4766.astype('int32'), var_4767.astype('int32')) # shape=(15, 6, 1)
output = bop_4768
output2 = bop_4768
func_4784 = relay.Function([var_4766,var_4767,], output)
mod['func_4784'] = func_4784
mod = relay.transform.InferType()(mod)
var_4785 = relay.var("var_4785", dtype = "int32", shape = ())#candidate|4785|()|var|int32
var_4786 = relay.var("var_4786", dtype = "int32", shape = (15, 6, 1))#candidate|4786|(15, 6, 1)|var|int32
output = func_4784(var_4785,var_4786,)
func_4787 = relay.Function([var_4785,var_4786,], output)
mutated_mod['func_4787'] = func_4787
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4930 = relay.var("var_4930", dtype = "float32", shape = (12, 16, 9))#candidate|4930|(12, 16, 9)|var|float32
uop_4931 = relay.sinh(var_4930.astype('float32')) # shape=(12, 16, 9)
output = relay.Tuple([uop_4931,])
output2 = relay.Tuple([uop_4931,])
func_4933 = relay.Function([var_4930,], output)
mod['func_4933'] = func_4933
mod = relay.transform.InferType()(mod)
var_4934 = relay.var("var_4934", dtype = "float32", shape = (12, 16, 9))#candidate|4934|(12, 16, 9)|var|float32
output = func_4933(var_4934)
func_4935 = relay.Function([var_4934], output)
mutated_mod['func_4935'] = func_4935
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5106 = relay.var("var_5106", dtype = "int64", shape = (6, 5, 11))#candidate|5106|(6, 5, 11)|var|int64
var_5107 = relay.var("var_5107", dtype = "int64", shape = (6, 5, 11))#candidate|5107|(6, 5, 11)|var|int64
bop_5108 = relay.left_shift(var_5106.astype('int64'), relay.reshape(var_5107.astype('int64'), relay.shape_of(var_5106))) # shape=(6, 5, 11)
output = relay.Tuple([bop_5108,])
output2 = relay.Tuple([bop_5108,])
func_5117 = relay.Function([var_5106,var_5107,], output)
mod['func_5117'] = func_5117
mod = relay.transform.InferType()(mod)
mutated_mod['func_5117'] = func_5117
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5117_call = mutated_mod.get_global_var('func_5117')
var_5119 = relay.var("var_5119", dtype = "int64", shape = (6, 5, 11))#candidate|5119|(6, 5, 11)|var|int64
var_5120 = relay.var("var_5120", dtype = "int64", shape = (6, 5, 11))#candidate|5120|(6, 5, 11)|var|int64
call_5118 = func_5117_call(var_5119,var_5120,)
output = call_5118
func_5121 = relay.Function([var_5119,var_5120,], output)
mutated_mod['func_5121'] = func_5121
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5191 = relay.const([[[8.042530,-4.563473,-4.426009,2.739747],[6.677544,-0.629412,6.856464,6.286924],[-2.192562,5.473856,-2.598087,-0.183317],[-6.260367,7.782970,7.354453,-7.360159],[-9.270926,1.375452,-4.387647,-4.299272],[-9.427861,-1.580690,6.993027,9.288987],[-9.734056,-4.580463,8.674849,-4.187493],[-8.811458,-6.109386,-4.300082,-6.810756],[-8.102385,-7.664977,6.195863,-5.064913],[0.358881,6.364683,-0.541353,-1.604970],[-5.549163,3.162540,-2.559282,4.690971],[6.035272,-8.828024,-1.693923,-5.687355],[6.550482,-6.204209,-4.176181,-3.980097]],[[4.359926,-1.837697,-8.046228,-3.971096],[3.757418,-2.386585,-2.386007,-1.871779],[-4.588101,4.452878,-2.793945,8.924674],[-2.442988,-3.254196,-2.398163,1.388693],[-2.999879,5.233004,-1.183147,5.847137],[8.791091,7.001403,-4.069216,-2.378564],[7.829228,9.808893,7.201224,7.934791],[-7.739058,-6.244427,-3.880928,7.537872],[1.181749,7.545211,-3.253405,3.260251],[9.863085,5.324399,5.357051,-0.450839],[-2.058376,-6.081065,-2.834524,5.947655],[5.774231,3.376245,2.208012,-0.652305],[4.086254,2.136959,1.207719,2.111642]],[[7.186407,-6.850061,-2.444146,6.126735],[-3.596357,3.717895,9.961250,-5.533506],[-1.839459,-5.615612,-5.536667,3.074256],[2.620742,0.724327,6.033901,7.074110],[-8.383647,6.136465,-1.597822,9.218658],[-0.489097,5.875771,6.181876,-2.857079],[7.075745,-7.488787,-1.574997,1.918812],[-6.502409,-9.339234,2.287827,-3.934565],[3.236986,8.395567,4.124031,-4.930595],[5.004198,3.740009,9.474625,-2.027598],[1.876588,-0.730872,-0.061059,5.285372],[0.359200,9.428410,4.562743,-6.587521],[2.425904,-4.329908,-6.557955,0.195306]],[[-7.912253,-3.280807,-0.557638,-2.360031],[4.678669,0.257348,-9.657066,-7.175728],[-5.828896,-0.271675,-6.423014,-9.576987],[-1.507681,-2.699654,-1.299493,-4.814865],[-9.233080,-2.005652,-1.224577,-5.776417],[-4.808068,0.156681,-3.799573,-2.139888],[7.194882,-0.804609,3.333295,-4.465042],[3.976685,-4.467545,-1.239318,-0.084381],[4.256715,0.597431,1.425156,-7.469907],[-4.369390,-7.377428,2.159521,6.826381],[-3.021665,-2.753899,0.400260,7.921684],[8.189292,-1.481543,4.106267,1.174895],[6.517924,-5.341570,-4.379455,-2.874277]],[[-3.425081,-9.130489,2.785319,5.078816],[2.922801,5.659190,-7.935883,-7.765991],[-5.535132,2.346154,4.750013,9.941315],[7.699919,-1.740953,-7.730571,-3.894667],[2.516470,-0.339668,6.436283,-2.197833],[-5.460539,3.642897,2.386283,-3.063917],[-0.703962,0.549254,-3.048615,-6.517290],[-0.166609,-3.059538,-6.978308,6.305616],[4.426187,-2.995445,6.585462,8.689805],[9.603864,-9.370918,-9.412753,-1.221642],[-5.369487,9.754164,-4.546841,4.198621],[-7.921299,3.706887,-8.392646,-4.750430],[4.276555,-7.241719,-6.393799,-8.101844]],[[-8.251842,-0.499620,6.619967,8.840594],[-0.372823,0.924135,0.868278,9.997887],[-4.669416,-3.777055,0.417645,-0.442565],[9.832281,-4.297947,-3.129452,2.449409],[2.223623,-3.422414,3.910148,4.399931],[-9.338431,-2.136668,1.118026,2.868070],[5.727586,-7.928554,-7.641803,2.511388],[-7.242151,3.183795,-0.340256,1.052853],[-1.330836,-8.402253,-1.821201,9.338603],[-4.688849,-7.615202,0.904692,1.652940],[7.073315,-0.421357,-8.633470,7.628746],[9.778847,-6.590291,-2.971066,2.831406],[0.567633,-1.023280,5.930841,-0.344410]],[[7.247054,8.949102,-4.139427,5.712073],[7.492699,8.825356,5.041673,-1.887907],[-3.791149,-6.909917,-2.122064,3.735696],[-5.806011,4.771463,-9.871960,1.141147],[-4.920439,-6.834555,-2.242396,-2.141295],[3.664544,8.043745,9.694261,5.357597],[-4.344728,-8.075550,-1.596583,-5.735364],[7.487777,-9.673578,9.689010,7.753038],[3.758923,-0.038665,-6.549740,0.677491],[6.081544,-4.079903,-9.569486,-6.159941],[-3.681373,5.937251,-5.109438,1.385764],[-3.829069,3.217395,2.158208,3.472166],[2.234984,-2.807787,3.377930,3.543308]],[[1.254400,6.954050,-8.447652,-5.382677],[-6.079886,5.174532,-1.919427,-1.642193],[-7.526014,-9.711418,-2.494065,-7.696552],[-1.854498,0.391575,-2.337345,-3.056873],[6.646205,5.567547,5.557259,-1.820790],[-3.917878,-1.056474,-9.994202,6.095812],[9.624399,-1.887362,1.965591,0.511499],[-4.167341,2.878528,4.840433,-3.912806],[4.040513,-7.322960,1.468671,-7.697899],[-6.030113,-5.519141,1.739989,-3.845363],[-1.596001,0.405439,7.588110,8.322190],[3.410502,0.176847,-9.181604,8.683810],[3.022420,-5.432969,-3.911770,-1.262585]],[[6.983781,7.504352,-0.680314,7.231167],[0.334419,3.101060,5.039734,-6.408718],[1.254826,-7.716674,7.389530,-3.521581],[7.319513,7.647465,6.530433,7.730233],[0.855334,-6.508692,-0.841024,-3.252134],[-6.752721,-0.666857,-5.610076,-2.120731],[-2.859981,2.677719,6.102725,3.352870],[-4.303538,-7.084741,-4.166055,-1.509001],[1.127654,-7.179903,2.056954,1.706011],[-9.222091,5.870894,-4.759553,-1.262700],[-8.143037,-2.656158,0.505087,2.935768],[-3.732355,-4.167010,1.288621,-9.170352],[5.336894,-2.076593,0.333478,-2.494047]],[[1.719231,-5.066873,4.420361,8.309629],[-7.069405,9.706287,9.412567,9.206030],[1.946675,-3.354197,5.818395,8.529897],[7.530685,0.865466,4.622258,-7.958956],[5.354729,-4.345868,-3.492066,9.429537],[2.609186,-7.820816,2.038882,-6.724155],[5.634166,5.605434,-7.303655,5.485990],[-1.167703,-3.333557,-3.248582,-0.143871],[-8.643537,6.571991,-2.947929,3.276698],[4.519885,-0.802518,-1.930004,8.930413],[-8.530420,-5.618597,3.352208,-8.716990],[-0.422757,1.688898,-1.490660,-4.681911],[-8.007633,1.981772,-9.482567,-1.494267]],[[-7.172126,-8.852461,-2.886649,8.002833],[-1.338612,9.361962,3.884783,8.482237],[-8.306646,3.502156,5.477577,6.308576],[1.681397,-8.233356,-7.334585,7.599602],[-2.200533,4.120585,-9.024538,2.092636],[-4.738519,-2.148507,-0.759468,5.771268],[3.266456,2.837201,-3.804159,-8.447361],[4.455047,-4.268926,-5.180440,7.451516],[6.143926,6.868978,8.438963,5.159288],[6.980122,0.557900,3.248742,-3.997371],[7.722975,5.438172,6.764337,3.304206],[4.883782,-2.916630,-9.359154,-5.220016],[-8.931159,1.203475,-5.880659,4.932861]],[[-1.682940,6.174880,3.508356,-7.534688],[-5.981857,-3.051958,-3.392908,-0.146174],[5.648785,1.447723,-3.867908,-2.249755],[4.511387,-3.672671,-0.245791,6.456096],[7.087029,-3.622364,-2.008753,3.239734],[6.824831,-8.683132,-8.545949,4.134711],[3.035414,6.255455,-5.560161,-3.603770],[6.637711,3.140080,-5.327224,-9.735733],[2.620700,-4.118612,-7.864307,-6.524221],[-2.022461,2.364467,-8.020123,-5.591791],[6.355031,2.242183,4.202389,5.374432],[8.405428,-7.700984,1.060244,7.791410],[-9.049687,-6.241561,3.053677,-4.318975]],[[-5.411721,-8.737595,-1.349709,-6.295954],[-8.724360,0.162482,-5.566435,-3.151797],[4.256905,0.868100,-5.602063,9.720357],[6.149290,6.992050,4.055439,-0.272790],[3.589587,-4.450207,5.012783,6.302770],[-2.463222,-6.214110,8.364446,-7.152522],[7.147631,3.523297,-7.917053,-1.145535],[-4.343029,3.067636,7.022055,4.870898],[-4.907418,-0.615375,5.486938,-8.058898],[-9.513670,-4.566710,0.428670,-7.761953],[-9.436651,-3.185530,2.815687,-2.967504],[-2.125273,0.863849,5.397799,-6.504138],[-0.469165,-0.680222,-6.909882,7.530037]],[[9.999756,-9.287883,9.243204,4.836616],[-5.047832,-5.481689,0.595273,-6.681056],[-2.714902,7.625977,-2.205305,-8.292089],[1.084765,-7.475932,4.264522,-0.578839],[5.608304,0.008952,-2.239625,6.387419],[1.793839,-9.727295,-5.846678,-4.588834],[-4.115109,5.594406,-4.519019,4.795702],[-2.754960,2.391513,0.059355,-2.956189],[9.049789,9.975638,-1.068573,-2.490155],[5.998491,-3.072764,2.172348,-1.417022],[3.410622,6.361482,0.498927,2.746348],[-9.392732,9.572320,-0.357464,9.610912],[-9.010588,4.995416,4.991223,-8.731461]],[[-0.218009,-4.148603,7.028022,1.570973],[-9.384718,-1.219205,1.408392,0.435970],[5.095467,-1.807984,-5.058565,5.314164],[-7.547407,-2.770567,-1.730576,-4.748975],[6.801261,8.854953,-9.846081,1.136390],[3.310823,-4.188535,8.127897,-1.841179],[9.246477,4.366585,-0.523350,-6.065652],[2.810493,-1.941663,5.652838,2.970778],[-6.383231,8.085171,7.738359,0.567191],[2.767053,-3.318337,-8.778647,4.839465],[3.823678,3.958585,7.081289,-4.192888],[-6.973515,-6.822200,-4.501680,8.663452],[-5.529017,4.227567,3.008584,-6.716623]]], dtype = "float32")#candidate|5191|(15, 13, 4)|const|float32
uop_5192 = relay.atanh(const_5191.astype('float32')) # shape=(15, 13, 4)
func_4784_call = mod.get_global_var('func_4784')
func_4787_call = mutated_mod.get_global_var('func_4787')
var_5201 = relay.var("var_5201", dtype = "int32", shape = ())#candidate|5201|()|var|int32
var_5202 = relay.var("var_5202", dtype = "int32", shape = (90,))#candidate|5202|(90,)|var|int32
call_5200 = func_4784_call(relay.reshape(var_5201.astype('int32'), []), relay.reshape(var_5202.astype('int32'), [15, 6, 1]), )
call_5203 = func_4784_call(relay.reshape(var_5201.astype('int32'), []), relay.reshape(var_5202.astype('int32'), [15, 6, 1]), )
uop_5204 = relay.atan(uop_5192.astype('float32')) # shape=(15, 13, 4)
func_5117_call = mod.get_global_var('func_5117')
func_5121_call = mutated_mod.get_global_var('func_5121')
const_5208 = relay.const([1,3,-10,8,2,6,4,9,4,5,-5,-8,2,8,2,-9,1,-6,-4,9,-8,1,2,3,10,-1,6,-2,9,-2,-7,6,4,9,8,3,4,7,8,3,-1,2,4,-6,6,-3,-1,-3,1,-5,1,-7,4,2,-6,-9,-1,-4,5,-7,-10,-5,7,7,1,9,10,10,1,-5,9,4,2,-5,8,9,-10,8,-4,9,7,-9,5,-8,-1,3,-6,10,-7,-5,4,-4,10,-6,-6,-10,-3,9,-8,4,1,-1,-6,-5,3,9,-5,6,4,-10,4,-5,-8,-5,-1,-8,-6,-9,10,-3,-3,-2,5,4,9,2,-3,-10,-1,-9,-4,5,8,2,8,-2,-10,-1,-2,4,8,-5,-3,4,-4,6,-10,7,7,-7,-5,-7,-3,9,3,9,9,6,10,8,1,-1,-7,10,-8,-2,-5,-9,7,-4,-1,-6,6,2,10,-2,-4,-3,-3,-8,9,5,8,10,2,-10,6,3,5,-10,5,-7,6,3,-2,-2,2,-7,-1,-10,3,-6,-3,3,-4,5,6,2,2,3,8,-7,5,3,-10,-9,-10,-2,-3,2,-9,-1,-9,-10,8,-6,-9,1,4,-1,6,7,-6,2,5,9,1,10,-2,-2,4,-1,1,-8,-5,-9,-9,-10,7,-4,-5,6,-4,-9,-7,-9,1,3,-1,6,7,8,4,-1,-9,3,10,2,-6,-10,-4,-1,10,-6,4,-8,9,-7,5,4,-2,10,4,6,4,2,-7,-4,8,10,4,-1,4,-4,5,-3,-4,-9,-6,10,-2,-10,7,10,4,5,5,-10,5,10,-1,9,7,-4,4,4,8,9,-10,9,6,-3,-4,-4,7,1,6,-5,-9,-5], dtype = "int64")#candidate|5208|(330,)|const|int64
call_5207 = relay.TupleGetItem(func_5117_call(relay.reshape(const_5208.astype('int64'), [6, 5, 11]), relay.reshape(const_5208.astype('int64'), [6, 5, 11]), ), 0)
call_5209 = relay.TupleGetItem(func_5121_call(relay.reshape(const_5208.astype('int64'), [6, 5, 11]), relay.reshape(const_5208.astype('int64'), [6, 5, 11]), ), 0)
output = relay.Tuple([call_5200,var_5201,var_5202,uop_5204,call_5207,const_5208,])
output2 = relay.Tuple([call_5203,var_5201,var_5202,uop_5204,call_5209,const_5208,])
func_5214 = relay.Function([var_5201,var_5202,], output)
mod['func_5214'] = func_5214
mod = relay.transform.InferType()(mod)
mutated_mod['func_5214'] = func_5214
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5214_call = mutated_mod.get_global_var('func_5214')
var_5216 = relay.var("var_5216", dtype = "int32", shape = ())#candidate|5216|()|var|int32
var_5217 = relay.var("var_5217", dtype = "int32", shape = (90,))#candidate|5217|(90,)|var|int32
call_5215 = func_5214_call(var_5216,var_5217,)
output = call_5215
func_5218 = relay.Function([var_5216,var_5217,], output)
mutated_mod['func_5218'] = func_5218
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5843 = relay.var("var_5843", dtype = "int64", shape = (7, 3, 12))#candidate|5843|(7, 3, 12)|var|int64
var_5844 = relay.var("var_5844", dtype = "int64", shape = (7, 3, 12))#candidate|5844|(7, 3, 12)|var|int64
bop_5845 = relay.add(var_5843.astype('int64'), relay.reshape(var_5844.astype('int64'), relay.shape_of(var_5843))) # shape=(7, 3, 12)
func_2272_call = mod.get_global_var('func_2272')
func_2278_call = mutated_mod.get_global_var('func_2278')
const_5850 = relay.const([-5.316230,-9.815113,-6.578802,-1.576439,6.778745,1.421408,-4.842619,0.178174,-1.403396,-5.556916,0.509198,8.855090,-0.539113,-9.060865,-1.473133,-4.108508,-7.622997,-5.599103,5.685359,-0.337362,-3.081530,7.760510,8.585651,-3.796196,2.515954,-4.794507,6.148366,-3.405849,-9.732153,-8.918591,-2.464389,-5.671517,2.192904,-3.022342,7.545578,-5.612907,-8.432112,-0.554158,-5.601451,5.766973,2.978387,-7.323398,-6.975729,9.351119,7.642054,6.139848,-4.391548,0.704369,-4.133760,-5.839573,-4.143777,4.393612,-9.822051,-6.960466,-9.985875,6.995415,5.701239,3.789163,-0.388914,3.321714,-7.334824,7.203567,-0.115841,-6.915020,-6.771467,-7.034295,6.645933,-0.852990,-9.243473,-4.360706,-5.174442,-0.919427], dtype = "float64")#candidate|5850|(72,)|const|float64
var_5851 = relay.var("var_5851", dtype = "float32", shape = (960,))#candidate|5851|(960,)|var|float32
var_5852 = relay.var("var_5852", dtype = "float64", shape = (55, 4))#candidate|5852|(55, 4)|var|float64
const_5853 = relay.const([False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True], dtype = "bool")#candidate|5853|(90,)|const|bool
call_5849 = relay.TupleGetItem(func_2272_call(relay.reshape(const_5850.astype('float64'), [4, 9, 2]), relay.reshape(var_5851.astype('float32'), [960,]), relay.reshape(var_5852.astype('float64'), [110, 2]), relay.reshape(const_5853.astype('bool'), [45, 2]), ), 0)
call_5854 = relay.TupleGetItem(func_2278_call(relay.reshape(const_5850.astype('float64'), [4, 9, 2]), relay.reshape(var_5851.astype('float32'), [960,]), relay.reshape(var_5852.astype('float64'), [110, 2]), relay.reshape(const_5853.astype('bool'), [45, 2]), ), 0)
uop_5855 = relay.atanh(var_5843.astype('float32')) # shape=(7, 3, 12)
uop_5862 = relay.cos(uop_5855.astype('float64')) # shape=(7, 3, 12)
bop_5872 = relay.floor_divide(uop_5855.astype('float32'), relay.reshape(bop_5845.astype('float32'), relay.shape_of(uop_5855))) # shape=(7, 3, 12)
output = relay.Tuple([call_5849,const_5850,var_5851,var_5852,const_5853,uop_5862,bop_5872,])
output2 = relay.Tuple([call_5854,const_5850,var_5851,var_5852,const_5853,uop_5862,bop_5872,])
func_5881 = relay.Function([var_5843,var_5844,var_5851,var_5852,], output)
mod['func_5881'] = func_5881
mod = relay.transform.InferType()(mod)
mutated_mod['func_5881'] = func_5881
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5881_call = mutated_mod.get_global_var('func_5881')
var_5883 = relay.var("var_5883", dtype = "int64", shape = (7, 3, 12))#candidate|5883|(7, 3, 12)|var|int64
var_5884 = relay.var("var_5884", dtype = "int64", shape = (7, 3, 12))#candidate|5884|(7, 3, 12)|var|int64
var_5885 = relay.var("var_5885", dtype = "float32", shape = (960,))#candidate|5885|(960,)|var|float32
var_5886 = relay.var("var_5886", dtype = "float64", shape = (55, 4))#candidate|5886|(55, 4)|var|float64
call_5882 = func_5881_call(var_5883,var_5884,var_5885,var_5886,)
output = call_5882
func_5887 = relay.Function([var_5883,var_5884,var_5885,var_5886,], output)
mutated_mod['func_5887'] = func_5887
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6064 = relay.var("var_6064", dtype = "float64", shape = (16, 1, 14))#candidate|6064|(16, 1, 14)|var|float64
uop_6065 = relay.acos(var_6064.astype('float64')) # shape=(16, 1, 14)
uop_6070 = relay.log10(var_6064.astype('float32')) # shape=(16, 1, 14)
uop_6074 = relay.cosh(uop_6070.astype('float64')) # shape=(16, 1, 14)
output = relay.Tuple([uop_6065,uop_6074,])
output2 = relay.Tuple([uop_6065,uop_6074,])
func_6076 = relay.Function([var_6064,], output)
mod['func_6076'] = func_6076
mod = relay.transform.InferType()(mod)
var_6077 = relay.var("var_6077", dtype = "float64", shape = (16, 1, 14))#candidate|6077|(16, 1, 14)|var|float64
output = func_6076(var_6077)
func_6078 = relay.Function([var_6077], output)
mutated_mod['func_6078'] = func_6078
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6082 = relay.var("var_6082", dtype = "float32", shape = (12, 11, 13))#candidate|6082|(12, 11, 13)|var|float32
uop_6083 = relay.cosh(var_6082.astype('float32')) # shape=(12, 11, 13)
output = uop_6083
output2 = uop_6083
func_6088 = relay.Function([var_6082,], output)
mod['func_6088'] = func_6088
mod = relay.transform.InferType()(mod)
var_6089 = relay.var("var_6089", dtype = "float32", shape = (12, 11, 13))#candidate|6089|(12, 11, 13)|var|float32
output = func_6088(var_6089)
func_6090 = relay.Function([var_6089], output)
mutated_mod['func_6090'] = func_6090
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6103 = relay.const([[[7,-4,3,6,-7,-6,-7,3,1,9,10,-3],[9,5,-7,7,7,4,3,5,10,1,10,-7],[10,4,-2,-6,-1,6,2,-3,-7,8,-8,9],[4,-3,-8,7,6,5,8,-10,-4,8,-2,-4],[7,-10,-5,-1,1,-5,-6,-6,-4,4,-2,-1],[-1,-4,-2,-3,-10,-4,-5,4,-2,-6,1,-3],[-1,-7,1,3,8,6,-6,9,-5,-1,-1,-6],[-3,-1,2,-9,3,8,-3,8,8,3,5,2],[-6,-10,-9,10,-7,-8,7,2,3,-5,-2,-10],[-9,6,7,-5,2,-2,10,-5,-2,-5,-10,8],[10,-2,6,-5,-6,-8,1,-8,9,-4,-1,-5],[9,2,9,-5,-3,9,10,6,-5,9,-8,-8],[4,-5,10,7,-9,1,9,5,4,1,10,-7],[2,10,2,8,-2,10,4,-3,6,-1,1,-7],[1,-6,5,-5,-1,10,5,-9,4,10,9,-1],[7,-10,-7,3,4,7,5,10,-7,1,-10,-10]],[[2,-2,-3,-5,-4,-9,9,9,3,5,-9,6],[-5,9,-7,-10,9,9,-5,-2,-9,-10,-5,4],[-6,-6,3,-1,6,4,1,4,7,3,10,-1],[-8,-9,-9,-1,-1,-9,8,3,-2,-9,2,-6],[-9,-9,6,-5,-10,-9,7,-3,8,3,4,2],[-2,10,6,-10,-4,-1,-10,5,3,8,-6,10],[-7,-2,8,6,6,-5,3,-9,-6,-7,9,6],[-8,3,9,7,-6,-4,2,-6,9,3,9,-7],[2,-1,6,4,6,-7,3,-9,-3,-7,7,5],[7,8,-8,8,10,3,-9,-9,6,-9,2,-10],[-5,1,-10,-7,-2,2,-1,4,-2,-7,-3,7],[4,8,6,-2,5,-2,-8,4,6,-4,6,8],[4,-10,-2,6,-3,-4,2,-9,-9,-2,9,-9],[-1,2,2,7,3,-2,-6,-5,-1,-9,4,10],[6,10,-9,10,5,-9,-2,-10,-6,2,-1,3],[5,-4,10,4,-5,3,7,-4,-7,-7,1,-6]],[[2,-1,6,-4,7,-1,2,-5,2,-1,-3,-9],[-9,-3,-6,7,6,10,1,-2,1,-5,1,-10],[-10,-3,-7,5,-1,-8,7,4,5,-7,7,7],[5,1,-4,10,-3,8,5,7,2,-2,5,4],[1,10,-1,8,-1,-3,-9,10,7,-1,1,-2],[-5,6,2,4,1,1,-1,9,7,10,8,7],[7,-2,8,-5,-8,-5,-1,2,-2,-6,-4,-6],[9,-9,7,-4,4,7,10,4,-5,8,9,9],[-5,-4,-2,-1,8,9,6,2,-1,-1,-10,-9],[-6,-2,7,4,-6,2,-1,-10,5,-8,5,10],[-8,-5,7,-5,10,-10,9,-8,4,-5,-5,8],[4,-8,6,5,2,-4,5,-4,7,2,7,2],[-10,-8,2,4,2,9,1,-1,5,3,-5,4],[10,9,-6,1,-10,2,7,-1,7,8,-1,2],[-2,-5,4,10,-5,-5,4,8,9,5,3,6],[4,-9,-10,-3,10,3,9,-9,-4,5,2,-1]],[[3,-6,2,6,5,4,-10,2,-7,3,-8,-10],[7,-10,1,10,7,-10,-8,-4,-4,2,5,2],[-7,-8,7,9,7,3,-1,10,8,7,-6,1],[-1,-4,5,10,10,8,8,-1,7,3,-6,-7],[4,-10,-7,10,4,-4,-1,2,2,9,7,5],[6,1,-2,6,-2,-4,-7,-7,-2,9,-5,5],[3,9,5,-4,-3,-3,-5,9,-5,-8,-1,3],[-6,-5,7,2,5,10,7,-3,2,5,6,7],[-1,6,-10,5,5,-10,-1,2,4,-8,-7,3],[-8,7,4,-7,-10,7,4,-9,4,-9,2,1],[-5,-8,9,-2,-10,10,4,9,10,6,-7,-1],[4,6,-5,-1,5,1,-3,-2,3,-8,-9,4],[4,3,5,-2,8,-5,6,-1,9,8,8,-4],[-2,-9,9,2,3,5,-3,-9,7,-4,-1,-8],[1,-10,-6,10,-7,10,-2,9,2,-5,3,6],[7,-4,4,-1,-8,4,7,1,-2,-2,-5,-2]],[[-5,2,3,9,-7,-10,-7,-8,4,-6,-5,-5],[-9,-1,-7,1,-4,-9,2,-8,-1,10,1,-2],[9,6,-6,-10,7,9,-8,6,-5,8,-5,4],[5,5,-3,1,-4,5,9,4,9,-1,-6,-9],[-4,-8,-1,4,-10,4,-5,-5,-1,10,6,-5],[9,-1,3,-8,7,5,-2,-4,7,6,-2,-4],[1,-4,-9,-1,-4,-7,-4,-5,3,-9,-8,-7],[-2,10,4,-10,7,-2,-2,9,7,5,1,4],[-8,10,9,-3,-2,8,7,1,-9,-10,-7,-7],[5,8,1,-1,-9,7,2,-1,-4,-10,-7,5],[-5,-7,6,-7,-7,8,-10,-7,3,9,5,-8],[8,-8,-1,3,9,-8,-5,5,-1,9,3,-10],[-9,10,8,-3,-7,3,5,4,5,7,9,3],[-5,1,8,2,2,-1,7,-9,4,-2,8,-3],[2,-7,1,10,2,-2,5,-10,-4,-9,5,-7],[2,8,-9,-4,-10,-1,1,-5,-3,5,-10,8]],[[4,-7,7,-9,-7,-8,-7,-9,-3,8,-10,-9],[9,-2,9,-5,7,-3,9,-3,9,5,4,-5],[-2,3,5,4,5,6,-8,-6,-2,1,-1,8],[-6,7,4,-6,-4,-8,-8,6,-2,7,1,7],[2,-7,-4,10,7,-7,9,7,2,-4,-8,4],[-3,10,-4,-1,6,-9,10,-10,9,8,-1,-3],[10,3,-10,-8,10,8,6,2,5,4,-1,4],[10,-7,-7,-3,-8,7,-5,-10,4,9,-7,-3],[2,-10,2,4,8,-4,-4,3,5,-9,-4,5],[8,7,-7,-8,10,2,3,-5,-7,-5,-9,-2],[-6,-5,3,8,6,-7,-10,1,-4,-3,9,8],[-6,-9,-9,9,4,-8,8,8,-3,-6,-1,-2],[-10,-2,10,6,-2,3,8,9,-10,10,-2,9],[-3,-8,-1,-9,-5,9,2,-3,10,6,-2,1],[3,-7,10,-4,-2,-7,-3,4,-9,3,-8,-6],[4,6,10,-7,9,-9,1,-9,-6,-8,5,8]],[[4,-5,-10,3,-6,2,-6,-8,3,3,-3,-7],[-1,9,-6,9,-8,4,-9,2,8,9,2,-1],[7,7,6,-8,-10,10,3,7,6,-9,-10,10],[6,-2,-7,3,4,-3,-5,-7,9,10,9,-5],[-1,-1,9,1,-1,4,-5,-1,9,1,-8,-9],[-6,-10,8,-3,4,-2,-5,10,5,3,3,10],[1,-3,8,5,3,-2,-3,-2,8,1,6,-1],[-5,2,2,9,-1,-2,6,-6,3,10,2,-4],[-7,-8,-6,5,-5,1,-6,9,-3,-8,-8,-8],[2,-8,1,9,-9,-10,-3,-8,1,-6,-10,-6],[-7,5,-1,-8,-2,-1,10,-10,4,6,4,-8],[5,-2,8,-1,-4,-10,-9,8,-5,-6,-9,-6],[6,-2,7,-5,-3,-9,-5,-6,7,4,4,-9],[2,-6,2,4,5,8,4,-6,10,-8,10,-6],[1,4,3,-6,1,-6,3,2,-3,-4,6,4],[7,-3,-7,3,10,-3,5,7,-1,-10,2,4]],[[6,4,8,-10,-1,4,-3,-6,-8,-5,6,8],[7,-2,4,4,-6,2,6,10,4,-5,-3,-9],[10,2,9,5,-10,5,-5,-3,-7,4,6,3],[8,-6,-1,-1,-10,8,5,-5,10,-10,-1,7],[-10,3,7,-6,4,-7,9,-5,-1,10,6,-2],[7,3,-4,8,-3,10,7,-4,-9,5,9,9],[-2,-7,-6,7,8,1,-2,6,10,-3,3,7],[8,-8,-3,-8,-5,5,3,-5,2,5,-7,-9],[-8,-3,10,10,1,7,-6,8,10,-3,7,-2],[-5,5,9,-10,-4,7,-2,-4,-5,-8,-3,-2],[-2,-6,4,8,-6,-3,6,-1,6,-6,2,-1],[10,10,6,8,7,-8,1,-10,8,-1,7,-7],[-9,9,-3,-10,2,8,-10,-7,-2,7,1,-10],[3,5,3,-10,5,4,4,2,-4,3,1,-2],[-4,-4,-10,-6,-8,-2,-3,3,-4,7,-3,-3],[1,2,7,-5,-4,-8,3,-7,6,-2,-4,6]],[[-4,-5,2,-3,-5,7,8,2,10,8,5,6],[5,-10,-3,-6,-9,-3,10,-8,-2,6,6,1],[2,-1,5,8,-5,10,5,6,-8,7,-6,4],[9,-7,-1,-2,10,-10,1,6,8,-4,1,-7],[9,-6,10,-1,9,5,-6,1,-10,-2,10,-7],[-3,1,10,-10,5,-4,-5,5,4,-4,-9,-8],[-9,-2,-6,9,-9,-1,10,8,9,-10,8,10],[5,4,-10,-3,-1,-8,-3,6,7,2,3,5],[-3,-8,-10,3,-4,-9,7,3,-6,-7,-8,-2],[-2,-4,-4,9,-4,8,-7,9,-10,-6,-10,-7],[10,9,6,-4,-6,5,7,-7,3,5,10,1],[-2,-7,4,3,9,-3,-3,-5,-7,-9,6,-7],[3,9,6,1,7,-2,-3,6,-5,7,7,-5],[6,-3,1,-3,4,8,-4,-7,1,1,-2,-6],[-5,5,8,-10,-7,7,5,-2,4,8,-1,6],[-6,-5,-3,7,5,3,5,8,-8,-8,6,1]],[[-4,-7,-6,8,-1,10,6,-3,-1,-6,10,6],[10,-9,8,8,1,-6,2,10,-4,9,-10,-3],[-9,-5,3,-4,-7,-9,7,4,7,-6,1,4],[8,7,6,-7,7,3,-5,-2,4,-9,3,8],[5,-10,-1,4,-8,5,3,10,-8,-1,-1,-7],[-6,-3,-2,-8,-6,3,-3,-7,2,-6,6,6],[-8,-6,9,4,-2,4,-10,10,3,5,4,8],[4,10,1,-3,-2,7,-4,9,-8,9,7,5],[-5,-7,-4,5,-10,-9,5,-9,-3,-10,-7,-1],[4,-4,1,3,2,5,7,-6,-8,-8,-9,10],[5,-8,-9,-9,1,3,3,-8,-6,-2,2,1],[-3,3,-8,-3,-2,-5,-2,-3,-8,-4,4,7],[-4,4,7,8,-6,1,3,-9,6,8,-8,2],[-9,8,-10,-5,6,-2,7,-2,-2,-7,10,2],[9,4,10,7,4,-5,2,1,-1,10,5,-1],[8,4,5,2,5,-5,-3,4,-8,2,-1,10]],[[5,8,-4,9,-8,-8,8,-6,7,7,4,9],[-2,-3,-3,-3,-1,-10,-1,-6,3,-9,-5,5],[-6,2,-6,3,-2,-1,7,5,6,-4,-6,3],[6,4,8,-1,-2,6,6,5,4,-4,1,-1],[-7,-3,5,6,-9,3,8,4,9,-7,9,-4],[2,-6,-7,10,-1,-9,-9,8,-3,-7,-4,-10],[-3,9,-3,-7,-1,7,-9,2,-10,-8,5,-8],[6,-9,8,-7,-10,-1,9,7,-2,-8,1,-10],[-10,-1,6,-1,-7,-5,2,4,-8,5,4,9],[-6,6,6,10,6,-9,1,5,2,10,3,6],[-10,1,2,-9,-7,-8,3,-9,9,1,9,7],[7,-5,-3,2,-1,9,-4,-4,5,6,-1,-9],[2,-10,8,-2,7,3,-8,5,-1,5,-3,10],[2,-8,-10,1,6,1,-9,7,2,-5,-9,2],[-5,7,5,-5,-3,7,-9,5,2,-9,1,-6],[-8,-3,-1,6,1,3,-3,2,3,-1,-10,8]],[[-2,-4,1,-6,-2,7,-4,-1,-8,-1,-5,1],[4,10,8,-7,-3,3,-10,-4,-10,8,-5,10],[-5,6,-4,8,1,-2,-6,-9,-10,4,3,-4],[10,-6,-5,8,-7,-10,3,1,-7,-1,3,-3],[-2,5,-6,8,-3,1,-1,7,-3,-1,8,10],[-4,-10,3,-2,-10,-10,-5,2,-3,7,-2,-1],[3,3,1,-9,-6,-4,10,-6,2,-7,-6,-7],[2,2,10,10,5,-7,7,-3,-4,-4,4,5],[5,5,10,10,-7,5,8,-5,9,9,-9,-10],[1,7,3,-1,1,2,9,-3,-6,8,-4,-5],[6,-8,6,7,-4,-3,6,7,-2,-1,3,-9],[-2,3,9,-8,3,9,-6,9,1,-6,7,-6],[-4,-10,-1,-8,-6,-9,-2,-10,-3,-6,-5,8],[8,5,-9,4,10,-4,5,-3,6,7,-9,3],[-6,-10,6,7,3,-9,4,8,9,2,4,8],[7,8,-2,9,-3,-9,6,5,9,-2,9,-7]],[[-1,-4,-6,7,-10,1,-7,2,-9,9,10,-5],[-7,-3,6,-7,-9,-6,-3,-10,7,7,-10,-3],[1,-4,-5,-9,7,-1,10,-2,8,5,10,-6],[-5,-10,-1,5,3,10,-2,2,-1,-2,10,-1],[1,-10,1,7,-9,4,10,-2,1,-2,-1,2],[-9,4,-8,8,10,2,3,9,8,4,3,2],[-7,8,-1,9,-3,-9,-7,2,-4,3,6,1],[-5,2,10,3,8,-7,-10,-9,9,-5,5,-8],[-2,8,2,3,-6,-7,-9,-8,-4,10,-1,-6],[-8,-9,-8,4,9,-9,-3,2,9,10,2,9],[-2,7,-7,-4,-5,8,3,7,-5,-4,-1,2],[6,10,-9,-1,5,2,4,-6,10,-6,7,-4],[-10,-3,-5,-10,6,-6,-8,-7,8,2,-7,4],[-4,2,-2,4,-5,4,3,-8,6,5,4,5],[-1,-5,-7,8,7,-3,-6,-2,5,8,2,6],[-1,-1,2,8,-5,6,2,-5,3,10,4,-10]]], dtype = "int64")#candidate|6103|(13, 16, 12)|const|int64
var_6104 = relay.var("var_6104", dtype = "int64", shape = (13, 16, 12))#candidate|6104|(13, 16, 12)|var|int64
bop_6105 = relay.not_equal(const_6103.astype('bool'), relay.reshape(var_6104.astype('bool'), relay.shape_of(const_6103))) # shape=(13, 16, 12)
uop_6114 = relay.acos(bop_6105.astype('float64')) # shape=(13, 16, 12)
bop_6123 = relay.floor_divide(var_6104.astype('float64'), relay.reshape(bop_6105.astype('float64'), relay.shape_of(var_6104))) # shape=(13, 16, 12)
output = relay.Tuple([uop_6114,bop_6123,])
output2 = relay.Tuple([uop_6114,bop_6123,])
func_6126 = relay.Function([var_6104,], output)
mod['func_6126'] = func_6126
mod = relay.transform.InferType()(mod)
mutated_mod['func_6126'] = func_6126
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6127 = relay.var("var_6127", dtype = "int64", shape = (13, 16, 12))#candidate|6127|(13, 16, 12)|var|int64
func_6126_call = mutated_mod.get_global_var('func_6126')
call_6128 = func_6126_call(var_6127)
output = call_6128
func_6129 = relay.Function([var_6127], output)
mutated_mod['func_6129'] = func_6129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6177 = relay.var("var_6177", dtype = "float64", shape = (14, 13, 6))#candidate|6177|(14, 13, 6)|var|float64
var_6178 = relay.var("var_6178", dtype = "float64", shape = (14, 13, 6))#candidate|6178|(14, 13, 6)|var|float64
bop_6179 = relay.not_equal(var_6177.astype('bool'), relay.reshape(var_6178.astype('bool'), relay.shape_of(var_6177))) # shape=(14, 13, 6)
bop_6182 = relay.subtract(bop_6179.astype('uint64'), relay.reshape(var_6177.astype('uint64'), relay.shape_of(bop_6179))) # shape=(14, 13, 6)
func_38_call = mod.get_global_var('func_38')
func_41_call = mutated_mod.get_global_var('func_41')
const_6189 = relay.const(3, dtype = "uint64")#candidate|6189|()|const|uint64
var_6190 = relay.var("var_6190", dtype = "uint64", shape = (20, 180))#candidate|6190|(20, 180)|var|uint64
call_6188 = func_38_call(relay.reshape(const_6189.astype('uint64'), []), relay.reshape(var_6190.astype('uint64'), [15, 15, 16]), )
call_6191 = func_38_call(relay.reshape(const_6189.astype('uint64'), []), relay.reshape(var_6190.astype('uint64'), [15, 15, 16]), )
func_521_call = mod.get_global_var('func_521')
func_524_call = mutated_mod.get_global_var('func_524')
const_6194 = relay.const([[False,False],[False,False],[False,False],[False,False],[False,False],[True,False],[True,True],[False,False],[False,False],[True,False],[False,False],[True,True],[False,True],[False,True],[True,True],[False,True],[True,False],[False,True],[False,False],[False,False],[False,True],[False,True],[True,True],[True,True],[True,True],[False,True],[True,True],[True,False],[False,True],[True,True],[True,True],[True,False],[True,True],[False,False],[True,False],[False,True],[True,True],[True,False],[False,False],[False,True],[True,False],[True,True],[True,False],[True,True],[True,False]], dtype = "bool")#candidate|6194|(45, 2)|const|bool
call_6193 = relay.TupleGetItem(func_521_call(relay.reshape(const_6194.astype('bool'), [5, 6, 3]), relay.reshape(const_6194.astype('bool'), [5, 6, 3]), ), 1)
call_6195 = relay.TupleGetItem(func_524_call(relay.reshape(const_6194.astype('bool'), [5, 6, 3]), relay.reshape(const_6194.astype('bool'), [5, 6, 3]), ), 1)
output = relay.Tuple([bop_6182,call_6188,const_6189,var_6190,call_6193,const_6194,])
output2 = relay.Tuple([bop_6182,call_6191,const_6189,var_6190,call_6195,const_6194,])
func_6213 = relay.Function([var_6177,var_6178,var_6190,], output)
mod['func_6213'] = func_6213
mod = relay.transform.InferType()(mod)
mutated_mod['func_6213'] = func_6213
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6213_call = mutated_mod.get_global_var('func_6213')
var_6215 = relay.var("var_6215", dtype = "float64", shape = (14, 13, 6))#candidate|6215|(14, 13, 6)|var|float64
var_6216 = relay.var("var_6216", dtype = "float64", shape = (14, 13, 6))#candidate|6216|(14, 13, 6)|var|float64
var_6217 = relay.var("var_6217", dtype = "uint64", shape = (20, 180))#candidate|6217|(20, 180)|var|uint64
call_6214 = func_6213_call(var_6215,var_6216,var_6217,)
output = call_6214
func_6218 = relay.Function([var_6215,var_6216,var_6217,], output)
mutated_mod['func_6218'] = func_6218
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6239 = relay.const([[[-2.349344,-1.696266,8.259469,-2.606020],[-8.038665,-2.036703,8.239282,-3.901651],[5.701316,1.450049,9.353686,-9.066692],[2.150876,-6.778754,-1.156912,-2.200741],[5.816871,-4.616356,0.960980,8.477682],[4.855412,9.175564,5.727084,9.634962],[1.480697,-2.354928,-0.251855,8.682363],[6.813847,6.566589,4.427962,-8.784817]]], dtype = "float64")#candidate|6239|(1, 8, 4)|const|float64
uop_6240 = relay.sinh(const_6239.astype('float64')) # shape=(1, 8, 4)
uop_6242 = relay.log(const_6239.astype('float32')) # shape=(1, 8, 4)
output = relay.Tuple([uop_6240,uop_6242,])
output2 = relay.Tuple([uop_6240,uop_6242,])
func_6245 = relay.Function([], output)
mod['func_6245'] = func_6245
mod = relay.transform.InferType()(mod)
output = func_6245()
func_6246 = relay.Function([], output)
mutated_mod['func_6246'] = func_6246
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6245_call = mod.get_global_var('func_6245')
func_6246_call = mutated_mod.get_global_var('func_6246')
call_6262 = relay.TupleGetItem(func_6245_call(), 0)
call_6263 = relay.TupleGetItem(func_6246_call(), 0)
output = call_6262
output2 = call_6263
func_6264 = relay.Function([], output)
mod['func_6264'] = func_6264
mod = relay.transform.InferType()(mod)
mutated_mod['func_6264'] = func_6264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6264_call = mutated_mod.get_global_var('func_6264')
call_6265 = func_6264_call()
output = call_6265
func_6266 = relay.Function([], output)
mutated_mod['func_6266'] = func_6266
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6245_call = mod.get_global_var('func_6245')
func_6246_call = mutated_mod.get_global_var('func_6246')
call_6286 = relay.TupleGetItem(func_6245_call(), 1)
call_6287 = relay.TupleGetItem(func_6246_call(), 1)
output = call_6286
output2 = call_6287
func_6288 = relay.Function([], output)
mod['func_6288'] = func_6288
mod = relay.transform.InferType()(mod)
mutated_mod['func_6288'] = func_6288
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6288_call = mutated_mod.get_global_var('func_6288')
call_6289 = func_6288_call()
output = call_6289
func_6290 = relay.Function([], output)
mutated_mod['func_6290'] = func_6290
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6264_call = mod.get_global_var('func_6264')
func_6266_call = mutated_mod.get_global_var('func_6266')
call_6350 = func_6264_call()
call_6351 = func_6264_call()
uop_6356 = relay.log2(call_6350.astype('float64')) # shape=(1, 8, 4)
uop_6358 = relay.log2(call_6351.astype('float64')) # shape=(1, 8, 4)
output = relay.Tuple([uop_6356,])
output2 = relay.Tuple([uop_6358,])
func_6360 = relay.Function([], output)
mod['func_6360'] = func_6360
mod = relay.transform.InferType()(mod)
mutated_mod['func_6360'] = func_6360
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6360_call = mutated_mod.get_global_var('func_6360')
call_6361 = func_6360_call()
output = call_6361
func_6362 = relay.Function([], output)
mutated_mod['func_6362'] = func_6362
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6264_call = mod.get_global_var('func_6264')
func_6266_call = mutated_mod.get_global_var('func_6266')
call_6373 = func_6264_call()
call_6374 = func_6264_call()
func_6360_call = mod.get_global_var('func_6360')
func_6362_call = mutated_mod.get_global_var('func_6362')
call_6381 = relay.TupleGetItem(func_6360_call(), 0)
call_6382 = relay.TupleGetItem(func_6362_call(), 0)
output = relay.Tuple([call_6373,call_6381,])
output2 = relay.Tuple([call_6374,call_6382,])
func_6387 = relay.Function([], output)
mod['func_6387'] = func_6387
mod = relay.transform.InferType()(mod)
mutated_mod['func_6387'] = func_6387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mutated_mod.get_global_var('func_6387')
call_6388 = func_6387_call()
output = call_6388
func_6389 = relay.Function([], output)
mutated_mod['func_6389'] = func_6389
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6245_call = mod.get_global_var('func_6245')
func_6246_call = mutated_mod.get_global_var('func_6246')
call_6433 = relay.TupleGetItem(func_6245_call(), 1)
call_6434 = relay.TupleGetItem(func_6246_call(), 1)
func_1091_call = mod.get_global_var('func_1091')
func_1095_call = mutated_mod.get_global_var('func_1095')
const_6436 = relay.const([-8.831360,7.077816,-5.007042,-1.911157,0.007542,-5.132120,4.453491,-3.179016,3.857596,-1.571019,2.890568,8.983553,-8.528400,8.223873,-0.459730,7.457742,-6.013390,-6.305060,6.059413,-4.524459,-9.338914,7.042051,-2.564170,-3.098265,6.061296,7.406728], dtype = "float32")#candidate|6436|(26,)|const|float32
const_6437 = relay.const([3.454031,1.916743,-0.439951,-1.169026,4.575375,4.115679,7.489906,0.657367,7.006639,3.609244,5.860472,2.919808,0.793742,5.047612,-1.567791,-0.182807,1.985944,2.669550,-8.931717,1.838744,-8.272690,-9.024882,-1.158724,9.436835,2.412235,8.025374,-4.281867,8.239075,-7.631319,6.391712,-7.120287,-1.454020,9.239532,3.445567,8.225934,-0.045683,-6.024488,-4.429304,-4.044491,-1.213092,-7.891494,-6.071361,-8.055121,-7.926234,4.141610,1.030593,4.197205,7.743735,6.788572,-3.352396,8.551184,7.821677,-5.275019,6.173424,6.852799,-2.765021,2.912324,4.819627,-1.889836,-5.307629,1.845041,-0.514750,9.900581,6.299760,-2.201167,-5.302303,-1.137705,3.374927,9.393994,-7.281470,-7.494434,-7.398473,1.989289,-7.309472,-5.401331,0.923613,-7.969385,-0.229504,-4.630452,7.915004,-5.001340,-7.136163,5.303006,4.172515,-6.820002,0.952948,-5.179120,2.168229,8.182469,9.319155,-0.232572,4.988639,-1.495593,6.998770,-4.503115,-6.180826,-7.874023,4.357617,-8.904615,-3.300851,-1.782203,-3.218212,9.218373,4.423459,7.724632,-9.722556,2.351268,-6.416030,-8.474949,-4.425633,-9.968783,9.742155,-1.891945,-0.714884,2.488363,9.786452,3.828261,-0.059132,1.702938,3.337524,-1.963400,5.309715,-1.474125,-7.424115,1.750157,3.242210,6.870457,-7.022673,1.450644,-7.866556,2.794148,6.867894,8.159677,2.353910,2.936557,9.897813,8.257863,5.028363,8.208045,-5.416256,4.369767,-3.841589,-5.067244,-2.129008,-9.474638,-1.621837,-2.892410,-3.605959,8.259007,8.903684,-7.053625,-8.993469,5.005117,9.722257,7.728105,7.954619,9.501560,7.287311,-5.248710,-9.582049,6.940075,-7.964642,-5.003893,6.351749,-8.453743,-7.076994,-4.179838,-2.269486,-1.327677,-1.232937,5.926372,-2.071726,9.232906,-5.599319,3.191438,-4.312731,5.545599,0.936514,5.868083,8.846871,5.146537,3.606689,0.315792,7.090481,6.384988,0.222074,7.961569,-9.545028,-5.540951,-3.766527,3.647708,-8.451872,0.954651,-8.531258,-9.227470,-2.795007,0.880380,1.053750,-9.028129,-3.123620,-6.922135,-5.907586,-6.537750,6.543231,-8.531914,-6.460471,-9.757807,-8.447763,-5.479339,9.533535,0.279792,-6.409872,9.464773,1.975728,-5.841298,3.298488,1.593124,-2.671135,-4.958073,-8.956626,4.334247,-9.524790,1.541330,6.624679,6.513336,3.549018,7.990675,0.069466,7.367072,-1.589456,9.921779,5.282821,1.161992,-2.247193,6.425744,-3.172037,7.813231,-9.961560,-4.102456,8.315419,-6.754876,-8.373455,-5.547073,-5.600039,-9.371430,-3.401147,0.134658,-1.072417,3.979777,-1.458687,-0.118824,-0.480966,-7.501041,-7.682318,-8.372610,-3.295474,-2.755576,-8.688249,6.074112,5.513980,7.002042,5.433599,5.964313,-9.879758,-9.532920,8.565586,4.965491,-1.719369,-4.736716,-2.087679,-4.184786,-9.856582,4.035687,-8.214216,3.130330,-6.177152,4.058631,0.823540,-5.233754,4.915865,8.262822,1.129876,-7.296050,-9.434361,-0.817574,-7.572754,6.168384,-0.107728,9.473727,3.730262,-7.391000,-4.447190,9.164112,-1.991560,7.515470,-4.395850,-2.726774,4.786085,-7.211450,4.415493,0.586974,3.460276,-5.137138,4.913948,-7.748738,4.937599,9.625582,-7.614184,1.622206,-2.730371,1.811046,2.584562,-7.715025,-2.420555,-4.970225,6.724994,6.821369,3.732973,-7.015439,-8.379383,4.386462,6.622463,9.983874,-0.212255,-7.383228,4.842929,3.411171,1.287286,6.449559,-9.989527,-1.632886,5.403613,5.592605,9.915660,-3.268753,-5.230224,4.704369,-9.259604,-4.979697,-4.454902,3.083275,-4.368298,-5.657092,-8.465518,2.994900,-7.626181,-8.610278,-7.803143,-2.962448,-1.400464,6.647912,-5.996139,-3.493033,6.632548,9.797083,-4.720974,0.684054,-4.013741,-4.157761,6.370274,9.991293,0.303869,-9.881933,7.609938,-7.200786,2.644624,2.191229,-5.921869,-9.771853,-4.150821,3.844931,-0.174659,4.919855,1.607111,6.293458,5.699910,-6.333353,-9.186528,-6.386252,4.816525,3.348864,-8.111972,-6.786950,1.494060,-7.709692,9.128670,-8.690743,-8.945893,-1.088508,6.267386,6.410112,-4.813469,-7.449737,-6.000353,7.725904,1.413625,-6.568230,0.732959,-7.547713,4.912107,-1.410890,7.411651,-8.285845,-8.310718,1.168372,-1.025424,-2.936875,-8.080360,0.332947,-4.280803,-3.442659,-3.909716,1.487430,0.234695,-0.763411,9.294789,0.418174,9.421219,-3.099617,-0.045623,6.264948,-3.977118,-2.448065,-0.571367,3.038563,-5.023012,-9.759747,-2.674516,-6.311144,-0.884051,-4.228514,5.522698,-3.229570,2.726206,-9.556336,-9.532678,-1.230838,6.307845,4.702712,4.308080,-5.048727,-9.159208,-9.636621,8.741701,-6.837276,6.885485,6.090228,5.013534,8.940729,-9.257488,-2.993263,2.498283,-0.591644,1.667126,2.987334,-5.003750,-6.533685,-1.459674,-9.590467,5.312564,1.156970,8.054934,4.739816,-7.592974,-0.276261,-5.255853,6.465759,1.758633,7.563622,2.717054,5.986530,-3.556257,-7.497648,-7.489398,-1.438815,-5.066782,-8.678370,-9.301149,-4.602535,-4.258790,-5.558444,6.397582,9.097111,2.940940,-9.285614,5.505747,-4.922921,2.099974,-3.368911,4.138759,-8.467571,8.135697,-5.921018,-7.835318,-2.750948,6.338238,-8.897184,7.653918,1.199968,-4.545919,7.401489,-2.343989,9.435956,8.079623,7.672513,8.454192,-3.960730,9.110467,-8.765616,6.381718,-9.909648,3.263234,7.986002,-7.060286,4.363730,-4.216530,-8.171967,4.357196,0.567822,-1.948073,3.994230,-0.563699,-2.413477,-8.856976,8.067225,6.372755,-5.636015,-6.108734,5.368604,0.205288,9.589149,-6.946397,-1.861398,-4.330002,-6.787504,-3.681595,-4.199620,9.393164,-8.181037,6.460094,2.296050,-2.824822,-4.951695,4.764445,6.472527,-4.506958,5.365469,4.314729,-7.907361,9.051174,-5.073891,9.778763,-2.703994,1.590484,-9.887107,-3.418525,1.956941,-7.982246,-7.597484,-1.392986,-6.167880,-1.826611,2.230600,4.952207,1.379287,-4.488611,-7.992412,-9.728540,-7.003199,-7.568683,5.284244,-4.718198,4.670990,-9.017501,-4.271923,4.168702,9.960571,-0.355252,5.580557,3.053507,-9.239750,-4.545897,6.324800,7.059371,-8.739499,-1.020033,2.168637,6.552233,1.012844,-6.948662,-1.837597,-9.337539,2.739370,-3.224520,-7.027199,-1.693697,4.893019,-5.746234,6.184770,-9.707130,2.561726,8.187721,3.292077,1.150830,-9.421839,-0.755288,3.650712,1.910481,-7.816667,-2.821375,1.273225,9.488379,7.728736,6.216904,-7.851367,7.486023,-7.154712,-8.309789,9.140323,9.081185,8.532922,-6.518114,-4.671958,8.512753,4.630063,-1.266740,-9.827055,1.313904,6.362584,2.032097,-4.604205,7.175789,7.749674,-9.954758,0.512681,4.637599,9.816981,0.438681,2.162909,-6.741558,-6.374610,5.461524,2.084820,6.310792,6.625911,-8.713275,9.713182,-3.103117,0.446468,4.903258,-7.841203,2.995641,-4.132575,-7.984624,5.004058,-9.627839,6.254699,2.342735,-9.657476,1.524017,0.617231,2.313116,5.101022,6.266774,-6.597053,4.804447,4.401901,-3.172215,3.636733,9.801466,-2.230315,2.152421,0.054922,-8.002426,2.362095,0.426245,3.828625,9.249825,8.910287,9.860062,8.256157,-9.369488,1.432463,-3.275745,5.497131,0.367994,2.470632,5.047659,2.985655,-3.806394,0.169604,9.103904,-1.343028,4.316576,-1.925955,1.610380,3.863237,-7.823143,-3.481979,-5.131399,1.107427,6.442464,-3.199384,8.718332,-7.856973,-9.175319,-3.164184,-9.349120,-7.584378,-2.477674,-7.973939,-4.773309,7.356222,-3.531283,7.421829,-3.961796,7.402480,7.838996,-1.254268,6.185719,-5.338818,4.645540,-6.511407,0.845942,3.167653,9.185709,3.330029,-8.326204,-2.918306,-9.335636,6.294818,-3.140060,9.066815,-3.096043,9.551125,-6.916503,2.934998,-5.779640,-5.002822,-6.264583,1.350217,2.716307,6.652364,9.081215,6.011911,5.578568,-8.031073,7.876475,9.994780,-3.874719,3.546309,-3.519910,-5.972449,-8.873221,-0.757525,-0.719618,-4.049901,-5.832572,9.353573,-1.187339,7.408633,5.574959,7.921181,3.883002,-6.497670,4.562791,8.280488,-0.366456,-7.135232,-3.562376,6.124917,-1.427343,-0.772938,7.128824,2.411939,-4.835100,5.501974,-8.702153,-5.795505,5.952865,5.373299,8.660634,-4.298003,-8.352426,-3.178287,3.248304,-3.823347,-7.070245,-4.584253,-8.522079,1.925970,1.440443,4.202368,9.925216,9.184262,-1.793345,-5.600043,4.574828,-4.734512,7.992479,-7.133573,-9.174226,4.160756,-5.484456,3.589875,9.225825,6.497604,2.949923,-0.265809,9.359008,-4.900761,3.216917,1.747612,3.340903,-0.621293,-2.166561,-9.472324,5.828311,4.420526,4.081247,9.169348,1.077618,6.565057,2.254635,-9.438667,-3.827665,-4.926751,5.729314,-8.953445,6.483696,2.794034,-3.709626,6.936434,8.795275,6.450283,4.994677,9.558127,2.061636,9.333264,7.351628,0.452081,-3.270274,5.232089,4.098331,4.671793,-4.659483,2.952746,-6.649950,2.936144,7.060924,-5.685620,8.814918,-8.825512,0.964417,1.571179,4.270001,-2.003957,-8.210512,5.189067,4.846542,2.886035,6.006731,-1.140557,7.586057,-5.937680,-9.211657,4.339005,-7.820010,1.124885,8.056083,-8.920186,2.136251,0.099286,-3.442750,-4.334758,1.208664,-0.521258,-5.473511,-1.963827,-9.669424,-2.553179,8.930031,-1.178215,9.623286,1.691151,-6.758783,2.337398,-7.296376,7.769917,5.843725,3.419654,4.537998,-6.012579,-6.433526,4.714327,1.288965,-3.192336,4.330522,-2.264343,-0.755076,-7.690864,-7.372179,-0.479369,-7.767112,8.037387,0.125974,-9.113008,-6.941184,-3.269859,2.731280,6.963702,-8.415699,6.581636,-7.150644,-8.426193,-0.996954,6.874256,0.409783,4.701063,-6.621420,3.016729,9.882229,-6.182605,-4.179417,0.477167,8.318900,-1.643291,-3.635415,5.919809,-2.297120,4.082260,-7.433108,0.124923,-0.180690,2.306497,3.912247,7.802218,-7.102686,9.900027,-9.897607,-4.095139,7.742222,9.872905,5.270272,9.038761,7.175271,-6.451274,7.359904,4.120842,-6.902310,-8.270186,7.307737,8.369765,-2.769693,3.131061,5.930970,-7.306923,-5.977949,-4.892958,-4.738993,9.141433,-3.141427,-3.447490,1.484660,8.472607,-1.265170,-2.848481,3.524895,-8.453756,-1.148273,9.767923,7.050051,-1.447914,1.696413,2.431577,-9.277215,2.159044,-0.266427,1.139550,5.303200,-7.560713,-9.588899,-0.250574,-5.123517,6.200640,-6.433144,-4.214702,-2.325216,5.611677,7.619610,-5.437210,-3.538813,-1.691103,7.971059,-1.197816,-8.471996,-1.448869,0.254859,0.908165,6.126002,-7.945319,0.147862,-1.502554,-8.852332,2.869735,-4.453363,4.181260,-7.092806,-3.104488,1.317328,-8.094525,3.662436,8.288574,5.129264,-7.848950,3.639608,-3.335434,0.795733,8.565330,1.690905,6.723575,-6.561149,-9.668521,-4.050731,-5.555674,0.707146,6.020367,9.027834,-9.922829,2.617511,-0.518769,6.615167,4.592560,6.655113,-4.123810,-7.954115,-8.955790,0.349551,2.776829,8.504921,3.618432,-0.685128,7.617927,2.107557,8.550043,-3.375907,-1.714120,-7.682669,-7.881332,-9.843925,-2.241846,-5.350881,7.063044,2.291554,0.129624,-3.598509,-9.380869,-4.779406,-2.296936,9.596554,-1.226913,6.721788,7.708624,3.469998,8.828012,6.910163,-7.461699,3.532176,4.077934,-5.064614,5.492917,6.661362,6.083210,-9.047590,-2.281705,9.617240,9.035402,9.495488,7.315045,8.081688,-9.032104,-0.158536,-4.385220,-3.379348,0.092223,9.313555,9.889985,-5.248844,-1.117789,-2.778789,-6.594106,3.637274,3.713350,-5.688293,9.311057,7.238693,-1.310819,-7.971765,5.360950,-7.297129,5.958193,-0.217793,4.433545,-4.332044,2.860166,-1.680612,-5.986202,2.945507,-0.646397,-9.199289,6.869463,6.150443,-5.520826,3.386060,-9.771170,-8.787258,5.304190,-1.206947,0.184903,-9.753838,4.595587,-7.625445,-4.910507,9.435296,9.102234,2.207733,-3.474431,0.601393,-5.564498,-7.600774,-4.766803,9.164758,0.023861,-2.479942,-5.014581,7.282360,1.799760,3.788556,-5.912362,-8.608995,2.128946,-9.286615,-5.076171,-5.035778,-2.332927,9.343136,2.306664,-5.892458,-3.670880,8.529283,8.948751,6.412038,-9.007896,8.268871,9.728029,-1.324404,0.592803,-2.443583,-8.119988,-1.997369,-4.615738,-5.028219,-8.136967,-3.621322,0.285308,1.675342,6.571434,-2.930221,-5.512628,-0.729643,2.720679,-5.730200,0.849309,4.114266,6.570653,8.041680,8.221913,4.007660,-8.209596,2.239651,6.284213,1.096947,6.753570,-5.541758,3.548235,7.055768,7.574470,5.558228,7.562293,3.528278,-5.749820,-1.190669,-4.275848,-1.890681,2.670258,-3.572565,-9.382442,5.723241,3.580404,7.961320,-9.945258,-1.296048,-3.633401,1.807175,-2.881094,-8.615947,0.232140,-9.929103,-6.545005,-0.809202,-0.123300,-7.584800,-4.087451,-8.597212,5.967456,-0.425696,1.161427,-4.088229,-9.501003,4.967357,-8.123486,-5.460055,-5.875979,2.224906,8.221510,-8.656566,-4.673733,-3.959563,9.312329,8.119419,8.656569,-2.556520,-6.551081,-0.719818,-8.411153,4.233769,-1.314617,-0.141352,-6.362832,3.384902,-8.275377,-6.326522,2.314585,1.596658,6.344759,0.873398,6.362110,9.780933,-9.795475,-2.212268,0.426732,5.088380,7.209860,-3.827883,0.449344,2.551230,-5.245806,1.006324,7.878213,-4.423704,4.896004,6.326243,4.158550,-4.559286,-2.417761,1.921971,-9.099311,0.259976,-0.358667,6.841312,-5.433104,1.384376,-6.822074,-2.544790,-1.091443,4.327369,-8.446428,-0.684345,1.027855,-3.633870,8.361638,-9.418498,-8.301170,-5.765529,2.127208,4.757900,-7.042322,-1.758566,5.871164,-8.469582,6.164431,5.867943,-2.235854,-6.002417,-7.541023,-6.522046,-0.746289,1.024456,-1.127944,7.444666,6.265547,9.022912,-5.852924,4.775170,-9.244698,4.319220,4.756298,-5.462092,-1.319746,4.784762,4.712719,-7.888010,-0.282902,-5.059470,7.991114,5.764704,-9.762026,5.474136,-3.897952,-3.649572,-0.769757,4.995002,-1.054116,-6.102062,-5.187182,9.299400,1.900464,3.467679,5.713430,-0.455080,8.872537,-4.563912,3.735887,-8.088270,-0.883638,-4.357114,-7.080546,-9.957167,6.342437,8.396718,-6.339698,4.017525,0.535482,-6.392965,7.823193,8.684819,-6.861196,-3.029330,1.004937,0.149247,-3.290118,0.060052,7.914924,7.645667,-1.829562,-0.099294,-8.450366,-6.573363,-4.761395,-9.686033,8.441560,4.218297,2.387155,0.370254,-2.955997], dtype = "float32")#candidate|6437|(1365,)|const|float32
call_6435 = relay.TupleGetItem(func_1091_call(relay.reshape(const_6436.astype('float32'), [2, 13, 1]), relay.reshape(const_6437.astype('float32'), [1365,]), ), 1)
call_6438 = relay.TupleGetItem(func_1095_call(relay.reshape(const_6436.astype('float32'), [2, 13, 1]), relay.reshape(const_6437.astype('float32'), [1365,]), ), 1)
func_3486_call = mod.get_global_var('func_3486')
func_3491_call = mutated_mod.get_global_var('func_3491')
const_6449 = relay.const([3,9,8,9,2,-7,4,-3,-6,3,5,-9,-10,-8,-6,-5,4,-8,-5,-2,-1,-1,-8,3,-9,9,10,-8,9,-1,4,5,-1,10,4,-4,10,9,-10,-2,-9,-4,1,1,-7,-6,-8,8,-7,-7,8,-5,-5,-6,5,5,-9,4,10,-1,-8,7,-9,5,-1,7,4,-10,4,-5,4,-4,-8,4,-4,4,-1,7,-5,-7,5,-10,6,7,5,-1,-3,-1,-5,-10,9,2,6,-9,-4,-9,-2,7,8,10,-9,2,7,-4,10,5,7,-9,-9,-5,-7,-1,5,7,-5,7,-7,5,-6,-8,2,-8,-1,3,9,2,-2,5,4,-1,8,-4,-10,-8,-9,-7,-2,-9,3,-4,9,8,-2,1,6,6,1,-8,-10,-9,5,-9,2,1,-9,8,2,9,3,-1,-1,3,-8,5,9,6,-2,2,-4,-9,-9,-10,5,6,-1,-6,-3,-6,-2,-10,7,-7,-2,2,4,-10,-8,-6,2,-2,-9,5,9,-5,-4,-2,-3,-1,7,-1,-5,-4,1,-8,1,6,-2,4,-4,-4,3,1,-4,1,4,-4,4,3,-9,-10,5,-2,9,-10,-4,3,-10,-5,5,-8,9,9,2,-1,-5,1,7,6,-7,8,9,-1,6,-5,-4,-3,7,-8,-5,7,-10,-9,10,-2,2,-10,-3,-3,-9,-1,1,9,5,-4,6,10,2,2,7,-10,-4,-3,3,8,-4,6,3,3,3,-10,-3,-7,-2,-4,3,-1,4,5,-9,1,4,-1,5,6,-3,8,-9,-8,4,-1,8,5,7,3,-7,-1,4,-7,-6,-6,9,5,-1,-8,-9,-1,2,-10,9,5,8,6,-8,10,4,-4,-1,1,-4,-6,-10,9,-6,1,4,3,1,-5,-10,4,-2,9,9,-7,8,5,2,-10,-7,-6,-6,-5,6,-10,5,-10,-2,2,8,-4,5,-8,7,7,-8,5,10,3,-9,4,-6,-1,-5,2,2,-4,7,-4,-10,8,-4,4,-2,3,1,-3,2,-9,-7,-2,9,8,8,2,-4,7,-3,3,-1,5,2,3,4,-2,-5,1,-2,1,2,-7,-4,-4,9,-2,-4,4,-7,-3,-1,1,1,9,3,-3,-3,-9,7,6,3,-8,-7,6,-1,4,-3,-7,8,-6,-6,-4,-1,8,8,-6,3,1,-6,1,-3,-1,-9,1,-2,8,7,-9,-7,-6,2,-8,-6,3,6,-1,-1,7,1,-9,6,3,9,2,10,1,-2,6,-9,-1,-5,6,-7,5,-1,-10,-2,-2,4,7,4,7,10,-5,6,-4,10,-6,2,-4,-8,10,7,10,-6,7,-6,9,2,5,-1,9,-10,8,-8,5,-7,5,6,7,-2,-3,1,-6,-5,-10,-1,-8,6,3,8,-10,-2,7,8,-10,-8,-3,-5,5,2,-6,6,6,-8,6,8,1,8,-7,-3,1,2,-4,2,6,-5,-9,-6,3,-7,-2,-2,6,-2,-8,-4,8,-10,-2,10,-8,-2,-5,5,4,6,8,10,8,1,-7,-5,-8,7,-9,7,3,-8,10,6,-7,10,10,1,2,-6,-6,3,-5,-3,-7,-4,2,9,-7,-5,-7,10,-5,-7,-3,-7,1,-3,10,3,-8,10,-10,1,-5,-10,3,2,-2,-6,-10,-6,-1,-7,4,-10,8,-2,10,4,2,-10,5,-3,-8,4,10,-9,8,3,8,4,-7,4,2,5,-3,6,-6,9,-6,2,-2,8,-8,1,8,4,4,3,8,-9,-2,1,4,9,-2,9,-3,3,9,1,-1,-1,5,-2,-1,-3,6,8,-3,-3,2,-10,-6,-8,9,2,-6,-7,-6,-3,-10,7,-10,9,4,10,-1,-10,-3,3,2,2,-8,-9,9,-1,-10,-8,-5,-6,6,-4,-6,5,-5,-1,-4,4,-5,-8,7,-7,8,-7,-2,-10,9,-7,-10,-4,3,-9,2,2,-6,-2,-8,10,-4,-8,8,-7,4,1,8,-9,5,-9,3,2,2,4,5,-7,-9,-5,5,-5,6,4,-5,7,1,5,-9,-3,3,2,-9,6,4,-8,-3,-9,-1,7,6,-6,-1,-10,9,3,1,9,4,2,7,8,-5,1,2,3,-1,4,1,-4,7,2,3,-8,7,7,-9,5,4,9,-3,3,-1,-8,8,3,-9,1,-6,-1,10,6,4,3,-7,-3,5,6,10,-8,-8,-4,-6,1,8,5,-1,-7,-4,5,3,4,4,5,6,4,4,2,-7,-2,-6,-10,7,2,-8,-3,-4,10,-8,4,8,-7,10,-4,2,-9,-2,5,-8,3,5,8,4,7,-3,-6,-1,-7,2,-5,9,5,6,-5,9,10,-5,-3,-8,-10,1,6,-9,-4,-4,7,4,-7,2,-5,-9,6,5,4,10,-4,10,-5,-3,-1,-10,2,-10,4,-2,-6,-6,-6,10,4,-4,10,-8,-4,-4,2,3,7,5,-7,2,10,4,9,-6,3,-1,5,-10,4,3,-9,10,-10,-9,3,-10,1,1,-1,3,8,-9,-7,1,2,-5,-10,6,1,-9,-9,9,7,2,-8,2,-10,10,-7,-9,5,-9,-1,7,2,-8,6,-5,-7,9,-1,-1,1,10,-2,-6,-5,4,-1,9,6,6,-5,3,5,7,-2,-1,-10,10,10,-1,-2,-2,-5,-6,-6,-2,-1,-3,8,6,-8,4,8,4,-1,-6,1,4,6,-8,2,3,7,-4,6,7,-9,-4,7,6,4,-1,-7,-10,4,-5,-7,4,4,1,7,4,10,-2,7,-5,1,5,-10,3,2,-4,8,-5,5,-2,7,-8,-5,6,-10,4,-8,1,1,-5,4,4,-7,-4,-8,-5,-2,1,-5,1,9,-1,2,4,6,10,9,1,6,8,-4,6,8,-5,-6,10,-2,2,-3,-1,6,-8,-7,10,-6,5,3,-6,-3,-2,9,-4,-3,9,3,-4,3,-3,-4,-4,-5,-10,4,-7,-1,6,3,3,6,-3,-3,-7,2,9,-7,6,-3,8,6,-4,6,-7,2,6,-3,7,7,-4,-8,-3,-7,-4,-9,8,10,10,-4,5,-8,-5,10,-9,-10,6,-8,-2,1,-3,-10,4,5,-4,-5,-8,-9,-6,-9,-8,7,-6,4,-10,-3,3,-6,-3,-3,1,-5,-10,1,5,-10,8,6,4,1,-3,7,-6,-5,3,6,-3,-2,-9,-9,-7,-9,8,-9,5,6,-4,6,-5,1,-8,-3,-9,-5,2,-5,5,-3,9,-3,2,4,2,8,-2,7,-5,10,7,-4,-9,7,-5,7,2,10,-9,2,4,-3,8,-6,-2,8,-2,-8,5,7,8,4,3,-6,8,-8,-7,-9,-8,-9,-1,-10,1,-8,-7,-6,6,-3,-4,3,-6,-4,-9,9,10,-10,6,6,1,-4,8,3,2,4,6,5,10,6,-4,9,-4,-5,-2,-8,6,3,-3,-9,-2,-10,4,-10,-7,-4,-3,5,5,-8,4,1,-9,5,1,-9,-8,-1,4,-7,-10,-4,-7,10,8,10,-5,1,7,8,-1,-3,5,3,5,-2,2,-8,4,10,6,-5,3,7,-3,10,-1,3,6,7,6,6,5,7,-2,1,-9,8,-2,3,-9,9,5,6,-8,3,-2,1,3,-7,7,2,4,-9,7,4,-5,8,5,-9,8,-8,-1,10,-9,8,6,-5,3,1,-5,10,7,8,-3,-6,9,3,-5,3,-3,3,4,-2,-1,9,-9,6,6,-10,2,-9,-2,-2,-9,-10,-7,-4,10,-10,-10,-6,5,-6,7,9,4,2,-4,2,9,-8,6,9,-7,-6,7,5,-6,-4,-7,-4,-5,-6,1,2,1,-10,1,4,10,4,-3,-1,2,-6,2,-9,-8,-4,4,-3,-10,-3,-2,-9,-6,-2,-6,2,2,-6,-9,9,-1,-8,-3,-9,4,3,8,2,7,-6,9,-10,5,-5,-10,-2,1,5,3,-6,7,-4,-3,10,10,-4,4,-10,-1,-5,-9,-1,1,4,-1,10,2,-2,10,-7,-8,9,-7,4,4,-9,8,-5,8,-2,2,7,-8,10,-1,-8,10,-2,6,4,-5,5,5,-2,-9,-3,8,8,-9,4,7,-6,1,3,1,-7,2,-10,2,-1,-10,-4,4,-6,10,10,4,-4,3,-2,7,-3,-1,-8,-8,-6,3,7,-3,10,-5,-1,-6,3,4,-8,-5,2,5,-1,-8,1,6,-1,-3,2,-1,6,-10,9,-4,-7,-7,9,10,2,6,1,3,10,-3,1,-7,-1,8,1,6,-3,6,2,-1,-3,-10,-8,8,-7,2,5,9,-4,-8,8,-2,5,-4,-5,-3,-1,-5,-6,-7,-4,-4,-6,-6,9,9,8,-10,-1,-1,-9,-5,9,-9,2,9,7,-6,-8,7,-6,7,-8,-6,1,-5,2,-3,3,6,-2,-1,10,-3,-10,6,-5,-8,9,-1,-1,-5,10,6,1,-9,8,-1,-7,-9,-3,1,-9,2,-4,10,-1,10,2,3,7,8,1,-8,-4,-5,3,6,6,-1,10,8,8,-1,4,-6,7,8,3,-8,4,-3,-1,10,6,-10,5,-8,-5,-5,-4,-10,5,8,-6,3,2,-7,-7,-2,10,-9,-1,-10,-5,-5,-6,-9,7,-8,-4,2,-7,8,-8,6,4,3,-4,4,-7,-8,6,-5,5,-7,-2,-6,10,4,-6,-5,10,6,2,3,10,6,9,10,-3,-4,6,8,5,3,6,2,10,10,-9,-3,8,-5,-9,2,2,10,7,-3,2,4,7,-4,3,7,10,-2,-9,5,2,3,5,-1,3,-5,-3,3,-2,-5,2,10,3,-10,9,-4,5,6,-3,2,-4,-1,5,-4,-2,5,-2,7,5,2,3,6,5,7,2,4,-8,10,10,10,7,-5,10,-6,9,10,8,-1,-9,-3,-10,6,3,-1,2,-2,-9,-7,8,4,5,-1,-2,-6,-3,-2,5,2,4,10,7,4,-10,2,6,7,-2,2,1,4,6,-8,4,10,3,3,-3,-3,9,3,3,-7,-10,-6,-9,-6,6,8,2,-9,8,-5,10,4,-5,-5,6,-3,10,-7,2,4,7,-10,-9,-4,-3,-8,8,2,-10,2,-6,-4,6,7,-7,8,4,3,-6,-2,7,-2,3,-8,9,-9,-5,-3,-4,-9,-3,3,4,1,-4,-1,-5,3,6,-1,1,2,-10,-7,7,-5,2,8,-5,-5,1,9,-8,-4,-6,-9,-4,3,10,-10,5,-7,-7,-2,-3,-1,-5,-2,3,-7,-2,5,1,-10,9,8,-7,-2,2,-7,3,1,8,-10,1,9,-6,-9,-2,8,1,5,4,4], dtype = "int32")#candidate|6449|(2016,)|const|int32
var_6450 = relay.var("var_6450", dtype = "bool", shape = ())#candidate|6450|()|var|bool
const_6451 = relay.const([9,-3,5,-10,-3,-10,-3,9,-8,-9,4,-8,-3,-4,-3,2,7,1,-1,10,9,-4,-9,-2,-10,5,-8,4,-5,-8,5,10,-5,8,3,-1,-8,-9,-10,3,3,-5,2,2,2,-6,10,-1,-9,5,8,6,-1,-2,-5,10,-4,-9,-8,6,3,-7,9,1,8,2,10,-2,3,1,-1,-8,-7,3,-9,5,2,6,1,-9,-3,-7,-9,3,4,-9,-6,2,-3,-1,6,4,-8,-9,-8,-2,-7,2,-9,-7,-3,-8,1,-4,-6,7,-1,-10,-1,-1,-7,-8,3,2,8,-5,-6,-2,2,1,3,10,1,6,-8,1,-10,-2,10,3,1,-1,-10,4,-10,-9,-5,8,10,-7,9,-6,8,1,9,-8,-3,-7,-3,-6,10,-8,6,-10,-8,-7,-7,-7,10,-5,-6,-1,-3,4,3,-10,5,7,-2,10,-6,-8,-1,-9,4,1,-6,-9,-5,6,-2,9,6,1,-5,-9,-9,5,3], dtype = "int32")#candidate|6451|(189,)|const|int32
call_6448 = relay.TupleGetItem(func_3486_call(relay.reshape(const_6449.astype('int32'), [16, 14, 9]), relay.reshape(const_6449.astype('int32'), [16, 14, 9]), relay.reshape(var_6450.astype('bool'), []), relay.reshape(const_6451.astype('int32'), [7, 3, 9]), ), 7)
call_6452 = relay.TupleGetItem(func_3491_call(relay.reshape(const_6449.astype('int32'), [16, 14, 9]), relay.reshape(const_6449.astype('int32'), [16, 14, 9]), relay.reshape(var_6450.astype('bool'), []), relay.reshape(const_6451.astype('int32'), [7, 3, 9]), ), 7)
uop_6463 = relay.sin(const_6451.astype('float32')) # shape=(189,)
output = relay.Tuple([call_6433,call_6435,const_6436,const_6437,call_6448,const_6449,var_6450,uop_6463,])
output2 = relay.Tuple([call_6434,call_6438,const_6436,const_6437,call_6452,const_6449,var_6450,uop_6463,])
func_6469 = relay.Function([var_6450,], output)
mod['func_6469'] = func_6469
mod = relay.transform.InferType()(mod)
mutated_mod['func_6469'] = func_6469
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6470 = relay.var("var_6470", dtype = "bool", shape = ())#candidate|6470|()|var|bool
func_6469_call = mutated_mod.get_global_var('func_6469')
call_6471 = func_6469_call(var_6470)
output = call_6471
func_6472 = relay.Function([var_6470], output)
mutated_mod['func_6472'] = func_6472
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6493 = relay.var("var_6493", dtype = "float32", shape = ())#candidate|6493|()|var|float32
var_6494 = relay.var("var_6494", dtype = "float32", shape = (11, 16, 15))#candidate|6494|(11, 16, 15)|var|float32
bop_6495 = relay.floor_divide(var_6493.astype('float32'), var_6494.astype('float32')) # shape=(11, 16, 15)
output = bop_6495
output2 = bop_6495
func_6499 = relay.Function([var_6493,var_6494,], output)
mod['func_6499'] = func_6499
mod = relay.transform.InferType()(mod)
mutated_mod['func_6499'] = func_6499
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6499_call = mutated_mod.get_global_var('func_6499')
var_6501 = relay.var("var_6501", dtype = "float32", shape = ())#candidate|6501|()|var|float32
var_6502 = relay.var("var_6502", dtype = "float32", shape = (11, 16, 15))#candidate|6502|(11, 16, 15)|var|float32
call_6500 = func_6499_call(var_6501,var_6502,)
output = call_6500
func_6503 = relay.Function([var_6501,var_6502,], output)
mutated_mod['func_6503'] = func_6503
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6288_call = mod.get_global_var('func_6288')
func_6290_call = mutated_mod.get_global_var('func_6290')
call_6505 = func_6288_call()
call_6506 = func_6288_call()
func_2272_call = mod.get_global_var('func_2272')
func_2278_call = mutated_mod.get_global_var('func_2278')
const_6519 = relay.const([[7.005423,6.403221,0.039695,0.253304,1.436214,-5.455604,4.372447,2.358733,8.132734,7.434975,-4.419733,2.840099,0.442807,7.183700,-3.117002,8.596210,-8.938933,0.231568,-7.263704,-8.451108,7.543550,-6.896764,1.741043,-6.355202,-1.134799,0.532099,-3.265336,3.851181,1.673753,0.472033,-1.003423,-7.062356,4.507455,-7.135360,-8.252329,5.748147,1.925328,8.409496,4.832152,-5.071049,8.917514,4.540641,-0.353935,9.411497,7.271415,5.366273,-7.558193,-5.344711,-7.391502,3.309814,-2.448974,-6.969299,-0.425038,-3.889411,3.306061,-6.248761,-2.125288,-3.169557,-3.687214,9.698275,-0.676342,3.572194,-3.103313,-5.183569,8.889392,8.403812,-3.775036,3.534006,0.933256,9.422225,-2.455433,-0.663234]], dtype = "float64")#candidate|6519|(1, 72)|const|float64
const_6520 = relay.const([-2.538926,5.036748,-8.838374,9.686904,-7.689929,0.252527,0.800722,8.667867,-6.345061,3.488739,0.096094,-1.654277,-4.958890,-4.599409,6.227190,5.452251,-6.704625,-4.514029,-7.347035,7.206202,4.386145,-5.070556,-5.496783,-2.268299,-0.720727,-3.313466,-7.898750,-5.091878,7.757011,-2.854566,-5.906913,5.966004,-6.726822,9.408884,6.952883,-2.022637,8.316747,-0.147578,-6.541441,-4.885205,-4.665738,-5.164751,0.065679,9.214276,-8.716525,9.139746,8.477095,6.550918,-6.422529,-7.184555,-1.047991,-3.323871,4.111327,4.086595,-0.591684,1.911967,-5.033612,3.915873,-0.808870,1.840678,5.446290,5.643334,0.423037,-2.456814,-8.395023,4.962842,3.553238,-5.282226,-1.644545,3.573724,-3.804586,1.252900,-7.753498,-2.393784,1.562911,6.015907,2.381435,-8.507985,-7.451694,-1.196897,3.321997,8.503081,-4.894511,-5.855168,7.594913,4.368588,-0.526909,-1.431979,3.073063,4.276271,-1.304030,9.895345,2.731403,-6.345316,3.270785,-1.932939,0.567457,2.770045,-2.965454,-0.144764,7.905710,9.634400,8.864520,2.863706,-9.476084,1.500104,4.115919,-4.516202,-0.849927,-4.451328,-8.243426,0.071308,-6.277760,9.513549,-2.129480,-0.676720,8.157068,9.749586,-9.582674,1.980517,3.050092,7.157354,-5.541098,5.845103,0.961726,-8.936665,6.487389,2.239261,-5.559083,-8.578441,-2.704475,2.273616,-0.047405,-0.975990,5.730071,3.760017,2.620409,9.323185,8.374960,-9.274258,4.321771,-7.838666,-6.055818,-9.800792,-8.087649,5.839669,-9.964595,-8.004041,1.791090,1.126136,-4.574608,7.819681,9.968185,0.066712,-0.088704,7.775462,-1.006265,-6.859108,8.049769,-4.773113,6.109586,1.003207,-9.862095,-5.371637,-4.230440,-3.197704,-8.220041,-1.759743,-1.481955,-8.682865,-9.201547,-8.283384,7.465948,2.429775,-2.945400,-6.607226,-2.045195,0.751281,6.135318,-9.468138,6.322123,7.291000,1.836917,3.879125,6.132358,-6.507751,-8.579820,2.552375,2.016465,-0.436016,-2.808441,5.689537,-0.153380,4.095703,-1.843532,-0.096888,-9.190962,8.603994,3.297564,5.672525,4.542888,-8.644601,9.502999,4.777348,4.097506,-9.973967,8.796812,-3.221536,-4.361361,9.589036,1.233324,-5.916104,9.638092,0.906975,-7.137120,-4.419736,-2.428358,2.064600,-4.996777,-1.776162,6.245926,1.187294,-4.630322,-6.945644,8.028248,1.934487,8.315899,-0.450847,-3.978436,-1.662016,-5.349763,-3.385087,6.770592,-0.105557,-1.215144,4.439055,7.683622,-3.905471,-2.647908,-0.271126,8.351379,4.906063,4.464512,1.451424,9.110328,0.244123,-2.666814,4.305740,6.642425,2.222680,-5.715977,6.196337,5.758224,-5.701843,1.623670,9.237684,-5.666491,0.517190,-7.954801,1.136248,-8.897979,-6.758237,-0.861346,7.527304,6.121782,-0.668334,2.278563,-4.392329,1.677587,8.774921,9.682837,9.882879,3.395426,-5.412199,-4.131311,9.059603,-2.184334,5.488372,7.881849,-5.709068,-7.713469,8.210644,1.633897,-5.799503,-7.633492,6.015539,6.647168,5.146611,6.048584,-4.624438,-3.769488,4.044020,0.173550,5.565388,2.823291,-3.956487,-8.269101,3.780402,3.005224,7.850062,1.345172,4.555200,0.973228,8.576070,-8.224533,-0.684993,-1.880122,3.330847,6.750967,-1.617438,6.727854,-6.984320,-2.452889,9.540836,2.705435,5.004624,6.703208,3.205705,-9.601460,3.020968,3.831264,9.187331,3.918389,5.464739,0.585649,8.107958,-5.951107,0.781949,-7.199063,-0.736704,7.880113,-5.434058,3.039945,8.794901,8.475921,-5.185397,1.011238,-3.443145,3.291640,7.693696,6.995987,8.797701,-8.245426,2.798104,1.078228,-5.041685,7.084460,1.711443,6.729872,-0.489404,1.971553,8.647751,-8.053371,-4.690314,9.015663,6.829368,-6.678777,9.880396,1.757429,5.671958,-2.651167,2.588554,7.887305,-1.752059,8.750411,7.752639,-3.070149,3.378790,-9.062272,-0.249892,9.819292,-1.447565,-5.788617,-3.148616,-7.346268,-8.522399,-9.615301,0.981489,-3.828674,-3.912943,-0.005200,-0.100160,-0.932953,-6.124131,3.956524,-4.446558,-9.653798,3.950818,-9.928234,-6.498835,2.472220,-4.073408,-2.447563,6.883891,7.297970,-3.523338,9.360687,-5.611641,7.306505,-9.487161,4.928889,7.668343,-9.933283,-0.881424,0.746805,9.869390,4.645918,-8.602027,9.183477,-3.135745,9.828493,6.928700,-6.670648,-8.921489,-5.615271,-3.968397,5.551540,0.210858,-7.110051,2.588651,-9.297838,5.684150,-4.616098,0.356870,9.458162,-9.955382,-0.980137,-3.527230,-7.955373,-2.362458,8.489500,-5.734917,3.846626,-3.120254,-9.396203,3.856354,2.677008,-5.790923,-2.881163,5.614888,-3.087942,-4.161568,1.968910,1.968741,5.497152,-5.783974,-1.984902,2.963119,-2.710426,-9.685257,2.427279,3.398108,-1.527649,-8.627424,4.061370,-4.273243,-4.189478,7.290176,1.347959,8.696366,-6.340981,-8.938472,-6.026347,-7.280299,1.503992,2.901633,-3.060817,1.672190,2.126088,1.357538,-7.907697,-4.790185,-7.088718,-2.629581,-3.201794,-5.119574,-4.845056,4.520331,2.786785,7.270965,-5.586095,0.551936,-2.157021,0.620207,0.183784,-4.444012,1.645229,-3.084525,-3.566083,1.950703,-9.185885,-8.240298,-9.721288,3.574195,5.242671,0.137836,-3.135284,7.888860,5.471898,-1.292396,2.243732,-6.797188,4.341341,0.980405,-2.479376,-6.871630,-2.846743,6.181835,-3.189286,-8.508575,5.815174,-6.633236,6.180212,-8.213951,-0.796650,3.440473,-1.993412,-3.599165,-1.297775,0.837500,9.416781,6.962209,-5.161449,-8.246784,6.533237,4.384153,-5.475449,-1.111094,5.948372,4.449198,4.893806,8.321663,-6.024810,9.903892,3.416979,7.486289,-5.922637,4.672071,1.698381,-6.997479,-0.447502,-3.841400,1.621795,-6.605582,7.615103,-5.064948,-0.012173,-2.593913,-9.406882,8.462776,4.633158,-6.407458,7.667344,-5.855935,5.211645,-4.974712,-4.618065,2.619972,6.087646,-6.856270,7.295897,-7.629799,2.284360,-8.387641,-9.941531,8.486815,1.293896,-1.040296,3.010264,7.505994,5.166312,5.898758,-2.207016,8.962473,-0.954199,8.542680,-4.766837,-4.128215,-2.303457,5.997428,-7.874473,-2.164760,-5.948063,4.482530,-4.856823,5.498878,-1.928984,4.534028,5.198701,-3.160304,9.961340,7.354439,7.961733,6.649553,-3.423954,1.878630,0.733504,-2.194026,-0.866500,-0.154509,9.263656,-0.644671,-9.226716,-9.908760,-4.781006,9.986188,-2.510499,2.295142,-5.444285,-7.735141,-7.749731,-6.424334,3.334059,3.343830,-5.315182,-7.128580,1.524534,6.275549,8.467695,6.380279,-4.604403,1.513740,2.608203,6.873214,7.910112,7.791001,2.083912,6.257134,-5.434203,-9.646053,-9.974360,-7.281264,9.179278,8.841507,-9.600522,-7.139372,-0.017890,4.334174,-9.589814,2.391139,-7.681536,4.668994,-7.313008,4.867051,-6.618255,4.803379,-0.121721,-4.754361,2.832619,-1.925084,8.285815,4.747804,-4.022766,1.646817,1.992573,-4.645178,7.201208,9.118800,8.931093,8.808509,-1.701946,-1.857614,-9.272891,-8.053016,2.009048,3.747012,1.613202,-4.439252,-8.314676,-8.724805,-4.699103,7.650805,9.080298,-6.654145,8.455121,-4.474284,-5.224531,7.965998,0.702147,0.280095,-3.446484,5.737378,7.397370,-8.700776,-6.556478,9.360901,8.696213,-9.392459,2.097045,4.410068,-2.013733,-4.921839,3.164540,-8.911385,7.082402,7.642086,-8.000899,1.700478,-7.067314,6.302122,-3.644391,1.011300,-9.240999,-7.184582,-9.316337,-5.509654,8.509957,-5.289573,-2.334715,-4.395428,-0.208291,-9.565714,-2.308681,-0.538016,5.484772,8.873074,-5.430209,5.730905,3.085668,-9.258522,-9.536977,-7.621330,3.558523,-3.417626,0.675419,9.433098,-6.717665,7.180278,7.140277,0.158013,0.093221,-1.374774,0.160465,-1.470043,-4.103123,2.712217,-7.234980,-0.036462,-8.132812,3.861520,3.362020,2.824552,-6.114365,1.760520,-4.084894,-0.439455,3.152890,2.515527,3.122803,3.749579,-0.545354,-2.843942,1.809253,-4.714798,8.722367,8.980689,-4.470101,-9.755031,5.195764,-2.975547,-3.347415,-9.264404,4.412050,-4.103337,0.594327,-0.362568,-3.778083,-7.664679,-1.365208,2.533967,6.541774,-8.656405,0.368018,-2.173226,-8.660008,-6.226108,-4.567709,0.775535,-7.964280,-7.720596,9.981743,4.061044,8.963025,2.913790,-6.720066,8.367703,-1.827834,1.576734,-6.164491,-5.408385,-1.225593,7.246293,0.289981,2.866544,-9.866648,-1.409810,-4.200862,-5.005625,6.213016,4.019883,-5.391381,4.075792,1.032164,9.030283,7.529893,-1.027416,-8.152458,-3.733017,-0.527435,-9.829089,3.938546,3.219980,-8.690548,0.750589,8.508487,-7.397312,6.246610,-3.083373,-2.820882,-1.791938,-0.183606,-6.246379,-2.809921,-5.766278,-8.307077,4.209416,7.317592,4.344758,-6.783930,-8.995857,-6.925578,-1.262720,-8.651716,-6.341002,-6.752619,-3.827572,8.698526,8.399102,5.178057,9.157885,-3.957443,1.078873,9.079346,-3.995890,1.156438,6.144810,4.787604,3.206609,5.489347,-9.314907,-6.409014,-3.804432,5.911922,8.492576,3.973706,-1.237112,-7.403684,-2.075018,8.592808,7.558602,2.664430,-4.586322,-0.790917,-5.587884,0.565781,6.686139,-6.007877,9.385891,-5.644915,-6.330800,6.364419,7.566218,5.179331,3.204191,-4.271558,3.395302,-7.260156,-4.301799,-5.590954,-0.607589,-5.208308,6.020903,5.036677,-2.713368,-7.412283,6.804509,-9.950328,6.667903,-0.207571,-2.092564,5.071578,-5.240669,2.786635,2.221359,-4.881355,2.816398,5.364487,6.760147,4.432047,-7.245129,-0.556465,-2.014798,1.550737,-1.864307,-0.936470,-8.999393,2.426020,5.415647,-3.087882,-1.314271,-0.697111,3.638236,-9.631664,-1.964283,-3.288027,8.001573,0.382193,3.935281,2.061681,-4.126725,-4.756084,-1.474651,-1.622647,-9.720855,-2.103702,8.703875,-3.609424,-0.779240,2.753131,3.446459,-9.184548,-8.399787,-8.088549,-5.198720,-2.702941,6.435977,6.652473,-0.872158,-8.244669,-7.898713,7.664476,3.930320,-1.507761,-6.380530,1.109429,-5.760791,9.727942,6.300017,-6.500214,7.470196,-8.400761,-8.046287,-6.838167,8.958841,5.301890,5.588238,1.315907,8.532199,0.286203,2.148034], dtype = "float32")#candidate|6520|(960,)|const|float32
const_6521 = relay.const([4.537145,-9.968834,2.259331,-7.374923,-7.992653,3.177426,9.013646,3.872315,1.149878,9.143756,-5.176419,-5.963021,-1.343332,-6.889365,5.118921,-7.626914,-0.431576,0.207438,7.508454,1.416088,-5.547229,-9.277572,-3.675217,-2.971672,1.100066,-2.089756,-7.940131,6.184624,8.413946,-2.509686,-4.002584,1.018987,2.358709,-9.665491,-7.579117,1.486443,-0.019933,-8.487496,7.384687,-2.397272,-9.534214,-0.219562,-8.449700,6.696556,0.274136,-9.492143,4.459503,-5.701227,-4.785899,7.277436,5.719073,7.962275,-0.063076,-8.906188,9.014012,-4.938115,4.321600,-1.998736,-4.831246,1.225189,-9.386241,0.708369,6.744625,-4.823211,-6.695963,-7.788387,-9.094269,-8.479529,7.662249,5.174063,9.768857,-3.347626,-8.982498,-7.545263,5.022648,8.698926,-7.529878,6.184408,-2.638429,7.353722,3.556278,-3.921998,-9.364072,-6.955906,6.258923,-7.381799,-4.506187,-4.565063,5.681079,6.370243,-8.540068,-3.627853,-6.590942,9.257179,-9.262002,3.361264,-7.932322,8.729948,-3.928362,6.549452,1.024347,3.560838,-1.904626,3.691584,-1.947371,-8.323610,7.738657,5.158395,-7.999658,-6.557102,-5.574534,-3.958328,-3.817959,6.614117,-0.339941,-2.963393,-0.465474,7.205554,8.868381,-2.378307,1.411584,1.136217,-7.870077,-3.809580,8.640948,4.986092,4.214244,-9.116845,1.987289,-0.930078,-1.020413,-6.621895,-4.352843,-0.636159,-2.339501,-6.224553,7.514266,-2.088528,-1.315542,1.577536,8.737802,2.268286,-6.900894,-8.135202,7.481649,4.412593,-1.218584,-4.417309,6.385545,-6.354573,-2.276796,-3.501910,-9.626301,0.697503,4.731174,-4.450536,2.755266,0.589908,-5.069639,8.347903,6.852743,1.096170,-8.327050,-3.328847,-8.780431,5.453601,4.935091,1.843306,-1.120165,6.302655,5.580955,8.137900,4.519535,-7.259241,-8.712587,-8.031497,0.438314,9.049552,8.989227,1.027026,2.271422,-9.702703,-1.348155,-1.981869,-9.671052,3.361702,-4.589991,-2.431161,2.219690,9.681556,8.648029,4.408272,2.581187,-6.159528,2.893479,2.278165,8.808126,9.632129,2.610331,-0.472172,5.042132,8.335073,-4.731364,-7.562433,-2.044723,-4.474238,0.351291,-3.867928,-2.390839,1.484180,9.588186,-5.918990,4.766733,-0.451797,-6.168354,-2.064537,-7.351822,2.508684,-5.718168,3.649323], dtype = "float64")#candidate|6521|(220,)|const|float64
const_6522 = relay.const([[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False]], dtype = "bool")#candidate|6522|(90, 1)|const|bool
call_6518 = relay.TupleGetItem(func_2272_call(relay.reshape(const_6519.astype('float64'), [4, 9, 2]), relay.reshape(const_6520.astype('float32'), [960,]), relay.reshape(const_6521.astype('float64'), [110, 2]), relay.reshape(const_6522.astype('bool'), [45, 2]), ), 5)
call_6523 = relay.TupleGetItem(func_2278_call(relay.reshape(const_6519.astype('float64'), [4, 9, 2]), relay.reshape(const_6520.astype('float32'), [960,]), relay.reshape(const_6521.astype('float64'), [110, 2]), relay.reshape(const_6522.astype('bool'), [45, 2]), ), 5)
output = relay.Tuple([call_6505,call_6518,const_6519,const_6520,const_6521,const_6522,])
output2 = relay.Tuple([call_6506,call_6523,const_6519,const_6520,const_6521,const_6522,])
func_6528 = relay.Function([], output)
mod['func_6528'] = func_6528
mod = relay.transform.InferType()(mod)
output = func_6528()
func_6529 = relay.Function([], output)
mutated_mod['func_6529'] = func_6529
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6560 = relay.const([[[-9],[-4],[-7]],[[-6],[-5],[5]],[[-2],[1],[-3]],[[4],[-4],[4]]], dtype = "uint32")#candidate|6560|(4, 3, 1)|const|uint32
var_6561 = relay.var("var_6561", dtype = "uint32", shape = (4, 3, 7))#candidate|6561|(4, 3, 7)|var|uint32
bop_6562 = relay.subtract(const_6560.astype('uint32'), var_6561.astype('uint32')) # shape=(4, 3, 7)
func_2819_call = mod.get_global_var('func_2819')
func_2823_call = mutated_mod.get_global_var('func_2823')
var_6567 = relay.var("var_6567", dtype = "int64", shape = (1456,))#candidate|6567|(1456,)|var|int64
call_6566 = relay.TupleGetItem(func_2819_call(relay.reshape(var_6567.astype('int64'), [13, 8, 14]), relay.reshape(var_6567.astype('int64'), [13, 8, 14]), ), 0)
call_6568 = relay.TupleGetItem(func_2823_call(relay.reshape(var_6567.astype('int64'), [13, 8, 14]), relay.reshape(var_6567.astype('int64'), [13, 8, 14]), ), 0)
output = relay.Tuple([bop_6562,call_6566,var_6567,])
output2 = relay.Tuple([bop_6562,call_6568,var_6567,])
func_6570 = relay.Function([var_6561,var_6567,], output)
mod['func_6570'] = func_6570
mod = relay.transform.InferType()(mod)
mutated_mod['func_6570'] = func_6570
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6570_call = mutated_mod.get_global_var('func_6570')
var_6572 = relay.var("var_6572", dtype = "uint32", shape = (4, 3, 7))#candidate|6572|(4, 3, 7)|var|uint32
var_6573 = relay.var("var_6573", dtype = "int64", shape = (1456,))#candidate|6573|(1456,)|var|int64
call_6571 = func_6570_call(var_6572,var_6573,)
output = call_6571
func_6574 = relay.Function([var_6572,var_6573,], output)
mutated_mod['func_6574'] = func_6574
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6360_call = mod.get_global_var('func_6360')
func_6362_call = mutated_mod.get_global_var('func_6362')
call_6597 = relay.TupleGetItem(func_6360_call(), 0)
call_6598 = relay.TupleGetItem(func_6362_call(), 0)
var_6609 = relay.var("var_6609", dtype = "float64", shape = (12, 8, 4))#candidate|6609|(12, 8, 4)|var|float64
bop_6610 = relay.logical_and(call_6597.astype('bool'), var_6609.astype('bool')) # shape=(12, 8, 4)
bop_6613 = relay.logical_and(call_6598.astype('bool'), var_6609.astype('bool')) # shape=(12, 8, 4)
bop_6619 = relay.minimum(var_6609.astype('uint32'), call_6597.astype('uint32')) # shape=(12, 8, 4)
bop_6622 = relay.minimum(var_6609.astype('uint32'), call_6598.astype('uint32')) # shape=(12, 8, 4)
func_6469_call = mod.get_global_var('func_6469')
func_6472_call = mutated_mod.get_global_var('func_6472')
var_6653 = relay.var("var_6653", dtype = "bool", shape = ())#candidate|6653|()|var|bool
call_6652 = relay.TupleGetItem(func_6469_call(relay.reshape(var_6653.astype('bool'), [])), 7)
call_6654 = relay.TupleGetItem(func_6472_call(relay.reshape(var_6653.astype('bool'), [])), 7)
output = relay.Tuple([bop_6610,bop_6619,call_6652,var_6653,])
output2 = relay.Tuple([bop_6613,bop_6622,call_6654,var_6653,])
func_6655 = relay.Function([var_6609,var_6653,], output)
mod['func_6655'] = func_6655
mod = relay.transform.InferType()(mod)
var_6656 = relay.var("var_6656", dtype = "float64", shape = (12, 8, 4))#candidate|6656|(12, 8, 4)|var|float64
var_6657 = relay.var("var_6657", dtype = "bool", shape = ())#candidate|6657|()|var|bool
output = func_6655(var_6656,var_6657,)
func_6658 = relay.Function([var_6656,var_6657,], output)
mutated_mod['func_6658'] = func_6658
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mod.get_global_var('func_6387')
func_6389_call = mutated_mod.get_global_var('func_6389')
call_6858 = relay.TupleGetItem(func_6387_call(), 0)
call_6859 = relay.TupleGetItem(func_6389_call(), 0)
output = call_6858
output2 = call_6859
func_6860 = relay.Function([], output)
mod['func_6860'] = func_6860
mod = relay.transform.InferType()(mod)
mutated_mod['func_6860'] = func_6860
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6860_call = mutated_mod.get_global_var('func_6860')
call_6861 = func_6860_call()
output = call_6861
func_6862 = relay.Function([], output)
mutated_mod['func_6862'] = func_6862
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6860_call = mod.get_global_var('func_6860')
func_6862_call = mutated_mod.get_global_var('func_6862')
call_6868 = func_6860_call()
call_6869 = func_6860_call()
output = relay.Tuple([call_6868,])
output2 = relay.Tuple([call_6869,])
func_6874 = relay.Function([], output)
mod['func_6874'] = func_6874
mod = relay.transform.InferType()(mod)
mutated_mod['func_6874'] = func_6874
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6874_call = mutated_mod.get_global_var('func_6874')
call_6875 = func_6874_call()
output = call_6875
func_6876 = relay.Function([], output)
mutated_mod['func_6876'] = func_6876
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6860_call = mod.get_global_var('func_6860')
func_6862_call = mutated_mod.get_global_var('func_6862')
call_6880 = func_6860_call()
call_6881 = func_6860_call()
uop_6887 = relay.exp(call_6880.astype('float64')) # shape=(1, 8, 4)
uop_6889 = relay.exp(call_6881.astype('float64')) # shape=(1, 8, 4)
func_4784_call = mod.get_global_var('func_4784')
func_4787_call = mutated_mod.get_global_var('func_4787')
const_6893 = relay.const(8, dtype = "int32")#candidate|6893|()|const|int32
var_6894 = relay.var("var_6894", dtype = "int32", shape = (90,))#candidate|6894|(90,)|var|int32
call_6892 = func_4784_call(relay.reshape(const_6893.astype('int32'), []), relay.reshape(var_6894.astype('int32'), [15, 6, 1]), )
call_6895 = func_4784_call(relay.reshape(const_6893.astype('int32'), []), relay.reshape(var_6894.astype('int32'), [15, 6, 1]), )
func_4526_call = mod.get_global_var('func_4526')
func_4532_call = mutated_mod.get_global_var('func_4532')
var_6906 = relay.var("var_6906", dtype = "int8", shape = (120,))#candidate|6906|(120,)|var|int8
const_6907 = relay.const([[-5,-4,-4,-4,-6,7,-10,5,-6,-4,2,-9,7,1,10,-6,6,5,-4,-5,2,4,-7,-3,-7,5,-4,6,-2,1,-6,8,-9,-10,-2,1,-8,-5,3,-9,-8,-10,1,-6,-4,-5,-8,-10,6,7,-8,-3,5,-1,-7,-1,-5,9,-6,8,-4,10,-6,6,-4,-1,5,-9,1,1,10,-4,2,10,-8,9,1,-3,-2,10,-6,-10,-4,-1,7,-4,-3,-2,4,4,10,6,-3,-10,-2,4,-1,8,3,2,-1,-7,-9,-9,10,-4,7,4,1,-6,4,10,6,5,-7,-7,5,3,4,-4,-7,7,-10,-3,-6,-3,-1,-8,-1,4,9,-6,-9,8,-5,10,-3,-4,-9,-6,-8,-5,-4,-5,3,-4,-5,7,-1,7,-9,6,5,7,-8,1,1,-6,9,1,5,6,-6,-3,-10,-3,-9,-3,10,2,-4,-8,9,2,-9,1,6,3,-2,9,9,1,10,4,-5,-1,-9,3,-5,7,-6,6,-8,4,-7,2,-2,6,6,-5,8,9,5,7,-5,-3,-3,-4,10,-10,10,5,-4,7,2,-10,-6,-10,-1,2,-1,8,4,6,-2,2,-6,-6,-9,10,-3,-6,1,1,-4,7,-5,-3,9,-4,-4,4,5,-10,-3,8,1,6,-9,-4,-9,10,8,-5,-3,-9,-7,-6,-3,9,-7,3,-10,-1,-3,3,6,7,7,4,-3,6,7,2,-8,-7,7,-4,6,-5,-10,2,2,-1,-1,10,7,-4,7,6,9,2,-1,3,2,8,-6,8,-10,-8,4,-5,-3,-7,6,-10,5,9,10,5,9,6,4,3,4,4,-9,-1,7,5,-1,6,-6,-4,-8,8,2,3,7,1,7,-9,4,9,8,-5,-6,5,-8,6,-7,5,10,9,-4,-1,4,7,10,9,7,-6,-7,-5,-9,-10,7,8,-5,-5,7,-10,-5,-1,3,4,-6,-5,9,-7,-10,7,-4,3,1,-8,5,1,7,7,-4,1,9,-10,-5,9,3,3,10,-7,-5,1,-3,9,4,1,7,7,-2,-6,-3,-2,-10,6,-10,-3,7,4,8,-1,9,2,8,2,6,6,-3,-8,1,5,6,-6,-3,3,2,-6,8,9,-5,5,-8,-3,-7,-6,-4,10,8,-2,-4,2,9,-1,6,-2,-10,2,-5,-9,-5,-3,-5,-8,-8,-5,5,10,-5,-10,10,2,10,8,-9,10,-1,1,-5,-10,-9,-5,2,6,-8,-8,2,-8,4,-8,2,-6,-10,-10,6,-9,-5,-7,2,6,-4,8,-6,6,4,-2,-3,-1,5,-9,-3,6,-3,-7,-10,6,-7,10,3,-3,10,-3,-6,-6,-8,-4,3,1,6,-2,-10,10,5,3,6,6,3,-10,6,10,3,4,-5,-4,4,-7,6,-4,-9,-2,-2,2,-10,4,10,-9,-9,3,-10,7,4,-10,3,-3,10,-7,4,8,4,9,8,-9,4,5,8,10,7,-4,4,5,5,-8,1,-4,-10,1,2,6,-1,-10,2,2,-1,-2,-6,-1,-8,1,-7,-6,-9,-6,8,-8,5,-9,9,-8,10,5,6,-6,-5,8,9,8,1,-10,7,10,-6,-9,-10,3,-7,-5,-4,-9,-5,10,1,3,-3,-2,9,-4,-1,-7,-2,-1,1,-3,-5,2,9,4,-10,-5,8,-5,9,1,4,9,10,-4,5,6,10,-10,9,-3,2,4,-5,-8,-10,-2,-9,-8,-2,10,10,9,-5,2,-4,-5,-1,8,-9,10,-7,4,5,5,-6,7,2,-7,5,-10,-4,-5,3,-3,-2,-4,5,-3,1,8,-4,7,-8,-10,6,4,-5,5,4,2,10,5,5,-4,7,-6,-4,6,9,-9,-7,3,1,10,7,-1,8,-10,5,9,-5,-2,2,-5,5,-4,-4,-4,8,-2,4,1,1,-6,5,-10,-2,9,2,5,-7,-10,7,-10,8,1,7,-5,-1,-7,-6,-7,9,4,-2,-9,-9,2,4,2,-3,-3,3,9,9,-2,-10,5,7,-1,10,9,-10,5,2,6,-10,-8,-9,9,-2,4,2,-3,1,-9,3,-10,1,-7,-5,-10,3,2,-4,1,3,-10,-7,5,7,10,-2,-3,10,-7,6,-1,-5,3,5,-7,-1,3,-10,-9,2,8,-2,8,2,8,-5,7,4,-1,-5,-5,-7,-6,7,-5,7,-5,-6,-2,10,-6,-8,7,4,9,10,8,4,-6,1,2,-7,-6,1,9,7,8,-2,-7,5,-8,4,10,-1,-1,-10,-10,-1,7,-4,3,6,7,6,-4,2,4,9,-3,2,3,-8,-8,9,1,6,3,5,7,5,-2,5,-10,2,3,9,8,8,6,-5,-1,3,2,5,9,3,5,-7,-2,-2,5,-10,-1,-10,6,-6,-6,-2,-6,8,-4,-9,10,-8,7,5,3,4,6,3,-9,10,9,-4,8,2,-4,5,-9,4,2,5,-7,-9,4,8,2,-9,-1,-6,4,2,-9,9,9,3,5,9,8,8,2,7,3,5,-8,2,8,-9,-1,6,-6,-3,6,4,2,8,-7,9,1,-5,-4,-3,2,-1,4,5,6,-10,10,10,5,7,5,5,10,6,-8,-10,5,-3,9,-9,-6,1,3,7,1,4,-1,-1,9,-7,-10,-7,-8,-2,-8,6,-9,1,8,2,3,-3,-4,-5,6,10,-1,-9,-7,8,1,1,-10,-4,2,8,-3,-10,-9,-2,1,1,8,10,10,-3,1,2,8,-2,3,8,2,5,-4,-6,-8,4,-6,1,4,8,-2,9,-6,2,2,5,7,7,4,4,-2,-8,-5,-4,-5,-4,-3,-8,-3,-8,10,1,3,9,-1,1,-5,4,10,-9,-2,-3,-8,-6,1,8,-9,-1,4,4,-4,1,-4,1,4,-10,-7,-1,-3,-7,-3,8,-1,6,8,5,3,-5,-2,2,8,-10,6,-9,-8,-3,-1,-3,-9,-10,-7,1,2,10,2,-9,5,-5,-1,-9,-3,10,-5,-6,9,3,2,7,-2,7,-8,-6,8,-5,-8,-7,-9,4,-9,-10,8,-8,9,-4,2,-5,-10,5,-4,6,-5,2,-4,-9,9,-5,3,7,9,-5,5,-3,-10,-4,1,6,-6,9,7,5,7,10,1,6,-1,3,10,2,6,-6,-7,-2,-3,5,9,3,-7,-10,2,-10,-4,8,1,-3,5,4,2,-5,7,4,-9,3,-1,6,-6,4,-1,3,-10,9,-8,7,8,-6,3,2,6,-10,10,-10,-4,8,7,-1,2,4,4,-1,-5,-9,8,2,9,-10,-8,7,5,9,-9,-10,-10,-10,-6,-7,7,-1,7,10,5,-7,10,-5,1,8,-6,-8,3,-3,8,-3,-5,-1,-10,-2,-1,-8,-5,8,8,-4,6,-3,2,9,-7,7,9,-6,-9,5,-9,4,7,8,10,2,-5,-7,2,-7,10,-10,-1,1,-7,3,9,-8,9,-2,7,7,10,9,1,10,9,2,6,-4,-10,-9,-4,5,-2,-4,-2,2,-4,5,-6,-7,-5,-7,-2,6,-7,3,9,-5,-7,-9,-10,5,2,1,5,7,9,-2,6,-5,10,-4,-5,1,10,3,3,-5,-5,4,-4,-1,6,6,-9,5,-8,-10,10,5,1,7,3,8,-8,-2,-5,7,-4,1,5,-5,-7,-4,-6,4,-6,-1,4,-10,4,-7,3,-10,1,4,-9,7,-6,10,1,-1,-4,-7,-6,1,9,8,-3,2,-2,-8,-7,-5,-7,7,7,-4,-2,9,7,7,7,-1,6,6,10,-6,-10,-10,-8,-2,4,-7,-6,6,6,1,-3,-6,6,6,6,2,7,-3,-8,-9,1,-1,-2,-10,2,-4,4,5,-3,-5,-7,7,9,-8,-4,-9,2,-2,7,-3,-3,-6,-10,-8,-4,-4,-10,-4,10,5,-8,7,-4,-4,-10,2,5,-2,-10,8,3,-6,10,3,-3,-3,3,-1,-10,-8,2,-6,9,-2,10,5,-9,-10,3,10,-2,-7,5,-3,-2,5,-2,-1,-1,-2,-10,-6,-7,9,-10,8,-1,8,-2,9,4,8,-7,7,-9,-10,-5,7,3,-4,2,-6,8,9,6,3,-3,6,-9,7,3,4,-4,-1,-6,9,-8,5,10,5,-1,8,1,-4,-8,-6,-8,10,-5,8,-8,1,3,-4,-9,1,-1,-6,4,1,-10,-4,9,-2,-4,6,-9,-2,5,7,6,6,10,10,-1,-5,-9,-9,2,-5,-2,-2,1,5,-9,10,2,-5,-7,6,7,8,10,-4,-1,-3,-1,-5,-9,8,5,-5,5,1,6,-9,9,-7,-9,5,2,-4,-3,5,9,9,-1,-1,6,-10,7,5,9,7,5,-7,-10,-1,-9,-2,-10,-2,-7,9,5,6,-9,10,-5,5,8,8,-2,-10,7,-7,5,10,-2,-5,-8,-9,-4,-6,-7,-8,4,5,-6,5,7,10,3,3,-3,-4,-1,-10,3,3,-9,-7,6,-9,6,-6,7,-6,10,-10,10,-3,-7,8,-1,2,-4,2,-8,4,4,9,-8,6,6,10,-9,9,-8,-8,9,-8,6,3,-1,-9,7,-8,3,-4,9,-5,6,4,2,-2,1,-4,-2,-2,7,9,9,10,3,-1,5,1,-9,-7,9,1,-9,-9,-5,-3,-2,6,-10,-3,10,7,9,9,5,8,7,-5,6,7,-5,-6,5,-6,8,-7,-3,-6,-4,-10,-10,4,8,4,-5,9,-3,7,-7,-2,4,3,-6,2,3,1,-10,3,-6,6,-9,-1,8,-2,-3,-9,-8,4,1,-5,8,8,-1,-10,9,10,8,2,-1,10,1,-9,-2,-2,-1,-5,-3,8,5,10,-3,2,2,-7,8,-7,7,-9,-8,-9,-8,-9,1,-2,7,-10,4,2,-6,9,6,-5,1,-1,-5,-10,-9,3,-8,6,-8,-4,6,8,-4,-6,-2,-5,-4,-4,1,1,4,-7,8,-6,8,7,-7,-8,2,5,-4,9,-9,7,8,9,2,2,9,-4,-1,5,-8,3,6,7,10,-9,10,8,-4,10,3,5,2,-3,2,3,8,1,-3,3,4,-4,-8,4,9,9,6,8,-5,2,-8,9,-2,1,9,-1,-5,-1,5,-8,-7,-10,3,2,-6,5,-9,1,5,7,5,-8,10,5,5,4,2,-7,-10,1,1,-2,-10,-4,-5,8,-8,2,8,-5,-3,-4,-3,-10,-10,-10,8,-3,-5,1,7,-1,8,5,1,8,9,8,3,-4,10,-5,-6,-9,5,-2,-1,-9,6,-4,6,-2,-4,-8,10,-1,7,-1,4,5,-1,-4,-2,1,9,-7,-7,-9,-9,9,10,-2,-8,10,-4,-1,-4,7,-10,-3,2,-3,9,10,-8,7,-3,-4,3,-10,7,-2,-10,6,-7,-8,-9,8,2,5,-10,-9,1,-1,5,1,-7,-4,4,-5,-9,10,6,5,9,-10,-2,2,-2,8,-6,-1,4,10,-5,6,9,-1,5,3,-6,3,-3,9,-9,5,6,10,1,-7,-4,10,1,10,-7,-10,-7,-1,7,8,-9,-3,8,4,-1,6,3,1,-7,-10,6,-9,2,-5,-2,-6,3,5,-1,1,-9,7,4,6,1,-8,-5,-1,-7,-7,-1,-9,10,-8,-2,-5,7,-2,2,-4,5,1,9,8,-2,4,-8,8,6,1,6,-6,7,-5,10,-3,1,7,-10,5,-2,5,-3,-9,8,4,5,-6,2,5,-1,8,-4,4,-2,8,-10,-3,6,2,4,-8,6,5,-7,9,-9,-2,2,9,-6,7,7,-9,-5,-7,-6,10,-10,9,5,7,-7,-7,4,-2,-10,-6,-2,-10,-7,6,3,-5,-10,10,6,-9,6,-9,-9,-1,-3,-8,4,-2,6,-6,3,-3,8,10,3,-7,3,-1,9,3,-9,-7,-10,7,6,-8,5,-3,7,8,-1,8,1,6,1,3,2,-6,8,2,-5,4,10,-2,1,6,5,5,3,-9,3,-6,-4,9,6,-8,10,8,9,8,1,9,-7,-1,8,-9,-4,7,-7,-9,-8,3,-9,9,-2,8,-10,-9,-3,-1,2,1,-5,1,-3,-7,9,10,-3,-6,5,-8,2,5,-10,4,6,-8,-2,-7,1,-7,-5,10,5,5,-1,6,-2,7,-7,4,6,6,-2,4,-8,6,7,1,2,-3,-9,-6,-10,-3,-4,2,-10,2,1,7,-9,3,1,-10,-10,-5,2,1,4,10,-10,2,1,4,-9,3,6,-6,2,9,8,2,-9,3,7,-3,-8,-9,-6,2,5,-3,-3,-7,4,-8,4,-4,3,6,3,-6,-4,-9,-9,-8,-8,5,-2,6,-2,8,-6,-9,-2,-10,-6,-5,3,-3,-4,-7,5,-4,4,-3,-8,-4,-5,-5,10,1,2,-8,-9,7,5,-8,6,5,3,8,-9,6,-5,-1,6,3,-8,-5,4,-2,8,9,-1,-5,2,-8,8,-5,6,-10,-5,-10,-5,-10,7,-8,-2,-8,-1,9,-6,4,-10,-7,-6,9,-1,6,4,-5,-10,5,-9,-4,5,4,10,-5,1,-9,10,-8,-6,7,2,10,-4,-3,5,-3,-3,-2,-7,7,3,-4,-5,6,-9,-1,4,1,6,10,3,2,10,-1,2,-6,-4,-10,3,10,8,2,-5,-9,-9,2,2,-8,-1,1,6,8,8,-1,-3,-4,4,-10,-1,10,6,1,-10,-2,9,4,-1,-5,10,3,-7,-2,-4,-10,1,-2,3,-9,-4,2,2,-9,10,-5,2,-4,4,-9,-2,3,10,4,-1,-6,2,8,-6,1,3,-6,4,5,8,6,5,-5,5,8,-10,10,-2,10,-9,4,4,8,-10,6,9,9,-1,8,-4,1,1,-10,4,-3,-8,7,-6,2,8,-7,-1,-10,3,-10,6,-2,7,-2,-1,-5,1,-3,-9,-5,4,-5,-10,-9,4,-9,3,9,-5,-2,-5,5,9,5,10,4,-1,9,5,-4,7,1,-7,9,-9,-8,8,-10,-1,4,4,5,8,-9,-4,-3,-8,-1,3,9,-1,-6,-2,5,-3,5,10,5,6,10,-8,-10,-5,3,3,2,1,-4,-6,8,-1,-9,3,-8,7,-10,10,1,-3,7,-6,-3,-7,-2,9,4,-3,10,6,-6,7,-10,-7,4,7,9,8,-2,10,-10,4,-10,7,-4,9,8,7,3,-10,8,-8,-3,-1,-5,-9,-2,1,3,-4,-2,6,-1,9,10,2,-7,3,9,4,-4,9,9,10,9,-8,10,-1,8,-4,-1,4,-7,9,2,-9,8,4,7,9,1,7,1,4,-9,-8,5,10,3,-9,3,-3,4,-10,5,-7,5,10,1,7,-2,-2,-9,10,-4,-6,5,-9,9,1,9,10,3,1,-4,6,5,7,-2,7,6,-2,5,3,3,7,4,-5,9,-3,-6,3,8,-7,-6,8,-8,-4,-4,-8,-1,-8,-4,3,10,-10,-4,-10,-4,-7,-1,-2,-7,-3,-1,9,-8,8,9,9,5,10,4,-6,-6,7,-9,-10,5,-9,-6,10,-5,-8,-10,-6,6,-8,5,-9,8,2,-6,6,-8,10,3,-10,10,3,-4,-7,-4,-1,1,-3,5,-6,8,4,5,9,-6,6,-4,-8,-9,-9,1,5,-1,1,-4,8,-7,5,6,1,3,-10,8,7,4,-4,9,7,6,7,4,-1,8,2,1,8,3,-3,3,-10,-10,-1,4,9,5,9,1,-10,-7,5,-10,-4,-8,-5,8,9,10,7,10,-3,1,-6,-5,5,1,-9,-2,3,9,4,-3,-5,3,-6,-7,-9,4,-5,2,-10,10,1,2,6,1,-9,3,7,6,-10,-4,-3,2,7,8,6,-7,-3,-2,2,-1,8,-7,-1,-10,-7,-7,5,10,5,9,9,-10,-7,-3,8,10,-7,10,-9,8,5,10,-7,3,-2,7,10,-4,-2,6,1,5,-2,-6,5,10,-1,1,-3,-2,-9,-4,6,8,7,7,1,-7,-7,7,-9,4,-7,8,1,3,-8,-1,-7,4,4,-3,1,9,7,10,2,5,-10,9,2,-3,9,7,-4,1,2,2,-7,3,-6,-7,-8,-8,-5,2,-7,10,-1,-5,9,3,-1,7,8,2,-5,-2,3,-1,-7,6,8,-1,4,-3,3,4,-3,-3,-1,6,-4,-8,10,-7,-2,10,-10,8,8,-7,-7,6,4,-10,-2,10,5,-5,7,2,7,-1,5,-1,9,6,10,6,1,8,10,-1,8,-2,10,-6,7,3,5,7,-1,1,-6,3,1,-1,1,-10,10,6,5,6,-9,4,-1,9,-7,-3,-7,10,-10,-1,-3,-2,10,-4,9,-6,8,-2,4,-3,4,-2,4,7,3,9,-8,10,8,-4,3,-7,4,2,-3,-7,-10,-5,2,-2,-1,-10,1,-10,3,8,-6,7,-4,-9,3,-3,-6,-1,4,5,2,6,-7,-4,10,6,-7,-9,-3,10,-4,-1,5,1,3,5,-1,-1,-7,1,-7,5,-2,-4,3,-1,9,9,1,-3,6,-2,-1,7,9,7,-5,-9,9,3,9,8,5,-4,-7,-3,-5,2,-9,3,-7,4,-5,10,-6,7,-7,5,-2,8,-4,-2,5,4,-5,4,9,5,-10,-9,7,4,-1,-6,6,4,-7,10,2,-8,2,8,-9,-9,-7,-9,-6,-10,2,2,4,-9,-4,-2,4,3,1,1,-6,3,1,-10,5,-6,8,4,-5,2,3,-6,-2,-4,4,-5,6,-4,7,3,-5,-8,8,6,6,-3,-10,3,1,4,-3,-4,6,5,3,7,7,-1,-9,8,-3,-2,1,-4,5,8,9,-6,-1,2,8,-1,7,2,7,9,3,2,9,6,5,1,-7,1,-5,-3,-2,-8,6,-5,9,2,5,6,9,-7,10,-6,-4,-9,10,4,6,-1,3,5,9,-4,9,-10,5,-3,-7,4,-8,4,4,-1,1,3,9,-6,3,-5,-3,3,4,5,-6,7,-1,-3,-9,5,6,6,6,-4,-3,5,5,5,5,3,8,-9,-8,-4,-7,-9,-7,-10,6,-3,-4,4,-8,1,9,-7,1,-6,8,-8,-8,-10,1,-9,-8,7,-3,-3,1,4,-5,5,-5,-5,-10,10,1,5,1,-2,-6,-1,9,10,6,-10,-5,9,7,-4,8,-6,-3,-2,3,-5,2,-10,10,10,3,8,-6,-9,10,9,7,-6,4,-7,3,-10,8,7,1,5,-7,4,-10,6,4,8,9,-4,-6,-2,4,4,-1,1,8,7,-9,-1,-2,10,2,-1,-4,8,7,10,3,7,-5,-7,4,-2,-3,-3,2,4,1,-7,-10,6,-4,-1,10,-10,-6,-2,10,-7,-9,-9,4,-4,-7,-4,7,-4,-6,-7,-3,-3,-5,1,-9,8,9,-8,1,9,-5,6,-5,-3,9,7,-1,1,5,3,8,-1,-1,9,-3,3,-5,9,3,-9,6,-2,-8,4,7,-7,-1]], dtype = "uint64")#candidate|6907|(1, 3600)|const|uint64
var_6908 = relay.var("var_6908", dtype = "uint64", shape = (4,))#candidate|6908|(4,)|var|uint64
const_6909 = relay.const([9.087833,8.424140,0.570350,2.206989,7.857747,-2.135846,-3.239620,-4.561889,-2.282708,5.367466,-5.380022,-0.575009,-2.258268,2.807427,3.044335,8.477132,-4.087653,-7.991168,7.212538,-9.640216,-1.699070,6.363904,-8.241671,7.451533,-4.328257,-6.758478,-6.488547,2.101614,-7.888564,-1.431074,6.238772,-2.519857,0.609364,3.728754,-0.365268,3.939014,-8.079776,6.396109,-5.863668,-9.277055,9.154847,-1.590248,2.094590,-1.398339,-7.323344,1.465544,3.516129,-9.284673,6.303988,5.836116,9.919372,-2.564833,8.105656,-2.108912,-2.685325,-5.760697,5.681832,1.388995,5.142156,-3.028450,1.570411,7.861989,1.016664,3.668277,4.891702,-1.201382,5.069315,2.143063,-2.643564,2.300224,-4.225475,6.738527,-4.735014,-4.126928,-5.300150,0.734594,6.601760,-0.216398,-7.320988,4.910928,-5.288859,-4.735453,-2.536430,-3.254690,0.420473,-6.570772,-0.992689,0.001802,-0.868189,-0.556989,-6.087041,-9.808071,-7.407561,-8.426126,-5.480070,-8.402071,8.666592,3.828146,-9.137779,5.979725,5.006146,2.832020,7.632963,-3.500667,4.890467,-8.384595,-8.690334,5.701434,-8.668076,-2.401906,8.478910,5.851193,0.160366,-1.402367,9.230452,-5.118660,0.930332,-7.503101,-5.421428,8.734207,7.190704,-7.234401,-7.179709,-2.751910,4.285602,-8.806817,6.402690,-6.538914,-2.323648,6.787001,-0.690963,-4.194376,7.067886,-5.963780,1.287679,2.285799,3.609193,-7.606741,8.851037,-2.856184,5.315958,0.107971,3.916474,-1.828944,8.397053,2.086066,4.619784,3.557559,-4.150997,-4.877654,3.023624,-5.110897,1.587230,2.709739,7.118935,-5.497009,-8.311376,7.498670,5.200143,4.088408,2.131734,-7.719844,-0.059877,-1.717006,9.604167,-7.739280,-9.604111,1.823103,0.300639,2.675597,4.379290,-7.720929,8.784127,2.410952,5.919748,2.667652,8.869467,7.111266,-0.327314,-9.544390,-2.359783,-6.850364,5.224784,2.843224,-1.371789,3.577978,-3.024887,4.465564,0.945409,-6.088845,4.314002,-0.818726,7.044330,-7.269660,8.587762,8.125005,2.494852,-2.449825,3.282799,-3.776362,-4.215875,4.196576,2.684899,4.937886,8.058504,4.990056,9.530520,1.932698,3.696062,-7.709134,-7.440672,-5.544712,-2.805581,-9.568737,-0.739548,6.214941,-0.554652,7.199256,-6.105500,8.091693,-1.106235,-6.462094,-8.354658,-7.453956,-7.332313,-2.731910,-7.866798,-9.250809,1.402046,4.572202,1.888695,0.116662,2.808879,6.525872,9.568430,-0.121404,4.370495,6.419771,-4.163974,6.903921,0.851623,-8.777519,9.096253,-9.825479,0.658135,-9.230879,-9.001119,4.080572,7.535006,0.119496,9.839006,-2.204326,6.765272,-5.928709,-3.817141,-4.379285,9.124935,5.936048,5.168714,0.037595,5.739716,-0.183043,4.848881,-3.374641,-3.279686,0.204162,6.144270,7.963638,-4.323252,-2.733630,6.325894,-3.421776,9.553314,7.471961,2.064172,-2.669900,6.082738,-9.951888,-1.622873,0.329205,5.444681,-5.280903,-8.551049,8.847883,0.930588,2.870320,-5.137626,2.555925,-3.227833,-5.519573,9.149658,-3.122145,7.055810,-9.174628,4.915952,3.507454,-7.519768,9.247466,2.057603,6.159179,4.265504,5.898701,-8.198124,4.013106,-5.020237,-8.849516,-0.790548,-0.597089,-6.702237,9.971940,-1.622217,-5.360562,-1.464629,9.727311,-1.550619,-8.612878,-2.472044,6.995533,-5.954881,0.542654,-1.071309,9.322599,-6.694974,1.963559,-1.913519,4.528594,1.316441,1.476838,4.555259,9.082813,-3.986476,5.168676,6.679893,6.990911,-3.775848,-8.192234,0.469625,2.717730,7.118003,-9.942683,-7.069007,-6.088003,5.566151,0.843485,3.804630,-5.942087,1.423589,-9.636574,-4.034204,-6.093465,-3.505339,9.734101,-5.648957,1.291431,8.345508,4.808442,7.851569,4.208684,-5.565569,-5.897962,9.110115,9.216276,-7.418940,-0.129594,7.222385,5.242335,1.749838,5.316461,-8.020085,-3.711379,-7.102567,2.688536,4.644565,-0.315480,2.980890,4.341090,7.972189,2.100570,-1.709556,-3.442911,0.779559,8.793645,2.621777,-4.731370,-0.290001,4.961537,9.737156,-3.499104,-8.275883,-9.842011,4.484481,-0.611329,-8.245421,8.473130,8.505780,-8.057945,2.158538,-1.293249,9.880093,-4.750085,0.485810,-1.664138,-5.596791,9.919526,-7.441723,2.075894,-1.529002,-0.855891,3.640283,0.211954,-0.162818,7.912990,-1.744401,-6.440466,3.196742,9.394019,-1.795757,9.339905,-7.294254,5.289666,-8.950635,7.041026,9.190435,1.553128,1.646318,4.898971,-0.462163,9.409432,-2.704623,-6.339864,1.753312,-2.471499,-7.279875,-8.455509,7.591600,0.525014,-2.882672,-5.492950,-9.067080,5.949305,-5.178099,9.863331,8.780443,9.515802,-1.408168,8.879386,7.422409,-6.868713,8.993666,4.863446,-5.189203,-5.204004,0.969908,-9.732833,-0.382175,5.582715,4.974300,-9.327117,1.626134,-7.885546,5.690215,8.371609,-8.302000,-9.659915,4.615209,-2.080764,-0.989766,-8.845965,9.518842,-6.353516,-4.021744,-5.930712,-7.860145,7.255752,3.354097,-1.918887,4.990560,2.910904,3.616773,-6.476057,2.437511,-8.671630,3.277574,0.294726,-8.645134,2.792623,5.958112,-5.323993,-7.916305,-3.711519,5.327555,-8.719503,-2.687612,-4.499876,-5.494191,-1.456716,3.763825,0.674131,-4.216490,3.457909,-3.102218,0.369483,0.673466,-2.814162,1.936808,6.964680,7.263246,-5.455362,2.784468,9.333385,2.331113,-2.686276,-2.229377,7.580699,-7.385760,2.732850,8.749809,3.467390,-4.484969,-4.916201,-7.005588,7.390816,-1.324726,5.578996,-0.627266,2.499257,0.158268,2.761989,0.480357,-5.922997,2.276417,3.418590,-8.219711,0.376700,-0.288497,8.576253,7.727204,-6.326346,-7.767139,-7.027934,-7.234990,-9.486436,5.574164,9.970840,-7.674165,-3.019355,-1.895634,9.878143,-6.021180,5.206613,-6.560131,2.468318,9.802579,3.201708,-3.902942,2.952437,4.849035,-8.995127,1.667084,-6.209731,9.729803,9.614694,-3.612279,-4.167302,-0.997134,6.415296,-1.880746,-4.156838,-8.162530,9.987224,0.844925,4.457394,-8.315450,8.442733,6.264799,-2.324171,5.017585,-4.442524,-0.679838,-4.658333,9.703532,4.276861,9.901712,4.307504,-5.490844,-5.584983,5.129396,-9.847621,5.163673,7.508592,2.258522,3.421260,-5.764265,-9.606217,-1.779268,3.431857,-5.927002,-5.701373,-0.689966,7.870509,-9.184224,2.203905,2.069993,-4.407931,8.688705,-4.811163,7.209798,9.597554,9.845658,-0.153211,4.075597,5.250722,-4.649051,9.982989,-0.804178,3.655517,-6.414270,-7.465902,2.570090,-3.783093,9.783197,0.449722,-9.475035,-1.427736,9.362236,5.931800,-6.793524,-5.359121,-1.600177,0.584624,9.270689,-9.646002,7.148211,8.673744,8.879725,-0.374966,-6.802233,2.317857,-8.748914,8.054906,-7.106204,-6.341973,7.611639,0.623157,-6.254913,-4.530196,-4.141711,3.715627,-5.056979,-7.441522,-8.383688,-5.749287,-2.097226,6.070872,8.764927,-4.246176,-7.242728,-7.534795,-6.884449,5.092364,-5.074417,-0.434422,-2.875863,1.478530,-3.970789,-1.159267,-1.893809,-8.830530,-5.636533,7.021861,-9.887588,6.470012,7.664320,-3.430122,-1.788981,-9.414545,-8.241531,1.434650,7.560110,3.883812,-7.285596,-3.069305,-1.766013,9.296122,6.865209,-5.122403,3.056497,-1.497520,2.896222,-1.079258,-9.026458,-4.451159,6.548161,-9.871104,-5.672143,-7.613019,3.597098,7.133856,2.458630,7.434898,-3.516095,-6.961277,2.755720,-6.480045,-2.444457,-0.973887,4.638264,0.623143,-0.924904,1.724404,4.996000,5.276596,3.440544,-8.595135,-7.895719,4.229911,0.093895,-1.242685,-8.406664,9.258654,0.987453,5.141177,-9.641975,7.151861,-1.809186,-0.963605,-3.250114,3.013348,-5.592929,6.230403,7.040466,6.197379,-8.718372,0.780800,-6.965785,0.602117,6.971637,0.569315,9.620110,-4.073743,7.727561,0.517380,7.916036,4.309593,-5.727938,-1.441482,1.384991,-0.845400,8.760306,-4.136174,-4.611175,8.310300,3.082404,-3.893602,0.851071,-1.415936,6.632476,-6.603932,-6.223528,-9.074143,-5.339152,-9.469536,1.487496,-0.329240,3.576061,-7.203600,-2.419913,0.742039,-2.079504,7.037202,-9.910840,0.878951,2.291245,-3.155296,0.607213,4.320296,6.479207,-1.793301,-9.259880,2.819015,4.811566,-1.051736,0.384126,8.941965,0.765869,2.146038,6.381303,0.953010,2.580224,-6.472108,-4.951384,-0.189744,-6.531555,-6.737608,8.425802,-3.864475,-5.341762,3.433888,-6.192586,4.305996,1.271272,6.331916,8.435089,8.642912,0.105382,-8.591740,7.862145,3.152606,9.604845,9.992003,-7.251062,9.665118,-5.067904,-8.639036,-2.993782,-7.000606,4.339898,-6.833561,-2.285698,4.534594,5.928445,7.624532,-2.078964,-0.607365,8.388913,8.496839,3.599380,-0.444023,6.860378,-8.181787,-4.581435,0.548282,7.216309,7.862197,2.837069,3.384386,-3.548394,-5.079723,7.988623,-4.959271,-9.780797,-3.918485,-8.512960,6.522005,-4.800516,0.245871,-3.815636,-2.348375,-2.404646,1.431326,-4.407034,6.077957,9.358805,1.875676,-1.180154,2.808456,7.662267,6.969678,-3.643859,2.668421,-4.266075,-7.303916,8.147150,-3.722061,-9.961881,-6.708841,-6.246157,1.223727,0.396624,4.842655,-3.354598,-4.371381,-6.954339,1.413414,-0.268726,1.596123,-5.128689,8.060704,-1.071697,5.234923,2.842072,7.256306,7.315091,9.834615,-9.640183,6.651546,-7.147950,-9.794618,1.607560,3.475570,9.363670,-9.183576,-3.176477,7.055022,-1.410725,7.495088,-3.381126,4.219453,4.397155,-3.716090,4.889948,-3.301947,7.523744,7.380692,0.960219,-2.138548,8.145828,-0.012912,-2.476359,5.719354,-5.282982,-6.105787,4.636331,3.744926,3.670126,-5.307484,2.990987,-0.462575,-2.409793,7.835312,-2.477191,-5.242366,-4.746271,-8.355123,-0.535507,0.948554,-2.747242,-7.784211,-4.366244,2.190470,4.446788,-4.991430,-8.495353,-2.642051,-6.712261,-2.091954,7.523987,9.834797,3.844109,8.629589,5.430562,5.499040,-3.677829,6.299308,0.001270,-7.008361,0.197017,0.704002,5.722412,-6.116948,5.017068,7.914787,0.076675,-7.889458,-5.976932,-9.645029,6.370746,4.986777,6.427157,-3.532962], dtype = "float32")#candidate|6909|(960,)|const|float32
call_6905 = relay.TupleGetItem(func_4526_call(relay.reshape(var_6906.astype('int8'), [10, 12, 1]), relay.reshape(const_6907.astype('uint64'), [1800, 2]), relay.reshape(var_6908.astype('uint64'), [4,]), relay.reshape(const_6909.astype('float32'), [10, 96]), ), 6)
call_6910 = relay.TupleGetItem(func_4532_call(relay.reshape(var_6906.astype('int8'), [10, 12, 1]), relay.reshape(const_6907.astype('uint64'), [1800, 2]), relay.reshape(var_6908.astype('uint64'), [4,]), relay.reshape(const_6909.astype('float32'), [10, 96]), ), 6)
func_1486_call = mod.get_global_var('func_1486')
func_1489_call = mutated_mod.get_global_var('func_1489')
const_6918 = relay.const([5,-8,5,-5,6,9,-4,-7,5,4,10,-5,-5,-8,-5,4,7,9,4,10,-1,10,-3,-8,9,-10,-9,-3,-10,-7,3,5,5,-1,9,-1,-2,8,9,6,7,-6,-3,-3,7,-7,3,-10,3,-9,7,-5,-10,6,8,-7,10,-1,10,5,4,-10,2,-7,-3,1,6,-9,-8,6,-7,-9,6,-9,4,4,5,-6,5,-4,-8,10,-1,-10,4,-3,9,-7,1,-9,-1,4,-8,5,-4,2,3,5,1,-3,1,7,9,3,1,7,-7,-7,3,-8,10,8,4,-9,9,1,9,8,-3,8,-4,-7,7,-6,8,7,6,3,-9,6,-6,5,-8,-1,-7,6,-3,-2,8,1,4,6,-3,1,-1,7,-7,-3,9,-5,-3,8,5,-6,-10,1,-7,5,5,-10,-6,-6,-3,-9,2,-9,-6,-9,-8,3,4,-1,10,10,5,-4,9,5,8,4,-7,-5,1,3,-10,5,-2,-4,-6,10,4,-4], dtype = "int8")#candidate|6918|(192,)|const|int8
call_6917 = relay.TupleGetItem(func_1486_call(relay.reshape(const_6918.astype('int8'), [8, 8, 3]), relay.reshape(const_6918.astype('int8'), [8, 8, 3]), ), 1)
call_6919 = relay.TupleGetItem(func_1489_call(relay.reshape(const_6918.astype('int8'), [8, 8, 3]), relay.reshape(const_6918.astype('int8'), [8, 8, 3]), ), 1)
output = relay.Tuple([uop_6887,call_6892,const_6893,var_6894,call_6905,var_6906,const_6907,var_6908,const_6909,call_6917,const_6918,])
output2 = relay.Tuple([uop_6889,call_6895,const_6893,var_6894,call_6910,var_6906,const_6907,var_6908,const_6909,call_6919,const_6918,])
func_6921 = relay.Function([var_6894,var_6906,var_6908,], output)
mod['func_6921'] = func_6921
mod = relay.transform.InferType()(mod)
var_6922 = relay.var("var_6922", dtype = "int32", shape = (90,))#candidate|6922|(90,)|var|int32
var_6923 = relay.var("var_6923", dtype = "int8", shape = (120,))#candidate|6923|(120,)|var|int8
var_6924 = relay.var("var_6924", dtype = "uint64", shape = (4,))#candidate|6924|(4,)|var|uint64
output = func_6921(var_6922,var_6923,var_6924,)
func_6925 = relay.Function([var_6922,var_6923,var_6924,], output)
mutated_mod['func_6925'] = func_6925
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mod.get_global_var('func_6387')
func_6389_call = mutated_mod.get_global_var('func_6389')
call_6938 = relay.TupleGetItem(func_6387_call(), 1)
call_6939 = relay.TupleGetItem(func_6389_call(), 1)
uop_6943 = relay.erf(call_6938.astype('float32')) # shape=(1, 8, 4)
uop_6945 = relay.erf(call_6939.astype('float32')) # shape=(1, 8, 4)
bop_6950 = relay.floor_divide(uop_6943.astype('float32'), relay.reshape(call_6938.astype('float32'), relay.shape_of(uop_6943))) # shape=(1, 8, 4)
bop_6953 = relay.floor_divide(uop_6945.astype('float32'), relay.reshape(call_6939.astype('float32'), relay.shape_of(uop_6945))) # shape=(1, 8, 4)
output = bop_6950
output2 = bop_6953
func_6957 = relay.Function([], output)
mod['func_6957'] = func_6957
mod = relay.transform.InferType()(mod)
output = func_6957()
func_6958 = relay.Function([], output)
mutated_mod['func_6958'] = func_6958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mod.get_global_var('func_6387')
func_6389_call = mutated_mod.get_global_var('func_6389')
call_6986 = relay.TupleGetItem(func_6387_call(), 0)
call_6987 = relay.TupleGetItem(func_6389_call(), 0)
uop_7009 = relay.cos(call_6986.astype('float64')) # shape=(1, 8, 4)
uop_7011 = relay.cos(call_6987.astype('float64')) # shape=(1, 8, 4)
output = uop_7009
output2 = uop_7011
func_7013 = relay.Function([], output)
mod['func_7013'] = func_7013
mod = relay.transform.InferType()(mod)
output = func_7013()
func_7014 = relay.Function([], output)
mutated_mod['func_7014'] = func_7014
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6528_call = mod.get_global_var('func_6528')
func_6529_call = mutated_mod.get_global_var('func_6529')
call_7015 = relay.TupleGetItem(func_6528_call(), 0)
call_7016 = relay.TupleGetItem(func_6529_call(), 0)
output = call_7015
output2 = call_7016
func_7017 = relay.Function([], output)
mod['func_7017'] = func_7017
mod = relay.transform.InferType()(mod)
output = func_7017()
func_7018 = relay.Function([], output)
mutated_mod['func_7018'] = func_7018
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7033 = relay.const(True, dtype = "bool")#candidate|7033|()|const|bool
var_7034 = relay.var("var_7034", dtype = "bool", shape = (14, 6, 1))#candidate|7034|(14, 6, 1)|var|bool
bop_7035 = relay.logical_or(const_7033.astype('bool'), var_7034.astype('bool')) # shape=(14, 6, 1)
func_993_call = mod.get_global_var('func_993')
func_997_call = mutated_mod.get_global_var('func_997')
const_7059 = relay.const([[10,-8],[-3,-8],[-1,-6],[5,3],[9,-5],[6,7],[4,8],[-8,1],[-4,2],[-8,-2],[-9,8],[-8,5],[2,-2],[-10,8],[10,5],[-10,-8],[7,-4],[2,4],[6,-5],[-10,-2],[8,3],[-4,4],[-6,-4],[5,-1],[-3,7],[-2,-7],[2,-3],[-10,-7],[8,8],[10,7],[-1,2],[-4,10],[7,5],[10,-8],[-5,7],[3,-6],[5,-4],[-6,-10],[-4,6],[-3,-9],[4,10],[9,-6],[-8,-10],[6,-3],[-1,-5],[9,-5],[10,-5],[8,5],[-10,-5],[2,1],[-4,-10],[-8,3],[-3,-4],[6,7],[1,-8],[8,10],[-8,-6],[6,-2],[-8,-3],[9,-6],[6,5],[1,5],[6,2],[7,-1],[-7,-9],[4,-7],[6,-1],[-6,5],[8,4],[-4,3],[4,-3],[7,10],[-10,-9],[10,7],[6,9],[6,5],[-4,3],[-8,9],[2,-5],[-5,-3],[1,9],[5,-7],[5,-4],[10,5],[6,3],[6,8],[-3,7],[7,2],[9,9],[-9,-7],[-2,7],[8,-5],[10,2],[9,4],[-2,-9],[10,-9],[3,6],[-6,-8],[4,10],[7,-8],[-5,-5],[-10,-6],[1,-1],[7,3],[-10,5],[4,4],[-9,9],[10,-5],[8,1],[10,-10],[3,3],[3,-3],[6,9],[-1,5],[-7,-6],[-4,4],[-10,7],[2,-10],[-1,8],[-10,7],[9,6],[-6,10],[7,-10],[8,2],[9,-7],[-9,10],[3,-3],[9,8],[5,5],[-9,5],[-10,9],[-1,7],[10,-2],[2,-8],[10,-7],[1,-4],[-3,8],[-4,8],[-9,4],[-7,1],[7,-6],[-7,-4],[-6,-3],[-8,3],[-8,3],[-5,-7],[-9,-6],[4,-4],[3,9],[-4,5],[6,7],[9,-7],[-1,8],[-3,-2],[-8,1],[-6,-2],[-4,-6],[-4,8],[-1,3],[-5,6],[3,5],[10,10],[-4,9],[-7,6],[10,10],[5,3],[3,7],[-6,-7],[8,5],[-7,-6],[-8,-10],[8,6],[8,-3],[4,-10],[-1,8],[-9,-6],[-6,2],[10,6],[-5,-4],[-4,2],[-8,6],[10,-10],[2,-8],[-2,-5],[9,-4],[9,6],[-8,-8],[3,-4],[-4,3],[-6,-3],[-1,-9],[-7,-5],[-6,-5],[1,-9],[-2,-3],[9,-5],[10,5],[1,6],[10,8],[10,6],[-2,-10],[-10,4],[-10,-8],[6,9],[3,2],[5,7],[3,-5],[-9,-10],[-9,6],[1,-5],[8,-7],[-9,10],[4,6],[-2,-5],[8,-10],[10,-8],[10,10],[5,-2],[1,9],[10,3],[-3,-1],[4,2],[5,-1],[-1,4],[4,-5],[-1,5],[-8,5],[-4,-2],[-9,-6],[9,7],[1,9],[-8,7],[8,2],[-9,-3],[-1,-7],[-7,4],[1,9],[9,6],[-5,-3],[-9,-6],[2,-6],[4,10],[-6,-10],[5,8],[-5,8],[6,-5],[-8,-3],[-1,-3],[6,-4],[9,-6],[2,-9],[-4,-2],[6,3],[3,-3],[8,-7],[-7,-10],[2,-5],[-9,-7],[1,-7],[-4,3],[1,6],[-6,5],[6,-1],[-4,10],[-8,-6],[-8,-7],[2,-5],[4,-10],[4,1],[4,-3],[9,5],[-6,1],[10,2],[-4,-10],[-4,-3],[-10,5],[7,-3],[-3,-1],[-2,-8],[-3,-4],[-8,-2],[7,9],[6,-2],[-4,-10],[5,4],[-2,10],[3,-4],[-9,-1],[7,9],[7,5],[-9,8],[6,-6],[3,-8],[-7,1],[-10,-6],[5,6],[-3,4],[-5,3],[-8,9],[1,6],[5,1],[6,-2],[8,5],[-7,3],[-10,-2],[-8,8],[8,-1],[-3,4],[-2,-10],[8,-5],[1,-10],[-3,-8],[4,7],[-5,-9],[4,-1],[-8,7],[-2,8],[-10,-8],[3,9],[3,-6],[-9,8],[-7,8],[-6,8],[-4,3],[1,-7],[4,-2],[-1,2],[10,10],[2,3],[2,1],[-2,5],[-6,-1],[-2,10],[4,-5],[-4,-9],[-5,-4],[-5,-6],[-10,-9],[10,8],[4,4],[10,2],[-7,6],[-3,6],[6,-5],[-6,-1],[2,9],[-4,7],[-6,4],[7,7],[2,-5],[-2,3],[8,-8],[2,3],[1,-3],[8,-3],[-3,10],[4,3],[-5,-10],[-7,5],[-4,-2],[-4,8],[6,10],[-5,6],[-1,-7],[-8,-10],[-7,9],[7,1],[-7,-6],[7,-6],[-9,-5],[-1,-2],[1,-9],[10,-9],[-2,-2],[2,-10],[6,2],[2,-6],[-8,5],[4,-4],[-7,-2],[-2,3],[-9,3],[-8,-2],[1,-10],[4,3],[-7,-9],[-4,-3],[-8,7],[8,-4],[-6,-8],[-3,1],[-4,4],[6,-8],[-6,3],[-2,2],[-3,-9],[-10,8],[3,-10],[-6,-8],[-3,8],[2,4],[5,-9],[-6,-8],[-3,-10],[2,-6],[-5,9],[9,-4],[2,2],[10,-3],[5,-3],[-4,-2],[7,-9],[-9,2],[-3,-7],[-10,7],[-5,-5],[4,9],[9,-2],[2,-1],[3,6],[5,10],[-10,-2],[-8,-2],[7,7],[5,-5],[-9,-1],[-9,9],[-2,-6],[4,-9],[-2,5],[-10,-2],[-4,2],[-6,-6],[-2,-5],[-1,2],[3,10],[-5,2],[-10,7],[5,10],[-10,-1],[-1,-1],[-5,-3],[5,10],[5,-5],[-1,-8],[-5,-4],[6,-2],[-8,3],[1,2],[2,-4],[1,5],[4,-8],[7,7],[-1,-4],[4,-3],[10,-2],[10,9],[-9,3],[5,-8],[7,5],[4,-10],[4,1],[-2,2],[10,3],[10,-6],[-4,-1],[-4,-9],[6,7],[-9,-6],[2,1],[-2,6],[-9,-4],[10,7],[8,5],[8,-4],[-10,-4],[-9,4],[-8,3],[-9,3],[-7,-8],[8,3],[5,7],[1,-8],[4,2],[4,5],[10,-3],[-9,9],[-7,5],[4,1],[-3,3],[-10,7],[-4,-9],[6,2],[4,-6],[-4,-8],[-2,6],[10,-5],[8,9],[8,-3],[-6,3],[-8,7],[-10,4],[-8,7],[-7,5],[-2,2],[-10,-9],[-8,3],[5,-5],[10,-5],[-7,-6],[-3,-6],[-8,10],[3,2],[-3,-2],[-3,7],[2,3],[6,-2],[-6,9],[-3,-10],[5,-5],[-1,2],[9,-9],[10,10],[-7,-3],[10,-7],[6,-8],[8,4],[-9,2],[7,8],[-9,-6],[-2,-2],[-3,4],[-2,2],[9,-9],[-1,2],[3,1],[-9,3],[5,-8],[10,-8],[5,-6],[4,-5],[9,2],[8,-9],[-8,-8],[-1,-3],[-2,7],[-1,7],[-6,-2],[-3,5],[-2,4],[-9,-8],[7,-3],[9,-7],[9,5],[9,-5],[-4,-9],[-6,1],[-1,6],[9,-8],[2,-5],[9,3],[7,7],[1,3],[1,-4],[-6,2],[1,-9],[4,9],[7,8],[-7,4],[-1,2],[-5,9],[8,-10],[10,2],[-2,4],[-8,-1],[-6,-3],[-9,8],[7,2],[-4,-7],[-6,-9],[-1,-10],[3,8],[-8,6],[-9,10],[5,-8],[8,8],[2,-6],[-4,-7],[-5,-9],[-2,10],[7,7],[-5,4],[2,6],[-3,-2],[10,5],[1,9],[10,6],[5,3],[2,-6],[4,-10],[-1,6],[1,-10],[6,-4],[-9,4],[-3,1],[-6,9],[-4,-8],[-6,-5],[-5,2],[-9,-8],[10,-3],[-7,10],[9,9],[8,5],[3,-10],[-2,-6],[8,-4],[10,1],[3,3],[-2,3],[6,9],[10,-10],[7,-3],[-7,-7],[-7,-1],[10,9],[5,-7],[-4,-8],[-2,8],[1,4],[8,-1],[6,-7],[7,-2],[-1,4],[4,4],[-4,10],[-9,8],[4,2],[-9,6],[-10,-10],[2,-8],[4,8],[-5,-6],[5,5],[-4,-8],[4,2],[-2,3],[-3,9],[-7,-8],[-8,1],[-9,2],[-6,-9],[-9,1],[-8,1],[3,-2],[-6,-2],[9,-8],[-6,-2],[-9,-8],[1,-5],[6,-6],[-1,4],[10,10],[8,-3],[-2,4],[1,3],[-10,4],[10,-4],[7,3],[-6,4],[3,-3],[8,6],[6,-7],[7,6],[-1,-9],[-2,-9],[4,9],[-9,7],[6,10],[4,3],[-7,-5],[-10,-2],[-3,-4],[-5,-6],[-5,10],[-7,-5],[-4,9],[3,8],[-4,-6],[5,-7],[-8,-5],[-4,-3],[-7,4],[-7,1],[5,1],[-3,10],[1,-2],[-4,7],[10,7],[5,6],[3,8],[-10,-3],[-8,-5],[-1,-8],[2,9],[1,-8],[-9,8],[6,-8],[3,-9],[4,7],[6,2],[-8,-2],[-10,-4],[8,-3],[-8,-3],[-4,-3],[8,1],[-4,3],[-2,-9],[-5,9],[-3,-8],[9,-2],[-2,-1],[-7,-7],[-6,8],[-9,-2],[-5,-1],[4,-6],[7,10],[5,2],[6,-6],[-8,9],[-3,6],[7,5],[10,10],[8,-1],[-8,-10],[2,10],[5,-2],[-1,1],[-7,8],[-4,3],[8,8],[-9,-2],[1,-10],[6,-2],[8,-8],[-4,-4],[5,-4],[-2,-2],[2,8],[-8,-8],[4,3],[-10,3],[-8,8],[9,4],[4,2],[7,-8],[-4,10],[-9,-3],[6,5],[1,-5],[-10,-1],[-5,-2],[5,6],[-7,-8],[-1,7],[7,-4],[-5,1],[8,5],[1,8],[2,-4],[5,-8],[-6,-5],[7,8],[-1,-8],[-1,4],[-9,9],[8,-3],[-9,-7],[10,-9],[2,-3],[8,-2],[2,-7],[3,4],[4,-9],[3,3],[10,8],[-5,-6],[1,-7],[-9,-9],[-1,5],[10,3],[5,6],[-5,-1],[9,6],[-4,-3],[10,-5],[-9,1],[3,-3],[9,6],[-9,3],[-9,10],[4,4],[-6,5],[8,-6],[-6,-6],[-7,1],[6,-2],[-8,-10],[9,-7],[-4,1],[1,-8],[7,8],[5,4],[5,-7],[-1,-8],[4,-7],[6,6],[-8,-3],[-6,-8],[7,8],[-1,3],[8,-7],[-7,-9],[2,3],[-2,9],[-9,-9],[-3,8],[4,-3],[8,9],[4,-4],[-2,3],[9,-4],[-7,10],[-7,-9],[-7,-2],[2,-4],[-1,-8],[-10,9],[5,7],[-8,-6],[-6,-10],[-7,-5],[5,3],[-5,10],[1,-5],[10,4],[6,3],[2,8],[6,-3],[7,7],[-5,1],[-7,-8],[-1,-7],[4,8],[3,-3],[-9,-5],[1,9],[-5,-9],[-7,2],[5,10],[10,-5],[-1,6],[2,-10],[-2,-9],[-4,10],[5,2],[4,-3],[2,3],[5,10],[-2,-9],[-8,7],[-6,5],[-5,9],[-6,1],[5,-9],[1,10],[-9,-9],[7,-5],[-1,-6],[-1,6],[8,7],[8,-4],[-5,-9],[4,-2],[2,-3],[-1,3],[-3,10],[-2,1],[4,5],[-7,5],[1,-8],[-5,-7],[-4,-5],[1,9],[-1,-9],[5,-4],[-9,1],[8,-7],[1,-6],[-8,5],[-5,8],[-10,-3],[4,-3],[-1,8],[-6,5],[-6,-2],[2,7],[-1,3],[-3,-4],[-6,4],[-9,8],[4,2],[-6,3],[-3,-3],[5,4],[-2,-3],[-6,10],[4,-1],[-10,6],[9,-3],[9,9],[3,5],[-3,3],[8,2],[3,-5],[5,3],[-8,-9],[-9,2],[-10,-7],[4,-10],[-5,-2],[-9,6],[-8,8],[-8,7]], dtype = "uint16")#candidate|7059|(936, 2)|const|uint16
call_7058 = func_993_call(relay.reshape(const_7033.astype('uint16'), []), relay.reshape(const_7059.astype('uint16'), [12, 13, 12]), )
call_7060 = func_993_call(relay.reshape(const_7033.astype('uint16'), []), relay.reshape(const_7059.astype('uint16'), [12, 13, 12]), )
func_6655_call = mod.get_global_var('func_6655')
func_6658_call = mutated_mod.get_global_var('func_6658')
var_7063 = relay.var("var_7063", dtype = "float64", shape = (384,))#candidate|7063|(384,)|var|float64
call_7062 = relay.TupleGetItem(func_6655_call(relay.reshape(var_7063.astype('float64'), [12, 8, 4]), relay.reshape(const_7033.astype('bool'), []), ), 2)
call_7064 = relay.TupleGetItem(func_6658_call(relay.reshape(var_7063.astype('float64'), [12, 8, 4]), relay.reshape(const_7033.astype('bool'), []), ), 2)
uop_7073 = relay.acos(call_7062.astype('float64')) # shape=(189,)
uop_7075 = relay.acos(call_7064.astype('float64')) # shape=(189,)
output = relay.Tuple([bop_7035,call_7058,const_7059,var_7063,uop_7073,])
output2 = relay.Tuple([bop_7035,call_7060,const_7059,var_7063,uop_7075,])
F = relay.Function([var_7034,var_7063,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_7034,var_7063,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
