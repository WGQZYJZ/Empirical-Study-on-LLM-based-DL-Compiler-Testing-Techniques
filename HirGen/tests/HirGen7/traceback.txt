==========mod==========
#[version = "0.0.5"]
def @func_2025(%var_2016: Tensor[(32), bool]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float32]) {
  %0 = @func_1751() /* ty=Tensor[(32), bool] */;
  %1 = cast(%var_2016, dtype="bool") /* ty=Tensor[(32), bool] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(1), int32] */;
  %3 = cast(%0, dtype="bool") /* ty=Tensor[(32), bool] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?), bool] */;
  %5 = less_equal(%3, %4) /* ty=Tensor[(32), bool] */;
  %6 = @func_1846() /* ty=Tensor[(14, 4, 3), float32] */;
  (%5, %6)
}

def @func_3023() -> Tensor[(6, 16, 13), float32] {
  %7 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
  %8 = %7.3;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 16, 13), uint8] */, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %13 = subtract(%11, %12) /* ty=Tensor[(6, 16, 13), int16] */;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  sqrt(%14) /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_2183(%var_2139: Tensor[(1386), float64], %var_2171: Tensor[(32), bool]) -> (Tensor[(455, 4), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float32], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(14, 4, 3), bool]) {
  %15 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
  %16 = cast(%var_2139, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %17 = reshape(%16, newshape=[1386]) /* ty=Tensor[(1386), float64] */;
  %18 = @func_1941(%17) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(1386), float64]) */;
  %19 = cast(%var_2139, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %20 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
  %21 = cast(%var_2171, dtype="bool") /* ty=Tensor[(32), bool] */;
  %22 = reshape(%21, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %23 = @func_156(%22) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
  %24 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %25 = %15.2;
  %26 = %18.1;
  %27 = cos(%19) /* ty=Tensor[(1386), float32] */;
  %28 = %20.0;
  %29 = %23.0;
  %30 = %24.0;
  (%25, %26, %27, %28, %29, %var_2171, %30)
}

def @main(%var_5855: Tensor[(9, 9, 10), int8]) -> Tensor[(9, 9, 10), int8] {
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 9, 10), int8] */, dtype="int8") /* ty=Tensor[(1, 9, 10), int8] */;
  %32 = cast(%var_5855, dtype="int8") /* ty=Tensor[(9, 9, 10), int8] */;
  minimum(%31, %32) /* ty=Tensor[(9, 9, 10), int8] */
}

def @func_3090(%var_3070: Tensor[(7, 198), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float32], Tensor[(9, 11, 14), float64], Tensor[(7, 198), float64]) {
  %33 = @func_2319() /* ty=(Tensor[(32), bool], Tensor[(1820), float32]) */;
  %34 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %35 = cast(%var_3070, dtype="float64") /* ty=Tensor[(7, 198), float64] */;
  %36 = reshape(%35, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
  %37 = @func_487(%36) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
  %38 = %33.0;
  %39 = %34.2;
  %40 = %37.1;
  (%38, %39, %40, %var_3070)
}

def @func_1523() -> Tensor[(14, 4, 3), bool] {
  %41 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %41.0
}

def @func_1151() -> (Tensor[(14, 4, 3), bool],) {
  %42 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  (%42,)
}

def @func_3419(%var_3402: float64, %var_3403: Tensor[(14, 14, 13), float64]) -> Tensor[(14, 14, 13), float64] {
  %43 = cast(%var_3402, dtype="float64") /* ty=float64 */;
  %44 = cast(%var_3403, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  floor_divide(%43, %44) /* ty=Tensor[(14, 14, 13), float64] */
}

def @func_1659(%var_1609: Tensor[(3, 13, 16), uint8], %var_1610: Tensor[(3, 13, 16), uint8], %var_1639: Tensor[(32), bool]) -> (Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) {
  %45 = cast(%var_1610, dtype="uint8") /* ty=Tensor[(3, 13, 16), uint8] */;
  %46 = shape_of(%var_1609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_1609, dtype="uint8") /* ty=Tensor[(3, 13, 16), uint8] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(1386, 1), float64] */, dtype="float64") /* ty=Tensor[(1386, 1), float64] */;
  %50 = reshape(%49, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
  %51 = @func_487(%50) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
  %52 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %53 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
  %54 = cast(%var_1639, dtype="bool") /* ty=Tensor[(32), bool] */;
  %55 = reshape(%54, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %56 = @func_103(%55) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %58 = reshape(%57, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float64] */;
  %59 = @func_312(%58) /* ty=(Tensor[(7, 15, 2), float64],) */;
  %60 = %59.0;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(1386, 1), float64] */, dtype="float64") /* ty=Tensor[(1386, 1), float64] */;
  %66 = left_shift(%47, %48) /* ty=Tensor[(3, 13, 16), uint8] */;
  %67 = %51.1;
  %68 = %52.0;
  %69 = %53.0;
  %70 = %56.0;
  %71 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  %72 = divide(%63, %64) /* ty=Tensor[(7, 15, 2), float64] */;
  %73 = log10(%65) /* ty=Tensor[(1386, 1), float64] */;
  (%66, %67, %68, %69, %70, %var_1639, %71, %72, %73)
}

def @func_2063(%var_2046: Tensor[(15, 1, 11), bool], %var_2047: Tensor[(15, 11, 11), bool], %var_2051: Tensor[(15, 4, 11), bool]) -> (Tensor[(15, 11, 11), bool], Tensor[(15, 4, 11), float64]) {
  %74 = cast(%var_2046, dtype="bool") /* ty=Tensor[(15, 1, 11), bool] */;
  %75 = cast(%var_2047, dtype="bool") /* ty=Tensor[(15, 11, 11), bool] */;
  %76 = cast(%var_2046, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %77 = cast(%var_2051, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %78 = divide(%76, %77) /* ty=Tensor[(15, 4, 11), float64] */;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %80 = logical_or(%74, %75) /* ty=Tensor[(15, 11, 11), bool] */;
  %81 = asin(%79) /* ty=Tensor[(15, 4, 11), float64] */;
  (%80, %81)
}

def @func_1160() -> Tensor[(4, 2, 4), uint8] {
  @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_1478(%var_1449: Tensor[(14, 4, 3), bool], %var_1462: Tensor[(14, 4, 3), float64]) -> (Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) {
  %82 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
  %83 = cast(%var_1449, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %87 = cast(%82, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %88 = acos(%87) /* ty=Tensor[(14, 4, 3), float64] */;
  %89 = cast(%var_1462, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %93 = bitwise_or(%85, %86) /* ty=Tensor[(14, 4, 3), int32] */;
  %94 = bitwise_xor(%91, %92) /* ty=Tensor[(14, 4, 3), uint16] */;
  (%93, %94)
}

def @func_2946() -> Tensor[(14, 4, 3), bool] {
  @func_617() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_3949() -> Tensor[(32, ?), bool] {
  @func_3389() /* ty=Tensor[(32, ?), bool] */
}

def @func_5290(%var_5274: Tensor[(210), float64], %var_5275: Tensor[(455), float32], %var_5276: Tensor[(1386), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(210), float64], Tensor[(455), float32], Tensor[(1386), float64]) {
  %95 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %96 = @func_1718() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) */;
  %97 = cast(%var_5274, dtype="float64") /* ty=Tensor[(210), float64] */;
  %98 = %95.0;
  %99 = cast(%98, dtype="bool") /* ty=Tensor[(32), bool] */;
  %100 = cast(%var_5275, dtype="float32") /* ty=Tensor[(455), float32] */;
  %101 = cast(%var_5276, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %102 = cast(%var_5274, dtype="float32") /* ty=Tensor[(210), float32] */;
  %103 = reshape(%97, newshape=[5, 42]) /* ty=Tensor[(5, 42), float64] */;
  %104 = reshape(%99, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %105 = reshape(%100, newshape=[455]) /* ty=Tensor[(455), float32] */;
  %106 = reshape(%101, newshape=[1386]) /* ty=Tensor[(1386), float64] */;
  %107 = reshape(%102, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float32] */;
  %108 = @func_1062(%103, %104, %105, %106, %107) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(7, 15, 2), float32], Tensor[(7, 15, 2), int64], Tensor[(32), float64], Tensor[(455), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), float64], Tensor[(32), float64], Tensor[(7, 15, 2), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), bool], Tensor[(1820), float32], Tensor[(14, 4, 3), bool]) */;
  %109 = %96.3;
  %110 = %108.15;
  (%98, %109, %110, %var_5274, %var_5275, %var_5276)
}

def @func_5060() -> (Tensor[(14, 4, 3), float32],) {
  %111 = @func_4279() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %112 = %111.0;
  (%112,)
}

def @func_1062(%var_952: Tensor[(5, 42), float64], %var_977: Tensor[(32), bool], %var_1032: Tensor[(455), float32], %var_1036: Tensor[(1386), float64], %var_1041: Tensor[(7, 15, 2), float32]) -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(7, 15, 2), float32], Tensor[(7, 15, 2), int64], Tensor[(32), float64], Tensor[(455), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), float64], Tensor[(32), float64], Tensor[(7, 15, 2), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), bool], Tensor[(1820), float32], Tensor[(14, 4, 3), bool]) {
  %113 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %114 = cast(%var_977, dtype="bool") /* ty=Tensor[(32), bool] */;
  %115 = reshape(%114, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %116 = @func_156(%115) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
  %117 = cast(%var_952, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
  %118 = reshape(%117, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float64] */;
  %119 = @func_312(%118) /* ty=(Tensor[(7, 15, 2), float64],) */;
  %120 = %119.0;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %122 = acos(%121) /* ty=Tensor[(7, 15, 2), float64] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %124 = sqrt(%123) /* ty=Tensor[(7, 15, 2), float64] */;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %126 = cos(%125) /* ty=Tensor[(7, 15, 2), float64] */;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
  %128 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 42), float64] */, dtype="uint8") /* ty=Tensor[(5, 42), uint8] */;
  %129 = shape_of(%var_952, dtype="int32") /* ty=Tensor[(2), int32] */;
  %130 = cast(%var_952, dtype="uint8") /* ty=Tensor[(5, 42), uint8] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %132 = bitwise_xor(%130, %131) /* ty=Tensor[(5, 42), uint8] */;
  %133 = cast(%132, dtype="int8") /* ty=Tensor[(5, 42), int8] */;
  %134 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%124, dtype="int8") /* ty=Tensor[(7, 15, 2), int8] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %137 = right_shift(%135, %136) /* ty=Tensor[(7, 15, 2), int8] */;
  %138 = cast(%120, dtype="int64") /* ty=Tensor[(7, 15, 2), int64] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="int64") /* ty=Tensor[(7, 15, 2), int64] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %142 = cast(%var_1032, dtype="float32") /* ty=Tensor[(455), float32] */;
  %143 = reshape(%142, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %144 = @func_285(%143) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
  %145 = cast(%var_1036, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %146 = reshape(%145, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
  %147 = @func_487(%146) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
  %148 = cast(%var_1032, dtype="float32") /* ty=Tensor[(455), float32] */;
  %149 = reshape(%148, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %150 = @func_285(%149) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
  %151 = cast(%126, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
  %152 = cosh(%151) /* ty=Tensor[(7, 15, 2), float32] */;
  %153 = cast(%var_1041, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %157 = cast(meta[relay.Constant][5] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %158 = reshape(%157, newshape=[455, 4]) /* ty=Tensor[(455, 4), float32] */;
  %159 = @func_870(%158) /* ty=(Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) */;
  %160 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
  %161 = %113.0;
  %162 = %116.3;
  %163 = log(%127) /* ty=Tensor[(7, 15, 2), float32] */;
  %164 = add(%140, %141) /* ty=Tensor[(7, 15, 2), int64] */;
  %165 = %144.2;
  %166 = %147.0;
  %167 = %150.2;
  %168 = mod(%155, %156) /* ty=Tensor[(7, 15, 2), float64] */;
  %169 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %170 = %159.5;
  %171 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  (%160, %161, %162, %var_977, %163, %164, %165, %var_1032, %166, %var_1036, %167, %168, %169, %170, meta[relay.Constant][5] /* ty=Tensor[(1820), float32] */, %171)
}

def @func_5843() -> (Tensor[(14, 4, 3), bool], Tensor[(768, 2), uint32]) {
  %172 = @func_3164() /* ty=(Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) */;
  %173 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
  %174 = %172.1;
  (%173, %174)
}

def @func_5152(%var_5134: Tensor[(4, 9, 4), int32], %var_5135: Tensor[(4, 9, 4), int32]) -> (Tensor[(4, 9, 4), int32], Tensor[(4, 9, 4), float32]) {
  %175 = cast(%var_5135, dtype="int32") /* ty=Tensor[(4, 9, 4), int32] */;
  %176 = shape_of(%var_5134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_5134, dtype="int32") /* ty=Tensor[(4, 9, 4), int32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %179 = cast(%var_5134, dtype="float32") /* ty=Tensor[(4, 9, 4), float32] */;
  %180 = bitwise_and(%177, %178) /* ty=Tensor[(4, 9, 4), int32] */;
  %181 = atanh(%179) /* ty=Tensor[(4, 9, 4), float32] */;
  (%180, %181)
}

def @func_5330() -> (Tensor[(7, 5, 13), int8],) {
  %182 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %183 = %182.3;
  (%183,)
}

def @func_312(%var_308: Tensor[(7, 15, 2), float64]) -> (Tensor[(7, 15, 2), float64],) {
  %184 = cast(%var_308, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %185 = exp(%184) /* ty=Tensor[(7, 15, 2), float64] */;
  (%185,)
}

def @func_2864(%var_2859: Tensor[(14, 4, 3), float32]) -> (Tensor[(14, 4, 3), bool],) {
  %186 = @func_1846() /* ty=Tensor[(14, 4, 3), float32] */;
  %187 = cast(%var_2859, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %191 = logical_and(%189, %190) /* ty=Tensor[(14, 4, 3), bool] */;
  (%191,)
}

def @func_120() -> Tensor[(14, 4, 3), bool] {
  %192 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 4, 3), int32] */, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %193 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(14, 4, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 4, 3), int32] */, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%194, %195) /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_4759() -> (Tensor[(14, 4, 3), float32],) {
  %196 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
  %197 = %196.1;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %199 = exp(%198) /* ty=Tensor[(14, 4, 3), float32] */;
  (%199,)
}

def @func_4875(%var_4841: Tensor[(10, 2, 14), int8], %var_4842: Tensor[(10, 2, 14), int8]) -> Tensor[(10, 2, 14), int8] {
  %200 = cast(%var_4842, dtype="int8") /* ty=Tensor[(10, 2, 14), int8] */;
  %201 = shape_of(%var_4841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%var_4841, dtype="int8") /* ty=Tensor[(10, 2, 14), int8] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%202, %203) /* ty=Tensor[(10, 2, 14), int8] */
}

def @func_2422() -> (Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) {
  %204 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
  %205 = @func_1160() /* ty=Tensor[(4, 2, 4), uint8] */;
  %206 = @func_1417() /* ty=Tensor[(4, 2, 4), uint8] */;
  %207 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
  (%204, %205, %206, %207)
}

def @func_3677() -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), uint16]) {
  %208 = @func_2600() /* ty=Tensor[(14, 4, 3), float64] */;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %210 = atanh(%209) /* ty=Tensor[(14, 4, 3), float32] */;
  %211 = cast(%210, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %212 = cast(%210, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %213 = reshape(%211, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %214 = reshape(%212, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float64] */;
  %215 = @func_1478(%213, %214) /* ty=(Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) */;
  %216 = %215.1;
  (%210, %216)
}

def @func_5478(%var_5448: Tensor[(16, 14, 3), float64]) -> (Tensor[(16, 14, 3), float64], Tensor[(14, 4, 3), float64], Tensor[(14, 4, 3), bool], Tensor[(32), bool]) {
  %217 = cast(%var_5448, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %218 = @func_4253() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) */;
  %219 = cast(meta[relay.Constant][8] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %220 = reshape(%219, newshape=[32, 1]) /* ty=Tensor[(32, 1), bool] */;
  %221 = @func_3316(%220) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) */;
  %222 = asin(%217) /* ty=Tensor[(16, 14, 3), float64] */;
  %223 = %218.1;
  %224 = %221.1;
  (%222, %223, %224, meta[relay.Constant][8] /* ty=Tensor[(32), bool] */)
}

def @func_2128(%var_2121: Tensor[(7, 13, 6), uint16], %var_2122: Tensor[(7, 13, 6), uint16]) -> (Tensor[(7, 13, 6), uint16], Tensor[(14, 4, 3), bool]) {
  %225 = cast(%var_2122, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
  %226 = shape_of(%var_2121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_2121, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %229 = minimum(%227, %228) /* ty=Tensor[(7, 13, 6), uint16] */;
  %230 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
  (%229, %230)
}

def @func_1784() -> (Tensor[(32), bool], Tensor[(16, 9, 7), float64], Tensor[(1008), float64]) {
  %231 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %232 = cast(meta[relay.Constant][9] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %233 = reshape(%232, newshape=[16, 9, 7]) /* ty=Tensor[(16, 9, 7), float64] */;
  %234 = %231.4;
  %235 = @func_1323(%233) /* ty=Tensor[(16, 9, 7), float64] */;
  (%234, %235, meta[relay.Constant][9] /* ty=Tensor[(1008), float64] */)
}

def @func_4148(%var_4113: Tensor[(4, 2, 4), uint16], %var_4118: Tensor[(4, 2, 4), uint8], %var_4131: Tensor[(4, 2, 4), float64]) -> (Tensor[(4, 2, 4), float64], Tensor[(4, 2, 4), float32]) {
  %236 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  %237 = cast(%var_4118, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %241 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 2, 4), uint8] */, dtype="uint16") /* ty=Tensor[(4, 2, 4), uint16] */;
  %242 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%236, dtype="uint16") /* ty=Tensor[(4, 2, 4), uint16] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %245 = left_shift(%243, %244) /* ty=Tensor[(4, 2, 4), uint16] */;
  %246 = cast(%var_4113, dtype="int8") /* ty=Tensor[(4, 2, 4), int8] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="int8") /* ty=Tensor[(4, 2, 4), int8] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %250 = minimum(%248, %249) /* ty=Tensor[(4, 2, 4), int8] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %252 = tan(%251) /* ty=Tensor[(4, 2, 4), float64] */;
  %253 = cast(%var_4131, dtype="float32") /* ty=Tensor[(4, 2, 4), float32] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="float32") /* ty=Tensor[(4, 2, 4), float32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %257 = maximum(%239, %240) /* ty=Tensor[(4, 2, 4), float64] */;
  %258 = power(%255, %256) /* ty=Tensor[(4, 2, 4), float32] */;
  (%257, %258)
}

def @func_4040(%var_4007: Tensor[(1008), float64]) -> (Tensor[(32), bool], Tensor[(32, ?), bool], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool], Tensor[(10, 3, 5), float64], Tensor[(16, 9, 7), float64], Tensor[(1008), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64]) {
  %259 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %260 = @func_3619() /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %261 = @func_2351() /* ty=(Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) */;
  %262 = @func_3560() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64]) */;
  %263 = cast(%var_4007, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %264 = reshape(%263, newshape=[16, 9, 7]) /* ty=Tensor[(16, 9, 7), float64] */;
  %265 = @func_3806() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %266 = @func_3619() /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %269 = log(%268) /* ty=Tensor[(4, 2, 4), float64] */;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(4, 2, 4), float32] */;
  %271 = rsqrt(%270) /* ty=Tensor[(4, 2, 4), float32] */;
  %272 = cast(%269, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %276 = %259.0;
  %277 = @func_3389() /* ty=Tensor[(32, ?), bool] */;
  %278 = %260.0;
  %279 = %261.1;
  %280 = %262.1;
  %281 = @func_1323(%264) /* ty=Tensor[(16, 9, 7), float64] */;
  %282 = %265.0;
  %283 = add(%274, %275) /* ty=Tensor[(4, 2, 4), float64] */;
  (%276, %277, %278, %279, %280, %281, %var_4007, %282, %283)
}

def @func_4253() -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) {
  %284 = @func_1604() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(32), bool]) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %287 = reshape(%286, newshape=[168]) /* ty=Tensor[(168), bool] */;
  %288 = @func_1312(%287) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) */;
  %289 = %288.1;
  (%285, %289)
}

def @func_4915() -> (Tensor[(32), bool], Tensor[(9, 11, 14), bool], Tensor[(1386), float64]) {
  %290 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
  %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %292 = reshape(%291, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
  %293 = @func_487(%292) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
  %294 = %290.0;
  %295 = %293.0;
  (%294, %295, meta[relay.Constant][11] /* ty=Tensor[(1386), float64] */)
}

def @func_487(%var_463: Tensor[(9, 11, 14), float64]) -> (Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) {
  %296 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 14), float64] */, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
  %297 = shape_of(%var_463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_463, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %301 = not_equal(%298, %299) /* ty=Tensor[(9, 11, 14), bool] */;
  %302 = sinh(%300) /* ty=Tensor[(9, 11, 14), float64] */;
  (%301, %302)
}

def @func_5427() -> (Tensor[(14, 4, 3), bool],) {
  %303 = @func_2351() /* ty=(Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) */;
  %304 = %303.1;
  (%304,)
}

def @func_4931() -> (Tensor[(32), bool],) {
  %305 = @func_3252() /* ty=(Tensor[(32), bool],) */;
  %306 = %305.0;
  (%306,)
}

def @func_5389(%var_5369: Tensor[(1008), float64]) -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(1008), float64]) {
  %307 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %308 = cast(%var_5369, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %309 = reshape(%308, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %310 = @func_4040(%309) /* ty=(Tensor[(32), bool], Tensor[(32, ?), bool], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool], Tensor[(10, 3, 5), float64], Tensor[(16, 9, 7), float64], Tensor[(1008), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64]) */;
  %311 = %307.0;
  %312 = %310.3;
  (%311, %312, %var_5369)
}

def @func_1406() -> (Tensor[(14, 4, 3), float32],) {
  %313 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %315 = acosh(%314) /* ty=Tensor[(14, 4, 3), float32] */;
  (%315,)
}

def @func_1323(%var_1318: Tensor[(16, 9, 7), float64]) -> Tensor[(16, 9, 7), float64] {
  %316 = cast(%var_1318, dtype="float64") /* ty=Tensor[(16, 9, 7), float64] */;
  sinh(%316) /* ty=Tensor[(16, 9, 7), float64] */
}

def @func_1892() -> Tensor[(4, 2, 4), uint8] {
  @func_1160() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_1544() -> Tensor[(14, 4, 3), bool] {
  @func_617() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_1677() -> Tensor[(14, 4, 3), float32] {
  %317 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %317.0
}

def @func_1846() -> Tensor[(14, 4, 3), float32] {
  %318 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %319 = %318.0;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  sqrt(%320) /* ty=Tensor[(14, 4, 3), float32] */
}

def @func_1271() -> (Tensor[(455), float32], Tensor[(14, 4, 3), float32]) {
  %321 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
  %322 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %323 = %322.0;
  %324 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %325 = %324.0;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %327 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%323, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %330 = %321.2;
  %331 = floor_mod(%328, %329) /* ty=Tensor[(14, 4, 3), float32] */;
  (%330, %331)
}

def @func_2351() -> (Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) {
  %332 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 15), float64] */;
  %333 = atanh(%332) /* ty=Tensor[(14, 1, 15), float64] */;
  %334 = cast(%333, dtype="int8") /* ty=Tensor[(14, 1, 15), int8] */;
  %335 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(14, 1, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 1, 15), float64] */, dtype="int8") /* ty=Tensor[(14, 1, 15), int8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %338 = add(%336, %337) /* ty=Tensor[(14, ?, 15), int8] */;
  %339 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
  (%338, %339)
}

def @func_2825(%var_2816: Tensor[(16, 16, 6), uint32], %var_2817: Tensor[(16, 16, 6), uint32]) -> Tensor[(16, 16, 6), bool] {
  %340 = cast(%var_2817, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %341 = shape_of(%var_2816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_2816, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%342, %343) /* ty=Tensor[(16, 16, 6), bool] */
}

def @func_626(%var_621: Tensor[(14, 4, 3), bool]) -> (Tensor[(14, 4, 3), float64],) {
  %344 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %345 = %344.0;
  %346 = cast(%var_621, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %350 = divide(%348, %349) /* ty=Tensor[(14, 4, 3), float64] */;
  (%350,)
}

def @func_3164() -> (Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) {
  %351 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
  %352 = cast(meta[relay.Constant][15] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %353 = reshape(%352, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float32] */;
  %354 = @func_2864(%353) /* ty=(Tensor[(14, 4, 3), bool],) */;
  %355 = cast(meta[relay.Constant][14] /* ty=Tensor[(768, 2), uint32] */, dtype="uint32") /* ty=Tensor[(768, 2), uint32] */;
  %356 = cast(meta[relay.Constant][14] /* ty=Tensor[(768, 2), uint32] */, dtype="uint32") /* ty=Tensor[(768, 2), uint32] */;
  %357 = reshape(%355, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), uint32] */;
  %358 = reshape(%356, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), uint32] */;
  %359 = @func_2825(%357, %358) /* ty=Tensor[(16, 16, 6), bool] */;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
  %361 = @func_1751() /* ty=Tensor[(32), bool] */;
  %362 = %351.4;
  %363 = %354.0;
  %364 = cos(%360) /* ty=Tensor[(16, 16, 6), float64] */;
  (%361, meta[relay.Constant][14] /* ty=Tensor[(768, 2), uint32] */, %362, %363, meta[relay.Constant][15] /* ty=Tensor[(168), float32] */, %364)
}

def @func_3777(%var_3753: Tensor[(16, 10, 15), float32], %var_3770: Tensor[(1248), uint8]) -> (Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), float32], Tensor[(1248), uint8], Tensor[(16, 10, 15), bool]) {
  %365 = @func_3619() /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %366 = cast(%var_3770, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
  %367 = reshape(%366, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint8] */;
  %368 = @func_2455(%367) /* ty=(Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) */;
  %369 = cast(%var_3753, dtype="float32") /* ty=Tensor[(16, 10, 15), float32] */;
  %370 = asin(%369) /* ty=Tensor[(16, 10, 15), float32] */;
  %371 = cast(%var_3753, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = logical_or(%373, %374) /* ty=Tensor[(16, 10, 15), bool] */;
  %376 = cast(%370, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = %365.0;
  %381 = %368.1;
  %382 = less(%378, %379) /* ty=Tensor[(16, 10, 15), bool] */;
  (%380, %381, %var_3770, %382)
}

def @func_4416(%var_4409: Tensor[(11, 4, 3), int64], %var_4410: Tensor[(11, 4, 3), int64]) -> (Tensor[(11, 4, 3), int64],) {
  %383 = cast(%var_4410, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %384 = shape_of(%var_4409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_4409, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %387 = maximum(%385, %386) /* ty=Tensor[(11, 4, 3), int64] */;
  (%387,)
}

def @func_5210() -> (Tensor[(14, 4, 3), float64], Tensor[(32, 3), float64], Tensor[(14, 4, 3), int32]) {
  %388 = @func_4253() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) */;
  %389 = @func_3949() /* ty=Tensor[(32, ?), bool] */;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(32, ?), float32] */;
  %391 = acosh(%390) /* ty=Tensor[(32, ?), float32] */;
  %392 = cast(%391, dtype="bool") /* ty=Tensor[(32, ?), bool] */;
  %393 = cast(meta[relay.Constant][16] /* ty=Tensor[(32, 3), float32] */, dtype="bool") /* ty=Tensor[(32, 3), bool] */;
  %394 = equal(%392, %393) /* ty=Tensor[(32, 3), bool] */;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(32, 3), float32] */;
  %396 = sigmoid(%395) /* ty=Tensor[(32, 3), float32] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(32, 3), float64] */;
  %398 = %388.1;
  %399 = cast(%398, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %400 = reshape(%399, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %401 = @func_4687(%400) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) */;
  %402 = sin(%397) /* ty=Tensor[(32, 3), float64] */;
  %403 = %401.1;
  (%398, %402, %403)
}

def @func_3316(%var_3291: Tensor[(32, 1), bool]) -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) {
  %404 = @func_2422() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) */;
  %405 = cast(meta[relay.Constant][17] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %406 = cast(%var_3291, dtype="bool") /* ty=Tensor[(32, 1), bool] */;
  %407 = reshape(%405, newshape=[1386]) /* ty=Tensor[(1386), float64] */;
  %408 = reshape(%406, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %409 = @func_2183(%407, %408) /* ty=(Tensor[(455, 4), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float32], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(14, 4, 3), bool]) */;
  %410 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %411 = %404.0;
  %412 = cast(%411, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %413 = %409.6;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %415 = reshape(%412, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %416 = reshape(%414, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float64] */;
  %417 = @func_1478(%415, %416) /* ty=(Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) */;
  %418 = %410.0;
  %419 = %417.0;
  (%411, %413, meta[relay.Constant][17] /* ty=Tensor[(1386), float64] */, %var_3291, %418, %419)
}

def @func_2217(%var_2205: Tensor[(168), bool]) -> (Tensor[(32), bool], Tensor[(32), bool], Tensor[(32), bool], Tensor[(168), bool], Tensor[(11, 12, 11), int8], Tensor[(1452), int8]) {
  %420 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %421 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %422 = cast(%var_2205, dtype="bool") /* ty=Tensor[(168), bool] */;
  %423 = reshape(%422, newshape=[168]) /* ty=Tensor[(168), bool] */;
  %424 = @func_1312(%423) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) */;
  %425 = cast(meta[relay.Constant][18] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %426 = cast(meta[relay.Constant][18] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %427 = reshape(%425, newshape=[11, 12, 11]) /* ty=Tensor[(11, 12, 11), int8] */;
  %428 = reshape(%426, newshape=[11, 12, 11]) /* ty=Tensor[(11, 12, 11), int8] */;
  %429 = @func_2093(%427, %428) /* ty=(Tensor[(11, 12, 11), int8],) */;
  %430 = %420.0;
  %431 = %421.0;
  %432 = %424.0;
  %433 = %429.0;
  (%430, %431, %432, %var_2205, %433, meta[relay.Constant][18] /* ty=Tensor[(1452), int8] */)
}

def @func_4687(%var_4682: Tensor[(14, 4, 3), bool]) -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) {
  %434 = @func_3488() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
  %435 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %436 = %435.0;
  %437 = cast(%var_4682, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %441 = %434.1;
  %442 = bitwise_and(%439, %440) /* ty=Tensor[(14, 4, 3), int32] */;
  (%441, %442)
}

def @func_103(%var_72: Tensor[(4, 2, 4), bool]) -> (Tensor[(4, 2, 4), uint8],) {
  %443 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 2, 4), bool] */, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %444 = shape_of(%var_72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%var_72, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = logical_or(%445, %446) /* ty=Tensor[(4, 2, 4), bool] */;
  %448 = cast(%447, dtype="uint8") /* ty=Tensor[(4, 2, 4), uint8] */;
  %449 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(4, 2, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 2, 4), bool] */, dtype="uint8") /* ty=Tensor[(4, 2, 4), uint8] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %452 = multiply(%450, %451) /* ty=Tensor[(4, 2, 4), uint8] */;
  (%452,)
}

def @func_285(%var_255: Tensor[(7, 5, 13), float32]) -> (Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) {
  %453 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 5, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  %454 = shape_of(%var_255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_255, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %457 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %458 = reshape(%457, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %459 = @func_103(%458) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %460 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), bool] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %461 = %459.0;
  %462 = cast(%461, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %463 = reshape(%462, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %464 = @func_156(%463) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
  %465 = mod(%455, %456) /* ty=Tensor[(7, 5, 13), float32] */;
  %466 = asin(%460) /* ty=Tensor[(32), float64] */;
  %467 = %464.4;
  (%465, %461, %466, %467)
}

def @func_870(%var_847: Tensor[(455, 4), float32]) -> (Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) {
  %468 = cast(meta[relay.Constant][22] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %469 = reshape(%468, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %470 = @func_285(%469) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
  %471 = %470.3;
  %472 = cast(%471, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %473 = reshape(%472, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %474 = @func_103(%473) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %475 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %476 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
  %477 = cast(%476, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
  %478 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%475, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %481 = %474.0;
  %482 = cast(%481, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %483 = reshape(%482, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %484 = @func_103(%483) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %485 = cast(meta[relay.Constant][22] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %486 = cast(%var_847, dtype="float32") /* ty=Tensor[(455, 4), float32] */;
  %487 = %484.0;
  %488 = cast(%487, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %489 = reshape(%488, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %490 = @func_103(%489) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %491 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
  %492 = %491.1;
  %493 = cast(%492, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %494 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%471, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = multiply(%479, %480) /* ty=Tensor[(14, 4, 3), uint16] */;
  %498 = mod(%485, %486) /* ty=Tensor[(455, 4), float32] */;
  %499 = %490.0;
  %500 = not_equal(%495, %496) /* ty=Tensor[(4, 2, 4), bool] */;
  (%481, %497, %487, %498, %499, %500)
}

def @func_2455(%var_2428: Tensor[(6, 16, 13), uint8]) -> (Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) {
  %501 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %502 = cast(%var_2428, dtype="uint8") /* ty=Tensor[(6, 16, 13), uint8] */;
  %503 = cast(%var_2428, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %504 = maximum(%501, %502) /* ty=Tensor[(6, 16, 13), uint8] */;
  %505 = sin(%503) /* ty=Tensor[(6, 16, 13), float32] */;
  (%504, %505)
}

def @func_617() -> Tensor[(14, 4, 3), bool] {
  @func_120() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_5022() -> (Tensor[(14, 4, 3), int32], Tensor[(3, 56), bool], Tensor[(455), float32], Tensor[(455), bool]) {
  %506 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 56), bool] */, dtype="bool") /* ty=Tensor[(3, 56), bool] */;
  %507 = reshape(%506, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %508 = @func_4687(%507) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) */;
  %509 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
  %510 = %509.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(455), float64] */;
  %512 = cos(%511) /* ty=Tensor[(455), float64] */;
  %513 = cast(%510, dtype="float32") /* ty=Tensor[(455), float32] */;
  %514 = erf(%513) /* ty=Tensor[(455), float32] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(455), float32] */;
  %516 = shape_of(%512, dtype="int32") /* ty=Tensor[(1), int32] */;
  %517 = cast(%512, dtype="float32") /* ty=Tensor[(455), float32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?), float32] */;
  %519 = cast(%512, dtype="bool") /* ty=Tensor[(455), bool] */;
  %520 = shape_of(%514, dtype="int32") /* ty=Tensor[(1), int32] */;
  %521 = cast(%514, dtype="bool") /* ty=Tensor[(455), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?), bool] */;
  %523 = %508.1;
  %524 = mod(%517, %518) /* ty=Tensor[(455), float32] */;
  %525 = greater_equal(%521, %522) /* ty=Tensor[(455), bool] */;
  (%523, meta[relay.Constant][24] /* ty=Tensor[(3, 56), bool] */, %524, %525)
}

def @func_3935() -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
  %526 = @func_2520() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool]) */;
  %527 = %526.0;
  %528 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  (%527, %528)
}

def @func_1312(%var_1297: Tensor[(168), bool]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) {
  %529 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %530 = cast(%var_1297, dtype="bool") /* ty=Tensor[(168), bool] */;
  %531 = reshape(%530, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %532 = @func_626(%531) /* ty=(Tensor[(14, 4, 3), float64],) */;
  %533 = %529.0;
  %534 = %532.0;
  %535 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  (%533, %534, %var_1297, %535)
}

def @func_3585(%var_3572: Tensor[(7, 6, 6), float32]) -> (Tensor[(7, 6, 6), bool],) {
  %536 = cast(%var_3572, dtype="float32") /* ty=Tensor[(7, 6, 6), float32] */;
  %537 = asin(%536) /* ty=Tensor[(7, 6, 6), float32] */;
  %538 = cast(%var_3572, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = logical_or(%540, %541) /* ty=Tensor[(7, 6, 6), bool] */;
  (%542,)
}

def @func_2600() -> Tensor[(14, 4, 3), float64] {
  %543 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  rsqrt(%544) /* ty=Tensor[(14, 4, 3), float64] */
}

def @func_3488() -> (Tensor[(16, 16, 6), float64], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
  %545 = @func_3164() /* ty=(Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) */;
  %546 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
  %547 = @func_2351() /* ty=(Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) */;
  %548 = %545.5;
  %549 = %546.1;
  %550 = %547.1;
  %551 = @func_1160() /* ty=Tensor[(4, 2, 4), uint8] */;
  (%548, %549, %550, %551)
}

def @func_3806() -> (Tensor[(14, 4, 3), bool],) {
  %552 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %553 = %552.0;
  (%553,)
}

def @func_2268() -> (Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) {
  %554 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
  %555 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
  %556 = %554.2;
  %557 = @func_1751() /* ty=Tensor[(32), bool] */;
  %558 = %555.1;
  (%556, %557, %558)
}

def @func_5728() -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(11, 3, 2), float64], Tensor[(1815), bool], Tensor[(14, 4, 3), bool]) {
  %559 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %560 = cast(meta[relay.Constant][25] /* ty=Tensor[(1815), bool] */, dtype="bool") /* ty=Tensor[(1815), bool] */;
  %561 = %559.0;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %563 = reshape(%560, newshape=[1815]) /* ty=Tensor[(1815), bool] */;
  %564 = reshape(%562, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float32] */;
  %565 = @func_4589(%563, %564) /* ty=(Tensor[(32), float32], Tensor[(15, 4, 11), float64], Tensor[(11, 15), bool], Tensor[(1815), bool], Tensor[(660), bool], Tensor[(11, 3, 2), float64], Tensor[(66), int32], Tensor[(14, 4, 3), bool]) */;
  %566 = @func_1751() /* ty=Tensor[(32), bool] */;
  %567 = %565.5;
  %568 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  (%566, %561, %567, meta[relay.Constant][25] /* ty=Tensor[(1815), bool] */, %568)
}

def @func_1113() -> (Tensor[(32), bool],) {
  %569 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %570 = %569.5;
  (%570,)
}

def @func_2520() -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool]) {
  %571 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %572 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %573 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
  (%571, %572, %573)
}

def @func_234() -> (Tensor[(14, 4, 3), bool],) {
  %574 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  (%574,)
}

def @func_2908() -> (Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(624), uint8], Tensor[(32), bool], Tensor[(32), bool]) {
  %575 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %576 = cast(meta[relay.Constant][26] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %577 = cast(meta[relay.Constant][26] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %578 = cast(meta[relay.Constant][27] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %579 = reshape(%576, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %580 = reshape(%577, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %581 = reshape(%578, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %582 = @func_1659(%579, %580, %581) /* ty=(Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) */;
  %583 = @func_1604() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(32), bool]) */;
  %584 = %575.0;
  %585 = %582.1;
  %586 = %583.1;
  (%584, %585, meta[relay.Constant][26] /* ty=Tensor[(624), uint8] */, meta[relay.Constant][27] /* ty=Tensor[(32), bool] */, %586)
}

def @func_2806(%var_2759: Tensor[(14, 4, 3), float32]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64], Tensor[(3, 13, 16), uint8], Tensor[(624), uint8]) {
  %587 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %588 = @func_2268() /* ty=(Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */;
  %589 = %588.2;
  %590 = cast(%var_2759, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = cast(%589, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %595 = cast(meta[relay.Constant][28] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %596 = cast(meta[relay.Constant][28] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %597 = reshape(%595, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
  %598 = reshape(%596, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
  %599 = @func_1353(%597, %598) /* ty=(Tensor[(10, 3, 5), float64],) */;
  %600 = cast(meta[relay.Constant][29] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %601 = cast(meta[relay.Constant][29] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %602 = %587.0;
  %603 = cast(%602, dtype="bool") /* ty=Tensor[(32), bool] */;
  %604 = reshape(%600, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %605 = reshape(%601, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %606 = reshape(%603, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %607 = @func_1659(%604, %605, %606) /* ty=(Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) */;
  %608 = less_equal(%592, %593) /* ty=Tensor[(14, 4, 3), bool] */;
  %609 = sigmoid(%594) /* ty=Tensor[(14, 4, 3), float32] */;
  %610 = %599.0;
  %611 = %607.0;
  (%602, %608, %609, %610, meta[relay.Constant][28] /* ty=Tensor[(150), float64] */, %611, meta[relay.Constant][29] /* ty=Tensor[(624), uint8] */)
}

def @func_4589(%var_4530: Tensor[(1815), bool], %var_4575: Tensor[(14, 4, 3), float32]) -> (Tensor[(32), float32], Tensor[(15, 4, 11), float64], Tensor[(11, 15), bool], Tensor[(1815), bool], Tensor[(660), bool], Tensor[(11, 3, 2), float64], Tensor[(66), int32], Tensor[(14, 4, 3), bool]) {
  %612 = @func_2908() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(624), uint8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %613 = %612.3;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(32), float32] */;
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 15), bool] */, dtype="bool") /* ty=Tensor[(11, 15), bool] */;
  %616 = cast(%var_4530, dtype="bool") /* ty=Tensor[(1815), bool] */;
  %617 = cast(meta[relay.Constant][31] /* ty=Tensor[(660), bool] */, dtype="bool") /* ty=Tensor[(660), bool] */;
  %618 = reshape(%615, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), bool] */;
  %619 = reshape(%616, newshape=[15, 11, 11]) /* ty=Tensor[(15, 11, 11), bool] */;
  %620 = reshape(%617, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), bool] */;
  %621 = @func_2063(%618, %619, %620) /* ty=(Tensor[(15, 11, 11), bool], Tensor[(15, 4, 11), float64]) */;
  %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
  %623 = cast(meta[relay.Constant][32] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
  %624 = reshape(%622, newshape=[11, 3, 2]) /* ty=Tensor[(11, 3, 2), int32] */;
  %625 = reshape(%623, newshape=[11, 3, 2]) /* ty=Tensor[(11, 3, 2), int32] */;
  %626 = @func_3736(%624, %625) /* ty=(Tensor[(11, 3, 2), int32], Tensor[(11, 3, 2), float64], Tensor[(4, 2, 4), uint8]) */;
  %627 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
  %628 = cast(%var_4575, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = sinh(%614) /* ty=Tensor[(32), float32] */;
  %633 = %621.1;
  %634 = %626.1;
  %635 = less(%630, %631) /* ty=Tensor[(14, 4, 3), bool] */;
  (%632, %633, meta[relay.Constant][30] /* ty=Tensor[(11, 15), bool] */, %var_4530, meta[relay.Constant][31] /* ty=Tensor[(660), bool] */, %634, meta[relay.Constant][32] /* ty=Tensor[(66), int32] */, %635)
}

def @func_522() -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) {
  %636 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %637 = %636.0;
  %638 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 4, 3), bool] */, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = cast(meta[relay.Constant][34] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %643 = reshape(%642, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %644 = @func_285(%643) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
  %645 = logical_or(%640, %641) /* ty=Tensor[(14, 4, 3), bool] */;
  %646 = %644.3;
  (%645, %646, meta[relay.Constant][34] /* ty=Tensor[(455), float32] */)
}

def @func_1353(%var_1336: Tensor[(10, 3, 5), float64], %var_1337: Tensor[(10, 3, 5), float64]) -> (Tensor[(10, 3, 5), float64],) {
  %647 = cast(%var_1337, dtype="float64") /* ty=Tensor[(10, 3, 5), float64] */;
  %648 = shape_of(%var_1336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_1336, dtype="float64") /* ty=Tensor[(10, 3, 5), float64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %651 = add(%649, %650) /* ty=Tensor[(10, 3, 5), float64] */;
  %652 = cast(%651, dtype="float64") /* ty=Tensor[(10, 3, 5), float64] */;
  %653 = rsqrt(%652) /* ty=Tensor[(10, 3, 5), float64] */;
  (%653,)
}

def @func_1718() -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) {
  %654 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %655 = cast(%654, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %656 = cast(%654, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %657 = reshape(%655, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %658 = reshape(%656, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float64] */;
  %659 = @func_1478(%657, %658) /* ty=(Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) */;
  %660 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %661 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %662 = %659.1;
  %663 = %660.0;
  %664 = %661.0;
  (%654, %662, %663, %664)
}

def @func_1751() -> Tensor[(32), bool] {
  %665 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %665.5
}

def @func_2118() -> (Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) {
  %666 = cast(meta[relay.Constant][35] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %667 = reshape(%666, newshape=[455, 4]) /* ty=Tensor[(455, 4), float32] */;
  %668 = @func_870(%667) /* ty=(Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) */;
  %669 = %668.3;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(455, 4), float32] */;
  %671 = @func_1751() /* ty=Tensor[(32), bool] */;
  %672 = rsqrt(%670) /* ty=Tensor[(455, 4), float32] */;
  (%671, meta[relay.Constant][35] /* ty=Tensor[(1820), float32] */, %672)
}

def @func_2319() -> (Tensor[(32), bool], Tensor[(1820), float32]) {
  %673 = @func_2268() /* ty=(Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */;
  %674 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
  %675 = %673.1;
  %676 = %674.1;
  (%675, %676)
}

def @func_2093(%var_2079: Tensor[(11, 12, 11), int8], %var_2080: Tensor[(11, 12, 11), int8]) -> (Tensor[(11, 12, 11), int8],) {
  %677 = cast(%var_2080, dtype="int8") /* ty=Tensor[(11, 12, 11), int8] */;
  %678 = shape_of(%var_2079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_2079, dtype="int8") /* ty=Tensor[(11, 12, 11), int8] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %681 = bitwise_or(%679, %680) /* ty=Tensor[(11, 12, 11), int8] */;
  (%681,)
}

def @func_3252() -> (Tensor[(32), bool],) {
  %682 = @func_1784() /* ty=(Tensor[(32), bool], Tensor[(16, 9, 7), float64], Tensor[(1008), float64]) */;
  %683 = %682.0;
  (%683,)
}

def @func_3389() -> Tensor[(32, ?), bool] {
  %684 = @func_2422() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) */;
  %685 = %684.2;
  %686 = cast(%685, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %687 = reshape(%686, newshape=[32, 1]) /* ty=Tensor[(32, 1), bool] */;
  %688 = @func_3316(%687) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) */;
  %689 = %688.3;
  %690 = cast(%685, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(2), int32] */;
  %692 = cast(%689, dtype="bool") /* ty=Tensor[(32, 1), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%692, %693) /* ty=Tensor[(32, ?), bool] */
}

def @func_5225() -> (Tensor[(14, 4, 3), float64],) {
  %694 = @func_2600() /* ty=Tensor[(14, 4, 3), float64] */;
  (%694,)
}

def @func_3736(%var_3720: Tensor[(11, 3, 2), int32], %var_3721: Tensor[(11, 3, 2), int32]) -> (Tensor[(11, 3, 2), int32], Tensor[(11, 3, 2), float64], Tensor[(4, 2, 4), uint8]) {
  %695 = cast(%var_3721, dtype="int32") /* ty=Tensor[(11, 3, 2), int32] */;
  %696 = shape_of(%var_3720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_3720, dtype="int32") /* ty=Tensor[(11, 3, 2), int32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %699 = cast(%var_3720, dtype="float64") /* ty=Tensor[(11, 3, 2), float64] */;
  %700 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
  %701 = subtract(%697, %698) /* ty=Tensor[(11, 3, 2), int32] */;
  %702 = log(%699) /* ty=Tensor[(11, 3, 2), float64] */;
  %703 = %700.2;
  (%701, %702, %703)
}

def @func_156(%var_130: Tensor[(32), bool]) -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
  %704 = cast(%var_130, dtype="bool") /* ty=Tensor[(32), bool] */;
  %705 = reshape(%704, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %706 = @func_103(%705) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %707 = %706.0;
  %708 = cast(%707, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %709 = reshape(%708, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %710 = @func_103(%709) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %711 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %712 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %713 = %710.0;
  (%711, %707, %var_130, %712, %713)
}

def @func_4606() -> (Tensor[(32), bool],) {
  %714 = @func_1604() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(32), bool]) */;
  %715 = %714.1;
  (%715,)
}

def @func_4066() -> (Tensor[(14, 4, 3), uint16], Tensor[(7, 5, 13), float64]) {
  %716 = @func_1718() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) */;
  %717 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %718 = %717.3;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %720 = %716.1;
  %721 = acos(%719) /* ty=Tensor[(7, 5, 13), float64] */;
  (%720, %721)
}

def @func_4820() -> Tensor[(14, 4, 3), float32] {
  %722 = @func_4759() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %722.0
}

def @func_1126() -> Tensor[(4, 2, 4), uint8] {
  %723 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
  %723.1
}

def @func_5803(%var_5770: Tensor[(4, 2, 4), uint8]) -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64], Tensor[(14, 4, 3), bool], Tensor[(6, 16, 13), uint64]) {
  %724 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
  %725 = %724.1;
  %726 = cast(%var_5770, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %730 = @func_5427() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %731 = @func_3023() /* ty=Tensor[(6, 16, 13), float32] */;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
  %733 = erf(%732) /* ty=Tensor[(6, 16, 13), float32] */;
  %734 = cast(%731, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %738 = greater(%736, %737) /* ty=Tensor[(6, 16, 13), bool] */;
  %739 = cast(%733, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %743 = @func_1523() /* ty=Tensor[(14, 4, 3), bool] */;
  %744 = mod(%728, %729) /* ty=Tensor[(4, 2, 4), float64] */;
  %745 = %730.0;
  %746 = multiply(%741, %742) /* ty=Tensor[(6, 16, 13), uint64] */;
  (%743, %744, %745, %746)
}

def @func_4290(%var_4282: Tensor[(15, 6, 9), float64], %var_4283: Tensor[(15, 6, 9), float64]) -> (Tensor[(15, 6, 9), float64], Tensor[(4, 2, 4), uint8]) {
  %747 = cast(%var_4283, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %748 = shape_of(%var_4282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_4282, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = mod(%749, %750) /* ty=Tensor[(15, 6, 9), float64] */;
  %752 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  (%751, %752)
}

def @func_1417() -> Tensor[(4, 2, 4), uint8] {
  @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_3871() -> (Tensor[(32), bool], Tensor[(14, 4, 3), float64]) {
  %753 = @func_3252() /* ty=(Tensor[(32), bool],) */;
  %754 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %755 = %754.0;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %757 = %753.0;
  %758 = asin(%756) /* ty=Tensor[(14, 4, 3), float64] */;
  (%757, %758)
}

def @func_4279() -> (Tensor[(14, 4, 3), float32],) {
  %759 = @func_2268() /* ty=(Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */;
  %760 = %759.2;
  (%760,)
}

def @func_1941(%var_1932: Tensor[(1386), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(1386), float64]) {
  %761 = cast(%var_1932, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %762 = reshape(%761, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
  %763 = @func_487(%762) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
  %764 = @func_1751() /* ty=Tensor[(32), bool] */;
  %765 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
  %766 = %763.1;
  (%764, %765, %766, %var_1932)
}

def @func_3619() -> (Tensor[(4, 2, 4), uint8],) {
  %767 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  (%767,)
}

def @func_2667() -> (Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) {
  %768 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %769 = @func_1892() /* ty=Tensor[(4, 2, 4), uint8] */;
  %770 = cast(%769, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %771 = reshape(%770, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %772 = @func_103(%771) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %773 = cast(meta[relay.Constant][36] /* ty=Tensor[(1248), uint8] */, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
  %774 = reshape(%773, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint8] */;
  %775 = @func_2455(%774) /* ty=(Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) */;
  %776 = %768.0;
  %777 = %772.0;
  %778 = %775.0;
  (%776, %769, %777, %778, meta[relay.Constant][36] /* ty=Tensor[(1248), uint8] */)
}

def @func_1604() -> (Tensor[(14, 4, 3), float32], Tensor[(32), bool]) {
  %779 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %780 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %781 = %779.2;
  %782 = %780.5;
  (%781, %782)
}

def @func_3560() -> (Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64]) {
  %783 = cast(meta[relay.Constant][37] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %784 = cast(meta[relay.Constant][37] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %785 = reshape(%783, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
  %786 = reshape(%784, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
  %787 = @func_1353(%785, %786) /* ty=(Tensor[(10, 3, 5), float64],) */;
  %788 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
  %789 = %787.0;
  (%788, %789, meta[relay.Constant][37] /* ty=Tensor[(150), float64] */)
}

def @func_355() -> (Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) {
  %790 = cast(meta[relay.Constant][38] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %791 = reshape(%790, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float64] */;
  %792 = @func_312(%791) /* ty=(Tensor[(7, 15, 2), float64],) */;
  %793 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %795 = cos(%794) /* ty=Tensor[(14, 4, 3), float32] */;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %797 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 35), float32] */, dtype="float32") /* ty=Tensor[(13, 35), float32] */;
  %798 = reshape(%797, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %799 = @func_285(%798) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
  %800 = %799.0;
  %801 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 35), float32] */, dtype="int8") /* ty=Tensor[(13, 35), int8] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="int8") /* ty=Tensor[(7, 5, 13), int8] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %805 = cast(meta[relay.Constant][40] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %806 = reshape(%805, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %807 = @func_156(%806) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
  %808 = %792.0;
  %809 = erf(%796) /* ty=Tensor[(14, 4, 3), float32] */;
  %810 = right_shift(%803, %804) /* ty=Tensor[(7, 5, 13), int8] */;
  %811 = %807.2;
  (%808, meta[relay.Constant][38] /* ty=Tensor[(210), float64] */, %809, %810, %811, meta[relay.Constant][40] /* ty=Tensor[(32), bool] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_106(%var_104: Tensor[(4, 2, 4), bool]) -> (Tensor[(4, 2, 4), uint8],) {
  @func_103(%var_104) /* ty=(Tensor[(4, 2, 4), uint8],) */
}

def @func_1752() -> Tensor[(32), bool] {
  %1 = fn () -> Tensor[(32), bool] {
    %0 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
    %0.5
  };
  %1() /* ty=Tensor[(32), bool] */
}

def @func_2521() -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool]) {
  %5 = fn () -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool]) {
    %2 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    %3 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    %4 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
    (%2, %3, %4)
  };
  %5() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool]) */
}

def @func_2424() -> (Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) {
  @func_2422() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) */
}

def @func_1525() -> Tensor[(14, 4, 3), bool] {
  @func_1523() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_4153(%var_4150: Tensor[(4, 2, 4), uint16], %var_4151: Tensor[(4, 2, 4), uint8], %var_4152: Tensor[(4, 2, 4), float64]) -> (Tensor[(4, 2, 4), float64], Tensor[(4, 2, 4), float32]) {
  @func_4148(%var_4150, %var_4151, %var_4152) /* ty=(Tensor[(4, 2, 4), float64], Tensor[(4, 2, 4), float32]) */
}

def @func_4254() -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) {
  %12 = fn () -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) {
    %6 = @func_1604() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(32), bool]) */;
    %7 = %6.0;
    %8 = cast(%7, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
    %9 = reshape(%8, newshape=[168]) /* ty=Tensor[(168), bool] */;
    %10 = @func_1312(%9) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) */;
    %11 = %10.1;
    (%7, %11)
  };
  %12() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) */
}

def @func_2809(%var_2807: Tensor[(14, 4, 3), float32]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64], Tensor[(3, 13, 16), uint8], Tensor[(624), uint8]) {
  @func_2806(%var_2807) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64], Tensor[(3, 13, 16), uint8], Tensor[(624), uint8]) */
}

def @func_3872() -> (Tensor[(32), bool], Tensor[(14, 4, 3), float64]) {
  %19 = fn () -> (Tensor[(32), bool], Tensor[(14, 4, 3), float64]) {
    %13 = @func_3252() /* ty=(Tensor[(32), bool],) */;
    %14 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
    %15 = %14.0;
    %16 = cast(%15, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
    %17 = %13.0;
    %18 = asin(%16) /* ty=Tensor[(14, 4, 3), float64] */;
    (%17, %18)
  };
  %19() /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float64]) */
}

def @func_628(%var_627: Tensor[(14, 4, 3), bool]) -> (Tensor[(14, 4, 3), float64],) {
  %27 = fn (%var_621: Tensor[(14, 4, 3), bool]) -> (Tensor[(14, 4, 3), float64],) {
    %20 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %21 = %20.0;
    %22 = cast(%var_621, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
    %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
    %24 = cast(%21, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %26 = divide(%24, %25) /* ty=Tensor[(14, 4, 3), float64] */;
    (%26,)
  };
  %27(%var_627) /* ty=(Tensor[(14, 4, 3), float64],) */
}

def @func_5805(%var_5804: Tensor[(4, 2, 4), uint8]) -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64], Tensor[(14, 4, 3), bool], Tensor[(6, 16, 13), uint64]) {
  %51 = fn (%var_5770: Tensor[(4, 2, 4), uint8]) -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64], Tensor[(14, 4, 3), bool], Tensor[(6, 16, 13), uint64]) {
    %28 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
    %29 = %28.1;
    %30 = cast(%var_5770, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
    %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
    %32 = cast(%29, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
    %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %34 = @func_5427() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %35 = @func_3023() /* ty=Tensor[(6, 16, 13), float32] */;
    %36 = cast(%35, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    %37 = erf(%36) /* ty=Tensor[(6, 16, 13), float32] */;
    %38 = cast(%35, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
    %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
    %40 = cast(%37, dtype="bool") /* ty=Tensor[(6, 16, 13), bool] */;
    %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %42 = greater(%40, %41) /* ty=Tensor[(6, 16, 13), bool] */;
    %43 = cast(%37, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
    %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%42, dtype="uint64") /* ty=Tensor[(6, 16, 13), uint64] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %47 = @func_1523() /* ty=Tensor[(14, 4, 3), bool] */;
    %48 = mod(%32, %33) /* ty=Tensor[(4, 2, 4), float64] */;
    %49 = %34.0;
    %50 = multiply(%45, %46) /* ty=Tensor[(6, 16, 13), uint64] */;
    (%47, %48, %49, %50)
  };
  %51(%var_5804) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64], Tensor[(14, 4, 3), bool], Tensor[(6, 16, 13), uint64]) */
}

def @func_2910() -> (Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(624), uint8], Tensor[(32), bool], Tensor[(32), bool]) {
  @func_2908() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(624), uint8], Tensor[(32), bool], Tensor[(32), bool]) */
}

def @func_4066() -> (Tensor[(14, 4, 3), uint16], Tensor[(7, 5, 13), float64]) {
  %52 = @func_1718() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) */;
  %53 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %54 = %53.3;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %56 = %52.1;
  %57 = acos(%55) /* ty=Tensor[(7, 5, 13), float64] */;
  (%56, %57)
}

def @func_1546() -> Tensor[(14, 4, 3), bool] {
  @func_1544() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_4290(%var_4282: Tensor[(15, 6, 9), float64], %var_4283: Tensor[(15, 6, 9), float64]) -> (Tensor[(15, 6, 9), float64], Tensor[(4, 2, 4), uint8]) {
  %58 = cast(%var_4283, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %59 = shape_of(%var_4282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_4282, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %62 = mod(%60, %61) /* ty=Tensor[(15, 6, 9), float64] */;
  %63 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  (%62, %63)
}

def @func_1663(%var_1660: Tensor[(3, 13, 16), uint8], %var_1661: Tensor[(3, 13, 16), uint8], %var_1662: Tensor[(32), bool]) -> (Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) {
  %93 = fn (%var_1609: Tensor[(3, 13, 16), uint8], %var_1610: Tensor[(3, 13, 16), uint8], %var_1639: Tensor[(32), bool]) -> (Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) {
    %64 = cast(%var_1610, dtype="uint8") /* ty=Tensor[(3, 13, 16), uint8] */;
    %65 = shape_of(%var_1609, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%var_1609, dtype="uint8") /* ty=Tensor[(3, 13, 16), uint8] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %68 = cast(meta[relay.Constant][0] /* ty=Tensor[(1386, 1), float64] */, dtype="float64") /* ty=Tensor[(1386, 1), float64] */;
    %69 = reshape(%68, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
    %70 = @func_487(%69) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
    %71 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
    %72 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
    %73 = cast(%var_1639, dtype="bool") /* ty=Tensor[(32), bool] */;
    %74 = reshape(%73, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
    %75 = @func_103(%74) /* ty=(Tensor[(4, 2, 4), uint8],) */;
    %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %77 = reshape(%76, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float64] */;
    %78 = @func_312(%77) /* ty=(Tensor[(7, 15, 2), float64],) */;
    %79 = %78.0;
    %80 = cast(meta[relay.Constant][1] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%79, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %84 = cast(meta[relay.Constant][0] /* ty=Tensor[(1386, 1), float64] */, dtype="float64") /* ty=Tensor[(1386, 1), float64] */;
    %85 = left_shift(%66, %67) /* ty=Tensor[(3, 13, 16), uint8] */;
    %86 = %70.1;
    %87 = %71.0;
    %88 = %72.0;
    %89 = %75.0;
    %90 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
    %91 = divide(%82, %83) /* ty=Tensor[(7, 15, 2), float64] */;
    %92 = log10(%84) /* ty=Tensor[(1386, 1), float64] */;
    (%85, %86, %87, %88, %89, %var_1639, %90, %91, %92)
  };
  %93(%var_1660, %var_1661, %var_1662) /* ty=(Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) */
}

def @func_4931() -> (Tensor[(32), bool],) {
  %94 = @func_3252() /* ty=(Tensor[(32), bool],) */;
  %95 = %94.0;
  (%95,)
}

def @func_3949() -> Tensor[(32, ?), bool] {
  @func_3389() /* ty=Tensor[(32, ?), bool] */
}

def @func_2268() -> (Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) {
  %96 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
  %97 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
  %98 = %96.2;
  %99 = @func_1751() /* ty=Tensor[(32), bool] */;
  %100 = %97.1;
  (%98, %99, %100)
}

def @func_522() -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) {
  %101 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %102 = %101.0;
  %103 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 4, 3), bool] */, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = cast(meta[relay.Constant][3] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %108 = reshape(%107, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %109 = @func_285(%108) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
  %110 = logical_or(%105, %106) /* ty=Tensor[(14, 4, 3), bool] */;
  %111 = %109.3;
  (%110, %111, meta[relay.Constant][3] /* ty=Tensor[(455), float32] */)
}

def @func_4916() -> (Tensor[(32), bool], Tensor[(9, 11, 14), bool], Tensor[(1386), float64]) {
  %118 = fn () -> (Tensor[(32), bool], Tensor[(9, 11, 14), bool], Tensor[(1386), float64]) {
    %112 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
    %113 = cast(meta[relay.Constant][4] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
    %114 = reshape(%113, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
    %115 = @func_487(%114) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
    %116 = %112.0;
    %117 = %115.0;
    (%116, %117, meta[relay.Constant][4] /* ty=Tensor[(1386), float64] */)
  };
  %118() /* ty=(Tensor[(32), bool], Tensor[(9, 11, 14), bool], Tensor[(1386), float64]) */
}

def @func_2319() -> (Tensor[(32), bool], Tensor[(1820), float32]) {
  %119 = @func_2268() /* ty=(Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */;
  %120 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
  %121 = %119.1;
  %122 = %120.1;
  (%121, %122)
}

def @func_120() -> Tensor[(14, 4, 3), bool] {
  %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 4, 3), int32] */, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %124 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(14, 4, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 4, 3), int32] */, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%125, %126) /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_4878(%var_4876: Tensor[(10, 2, 14), int8], %var_4877: Tensor[(10, 2, 14), int8]) -> Tensor[(10, 2, 14), int8] {
  %131 = fn (%var_4841: Tensor[(10, 2, 14), int8], %var_4842: Tensor[(10, 2, 14), int8]) -> Tensor[(10, 2, 14), int8] {
    %127 = cast(%var_4842, dtype="int8") /* ty=Tensor[(10, 2, 14), int8] */;
    %128 = shape_of(%var_4841, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%var_4841, dtype="int8") /* ty=Tensor[(10, 2, 14), int8] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    minimum(%129, %130) /* ty=Tensor[(10, 2, 14), int8] */
  };
  %131(%var_4876, %var_4877) /* ty=Tensor[(10, 2, 14), int8] */
}

def @func_4606() -> (Tensor[(32), bool],) {
  %132 = @func_1604() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(32), bool]) */;
  %133 = %132.1;
  (%133,)
}

def @func_1785() -> (Tensor[(32), bool], Tensor[(16, 9, 7), float64], Tensor[(1008), float64]) {
  %139 = fn () -> (Tensor[(32), bool], Tensor[(16, 9, 7), float64], Tensor[(1008), float64]) {
    %134 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
    %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %136 = reshape(%135, newshape=[16, 9, 7]) /* ty=Tensor[(16, 9, 7), float64] */;
    %137 = %134.4;
    %138 = @func_1323(%136) /* ty=Tensor[(16, 9, 7), float64] */;
    (%137, %138, meta[relay.Constant][7] /* ty=Tensor[(1008), float64] */)
  };
  %139() /* ty=(Tensor[(32), bool], Tensor[(16, 9, 7), float64], Tensor[(1008), float64]) */
}

def @func_5061() -> (Tensor[(14, 4, 3), float32],) {
  %142 = fn () -> (Tensor[(14, 4, 3), float32],) {
    %140 = @func_4279() /* ty=(Tensor[(14, 4, 3), float32],) */;
    %141 = %140.0;
    (%141,)
  };
  %142() /* ty=(Tensor[(14, 4, 3), float32],) */
}

def @func_3585(%var_3572: Tensor[(7, 6, 6), float32]) -> (Tensor[(7, 6, 6), bool],) {
  %143 = cast(%var_3572, dtype="float32") /* ty=Tensor[(7, 6, 6), float32] */;
  %144 = asin(%143) /* ty=Tensor[(7, 6, 6), float32] */;
  %145 = cast(%var_3572, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = logical_or(%147, %148) /* ty=Tensor[(7, 6, 6), bool] */;
  (%149,)
}

def @func_1481(%var_1479: Tensor[(14, 4, 3), bool], %var_1480: Tensor[(14, 4, 3), float64]) -> (Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) {
  %163 = fn (%var_1449: Tensor[(14, 4, 3), bool], %var_1462: Tensor[(14, 4, 3), float64]) -> (Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) {
    %150 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
    %151 = cast(%var_1449, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
    %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%150, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %155 = cast(%150, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
    %156 = acos(%155) /* ty=Tensor[(14, 4, 3), float64] */;
    %157 = cast(%var_1462, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
    %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%156, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %161 = bitwise_or(%153, %154) /* ty=Tensor[(14, 4, 3), int32] */;
    %162 = bitwise_xor(%159, %160) /* ty=Tensor[(14, 4, 3), uint16] */;
    (%161, %162)
  };
  %163(%var_1479, %var_1480) /* ty=(Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) */
}

def @func_2097(%var_2095: Tensor[(11, 12, 11), int8], %var_2096: Tensor[(11, 12, 11), int8]) -> (Tensor[(11, 12, 11), int8],) {
  @func_2093(%var_2095, %var_2096) /* ty=(Tensor[(11, 12, 11), int8],) */
}

def @func_2128(%var_2121: Tensor[(7, 13, 6), uint16], %var_2122: Tensor[(7, 13, 6), uint16]) -> (Tensor[(7, 13, 6), uint16], Tensor[(14, 4, 3), bool]) {
  %164 = cast(%var_2122, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
  %165 = shape_of(%var_2121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_2121, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %168 = minimum(%166, %167) /* ty=Tensor[(7, 13, 6), uint16] */;
  %169 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
  (%168, %169)
}

def @func_3253() -> (Tensor[(32), bool],) {
  %172 = fn () -> (Tensor[(32), bool],) {
    %170 = @func_1784() /* ty=(Tensor[(32), bool], Tensor[(16, 9, 7), float64], Tensor[(1008), float64]) */;
    %171 = %170.0;
    (%171,)
  };
  %172() /* ty=(Tensor[(32), bool],) */
}

def @func_2120() -> (Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) {
  @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */
}

def @func_3419(%var_3402: float64, %var_3403: Tensor[(14, 14, 13), float64]) -> Tensor[(14, 14, 13), float64] {
  %173 = cast(%var_3402, dtype="float64") /* ty=float64 */;
  %174 = cast(%var_3403, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  floor_divide(%173, %174) /* ty=Tensor[(14, 14, 13), float64] */
}

def @func_4608() -> (Tensor[(32), bool],) {
  @func_4606() /* ty=(Tensor[(32), bool],) */
}

def @func_2068(%var_2065: Tensor[(15, 1, 11), bool], %var_2066: Tensor[(15, 11, 11), bool], %var_2067: Tensor[(15, 4, 11), bool]) -> (Tensor[(15, 11, 11), bool], Tensor[(15, 4, 11), float64]) {
  @func_2063(%var_2065, %var_2066, %var_2067) /* ty=(Tensor[(15, 11, 11), bool], Tensor[(15, 4, 11), float64]) */
}

def @func_2422() -> (Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) {
  %175 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
  %176 = @func_1160() /* ty=Tensor[(4, 2, 4), uint8] */;
  %177 = @func_1417() /* ty=Tensor[(4, 2, 4), uint8] */;
  %178 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
  (%175, %176, %177, %178)
}

def @func_2352() -> (Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) {
  %187 = fn () -> (Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) {
    %179 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 15), float64] */;
    %180 = atanh(%179) /* ty=Tensor[(14, 1, 15), float64] */;
    %181 = cast(%180, dtype="int8") /* ty=Tensor[(14, 1, 15), int8] */;
    %182 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(14, 1, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 1, 15), float64] */, dtype="int8") /* ty=Tensor[(14, 1, 15), int8] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %185 = add(%183, %184) /* ty=Tensor[(14, ?, 15), int8] */;
    %186 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
    (%185, %186)
  };
  %187() /* ty=(Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) */
}

def @func_2806(%var_2759: Tensor[(14, 4, 3), float32]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64], Tensor[(3, 13, 16), uint8], Tensor[(624), uint8]) {
  %188 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %189 = @func_2268() /* ty=(Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */;
  %190 = %189.2;
  %191 = cast(%var_2759, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = cast(%190, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  %196 = cast(meta[relay.Constant][9] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %198 = reshape(%196, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
  %199 = reshape(%197, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
  %200 = @func_1353(%198, %199) /* ty=(Tensor[(10, 3, 5), float64],) */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %202 = cast(meta[relay.Constant][10] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %203 = %188.0;
  %204 = cast(%203, dtype="bool") /* ty=Tensor[(32), bool] */;
  %205 = reshape(%201, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %206 = reshape(%202, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %207 = reshape(%204, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %208 = @func_1659(%205, %206, %207) /* ty=(Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) */;
  %209 = less_equal(%193, %194) /* ty=Tensor[(14, 4, 3), bool] */;
  %210 = sigmoid(%195) /* ty=Tensor[(14, 4, 3), float32] */;
  %211 = %200.0;
  %212 = %208.0;
  (%203, %209, %210, %211, meta[relay.Constant][9] /* ty=Tensor[(150), float64] */, %212, meta[relay.Constant][10] /* ty=Tensor[(624), uint8] */)
}

def @func_1068(%var_1063: Tensor[(5, 42), float64], %var_1064: Tensor[(32), bool], %var_1065: Tensor[(455), float32], %var_1066: Tensor[(1386), float64], %var_1067: Tensor[(7, 15, 2), float32]) -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(7, 15, 2), float32], Tensor[(7, 15, 2), int64], Tensor[(32), float64], Tensor[(455), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), float64], Tensor[(32), float64], Tensor[(7, 15, 2), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), bool], Tensor[(1820), float32], Tensor[(14, 4, 3), bool]) {
  %272 = fn (%var_952: Tensor[(5, 42), float64], %var_977: Tensor[(32), bool], %var_1032: Tensor[(455), float32], %var_1036: Tensor[(1386), float64], %var_1041: Tensor[(7, 15, 2), float32]) -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(7, 15, 2), float32], Tensor[(7, 15, 2), int64], Tensor[(32), float64], Tensor[(455), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), float64], Tensor[(32), float64], Tensor[(7, 15, 2), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), bool], Tensor[(1820), float32], Tensor[(14, 4, 3), bool]) {
    %213 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %214 = cast(%var_977, dtype="bool") /* ty=Tensor[(32), bool] */;
    %215 = reshape(%214, newshape=[32]) /* ty=Tensor[(32), bool] */;
    %216 = @func_156(%215) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
    %217 = cast(%var_952, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
    %218 = reshape(%217, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float64] */;
    %219 = @func_312(%218) /* ty=(Tensor[(7, 15, 2), float64],) */;
    %220 = %219.0;
    %221 = cast(%220, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
    %222 = acos(%221) /* ty=Tensor[(7, 15, 2), float64] */;
    %223 = cast(%222, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
    %224 = sqrt(%223) /* ty=Tensor[(7, 15, 2), float64] */;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
    %226 = cos(%225) /* ty=Tensor[(7, 15, 2), float64] */;
    %227 = cast(%226, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
    %228 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 42), float64] */, dtype="uint8") /* ty=Tensor[(5, 42), uint8] */;
    %229 = shape_of(%var_952, dtype="int32") /* ty=Tensor[(2), int32] */;
    %230 = cast(%var_952, dtype="uint8") /* ty=Tensor[(5, 42), uint8] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %232 = bitwise_xor(%230, %231) /* ty=Tensor[(5, 42), uint8] */;
    %233 = cast(%232, dtype="int8") /* ty=Tensor[(5, 42), int8] */;
    %234 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%224, dtype="int8") /* ty=Tensor[(7, 15, 2), int8] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %237 = right_shift(%235, %236) /* ty=Tensor[(7, 15, 2), int8] */;
    %238 = cast(%220, dtype="int64") /* ty=Tensor[(7, 15, 2), int64] */;
    %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%237, dtype="int64") /* ty=Tensor[(7, 15, 2), int64] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %242 = cast(%var_1032, dtype="float32") /* ty=Tensor[(455), float32] */;
    %243 = reshape(%242, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
    %244 = @func_285(%243) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
    %245 = cast(%var_1036, dtype="float64") /* ty=Tensor[(1386), float64] */;
    %246 = reshape(%245, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
    %247 = @func_487(%246) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
    %248 = cast(%var_1032, dtype="float32") /* ty=Tensor[(455), float32] */;
    %249 = reshape(%248, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
    %250 = @func_285(%249) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
    %251 = cast(%226, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
    %252 = cosh(%251) /* ty=Tensor[(7, 15, 2), float32] */;
    %253 = cast(%var_1041, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
    %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%252, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %257 = cast(meta[relay.Constant][12] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %258 = reshape(%257, newshape=[455, 4]) /* ty=Tensor[(455, 4), float32] */;
    %259 = @func_870(%258) /* ty=(Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) */;
    %260 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
    %261 = %213.0;
    %262 = %216.3;
    %263 = log(%227) /* ty=Tensor[(7, 15, 2), float32] */;
    %264 = add(%240, %241) /* ty=Tensor[(7, 15, 2), int64] */;
    %265 = %244.2;
    %266 = %247.0;
    %267 = %250.2;
    %268 = mod(%255, %256) /* ty=Tensor[(7, 15, 2), float64] */;
    %269 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    %270 = %259.5;
    %271 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    (%260, %261, %262, %var_977, %263, %264, %265, %var_1032, %266, %var_1036, %267, %268, %269, %270, meta[relay.Constant][12] /* ty=Tensor[(1820), float32] */, %271)
  };
  %272(%var_1063, %var_1064, %var_1065, %var_1066, %var_1067) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(7, 15, 2), float32], Tensor[(7, 15, 2), int64], Tensor[(32), float64], Tensor[(455), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), float64], Tensor[(32), float64], Tensor[(7, 15, 2), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), bool], Tensor[(1820), float32], Tensor[(14, 4, 3), bool]) */
}

def @func_1718() -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) {
  %273 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %274 = cast(%273, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %275 = cast(%273, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
  %276 = reshape(%274, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %277 = reshape(%275, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float64] */;
  %278 = @func_1478(%276, %277) /* ty=(Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) */;
  %279 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %280 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %281 = %278.1;
  %282 = %279.0;
  %283 = %280.0;
  (%273, %281, %282, %283)
}

def @func_3165() -> (Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) {
  %298 = fn () -> (Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) {
    %284 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
    %285 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %286 = reshape(%285, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float32] */;
    %287 = @func_2864(%286) /* ty=(Tensor[(14, 4, 3), bool],) */;
    %288 = cast(meta[relay.Constant][13] /* ty=Tensor[(768, 2), uint32] */, dtype="uint32") /* ty=Tensor[(768, 2), uint32] */;
    %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(768, 2), uint32] */, dtype="uint32") /* ty=Tensor[(768, 2), uint32] */;
    %290 = reshape(%288, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), uint32] */;
    %291 = reshape(%289, newshape=[16, 16, 6]) /* ty=Tensor[(16, 16, 6), uint32] */;
    %292 = @func_2825(%290, %291) /* ty=Tensor[(16, 16, 6), bool] */;
    %293 = cast(%292, dtype="float64") /* ty=Tensor[(16, 16, 6), float64] */;
    %294 = @func_1751() /* ty=Tensor[(32), bool] */;
    %295 = %284.4;
    %296 = %287.0;
    %297 = cos(%293) /* ty=Tensor[(16, 16, 6), float64] */;
    (%294, meta[relay.Constant][13] /* ty=Tensor[(768, 2), uint32] */, %295, %296, meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, %297)
  };
  %298() /* ty=(Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) */
}

def @func_4043(%var_4041: Tensor[(1008), float64]) -> (Tensor[(32), bool], Tensor[(32, ?), bool], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool], Tensor[(10, 3, 5), float64], Tensor[(16, 9, 7), float64], Tensor[(1008), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64]) {
  @func_4040(%var_4041) /* ty=(Tensor[(32), bool], Tensor[(32, ?), bool], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool], Tensor[(10, 3, 5), float64], Tensor[(16, 9, 7), float64], Tensor[(1008), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64]) */
}

def @func_4589(%var_4530: Tensor[(1815), bool], %var_4575: Tensor[(14, 4, 3), float32]) -> (Tensor[(32), float32], Tensor[(15, 4, 11), float64], Tensor[(11, 15), bool], Tensor[(1815), bool], Tensor[(660), bool], Tensor[(11, 3, 2), float64], Tensor[(66), int32], Tensor[(14, 4, 3), bool]) {
  %299 = @func_2908() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(624), uint8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %300 = %299.3;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(32), float32] */;
  %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 15), bool] */, dtype="bool") /* ty=Tensor[(11, 15), bool] */;
  %303 = cast(%var_4530, dtype="bool") /* ty=Tensor[(1815), bool] */;
  %304 = cast(meta[relay.Constant][16] /* ty=Tensor[(660), bool] */, dtype="bool") /* ty=Tensor[(660), bool] */;
  %305 = reshape(%302, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), bool] */;
  %306 = reshape(%303, newshape=[15, 11, 11]) /* ty=Tensor[(15, 11, 11), bool] */;
  %307 = reshape(%304, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), bool] */;
  %308 = @func_2063(%305, %306, %307) /* ty=(Tensor[(15, 11, 11), bool], Tensor[(15, 4, 11), float64]) */;
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
  %310 = cast(meta[relay.Constant][17] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
  %311 = reshape(%309, newshape=[11, 3, 2]) /* ty=Tensor[(11, 3, 2), int32] */;
  %312 = reshape(%310, newshape=[11, 3, 2]) /* ty=Tensor[(11, 3, 2), int32] */;
  %313 = @func_3736(%311, %312) /* ty=(Tensor[(11, 3, 2), int32], Tensor[(11, 3, 2), float64], Tensor[(4, 2, 4), uint8]) */;
  %314 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
  %315 = cast(%var_4575, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = sinh(%301) /* ty=Tensor[(32), float32] */;
  %320 = %308.1;
  %321 = %313.1;
  %322 = less(%317, %318) /* ty=Tensor[(14, 4, 3), bool] */;
  (%319, %320, meta[relay.Constant][15] /* ty=Tensor[(11, 15), bool] */, %var_4530, meta[relay.Constant][16] /* ty=Tensor[(660), bool] */, %321, meta[relay.Constant][17] /* ty=Tensor[(66), int32] */, %322)
}

def @func_5331() -> (Tensor[(7, 5, 13), int8],) {
  %325 = fn () -> (Tensor[(7, 5, 13), int8],) {
    %323 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
    %324 = %323.3;
    (%324,)
  };
  %325() /* ty=(Tensor[(7, 5, 13), int8],) */
}

def @func_5729() -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(11, 3, 2), float64], Tensor[(1815), bool], Tensor[(14, 4, 3), bool]) {
  %336 = fn () -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(11, 3, 2), float64], Tensor[(1815), bool], Tensor[(14, 4, 3), bool]) {
    %326 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %327 = cast(meta[relay.Constant][18] /* ty=Tensor[(1815), bool] */, dtype="bool") /* ty=Tensor[(1815), bool] */;
    %328 = %326.0;
    %329 = cast(%328, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %330 = reshape(%327, newshape=[1815]) /* ty=Tensor[(1815), bool] */;
    %331 = reshape(%329, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float32] */;
    %332 = @func_4589(%330, %331) /* ty=(Tensor[(32), float32], Tensor[(15, 4, 11), float64], Tensor[(11, 15), bool], Tensor[(1815), bool], Tensor[(660), bool], Tensor[(11, 3, 2), float64], Tensor[(66), int32], Tensor[(14, 4, 3), bool]) */;
    %333 = @func_1751() /* ty=Tensor[(32), bool] */;
    %334 = %332.5;
    %335 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    (%333, %328, %334, meta[relay.Constant][18] /* ty=Tensor[(1815), bool] */, %335)
  };
  %336() /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(11, 3, 2), float64], Tensor[(1815), bool], Tensor[(14, 4, 3), bool]) */
}

def @func_1160() -> Tensor[(4, 2, 4), uint8] {
  @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_5843() -> (Tensor[(14, 4, 3), bool], Tensor[(768, 2), uint32]) {
  %337 = @func_3164() /* ty=(Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) */;
  %338 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
  %339 = %337.1;
  (%338, %339)
}

def @func_1544() -> Tensor[(14, 4, 3), bool] {
  @func_617() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_356() -> (Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) {
  %362 = fn () -> (Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) {
    %340 = cast(meta[relay.Constant][19] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %341 = reshape(%340, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float64] */;
    %342 = @func_312(%341) /* ty=(Tensor[(7, 15, 2), float64],) */;
    %343 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    %344 = cast(%343, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %345 = cos(%344) /* ty=Tensor[(14, 4, 3), float32] */;
    %346 = cast(%345, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %347 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 35), float32] */, dtype="float32") /* ty=Tensor[(13, 35), float32] */;
    %348 = reshape(%347, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
    %349 = @func_285(%348) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
    %350 = %349.0;
    %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 35), float32] */, dtype="int8") /* ty=Tensor[(13, 35), int8] */;
    %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %353 = cast(%350, dtype="int8") /* ty=Tensor[(7, 5, 13), int8] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %355 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
    %356 = reshape(%355, newshape=[32]) /* ty=Tensor[(32), bool] */;
    %357 = @func_156(%356) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
    %358 = %342.0;
    %359 = erf(%346) /* ty=Tensor[(14, 4, 3), float32] */;
    %360 = right_shift(%353, %354) /* ty=Tensor[(7, 5, 13), int8] */;
    %361 = %357.2;
    (%358, meta[relay.Constant][19] /* ty=Tensor[(210), float64] */, %359, %360, %361, meta[relay.Constant][21] /* ty=Tensor[(32), bool] */)
  };
  %362() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */
}

def @func_1115() -> (Tensor[(32), bool],) {
  @func_1113() /* ty=(Tensor[(32), bool],) */
}

def @func_873(%var_871: Tensor[(455, 4), float32]) -> (Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) {
  @func_870(%var_871) /* ty=(Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) */
}

def @func_2867(%var_2865: Tensor[(14, 4, 3), float32]) -> (Tensor[(14, 4, 3), bool],) {
  @func_2864(%var_2865) /* ty=(Tensor[(14, 4, 3), bool],) */
}

def @func_2187(%var_2185: Tensor[(1386), float64], %var_2186: Tensor[(32), bool]) -> (Tensor[(455, 4), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float32], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(14, 4, 3), bool]) {
  @func_2183(%var_2185, %var_2186) /* ty=(Tensor[(455, 4), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float32], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(14, 4, 3), bool]) */
}

def @func_1893() -> Tensor[(4, 2, 4), uint8] {
  %363 = fn () -> Tensor[(4, 2, 4), uint8] {
    @func_1160() /* ty=Tensor[(4, 2, 4), uint8] */
  };
  %363() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_2027(%var_2026: Tensor[(32), bool]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float32]) {
  %371 = fn (%var_2016: Tensor[(32), bool]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float32]) {
    %364 = @func_1751() /* ty=Tensor[(32), bool] */;
    %365 = cast(%var_2016, dtype="bool") /* ty=Tensor[(32), bool] */;
    %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(1), int32] */;
    %367 = cast(%364, dtype="bool") /* ty=Tensor[(32), bool] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?), bool] */;
    %369 = less_equal(%367, %368) /* ty=Tensor[(32), bool] */;
    %370 = @func_1846() /* ty=Tensor[(14, 4, 3), float32] */;
    (%369, %370)
  };
  %371(%var_2026) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */
}

def @func_103(%var_72: Tensor[(4, 2, 4), bool]) -> (Tensor[(4, 2, 4), uint8],) {
  %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 2, 4), bool] */, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %373 = shape_of(%var_72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_72, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = logical_or(%374, %375) /* ty=Tensor[(4, 2, 4), bool] */;
  %377 = cast(%376, dtype="uint8") /* ty=Tensor[(4, 2, 4), uint8] */;
  %378 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(4, 2, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 2, 4), bool] */, dtype="uint8") /* ty=Tensor[(4, 2, 4), uint8] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %381 = multiply(%379, %380) /* ty=Tensor[(4, 2, 4), uint8] */;
  (%381,)
}

def @func_1605() -> (Tensor[(14, 4, 3), float32], Tensor[(32), bool]) {
  %386 = fn () -> (Tensor[(14, 4, 3), float32], Tensor[(32), bool]) {
    %382 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
    %383 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
    %384 = %382.2;
    %385 = %383.5;
    (%384, %385)
  };
  %386() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(32), bool]) */
}

def @func_2183(%var_2139: Tensor[(1386), float64], %var_2171: Tensor[(32), bool]) -> (Tensor[(455, 4), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float32], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(14, 4, 3), bool]) {
  %387 = @func_2118() /* ty=(Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) */;
  %388 = cast(%var_2139, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %389 = reshape(%388, newshape=[1386]) /* ty=Tensor[(1386), float64] */;
  %390 = @func_1941(%389) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(1386), float64]) */;
  %391 = cast(%var_2139, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %392 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
  %393 = cast(%var_2171, dtype="bool") /* ty=Tensor[(32), bool] */;
  %394 = reshape(%393, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %395 = @func_156(%394) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
  %396 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %397 = %387.2;
  %398 = %390.1;
  %399 = cos(%391) /* ty=Tensor[(1386), float32] */;
  %400 = %392.0;
  %401 = %395.0;
  %402 = %396.0;
  (%397, %398, %399, %400, %401, %var_2171, %402)
}

def @func_1417() -> Tensor[(4, 2, 4), uint8] {
  @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_3936() -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
  %406 = fn () -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
    %403 = @func_2520() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool]) */;
    %404 = %403.0;
    %405 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
    (%404, %405)
  };
  %406() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */
}

def @func_1272() -> (Tensor[(455), float32], Tensor[(14, 4, 3), float32]) {
  %418 = fn () -> (Tensor[(455), float32], Tensor[(14, 4, 3), float32]) {
    %407 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
    %408 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %409 = %408.0;
    %410 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %411 = %410.0;
    %412 = cast(%411, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %413 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
    %414 = cast(%409, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %416 = %407.2;
    %417 = floor_mod(%414, %415) /* ty=Tensor[(14, 4, 3), float32] */;
    (%416, %417)
  };
  %418() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */
}

def @func_1162() -> Tensor[(4, 2, 4), uint8] {
  @func_1160() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_3389() -> Tensor[(32, ?), bool] {
  %419 = @func_2422() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) */;
  %420 = %419.2;
  %421 = cast(%420, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %422 = reshape(%421, newshape=[32, 1]) /* ty=Tensor[(32, 1), bool] */;
  %423 = @func_3316(%422) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) */;
  %424 = %423.3;
  %425 = cast(%420, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(2), int32] */;
  %427 = cast(%424, dtype="bool") /* ty=Tensor[(32, 1), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%427, %428) /* ty=Tensor[(32, ?), bool] */
}

def @func_2667() -> (Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) {
  %429 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %430 = @func_1892() /* ty=Tensor[(4, 2, 4), uint8] */;
  %431 = cast(%430, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %432 = reshape(%431, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %433 = @func_103(%432) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %434 = cast(meta[relay.Constant][23] /* ty=Tensor[(1248), uint8] */, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
  %435 = reshape(%434, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint8] */;
  %436 = @func_2455(%435) /* ty=(Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) */;
  %437 = %429.0;
  %438 = %433.0;
  %439 = %436.0;
  (%437, %430, %438, %439, meta[relay.Constant][23] /* ty=Tensor[(1248), uint8] */)
}

def @func_1943(%var_1942: Tensor[(1386), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(1386), float64]) {
  %446 = fn (%var_1932: Tensor[(1386), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(1386), float64]) {
    %440 = cast(%var_1932, dtype="float64") /* ty=Tensor[(1386), float64] */;
    %441 = reshape(%440, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
    %442 = @func_487(%441) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
    %443 = @func_1751() /* ty=Tensor[(32), bool] */;
    %444 = @func_1544() /* ty=Tensor[(14, 4, 3), bool] */;
    %445 = %442.1;
    (%443, %444, %445, %var_1932)
  };
  %446(%var_1942) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(1386), float64]) */
}

def @func_158(%var_157: Tensor[(32), bool]) -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
  %457 = fn (%var_130: Tensor[(32), bool]) -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
    %447 = cast(%var_130, dtype="bool") /* ty=Tensor[(32), bool] */;
    %448 = reshape(%447, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
    %449 = @func_103(%448) /* ty=(Tensor[(4, 2, 4), uint8],) */;
    %450 = %449.0;
    %451 = cast(%450, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
    %452 = reshape(%451, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
    %453 = @func_103(%452) /* ty=(Tensor[(4, 2, 4), uint8],) */;
    %454 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    %455 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    %456 = %453.0;
    (%454, %450, %var_130, %455, %456)
  };
  %457(%var_157) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */
}

def @func_3780(%var_3778: Tensor[(16, 10, 15), float32], %var_3779: Tensor[(1248), uint8]) -> (Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), float32], Tensor[(1248), uint8], Tensor[(16, 10, 15), bool]) {
  %476 = fn (%var_3753: Tensor[(16, 10, 15), float32], %var_3770: Tensor[(1248), uint8]) -> (Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), float32], Tensor[(1248), uint8], Tensor[(16, 10, 15), bool]) {
    %458 = @func_3619() /* ty=(Tensor[(4, 2, 4), uint8],) */;
    %459 = cast(%var_3770, dtype="uint8") /* ty=Tensor[(1248), uint8] */;
    %460 = reshape(%459, newshape=[6, 16, 13]) /* ty=Tensor[(6, 16, 13), uint8] */;
    %461 = @func_2455(%460) /* ty=(Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) */;
    %462 = cast(%var_3753, dtype="float32") /* ty=Tensor[(16, 10, 15), float32] */;
    %463 = asin(%462) /* ty=Tensor[(16, 10, 15), float32] */;
    %464 = cast(%var_3753, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %466 = cast(%463, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %468 = logical_or(%466, %467) /* ty=Tensor[(16, 10, 15), bool] */;
    %469 = cast(%463, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
    %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %471 = cast(%468, dtype="bool") /* ty=Tensor[(16, 10, 15), bool] */;
    %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %473 = %458.0;
    %474 = %461.1;
    %475 = less(%471, %472) /* ty=Tensor[(16, 10, 15), bool] */;
    (%473, %474, %var_3770, %475)
  };
  %476(%var_3778, %var_3779) /* ty=(Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), float32], Tensor[(1248), uint8], Tensor[(16, 10, 15), bool]) */
}

def @func_4933() -> (Tensor[(32), bool],) {
  @func_4931() /* ty=(Tensor[(32), bool],) */
}

def @func_1848() -> Tensor[(14, 4, 3), float32] {
  @func_1846() /* ty=Tensor[(14, 4, 3), float32] */
}

def @func_1523() -> Tensor[(14, 4, 3), bool] {
  %477 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %477.0
}

def @func_2063(%var_2046: Tensor[(15, 1, 11), bool], %var_2047: Tensor[(15, 11, 11), bool], %var_2051: Tensor[(15, 4, 11), bool]) -> (Tensor[(15, 11, 11), bool], Tensor[(15, 4, 11), float64]) {
  %478 = cast(%var_2046, dtype="bool") /* ty=Tensor[(15, 1, 11), bool] */;
  %479 = cast(%var_2047, dtype="bool") /* ty=Tensor[(15, 11, 11), bool] */;
  %480 = cast(%var_2046, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %481 = cast(%var_2051, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %482 = divide(%480, %481) /* ty=Tensor[(15, 4, 11), float64] */;
  %483 = cast(%482, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %484 = logical_or(%478, %479) /* ty=Tensor[(15, 11, 11), bool] */;
  %485 = asin(%483) /* ty=Tensor[(15, 4, 11), float64] */;
  (%484, %485)
}

def @func_5389(%var_5369: Tensor[(1008), float64]) -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(1008), float64]) {
  %486 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %487 = cast(%var_5369, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %488 = reshape(%487, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %489 = @func_4040(%488) /* ty=(Tensor[(32), bool], Tensor[(32, ?), bool], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool], Tensor[(10, 3, 5), float64], Tensor[(16, 9, 7), float64], Tensor[(1008), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64]) */;
  %490 = %486.0;
  %491 = %489.3;
  (%490, %491, %var_5369)
}

def @func_1314(%var_1313: Tensor[(168), bool]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) {
  %499 = fn (%var_1297: Tensor[(168), bool]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) {
    %492 = @func_1113() /* ty=(Tensor[(32), bool],) */;
    %493 = cast(%var_1297, dtype="bool") /* ty=Tensor[(168), bool] */;
    %494 = reshape(%493, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
    %495 = @func_626(%494) /* ty=(Tensor[(14, 4, 3), float64],) */;
    %496 = %492.0;
    %497 = %495.0;
    %498 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
    (%496, %497, %var_1297, %498)
  };
  %499(%var_1313) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) */
}

def @func_2118() -> (Tensor[(32), bool], Tensor[(1820), float32], Tensor[(455, 4), float32]) {
  %500 = cast(meta[relay.Constant][24] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %501 = reshape(%500, newshape=[455, 4]) /* ty=Tensor[(455, 4), float32] */;
  %502 = @func_870(%501) /* ty=(Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) */;
  %503 = %502.3;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(455, 4), float32] */;
  %505 = @func_1751() /* ty=Tensor[(32), bool] */;
  %506 = rsqrt(%504) /* ty=Tensor[(455, 4), float32] */;
  (%505, meta[relay.Constant][24] /* ty=Tensor[(1820), float32] */, %506)
}

def @func_1419() -> Tensor[(4, 2, 4), uint8] {
  @func_1417() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_4148(%var_4113: Tensor[(4, 2, 4), uint16], %var_4118: Tensor[(4, 2, 4), uint8], %var_4131: Tensor[(4, 2, 4), float64]) -> (Tensor[(4, 2, 4), float64], Tensor[(4, 2, 4), float32]) {
  %507 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  %508 = cast(%var_4118, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %512 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 2, 4), uint8] */, dtype="uint16") /* ty=Tensor[(4, 2, 4), uint16] */;
  %513 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%507, dtype="uint16") /* ty=Tensor[(4, 2, 4), uint16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %516 = left_shift(%514, %515) /* ty=Tensor[(4, 2, 4), uint16] */;
  %517 = cast(%var_4113, dtype="int8") /* ty=Tensor[(4, 2, 4), int8] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%516, dtype="int8") /* ty=Tensor[(4, 2, 4), int8] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %521 = minimum(%519, %520) /* ty=Tensor[(4, 2, 4), int8] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %523 = tan(%522) /* ty=Tensor[(4, 2, 4), float64] */;
  %524 = cast(%var_4131, dtype="float32") /* ty=Tensor[(4, 2, 4), float32] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float32") /* ty=Tensor[(4, 2, 4), float32] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %528 = maximum(%510, %511) /* ty=Tensor[(4, 2, 4), float64] */;
  %529 = power(%526, %527) /* ty=Tensor[(4, 2, 4), float32] */;
  (%528, %529)
}

def @func_3951() -> Tensor[(32, ?), bool] {
  @func_3949() /* ty=Tensor[(32, ?), bool] */
}

def @func_1126() -> Tensor[(4, 2, 4), uint8] {
  %530 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
  %530.1
}

def @func_5155(%var_5153: Tensor[(4, 9, 4), int32], %var_5154: Tensor[(4, 9, 4), int32]) -> (Tensor[(4, 9, 4), int32], Tensor[(4, 9, 4), float32]) {
  %538 = fn (%var_5134: Tensor[(4, 9, 4), int32], %var_5135: Tensor[(4, 9, 4), int32]) -> (Tensor[(4, 9, 4), int32], Tensor[(4, 9, 4), float32]) {
    %531 = cast(%var_5135, dtype="int32") /* ty=Tensor[(4, 9, 4), int32] */;
    %532 = shape_of(%var_5134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%var_5134, dtype="int32") /* ty=Tensor[(4, 9, 4), int32] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %535 = cast(%var_5134, dtype="float32") /* ty=Tensor[(4, 9, 4), float32] */;
    %536 = bitwise_and(%533, %534) /* ty=Tensor[(4, 9, 4), int32] */;
    %537 = atanh(%535) /* ty=Tensor[(4, 9, 4), float32] */;
    (%536, %537)
  };
  %538(%var_5153, %var_5154) /* ty=(Tensor[(4, 9, 4), int32], Tensor[(4, 9, 4), float32]) */
}

def @func_4294(%var_4292: Tensor[(15, 6, 9), float64], %var_4293: Tensor[(15, 6, 9), float64]) -> (Tensor[(15, 6, 9), float64], Tensor[(4, 2, 4), uint8]) {
  @func_4290(%var_4292, %var_4293) /* ty=(Tensor[(15, 6, 9), float64], Tensor[(4, 2, 4), uint8]) */
}

def @func_5392(%var_5390: Tensor[(1008), float64]) -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(1008), float64]) {
  @func_5389(%var_5390) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(1008), float64]) */
}

def @func_1846() -> Tensor[(14, 4, 3), float32] {
  %539 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
  sqrt(%541) /* ty=Tensor[(14, 4, 3), float32] */
}

def @func_3024() -> Tensor[(6, 16, 13), float32] {
  %550 = fn () -> Tensor[(6, 16, 13), float32] {
    %542 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
    %543 = %542.3;
    %544 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 16, 13), uint8] */, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
    %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%543, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %548 = subtract(%546, %547) /* ty=Tensor[(6, 16, 13), int16] */;
    %549 = cast(%548, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    sqrt(%549) /* ty=Tensor[(6, 16, 13), float32] */
  };
  %550() /* ty=Tensor[(6, 16, 13), float32] */
}

def @func_3807() -> (Tensor[(14, 4, 3), bool],) {
  %553 = fn () -> (Tensor[(14, 4, 3), bool],) {
    %551 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %552 = %551.0;
    (%552,)
  };
  %553() /* ty=(Tensor[(14, 4, 3), bool],) */
}

def @func_2948() -> Tensor[(14, 4, 3), bool] {
  @func_2946() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_1679() -> Tensor[(14, 4, 3), float32] {
  @func_1677() /* ty=Tensor[(14, 4, 3), float32] */
}

def @func_2457(%var_2456: Tensor[(6, 16, 13), uint8]) -> (Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) {
  %559 = fn (%var_2428: Tensor[(6, 16, 13), uint8]) -> (Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) {
    %554 = cast(meta[relay.Constant][27] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %555 = cast(%var_2428, dtype="uint8") /* ty=Tensor[(6, 16, 13), uint8] */;
    %556 = cast(%var_2428, dtype="float32") /* ty=Tensor[(6, 16, 13), float32] */;
    %557 = maximum(%554, %555) /* ty=Tensor[(6, 16, 13), uint8] */;
    %558 = sin(%556) /* ty=Tensor[(6, 16, 13), float32] */;
    (%557, %558)
  };
  %559(%var_2456) /* ty=(Tensor[(6, 16, 13), uint8], Tensor[(6, 16, 13), float32]) */
}

def @func_3588(%var_3586: Tensor[(7, 6, 6), float32]) -> (Tensor[(7, 6, 6), bool],) {
  @func_3585(%var_3586) /* ty=(Tensor[(7, 6, 6), bool],) */
}

def @func_4040(%var_4007: Tensor[(1008), float64]) -> (Tensor[(32), bool], Tensor[(32, ?), bool], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool], Tensor[(10, 3, 5), float64], Tensor[(16, 9, 7), float64], Tensor[(1008), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), float64]) {
  %560 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %561 = @func_3619() /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %562 = @func_2351() /* ty=(Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) */;
  %563 = @func_3560() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64]) */;
  %564 = cast(%var_4007, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %565 = reshape(%564, newshape=[16, 9, 7]) /* ty=Tensor[(16, 9, 7), float64] */;
  %566 = @func_3806() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %567 = @func_3619() /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %568 = %567.0;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %570 = log(%569) /* ty=Tensor[(4, 2, 4), float64] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(4, 2, 4), float32] */;
  %572 = rsqrt(%571) /* ty=Tensor[(4, 2, 4), float32] */;
  %573 = cast(%570, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %577 = %560.0;
  %578 = @func_3389() /* ty=Tensor[(32, ?), bool] */;
  %579 = %561.0;
  %580 = %562.1;
  %581 = %563.1;
  %582 = @func_1323(%565) /* ty=Tensor[(16, 9, 7), float64] */;
  %583 = %566.0;
  %584 = add(%575, %576) /* ty=Tensor[(4, 2, 4), float64] */;
  (%577, %578, %579, %580, %581, %582, %var_4007, %583, %584)
}

def @func_5290(%var_5274: Tensor[(210), float64], %var_5275: Tensor[(455), float32], %var_5276: Tensor[(1386), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(210), float64], Tensor[(455), float32], Tensor[(1386), float64]) {
  %585 = @func_1113() /* ty=(Tensor[(32), bool],) */;
  %586 = @func_1718() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) */;
  %587 = cast(%var_5274, dtype="float64") /* ty=Tensor[(210), float64] */;
  %588 = %585.0;
  %589 = cast(%588, dtype="bool") /* ty=Tensor[(32), bool] */;
  %590 = cast(%var_5275, dtype="float32") /* ty=Tensor[(455), float32] */;
  %591 = cast(%var_5276, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %592 = cast(%var_5274, dtype="float32") /* ty=Tensor[(210), float32] */;
  %593 = reshape(%587, newshape=[5, 42]) /* ty=Tensor[(5, 42), float64] */;
  %594 = reshape(%589, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %595 = reshape(%590, newshape=[455]) /* ty=Tensor[(455), float32] */;
  %596 = reshape(%591, newshape=[1386]) /* ty=Tensor[(1386), float64] */;
  %597 = reshape(%592, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float32] */;
  %598 = @func_1062(%593, %594, %595, %596, %597) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(7, 15, 2), float32], Tensor[(7, 15, 2), int64], Tensor[(32), float64], Tensor[(455), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), float64], Tensor[(32), float64], Tensor[(7, 15, 2), float64], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), bool], Tensor[(1820), float32], Tensor[(14, 4, 3), bool]) */;
  %599 = %586.3;
  %600 = %598.15;
  (%588, %599, %600, %var_5274, %var_5275, %var_5276)
}

def @func_2825(%var_2816: Tensor[(16, 16, 6), uint32], %var_2817: Tensor[(16, 16, 6), uint32]) -> Tensor[(16, 16, 6), bool] {
  %601 = cast(%var_2817, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %602 = shape_of(%var_2816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_2816, dtype="bool") /* ty=Tensor[(16, 16, 6), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%603, %604) /* ty=Tensor[(16, 16, 6), bool] */
}

def @func_3619() -> (Tensor[(4, 2, 4), uint8],) {
  %605 = @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */;
  (%605,)
}

def @func_5211() -> (Tensor[(14, 4, 3), float64], Tensor[(32, 3), float64], Tensor[(14, 4, 3), int32]) {
  %622 = fn () -> (Tensor[(14, 4, 3), float64], Tensor[(32, 3), float64], Tensor[(14, 4, 3), int32]) {
    %606 = @func_4253() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) */;
    %607 = @func_3949() /* ty=Tensor[(32, ?), bool] */;
    %608 = cast(%607, dtype="float32") /* ty=Tensor[(32, ?), float32] */;
    %609 = acosh(%608) /* ty=Tensor[(32, ?), float32] */;
    %610 = cast(%609, dtype="bool") /* ty=Tensor[(32, ?), bool] */;
    %611 = cast(meta[relay.Constant][28] /* ty=Tensor[(32, 3), float32] */, dtype="bool") /* ty=Tensor[(32, 3), bool] */;
    %612 = equal(%610, %611) /* ty=Tensor[(32, 3), bool] */;
    %613 = cast(%612, dtype="float32") /* ty=Tensor[(32, 3), float32] */;
    %614 = sigmoid(%613) /* ty=Tensor[(32, 3), float32] */;
    %615 = cast(%614, dtype="float64") /* ty=Tensor[(32, 3), float64] */;
    %616 = %606.1;
    %617 = cast(%616, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
    %618 = reshape(%617, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
    %619 = @func_4687(%618) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) */;
    %620 = sin(%615) /* ty=Tensor[(32, 3), float64] */;
    %621 = %619.1;
    (%616, %620, %621)
  };
  %622() /* ty=(Tensor[(14, 4, 3), float64], Tensor[(32, 3), float64], Tensor[(14, 4, 3), int32]) */
}

def @func_5227() -> (Tensor[(14, 4, 3), float64],) {
  @func_5225() /* ty=(Tensor[(14, 4, 3), float64],) */
}

def @func_5428() -> (Tensor[(14, 4, 3), bool],) {
  %625 = fn () -> (Tensor[(14, 4, 3), bool],) {
    %623 = @func_2351() /* ty=(Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) */;
    %624 = %623.1;
    (%624,)
  };
  %625() /* ty=(Tensor[(14, 4, 3), bool],) */
}

def @func_489(%var_488: Tensor[(9, 11, 14), float64]) -> (Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) {
  %633 = fn (%var_463: Tensor[(9, 11, 14), float64]) -> (Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) {
    %626 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 11, 14), float64] */, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
    %627 = shape_of(%var_463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%var_463, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %630 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
    %631 = not_equal(%628, %629) /* ty=Tensor[(9, 11, 14), bool] */;
    %632 = sinh(%630) /* ty=Tensor[(9, 11, 14), float64] */;
    (%631, %632)
  };
  %633(%var_488) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */
}

def @func_618() -> Tensor[(14, 4, 3), bool] {
  %634 = fn () -> Tensor[(14, 4, 3), bool] {
    @func_120() /* ty=Tensor[(14, 4, 3), bool] */
  };
  %634() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_2946() -> Tensor[(14, 4, 3), bool] {
  @func_617() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_3423(%var_3421: float64, %var_3422: Tensor[(14, 14, 13), float64]) -> Tensor[(14, 14, 13), float64] {
  @func_3419(%var_3421, %var_3422) /* ty=Tensor[(14, 14, 13), float64] */
}

def @func_5481(%var_5479: Tensor[(16, 14, 3), float64]) -> (Tensor[(16, 14, 3), float64], Tensor[(14, 4, 3), float64], Tensor[(14, 4, 3), bool], Tensor[(32), bool]) {
  @func_5478(%var_5479) /* ty=(Tensor[(16, 14, 3), float64], Tensor[(14, 4, 3), float64], Tensor[(14, 4, 3), bool], Tensor[(32), bool]) */
}

def @func_1113() -> (Tensor[(32), bool],) {
  %635 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
  %636 = %635.5;
  (%636,)
}

def @func_870(%var_847: Tensor[(455, 4), float32]) -> (Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), uint16], Tensor[(4, 2, 4), uint8], Tensor[(455, 4), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), bool]) {
  %637 = cast(meta[relay.Constant][30] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %638 = reshape(%637, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %639 = @func_285(%638) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */;
  %640 = %639.3;
  %641 = cast(%640, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %642 = reshape(%641, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %643 = @func_103(%642) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %644 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
  %645 = @func_617() /* ty=Tensor[(14, 4, 3), bool] */;
  %646 = cast(%645, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
  %647 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%644, dtype="uint16") /* ty=Tensor[(14, 4, 3), uint16] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %650 = %643.0;
  %651 = cast(%650, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %652 = reshape(%651, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %653 = @func_103(%652) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %654 = cast(meta[relay.Constant][30] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %655 = cast(%var_847, dtype="float32") /* ty=Tensor[(455, 4), float32] */;
  %656 = %653.0;
  %657 = cast(%656, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %658 = reshape(%657, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %659 = @func_103(%658) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %660 = @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */;
  %661 = %660.1;
  %662 = cast(%661, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %663 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%640, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = multiply(%648, %649) /* ty=Tensor[(14, 4, 3), uint16] */;
  %667 = mod(%654, %655) /* ty=Tensor[(455, 4), float32] */;
  %668 = %659.0;
  %669 = not_equal(%664, %665) /* ty=Tensor[(4, 2, 4), bool] */;
  (%650, %666, %656, %667, %668, %669)
}

def @func_4822() -> Tensor[(14, 4, 3), float32] {
  @func_4820() /* ty=Tensor[(14, 4, 3), float32] */
}

def @func_3561() -> (Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64]) {
  %677 = fn () -> (Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64]) {
    %670 = cast(meta[relay.Constant][31] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %671 = cast(meta[relay.Constant][31] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %672 = reshape(%670, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
    %673 = reshape(%671, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float64] */;
    %674 = @func_1353(%672, %673) /* ty=(Tensor[(10, 3, 5), float64],) */;
    %675 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
    %676 = %674.0;
    (%675, %676, meta[relay.Constant][31] /* ty=Tensor[(150), float64] */)
  };
  %677() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(10, 3, 5), float64], Tensor[(150), float64]) */
}

def @func_122() -> Tensor[(14, 4, 3), bool] {
  @func_120() /* ty=Tensor[(14, 4, 3), bool] */
}

def @func_524() -> (Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) {
  @func_522() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(455), float32]) */
}

def @func_315(%var_313: Tensor[(7, 15, 2), float64]) -> (Tensor[(7, 15, 2), float64],) {
  @func_312(%var_313) /* ty=(Tensor[(7, 15, 2), float64],) */
}

def @func_5024() -> (Tensor[(14, 4, 3), int32], Tensor[(3, 56), bool], Tensor[(455), float32], Tensor[(455), bool]) {
  @func_5022() /* ty=(Tensor[(14, 4, 3), int32], Tensor[(3, 56), bool], Tensor[(455), float32], Tensor[(455), bool]) */
}

def @func_2669() -> (Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) {
  @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */
}

def @func_3092(%var_3091: Tensor[(7, 198), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float32], Tensor[(9, 11, 14), float64], Tensor[(7, 198), float64]) {
  %686 = fn (%var_3070: Tensor[(7, 198), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), float32], Tensor[(9, 11, 14), float64], Tensor[(7, 198), float64]) {
    %678 = @func_2319() /* ty=(Tensor[(32), bool], Tensor[(1820), float32]) */;
    %679 = @func_355() /* ty=(Tensor[(7, 15, 2), float64], Tensor[(210), float64], Tensor[(14, 4, 3), float32], Tensor[(7, 5, 13), int8], Tensor[(32), bool], Tensor[(32), bool]) */;
    %680 = cast(%var_3070, dtype="float64") /* ty=Tensor[(7, 198), float64] */;
    %681 = reshape(%680, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), float64] */;
    %682 = @func_487(%681) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(9, 11, 14), float64]) */;
    %683 = %678.0;
    %684 = %679.2;
    %685 = %682.1;
    (%683, %684, %685, %var_3070)
  };
  %686(%var_3091) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float32], Tensor[(9, 11, 14), float64], Tensor[(7, 198), float64]) */
}

def @func_4416(%var_4409: Tensor[(11, 4, 3), int64], %var_4410: Tensor[(11, 4, 3), int64]) -> (Tensor[(11, 4, 3), int64],) {
  %687 = cast(%var_4410, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %688 = shape_of(%var_4409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%var_4409, dtype="int64") /* ty=Tensor[(11, 4, 3), int64] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %691 = maximum(%689, %690) /* ty=Tensor[(11, 4, 3), int64] */;
  (%691,)
}

def @func_1325(%var_1324: Tensor[(16, 9, 7), float64]) -> Tensor[(16, 9, 7), float64] {
  %693 = fn (%var_1318: Tensor[(16, 9, 7), float64]) -> Tensor[(16, 9, 7), float64] {
    %692 = cast(%var_1318, dtype="float64") /* ty=Tensor[(16, 9, 7), float64] */;
    sinh(%692) /* ty=Tensor[(16, 9, 7), float64] */
  };
  %693(%var_1324) /* ty=Tensor[(16, 9, 7), float64] */
}

def @func_4760() -> (Tensor[(14, 4, 3), float32],) {
  %698 = fn () -> (Tensor[(14, 4, 3), float32],) {
    %694 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
    %695 = %694.1;
    %696 = cast(%695, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %697 = exp(%696) /* ty=Tensor[(14, 4, 3), float32] */;
    (%697,)
  };
  %698() /* ty=(Tensor[(14, 4, 3), float32],) */
}

def @func_3489() -> (Tensor[(16, 16, 6), float64], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
  %706 = fn () -> (Tensor[(16, 16, 6), float64], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) {
    %699 = @func_3164() /* ty=(Tensor[(32), bool], Tensor[(768, 2), uint32], Tensor[(1248), uint8], Tensor[(14, 4, 3), bool], Tensor[(168), float32], Tensor[(16, 16, 6), float64]) */;
    %700 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
    %701 = @func_2351() /* ty=(Tensor[(14, ?, 15), int8], Tensor[(14, 4, 3), bool]) */;
    %702 = %699.5;
    %703 = %700.1;
    %704 = %701.1;
    %705 = @func_1160() /* ty=Tensor[(4, 2, 4), uint8] */;
    (%702, %703, %704, %705)
  };
  %706() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */
}

def @func_5845() -> (Tensor[(14, 4, 3), bool], Tensor[(768, 2), uint32]) {
  @func_5843() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(768, 2), uint32]) */
}

def @func_1357(%var_1355: Tensor[(10, 3, 5), float64], %var_1356: Tensor[(10, 3, 5), float64]) -> (Tensor[(10, 3, 5), float64],) {
  @func_1353(%var_1355, %var_1356) /* ty=(Tensor[(10, 3, 5), float64],) */
}

def @func_2219(%var_2218: Tensor[(168), bool]) -> (Tensor[(32), bool], Tensor[(32), bool], Tensor[(32), bool], Tensor[(168), bool], Tensor[(11, 12, 11), int8], Tensor[(1452), int8]) {
  %721 = fn (%var_2205: Tensor[(168), bool]) -> (Tensor[(32), bool], Tensor[(32), bool], Tensor[(32), bool], Tensor[(168), bool], Tensor[(11, 12, 11), int8], Tensor[(1452), int8]) {
    %707 = @func_1113() /* ty=(Tensor[(32), bool],) */;
    %708 = @func_1113() /* ty=(Tensor[(32), bool],) */;
    %709 = cast(%var_2205, dtype="bool") /* ty=Tensor[(168), bool] */;
    %710 = reshape(%709, newshape=[168]) /* ty=Tensor[(168), bool] */;
    %711 = @func_1312(%710) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), float64], Tensor[(168), bool], Tensor[(4, 2, 4), uint8]) */;
    %712 = cast(meta[relay.Constant][32] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %713 = cast(meta[relay.Constant][32] /* ty=Tensor[(1452), int8] */, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %714 = reshape(%712, newshape=[11, 12, 11]) /* ty=Tensor[(11, 12, 11), int8] */;
    %715 = reshape(%713, newshape=[11, 12, 11]) /* ty=Tensor[(11, 12, 11), int8] */;
    %716 = @func_2093(%714, %715) /* ty=(Tensor[(11, 12, 11), int8],) */;
    %717 = %707.0;
    %718 = %708.0;
    %719 = %711.0;
    %720 = %716.0;
    (%717, %718, %719, %var_2205, %720, meta[relay.Constant][32] /* ty=Tensor[(1452), int8] */)
  };
  %721(%var_2218) /* ty=(Tensor[(32), bool], Tensor[(32), bool], Tensor[(32), bool], Tensor[(168), bool], Tensor[(11, 12, 11), int8], Tensor[(1452), int8]) */
}

def @func_4820() -> Tensor[(14, 4, 3), float32] {
  %722 = @func_4759() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %722.0
}

def @func_4279() -> (Tensor[(14, 4, 3), float32],) {
  %723 = @func_2268() /* ty=(Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */;
  %724 = %723.2;
  (%724,)
}

def @func_5022() -> (Tensor[(14, 4, 3), int32], Tensor[(3, 56), bool], Tensor[(455), float32], Tensor[(455), bool]) {
  %725 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 56), bool] */, dtype="bool") /* ty=Tensor[(3, 56), bool] */;
  %726 = reshape(%725, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
  %727 = @func_4687(%726) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) */;
  %728 = @func_1271() /* ty=(Tensor[(455), float32], Tensor[(14, 4, 3), float32]) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(455), float64] */;
  %731 = cos(%730) /* ty=Tensor[(455), float64] */;
  %732 = cast(%729, dtype="float32") /* ty=Tensor[(455), float32] */;
  %733 = erf(%732) /* ty=Tensor[(455), float32] */;
  %734 = cast(%733, dtype="float32") /* ty=Tensor[(455), float32] */;
  %735 = shape_of(%731, dtype="int32") /* ty=Tensor[(1), int32] */;
  %736 = cast(%731, dtype="float32") /* ty=Tensor[(455), float32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?), float32] */;
  %738 = cast(%731, dtype="bool") /* ty=Tensor[(455), bool] */;
  %739 = shape_of(%733, dtype="int32") /* ty=Tensor[(1), int32] */;
  %740 = cast(%733, dtype="bool") /* ty=Tensor[(455), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?), bool] */;
  %742 = %727.1;
  %743 = mod(%736, %737) /* ty=Tensor[(455), float32] */;
  %744 = greater_equal(%740, %741) /* ty=Tensor[(455), bool] */;
  (%742, meta[relay.Constant][33] /* ty=Tensor[(3, 56), bool] */, %743, %744)
}

def @func_4593(%var_4591: Tensor[(1815), bool], %var_4592: Tensor[(14, 4, 3), float32]) -> (Tensor[(32), float32], Tensor[(15, 4, 11), float64], Tensor[(11, 15), bool], Tensor[(1815), bool], Tensor[(660), bool], Tensor[(11, 3, 2), float64], Tensor[(66), int32], Tensor[(14, 4, 3), bool]) {
  @func_4589(%var_4591, %var_4592) /* ty=(Tensor[(32), float32], Tensor[(15, 4, 11), float64], Tensor[(11, 15), bool], Tensor[(1815), bool], Tensor[(660), bool], Tensor[(11, 3, 2), float64], Tensor[(66), int32], Tensor[(14, 4, 3), bool]) */
}

def @func_5478(%var_5448: Tensor[(16, 14, 3), float64]) -> (Tensor[(16, 14, 3), float64], Tensor[(14, 4, 3), float64], Tensor[(14, 4, 3), bool], Tensor[(32), bool]) {
  %745 = cast(%var_5448, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %746 = @func_4253() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), float64]) */;
  %747 = cast(meta[relay.Constant][34] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %748 = reshape(%747, newshape=[32, 1]) /* ty=Tensor[(32, 1), bool] */;
  %749 = @func_3316(%748) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) */;
  %750 = asin(%745) /* ty=Tensor[(16, 14, 3), float64] */;
  %751 = %746.1;
  %752 = %749.1;
  (%750, %751, %752, meta[relay.Constant][34] /* ty=Tensor[(32), bool] */)
}

def @func_285(%var_255: Tensor[(7, 5, 13), float32]) -> (Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) {
  %753 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 5, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  %754 = shape_of(%var_255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_255, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %757 = cast(meta[relay.Constant][36] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %758 = reshape(%757, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), bool] */;
  %759 = @func_103(%758) /* ty=(Tensor[(4, 2, 4), uint8],) */;
  %760 = cast(meta[relay.Constant][36] /* ty=Tensor[(32), bool] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %761 = %759.0;
  %762 = cast(%761, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %763 = reshape(%762, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %764 = @func_156(%763) /* ty=(Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
  %765 = mod(%755, %756) /* ty=Tensor[(7, 5, 13), float32] */;
  %766 = asin(%760) /* ty=Tensor[(32), float64] */;
  %767 = %764.4;
  (%765, %761, %766, %767)
}

def @func_1677() -> Tensor[(14, 4, 3), float32] {
  %768 = @func_1406() /* ty=(Tensor[(14, 4, 3), float32],) */;
  %768.0
}

def @func_3621() -> (Tensor[(4, 2, 4), uint8],) {
  @func_3619() /* ty=(Tensor[(4, 2, 4), uint8],) */
}

def @func_2908() -> (Tensor[(14, 4, 3), bool], Tensor[(9, 11, 14), float64], Tensor[(624), uint8], Tensor[(32), bool], Tensor[(32), bool]) {
  %769 = @func_234() /* ty=(Tensor[(14, 4, 3), bool],) */;
  %770 = cast(meta[relay.Constant][37] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %771 = cast(meta[relay.Constant][37] /* ty=Tensor[(624), uint8] */, dtype="uint8") /* ty=Tensor[(624), uint8] */;
  %772 = cast(meta[relay.Constant][38] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %773 = reshape(%770, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %774 = reshape(%771, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), uint8] */;
  %775 = reshape(%772, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %776 = @func_1659(%773, %774, %775) /* ty=(Tensor[(3, 13, 16), uint8], Tensor[(9, 11, 14), float64], Tensor[(14, 4, 3), float32], Tensor[(455), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), bool], Tensor[(4, 2, 4), uint8], Tensor[(7, 15, 2), float64], Tensor[(1386, 1), float64]) */;
  %777 = @func_1604() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(32), bool]) */;
  %778 = %769.0;
  %779 = %776.1;
  %780 = %777.1;
  (%778, %779, meta[relay.Constant][37] /* ty=Tensor[(624), uint8] */, meta[relay.Constant][38] /* ty=Tensor[(32), bool] */, %780)
}

def @func_1407() -> (Tensor[(14, 4, 3), float32],) {
  %784 = fn () -> (Tensor[(14, 4, 3), float32],) {
    %781 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    %782 = cast(%781, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %783 = acosh(%782) /* ty=Tensor[(14, 4, 3), float32] */;
    (%783,)
  };
  %784() /* ty=(Tensor[(14, 4, 3), float32],) */
}

def @func_2321() -> (Tensor[(32), bool], Tensor[(1820), float32]) {
  @func_2319() /* ty=(Tensor[(32), bool], Tensor[(1820), float32]) */
}

def @func_1128() -> Tensor[(4, 2, 4), uint8] {
  @func_1126() /* ty=Tensor[(4, 2, 4), uint8] */
}

def @func_2093(%var_2079: Tensor[(11, 12, 11), int8], %var_2080: Tensor[(11, 12, 11), int8]) -> (Tensor[(11, 12, 11), int8],) {
  %785 = cast(%var_2080, dtype="int8") /* ty=Tensor[(11, 12, 11), int8] */;
  %786 = shape_of(%var_2079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_2079, dtype="int8") /* ty=Tensor[(11, 12, 11), int8] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %789 = bitwise_or(%787, %788) /* ty=Tensor[(11, 12, 11), int8] */;
  (%789,)
}

def @func_2601() -> Tensor[(14, 4, 3), float64] {
  %792 = fn () -> Tensor[(14, 4, 3), float64] {
    %790 = @func_1677() /* ty=Tensor[(14, 4, 3), float32] */;
    %791 = cast(%790, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
    rsqrt(%791) /* ty=Tensor[(14, 4, 3), float64] */
  };
  %792() /* ty=Tensor[(14, 4, 3), float64] */
}

def @func_3391() -> Tensor[(32, ?), bool] {
  @func_3389() /* ty=Tensor[(32, ?), bool] */
}

def @func_3678() -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), uint16]) {
  %802 = fn () -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), uint16]) {
    %793 = @func_2600() /* ty=Tensor[(14, 4, 3), float64] */;
    %794 = cast(%793, dtype="float32") /* ty=Tensor[(14, 4, 3), float32] */;
    %795 = atanh(%794) /* ty=Tensor[(14, 4, 3), float32] */;
    %796 = cast(%795, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
    %797 = cast(%795, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
    %798 = reshape(%796, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
    %799 = reshape(%797, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float64] */;
    %800 = @func_1478(%798, %799) /* ty=(Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) */;
    %801 = %800.1;
    (%795, %801)
  };
  %802() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), uint16]) */
}

def @func_5295(%var_5292: Tensor[(210), float64], %var_5293: Tensor[(455), float32], %var_5294: Tensor[(1386), float64]) -> (Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(210), float64], Tensor[(455), float32], Tensor[(1386), float64]) {
  @func_5290(%var_5292, %var_5293, %var_5294) /* ty=(Tensor[(32), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(210), float64], Tensor[(455), float32], Tensor[(1386), float64]) */
}

def @func_4281() -> (Tensor[(14, 4, 3), float32],) {
  @func_4279() /* ty=(Tensor[(14, 4, 3), float32],) */
}

def @func_1353(%var_1336: Tensor[(10, 3, 5), float64], %var_1337: Tensor[(10, 3, 5), float64]) -> (Tensor[(10, 3, 5), float64],) {
  %803 = cast(%var_1337, dtype="float64") /* ty=Tensor[(10, 3, 5), float64] */;
  %804 = shape_of(%var_1336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_1336, dtype="float64") /* ty=Tensor[(10, 3, 5), float64] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %807 = add(%805, %806) /* ty=Tensor[(10, 3, 5), float64] */;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(10, 3, 5), float64] */;
  %809 = rsqrt(%808) /* ty=Tensor[(10, 3, 5), float64] */;
  (%809,)
}

def @func_4068() -> (Tensor[(14, 4, 3), uint16], Tensor[(7, 5, 13), float64]) {
  @func_4066() /* ty=(Tensor[(14, 4, 3), uint16], Tensor[(7, 5, 13), float64]) */
}

def @func_3736(%var_3720: Tensor[(11, 3, 2), int32], %var_3721: Tensor[(11, 3, 2), int32]) -> (Tensor[(11, 3, 2), int32], Tensor[(11, 3, 2), float64], Tensor[(4, 2, 4), uint8]) {
  %810 = cast(%var_3721, dtype="int32") /* ty=Tensor[(11, 3, 2), int32] */;
  %811 = shape_of(%var_3720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%var_3720, dtype="int32") /* ty=Tensor[(11, 3, 2), int32] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %814 = cast(%var_3720, dtype="float64") /* ty=Tensor[(11, 3, 2), float64] */;
  %815 = @func_2667() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(6, 16, 13), uint8], Tensor[(1248), uint8]) */;
  %816 = subtract(%812, %813) /* ty=Tensor[(11, 3, 2), int32] */;
  %817 = log(%814) /* ty=Tensor[(11, 3, 2), float64] */;
  %818 = %815.2;
  (%816, %817, %818)
}

def @func_235() -> (Tensor[(14, 4, 3), bool],) {
  %820 = fn () -> (Tensor[(14, 4, 3), bool],) {
    %819 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    (%819,)
  };
  %820() /* ty=(Tensor[(14, 4, 3), bool],) */
}

def @func_4420(%var_4418: Tensor[(11, 4, 3), int64], %var_4419: Tensor[(11, 4, 3), int64]) -> (Tensor[(11, 4, 3), int64],) {
  @func_4416(%var_4418, %var_4419) /* ty=(Tensor[(11, 4, 3), int64],) */
}

def @func_4689(%var_4688: Tensor[(14, 4, 3), bool]) -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) {
  %830 = fn (%var_4682: Tensor[(14, 4, 3), bool]) -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) {
    %821 = @func_3488() /* ty=(Tensor[(16, 16, 6), float64], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(4, 2, 4), uint8]) */;
    %822 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %823 = %822.0;
    %824 = cast(%var_4682, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
    %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(%823, dtype="int32") /* ty=Tensor[(14, 4, 3), int32] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %828 = %821.1;
    %829 = bitwise_and(%826, %827) /* ty=Tensor[(14, 4, 3), int32] */;
    (%828, %829)
  };
  %830(%var_4688) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), int32]) */
}

def @func_2132(%var_2130: Tensor[(7, 13, 6), uint16], %var_2131: Tensor[(7, 13, 6), uint16]) -> (Tensor[(7, 13, 6), uint16], Tensor[(14, 4, 3), bool]) {
  @func_2128(%var_2130, %var_2131) /* ty=(Tensor[(7, 13, 6), uint16], Tensor[(14, 4, 3), bool]) */
}

def @main(%var_5855: Tensor[(9, 9, 10), int8]) -> Tensor[(9, 9, 10), int8] {
  %831 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 9, 10), int8] */, dtype="int8") /* ty=Tensor[(1, 9, 10), int8] */;
  %832 = cast(%var_5855, dtype="int8") /* ty=Tensor[(9, 9, 10), int8] */;
  minimum(%831, %832) /* ty=Tensor[(9, 9, 10), int8] */
}

def @func_312(%var_308: Tensor[(7, 15, 2), float64]) -> (Tensor[(7, 15, 2), float64],) {
  %833 = cast(%var_308, dtype="float64") /* ty=Tensor[(7, 15, 2), float64] */;
  %834 = exp(%833) /* ty=Tensor[(7, 15, 2), float64] */;
  (%834,)
}

def @func_1720() -> (Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) {
  @func_1718() /* ty=(Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), uint16], Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool]) */
}

def @func_2864(%var_2859: Tensor[(14, 4, 3), float32]) -> (Tensor[(14, 4, 3), bool],) {
  %835 = @func_1846() /* ty=Tensor[(14, 4, 3), float32] */;
  %836 = cast(%var_2859, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %840 = logical_and(%838, %839) /* ty=Tensor[(14, 4, 3), bool] */;
  (%840,)
}

def @func_5225() -> (Tensor[(14, 4, 3), float64],) {
  %841 = @func_2600() /* ty=Tensor[(14, 4, 3), float64] */;
  (%841,)
}

def @func_2829(%var_2827: Tensor[(16, 16, 6), uint32], %var_2828: Tensor[(16, 16, 6), uint32]) -> Tensor[(16, 16, 6), bool] {
  @func_2825(%var_2827, %var_2828) /* ty=Tensor[(16, 16, 6), bool] */
}

def @func_2270() -> (Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) {
  @func_2268() /* ty=(Tensor[(455, 4), float32], Tensor[(32), bool], Tensor[(14, 4, 3), float32]) */
}

def @func_1152() -> (Tensor[(14, 4, 3), bool],) {
  %843 = fn () -> (Tensor[(14, 4, 3), bool],) {
    %842 = @func_120() /* ty=Tensor[(14, 4, 3), bool] */;
    (%842,)
  };
  %843() /* ty=(Tensor[(14, 4, 3), bool],) */
}

def @func_288(%var_286: Tensor[(7, 5, 13), float32]) -> (Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) {
  @func_285(%var_286) /* ty=(Tensor[(7, 5, 13), float32], Tensor[(4, 2, 4), uint8], Tensor[(32), float64], Tensor[(4, 2, 4), uint8]) */
}

def @func_3740(%var_3738: Tensor[(11, 3, 2), int32], %var_3739: Tensor[(11, 3, 2), int32]) -> (Tensor[(11, 3, 2), int32], Tensor[(11, 3, 2), float64], Tensor[(4, 2, 4), uint8]) {
  @func_3736(%var_3738, %var_3739) /* ty=(Tensor[(11, 3, 2), int32], Tensor[(11, 3, 2), float64], Tensor[(4, 2, 4), uint8]) */
}

def @func_3318(%var_3317: Tensor[(32, 1), bool]) -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) {
  %860 = fn (%var_3291: Tensor[(32, 1), bool]) -> (Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) {
    %844 = @func_2422() /* ty=(Tensor[(14, 4, 3), float32], Tensor[(4, 2, 4), uint8], Tensor[(4, 2, 4), uint8], Tensor[(14, 4, 3), bool]) */;
    %845 = cast(meta[relay.Constant][40] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
    %846 = cast(%var_3291, dtype="bool") /* ty=Tensor[(32, 1), bool] */;
    %847 = reshape(%845, newshape=[1386]) /* ty=Tensor[(1386), float64] */;
    %848 = reshape(%846, newshape=[32]) /* ty=Tensor[(32), bool] */;
    %849 = @func_2183(%847, %848) /* ty=(Tensor[(455, 4), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float32], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), bool], Tensor[(32), bool], Tensor[(14, 4, 3), bool]) */;
    %850 = @func_1151() /* ty=(Tensor[(14, 4, 3), bool],) */;
    %851 = %844.0;
    %852 = cast(%851, dtype="bool") /* ty=Tensor[(14, 4, 3), bool] */;
    %853 = %849.6;
    %854 = cast(%853, dtype="float64") /* ty=Tensor[(14, 4, 3), float64] */;
    %855 = reshape(%852, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), bool] */;
    %856 = reshape(%854, newshape=[14, 4, 3]) /* ty=Tensor[(14, 4, 3), float64] */;
    %857 = @func_1478(%855, %856) /* ty=(Tensor[(14, 4, 3), int32], Tensor[(14, 4, 3), uint16]) */;
    %858 = %850.0;
    %859 = %857.0;
    (%851, %853, meta[relay.Constant][40] /* ty=Tensor[(1386), float64] */, %var_3291, %858, %859)
  };
  %860(%var_3317) /* ty=(Tensor[(14, 4, 3), float32], Tensor[(14, 4, 3), bool], Tensor[(1386), float64], Tensor[(32, 1), bool], Tensor[(14, 4, 3), bool], Tensor[(14, 4, 3), int32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen7/build/output.py:2256: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen7/build/output.py", line 2261, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(810) tvmgen_default_fused_minimum_kernel0(signed char* __restrict__ T_minimum, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_minimum[(((int)threadIdx.x))] = min(placeholder[((((int)threadIdx.x) % 90))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

