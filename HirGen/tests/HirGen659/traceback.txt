==========mod==========
#[version = "0.0.5"]
def @func_16955() -> Tensor[(13, 4, 13), int16] {
  %0 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %0.0
}

def @func_9384(%var_9358: Tensor[(945), float32], %var_9374: Tensor[(1, 539), float32], %var_9380: Tensor[(945), float32]) -> (Tensor[(5, 2, 10), float64], Tensor[(9, 5, 9), float32], Tensor[(45), uint8], Tensor[(405), uint8], Tensor[(945, ?), uint32], Tensor[(1, 539), float32], Tensor[(945), int8]) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 10), float64] */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(45), uint8] */, dtype="uint8") /* ty=Tensor[(45), uint8] */;
  %3 = cast(meta[relay.Constant][2] /* ty=Tensor[(405), uint8] */, dtype="uint8") /* ty=Tensor[(405), uint8] */;
  %4 = cast(%var_9358, dtype="float32") /* ty=Tensor[(945), float32] */;
  %5 = reshape(%2, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
  %6 = reshape(%3, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
  %7 = reshape(%4, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %8 = @func_1712(%5, %6, %7) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %9 = cast(%var_9374, dtype="float32") /* ty=Tensor[(1, 539), float32] */;
  %10 = reshape(%9, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), float32] */;
  %11 = @func_3671(%10) /* ty=(Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) */;
  %12 = cast(%var_9380, dtype="int8") /* ty=Tensor[(945), int8] */;
  %13 = shape_of(%var_9358, dtype="int32") /* ty=Tensor[(1), int32] */;
  %14 = cast(%var_9358, dtype="int8") /* ty=Tensor[(945), int8] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?), int8] */;
  %16 = cosh(%1) /* ty=Tensor[(5, 2, 10), float64] */;
  %17 = %8.0;
  %18 = %11.1;
  %19 = add(%14, %15) /* ty=Tensor[(945), int8] */;
  (%16, %17, meta[relay.Constant][1] /* ty=Tensor[(45), uint8] */, meta[relay.Constant][2] /* ty=Tensor[(405), uint8] */, %18, %var_9374, %19)
}

def @func_17056() -> (Tensor[(13, 4, 13), int16], Tensor[(16, 10, 14), float32], Tensor[(60), float64], Tensor[(900, 2), float64], Tensor[(11, 49), float32]) {
  %20 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %21 = cast(meta[relay.Constant][3] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %22 = cast(meta[relay.Constant][4] /* ty=Tensor[(900, 2), float64] */, dtype="float64") /* ty=Tensor[(900, 2), float64] */;
  %23 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 49), float32] */, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
  %24 = reshape(%21, newshape=[1, 4, 15]) /* ty=Tensor[(1, 4, 15), float64] */;
  %25 = reshape(%22, newshape=[450, 4]) /* ty=Tensor[(450, 4), float64] */;
  %26 = reshape(%23, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %27 = @func_11348(%24, %25, %26) /* ty=(Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) */;
  %28 = %20.0;
  %29 = %27.4;
  (%28, %29, meta[relay.Constant][3] /* ty=Tensor[(60), float64] */, meta[relay.Constant][4] /* ty=Tensor[(900, 2), float64] */, meta[relay.Constant][5] /* ty=Tensor[(11, 49), float32] */)
}

def @func_16975() -> (Tensor[(13, 4, 13), int16],) {
  %30 = @func_16732() /* ty=Tensor[(13, 4, 13), int16] */;
  (%30,)
}

def @func_10625(%var_10608: Tensor[(7, 12, 13), float32], %var_10621: Tensor[(7, 12, 13), float32]) -> (Tensor[(7, 12, 13), bool],) {
  %31 = cast(%var_10608, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %32 = sigmoid(%31) /* ty=Tensor[(7, 12, 13), float32] */;
  %33 = cast(%var_10621, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = equal(%35, %36) /* ty=Tensor[(7, 12, 13), bool] */;
  (%37,)
}

def @main(%var_17981: Tensor[(6, 10, 10), float64], %var_17982: Tensor[(6, 10, 10), float64], %var_18018: Tensor[(120), int8], %var_18039: Tensor[(14), int64]) -> (Tensor[(6, 10, 10), float64], Tensor[(5, 8, 3), float64], Tensor[(1232), int8], Tensor[(120), int8], Tensor[(936), int32], Tensor[(?, 2, 7), bool], Tensor[(14), int64], Tensor[(945), float32], Tensor[(6, 10, 10), int32]) {
  %38 = cast(%var_17982, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
  %39 = shape_of(%var_17981, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%var_17981, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %42 = cast(meta[relay.Constant][6] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %43 = cast(%var_18018, dtype="int8") /* ty=Tensor[(120), int8] */;
  %44 = cast(meta[relay.Constant][7] /* ty=Tensor[(936), int32] */, dtype="int32") /* ty=Tensor[(936), int32] */;
  %45 = reshape(%42, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), int8] */;
  %46 = reshape(%43, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), int8] */;
  %47 = reshape(%44, newshape=[2, 468]) /* ty=Tensor[(2, 468), int32] */;
  %48 = @func_11690(%45, %46, %47) /* ty=(Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) */;
  %49 = cast(%var_18039, dtype="int64") /* ty=Tensor[(14), int64] */;
  %50 = cast(%var_18039, dtype="int64") /* ty=Tensor[(14), int64] */;
  %51 = cast(meta[relay.Constant][8] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %52 = reshape(%49, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %53 = reshape(%50, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %54 = reshape(%51, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %55 = @func_943(%52, %53, %54) /* ty=(Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %56 = cast(%var_17981, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %57 = log(%56) /* ty=Tensor[(6, 10, 10), float32] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
  %59 = atanh(%58) /* ty=Tensor[(6, 10, 10), float64] */;
  %60 = cast(%57, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %64 = divide(%40, %41) /* ty=Tensor[(6, 10, 10), float64] */;
  %65 = %48.1;
  %66 = %55.0;
  %67 = left_shift(%62, %63) /* ty=Tensor[(6, 10, 10), int32] */;
  (%64, %65, meta[relay.Constant][6] /* ty=Tensor[(1232), int8] */, %var_18018, meta[relay.Constant][7] /* ty=Tensor[(936), int32] */, %66, %var_18039, meta[relay.Constant][8] /* ty=Tensor[(945), float32] */, %67)
}

def @func_17551() -> Tensor[(13, 4, 13), float64] {
  %68 = @func_17187() /* ty=Tensor[(13, 4, 13), float64] */;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  atan(%69) /* ty=Tensor[(13, 4, 13), float64] */
}

def @func_16674() -> (Tensor[(13, 4, 13), int16],) {
  %70 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %71 = %70.0;
  (%71,)
}

def @func_966(%var_962: Tensor[(8, 8, 16), uint16]) -> Tensor[(8, 8, 16), bool] {
  %72 = cast(%var_962, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
  %73 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(8, 8, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 8, 16), uint16] */, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%74, %75) /* ty=Tensor[(8, 8, 16), bool] */
}

def @func_11760(%var_11751: Tensor[(5, 2, 16), uint64], %var_11752: Tensor[(5, 2, 16), uint64]) -> (Tensor[(5, 2, 16), uint32],) {
  %76 = cast(%var_11752, dtype="uint64") /* ty=Tensor[(5, 2, 16), uint64] */;
  %77 = shape_of(%var_11751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_11751, dtype="uint64") /* ty=Tensor[(5, 2, 16), uint64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %80 = logical_xor(%78, %79) /* ty=Tensor[(5, 2, 16), uint64] */;
  %81 = cast(%80, dtype="uint32") /* ty=Tensor[(5, 2, 16), uint32] */;
  %82 = shape_of(%var_11751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_11751, dtype="uint32") /* ty=Tensor[(5, 2, 16), uint32] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %85 = add(%83, %84) /* ty=Tensor[(5, 2, 16), uint32] */;
  (%85,)
}

def @func_17753() -> (Tensor[(13, 4, 13), int16],) {
  %86 = @func_16975() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %87 = %86.0;
  (%87,)
}

def @func_5344(%var_5338: Tensor[(7, 7, 4), float64]) -> (Tensor[(7, 7, 4), float64],) {
  %88 = cast(%var_5338, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %89 = atan(%88) /* ty=Tensor[(7, 7, 4), float64] */;
  (%89,)
}

def @func_943(%var_917: Tensor[(1, 2, 7), int64], %var_918: Tensor[(1, 2, 7), int64], %var_941: Tensor[(945), float32]) -> (Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
  %90 = cast(%var_918, dtype="bool") /* ty=Tensor[(1, 2, 7), bool] */;
  %91 = shape_of(%var_917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_917, dtype="bool") /* ty=Tensor[(1, 2, 7), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = cast(%var_941, dtype="float32") /* ty=Tensor[(945), float32] */;
  %95 = reshape(%94, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), float32] */;
  %96 = @func_709(%95) /* ty=(Tensor[(15, 9, 7), float64],) */;
  %97 = less_equal(%92, %93) /* ty=Tensor[(?, 2, 7), bool] */;
  %98 = %96.0;
  (%97, %98, %var_941)
}

def @func_17976(%var_17939: Tensor[(7, 15, 11), float32], %var_17947: Tensor[(945), float32]) -> (Tensor[(7, 15, 11), float32], Tensor[(5, 13, 8), float32], Tensor[(520), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32], Tensor[(7, 15, 11), float32], Tensor[(13, 4, 13), float64]) {
  %99 = cast(%var_17939, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
  %100 = cast(meta[relay.Constant][10] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %101 = reshape(%100, newshape=[5, 13, 8]) /* ty=Tensor[(5, 13, 8), float32] */;
  %102 = cast(%var_17947, dtype="float32") /* ty=Tensor[(945), float32] */;
  %103 = reshape(%102, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), float32] */;
  %104 = @func_709(%103) /* ty=(Tensor[(15, 9, 7), float64],) */;
  %105 = cast(%var_17939, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %106 = atan(%105) /* ty=Tensor[(7, 15, 11), float64] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
  %108 = atanh(%99) /* ty=Tensor[(7, 15, 11), float32] */;
  %109 = @func_10521(%101) /* ty=Tensor[(5, 13, 8), float32] */;
  %110 = %104.0;
  %111 = sqrt(%107) /* ty=Tensor[(7, 15, 11), float32] */;
  %112 = @func_17187() /* ty=Tensor[(13, 4, 13), float64] */;
  (%108, %109, meta[relay.Constant][10] /* ty=Tensor[(520), float32] */, %110, %var_17947, %111, %112)
}

def @func_1712(%var_1694: Tensor[(1, 5, 9), uint8], %var_1695: Tensor[(9, 5, 9), uint8], %var_1710: Tensor[(945), float32]) -> (Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
  %113 = cast(%var_1694, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %114 = cast(%var_1695, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %115 = less_equal(%113, %114) /* ty=Tensor[(9, 5, 9), bool] */;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
  %117 = cast(%var_1710, dtype="float32") /* ty=Tensor[(945), float32] */;
  %118 = reshape(%117, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %119 = @func_1328(%118) /* ty=(Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %120 = exp(%116) /* ty=Tensor[(9, 5, 9), float32] */;
  %121 = %119.1;
  (%120, %121, %var_1710)
}

def @func_2539(%var_2486: Tensor[(7, 7, 3), float32], %var_2494: Tensor[(1024), uint16]) -> (Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) {
  %122 = cast(%var_2486, dtype="float32") /* ty=Tensor[(7, 7, 3), float32] */;
  %123 = cast(%var_2494, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %124 = reshape(%123, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %125 = sqrt(%122) /* ty=Tensor[(7, 7, 3), float32] */;
  %126 = @func_966(%124) /* ty=Tensor[(8, 8, 16), bool] */;
  (%125, %126, %var_2494)
}

def @func_4422(%var_4403: Tensor[(13, 8, 9), int32], %var_4404: Tensor[(13, 8, 9), int32]) -> (Tensor[(13, 8, 9), int32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16]) {
  %127 = cast(%var_4404, dtype="int32") /* ty=Tensor[(13, 8, 9), int32] */;
  %128 = shape_of(%var_4403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%var_4403, dtype="int32") /* ty=Tensor[(13, 8, 9), int32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %132 = cast(meta[relay.Constant][12] /* ty=Tensor[(1024), uint16] */, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %133 = reshape(%131, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %134 = reshape(%132, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %135 = @func_2539(%133, %134) /* ty=(Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %136 = right_shift(%129, %130) /* ty=Tensor[(13, 8, 9), int32] */;
  %137 = %135.1;
  (%136, %137, meta[relay.Constant][11] /* ty=Tensor[(147), float32] */, meta[relay.Constant][12] /* ty=Tensor[(1024), uint16] */)
}

def @func_12118(%var_12106: uint64, %var_12107: Tensor[(4, 10, 10), uint64]) -> Tensor[(4, 10, 10), uint64] {
  %138 = cast(%var_12106, dtype="uint64") /* ty=uint64 */;
  %139 = cast(%var_12107, dtype="uint64") /* ty=Tensor[(4, 10, 10), uint64] */;
  left_shift(%138, %139) /* ty=Tensor[(4, 10, 10), uint64] */
}

def @func_1328(%var_1314: Tensor[(945), float32]) -> (Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
  %140 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 5), float32] */;
  %141 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(7, 9, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 5), float32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %144 = cast(%var_1314, dtype="float32") /* ty=Tensor[(945), float32] */;
  %145 = reshape(%144, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), float32] */;
  %146 = @func_709(%145) /* ty=(Tensor[(15, 9, 7), float64],) */;
  %147 = floor_divide(%142, %143) /* ty=Tensor[(7, 9, 5), float32] */;
  %148 = %146.0;
  (%147, %148, %var_1314)
}

def @func_2145(%var_2113: Tensor[(14, 3, 4), float64], %var_2122: Tensor[(1024), uint16]) -> (Tensor[(14, 3, 4), bool], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(1512), uint64]) {
  %149 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 3, 4), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 4), bool] */;
  %150 = shape_of(%var_2113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_2113, dtype="bool") /* ty=Tensor[(14, 3, 4), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = cast(%var_2122, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %154 = reshape(%153, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %155 = cast(meta[relay.Constant][16] /* ty=Tensor[(1512), uint64] */, dtype="uint64") /* ty=Tensor[(1512), uint64] */;
  %156 = reshape(%155, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), uint64] */;
  %157 = @func_1436(%156) /* ty=(Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %158 = less_equal(%151, %152) /* ty=Tensor[(14, 3, 4), bool] */;
  %159 = @func_966(%154) /* ty=Tensor[(8, 8, 16), bool] */;
  %160 = %157.1;
  (%158, %159, %var_2122, %160, meta[relay.Constant][16] /* ty=Tensor[(1512), uint64] */)
}

def @func_7838(%var_7821: uint8) -> (Tensor[(3, 1, 15), uint8],) {
  %161 = cast(%var_7821, dtype="uint8") /* ty=uint8 */;
  %162 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 1, 15), uint8] */, dtype="uint8") /* ty=Tensor[(3, 1, 15), uint8] */;
  %163 = right_shift(%161, %162) /* ty=Tensor[(3, 1, 15), uint8] */;
  (%163,)
}

def @func_11154(%var_11150: Tensor[(11, 13, 9), bool]) -> Tensor[(11, 13, 9), bool] {
  %164 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 1, 9), bool] */, dtype="bool") /* ty=Tensor[(11, 1, 9), bool] */;
  %165 = cast(%var_11150, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  logical_and(%164, %165) /* ty=Tensor[(11, 13, 9), bool] */
}

def @func_9826(%var_9801: Tensor[(6, 9, 8), float64], %var_9822: Tensor[(6, 9, 8), float64]) -> (Tensor[(6, 9, 8), float64], Tensor[(6, 9, 8), float64]) {
  %166 = cast(%var_9801, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
  %167 = cast(%var_9822, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
  %168 = shape_of(%var_9801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_9801, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %171 = rsqrt(%166) /* ty=Tensor[(6, 9, 8), float64] */;
  %172 = mod(%169, %170) /* ty=Tensor[(6, 9, 8), float64] */;
  (%171, %172)
}

def @func_17713() -> (Tensor[(60), float64], Tensor[(26), float32], Tensor[(?, 13, 2), float64]) {
  %173 = @func_17056() /* ty=(Tensor[(13, 4, 13), int16], Tensor[(16, 10, 14), float32], Tensor[(60), float64], Tensor[(900, 2), float64], Tensor[(11, 49), float32]) */;
  %174 = cast(meta[relay.Constant][19] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %175 = reshape(%174, newshape=[1, 13, 2]) /* ty=Tensor[(1, 13, 2), float32] */;
  %176 = @func_1556(%175) /* ty=(Tensor[(?, 13, 2), uint32],) */;
  %177 = %176.0;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(?, 13, 2), float64] */;
  %179 = %173.2;
  %180 = acos(%178) /* ty=Tensor[(?, 13, 2), float64] */;
  (%179, meta[relay.Constant][19] /* ty=Tensor[(26), float32] */, %180)
}

def @func_17145() -> (Tensor[(13, 4, 13), float64],) {
  %181 = @func_16732() /* ty=Tensor[(13, 4, 13), int16] */;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %183 = exp(%182) /* ty=Tensor[(13, 4, 13), float64] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %185 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%181, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %188 = maximum(%186, %187) /* ty=Tensor[(13, 4, 13), float64] */;
  (%188,)
}

def @func_11738(%var_11703: uint16, %var_11704: Tensor[(6, 16, 4), uint16], %var_11718: Tensor[(11, 49), float32], %var_11723: Tensor[(1, 14), int64], %var_11724: Tensor[(945), float32]) -> (Tensor[(6, 16, 4), uint16], Tensor[(7, 11, 7), float32], Tensor[(6, 16, 4), bool], Tensor[(11, 49), int32], Tensor[(15, 9, 7), float64], Tensor[(1, 14), int64], Tensor[(945), float32], Tensor[(11, 49), bool]) {
  %189 = cast(%var_11703, dtype="uint16") /* ty=uint16 */;
  %190 = cast(%var_11704, dtype="uint16") /* ty=Tensor[(6, 16, 4), uint16] */;
  %191 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 49), float32] */, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
  %192 = reshape(%191, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), float32] */;
  %193 = @func_3671(%192) /* ty=(Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) */;
  %194 = cast(%var_11704, dtype="bool") /* ty=Tensor[(6, 16, 4), bool] */;
  %195 = cast(%var_11703, dtype="bool") /* ty=bool */;
  %196 = cast(%var_11718, dtype="int32") /* ty=Tensor[(11, 49), int32] */;
  %197 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(11, 49), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %198 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 49), float32] */, dtype="int32") /* ty=Tensor[(11, 49), int32] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %200 = cast(%var_11723, dtype="int64") /* ty=Tensor[(1, 14), int64] */;
  %201 = cast(%var_11723, dtype="int64") /* ty=Tensor[(1, 14), int64] */;
  %202 = cast(%var_11724, dtype="float32") /* ty=Tensor[(945), float32] */;
  %203 = reshape(%200, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %204 = reshape(%201, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %205 = reshape(%202, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %206 = @func_943(%203, %204, %205) /* ty=(Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %207 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 49), float32] */, dtype="bool") /* ty=Tensor[(11, 49), bool] */;
  %208 = shape_of(%var_11718, dtype="int32") /* ty=Tensor[(2), int32] */;
  %209 = cast(%var_11718, dtype="bool") /* ty=Tensor[(11, 49), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %211 = multiply(%189, %190) /* ty=Tensor[(6, 16, 4), uint16] */;
  %212 = %193.0;
  %213 = greater_equal(%194, %195) /* ty=Tensor[(6, 16, 4), bool] */;
  %214 = minimum(%198, %199) /* ty=Tensor[(11, 49), int32] */;
  %215 = %206.1;
  %216 = logical_and(%209, %210) /* ty=Tensor[(11, 49), bool] */;
  (%211, %212, %213, %214, %215, %var_11723, %var_11724, %216)
}

def @func_2815(%var_2809: Tensor[(11, 4, 3), float64]) -> Tensor[(11, 4, 3), float64] {
  %217 = cast(%var_2809, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  acos(%217) /* ty=Tensor[(11, 4, 3), float64] */
}

def @func_7789(%var_7771: Tensor[(5, 6, 8), uint16]) -> (Tensor[(5, 6, 8), bool],) {
  %218 = cast(%var_7771, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %219 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(5, 6, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 6, 8), uint16] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = greater(%220, %221) /* ty=Tensor[(5, 6, 8), bool] */;
  (%222,)
}

def @func_11690(%var_11652: Tensor[(16, 7, 11), int8], %var_11666: Tensor[(5, 8, 3), int8], %var_11680: Tensor[(2, 468), int32]) -> (Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) {
  %223 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %224 = cast(%var_11666, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %225 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %226 = cast(%var_11666, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %227 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %228 = cast(%var_11652, dtype="int8") /* ty=Tensor[(16, 7, 11), int8] */;
  %229 = bitwise_or(%227, %228) /* ty=Tensor[(16, 7, 11), int8] */;
  %230 = cast(%229, dtype="bool") /* ty=Tensor[(16, 7, 11), bool] */;
  %231 = shape_of(%var_11652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_11652, dtype="bool") /* ty=Tensor[(16, 7, 11), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = cast(%var_11680, dtype="int32") /* ty=Tensor[(2, 468), int32] */;
  %235 = cast(%var_11680, dtype="int32") /* ty=Tensor[(2, 468), int32] */;
  %236 = reshape(%234, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), int32] */;
  %237 = reshape(%235, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), int32] */;
  %238 = @func_4422(%236, %237) /* ty=(Tensor[(13, 8, 9), int32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16]) */;
  %239 = power(%223, %224) /* ty=Tensor[(5, 8, 3), float64] */;
  %240 = divide(%225, %226) /* ty=Tensor[(5, 8, 3), float64] */;
  %241 = logical_and(%232, %233) /* ty=Tensor[(16, 7, 11), bool] */;
  %242 = %238.0;
  (%239, %240, %241, %242, %var_11680)
}

def @func_12986(%var_12965: Tensor[(8, 11, 13), float32]) -> Tensor[(8, 11, 13), float32] {
  %243 = cast(%var_12965, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  acos(%243) /* ty=Tensor[(8, 11, 13), float32] */
}

def @func_17815() -> (Tensor[(13, 4, 13), int16],) {
  %244 = @func_17463() /* ty=Tensor[(13, 4, 13), int16] */;
  (%244,)
}

def @func_10422(%var_10405: Tensor[(6, 6, 9), float32], %var_10409: Tensor[(90), uint64]) -> (Tensor[(6, 6, 9), float32], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) {
  %245 = cast(%var_10405, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  %246 = cast(%var_10409, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %247 = cast(%var_10409, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %248 = reshape(%246, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %249 = reshape(%247, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %250 = log10(%245) /* ty=Tensor[(6, 6, 9), float32] */;
  %251 = @func_7449(%248, %249) /* ty=Tensor[(6, 3, 5), uint64] */;
  (%250, %251, %var_10409)
}

def @func_17379() -> (Tensor[(13, 4, 13), float64],) {
  %252 = @func_17145() /* ty=(Tensor[(13, 4, 13), float64],) */;
  %253 = %252.0;
  (%253,)
}

def @func_10521(%var_10516: Tensor[(5, 13, 8), float32]) -> Tensor[(5, 13, 8), float32] {
  %254 = cast(%var_10516, dtype="float32") /* ty=Tensor[(5, 13, 8), float32] */;
  asinh(%254) /* ty=Tensor[(5, 13, 8), float32] */
}

def @func_3982(%var_3886: Tensor[(15, 8, 1), int16], %var_3887: Tensor[(15, 8, 6), int16], %var_3916: Tensor[(140), int16], %var_3918: Tensor[(405, 1), uint8], %var_3925: Tensor[(7, 4, 5), int16]) -> (Tensor[(15, 8, 6), int16], Tensor[(140), int16], Tensor[(15, 3), uint8], Tensor[(405, 1), uint8], Tensor[(7, 4, 5), float64], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32], Tensor[(7, 4, 5), int16], Tensor[(16, 10, 14), float32]) {
  %255 = cast(%var_3886, dtype="int16") /* ty=Tensor[(15, 8, 1), int16] */;
  %256 = cast(%var_3887, dtype="int16") /* ty=Tensor[(15, 8, 6), int16] */;
  %257 = cast(%var_3916, dtype="int16") /* ty=Tensor[(140), int16] */;
  %258 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 3), uint8] */, dtype="uint8") /* ty=Tensor[(15, 3), uint8] */;
  %259 = cast(%var_3918, dtype="uint8") /* ty=Tensor[(405, 1), uint8] */;
  %260 = reshape(%257, newshape=[7, 4, 5]) /* ty=Tensor[(7, 4, 5), int16] */;
  %261 = reshape(%258, newshape=[45]) /* ty=Tensor[(45), uint8] */;
  %262 = reshape(%259, newshape=[135, 3]) /* ty=Tensor[(135, 3), uint8] */;
  %263 = @func_3730(%260, %261, %262) /* ty=(Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) */;
  %264 = %263.0;
  %265 = cast(%var_3925, dtype="float64") /* ty=Tensor[(7, 4, 5), float64] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float64") /* ty=Tensor[(7, 4, 5), float64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %269 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %270 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %271 = reshape(%269, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %272 = reshape(%270, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %273 = @func_2683(%271, %272) /* ty=(Tensor[(16, 10, 14), float32],) */;
  %274 = cast(%264, dtype="int16") /* ty=Tensor[(7, 4, 5), int16] */;
  %275 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 3), uint8] */, dtype="uint8") /* ty=Tensor[(15, 3), uint8] */;
  %276 = cast(%var_3918, dtype="uint8") /* ty=Tensor[(405, 1), uint8] */;
  %277 = reshape(%274, newshape=[7, 4, 5]) /* ty=Tensor[(7, 4, 5), int16] */;
  %278 = reshape(%275, newshape=[45]) /* ty=Tensor[(45), uint8] */;
  %279 = reshape(%276, newshape=[135, 3]) /* ty=Tensor[(135, 3), uint8] */;
  %280 = @func_3730(%277, %278, %279) /* ty=(Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) */;
  %281 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %282 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %283 = reshape(%281, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %284 = reshape(%282, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %285 = @func_2683(%283, %284) /* ty=(Tensor[(16, 10, 14), float32],) */;
  %286 = bitwise_xor(%255, %256) /* ty=Tensor[(15, 8, 6), int16] */;
  %287 = add(%267, %268) /* ty=Tensor[(7, 4, 5), float64] */;
  %288 = %273.0;
  %289 = %280.0;
  %290 = %285.0;
  (%286, %var_3916, meta[relay.Constant][23] /* ty=Tensor[(15, 3), uint8] */, %var_3918, %287, %288, meta[relay.Constant][24] /* ty=Tensor[(14, 160), float32] */, %289, %290)
}

def @func_16732() -> Tensor[(13, 4, 13), int16] {
  %291 = @func_16674() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %291.0
}

def @func_3730(%var_3707: Tensor[(7, 4, 5), int16], %var_3714: Tensor[(45), uint8], %var_3715: Tensor[(135, 3), uint8]) -> (Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) {
  %292 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 4, 5), int16] */, dtype="int16") /* ty=Tensor[(7, 4, 5), int16] */;
  %293 = shape_of(%var_3707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%var_3707, dtype="int16") /* ty=Tensor[(7, 4, 5), int16] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %296 = cast(%var_3714, dtype="uint8") /* ty=Tensor[(45), uint8] */;
  %297 = cast(%var_3715, dtype="uint8") /* ty=Tensor[(135, 3), uint8] */;
  %298 = cast(meta[relay.Constant][26] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %299 = reshape(%296, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
  %300 = reshape(%297, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
  %301 = reshape(%298, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %302 = @func_1712(%299, %300, %301) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %303 = right_shift(%294, %295) /* ty=Tensor[(7, 4, 5), int16] */;
  %304 = %302.1;
  (%303, %304, %var_3714, %var_3715, meta[relay.Constant][26] /* ty=Tensor[(945), float32] */)
}

def @func_14533(%var_14504: Tensor[(405, 1), uint8], %var_14522: Tensor[(165), float64]) -> (Tensor[(6, 3, 5), uint64], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(1, 945), float32], Tensor[(12, 10, 12), bool], Tensor[(15, 1, 11), float64], Tensor[(405, 90), bool], Tensor[(405, 165), int16]) {
  %305 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %306 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %307 = reshape(%305, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %308 = reshape(%306, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %309 = cast(meta[relay.Constant][28] /* ty=Tensor[(45), uint8] */, dtype="uint8") /* ty=Tensor[(45), uint8] */;
  %310 = cast(%var_14504, dtype="uint8") /* ty=Tensor[(405, 1), uint8] */;
  %311 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 945), float32] */, dtype="float32") /* ty=Tensor[(1, 945), float32] */;
  %312 = reshape(%309, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
  %313 = reshape(%310, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
  %314 = reshape(%311, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %315 = @func_1712(%312, %313, %314) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %316 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 12), float64] */;
  %317 = cos(%316) /* ty=Tensor[(12, 10, 12), float64] */;
  %318 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 10, 12), float64] */, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = cast(%var_14522, dtype="float64") /* ty=Tensor[(165), float64] */;
  %323 = reshape(%322, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), float64] */;
  %324 = @func_4517(%323) /* ty=(Tensor[(15, 1, 11), float64], Tensor[(15, 1, 11), float64]) */;
  %325 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), uint64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %326 = cast(%var_14504, dtype="bool") /* ty=Tensor[(405, 1), bool] */;
  %327 = cast(%var_14522, dtype="int16") /* ty=Tensor[(165), int16] */;
  %328 = cast(%var_14504, dtype="int16") /* ty=Tensor[(405, 1), int16] */;
  %329 = @func_7449(%307, %308) /* ty=Tensor[(6, 3, 5), uint64] */;
  %330 = %315.1;
  %331 = less_equal(%320, %321) /* ty=Tensor[(12, 10, 12), bool] */;
  %332 = %324.1;
  %333 = logical_or(%325, %326) /* ty=Tensor[(405, 90), bool] */;
  %334 = subtract(%327, %328) /* ty=Tensor[(405, 165), int16] */;
  (%329, %330, meta[relay.Constant][28] /* ty=Tensor[(45), uint8] */, meta[relay.Constant][29] /* ty=Tensor[(1, 945), float32] */, %331, %332, %333, %334)
}

def @func_7449(%var_7444: Tensor[(6, 3, 5), uint64], %var_7445: Tensor[(6, 3, 5), uint64]) -> Tensor[(6, 3, 5), uint64] {
  %335 = cast(%var_7445, dtype="uint64") /* ty=Tensor[(6, 3, 5), uint64] */;
  %336 = shape_of(%var_7444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%var_7444, dtype="uint64") /* ty=Tensor[(6, 3, 5), uint64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%337, %338) /* ty=Tensor[(6, 3, 5), uint64] */
}

def @func_1556(%var_1531: Tensor[(1, 13, 2), float32]) -> (Tensor[(?, 13, 2), uint32],) {
  %339 = cast(%var_1531, dtype="float32") /* ty=Tensor[(1, 13, 2), float32] */;
  %340 = asin(%339) /* ty=Tensor[(1, 13, 2), float32] */;
  %341 = cast(%340, dtype="int8") /* ty=Tensor[(1, 13, 2), int8] */;
  %342 = shape_of(%var_1531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_1531, dtype="int8") /* ty=Tensor[(1, 13, 2), int8] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %345 = bitwise_or(%343, %344) /* ty=Tensor[(?, 13, 2), int8] */;
  %346 = cast(%345, dtype="uint32") /* ty=Tensor[(?, 13, 2), uint32] */;
  %347 = shape_of(%var_1531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_1531, dtype="uint32") /* ty=Tensor[(1, 13, 2), uint32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %350 = maximum(%348, %349) /* ty=Tensor[(?, 13, 2), uint32] */;
  (%350,)
}

def @func_17441(%var_17436: Tensor[(945), float32], %var_17437: Tensor[(539), float32]) -> (Tensor[(13, 4, 13), float32], Tensor[(945), int8], Tensor[(945), float32], Tensor[(539), float32]) {
  %351 = @func_17145() /* ty=(Tensor[(13, 4, 13), float64],) */;
  %352 = %351.0;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(13, 4, 13), float32] */;
  %354 = cast(%var_17436, dtype="float32") /* ty=Tensor[(945), float32] */;
  %355 = cast(%var_17437, dtype="float32") /* ty=Tensor[(539), float32] */;
  %356 = cast(%var_17436, dtype="float32") /* ty=Tensor[(945), float32] */;
  %357 = reshape(%354, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %358 = reshape(%355, newshape=[1, 539]) /* ty=Tensor[(1, 539), float32] */;
  %359 = reshape(%356, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %360 = @func_9384(%357, %358, %359) /* ty=(Tensor[(5, 2, 10), float64], Tensor[(9, 5, 9), float32], Tensor[(45), uint8], Tensor[(405), uint8], Tensor[(945, ?), uint32], Tensor[(1, 539), float32], Tensor[(945), int8]) */;
  %361 = sin(%353) /* ty=Tensor[(13, 4, 13), float32] */;
  %362 = %360.6;
  (%361, %362, %var_17436, %var_17437)
}

def @func_2683(%var_2676: Tensor[(16, 10, 14), float32], %var_2677: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  %363 = cast(%var_2677, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %364 = shape_of(%var_2676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%var_2676, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %367 = floor_mod(%365, %366) /* ty=Tensor[(16, 10, 14), float32] */;
  (%367,)
}

def @func_17633(%var_17625: Tensor[(945), float32]) -> (Tensor[(13, 4, 13), float64], Tensor[(945), float64], Tensor[(112), float64], Tensor[(48), int32], Tensor[(4, 256), uint16], Tensor[(945), uint16]) {
  %368 = cast(meta[relay.Constant][31] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %369 = reshape(%368, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %370 = @func_1328(%369) /* ty=(Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %371 = %370.2;
  %372 = cast(meta[relay.Constant][31] /* ty=Tensor[(945), float32] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(1), int32] */;
  %374 = cast(%371, dtype="float64") /* ty=Tensor[(945), float64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?), float64] */;
  %376 = cast(meta[relay.Constant][32] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %377 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 256), uint16] */, dtype="uint16") /* ty=Tensor[(4, 256), uint16] */;
  %378 = cast(%371, dtype="float32") /* ty=Tensor[(945), float32] */;
  %379 = reshape(%376, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), int32] */;
  %380 = reshape(%377, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %381 = reshape(%378, newshape=[1, 945]) /* ty=Tensor[(1, 945), float32] */;
  %382 = @func_13911(%379, %380, %381) /* ty=(Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) */;
  %383 = cast(%var_17625, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %384 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(945), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %385 = cast(meta[relay.Constant][31] /* ty=Tensor[(945), float32] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %387 = @func_17551() /* ty=Tensor[(13, 4, 13), float64] */;
  %388 = divide(%374, %375) /* ty=Tensor[(945), float64] */;
  %389 = %382.1;
  %390 = logical_xor(%385, %386) /* ty=Tensor[(945), uint16] */;
  (%387, %388, %389, meta[relay.Constant][32] /* ty=Tensor[(48), int32] */, meta[relay.Constant][33] /* ty=Tensor[(4, 256), uint16] */, %390)
}

def @func_13939(%var_13933: bool, %var_13934: Tensor[(8, 15, 15), bool]) -> (Tensor[(8, 15, 15), bool],) {
  %391 = cast(%var_13933, dtype="bool") /* ty=bool */;
  %392 = cast(%var_13934, dtype="bool") /* ty=Tensor[(8, 15, 15), bool] */;
  %393 = logical_or(%391, %392) /* ty=Tensor[(8, 15, 15), bool] */;
  (%393,)
}

def @func_709(%var_617: Tensor[(15, 9, 7), float32]) -> (Tensor[(15, 9, 7), float64],) {
  %394 = cast(%var_617, dtype="float32") /* ty=Tensor[(15, 9, 7), float32] */;
  %395 = tan(%394) /* ty=Tensor[(15, 9, 7), float32] */;
  %396 = cast(%395, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %397 = shape_of(%var_617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_617, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = less(%398, %399) /* ty=Tensor[(15, 9, 7), bool] */;
  %401 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 9, 7), bool] */, dtype="float64") /* ty=Tensor[(15, 9, 7), float64] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="float64") /* ty=Tensor[(15, 9, 7), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %405 = divide(%403, %404) /* ty=Tensor[(15, 9, 7), float64] */;
  (%405,)
}

def @func_7623(%var_7595: Tensor[(10, 12, 15), float64], %var_7602: Tensor[(539), float32]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 11, 7), float32], Tensor[(539), float32]) {
  %406 = cast(%var_7595, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %407 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(10, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %410 = cast(%var_7602, dtype="float32") /* ty=Tensor[(539), float32] */;
  %411 = reshape(%410, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), float32] */;
  %412 = @func_3671(%411) /* ty=(Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) */;
  %413 = multiply(%408, %409) /* ty=Tensor[(10, 12, 15), float64] */;
  %414 = %412.0;
  (%413, %414, %var_7602)
}

def @func_9681(%var_9649: Tensor[(13, 10, 9), uint16], %var_9650: Tensor[(13, 10, 9), uint16]) -> (Tensor[(13, 10, 9), bool], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) {
  %415 = cast(%var_9650, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %416 = shape_of(%var_9649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%var_9649, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = cast(meta[relay.Constant][36] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %420 = cast(meta[relay.Constant][36] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %421 = reshape(%419, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %422 = reshape(%420, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %423 = not_equal(%417, %418) /* ty=Tensor[(13, 10, 9), bool] */;
  %424 = @func_7449(%421, %422) /* ty=Tensor[(6, 3, 5), uint64] */;
  (%423, %424, meta[relay.Constant][36] /* ty=Tensor[(90), uint64] */)
}

def @func_12349(%var_12336: Tensor[(10, 3, 16), uint64], %var_12337: Tensor[(10, 3, 16), uint64]) -> Tensor[(10, 3, 16), bool] {
  %425 = cast(%var_12337, dtype="bool") /* ty=Tensor[(10, 3, 16), bool] */;
  %426 = shape_of(%var_12336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_12336, dtype="bool") /* ty=Tensor[(10, 3, 16), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%427, %428) /* ty=Tensor[(10, 3, 16), bool] */
}

def @func_13298(%var_13293: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, ?), float64],) {
  %429 = cast(%var_13293, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %430 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(10, 8, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %433 = floor_divide(%431, %432) /* ty=Tensor[(10, 8, ?), float64] */;
  (%433,)
}

def @func_17913(%var_17876: Tensor[(936), int32], %var_17884: Tensor[(1800), float64], %var_17885: Tensor[(11, 49), float32], %var_17907: Tensor[(168), float64], %var_17908: Tensor[(1024), uint16]) -> (Tensor[(13, 4, 13), int16], Tensor[(16, 7, 11), bool], Tensor[(1232), int8], Tensor[(120), int8], Tensor[(936), int32], Tensor[(60), float64], Tensor[(1800), float64], Tensor[(539), int64], Tensor[(450, 4), float64], Tensor[(8, 8, 16), bool], Tensor[(168), float64], Tensor[(1024), uint16]) {
  %434 = cast(meta[relay.Constant][38] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %435 = cast(meta[relay.Constant][39] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %436 = cast(%var_17876, dtype="int32") /* ty=Tensor[(936), int32] */;
  %437 = reshape(%434, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), int8] */;
  %438 = reshape(%435, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), int8] */;
  %439 = reshape(%436, newshape=[2, 468]) /* ty=Tensor[(2, 468), int32] */;
  %440 = @func_11690(%437, %438, %439) /* ty=(Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) */;
  %441 = cast(meta[relay.Constant][40] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %442 = cast(%var_17884, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %443 = cast(%var_17885, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
  %444 = reshape(%441, newshape=[1, 4, 15]) /* ty=Tensor[(1, 4, 15), float64] */;
  %445 = reshape(%442, newshape=[450, 4]) /* ty=Tensor[(450, 4), float64] */;
  %446 = reshape(%443, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %447 = @func_11348(%444, %445, %446) /* ty=(Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) */;
  %448 = %447.1;
  %449 = cast(%var_17885, dtype="int64") /* ty=Tensor[(11, 49), int64] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(1), int32] */;
  %451 = cast(%448, dtype="int64") /* ty=Tensor[(539), int64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?), int64] */;
  %453 = cast(meta[relay.Constant][40] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %454 = cast(%var_17884, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %455 = cast(%448, dtype="float32") /* ty=Tensor[(539), float32] */;
  %456 = reshape(%453, newshape=[1, 4, 15]) /* ty=Tensor[(1, 4, 15), float64] */;
  %457 = reshape(%454, newshape=[450, 4]) /* ty=Tensor[(450, 4), float64] */;
  %458 = reshape(%455, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %459 = @func_11348(%456, %457, %458) /* ty=(Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) */;
  %460 = cast(%var_17907, dtype="float64") /* ty=Tensor[(168), float64] */;
  %461 = cast(%var_17908, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %462 = reshape(%460, newshape=[14, 3, 4]) /* ty=Tensor[(14, 3, 4), float64] */;
  %463 = reshape(%461, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %464 = @func_2145(%462, %463) /* ty=(Tensor[(14, 3, 4), bool], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(1512), uint64]) */;
  %465 = @func_17463() /* ty=Tensor[(13, 4, 13), int16] */;
  %466 = %440.2;
  %467 = bitwise_and(%451, %452) /* ty=Tensor[(539), int64] */;
  %468 = %459.2;
  %469 = %464.3;
  (%465, %466, meta[relay.Constant][38] /* ty=Tensor[(1232), int8] */, meta[relay.Constant][39] /* ty=Tensor[(120), int8] */, %var_17876, meta[relay.Constant][40] /* ty=Tensor[(60), float64] */, %var_17884, %467, %468, %469, %var_17907, %var_17908)
}

def @func_17463() -> Tensor[(13, 4, 13), int16] {
  %470 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %470.0
}

def @func_11348(%var_11331: Tensor[(1, 4, 15), float64], %var_11341: Tensor[(450, 4), float64], %var_11342: Tensor[(539), float32]) -> (Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) {
  %471 = cast(%var_11331, dtype="float64") /* ty=Tensor[(1, 4, 15), float64] */;
  %472 = exp(%471) /* ty=Tensor[(1, 4, 15), float64] */;
  %473 = cast(%472, dtype="uint64") /* ty=Tensor[(1, 4, 15), uint64] */;
  %474 = shape_of(%var_11331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%var_11331, dtype="uint64") /* ty=Tensor[(1, 4, 15), uint64] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %477 = cast(%var_11341, dtype="float64") /* ty=Tensor[(450, 4), float64] */;
  %478 = cast(%var_11342, dtype="float32") /* ty=Tensor[(539), float32] */;
  %479 = reshape(%477, newshape=[10, 12, 15]) /* ty=Tensor[(10, 12, 15), float64] */;
  %480 = reshape(%478, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %481 = @func_7623(%479, %480) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(7, 11, 7), float32], Tensor[(539), float32]) */;
  %482 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %483 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %484 = reshape(%482, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %485 = reshape(%483, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %486 = @func_2683(%484, %485) /* ty=(Tensor[(16, 10, 14), float32],) */;
  %487 = subtract(%475, %476) /* ty=Tensor[(?, 4, 15), uint64] */;
  %488 = %481.2;
  %489 = %486.0;
  (%487, %488, %var_11341, %var_11342, %489, meta[relay.Constant][41] /* ty=Tensor[(14, 160), float32] */)
}

def @func_8804(%var_8799: Tensor[(16, 14, 5), float32], %var_8800: Tensor[(16, 14, 5), float32]) -> (Tensor[(16, 14, 5), float32],) {
  %490 = cast(%var_8800, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
  %491 = shape_of(%var_8799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_8799, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %494 = mod(%492, %493) /* ty=Tensor[(16, 14, 5), float32] */;
  (%494,)
}

def @func_7934(%var_7868: Tensor[(14, 2, 4), float64], %var_7885: Tensor[(1024), uint16]) -> (Tensor[(14, 2, 4), float32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(3, 1, 15), uint8], uint8, Tensor[(8, 8, 16), bool]) {
  %495 = cast(%var_7868, dtype="float64") /* ty=Tensor[(14, 2, 4), float64] */;
  %496 = cos(%495) /* ty=Tensor[(14, 2, 4), float64] */;
  %497 = cast(%var_7868, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %501 = cast(meta[relay.Constant][42] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %502 = cast(%var_7885, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %503 = reshape(%501, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %504 = reshape(%502, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %505 = @func_2539(%503, %504) /* ty=(Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %506 = %505.1;
  %507 = cast(%506, dtype="uint16") /* ty=Tensor[(8, 8, 16), uint16] */;
  %508 = reshape(%507, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %509 = cast(meta[relay.Constant][43] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %510 = reshape(%509, newshape=[]) /* ty=uint8 */;
  %511 = @func_7838(%510) /* ty=(Tensor[(3, 1, 15), uint8],) */;
  %512 = cast(meta[relay.Constant][42] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %513 = cast(%var_7885, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %514 = reshape(%512, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %515 = reshape(%513, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %516 = @func_2539(%514, %515) /* ty=(Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %517 = floor_mod(%499, %500) /* ty=Tensor[(14, 2, 4), float32] */;
  %518 = @func_966(%508) /* ty=Tensor[(8, 8, 16), bool] */;
  %519 = %511.0;
  %520 = %516.1;
  (%517, %506, meta[relay.Constant][42] /* ty=Tensor[(147), float32] */, %var_7885, %518, %519, meta[relay.Constant][43] /* ty=uint8 */, %520)
}

def @func_3303(%var_3266: Tensor[(15, 5, 2), uint64]) -> (Tensor[(15, 5, 2), bool],) {
  %521 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 1, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 1, 2), uint64] */;
  %522 = cast(%var_3266, dtype="uint64") /* ty=Tensor[(15, 5, 2), uint64] */;
  %523 = bitwise_and(%521, %522) /* ty=Tensor[(15, 5, 2), uint64] */;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(15, 5, 2), float32] */;
  %525 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 1, 2), uint64] */, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %526 = power(%524, %525) /* ty=Tensor[(15, 5, 2), float32] */;
  %527 = cast(%523, dtype="bool") /* ty=Tensor[(15, 5, 2), bool] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%526, dtype="bool") /* ty=Tensor[(15, 5, 2), bool] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %531 = equal(%529, %530) /* ty=Tensor[(15, 5, 2), bool] */;
  (%531,)
}

def @func_16653() -> (Tensor[(13, 4, 13), int16],) {
  %532 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %533 = log10(%532) /* ty=Tensor[(13, 4, 13), float64] */;
  %534 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 4, 13), float64] */, dtype="int16") /* ty=Tensor[(13, 4, 13), int16] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="int16") /* ty=Tensor[(13, 4, 13), int16] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %538 = logical_xor(%536, %537) /* ty=Tensor[(13, 4, 13), int16] */;
  (%538,)
}

def @func_15690(%var_15672: Tensor[(14, 11, 4), int8], %var_15678: Tensor[(160), uint64]) -> (Tensor[(14, 11, 4), int8], Tensor[(5, 2, 16), uint32], Tensor[(160), uint64]) {
  %539 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 11, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 11, 4), int8] */;
  %540 = shape_of(%var_15672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_15672, dtype="int8") /* ty=Tensor[(14, 11, 4), int8] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %543 = cast(%var_15678, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %544 = cast(%var_15678, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %545 = reshape(%543, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint64] */;
  %546 = reshape(%544, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint64] */;
  %547 = @func_11760(%545, %546) /* ty=(Tensor[(5, 2, 16), uint32],) */;
  %548 = logical_xor(%541, %542) /* ty=Tensor[(14, 11, 4), int8] */;
  %549 = %547.0;
  (%548, %549, %var_15678)
}

def @func_14876(%var_14799: Tensor[(1, 6, 7), uint32], %var_14800: Tensor[(3, 6, 7), uint32], %var_14811: Tensor[(48), int32], %var_14812: Tensor[(2, 512), uint16], %var_14821: Tensor[(1144), float32], %var_14839: Tensor[(896), float64], %var_14860: uint64, %var_14873: Tensor[(405), uint8]) -> (Tensor[(1024), uint16], Tensor[(48), int32], Tensor[(2, 512), uint16], Tensor[(945), float32], Tensor[(8, 11, 13), float32], Tensor[(1144), float32], Tensor[(14, 4, 16), float64], Tensor[(896), float64], Tensor[(4, 10, 10), uint64], Tensor[(8, 50), uint64], Tensor[(3, 6, 7), bool], Tensor[(945), float32], Tensor[(45, 1), uint8], Tensor[(405), uint8]) {
  %550 = cast(%var_14811, dtype="int32") /* ty=Tensor[(48), int32] */;
  %551 = cast(%var_14812, dtype="uint16") /* ty=Tensor[(2, 512), uint16] */;
  %552 = cast(meta[relay.Constant][47] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %553 = reshape(%550, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), int32] */;
  %554 = reshape(%551, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %555 = reshape(%552, newshape=[1, 945]) /* ty=Tensor[(1, 945), float32] */;
  %556 = @func_13911(%553, %554, %555) /* ty=(Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) */;
  %557 = cast(%var_14821, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %558 = reshape(%557, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float32] */;
  %559 = cast(%var_14839, dtype="float64") /* ty=Tensor[(896), float64] */;
  %560 = reshape(%559, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %561 = @func_14049(%560) /* ty=(Tensor[(14, 4, 16), float64],) */;
  %562 = cast(%var_14860, dtype="uint64") /* ty=uint64 */;
  %563 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 50), uint64] */, dtype="uint64") /* ty=Tensor[(8, 50), uint64] */;
  %564 = reshape(%562, newshape=[]) /* ty=uint64 */;
  %565 = reshape(%563, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), uint64] */;
  %566 = cast(%var_14799, dtype="uint32") /* ty=Tensor[(1, 6, 7), uint32] */;
  %567 = cast(%var_14800, dtype="uint32") /* ty=Tensor[(3, 6, 7), uint32] */;
  %568 = bitwise_or(%566, %567) /* ty=Tensor[(3, 6, 7), uint32] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
  %570 = log2(%569) /* ty=Tensor[(3, 6, 7), float32] */;
  %571 = cast(%570, dtype="bool") /* ty=Tensor[(3, 6, 7), bool] */;
  %572 = cast(%var_14860, dtype="bool") /* ty=bool */;
  %573 = cast(meta[relay.Constant][49] /* ty=Tensor[(45, 1), uint8] */, dtype="uint8") /* ty=Tensor[(45, 1), uint8] */;
  %574 = cast(%var_14873, dtype="uint8") /* ty=Tensor[(405), uint8] */;
  %575 = cast(meta[relay.Constant][47] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %576 = reshape(%573, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
  %577 = reshape(%574, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
  %578 = reshape(%575, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %579 = @func_1712(%576, %577, %578) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %580 = %556.2;
  %581 = @func_12986(%558) /* ty=Tensor[(8, 11, 13), float32] */;
  %582 = %561.0;
  %583 = @func_12118(%564, %565) /* ty=Tensor[(4, 10, 10), uint64] */;
  %584 = less_equal(%571, %572) /* ty=Tensor[(3, 6, 7), bool] */;
  %585 = %579.2;
  (%580, %var_14811, %var_14812, meta[relay.Constant][47] /* ty=Tensor[(945), float32] */, %581, %var_14821, %582, %var_14839, %583, meta[relay.Constant][48] /* ty=Tensor[(8, 50), uint64] */, %584, %585, meta[relay.Constant][49] /* ty=Tensor[(45, 1), uint8] */, %var_14873)
}

def @func_15924(%var_15921: Tensor[(1, 14, 3), float64]) -> Tensor[(1, 14, 3), float64] {
  %586 = cast(%var_15921, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
  log2(%586) /* ty=Tensor[(1, 14, 3), float64] */
}

def @func_15543(%var_15492: Tensor[(16, 14, 6), float32], %var_15530: Tensor[(6, 64), uint16], %var_15533: Tensor[(945), float32]) -> (Tensor[(16, 14, 6), float64], Tensor[(16, 14, 6), float32], Tensor[(3, 1, 15), uint8], uint8, Tensor[(6, 16, 4), bool], Tensor[(6, 64), uint16], Tensor[(539), float32], Tensor[(14), int64], Tensor[(945), float32]) {
  %587 = cast(%var_15492, dtype="float32") /* ty=Tensor[(16, 14, 6), float32] */;
  %588 = cos(%587) /* ty=Tensor[(16, 14, 6), float32] */;
  %589 = cast(%var_15492, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %593 = cast(%588, dtype="float32") /* ty=Tensor[(16, 14, 6), float32] */;
  %594 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %595 = reshape(%594, newshape=[]) /* ty=uint8 */;
  %596 = @func_7838(%595) /* ty=(Tensor[(3, 1, 15), uint8],) */;
  %597 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint16") /* ty=uint16 */;
  %598 = cast(%var_15530, dtype="uint16") /* ty=Tensor[(6, 64), uint16] */;
  %599 = cast(meta[relay.Constant][51] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %600 = cast(meta[relay.Constant][52] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %601 = cast(%var_15533, dtype="float32") /* ty=Tensor[(945), float32] */;
  %602 = reshape(%597, newshape=[]) /* ty=uint16 */;
  %603 = reshape(%598, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), uint16] */;
  %604 = reshape(%599, newshape=[11, 49]) /* ty=Tensor[(11, 49), float32] */;
  %605 = reshape(%600, newshape=[1, 14]) /* ty=Tensor[(1, 14), int64] */;
  %606 = reshape(%601, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %607 = @func_11738(%602, %603, %604, %605, %606) /* ty=(Tensor[(6, 16, 4), uint16], Tensor[(7, 11, 7), float32], Tensor[(6, 16, 4), bool], Tensor[(11, 49), int32], Tensor[(15, 9, 7), float64], Tensor[(1, 14), int64], Tensor[(945), float32], Tensor[(11, 49), bool]) */;
  %608 = floor_mod(%591, %592) /* ty=Tensor[(16, 14, 6), float64] */;
  %609 = asinh(%593) /* ty=Tensor[(16, 14, 6), float32] */;
  %610 = %596.0;
  %611 = %607.2;
  (%608, %609, %610, meta[relay.Constant][50] /* ty=uint8 */, %611, %var_15530, meta[relay.Constant][51] /* ty=Tensor[(539), float32] */, meta[relay.Constant][52] /* ty=Tensor[(14), int64] */, %var_15533)
}

def @func_1436(%var_1414: Tensor[(12, 14, 9), uint64]) -> (Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) {
  %612 = cast(%var_1414, dtype="uint64") /* ty=Tensor[(12, 14, 9), uint64] */;
  %613 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(12, 14, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 14, 9), uint64] */, dtype="uint64") /* ty=Tensor[(12, 14, 9), uint64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %616 = cast(meta[relay.Constant][54] /* ty=Tensor[(1024), uint16] */, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %617 = reshape(%616, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %618 = bitwise_or(%614, %615) /* ty=Tensor[(12, 14, 9), uint64] */;
  %619 = @func_966(%617) /* ty=Tensor[(8, 8, 16), bool] */;
  (%618, %619, meta[relay.Constant][54] /* ty=Tensor[(1024), uint16] */)
}

def @func_12214(%var_12206: int32, %var_12207: Tensor[(1, 5, 1), int32]) -> Tensor[(1, 5, 1), int32] {
  %620 = cast(%var_12206, dtype="int32") /* ty=int32 */;
  %621 = cast(%var_12207, dtype="int32") /* ty=Tensor[(1, 5, 1), int32] */;
  minimum(%620, %621) /* ty=Tensor[(1, 5, 1), int32] */
}

def @func_14049(%var_14032: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float64],) {
  %622 = cast(%var_14032, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %623 = sinh(%622) /* ty=Tensor[(14, 4, 16), float64] */;
  (%623,)
}

def @func_4067(%var_4037: Tensor[(16, 15, 5), int32], %var_4038: Tensor[(16, 15, 5), int32], %var_4060: Tensor[(1024), uint16], %var_4064: Tensor[(135, 3), uint8], %var_4065: Tensor[(945), float32]) -> (Tensor[(16, 15, 5), int32], Tensor[(12, 14, 9), uint64], Tensor[(1512, 1), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) {
  %624 = cast(%var_4038, dtype="int32") /* ty=Tensor[(16, 15, 5), int32] */;
  %625 = shape_of(%var_4037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_4037, dtype="int32") /* ty=Tensor[(16, 15, 5), int32] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %628 = cast(meta[relay.Constant][55] /* ty=Tensor[(1512, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1512, 1), uint64] */;
  %629 = reshape(%628, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), uint64] */;
  %630 = @func_1436(%629) /* ty=(Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %631 = cast(%var_4060, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %632 = reshape(%631, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %633 = cast(meta[relay.Constant][56] /* ty=Tensor[(45), uint8] */, dtype="uint8") /* ty=Tensor[(45), uint8] */;
  %634 = cast(%var_4064, dtype="uint8") /* ty=Tensor[(135, 3), uint8] */;
  %635 = cast(%var_4065, dtype="float32") /* ty=Tensor[(945), float32] */;
  %636 = reshape(%633, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
  %637 = reshape(%634, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
  %638 = reshape(%635, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %639 = @func_1712(%636, %637, %638) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %640 = add(%626, %627) /* ty=Tensor[(16, 15, 5), int32] */;
  %641 = %630.0;
  %642 = @func_966(%632) /* ty=Tensor[(8, 8, 16), bool] */;
  %643 = %639.1;
  (%640, %641, meta[relay.Constant][55] /* ty=Tensor[(1512, 1), uint64] */, %642, %var_4060, %643, meta[relay.Constant][56] /* ty=Tensor[(45), uint8] */, %var_4064, %var_4065)
}

def @func_4517(%var_4495: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 1, 11), float64], Tensor[(15, 1, 11), float64]) {
  %644 = cast(%var_4495, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %645 = cast(%var_4495, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %646 = log2(%644) /* ty=Tensor[(15, 1, 11), float64] */;
  %647 = cos(%645) /* ty=Tensor[(15, 1, 11), float64] */;
  (%646, %647)
}

def @func_13911(%var_13856: Tensor[(1, 12, 4), int32], %var_13863: Tensor[(1024), uint16], %var_13892: Tensor[(1, 945), float32]) -> (Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) {
  %648 = cast(meta[relay.Constant][57] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %649 = cast(%var_13863, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %650 = reshape(%648, newshape=[14, 2, 4]) /* ty=Tensor[(14, 2, 4), float64] */;
  %651 = reshape(%649, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %652 = @func_7934(%650, %651) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(3, 1, 15), uint8], uint8, Tensor[(8, 8, 16), bool]) */;
  %653 = cast(meta[relay.Constant][58] /* ty=Tensor[(14, 1), int64] */, dtype="int64") /* ty=Tensor[(14, 1), int64] */;
  %654 = cast(meta[relay.Constant][58] /* ty=Tensor[(14, 1), int64] */, dtype="int64") /* ty=Tensor[(14, 1), int64] */;
  %655 = cast(%var_13892, dtype="float32") /* ty=Tensor[(1, 945), float32] */;
  %656 = reshape(%653, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %657 = reshape(%654, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %658 = reshape(%655, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %659 = @func_943(%656, %657, %658) /* ty=(Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %660 = cast(%var_13856, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
  %661 = log2(%660) /* ty=Tensor[(1, 12, 4), float64] */;
  %662 = cast(10 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %663 = cast(%var_13856, dtype="bool") /* ty=Tensor[(1, 12, 4), bool] */;
  %664 = less_equal(%662, %663) /* ty=Tensor[(1, 12, 4), bool] */;
  %665 = cast(%664, dtype="uint16") /* ty=Tensor[(1, 12, 4), uint16] */;
  %666 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%661, dtype="uint16") /* ty=Tensor[(1, 12, 4), uint16] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %669 = cast(meta[relay.Constant][59] /* ty=Tensor[(1512), uint64] */, dtype="uint64") /* ty=Tensor[(1512), uint64] */;
  %670 = reshape(%669, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), uint64] */;
  %671 = @func_1436(%670) /* ty=(Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %672 = cast(%664, dtype="uint64") /* ty=Tensor[(1, 12, 4), uint64] */;
  %673 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%661, dtype="uint64") /* ty=Tensor[(1, 12, 4), uint64] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %676 = %652.5;
  %677 = %659.2;
  %678 = bitwise_xor(%667, %668) /* ty=Tensor[(?, 12, 4), uint16] */;
  %679 = %671.0;
  %680 = multiply(%674, %675) /* ty=Tensor[(?, 12, 4), uint64] */;
  (%676, meta[relay.Constant][57] /* ty=Tensor[(112), float64] */, %var_13863, %677, meta[relay.Constant][58] /* ty=Tensor[(14, 1), int64] */, %var_13892, %678, %679, meta[relay.Constant][59] /* ty=Tensor[(1512), uint64] */, %680)
}

def @func_3671(%var_3650: Tensor[(7, 11, 7), float32]) -> (Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) {
  %681 = cast(%var_3650, dtype="float32") /* ty=Tensor[(7, 11, 7), float32] */;
  %682 = cast(meta[relay.Constant][60] /* ty=Tensor[(945, 1), float32] */, dtype="float32") /* ty=Tensor[(945, 1), float32] */;
  %683 = reshape(%682, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %684 = @func_1328(%683) /* ty=(Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %685 = %684.1;
  %686 = cast(%685, dtype="uint32") /* ty=Tensor[(15, 9, 7), uint32] */;
  %687 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(945, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %688 = cast(meta[relay.Constant][60] /* ty=Tensor[(945, 1), float32] */, dtype="uint32") /* ty=Tensor[(945, 1), uint32] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %690 = asin(%681) /* ty=Tensor[(7, 11, 7), float32] */;
  %691 = bitwise_and(%688, %689) /* ty=Tensor[(945, ?), uint32] */;
  (%690, %691)
}

def @func_17187() -> Tensor[(13, 4, 13), float64] {
  %692 = @func_16975() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %693 = %692.0;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  log2(%694) /* ty=Tensor[(13, 4, 13), float64] */
}

def @func_16934(%var_16891: Tensor[(13, 4, 13), int16], %var_16905: Tensor[(390, 3), uint16], %var_16927: Tensor[(1232), int8], %var_16928: Tensor[(30, 4), int8]) -> (Tensor[(13, 4, 13), bool], Tensor[(90), uint64], Tensor[(390, 3), uint16], Tensor[(8, 8, 16), bool], Tensor[(128, 8), uint16], Tensor[(5, 8, 3), float64], Tensor[(1232), int8], Tensor[(30, 4), int8], Tensor[(936, 1), int32]) {
  %695 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %696 = %695.0;
  %697 = cast(%var_16891, dtype="bool") /* ty=Tensor[(13, 4, 13), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(13, 4, 13), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = cast(%var_16905, dtype="uint16") /* ty=Tensor[(390, 3), uint16] */;
  %702 = cast(%var_16905, dtype="uint16") /* ty=Tensor[(390, 3), uint16] */;
  %703 = reshape(%701, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), uint16] */;
  %704 = reshape(%702, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), uint16] */;
  %705 = @func_9681(%703, %704) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) */;
  %706 = cast(meta[relay.Constant][61] /* ty=Tensor[(128, 8), uint16] */, dtype="uint16") /* ty=Tensor[(128, 8), uint16] */;
  %707 = reshape(%706, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %708 = cast(%var_16927, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %709 = cast(%var_16928, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %710 = cast(meta[relay.Constant][62] /* ty=Tensor[(936, 1), int32] */, dtype="int32") /* ty=Tensor[(936, 1), int32] */;
  %711 = reshape(%708, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), int8] */;
  %712 = reshape(%709, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), int8] */;
  %713 = reshape(%710, newshape=[2, 468]) /* ty=Tensor[(2, 468), int32] */;
  %714 = @func_11690(%711, %712, %713) /* ty=(Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) */;
  %715 = equal(%699, %700) /* ty=Tensor[(13, 4, 13), bool] */;
  %716 = %705.2;
  %717 = @func_966(%707) /* ty=Tensor[(8, 8, 16), bool] */;
  %718 = %714.1;
  (%715, %716, %var_16905, %717, meta[relay.Constant][61] /* ty=Tensor[(128, 8), uint16] */, %718, %var_16927, %var_16928, meta[relay.Constant][62] /* ty=Tensor[(936, 1), int32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_17441(%var_17436: Tensor[(945), float32], %var_17437: Tensor[(539), float32]) -> (Tensor[(13, 4, 13), float32], Tensor[(945), int8], Tensor[(945), float32], Tensor[(539), float32]) {
  %0 = @func_17145() /* ty=(Tensor[(13, 4, 13), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(13, 4, 13), float32] */;
  %3 = cast(%var_17436, dtype="float32") /* ty=Tensor[(945), float32] */;
  %4 = cast(%var_17437, dtype="float32") /* ty=Tensor[(539), float32] */;
  %5 = cast(%var_17436, dtype="float32") /* ty=Tensor[(945), float32] */;
  %6 = reshape(%3, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %7 = reshape(%4, newshape=[1, 539]) /* ty=Tensor[(1, 539), float32] */;
  %8 = reshape(%5, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %9 = @func_9384(%6, %7, %8) /* ty=(Tensor[(5, 2, 10), float64], Tensor[(9, 5, 9), float32], Tensor[(45), uint8], Tensor[(405), uint8], Tensor[(945, ?), uint32], Tensor[(1, 539), float32], Tensor[(945), int8]) */;
  %10 = sin(%2) /* ty=Tensor[(13, 4, 13), float32] */;
  %11 = %9.6;
  (%10, %11, %var_17436, %var_17437)
}

def @func_7792(%var_7790: Tensor[(5, 6, 8), uint16]) -> (Tensor[(5, 6, 8), bool],) {
  @func_7789(%var_7790) /* ty=(Tensor[(5, 6, 8), bool],) */
}

def @func_16957() -> Tensor[(13, 4, 13), int16] {
  @func_16955() /* ty=Tensor[(13, 4, 13), int16] */
}

def @func_17715() -> (Tensor[(60), float64], Tensor[(26), float32], Tensor[(?, 13, 2), float64]) {
  @func_17713() /* ty=(Tensor[(60), float64], Tensor[(26), float32], Tensor[(?, 13, 2), float64]) */
}

def @func_12353(%var_12351: Tensor[(10, 3, 16), uint64], %var_12352: Tensor[(10, 3, 16), uint64]) -> Tensor[(10, 3, 16), bool] {
  @func_12349(%var_12351, %var_12352) /* ty=Tensor[(10, 3, 16), bool] */
}

def @func_12214(%var_12206: int32, %var_12207: Tensor[(1, 5, 1), int32]) -> Tensor[(1, 5, 1), int32] {
  %12 = cast(%var_12206, dtype="int32") /* ty=int32 */;
  %13 = cast(%var_12207, dtype="int32") /* ty=Tensor[(1, 5, 1), int32] */;
  minimum(%12, %13) /* ty=Tensor[(1, 5, 1), int32] */
}

def @func_1330(%var_1329: Tensor[(945), float32]) -> (Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
  %23 = fn (%var_1314: Tensor[(945), float32]) -> (Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
    %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 5), float32] */;
    %15 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 9, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 5), float32] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %18 = cast(%var_1314, dtype="float32") /* ty=Tensor[(945), float32] */;
    %19 = reshape(%18, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), float32] */;
    %20 = @func_709(%19) /* ty=(Tensor[(15, 9, 7), float64],) */;
    %21 = floor_divide(%16, %17) /* ty=Tensor[(7, 9, 5), float32] */;
    %22 = %20.0;
    (%21, %22, %var_1314)
  };
  %23(%var_1329) /* ty=(Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */
}

def @func_14051(%var_14050: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float64],) {
  %26 = fn (%var_14032: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float64],) {
    %24 = cast(%var_14032, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %25 = sinh(%24) /* ty=Tensor[(14, 4, 16), float64] */;
    (%25,)
  };
  %26(%var_14050) /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_16676() -> (Tensor[(13, 4, 13), int16],) {
  @func_16674() /* ty=(Tensor[(13, 4, 13), int16],) */
}

def @func_10426(%var_10424: Tensor[(6, 6, 9), float32], %var_10425: Tensor[(90), uint64]) -> (Tensor[(6, 6, 9), float32], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) {
  @func_10422(%var_10424, %var_10425) /* ty=(Tensor[(6, 6, 9), float32], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) */
}

def @func_969(%var_967: Tensor[(8, 8, 16), uint16]) -> Tensor[(8, 8, 16), bool] {
  @func_966(%var_967) /* ty=Tensor[(8, 8, 16), bool] */
}

def @func_3305(%var_3304: Tensor[(15, 5, 2), uint64]) -> (Tensor[(15, 5, 2), bool],) {
  %38 = fn (%var_3266: Tensor[(15, 5, 2), uint64]) -> (Tensor[(15, 5, 2), bool],) {
    %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 1, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 1, 2), uint64] */;
    %28 = cast(%var_3266, dtype="uint64") /* ty=Tensor[(15, 5, 2), uint64] */;
    %29 = bitwise_and(%27, %28) /* ty=Tensor[(15, 5, 2), uint64] */;
    %30 = cast(%29, dtype="float32") /* ty=Tensor[(15, 5, 2), float32] */;
    %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 1, 2), uint64] */, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
    %32 = power(%30, %31) /* ty=Tensor[(15, 5, 2), float32] */;
    %33 = cast(%29, dtype="bool") /* ty=Tensor[(15, 5, 2), bool] */;
    %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%32, dtype="bool") /* ty=Tensor[(15, 5, 2), bool] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %37 = equal(%35, %36) /* ty=Tensor[(15, 5, 2), bool] */;
    (%37,)
  };
  %38(%var_3304) /* ty=(Tensor[(15, 5, 2), bool],) */
}

def @func_17146() -> (Tensor[(13, 4, 13), float64],) {
  %47 = fn () -> (Tensor[(13, 4, 13), float64],) {
    %39 = @func_16732() /* ty=Tensor[(13, 4, 13), int16] */;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
    %41 = exp(%40) /* ty=Tensor[(13, 4, 13), float64] */;
    %42 = cast(%41, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
    %43 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
    %44 = cast(%39, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
    %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %46 = maximum(%44, %45) /* ty=Tensor[(13, 4, 13), float64] */;
    (%46,)
  };
  %47() /* ty=(Tensor[(13, 4, 13), float64],) */
}

def @func_7626(%var_7624: Tensor[(10, 12, 15), float64], %var_7625: Tensor[(539), float32]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 11, 7), float32], Tensor[(539), float32]) {
  %57 = fn (%var_7595: Tensor[(10, 12, 15), float64], %var_7602: Tensor[(539), float32]) -> (Tensor[(10, 12, 15), float64], Tensor[(7, 11, 7), float32], Tensor[(539), float32]) {
    %48 = cast(%var_7595, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
    %49 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(10, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 15), float64] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %52 = cast(%var_7602, dtype="float32") /* ty=Tensor[(539), float32] */;
    %53 = reshape(%52, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), float32] */;
    %54 = @func_3671(%53) /* ty=(Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) */;
    %55 = multiply(%50, %51) /* ty=Tensor[(10, 12, 15), float64] */;
    %56 = %54.0;
    (%55, %56, %var_7602)
  };
  %57(%var_7624, %var_7625) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(7, 11, 7), float32], Tensor[(539), float32]) */
}

def @func_17465() -> Tensor[(13, 4, 13), int16] {
  @func_17463() /* ty=Tensor[(13, 4, 13), int16] */
}

def @func_11744(%var_11739: uint16, %var_11740: Tensor[(6, 16, 4), uint16], %var_11741: Tensor[(11, 49), float32], %var_11742: Tensor[(1, 14), int64], %var_11743: Tensor[(945), float32]) -> (Tensor[(6, 16, 4), uint16], Tensor[(7, 11, 7), float32], Tensor[(6, 16, 4), bool], Tensor[(11, 49), int32], Tensor[(15, 9, 7), float64], Tensor[(1, 14), int64], Tensor[(945), float32], Tensor[(11, 49), bool]) {
  %86 = fn (%var_11703: uint16, %var_11704: Tensor[(6, 16, 4), uint16], %var_11718: Tensor[(11, 49), float32], %var_11723: Tensor[(1, 14), int64], %var_11724: Tensor[(945), float32]) -> (Tensor[(6, 16, 4), uint16], Tensor[(7, 11, 7), float32], Tensor[(6, 16, 4), bool], Tensor[(11, 49), int32], Tensor[(15, 9, 7), float64], Tensor[(1, 14), int64], Tensor[(945), float32], Tensor[(11, 49), bool]) {
    %58 = cast(%var_11703, dtype="uint16") /* ty=uint16 */;
    %59 = cast(%var_11704, dtype="uint16") /* ty=Tensor[(6, 16, 4), uint16] */;
    %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 49), float32] */, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
    %61 = reshape(%60, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), float32] */;
    %62 = @func_3671(%61) /* ty=(Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) */;
    %63 = cast(%var_11704, dtype="bool") /* ty=Tensor[(6, 16, 4), bool] */;
    %64 = cast(%var_11703, dtype="bool") /* ty=bool */;
    %65 = cast(%var_11718, dtype="int32") /* ty=Tensor[(11, 49), int32] */;
    %66 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(11, 49), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 49), float32] */, dtype="int32") /* ty=Tensor[(11, 49), int32] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %69 = cast(%var_11723, dtype="int64") /* ty=Tensor[(1, 14), int64] */;
    %70 = cast(%var_11723, dtype="int64") /* ty=Tensor[(1, 14), int64] */;
    %71 = cast(%var_11724, dtype="float32") /* ty=Tensor[(945), float32] */;
    %72 = reshape(%69, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
    %73 = reshape(%70, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
    %74 = reshape(%71, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %75 = @func_943(%72, %73, %74) /* ty=(Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 49), float32] */, dtype="bool") /* ty=Tensor[(11, 49), bool] */;
    %77 = shape_of(%var_11718, dtype="int32") /* ty=Tensor[(2), int32] */;
    %78 = cast(%var_11718, dtype="bool") /* ty=Tensor[(11, 49), bool] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %80 = multiply(%58, %59) /* ty=Tensor[(6, 16, 4), uint16] */;
    %81 = %62.0;
    %82 = greater_equal(%63, %64) /* ty=Tensor[(6, 16, 4), bool] */;
    %83 = minimum(%67, %68) /* ty=Tensor[(11, 49), int32] */;
    %84 = %75.1;
    %85 = logical_and(%78, %79) /* ty=Tensor[(11, 49), bool] */;
    (%80, %81, %82, %83, %84, %var_11723, %var_11724, %85)
  };
  %86(%var_11739, %var_11740, %var_11741, %var_11742, %var_11743) /* ty=(Tensor[(6, 16, 4), uint16], Tensor[(7, 11, 7), float32], Tensor[(6, 16, 4), bool], Tensor[(11, 49), int32], Tensor[(15, 9, 7), float64], Tensor[(1, 14), int64], Tensor[(945), float32], Tensor[(11, 49), bool]) */
}

def @func_9684(%var_9682: Tensor[(13, 10, 9), uint16], %var_9683: Tensor[(13, 10, 9), uint16]) -> (Tensor[(13, 10, 9), bool], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) {
  %97 = fn (%var_9649: Tensor[(13, 10, 9), uint16], %var_9650: Tensor[(13, 10, 9), uint16]) -> (Tensor[(13, 10, 9), bool], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) {
    %87 = cast(%var_9650, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %88 = shape_of(%var_9649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %89 = cast(%var_9649, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %91 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
    %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
    %93 = reshape(%91, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
    %94 = reshape(%92, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
    %95 = not_equal(%89, %90) /* ty=Tensor[(13, 10, 9), bool] */;
    %96 = @func_7449(%93, %94) /* ty=Tensor[(6, 3, 5), uint64] */;
    (%95, %96, meta[relay.Constant][5] /* ty=Tensor[(90), uint64] */)
  };
  %97(%var_9682, %var_9683) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) */
}

def @func_15693(%var_15691: Tensor[(14, 11, 4), int8], %var_15692: Tensor[(160), uint64]) -> (Tensor[(14, 11, 4), int8], Tensor[(5, 2, 16), uint32], Tensor[(160), uint64]) {
  %109 = fn (%var_15672: Tensor[(14, 11, 4), int8], %var_15678: Tensor[(160), uint64]) -> (Tensor[(14, 11, 4), int8], Tensor[(5, 2, 16), uint32], Tensor[(160), uint64]) {
    %98 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 11, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 11, 4), int8] */;
    %99 = shape_of(%var_15672, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%var_15672, dtype="int8") /* ty=Tensor[(14, 11, 4), int8] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %102 = cast(%var_15678, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %103 = cast(%var_15678, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %104 = reshape(%102, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint64] */;
    %105 = reshape(%103, newshape=[5, 2, 16]) /* ty=Tensor[(5, 2, 16), uint64] */;
    %106 = @func_11760(%104, %105) /* ty=(Tensor[(5, 2, 16), uint32],) */;
    %107 = logical_xor(%100, %101) /* ty=Tensor[(14, 11, 4), int8] */;
    %108 = %106.0;
    (%107, %108, %var_15678)
  };
  %109(%var_15691, %var_15692) /* ty=(Tensor[(14, 11, 4), int8], Tensor[(5, 2, 16), uint32], Tensor[(160), uint64]) */
}

def @func_16674() -> (Tensor[(13, 4, 13), int16],) {
  %110 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %111 = %110.0;
  (%111,)
}

def @func_16976() -> (Tensor[(13, 4, 13), int16],) {
  %113 = fn () -> (Tensor[(13, 4, 13), int16],) {
    %112 = @func_16732() /* ty=Tensor[(13, 4, 13), int16] */;
    (%112,)
  };
  %113() /* ty=(Tensor[(13, 4, 13), int16],) */
}

def @func_1717(%var_1714: Tensor[(1, 5, 9), uint8], %var_1715: Tensor[(9, 5, 9), uint8], %var_1716: Tensor[(945), float32]) -> (Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
  @func_1712(%var_1714, %var_1715, %var_1716) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */
}

def @func_4517(%var_4495: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 1, 11), float64], Tensor[(15, 1, 11), float64]) {
  %114 = cast(%var_4495, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %115 = cast(%var_4495, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %116 = log2(%114) /* ty=Tensor[(15, 1, 11), float64] */;
  %117 = cos(%115) /* ty=Tensor[(15, 1, 11), float64] */;
  (%116, %117)
}

def @func_1556(%var_1531: Tensor[(1, 13, 2), float32]) -> (Tensor[(?, 13, 2), uint32],) {
  %118 = cast(%var_1531, dtype="float32") /* ty=Tensor[(1, 13, 2), float32] */;
  %119 = asin(%118) /* ty=Tensor[(1, 13, 2), float32] */;
  %120 = cast(%119, dtype="int8") /* ty=Tensor[(1, 13, 2), int8] */;
  %121 = shape_of(%var_1531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_1531, dtype="int8") /* ty=Tensor[(1, 13, 2), int8] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %124 = bitwise_or(%122, %123) /* ty=Tensor[(?, 13, 2), int8] */;
  %125 = cast(%124, dtype="uint32") /* ty=Tensor[(?, 13, 2), uint32] */;
  %126 = shape_of(%var_1531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_1531, dtype="uint32") /* ty=Tensor[(1, 13, 2), uint32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %129 = maximum(%127, %128) /* ty=Tensor[(?, 13, 2), uint32] */;
  (%129,)
}

def @func_7789(%var_7771: Tensor[(5, 6, 8), uint16]) -> (Tensor[(5, 6, 8), bool],) {
  %130 = cast(%var_7771, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %131 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(5, 6, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 6, 8), uint16] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = greater(%132, %133) /* ty=Tensor[(5, 6, 8), bool] */;
  (%134,)
}

def @func_13942(%var_13940: bool, %var_13941: Tensor[(8, 15, 15), bool]) -> (Tensor[(8, 15, 15), bool],) {
  %138 = fn (%var_13933: bool, %var_13934: Tensor[(8, 15, 15), bool]) -> (Tensor[(8, 15, 15), bool],) {
    %135 = cast(%var_13933, dtype="bool") /* ty=bool */;
    %136 = cast(%var_13934, dtype="bool") /* ty=Tensor[(8, 15, 15), bool] */;
    %137 = logical_or(%135, %136) /* ty=Tensor[(8, 15, 15), bool] */;
    (%137,)
  };
  %138(%var_13940, %var_13941) /* ty=(Tensor[(8, 15, 15), bool],) */
}

def @func_16939(%var_16935: Tensor[(13, 4, 13), int16], %var_16936: Tensor[(390, 3), uint16], %var_16937: Tensor[(1232), int8], %var_16938: Tensor[(30, 4), int8]) -> (Tensor[(13, 4, 13), bool], Tensor[(90), uint64], Tensor[(390, 3), uint16], Tensor[(8, 8, 16), bool], Tensor[(128, 8), uint16], Tensor[(5, 8, 3), float64], Tensor[(1232), int8], Tensor[(30, 4), int8], Tensor[(936, 1), int32]) {
  %163 = fn (%var_16891: Tensor[(13, 4, 13), int16], %var_16905: Tensor[(390, 3), uint16], %var_16927: Tensor[(1232), int8], %var_16928: Tensor[(30, 4), int8]) -> (Tensor[(13, 4, 13), bool], Tensor[(90), uint64], Tensor[(390, 3), uint16], Tensor[(8, 8, 16), bool], Tensor[(128, 8), uint16], Tensor[(5, 8, 3), float64], Tensor[(1232), int8], Tensor[(30, 4), int8], Tensor[(936, 1), int32]) {
    %139 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
    %140 = %139.0;
    %141 = cast(%var_16891, dtype="bool") /* ty=Tensor[(13, 4, 13), bool] */;
    %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%140, dtype="bool") /* ty=Tensor[(13, 4, 13), bool] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %145 = cast(%var_16905, dtype="uint16") /* ty=Tensor[(390, 3), uint16] */;
    %146 = cast(%var_16905, dtype="uint16") /* ty=Tensor[(390, 3), uint16] */;
    %147 = reshape(%145, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), uint16] */;
    %148 = reshape(%146, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), uint16] */;
    %149 = @func_9681(%147, %148) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) */;
    %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(128, 8), uint16] */, dtype="uint16") /* ty=Tensor[(128, 8), uint16] */;
    %151 = reshape(%150, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
    %152 = cast(%var_16927, dtype="int8") /* ty=Tensor[(1232), int8] */;
    %153 = cast(%var_16928, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
    %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(936, 1), int32] */, dtype="int32") /* ty=Tensor[(936, 1), int32] */;
    %155 = reshape(%152, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), int8] */;
    %156 = reshape(%153, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), int8] */;
    %157 = reshape(%154, newshape=[2, 468]) /* ty=Tensor[(2, 468), int32] */;
    %158 = @func_11690(%155, %156, %157) /* ty=(Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) */;
    %159 = equal(%143, %144) /* ty=Tensor[(13, 4, 13), bool] */;
    %160 = %149.2;
    %161 = @func_966(%151) /* ty=Tensor[(8, 8, 16), bool] */;
    %162 = %158.1;
    (%159, %160, %var_16905, %161, meta[relay.Constant][8] /* ty=Tensor[(128, 8), uint16] */, %162, %var_16927, %var_16928, meta[relay.Constant][9] /* ty=Tensor[(936, 1), int32] */)
  };
  %163(%var_16935, %var_16936, %var_16937, %var_16938) /* ty=(Tensor[(13, 4, 13), bool], Tensor[(90), uint64], Tensor[(390, 3), uint16], Tensor[(8, 8, 16), bool], Tensor[(128, 8), uint16], Tensor[(5, 8, 3), float64], Tensor[(1232), int8], Tensor[(30, 4), int8], Tensor[(936, 1), int32]) */
}

def @func_1712(%var_1694: Tensor[(1, 5, 9), uint8], %var_1695: Tensor[(9, 5, 9), uint8], %var_1710: Tensor[(945), float32]) -> (Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
  %164 = cast(%var_1694, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %165 = cast(%var_1695, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %166 = less_equal(%164, %165) /* ty=Tensor[(9, 5, 9), bool] */;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
  %168 = cast(%var_1710, dtype="float32") /* ty=Tensor[(945), float32] */;
  %169 = reshape(%168, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %170 = @func_1328(%169) /* ty=(Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %171 = exp(%167) /* ty=Tensor[(9, 5, 9), float32] */;
  %172 = %170.1;
  (%171, %172, %var_1710)
}

def @func_9826(%var_9801: Tensor[(6, 9, 8), float64], %var_9822: Tensor[(6, 9, 8), float64]) -> (Tensor[(6, 9, 8), float64], Tensor[(6, 9, 8), float64]) {
  %173 = cast(%var_9801, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
  %174 = cast(%var_9822, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
  %175 = shape_of(%var_9801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%var_9801, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %178 = rsqrt(%173) /* ty=Tensor[(6, 9, 8), float64] */;
  %179 = mod(%176, %177) /* ty=Tensor[(6, 9, 8), float64] */;
  (%178, %179)
}

def @func_17920(%var_17915: Tensor[(936), int32], %var_17916: Tensor[(1800), float64], %var_17917: Tensor[(11, 49), float32], %var_17918: Tensor[(168), float64], %var_17919: Tensor[(1024), uint16]) -> (Tensor[(13, 4, 13), int16], Tensor[(16, 7, 11), bool], Tensor[(1232), int8], Tensor[(120), int8], Tensor[(936), int32], Tensor[(60), float64], Tensor[(1800), float64], Tensor[(539), int64], Tensor[(450, 4), float64], Tensor[(8, 8, 16), bool], Tensor[(168), float64], Tensor[(1024), uint16]) {
  @func_17913(%var_17915, %var_17916, %var_17917, %var_17918, %var_17919) /* ty=(Tensor[(13, 4, 13), int16], Tensor[(16, 7, 11), bool], Tensor[(1232), int8], Tensor[(120), int8], Tensor[(936), int32], Tensor[(60), float64], Tensor[(1800), float64], Tensor[(539), int64], Tensor[(450, 4), float64], Tensor[(8, 8, 16), bool], Tensor[(168), float64], Tensor[(1024), uint16]) */
}

def @func_709(%var_617: Tensor[(15, 9, 7), float32]) -> (Tensor[(15, 9, 7), float64],) {
  %180 = cast(%var_617, dtype="float32") /* ty=Tensor[(15, 9, 7), float32] */;
  %181 = tan(%180) /* ty=Tensor[(15, 9, 7), float32] */;
  %182 = cast(%181, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %183 = shape_of(%var_617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%var_617, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %186 = less(%184, %185) /* ty=Tensor[(15, 9, 7), bool] */;
  %187 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 9, 7), bool] */, dtype="float64") /* ty=Tensor[(15, 9, 7), float64] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="float64") /* ty=Tensor[(15, 9, 7), float64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %191 = divide(%189, %190) /* ty=Tensor[(15, 9, 7), float64] */;
  (%191,)
}

def @func_17633(%var_17625: Tensor[(945), float32]) -> (Tensor[(13, 4, 13), float64], Tensor[(945), float64], Tensor[(112), float64], Tensor[(48), int32], Tensor[(4, 256), uint16], Tensor[(945), uint16]) {
  %192 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %193 = reshape(%192, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %194 = @func_1328(%193) /* ty=(Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %195 = %194.2;
  %196 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float32] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(1), int32] */;
  %198 = cast(%195, dtype="float64") /* ty=Tensor[(945), float64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?), float64] */;
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %201 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 256), uint16] */, dtype="uint16") /* ty=Tensor[(4, 256), uint16] */;
  %202 = cast(%195, dtype="float32") /* ty=Tensor[(945), float32] */;
  %203 = reshape(%200, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), int32] */;
  %204 = reshape(%201, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %205 = reshape(%202, newshape=[1, 945]) /* ty=Tensor[(1, 945), float32] */;
  %206 = @func_13911(%203, %204, %205) /* ty=(Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) */;
  %207 = cast(%var_17625, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %208 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(945), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %209 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float32] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %211 = @func_17551() /* ty=Tensor[(13, 4, 13), float64] */;
  %212 = divide(%198, %199) /* ty=Tensor[(945), float64] */;
  %213 = %206.1;
  %214 = logical_xor(%209, %210) /* ty=Tensor[(945), uint16] */;
  (%211, %212, %213, meta[relay.Constant][12] /* ty=Tensor[(48), int32] */, meta[relay.Constant][13] /* ty=Tensor[(4, 256), uint16] */, %214)
}

def @func_13915(%var_13912: Tensor[(1, 12, 4), int32], %var_13913: Tensor[(1024), uint16], %var_13914: Tensor[(1, 945), float32]) -> (Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) {
  %248 = fn (%var_13856: Tensor[(1, 12, 4), int32], %var_13863: Tensor[(1024), uint16], %var_13892: Tensor[(1, 945), float32]) -> (Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) {
    %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
    %216 = cast(%var_13863, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
    %217 = reshape(%215, newshape=[14, 2, 4]) /* ty=Tensor[(14, 2, 4), float64] */;
    %218 = reshape(%216, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
    %219 = @func_7934(%217, %218) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(3, 1, 15), uint8], uint8, Tensor[(8, 8, 16), bool]) */;
    %220 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 1), int64] */, dtype="int64") /* ty=Tensor[(14, 1), int64] */;
    %221 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 1), int64] */, dtype="int64") /* ty=Tensor[(14, 1), int64] */;
    %222 = cast(%var_13892, dtype="float32") /* ty=Tensor[(1, 945), float32] */;
    %223 = reshape(%220, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
    %224 = reshape(%221, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
    %225 = reshape(%222, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %226 = @func_943(%223, %224, %225) /* ty=(Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %227 = cast(%var_13856, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
    %228 = log2(%227) /* ty=Tensor[(1, 12, 4), float64] */;
    %229 = cast(10 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %230 = cast(%var_13856, dtype="bool") /* ty=Tensor[(1, 12, 4), bool] */;
    %231 = less_equal(%229, %230) /* ty=Tensor[(1, 12, 4), bool] */;
    %232 = cast(%231, dtype="uint16") /* ty=Tensor[(1, 12, 4), uint16] */;
    %233 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(%228, dtype="uint16") /* ty=Tensor[(1, 12, 4), uint16] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %236 = cast(meta[relay.Constant][16] /* ty=Tensor[(1512), uint64] */, dtype="uint64") /* ty=Tensor[(1512), uint64] */;
    %237 = reshape(%236, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), uint64] */;
    %238 = @func_1436(%237) /* ty=(Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
    %239 = cast(%231, dtype="uint64") /* ty=Tensor[(1, 12, 4), uint64] */;
    %240 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %241 = cast(%228, dtype="uint64") /* ty=Tensor[(1, 12, 4), uint64] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %243 = %219.5;
    %244 = %226.2;
    %245 = bitwise_xor(%234, %235) /* ty=Tensor[(?, 12, 4), uint16] */;
    %246 = %238.0;
    %247 = multiply(%241, %242) /* ty=Tensor[(?, 12, 4), uint64] */;
    (%243, meta[relay.Constant][14] /* ty=Tensor[(112), float64] */, %var_13863, %244, meta[relay.Constant][15] /* ty=Tensor[(14, 1), int64] */, %var_13892, %245, %246, meta[relay.Constant][16] /* ty=Tensor[(1512), uint64] */, %247)
  };
  %248(%var_13912, %var_13913, %var_13914) /* ty=(Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) */
}

def @func_14536(%var_14534: Tensor[(405, 1), uint8], %var_14535: Tensor[(165), float64]) -> (Tensor[(6, 3, 5), uint64], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(1, 945), float32], Tensor[(12, 10, 12), bool], Tensor[(15, 1, 11), float64], Tensor[(405, 90), bool], Tensor[(405, 165), int16]) {
  %279 = fn (%var_14504: Tensor[(405, 1), uint8], %var_14522: Tensor[(165), float64]) -> (Tensor[(6, 3, 5), uint64], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(1, 945), float32], Tensor[(12, 10, 12), bool], Tensor[(15, 1, 11), float64], Tensor[(405, 90), bool], Tensor[(405, 165), int16]) {
    %249 = cast(meta[relay.Constant][17] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
    %250 = cast(meta[relay.Constant][17] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
    %251 = reshape(%249, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
    %252 = reshape(%250, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
    %253 = cast(meta[relay.Constant][18] /* ty=Tensor[(45), uint8] */, dtype="uint8") /* ty=Tensor[(45), uint8] */;
    %254 = cast(%var_14504, dtype="uint8") /* ty=Tensor[(405, 1), uint8] */;
    %255 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 945), float32] */, dtype="float32") /* ty=Tensor[(1, 945), float32] */;
    %256 = reshape(%253, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
    %257 = reshape(%254, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
    %258 = reshape(%255, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %259 = @func_1712(%256, %257, %258) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %260 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 12), float64] */;
    %261 = cos(%260) /* ty=Tensor[(12, 10, 12), float64] */;
    %262 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 10, 12), float64] */, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
    %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%261, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %266 = cast(%var_14522, dtype="float64") /* ty=Tensor[(165), float64] */;
    %267 = reshape(%266, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), float64] */;
    %268 = @func_4517(%267) /* ty=(Tensor[(15, 1, 11), float64], Tensor[(15, 1, 11), float64]) */;
    %269 = cast(meta[relay.Constant][17] /* ty=Tensor[(90), uint64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %270 = cast(%var_14504, dtype="bool") /* ty=Tensor[(405, 1), bool] */;
    %271 = cast(%var_14522, dtype="int16") /* ty=Tensor[(165), int16] */;
    %272 = cast(%var_14504, dtype="int16") /* ty=Tensor[(405, 1), int16] */;
    %273 = @func_7449(%251, %252) /* ty=Tensor[(6, 3, 5), uint64] */;
    %274 = %259.1;
    %275 = less_equal(%264, %265) /* ty=Tensor[(12, 10, 12), bool] */;
    %276 = %268.1;
    %277 = logical_or(%269, %270) /* ty=Tensor[(405, 90), bool] */;
    %278 = subtract(%271, %272) /* ty=Tensor[(405, 165), int16] */;
    (%273, %274, meta[relay.Constant][18] /* ty=Tensor[(45), uint8] */, meta[relay.Constant][19] /* ty=Tensor[(1, 945), float32] */, %275, %276, %277, %278)
  };
  %279(%var_14534, %var_14535) /* ty=(Tensor[(6, 3, 5), uint64], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(1, 945), float32], Tensor[(12, 10, 12), bool], Tensor[(15, 1, 11), float64], Tensor[(405, 90), bool], Tensor[(405, 165), int16]) */
}

def @func_966(%var_962: Tensor[(8, 8, 16), uint16]) -> Tensor[(8, 8, 16), bool] {
  %280 = cast(%var_962, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
  %281 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(8, 8, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 8, 16), uint16] */, dtype="bool") /* ty=Tensor[(8, 8, 16), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%282, %283) /* ty=Tensor[(8, 8, 16), bool] */
}

def @func_9388(%var_9385: Tensor[(945), float32], %var_9386: Tensor[(1, 539), float32], %var_9387: Tensor[(945), float32]) -> (Tensor[(5, 2, 10), float64], Tensor[(9, 5, 9), float32], Tensor[(45), uint8], Tensor[(405), uint8], Tensor[(945, ?), uint32], Tensor[(1, 539), float32], Tensor[(945), int8]) {
  %303 = fn (%var_9358: Tensor[(945), float32], %var_9374: Tensor[(1, 539), float32], %var_9380: Tensor[(945), float32]) -> (Tensor[(5, 2, 10), float64], Tensor[(9, 5, 9), float32], Tensor[(45), uint8], Tensor[(405), uint8], Tensor[(945, ?), uint32], Tensor[(1, 539), float32], Tensor[(945), int8]) {
    %284 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 10), float64] */;
    %285 = cast(meta[relay.Constant][23] /* ty=Tensor[(45), uint8] */, dtype="uint8") /* ty=Tensor[(45), uint8] */;
    %286 = cast(meta[relay.Constant][24] /* ty=Tensor[(405), uint8] */, dtype="uint8") /* ty=Tensor[(405), uint8] */;
    %287 = cast(%var_9358, dtype="float32") /* ty=Tensor[(945), float32] */;
    %288 = reshape(%285, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
    %289 = reshape(%286, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
    %290 = reshape(%287, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %291 = @func_1712(%288, %289, %290) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %292 = cast(%var_9374, dtype="float32") /* ty=Tensor[(1, 539), float32] */;
    %293 = reshape(%292, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), float32] */;
    %294 = @func_3671(%293) /* ty=(Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) */;
    %295 = cast(%var_9380, dtype="int8") /* ty=Tensor[(945), int8] */;
    %296 = shape_of(%var_9358, dtype="int32") /* ty=Tensor[(1), int32] */;
    %297 = cast(%var_9358, dtype="int8") /* ty=Tensor[(945), int8] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?), int8] */;
    %299 = cosh(%284) /* ty=Tensor[(5, 2, 10), float64] */;
    %300 = %291.0;
    %301 = %294.1;
    %302 = add(%297, %298) /* ty=Tensor[(945), int8] */;
    (%299, %300, meta[relay.Constant][23] /* ty=Tensor[(45), uint8] */, meta[relay.Constant][24] /* ty=Tensor[(405), uint8] */, %301, %var_9374, %302)
  };
  %303(%var_9385, %var_9386, %var_9387) /* ty=(Tensor[(5, 2, 10), float64], Tensor[(9, 5, 9), float32], Tensor[(45), uint8], Tensor[(405), uint8], Tensor[(945, ?), uint32], Tensor[(1, 539), float32], Tensor[(945), int8]) */
}

def @func_4520(%var_4518: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 1, 11), float64], Tensor[(15, 1, 11), float64]) {
  @func_4517(%var_4518) /* ty=(Tensor[(15, 1, 11), float64], Tensor[(15, 1, 11), float64]) */
}

def @func_10628(%var_10626: Tensor[(7, 12, 13), float32], %var_10627: Tensor[(7, 12, 13), float32]) -> (Tensor[(7, 12, 13), bool],) {
  %311 = fn (%var_10608: Tensor[(7, 12, 13), float32], %var_10621: Tensor[(7, 12, 13), float32]) -> (Tensor[(7, 12, 13), bool],) {
    %304 = cast(%var_10608, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %305 = sigmoid(%304) /* ty=Tensor[(7, 12, 13), float32] */;
    %306 = cast(%var_10621, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
    %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%305, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %310 = equal(%308, %309) /* ty=Tensor[(7, 12, 13), bool] */;
    (%310,)
  };
  %311(%var_10626, %var_10627) /* ty=(Tensor[(7, 12, 13), bool],) */
}

def @func_17636(%var_17634: Tensor[(945), float32]) -> (Tensor[(13, 4, 13), float64], Tensor[(945), float64], Tensor[(112), float64], Tensor[(48), int32], Tensor[(4, 256), uint16], Tensor[(945), uint16]) {
  @func_17633(%var_17634) /* ty=(Tensor[(13, 4, 13), float64], Tensor[(945), float64], Tensor[(112), float64], Tensor[(48), int32], Tensor[(4, 256), uint16], Tensor[(945), uint16]) */
}

def @func_9830(%var_9828: Tensor[(6, 9, 8), float64], %var_9829: Tensor[(6, 9, 8), float64]) -> (Tensor[(6, 9, 8), float64], Tensor[(6, 9, 8), float64]) {
  @func_9826(%var_9828, %var_9829) /* ty=(Tensor[(6, 9, 8), float64], Tensor[(6, 9, 8), float64]) */
}

def @func_17755() -> (Tensor[(13, 4, 13), int16],) {
  @func_17753() /* ty=(Tensor[(13, 4, 13), int16],) */
}

def @func_11348(%var_11331: Tensor[(1, 4, 15), float64], %var_11341: Tensor[(450, 4), float64], %var_11342: Tensor[(539), float32]) -> (Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) {
  %312 = cast(%var_11331, dtype="float64") /* ty=Tensor[(1, 4, 15), float64] */;
  %313 = exp(%312) /* ty=Tensor[(1, 4, 15), float64] */;
  %314 = cast(%313, dtype="uint64") /* ty=Tensor[(1, 4, 15), uint64] */;
  %315 = shape_of(%var_11331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_11331, dtype="uint64") /* ty=Tensor[(1, 4, 15), uint64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %318 = cast(%var_11341, dtype="float64") /* ty=Tensor[(450, 4), float64] */;
  %319 = cast(%var_11342, dtype="float32") /* ty=Tensor[(539), float32] */;
  %320 = reshape(%318, newshape=[10, 12, 15]) /* ty=Tensor[(10, 12, 15), float64] */;
  %321 = reshape(%319, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %322 = @func_7623(%320, %321) /* ty=(Tensor[(10, 12, 15), float64], Tensor[(7, 11, 7), float32], Tensor[(539), float32]) */;
  %323 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %324 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
  %325 = reshape(%323, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %326 = reshape(%324, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %327 = @func_2683(%325, %326) /* ty=(Tensor[(16, 10, 14), float32],) */;
  %328 = subtract(%316, %317) /* ty=Tensor[(?, 4, 15), uint64] */;
  %329 = %322.2;
  %330 = %327.0;
  (%328, %329, %var_11341, %var_11342, %330, meta[relay.Constant][25] /* ty=Tensor[(14, 160), float32] */)
}

def @func_3734(%var_3731: Tensor[(7, 4, 5), int16], %var_3732: Tensor[(45), uint8], %var_3733: Tensor[(135, 3), uint8]) -> (Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) {
  %344 = fn (%var_3707: Tensor[(7, 4, 5), int16], %var_3714: Tensor[(45), uint8], %var_3715: Tensor[(135, 3), uint8]) -> (Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) {
    %331 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 5), int16] */, dtype="int16") /* ty=Tensor[(7, 4, 5), int16] */;
    %332 = shape_of(%var_3707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %333 = cast(%var_3707, dtype="int16") /* ty=Tensor[(7, 4, 5), int16] */;
    %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %335 = cast(%var_3714, dtype="uint8") /* ty=Tensor[(45), uint8] */;
    %336 = cast(%var_3715, dtype="uint8") /* ty=Tensor[(135, 3), uint8] */;
    %337 = cast(meta[relay.Constant][27] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
    %338 = reshape(%335, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
    %339 = reshape(%336, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
    %340 = reshape(%337, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %341 = @func_1712(%338, %339, %340) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %342 = right_shift(%333, %334) /* ty=Tensor[(7, 4, 5), int16] */;
    %343 = %341.1;
    (%342, %343, %var_3714, %var_3715, meta[relay.Constant][27] /* ty=Tensor[(945), float32] */)
  };
  %344(%var_3731, %var_3732, %var_3733) /* ty=(Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) */
}

def @func_11690(%var_11652: Tensor[(16, 7, 11), int8], %var_11666: Tensor[(5, 8, 3), int8], %var_11680: Tensor[(2, 468), int32]) -> (Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) {
  %345 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %346 = cast(%var_11666, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %347 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %348 = cast(%var_11666, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %349 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %350 = cast(%var_11652, dtype="int8") /* ty=Tensor[(16, 7, 11), int8] */;
  %351 = bitwise_or(%349, %350) /* ty=Tensor[(16, 7, 11), int8] */;
  %352 = cast(%351, dtype="bool") /* ty=Tensor[(16, 7, 11), bool] */;
  %353 = shape_of(%var_11652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%var_11652, dtype="bool") /* ty=Tensor[(16, 7, 11), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = cast(%var_11680, dtype="int32") /* ty=Tensor[(2, 468), int32] */;
  %357 = cast(%var_11680, dtype="int32") /* ty=Tensor[(2, 468), int32] */;
  %358 = reshape(%356, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), int32] */;
  %359 = reshape(%357, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), int32] */;
  %360 = @func_4422(%358, %359) /* ty=(Tensor[(13, 8, 9), int32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16]) */;
  %361 = power(%345, %346) /* ty=Tensor[(5, 8, 3), float64] */;
  %362 = divide(%347, %348) /* ty=Tensor[(5, 8, 3), float64] */;
  %363 = logical_and(%354, %355) /* ty=Tensor[(16, 7, 11), bool] */;
  %364 = %360.0;
  (%361, %362, %363, %364, %var_11680)
}

def @func_17189() -> Tensor[(13, 4, 13), float64] {
  @func_17187() /* ty=Tensor[(13, 4, 13), float64] */
}

def @func_12989(%var_12987: Tensor[(8, 11, 13), float32]) -> Tensor[(8, 11, 13), float32] {
  @func_12986(%var_12987) /* ty=Tensor[(8, 11, 13), float32] */
}

def @main(%var_17981: Tensor[(6, 10, 10), float64], %var_17982: Tensor[(6, 10, 10), float64], %var_18018: Tensor[(120), int8], %var_18039: Tensor[(14), int64]) -> (Tensor[(6, 10, 10), float64], Tensor[(5, 8, 3), float64], Tensor[(1232), int8], Tensor[(120), int8], Tensor[(936), int32], Tensor[(?, 2, 7), bool], Tensor[(14), int64], Tensor[(945), float32], Tensor[(6, 10, 10), int32]) {
  %365 = cast(%var_17982, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
  %366 = shape_of(%var_17981, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_17981, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %369 = cast(meta[relay.Constant][29] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %370 = cast(%var_18018, dtype="int8") /* ty=Tensor[(120), int8] */;
  %371 = cast(meta[relay.Constant][30] /* ty=Tensor[(936), int32] */, dtype="int32") /* ty=Tensor[(936), int32] */;
  %372 = reshape(%369, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), int8] */;
  %373 = reshape(%370, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), int8] */;
  %374 = reshape(%371, newshape=[2, 468]) /* ty=Tensor[(2, 468), int32] */;
  %375 = @func_11695(%372, %373, %374) /* ty=(Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) */;
  %376 = cast(%var_18039, dtype="int64") /* ty=Tensor[(14), int64] */;
  %377 = cast(%var_18039, dtype="int64") /* ty=Tensor[(14), int64] */;
  %378 = cast(meta[relay.Constant][31] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %379 = reshape(%376, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %380 = reshape(%377, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int64] */;
  %381 = reshape(%378, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %382 = @func_947(%379, %380, %381) /* ty=(Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
  %383 = cast(%var_17981, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %384 = log(%383) /* ty=Tensor[(6, 10, 10), float32] */;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
  %386 = atanh(%385) /* ty=Tensor[(6, 10, 10), float64] */;
  %387 = cast(%384, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %391 = divide(%367, %368) /* ty=Tensor[(6, 10, 10), float64] */;
  %392 = %375.1;
  %393 = %382.0;
  %394 = left_shift(%389, %390) /* ty=Tensor[(6, 10, 10), int32] */;
  (%391, %392, meta[relay.Constant][29] /* ty=Tensor[(1232), int8] */, %var_18018, meta[relay.Constant][30] /* ty=Tensor[(936), int32] */, %393, %var_18039, meta[relay.Constant][31] /* ty=Tensor[(945), float32] */, %394)
}

def @func_11353(%var_11350: Tensor[(1, 4, 15), float64], %var_11351: Tensor[(450, 4), float64], %var_11352: Tensor[(539), float32]) -> (Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) {
  @func_11348(%var_11350, %var_11351, %var_11352) /* ty=(Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) */
}

def @func_16733() -> Tensor[(13, 4, 13), int16] {
  %396 = fn () -> Tensor[(13, 4, 13), int16] {
    %395 = @func_16674() /* ty=(Tensor[(13, 4, 13), int16],) */;
    %395.0
  };
  %396() /* ty=Tensor[(13, 4, 13), int16] */
}

def @func_1439(%var_1437: Tensor[(12, 14, 9), uint64]) -> (Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) {
  @func_1436(%var_1437) /* ty=(Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */
}

def @func_17913(%var_17876: Tensor[(936), int32], %var_17884: Tensor[(1800), float64], %var_17885: Tensor[(11, 49), float32], %var_17907: Tensor[(168), float64], %var_17908: Tensor[(1024), uint16]) -> (Tensor[(13, 4, 13), int16], Tensor[(16, 7, 11), bool], Tensor[(1232), int8], Tensor[(120), int8], Tensor[(936), int32], Tensor[(60), float64], Tensor[(1800), float64], Tensor[(539), int64], Tensor[(450, 4), float64], Tensor[(8, 8, 16), bool], Tensor[(168), float64], Tensor[(1024), uint16]) {
  %397 = cast(meta[relay.Constant][32] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %398 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %399 = cast(%var_17876, dtype="int32") /* ty=Tensor[(936), int32] */;
  %400 = reshape(%397, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), int8] */;
  %401 = reshape(%398, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), int8] */;
  %402 = reshape(%399, newshape=[2, 468]) /* ty=Tensor[(2, 468), int32] */;
  %403 = @func_11690(%400, %401, %402) /* ty=(Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) */;
  %404 = cast(meta[relay.Constant][34] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %405 = cast(%var_17884, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %406 = cast(%var_17885, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
  %407 = reshape(%404, newshape=[1, 4, 15]) /* ty=Tensor[(1, 4, 15), float64] */;
  %408 = reshape(%405, newshape=[450, 4]) /* ty=Tensor[(450, 4), float64] */;
  %409 = reshape(%406, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %410 = @func_11348(%407, %408, %409) /* ty=(Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) */;
  %411 = %410.1;
  %412 = cast(%var_17885, dtype="int64") /* ty=Tensor[(11, 49), int64] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(1), int32] */;
  %414 = cast(%411, dtype="int64") /* ty=Tensor[(539), int64] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?), int64] */;
  %416 = cast(meta[relay.Constant][34] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %417 = cast(%var_17884, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %418 = cast(%411, dtype="float32") /* ty=Tensor[(539), float32] */;
  %419 = reshape(%416, newshape=[1, 4, 15]) /* ty=Tensor[(1, 4, 15), float64] */;
  %420 = reshape(%417, newshape=[450, 4]) /* ty=Tensor[(450, 4), float64] */;
  %421 = reshape(%418, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %422 = @func_11348(%419, %420, %421) /* ty=(Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) */;
  %423 = cast(%var_17907, dtype="float64") /* ty=Tensor[(168), float64] */;
  %424 = cast(%var_17908, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %425 = reshape(%423, newshape=[14, 3, 4]) /* ty=Tensor[(14, 3, 4), float64] */;
  %426 = reshape(%424, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %427 = @func_2145(%425, %426) /* ty=(Tensor[(14, 3, 4), bool], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(1512), uint64]) */;
  %428 = @func_17463() /* ty=Tensor[(13, 4, 13), int16] */;
  %429 = %403.2;
  %430 = bitwise_and(%414, %415) /* ty=Tensor[(539), int64] */;
  %431 = %422.2;
  %432 = %427.3;
  (%428, %429, meta[relay.Constant][32] /* ty=Tensor[(1232), int8] */, meta[relay.Constant][33] /* ty=Tensor[(120), int8] */, %var_17876, meta[relay.Constant][34] /* ty=Tensor[(60), float64] */, %var_17884, %430, %431, %432, %var_17907, %var_17908)
}

def @func_15548(%var_15545: Tensor[(16, 14, 6), float32], %var_15546: Tensor[(6, 64), uint16], %var_15547: Tensor[(945), float32]) -> (Tensor[(16, 14, 6), float64], Tensor[(16, 14, 6), float32], Tensor[(3, 1, 15), uint8], uint8, Tensor[(6, 16, 4), bool], Tensor[(6, 64), uint16], Tensor[(539), float32], Tensor[(14), int64], Tensor[(945), float32]) {
  @func_15543(%var_15545, %var_15546, %var_15547) /* ty=(Tensor[(16, 14, 6), float64], Tensor[(16, 14, 6), float32], Tensor[(3, 1, 15), uint8], uint8, Tensor[(6, 16, 4), bool], Tensor[(6, 64), uint16], Tensor[(539), float32], Tensor[(14), int64], Tensor[(945), float32]) */
}

def @func_7938(%var_7936: Tensor[(14, 2, 4), float64], %var_7937: Tensor[(1024), uint16]) -> (Tensor[(14, 2, 4), float32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(3, 1, 15), uint8], uint8, Tensor[(8, 8, 16), bool]) {
  @func_7934(%var_7936, %var_7937) /* ty=(Tensor[(14, 2, 4), float32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(3, 1, 15), uint8], uint8, Tensor[(8, 8, 16), bool]) */
}

def @func_947(%var_944: Tensor[(1, 2, 7), int64], %var_945: Tensor[(1, 2, 7), int64], %var_946: Tensor[(945), float32]) -> (Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
  %442 = fn (%var_917: Tensor[(1, 2, 7), int64], %var_918: Tensor[(1, 2, 7), int64], %var_941: Tensor[(945), float32]) -> (Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) {
    %433 = cast(%var_918, dtype="bool") /* ty=Tensor[(1, 2, 7), bool] */;
    %434 = shape_of(%var_917, dtype="int32") /* ty=Tensor[(3), int32] */;
    %435 = cast(%var_917, dtype="bool") /* ty=Tensor[(1, 2, 7), bool] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %437 = cast(%var_941, dtype="float32") /* ty=Tensor[(945), float32] */;
    %438 = reshape(%437, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), float32] */;
    %439 = @func_709(%438) /* ty=(Tensor[(15, 9, 7), float64],) */;
    %440 = less_equal(%435, %436) /* ty=Tensor[(?, 2, 7), bool] */;
    %441 = %439.0;
    (%440, %441, %var_941)
  };
  %442(%var_944, %var_945, %var_946) /* ty=(Tensor[(?, 2, 7), bool], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */
}

def @func_5344(%var_5338: Tensor[(7, 7, 4), float64]) -> (Tensor[(7, 7, 4), float64],) {
  %443 = cast(%var_5338, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %444 = atan(%443) /* ty=Tensor[(7, 7, 4), float64] */;
  (%444,)
}

def @func_12118(%var_12106: uint64, %var_12107: Tensor[(4, 10, 10), uint64]) -> Tensor[(4, 10, 10), uint64] {
  %445 = cast(%var_12106, dtype="uint64") /* ty=uint64 */;
  %446 = cast(%var_12107, dtype="uint64") /* ty=Tensor[(4, 10, 10), uint64] */;
  left_shift(%445, %446) /* ty=Tensor[(4, 10, 10), uint64] */
}

def @func_3673(%var_3672: Tensor[(7, 11, 7), float32]) -> (Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) {
  %458 = fn (%var_3650: Tensor[(7, 11, 7), float32]) -> (Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) {
    %447 = cast(%var_3650, dtype="float32") /* ty=Tensor[(7, 11, 7), float32] */;
    %448 = cast(meta[relay.Constant][35] /* ty=Tensor[(945, 1), float32] */, dtype="float32") /* ty=Tensor[(945, 1), float32] */;
    %449 = reshape(%448, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %450 = @func_1328(%449) /* ty=(Tensor[(7, 9, 5), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %451 = %450.1;
    %452 = cast(%451, dtype="uint32") /* ty=Tensor[(15, 9, 7), uint32] */;
    %453 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(945, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %454 = cast(meta[relay.Constant][35] /* ty=Tensor[(945, 1), float32] */, dtype="uint32") /* ty=Tensor[(945, 1), uint32] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %456 = asin(%447) /* ty=Tensor[(7, 11, 7), float32] */;
    %457 = bitwise_and(%454, %455) /* ty=Tensor[(945, ?), uint32] */;
    (%456, %457)
  };
  %458(%var_3672) /* ty=(Tensor[(7, 11, 7), float32], Tensor[(945, ?), uint32]) */
}

def @func_1559(%var_1557: Tensor[(1, 13, 2), float32]) -> (Tensor[(?, 13, 2), uint32],) {
  @func_1556(%var_1557) /* ty=(Tensor[(?, 13, 2), uint32],) */
}

def @func_3988(%var_3983: Tensor[(15, 8, 1), int16], %var_3984: Tensor[(15, 8, 6), int16], %var_3985: Tensor[(140), int16], %var_3986: Tensor[(405, 1), uint8], %var_3987: Tensor[(7, 4, 5), int16]) -> (Tensor[(15, 8, 6), int16], Tensor[(140), int16], Tensor[(15, 3), uint8], Tensor[(405, 1), uint8], Tensor[(7, 4, 5), float64], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32], Tensor[(7, 4, 5), int16], Tensor[(16, 10, 14), float32]) {
  %495 = fn (%var_3886: Tensor[(15, 8, 1), int16], %var_3887: Tensor[(15, 8, 6), int16], %var_3916: Tensor[(140), int16], %var_3918: Tensor[(405, 1), uint8], %var_3925: Tensor[(7, 4, 5), int16]) -> (Tensor[(15, 8, 6), int16], Tensor[(140), int16], Tensor[(15, 3), uint8], Tensor[(405, 1), uint8], Tensor[(7, 4, 5), float64], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32], Tensor[(7, 4, 5), int16], Tensor[(16, 10, 14), float32]) {
    %459 = cast(%var_3886, dtype="int16") /* ty=Tensor[(15, 8, 1), int16] */;
    %460 = cast(%var_3887, dtype="int16") /* ty=Tensor[(15, 8, 6), int16] */;
    %461 = cast(%var_3916, dtype="int16") /* ty=Tensor[(140), int16] */;
    %462 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 3), uint8] */, dtype="uint8") /* ty=Tensor[(15, 3), uint8] */;
    %463 = cast(%var_3918, dtype="uint8") /* ty=Tensor[(405, 1), uint8] */;
    %464 = reshape(%461, newshape=[7, 4, 5]) /* ty=Tensor[(7, 4, 5), int16] */;
    %465 = reshape(%462, newshape=[45]) /* ty=Tensor[(45), uint8] */;
    %466 = reshape(%463, newshape=[135, 3]) /* ty=Tensor[(135, 3), uint8] */;
    %467 = @func_3730(%464, %465, %466) /* ty=(Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) */;
    %468 = %467.0;
    %469 = cast(%var_3925, dtype="float64") /* ty=Tensor[(7, 4, 5), float64] */;
    %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %471 = cast(%468, dtype="float64") /* ty=Tensor[(7, 4, 5), float64] */;
    %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %473 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
    %474 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
    %475 = reshape(%473, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %476 = reshape(%474, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %477 = @func_2683(%475, %476) /* ty=(Tensor[(16, 10, 14), float32],) */;
    %478 = cast(%468, dtype="int16") /* ty=Tensor[(7, 4, 5), int16] */;
    %479 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 3), uint8] */, dtype="uint8") /* ty=Tensor[(15, 3), uint8] */;
    %480 = cast(%var_3918, dtype="uint8") /* ty=Tensor[(405, 1), uint8] */;
    %481 = reshape(%478, newshape=[7, 4, 5]) /* ty=Tensor[(7, 4, 5), int16] */;
    %482 = reshape(%479, newshape=[45]) /* ty=Tensor[(45), uint8] */;
    %483 = reshape(%480, newshape=[135, 3]) /* ty=Tensor[(135, 3), uint8] */;
    %484 = @func_3730(%481, %482, %483) /* ty=(Tensor[(7, 4, 5), int16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) */;
    %485 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
    %486 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 160), float32] */, dtype="float32") /* ty=Tensor[(14, 160), float32] */;
    %487 = reshape(%485, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %488 = reshape(%486, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %489 = @func_2683(%487, %488) /* ty=(Tensor[(16, 10, 14), float32],) */;
    %490 = bitwise_xor(%459, %460) /* ty=Tensor[(15, 8, 6), int16] */;
    %491 = add(%471, %472) /* ty=Tensor[(7, 4, 5), float64] */;
    %492 = %477.0;
    %493 = %484.0;
    %494 = %489.0;
    (%490, %var_3916, meta[relay.Constant][36] /* ty=Tensor[(15, 3), uint8] */, %var_3918, %491, %492, meta[relay.Constant][37] /* ty=Tensor[(14, 160), float32] */, %493, %494)
  };
  %495(%var_3983, %var_3984, %var_3985, %var_3986, %var_3987) /* ty=(Tensor[(15, 8, 6), int16], Tensor[(140), int16], Tensor[(15, 3), uint8], Tensor[(405, 1), uint8], Tensor[(7, 4, 5), float64], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32], Tensor[(7, 4, 5), int16], Tensor[(16, 10, 14), float32]) */
}

def @func_13300(%var_13299: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, ?), float64],) {
  %501 = fn (%var_13293: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, ?), float64],) {
    %496 = cast(%var_13293, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
    %497 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(10, 8, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %500 = floor_divide(%498, %499) /* ty=Tensor[(10, 8, ?), float64] */;
    (%500,)
  };
  %501(%var_13299) /* ty=(Tensor[(10, 8, ?), float64],) */
}

def @func_2817(%var_2816: Tensor[(11, 4, 3), float64]) -> Tensor[(11, 4, 3), float64] {
  %503 = fn (%var_2809: Tensor[(11, 4, 3), float64]) -> Tensor[(11, 4, 3), float64] {
    %502 = cast(%var_2809, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
    acos(%502) /* ty=Tensor[(11, 4, 3), float64] */
  };
  %503(%var_2816) /* ty=Tensor[(11, 4, 3), float64] */
}

def @func_12986(%var_12965: Tensor[(8, 11, 13), float32]) -> Tensor[(8, 11, 13), float32] {
  %504 = cast(%var_12965, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  acos(%504) /* ty=Tensor[(8, 11, 13), float32] */
}

def @func_4425(%var_4423: Tensor[(13, 8, 9), int32], %var_4424: Tensor[(13, 8, 9), int32]) -> (Tensor[(13, 8, 9), int32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16]) {
  %516 = fn (%var_4403: Tensor[(13, 8, 9), int32], %var_4404: Tensor[(13, 8, 9), int32]) -> (Tensor[(13, 8, 9), int32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16]) {
    %505 = cast(%var_4404, dtype="int32") /* ty=Tensor[(13, 8, 9), int32] */;
    %506 = shape_of(%var_4403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%var_4403, dtype="int32") /* ty=Tensor[(13, 8, 9), int32] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %509 = cast(meta[relay.Constant][39] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
    %510 = cast(meta[relay.Constant][40] /* ty=Tensor[(1024), uint16] */, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
    %511 = reshape(%509, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
    %512 = reshape(%510, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
    %513 = @func_2539(%511, %512) /* ty=(Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
    %514 = right_shift(%507, %508) /* ty=Tensor[(13, 8, 9), int32] */;
    %515 = %513.1;
    (%514, %515, meta[relay.Constant][39] /* ty=Tensor[(147), float32] */, meta[relay.Constant][40] /* ty=Tensor[(1024), uint16] */)
  };
  %516(%var_4423, %var_4424) /* ty=(Tensor[(13, 8, 9), int32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16]) */
}

def @func_10523(%var_10522: Tensor[(5, 13, 8), float32]) -> Tensor[(5, 13, 8), float32] {
  %518 = fn (%var_10516: Tensor[(5, 13, 8), float32]) -> Tensor[(5, 13, 8), float32] {
    %517 = cast(%var_10516, dtype="float32") /* ty=Tensor[(5, 13, 8), float32] */;
    asinh(%517) /* ty=Tensor[(5, 13, 8), float32] */
  };
  %518(%var_10522) /* ty=Tensor[(5, 13, 8), float32] */
}

def @func_11156(%var_11155: Tensor[(11, 13, 9), bool]) -> Tensor[(11, 13, 9), bool] {
  %521 = fn (%var_11150: Tensor[(11, 13, 9), bool]) -> Tensor[(11, 13, 9), bool] {
    %519 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 1, 9), bool] */, dtype="bool") /* ty=Tensor[(11, 1, 9), bool] */;
    %520 = cast(%var_11150, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
    logical_and(%519, %520) /* ty=Tensor[(11, 13, 9), bool] */
  };
  %521(%var_11155) /* ty=Tensor[(11, 13, 9), bool] */
}

def @func_2542(%var_2540: Tensor[(7, 7, 3), float32], %var_2541: Tensor[(1024), uint16]) -> (Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) {
  %527 = fn (%var_2486: Tensor[(7, 7, 3), float32], %var_2494: Tensor[(1024), uint16]) -> (Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) {
    %522 = cast(%var_2486, dtype="float32") /* ty=Tensor[(7, 7, 3), float32] */;
    %523 = cast(%var_2494, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
    %524 = reshape(%523, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
    %525 = sqrt(%522) /* ty=Tensor[(7, 7, 3), float32] */;
    %526 = @func_966(%524) /* ty=Tensor[(8, 8, 16), bool] */;
    (%525, %526, %var_2494)
  };
  %527(%var_2540, %var_2541) /* ty=(Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */
}

def @func_17380() -> (Tensor[(13, 4, 13), float64],) {
  %530 = fn () -> (Tensor[(13, 4, 13), float64],) {
    %528 = @func_17145() /* ty=(Tensor[(13, 4, 13), float64],) */;
    %529 = %528.0;
    (%529,)
  };
  %530() /* ty=(Tensor[(13, 4, 13), float64],) */
}

def @func_8807(%var_8805: Tensor[(16, 14, 5), float32], %var_8806: Tensor[(16, 14, 5), float32]) -> (Tensor[(16, 14, 5), float32],) {
  %536 = fn (%var_8799: Tensor[(16, 14, 5), float32], %var_8800: Tensor[(16, 14, 5), float32]) -> (Tensor[(16, 14, 5), float32],) {
    %531 = cast(%var_8800, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
    %532 = shape_of(%var_8799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%var_8799, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %535 = mod(%533, %534) /* ty=Tensor[(16, 14, 5), float32] */;
    (%535,)
  };
  %536(%var_8805, %var_8806) /* ty=(Tensor[(16, 14, 5), float32],) */
}

def @func_2149(%var_2147: Tensor[(14, 3, 4), float64], %var_2148: Tensor[(1024), uint16]) -> (Tensor[(14, 3, 4), bool], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(1512), uint64]) {
  @func_2145(%var_2147, %var_2148) /* ty=(Tensor[(14, 3, 4), bool], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(1512), uint64]) */
}

def @func_4073(%var_4068: Tensor[(16, 15, 5), int32], %var_4069: Tensor[(16, 15, 5), int32], %var_4070: Tensor[(1024), uint16], %var_4071: Tensor[(135, 3), uint8], %var_4072: Tensor[(945), float32]) -> (Tensor[(16, 15, 5), int32], Tensor[(12, 14, 9), uint64], Tensor[(1512, 1), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) {
  %557 = fn (%var_4037: Tensor[(16, 15, 5), int32], %var_4038: Tensor[(16, 15, 5), int32], %var_4060: Tensor[(1024), uint16], %var_4064: Tensor[(135, 3), uint8], %var_4065: Tensor[(945), float32]) -> (Tensor[(16, 15, 5), int32], Tensor[(12, 14, 9), uint64], Tensor[(1512, 1), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) {
    %537 = cast(%var_4038, dtype="int32") /* ty=Tensor[(16, 15, 5), int32] */;
    %538 = shape_of(%var_4037, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%var_4037, dtype="int32") /* ty=Tensor[(16, 15, 5), int32] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %541 = cast(meta[relay.Constant][42] /* ty=Tensor[(1512, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1512, 1), uint64] */;
    %542 = reshape(%541, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), uint64] */;
    %543 = @func_1436(%542) /* ty=(Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
    %544 = cast(%var_4060, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
    %545 = reshape(%544, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
    %546 = cast(meta[relay.Constant][43] /* ty=Tensor[(45), uint8] */, dtype="uint8") /* ty=Tensor[(45), uint8] */;
    %547 = cast(%var_4064, dtype="uint8") /* ty=Tensor[(135, 3), uint8] */;
    %548 = cast(%var_4065, dtype="float32") /* ty=Tensor[(945), float32] */;
    %549 = reshape(%546, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
    %550 = reshape(%547, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
    %551 = reshape(%548, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %552 = @func_1712(%549, %550, %551) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %553 = add(%539, %540) /* ty=Tensor[(16, 15, 5), int32] */;
    %554 = %543.0;
    %555 = @func_966(%545) /* ty=Tensor[(8, 8, 16), bool] */;
    %556 = %552.1;
    (%553, %554, meta[relay.Constant][42] /* ty=Tensor[(1512, 1), uint64] */, %555, %var_4060, %556, meta[relay.Constant][43] /* ty=Tensor[(45), uint8] */, %var_4064, %var_4065)
  };
  %557(%var_4068, %var_4069, %var_4070, %var_4071, %var_4072) /* ty=(Tensor[(16, 15, 5), int32], Tensor[(12, 14, 9), uint64], Tensor[(1512, 1), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(15, 9, 7), float64], Tensor[(45), uint8], Tensor[(135, 3), uint8], Tensor[(945), float32]) */
}

def @func_12122(%var_12120: uint64, %var_12121: Tensor[(4, 10, 10), uint64]) -> Tensor[(4, 10, 10), uint64] {
  @func_12118(%var_12120, %var_12121) /* ty=Tensor[(4, 10, 10), uint64] */
}

def @func_15543(%var_15492: Tensor[(16, 14, 6), float32], %var_15530: Tensor[(6, 64), uint16], %var_15533: Tensor[(945), float32]) -> (Tensor[(16, 14, 6), float64], Tensor[(16, 14, 6), float32], Tensor[(3, 1, 15), uint8], uint8, Tensor[(6, 16, 4), bool], Tensor[(6, 64), uint16], Tensor[(539), float32], Tensor[(14), int64], Tensor[(945), float32]) {
  %558 = cast(%var_15492, dtype="float32") /* ty=Tensor[(16, 14, 6), float32] */;
  %559 = cos(%558) /* ty=Tensor[(16, 14, 6), float32] */;
  %560 = cast(%var_15492, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %564 = cast(%559, dtype="float32") /* ty=Tensor[(16, 14, 6), float32] */;
  %565 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %566 = reshape(%565, newshape=[]) /* ty=uint8 */;
  %567 = @func_7838(%566) /* ty=(Tensor[(3, 1, 15), uint8],) */;
  %568 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint16") /* ty=uint16 */;
  %569 = cast(%var_15530, dtype="uint16") /* ty=Tensor[(6, 64), uint16] */;
  %570 = cast(meta[relay.Constant][45] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %571 = cast(meta[relay.Constant][46] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %572 = cast(%var_15533, dtype="float32") /* ty=Tensor[(945), float32] */;
  %573 = reshape(%568, newshape=[]) /* ty=uint16 */;
  %574 = reshape(%569, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), uint16] */;
  %575 = reshape(%570, newshape=[11, 49]) /* ty=Tensor[(11, 49), float32] */;
  %576 = reshape(%571, newshape=[1, 14]) /* ty=Tensor[(1, 14), int64] */;
  %577 = reshape(%572, newshape=[945]) /* ty=Tensor[(945), float32] */;
  %578 = @func_11738(%573, %574, %575, %576, %577) /* ty=(Tensor[(6, 16, 4), uint16], Tensor[(7, 11, 7), float32], Tensor[(6, 16, 4), bool], Tensor[(11, 49), int32], Tensor[(15, 9, 7), float64], Tensor[(1, 14), int64], Tensor[(945), float32], Tensor[(11, 49), bool]) */;
  %579 = floor_mod(%562, %563) /* ty=Tensor[(16, 14, 6), float64] */;
  %580 = asinh(%564) /* ty=Tensor[(16, 14, 6), float32] */;
  %581 = %567.0;
  %582 = %578.2;
  (%579, %580, %581, meta[relay.Constant][44] /* ty=uint8 */, %582, %var_15530, meta[relay.Constant][45] /* ty=Tensor[(539), float32] */, meta[relay.Constant][46] /* ty=Tensor[(14), int64] */, %var_15533)
}

def @func_7453(%var_7451: Tensor[(6, 3, 5), uint64], %var_7452: Tensor[(6, 3, 5), uint64]) -> Tensor[(6, 3, 5), uint64] {
  @func_7449(%var_7451, %var_7452) /* ty=Tensor[(6, 3, 5), uint64] */
}

def @func_10422(%var_10405: Tensor[(6, 6, 9), float32], %var_10409: Tensor[(90), uint64]) -> (Tensor[(6, 6, 9), float32], Tensor[(6, 3, 5), uint64], Tensor[(90), uint64]) {
  %583 = cast(%var_10405, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  %584 = cast(%var_10409, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %585 = cast(%var_10409, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %586 = reshape(%584, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %587 = reshape(%585, newshape=[6, 3, 5]) /* ty=Tensor[(6, 3, 5), uint64] */;
  %588 = log10(%583) /* ty=Tensor[(6, 6, 9), float32] */;
  %589 = @func_7449(%586, %587) /* ty=Tensor[(6, 3, 5), uint64] */;
  (%588, %589, %var_10409)
}

def @func_2145(%var_2113: Tensor[(14, 3, 4), float64], %var_2122: Tensor[(1024), uint16]) -> (Tensor[(14, 3, 4), bool], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(1512), uint64]) {
  %590 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 3, 4), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 4), bool] */;
  %591 = shape_of(%var_2113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%var_2113, dtype="bool") /* ty=Tensor[(14, 3, 4), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = cast(%var_2122, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %595 = reshape(%594, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %596 = cast(meta[relay.Constant][48] /* ty=Tensor[(1512), uint64] */, dtype="uint64") /* ty=Tensor[(1512), uint64] */;
  %597 = reshape(%596, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), uint64] */;
  %598 = @func_1436(%597) /* ty=(Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %599 = less_equal(%592, %593) /* ty=Tensor[(14, 3, 4), bool] */;
  %600 = @func_966(%595) /* ty=Tensor[(8, 8, 16), bool] */;
  %601 = %598.1;
  (%599, %600, %var_2122, %601, meta[relay.Constant][48] /* ty=Tensor[(1512), uint64] */)
}

def @func_7838(%var_7821: uint8) -> (Tensor[(3, 1, 15), uint8],) {
  %602 = cast(%var_7821, dtype="uint8") /* ty=uint8 */;
  %603 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 1, 15), uint8] */, dtype="uint8") /* ty=Tensor[(3, 1, 15), uint8] */;
  %604 = right_shift(%602, %603) /* ty=Tensor[(3, 1, 15), uint8] */;
  (%604,)
}

def @func_11695(%var_11692: Tensor[(16, 7, 11), int8], %var_11693: Tensor[(5, 8, 3), int8], %var_11694: Tensor[(2, 468), int32]) -> (Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) {
  @func_11690(%var_11692, %var_11693, %var_11694) /* ty=(Tensor[(5, 8, 3), float64], Tensor[(5, 8, 3), float64], Tensor[(16, 7, 11), bool], Tensor[(13, 8, 9), int32], Tensor[(2, 468), int32]) */
}

def @func_5347(%var_5345: Tensor[(7, 7, 4), float64]) -> (Tensor[(7, 7, 4), float64],) {
  @func_5344(%var_5345) /* ty=(Tensor[(7, 7, 4), float64],) */
}

def @func_12218(%var_12216: int32, %var_12217: Tensor[(1, 5, 1), int32]) -> Tensor[(1, 5, 1), int32] {
  @func_12214(%var_12216, %var_12217) /* ty=Tensor[(1, 5, 1), int32] */
}

def @func_16955() -> Tensor[(13, 4, 13), int16] {
  %605 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %605.0
}

def @func_17187() -> Tensor[(13, 4, 13), float64] {
  %606 = @func_16975() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %607 = %606.0;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  log2(%608) /* ty=Tensor[(13, 4, 13), float64] */
}

def @func_17445(%var_17443: Tensor[(945), float32], %var_17444: Tensor[(539), float32]) -> (Tensor[(13, 4, 13), float32], Tensor[(945), int8], Tensor[(945), float32], Tensor[(539), float32]) {
  @func_17441(%var_17443, %var_17444) /* ty=(Tensor[(13, 4, 13), float32], Tensor[(945), int8], Tensor[(945), float32], Tensor[(539), float32]) */
}

def @func_15926(%var_15925: Tensor[(1, 14, 3), float64]) -> Tensor[(1, 14, 3), float64] {
  %610 = fn (%var_15921: Tensor[(1, 14, 3), float64]) -> Tensor[(1, 14, 3), float64] {
    %609 = cast(%var_15921, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
    log2(%609) /* ty=Tensor[(1, 14, 3), float64] */
  };
  %610(%var_15925) /* ty=Tensor[(1, 14, 3), float64] */
}

def @func_17979(%var_17977: Tensor[(7, 15, 11), float32], %var_17978: Tensor[(945), float32]) -> (Tensor[(7, 15, 11), float32], Tensor[(5, 13, 8), float32], Tensor[(520), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32], Tensor[(7, 15, 11), float32], Tensor[(13, 4, 13), float64]) {
  %625 = fn (%var_17939: Tensor[(7, 15, 11), float32], %var_17947: Tensor[(945), float32]) -> (Tensor[(7, 15, 11), float32], Tensor[(5, 13, 8), float32], Tensor[(520), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32], Tensor[(7, 15, 11), float32], Tensor[(13, 4, 13), float64]) {
    %611 = cast(%var_17939, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
    %612 = cast(meta[relay.Constant][50] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %613 = reshape(%612, newshape=[5, 13, 8]) /* ty=Tensor[(5, 13, 8), float32] */;
    %614 = cast(%var_17947, dtype="float32") /* ty=Tensor[(945), float32] */;
    %615 = reshape(%614, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), float32] */;
    %616 = @func_709(%615) /* ty=(Tensor[(15, 9, 7), float64],) */;
    %617 = cast(%var_17939, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
    %618 = atan(%617) /* ty=Tensor[(7, 15, 11), float64] */;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
    %620 = atanh(%611) /* ty=Tensor[(7, 15, 11), float32] */;
    %621 = @func_10521(%613) /* ty=Tensor[(5, 13, 8), float32] */;
    %622 = %616.0;
    %623 = sqrt(%619) /* ty=Tensor[(7, 15, 11), float32] */;
    %624 = @func_17187() /* ty=Tensor[(13, 4, 13), float64] */;
    (%620, %621, meta[relay.Constant][50] /* ty=Tensor[(520), float32] */, %622, %var_17947, %623, %624)
  };
  %625(%var_17977, %var_17978) /* ty=(Tensor[(7, 15, 11), float32], Tensor[(5, 13, 8), float32], Tensor[(520), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32], Tensor[(7, 15, 11), float32], Tensor[(13, 4, 13), float64]) */
}

def @func_11763(%var_11761: Tensor[(5, 2, 16), uint64], %var_11762: Tensor[(5, 2, 16), uint64]) -> (Tensor[(5, 2, 16), uint32],) {
  %636 = fn (%var_11751: Tensor[(5, 2, 16), uint64], %var_11752: Tensor[(5, 2, 16), uint64]) -> (Tensor[(5, 2, 16), uint32],) {
    %626 = cast(%var_11752, dtype="uint64") /* ty=Tensor[(5, 2, 16), uint64] */;
    %627 = shape_of(%var_11751, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%var_11751, dtype="uint64") /* ty=Tensor[(5, 2, 16), uint64] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %630 = logical_xor(%628, %629) /* ty=Tensor[(5, 2, 16), uint64] */;
    %631 = cast(%630, dtype="uint32") /* ty=Tensor[(5, 2, 16), uint32] */;
    %632 = shape_of(%var_11751, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%var_11751, dtype="uint32") /* ty=Tensor[(5, 2, 16), uint32] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %635 = add(%633, %634) /* ty=Tensor[(5, 2, 16), uint32] */;
    (%635,)
  };
  %636(%var_11761, %var_11762) /* ty=(Tensor[(5, 2, 16), uint32],) */
}

def @func_17753() -> (Tensor[(13, 4, 13), int16],) {
  %637 = @func_16975() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %638 = %637.0;
  (%638,)
}

def @func_17816() -> (Tensor[(13, 4, 13), int16],) {
  %640 = fn () -> (Tensor[(13, 4, 13), int16],) {
    %639 = @func_17463() /* ty=Tensor[(13, 4, 13), int16] */;
    (%639,)
  };
  %640() /* ty=(Tensor[(13, 4, 13), int16],) */
}

def @func_17552() -> Tensor[(13, 4, 13), float64] {
  %643 = fn () -> Tensor[(13, 4, 13), float64] {
    %641 = @func_17187() /* ty=Tensor[(13, 4, 13), float64] */;
    %642 = cast(%641, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
    atan(%642) /* ty=Tensor[(13, 4, 13), float64] */
  };
  %643() /* ty=Tensor[(13, 4, 13), float64] */
}

def @func_2687(%var_2685: Tensor[(16, 10, 14), float32], %var_2686: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  @func_2683(%var_2685, %var_2686) /* ty=(Tensor[(16, 10, 14), float32],) */
}

def @func_7841(%var_7839: uint8) -> (Tensor[(3, 1, 15), uint8],) {
  @func_7838(%var_7839) /* ty=(Tensor[(3, 1, 15), uint8],) */
}

def @func_1436(%var_1414: Tensor[(12, 14, 9), uint64]) -> (Tensor[(12, 14, 9), uint64], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) {
  %644 = cast(%var_1414, dtype="uint64") /* ty=Tensor[(12, 14, 9), uint64] */;
  %645 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(12, 14, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 14, 9), uint64] */, dtype="uint64") /* ty=Tensor[(12, 14, 9), uint64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %648 = cast(meta[relay.Constant][52] /* ty=Tensor[(1024), uint16] */, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %649 = reshape(%648, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %650 = bitwise_or(%646, %647) /* ty=Tensor[(12, 14, 9), uint64] */;
  %651 = @func_966(%649) /* ty=Tensor[(8, 8, 16), bool] */;
  (%650, %651, meta[relay.Constant][52] /* ty=Tensor[(1024), uint16] */)
}

def @func_712(%var_710: Tensor[(15, 9, 7), float32]) -> (Tensor[(15, 9, 7), float64],) {
  @func_709(%var_710) /* ty=(Tensor[(15, 9, 7), float64],) */
}

def @func_17713() -> (Tensor[(60), float64], Tensor[(26), float32], Tensor[(?, 13, 2), float64]) {
  %652 = @func_17056() /* ty=(Tensor[(13, 4, 13), int16], Tensor[(16, 10, 14), float32], Tensor[(60), float64], Tensor[(900, 2), float64], Tensor[(11, 49), float32]) */;
  %653 = cast(meta[relay.Constant][53] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %654 = reshape(%653, newshape=[1, 13, 2]) /* ty=Tensor[(1, 13, 2), float32] */;
  %655 = @func_1556(%654) /* ty=(Tensor[(?, 13, 2), uint32],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(?, 13, 2), float64] */;
  %658 = %652.2;
  %659 = acos(%657) /* ty=Tensor[(?, 13, 2), float64] */;
  (%658, meta[relay.Constant][53] /* ty=Tensor[(26), float32] */, %659)
}

def @func_12349(%var_12336: Tensor[(10, 3, 16), uint64], %var_12337: Tensor[(10, 3, 16), uint64]) -> Tensor[(10, 3, 16), bool] {
  %660 = cast(%var_12337, dtype="bool") /* ty=Tensor[(10, 3, 16), bool] */;
  %661 = shape_of(%var_12336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_12336, dtype="bool") /* ty=Tensor[(10, 3, 16), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%662, %663) /* ty=Tensor[(10, 3, 16), bool] */
}

def @func_14885(%var_14877: Tensor[(1, 6, 7), uint32], %var_14878: Tensor[(3, 6, 7), uint32], %var_14879: Tensor[(48), int32], %var_14880: Tensor[(2, 512), uint16], %var_14881: Tensor[(1144), float32], %var_14882: Tensor[(896), float64], %var_14883: uint64, %var_14884: Tensor[(405), uint8]) -> (Tensor[(1024), uint16], Tensor[(48), int32], Tensor[(2, 512), uint16], Tensor[(945), float32], Tensor[(8, 11, 13), float32], Tensor[(1144), float32], Tensor[(14, 4, 16), float64], Tensor[(896), float64], Tensor[(4, 10, 10), uint64], Tensor[(8, 50), uint64], Tensor[(3, 6, 7), bool], Tensor[(945), float32], Tensor[(45, 1), uint8], Tensor[(405), uint8]) {
  %700 = fn (%var_14799: Tensor[(1, 6, 7), uint32], %var_14800: Tensor[(3, 6, 7), uint32], %var_14811: Tensor[(48), int32], %var_14812: Tensor[(2, 512), uint16], %var_14821: Tensor[(1144), float32], %var_14839: Tensor[(896), float64], %var_14860: uint64, %var_14873: Tensor[(405), uint8]) -> (Tensor[(1024), uint16], Tensor[(48), int32], Tensor[(2, 512), uint16], Tensor[(945), float32], Tensor[(8, 11, 13), float32], Tensor[(1144), float32], Tensor[(14, 4, 16), float64], Tensor[(896), float64], Tensor[(4, 10, 10), uint64], Tensor[(8, 50), uint64], Tensor[(3, 6, 7), bool], Tensor[(945), float32], Tensor[(45, 1), uint8], Tensor[(405), uint8]) {
    %664 = cast(%var_14811, dtype="int32") /* ty=Tensor[(48), int32] */;
    %665 = cast(%var_14812, dtype="uint16") /* ty=Tensor[(2, 512), uint16] */;
    %666 = cast(meta[relay.Constant][54] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
    %667 = reshape(%664, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), int32] */;
    %668 = reshape(%665, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
    %669 = reshape(%666, newshape=[1, 945]) /* ty=Tensor[(1, 945), float32] */;
    %670 = @func_13911(%667, %668, %669) /* ty=(Tensor[(3, 1, 15), uint8], Tensor[(112), float64], Tensor[(1024), uint16], Tensor[(945), float32], Tensor[(14, 1), int64], Tensor[(1, 945), float32], Tensor[(?, 12, 4), uint16], Tensor[(12, 14, 9), uint64], Tensor[(1512), uint64], Tensor[(?, 12, 4), uint64]) */;
    %671 = cast(%var_14821, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %672 = reshape(%671, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float32] */;
    %673 = cast(%var_14839, dtype="float64") /* ty=Tensor[(896), float64] */;
    %674 = reshape(%673, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
    %675 = @func_14049(%674) /* ty=(Tensor[(14, 4, 16), float64],) */;
    %676 = cast(%var_14860, dtype="uint64") /* ty=uint64 */;
    %677 = cast(meta[relay.Constant][55] /* ty=Tensor[(8, 50), uint64] */, dtype="uint64") /* ty=Tensor[(8, 50), uint64] */;
    %678 = reshape(%676, newshape=[]) /* ty=uint64 */;
    %679 = reshape(%677, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), uint64] */;
    %680 = cast(%var_14799, dtype="uint32") /* ty=Tensor[(1, 6, 7), uint32] */;
    %681 = cast(%var_14800, dtype="uint32") /* ty=Tensor[(3, 6, 7), uint32] */;
    %682 = bitwise_or(%680, %681) /* ty=Tensor[(3, 6, 7), uint32] */;
    %683 = cast(%682, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
    %684 = log2(%683) /* ty=Tensor[(3, 6, 7), float32] */;
    %685 = cast(%684, dtype="bool") /* ty=Tensor[(3, 6, 7), bool] */;
    %686 = cast(%var_14860, dtype="bool") /* ty=bool */;
    %687 = cast(meta[relay.Constant][56] /* ty=Tensor[(45, 1), uint8] */, dtype="uint8") /* ty=Tensor[(45, 1), uint8] */;
    %688 = cast(%var_14873, dtype="uint8") /* ty=Tensor[(405), uint8] */;
    %689 = cast(meta[relay.Constant][54] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
    %690 = reshape(%687, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), uint8] */;
    %691 = reshape(%688, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), uint8] */;
    %692 = reshape(%689, newshape=[945]) /* ty=Tensor[(945), float32] */;
    %693 = @func_1712(%690, %691, %692) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(15, 9, 7), float64], Tensor[(945), float32]) */;
    %694 = %670.2;
    %695 = @func_12986(%672) /* ty=Tensor[(8, 11, 13), float32] */;
    %696 = %675.0;
    %697 = @func_12118(%678, %679) /* ty=Tensor[(4, 10, 10), uint64] */;
    %698 = less_equal(%685, %686) /* ty=Tensor[(3, 6, 7), bool] */;
    %699 = %693.2;
    (%694, %var_14811, %var_14812, meta[relay.Constant][54] /* ty=Tensor[(945), float32] */, %695, %var_14821, %696, %var_14839, %697, meta[relay.Constant][55] /* ty=Tensor[(8, 50), uint64] */, %698, %699, meta[relay.Constant][56] /* ty=Tensor[(45, 1), uint8] */, %var_14873)
  };
  %700(%var_14877, %var_14878, %var_14879, %var_14880, %var_14881, %var_14882, %var_14883, %var_14884) /* ty=(Tensor[(1024), uint16], Tensor[(48), int32], Tensor[(2, 512), uint16], Tensor[(945), float32], Tensor[(8, 11, 13), float32], Tensor[(1144), float32], Tensor[(14, 4, 16), float64], Tensor[(896), float64], Tensor[(4, 10, 10), uint64], Tensor[(8, 50), uint64], Tensor[(3, 6, 7), bool], Tensor[(945), float32], Tensor[(45, 1), uint8], Tensor[(405), uint8]) */
}

def @func_2683(%var_2676: Tensor[(16, 10, 14), float32], %var_2677: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  %701 = cast(%var_2677, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %702 = shape_of(%var_2676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%var_2676, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %705 = floor_mod(%703, %704) /* ty=Tensor[(16, 10, 14), float32] */;
  (%705,)
}

def @func_16654() -> (Tensor[(13, 4, 13), int16],) {
  %713 = fn () -> (Tensor[(13, 4, 13), int16],) {
    %706 = cast(meta[relay.Constant][57] /* ty=Tensor[(13, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
    %707 = log10(%706) /* ty=Tensor[(13, 4, 13), float64] */;
    %708 = cast(meta[relay.Constant][57] /* ty=Tensor[(13, 4, 13), float64] */, dtype="int16") /* ty=Tensor[(13, 4, 13), int16] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="int16") /* ty=Tensor[(13, 4, 13), int16] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %712 = logical_xor(%710, %711) /* ty=Tensor[(13, 4, 13), int16] */;
    (%712,)
  };
  %713() /* ty=(Tensor[(13, 4, 13), int16],) */
}

def @func_7449(%var_7444: Tensor[(6, 3, 5), uint64], %var_7445: Tensor[(6, 3, 5), uint64]) -> Tensor[(6, 3, 5), uint64] {
  %714 = cast(%var_7445, dtype="uint64") /* ty=Tensor[(6, 3, 5), uint64] */;
  %715 = shape_of(%var_7444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_7444, dtype="uint64") /* ty=Tensor[(6, 3, 5), uint64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%716, %717) /* ty=Tensor[(6, 3, 5), uint64] */
}

def @func_7934(%var_7868: Tensor[(14, 2, 4), float64], %var_7885: Tensor[(1024), uint16]) -> (Tensor[(14, 2, 4), float32], Tensor[(8, 8, 16), bool], Tensor[(147), float32], Tensor[(1024), uint16], Tensor[(8, 8, 16), bool], Tensor[(3, 1, 15), uint8], uint8, Tensor[(8, 8, 16), bool]) {
  %718 = cast(%var_7868, dtype="float64") /* ty=Tensor[(14, 2, 4), float64] */;
  %719 = cos(%718) /* ty=Tensor[(14, 2, 4), float64] */;
  %720 = cast(%var_7868, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="float32") /* ty=Tensor[(14, 2, 4), float32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %724 = cast(meta[relay.Constant][58] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %725 = cast(%var_7885, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %726 = reshape(%724, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %727 = reshape(%725, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %728 = @func_2539(%726, %727) /* ty=(Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %729 = %728.1;
  %730 = cast(%729, dtype="uint16") /* ty=Tensor[(8, 8, 16), uint16] */;
  %731 = reshape(%730, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), uint16] */;
  %732 = cast(meta[relay.Constant][59] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %733 = reshape(%732, newshape=[]) /* ty=uint8 */;
  %734 = @func_7838(%733) /* ty=(Tensor[(3, 1, 15), uint8],) */;
  %735 = cast(meta[relay.Constant][58] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %736 = cast(%var_7885, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %737 = reshape(%735, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %738 = reshape(%736, newshape=[1024]) /* ty=Tensor[(1024), uint16] */;
  %739 = @func_2539(%737, %738) /* ty=(Tensor[(7, 7, 3), float32], Tensor[(8, 8, 16), bool], Tensor[(1024), uint16]) */;
  %740 = floor_mod(%722, %723) /* ty=Tensor[(14, 2, 4), float32] */;
  %741 = @func_966(%731) /* ty=Tensor[(8, 8, 16), bool] */;
  %742 = %734.0;
  %743 = %739.1;
  (%740, %729, meta[relay.Constant][58] /* ty=Tensor[(147), float32] */, %var_7885, %741, %742, meta[relay.Constant][59] /* ty=uint8 */, %743)
}

def @func_17057() -> (Tensor[(13, 4, 13), int16], Tensor[(16, 10, 14), float32], Tensor[(60), float64], Tensor[(900, 2), float64], Tensor[(11, 49), float32]) {
  %754 = fn () -> (Tensor[(13, 4, 13), int16], Tensor[(16, 10, 14), float32], Tensor[(60), float64], Tensor[(900, 2), float64], Tensor[(11, 49), float32]) {
    %744 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
    %745 = cast(meta[relay.Constant][60] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %746 = cast(meta[relay.Constant][61] /* ty=Tensor[(900, 2), float64] */, dtype="float64") /* ty=Tensor[(900, 2), float64] */;
    %747 = cast(meta[relay.Constant][62] /* ty=Tensor[(11, 49), float32] */, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
    %748 = reshape(%745, newshape=[1, 4, 15]) /* ty=Tensor[(1, 4, 15), float64] */;
    %749 = reshape(%746, newshape=[450, 4]) /* ty=Tensor[(450, 4), float64] */;
    %750 = reshape(%747, newshape=[539]) /* ty=Tensor[(539), float32] */;
    %751 = @func_11348(%748, %749, %750) /* ty=(Tensor[(?, 4, 15), uint64], Tensor[(539), float32], Tensor[(450, 4), float64], Tensor[(539), float32], Tensor[(16, 10, 14), float32], Tensor[(14, 160), float32]) */;
    %752 = %744.0;
    %753 = %751.4;
    (%752, %753, meta[relay.Constant][60] /* ty=Tensor[(60), float64] */, meta[relay.Constant][61] /* ty=Tensor[(900, 2), float64] */, meta[relay.Constant][62] /* ty=Tensor[(11, 49), float32] */)
  };
  %754() /* ty=(Tensor[(13, 4, 13), int16], Tensor[(16, 10, 14), float32], Tensor[(60), float64], Tensor[(900, 2), float64], Tensor[(11, 49), float32]) */
}

def @func_17463() -> Tensor[(13, 4, 13), int16] {
  %755 = @func_16653() /* ty=(Tensor[(13, 4, 13), int16],) */;
  %755.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen659/build/output.py", line 1487, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:46:25] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

