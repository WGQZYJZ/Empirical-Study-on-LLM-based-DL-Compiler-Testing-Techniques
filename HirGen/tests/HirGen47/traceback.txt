==========mod==========
#[version = "0.0.5"]
def @func_3153(%var_3127: Tensor[(1536), int32]) -> (Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) {
  %0 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %1 = %0.5;
  %2 = cast(%var_3127, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %4 = cast(%1, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?), int64] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %8 = reshape(%6, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %9 = reshape(%7, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %10 = @func_2981(%8, %9) /* ty=(Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) */;
  %11 = cast(%1, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %12 = shape_of(%var_3127, dtype="int32") /* ty=Tensor[(1), int32] */;
  %13 = cast(%var_3127, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %15 = subtract(%4, %5) /* ty=Tensor[(1536), int64] */;
  %16 = cast(%15, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %17 = reshape(%16, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
  %18 = @func_63(%17) /* ty=(Tensor[(16, 12, 8), bool],) */;
  %19 = %10.1;
  %20 = right_shift(%13, %14) /* ty=Tensor[(1536), uint64] */;
  %21 = %18.0;
  (%15, %19, meta[relay.Constant][0] /* ty=Tensor[(320), float32] */, %20, %21)
}

def @func_1383() -> Tensor[(1, 3), float32] {
  %22 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %22.0
}

def @func_4047() -> Tensor[(?, 3), int16] {
  %23 = @func_2770() /* ty=(Tensor[(?, 3), int16], Tensor[(?, 3), int16]) */;
  %23.1
}

def @func_5202() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
  %24 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
  %25 = @func_4796() /* ty=(Tensor[(9, 3, 11), uint32],) */;
  %26 = %24.0;
  %27 = %25.0;
  (%26, %27)
}

def @func_7399(%var_7365: Tensor[(520, 1), float64]) -> (Tensor[(12, 10, ?), float64], Tensor[(520, 1536), int16], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) {
  %28 = @func_3680() /* ty=Tensor[(12, 10, ?), bool] */;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
  %30 = cast(%var_7365, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %31 = cast(%var_7365, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %32 = reshape(%30, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %33 = reshape(%31, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %34 = @func_4851(%32, %33) /* ty=(Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) */;
  %35 = %34.1;
  %36 = cast(%35, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %37 = cast(%var_7365, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %38 = logical_or(%36, %37) /* ty=Tensor[(520, 1536), bool] */;
  %39 = cast(%38, dtype="int16") /* ty=Tensor[(520, 1536), int16] */;
  %40 = cast(%var_7365, dtype="int16") /* ty=Tensor[(520, 1), int16] */;
  %41 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %42 = sqrt(%29) /* ty=Tensor[(12, 10, ?), float64] */;
  %43 = logical_xor(%39, %40) /* ty=Tensor[(520, 1536), int16] */;
  %44 = @func_7236() /* ty=Tensor[(1, 3), float32] */;
  %45 = %41.0;
  (%42, %43, %44, %45)
}

def @func_8064() -> (Tensor[(2, 160), float32],) {
  %46 = @func_3760() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) */;
  %47 = %46.3;
  (%47,)
}

def @func_6144() -> (Tensor[(1, 3), float32], Tensor[(12, 10, ?), int16]) {
  %48 = @func_5511() /* ty=Tensor[(12, 10, ?), float64] */;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(12, 10, ?), float32] */;
  %50 = asinh(%49) /* ty=Tensor[(12, 10, ?), float32] */;
  %51 = cast(%48, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %55 = floor_mod(%53, %54) /* ty=Tensor[(12, 10, ?), float64] */;
  %56 = cast(%55, dtype="int16") /* ty=Tensor[(12, 10, ?), int16] */;
  %57 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%50, dtype="int16") /* ty=Tensor[(12, 10, ?), int16] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %60 = @func_4012() /* ty=Tensor[(1, 3), float32] */;
  %61 = minimum(%58, %59) /* ty=Tensor[(12, 10, ?), int16] */;
  (%60, %61)
}

def @func_1094() -> (Tensor[(1, 3), float32],) {
  %62 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %63 = %62.1;
  (%63,)
}

def @func_4116() -> Tensor[(?, 3), int16] {
  @func_4047() /* ty=Tensor[(?, 3), int16] */
}

def @func_7662() -> (Tensor[(9, 3, 11), uint64],) {
  %64 = @func_5202() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %65 = %64.1;
  %66 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 3, 11), uint32] */, dtype="uint64") /* ty=Tensor[(9, 3, 11), uint64] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="uint64") /* ty=Tensor[(9, 3, 11), uint64] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %70 = logical_xor(%68, %69) /* ty=Tensor[(9, 3, 11), uint64] */;
  (%70,)
}

def @func_6373(%var_6362: uint64, %var_6363: Tensor[(20), uint64], %var_6368: Tensor[(2912), float64]) -> (Tensor[(1536), float64], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64], Tensor[(9, 3, 11), float32], Tensor[(2912), float64]) {
  %71 = @func_3696() /* ty=(Tensor[(1536), float64],) */;
  %72 = cast(%var_6362, dtype="uint64") /* ty=uint64 */;
  %73 = cast(%var_6363, dtype="uint64") /* ty=Tensor[(20), uint64] */;
  %74 = reshape(%72, newshape=[]) /* ty=uint64 */;
  %75 = reshape(%73, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint64] */;
  %76 = @func_3384(%74, %75) /* ty=(Tensor[(1, 5, 4), uint64],) */;
  %77 = cast(%var_6368, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %78 = reshape(%77, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %79 = @func_3089(%78) /* ty=(Tensor[(14, 16, 13), float64], Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), uint32], Tensor[(9, 3, 11), float64]) */;
  %80 = %71.0;
  %81 = %76.0;
  %82 = %79.1;
  (%80, %81, %var_6362, %var_6363, %82, %var_6368)
}

def @func_4437() -> (Tensor[(1, 3), float32],) {
  %83 = @func_2058() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %84 = %83.1;
  (%84,)
}

def @func_7032(%var_7008: Tensor[(15, 1, 3), uint32], %var_7009: Tensor[(15, 11, 3), uint32]) -> (Tensor[(15, 11, 3), float64], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16], Tensor[(10, 12, ?), bool], Tensor[(3, 40), float32]) {
  %85 = cast(%var_7008, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
  %86 = cast(%var_7009, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %87 = less_equal(%85, %86) /* ty=Tensor[(15, 11, 3), bool] */;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
  %89 = cast(%var_7008, dtype="float64") /* ty=Tensor[(15, 1, 3), float64] */;
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(840), uint16] */, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %91 = cast(meta[relay.Constant][2] /* ty=Tensor[(840), uint16] */, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %92 = reshape(%90, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %93 = reshape(%91, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %94 = @func_2673(%92, %93) /* ty=(Tensor[(12, 5, 14), uint64],) */;
  %95 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 40), float32] */, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
  %96 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 40), float32] */, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
  %97 = reshape(%95, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %98 = reshape(%96, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %99 = power(%88, %89) /* ty=Tensor[(15, 11, 3), float64] */;
  %100 = %94.0;
  %101 = @func_4592(%97, %98) /* ty=Tensor[(10, 12, ?), bool] */;
  (%99, %100, meta[relay.Constant][2] /* ty=Tensor[(840), uint16] */, %101, meta[relay.Constant][3] /* ty=Tensor[(3, 40), float32] */)
}

def @func_5775() -> (Tensor[(1, 3), float32], Tensor[(?, 3), int16]) {
  %102 = @func_5202() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %103 = %102.0;
  %104 = @func_1898() /* ty=Tensor[(?, 3), int16] */;
  (%103, %104)
}

def @func_3327() -> Tensor[(1536), int32] {
  %105 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %105.1
}

def @func_7693() -> Tensor[(1, 3), float32] {
  %106 = @func_5369() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) */;
  %106.0
}

def @func_7973(%var_7959: Tensor[(14, 16, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %107 = cast(%var_7959, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %108 = @func_4277() /* ty=(Tensor[(1, 3), float32],) */;
  %109 = @func_4437() /* ty=(Tensor[(1, 3), float32],) */;
  %110 = log2(%107) /* ty=Tensor[(14, 16, 2), float32] */;
  %111 = %108.0;
  %112 = %109.0;
  (%110, %111, %112)
}

def @func_3089(%var_3052: Tensor[(14, 16, 13), float64]) -> (Tensor[(14, 16, 13), float64], Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), uint32], Tensor[(9, 3, 11), float64]) {
  %113 = cast(%var_3052, dtype="float64") /* ty=Tensor[(14, 16, 13), float64] */;
  %114 = @func_2647() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) */;
  %115 = %114.0;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %117 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %118 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
  %119 = erf(%113) /* ty=Tensor[(14, 16, 13), float64] */;
  %120 = sin(%116) /* ty=Tensor[(9, 3, 11), float32] */;
  %121 = %117.0;
  %122 = %118.0;
  (%119, %120, %121, %122)
}

def @func_4699(%var_4689: Tensor[(1536), float32]) -> (Tensor[(1, 3), float32], Tensor[(1536), float32], Tensor[(1536), uint8]) {
  %123 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
  %124 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
  %125 = %124.2;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %127 = cast(%125, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %128 = cos(%127) /* ty=Tensor[(1536), float32] */;
  %129 = cast(%var_4689, dtype="uint8") /* ty=Tensor[(1536), uint8] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(1), int32] */;
  %131 = cast(%128, dtype="uint8") /* ty=Tensor[(1536), uint8] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %133 = %123.0;
  %134 = cosh(%126) /* ty=Tensor[(1536), float32] */;
  %135 = maximum(%131, %132) /* ty=Tensor[(1536), uint8] */;
  (%133, %134, %135)
}

def @func_2981(%var_2947: Tensor[(16, 2, 10), float32], %var_2948: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) {
  %136 = cast(%var_2948, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %137 = shape_of(%var_2947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%var_2947, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %140 = cast(%var_2948, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %141 = sqrt(%140) /* ty=Tensor[(16, 2, 10), float32] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %143 = add(%138, %139) /* ty=Tensor[(16, 2, 10), float32] */;
  %144 = tan(%142) /* ty=Tensor[(16, 2, 10), float32] */;
  (%143, %144)
}

def @func_2454() -> (Tensor[(9, 3, 11), float64],) {
  %145 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  (%145,)
}

def @func_3717() -> Tensor[(?, 3), int16] {
  %146 = @func_3279() /* ty=(Tensor[(?, 3), int16],) */;
  %146.0
}

def @func_8293() -> (Tensor[(1, 3), float32],) {
  %147 = @func_4437() /* ty=(Tensor[(1, 3), float32],) */;
  %148 = %147.0;
  (%148,)
}

def @func_2265(%var_2250: Tensor[(1536), int32]) -> (Tensor[(9, 3, 11), float64], Tensor[(1536), int32], Tensor[(1536), int32]) {
  %149 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %152 = acosh(%151) /* ty=Tensor[(9, 3, 11), float64] */;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %154 = cast(%var_2250, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %155 = reshape(%153, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %156 = reshape(%154, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %157 = @func_2022(%155, %156) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %158 = %157.3;
  (%152, %158, %var_2250)
}

def @func_2874() -> (Tensor[(16, 12, 8), bool], Tensor[(1, 3), float32]) {
  %159 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %160 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %161 = %159.2;
  %162 = %160.0;
  (%161, %162)
}

def @func_4629(%var_4610: Tensor[(7, 6, 7), float64], %var_4611: Tensor[(7, 6, 7), float64], %var_4616: Tensor[(297), float64], %var_4617: Tensor[(1536), int32]) -> (Tensor[(7, 6, 7), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32]) {
  %163 = cast(%var_4611, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %164 = shape_of(%var_4610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_4610, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %167 = cast(%var_4616, dtype="float64") /* ty=Tensor[(297), float64] */;
  %168 = cast(%var_4617, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %169 = reshape(%167, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %170 = reshape(%168, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %171 = @func_2022(%169, %170) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %172 = floor_divide(%165, %166) /* ty=Tensor[(7, 6, 7), float64] */;
  %173 = %171.2;
  (%172, %173, %var_4616, %var_4617)
}

def @func_7751(%var_7747: Tensor[(297), float64], %var_7748: Tensor[(520), float64]) -> (Tensor[(1536), int32], Tensor[(9, 3, 11), bool], Tensor[(297), float64], Tensor[(520), float64]) {
  %174 = cast(%var_7747, dtype="float64") /* ty=Tensor[(297), float64] */;
  %175 = cast(%var_7748, dtype="float64") /* ty=Tensor[(520), float64] */;
  %176 = reshape(%174, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %177 = reshape(%175, newshape=[520, 1]) /* ty=Tensor[(520, 1), float64] */;
  %178 = @func_4965(%176, %177) /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), bool], Tensor[(5, 8, 13), float64], Tensor[(520, 1), float64]) */;
  %179 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %180 = %178.1;
  (%179, %180, %var_7747, %var_7748)
}

def @func_5679(%var_5667: Tensor[(2, 3, 4), uint8]) -> (Tensor[(2, 3, 4), uint8], Tensor[(9, 3, 11), float32], Tensor[(297), float64]) {
  %181 = cast(%var_5667, dtype="uint8") /* ty=Tensor[(2, 3, 4), uint8] */;
  %182 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 3, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 3, 4), uint8] */, dtype="uint8") /* ty=Tensor[(2, 3, 4), uint8] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %185 = cast(meta[relay.Constant][5] /* ty=Tensor[(297), float64] */, dtype="float64") /* ty=Tensor[(297), float64] */;
  %186 = reshape(%185, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %187 = @func_5449(%186) /* ty=(Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), float64], Tensor[(1536), float32]) */;
  %188 = bitwise_or(%183, %184) /* ty=Tensor[(2, 3, 4), uint8] */;
  %189 = %187.0;
  (%188, %189, meta[relay.Constant][5] /* ty=Tensor[(297), float64] */)
}

def @func_758(%var_747: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) {
  %190 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %191 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %192 = cast(%var_747, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %193 = reshape(%192, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
  %194 = @func_63(%193) /* ty=(Tensor[(16, 12, 8), bool],) */;
  %195 = %190.0;
  %196 = %191.0;
  %197 = %194.0;
  (%195, %196, %197, %var_747)
}

def @func_5633(%var_5595: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(1536), float32]) {
  %198 = @func_3760() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) */;
  %199 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %200 = %199.1;
  %201 = cast(%var_5595, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(1), int32] */;
  %203 = cast(%200, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?), float32] */;
  %205 = %198.0;
  %206 = power(%203, %204) /* ty=Tensor[(1536), float32] */;
  (%205, %206)
}

def @func_6620() -> Tensor[(1, 3), float32] {
  %207 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %207.0
}

def @func_1898() -> Tensor[(?, 3), int16] {
  %208 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
  %208.0
}

def @func_4851(%var_4800: Tensor[(5, 8, 13), float64], %var_4844: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) {
  %209 = cast(%var_4800, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %210 = erf(%209) /* ty=Tensor[(5, 8, 13), float64] */;
  %211 = cast(%210, dtype="uint32") /* ty=Tensor[(5, 8, 13), uint32] */;
  %212 = shape_of(%var_4800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(5, 8, 13), uint32] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %215 = cast(meta[relay.Constant][6] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %216 = reshape(%215, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %217 = @func_1704(%216) /* ty=(Tensor[(1536), float32],) */;
  %218 = @func_4277() /* ty=(Tensor[(1, 3), float32],) */;
  %219 = cast(%210, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %220 = log10(%219) /* ty=Tensor[(5, 8, 13), float64] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %222 = cast(%var_4844, dtype="int32") /* ty=Tensor[(5, 8, 13), int32] */;
  %223 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%220, dtype="int32") /* ty=Tensor[(5, 8, 13), int32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %226 = right_shift(%213, %214) /* ty=Tensor[(5, 8, 13), uint32] */;
  %227 = %217.0;
  %228 = %218.0;
  %229 = rsqrt(%221) /* ty=Tensor[(5, 8, 13), float64] */;
  %230 = left_shift(%224, %225) /* ty=Tensor[(5, 8, 13), int32] */;
  (%226, %227, meta[relay.Constant][6] /* ty=Tensor[(1536), int32] */, %228, %229, %230)
}

def @func_2912() -> (Tensor[(9, 3, 11), float64],) {
  %231 = @func_2647() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) */;
  %232 = %231.0;
  (%232,)
}

def @func_6052() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(?, 3), float32]) {
  %233 = @func_4340() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %234 = @func_5369() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) */;
  %235 = @func_5260() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %236 = %235.2;
  %237 = @func_5079() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %240 = shape_of(%236, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(%236, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %243 = %233.0;
  %244 = %234.0;
  %245 = floor_mod(%241, %242) /* ty=Tensor[(?, 3), float32] */;
  (%243, %244, %245)
}

def @func_5130() -> (Tensor[(?, 3), int16], Tensor[(1536), float64]) {
  %246 = @func_2770() /* ty=(Tensor[(?, 3), int16], Tensor[(?, 3), int16]) */;
  %247 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
  %248 = %247.2;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %250 = %246.1;
  %251 = sin(%249) /* ty=Tensor[(1536), float64] */;
  (%250, %251)
}

def @func_831() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
  %252 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %253 = cast(meta[relay.Constant][7] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %254 = reshape(%253, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %255 = @func_758(%254) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) */;
  %256 = %252.0;
  %257 = %255.0;
  (%256, %257, meta[relay.Constant][7] /* ty=Tensor[(1536), int32] */)
}

def @func_3384(%var_3367: uint64, %var_3368: Tensor[(1, 5, 4), uint64]) -> (Tensor[(1, 5, 4), uint64],) {
  %258 = cast(%var_3367, dtype="uint64") /* ty=uint64 */;
  %259 = cast(%var_3368, dtype="uint64") /* ty=Tensor[(1, 5, 4), uint64] */;
  %260 = multiply(%258, %259) /* ty=Tensor[(1, 5, 4), uint64] */;
  (%260,)
}

def @func_5369() -> (Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) {
  %261 = @func_2058() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %262 = cast(meta[relay.Constant][8] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %263 = reshape(%262, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %264 = @func_3153(%263) /* ty=(Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) */;
  %265 = %261.1;
  %266 = %264.1;
  (%265, %266, meta[relay.Constant][8] /* ty=Tensor[(1536), int32] */)
}

def @func_6449(%var_6445: Tensor[(8, 9, 16), float64]) -> (Tensor[(8, 9, 16), float64],) {
  %267 = cast(%var_6445, dtype="float64") /* ty=Tensor[(8, 9, 16), float64] */;
  %268 = log10(%267) /* ty=Tensor[(8, 9, 16), float64] */;
  (%268,)
}

def @func_7346() -> (Tensor[(1, 3), float32],) {
  %269 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %270 = %269.1;
  (%270,)
}

def @func_6565(%var_6552: uint64, %var_6553: Tensor[(20, 1), uint64]) -> (Tensor[(1, 3), float32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20, 1), uint64], Tensor[(2, 3, 4), uint8], Tensor[(12, 2), uint8], Tensor[(16, 2, 10), float64]) {
  %271 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %272 = cast(%var_6552, dtype="uint64") /* ty=uint64 */;
  %273 = cast(%var_6553, dtype="uint64") /* ty=Tensor[(20, 1), uint64] */;
  %274 = reshape(%272, newshape=[]) /* ty=uint64 */;
  %275 = reshape(%273, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint64] */;
  %276 = @func_3384(%274, %275) /* ty=(Tensor[(1, 5, 4), uint64],) */;
  %277 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 2), uint8] */, dtype="uint8") /* ty=Tensor[(12, 2), uint8] */;
  %278 = reshape(%277, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), uint8] */;
  %279 = @func_5679(%278) /* ty=(Tensor[(2, 3, 4), uint8], Tensor[(9, 3, 11), float32], Tensor[(297), float64]) */;
  %280 = @func_3481() /* ty=(Tensor[(16, 2, 10), float32],) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  %283 = %271.2;
  %284 = %276.0;
  %285 = %279.0;
  %286 = acos(%282) /* ty=Tensor[(16, 2, 10), float64] */;
  (%283, %284, %var_6552, %var_6553, %285, meta[relay.Constant][9] /* ty=Tensor[(12, 2), uint8] */, %286)
}

def @func_659() -> (Tensor[(1, 3), float32],) {
  %287 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %288 = rsqrt(%287) /* ty=Tensor[(1, 3), float32] */;
  (%288,)
}

def @func_6844() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %289 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
  %290 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
  %291 = %289.0;
  %292 = %290.1;
  (%291, %292)
}

def @func_1665() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) {
  %293 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %294 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %295 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
  %296 = %293.0;
  %297 = %294.0;
  %298 = %295.0;
  (%296, %297, %298)
}

def @func_2353(%var_2343: int8) -> (Tensor[(1, 15), int8],) {
  %299 = cast(%var_2343, dtype="int8") /* ty=int8 */;
  %300 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 15), int8] */, dtype="int8") /* ty=Tensor[(1, 15), int8] */;
  %301 = bitwise_and(%299, %300) /* ty=Tensor[(1, 15), int8] */;
  (%301,)
}

def @func_3960(%var_3955: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), uint8],) {
  %302 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
  %303 = %302.0;
  %304 = cast(%var_3955, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %308 = subtract(%306, %307) /* ty=Tensor[(9, 3, 11), uint8] */;
  (%308,)
}

def @func_8152() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16], Tensor[(10), float64]) {
  %309 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %310 = cast(meta[relay.Constant][12] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %311 = reshape(%310, newshape=[5, 1, 2]) /* ty=Tensor[(5, 1, 2), float64] */;
  %312 = @func_6959(%311) /* ty=(Tensor[(5, 1, 2), float64], Tensor[(1, 3), float32], Tensor[(?, 3), int16]) */;
  %313 = @func_6620() /* ty=Tensor[(1, 3), float32] */;
  %314 = %309.1;
  %315 = %312.2;
  (%313, %314, %315, meta[relay.Constant][12] /* ty=Tensor[(10), float64] */)
}

def @func_1766() -> (Tensor[(1536), int32], Tensor[(1, 3), float32]) {
  %316 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %317 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %318 = %316.1;
  %319 = %317.0;
  (%318, %319)
}

def @func_6228() -> (Tensor[(1536), bool], Tensor[(1, 3), float32]) {
  %320 = @func_4307() /* ty=(Tensor[(1536), int32], Tensor[(1536), float32], Tensor[(9, 3, 11), uint32]) */;
  %321 = %320.0;
  %322 = cast(meta[relay.Constant][13] /* ty=Tensor[(1536), int32] */, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(1), int32] */;
  %324 = cast(%321, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %326 = multiply(%324, %325) /* ty=Tensor[(1536), uint64] */;
  %327 = cast(%326, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %328 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %329 = cast(meta[relay.Constant][13] /* ty=Tensor[(1536), int32] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?), bool] */;
  %331 = @func_4277() /* ty=(Tensor[(1, 3), float32],) */;
  %332 = not_equal(%329, %330) /* ty=Tensor[(1536), bool] */;
  %333 = %331.0;
  (%332, %333)
}

def @func_8328() -> (Tensor[(1, 3), float32],) {
  %334 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %335 = %334.1;
  (%335,)
}

def @func_1421() -> (Tensor[(1536), int32],) {
  %336 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %337 = %336.2;
  (%337,)
}

def @func_8051() -> (Tensor[(1, 3), float32],) {
  %338 = @func_7834() /* ty=(Tensor[(1, 3), float32],) */;
  %339 = %338.0;
  (%339,)
}

def @func_1452(%var_1444: Tensor[(9, 12, 10), uint16], %var_1445: Tensor[(9, 12, 10), uint16]) -> Tensor[(9, 12, 10), bool] {
  %340 = cast(%var_1445, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %341 = shape_of(%var_1444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_1444, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%342, %343) /* ty=Tensor[(9, 12, 10), bool] */
}

def @func_7212() -> (Tensor[(9, 3, 11), float64],) {
  %344 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %345 = %344.0;
  (%345,)
}

def @func_2562(%var_2544: Tensor[(8, 9, 2), float32]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(8, 9, 2), uint16]) {
  %346 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
  %347 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
  %348 = cast(%var_2544, dtype="float32") /* ty=Tensor[(8, 9, 2), float32] */;
  %349 = sigmoid(%348) /* ty=Tensor[(8, 9, 2), float32] */;
  %350 = cast(%var_2544, dtype="uint16") /* ty=Tensor[(8, 9, 2), uint16] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="uint16") /* ty=Tensor[(8, 9, 2), uint16] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %354 = %346.1;
  %355 = %347.0;
  %356 = subtract(%352, %353) /* ty=Tensor[(8, 9, 2), uint16] */;
  (%354, %355, %356)
}

def @func_7862() -> (Tensor[(?, 3), int16], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
  %357 = @func_6144() /* ty=(Tensor[(1, 3), float32], Tensor[(12, 10, ?), int16]) */;
  %358 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %359 = @func_1898() /* ty=Tensor[(?, 3), int16] */;
  %360 = %357.0;
  %361 = %358.0;
  (%359, %360, %361)
}

def @func_2227() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) {
  %362 = @func_2058() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %363 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
  %364 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %366 = asinh(%365) /* ty=Tensor[(9, 3, 11), float32] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %368 = sinh(%367) /* ty=Tensor[(9, 3, 11), float32] */;
  %369 = cast(%366, dtype="int8") /* ty=Tensor[(9, 3, 11), int8] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="int8") /* ty=Tensor[(9, 3, 11), int8] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %373 = cast(%366, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %374 = cast(meta[relay.Constant][14] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %375 = reshape(%373, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %376 = reshape(%374, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %377 = @func_2022(%375, %376) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %378 = %362.1;
  %379 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %380 = %363.1;
  %381 = add(%371, %372) /* ty=Tensor[(9, 3, 11), int8] */;
  %382 = %377.3;
  (%378, %379, %380, %381, %382, meta[relay.Constant][14] /* ty=Tensor[(1536), int32] */)
}

def @func_6680() -> (Tensor[(?, 3), int16],) {
  %383 = @func_4116() /* ty=Tensor[(?, 3), int16] */;
  (%383,)
}

def @func_2022(%var_2004: Tensor[(9, 3, 11), float64], %var_2019: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
  %384 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
  %385 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %386 = cast(%var_2004, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %390 = less(%388, %389) /* ty=Tensor[(9, 3, 11), bool] */;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %392 = cast(%var_2019, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %393 = reshape(%392, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %394 = @func_758(%393) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) */;
  %395 = %384.0;
  %396 = acos(%391) /* ty=Tensor[(9, 3, 11), float64] */;
  %397 = %394.0;
  (%395, %396, %397, %var_2019)
}

def @func_4340() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %398 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %399 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
  %400 = %398.0;
  %401 = %399.0;
  (%400, %401)
}

def @func_2163() -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64]) {
  %402 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
  %403 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %404 = %402.1;
  (%403, %404)
}

def @func_7938(%var_7917: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(?, 3), int16], Tensor[(1536), bool]) {
  %405 = @func_5156() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %406 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
  %407 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %408 = cast(%var_7917, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(1), int32] */;
  %410 = cast(%407, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?), bool] */;
  %412 = %405.0;
  %413 = %406.2;
  %414 = greater_equal(%410, %411) /* ty=Tensor[(1536), bool] */;
  (%412, %413, %414)
}

def @func_5260() -> (Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %415 = @func_4796() /* ty=(Tensor[(9, 3, 11), uint32],) */;
  %416 = @func_4236() /* ty=(Tensor[(1, 3), float32],) */;
  %417 = %415.0;
  %418 = %416.0;
  %419 = @func_4012() /* ty=Tensor[(1, 3), float32] */;
  (%417, %418, %419)
}

def @func_5449(%var_5421: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), float64], Tensor[(1536), float32]) {
  %420 = @func_2454() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %421 = %420.0;
  %422 = cast(%var_5421, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %426 = @func_2163() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64]) */;
  %427 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %429 = log2(%428) /* ty=Tensor[(1536), float32] */;
  %430 = cast(%427, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(1), int32] */;
  %432 = cast(%429, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?), float32] */;
  %434 = divide(%424, %425) /* ty=Tensor[(9, 3, 11), float32] */;
  %435 = %426.0;
  %436 = floor_mod(%432, %433) /* ty=Tensor[(1536), float32] */;
  (%434, %435, %436)
}

def @func_5511() -> Tensor[(12, 10, ?), float64] {
  %437 = @func_3680() /* ty=Tensor[(12, 10, ?), bool] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(12, 10, ?), float32] */;
  %439 = sinh(%438) /* ty=Tensor[(12, 10, ?), float32] */;
  %440 = cast(%439, dtype="int64") /* ty=Tensor[(12, 10, ?), int64] */;
  %441 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%437, dtype="int64") /* ty=Tensor[(12, 10, ?), int64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %444 = left_shift(%442, %443) /* ty=Tensor[(12, 10, ?), int64] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
  acos(%445) /* ty=Tensor[(12, 10, ?), float64] */
}

def @func_2673(%var_2653: Tensor[(12, 5, 14), uint16], %var_2654: Tensor[(12, 5, 14), uint16]) -> (Tensor[(12, 5, 14), uint64],) {
  %446 = cast(%var_2654, dtype="uint16") /* ty=Tensor[(12, 5, 14), uint16] */;
  %447 = shape_of(%var_2653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_2653, dtype="uint16") /* ty=Tensor[(12, 5, 14), uint16] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %450 = right_shift(%448, %449) /* ty=Tensor[(12, 5, 14), uint16] */;
  %451 = cast(%var_2654, dtype="uint64") /* ty=Tensor[(12, 5, 14), uint64] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="uint64") /* ty=Tensor[(12, 5, 14), uint64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %455 = maximum(%453, %454) /* ty=Tensor[(12, 5, 14), uint64] */;
  (%455,)
}

def @func_6279() -> (Tensor[(9, 3, 11), float64],) {
  %456 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %457 = %456.0;
  (%457,)
}

def @func_2770() -> (Tensor[(?, 3), int16], Tensor[(?, 3), int16]) {
  %458 = @func_2739() /* ty=Tensor[(?, 3), int16] */;
  %459 = @func_2739() /* ty=Tensor[(?, 3), int16] */;
  (%458, %459)
}

def @func_4965(%var_4934: Tensor[(9, 3, 11), float64], %var_4948: Tensor[(520, 1), float64]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), bool], Tensor[(5, 8, 13), float64], Tensor[(520, 1), float64]) {
  %460 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %461 = @func_2454() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %462 = %461.0;
  %463 = cast(%var_4934, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = cast(%var_4948, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %468 = cast(%var_4948, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %469 = reshape(%467, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %470 = reshape(%468, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
  %471 = @func_4851(%469, %470) /* ty=(Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) */;
  %472 = cast(%var_4948, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %473 = %460.0;
  %474 = logical_or(%465, %466) /* ty=Tensor[(9, 3, 11), bool] */;
  %475 = %471.4;
  %476 = atan(%472) /* ty=Tensor[(520, 1), float64] */;
  (%473, %474, %475, %476)
}

def @func_7236() -> Tensor[(1, 3), float32] {
  @func_4538() /* ty=Tensor[(1, 3), float32] */
}

def @func_7534() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
  %477 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
  %478 = @func_7236() /* ty=Tensor[(1, 3), float32] */;
  %479 = %477.1;
  (%478, %479)
}

def @func_4227(%var_4210: Tensor[(2, 16, 10), float64], %var_4216: Tensor[(297), float64], %var_4221: Tensor[(840), uint16]) -> (Tensor[(2, 16, 10), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16]) {
  %480 = cast(3.07225f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %481 = cast(%var_4210, dtype="float64") /* ty=Tensor[(2, 16, 10), float64] */;
  %482 = cast(%var_4216, dtype="float64") /* ty=Tensor[(297), float64] */;
  %483 = cast(meta[relay.Constant][15] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %484 = reshape(%482, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %485 = reshape(%483, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %486 = @func_2022(%484, %485) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %487 = cast(%var_4221, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %488 = cast(%var_4221, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %489 = reshape(%487, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %490 = reshape(%488, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %491 = @func_2673(%489, %490) /* ty=(Tensor[(12, 5, 14), uint64],) */;
  %492 = floor_mod(%480, %481) /* ty=Tensor[(2, 16, 10), float64] */;
  %493 = %486.2;
  %494 = %491.0;
  (%492, %493, %var_4216, meta[relay.Constant][15] /* ty=Tensor[(1536), int32] */, %494, %var_4221)
}

def @func_5845(%var_5841: int8) -> (Tensor[(?, 3), int16], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(12, 5, 14), uint64], Tensor[(420, 2), uint16], Tensor[(1, 3), float32], Tensor[(1, 15), int8], int8) {
  %495 = @func_4385() /* ty=(Tensor[(1536), int32],) */;
  %496 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %497 = cast(meta[relay.Constant][16] /* ty=Tensor[(420, 2), uint16] */, dtype="uint16") /* ty=Tensor[(420, 2), uint16] */;
  %498 = cast(meta[relay.Constant][16] /* ty=Tensor[(420, 2), uint16] */, dtype="uint16") /* ty=Tensor[(420, 2), uint16] */;
  %499 = reshape(%497, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %500 = reshape(%498, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %501 = @func_2673(%499, %500) /* ty=(Tensor[(12, 5, 14), uint64],) */;
  %502 = cast(%var_5841, dtype="int8") /* ty=int8 */;
  %503 = reshape(%502, newshape=[]) /* ty=int8 */;
  %504 = @func_2353(%503) /* ty=(Tensor[(1, 15), int8],) */;
  %505 = @func_4116() /* ty=Tensor[(?, 3), int16] */;
  %506 = %495.0;
  %507 = %496.1;
  %508 = %501.0;
  %509 = @func_1383() /* ty=Tensor[(1, 3), float32] */;
  %510 = %504.0;
  (%505, %506, %507, %508, meta[relay.Constant][16] /* ty=Tensor[(420, 2), uint16] */, %509, %510, %var_5841)
}

def @func_63(%var_37: Tensor[(16, 12, 8), int32]) -> (Tensor[(16, 12, 8), bool],) {
  %511 = cast(%var_37, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %512 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(16, 12, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 12, 8), int32] */, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = less(%513, %514) /* ty=Tensor[(16, 12, 8), bool] */;
  (%515,)
}

def @func_3481() -> (Tensor[(16, 2, 10), float32],) {
  %516 = @func_3223() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(768, 2), int32]) */;
  %517 = %516.1;
  (%517,)
}

def @func_1282() -> Tensor[(9, 3, 11), float64] {
  %518 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %518.1
}

def @func_1057() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) {
  %519 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %520 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %521 = %520.0;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %523 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %524 = cast(%521, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %525 = cosh(%524) /* ty=Tensor[(9, 3, 11), float64] */;
  %526 = cast(%521, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %530 = less_equal(%528, %529) /* ty=Tensor[(9, 3, 11), bool] */;
  %531 = cast(%525, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %535 = %519.0;
  %536 = tan(%522) /* ty=Tensor[(9, 3, 11), float64] */;
  %537 = %523.2;
  %538 = floor_divide(%533, %534) /* ty=Tensor[(9, 3, 11), float32] */;
  (%535, %536, %537, %538)
}

def @func_3601() -> Tensor[(1536), float64] {
  %539 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %540 = %539.2;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(1536), float64] */;
  tan(%541) /* ty=Tensor[(1536), float64] */
}

def @func_5479() -> (Tensor[(9, 3, 11), float64],) {
  %542 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %543 = %542.2;
  (%543,)
}

def @func_6959(%var_6935: Tensor[(5, 1, 2), float64]) -> (Tensor[(5, 1, 2), float64], Tensor[(1, 3), float32], Tensor[(?, 3), int16]) {
  %544 = cast(%var_6935, dtype="float64") /* ty=Tensor[(5, 1, 2), float64] */;
  %545 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %546 = atanh(%544) /* ty=Tensor[(5, 1, 2), float64] */;
  %547 = %545.0;
  %548 = @func_3717() /* ty=Tensor[(?, 3), int16] */;
  (%546, %547, %548)
}

def @func_3494() -> (Tensor[(1, 3), float32],) {
  %549 = @func_1383() /* ty=Tensor[(1, 3), float32] */;
  (%549,)
}

def @func_2536() -> Tensor[(1, 3), float32] {
  %550 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %550.0
}

def @func_2142() -> Tensor[(9, 3, 11), uint32] {
  %551 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %552 = %551.0;
  %553 = cast(%552, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %554 = atan(%553) /* ty=Tensor[(9, 3, 11), float64] */;
  %555 = cast(%554, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
  %556 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%552, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%557, %558) /* ty=Tensor[(9, 3, 11), uint32] */
}

def @func_5156() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %559 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %560 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %561 = %559.0;
  %562 = %560.1;
  (%561, %562)
}

def @func_4236() -> (Tensor[(1, 3), float32],) {
  %563 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
  %564 = %563.0;
  (%564,)
}

def @func_1253(%var_1235: Tensor[(4, 14, 1), float64]) -> (Tensor[(4, 14, 1), float64],) {
  %565 = cast(%var_1235, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
  %566 = asinh(%565) /* ty=Tensor[(4, 14, 1), float64] */;
  (%566,)
}

def @func_1603() -> (Tensor[(1, 3), float32],) {
  %567 = @func_1383() /* ty=Tensor[(1, 3), float32] */;
  (%567,)
}

def @func_4592(%var_4580: Tensor[(10, 12, 1), float32], %var_4581: Tensor[(10, 12, 1), float32]) -> Tensor[(10, 12, ?), bool] {
  %568 = cast(%var_4581, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %569 = shape_of(%var_4580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%var_4580, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%570, %571) /* ty=Tensor[(10, 12, ?), bool] */
}

def @func_4307() -> (Tensor[(1536), int32], Tensor[(1536), float32], Tensor[(9, 3, 11), uint32]) {
  %572 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %573 = cast(%572, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %574 = reshape(%573, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %575 = @func_1704(%574) /* ty=(Tensor[(1536), float32],) */;
  %576 = %575.0;
  %577 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
  (%572, %576, %577)
}

def @func_5951() -> Tensor[(1, 3), float32] {
  %578 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
  %578.0
}

def @func_6990() -> (Tensor[(1, 3), float32],) {
  %579 = @func_4236() /* ty=(Tensor[(1, 3), float32],) */;
  %580 = %579.0;
  (%580,)
}

def @func_3696() -> (Tensor[(1536), float64],) {
  %581 = @func_3601() /* ty=Tensor[(1536), float64] */;
  (%581,)
}

def @func_4452(%var_4444: Tensor[(13, 12, 12), float64], %var_4445: Tensor[(13, 12, 12), float64]) -> (Tensor[(13, 12, 12), float64],) {
  %582 = cast(%var_4445, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %583 = shape_of(%var_4444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_4444, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %586 = multiply(%584, %585) /* ty=Tensor[(13, 12, 12), float64] */;
  (%586,)
}

def @func_2233() -> (Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) {
  %587 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %588 = %587.1;
  %589 = @func_1898() /* ty=Tensor[(?, 3), int16] */;
  (%588, %589)
}

def @func_4255() -> (Tensor[(1536), int32],) {
  %590 = @func_3327() /* ty=Tensor[(1536), int32] */;
  (%590,)
}

def @func_5383() -> (Tensor[(?, 3), int16],) {
  %591 = @func_3279() /* ty=(Tensor[(?, 3), int16],) */;
  %592 = %591.0;
  (%592,)
}

def @func_4096(%var_4056: Tensor[(13, 6, 14), float64], %var_4093: Tensor[(33, 9), float64]) -> (Tensor[(1, 3), float32], Tensor[(13, 6, 14), float32], Tensor[(9, 3, 11), uint8], Tensor[(33, 9), float64]) {
  %593 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %594 = cast(%var_4056, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
  %595 = cosh(%594) /* ty=Tensor[(13, 6, 14), float64] */;
  %596 = cast(%595, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %597 = cast(%var_4093, dtype="float64") /* ty=Tensor[(33, 9), float64] */;
  %598 = reshape(%597, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %599 = @func_3960(%598) /* ty=(Tensor[(9, 3, 11), uint8],) */;
  %600 = %593.0;
  %601 = tan(%596) /* ty=Tensor[(13, 6, 14), float32] */;
  %602 = %599.0;
  (%600, %601, %602, %var_4093)
}

def @func_7471(%var_7434: Tensor[(1536), int32], %var_7442: Tensor[(16, 12, 8), bool]) -> (Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool]) {
  %603 = @func_7258() /* ty=(Tensor[(1, 3), float32],) */;
  %604 = @func_4385() /* ty=(Tensor[(1536), int32],) */;
  %605 = cast(%var_7434, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %606 = reshape(%605, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
  %607 = @func_63(%606) /* ty=(Tensor[(16, 12, 8), bool],) */;
  %608 = %607.0;
  %609 = cast(%var_7442, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %613 = %603.0;
  %614 = %604.0;
  %615 = less_equal(%611, %612) /* ty=Tensor[(16, 12, 8), bool] */;
  (%613, %var_7434, %614, %615)
}

def @func_3223() -> (Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(768, 2), int32]) {
  %616 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %617 = cast(meta[relay.Constant][18] /* ty=Tensor[(768, 2), int32] */, dtype="int32") /* ty=Tensor[(768, 2), int32] */;
  %618 = reshape(%617, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %619 = @func_3153(%618) /* ty=(Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) */;
  %620 = %616.0;
  %621 = %619.1;
  (%620, %621, meta[relay.Constant][18] /* ty=Tensor[(768, 2), int32] */)
}

def @func_2058() -> (Tensor[(1536), int32], Tensor[(1, 3), float32]) {
  %622 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %623 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
  %624 = %622.1;
  %625 = %623.0;
  (%624, %625)
}

def @func_3680() -> Tensor[(12, 10, ?), bool] {
  %626 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 10, 1), int16] */, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
  %627 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(12, 10, 1), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 10, 1), int16] */, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%628, %629) /* ty=Tensor[(12, 10, ?), bool] */
}

def @func_4732() -> (Tensor[(9, 3, 11), float64],) {
  %630 = @func_2454() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %631 = %630.0;
  (%631,)
}

def @func_7834() -> (Tensor[(1, 3), float32],) {
  %632 = @func_5951() /* ty=Tensor[(1, 3), float32] */;
  (%632,)
}

def @func_8314(%var_8306: Tensor[(11, 6, 8), float64]) -> (Tensor[(11, 6, 8), float64],) {
  %633 = cast(%var_8306, dtype="float64") /* ty=Tensor[(11, 6, 8), float64] */;
  %634 = erf(%633) /* ty=Tensor[(11, 6, 8), float64] */;
  (%634,)
}

def @func_1926(%var_1912: Tensor[(9, 3, 11), float64]) -> Tensor[(9, 3, 11), bool] {
  %635 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %636 = cast(%var_1912, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%635, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %640 = maximum(%638, %639) /* ty=Tensor[(9, 3, 11), uint8] */;
  %641 = cast(%var_1912, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%643, %644) /* ty=Tensor[(9, 3, 11), bool] */
}

def @func_2739() -> Tensor[(?, 3), int16] {
  @func_1898() /* ty=Tensor[(?, 3), int16] */
}

def @func_6890(%var_6874: Tensor[(8, 11, 13), uint32], %var_6875: Tensor[(8, 11, 13), uint32]) -> Tensor[(8, 11, 13), uint32] {
  %645 = cast(%var_6875, dtype="uint32") /* ty=Tensor[(8, 11, 13), uint32] */;
  %646 = shape_of(%var_6874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%var_6874, dtype="uint32") /* ty=Tensor[(8, 11, 13), uint32] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%647, %648) /* ty=Tensor[(8, 11, 13), uint32] */
}

def @func_8190() -> (Tensor[(1536), int32], Tensor[(1536), int32]) {
  %649 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %650 = @func_3327() /* ty=Tensor[(1536), int32] */;
  (%649, %650)
}

def @func_7867() -> Tensor[(?, 3), int16] {
  %651 = @func_6680() /* ty=(Tensor[(?, 3), int16],) */;
  %651.0
}

def @func_6779(%var_6766: Tensor[(9, 3, 11), uint32]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float32], Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), float32]) {
  %652 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %653 = @func_5202() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %654 = %653.1;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %656 = cast(%var_6766, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %657 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%654, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %660 = cast(meta[relay.Constant][21] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %661 = reshape(%660, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %662 = @func_5633(%661) /* ty=(Tensor[(1, 3), float32], Tensor[(1536), float32]) */;
  %663 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %664 = %652.2;
  %665 = log10(%655) /* ty=Tensor[(9, 3, 11), float64] */;
  %666 = power(%658, %659) /* ty=Tensor[(9, 3, 11), float32] */;
  %667 = %662.0;
  %668 = %663.3;
  (%664, %665, %666, %667, meta[relay.Constant][21] /* ty=Tensor[(1536), int32] */, %668)
}

def @func_3645() -> (Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) {
  %669 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %670 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %671 = %669.0;
  %672 = %670.0;
  %673 = @func_3601() /* ty=Tensor[(1536), float64] */;
  (%671, %672, %673)
}

def @func_6695() -> (Tensor[(1, 3), float32],) {
  %674 = @func_4340() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %675 = %674.0;
  (%675,)
}

def @func_2647() -> (Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) {
  %676 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %677 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %678 = %676.2;
  (%677, %678)
}

def @func_4385() -> (Tensor[(1536), int32],) {
  %679 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %680 = %679.2;
  (%680,)
}

def @func_7111(%var_7095: Tensor[(6, 9, 2), int64], %var_7096: Tensor[(6, 9, 2), int64]) -> (Tensor[(6, 9, 2), int64],) {
  %681 = cast(%var_7096, dtype="int64") /* ty=Tensor[(6, 9, 2), int64] */;
  %682 = shape_of(%var_7095, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_7095, dtype="int64") /* ty=Tensor[(6, 9, 2), int64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %685 = minimum(%683, %684) /* ty=Tensor[(6, 9, 2), int64] */;
  (%685,)
}

def @func_4538() -> Tensor[(1, 3), float32] {
  %686 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %686.1
}

def @func_6411(%var_6408: Tensor[(3, 14, 16), float32]) -> Tensor[(3, 14, 16), float32] {
  %687 = cast(%var_6408, dtype="float32") /* ty=Tensor[(3, 14, 16), float32] */;
  log(%687) /* ty=Tensor[(3, 14, 16), float32] */
}

def @func_4277() -> (Tensor[(1, 3), float32],) {
  %688 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %689 = %688.0;
  (%689,)
}

def @func_2427(%var_2417: Tensor[(297, 1), float64], %var_2423: Tensor[(56), float64]) -> (Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), bool], Tensor[(297, 1), float64], Tensor[(4, 14, 1), float64], Tensor[(56), float64]) {
  %690 = @func_1421() /* ty=(Tensor[(1536), int32],) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %693 = reshape(%692, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %694 = @func_758(%693) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) */;
  %695 = cast(%var_2417, dtype="float64") /* ty=Tensor[(297, 1), float64] */;
  %696 = reshape(%695, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %697 = cast(%var_2423, dtype="float64") /* ty=Tensor[(56), float64] */;
  %698 = reshape(%697, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %699 = @func_1253(%698) /* ty=(Tensor[(4, 14, 1), float64],) */;
  %700 = %694.1;
  %701 = @func_1926(%696) /* ty=Tensor[(9, 3, 11), bool] */;
  %702 = %699.0;
  (%691, %700, %701, %var_2417, %702, %var_2423)
}

def @func_4136(%var_4134: Tensor[(14, 4), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(4, 14, 1), float64], Tensor[(14, 4), float64]) {
  %703 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %704 = cast(%var_4134, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
  %705 = reshape(%704, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %706 = @func_1253(%705) /* ty=(Tensor[(4, 14, 1), float64],) */;
  %707 = sigmoid(%703) /* ty=Tensor[(10, 11, 10), float32] */;
  %708 = %706.0;
  (%707, %708, %var_4134)
}

def @func_7258() -> (Tensor[(1, 3), float32],) {
  %709 = @func_5079() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %710 = %709.0;
  (%710,)
}

def @func_7767(%var_7756: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  %711 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %712 = shape_of(%var_7756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%var_7756, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %715 = power(%713, %714) /* ty=Tensor[(16, 10, 14), float32] */;
  (%715,)
}

def @func_1565() -> (Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) {
  %716 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %717 = %716.0;
  %718 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %719 = %718.0;
  %720 = cast(%719, dtype="int16") /* ty=Tensor[(1, 3), int16] */;
  %721 = shape_of(%717, dtype="int32") /* ty=Tensor[(2), int32] */;
  %722 = cast(%717, dtype="int16") /* ty=Tensor[(1, 3), int16] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %724 = bitwise_or(%722, %723) /* ty=Tensor[(?, 3), int16] */;
  %725 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  (%724, %725)
}

def @func_4204() -> (Tensor[(1536), int32],) {
  %726 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %727 = %726.0;
  (%727,)
}

def @func_7592(%var_7577: Tensor[(1080), uint16], %var_7579: Tensor[(120), float32]) -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(9, 12, 10), uint64], Tensor[(1080), uint16], Tensor[(1536), int32], Tensor[(120), float32], Tensor[(1536), float64], Tensor[(10, 12, ?), bool], Tensor[(?, 3), int16]) {
  %728 = @func_7258() /* ty=(Tensor[(1, 3), float32],) */;
  %729 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %730 = @func_7346() /* ty=(Tensor[(1, 3), float32],) */;
  %731 = cast(%var_7577, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %732 = cast(meta[relay.Constant][24] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %733 = cast(%var_7579, dtype="float32") /* ty=Tensor[(120), float32] */;
  %734 = reshape(%731, newshape=[1080]) /* ty=Tensor[(1080), uint16] */;
  %735 = reshape(%732, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %736 = reshape(%733, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %737 = @func_7072(%734, %735, %736) /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(10, 12, ?), bool], Tensor[(120), float32], Tensor[(9, 12, 10), uint64]) */;
  %738 = @func_5130() /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float64]) */;
  %739 = cast(%var_7579, dtype="float32") /* ty=Tensor[(120), float32] */;
  %740 = cast(%var_7579, dtype="float32") /* ty=Tensor[(120), float32] */;
  %741 = reshape(%739, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %742 = reshape(%740, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %743 = @func_5130() /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float64]) */;
  %744 = %728.0;
  %745 = %729.1;
  %746 = %730.0;
  %747 = %737.5;
  %748 = %738.1;
  %749 = @func_4592(%741, %742) /* ty=Tensor[(10, 12, ?), bool] */;
  %750 = %743.0;
  (%744, %745, %746, %747, %var_7577, meta[relay.Constant][24] /* ty=Tensor[(1536), int32] */, %var_7579, %748, %749, %750)
}

def @func_3279() -> (Tensor[(?, 3), int16],) {
  %751 = @func_2770() /* ty=(Tensor[(?, 3), int16], Tensor[(?, 3), int16]) */;
  %752 = %751.1;
  (%752,)
}

def @func_1704(%var_1686: Tensor[(1536), int32]) -> (Tensor[(1536), float32],) {
  %753 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %754 = %753.1;
  %755 = cast(%var_1686, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(1), int32] */;
  %757 = cast(%754, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?), float32] */;
  %759 = mod(%757, %758) /* ty=Tensor[(1536), float32] */;
  (%759,)
}

def @func_5573() -> Tensor[(1536), int32] {
  %760 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %760.2
}

def @func_7072(%var_7054: Tensor[(1080), uint16], %var_7057: Tensor[(1536), int32], %var_7060: Tensor[(120), float32]) -> (Tensor[(?, 3), int16], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(10, 12, ?), bool], Tensor[(120), float32], Tensor[(9, 12, 10), uint64]) {
  %761 = cast(%var_7057, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %762 = reshape(%761, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %763 = @func_1704(%762) /* ty=(Tensor[(1536), float32],) */;
  %764 = cast(%var_7060, dtype="float32") /* ty=Tensor[(120), float32] */;
  %765 = cast(%var_7060, dtype="float32") /* ty=Tensor[(120), float32] */;
  %766 = reshape(%764, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %767 = reshape(%765, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %768 = cast(%var_7054, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %769 = cast(%var_7054, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %770 = reshape(%768, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), uint16] */;
  %771 = reshape(%769, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), uint16] */;
  %772 = @func_1452(%770, %771) /* ty=Tensor[(9, 12, 10), bool] */;
  %773 = cast(%var_7054, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="uint64") /* ty=Tensor[(9, 12, 10), uint64] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %777 = @func_4047() /* ty=Tensor[(?, 3), int16] */;
  %778 = %763.0;
  %779 = @func_4592(%766, %767) /* ty=Tensor[(10, 12, ?), bool] */;
  %780 = bitwise_and(%775, %776) /* ty=Tensor[(9, 12, 10), uint64] */;
  (%777, %778, %var_7057, %779, %var_7060, %780)
}

def @func_4012() -> Tensor[(1, 3), float32] {
  %781 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
  %781.0
}

def @func_5079() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
  %782 = @func_2874() /* ty=(Tensor[(16, 12, 8), bool], Tensor[(1, 3), float32]) */;
  %783 = %782.1;
  %784 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
  (%783, %784)
}

def @func_4796() -> (Tensor[(9, 3, 11), uint32],) {
  %785 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
  (%785,)
}

def @func_7609() -> Tensor[(1, 3), float32] {
  %786 = @func_4340() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %786.1
}

def @func_5892() -> (Tensor[(6, 13), float32],) {
  %787 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 13), float32] */;
  %788 = sinh(%787) /* ty=Tensor[(6, 13), float32] */;
  (%788,)
}

def @func_7957() -> (Tensor[(12, 10, ?), bool], Tensor[(56), float64], Tensor[(4, 14, 3), int64]) {
  %789 = cast(meta[relay.Constant][26] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %790 = reshape(%789, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %791 = @func_1253(%790) /* ty=(Tensor[(4, 14, 1), float64],) */;
  %792 = %791.0;
  %793 = @func_4538() /* ty=Tensor[(1, 3), float32] */;
  %794 = cast(%792, dtype="int64") /* ty=Tensor[(4, 14, 1), int64] */;
  %795 = cast(%793, dtype="int64") /* ty=Tensor[(1, 3), int64] */;
  %796 = @func_3680() /* ty=Tensor[(12, 10, ?), bool] */;
  %797 = add(%794, %795) /* ty=Tensor[(4, 14, 3), int64] */;
  (%796, meta[relay.Constant][26] /* ty=Tensor[(56), float64] */, %797)
}

def @func_7180(%var_7151: uint64, %var_7152: Tensor[(20), uint64]) -> (Tensor[(1536), int32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64]) {
  %798 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %799 = cast(%var_7151, dtype="uint64") /* ty=uint64 */;
  %800 = cast(%var_7152, dtype="uint64") /* ty=Tensor[(20), uint64] */;
  %801 = reshape(%799, newshape=[]) /* ty=uint64 */;
  %802 = reshape(%800, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint64] */;
  %803 = @func_3384(%801, %802) /* ty=(Tensor[(1, 5, 4), uint64],) */;
  %804 = %798.1;
  %805 = %803.0;
  (%804, %805, %var_7151, %var_7152)
}

def @func_3760() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) {
  %806 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
  %807 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %808 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %809 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %810 = reshape(%808, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %811 = reshape(%809, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %812 = @func_2981(%810, %811) /* ty=(Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) */;
  %813 = %806.1;
  %814 = %807.0;
  %815 = %812.0;
  (%813, %814, %815, meta[relay.Constant][27] /* ty=Tensor[(2, 160), float32] */)
}

def @func_902() -> (Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) {
  %816 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %817 = rsqrt(%816) /* ty=Tensor[(9, 3, 11), float32] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %819 = log2(%818) /* ty=Tensor[(9, 3, 11), float64] */;
  %820 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 3, 11), float64] */, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %824 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %825 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %826 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 3, 11), float64] */, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %827 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%819, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %830 = greater_equal(%828, %829) /* ty=Tensor[(9, 3, 11), bool] */;
  %831 = cast(%830, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %832 = erf(%831) /* ty=Tensor[(9, 3, 11), float32] */;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %834 = right_shift(%822, %823) /* ty=Tensor[(9, 3, 11), uint32] */;
  %835 = %824.2;
  %836 = %825.0;
  %837 = atanh(%833) /* ty=Tensor[(9, 3, 11), float32] */;
  (%834, %835, %836, %837)
}

def @func_6342() -> (Tensor[(9, 3, 11), float64],) {
  %838 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %839 = %838.0;
  (%839,)
}

def @func_8225() -> (Tensor[(1, 3), float32],) {
  %840 = @func_7834() /* ty=(Tensor[(1, 3), float32],) */;
  %841 = %840.0;
  (%841,)
}

def @func_5750() -> (Tensor[(1, 3), float32],) {
  %842 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %843 = %842.0;
  (%843,)
}

def @func_978() -> (Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) {
  %844 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %845 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %846 = %845.2;
  %847 = cast(meta[relay.Constant][31] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(1), int32] */;
  %849 = cast(%846, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?), int32] */;
  %851 = cast(meta[relay.Constant][31] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %852 = reshape(%851, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
  %853 = @func_63(%852) /* ty=(Tensor[(16, 12, 8), bool],) */;
  %854 = cast(meta[relay.Constant][31] /* ty=Tensor[(1536), int32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %855 = atanh(%854) /* ty=Tensor[(1536), float32] */;
  %856 = cast(%855, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %857 = %844.0;
  %858 = left_shift(%849, %850) /* ty=Tensor[(1536), int32] */;
  %859 = %853.0;
  %860 = log10(%856) /* ty=Tensor[(1536), float32] */;
  (%857, %858, %859, %860)
}

def @main(%var_8338: Tensor[(14, 4, 12), float32]) -> Tensor[(14, 4, 12), float32] {
  %861 = cast(%var_8338, dtype="float32") /* ty=Tensor[(14, 4, 12), float32] */;
  erf(%861) /* ty=Tensor[(14, 4, 12), float32] */
}

def @func_7287() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) {
  %862 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
  %863 = %862.0;
  %864 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  (%863, %864)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1253(%var_1235: Tensor[(4, 14, 1), float64]) -> (Tensor[(4, 14, 1), float64],) {
  %0 = cast(%var_1235, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
  %1 = asinh(%0) /* ty=Tensor[(4, 14, 1), float64] */;
  (%1,)
}

def @func_4099(%var_4097: Tensor[(13, 6, 14), float64], %var_4098: Tensor[(33, 9), float64]) -> (Tensor[(1, 3), float32], Tensor[(13, 6, 14), float32], Tensor[(9, 3, 11), uint8], Tensor[(33, 9), float64]) {
  %12 = fn (%var_4056: Tensor[(13, 6, 14), float64], %var_4093: Tensor[(33, 9), float64]) -> (Tensor[(1, 3), float32], Tensor[(13, 6, 14), float32], Tensor[(9, 3, 11), uint8], Tensor[(33, 9), float64]) {
    %2 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
    %3 = cast(%var_4056, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
    %4 = cosh(%3) /* ty=Tensor[(13, 6, 14), float64] */;
    %5 = cast(%4, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
    %6 = cast(%var_4093, dtype="float64") /* ty=Tensor[(33, 9), float64] */;
    %7 = reshape(%6, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
    %8 = @func_3960(%7) /* ty=(Tensor[(9, 3, 11), uint8],) */;
    %9 = %2.0;
    %10 = tan(%5) /* ty=Tensor[(13, 6, 14), float32] */;
    %11 = %8.0;
    (%9, %10, %11, %var_4093)
  };
  %12(%var_4097, %var_4098) /* ty=(Tensor[(1, 3), float32], Tensor[(13, 6, 14), float32], Tensor[(9, 3, 11), uint8], Tensor[(33, 9), float64]) */
}

def @func_2876() -> (Tensor[(16, 12, 8), bool], Tensor[(1, 3), float32]) {
  @func_2874() /* ty=(Tensor[(16, 12, 8), bool], Tensor[(1, 3), float32]) */
}

def @func_832() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
  %19 = fn () -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
    %13 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %15 = reshape(%14, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
    %16 = @func_758(%15) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) */;
    %17 = %13.0;
    %18 = %16.0;
    (%17, %18, meta[relay.Constant][0] /* ty=Tensor[(1536), int32] */)
  };
  %19() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */
}

def @func_2165() -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64]) {
  @func_2163() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64]) */
}

def @func_7111(%var_7095: Tensor[(6, 9, 2), int64], %var_7096: Tensor[(6, 9, 2), int64]) -> (Tensor[(6, 9, 2), int64],) {
  %20 = cast(%var_7096, dtype="int64") /* ty=Tensor[(6, 9, 2), int64] */;
  %21 = shape_of(%var_7095, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%var_7095, dtype="int64") /* ty=Tensor[(6, 9, 2), int64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %24 = minimum(%22, %23) /* ty=Tensor[(6, 9, 2), int64] */;
  (%24,)
}

def @func_3960(%var_3955: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), uint8],) {
  %25 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
  %26 = %25.0;
  %27 = cast(%var_3955, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%26, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %31 = subtract(%29, %30) /* ty=Tensor[(9, 3, 11), uint8] */;
  (%31,)
}

def @func_4635(%var_4631: Tensor[(7, 6, 7), float64], %var_4632: Tensor[(7, 6, 7), float64], %var_4633: Tensor[(297), float64], %var_4634: Tensor[(1536), int32]) -> (Tensor[(7, 6, 7), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32]) {
  @func_4629(%var_4631, %var_4632, %var_4633, %var_4634) /* ty=(Tensor[(7, 6, 7), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32]) */
}

def @func_2025(%var_2023: Tensor[(9, 3, 11), float64], %var_2024: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
  %46 = fn (%var_2004: Tensor[(9, 3, 11), float64], %var_2019: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
    %32 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
    %33 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
    %34 = cast(%var_2004, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(%33, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %38 = less(%36, %37) /* ty=Tensor[(9, 3, 11), bool] */;
    %39 = cast(%38, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %40 = cast(%var_2019, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %41 = reshape(%40, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
    %42 = @func_758(%41) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) */;
    %43 = %32.0;
    %44 = acos(%39) /* ty=Tensor[(9, 3, 11), float64] */;
    %45 = %42.0;
    (%43, %44, %45, %var_2019)
  };
  %46(%var_2023, %var_2024) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */
}

def @func_7596(%var_7594: Tensor[(1080), uint16], %var_7595: Tensor[(120), float32]) -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(9, 12, 10), uint64], Tensor[(1080), uint16], Tensor[(1536), int32], Tensor[(120), float32], Tensor[(1536), float64], Tensor[(10, 12, ?), bool], Tensor[(?, 3), int16]) {
  @func_7592(%var_7594, %var_7595) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(9, 12, 10), uint64], Tensor[(1080), uint16], Tensor[(1536), int32], Tensor[(120), float32], Tensor[(1536), float64], Tensor[(10, 12, ?), bool], Tensor[(?, 3), int16]) */
}

def @func_6696() -> (Tensor[(1, 3), float32],) {
  %49 = fn () -> (Tensor[(1, 3), float32],) {
    %47 = @func_4340() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
    %48 = %47.0;
    (%48,)
  };
  %49() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_3646() -> (Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) {
  %55 = fn () -> (Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) {
    %50 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
    %51 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
    %52 = %50.0;
    %53 = %51.0;
    %54 = @func_3601() /* ty=Tensor[(1536), float64] */;
    (%52, %53, %54)
  };
  %55() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */
}

def @func_660() -> (Tensor[(1, 3), float32],) {
  %58 = fn () -> (Tensor[(1, 3), float32],) {
    %56 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
    %57 = rsqrt(%56) /* ty=Tensor[(1, 3), float32] */;
    (%57,)
  };
  %58() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_7238() -> Tensor[(1, 3), float32] {
  @func_7236() /* ty=Tensor[(1, 3), float32] */
}

def @func_7609() -> Tensor[(1, 3), float32] {
  %59 = @func_4340() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %59.1
}

def @func_4307() -> (Tensor[(1536), int32], Tensor[(1536), float32], Tensor[(9, 3, 11), uint32]) {
  %60 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %61 = cast(%60, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %62 = reshape(%61, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %63 = @func_1704(%62) /* ty=(Tensor[(1536), float32],) */;
  %64 = %63.0;
  %65 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
  (%60, %64, %65)
}

def @func_2914() -> (Tensor[(9, 3, 11), float64],) {
  @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_4014() -> Tensor[(1, 3), float32] {
  @func_4012() /* ty=Tensor[(1, 3), float32] */
}

def @func_2142() -> Tensor[(9, 3, 11), uint32] {
  %66 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %69 = atan(%68) /* ty=Tensor[(9, 3, 11), float64] */;
  %70 = cast(%69, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
  %71 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%67, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%72, %73) /* ty=Tensor[(9, 3, 11), uint32] */
}

def @func_3717() -> Tensor[(?, 3), int16] {
  %74 = @func_3279() /* ty=(Tensor[(?, 3), int16],) */;
  %74.0
}

def @func_7213() -> (Tensor[(9, 3, 11), float64],) {
  %77 = fn () -> (Tensor[(9, 3, 11), float64],) {
    %75 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
    %76 = %75.0;
    (%76,)
  };
  %77() /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_3719() -> Tensor[(?, 3), int16] {
  @func_3717() /* ty=Tensor[(?, 3), int16] */
}

def @func_4452(%var_4444: Tensor[(13, 12, 12), float64], %var_4445: Tensor[(13, 12, 12), float64]) -> (Tensor[(13, 12, 12), float64],) {
  %78 = cast(%var_4445, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %79 = shape_of(%var_4444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_4444, dtype="float64") /* ty=Tensor[(13, 12, 12), float64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %82 = multiply(%80, %81) /* ty=Tensor[(13, 12, 12), float64] */;
  (%82,)
}

def @func_3280() -> (Tensor[(?, 3), int16],) {
  %85 = fn () -> (Tensor[(?, 3), int16],) {
    %83 = @func_2770() /* ty=(Tensor[(?, 3), int16], Tensor[(?, 3), int16]) */;
    %84 = %83.1;
    (%84,)
  };
  %85() /* ty=(Tensor[(?, 3), int16],) */
}

def @func_3963(%var_3961: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), uint8],) {
  @func_3960(%var_3961) /* ty=(Tensor[(9, 3, 11), uint8],) */
}

def @func_4309() -> (Tensor[(1536), int32], Tensor[(1536), float32], Tensor[(9, 3, 11), uint32]) {
  @func_4307() /* ty=(Tensor[(1536), int32], Tensor[(1536), float32], Tensor[(9, 3, 11), uint32]) */
}

def @func_7534() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
  %86 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
  %87 = @func_7236() /* ty=Tensor[(1, 3), float32] */;
  %88 = %86.1;
  (%87, %88)
}

def @func_5262() -> (Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  @func_5260() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */
}

def @func_4851(%var_4800: Tensor[(5, 8, 13), float64], %var_4844: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) {
  %89 = cast(%var_4800, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %90 = erf(%89) /* ty=Tensor[(5, 8, 13), float64] */;
  %91 = cast(%90, dtype="uint32") /* ty=Tensor[(5, 8, 13), uint32] */;
  %92 = shape_of(%var_4800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(5, 8, 13), uint32] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %95 = cast(meta[relay.Constant][2] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %96 = reshape(%95, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %97 = @func_1704(%96) /* ty=(Tensor[(1536), float32],) */;
  %98 = @func_4277() /* ty=(Tensor[(1, 3), float32],) */;
  %99 = cast(%90, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %100 = log10(%99) /* ty=Tensor[(5, 8, 13), float64] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(5, 8, 13), float64] */;
  %102 = cast(%var_4844, dtype="int32") /* ty=Tensor[(5, 8, 13), int32] */;
  %103 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%100, dtype="int32") /* ty=Tensor[(5, 8, 13), int32] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %106 = right_shift(%93, %94) /* ty=Tensor[(5, 8, 13), uint32] */;
  %107 = %97.0;
  %108 = %98.0;
  %109 = rsqrt(%101) /* ty=Tensor[(5, 8, 13), float64] */;
  %110 = left_shift(%104, %105) /* ty=Tensor[(5, 8, 13), int32] */;
  (%106, %107, meta[relay.Constant][2] /* ty=Tensor[(1536), int32] */, %108, %109, %110)
}

def @func_1667() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) {
  @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */
}

def @func_2163() -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64]) {
  %111 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
  %112 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %113 = %111.1;
  (%112, %113)
}

def @func_2427(%var_2417: Tensor[(297, 1), float64], %var_2423: Tensor[(56), float64]) -> (Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), bool], Tensor[(297, 1), float64], Tensor[(4, 14, 1), float64], Tensor[(56), float64]) {
  %114 = @func_1421() /* ty=(Tensor[(1536), int32],) */;
  %115 = %114.0;
  %116 = cast(%115, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %117 = reshape(%116, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %118 = @func_758(%117) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) */;
  %119 = cast(%var_2417, dtype="float64") /* ty=Tensor[(297, 1), float64] */;
  %120 = reshape(%119, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %121 = cast(%var_2423, dtype="float64") /* ty=Tensor[(56), float64] */;
  %122 = reshape(%121, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %123 = @func_1253(%122) /* ty=(Tensor[(4, 14, 1), float64],) */;
  %124 = %118.1;
  %125 = @func_1926(%120) /* ty=Tensor[(9, 3, 11), bool] */;
  %126 = %123.0;
  (%115, %124, %125, %var_2417, %126, %var_2423)
}

def @func_5892() -> (Tensor[(6, 13), float32],) {
  %127 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 13), float32] */;
  %128 = sinh(%127) /* ty=Tensor[(6, 13), float32] */;
  (%128,)
}

def @func_4699(%var_4689: Tensor[(1536), float32]) -> (Tensor[(1, 3), float32], Tensor[(1536), float32], Tensor[(1536), uint8]) {
  %129 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
  %130 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
  %131 = %130.2;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %133 = cast(%131, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %134 = cos(%133) /* ty=Tensor[(1536), float32] */;
  %135 = cast(%var_4689, dtype="uint8") /* ty=Tensor[(1536), uint8] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(1), int32] */;
  %137 = cast(%134, dtype="uint8") /* ty=Tensor[(1536), uint8] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %139 = %129.0;
  %140 = cosh(%132) /* ty=Tensor[(1536), float32] */;
  %141 = maximum(%137, %138) /* ty=Tensor[(1536), uint8] */;
  (%139, %140, %141)
}

def @func_4256() -> (Tensor[(1536), int32],) {
  %143 = fn () -> (Tensor[(1536), int32],) {
    %142 = @func_3327() /* ty=Tensor[(1536), int32] */;
    (%142,)
  };
  %143() /* ty=(Tensor[(1536), int32],) */
}

def @func_8066() -> (Tensor[(2, 160), float32],) {
  @func_8064() /* ty=(Tensor[(2, 160), float32],) */
}

def @func_6991() -> (Tensor[(1, 3), float32],) {
  %146 = fn () -> (Tensor[(1, 3), float32],) {
    %144 = @func_4236() /* ty=(Tensor[(1, 3), float32],) */;
    %145 = %144.0;
    (%145,)
  };
  %146() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_7180(%var_7151: uint64, %var_7152: Tensor[(20), uint64]) -> (Tensor[(1536), int32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64]) {
  %147 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %148 = cast(%var_7151, dtype="uint64") /* ty=uint64 */;
  %149 = cast(%var_7152, dtype="uint64") /* ty=Tensor[(20), uint64] */;
  %150 = reshape(%148, newshape=[]) /* ty=uint64 */;
  %151 = reshape(%149, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint64] */;
  %152 = @func_3384(%150, %151) /* ty=(Tensor[(1, 5, 4), uint64],) */;
  %153 = %147.1;
  %154 = %152.0;
  (%153, %154, %var_7151, %var_7152)
}

def @func_8052() -> (Tensor[(1, 3), float32],) {
  %157 = fn () -> (Tensor[(1, 3), float32],) {
    %155 = @func_7834() /* ty=(Tensor[(1, 3), float32],) */;
    %156 = %155.0;
    (%156,)
  };
  %157() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_2228() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) {
  %179 = fn () -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) {
    %158 = @func_2058() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
    %159 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
    %160 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
    %161 = cast(%160, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %162 = asinh(%161) /* ty=Tensor[(9, 3, 11), float32] */;
    %163 = cast(%162, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %164 = sinh(%163) /* ty=Tensor[(9, 3, 11), float32] */;
    %165 = cast(%162, dtype="int8") /* ty=Tensor[(9, 3, 11), int8] */;
    %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %167 = cast(%164, dtype="int8") /* ty=Tensor[(9, 3, 11), int8] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %169 = cast(%162, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %170 = cast(meta[relay.Constant][4] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %171 = reshape(%169, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
    %172 = reshape(%170, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
    %173 = @func_2022(%171, %172) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
    %174 = %158.1;
    %175 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
    %176 = %159.1;
    %177 = add(%167, %168) /* ty=Tensor[(9, 3, 11), int8] */;
    %178 = %173.3;
    (%174, %175, %176, %177, %178, meta[relay.Constant][4] /* ty=Tensor[(1536), int32] */)
  };
  %179() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */
}

def @func_6962(%var_6960: Tensor[(5, 1, 2), float64]) -> (Tensor[(5, 1, 2), float64], Tensor[(1, 3), float32], Tensor[(?, 3), int16]) {
  @func_6959(%var_6960) /* ty=(Tensor[(5, 1, 2), float64], Tensor[(1, 3), float32], Tensor[(?, 3), int16]) */
}

def @func_1423() -> (Tensor[(1536), int32],) {
  @func_1421() /* ty=(Tensor[(1536), int32],) */
}

def @func_8330() -> (Tensor[(1, 3), float32],) {
  @func_8328() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_7770(%var_7768: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  @func_7767(%var_7768) /* ty=(Tensor[(16, 10, 14), float32],) */
}

def @func_1704(%var_1686: Tensor[(1536), int32]) -> (Tensor[(1536), float32],) {
  %180 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %181 = %180.1;
  %182 = cast(%var_1686, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(1), int32] */;
  %184 = cast(%181, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?), float32] */;
  %186 = mod(%184, %185) /* ty=Tensor[(1536), float32] */;
  (%186,)
}

def @func_4438() -> (Tensor[(1, 3), float32],) {
  %189 = fn () -> (Tensor[(1, 3), float32],) {
    %187 = @func_2058() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
    %188 = %187.1;
    (%188,)
  };
  %189() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_4797() -> (Tensor[(9, 3, 11), uint32],) {
  %191 = fn () -> (Tensor[(9, 3, 11), uint32],) {
    %190 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
    (%190,)
  };
  %191() /* ty=(Tensor[(9, 3, 11), uint32],) */
}

def @func_4138(%var_4137: Tensor[(14, 4), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(4, 14, 1), float64], Tensor[(14, 4), float64]) {
  %198 = fn (%var_4134: Tensor[(14, 4), float64]) -> (Tensor[(10, 11, 10), float32], Tensor[(4, 14, 1), float64], Tensor[(14, 4), float64]) {
    %192 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
    %193 = cast(%var_4134, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
    %194 = reshape(%193, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
    %195 = @func_1253(%194) /* ty=(Tensor[(4, 14, 1), float64],) */;
    %196 = sigmoid(%192) /* ty=Tensor[(10, 11, 10), float32] */;
    %197 = %195.0;
    (%196, %197, %var_4134)
  };
  %198(%var_4137) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(4, 14, 1), float64], Tensor[(14, 4), float64]) */
}

def @func_6144() -> (Tensor[(1, 3), float32], Tensor[(12, 10, ?), int16]) {
  %199 = @func_5511() /* ty=Tensor[(12, 10, ?), float64] */;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(12, 10, ?), float32] */;
  %201 = asinh(%200) /* ty=Tensor[(12, 10, ?), float32] */;
  %202 = cast(%199, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %206 = floor_mod(%204, %205) /* ty=Tensor[(12, 10, ?), float64] */;
  %207 = cast(%206, dtype="int16") /* ty=Tensor[(12, 10, ?), int16] */;
  %208 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%201, dtype="int16") /* ty=Tensor[(12, 10, ?), int16] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %211 = @func_4012() /* ty=Tensor[(1, 3), float32] */;
  %212 = minimum(%209, %210) /* ty=Tensor[(12, 10, ?), int16] */;
  (%211, %212)
}

def @func_3601() -> Tensor[(1536), float64] {
  %213 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %214 = %213.2;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(1536), float64] */;
  tan(%215) /* ty=Tensor[(1536), float64] */
}

def @func_2267(%var_2266: Tensor[(1536), int32]) -> (Tensor[(9, 3, 11), float64], Tensor[(1536), int32], Tensor[(1536), int32]) {
  %226 = fn (%var_2250: Tensor[(1536), int32]) -> (Tensor[(9, 3, 11), float64], Tensor[(1536), int32], Tensor[(1536), int32]) {
    %216 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
    %217 = %216.0;
    %218 = cast(%217, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %219 = acosh(%218) /* ty=Tensor[(9, 3, 11), float64] */;
    %220 = cast(%219, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %221 = cast(%var_2250, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %222 = reshape(%220, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
    %223 = reshape(%221, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
    %224 = @func_2022(%222, %223) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
    %225 = %224.3;
    (%219, %225, %var_2250)
  };
  %226(%var_2266) /* ty=(Tensor[(9, 3, 11), float64], Tensor[(1536), int32], Tensor[(1536), int32]) */
}

def @func_1926(%var_1912: Tensor[(9, 3, 11), float64]) -> Tensor[(9, 3, 11), bool] {
  %227 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %228 = cast(%var_1912, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="uint8") /* ty=Tensor[(9, 3, 11), uint8] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %232 = maximum(%230, %231) /* ty=Tensor[(9, 3, 11), uint8] */;
  %233 = cast(%var_1912, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%235, %236) /* ty=Tensor[(9, 3, 11), bool] */
}

def @func_5260() -> (Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %237 = @func_4796() /* ty=(Tensor[(9, 3, 11), uint32],) */;
  %238 = @func_4236() /* ty=(Tensor[(1, 3), float32],) */;
  %239 = %237.0;
  %240 = %238.0;
  %241 = @func_4012() /* ty=Tensor[(1, 3), float32] */;
  (%239, %240, %241)
}

def @func_4702(%var_4700: Tensor[(1536), float32]) -> (Tensor[(1, 3), float32], Tensor[(1536), float32], Tensor[(1536), uint8]) {
  @func_4699(%var_4700) /* ty=(Tensor[(1, 3), float32], Tensor[(1536), float32], Tensor[(1536), uint8]) */
}

def @func_6451(%var_6450: Tensor[(8, 9, 16), float64]) -> (Tensor[(8, 9, 16), float64],) {
  %244 = fn (%var_6445: Tensor[(8, 9, 16), float64]) -> (Tensor[(8, 9, 16), float64],) {
    %242 = cast(%var_6445, dtype="float64") /* ty=Tensor[(8, 9, 16), float64] */;
    %243 = log10(%242) /* ty=Tensor[(8, 9, 16), float64] */;
    (%243,)
  };
  %244(%var_6450) /* ty=(Tensor[(8, 9, 16), float64],) */
}

def @func_7662() -> (Tensor[(9, 3, 11), uint64],) {
  %245 = @func_5202() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %246 = %245.1;
  %247 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 3, 11), uint32] */, dtype="uint64") /* ty=Tensor[(9, 3, 11), uint64] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="uint64") /* ty=Tensor[(9, 3, 11), uint64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %251 = logical_xor(%249, %250) /* ty=Tensor[(9, 3, 11), uint64] */;
  (%251,)
}

def @func_6343() -> (Tensor[(9, 3, 11), float64],) {
  %254 = fn () -> (Tensor[(9, 3, 11), float64],) {
    %252 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
    %253 = %252.0;
    (%253,)
  };
  %254() /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_3603() -> Tensor[(1536), float64] {
  @func_3601() /* ty=Tensor[(1536), float64] */
}

def @func_7401(%var_7400: Tensor[(520, 1), float64]) -> (Tensor[(12, 10, ?), float64], Tensor[(520, 1536), int16], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) {
  %273 = fn (%var_7365: Tensor[(520, 1), float64]) -> (Tensor[(12, 10, ?), float64], Tensor[(520, 1536), int16], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) {
    %255 = @func_3680() /* ty=Tensor[(12, 10, ?), bool] */;
    %256 = cast(%255, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
    %257 = cast(%var_7365, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %258 = cast(%var_7365, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %259 = reshape(%257, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
    %260 = reshape(%258, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
    %261 = @func_4851(%259, %260) /* ty=(Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) */;
    %262 = %261.1;
    %263 = cast(%262, dtype="bool") /* ty=Tensor[(1536), bool] */;
    %264 = cast(%var_7365, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
    %265 = logical_or(%263, %264) /* ty=Tensor[(520, 1536), bool] */;
    %266 = cast(%265, dtype="int16") /* ty=Tensor[(520, 1536), int16] */;
    %267 = cast(%var_7365, dtype="int16") /* ty=Tensor[(520, 1), int16] */;
    %268 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
    %269 = sqrt(%256) /* ty=Tensor[(12, 10, ?), float64] */;
    %270 = logical_xor(%266, %267) /* ty=Tensor[(520, 1536), int16] */;
    %271 = @func_7236() /* ty=Tensor[(1, 3), float32] */;
    %272 = %268.0;
    (%269, %270, %271, %272)
  };
  %273(%var_7400) /* ty=(Tensor[(12, 10, ?), float64], Tensor[(520, 1536), int16], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) */
}

def @func_7975(%var_7974: Tensor[(14, 16, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %280 = fn (%var_7959: Tensor[(14, 16, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
    %274 = cast(%var_7959, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
    %275 = @func_4277() /* ty=(Tensor[(1, 3), float32],) */;
    %276 = @func_4437() /* ty=(Tensor[(1, 3), float32],) */;
    %277 = log2(%274) /* ty=Tensor[(14, 16, 2), float32] */;
    %278 = %275.0;
    %279 = %276.0;
    (%277, %278, %279)
  };
  %280(%var_7974) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */
}

def @func_7693() -> Tensor[(1, 3), float32] {
  %281 = @func_5369() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) */;
  %281.0
}

def @func_3680() -> Tensor[(12, 10, ?), bool] {
  %282 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 10, 1), int16] */, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
  %283 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(12, 10, 1), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 10, 1), int16] */, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%284, %285) /* ty=Tensor[(12, 10, ?), bool] */
}

def @func_2455() -> (Tensor[(9, 3, 11), float64],) {
  %287 = fn () -> (Tensor[(9, 3, 11), float64],) {
    %286 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
    (%286,)
  };
  %287() /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_5952() -> Tensor[(1, 3), float32] {
  %289 = fn () -> Tensor[(1, 3), float32] {
    %288 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
    %288.0
  };
  %289() /* ty=Tensor[(1, 3), float32] */
}

def @func_7474(%var_7472: Tensor[(1536), int32], %var_7473: Tensor[(16, 12, 8), bool]) -> (Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool]) {
  %303 = fn (%var_7434: Tensor[(1536), int32], %var_7442: Tensor[(16, 12, 8), bool]) -> (Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool]) {
    %290 = @func_7258() /* ty=(Tensor[(1, 3), float32],) */;
    %291 = @func_4385() /* ty=(Tensor[(1536), int32],) */;
    %292 = cast(%var_7434, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %293 = reshape(%292, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
    %294 = @func_63(%293) /* ty=(Tensor[(16, 12, 8), bool],) */;
    %295 = %294.0;
    %296 = cast(%var_7442, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
    %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %298 = cast(%295, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %300 = %290.0;
    %301 = %291.0;
    %302 = less_equal(%298, %299) /* ty=Tensor[(16, 12, 8), bool] */;
    (%300, %var_7434, %301, %302)
  };
  %303(%var_7472, %var_7473) /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool]) */
}

def @func_1095() -> (Tensor[(1, 3), float32],) {
  %306 = fn () -> (Tensor[(1, 3), float32],) {
    %304 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
    %305 = %304.1;
    (%305,)
  };
  %306() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_7592(%var_7577: Tensor[(1080), uint16], %var_7579: Tensor[(120), float32]) -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(9, 12, 10), uint64], Tensor[(1080), uint16], Tensor[(1536), int32], Tensor[(120), float32], Tensor[(1536), float64], Tensor[(10, 12, ?), bool], Tensor[(?, 3), int16]) {
  %307 = @func_7258() /* ty=(Tensor[(1, 3), float32],) */;
  %308 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %309 = @func_7346() /* ty=(Tensor[(1, 3), float32],) */;
  %310 = cast(%var_7577, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %311 = cast(meta[relay.Constant][9] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %312 = cast(%var_7579, dtype="float32") /* ty=Tensor[(120), float32] */;
  %313 = reshape(%310, newshape=[1080]) /* ty=Tensor[(1080), uint16] */;
  %314 = reshape(%311, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %315 = reshape(%312, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %316 = @func_7072(%313, %314, %315) /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(10, 12, ?), bool], Tensor[(120), float32], Tensor[(9, 12, 10), uint64]) */;
  %317 = @func_5130() /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float64]) */;
  %318 = cast(%var_7579, dtype="float32") /* ty=Tensor[(120), float32] */;
  %319 = cast(%var_7579, dtype="float32") /* ty=Tensor[(120), float32] */;
  %320 = reshape(%318, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %321 = reshape(%319, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %322 = @func_5130() /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float64]) */;
  %323 = %307.0;
  %324 = %308.1;
  %325 = %309.0;
  %326 = %316.5;
  %327 = %317.1;
  %328 = @func_4592(%320, %321) /* ty=Tensor[(10, 12, ?), bool] */;
  %329 = %322.0;
  (%323, %324, %325, %326, %var_7577, meta[relay.Constant][9] /* ty=Tensor[(1536), int32] */, %var_7579, %327, %328, %329)
}

def @func_4855(%var_4853: Tensor[(5, 8, 13), float64], %var_4854: Tensor[(5, 8, 13), float64]) -> (Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) {
  @func_4851(%var_4853, %var_4854) /* ty=(Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) */
}

def @func_2355(%var_2354: int8) -> (Tensor[(1, 15), int8],) {
  %333 = fn (%var_2343: int8) -> (Tensor[(1, 15), int8],) {
    %330 = cast(%var_2343, dtype="int8") /* ty=int8 */;
    %331 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 15), int8] */, dtype="int8") /* ty=Tensor[(1, 15), int8] */;
    %332 = bitwise_and(%330, %331) /* ty=Tensor[(1, 15), int8] */;
    (%332,)
  };
  %333(%var_2354) /* ty=(Tensor[(1, 15), int8],) */
}

def @func_4012() -> Tensor[(1, 3), float32] {
  %334 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
  %334.0
}

def @func_5080() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
  %338 = fn () -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
    %335 = @func_2874() /* ty=(Tensor[(16, 12, 8), bool], Tensor[(1, 3), float32]) */;
    %336 = %335.1;
    %337 = @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */;
    (%336, %337)
  };
  %338() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */
}

def @func_5752() -> (Tensor[(1, 3), float32],) {
  @func_5750() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_7536() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
  @func_7534() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */
}

def @func_3387(%var_3385: uint64, %var_3386: Tensor[(1, 5, 4), uint64]) -> (Tensor[(1, 5, 4), uint64],) {
  %342 = fn (%var_3367: uint64, %var_3368: Tensor[(1, 5, 4), uint64]) -> (Tensor[(1, 5, 4), uint64],) {
    %339 = cast(%var_3367, dtype="uint64") /* ty=uint64 */;
    %340 = cast(%var_3368, dtype="uint64") /* ty=Tensor[(1, 5, 4), uint64] */;
    %341 = multiply(%339, %340) /* ty=Tensor[(1, 5, 4), uint64] */;
    (%341,)
  };
  %342(%var_3385, %var_3386) /* ty=(Tensor[(1, 5, 4), uint64],) */
}

def @func_5369() -> (Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) {
  %343 = @func_2058() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %344 = cast(meta[relay.Constant][11] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %345 = reshape(%344, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %346 = @func_3153(%345) /* ty=(Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) */;
  %347 = %343.1;
  %348 = %346.1;
  (%347, %348, meta[relay.Constant][11] /* ty=Tensor[(1536), int32] */)
}

def @func_7869() -> Tensor[(?, 3), int16] {
  @func_7867() /* ty=Tensor[(?, 3), int16] */
}

def @func_2981(%var_2947: Tensor[(16, 2, 10), float32], %var_2948: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) {
  %349 = cast(%var_2948, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %350 = shape_of(%var_2947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_2947, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %353 = cast(%var_2948, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %354 = sqrt(%353) /* ty=Tensor[(16, 2, 10), float32] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %356 = add(%351, %352) /* ty=Tensor[(16, 2, 10), float32] */;
  %357 = tan(%355) /* ty=Tensor[(16, 2, 10), float32] */;
  (%356, %357)
}

def @func_1452(%var_1444: Tensor[(9, 12, 10), uint16], %var_1445: Tensor[(9, 12, 10), uint16]) -> Tensor[(9, 12, 10), bool] {
  %358 = cast(%var_1445, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %359 = shape_of(%var_1444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%var_1444, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%360, %361) /* ty=Tensor[(9, 12, 10), bool] */
}

def @func_8226() -> (Tensor[(1, 3), float32],) {
  %364 = fn () -> (Tensor[(1, 3), float32],) {
    %362 = @func_7834() /* ty=(Tensor[(1, 3), float32],) */;
    %363 = %362.0;
    (%363,)
  };
  %364() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_5158() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  @func_5156() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */
}

def @func_7867() -> Tensor[(?, 3), int16] {
  %365 = @func_6680() /* ty=(Tensor[(?, 3), int16],) */;
  %365.0
}

def @func_4237() -> (Tensor[(1, 3), float32],) {
  %368 = fn () -> (Tensor[(1, 3), float32],) {
    %366 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
    %367 = %366.0;
    (%367,)
  };
  %368() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_4047() -> Tensor[(?, 3), int16] {
  %369 = @func_2770() /* ty=(Tensor[(?, 3), int16], Tensor[(?, 3), int16]) */;
  %369.1
}

def @func_5633(%var_5595: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(1536), float32]) {
  %370 = @func_3760() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) */;
  %371 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %372 = %371.1;
  %373 = cast(%var_5595, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(1), int32] */;
  %375 = cast(%372, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?), float32] */;
  %377 = %370.0;
  %378 = power(%375, %376) /* ty=Tensor[(1536), float32] */;
  (%377, %378)
}

def @func_1256(%var_1254: Tensor[(4, 14, 1), float64]) -> (Tensor[(4, 14, 1), float64],) {
  @func_1253(%var_1254) /* ty=(Tensor[(4, 14, 1), float64],) */
}

def @func_8328() -> (Tensor[(1, 3), float32],) {
  %379 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %380 = %379.1;
  (%380,)
}

def @func_979() -> (Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) {
  %398 = fn () -> (Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) {
    %381 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
    %382 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
    %383 = %382.2;
    %384 = cast(meta[relay.Constant][12] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(1), int32] */;
    %386 = cast(%383, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?), int32] */;
    %388 = cast(meta[relay.Constant][12] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %389 = reshape(%388, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
    %390 = @func_63(%389) /* ty=(Tensor[(16, 12, 8), bool],) */;
    %391 = cast(meta[relay.Constant][12] /* ty=Tensor[(1536), int32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %392 = atanh(%391) /* ty=Tensor[(1536), float32] */;
    %393 = cast(%392, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %394 = %381.0;
    %395 = left_shift(%386, %387) /* ty=Tensor[(1536), int32] */;
    %396 = %390.0;
    %397 = log10(%393) /* ty=Tensor[(1536), float32] */;
    (%394, %395, %396, %397)
  };
  %398() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */
}

def @func_7288() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) {
  %402 = fn () -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) {
    %399 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
    %400 = %399.0;
    %401 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
    (%400, %401)
  };
  %402() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64]) */
}

def @func_1929(%var_1927: Tensor[(9, 3, 11), float64]) -> Tensor[(9, 3, 11), bool] {
  @func_1926(%var_1927) /* ty=Tensor[(9, 3, 11), bool] */
}

def @func_3682() -> Tensor[(12, 10, ?), bool] {
  @func_3680() /* ty=Tensor[(12, 10, ?), bool] */
}

def @func_6781(%var_6780: Tensor[(9, 3, 11), uint32]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float32], Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), float32]) {
  %420 = fn (%var_6766: Tensor[(9, 3, 11), uint32]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float32], Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), float32]) {
    %403 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
    %404 = @func_5202() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
    %405 = %404.1;
    %406 = cast(%405, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %407 = cast(%var_6766, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %408 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%405, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %411 = cast(meta[relay.Constant][13] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %412 = reshape(%411, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
    %413 = @func_5633(%412) /* ty=(Tensor[(1, 3), float32], Tensor[(1536), float32]) */;
    %414 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
    %415 = %403.2;
    %416 = log10(%406) /* ty=Tensor[(9, 3, 11), float64] */;
    %417 = power(%409, %410) /* ty=Tensor[(9, 3, 11), float32] */;
    %418 = %413.0;
    %419 = %414.3;
    (%415, %416, %417, %418, meta[relay.Constant][13] /* ty=Tensor[(1536), int32] */, %419)
  };
  %420(%var_6780) /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float32], Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(1536), float32]) */
}

def @func_3156(%var_3154: Tensor[(1536), int32]) -> (Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) {
  @func_3153(%var_3154) /* ty=(Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) */
}

def @func_5574() -> Tensor[(1536), int32] {
  %422 = fn () -> Tensor[(1536), int32] {
    %421 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
    %421.2
  };
  %422() /* ty=Tensor[(1536), int32] */
}

def @func_4118() -> Tensor[(?, 3), int16] {
  @func_4116() /* ty=Tensor[(?, 3), int16] */
}

def @func_4232(%var_4229: Tensor[(2, 16, 10), float64], %var_4230: Tensor[(297), float64], %var_4231: Tensor[(840), uint16]) -> (Tensor[(2, 16, 10), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16]) {
  @func_4227(%var_4229, %var_4230, %var_4231) /* ty=(Tensor[(2, 16, 10), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16]) */
}

def @func_4277() -> (Tensor[(1, 3), float32],) {
  %423 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %424 = %423.0;
  (%424,)
}

def @func_65(%var_64: Tensor[(16, 12, 8), int32]) -> (Tensor[(16, 12, 8), bool],) {
  %430 = fn (%var_37: Tensor[(16, 12, 8), int32]) -> (Tensor[(16, 12, 8), bool],) {
    %425 = cast(%var_37, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
    %426 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(16, 12, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 12, 8), int32] */, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %429 = less(%427, %428) /* ty=Tensor[(16, 12, 8), bool] */;
    (%429,)
  };
  %430(%var_64) /* ty=(Tensor[(16, 12, 8), bool],) */
}

def @func_4206() -> (Tensor[(1536), int32],) {
  @func_4204() /* ty=(Tensor[(1536), int32],) */
}

def @func_7115(%var_7113: Tensor[(6, 9, 2), int64], %var_7114: Tensor[(6, 9, 2), int64]) -> (Tensor[(6, 9, 2), int64],) {
  @func_7111(%var_7113, %var_7114) /* ty=(Tensor[(6, 9, 2), int64],) */
}

def @func_8316(%var_8315: Tensor[(11, 6, 8), float64]) -> (Tensor[(11, 6, 8), float64],) {
  %433 = fn (%var_8306: Tensor[(11, 6, 8), float64]) -> (Tensor[(11, 6, 8), float64],) {
    %431 = cast(%var_8306, dtype="float64") /* ty=Tensor[(11, 6, 8), float64] */;
    %432 = erf(%431) /* ty=Tensor[(11, 6, 8), float64] */;
    (%432,)
  };
  %433(%var_8315) /* ty=(Tensor[(11, 6, 8), float64],) */
}

def @func_8064() -> (Tensor[(2, 160), float32],) {
  %434 = @func_3760() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) */;
  %435 = %434.3;
  (%435,)
}

def @func_6621() -> Tensor[(1, 3), float32] {
  %437 = fn () -> Tensor[(1, 3), float32] {
    %436 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
    %436.0
  };
  %437() /* ty=Tensor[(1, 3), float32] */
}

def @func_4204() -> (Tensor[(1536), int32],) {
  %438 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %439 = %438.0;
  (%439,)
}

def @func_1421() -> (Tensor[(1536), int32],) {
  %440 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %441 = %440.2;
  (%441,)
}

def @func_3482() -> (Tensor[(16, 2, 10), float32],) {
  %444 = fn () -> (Tensor[(16, 2, 10), float32],) {
    %442 = @func_3223() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(768, 2), int32]) */;
    %443 = %442.1;
    (%443,)
  };
  %444() /* ty=(Tensor[(16, 2, 10), float32],) */
}

def @func_4341() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %449 = fn () -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
    %445 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
    %446 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
    %447 = %445.0;
    %448 = %446.0;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */
}

def @func_760(%var_759: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) {
  %458 = fn (%var_747: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) {
    %450 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
    %451 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
    %452 = cast(%var_747, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %453 = reshape(%452, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
    %454 = @func_63(%453) /* ty=(Tensor[(16, 12, 8), bool],) */;
    %455 = %450.0;
    %456 = %451.0;
    %457 = %454.0;
    (%455, %456, %457, %var_747)
  };
  %458(%var_759) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 12, 8), bool], Tensor[(1536), int32]) */
}

def @func_5156() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %459 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %460 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %461 = %459.0;
  %462 = %460.1;
  (%461, %462)
}

def @func_6845() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
  %467 = fn () -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32]) {
    %463 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
    %464 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
    %465 = %463.0;
    %466 = %464.1;
    (%465, %466)
  };
  %467() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */
}

def @func_5449(%var_5421: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), float64], Tensor[(1536), float32]) {
  %468 = @func_2454() /* ty=(Tensor[(9, 3, 11), float64],) */;
  %469 = %468.0;
  %470 = cast(%var_5421, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %474 = @func_2163() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64]) */;
  %475 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %477 = log2(%476) /* ty=Tensor[(1536), float32] */;
  %478 = cast(%475, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(1), int32] */;
  %480 = cast(%477, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?), float32] */;
  %482 = divide(%472, %473) /* ty=Tensor[(9, 3, 11), float32] */;
  %483 = %474.0;
  %484 = floor_mod(%480, %481) /* ty=Tensor[(1536), float32] */;
  (%482, %483, %484)
}

def @func_4279() -> (Tensor[(1, 3), float32],) {
  @func_4277() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_4629(%var_4610: Tensor[(7, 6, 7), float64], %var_4611: Tensor[(7, 6, 7), float64], %var_4616: Tensor[(297), float64], %var_4617: Tensor[(1536), int32]) -> (Tensor[(7, 6, 7), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32]) {
  %485 = cast(%var_4611, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %486 = shape_of(%var_4610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%var_4610, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %489 = cast(%var_4616, dtype="float64") /* ty=Tensor[(297), float64] */;
  %490 = cast(%var_4617, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %491 = reshape(%489, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %492 = reshape(%490, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %493 = @func_2022(%491, %492) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %494 = floor_divide(%487, %488) /* ty=Tensor[(7, 6, 7), float64] */;
  %495 = %493.2;
  (%494, %495, %var_4616, %var_4617)
}

def @func_5452(%var_5450: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), float64], Tensor[(1536), float32]) {
  @func_5449(%var_5450) /* ty=(Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), float64], Tensor[(1536), float32]) */
}

def @func_5776() -> (Tensor[(1, 3), float32], Tensor[(?, 3), int16]) {
  %499 = fn () -> (Tensor[(1, 3), float32], Tensor[(?, 3), int16]) {
    %496 = @func_5202() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
    %497 = %496.0;
    %498 = @func_1898() /* ty=Tensor[(?, 3), int16] */;
    (%497, %498)
  };
  %499() /* ty=(Tensor[(1, 3), float32], Tensor[(?, 3), int16]) */
}

def @func_1565() -> (Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) {
  %500 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %501 = %500.0;
  %502 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="int16") /* ty=Tensor[(1, 3), int16] */;
  %505 = shape_of(%501, dtype="int32") /* ty=Tensor[(2), int32] */;
  %506 = cast(%501, dtype="int16") /* ty=Tensor[(1, 3), int16] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %508 = bitwise_or(%506, %507) /* ty=Tensor[(?, 3), int16] */;
  %509 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  (%508, %509)
}

def @func_5480() -> (Tensor[(9, 3, 11), float64],) {
  %512 = fn () -> (Tensor[(9, 3, 11), float64],) {
    %510 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
    %511 = %510.2;
    (%511,)
  };
  %512() /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_8190() -> (Tensor[(1536), int32], Tensor[(1536), int32]) {
  %513 = @func_3327() /* ty=Tensor[(1536), int32] */;
  %514 = @func_3327() /* ty=Tensor[(1536), int32] */;
  (%513, %514)
}

def @func_6681() -> (Tensor[(?, 3), int16],) {
  %516 = fn () -> (Tensor[(?, 3), int16],) {
    %515 = @func_4116() /* ty=Tensor[(?, 3), int16] */;
    (%515,)
  };
  %516() /* ty=(Tensor[(?, 3), int16],) */
}

def @func_1665() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) {
  %517 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %518 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %519 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
  %520 = %517.0;
  %521 = %518.0;
  %522 = %519.0;
  (%520, %521, %522)
}

def @func_2741() -> Tensor[(?, 3), int16] {
  @func_2739() /* ty=Tensor[(?, 3), int16] */
}

def @func_3153(%var_3127: Tensor[(1536), int32]) -> (Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) {
  %523 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
  %524 = %523.5;
  %525 = cast(%var_3127, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(1), int32] */;
  %527 = cast(%524, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?), int64] */;
  %529 = cast(meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %530 = cast(meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %531 = reshape(%529, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %532 = reshape(%530, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %533 = @func_2981(%531, %532) /* ty=(Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) */;
  %534 = cast(%524, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %535 = shape_of(%var_3127, dtype="int32") /* ty=Tensor[(1), int32] */;
  %536 = cast(%var_3127, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %538 = subtract(%527, %528) /* ty=Tensor[(1536), int64] */;
  %539 = cast(%538, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %540 = reshape(%539, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int32] */;
  %541 = @func_63(%540) /* ty=(Tensor[(16, 12, 8), bool],) */;
  %542 = %533.1;
  %543 = right_shift(%536, %537) /* ty=Tensor[(1536), uint64] */;
  %544 = %541.0;
  (%538, %542, meta[relay.Constant][15] /* ty=Tensor[(320), float32] */, %543, %544)
}

def @func_7754(%var_7752: Tensor[(297), float64], %var_7753: Tensor[(520), float64]) -> (Tensor[(1536), int32], Tensor[(9, 3, 11), bool], Tensor[(297), float64], Tensor[(520), float64]) {
  %552 = fn (%var_7747: Tensor[(297), float64], %var_7748: Tensor[(520), float64]) -> (Tensor[(1536), int32], Tensor[(9, 3, 11), bool], Tensor[(297), float64], Tensor[(520), float64]) {
    %545 = cast(%var_7747, dtype="float64") /* ty=Tensor[(297), float64] */;
    %546 = cast(%var_7748, dtype="float64") /* ty=Tensor[(520), float64] */;
    %547 = reshape(%545, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
    %548 = reshape(%546, newshape=[520, 1]) /* ty=Tensor[(520, 1), float64] */;
    %549 = @func_4965(%547, %548) /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), bool], Tensor[(5, 8, 13), float64], Tensor[(520, 1), float64]) */;
    %550 = @func_3327() /* ty=Tensor[(1536), int32] */;
    %551 = %549.1;
    (%550, %551, %var_7747, %var_7748)
  };
  %552(%var_7752, %var_7753) /* ty=(Tensor[(1536), int32], Tensor[(9, 3, 11), bool], Tensor[(297), float64], Tensor[(520), float64]) */
}

def @func_5847(%var_5846: int8) -> (Tensor[(?, 3), int16], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(12, 5, 14), uint64], Tensor[(420, 2), uint16], Tensor[(1, 3), float32], Tensor[(1, 15), int8], int8) {
  %569 = fn (%var_5841: int8) -> (Tensor[(?, 3), int16], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(12, 5, 14), uint64], Tensor[(420, 2), uint16], Tensor[(1, 3), float32], Tensor[(1, 15), int8], int8) {
    %553 = @func_4385() /* ty=(Tensor[(1536), int32],) */;
    %554 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
    %555 = cast(meta[relay.Constant][16] /* ty=Tensor[(420, 2), uint16] */, dtype="uint16") /* ty=Tensor[(420, 2), uint16] */;
    %556 = cast(meta[relay.Constant][16] /* ty=Tensor[(420, 2), uint16] */, dtype="uint16") /* ty=Tensor[(420, 2), uint16] */;
    %557 = reshape(%555, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
    %558 = reshape(%556, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
    %559 = @func_2673(%557, %558) /* ty=(Tensor[(12, 5, 14), uint64],) */;
    %560 = cast(%var_5841, dtype="int8") /* ty=int8 */;
    %561 = reshape(%560, newshape=[]) /* ty=int8 */;
    %562 = @func_2353(%561) /* ty=(Tensor[(1, 15), int8],) */;
    %563 = @func_4116() /* ty=Tensor[(?, 3), int16] */;
    %564 = %553.0;
    %565 = %554.1;
    %566 = %559.0;
    %567 = @func_1383() /* ty=Tensor[(1, 3), float32] */;
    %568 = %562.0;
    (%563, %564, %565, %566, meta[relay.Constant][16] /* ty=Tensor[(420, 2), uint16] */, %567, %568, %var_5841)
  };
  %569(%var_5846) /* ty=(Tensor[(?, 3), int16], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(12, 5, 14), uint64], Tensor[(420, 2), uint16], Tensor[(1, 3), float32], Tensor[(1, 15), int8], int8) */
}

def @func_6280() -> (Tensor[(9, 3, 11), float64],) {
  %572 = fn () -> (Tensor[(9, 3, 11), float64],) {
    %570 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
    %571 = %570.0;
    (%571,)
  };
  %572() /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_4116() -> Tensor[(?, 3), int16] {
  @func_4047() /* ty=Tensor[(?, 3), int16] */
}

def @func_7862() -> (Tensor[(?, 3), int16], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
  %573 = @func_6144() /* ty=(Tensor[(1, 3), float32], Tensor[(12, 10, ?), int16]) */;
  %574 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
  %575 = @func_1898() /* ty=Tensor[(?, 3), int16] */;
  %576 = %573.0;
  %577 = %574.0;
  (%575, %576, %577)
}

def @func_1384() -> Tensor[(1, 3), float32] {
  %579 = fn () -> Tensor[(1, 3), float32] {
    %578 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
    %578.0
  };
  %579() /* ty=Tensor[(1, 3), float32] */
}

def @func_1767() -> (Tensor[(1536), int32], Tensor[(1, 3), float32]) {
  %584 = fn () -> (Tensor[(1536), int32], Tensor[(1, 3), float32]) {
    %580 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
    %581 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
    %582 = %580.1;
    %583 = %581.0;
    (%582, %583)
  };
  %584() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */
}

def @func_7260() -> (Tensor[(1, 3), float32],) {
  @func_7258() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_5894() -> (Tensor[(6, 13), float32],) {
  @func_5892() /* ty=(Tensor[(6, 13), float32],) */
}

def @func_4387() -> (Tensor[(1536), int32],) {
  @func_4385() /* ty=(Tensor[(1536), int32],) */
}

def @func_6054() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(?, 3), float32]) {
  @func_6052() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(?, 3), float32]) */
}

def @main(%var_8338: Tensor[(14, 4, 12), float32]) -> Tensor[(14, 4, 12), float32] {
  %585 = cast(%var_8338, dtype="float32") /* ty=Tensor[(14, 4, 12), float32] */;
  erf(%585) /* ty=Tensor[(14, 4, 12), float32] */
}

def @func_7184(%var_7182: uint64, %var_7183: Tensor[(20), uint64]) -> (Tensor[(1536), int32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64]) {
  @func_7180(%var_7182, %var_7183) /* ty=(Tensor[(1536), int32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64]) */
}

def @func_5203() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
  %590 = fn () -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) {
    %586 = @func_3494() /* ty=(Tensor[(1, 3), float32],) */;
    %587 = @func_4796() /* ty=(Tensor[(9, 3, 11), uint32],) */;
    %588 = %586.0;
    %589 = %587.0;
    (%588, %589)
  };
  %590() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */
}

def @func_5636(%var_5634: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(1536), float32]) {
  @func_5633(%var_5634) /* ty=(Tensor[(1, 3), float32], Tensor[(1536), float32]) */
}

def @func_2538() -> Tensor[(1, 3), float32] {
  @func_2536() /* ty=Tensor[(1, 3), float32] */
}

def @func_1567() -> (Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) {
  @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */
}

def @func_2985(%var_2983: Tensor[(16, 2, 10), float32], %var_2984: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) {
  @func_2981(%var_2983, %var_2984) /* ty=(Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) */
}

def @func_7032(%var_7008: Tensor[(15, 1, 3), uint32], %var_7009: Tensor[(15, 11, 3), uint32]) -> (Tensor[(15, 11, 3), float64], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16], Tensor[(10, 12, ?), bool], Tensor[(3, 40), float32]) {
  %591 = cast(%var_7008, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
  %592 = cast(%var_7009, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %593 = less_equal(%591, %592) /* ty=Tensor[(15, 11, 3), bool] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(15, 11, 3), float64] */;
  %595 = cast(%var_7008, dtype="float64") /* ty=Tensor[(15, 1, 3), float64] */;
  %596 = cast(meta[relay.Constant][17] /* ty=Tensor[(840), uint16] */, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %597 = cast(meta[relay.Constant][17] /* ty=Tensor[(840), uint16] */, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %598 = reshape(%596, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %599 = reshape(%597, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %600 = @func_2673(%598, %599) /* ty=(Tensor[(12, 5, 14), uint64],) */;
  %601 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 40), float32] */, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
  %602 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 40), float32] */, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
  %603 = reshape(%601, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %604 = reshape(%602, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %605 = power(%594, %595) /* ty=Tensor[(15, 11, 3), float64] */;
  %606 = %600.0;
  %607 = @func_4592(%603, %604) /* ty=Tensor[(10, 12, ?), bool] */;
  (%605, %606, meta[relay.Constant][17] /* ty=Tensor[(840), uint16] */, %607, meta[relay.Constant][18] /* ty=Tensor[(3, 40), float32] */)
}

def @func_5681(%var_5680: Tensor[(2, 3, 4), uint8]) -> (Tensor[(2, 3, 4), uint8], Tensor[(9, 3, 11), float32], Tensor[(297), float64]) {
  %617 = fn (%var_5667: Tensor[(2, 3, 4), uint8]) -> (Tensor[(2, 3, 4), uint8], Tensor[(9, 3, 11), float32], Tensor[(297), float64]) {
    %608 = cast(%var_5667, dtype="uint8") /* ty=Tensor[(2, 3, 4), uint8] */;
    %609 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(2, 3, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 3, 4), uint8] */, dtype="uint8") /* ty=Tensor[(2, 3, 4), uint8] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %612 = cast(meta[relay.Constant][20] /* ty=Tensor[(297), float64] */, dtype="float64") /* ty=Tensor[(297), float64] */;
    %613 = reshape(%612, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
    %614 = @func_5449(%613) /* ty=(Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), float64], Tensor[(1536), float32]) */;
    %615 = bitwise_or(%610, %611) /* ty=Tensor[(2, 3, 4), uint8] */;
    %616 = %614.0;
    (%615, %616, meta[relay.Constant][20] /* ty=Tensor[(297), float64] */)
  };
  %617(%var_5680) /* ty=(Tensor[(2, 3, 4), uint8], Tensor[(9, 3, 11), float32], Tensor[(297), float64]) */
}

def @func_3327() -> Tensor[(1536), int32] {
  %618 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %618.1
}

def @func_6052() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(?, 3), float32]) {
  %619 = @func_4340() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %620 = @func_5369() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) */;
  %621 = @func_5260() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
  %622 = %621.2;
  %623 = @func_5079() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %624 = %623.0;
  %625 = cast(%624, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %626 = shape_of(%622, dtype="int32") /* ty=Tensor[(2), int32] */;
  %627 = cast(%622, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %629 = %619.0;
  %630 = %620.0;
  %631 = floor_mod(%627, %628) /* ty=Tensor[(?, 3), float32] */;
  (%629, %630, %631)
}

def @func_6377(%var_6374: uint64, %var_6375: Tensor[(20), uint64], %var_6376: Tensor[(2912), float64]) -> (Tensor[(1536), float64], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64], Tensor[(9, 3, 11), float32], Tensor[(2912), float64]) {
  %644 = fn (%var_6362: uint64, %var_6363: Tensor[(20), uint64], %var_6368: Tensor[(2912), float64]) -> (Tensor[(1536), float64], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64], Tensor[(9, 3, 11), float32], Tensor[(2912), float64]) {
    %632 = @func_3696() /* ty=(Tensor[(1536), float64],) */;
    %633 = cast(%var_6362, dtype="uint64") /* ty=uint64 */;
    %634 = cast(%var_6363, dtype="uint64") /* ty=Tensor[(20), uint64] */;
    %635 = reshape(%633, newshape=[]) /* ty=uint64 */;
    %636 = reshape(%634, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint64] */;
    %637 = @func_3384(%635, %636) /* ty=(Tensor[(1, 5, 4), uint64],) */;
    %638 = cast(%var_6368, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %639 = reshape(%638, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
    %640 = @func_3089(%639) /* ty=(Tensor[(14, 16, 13), float64], Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), uint32], Tensor[(9, 3, 11), float64]) */;
    %641 = %632.0;
    %642 = %637.0;
    %643 = %640.1;
    (%641, %642, %var_6362, %var_6363, %643, %var_6368)
  };
  %644(%var_6374, %var_6375, %var_6376) /* ty=(Tensor[(1536), float64], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20), uint64], Tensor[(9, 3, 11), float32], Tensor[(2912), float64]) */
}

def @func_1283() -> Tensor[(9, 3, 11), float64] {
  %646 = fn () -> Tensor[(9, 3, 11), float64] {
    %645 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
    %645.1
  };
  %646() /* ty=Tensor[(9, 3, 11), float64] */
}

def @func_2536() -> Tensor[(1, 3), float32] {
  %647 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %647.0
}

def @func_2771() -> (Tensor[(?, 3), int16], Tensor[(?, 3), int16]) {
  %650 = fn () -> (Tensor[(?, 3), int16], Tensor[(?, 3), int16]) {
    %648 = @func_2739() /* ty=Tensor[(?, 3), int16] */;
    %649 = @func_2739() /* ty=Tensor[(?, 3), int16] */;
    (%648, %649)
  };
  %650() /* ty=(Tensor[(?, 3), int16], Tensor[(?, 3), int16]) */
}

def @func_2060() -> (Tensor[(1536), int32], Tensor[(1, 3), float32]) {
  @func_2058() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */
}

def @func_3224() -> (Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(768, 2), int32]) {
  %657 = fn () -> (Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(768, 2), int32]) {
    %651 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
    %652 = cast(meta[relay.Constant][21] /* ty=Tensor[(768, 2), int32] */, dtype="int32") /* ty=Tensor[(768, 2), int32] */;
    %653 = reshape(%652, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
    %654 = @func_3153(%653) /* ty=(Tensor[(1536), int64], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(1536), uint64], Tensor[(16, 12, 8), bool]) */;
    %655 = %651.0;
    %656 = %654.1;
    (%655, %656, meta[relay.Constant][21] /* ty=Tensor[(768, 2), int32] */)
  };
  %657() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(768, 2), int32]) */
}

def @func_4049() -> Tensor[(?, 3), int16] {
  @func_4047() /* ty=Tensor[(?, 3), int16] */
}

def @func_2647() -> (Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) {
  %658 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %659 = @func_1282() /* ty=Tensor[(9, 3, 11), float64] */;
  %660 = %658.2;
  (%659, %660)
}

def @func_1058() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) {
  %681 = fn () -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) {
    %661 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
    %662 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
    %663 = %662.0;
    %664 = cast(%663, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %665 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
    %666 = cast(%663, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %667 = cosh(%666) /* ty=Tensor[(9, 3, 11), float64] */;
    %668 = cast(%663, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %672 = less_equal(%670, %671) /* ty=Tensor[(9, 3, 11), bool] */;
    %673 = cast(%667, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%672, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %677 = %661.0;
    %678 = tan(%664) /* ty=Tensor[(9, 3, 11), float64] */;
    %679 = %665.2;
    %680 = floor_divide(%675, %676) /* ty=Tensor[(9, 3, 11), float32] */;
    (%677, %678, %679, %680)
  };
  %681() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */
}

def @func_903() -> (Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) {
  %704 = fn () -> (Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) {
    %682 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %683 = rsqrt(%682) /* ty=Tensor[(9, 3, 11), float32] */;
    %684 = cast(%683, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %685 = log2(%684) /* ty=Tensor[(9, 3, 11), float64] */;
    %686 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 3, 11), float64] */, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
    %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%685, dtype="uint32") /* ty=Tensor[(9, 3, 11), uint32] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %690 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
    %691 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
    %692 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 11), float64] */, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %693 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
    %694 = cast(%685, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %696 = greater_equal(%694, %695) /* ty=Tensor[(9, 3, 11), bool] */;
    %697 = cast(%696, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %698 = erf(%697) /* ty=Tensor[(9, 3, 11), float32] */;
    %699 = cast(%698, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
    %700 = right_shift(%688, %689) /* ty=Tensor[(9, 3, 11), uint32] */;
    %701 = %690.2;
    %702 = %691.0;
    %703 = atanh(%699) /* ty=Tensor[(9, 3, 11), float32] */;
    (%700, %701, %702, %703)
  };
  %704() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */
}

def @func_5131() -> (Tensor[(?, 3), int16], Tensor[(1536), float64]) {
  %711 = fn () -> (Tensor[(?, 3), int16], Tensor[(1536), float64]) {
    %705 = @func_2770() /* ty=(Tensor[(?, 3), int16], Tensor[(?, 3), int16]) */;
    %706 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
    %707 = %706.2;
    %708 = cast(%707, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %709 = %705.1;
    %710 = sin(%708) /* ty=Tensor[(1536), float64] */;
    (%709, %710)
  };
  %711() /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float64]) */
}

def @func_3092(%var_3090: Tensor[(14, 16, 13), float64]) -> (Tensor[(14, 16, 13), float64], Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), uint32], Tensor[(9, 3, 11), float64]) {
  @func_3089(%var_3090) /* ty=(Tensor[(14, 16, 13), float64], Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), uint32], Tensor[(9, 3, 11), float64]) */
}

def @func_7347() -> (Tensor[(1, 3), float32],) {
  %714 = fn () -> (Tensor[(1, 3), float32],) {
    %712 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
    %713 = %712.1;
    (%713,)
  };
  %714() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_5511() -> Tensor[(12, 10, ?), float64] {
  %715 = @func_3680() /* ty=Tensor[(12, 10, ?), bool] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(12, 10, ?), float32] */;
  %717 = sinh(%716) /* ty=Tensor[(12, 10, ?), float32] */;
  %718 = cast(%717, dtype="int64") /* ty=Tensor[(12, 10, ?), int64] */;
  %719 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%715, dtype="int64") /* ty=Tensor[(12, 10, ?), int64] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %722 = left_shift(%720, %721) /* ty=Tensor[(12, 10, ?), int64] */;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(12, 10, ?), float64] */;
  acos(%723) /* ty=Tensor[(12, 10, ?), float64] */
}

def @func_7611() -> Tensor[(1, 3), float32] {
  @func_7609() /* ty=Tensor[(1, 3), float32] */
}

def @func_7664() -> (Tensor[(9, 3, 11), uint64],) {
  @func_7662() /* ty=(Tensor[(9, 3, 11), uint64],) */
}

def @func_3760() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) {
  %724 = @func_3645() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1, 3), float32], Tensor[(1536), float64]) */;
  %725 = @func_1094() /* ty=(Tensor[(1, 3), float32],) */;
  %726 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %727 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 160), float32] */, dtype="float32") /* ty=Tensor[(2, 160), float32] */;
  %728 = reshape(%726, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %729 = reshape(%727, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %730 = @func_2981(%728, %729) /* ty=(Tensor[(16, 2, 10), float32], Tensor[(16, 2, 10), float32]) */;
  %731 = %724.1;
  %732 = %725.0;
  %733 = %730.0;
  (%731, %732, %733, meta[relay.Constant][25] /* ty=Tensor[(2, 160), float32] */)
}

def @func_7864() -> (Tensor[(?, 3), int16], Tensor[(1, 3), float32], Tensor[(1536), int32]) {
  @func_7862() /* ty=(Tensor[(?, 3), int16], Tensor[(1, 3), float32], Tensor[(1536), int32]) */
}

def @func_2564(%var_2563: Tensor[(8, 9, 2), float32]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(8, 9, 2), uint16]) {
  %745 = fn (%var_2544: Tensor[(8, 9, 2), float32]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(8, 9, 2), uint16]) {
    %734 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
    %735 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
    %736 = cast(%var_2544, dtype="float32") /* ty=Tensor[(8, 9, 2), float32] */;
    %737 = sigmoid(%736) /* ty=Tensor[(8, 9, 2), float32] */;
    %738 = cast(%var_2544, dtype="uint16") /* ty=Tensor[(8, 9, 2), uint16] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%737, dtype="uint16") /* ty=Tensor[(8, 9, 2), uint16] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %742 = %734.1;
    %743 = %735.0;
    %744 = subtract(%740, %741) /* ty=Tensor[(8, 9, 2), uint16] */;
    (%742, %743, %744)
  };
  %745(%var_2563) /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(8, 9, 2), uint16]) */
}

def @func_7076(%var_7073: Tensor[(1080), uint16], %var_7074: Tensor[(1536), int32], %var_7075: Tensor[(120), float32]) -> (Tensor[(?, 3), int16], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(10, 12, ?), bool], Tensor[(120), float32], Tensor[(9, 12, 10), uint64]) {
  %766 = fn (%var_7054: Tensor[(1080), uint16], %var_7057: Tensor[(1536), int32], %var_7060: Tensor[(120), float32]) -> (Tensor[(?, 3), int16], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(10, 12, ?), bool], Tensor[(120), float32], Tensor[(9, 12, 10), uint64]) {
    %746 = cast(%var_7057, dtype="int32") /* ty=Tensor[(1536), int32] */;
    %747 = reshape(%746, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
    %748 = @func_1704(%747) /* ty=(Tensor[(1536), float32],) */;
    %749 = cast(%var_7060, dtype="float32") /* ty=Tensor[(120), float32] */;
    %750 = cast(%var_7060, dtype="float32") /* ty=Tensor[(120), float32] */;
    %751 = reshape(%749, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
    %752 = reshape(%750, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
    %753 = cast(%var_7054, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
    %754 = cast(%var_7054, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
    %755 = reshape(%753, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), uint16] */;
    %756 = reshape(%754, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), uint16] */;
    %757 = @func_1452(%755, %756) /* ty=Tensor[(9, 12, 10), bool] */;
    %758 = cast(%var_7054, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%757, dtype="uint64") /* ty=Tensor[(9, 12, 10), uint64] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %762 = @func_4047() /* ty=Tensor[(?, 3), int16] */;
    %763 = %748.0;
    %764 = @func_4592(%751, %752) /* ty=Tensor[(10, 12, ?), bool] */;
    %765 = bitwise_and(%760, %761) /* ty=Tensor[(9, 12, 10), uint64] */;
    (%762, %763, %var_7057, %764, %var_7060, %765)
  };
  %766(%var_7073, %var_7074, %var_7075) /* ty=(Tensor[(?, 3), int16], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(10, 12, ?), bool], Tensor[(120), float32], Tensor[(9, 12, 10), uint64]) */
}

def @func_4456(%var_4454: Tensor[(13, 12, 12), float64], %var_4455: Tensor[(13, 12, 12), float64]) -> (Tensor[(13, 12, 12), float64],) {
  @func_4452(%var_4454, %var_4455) /* ty=(Tensor[(13, 12, 12), float64],) */
}

def @func_3089(%var_3052: Tensor[(14, 16, 13), float64]) -> (Tensor[(14, 16, 13), float64], Tensor[(9, 3, 11), float32], Tensor[(9, 3, 11), uint32], Tensor[(9, 3, 11), float64]) {
  %767 = cast(%var_3052, dtype="float64") /* ty=Tensor[(14, 16, 13), float64] */;
  %768 = @func_2647() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) */;
  %769 = %768.0;
  %770 = cast(%769, dtype="float32") /* ty=Tensor[(9, 3, 11), float32] */;
  %771 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %772 = @func_2233() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */;
  %773 = erf(%767) /* ty=Tensor[(14, 16, 13), float64] */;
  %774 = sin(%770) /* ty=Tensor[(9, 3, 11), float32] */;
  %775 = %771.0;
  %776 = %772.0;
  (%773, %774, %775, %776)
}

def @func_7258() -> (Tensor[(1, 3), float32],) {
  %777 = @func_5079() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32]) */;
  %778 = %777.0;
  (%778,)
}

def @func_7236() -> Tensor[(1, 3), float32] {
  @func_4538() /* ty=Tensor[(1, 3), float32] */
}

def @func_7695() -> Tensor[(1, 3), float32] {
  @func_7693() /* ty=Tensor[(1, 3), float32] */
}

def @func_6228() -> (Tensor[(1536), bool], Tensor[(1, 3), float32]) {
  %779 = @func_4307() /* ty=(Tensor[(1536), int32], Tensor[(1536), float32], Tensor[(9, 3, 11), uint32]) */;
  %780 = %779.0;
  %781 = cast(meta[relay.Constant][26] /* ty=Tensor[(1536), int32] */, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(1), int32] */;
  %783 = cast(%780, dtype="uint64") /* ty=Tensor[(1536), uint64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %785 = multiply(%783, %784) /* ty=Tensor[(1536), uint64] */;
  %786 = cast(%785, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %787 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %788 = cast(meta[relay.Constant][26] /* ty=Tensor[(1536), int32] */, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?), bool] */;
  %790 = @func_4277() /* ty=(Tensor[(1, 3), float32],) */;
  %791 = not_equal(%788, %789) /* ty=Tensor[(1536), bool] */;
  %792 = %790.0;
  (%791, %792)
}

def @func_6411(%var_6408: Tensor[(3, 14, 16), float32]) -> Tensor[(3, 14, 16), float32] {
  %793 = cast(%var_6408, dtype="float32") /* ty=Tensor[(3, 14, 16), float32] */;
  log(%793) /* ty=Tensor[(3, 14, 16), float32] */
}

def @func_5371() -> (Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) {
  @func_5369() /* ty=(Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(1536), int32]) */
}

def @func_1604() -> (Tensor[(1, 3), float32],) {
  %795 = fn () -> (Tensor[(1, 3), float32],) {
    %794 = @func_1383() /* ty=Tensor[(1, 3), float32] */;
    (%794,)
  };
  %795() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_1899() -> Tensor[(?, 3), int16] {
  %797 = fn () -> Tensor[(?, 3), int16] {
    %796 = @func_1565() /* ty=(Tensor[(?, 3), int16], Tensor[(9, 3, 11), float64]) */;
    %796.0
  };
  %797() /* ty=Tensor[(?, 3), int16] */
}

def @func_3762() -> (Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) {
  @func_3760() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(16, 2, 10), float32], Tensor[(2, 160), float32]) */
}

def @func_6146() -> (Tensor[(1, 3), float32], Tensor[(12, 10, ?), int16]) {
  @func_6144() /* ty=(Tensor[(1, 3), float32], Tensor[(12, 10, ?), int16]) */
}

def @func_3495() -> (Tensor[(1, 3), float32],) {
  %799 = fn () -> (Tensor[(1, 3), float32],) {
    %798 = @func_1383() /* ty=Tensor[(1, 3), float32] */;
    (%798,)
  };
  %799() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_7958() -> (Tensor[(12, 10, ?), bool], Tensor[(56), float64], Tensor[(4, 14, 3), int64]) {
  %809 = fn () -> (Tensor[(12, 10, ?), bool], Tensor[(56), float64], Tensor[(4, 14, 3), int64]) {
    %800 = cast(meta[relay.Constant][27] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %801 = reshape(%800, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
    %802 = @func_1253(%801) /* ty=(Tensor[(4, 14, 1), float64],) */;
    %803 = %802.0;
    %804 = @func_4538() /* ty=Tensor[(1, 3), float32] */;
    %805 = cast(%803, dtype="int64") /* ty=Tensor[(4, 14, 1), int64] */;
    %806 = cast(%804, dtype="int64") /* ty=Tensor[(1, 3), int64] */;
    %807 = @func_3680() /* ty=Tensor[(12, 10, ?), bool] */;
    %808 = add(%805, %806) /* ty=Tensor[(4, 14, 3), int64] */;
    (%807, meta[relay.Constant][27] /* ty=Tensor[(56), float64] */, %808)
  };
  %809() /* ty=(Tensor[(12, 10, ?), bool], Tensor[(56), float64], Tensor[(4, 14, 3), int64]) */
}

def @func_8153() -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16], Tensor[(10), float64]) {
  %817 = fn () -> (Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16], Tensor[(10), float64]) {
    %810 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
    %811 = cast(meta[relay.Constant][28] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
    %812 = reshape(%811, newshape=[5, 1, 2]) /* ty=Tensor[(5, 1, 2), float64] */;
    %813 = @func_6959(%812) /* ty=(Tensor[(5, 1, 2), float64], Tensor[(1, 3), float32], Tensor[(?, 3), int16]) */;
    %814 = @func_6620() /* ty=Tensor[(1, 3), float32] */;
    %815 = %810.1;
    %816 = %813.2;
    (%814, %815, %816, meta[relay.Constant][28] /* ty=Tensor[(10), float64] */)
  };
  %817() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16], Tensor[(10), float64]) */
}

def @func_2739() -> Tensor[(?, 3), int16] {
  @func_1898() /* ty=Tensor[(?, 3), int16] */
}

def @func_4227(%var_4210: Tensor[(2, 16, 10), float64], %var_4216: Tensor[(297), float64], %var_4221: Tensor[(840), uint16]) -> (Tensor[(2, 16, 10), float64], Tensor[(1, 3), float32], Tensor[(297), float64], Tensor[(1536), int32], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16]) {
  %818 = cast(3.07225f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %819 = cast(%var_4210, dtype="float64") /* ty=Tensor[(2, 16, 10), float64] */;
  %820 = cast(%var_4216, dtype="float64") /* ty=Tensor[(297), float64] */;
  %821 = cast(meta[relay.Constant][29] /* ty=Tensor[(1536), int32] */, dtype="int32") /* ty=Tensor[(1536), int32] */;
  %822 = reshape(%820, newshape=[9, 3, 11]) /* ty=Tensor[(9, 3, 11), float64] */;
  %823 = reshape(%821, newshape=[1536]) /* ty=Tensor[(1536), int32] */;
  %824 = @func_2022(%822, %823) /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %825 = cast(%var_4221, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %826 = cast(%var_4221, dtype="uint16") /* ty=Tensor[(840), uint16] */;
  %827 = reshape(%825, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %828 = reshape(%826, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), uint16] */;
  %829 = @func_2673(%827, %828) /* ty=(Tensor[(12, 5, 14), uint64],) */;
  %830 = floor_mod(%818, %819) /* ty=Tensor[(2, 16, 10), float64] */;
  %831 = %824.2;
  %832 = %829.0;
  (%830, %831, %var_4216, meta[relay.Constant][29] /* ty=Tensor[(1536), int32] */, %832, %var_4221)
}

def @func_6230() -> (Tensor[(1536), bool], Tensor[(1, 3), float32]) {
  @func_6228() /* ty=(Tensor[(1536), bool], Tensor[(1, 3), float32]) */
}

def @func_7767(%var_7756: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  %833 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %834 = shape_of(%var_7756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%var_7756, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %837 = power(%835, %836) /* ty=Tensor[(16, 10, 14), float32] */;
  (%837,)
}

def @func_5750() -> (Tensor[(1, 3), float32],) {
  %838 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %839 = %838.0;
  (%839,)
}

def @func_1456(%var_1454: Tensor[(9, 12, 10), uint16], %var_1455: Tensor[(9, 12, 10), uint16]) -> Tensor[(9, 12, 10), bool] {
  @func_1452(%var_1454, %var_1455) /* ty=Tensor[(9, 12, 10), bool] */
}

def @func_1707(%var_1705: Tensor[(1536), int32]) -> (Tensor[(1536), float32],) {
  @func_1704(%var_1705) /* ty=(Tensor[(1536), float32],) */
}

def @func_4595(%var_4593: Tensor[(10, 12, 1), float32], %var_4594: Tensor[(10, 12, 1), float32]) -> Tensor[(10, 12, ?), bool] {
  %844 = fn (%var_4580: Tensor[(10, 12, 1), float32], %var_4581: Tensor[(10, 12, 1), float32]) -> Tensor[(10, 12, ?), bool] {
    %840 = cast(%var_4581, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
    %841 = shape_of(%var_4580, dtype="int32") /* ty=Tensor[(3), int32] */;
    %842 = cast(%var_4580, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%842, %843) /* ty=Tensor[(10, 12, ?), bool] */
  };
  %844(%var_4593, %var_4594) /* ty=Tensor[(10, 12, ?), bool] */
}

def @func_6568(%var_6566: uint64, %var_6567: Tensor[(20, 1), uint64]) -> (Tensor[(1, 3), float32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20, 1), uint64], Tensor[(2, 3, 4), uint8], Tensor[(12, 2), uint8], Tensor[(16, 2, 10), float64]) {
  %861 = fn (%var_6552: uint64, %var_6553: Tensor[(20, 1), uint64]) -> (Tensor[(1, 3), float32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20, 1), uint64], Tensor[(2, 3, 4), uint8], Tensor[(12, 2), uint8], Tensor[(16, 2, 10), float64]) {
    %845 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
    %846 = cast(%var_6552, dtype="uint64") /* ty=uint64 */;
    %847 = cast(%var_6553, dtype="uint64") /* ty=Tensor[(20, 1), uint64] */;
    %848 = reshape(%846, newshape=[]) /* ty=uint64 */;
    %849 = reshape(%847, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint64] */;
    %850 = @func_3384(%848, %849) /* ty=(Tensor[(1, 5, 4), uint64],) */;
    %851 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 2), uint8] */, dtype="uint8") /* ty=Tensor[(12, 2), uint8] */;
    %852 = reshape(%851, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), uint8] */;
    %853 = @func_5679(%852) /* ty=(Tensor[(2, 3, 4), uint8], Tensor[(9, 3, 11), float32], Tensor[(297), float64]) */;
    %854 = @func_3481() /* ty=(Tensor[(16, 2, 10), float32],) */;
    %855 = %854.0;
    %856 = cast(%855, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
    %857 = %845.2;
    %858 = %850.0;
    %859 = %853.0;
    %860 = acos(%856) /* ty=Tensor[(16, 2, 10), float64] */;
    (%857, %858, %var_6552, %var_6553, %859, meta[relay.Constant][31] /* ty=Tensor[(12, 2), uint8] */, %860)
  };
  %861(%var_6566, %var_6567) /* ty=(Tensor[(1, 3), float32], Tensor[(1, 5, 4), uint64], uint64, Tensor[(20, 1), uint64], Tensor[(2, 3, 4), uint8], Tensor[(12, 2), uint8], Tensor[(16, 2, 10), float64]) */
}

def @func_6414(%var_6412: Tensor[(3, 14, 16), float32]) -> Tensor[(3, 14, 16), float32] {
  @func_6411(%var_6412) /* ty=Tensor[(3, 14, 16), float32] */
}

def @func_7835() -> (Tensor[(1, 3), float32],) {
  %863 = fn () -> (Tensor[(1, 3), float32],) {
    %862 = @func_5951() /* ty=Tensor[(1, 3), float32] */;
    (%862,)
  };
  %863() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_2431(%var_2429: Tensor[(297, 1), float64], %var_2430: Tensor[(56), float64]) -> (Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), bool], Tensor[(297, 1), float64], Tensor[(4, 14, 1), float64], Tensor[(56), float64]) {
  @func_2427(%var_2429, %var_2430) /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), bool], Tensor[(297, 1), float64], Tensor[(4, 14, 1), float64], Tensor[(56), float64]) */
}

def @func_3697() -> (Tensor[(1536), float64],) {
  %865 = fn () -> (Tensor[(1536), float64],) {
    %864 = @func_3601() /* ty=Tensor[(1536), float64] */;
    (%864,)
  };
  %865() /* ty=(Tensor[(1536), float64],) */
}

def @func_2912() -> (Tensor[(9, 3, 11), float64],) {
  %866 = @func_2647() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) */;
  %867 = %866.0;
  (%867,)
}

def @func_8294() -> (Tensor[(1, 3), float32],) {
  %870 = fn () -> (Tensor[(1, 3), float32],) {
    %868 = @func_4437() /* ty=(Tensor[(1, 3), float32],) */;
    %869 = %868.0;
    (%869,)
  };
  %870() /* ty=(Tensor[(1, 3), float32],) */
}

def @func_2234() -> (Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) {
  %874 = fn () -> (Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) {
    %871 = @func_2227() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), int8], Tensor[(1536), int32], Tensor[(1536), int32]) */;
    %872 = %871.1;
    %873 = @func_1898() /* ty=Tensor[(?, 3), int16] */;
    (%872, %873)
  };
  %874() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(?, 3), int16]) */
}

def @func_2058() -> (Tensor[(1536), int32], Tensor[(1, 3), float32]) {
  %875 = @func_902() /* ty=(Tensor[(9, 3, 11), uint32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(9, 3, 11), float32]) */;
  %876 = @func_1603() /* ty=(Tensor[(1, 3), float32],) */;
  %877 = %875.1;
  %878 = %876.0;
  (%877, %878)
}

def @func_7940(%var_7939: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(?, 3), int16], Tensor[(1536), bool]) {
  %889 = fn (%var_7917: Tensor[(1536), int32]) -> (Tensor[(1, 3), float32], Tensor[(?, 3), int16], Tensor[(1536), bool]) {
    %879 = @func_5156() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32]) */;
    %880 = @func_1665() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), uint32], Tensor[(?, 3), int16]) */;
    %881 = @func_3327() /* ty=Tensor[(1536), int32] */;
    %882 = cast(%var_7917, dtype="bool") /* ty=Tensor[(1536), bool] */;
    %883 = shape_of(%881, dtype="int32") /* ty=Tensor[(1), int32] */;
    %884 = cast(%881, dtype="bool") /* ty=Tensor[(1536), bool] */;
    %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?), bool] */;
    %886 = %879.0;
    %887 = %880.2;
    %888 = greater_equal(%884, %885) /* ty=Tensor[(1536), bool] */;
    (%886, %887, %888)
  };
  %889(%var_7939) /* ty=(Tensor[(1, 3), float32], Tensor[(?, 3), int16], Tensor[(1536), bool]) */
}

def @func_2874() -> (Tensor[(16, 12, 8), bool], Tensor[(1, 3), float32]) {
  %890 = @func_1057() /* ty=(Tensor[(1, 3), float32], Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool], Tensor[(9, 3, 11), float32]) */;
  %891 = @func_978() /* ty=(Tensor[(1, 3), float32], Tensor[(1536), int32], Tensor[(16, 12, 8), bool], Tensor[(1536), float32]) */;
  %892 = %890.2;
  %893 = %891.0;
  (%892, %893)
}

def @func_4733() -> (Tensor[(9, 3, 11), float64],) {
  %896 = fn () -> (Tensor[(9, 3, 11), float64],) {
    %894 = @func_2454() /* ty=(Tensor[(9, 3, 11), float64],) */;
    %895 = %894.0;
    (%895,)
  };
  %896() /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_6959(%var_6935: Tensor[(5, 1, 2), float64]) -> (Tensor[(5, 1, 2), float64], Tensor[(1, 3), float32], Tensor[(?, 3), int16]) {
  %897 = cast(%var_6935, dtype="float64") /* ty=Tensor[(5, 1, 2), float64] */;
  %898 = @func_659() /* ty=(Tensor[(1, 3), float32],) */;
  %899 = atanh(%897) /* ty=Tensor[(5, 1, 2), float64] */;
  %900 = %898.0;
  %901 = @func_3717() /* ty=Tensor[(?, 3), int16] */;
  (%899, %900, %901)
}

def @func_4968(%var_4966: Tensor[(9, 3, 11), float64], %var_4967: Tensor[(520, 1), float64]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), bool], Tensor[(5, 8, 13), float64], Tensor[(520, 1), float64]) {
  %919 = fn (%var_4934: Tensor[(9, 3, 11), float64], %var_4948: Tensor[(520, 1), float64]) -> (Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), bool], Tensor[(5, 8, 13), float64], Tensor[(520, 1), float64]) {
    %902 = @func_2912() /* ty=(Tensor[(9, 3, 11), float64],) */;
    %903 = @func_2454() /* ty=(Tensor[(9, 3, 11), float64],) */;
    %904 = %903.0;
    %905 = cast(%var_4934, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %907 = cast(%904, dtype="bool") /* ty=Tensor[(9, 3, 11), bool] */;
    %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %909 = cast(%var_4948, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %910 = cast(%var_4948, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %911 = reshape(%909, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
    %912 = reshape(%910, newshape=[5, 8, 13]) /* ty=Tensor[(5, 8, 13), float64] */;
    %913 = @func_4851(%911, %912) /* ty=(Tensor[(5, 8, 13), uint32], Tensor[(1536), float32], Tensor[(1536), int32], Tensor[(1, 3), float32], Tensor[(5, 8, 13), float64], Tensor[(5, 8, 13), int32]) */;
    %914 = cast(%var_4948, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %915 = %902.0;
    %916 = logical_or(%907, %908) /* ty=Tensor[(9, 3, 11), bool] */;
    %917 = %913.4;
    %918 = atan(%914) /* ty=Tensor[(520, 1), float64] */;
    (%915, %916, %917, %918)
  };
  %919(%var_4966, %var_4967) /* ty=(Tensor[(9, 3, 11), float64], Tensor[(9, 3, 11), bool], Tensor[(5, 8, 13), float64], Tensor[(520, 1), float64]) */
}

def @func_7036(%var_7034: Tensor[(15, 1, 3), uint32], %var_7035: Tensor[(15, 11, 3), uint32]) -> (Tensor[(15, 11, 3), float64], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16], Tensor[(10, 12, ?), bool], Tensor[(3, 40), float32]) {
  @func_7032(%var_7034, %var_7035) /* ty=(Tensor[(15, 11, 3), float64], Tensor[(12, 5, 14), uint64], Tensor[(840), uint16], Tensor[(10, 12, ?), bool], Tensor[(3, 40), float32]) */
}

def @func_2676(%var_2674: Tensor[(12, 5, 14), uint16], %var_2675: Tensor[(12, 5, 14), uint16]) -> (Tensor[(12, 5, 14), uint64],) {
  %930 = fn (%var_2653: Tensor[(12, 5, 14), uint16], %var_2654: Tensor[(12, 5, 14), uint16]) -> (Tensor[(12, 5, 14), uint64],) {
    %920 = cast(%var_2654, dtype="uint16") /* ty=Tensor[(12, 5, 14), uint16] */;
    %921 = shape_of(%var_2653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %922 = cast(%var_2653, dtype="uint16") /* ty=Tensor[(12, 5, 14), uint16] */;
    %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %924 = right_shift(%922, %923) /* ty=Tensor[(12, 5, 14), uint16] */;
    %925 = cast(%var_2654, dtype="uint64") /* ty=Tensor[(12, 5, 14), uint64] */;
    %926 = shape_of(%924, dtype="int32") /* ty=Tensor[(3), int32] */;
    %927 = cast(%924, dtype="uint64") /* ty=Tensor[(12, 5, 14), uint64] */;
    %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %929 = maximum(%927, %928) /* ty=Tensor[(12, 5, 14), uint64] */;
    (%929,)
  };
  %930(%var_2674, %var_2675) /* ty=(Tensor[(12, 5, 14), uint64],) */
}

def @func_5513() -> Tensor[(12, 10, ?), float64] {
  @func_5511() /* ty=Tensor[(12, 10, ?), float64] */
}

def @func_8192() -> (Tensor[(1536), int32], Tensor[(1536), int32]) {
  @func_8190() /* ty=(Tensor[(1536), int32], Tensor[(1536), int32]) */
}

def @func_2144() -> Tensor[(9, 3, 11), uint32] {
  @func_2142() /* ty=Tensor[(9, 3, 11), uint32] */
}

def @func_4539() -> Tensor[(1, 3), float32] {
  %932 = fn () -> Tensor[(1, 3), float32] {
    %931 = @func_1766() /* ty=(Tensor[(1536), int32], Tensor[(1, 3), float32]) */;
    %931.1
  };
  %932() /* ty=Tensor[(1, 3), float32] */
}

def @func_3329() -> Tensor[(1536), int32] {
  @func_3327() /* ty=Tensor[(1536), int32] */
}

def @func_6893(%var_6891: Tensor[(8, 11, 13), uint32], %var_6892: Tensor[(8, 11, 13), uint32]) -> Tensor[(8, 11, 13), uint32] {
  %937 = fn (%var_6874: Tensor[(8, 11, 13), uint32], %var_6875: Tensor[(8, 11, 13), uint32]) -> Tensor[(8, 11, 13), uint32] {
    %933 = cast(%var_6875, dtype="uint32") /* ty=Tensor[(8, 11, 13), uint32] */;
    %934 = shape_of(%var_6874, dtype="int32") /* ty=Tensor[(3), int32] */;
    %935 = cast(%var_6874, dtype="uint32") /* ty=Tensor[(8, 11, 13), uint32] */;
    %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    subtract(%935, %936) /* ty=Tensor[(8, 11, 13), uint32] */
  };
  %937(%var_6891, %var_6892) /* ty=Tensor[(8, 11, 13), uint32] */
}

def @func_2649() -> (Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) {
  @func_2647() /* ty=(Tensor[(9, 3, 11), float64], Tensor[(16, 12, 8), bool]) */
}

def @func_4385() -> (Tensor[(1536), int32],) {
  %938 = @func_831() /* ty=(Tensor[(1, 3), float32], Tensor[(1, 3), float32], Tensor[(1536), int32]) */;
  %939 = %938.2;
  (%939,)
}

def @func_5384() -> (Tensor[(?, 3), int16],) {
  %942 = fn () -> (Tensor[(?, 3), int16],) {
    %940 = @func_3279() /* ty=(Tensor[(?, 3), int16],) */;
    %941 = %940.0;
    (%941,)
  };
  %942() /* ty=(Tensor[(?, 3), int16],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen47/build/output.py:2857: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen47/build/output.py", line 2862, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(672) tvmgen_default_fused_erf_kernel0(float* __restrict__ T_erf, float* __restrict__ placeholder) {
  T_erf[(((int)threadIdx.x))] = erff(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

