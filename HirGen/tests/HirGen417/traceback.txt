==========mod==========
#[version = "0.0.5"]
def @func_5473() -> (Tensor[(13, 12, 6), uint16],) {
  %0 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %1 = %0.0;
  (%1,)
}

def @func_6366() -> (Tensor[(4, 12, 15), float32],) {
  %2 = @func_4962() /* ty=Tensor[(4, 12, 15), float32] */;
  (%2,)
}

def @func_1579(%var_1530: uint64, %var_1531: Tensor[(10, 15, 9), uint64], %var_1566: Tensor[(26), int64], %var_1567: Tensor[(390), int64]) -> (Tensor[(975), uint16], Tensor[(26), int64], Tensor[(390), int64], Tensor[(13, 12, 6), uint8], Tensor[(10, 15, 9), uint32]) {
  %3 = cast(%var_1566, dtype="int64") /* ty=Tensor[(26), int64] */;
  %4 = cast(%var_1567, dtype="int64") /* ty=Tensor[(390), int64] */;
  %5 = cast(%var_1530, dtype="uint16") /* ty=uint16 */;
  %6 = reshape(%3, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), int64] */;
  %7 = reshape(%4, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), int64] */;
  %8 = reshape(%5, newshape=[]) /* ty=uint16 */;
  %9 = @func_1202(%6, %7, %8) /* ty=(Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) */;
  %10 = cast(%var_1531, dtype="float32") /* ty=Tensor[(10, 15, 9), float32] */;
  %11 = rsqrt(%10) /* ty=Tensor[(10, 15, 9), float32] */;
  %12 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
  %13 = cast(%var_1531, dtype="uint64") /* ty=Tensor[(10, 15, 9), uint64] */;
  %14 = add(%12, %13) /* ty=Tensor[(10, 15, 9), uint64] */;
  %15 = cast(%14, dtype="uint8") /* ty=Tensor[(10, 15, 9), uint8] */;
  %16 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%11, dtype="uint8") /* ty=Tensor[(10, 15, 9), uint8] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %19 = bitwise_or(%17, %18) /* ty=Tensor[(10, 15, 9), uint8] */;
  %20 = cast(%19, dtype="uint32") /* ty=Tensor[(10, 15, 9), uint32] */;
  %21 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%11, dtype="uint32") /* ty=Tensor[(10, 15, 9), uint32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %24 = %9.5;
  %25 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %26 = subtract(%22, %23) /* ty=Tensor[(10, 15, 9), uint32] */;
  (%24, %var_1566, %var_1567, %25, %26)
}

def @func_2007(%var_1971: bool, %var_1991: Tensor[(975), uint16]) -> (Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) {
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %28 = cast(%var_1991, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %29 = reshape(%27, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %30 = reshape(%28, newshape=[5, 195]) /* ty=Tensor[(5, 195), uint16] */;
  %31 = @func_1596(%29, %30) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) */;
  %32 = cast(%var_1971, dtype="bool") /* ty=bool */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 13, 1), bool] */, dtype="bool") /* ty=Tensor[(9, 13, 1), bool] */;
  %34 = logical_and(%32, %33) /* ty=Tensor[(9, 13, 1), bool] */;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(9, 13, 1), float64] */;
  %36 = sin(%35) /* ty=Tensor[(9, 13, 1), float64] */;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(9, 13, 1), float64] */;
  %38 = %31.2;
  %39 = rsqrt(%37) /* ty=Tensor[(9, 13, 1), float64] */;
  (%38, meta[relay.Constant][0] /* ty=Tensor[(264), float32] */, %var_1991, %39)
}

def @func_2589() -> (Tensor[(13, 12, 6), uint8],) {
  %40 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  (%40,)
}

def @func_6384() -> Tensor[(13, 12, 6), uint16] {
  %41 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %41.0
}

def @func_6101() -> (Tensor[(13, 12, 6), uint8],) {
  %42 = @func_5395() /* ty=Tensor[(13, 12, 6), uint8] */;
  (%42,)
}

def @func_8077() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
  %43 = @func_7937() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8]) */;
  %44 = @func_6400() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %45 = %43.2;
  %46 = @func_5701() /* ty=Tensor[(13, 12, 6), bool] */;
  %47 = %44.0;
  (%45, %46, %47)
}

def @func_807(%var_803: Tensor[(10, 12, 16), float64]) -> Tensor[(10, 12, 16), float64] {
  %48 = cast(%var_803, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  exp(%48) /* ty=Tensor[(10, 12, 16), float64] */
}

def @func_2774() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %49 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  %50 = cast(%49, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %51 = reshape(%50, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), uint8] */;
  %52 = @func_1416(%51) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %53 = %52.0;
  (%49, %53)
}

def @func_6843() -> Tensor[(13, 12, 6), uint16] {
  %54 = @func_5473() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %54.0
}

def @func_3483() -> (Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) {
  %55 = @func_2141() /* ty=(Tensor[(4, 12, 15), float32],) */;
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %57 = reshape(%56, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %58 = @func_861(%57) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %59 = %55.0;
  %60 = %58.0;
  (%59, %60, meta[relay.Constant][2] /* ty=Tensor[(330), uint8] */)
}

def @func_8710(%var_8659: Tensor[(10, 12, 16), float64]) -> (Tensor[(10, 12, 16), uint64], Tensor[(10, 12, 16), float64]) {
  %61 = @func_7502() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) */;
  %62 = %61.3;
  %63 = cast(%var_8659, dtype="uint64") /* ty=Tensor[(10, 12, 16), uint64] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="uint64") /* ty=Tensor[(10, 12, 16), uint64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %67 = cast(%var_8659, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  %68 = right_shift(%65, %66) /* ty=Tensor[(10, 12, 16), uint64] */;
  %69 = log(%67) /* ty=Tensor[(10, 12, 16), float64] */;
  (%68, %69)
}

def @func_4310(%var_4258: Tensor[(1, 4, 1), float32]) -> (Tensor[(1, 4, 1), float32], uint16, Tensor[(6, 44), float32], Tensor[(60, 1), uint16], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(15, 4, 11), bool], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
  %70 = cast(%var_4258, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %71 = log10(%70) /* ty=Tensor[(1, 4, 1), float32] */;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 44), float32] */, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(60, 1), uint16] */, dtype="uint16") /* ty=Tensor[(60, 1), uint16] */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %76 = reshape(%73, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), float32] */;
  %77 = reshape(%74, newshape=[60]) /* ty=Tensor[(60), uint16] */;
  %78 = reshape(%75, newshape=[975]) /* ty=Tensor[(975), uint16] */;
  %79 = @func_1482(%76, %77, %78) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) */;
  %80 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %82 = reshape(%81, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), float64] */;
  %83 = @func_4068(%82) /* ty=(Tensor[(1, 5, 1), float64],) */;
  %84 = cast(%71, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %85 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 4, 11), float32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %86 = @func_3233() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %87 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %88 = acos(%72) /* ty=Tensor[(1, 4, 1), float32] */;
  %89 = %79.5;
  %90 = %80.0;
  %91 = %83.0;
  %92 = not_equal(%84, %85) /* ty=Tensor[(15, 4, 11), bool] */;
  %93 = %86.0;
  %94 = %87.0;
  %95 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
  %96 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  (%88, %89, meta[relay.Constant][3] /* ty=Tensor[(6, 44), float32] */, meta[relay.Constant][4] /* ty=Tensor[(60, 1), uint16] */, meta[relay.Constant][5] /* ty=Tensor[(975), uint16] */, %90, %91, meta[relay.Constant][6] /* ty=Tensor[(5), float64] */, %92, %93, %94, %95, %96)
}

def @func_2227(%var_2223: Tensor[(165, 2), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) {
  %97 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %98 = cast(%var_2223, dtype="uint8") /* ty=Tensor[(165, 2), uint8] */;
  %99 = reshape(%98, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %100 = @func_861(%99) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %101 = %97.0;
  %102 = %100.0;
  (%101, %102, %var_2223)
}

def @func_4147() -> (Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), bool], Tensor[(60), uint16]) {
  %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %104 = reshape(%103, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
  %105 = @func_1362(%104) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
  %106 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  %107 = %105.0;
  (%106, %107, meta[relay.Constant][8] /* ty=Tensor[(60), uint16] */)
}

def @func_5193(%var_5147: Tensor[(330), uint8], %var_5178: bool, %var_5179: Tensor[(975, 1), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(11, 11, 12), int64], Tensor[(9, 13, 1), float64], bool, Tensor[(975, 1), uint16], Tensor[(13, 12, 6), uint16]) {
  %108 = @func_3376() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %109 = @func_3848() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) */;
  %110 = %109.2;
  %111 = cast(%var_5147, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(1), int32] */;
  %113 = cast(%110, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %115 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %116 = @func_4801() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) */;
  %117 = cast(%var_5178, dtype="bool") /* ty=bool */;
  %118 = cast(%var_5179, dtype="uint16") /* ty=Tensor[(975, 1), uint16] */;
  %119 = reshape(%117, newshape=[]) /* ty=bool */;
  %120 = reshape(%118, newshape=[975]) /* ty=Tensor[(975), uint16] */;
  %121 = @func_2007(%119, %120) /* ty=(Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) */;
  %122 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  %123 = %108.0;
  %124 = minimum(%113, %114) /* ty=Tensor[(330), uint8] */;
  %125 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %126 = %115.0;
  %127 = %116.0;
  %128 = %121.3;
  %129 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
  (%122, %123, %124, %125, %126, %127, %128, %var_5178, %var_5179, %129)
}

def @func_4736() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(330), uint8], Tensor[(?, 585), bool], Tensor[(?, 585), float32], Tensor[(1, 585), float64], Tensor[(13, 12, 6), uint8]) {
  %130 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %131 = cast(%130, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %132 = reshape(%131, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
  %133 = @func_3354(%132) /* ty=(Tensor[(13, 12, 6), uint64],) */;
  %134 = cast(meta[relay.Constant][9] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %135 = reshape(%134, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), float64] */;
  %136 = @func_4068(%135) /* ty=(Tensor[(1, 5, 1), float64],) */;
  %137 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %138 = cast(meta[relay.Constant][10] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %139 = reshape(%137, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
  %140 = reshape(%138, newshape=[5, 66]) /* ty=Tensor[(5, 66), uint8] */;
  %141 = @func_2695(%139, %140) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) */;
  %142 = %141.2;
  %143 = cast(%142, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %144 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(1, 585), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 585), float32] */, dtype="bool") /* ty=Tensor[(1, 585), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %147 = less_equal(%145, %146) /* ty=Tensor[(?, 585), bool] */;
  %148 = cast(%142, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(2), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(?, 585), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %152 = cast(%147, dtype="float32") /* ty=Tensor[(?, 585), float32] */;
  %153 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(1, 585), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %157 = asin(%156) /* ty=Tensor[(1, 585), float32] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(1, 585), float64] */;
  %159 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %160 = %133.0;
  %161 = %136.0;
  %162 = less(%150, %151) /* ty=Tensor[(?, 585), bool] */;
  %163 = divide(%154, %155) /* ty=Tensor[(?, 585), float32] */;
  %164 = erf(%158) /* ty=Tensor[(1, 585), float64] */;
  %165 = %159.0;
  (%130, %160, %161, meta[relay.Constant][9] /* ty=Tensor[(5), float64] */, meta[relay.Constant][10] /* ty=Tensor[(330), uint8] */, %162, %163, %164, %165)
}

def @func_4926() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) {
  %166 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %167 = @func_2828() /* ty=Tensor[(13, 12, 6), float64] */;
  %168 = %166.0;
  (%167, %168)
}

def @func_7138() -> Tensor[(11, 11, 12), int64] {
  %169 = @func_4801() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) */;
  %169.0
}

def @func_7439(%var_7416: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(13, 12, 6), int64]) {
  %170 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %171 = @func_4882() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %172 = @func_5597() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %173 = cast(%var_7416, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %174 = reshape(%173, newshape=[165, 2]) /* ty=Tensor[(165, 2), uint8] */;
  %175 = @func_2227(%174) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */;
  %176 = @func_4882() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %177 = %176.0;
  %178 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  %179 = cast(%178, dtype="int64") /* ty=Tensor[(13, 12, 6), int64] */;
  %180 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%177, dtype="int64") /* ty=Tensor[(13, 12, 6), int64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %183 = %170.0;
  %184 = %171.0;
  %185 = %172.0;
  %186 = %175.1;
  %187 = logical_xor(%181, %182) /* ty=Tensor[(13, 12, 6), int64] */;
  (%183, %184, %185, %186, %var_7416, %187)
}

def @func_7178() -> (Tensor[(13, 12, 6), bool],) {
  %188 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
  (%188,)
}

def @func_3109() -> (Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) {
  %189 = cast(meta[relay.Constant][12] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %190 = reshape(%189, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
  %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %192 = @func_2815() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %193 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %194 = @func_183(%190) /* ty=Tensor[(1, 9, 9), float32] */;
  %195 = atanh(%191) /* ty=Tensor[(81), float32] */;
  %196 = %192.0;
  (%193, %194, %195, %196)
}

def @func_1285() -> Tensor[(13, 12, 6), uint8] {
  %197 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %197.0
}

def @func_599(%var_539: uint16, %var_540: Tensor[(15, 13, 5), uint16]) -> (Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) {
  %198 = cast(%var_539, dtype="uint16") /* ty=uint16 */;
  %199 = cast(%var_540, dtype="uint16") /* ty=Tensor[(15, 13, 5), uint16] */;
  %200 = maximum(%198, %199) /* ty=Tensor[(15, 13, 5), uint16] */;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
  %202 = cast(%200, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
  %203 = shape_of(%var_540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%var_540, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %206 = power(%204, %205) /* ty=Tensor[(15, 13, 5), float32] */;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
  %208 = cast(meta[relay.Constant][13] /* ty=Tensor[(65), int64] */, dtype="int64") /* ty=Tensor[(65), int64] */;
  %209 = cast(meta[relay.Constant][14] /* ty=Tensor[(325), int64] */, dtype="int64") /* ty=Tensor[(325), int64] */;
  %210 = reshape(%208, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), int64] */;
  %211 = reshape(%209, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), int64] */;
  %212 = @func_337(%210, %211) /* ty=(Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) */;
  %213 = cast(%206, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
  %214 = tan(%201) /* ty=Tensor[(15, 13, 5), float64] */;
  %215 = sqrt(%207) /* ty=Tensor[(15, 13, 5), float64] */;
  %216 = %212.0;
  %217 = log2(%213) /* ty=Tensor[(15, 13, 5), float64] */;
  (%214, %215, %216, meta[relay.Constant][13] /* ty=Tensor[(65), int64] */, meta[relay.Constant][14] /* ty=Tensor[(325), int64] */, %217)
}

def @func_9557() -> Tensor[(13, 12, 6), float64] {
  @func_2247() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_3308(%var_3277: Tensor[(2, 300), float64], %var_3278: Tensor[(65), int64], %var_3279: Tensor[(325), int64], %var_3280: uint16, %var_3286: Tensor[(1, 264), float32], %var_3287: Tensor[(975), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 300), float64], Tensor[(325), int64], Tensor[(13, 12, 6), uint8], Tensor[(1, 264), float32], Tensor[(975), uint16], Tensor[(65), bool]) {
  %218 = cast(%var_3277, dtype="float64") /* ty=Tensor[(2, 300), float64] */;
  %219 = cast(%var_3278, dtype="int64") /* ty=Tensor[(65), int64] */;
  %220 = cast(%var_3279, dtype="int64") /* ty=Tensor[(325), int64] */;
  %221 = cast(%var_3280, dtype="uint16") /* ty=uint16 */;
  %222 = reshape(%218, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %223 = reshape(%219, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %224 = reshape(%220, newshape=[65, 5]) /* ty=Tensor[(65, 5), int64] */;
  %225 = reshape(%221, newshape=[]) /* ty=uint16 */;
  %226 = @func_1049(%222, %223, %224, %225) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) */;
  %227 = cast(%var_3286, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %228 = cast(%var_3287, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %229 = reshape(%227, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %230 = reshape(%228, newshape=[5, 195]) /* ty=Tensor[(5, 195), uint16] */;
  %231 = @func_1596(%229, %230) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) */;
  %232 = cast(%var_3278, dtype="bool") /* ty=Tensor[(65), bool] */;
  %233 = cast(%var_3280, dtype="bool") /* ty=bool */;
  %234 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  %235 = %226.10;
  %236 = %231.0;
  %237 = logical_and(%232, %233) /* ty=Tensor[(65), bool] */;
  (%234, %235, %var_3277, %var_3279, %236, %var_3286, %var_3287, %237)
}

def @func_7562() -> Tensor[(13, 12, 6), bool] {
  %238 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %238.0
}

def @func_2482() -> Tensor[(13, 12, 6), bool] {
  @func_1706() /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_3848() -> (Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) {
  %239 = cast(meta[relay.Constant][15] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %240 = reshape(%239, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %241 = @func_861(%240) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %243 = reshape(%242, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
  %244 = @func_1362(%243) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
  %245 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  %246 = %241.0;
  %247 = %244.1;
  %248 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  (%245, %246, meta[relay.Constant][15] /* ty=Tensor[(330), uint8] */, %247, meta[relay.Constant][16] /* ty=Tensor[(60), uint16] */, %248)
}

def @func_6284() -> Tensor[(13, 12, 6), float64] {
  %249 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %249.0
}

def @func_1805(%var_1792: Tensor[(1920), float64]) -> (Tensor[(13, 12, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  %250 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %252 = cast(%var_1792, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %253 = reshape(%252, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
  %254 = sigmoid(%251) /* ty=Tensor[(13, 12, 6), float32] */;
  %255 = @func_807(%253) /* ty=Tensor[(10, 12, 16), float64] */;
  (%254, %255, %var_1792)
}

def @func_1765() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %256 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %258 = cast(%256, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %259 = rsqrt(%257) /* ty=Tensor[(13, 12, 6), float64] */;
  %260 = erf(%258) /* ty=Tensor[(13, 12, 6), float64] */;
  (%259, %260)
}

def @func_5302() -> Tensor[(13, 12, 6), float64] {
  @func_2719() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_8926() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) {
  %261 = @func_8077() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */;
  %262 = @func_6693() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %263 = %261.2;
  %264 = %262.0;
  (%263, %264)
}

def @func_9016(%var_9010: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(5), float64]) {
  %265 = @func_7873() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) */;
  %266 = cast(%var_9010, dtype="float64") /* ty=Tensor[(5), float64] */;
  %267 = reshape(%266, newshape=[5]) /* ty=Tensor[(5), float64] */;
  %268 = @func_7008(%267) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %269 = %265.0;
  %270 = %268.0;
  (%269, %270, %var_9010)
}

def @func_6593() -> (Tensor[(13, 12, 6), uint16],) {
  %271 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %272 = %271.0;
  (%272,)
}

def @func_9304(%var_9271: Tensor[(9, 11, 15), float64]) -> (Tensor[(13, 12, 6), uint8], Tensor[(9, 11, 15), uint16]) {
  %273 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %274 = cast(%var_9271, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %275 = exp(%274) /* ty=Tensor[(9, 11, 15), float64] */;
  %276 = cast(%var_9271, dtype="uint16") /* ty=Tensor[(9, 11, 15), uint16] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="uint16") /* ty=Tensor[(9, 11, 15), uint16] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %280 = %273.0;
  %281 = bitwise_and(%278, %279) /* ty=Tensor[(9, 11, 15), uint16] */;
  (%280, %281)
}

def @func_4220(%var_4204: Tensor[(13, 12, 6), bool]) -> (Tensor[(13, 12, 6), uint8],) {
  %282 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %283 = %282.1;
  %284 = cast(%var_4204, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %288 = add(%286, %287) /* ty=Tensor[(13, 12, 6), uint8] */;
  (%288,)
}

def @func_3798(%var_3746: Tensor[(13, 4, 1), float32]) -> (Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) {
  %289 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %291 = reshape(%289, newshape=[]) /* ty=bool */;
  %292 = reshape(%290, newshape=[975]) /* ty=Tensor[(975), uint16] */;
  %293 = @func_2007(%291, %292) /* ty=(Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) */;
  %294 = cast(%var_3746, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
  %295 = exp(%294) /* ty=Tensor[(13, 4, 1), float32] */;
  %296 = cast(%295, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %297 = shape_of(%var_3746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_3746, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = logical_and(%298, %299) /* ty=Tensor[(13, 4, ?), bool] */;
  %301 = cast(%295, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="float64") /* ty=Tensor[(13, 4, ?), float64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %305 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %306 = cast(%300, dtype="float64") /* ty=Tensor[(13, 4, ?), float64] */;
  %307 = %293.2;
  %308 = power(%303, %304) /* ty=Tensor[(13, 4, ?), float64] */;
  %309 = %305.1;
  %310 = asinh(%306) /* ty=Tensor[(13, 4, ?), float64] */;
  (%307, True /* ty=bool */, meta[relay.Constant][17] /* ty=Tensor[(975), uint16] */, %308, %309, %310)
}

def @func_861(%var_851: Tensor[(11, 3, 10), uint8]) -> (Tensor[(11, 3, 10), float64],) {
  %311 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 3, 10), uint8] */, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %312 = shape_of(%var_851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%var_851, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %315 = greater_equal(%313, %314) /* ty=Tensor[(11, 3, 10), bool] */;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %317 = sinh(%316) /* ty=Tensor[(11, 3, 10), float64] */;
  (%317,)
}

def @func_7353(%var_7299: Tensor[(1, 975), uint16], %var_7350: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(1, 975), uint16], Tensor[(65), int64], Tensor[(585), float32], Tensor[(165, 2), uint8], Tensor[(330), uint8]) {
  %318 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %319 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %320 = cast(meta[relay.Constant][19] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %321 = cast(%var_7299, dtype="uint16") /* ty=Tensor[(1, 975), uint16] */;
  %322 = cast(meta[relay.Constant][20] /* ty=Tensor[(65), int64] */, dtype="int64") /* ty=Tensor[(65), int64] */;
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %324 = reshape(%320, newshape=[60]) /* ty=Tensor[(60), uint16] */;
  %325 = reshape(%321, newshape=[975, 1]) /* ty=Tensor[(975, 1), uint16] */;
  %326 = reshape(%322, newshape=[1, 65]) /* ty=Tensor[(1, 65), int64] */;
  %327 = reshape(%323, newshape=[585]) /* ty=Tensor[(585), float32] */;
  %328 = @func_4412(%324, %325, %326, %327) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(81), float32], Tensor[(264), float32], Tensor[(60), uint16], Tensor[(975, 1), uint16], Tensor[(325), bool], Tensor[(1, 65), int64], uint16, Tensor[(13, 15, 3), float32], Tensor[(585), float32], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) */;
  %329 = cast(%var_7350, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %330 = reshape(%329, newshape=[165, 2]) /* ty=Tensor[(165, 2), uint8] */;
  %331 = @func_6454(%330) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */;
  %332 = @func_6384() /* ty=Tensor[(13, 12, 6), uint16] */;
  %333 = %318.1;
  %334 = %319.0;
  %335 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  %336 = %328.13;
  %337 = %331.2;
  (%332, %333, %334, %335, %336, meta[relay.Constant][19] /* ty=Tensor[(60), uint16] */, %var_7299, meta[relay.Constant][20] /* ty=Tensor[(65), int64] */, meta[relay.Constant][21] /* ty=Tensor[(585), float32] */, %337, %var_7350)
}

def @func_7873() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) {
  %338 = @func_6400() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %339 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %340 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %341 = %338.0;
  %342 = %339.0;
  (%340, %341, %342)
}

def @func_2859() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) {
  %343 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %344 = %343.0;
  %345 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
  (%344, %345)
}

def @func_6346(%var_6334: Tensor[(11, 3, 10), float64]) -> (Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(13, 12, 6), uint16]) {
  %346 = @func_3483() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) */;
  %347 = %346.1;
  %348 = cast(%var_6334, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %352 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
  %353 = floor_mod(%350, %351) /* ty=Tensor[(11, 3, 10), float64] */;
  %354 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
  (%352, %353, %354)
}

def @func_5027(%var_5018: Tensor[(390), int64]) -> (Tensor[(13, 12, 6), bool], Tensor[(15, 2, 13), bool], Tensor[(390), int64], uint16, Tensor[(13, 12, 6), bool], Tensor[(26), float64]) {
  %355 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %356 = cast(meta[relay.Constant][22] /* ty=Tensor[(26), int64] */, dtype="int64") /* ty=Tensor[(26), int64] */;
  %357 = cast(%var_5018, dtype="int64") /* ty=Tensor[(390), int64] */;
  %358 = cast(meta[relay.Constant][23] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %359 = reshape(%356, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), int64] */;
  %360 = reshape(%357, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), int64] */;
  %361 = reshape(%358, newshape=[]) /* ty=uint16 */;
  %362 = @func_1202(%359, %360, %361) /* ty=(Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) */;
  %363 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %364 = cast(meta[relay.Constant][22] /* ty=Tensor[(26), int64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
  %365 = %355.0;
  %366 = %362.1;
  %367 = %363.0;
  %368 = atanh(%364) /* ty=Tensor[(26), float64] */;
  (%365, %366, %var_5018, meta[relay.Constant][23] /* ty=uint16 */, %367, %368)
}

def @func_7962() -> Tensor[(13, 12, 6), uint16] {
  %369 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %369.0
}

def @func_7041() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %370 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %371 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %372 = %370.0;
  (%371, %372)
}

def @func_7752(%var_7722: Tensor[(65), int64], %var_7725: Tensor[(264, 1), float32], %var_7736: Tensor[(4), float32], %var_7748: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(65), bool], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(264, 1), float32], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(4), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8]) {
  %373 = @func_4926() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */;
  %374 = @func_4882() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %375 = cast(meta[relay.Constant][24] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %376 = cast(%var_7722, dtype="int64") /* ty=Tensor[(65), int64] */;
  %377 = cast(meta[relay.Constant][25] /* ty=Tensor[(325), int64] */, dtype="int64") /* ty=Tensor[(325), int64] */;
  %378 = cast(meta[relay.Constant][26] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %379 = cast(%var_7725, dtype="float32") /* ty=Tensor[(264, 1), float32] */;
  %380 = cast(meta[relay.Constant][27] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %381 = reshape(%375, newshape=[2, 300]) /* ty=Tensor[(2, 300), float64] */;
  %382 = reshape(%376, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %383 = reshape(%377, newshape=[325]) /* ty=Tensor[(325), int64] */;
  %384 = reshape(%378, newshape=[]) /* ty=uint16 */;
  %385 = reshape(%379, newshape=[1, 264]) /* ty=Tensor[(1, 264), float32] */;
  %386 = reshape(%380, newshape=[975]) /* ty=Tensor[(975), uint16] */;
  %387 = @func_3308(%381, %382, %383, %384, %385, %386) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 300), float64], Tensor[(325), int64], Tensor[(13, 12, 6), uint8], Tensor[(1, 264), float32], Tensor[(975), uint16], Tensor[(65), bool]) */;
  %388 = cast(%var_7736, dtype="float32") /* ty=Tensor[(4), float32] */;
  %389 = reshape(%388, newshape=[1, 4, 1]) /* ty=Tensor[(1, 4, 1), float32] */;
  %390 = @func_4310(%389) /* ty=(Tensor[(1, 4, 1), float32], uint16, Tensor[(6, 44), float32], Tensor[(60, 1), uint16], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(15, 4, 11), bool], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */;
  %391 = @func_3376() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %392 = cast(%var_7748, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %393 = cast(meta[relay.Constant][26] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %394 = cast(meta[relay.Constant][27] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %395 = reshape(%392, newshape=[330]) /* ty=Tensor[(330), uint8] */;
  %396 = reshape(%393, newshape=[]) /* ty=bool */;
  %397 = reshape(%394, newshape=[975, 1]) /* ty=Tensor[(975, 1), uint16] */;
  %398 = @func_5193(%395, %396, %397) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(11, 11, 12), int64], Tensor[(9, 13, 1), float64], bool, Tensor[(975, 1), uint16], Tensor[(13, 12, 6), uint16]) */;
  %399 = %373.0;
  %400 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %401 = %374.0;
  %402 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  %403 = %387.7;
  %404 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %405 = %390.5;
  %406 = %391.0;
  %407 = %398.9;
  (%399, %400, %401, %402, %403, meta[relay.Constant][24] /* ty=Tensor[(600), float64] */, %var_7722, meta[relay.Constant][25] /* ty=Tensor[(325), int64] */, meta[relay.Constant][26] /* ty=uint16 */, %var_7725, meta[relay.Constant][27] /* ty=Tensor[(975), uint16] */, %404, %405, %var_7736, %406, %407, %var_7748)
}

def @func_1362(%var_1353: Tensor[(6, 2, 5), uint16]) -> (Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) {
  %408 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
  %409 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %412 = cast(%var_1353, dtype="uint16") /* ty=Tensor[(6, 2, 5), uint16] */;
  %413 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2, 5), uint16] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %416 = not_equal(%410, %411) /* ty=Tensor[(6, 2, 5), bool] */;
  %417 = right_shift(%414, %415) /* ty=Tensor[(6, 2, 5), uint16] */;
  (%416, %417)
}

def @func_4760() -> Tensor[(13, 12, 6), float64] {
  @func_2828() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_4068(%var_4064: Tensor[(1, 5, 1), float64]) -> (Tensor[(1, 5, 1), float64],) {
  %418 = cast(%var_4064, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
  %419 = acos(%418) /* ty=Tensor[(1, 5, 1), float64] */;
  (%419,)
}

def @func_3335() -> Tensor[(13, 12, 6), uint16] {
  %420 = @func_2815() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %420.0
}

def @func_9495(%var_9483: Tensor[(11, 16, 16), int8]) -> (Tensor[(11, 16, 16), bool], Tensor[(13, 12, 6), uint16]) {
  %421 = cast(%var_9483, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %422 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(11, 16, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 16, 16), int8] */, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %426 = greater(%423, %424) /* ty=Tensor[(11, 16, 16), bool] */;
  %427 = %425.0;
  (%426, %427)
}

def @func_7008(%var_6989: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %428 = @func_6593() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %429 = cast(%var_6989, dtype="float64") /* ty=Tensor[(5), float64] */;
  %430 = reshape(%429, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), float64] */;
  %431 = @func_4068(%430) /* ty=(Tensor[(1, 5, 1), float64],) */;
  %432 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %435 = reshape(%434, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), uint8] */;
  %436 = @func_1416(%435) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %437 = %428.0;
  %438 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %439 = %431.0;
  %440 = %436.0;
  (%437, %438, %439, %var_6989, %433, %440)
}

def @func_6424() -> (Tensor[(13, 12, 6), uint8],) {
  %441 = @func_3376() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %442 = %441.0;
  (%442,)
}

def @func_8633() -> (Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) {
  %443 = @func_5797() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(330), uint8]) */;
  %444 = @func_8077() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */;
  %445 = @func_7138() /* ty=Tensor[(11, 11, 12), int64] */;
  %446 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
  %447 = %443.1;
  %448 = %444.2;
  (%445, %446, %447, %448)
}

def @func_2815() -> (Tensor[(13, 12, 6), uint16],) {
  %449 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %450 = %449.0;
  (%450,)
}

def @func_3076(%var_3053: Tensor[(13, 12, 6), uint8]) -> (Tensor[(13, 12, 6), int8], Tensor[(13, 12, 6), uint32]) {
  %451 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %452 = %451.2;
  %453 = cast(%var_3053, dtype="int8") /* ty=Tensor[(13, 12, 6), int8] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="int8") /* ty=Tensor[(13, 12, 6), int8] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %457 = cast(%var_3053, dtype="uint32") /* ty=Tensor[(13, 12, 6), uint32] */;
  %458 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%452, dtype="uint32") /* ty=Tensor[(13, 12, 6), uint32] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %461 = left_shift(%455, %456) /* ty=Tensor[(13, 12, 6), int8] */;
  %462 = multiply(%459, %460) /* ty=Tensor[(13, 12, 6), uint32] */;
  (%461, %462)
}

def @func_6217() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(3, 6, 2), float32]) {
  %463 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %464 = @func_5232() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %465 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 6, 2), float64] */;
  %466 = cosh(%465) /* ty=Tensor[(3, 6, 2), float64] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
  %468 = asinh(%467) /* ty=Tensor[(3, 6, 2), float32] */;
  %469 = cast(%466, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%468, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %473 = floor_mod(%471, %472) /* ty=Tensor[(3, 6, 2), float32] */;
  %474 = cast(%466, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %478 = %463.0;
  %479 = %464.0;
  %480 = floor_divide(%476, %477) /* ty=Tensor[(3, 6, 2), float32] */;
  (%478, %479, %480)
}

def @func_1279() -> (Tensor[(13, 12, 6), uint8],) {
  %481 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %482 = sqrt(%481) /* ty=Tensor[(13, 12, 6), float64] */;
  %483 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 12, 6), float64] */, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %487 = right_shift(%485, %486) /* ty=Tensor[(13, 12, 6), uint8] */;
  (%487,)
}

def @func_5597() -> (Tensor[(13, 12, 6), uint8],) {
  %488 = @func_4252() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) */;
  %489 = %488.1;
  (%489,)
}

def @func_2719() -> Tensor[(13, 12, 6), float64] {
  @func_2247() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_3464() -> (Tensor[(13, 12, 6), bool],) {
  %490 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
  (%490,)
}

def @func_6079() -> (Tensor[(13, 12, 6), uint8],) {
  %491 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %492 = %491.0;
  (%492,)
}

def @func_6693() -> (Tensor[(13, 12, 6), uint16],) {
  %493 = @func_2815() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %494 = %493.0;
  (%494,)
}

def @func_4252() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) {
  %495 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %496 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %497 = %495.1;
  %498 = %496.0;
  (%497, %498)
}

def @func_8727() -> (Tensor[(13, 12, 6), uint8],) {
  %499 = @func_6079() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %500 = %499.0;
  (%500,)
}

def @func_8275() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(3, 88), float32], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(15, 2, 13), bool], Tensor[(390), int64], Tensor[(13, 12, 6), bool], Tensor[(975), float64]) {
  %501 = @func_4252() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) */;
  %502 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %503 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 88), float32] */, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %504 = cast(meta[relay.Constant][34] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %505 = reshape(%503, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %506 = reshape(%504, newshape=[5, 195]) /* ty=Tensor[(5, 195), uint16] */;
  %507 = @func_1596(%505, %506) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) */;
  %508 = @func_6101() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %509 = cast(meta[relay.Constant][35] /* ty=Tensor[(390), int64] */, dtype="int64") /* ty=Tensor[(390), int64] */;
  %510 = reshape(%509, newshape=[390]) /* ty=Tensor[(390), int64] */;
  %511 = @func_5027(%510) /* ty=(Tensor[(13, 12, 6), bool], Tensor[(15, 2, 13), bool], Tensor[(390), int64], uint16, Tensor[(13, 12, 6), bool], Tensor[(26), float64]) */;
  %512 = @func_5232() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %513 = cast(meta[relay.Constant][34] /* ty=Tensor[(975), uint16] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %514 = sqrt(%513) /* ty=Tensor[(975), float32] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(975), float32] */;
  %516 = sigmoid(%515) /* ty=Tensor[(975), float32] */;
  %517 = cast(%516, dtype="float64") /* ty=Tensor[(975), float64] */;
  %518 = %501.1;
  %519 = %502.0;
  %520 = %507.3;
  %521 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  %522 = @func_7595() /* ty=Tensor[(13, 12, 6), uint8] */;
  %523 = %508.0;
  %524 = %511.1;
  %525 = %512.0;
  %526 = asin(%517) /* ty=Tensor[(975), float64] */;
  (%518, %519, %520, meta[relay.Constant][33] /* ty=Tensor[(3, 88), float32] */, %521, %522, %523, %524, meta[relay.Constant][35] /* ty=Tensor[(390), int64] */, %525, %526)
}

def @func_6567() -> (Tensor[(4, 12, 15), uint16], Tensor[(13, 12, 6), uint64], Tensor[(936), float64]) {
  %527 = @func_6366() /* ty=(Tensor[(4, 12, 15), float32],) */;
  %528 = %527.0;
  %529 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 12, 15), float32] */, dtype="uint16") /* ty=Tensor[(4, 12, 15), uint16] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="uint16") /* ty=Tensor[(4, 12, 15), uint16] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %533 = cast(meta[relay.Constant][37] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
  %534 = reshape(%533, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
  %535 = @func_3354(%534) /* ty=(Tensor[(13, 12, 6), uint64],) */;
  %536 = maximum(%531, %532) /* ty=Tensor[(4, 12, 15), uint16] */;
  %537 = %535.0;
  (%536, %537, meta[relay.Constant][37] /* ty=Tensor[(936), float64] */)
}

def @func_6642(%var_6605: Tensor[(240), float64]) -> (Tensor[(11, 11, 12), int64], Tensor[(8, 2, 15), float64], Tensor[(240), float64], Tensor[(975), uint16], Tensor[(52), float32], Tensor[(13, 12, 6), bool]) {
  %538 = @func_4801() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) */;
  %539 = cast(%var_6605, dtype="float64") /* ty=Tensor[(240), float64] */;
  %540 = reshape(%539, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), float64] */;
  %541 = @func_2046(%540) /* ty=(Tensor[(8, 2, 15), float64],) */;
  %542 = cast(meta[relay.Constant][38] /* ty=Tensor[(52), float32] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %543 = reshape(%542, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), float32] */;
  %544 = @func_3798(%543) /* ty=(Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) */;
  %545 = %538.0;
  %546 = %541.0;
  %547 = %544.2;
  %548 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
  (%545, %546, %var_6605, %547, meta[relay.Constant][38] /* ty=Tensor[(52), float32] */, %548)
}

def @func_1706() -> Tensor[(13, 12, 6), bool] {
  %549 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %550 = %549.0;
  %551 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 12, 6), uint8] */, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%553, %554) /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_9531() -> Tensor[(13, 12, 6), float64] {
  %555 = @func_4926() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */;
  %555.0
}

def @func_1202(%var_1154: Tensor[(1, 2, 13), int64], %var_1155: Tensor[(15, 2, 13), int64], %var_1197: uint16) -> (Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) {
  %556 = cast(%var_1154, dtype="int64") /* ty=Tensor[(1, 2, 13), int64] */;
  %557 = cast(%var_1155, dtype="int64") /* ty=Tensor[(15, 2, 13), int64] */;
  %558 = cast(%var_1154, dtype="bool") /* ty=Tensor[(1, 2, 13), bool] */;
  %559 = cast(%var_1155, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %560 = cast(%var_1154, dtype="float32") /* ty=Tensor[(1, 2, 13), float32] */;
  %561 = asinh(%560) /* ty=Tensor[(1, 2, 13), float32] */;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(1, 2, 13), float64] */;
  %563 = cast(%var_1155, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %564 = cast(%var_1197, dtype="uint16") /* ty=uint16 */;
  %565 = cast(meta[relay.Constant][40] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %566 = reshape(%564, newshape=[]) /* ty=uint16 */;
  %567 = reshape(%565, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %568 = @func_599(%566, %567) /* ty=(Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) */;
  %569 = bitwise_or(%556, %557) /* ty=Tensor[(15, 2, 13), int64] */;
  %570 = logical_or(%558, %559) /* ty=Tensor[(15, 2, 13), bool] */;
  %571 = floor_mod(%562, %563) /* ty=Tensor[(15, 2, 13), float64] */;
  %572 = %568.4;
  (%569, %570, %571, %572, %var_1197, meta[relay.Constant][40] /* ty=Tensor[(975), uint16] */)
}

def @func_6023(%var_6009: Tensor[(2, 5, 9), int32], %var_6010: Tensor[(2, 5, 9), int32]) -> (Tensor[(2, 5, 9), int32],) {
  %573 = cast(%var_6010, dtype="int32") /* ty=Tensor[(2, 5, 9), int32] */;
  %574 = shape_of(%var_6009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_6009, dtype="int32") /* ty=Tensor[(2, 5, 9), int32] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %577 = bitwise_xor(%575, %576) /* ty=Tensor[(2, 5, 9), int32] */;
  (%577,)
}

def @func_1049(%var_970: Tensor[(5, 12, 10), float64], %var_1018: Tensor[(65), int64], %var_1019: Tensor[(65, 5), int64], %var_1034: uint16) -> (Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) {
  %578 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 66), uint8] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
  %579 = reshape(%578, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %580 = @func_861(%579) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %581 = cast(%var_970, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
  %582 = log(%581) /* ty=Tensor[(5, 12, 10), float64] */;
  %583 = cast(%582, dtype="int64") /* ty=Tensor[(5, 12, 10), int64] */;
  %584 = shape_of(%var_970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%var_970, dtype="int64") /* ty=Tensor[(5, 12, 10), int64] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %587 = right_shift(%585, %586) /* ty=Tensor[(5, 12, 10), int64] */;
  %588 = cast(%587, dtype="uint32") /* ty=Tensor[(5, 12, 10), uint32] */;
  %589 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%582, dtype="uint32") /* ty=Tensor[(5, 12, 10), uint32] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %592 = %580.0;
  %593 = cast(%592, dtype="uint8") /* ty=Tensor[(11, 3, 10), uint8] */;
  %594 = reshape(%593, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %595 = @func_861(%594) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %596 = cast(%var_1018, dtype="int64") /* ty=Tensor[(65), int64] */;
  %597 = cast(%var_1019, dtype="int64") /* ty=Tensor[(65, 5), int64] */;
  %598 = reshape(%596, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), int64] */;
  %599 = reshape(%597, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), int64] */;
  %600 = @func_337(%598, %599) /* ty=(Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) */;
  %601 = cast(%592, dtype="uint8") /* ty=Tensor[(11, 3, 10), uint8] */;
  %602 = reshape(%601, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %603 = @func_861(%602) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %604 = cast(%var_1034, dtype="uint16") /* ty=uint16 */;
  %605 = cast(meta[relay.Constant][42] /* ty=Tensor[(65, 15), uint16] */, dtype="uint16") /* ty=Tensor[(65, 15), uint16] */;
  %606 = reshape(%604, newshape=[]) /* ty=uint16 */;
  %607 = reshape(%605, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %608 = @func_599(%606, %607) /* ty=(Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) */;
  %609 = cast(meta[relay.Constant][43] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %610 = reshape(%609, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
  %611 = cast(meta[relay.Constant][42] /* ty=Tensor[(65, 15), uint16] */, dtype="float32") /* ty=Tensor[(65, 15), float32] */;
  %612 = bitwise_and(%590, %591) /* ty=Tensor[(5, 12, 10), uint32] */;
  %613 = %595.0;
  %614 = %600.1;
  %615 = %603.0;
  %616 = %608.4;
  %617 = @func_807(%610) /* ty=Tensor[(10, 12, 16), float64] */;
  %618 = log2(%611) /* ty=Tensor[(65, 15), float32] */;
  (%592, meta[relay.Constant][41] /* ty=Tensor[(5, 66), uint8] */, %612, %613, %614, %var_1018, %var_1019, %615, %616, %var_1034, %617, meta[relay.Constant][43] /* ty=Tensor[(1920), float64] */, %618)
}

def @func_8417() -> (Tensor[(4, 12, 15), float32],) {
  %619 = @func_2141() /* ty=(Tensor[(4, 12, 15), float32],) */;
  %620 = %619.0;
  (%620,)
}

def @func_9341() -> (Tensor[(13, 12, 6), bool],) {
  %621 = @func_8524() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %622 = %621.1;
  (%622,)
}

def @func_2141() -> (Tensor[(4, 12, 15), float32],) {
  %623 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  (%623,)
}

def @func_4882() -> (Tensor[(13, 12, 6), float64],) {
  %624 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %625 = %624.0;
  (%625,)
}

def @func_6970(%var_6906: Tensor[(2, 5, 4), float32], %var_6920: Tensor[(600), float64], %var_6921: Tensor[(65), int64], %var_6922: Tensor[(325), int64], %var_6929: Tensor[(448), float32]) -> (Tensor[(2, 5, 4), float32], Tensor[(2, 5, 4), int32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(13, 12, 6), uint16], Tensor[(448), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16], Tensor[(1920), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16]) {
  %626 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 4), float32] */;
  %627 = shape_of(%var_6906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%var_6906, dtype="float32") /* ty=Tensor[(2, 5, 4), float32] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %630 = cast(%var_6906, dtype="int32") /* ty=Tensor[(2, 5, 4), int32] */;
  %631 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(2, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 4), int32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %634 = cast(%var_6929, dtype="float32") /* ty=Tensor[(448), float32] */;
  %635 = reshape(%634, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
  %636 = @func_4005(%635) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(13, 12, 6), uint16]) */;
  %637 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %638 = cast(%var_6920, dtype="float64") /* ty=Tensor[(600), float64] */;
  %639 = cast(%var_6921, dtype="int64") /* ty=Tensor[(65), int64] */;
  %640 = cast(%var_6922, dtype="int64") /* ty=Tensor[(325), int64] */;
  %641 = cast(meta[relay.Constant][45] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %642 = reshape(%638, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %643 = reshape(%639, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %644 = reshape(%640, newshape=[65, 5]) /* ty=Tensor[(65, 5), int64] */;
  %645 = reshape(%641, newshape=[]) /* ty=uint16 */;
  %646 = @func_1049(%642, %643, %644, %645) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) */;
  %647 = %646.11;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %649 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %650 = @func_5473() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %651 = divide(%628, %629) /* ty=Tensor[(2, 5, 4), float32] */;
  %652 = minimum(%632, %633) /* ty=Tensor[(2, 5, 4), int32] */;
  %653 = %636.1;
  %654 = %637.0;
  %655 = @func_6843() /* ty=Tensor[(13, 12, 6), uint16] */;
  %656 = atan(%648) /* ty=Tensor[(1920), float32] */;
  %657 = %649.0;
  %658 = %650.0;
  (%651, %652, %var_6920, %var_6921, %var_6922, meta[relay.Constant][45] /* ty=uint16 */, %653, %var_6929, %654, %655, %656, %657, %658)
}

def @func_9380() -> Tensor[(13, 12, 6), bool] {
  %659 = @func_7178() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %659.0
}

def @func_6454(%var_6442: Tensor[(165, 2), uint8]) -> (Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) {
  %660 = @func_6101() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %661 = cast(%var_6442, dtype="uint8") /* ty=Tensor[(165, 2), uint8] */;
  %662 = reshape(%661, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %663 = @func_861(%662) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %664 = %660.0;
  %665 = %663.0;
  (%664, %665, %var_6442)
}

def @func_2911(%var_2901: Tensor[(65), int64], %var_2903: uint16) -> (Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) {
  %666 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %667 = %666.1;
  %668 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 12, 6), float64] */, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %672 = cast(meta[relay.Constant][47] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %673 = cast(%var_2901, dtype="int64") /* ty=Tensor[(65), int64] */;
  %674 = cast(meta[relay.Constant][48] /* ty=Tensor[(325), int64] */, dtype="int64") /* ty=Tensor[(325), int64] */;
  %675 = cast(%var_2903, dtype="uint16") /* ty=uint16 */;
  %676 = reshape(%672, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %677 = reshape(%673, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %678 = reshape(%674, newshape=[65, 5]) /* ty=Tensor[(65, 5), int64] */;
  %679 = reshape(%675, newshape=[]) /* ty=uint16 */;
  %680 = @func_1049(%676, %677, %678, %679) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) */;
  %681 = cast(meta[relay.Constant][48] /* ty=Tensor[(325), int64] */, dtype="bool") /* ty=Tensor[(325), bool] */;
  %682 = cast(%var_2903, dtype="bool") /* ty=bool */;
  %683 = power(%670, %671) /* ty=Tensor[(13, 12, 6), float32] */;
  %684 = %680.4;
  %685 = greater(%681, %682) /* ty=Tensor[(325), bool] */;
  (%683, %684, meta[relay.Constant][47] /* ty=Tensor[(600), float64] */, %var_2901, %685)
}

def @func_3625() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64]) {
  %686 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %687 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %688 = %686.1;
  (%687, %688)
}

def @func_1416(%var_1383: Tensor[(13, 12, 6), uint8]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %689 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %690 = %689.0;
  %691 = cast(%var_1383, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %695 = cast(%690, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %696 = floor_divide(%693, %694) /* ty=Tensor[(13, 12, 6), float64] */;
  %697 = sinh(%695) /* ty=Tensor[(13, 12, 6), float64] */;
  %698 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  (%696, %697, %698)
}

def @func_7999(%var_7991: Tensor[(165), float64]) -> (Tensor[(12, 10, 14), float32], Tensor[(12, 10, 14), float32], Tensor[(3, 11, 5), float64], Tensor[(165), float64]) {
  %699 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
  %700 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(12, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %703 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
  %704 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(12, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %707 = cast(%var_7991, dtype="float64") /* ty=Tensor[(165), float64] */;
  %708 = reshape(%707, newshape=[3, 11, 5]) /* ty=Tensor[(3, 11, 5), float64] */;
  %709 = @func_5716(%708) /* ty=(Tensor[(3, 11, 5), float64],) */;
  %710 = floor_mod(%701, %702) /* ty=Tensor[(12, 10, 14), float32] */;
  %711 = mod(%705, %706) /* ty=Tensor[(12, 10, 14), float32] */;
  %712 = %709.0;
  (%710, %711, %712, %var_7991)
}

def @func_7595() -> Tensor[(13, 12, 6), uint8] {
  %713 = @func_7502() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) */;
  %713.0
}

def @func_8389(%var_8365: Tensor[(60), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float32]) {
  %714 = @func_6593() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %715 = cast(%var_8365, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %716 = reshape(%715, newshape=[60]) /* ty=Tensor[(60), uint16] */;
  %717 = @func_5886(%716) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64]) */;
  %718 = %714.0;
  %719 = cast(%718, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %720 = reshape(%719, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), uint8] */;
  %721 = @func_1416(%720) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %722 = @func_3169() /* ty=(Tensor[(13, 12, 6), float32],) */;
  %723 = @func_6517() /* ty=Tensor[(13, 12, 6), float64] */;
  %724 = %717.0;
  %725 = %721.0;
  %726 = %722.0;
  (%723, %718, %724, %var_8365, %725, %726)
}

def @func_9209() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint16]) {
  %727 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %728 = cast(meta[relay.Constant][52] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %729 = reshape(%728, newshape=[165, 2]) /* ty=Tensor[(165, 2), uint8] */;
  %730 = @func_6454(%729) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */;
  %731 = @func_4926() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */;
  %732 = %727.0;
  %733 = %730.0;
  %734 = %731.1;
  (%732, %733, meta[relay.Constant][52] /* ty=Tensor[(330), uint8] */, %734)
}

def @func_5232() -> (Tensor[(13, 12, 6), bool],) {
  %735 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %736 = %735.0;
  (%736,)
}

def @func_2695(%var_2656: Tensor[(13, 15, 3), float32], %var_2690: Tensor[(5, 66), uint8]) -> (Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) {
  %737 = cast(%var_2656, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %738 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(13, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %741 = cast(%var_2656, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %742 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 1920), float64] */, dtype="float64") /* ty=Tensor[(1, 1920), float64] */;
  %743 = reshape(%742, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
  %744 = @func_2314() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), bool]) */;
  %745 = cast(%var_2690, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
  %746 = reshape(%745, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %747 = @func_861(%746) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %748 = floor_divide(%739, %740) /* ty=Tensor[(13, 15, 3), float32] */;
  %749 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
  %750 = cos(%741) /* ty=Tensor[(13, 15, 3), float32] */;
  %751 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
  %752 = @func_807(%743) /* ty=Tensor[(10, 12, 16), float64] */;
  %753 = %744.2;
  %754 = %747.0;
  (%748, %749, %750, %751, %752, meta[relay.Constant][54] /* ty=Tensor[(1, 1920), float64] */, %753, %754, %var_2690)
}

def @func_4847() -> (Tensor[(13, 12, 6), float64],) {
  %755 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  (%755,)
}

def @func_6400() -> (Tensor[(13, 12, 6), float64],) {
  %756 = @func_6284() /* ty=Tensor[(13, 12, 6), float64] */;
  (%756,)
}

def @func_4005(%var_3999: Tensor[(14, 4, 8), float32]) -> (Tensor[(14, 4, 8), float32], Tensor[(13, 12, 6), uint16]) {
  %757 = cast(%var_3999, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
  %758 = cos(%757) /* ty=Tensor[(14, 4, 8), float32] */;
  %759 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
  (%758, %759)
}

def @func_5797() -> (Tensor[(13, 12, 6), float64], Tensor[(330), uint8]) {
  %760 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %761 = @func_3848() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) */;
  %762 = %760.0;
  %763 = %761.2;
  (%762, %763)
}

def @func_7634() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) {
  %764 = @func_7595() /* ty=Tensor[(13, 12, 6), uint8] */;
  %765 = cast(%764, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %766 = @func_7178() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %767 = log2(%765) /* ty=Tensor[(13, 12, 6), float64] */;
  %768 = %766.0;
  (%767, %768)
}

def @func_9134(%var_9085: Tensor[(52), float32]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(52), float32], Tensor[(13, 12, 6), uint16], Tensor[(5), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(975), float32], Tensor[(11, 11, 12), int64]) {
  %769 = @func_7873() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) */;
  %770 = %769.1;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %772 = cast(meta[relay.Constant][55] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %773 = reshape(%772, newshape=[5]) /* ty=Tensor[(5), float64] */;
  %774 = @func_9016(%773) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(5), float64]) */;
  %775 = cast(%var_9085, dtype="float32") /* ty=Tensor[(52), float32] */;
  %776 = reshape(%775, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), float32] */;
  %777 = @func_3798(%776) /* ty=(Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) */;
  %778 = %777.0;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(975), float32] */;
  %780 = log(%771) /* ty=Tensor[(13, 12, 6), float64] */;
  %781 = @func_3987() /* ty=Tensor[(13, 12, 6), float64] */;
  %782 = %774.1;
  %783 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
  %784 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  %785 = erf(%779) /* ty=Tensor[(975), float32] */;
  %786 = @func_7138() /* ty=Tensor[(11, 11, 12), int64] */;
  (%780, %781, %var_9085, %782, meta[relay.Constant][55] /* ty=Tensor[(5), float64] */, %783, %784, %785, %786)
}

def @func_5757() -> (Tensor[(4, 12, 15), bool], Tensor[(4, 12, 15), uint64]) {
  %787 = @func_2141() /* ty=(Tensor[(4, 12, 15), float32],) */;
  %788 = %787.0;
  %789 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %793 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 12, 15), float32] */, dtype="uint64") /* ty=Tensor[(4, 12, 15), uint64] */;
  %794 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%788, dtype="uint64") /* ty=Tensor[(4, 12, 15), uint64] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %797 = logical_and(%791, %792) /* ty=Tensor[(4, 12, 15), bool] */;
  %798 = add(%795, %796) /* ty=Tensor[(4, 12, 15), uint64] */;
  (%797, %798)
}

def @func_4412(%var_4385: Tensor[(60), uint16], %var_4386: Tensor[(975, 1), uint16], %var_4390: Tensor[(1, 65), int64], %var_4398: Tensor[(585), float32]) -> (Tensor[(13, 12, 6), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(81), float32], Tensor[(264), float32], Tensor[(60), uint16], Tensor[(975, 1), uint16], Tensor[(325), bool], Tensor[(1, 65), int64], uint16, Tensor[(13, 15, 3), float32], Tensor[(585), float32], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) {
  %799 = @func_3169() /* ty=(Tensor[(13, 12, 6), float32],) */;
  %800 = %799.0;
  %801 = cast(%800, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %802 = reshape(%801, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), bool] */;
  %803 = @func_4220(%802) /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %804 = @func_3109() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) */;
  %805 = cast(meta[relay.Constant][57] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %806 = cast(%var_4385, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %807 = cast(%var_4386, dtype="uint16") /* ty=Tensor[(975, 1), uint16] */;
  %808 = reshape(%805, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), float32] */;
  %809 = reshape(%806, newshape=[60]) /* ty=Tensor[(60), uint16] */;
  %810 = reshape(%807, newshape=[975]) /* ty=Tensor[(975), uint16] */;
  %811 = @func_1482(%808, %809, %810) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) */;
  %812 = cast(%var_4390, dtype="int64") /* ty=Tensor[(1, 65), int64] */;
  %813 = cast(meta[relay.Constant][58] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %814 = reshape(%812, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %815 = reshape(%813, newshape=[]) /* ty=uint16 */;
  %816 = @func_2911(%814, %815) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) */;
  %817 = cast(%var_4398, dtype="float32") /* ty=Tensor[(585), float32] */;
  %818 = cast(meta[relay.Constant][59] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %819 = reshape(%817, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
  %820 = reshape(%818, newshape=[5, 66]) /* ty=Tensor[(5, 66), uint8] */;
  %821 = @func_2695(%819, %820) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) */;
  %822 = %803.0;
  %823 = %804.0;
  %824 = %811.8;
  %825 = %816.4;
  %826 = %821.2;
  %827 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  (%800, %822, %823, %824, meta[relay.Constant][57] /* ty=Tensor[(264), float32] */, %var_4385, %var_4386, %825, %var_4390, meta[relay.Constant][58] /* ty=uint16 */, %826, %var_4398, meta[relay.Constant][59] /* ty=Tensor[(330), uint8] */, %827)
}

def @func_2984() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %828 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %829 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %830 = %828.1;
  %831 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  %832 = %829.0;
  (%830, %831, %832)
}

def @func_3690() -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) {
  %833 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %834 = %833.0;
  %835 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
  (%834, %835)
}

def @func_2314() -> (Tensor[(13, 12, 6), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), bool]) {
  %836 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
  %837 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  %838 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
  (%836, %837, %838)
}

def @func_6517() -> Tensor[(13, 12, 6), float64] {
  %839 = @func_6400() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %839.0
}

def @func_2828() -> Tensor[(13, 12, 6), float64] {
  %840 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %840.1
}

def @func_2447() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %841 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %842 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %843 = %841.0;
  %844 = %842.0;
  (%843, %844)
}

def @func_1596(%var_1592: Tensor[(3, 88), float32], %var_1594: Tensor[(5, 195), uint16]) -> (Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) {
  %845 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %846 = cast(%var_1592, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
  %847 = cast(meta[relay.Constant][60] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %848 = cast(%var_1594, dtype="uint16") /* ty=Tensor[(5, 195), uint16] */;
  %849 = reshape(%846, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), float32] */;
  %850 = reshape(%847, newshape=[60]) /* ty=Tensor[(60), uint16] */;
  %851 = reshape(%848, newshape=[975]) /* ty=Tensor[(975), uint16] */;
  %852 = @func_1482(%849, %850, %851) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) */;
  %853 = %845.0;
  %854 = %852.1;
  (%853, %854, %var_1592, meta[relay.Constant][60] /* ty=Tensor[(60), uint16] */, %var_1594)
}

def @func_337(%var_327: Tensor[(13, 1, 5), int64], %var_328: Tensor[(13, 5, 5), int64]) -> (Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) {
  %855 = cast(%var_327, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
  %856 = cast(%var_328, dtype="int64") /* ty=Tensor[(13, 5, 5), int64] */;
  %857 = cast(meta[relay.Constant][61] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %858 = reshape(%857, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
  %859 = bitwise_xor(%855, %856) /* ty=Tensor[(13, 5, 5), int64] */;
  %860 = @func_183(%858) /* ty=Tensor[(1, 9, 9), float32] */;
  (%859, %860, meta[relay.Constant][61] /* ty=Tensor[(81), float32] */)
}

def @func_8524() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) {
  %861 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %862 = %861.0;
  %863 = @func_7562() /* ty=Tensor[(13, 12, 6), bool] */;
  (%862, %863)
}

def @func_4522(%var_4495: Tensor[(65), int64], %var_4496: uint16) -> (Tensor[(4, 12, 15), float32], Tensor[(600), float64], Tensor[(65), int64], uint16, Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) {
  %864 = cast(%var_4495, dtype="int64") /* ty=Tensor[(65), int64] */;
  %865 = cast(%var_4496, dtype="uint16") /* ty=uint16 */;
  %866 = reshape(%864, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %867 = reshape(%865, newshape=[]) /* ty=uint16 */;
  %868 = @func_2911(%866, %867) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) */;
  %869 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %870 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %871 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %872 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  %873 = %868.2;
  %874 = %869.0;
  %875 = %870.0;
  %876 = %871.0;
  (%872, %873, %var_4495, %var_4496, %874, %875, %876)
}

def @func_2247() -> Tensor[(13, 12, 6), float64] {
  %877 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %877.0
}

def @func_2046(%var_2041: Tensor[(8, 2, 15), float64]) -> (Tensor[(8, 2, 15), float64],) {
  %878 = cast(%var_2041, dtype="float64") /* ty=Tensor[(8, 2, 15), float64] */;
  %879 = tan(%878) /* ty=Tensor[(8, 2, 15), float64] */;
  (%879,)
}

def @func_5395() -> Tensor[(13, 12, 6), uint8] {
  @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */
}

def @func_7502() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  %880 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %881 = @func_6217() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(3, 6, 2), float32]) */;
  %882 = cast(meta[relay.Constant][62] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %883 = reshape(%882, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
  %884 = %880.0;
  %885 = @func_3134() /* ty=Tensor[(13, 12, 6), float64] */;
  %886 = %881.1;
  %887 = @func_807(%883) /* ty=Tensor[(10, 12, 16), float64] */;
  (%884, %885, %886, %887, meta[relay.Constant][62] /* ty=Tensor[(1920), float64] */)
}

def @func_5701() -> Tensor[(13, 12, 6), bool] {
  %888 = @func_5232() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %888.0
}

def @func_8832(%var_8814: Tensor[(6, 16, 6), float32]) -> (Tensor[(6, 16, 6), float32], Tensor[(6, 16, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  %889 = cast(meta[relay.Constant][63] /* ty=Tensor[(6, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 6), float32] */;
  %890 = cast(%var_8814, dtype="float32") /* ty=Tensor[(6, 16, 6), float32] */;
  %891 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(6, 16, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(meta[relay.Constant][63] /* ty=Tensor[(6, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 6), float32] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %894 = cast(meta[relay.Constant][64] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %895 = reshape(%894, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
  %896 = @func_8710(%895) /* ty=(Tensor[(10, 12, 16), uint64], Tensor[(10, 12, 16), float64]) */;
  %897 = log(%889) /* ty=Tensor[(6, 16, 6), float32] */;
  %898 = maximum(%892, %893) /* ty=Tensor[(6, 16, 6), float32] */;
  %899 = %896.1;
  (%897, %898, %899, meta[relay.Constant][64] /* ty=Tensor[(1920), float64] */)
}

def @func_9238() -> (Tensor[(13, 12, 6), float64],) {
  %900 = @func_6384() /* ty=Tensor[(13, 12, 6), uint16] */;
  %901 = cast(meta[relay.Constant][65] /* ty=Tensor[(13, 12, 6), uint16] */, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%900, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %905 = mod(%903, %904) /* ty=Tensor[(13, 12, 6), float64] */;
  (%905,)
}

def @func_3134() -> Tensor[(13, 12, 6), float64] {
  %906 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %906.0
}

def @func_3987() -> Tensor[(13, 12, 6), float64] {
  %907 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %907.1
}

def @func_3376() -> (Tensor[(13, 12, 6), uint8],) {
  %908 = @func_3109() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) */;
  %909 = %908.0;
  (%909,)
}

def @func_5886(%var_5866: Tensor[(60), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64]) {
  %910 = cast(%var_5866, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %911 = reshape(%910, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
  %912 = @func_1362(%911) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
  %913 = @func_3483() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) */;
  %914 = @func_5302() /* ty=Tensor[(13, 12, 6), float64] */;
  %915 = %912.1;
  %916 = %913.0;
  %917 = @func_4760() /* ty=Tensor[(13, 12, 6), float64] */;
  (%914, %915, %var_5866, %916, %917)
}

def @func_3956() -> Tensor[(13, 12, 6), float64] {
  %918 = @func_2447() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %918.0
}

def @func_1482(%var_1427: Tensor[(3, 11, 8), float32], %var_1435: Tensor[(60), uint16], %var_1456: Tensor[(975), uint16]) -> (Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) {
  %919 = cast(%var_1427, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %920 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(3, 11, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(meta[relay.Constant][66] /* ty=Tensor[(3, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %923 = cast(%var_1435, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %924 = reshape(%923, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
  %925 = @func_1362(%924) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
  %926 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %927 = cast(meta[relay.Constant][67] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %928 = cast(%var_1456, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %929 = reshape(%927, newshape=[]) /* ty=uint16 */;
  %930 = reshape(%928, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %931 = @func_599(%929, %930) /* ty=(Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) */;
  %932 = cast(meta[relay.Constant][68] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %933 = reshape(%932, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
  %934 = cast(meta[relay.Constant][68] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %935 = reshape(%934, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
  %936 = @func_183(%935) /* ty=Tensor[(1, 9, 9), float32] */;
  %937 = cast(%936, dtype="float32") /* ty=Tensor[(1, 9, 9), float32] */;
  %938 = reshape(%937, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
  %939 = cast(meta[relay.Constant][69] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %940 = reshape(%939, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float64] */;
  %941 = divide(%921, %922) /* ty=Tensor[(3, 11, 8), float32] */;
  %942 = %925.0;
  %943 = %926.0;
  %944 = %931.2;
  %945 = @func_183(%933) /* ty=Tensor[(1, 9, 9), float32] */;
  %946 = @func_183(%938) /* ty=Tensor[(1, 9, 9), float32] */;
  %947 = @func_463(%940) /* ty=Tensor[(13, 12, 3), float64] */;
  (%941, %942, %var_1435, %943, %944, meta[relay.Constant][67] /* ty=uint16 */, %var_1456, %945, meta[relay.Constant][68] /* ty=Tensor[(81), float32] */, %936, %946, %947, meta[relay.Constant][69] /* ty=Tensor[(468), float64] */)
}

def @func_3169() -> (Tensor[(13, 12, 6), float32],) {
  %948 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %949 = %948.0;
  %950 = cast(%949, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %951 = acosh(%950) /* ty=Tensor[(13, 12, 6), float32] */;
  (%951,)
}

def @func_5716(%var_5708: Tensor[(3, 11, 5), float64]) -> (Tensor[(3, 11, 5), float64],) {
  %952 = cast(%var_5708, dtype="float64") /* ty=Tensor[(3, 11, 5), float64] */;
  %953 = asinh(%952) /* ty=Tensor[(3, 11, 5), float64] */;
  (%953,)
}

def @func_7937() -> (Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8]) {
  %954 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %955 = @func_6424() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %956 = @func_4962() /* ty=Tensor[(4, 12, 15), float32] */;
  %957 = %954.0;
  %958 = %955.0;
  (%956, %957, %958)
}

def @func_4801() -> (Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) {
  %959 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %960 = cast(meta[relay.Constant][70] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 12), int64] */;
  %961 = @func_2447() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %962 = multiply(%959, %960) /* ty=Tensor[(11, 11, 12), int64] */;
  %963 = %961.0;
  (%962, %963)
}

def @func_5543() -> Tensor[(13, 12, 6), float64] {
  %964 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %964.1
}

def @func_8808() -> Tensor[(13, 12, 6), float64] {
  %965 = @func_3625() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64]) */;
  %965.1
}

def @func_3233() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %966 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %967 = @func_2828() /* ty=Tensor[(13, 12, 6), float64] */;
  %968 = %966.1;
  (%967, %968)
}

def @func_1322() -> Tensor[(13, 12, 6), uint16] {
  %969 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %970 = cast(%969, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %971 = log10(%970) /* ty=Tensor[(13, 12, 6), float32] */;
  %972 = cast(%969, dtype="uint16") /* ty=Tensor[(13, 12, 6), uint16] */;
  %973 = shape_of(%971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %974 = cast(%971, dtype="uint16") /* ty=Tensor[(13, 12, 6), uint16] */;
  %975 = dyn.reshape(%972, %973, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%974, %975) /* ty=Tensor[(13, 12, 6), uint16] */
}

def @func_2110() -> (Tensor[(13, 12, 6), uint16],) {
  %976 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
  (%976,)
}

def @func_4962() -> Tensor[(4, 12, 15), float32] {
  @func_2095() /* ty=Tensor[(4, 12, 15), float32] */
}

def @func_8495() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
  %977 = @func_4252() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) */;
  %978 = %977.0;
  %979 = @func_6284() /* ty=Tensor[(13, 12, 6), float64] */;
  (%978, %979)
}

def @main(%var_9588: Tensor[(16, 6, 15), int64]) -> (Tensor[(16, 6, 15), bool],) {
  %980 = cast(%var_9588, dtype="bool") /* ty=Tensor[(16, 6, 15), bool] */;
  %981 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(16, 6, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(meta[relay.Constant][71] /* ty=Tensor[(16, 6, 15), int64] */, dtype="bool") /* ty=Tensor[(16, 6, 15), bool] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %984 = greater(%982, %983) /* ty=Tensor[(16, 6, 15), bool] */;
  (%984,)
}

def @func_463(%var_456: Tensor[(13, 12, 3), float64]) -> Tensor[(13, 12, 3), float64] {
  %985 = cast(%var_456, dtype="float64") /* ty=Tensor[(13, 12, 3), float64] */;
  sigmoid(%985) /* ty=Tensor[(13, 12, 3), float64] */
}

def @func_7836(%var_7823: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(5), float64]) {
  %986 = @func_7178() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %987 = cast(%var_7823, dtype="float64") /* ty=Tensor[(5), float64] */;
  %988 = reshape(%987, newshape=[5]) /* ty=Tensor[(5), float64] */;
  %989 = @func_7008(%988) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %990 = %986.0;
  %991 = %989.4;
  (%990, %991, %var_7823)
}

def @func_9429() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(3, 11, 5), float64], Tensor[(165, 1), float64]) {
  %992 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %993 = cast(meta[relay.Constant][72] /* ty=Tensor[(165, 1), float64] */, dtype="float64") /* ty=Tensor[(165, 1), float64] */;
  %994 = reshape(%993, newshape=[3, 11, 5]) /* ty=Tensor[(3, 11, 5), float64] */;
  %995 = @func_5716(%994) /* ty=(Tensor[(3, 11, 5), float64],) */;
  %996 = @func_9380() /* ty=Tensor[(13, 12, 6), bool] */;
  %997 = %992.1;
  %998 = %995.0;
  (%996, %997, %998, meta[relay.Constant][72] /* ty=Tensor[(165, 1), float64] */)
}

def @func_2095() -> Tensor[(4, 12, 15), float32] {
  %999 = cast(meta[relay.Constant][73] /* ty=Tensor[(4, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
  acos(%999) /* ty=Tensor[(4, 12, 15), float32] */
}

def @func_3354(%var_3348: Tensor[(13, 12, 6), float64]) -> (Tensor[(13, 12, 6), uint64],) {
  %1000 = @func_2828() /* ty=Tensor[(13, 12, 6), float64] */;
  %1001 = cast(%var_3348, dtype="uint64") /* ty=Tensor[(13, 12, 6), uint64] */;
  %1002 = shape_of(%1000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(%1000, dtype="uint64") /* ty=Tensor[(13, 12, 6), uint64] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1005 = maximum(%1003, %1004) /* ty=Tensor[(13, 12, 6), uint64] */;
  (%1005,)
}

def @func_183(%var_174: Tensor[(1, 9, 9), float32]) -> Tensor[(1, 9, 9), float32] {
  %1006 = cast(%var_174, dtype="float32") /* ty=Tensor[(1, 9, 9), float32] */;
  sigmoid(%1006) /* ty=Tensor[(1, 9, 9), float32] */
}

def @func_1956() -> (Tensor[(13, 12, 6), uint8],) {
  %1007 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %1008 = %1007.0;
  (%1008,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2774() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %0 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  %1 = cast(%0, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %2 = reshape(%1, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), uint8] */;
  %3 = @func_1416(%2) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %4 = %3.0;
  (%0, %4)
}

def @func_809(%var_808: Tensor[(10, 12, 16), float64]) -> Tensor[(10, 12, 16), float64] {
  %6 = fn (%var_803: Tensor[(10, 12, 16), float64]) -> Tensor[(10, 12, 16), float64] {
    %5 = cast(%var_803, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
    exp(%5) /* ty=Tensor[(10, 12, 16), float64] */
  };
  %6(%var_808) /* ty=Tensor[(10, 12, 16), float64] */
}

def @func_1956() -> (Tensor[(13, 12, 6), uint8],) {
  %7 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %8 = %7.0;
  (%8,)
}

def @func_2484() -> Tensor[(13, 12, 6), bool] {
  @func_2482() /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_1486(%var_1483: Tensor[(3, 11, 8), float32], %var_1484: Tensor[(60), uint16], %var_1485: Tensor[(975), uint16]) -> (Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) {
  %38 = fn (%var_1427: Tensor[(3, 11, 8), float32], %var_1435: Tensor[(60), uint16], %var_1456: Tensor[(975), uint16]) -> (Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) {
    %9 = cast(%var_1427, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
    %10 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 11, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %13 = cast(%var_1435, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %14 = reshape(%13, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
    %15 = @func_1362(%14) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
    %16 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %17 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %18 = cast(%var_1456, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %19 = reshape(%17, newshape=[]) /* ty=uint16 */;
    %20 = reshape(%18, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
    %21 = @func_599(%19, %20) /* ty=(Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) */;
    %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
    %23 = reshape(%22, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
    %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
    %25 = reshape(%24, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
    %26 = @func_183(%25) /* ty=Tensor[(1, 9, 9), float32] */;
    %27 = cast(%26, dtype="float32") /* ty=Tensor[(1, 9, 9), float32] */;
    %28 = reshape(%27, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
    %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %30 = reshape(%29, newshape=[13, 12, 3]) /* ty=Tensor[(13, 12, 3), float64] */;
    %31 = divide(%11, %12) /* ty=Tensor[(3, 11, 8), float32] */;
    %32 = %15.0;
    %33 = %16.0;
    %34 = %21.2;
    %35 = @func_183(%23) /* ty=Tensor[(1, 9, 9), float32] */;
    %36 = @func_183(%28) /* ty=Tensor[(1, 9, 9), float32] */;
    %37 = @func_463(%30) /* ty=Tensor[(13, 12, 3), float64] */;
    (%31, %32, %var_1435, %33, %34, meta[relay.Constant][1] /* ty=uint16 */, %var_1456, %35, meta[relay.Constant][2] /* ty=Tensor[(81), float32] */, %26, %36, %37, meta[relay.Constant][3] /* ty=Tensor[(468), float64] */)
  };
  %38(%var_1483, %var_1484, %var_1485) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) */
}

def @func_1599(%var_1597: Tensor[(3, 88), float32], %var_1598: Tensor[(5, 195), uint16]) -> (Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) {
  %49 = fn (%var_1592: Tensor[(3, 88), float32], %var_1594: Tensor[(5, 195), uint16]) -> (Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) {
    %39 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %40 = cast(%var_1592, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
    %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %42 = cast(%var_1594, dtype="uint16") /* ty=Tensor[(5, 195), uint16] */;
    %43 = reshape(%40, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), float32] */;
    %44 = reshape(%41, newshape=[60]) /* ty=Tensor[(60), uint16] */;
    %45 = reshape(%42, newshape=[975]) /* ty=Tensor[(975), uint16] */;
    %46 = @func_1482(%43, %44, %45) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) */;
    %47 = %39.0;
    %48 = %46.1;
    (%47, %48, %var_1592, meta[relay.Constant][4] /* ty=Tensor[(60), uint16] */, %var_1594)
  };
  %49(%var_1597, %var_1598) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) */
}

def @func_3690() -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) {
  %50 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %51 = %50.0;
  %52 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
  (%51, %52)
}

def @func_6694() -> (Tensor[(13, 12, 6), uint16],) {
  %55 = fn () -> (Tensor[(13, 12, 6), uint16],) {
    %53 = @func_2815() /* ty=(Tensor[(13, 12, 6), uint16],) */;
    %54 = %53.0;
    (%54,)
  };
  %55() /* ty=(Tensor[(13, 12, 6), uint16],) */
}

def @func_1706() -> Tensor[(13, 12, 6), bool] {
  %56 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %57 = %56.0;
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 12, 6), uint8] */, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%57, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%60, %61) /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_2719() -> Tensor[(13, 12, 6), float64] {
  @func_2247() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_465(%var_464: Tensor[(13, 12, 3), float64]) -> Tensor[(13, 12, 3), float64] {
  %63 = fn (%var_456: Tensor[(13, 12, 3), float64]) -> Tensor[(13, 12, 3), float64] {
    %62 = cast(%var_456, dtype="float64") /* ty=Tensor[(13, 12, 3), float64] */;
    sigmoid(%62) /* ty=Tensor[(13, 12, 3), float64] */
  };
  %63(%var_464) /* ty=Tensor[(13, 12, 3), float64] */
}

def @func_4884() -> (Tensor[(13, 12, 6), float64],) {
  @func_4882() /* ty=(Tensor[(13, 12, 6), float64],) */
}

def @func_6970(%var_6906: Tensor[(2, 5, 4), float32], %var_6920: Tensor[(600), float64], %var_6921: Tensor[(65), int64], %var_6922: Tensor[(325), int64], %var_6929: Tensor[(448), float32]) -> (Tensor[(2, 5, 4), float32], Tensor[(2, 5, 4), int32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(13, 12, 6), uint16], Tensor[(448), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16], Tensor[(1920), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16]) {
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 4), float32] */;
  %65 = shape_of(%var_6906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_6906, dtype="float32") /* ty=Tensor[(2, 5, 4), float32] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %68 = cast(%var_6906, dtype="int32") /* ty=Tensor[(2, 5, 4), int32] */;
  %69 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(2, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 4), int32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %72 = cast(%var_6929, dtype="float32") /* ty=Tensor[(448), float32] */;
  %73 = reshape(%72, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), float32] */;
  %74 = @func_4005(%73) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(13, 12, 6), uint16]) */;
  %75 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %76 = cast(%var_6920, dtype="float64") /* ty=Tensor[(600), float64] */;
  %77 = cast(%var_6921, dtype="int64") /* ty=Tensor[(65), int64] */;
  %78 = cast(%var_6922, dtype="int64") /* ty=Tensor[(325), int64] */;
  %79 = cast(meta[relay.Constant][7] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %80 = reshape(%76, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %81 = reshape(%77, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %82 = reshape(%78, newshape=[65, 5]) /* ty=Tensor[(65, 5), int64] */;
  %83 = reshape(%79, newshape=[]) /* ty=uint16 */;
  %84 = @func_1049(%80, %81, %82, %83) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) */;
  %85 = %84.11;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %87 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %88 = @func_5473() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %89 = divide(%66, %67) /* ty=Tensor[(2, 5, 4), float32] */;
  %90 = minimum(%70, %71) /* ty=Tensor[(2, 5, 4), int32] */;
  %91 = %74.1;
  %92 = %75.0;
  %93 = @func_6843() /* ty=Tensor[(13, 12, 6), uint16] */;
  %94 = atan(%86) /* ty=Tensor[(1920), float32] */;
  %95 = %87.0;
  %96 = %88.0;
  (%89, %90, %var_6920, %var_6921, %var_6922, meta[relay.Constant][7] /* ty=uint16 */, %91, %var_6929, %92, %93, %94, %95, %96)
}

def @func_5544() -> Tensor[(13, 12, 6), float64] {
  %98 = fn () -> Tensor[(13, 12, 6), float64] {
    %97 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %97.1
  };
  %98() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_1054(%var_1050: Tensor[(5, 12, 10), float64], %var_1051: Tensor[(65), int64], %var_1052: Tensor[(65, 5), int64], %var_1053: uint16) -> (Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) {
  %140 = fn (%var_970: Tensor[(5, 12, 10), float64], %var_1018: Tensor[(65), int64], %var_1019: Tensor[(65, 5), int64], %var_1034: uint16) -> (Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) {
    %99 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 66), uint8] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
    %100 = reshape(%99, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
    %101 = @func_861(%100) /* ty=(Tensor[(11, 3, 10), float64],) */;
    %102 = cast(%var_970, dtype="float64") /* ty=Tensor[(5, 12, 10), float64] */;
    %103 = log(%102) /* ty=Tensor[(5, 12, 10), float64] */;
    %104 = cast(%103, dtype="int64") /* ty=Tensor[(5, 12, 10), int64] */;
    %105 = shape_of(%var_970, dtype="int32") /* ty=Tensor[(3), int32] */;
    %106 = cast(%var_970, dtype="int64") /* ty=Tensor[(5, 12, 10), int64] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %108 = right_shift(%106, %107) /* ty=Tensor[(5, 12, 10), int64] */;
    %109 = cast(%108, dtype="uint32") /* ty=Tensor[(5, 12, 10), uint32] */;
    %110 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%103, dtype="uint32") /* ty=Tensor[(5, 12, 10), uint32] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %113 = %101.0;
    %114 = cast(%113, dtype="uint8") /* ty=Tensor[(11, 3, 10), uint8] */;
    %115 = reshape(%114, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
    %116 = @func_861(%115) /* ty=(Tensor[(11, 3, 10), float64],) */;
    %117 = cast(%var_1018, dtype="int64") /* ty=Tensor[(65), int64] */;
    %118 = cast(%var_1019, dtype="int64") /* ty=Tensor[(65, 5), int64] */;
    %119 = reshape(%117, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), int64] */;
    %120 = reshape(%118, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), int64] */;
    %121 = @func_337(%119, %120) /* ty=(Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) */;
    %122 = cast(%113, dtype="uint8") /* ty=Tensor[(11, 3, 10), uint8] */;
    %123 = reshape(%122, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
    %124 = @func_861(%123) /* ty=(Tensor[(11, 3, 10), float64],) */;
    %125 = cast(%var_1034, dtype="uint16") /* ty=uint16 */;
    %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(65, 15), uint16] */, dtype="uint16") /* ty=Tensor[(65, 15), uint16] */;
    %127 = reshape(%125, newshape=[]) /* ty=uint16 */;
    %128 = reshape(%126, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
    %129 = @func_599(%127, %128) /* ty=(Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) */;
    %130 = cast(meta[relay.Constant][10] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %131 = reshape(%130, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
    %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(65, 15), uint16] */, dtype="float32") /* ty=Tensor[(65, 15), float32] */;
    %133 = bitwise_and(%111, %112) /* ty=Tensor[(5, 12, 10), uint32] */;
    %134 = %116.0;
    %135 = %121.1;
    %136 = %124.0;
    %137 = %129.4;
    %138 = @func_807(%131) /* ty=Tensor[(10, 12, 16), float64] */;
    %139 = log2(%132) /* ty=Tensor[(65, 15), float32] */;
    (%113, meta[relay.Constant][8] /* ty=Tensor[(5, 66), uint8] */, %133, %134, %135, %var_1018, %var_1019, %136, %137, %var_1034, %138, meta[relay.Constant][10] /* ty=Tensor[(1920), float64] */, %139)
  };
  %140(%var_1050, %var_1051, %var_1052, %var_1053) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) */
}

def @func_7596() -> Tensor[(13, 12, 6), uint8] {
  %142 = fn () -> Tensor[(13, 12, 6), uint8] {
    %141 = @func_7502() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) */;
    %141.0
  };
  %142() /* ty=Tensor[(13, 12, 6), uint8] */
}

def @func_9307(%var_9305: Tensor[(9, 11, 15), float64]) -> (Tensor[(13, 12, 6), uint8], Tensor[(9, 11, 15), uint16]) {
  @func_9304(%var_9305) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(9, 11, 15), uint16]) */
}

def @func_6454(%var_6442: Tensor[(165, 2), uint8]) -> (Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) {
  %143 = @func_6101() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %144 = cast(%var_6442, dtype="uint8") /* ty=Tensor[(165, 2), uint8] */;
  %145 = reshape(%144, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %146 = @func_861(%145) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %147 = %143.0;
  %148 = %146.0;
  (%147, %148, %var_6442)
}

def @func_2049(%var_2047: Tensor[(8, 2, 15), float64]) -> (Tensor[(8, 2, 15), float64],) {
  @func_2046(%var_2047) /* ty=(Tensor[(8, 2, 15), float64],) */
}

def @func_2096() -> Tensor[(4, 12, 15), float32] {
  %150 = fn () -> Tensor[(4, 12, 15), float32] {
    %149 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
    acos(%149) /* ty=Tensor[(4, 12, 15), float32] */
  };
  %150() /* ty=Tensor[(4, 12, 15), float32] */
}

def @func_4222(%var_4221: Tensor[(13, 12, 6), bool]) -> (Tensor[(13, 12, 6), uint8],) {
  %158 = fn (%var_4204: Tensor[(13, 12, 6), bool]) -> (Tensor[(13, 12, 6), uint8],) {
    %151 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
    %152 = %151.1;
    %153 = cast(%var_4204, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%152, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %157 = add(%155, %156) /* ty=Tensor[(13, 12, 6), uint8] */;
    (%157,)
  };
  %158(%var_4221) /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_2247() -> Tensor[(13, 12, 6), float64] {
  %159 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %159.0
}

def @func_9431() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(3, 11, 5), float64], Tensor[(165, 1), float64]) {
  @func_9429() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(3, 11, 5), float64], Tensor[(165, 1), float64]) */
}

def @func_2815() -> (Tensor[(13, 12, 6), uint16],) {
  %160 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %161 = %160.0;
  (%161,)
}

def @func_1807(%var_1806: Tensor[(1920), float64]) -> (Tensor[(13, 12, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  %168 = fn (%var_1792: Tensor[(1920), float64]) -> (Tensor[(13, 12, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
    %162 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
    %163 = cast(%162, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
    %164 = cast(%var_1792, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %165 = reshape(%164, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
    %166 = sigmoid(%163) /* ty=Tensor[(13, 12, 6), float32] */;
    %167 = @func_807(%165) /* ty=Tensor[(10, 12, 16), float64] */;
    (%166, %167, %var_1792)
  };
  %168(%var_1806) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) */
}

def @func_1419(%var_1417: Tensor[(13, 12, 6), uint8]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  @func_1416(%var_1417) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */
}

def @func_7939() -> (Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8]) {
  @func_7937() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8]) */
}

def @func_2817() -> (Tensor[(13, 12, 6), uint16],) {
  @func_2815() /* ty=(Tensor[(13, 12, 6), uint16],) */
}

def @func_1362(%var_1353: Tensor[(6, 2, 5), uint16]) -> (Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) {
  %169 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
  %170 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = cast(%var_1353, dtype="uint16") /* ty=Tensor[(6, 2, 5), uint16] */;
  %174 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 2, 5), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2, 5), uint16] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %177 = not_equal(%171, %172) /* ty=Tensor[(6, 2, 5), bool] */;
  %178 = right_shift(%175, %176) /* ty=Tensor[(6, 2, 5), uint16] */;
  (%177, %178)
}

def @func_8524() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) {
  %179 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %180 = %179.0;
  %181 = @func_7562() /* ty=Tensor[(13, 12, 6), bool] */;
  (%180, %181)
}

def @func_9018(%var_9017: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(5), float64]) {
  %188 = fn (%var_9010: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(5), float64]) {
    %182 = @func_7873() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) */;
    %183 = cast(%var_9010, dtype="float64") /* ty=Tensor[(5), float64] */;
    %184 = reshape(%183, newshape=[5]) /* ty=Tensor[(5), float64] */;
    %185 = @func_7008(%184) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %186 = %182.0;
    %187 = %185.0;
    (%186, %187, %var_9010)
  };
  %188(%var_9017) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(5), float64]) */
}

def @func_6426() -> (Tensor[(13, 12, 6), uint8],) {
  @func_6424() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_3171() -> (Tensor[(13, 12, 6), float32],) {
  @func_3169() /* ty=(Tensor[(13, 12, 6), float32],) */
}

def @func_4525(%var_4523: Tensor[(65), int64], %var_4524: uint16) -> (Tensor[(4, 12, 15), float32], Tensor[(600), float64], Tensor[(65), int64], uint16, Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) {
  %202 = fn (%var_4495: Tensor[(65), int64], %var_4496: uint16) -> (Tensor[(4, 12, 15), float32], Tensor[(600), float64], Tensor[(65), int64], uint16, Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) {
    %189 = cast(%var_4495, dtype="int64") /* ty=Tensor[(65), int64] */;
    %190 = cast(%var_4496, dtype="uint16") /* ty=uint16 */;
    %191 = reshape(%189, newshape=[65]) /* ty=Tensor[(65), int64] */;
    %192 = reshape(%190, newshape=[]) /* ty=uint16 */;
    %193 = @func_2911(%191, %192) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) */;
    %194 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %195 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
    %196 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %197 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
    %198 = %193.2;
    %199 = %194.0;
    %200 = %195.0;
    %201 = %196.0;
    (%197, %198, %var_4495, %var_4496, %199, %200, %201)
  };
  %202(%var_4523, %var_4524) /* ty=(Tensor[(4, 12, 15), float32], Tensor[(600), float64], Tensor[(65), int64], uint16, Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */
}

def @func_4148() -> (Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), bool], Tensor[(60), uint16]) {
  %208 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), bool], Tensor[(60), uint16]) {
    %203 = cast(meta[relay.Constant][14] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %204 = reshape(%203, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
    %205 = @func_1362(%204) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
    %206 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
    %207 = %205.0;
    (%206, %207, meta[relay.Constant][14] /* ty=Tensor[(60), uint16] */)
  };
  %208() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), bool], Tensor[(60), uint16]) */
}

def @func_6023(%var_6009: Tensor[(2, 5, 9), int32], %var_6010: Tensor[(2, 5, 9), int32]) -> (Tensor[(2, 5, 9), int32],) {
  %209 = cast(%var_6010, dtype="int32") /* ty=Tensor[(2, 5, 9), int32] */;
  %210 = shape_of(%var_6009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_6009, dtype="int32") /* ty=Tensor[(2, 5, 9), int32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %213 = bitwise_xor(%211, %212) /* ty=Tensor[(2, 5, 9), int32] */;
  (%213,)
}

def @func_3848() -> (Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) {
  %214 = cast(meta[relay.Constant][15] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %215 = reshape(%214, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %216 = @func_861(%215) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %217 = cast(meta[relay.Constant][16] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %218 = reshape(%217, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
  %219 = @func_1362(%218) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
  %220 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  %221 = %216.0;
  %222 = %219.1;
  %223 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  (%220, %221, meta[relay.Constant][15] /* ty=Tensor[(330), uint8] */, %222, meta[relay.Constant][16] /* ty=Tensor[(60), uint16] */, %223)
}

def @func_5716(%var_5708: Tensor[(3, 11, 5), float64]) -> (Tensor[(3, 11, 5), float64],) {
  %224 = cast(%var_5708, dtype="float64") /* ty=Tensor[(3, 11, 5), float64] */;
  %225 = asinh(%224) /* ty=Tensor[(3, 11, 5), float64] */;
  (%225,)
}

def @func_6027(%var_6025: Tensor[(2, 5, 9), int32], %var_6026: Tensor[(2, 5, 9), int32]) -> (Tensor[(2, 5, 9), int32],) {
  @func_6023(%var_6025, %var_6026) /* ty=(Tensor[(2, 5, 9), int32],) */
}

def @func_3958() -> Tensor[(13, 12, 6), float64] {
  @func_3956() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_6401() -> (Tensor[(13, 12, 6), float64],) {
  %227 = fn () -> (Tensor[(13, 12, 6), float64],) {
    %226 = @func_6284() /* ty=Tensor[(13, 12, 6), float64] */;
    (%226,)
  };
  %227() /* ty=(Tensor[(13, 12, 6), float64],) */
}

def @func_1202(%var_1154: Tensor[(1, 2, 13), int64], %var_1155: Tensor[(15, 2, 13), int64], %var_1197: uint16) -> (Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) {
  %228 = cast(%var_1154, dtype="int64") /* ty=Tensor[(1, 2, 13), int64] */;
  %229 = cast(%var_1155, dtype="int64") /* ty=Tensor[(15, 2, 13), int64] */;
  %230 = cast(%var_1154, dtype="bool") /* ty=Tensor[(1, 2, 13), bool] */;
  %231 = cast(%var_1155, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %232 = cast(%var_1154, dtype="float32") /* ty=Tensor[(1, 2, 13), float32] */;
  %233 = asinh(%232) /* ty=Tensor[(1, 2, 13), float32] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(1, 2, 13), float64] */;
  %235 = cast(%var_1155, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %236 = cast(%var_1197, dtype="uint16") /* ty=uint16 */;
  %237 = cast(meta[relay.Constant][17] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %238 = reshape(%236, newshape=[]) /* ty=uint16 */;
  %239 = reshape(%237, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %240 = @func_599(%238, %239) /* ty=(Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) */;
  %241 = bitwise_or(%228, %229) /* ty=Tensor[(15, 2, 13), int64] */;
  %242 = logical_or(%230, %231) /* ty=Tensor[(15, 2, 13), bool] */;
  %243 = floor_mod(%234, %235) /* ty=Tensor[(15, 2, 13), float64] */;
  %244 = %240.4;
  (%241, %242, %243, %244, %var_1197, meta[relay.Constant][17] /* ty=Tensor[(975), uint16] */)
}

def @func_5599() -> (Tensor[(13, 12, 6), uint8],) {
  @func_5597() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_4801() -> (Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) {
  %245 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %246 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 12), int64] */;
  %247 = @func_2447() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %248 = multiply(%245, %246) /* ty=Tensor[(11, 11, 12), int64] */;
  %249 = %247.0;
  (%248, %249)
}

def @func_3078(%var_3077: Tensor[(13, 12, 6), uint8]) -> (Tensor[(13, 12, 6), int8], Tensor[(13, 12, 6), uint32]) {
  %262 = fn (%var_3053: Tensor[(13, 12, 6), uint8]) -> (Tensor[(13, 12, 6), int8], Tensor[(13, 12, 6), uint32]) {
    %250 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
    %251 = %250.2;
    %252 = cast(%var_3053, dtype="int8") /* ty=Tensor[(13, 12, 6), int8] */;
    %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%251, dtype="int8") /* ty=Tensor[(13, 12, 6), int8] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %256 = cast(%var_3053, dtype="uint32") /* ty=Tensor[(13, 12, 6), uint32] */;
    %257 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(%251, dtype="uint32") /* ty=Tensor[(13, 12, 6), uint32] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %260 = left_shift(%254, %255) /* ty=Tensor[(13, 12, 6), int8] */;
    %261 = multiply(%258, %259) /* ty=Tensor[(13, 12, 6), uint32] */;
    (%260, %261)
  };
  %262(%var_3077) /* ty=(Tensor[(13, 12, 6), int8], Tensor[(13, 12, 6), uint32]) */
}

def @func_3233() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %263 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %264 = @func_2828() /* ty=Tensor[(13, 12, 6), float64] */;
  %265 = %263.1;
  (%264, %265)
}

def @func_4071(%var_4069: Tensor[(1, 5, 1), float64]) -> (Tensor[(1, 5, 1), float64],) {
  @func_4068(%var_4069) /* ty=(Tensor[(1, 5, 1), float64],) */
}

def @func_6845() -> Tensor[(13, 12, 6), uint16] {
  @func_6843() /* ty=Tensor[(13, 12, 6), uint16] */
}

def @func_8526() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) {
  @func_8524() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */
}

def @func_7962() -> Tensor[(13, 12, 6), uint16] {
  %266 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %266.0
}

def @func_3465() -> (Tensor[(13, 12, 6), bool],) {
  %268 = fn () -> (Tensor[(13, 12, 6), bool],) {
    %267 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
    (%267,)
  };
  %268() /* ty=(Tensor[(13, 12, 6), bool],) */
}

def @func_6368() -> (Tensor[(4, 12, 15), float32],) {
  @func_6366() /* ty=(Tensor[(4, 12, 15), float32],) */
}

def @func_6642(%var_6605: Tensor[(240), float64]) -> (Tensor[(11, 11, 12), int64], Tensor[(8, 2, 15), float64], Tensor[(240), float64], Tensor[(975), uint16], Tensor[(52), float32], Tensor[(13, 12, 6), bool]) {
  %269 = @func_4801() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) */;
  %270 = cast(%var_6605, dtype="float64") /* ty=Tensor[(240), float64] */;
  %271 = reshape(%270, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), float64] */;
  %272 = @func_2046(%271) /* ty=(Tensor[(8, 2, 15), float64],) */;
  %273 = cast(meta[relay.Constant][19] /* ty=Tensor[(52), float32] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %274 = reshape(%273, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), float32] */;
  %275 = @func_3798(%274) /* ty=(Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) */;
  %276 = %269.0;
  %277 = %272.0;
  %278 = %275.2;
  %279 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
  (%276, %277, %var_6605, %278, meta[relay.Constant][19] /* ty=Tensor[(52), float32] */, %279)
}

def @func_5474() -> (Tensor[(13, 12, 6), uint16],) {
  %282 = fn () -> (Tensor[(13, 12, 6), uint16],) {
    %280 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
    %281 = %280.0;
    (%281,)
  };
  %282() /* ty=(Tensor[(13, 12, 6), uint16],) */
}

def @func_2143() -> (Tensor[(4, 12, 15), float32],) {
  @func_2141() /* ty=(Tensor[(4, 12, 15), float32],) */
}

def @func_2915(%var_2913: Tensor[(65), int64], %var_2914: uint16) -> (Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) {
  @func_2911(%var_2913, %var_2914) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) */
}

def @func_2010(%var_2008: bool, %var_2009: Tensor[(975), uint16]) -> (Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) {
  %296 = fn (%var_1971: bool, %var_1991: Tensor[(975), uint16]) -> (Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) {
    %283 = cast(meta[relay.Constant][20] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %284 = cast(%var_1991, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %285 = reshape(%283, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
    %286 = reshape(%284, newshape=[5, 195]) /* ty=Tensor[(5, 195), uint16] */;
    %287 = @func_1596(%285, %286) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) */;
    %288 = cast(%var_1971, dtype="bool") /* ty=bool */;
    %289 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 13, 1), bool] */, dtype="bool") /* ty=Tensor[(9, 13, 1), bool] */;
    %290 = logical_and(%288, %289) /* ty=Tensor[(9, 13, 1), bool] */;
    %291 = cast(%290, dtype="float64") /* ty=Tensor[(9, 13, 1), float64] */;
    %292 = sin(%291) /* ty=Tensor[(9, 13, 1), float64] */;
    %293 = cast(%292, dtype="float64") /* ty=Tensor[(9, 13, 1), float64] */;
    %294 = %287.2;
    %295 = rsqrt(%293) /* ty=Tensor[(9, 13, 1), float64] */;
    (%294, meta[relay.Constant][20] /* ty=Tensor[(264), float32] */, %var_1991, %295)
  };
  %296(%var_2008, %var_2009) /* ty=(Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) */
}

def @func_1416(%var_1383: Tensor[(13, 12, 6), uint8]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %297 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %298 = %297.0;
  %299 = cast(%var_1383, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %303 = cast(%298, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %304 = floor_divide(%301, %302) /* ty=Tensor[(13, 12, 6), float64] */;
  %305 = sinh(%303) /* ty=Tensor[(13, 12, 6), float64] */;
  %306 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  (%304, %305, %306)
}

def @func_8810() -> Tensor[(13, 12, 6), float64] {
  @func_8808() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_8835(%var_8833: Tensor[(6, 16, 6), float32]) -> (Tensor[(6, 16, 6), float32], Tensor[(6, 16, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  @func_8832(%var_8833) /* ty=(Tensor[(6, 16, 6), float32], Tensor[(6, 16, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) */
}

def @func_4254() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) {
  @func_4252() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) */
}

def @func_1207(%var_1204: Tensor[(1, 2, 13), int64], %var_1205: Tensor[(15, 2, 13), int64], %var_1206: uint16) -> (Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) {
  @func_1202(%var_1204, %var_1205, %var_1206) /* ty=(Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) */
}

def @func_5234() -> (Tensor[(13, 12, 6), bool],) {
  @func_5232() /* ty=(Tensor[(13, 12, 6), bool],) */
}

def @func_8808() -> Tensor[(13, 12, 6), float64] {
  %307 = @func_3625() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64]) */;
  %307.1
}

def @func_3377() -> (Tensor[(13, 12, 6), uint8],) {
  %310 = fn () -> (Tensor[(13, 12, 6), uint8],) {
    %308 = @func_3109() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) */;
    %309 = %308.0;
    (%309,)
  };
  %310() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_2448() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %315 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
    %311 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %312 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %313 = %311.0;
    %314 = %312.0;
    (%313, %314)
  };
  %315() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */
}

def @func_4761() -> Tensor[(13, 12, 6), float64] {
  %316 = fn () -> Tensor[(13, 12, 6), float64] {
    @func_2828() /* ty=Tensor[(13, 12, 6), float64] */
  };
  %316() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_8079() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
  @func_8077() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */
}

def @func_7356(%var_7354: Tensor[(1, 975), uint16], %var_7355: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(1, 975), uint16], Tensor[(65), int64], Tensor[(585), float32], Tensor[(165, 2), uint8], Tensor[(330), uint8]) {
  %337 = fn (%var_7299: Tensor[(1, 975), uint16], %var_7350: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(1, 975), uint16], Tensor[(65), int64], Tensor[(585), float32], Tensor[(165, 2), uint8], Tensor[(330), uint8]) {
    %317 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %318 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(60), uint16] */, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %320 = cast(%var_7299, dtype="uint16") /* ty=Tensor[(1, 975), uint16] */;
    %321 = cast(meta[relay.Constant][23] /* ty=Tensor[(65), int64] */, dtype="int64") /* ty=Tensor[(65), int64] */;
    %322 = cast(meta[relay.Constant][24] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
    %323 = reshape(%319, newshape=[60]) /* ty=Tensor[(60), uint16] */;
    %324 = reshape(%320, newshape=[975, 1]) /* ty=Tensor[(975, 1), uint16] */;
    %325 = reshape(%321, newshape=[1, 65]) /* ty=Tensor[(1, 65), int64] */;
    %326 = reshape(%322, newshape=[585]) /* ty=Tensor[(585), float32] */;
    %327 = @func_4412(%323, %324, %325, %326) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(81), float32], Tensor[(264), float32], Tensor[(60), uint16], Tensor[(975, 1), uint16], Tensor[(325), bool], Tensor[(1, 65), int64], uint16, Tensor[(13, 15, 3), float32], Tensor[(585), float32], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) */;
    %328 = cast(%var_7350, dtype="uint8") /* ty=Tensor[(330), uint8] */;
    %329 = reshape(%328, newshape=[165, 2]) /* ty=Tensor[(165, 2), uint8] */;
    %330 = @func_6454(%329) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */;
    %331 = @func_6384() /* ty=Tensor[(13, 12, 6), uint16] */;
    %332 = %317.1;
    %333 = %318.0;
    %334 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
    %335 = %327.13;
    %336 = %330.2;
    (%331, %332, %333, %334, %335, meta[relay.Constant][22] /* ty=Tensor[(60), uint16] */, %var_7299, meta[relay.Constant][23] /* ty=Tensor[(65), int64] */, meta[relay.Constant][24] /* ty=Tensor[(585), float32] */, %336, %var_7350)
  };
  %337(%var_7354, %var_7355) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(1, 975), uint16], Tensor[(65), int64], Tensor[(585), float32], Tensor[(165, 2), uint8], Tensor[(330), uint8]) */
}

def @func_5029(%var_5028: Tensor[(390), int64]) -> (Tensor[(13, 12, 6), bool], Tensor[(15, 2, 13), bool], Tensor[(390), int64], uint16, Tensor[(13, 12, 6), bool], Tensor[(26), float64]) {
  %352 = fn (%var_5018: Tensor[(390), int64]) -> (Tensor[(13, 12, 6), bool], Tensor[(15, 2, 13), bool], Tensor[(390), int64], uint16, Tensor[(13, 12, 6), bool], Tensor[(26), float64]) {
    %338 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %339 = cast(meta[relay.Constant][25] /* ty=Tensor[(26), int64] */, dtype="int64") /* ty=Tensor[(26), int64] */;
    %340 = cast(%var_5018, dtype="int64") /* ty=Tensor[(390), int64] */;
    %341 = cast(meta[relay.Constant][26] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %342 = reshape(%339, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), int64] */;
    %343 = reshape(%340, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), int64] */;
    %344 = reshape(%341, newshape=[]) /* ty=uint16 */;
    %345 = @func_1202(%342, %343, %344) /* ty=(Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) */;
    %346 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %347 = cast(meta[relay.Constant][25] /* ty=Tensor[(26), int64] */, dtype="float64") /* ty=Tensor[(26), float64] */;
    %348 = %338.0;
    %349 = %345.1;
    %350 = %346.0;
    %351 = atanh(%347) /* ty=Tensor[(26), float64] */;
    (%348, %349, %var_5018, meta[relay.Constant][26] /* ty=uint16 */, %350, %351)
  };
  %352(%var_5028) /* ty=(Tensor[(13, 12, 6), bool], Tensor[(15, 2, 13), bool], Tensor[(390), int64], uint16, Tensor[(13, 12, 6), bool], Tensor[(26), float64]) */
}

def @func_6645(%var_6643: Tensor[(240), float64]) -> (Tensor[(11, 11, 12), int64], Tensor[(8, 2, 15), float64], Tensor[(240), float64], Tensor[(975), uint16], Tensor[(52), float32], Tensor[(13, 12, 6), bool]) {
  @func_6642(%var_6643) /* ty=(Tensor[(11, 11, 12), int64], Tensor[(8, 2, 15), float64], Tensor[(240), float64], Tensor[(975), uint16], Tensor[(52), float32], Tensor[(13, 12, 6), bool]) */
}

def @func_3692() -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) {
  @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */
}

def @func_9240() -> (Tensor[(13, 12, 6), float64],) {
  @func_9238() /* ty=(Tensor[(13, 12, 6), float64],) */
}

def @func_7838(%var_7837: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(5), float64]) {
  %359 = fn (%var_7823: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(5), float64]) {
    %353 = @func_7178() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %354 = cast(%var_7823, dtype="float64") /* ty=Tensor[(5), float64] */;
    %355 = reshape(%354, newshape=[5]) /* ty=Tensor[(5), float64] */;
    %356 = @func_7008(%355) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %357 = %353.0;
    %358 = %356.4;
    (%357, %358, %var_7823)
  };
  %359(%var_7837) /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(5), float64]) */
}

def @func_7042() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %363 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
    %360 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %361 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
    %362 = %360.0;
    (%361, %362)
  };
  %363() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */
}

def @func_2828() -> Tensor[(13, 12, 6), float64] {
  %364 = @func_1765() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %364.1
}

def @func_4007(%var_4006: Tensor[(14, 4, 8), float32]) -> (Tensor[(14, 4, 8), float32], Tensor[(13, 12, 6), uint16]) {
  %368 = fn (%var_3999: Tensor[(14, 4, 8), float32]) -> (Tensor[(14, 4, 8), float32], Tensor[(13, 12, 6), uint16]) {
    %365 = cast(%var_3999, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
    %366 = cos(%365) /* ty=Tensor[(14, 4, 8), float32] */;
    %367 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
    (%366, %367)
  };
  %368(%var_4006) /* ty=(Tensor[(14, 4, 8), float32], Tensor[(13, 12, 6), uint16]) */
}

def @func_5799() -> (Tensor[(13, 12, 6), float64], Tensor[(330), uint8]) {
  @func_5797() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(330), uint8]) */
}

def @func_8729() -> (Tensor[(13, 12, 6), uint8],) {
  @func_8727() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_1766() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %374 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
    %369 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
    %371 = cast(%369, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
    %372 = rsqrt(%370) /* ty=Tensor[(13, 12, 6), float64] */;
    %373 = erf(%371) /* ty=Tensor[(13, 12, 6), float64] */;
    (%372, %373)
  };
  %374() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */
}

def @func_3483() -> (Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) {
  %375 = @func_2141() /* ty=(Tensor[(4, 12, 15), float32],) */;
  %376 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %377 = reshape(%376, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
  %378 = @func_861(%377) /* ty=(Tensor[(11, 3, 10), float64],) */;
  %379 = %375.0;
  %380 = %378.0;
  (%379, %380, meta[relay.Constant][27] /* ty=Tensor[(330), uint8] */)
}

def @func_3987() -> Tensor[(13, 12, 6), float64] {
  %381 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %381.1
}

def @main(%var_9588: Tensor[(16, 6, 15), int64]) -> (Tensor[(16, 6, 15), bool],) {
  %382 = cast(%var_9588, dtype="bool") /* ty=Tensor[(16, 6, 15), bool] */;
  %383 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(16, 6, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 6, 15), int64] */, dtype="bool") /* ty=Tensor[(16, 6, 15), bool] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %386 = greater(%384, %385) /* ty=Tensor[(16, 6, 15), bool] */;
  (%386,)
}

def @func_2111() -> (Tensor[(13, 12, 6), uint16],) {
  %388 = fn () -> (Tensor[(13, 12, 6), uint16],) {
    %387 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
    (%387,)
  };
  %388() /* ty=(Tensor[(13, 12, 6), uint16],) */
}

def @func_8417() -> (Tensor[(4, 12, 15), float32],) {
  %389 = @func_2141() /* ty=(Tensor[(4, 12, 15), float32],) */;
  %390 = %389.0;
  (%390,)
}

def @func_8077() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
  %391 = @func_7937() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8]) */;
  %392 = @func_6400() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %393 = %391.2;
  %394 = @func_5701() /* ty=Tensor[(13, 12, 6), bool] */;
  %395 = %392.0;
  (%393, %394, %395)
}

def @func_8001(%var_8000: Tensor[(165), float64]) -> (Tensor[(12, 10, 14), float32], Tensor[(12, 10, 14), float32], Tensor[(3, 11, 5), float64], Tensor[(165), float64]) {
  %410 = fn (%var_7991: Tensor[(165), float64]) -> (Tensor[(12, 10, 14), float32], Tensor[(12, 10, 14), float32], Tensor[(3, 11, 5), float64], Tensor[(165), float64]) {
    %396 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
    %397 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(12, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %398 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
    %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %400 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
    %401 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(12, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %404 = cast(%var_7991, dtype="float64") /* ty=Tensor[(165), float64] */;
    %405 = reshape(%404, newshape=[3, 11, 5]) /* ty=Tensor[(3, 11, 5), float64] */;
    %406 = @func_5716(%405) /* ty=(Tensor[(3, 11, 5), float64],) */;
    %407 = floor_mod(%398, %399) /* ty=Tensor[(12, 10, 14), float32] */;
    %408 = mod(%402, %403) /* ty=Tensor[(12, 10, 14), float32] */;
    %409 = %406.0;
    (%407, %408, %409, %var_7991)
  };
  %410(%var_8000) /* ty=(Tensor[(12, 10, 14), float32], Tensor[(12, 10, 14), float32], Tensor[(3, 11, 5), float64], Tensor[(165), float64]) */
}

def @func_8635() -> (Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) {
  @func_8633() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) */
}

def @func_3169() -> (Tensor[(13, 12, 6), float32],) {
  %411 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %414 = acosh(%413) /* ty=Tensor[(13, 12, 6), float32] */;
  (%414,)
}

def @func_5193(%var_5147: Tensor[(330), uint8], %var_5178: bool, %var_5179: Tensor[(975, 1), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(11, 11, 12), int64], Tensor[(9, 13, 1), float64], bool, Tensor[(975, 1), uint16], Tensor[(13, 12, 6), uint16]) {
  %415 = @func_3376() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %416 = @func_3848() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) */;
  %417 = %416.2;
  %418 = cast(%var_5147, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(1), int32] */;
  %420 = cast(%417, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %422 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %423 = @func_4801() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) */;
  %424 = cast(%var_5178, dtype="bool") /* ty=bool */;
  %425 = cast(%var_5179, dtype="uint16") /* ty=Tensor[(975, 1), uint16] */;
  %426 = reshape(%424, newshape=[]) /* ty=bool */;
  %427 = reshape(%425, newshape=[975]) /* ty=Tensor[(975), uint16] */;
  %428 = @func_2007(%426, %427) /* ty=(Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) */;
  %429 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
  %430 = %415.0;
  %431 = minimum(%420, %421) /* ty=Tensor[(330), uint8] */;
  %432 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %433 = %422.0;
  %434 = %423.0;
  %435 = %428.3;
  %436 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
  (%429, %430, %431, %432, %433, %434, %435, %var_5178, %var_5179, %436)
}

def @func_7441(%var_7440: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(13, 12, 6), int64]) {
  %455 = fn (%var_7416: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(13, 12, 6), int64]) {
    %437 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
    %438 = @func_4882() /* ty=(Tensor[(13, 12, 6), float64],) */;
    %439 = @func_5597() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %440 = cast(%var_7416, dtype="uint8") /* ty=Tensor[(330), uint8] */;
    %441 = reshape(%440, newshape=[165, 2]) /* ty=Tensor[(165, 2), uint8] */;
    %442 = @func_2227(%441) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */;
    %443 = @func_4882() /* ty=(Tensor[(13, 12, 6), float64],) */;
    %444 = %443.0;
    %445 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
    %446 = cast(%445, dtype="int64") /* ty=Tensor[(13, 12, 6), int64] */;
    %447 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %448 = cast(%444, dtype="int64") /* ty=Tensor[(13, 12, 6), int64] */;
    %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %450 = %437.0;
    %451 = %438.0;
    %452 = %439.0;
    %453 = %442.1;
    %454 = logical_xor(%448, %449) /* ty=Tensor[(13, 12, 6), int64] */;
    (%450, %451, %452, %453, %var_7416, %454)
  };
  %455(%var_7440) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(13, 12, 6), int64]) */
}

def @func_2141() -> (Tensor[(4, 12, 15), float32],) {
  %456 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  (%456,)
}

def @func_8276() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(3, 88), float32], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(15, 2, 13), bool], Tensor[(390), int64], Tensor[(13, 12, 6), bool], Tensor[(975), float64]) {
  %483 = fn () -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(3, 88), float32], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(15, 2, 13), bool], Tensor[(390), int64], Tensor[(13, 12, 6), bool], Tensor[(975), float64]) {
    %457 = @func_4252() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) */;
    %458 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
    %459 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 88), float32] */, dtype="float32") /* ty=Tensor[(3, 88), float32] */;
    %460 = cast(meta[relay.Constant][33] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %461 = reshape(%459, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
    %462 = reshape(%460, newshape=[5, 195]) /* ty=Tensor[(5, 195), uint16] */;
    %463 = @func_1596(%461, %462) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) */;
    %464 = @func_6101() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %465 = cast(meta[relay.Constant][34] /* ty=Tensor[(390), int64] */, dtype="int64") /* ty=Tensor[(390), int64] */;
    %466 = reshape(%465, newshape=[390]) /* ty=Tensor[(390), int64] */;
    %467 = @func_5027(%466) /* ty=(Tensor[(13, 12, 6), bool], Tensor[(15, 2, 13), bool], Tensor[(390), int64], uint16, Tensor[(13, 12, 6), bool], Tensor[(26), float64]) */;
    %468 = @func_5232() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %469 = cast(meta[relay.Constant][33] /* ty=Tensor[(975), uint16] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %470 = sqrt(%469) /* ty=Tensor[(975), float32] */;
    %471 = cast(%470, dtype="float32") /* ty=Tensor[(975), float32] */;
    %472 = sigmoid(%471) /* ty=Tensor[(975), float32] */;
    %473 = cast(%472, dtype="float64") /* ty=Tensor[(975), float64] */;
    %474 = %457.1;
    %475 = %458.0;
    %476 = %463.3;
    %477 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
    %478 = @func_7595() /* ty=Tensor[(13, 12, 6), uint8] */;
    %479 = %464.0;
    %480 = %467.1;
    %481 = %468.0;
    %482 = asin(%473) /* ty=Tensor[(975), float64] */;
    (%474, %475, %476, meta[relay.Constant][32] /* ty=Tensor[(3, 88), float32] */, %477, %478, %479, %480, meta[relay.Constant][34] /* ty=Tensor[(390), int64] */, %481, %482)
  };
  %483() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(3, 88), float32], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(15, 2, 13), bool], Tensor[(390), int64], Tensor[(13, 12, 6), bool], Tensor[(975), float64]) */
}

def @func_8927() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) {
  %488 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) {
    %484 = @func_8077() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */;
    %485 = @func_6693() /* ty=(Tensor[(13, 12, 6), uint16],) */;
    %486 = %484.2;
    %487 = %485.0;
    (%486, %487)
  };
  %488() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */
}

def @func_7179() -> (Tensor[(13, 12, 6), bool],) {
  %490 = fn () -> (Tensor[(13, 12, 6), bool],) {
    %489 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
    (%489,)
  };
  %490() /* ty=(Tensor[(13, 12, 6), bool],) */
}

def @func_2046(%var_2041: Tensor[(8, 2, 15), float64]) -> (Tensor[(8, 2, 15), float64],) {
  %491 = cast(%var_2041, dtype="float64") /* ty=Tensor[(8, 2, 15), float64] */;
  %492 = tan(%491) /* ty=Tensor[(8, 2, 15), float64] */;
  (%492,)
}

def @func_2314() -> (Tensor[(13, 12, 6), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), bool]) {
  %493 = @func_1322() /* ty=Tensor[(13, 12, 6), uint16] */;
  %494 = @func_2095() /* ty=Tensor[(4, 12, 15), float32] */;
  %495 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
  (%493, %494, %495)
}

def @func_2911(%var_2901: Tensor[(65), int64], %var_2903: uint16) -> (Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) {
  %496 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
  %497 = %496.1;
  %498 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 12, 6), float64] */, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %502 = cast(meta[relay.Constant][36] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %503 = cast(%var_2901, dtype="int64") /* ty=Tensor[(65), int64] */;
  %504 = cast(meta[relay.Constant][37] /* ty=Tensor[(325), int64] */, dtype="int64") /* ty=Tensor[(325), int64] */;
  %505 = cast(%var_2903, dtype="uint16") /* ty=uint16 */;
  %506 = reshape(%502, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %507 = reshape(%503, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %508 = reshape(%504, newshape=[65, 5]) /* ty=Tensor[(65, 5), int64] */;
  %509 = reshape(%505, newshape=[]) /* ty=uint16 */;
  %510 = @func_1049(%506, %507, %508, %509) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) */;
  %511 = cast(meta[relay.Constant][37] /* ty=Tensor[(325), int64] */, dtype="bool") /* ty=Tensor[(325), bool] */;
  %512 = cast(%var_2903, dtype="bool") /* ty=bool */;
  %513 = power(%500, %501) /* ty=Tensor[(13, 12, 6), float32] */;
  %514 = %510.4;
  %515 = greater(%511, %512) /* ty=Tensor[(325), bool] */;
  (%513, %514, meta[relay.Constant][36] /* ty=Tensor[(600), float64] */, %var_2901, %515)
}

def @func_6843() -> Tensor[(13, 12, 6), uint16] {
  %516 = @func_5473() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %516.0
}

def @func_1958() -> (Tensor[(13, 12, 6), uint8],) {
  @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_2830() -> Tensor[(13, 12, 6), float64] {
  @func_2828() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_1280() -> (Tensor[(13, 12, 6), uint8],) {
  %524 = fn () -> (Tensor[(13, 12, 6), uint8],) {
    %517 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
    %518 = sqrt(%517) /* ty=Tensor[(13, 12, 6), float64] */;
    %519 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 12, 6), float64] */, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%518, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %523 = right_shift(%521, %522) /* ty=Tensor[(13, 12, 6), uint8] */;
    (%523,)
  };
  %524() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_2590() -> (Tensor[(13, 12, 6), uint8],) {
  %526 = fn () -> (Tensor[(13, 12, 6), uint8],) {
    %525 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
    (%525,)
  };
  %526() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_2482() -> Tensor[(13, 12, 6), bool] {
  @func_1706() /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_4928() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) {
  @func_4926() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */
}

def @func_7008(%var_6989: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  %527 = @func_6593() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %528 = cast(%var_6989, dtype="float64") /* ty=Tensor[(5), float64] */;
  %529 = reshape(%528, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), float64] */;
  %530 = @func_4068(%529) /* ty=(Tensor[(1, 5, 1), float64],) */;
  %531 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %532 = %531.0;
  %533 = cast(%532, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
  %534 = reshape(%533, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), uint8] */;
  %535 = @func_1416(%534) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %536 = %527.0;
  %537 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %538 = %530.0;
  %539 = %535.0;
  (%536, %537, %538, %var_6989, %532, %539)
}

def @func_7875() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) {
  @func_7873() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) */
}

def @func_2249() -> Tensor[(13, 12, 6), float64] {
  @func_2247() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_6384() -> Tensor[(13, 12, 6), uint16] {
  %540 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
  %540.0
}

def @func_5198(%var_5195: Tensor[(330), uint8], %var_5196: bool, %var_5197: Tensor[(975, 1), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(11, 11, 12), int64], Tensor[(9, 13, 1), float64], bool, Tensor[(975, 1), uint16], Tensor[(13, 12, 6), uint16]) {
  @func_5193(%var_5195, %var_5196, %var_5197) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(11, 11, 12), int64], Tensor[(9, 13, 1), float64], bool, Tensor[(975, 1), uint16], Tensor[(13, 12, 6), uint16]) */
}

def @func_4964() -> Tensor[(4, 12, 15), float32] {
  @func_4962() /* ty=Tensor[(4, 12, 15), float32] */
}

def @func_3956() -> Tensor[(13, 12, 6), float64] {
  %541 = @func_2447() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %541.0
}

def @func_5232() -> (Tensor[(13, 12, 6), bool],) {
  %542 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %543 = %542.0;
  (%543,)
}

def @func_1323() -> Tensor[(13, 12, 6), uint16] {
  %551 = fn () -> Tensor[(13, 12, 6), uint16] {
    %544 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
    %545 = cast(%544, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
    %546 = log10(%545) /* ty=Tensor[(13, 12, 6), float32] */;
    %547 = cast(%544, dtype="uint16") /* ty=Tensor[(13, 12, 6), uint16] */;
    %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %549 = cast(%546, dtype="uint16") /* ty=Tensor[(13, 12, 6), uint16] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%549, %550) /* ty=Tensor[(13, 12, 6), uint16] */
  };
  %551() /* ty=Tensor[(13, 12, 6), uint16] */
}

def @func_3850() -> (Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) {
  @func_3848() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) */
}

def @func_8419() -> (Tensor[(4, 12, 15), float32],) {
  @func_8417() /* ty=(Tensor[(4, 12, 15), float32],) */
}

def @func_5702() -> Tensor[(13, 12, 6), bool] {
  %553 = fn () -> Tensor[(13, 12, 6), bool] {
    %552 = @func_5232() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %552.0
  };
  %553() /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_4803() -> (Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) {
  @func_4801() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) */
}

def @func_2698(%var_2696: Tensor[(13, 15, 3), float32], %var_2697: Tensor[(5, 66), uint8]) -> (Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) {
  %572 = fn (%var_2656: Tensor[(13, 15, 3), float32], %var_2690: Tensor[(5, 66), uint8]) -> (Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) {
    %554 = cast(%var_2656, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
    %555 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(13, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %558 = cast(%var_2656, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
    %559 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1920), float64] */, dtype="float64") /* ty=Tensor[(1, 1920), float64] */;
    %560 = reshape(%559, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
    %561 = @func_2314() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), bool]) */;
    %562 = cast(%var_2690, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
    %563 = reshape(%562, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
    %564 = @func_861(%563) /* ty=(Tensor[(11, 3, 10), float64],) */;
    %565 = floor_divide(%556, %557) /* ty=Tensor[(13, 15, 3), float32] */;
    %566 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
    %567 = cos(%558) /* ty=Tensor[(13, 15, 3), float32] */;
    %568 = @func_2482() /* ty=Tensor[(13, 12, 6), bool] */;
    %569 = @func_807(%560) /* ty=Tensor[(10, 12, 16), float64] */;
    %570 = %561.2;
    %571 = %564.0;
    (%565, %566, %567, %568, %569, meta[relay.Constant][40] /* ty=Tensor[(1, 1920), float64] */, %570, %571, %var_2690)
  };
  %572(%var_2696, %var_2697) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) */
}

def @func_6518() -> Tensor[(13, 12, 6), float64] {
  %574 = fn () -> Tensor[(13, 12, 6), float64] {
    %573 = @func_6400() /* ty=(Tensor[(13, 12, 6), float64],) */;
    %573.0
  };
  %574() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_3308(%var_3277: Tensor[(2, 300), float64], %var_3278: Tensor[(65), int64], %var_3279: Tensor[(325), int64], %var_3280: uint16, %var_3286: Tensor[(1, 264), float32], %var_3287: Tensor[(975), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 300), float64], Tensor[(325), int64], Tensor[(13, 12, 6), uint8], Tensor[(1, 264), float32], Tensor[(975), uint16], Tensor[(65), bool]) {
  %575 = cast(%var_3277, dtype="float64") /* ty=Tensor[(2, 300), float64] */;
  %576 = cast(%var_3278, dtype="int64") /* ty=Tensor[(65), int64] */;
  %577 = cast(%var_3279, dtype="int64") /* ty=Tensor[(325), int64] */;
  %578 = cast(%var_3280, dtype="uint16") /* ty=uint16 */;
  %579 = reshape(%575, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float64] */;
  %580 = reshape(%576, newshape=[65]) /* ty=Tensor[(65), int64] */;
  %581 = reshape(%577, newshape=[65, 5]) /* ty=Tensor[(65, 5), int64] */;
  %582 = reshape(%578, newshape=[]) /* ty=uint16 */;
  %583 = @func_1049(%579, %580, %581, %582) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8], Tensor[(5, 12, 10), uint32], Tensor[(11, 3, 10), float64], Tensor[(1, 9, 9), float32], Tensor[(65), int64], Tensor[(65, 5), int64], Tensor[(11, 3, 10), float64], Tensor[(325), int64], uint16, Tensor[(10, 12, 16), float64], Tensor[(1920), float64], Tensor[(65, 15), float32]) */;
  %584 = cast(%var_3286, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %585 = cast(%var_3287, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %586 = reshape(%584, newshape=[3, 88]) /* ty=Tensor[(3, 88), float32] */;
  %587 = reshape(%585, newshape=[5, 195]) /* ty=Tensor[(5, 195), uint16] */;
  %588 = @func_1596(%586, %587) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(6, 2, 5), bool], Tensor[(3, 88), float32], Tensor[(60), uint16], Tensor[(5, 195), uint16]) */;
  %589 = cast(%var_3278, dtype="bool") /* ty=Tensor[(65), bool] */;
  %590 = cast(%var_3280, dtype="bool") /* ty=bool */;
  %591 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
  %592 = %583.10;
  %593 = %588.0;
  %594 = logical_and(%589, %590) /* ty=Tensor[(65), bool] */;
  (%591, %592, %var_3277, %var_3279, %593, %var_3286, %var_3287, %594)
}

def @func_4962() -> Tensor[(4, 12, 15), float32] {
  @func_2095() /* ty=Tensor[(4, 12, 15), float32] */
}

def @func_1365(%var_1363: Tensor[(6, 2, 5), uint16]) -> (Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) {
  @func_1362(%var_1363) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */
}

def @func_6977(%var_6972: Tensor[(2, 5, 4), float32], %var_6973: Tensor[(600), float64], %var_6974: Tensor[(65), int64], %var_6975: Tensor[(325), int64], %var_6976: Tensor[(448), float32]) -> (Tensor[(2, 5, 4), float32], Tensor[(2, 5, 4), int32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(13, 12, 6), uint16], Tensor[(448), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16], Tensor[(1920), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16]) {
  @func_6970(%var_6972, %var_6973, %var_6974, %var_6975, %var_6976) /* ty=(Tensor[(2, 5, 4), float32], Tensor[(2, 5, 4), int32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(13, 12, 6), uint16], Tensor[(448), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16], Tensor[(1920), float32], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), uint16]) */
}

def @func_8832(%var_8814: Tensor[(6, 16, 6), float32]) -> (Tensor[(6, 16, 6), float32], Tensor[(6, 16, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  %595 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 6), float32] */;
  %596 = cast(%var_8814, dtype="float32") /* ty=Tensor[(6, 16, 6), float32] */;
  %597 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(6, 16, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 6), float32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %600 = cast(meta[relay.Constant][42] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %601 = reshape(%600, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
  %602 = @func_8710(%601) /* ty=(Tensor[(10, 12, 16), uint64], Tensor[(10, 12, 16), float64]) */;
  %603 = log(%595) /* ty=Tensor[(6, 16, 6), float32] */;
  %604 = maximum(%598, %599) /* ty=Tensor[(6, 16, 6), float32] */;
  %605 = %602.1;
  (%603, %604, %605, meta[relay.Constant][42] /* ty=Tensor[(1920), float64] */)
}

def @func_7964() -> Tensor[(13, 12, 6), uint16] {
  @func_7962() /* ty=Tensor[(13, 12, 6), uint16] */
}

def @func_4736() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(330), uint8], Tensor[(?, 585), bool], Tensor[(?, 585), float32], Tensor[(1, 585), float64], Tensor[(13, 12, 6), uint8]) {
  %606 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %608 = reshape(%607, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
  %609 = @func_3354(%608) /* ty=(Tensor[(13, 12, 6), uint64],) */;
  %610 = cast(meta[relay.Constant][43] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
  %611 = reshape(%610, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), float64] */;
  %612 = @func_4068(%611) /* ty=(Tensor[(1, 5, 1), float64],) */;
  %613 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %614 = cast(meta[relay.Constant][44] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %615 = reshape(%613, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
  %616 = reshape(%614, newshape=[5, 66]) /* ty=Tensor[(5, 66), uint8] */;
  %617 = @func_2695(%615, %616) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) */;
  %618 = %617.2;
  %619 = cast(%618, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %620 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(1, 585), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %621 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 585), float32] */, dtype="bool") /* ty=Tensor[(1, 585), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %623 = less_equal(%621, %622) /* ty=Tensor[(?, 585), bool] */;
  %624 = cast(%618, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(2), int32] */;
  %626 = cast(%623, dtype="bool") /* ty=Tensor[(?, 585), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %628 = cast(%623, dtype="float32") /* ty=Tensor[(?, 585), float32] */;
  %629 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(1, 585), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %630 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %632 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 585), float32] */, dtype="float32") /* ty=Tensor[(1, 585), float32] */;
  %633 = asin(%632) /* ty=Tensor[(1, 585), float32] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(1, 585), float64] */;
  %635 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %636 = %609.0;
  %637 = %612.0;
  %638 = less(%626, %627) /* ty=Tensor[(?, 585), bool] */;
  %639 = divide(%630, %631) /* ty=Tensor[(?, 585), float32] */;
  %640 = erf(%634) /* ty=Tensor[(1, 585), float64] */;
  %641 = %635.0;
  (%606, %636, %637, meta[relay.Constant][43] /* ty=Tensor[(5), float64] */, meta[relay.Constant][44] /* ty=Tensor[(330), uint8] */, %638, %639, %640, %641)
}

def @func_3337() -> Tensor[(13, 12, 6), uint16] {
  @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */
}

def @func_4738() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(330), uint8], Tensor[(?, 585), bool], Tensor[(?, 585), float32], Tensor[(1, 585), float64], Tensor[(13, 12, 6), uint8]) {
  @func_4736() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(330), uint8], Tensor[(?, 585), bool], Tensor[(?, 585), float32], Tensor[(1, 585), float64], Tensor[(13, 12, 6), uint8]) */
}

def @func_7502() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  %642 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %643 = @func_6217() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(3, 6, 2), float32]) */;
  %644 = cast(meta[relay.Constant][46] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %645 = reshape(%644, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float64] */;
  %646 = %642.0;
  %647 = @func_3134() /* ty=Tensor[(13, 12, 6), float64] */;
  %648 = %643.1;
  %649 = @func_807(%645) /* ty=Tensor[(10, 12, 16), float64] */;
  (%646, %647, %648, %649, meta[relay.Constant][46] /* ty=Tensor[(1920), float64] */)
}

def @func_9558() -> Tensor[(13, 12, 6), float64] {
  %650 = fn () -> Tensor[(13, 12, 6), float64] {
    @func_2247() /* ty=Tensor[(13, 12, 6), float64] */
  };
  %650() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_2721() -> Tensor[(13, 12, 6), float64] {
  @func_2719() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_6218() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(3, 6, 2), float32]) {
  %669 = fn () -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(3, 6, 2), float32]) {
    %651 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %652 = @func_5232() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %653 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 6, 2), float64] */;
    %654 = cosh(%653) /* ty=Tensor[(3, 6, 2), float64] */;
    %655 = cast(%654, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
    %656 = asinh(%655) /* ty=Tensor[(3, 6, 2), float32] */;
    %657 = cast(%654, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
    %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
    %659 = cast(%656, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %661 = floor_mod(%659, %660) /* ty=Tensor[(3, 6, 2), float32] */;
    %662 = cast(%654, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="float32") /* ty=Tensor[(3, 6, 2), float32] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %666 = %651.0;
    %667 = %652.0;
    %668 = floor_divide(%664, %665) /* ty=Tensor[(3, 6, 2), float32] */;
    (%666, %667, %668)
  };
  %669() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(3, 6, 2), float32]) */
}

def @func_2985() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
  %675 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) {
    %670 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %671 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %672 = %670.1;
    %673 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
    %674 = %671.0;
    (%672, %673, %674)
  };
  %675() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */
}

def @func_861(%var_851: Tensor[(11, 3, 10), uint8]) -> (Tensor[(11, 3, 10), float64],) {
  %676 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 3, 10), uint8] */, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %677 = shape_of(%var_851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_851, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = greater_equal(%678, %679) /* ty=Tensor[(11, 3, 10), bool] */;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %682 = sinh(%681) /* ty=Tensor[(11, 3, 10), float64] */;
  (%682,)
}

def @func_8391(%var_8390: Tensor[(60), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float32]) {
  %696 = fn (%var_8365: Tensor[(60), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float32]) {
    %683 = @func_6593() /* ty=(Tensor[(13, 12, 6), uint16],) */;
    %684 = cast(%var_8365, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %685 = reshape(%684, newshape=[60]) /* ty=Tensor[(60), uint16] */;
    %686 = @func_5886(%685) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64]) */;
    %687 = %683.0;
    %688 = cast(%687, dtype="uint8") /* ty=Tensor[(13, 12, 6), uint8] */;
    %689 = reshape(%688, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), uint8] */;
    %690 = @func_1416(%689) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
    %691 = @func_3169() /* ty=(Tensor[(13, 12, 6), float32],) */;
    %692 = @func_6517() /* ty=Tensor[(13, 12, 6), float64] */;
    %693 = %686.0;
    %694 = %690.0;
    %695 = %691.0;
    (%692, %687, %693, %var_8365, %694, %695)
  };
  %696(%var_8390) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(60), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float32]) */
}

def @func_4417(%var_4413: Tensor[(60), uint16], %var_4414: Tensor[(975, 1), uint16], %var_4415: Tensor[(1, 65), int64], %var_4416: Tensor[(585), float32]) -> (Tensor[(13, 12, 6), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(81), float32], Tensor[(264), float32], Tensor[(60), uint16], Tensor[(975, 1), uint16], Tensor[(325), bool], Tensor[(1, 65), int64], uint16, Tensor[(13, 15, 3), float32], Tensor[(585), float32], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) {
  %726 = fn (%var_4385: Tensor[(60), uint16], %var_4386: Tensor[(975, 1), uint16], %var_4390: Tensor[(1, 65), int64], %var_4398: Tensor[(585), float32]) -> (Tensor[(13, 12, 6), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(81), float32], Tensor[(264), float32], Tensor[(60), uint16], Tensor[(975, 1), uint16], Tensor[(325), bool], Tensor[(1, 65), int64], uint16, Tensor[(13, 15, 3), float32], Tensor[(585), float32], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) {
    %697 = @func_3169() /* ty=(Tensor[(13, 12, 6), float32],) */;
    %698 = %697.0;
    %699 = cast(%698, dtype="bool") /* ty=Tensor[(13, 12, 6), bool] */;
    %700 = reshape(%699, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), bool] */;
    %701 = @func_4220(%700) /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %702 = @func_3109() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) */;
    %703 = cast(meta[relay.Constant][49] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %704 = cast(%var_4385, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %705 = cast(%var_4386, dtype="uint16") /* ty=Tensor[(975, 1), uint16] */;
    %706 = reshape(%703, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), float32] */;
    %707 = reshape(%704, newshape=[60]) /* ty=Tensor[(60), uint16] */;
    %708 = reshape(%705, newshape=[975]) /* ty=Tensor[(975), uint16] */;
    %709 = @func_1482(%706, %707, %708) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) */;
    %710 = cast(%var_4390, dtype="int64") /* ty=Tensor[(1, 65), int64] */;
    %711 = cast(meta[relay.Constant][50] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %712 = reshape(%710, newshape=[65]) /* ty=Tensor[(65), int64] */;
    %713 = reshape(%711, newshape=[]) /* ty=uint16 */;
    %714 = @func_2911(%712, %713) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(1, 9, 9), float32], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), bool]) */;
    %715 = cast(%var_4398, dtype="float32") /* ty=Tensor[(585), float32] */;
    %716 = cast(meta[relay.Constant][51] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
    %717 = reshape(%715, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
    %718 = reshape(%716, newshape=[5, 66]) /* ty=Tensor[(5, 66), uint8] */;
    %719 = @func_2695(%717, %718) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(13, 15, 3), float32], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1, 1920), float64], Tensor[(13, 12, 6), bool], Tensor[(11, 3, 10), float64], Tensor[(5, 66), uint8]) */;
    %720 = %701.0;
    %721 = %702.0;
    %722 = %709.8;
    %723 = %714.4;
    %724 = %719.2;
    %725 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
    (%698, %720, %721, %722, meta[relay.Constant][49] /* ty=Tensor[(264), float32] */, %var_4385, %var_4386, %723, %var_4390, meta[relay.Constant][50] /* ty=uint16 */, %724, %var_4398, meta[relay.Constant][51] /* ty=Tensor[(330), uint8] */, %725)
  };
  %726(%var_4413, %var_4414, %var_4415, %var_4416) /* ty=(Tensor[(13, 12, 6), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(81), float32], Tensor[(264), float32], Tensor[(60), uint16], Tensor[(975, 1), uint16], Tensor[(325), bool], Tensor[(1, 65), int64], uint16, Tensor[(13, 15, 3), float32], Tensor[(585), float32], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) */
}

def @func_2229(%var_2228: Tensor[(165, 2), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) {
  %733 = fn (%var_2223: Tensor[(165, 2), uint8]) -> (Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) {
    %727 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
    %728 = cast(%var_2223, dtype="uint8") /* ty=Tensor[(165, 2), uint8] */;
    %729 = reshape(%728, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), uint8] */;
    %730 = @func_861(%729) /* ty=(Tensor[(11, 3, 10), float64],) */;
    %731 = %727.0;
    %732 = %730.0;
    (%731, %732, %var_2223)
  };
  %733(%var_2228) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */
}

def @func_4926() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) {
  %734 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %735 = @func_2828() /* ty=Tensor[(13, 12, 6), float64] */;
  %736 = %734.0;
  (%735, %736)
}

def @func_3485() -> (Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) {
  @func_3483() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) */
}

def @func_3111() -> (Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) {
  @func_3109() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) */
}

def @func_4312(%var_4311: Tensor[(1, 4, 1), float32]) -> (Tensor[(1, 4, 1), float32], uint16, Tensor[(6, 44), float32], Tensor[(60, 1), uint16], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(15, 4, 11), bool], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
  %764 = fn (%var_4258: Tensor[(1, 4, 1), float32]) -> (Tensor[(1, 4, 1), float32], uint16, Tensor[(6, 44), float32], Tensor[(60, 1), uint16], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(15, 4, 11), bool], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
    %737 = cast(%var_4258, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
    %738 = log10(%737) /* ty=Tensor[(1, 4, 1), float32] */;
    %739 = cast(%738, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
    %740 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 44), float32] */, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
    %741 = cast(meta[relay.Constant][53] /* ty=Tensor[(60, 1), uint16] */, dtype="uint16") /* ty=Tensor[(60, 1), uint16] */;
    %742 = cast(meta[relay.Constant][54] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %743 = reshape(%740, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), float32] */;
    %744 = reshape(%741, newshape=[60]) /* ty=Tensor[(60), uint16] */;
    %745 = reshape(%742, newshape=[975]) /* ty=Tensor[(975), uint16] */;
    %746 = @func_1482(%743, %744, %745) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(6, 2, 5), bool], Tensor[(60), uint16], Tensor[(13, 12, 6), uint8], Tensor[(13, 5, 5), int64], uint16, Tensor[(975), uint16], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(1, 9, 9), float32], Tensor[(1, 9, 9), float32], Tensor[(13, 12, 3), float64], Tensor[(468), float64]) */;
    %747 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
    %748 = cast(meta[relay.Constant][55] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
    %749 = reshape(%748, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), float64] */;
    %750 = @func_4068(%749) /* ty=(Tensor[(1, 5, 1), float64],) */;
    %751 = cast(%738, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
    %752 = cast(meta[relay.Constant][56] /* ty=Tensor[(15, 4, 11), float32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
    %753 = @func_3233() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %754 = @func_2110() /* ty=(Tensor[(13, 12, 6), uint16],) */;
    %755 = acos(%739) /* ty=Tensor[(1, 4, 1), float32] */;
    %756 = %746.5;
    %757 = %747.0;
    %758 = %750.0;
    %759 = not_equal(%751, %752) /* ty=Tensor[(15, 4, 11), bool] */;
    %760 = %753.0;
    %761 = %754.0;
    %762 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
    %763 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
    (%755, %756, meta[relay.Constant][52] /* ty=Tensor[(6, 44), float32] */, meta[relay.Constant][53] /* ty=Tensor[(60, 1), uint16] */, meta[relay.Constant][54] /* ty=Tensor[(975), uint16] */, %757, %758, meta[relay.Constant][55] /* ty=Tensor[(5), float64] */, %759, %760, %761, %762, %763)
  };
  %764(%var_4311) /* ty=(Tensor[(1, 4, 1), float32], uint16, Tensor[(6, 44), float32], Tensor[(60, 1), uint16], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(15, 4, 11), bool], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */
}

def @func_9382() -> Tensor[(13, 12, 6), bool] {
  @func_9380() /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_2776() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */
}

def @func_1708() -> Tensor[(13, 12, 6), bool] {
  @func_1706() /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_8712(%var_8711: Tensor[(10, 12, 16), float64]) -> (Tensor[(10, 12, 16), uint64], Tensor[(10, 12, 16), float64]) {
  %774 = fn (%var_8659: Tensor[(10, 12, 16), float64]) -> (Tensor[(10, 12, 16), uint64], Tensor[(10, 12, 16), float64]) {
    %765 = @func_7502() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) */;
    %766 = %765.3;
    %767 = cast(%var_8659, dtype="uint64") /* ty=Tensor[(10, 12, 16), uint64] */;
    %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%766, dtype="uint64") /* ty=Tensor[(10, 12, 16), uint64] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %771 = cast(%var_8659, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
    %772 = right_shift(%769, %770) /* ty=Tensor[(10, 12, 16), uint64] */;
    %773 = log(%771) /* ty=Tensor[(10, 12, 16), float64] */;
    (%772, %773)
  };
  %774(%var_8711) /* ty=(Tensor[(10, 12, 16), uint64], Tensor[(10, 12, 16), float64]) */
}

def @func_3135() -> Tensor[(13, 12, 6), float64] {
  %776 = fn () -> Tensor[(13, 12, 6), float64] {
    %775 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
    %775.0
  };
  %776() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_5797() -> (Tensor[(13, 12, 6), float64], Tensor[(330), uint8]) {
  %777 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %778 = @func_3848() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(11, 3, 10), float64], Tensor[(330), uint8], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32]) */;
  %779 = %777.0;
  %780 = %778.2;
  (%779, %780)
}

def @func_8496() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
  %784 = fn () -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) {
    %781 = @func_4252() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) */;
    %782 = %781.0;
    %783 = @func_6284() /* ty=Tensor[(13, 12, 6), float64] */;
    (%782, %783)
  };
  %784() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */
}

def @func_3109() -> (Tensor[(13, 12, 6), uint8], Tensor[(1, 9, 9), float32], Tensor[(81), float32], Tensor[(13, 12, 6), uint16]) {
  %785 = cast(meta[relay.Constant][57] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %786 = reshape(%785, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
  %787 = cast(meta[relay.Constant][57] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %788 = @func_2815() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %789 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
  %790 = @func_183(%786) /* ty=Tensor[(1, 9, 9), float32] */;
  %791 = atanh(%787) /* ty=Tensor[(81), float32] */;
  %792 = %788.0;
  (%789, %790, %791, %792)
}

def @func_4882() -> (Tensor[(13, 12, 6), float64],) {
  %793 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %794 = %793.0;
  (%794,)
}

def @func_186(%var_184: Tensor[(1, 9, 9), float32]) -> Tensor[(1, 9, 9), float32] {
  @func_183(%var_184) /* ty=Tensor[(1, 9, 9), float32] */
}

def @func_6346(%var_6334: Tensor[(11, 3, 10), float64]) -> (Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(13, 12, 6), uint16]) {
  %795 = @func_3483() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) */;
  %796 = %795.1;
  %797 = cast(%var_6334, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %798 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%796, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %801 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
  %802 = floor_mod(%799, %800) /* ty=Tensor[(11, 3, 10), float64] */;
  %803 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
  (%801, %802, %803)
}

def @func_6594() -> (Tensor[(13, 12, 6), uint16],) {
  %806 = fn () -> (Tensor[(13, 12, 6), uint16],) {
    %804 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
    %805 = %804.0;
    (%805,)
  };
  %806() /* ty=(Tensor[(13, 12, 6), uint16],) */
}

def @func_1286() -> Tensor[(13, 12, 6), uint8] {
  %808 = fn () -> Tensor[(13, 12, 6), uint8] {
    %807 = @func_1279() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %807.0
  };
  %808() /* ty=Tensor[(13, 12, 6), uint8] */
}

def @func_341(%var_339: Tensor[(13, 1, 5), int64], %var_340: Tensor[(13, 5, 5), int64]) -> (Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) {
  @func_337(%var_339, %var_340) /* ty=(Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) */
}

def @func_4068(%var_4064: Tensor[(1, 5, 1), float64]) -> (Tensor[(1, 5, 1), float64],) {
  %809 = cast(%var_4064, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
  %810 = acos(%809) /* ty=Tensor[(1, 5, 1), float64] */;
  (%810,)
}

def @func_7504() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) {
  @func_7502() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool], Tensor[(10, 12, 16), float64], Tensor[(1920), float64]) */
}

def @func_5888(%var_5887: Tensor[(60), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64]) {
  %819 = fn (%var_5866: Tensor[(60), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64]) {
    %811 = cast(%var_5866, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %812 = reshape(%811, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), uint16] */;
    %813 = @func_1362(%812) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(6, 2, 5), uint16]) */;
    %814 = @func_3483() /* ty=(Tensor[(4, 12, 15), float32], Tensor[(11, 3, 10), float64], Tensor[(330), uint8]) */;
    %815 = @func_5302() /* ty=Tensor[(13, 12, 6), float64] */;
    %816 = %813.1;
    %817 = %814.0;
    %818 = @func_4760() /* ty=Tensor[(13, 12, 6), float64] */;
    (%815, %816, %var_5866, %817, %818)
  };
  %819(%var_5887) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(6, 2, 5), uint16], Tensor[(60), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), float64]) */
}

def @func_7011(%var_7009: Tensor[(5), float64]) -> (Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  @func_7008(%var_7009) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */
}

def @func_4252() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) {
  %820 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %821 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %822 = %820.1;
  %823 = %821.0;
  (%822, %823)
}

def @func_6568() -> (Tensor[(4, 12, 15), uint16], Tensor[(13, 12, 6), uint64], Tensor[(936), float64]) {
  %835 = fn () -> (Tensor[(4, 12, 15), uint16], Tensor[(13, 12, 6), uint64], Tensor[(936), float64]) {
    %824 = @func_6366() /* ty=(Tensor[(4, 12, 15), float32],) */;
    %825 = %824.0;
    %826 = cast(meta[relay.Constant][58] /* ty=Tensor[(4, 12, 15), float32] */, dtype="uint16") /* ty=Tensor[(4, 12, 15), uint16] */;
    %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%825, dtype="uint16") /* ty=Tensor[(4, 12, 15), uint16] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %830 = cast(meta[relay.Constant][59] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
    %831 = reshape(%830, newshape=[13, 12, 6]) /* ty=Tensor[(13, 12, 6), float64] */;
    %832 = @func_3354(%831) /* ty=(Tensor[(13, 12, 6), uint64],) */;
    %833 = maximum(%828, %829) /* ty=Tensor[(4, 12, 15), uint16] */;
    %834 = %832.0;
    (%833, %834, meta[relay.Constant][59] /* ty=Tensor[(936), float64] */)
  };
  %835() /* ty=(Tensor[(4, 12, 15), uint16], Tensor[(13, 12, 6), uint64], Tensor[(936), float64]) */
}

def @func_5597() -> (Tensor[(13, 12, 6), uint8],) {
  %836 = @func_4252() /* ty=(Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), uint8]) */;
  %837 = %836.1;
  (%837,)
}

def @func_3356(%var_3355: Tensor[(13, 12, 6), float64]) -> (Tensor[(13, 12, 6), uint64],) {
  %844 = fn (%var_3348: Tensor[(13, 12, 6), float64]) -> (Tensor[(13, 12, 6), uint64],) {
    %838 = @func_2828() /* ty=Tensor[(13, 12, 6), float64] */;
    %839 = cast(%var_3348, dtype="uint64") /* ty=Tensor[(13, 12, 6), uint64] */;
    %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
    %841 = cast(%838, dtype="uint64") /* ty=Tensor[(13, 12, 6), uint64] */;
    %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %843 = maximum(%841, %842) /* ty=Tensor[(13, 12, 6), uint64] */;
    (%843,)
  };
  %844(%var_3355) /* ty=(Tensor[(13, 12, 6), uint64],) */
}

def @func_864(%var_862: Tensor[(11, 3, 10), uint8]) -> (Tensor[(11, 3, 10), float64],) {
  @func_861(%var_862) /* ty=(Tensor[(11, 3, 10), float64],) */
}

def @func_4848() -> (Tensor[(13, 12, 6), float64],) {
  %846 = fn () -> (Tensor[(13, 12, 6), float64],) {
    %845 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
    (%845,)
  };
  %846() /* ty=(Tensor[(13, 12, 6), float64],) */
}

def @func_599(%var_539: uint16, %var_540: Tensor[(15, 13, 5), uint16]) -> (Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) {
  %847 = cast(%var_539, dtype="uint16") /* ty=uint16 */;
  %848 = cast(%var_540, dtype="uint16") /* ty=Tensor[(15, 13, 5), uint16] */;
  %849 = maximum(%847, %848) /* ty=Tensor[(15, 13, 5), uint16] */;
  %850 = cast(%849, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
  %851 = cast(%849, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
  %852 = shape_of(%var_540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_540, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %855 = power(%853, %854) /* ty=Tensor[(15, 13, 5), float32] */;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
  %857 = cast(meta[relay.Constant][60] /* ty=Tensor[(65), int64] */, dtype="int64") /* ty=Tensor[(65), int64] */;
  %858 = cast(meta[relay.Constant][61] /* ty=Tensor[(325), int64] */, dtype="int64") /* ty=Tensor[(325), int64] */;
  %859 = reshape(%857, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), int64] */;
  %860 = reshape(%858, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), int64] */;
  %861 = @func_337(%859, %860) /* ty=(Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) */;
  %862 = cast(%855, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
  %863 = tan(%850) /* ty=Tensor[(15, 13, 5), float64] */;
  %864 = sqrt(%856) /* ty=Tensor[(15, 13, 5), float64] */;
  %865 = %861.0;
  %866 = log2(%862) /* ty=Tensor[(15, 13, 5), float64] */;
  (%863, %864, %865, meta[relay.Constant][60] /* ty=Tensor[(65), int64] */, meta[relay.Constant][61] /* ty=Tensor[(325), int64] */, %866)
}

def @func_183(%var_174: Tensor[(1, 9, 9), float32]) -> Tensor[(1, 9, 9), float32] {
  %867 = cast(%var_174, dtype="float32") /* ty=Tensor[(1, 9, 9), float32] */;
  sigmoid(%867) /* ty=Tensor[(1, 9, 9), float32] */
}

def @func_6366() -> (Tensor[(4, 12, 15), float32],) {
  %868 = @func_4962() /* ty=Tensor[(4, 12, 15), float32] */;
  (%868,)
}

def @func_3626() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64]) {
  %872 = fn () -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64]) {
    %869 = @func_2774() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */;
    %870 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
    %871 = %869.1;
    (%870, %871)
  };
  %872() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), float64]) */
}

def @func_7563() -> Tensor[(13, 12, 6), bool] {
  %874 = fn () -> Tensor[(13, 12, 6), bool] {
    %873 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %873.0
  };
  %874() /* ty=Tensor[(13, 12, 6), bool] */
}

def @func_6102() -> (Tensor[(13, 12, 6), uint8],) {
  %876 = fn () -> (Tensor[(13, 12, 6), uint8],) {
    %875 = @func_5395() /* ty=Tensor[(13, 12, 6), uint8] */;
    (%875,)
  };
  %876() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_6457(%var_6455: Tensor[(165, 2), uint8]) -> (Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) {
  @func_6454(%var_6455) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */
}

def @func_3800(%var_3799: Tensor[(13, 4, 1), float32]) -> (Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) {
  %899 = fn (%var_3746: Tensor[(13, 4, 1), float32]) -> (Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) {
    %877 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %878 = cast(meta[relay.Constant][62] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %879 = reshape(%877, newshape=[]) /* ty=bool */;
    %880 = reshape(%878, newshape=[975]) /* ty=Tensor[(975), uint16] */;
    %881 = @func_2007(%879, %880) /* ty=(Tensor[(3, 88), float32], Tensor[(264), float32], Tensor[(975), uint16], Tensor[(9, 13, 1), float64]) */;
    %882 = cast(%var_3746, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
    %883 = exp(%882) /* ty=Tensor[(13, 4, 1), float32] */;
    %884 = cast(%883, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
    %885 = shape_of(%var_3746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %886 = cast(%var_3746, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
    %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %888 = logical_and(%886, %887) /* ty=Tensor[(13, 4, ?), bool] */;
    %889 = cast(%883, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
    %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %891 = cast(%888, dtype="float64") /* ty=Tensor[(13, 4, ?), float64] */;
    %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %893 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
    %894 = cast(%888, dtype="float64") /* ty=Tensor[(13, 4, ?), float64] */;
    %895 = %881.2;
    %896 = power(%891, %892) /* ty=Tensor[(13, 4, ?), float64] */;
    %897 = %893.1;
    %898 = asinh(%894) /* ty=Tensor[(13, 4, ?), float64] */;
    (%895, True /* ty=bool */, meta[relay.Constant][62] /* ty=Tensor[(975), uint16] */, %896, %897, %898)
  };
  %899(%var_3799) /* ty=(Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) */
}

def @func_7635() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) {
  %905 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) {
    %900 = @func_7595() /* ty=Tensor[(13, 12, 6), uint8] */;
    %901 = cast(%900, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
    %902 = @func_7178() /* ty=(Tensor[(13, 12, 6), bool],) */;
    %903 = log2(%901) /* ty=Tensor[(13, 12, 6), float64] */;
    %904 = %902.0;
    (%903, %904)
  };
  %905() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) */
}

def @func_7873() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) {
  %906 = @func_6400() /* ty=(Tensor[(13, 12, 6), float64],) */;
  %907 = @func_3464() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %908 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
  %909 = %906.0;
  %910 = %907.0;
  (%908, %909, %910)
}

def @func_3989() -> Tensor[(13, 12, 6), float64] {
  @func_3987() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_6285() -> Tensor[(13, 12, 6), float64] {
  %912 = fn () -> Tensor[(13, 12, 6), float64] {
    %911 = @func_4847() /* ty=(Tensor[(13, 12, 6), float64],) */;
    %911.0
  };
  %912() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_6424() -> (Tensor[(13, 12, 6), uint8],) {
  %913 = @func_3376() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %914 = %913.0;
  (%914,)
}

def @func_9304(%var_9271: Tensor[(9, 11, 15), float64]) -> (Tensor[(13, 12, 6), uint8], Tensor[(9, 11, 15), uint16]) {
  %915 = @func_2589() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %916 = cast(%var_9271, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %917 = exp(%916) /* ty=Tensor[(9, 11, 15), float64] */;
  %918 = cast(%var_9271, dtype="uint16") /* ty=Tensor[(9, 11, 15), uint16] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%917, dtype="uint16") /* ty=Tensor[(9, 11, 15), uint16] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %922 = %915.0;
  %923 = bitwise_and(%920, %921) /* ty=Tensor[(9, 11, 15), uint16] */;
  (%922, %923)
}

def @func_6080() -> (Tensor[(13, 12, 6), uint8],) {
  %926 = fn () -> (Tensor[(13, 12, 6), uint8],) {
    %924 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %925 = %924.0;
    (%925,)
  };
  %926() /* ty=(Tensor[(13, 12, 6), uint8],) */
}

def @func_5396() -> Tensor[(13, 12, 6), uint8] {
  %927 = fn () -> Tensor[(13, 12, 6), uint8] {
    @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */
  };
  %927() /* ty=Tensor[(13, 12, 6), uint8] */
}

def @func_5719(%var_5717: Tensor[(3, 11, 5), float64]) -> (Tensor[(3, 11, 5), float64],) {
  @func_5716(%var_5717) /* ty=(Tensor[(3, 11, 5), float64],) */
}

def @func_8633() -> (Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8], Tensor[(13, 12, 6), float64]) {
  %928 = @func_5797() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(330), uint8]) */;
  %929 = @func_8077() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */;
  %930 = @func_7138() /* ty=Tensor[(11, 11, 12), int64] */;
  %931 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
  %932 = %928.1;
  %933 = %929.2;
  (%930, %931, %932, %933)
}

def @func_7139() -> Tensor[(11, 11, 12), int64] {
  %935 = fn () -> Tensor[(11, 11, 12), int64] {
    %934 = @func_4801() /* ty=(Tensor[(11, 11, 12), int64], Tensor[(13, 12, 6), float64]) */;
    %934.0
  };
  %935() /* ty=Tensor[(11, 11, 12), int64] */
}

def @func_7757(%var_7753: Tensor[(65), int64], %var_7754: Tensor[(264, 1), float32], %var_7755: Tensor[(4), float32], %var_7756: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(65), bool], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(264, 1), float32], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(4), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8]) {
  %971 = fn (%var_7722: Tensor[(65), int64], %var_7725: Tensor[(264, 1), float32], %var_7736: Tensor[(4), float32], %var_7748: Tensor[(330), uint8]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(65), bool], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(264, 1), float32], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(4), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8]) {
    %936 = @func_4926() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */;
    %937 = @func_4882() /* ty=(Tensor[(13, 12, 6), float64],) */;
    %938 = cast(meta[relay.Constant][63] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
    %939 = cast(%var_7722, dtype="int64") /* ty=Tensor[(65), int64] */;
    %940 = cast(meta[relay.Constant][64] /* ty=Tensor[(325), int64] */, dtype="int64") /* ty=Tensor[(325), int64] */;
    %941 = cast(meta[relay.Constant][65] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %942 = cast(%var_7725, dtype="float32") /* ty=Tensor[(264, 1), float32] */;
    %943 = cast(meta[relay.Constant][66] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %944 = reshape(%938, newshape=[2, 300]) /* ty=Tensor[(2, 300), float64] */;
    %945 = reshape(%939, newshape=[65]) /* ty=Tensor[(65), int64] */;
    %946 = reshape(%940, newshape=[325]) /* ty=Tensor[(325), int64] */;
    %947 = reshape(%941, newshape=[]) /* ty=uint16 */;
    %948 = reshape(%942, newshape=[1, 264]) /* ty=Tensor[(1, 264), float32] */;
    %949 = reshape(%943, newshape=[975]) /* ty=Tensor[(975), uint16] */;
    %950 = @func_3308(%944, %945, %946, %947, %948, %949) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 300), float64], Tensor[(325), int64], Tensor[(13, 12, 6), uint8], Tensor[(1, 264), float32], Tensor[(975), uint16], Tensor[(65), bool]) */;
    %951 = cast(%var_7736, dtype="float32") /* ty=Tensor[(4), float32] */;
    %952 = reshape(%951, newshape=[1, 4, 1]) /* ty=Tensor[(1, 4, 1), float32] */;
    %953 = @func_4310(%952) /* ty=(Tensor[(1, 4, 1), float32], uint16, Tensor[(6, 44), float32], Tensor[(60, 1), uint16], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(1, 5, 1), float64], Tensor[(5), float64], Tensor[(15, 4, 11), bool], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64]) */;
    %954 = @func_3376() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %955 = cast(%var_7748, dtype="uint8") /* ty=Tensor[(330), uint8] */;
    %956 = cast(meta[relay.Constant][65] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %957 = cast(meta[relay.Constant][66] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %958 = reshape(%955, newshape=[330]) /* ty=Tensor[(330), uint8] */;
    %959 = reshape(%956, newshape=[]) /* ty=bool */;
    %960 = reshape(%957, newshape=[975, 1]) /* ty=Tensor[(975, 1), uint16] */;
    %961 = @func_5193(%958, %959, %960) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8], Tensor[(11, 11, 12), int64], Tensor[(9, 13, 1), float64], bool, Tensor[(975, 1), uint16], Tensor[(13, 12, 6), uint16]) */;
    %962 = %936.0;
    %963 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
    %964 = %937.0;
    %965 = @func_2719() /* ty=Tensor[(13, 12, 6), float64] */;
    %966 = %950.7;
    %967 = @func_3956() /* ty=Tensor[(13, 12, 6), float64] */;
    %968 = %953.5;
    %969 = %954.0;
    %970 = %961.9;
    (%962, %963, %964, %965, %966, meta[relay.Constant][63] /* ty=Tensor[(600), float64] */, %var_7722, meta[relay.Constant][64] /* ty=Tensor[(325), int64] */, meta[relay.Constant][65] /* ty=uint16 */, %var_7725, meta[relay.Constant][66] /* ty=Tensor[(975), uint16] */, %967, %968, %var_7736, %969, %970, %var_7748)
  };
  %971(%var_7753, %var_7754, %var_7755, %var_7756) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(65), bool], Tensor[(600), float64], Tensor[(65), int64], Tensor[(325), int64], uint16, Tensor[(264, 1), float32], Tensor[(975), uint16], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(4), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint16], Tensor[(330), uint8]) */
}

def @func_9342() -> (Tensor[(13, 12, 6), bool],) {
  %974 = fn () -> (Tensor[(13, 12, 6), bool],) {
    %972 = @func_8524() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
    %973 = %972.1;
    (%973,)
  };
  %974() /* ty=(Tensor[(13, 12, 6), bool],) */
}

def @func_3235() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) {
  @func_3233() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64]) */
}

def @func_6349(%var_6347: Tensor[(11, 3, 10), float64]) -> (Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(13, 12, 6), uint16]) {
  @func_6346(%var_6347) /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(11, 3, 10), float64], Tensor[(13, 12, 6), uint16]) */
}

def @func_5758() -> (Tensor[(4, 12, 15), bool], Tensor[(4, 12, 15), uint64]) {
  %987 = fn () -> (Tensor[(4, 12, 15), bool], Tensor[(4, 12, 15), uint64]) {
    %975 = @func_2141() /* ty=(Tensor[(4, 12, 15), float32],) */;
    %976 = %975.0;
    %977 = cast(meta[relay.Constant][67] /* ty=Tensor[(4, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
    %978 = shape_of(%976, dtype="int32") /* ty=Tensor[(3), int32] */;
    %979 = cast(%976, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
    %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %981 = cast(meta[relay.Constant][67] /* ty=Tensor[(4, 12, 15), float32] */, dtype="uint64") /* ty=Tensor[(4, 12, 15), uint64] */;
    %982 = shape_of(%976, dtype="int32") /* ty=Tensor[(3), int32] */;
    %983 = cast(%976, dtype="uint64") /* ty=Tensor[(4, 12, 15), uint64] */;
    %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %985 = logical_and(%979, %980) /* ty=Tensor[(4, 12, 15), bool] */;
    %986 = add(%983, %984) /* ty=Tensor[(4, 12, 15), uint64] */;
    (%985, %986)
  };
  %987() /* ty=(Tensor[(4, 12, 15), bool], Tensor[(4, 12, 15), uint64]) */
}

def @func_9210() -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint16]) {
  %996 = fn () -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint16]) {
    %988 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
    %989 = cast(meta[relay.Constant][68] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
    %990 = reshape(%989, newshape=[165, 2]) /* ty=Tensor[(165, 2), uint8] */;
    %991 = @func_6454(%990) /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(11, 3, 10), float64], Tensor[(165, 2), uint8]) */;
    %992 = @func_4926() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */;
    %993 = %988.0;
    %994 = %991.0;
    %995 = %992.1;
    (%993, %994, meta[relay.Constant][68] /* ty=Tensor[(330), uint8] */, %995)
  };
  %996() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8], Tensor[(330), uint8], Tensor[(13, 12, 6), uint16]) */
}

def @func_7937() -> (Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), uint8]) {
  %997 = @func_2859() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */;
  %998 = @func_6424() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %999 = @func_4962() /* ty=Tensor[(4, 12, 15), float32] */;
  %1000 = %997.0;
  %1001 = %998.0;
  (%999, %1000, %1001)
}

def @func_9380() -> Tensor[(13, 12, 6), bool] {
  %1002 = @func_7178() /* ty=(Tensor[(13, 12, 6), bool],) */;
  %1002.0
}

def @func_5303() -> Tensor[(13, 12, 6), float64] {
  %1003 = fn () -> Tensor[(13, 12, 6), float64] {
    @func_2719() /* ty=Tensor[(13, 12, 6), float64] */
  };
  %1003() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_337(%var_327: Tensor[(13, 1, 5), int64], %var_328: Tensor[(13, 5, 5), int64]) -> (Tensor[(13, 5, 5), int64], Tensor[(1, 9, 9), float32], Tensor[(81), float32]) {
  %1004 = cast(%var_327, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
  %1005 = cast(%var_328, dtype="int64") /* ty=Tensor[(13, 5, 5), int64] */;
  %1006 = cast(meta[relay.Constant][69] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %1007 = reshape(%1006, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), float32] */;
  %1008 = bitwise_xor(%1004, %1005) /* ty=Tensor[(13, 5, 5), int64] */;
  %1009 = @func_183(%1007) /* ty=Tensor[(1, 9, 9), float32] */;
  (%1008, %1009, meta[relay.Constant][69] /* ty=Tensor[(81), float32] */)
}

def @func_2860() -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) {
  %1013 = fn () -> (Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) {
    %1010 = @func_1956() /* ty=(Tensor[(13, 12, 6), uint8],) */;
    %1011 = %1010.0;
    %1012 = @func_1706() /* ty=Tensor[(13, 12, 6), bool] */;
    (%1011, %1012)
  };
  %1013() /* ty=(Tensor[(13, 12, 6), uint8], Tensor[(13, 12, 6), bool]) */
}

def @func_9238() -> (Tensor[(13, 12, 6), float64],) {
  %1014 = @func_6384() /* ty=Tensor[(13, 12, 6), uint16] */;
  %1015 = cast(meta[relay.Constant][70] /* ty=Tensor[(13, 12, 6), uint16] */, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %1016 = shape_of(%1014, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1017 = cast(%1014, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
  %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1019 = mod(%1017, %1018) /* ty=Tensor[(13, 12, 6), float64] */;
  (%1019,)
}

def @func_603(%var_601: uint16, %var_602: Tensor[(15, 13, 5), uint16]) -> (Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) {
  @func_599(%var_601, %var_602) /* ty=(Tensor[(15, 13, 5), float64], Tensor[(15, 13, 5), float64], Tensor[(13, 5, 5), int64], Tensor[(65), int64], Tensor[(325), int64], Tensor[(15, 13, 5), float64]) */
}

def @func_8727() -> (Tensor[(13, 12, 6), uint8],) {
  %1020 = @func_6079() /* ty=(Tensor[(13, 12, 6), uint8],) */;
  %1021 = %1020.0;
  (%1021,)
}

def @func_9429() -> (Tensor[(13, 12, 6), bool], Tensor[(13, 12, 6), float64], Tensor[(3, 11, 5), float64], Tensor[(165, 1), float64]) {
  %1022 = @func_2984() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint8]) */;
  %1023 = cast(meta[relay.Constant][71] /* ty=Tensor[(165, 1), float64] */, dtype="float64") /* ty=Tensor[(165, 1), float64] */;
  %1024 = reshape(%1023, newshape=[3, 11, 5]) /* ty=Tensor[(3, 11, 5), float64] */;
  %1025 = @func_5716(%1024) /* ty=(Tensor[(3, 11, 5), float64],) */;
  %1026 = @func_9380() /* ty=Tensor[(13, 12, 6), bool] */;
  %1027 = %1022.1;
  %1028 = %1025.0;
  (%1026, %1027, %1028, meta[relay.Constant][71] /* ty=Tensor[(165, 1), float64] */)
}

def @func_3335() -> Tensor[(13, 12, 6), uint16] {
  %1029 = @func_2815() /* ty=(Tensor[(13, 12, 6), uint16],) */;
  %1029.0
}

def @func_1584(%var_1580: uint64, %var_1581: Tensor[(10, 15, 9), uint64], %var_1582: Tensor[(26), int64], %var_1583: Tensor[(390), int64]) -> (Tensor[(975), uint16], Tensor[(26), int64], Tensor[(390), int64], Tensor[(13, 12, 6), uint8], Tensor[(10, 15, 9), uint32]) {
  %1054 = fn (%var_1530: uint64, %var_1531: Tensor[(10, 15, 9), uint64], %var_1566: Tensor[(26), int64], %var_1567: Tensor[(390), int64]) -> (Tensor[(975), uint16], Tensor[(26), int64], Tensor[(390), int64], Tensor[(13, 12, 6), uint8], Tensor[(10, 15, 9), uint32]) {
    %1030 = cast(%var_1566, dtype="int64") /* ty=Tensor[(26), int64] */;
    %1031 = cast(%var_1567, dtype="int64") /* ty=Tensor[(390), int64] */;
    %1032 = cast(%var_1530, dtype="uint16") /* ty=uint16 */;
    %1033 = reshape(%1030, newshape=[1, 2, 13]) /* ty=Tensor[(1, 2, 13), int64] */;
    %1034 = reshape(%1031, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), int64] */;
    %1035 = reshape(%1032, newshape=[]) /* ty=uint16 */;
    %1036 = @func_1202(%1033, %1034, %1035) /* ty=(Tensor[(15, 2, 13), int64], Tensor[(15, 2, 13), bool], Tensor[(15, 2, 13), float64], Tensor[(325), int64], uint16, Tensor[(975), uint16]) */;
    %1037 = cast(%var_1531, dtype="float32") /* ty=Tensor[(10, 15, 9), float32] */;
    %1038 = rsqrt(%1037) /* ty=Tensor[(10, 15, 9), float32] */;
    %1039 = cast(%var_1530, dtype="uint64") /* ty=uint64 */;
    %1040 = cast(%var_1531, dtype="uint64") /* ty=Tensor[(10, 15, 9), uint64] */;
    %1041 = add(%1039, %1040) /* ty=Tensor[(10, 15, 9), uint64] */;
    %1042 = cast(%1041, dtype="uint8") /* ty=Tensor[(10, 15, 9), uint8] */;
    %1043 = shape_of(%1038, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1044 = cast(%1038, dtype="uint8") /* ty=Tensor[(10, 15, 9), uint8] */;
    %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1046 = bitwise_or(%1044, %1045) /* ty=Tensor[(10, 15, 9), uint8] */;
    %1047 = cast(%1046, dtype="uint32") /* ty=Tensor[(10, 15, 9), uint32] */;
    %1048 = shape_of(%1038, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1049 = cast(%1038, dtype="uint32") /* ty=Tensor[(10, 15, 9), uint32] */;
    %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1051 = %1036.5;
    %1052 = @func_1285() /* ty=Tensor[(13, 12, 6), uint8] */;
    %1053 = subtract(%1049, %1050) /* ty=Tensor[(10, 15, 9), uint32] */;
    (%1051, %var_1566, %var_1567, %1052, %1053)
  };
  %1054(%var_1580, %var_1581, %var_1582, %var_1583) /* ty=(Tensor[(975), uint16], Tensor[(26), int64], Tensor[(390), int64], Tensor[(13, 12, 6), uint8], Tensor[(10, 15, 9), uint32]) */
}

def @func_2316() -> (Tensor[(13, 12, 6), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), bool]) {
  @func_2314() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(4, 12, 15), float32], Tensor[(13, 12, 6), bool]) */
}

def @func_3316(%var_3310: Tensor[(2, 300), float64], %var_3311: Tensor[(65), int64], %var_3312: Tensor[(325), int64], %var_3313: uint16, %var_3314: Tensor[(1, 264), float32], %var_3315: Tensor[(975), uint16]) -> (Tensor[(13, 12, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 300), float64], Tensor[(325), int64], Tensor[(13, 12, 6), uint8], Tensor[(1, 264), float32], Tensor[(975), uint16], Tensor[(65), bool]) {
  @func_3308(%var_3310, %var_3311, %var_3312, %var_3313, %var_3314, %var_3315) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 300), float64], Tensor[(325), int64], Tensor[(13, 12, 6), uint8], Tensor[(1, 264), float32], Tensor[(975), uint16], Tensor[(65), bool]) */
}

def @func_6386() -> Tensor[(13, 12, 6), uint16] {
  @func_6384() /* ty=Tensor[(13, 12, 6), uint16] */
}

def @func_9532() -> Tensor[(13, 12, 6), float64] {
  %1056 = fn () -> Tensor[(13, 12, 6), float64] {
    %1055 = @func_4926() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16]) */;
    %1055.0
  };
  %1056() /* ty=Tensor[(13, 12, 6), float64] */
}

def @func_9497(%var_9496: Tensor[(11, 16, 16), int8]) -> (Tensor[(11, 16, 16), bool], Tensor[(13, 12, 6), uint16]) {
  %1064 = fn (%var_9483: Tensor[(11, 16, 16), int8]) -> (Tensor[(11, 16, 16), bool], Tensor[(13, 12, 6), uint16]) {
    %1057 = cast(%var_9483, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %1058 = shape_of(meta[relay.Constant][72] /* ty=Tensor[(11, 16, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1059 = cast(meta[relay.Constant][72] /* ty=Tensor[(11, 16, 16), int8] */, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1061 = @func_3690() /* ty=(Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), bool]) */;
    %1062 = greater(%1059, %1060) /* ty=Tensor[(11, 16, 16), bool] */;
    %1063 = %1061.0;
    (%1062, %1063)
  };
  %1064(%var_9496) /* ty=(Tensor[(11, 16, 16), bool], Tensor[(13, 12, 6), uint16]) */
}

def @func_9136(%var_9135: Tensor[(52), float32]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(52), float32], Tensor[(13, 12, 6), uint16], Tensor[(5), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(975), float32], Tensor[(11, 11, 12), int64]) {
  %1083 = fn (%var_9085: Tensor[(52), float32]) -> (Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(52), float32], Tensor[(13, 12, 6), uint16], Tensor[(5), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(975), float32], Tensor[(11, 11, 12), int64]) {
    %1065 = @func_7873() /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), bool]) */;
    %1066 = %1065.1;
    %1067 = cast(%1066, dtype="float64") /* ty=Tensor[(13, 12, 6), float64] */;
    %1068 = cast(meta[relay.Constant][73] /* ty=Tensor[(5), float64] */, dtype="float64") /* ty=Tensor[(5), float64] */;
    %1069 = reshape(%1068, newshape=[5]) /* ty=Tensor[(5), float64] */;
    %1070 = @func_9016(%1069) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), uint16], Tensor[(5), float64]) */;
    %1071 = cast(%var_9085, dtype="float32") /* ty=Tensor[(52), float32] */;
    %1072 = reshape(%1071, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), float32] */;
    %1073 = @func_3798(%1072) /* ty=(Tensor[(975), uint16], bool, Tensor[(975), uint16], Tensor[(13, 4, ?), float64], Tensor[(13, 12, 6), float64], Tensor[(13, 4, ?), float64]) */;
    %1074 = %1073.0;
    %1075 = cast(%1074, dtype="float32") /* ty=Tensor[(975), float32] */;
    %1076 = log(%1067) /* ty=Tensor[(13, 12, 6), float64] */;
    %1077 = @func_3987() /* ty=Tensor[(13, 12, 6), float64] */;
    %1078 = %1070.1;
    %1079 = @func_3335() /* ty=Tensor[(13, 12, 6), uint16] */;
    %1080 = @func_2247() /* ty=Tensor[(13, 12, 6), float64] */;
    %1081 = erf(%1075) /* ty=Tensor[(975), float32] */;
    %1082 = @func_7138() /* ty=Tensor[(11, 11, 12), int64] */;
    (%1076, %1077, %var_9085, %1078, meta[relay.Constant][73] /* ty=Tensor[(5), float64] */, %1079, %1080, %1081, %1082)
  };
  %1083(%var_9135) /* ty=(Tensor[(13, 12, 6), float64], Tensor[(13, 12, 6), float64], Tensor[(52), float32], Tensor[(13, 12, 6), uint16], Tensor[(5), float64], Tensor[(13, 12, 6), uint16], Tensor[(13, 12, 6), float64], Tensor[(975), float32], Tensor[(11, 11, 12), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen417/build/output.py:3059: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen417/build/output.py", line 3064, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_reshape_greater_kernel0(signed char* __restrict__ T_greater, int64_t* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1440) {
    T_greater[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = ((signed char)(((bool)placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]) < ((bool)placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])));
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

