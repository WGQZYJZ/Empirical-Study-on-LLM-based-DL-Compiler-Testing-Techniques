==========mod==========
#[version = "0.0.5"]
def @func_6867() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) {
  %0 = @func_6246() /* ty=(Tensor[(750), float64],) */;
  %1 = @func_1504() /* ty=Tensor[(13, 8, 16), float64] */;
  %2 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
  %3 = %0.0;
  (%1, %2, %3)
}

def @func_4457(%var_4430: bool, %var_4431: Tensor[(12, 9, 9), bool]) -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  %4 = cast(%var_4430, dtype="bool") /* ty=bool */;
  %5 = cast(%var_4431, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %6 = logical_or(%4, %5) /* ty=Tensor[(12, 9, 9), bool] */;
  %7 = cast(%var_4431, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = cast(%6, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %12 = less(%9, %10) /* ty=Tensor[(12, 9, 9), bool] */;
  %13 = atan(%11) /* ty=Tensor[(12, 9, 9), float64] */;
  (%12, %13)
}

def @func_1115() -> Tensor[(7, 10, 9), float64] {
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 9), float64] */;
  rsqrt(%14) /* ty=Tensor[(7, 10, 9), float64] */
}

def @func_6187() -> (Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], float64, Tensor[(2184), float64]) {
  %15 = cast(-9.41968f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %17 = reshape(%15, newshape=[]) /* ty=float64 */;
  %18 = reshape(%16, newshape=[2184, 1]) /* ty=Tensor[(2184, 1), float64] */;
  %19 = @func_1447(%17, %18) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) */;
  %20 = @func_1504() /* ty=Tensor[(13, 8, 16), float64] */;
  %21 = %19.5;
  (%20, %21, -9.41968f64 /* ty=float64 */, meta[relay.Constant][1] /* ty=Tensor[(2184), float64] */)
}

def @func_6331(%var_6327: Tensor[(448), int64]) -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64], Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], float64, Tensor[(2, 1092), float64]) {
  %22 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %23 = @func_4585() /* ty=(Tensor[(7, 10, 9), float64], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %24 = @func_6246() /* ty=(Tensor[(750), float64],) */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %26 = cast(%var_6327, dtype="int64") /* ty=Tensor[(448), int64] */;
  %27 = %24.0;
  %28 = cast(%27, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %29 = cast(-9.38155f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 1092), float64] */, dtype="float64") /* ty=Tensor[(2, 1092), float64] */;
  %31 = reshape(%25, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %32 = reshape(%26, newshape=[112, 4]) /* ty=Tensor[(112, 4), int64] */;
  %33 = reshape(%28, newshape=[5, 150]) /* ty=Tensor[(5, 150), uint8] */;
  %34 = reshape(%29, newshape=[]) /* ty=float64 */;
  %35 = reshape(%30, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %36 = @func_5918(%31, %32, %33, %34, %35) /* ty=(Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) */;
  %37 = %22.0;
  %38 = %23.3;
  %39 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %40 = %36.3;
  (%37, %38, %39, %27, %40, meta[relay.Constant][2] /* ty=Tensor[(32), float32] */, %var_6327, -9.38155f64 /* ty=float64 */, meta[relay.Constant][3] /* ty=Tensor[(2, 1092), float64] */)
}

def @func_1770(%var_1755: Tensor[(750), uint8]) -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) {
  %41 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %42 = @func_856() /* ty=(Tensor[(3, 9, 3), float32],) */;
  %43 = cast(%var_1755, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %44 = cast(%var_1755, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %45 = reshape(%43, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %46 = reshape(%44, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %47 = @func_81(%45, %46) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
  %48 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %49 = %41.1;
  %50 = %42.0;
  %51 = %47.1;
  %52 = %48.0;
  (%49, %50, %51, %var_1755, %52)
}

def @func_2937(%var_2933: Tensor[(7, 6, 1), float64]) -> Tensor[(7, 6, 1), float64] {
  %53 = cast(%var_2933, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  cos(%53) /* ty=Tensor[(7, 6, 1), float64] */
}

def @func_6988(%var_6967: Tensor[(5, 7, 7), uint16], %var_6968: Tensor[(5, 7, 7), uint16], %var_6985: Tensor[(448), int64]) -> (Tensor[(5, 7, 7), bool], Tensor[(4, 14, 8), bool], Tensor[(448), int64], Tensor[(750), uint8]) {
  %54 = cast(%var_6968, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %55 = shape_of(%var_6967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_6967, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %58 = cast(%var_6985, dtype="int64") /* ty=Tensor[(448), int64] */;
  %59 = cast(%var_6985, dtype="int64") /* ty=Tensor[(448), int64] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %61 = reshape(%58, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %62 = reshape(%59, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %63 = reshape(%60, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %64 = @func_772(%61, %62, %63) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
  %65 = less(%56, %57) /* ty=Tensor[(5, 7, 7), bool] */;
  %66 = %64.0;
  (%65, %66, %var_6985, meta[relay.Constant][4] /* ty=Tensor[(750), uint8] */)
}

def @func_1229() -> (Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) {
  %67 = @func_542() /* ty=Tensor[(13, 8, 16), float64] */;
  %68 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
  (%67, %68)
}

def @func_5561() -> Tensor[(13, 8, 16), float64] {
  %69 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
  %69.0
}

def @func_4585() -> (Tensor[(7, 10, 9), float64], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %70 = @func_2281() /* ty=(Tensor[(7, 10, 9), float64],) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(7, 10, 9), float32] */;
  %73 = sqrt(%72) /* ty=Tensor[(7, 10, 9), float32] */;
  %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 10, 9), float32] */, dtype="uint64") /* ty=Tensor[(7, 10, 9), uint64] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="uint64") /* ty=Tensor[(7, 10, 9), uint64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %78 = bitwise_xor(%76, %77) /* ty=Tensor[(7, 10, 9), uint64] */;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(7, 10, 9), float64] */;
  %80 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %81 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %82 = atanh(%79) /* ty=Tensor[(7, 10, 9), float64] */;
  %83 = %80.0;
  %84 = %81.1;
  %85 = @func_3060() /* ty=Tensor[(13, 8, 16), float64] */;
  (%82, %83, %84, %85)
}

def @func_5405(%var_5398: Tensor[(750), uint8]) -> (Tensor[(3, 9, 3), float64], Tensor[(750), uint8], Tensor[(750), uint8]) {
  %86 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %87 = cast(%var_5398, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %88 = reshape(%87, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %89 = @func_2638(%88) /* ty=(Tensor[(3, 9, 3), int8], Tensor[(448), int64], Tensor[(448), int64], Tensor[(750), uint8]) */;
  %90 = %86.0;
  %91 = %89.3;
  (%90, %91, %var_5398)
}

def @func_7040() -> (Tensor[(3, 9, 3), float32],) {
  %92 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %93 = %92.2;
  (%93,)
}

def @func_3737() -> Tensor[(13, 8, 16), float64] {
  %94 = @func_3703() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %94.0
}

def @func_6787() -> Tensor[(7, 10, 9), float64] {
  %95 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
  %95.1
}

def @func_4090() -> Tensor[(13, 8, 16), float64] {
  %96 = @func_3249() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %96.1
}

def @func_4886() -> Tensor[(7, 10, 9), float32] {
  %97 = @func_2281() /* ty=(Tensor[(7, 10, 9), float64],) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(7, 10, 9), float32] */;
  sin(%99) /* ty=Tensor[(7, 10, 9), float32] */
}

def @func_5237() -> (Tensor[(14, 15, 12), float64],) {
  %100 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %101 = %100.0;
  (%101,)
}

def @func_4712() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
  %102 = @func_833() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %103 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %104 = %102.0;
  %105 = %103.3;
  (%104, %105)
}

def @func_173() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %106 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  %107 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  (%106, %107)
}

def @func_1504() -> Tensor[(13, 8, 16), float64] {
  @func_61() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_5978() -> (Tensor[(13, 8, 16), float64],) {
  %108 = @func_3737() /* ty=Tensor[(13, 8, 16), float64] */;
  (%108,)
}

def @func_856() -> (Tensor[(3, 9, 3), float32],) {
  %109 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
  %110 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 3), float64] */, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %114 = divide(%112, %113) /* ty=Tensor[(3, 9, 3), float32] */;
  (%114,)
}

def @func_3388() -> Tensor[(13, 8, 16), float64] {
  %115 = @func_2908() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %115.0
}

def @func_2161() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) {
  %116 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %117 = @func_1691() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %118 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
  %121 = %116.0;
  %122 = %117.0;
  %123 = acos(%120) /* ty=Tensor[(3, 9, 3), float32] */;
  (%121, %122, %123)
}

def @func_1620(%var_1617: Tensor[(1, 4), float32]) -> (Tensor[(1, 4), float32],) {
  %124 = cast(%var_1617, dtype="float32") /* ty=Tensor[(1, 4), float32] */;
  %125 = log2(%124) /* ty=Tensor[(1, 4), float32] */;
  (%125,)
}

def @func_6959(%var_6940: float64) -> (Tensor[(6, 4, 10), float64], Tensor[(11, 4, 14), float64], float64, Tensor[(6, 4, 10), int8], Tensor[(13, 8, 16), float64]) {
  %126 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 10), float32] */;
  %127 = tan(%126) /* ty=Tensor[(6, 4, 10), float32] */;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %129 = cast(%var_6940, dtype="float64") /* ty=float64 */;
  %130 = reshape(%129, newshape=[]) /* ty=float64 */;
  %131 = @func_4021(%130) /* ty=(Tensor[(11, 4, 14), float64],) */;
  %132 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 4, 10), float32] */, dtype="uint8") /* ty=Tensor[(6, 4, 10), uint8] */;
  %133 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%127, dtype="uint8") /* ty=Tensor[(6, 4, 10), uint8] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %136 = right_shift(%134, %135) /* ty=Tensor[(6, 4, 10), uint8] */;
  %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 4, 10), uint8] */, dtype="int8") /* ty=Tensor[(6, 4, 10), int8] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="int8") /* ty=Tensor[(6, 4, 10), int8] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %141 = erf(%128) /* ty=Tensor[(6, 4, 10), float64] */;
  %142 = %131.0;
  %143 = multiply(%139, %140) /* ty=Tensor[(6, 4, 10), int8] */;
  %144 = @func_5641() /* ty=Tensor[(13, 8, 16), float64] */;
  (%141, %142, %var_6940, %143, %144)
}

def @func_689(%var_676: Tensor[(13, 8, 16), float64]) -> (Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) {
  %145 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %146 = %145.1;
  %147 = cast(%var_676, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 8, 16), float64] */, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %152 = shape_of(%var_676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%var_676, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %155 = greater(%149, %150) /* ty=Tensor[(13, 8, 16), bool] */;
  %156 = mod(%153, %154) /* ty=Tensor[(13, 8, 16), float32] */;
  (%155, %156)
}

def @func_1923() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool]) {
  %157 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %158 = @func_1484() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %161 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %162 = %157.0;
  %163 = cos(%160) /* ty=Tensor[(13, 8, 16), float64] */;
  %164 = %161.2;
  (%162, %163, %164)
}

def @func_5818(%var_5804: Tensor[(6, 11, 6), uint64]) -> (Tensor[(6, 11, 6), uint64], Tensor[(13, 8, 16), float64]) {
  %165 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 11, 6), uint64] */, dtype="uint64") /* ty=Tensor[(6, 11, 6), uint64] */;
  %166 = shape_of(%var_5804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_5804, dtype="uint64") /* ty=Tensor[(6, 11, 6), uint64] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %169 = @func_3380() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %170 = multiply(%167, %168) /* ty=Tensor[(6, 11, 6), uint64] */;
  %171 = %169.1;
  (%170, %171)
}

def @func_2336(%var_2327: Tensor[(5, 13, 2), uint8]) -> (Tensor[(5, 13, 2), uint8], Tensor[(5, 13, 2), float32], Tensor[(13, 8, 16), float64]) {
  %172 = cast(%var_2327, dtype="uint8") /* ty=Tensor[(5, 13, 2), uint8] */;
  %173 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 13, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 13, 2), uint8] */, dtype="uint8") /* ty=Tensor[(5, 13, 2), uint8] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %176 = cast(%var_2327, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  %177 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %178 = minimum(%174, %175) /* ty=Tensor[(5, 13, 2), uint8] */;
  %179 = sinh(%176) /* ty=Tensor[(5, 13, 2), float32] */;
  %180 = %177.1;
  (%178, %179, %180)
}

def @func_1078(%var_1062: Tensor[(448), int64], %var_1063: Tensor[(1, 750), uint8]) -> (Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) {
  %181 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %182 = cast(%var_1062, dtype="int64") /* ty=Tensor[(448), int64] */;
  %183 = cast(%var_1062, dtype="int64") /* ty=Tensor[(448), int64] */;
  %184 = cast(%var_1063, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
  %185 = reshape(%182, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %186 = reshape(%183, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %187 = reshape(%184, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %188 = @func_772(%185, %186, %187) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
  %189 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %190 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %191 = %181.0;
  %192 = %188.2;
  %193 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  %194 = %189.0;
  %195 = %190.0;
  (%191, %192, %var_1062, %var_1063, %193, %194, %195)
}

def @func_2638(%var_2626: Tensor[(750), uint8]) -> (Tensor[(3, 9, 3), int8], Tensor[(448), int64], Tensor[(448), int64], Tensor[(750), uint8]) {
  %196 = @func_1666() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %197 = %196.0;
  %198 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 9, 3), uint16] */, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = logical_and(%200, %201) /* ty=Tensor[(3, 9, 3), bool] */;
  %203 = cast(%202, dtype="int8") /* ty=Tensor[(3, 9, 3), int8] */;
  %204 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%197, dtype="int8") /* ty=Tensor[(3, 9, 3), int8] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %207 = cast(meta[relay.Constant][13] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %208 = cast(%var_2626, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %209 = reshape(%207, newshape=[448]) /* ty=Tensor[(448), int64] */;
  %210 = reshape(%208, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %211 = @func_1078(%209, %210) /* ty=(Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) */;
  %212 = left_shift(%205, %206) /* ty=Tensor[(3, 9, 3), int8] */;
  %213 = %211.2;
  (%212, %213, meta[relay.Constant][13] /* ty=Tensor[(448), int64] */, %var_2626)
}

def @func_804() -> (Tensor[(13, 8, 16), float64],) {
  %214 = @func_313() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %215 = %214.0;
  (%215,)
}

def @func_4596() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %216 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
  %217 = @func_3388() /* ty=Tensor[(13, 8, 16), float64] */;
  (%216, %217)
}

def @func_6881() -> (Tensor[(3, 9, 3), float64],) {
  %218 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %219 = %218.0;
  (%219,)
}

def @func_1868() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(7, 10, 9), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %220 = @func_313() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %221 = @func_335() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %222 = %221.2;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %224 = acosh(%223) /* ty=Tensor[(13, 8, 16), float32] */;
  %225 = cast(%224, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %226 = asinh(%225) /* ty=Tensor[(13, 8, 16), float32] */;
  %227 = cast(%224, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %231 = @func_1504() /* ty=Tensor[(13, 8, 16), float64] */;
  %232 = %220.1;
  %233 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
  %234 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
  %235 = power(%229, %230) /* ty=Tensor[(13, 8, 16), float64] */;
  %236 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  (%231, %232, %233, %234, %235, %236)
}

def @func_4221() -> (Tensor[(13, 8, 16), float64],) {
  %237 = @func_3249() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %238 = %237.1;
  (%238,)
}

def @func_3987() -> (Tensor[(14, 15, 12), float64],) {
  %239 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %240 = %239.0;
  (%240,)
}

def @func_6264() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %241 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %242 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  %243 = %241.0;
  (%242, %243)
}

def @func_833() -> (Tensor[(13, 8, 16), float64],) {
  %244 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  (%244,)
}

def @func_1484() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %245 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %246 = @func_335() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %247 = %245.0;
  %248 = %246.1;
  (%247, %248)
}

def @func_3554(%var_3528: Tensor[(13, 8, 16), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) {
  %249 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %250 = %249.0;
  %251 = cast(%var_3528, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %255 = @func_856() /* ty=(Tensor[(3, 9, 3), float32],) */;
  %256 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %257 = floor_divide(%253, %254) /* ty=Tensor[(13, 8, 16), float64] */;
  %258 = %255.0;
  %259 = %256.1;
  (%257, %258, %259)
}

def @func_215() -> Tensor[(13, 8, 16), float64] {
  @func_206() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2281() -> (Tensor[(7, 10, 9), float64],) {
  %260 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %261 = %260.3;
  (%261,)
}

def @func_5328(%var_5321: Tensor[(13, 8, 16), float64]) -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), int16]) {
  %262 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %263 = @func_3060() /* ty=Tensor[(13, 8, 16), float64] */;
  %264 = cast(%var_5321, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %268 = %262.4;
  %269 = minimum(%266, %267) /* ty=Tensor[(13, 8, 16), int16] */;
  (%268, %269)
}

def @func_4944() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %270 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %271 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %272 = %270.0;
  %273 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %274 = %271.1;
  (%272, %273, %274)
}

def @func_521() -> (Tensor[(13, 8, 16), float64],) {
  %275 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %276 = %275.0;
  (%276,)
}

def @func_5517(%var_5513: Tensor[(13, 14, 7), uint32]) -> (Tensor[(13, 14, 7), uint32],) {
  %277 = cast(%var_5513, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
  %278 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %281 = add(%279, %280) /* ty=Tensor[(13, 14, 7), uint32] */;
  (%281,)
}

def @func_206() -> Tensor[(13, 8, 16), float64] {
  %282 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %282.0
}

def @func_5284() -> Tensor[(750), uint8] {
  %283 = @func_4773() /* ty=(Tensor[(750), uint8],) */;
  %283.0
}

def @func_6710(%var_6702: Tensor[(972), bool]) -> (Tensor[(13, 8, 16), bool], Tensor[(12, 9, 9), bool], bool, Tensor[(972), float64]) {
  %284 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
  %285 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %286 = cast(%var_6702, dtype="bool") /* ty=Tensor[(972), bool] */;
  %287 = reshape(%285, newshape=[]) /* ty=bool */;
  %288 = reshape(%286, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), bool] */;
  %289 = @func_4457(%287, %288) /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) */;
  %290 = cast(%var_6702, dtype="float64") /* ty=Tensor[(972), float64] */;
  %291 = %284.3;
  %292 = %289.0;
  %293 = acosh(%290) /* ty=Tensor[(972), float64] */;
  (%291, %292, False /* ty=bool */, %293)
}

def @func_3032() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %294 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %295 = @func_2113() /* ty=Tensor[(13, 8, 16), float64] */;
  %296 = %294.0;
  (%295, %296)
}

def @func_542() -> Tensor[(13, 8, 16), float64] {
  %297 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %297.1
}

def @main(%var_7108: Tensor[(15, 5, 10), float64], %var_7114: Tensor[(1274), uint32]) -> (Tensor[(7, 10, 9), float64], Tensor[(5, 7, 7), bool], Tensor[(245), uint16], Tensor[(448), int64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(1664), float64], Tensor[(15, 5, 10), bool], Tensor[(13, 14, 7), uint32], Tensor[(1274), uint32], Tensor[(15, 5, 10), float32]) {
  %298 = cast(meta[relay.Constant][15] /* ty=Tensor[(245), uint16] */, dtype="uint16") /* ty=Tensor[(245), uint16] */;
  %299 = cast(meta[relay.Constant][15] /* ty=Tensor[(245), uint16] */, dtype="uint16") /* ty=Tensor[(245), uint16] */;
  %300 = cast(meta[relay.Constant][16] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %301 = reshape(%298, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), uint16] */;
  %302 = reshape(%299, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), uint16] */;
  %303 = reshape(%300, newshape=[448]) /* ty=Tensor[(448), int64] */;
  %304 = @func_6988(%301, %302, %303) /* ty=(Tensor[(5, 7, 7), bool], Tensor[(4, 14, 8), bool], Tensor[(448), int64], Tensor[(750), uint8]) */;
  %305 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %306 = %305.2;
  %307 = cast(%306, dtype="uint8") /* ty=Tensor[(15, 5, 10), uint8] */;
  %308 = reshape(%307, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %309 = @func_1770(%308) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) */;
  %310 = cast(meta[relay.Constant][17] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %311 = reshape(%310, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %312 = @func_3554(%311) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) */;
  %313 = cast(%306, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %314 = acosh(%313) /* ty=Tensor[(15, 5, 10), float64] */;
  %315 = cast(%var_7108, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = cast(%var_7114, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %320 = reshape(%319, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), uint32] */;
  %321 = @func_5517(%320) /* ty=(Tensor[(13, 14, 7), uint32],) */;
  %322 = cast(%306, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %323 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%314, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %326 = power(%324, %325) /* ty=Tensor[(15, 5, 10), float64] */;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(15, 5, 10), float32] */;
  %328 = @func_3434() /* ty=Tensor[(7, 10, 9), float64] */;
  %329 = %304.0;
  %330 = %309.1;
  %331 = %312.0;
  %332 = greater(%317, %318) /* ty=Tensor[(15, 5, 10), bool] */;
  %333 = %321.0;
  %334 = exp(%327) /* ty=Tensor[(15, 5, 10), float32] */;
  (%328, %329, meta[relay.Constant][15] /* ty=Tensor[(245), uint16] */, meta[relay.Constant][16] /* ty=Tensor[(448), int64] */, %330, %331, meta[relay.Constant][17] /* ty=Tensor[(1664), float64] */, %332, %333, %var_7114, %334)
}

def @func_2683(%var_2675: Tensor[(10, 75), uint8]) -> (Tensor[(13, 8, 16), float64], Tensor[(52, 32), float64], Tensor[(10, 75), uint8]) {
  %335 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %336 = cast(%var_2675, dtype="uint8") /* ty=Tensor[(10, 75), uint8] */;
  %337 = reshape(%336, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %338 = @func_2216(%337) /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float32], Tensor[(52, 32), float64], Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(1, 750), uint8]) */;
  %339 = %335.0;
  %340 = %338.2;
  (%339, %340, %var_2675)
}

def @func_4535() -> Tensor[(13, 8, 16), float64] {
  %341 = @func_833() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %341.0
}

def @func_5918(%var_5852: Tensor[(16, 1, 2), float32], %var_5864: Tensor[(112, 4), int64], %var_5865: Tensor[(5, 150), uint8], %var_5899: float64, %var_5900: Tensor[(2184), float64]) -> (Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) {
  %342 = cast(%var_5864, dtype="int64") /* ty=Tensor[(112, 4), int64] */;
  %343 = cast(%var_5865, dtype="uint8") /* ty=Tensor[(5, 150), uint8] */;
  %344 = reshape(%342, newshape=[448]) /* ty=Tensor[(448), int64] */;
  %345 = reshape(%343, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %346 = @func_1078(%344, %345) /* ty=(Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) */;
  %347 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %348 = @func_313() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %349 = cast(%var_5852, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
  %350 = atanh(%349) /* ty=Tensor[(16, 1, 2), float32] */;
  %351 = cast(%var_5852, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = greater_equal(%353, %354) /* ty=Tensor[(16, ?, 2), bool] */;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(16, ?, 2), float64] */;
  %357 = acosh(%356) /* ty=Tensor[(16, ?, 2), float64] */;
  %358 = cast(%350, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(16, ?, 2), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = cast(%var_5899, dtype="float64") /* ty=float64 */;
  %363 = cast(%var_5900, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %364 = reshape(%362, newshape=[]) /* ty=float64 */;
  %365 = reshape(%363, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
  %366 = @func_1379(%364, %365) /* ty=(Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) */;
  %367 = cast(meta[relay.Constant][18] /* ty=Tensor[(960, 1), int64] */, dtype="int64") /* ty=Tensor[(960, 1), int64] */;
  %368 = reshape(%367, newshape=[16, 4, 15]) /* ty=Tensor[(16, 4, 15), int64] */;
  %369 = %346.3;
  %370 = %347.0;
  %371 = %348.1;
  %372 = greater(%360, %361) /* ty=Tensor[(16, ?, 2), bool] */;
  %373 = %366.3;
  %374 = @func_2424(%368) /* ty=Tensor[(16, 4, 15), int64] */;
  (%369, %var_5864, %var_5865, %370, %371, %372, %373, %var_5899, %var_5900, %374, meta[relay.Constant][18] /* ty=Tensor[(960, 1), int64] */)
}

def @func_3060() -> Tensor[(13, 8, 16), float64] {
  @func_1504() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_1982(%var_1979: Tensor[(14, 8, 11), float32]) -> Tensor[(14, 8, 11), float32] {
  %375 = cast(%var_1979, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
  acosh(%375) /* ty=Tensor[(14, 8, 11), float32] */
}

def @func_5101(%var_5091: Tensor[(1, 840), int16]) -> (Tensor[(13, 8, 16), float64], Tensor[(10, 7, 12), int16], Tensor[(18, 2), float64], Tensor[(1, 840), int16]) {
  %376 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %377 = cast(meta[relay.Constant][19] /* ty=Tensor[(18, 2), float64] */, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
  %378 = cast(%var_5091, dtype="int16") /* ty=Tensor[(1, 840), int16] */;
  %379 = reshape(%377, newshape=[1, 4, 9]) /* ty=Tensor[(1, 4, 9), float64] */;
  %380 = reshape(%378, newshape=[12, 70]) /* ty=Tensor[(12, 70), int16] */;
  %381 = @func_4857(%379, %380) /* ty=(Tensor[(1, 4, 9), float64], Tensor[(10, 7, 12), int16], Tensor[(12, 70), int16]) */;
  %382 = %376.1;
  %383 = %381.1;
  (%382, %383, meta[relay.Constant][19] /* ty=Tensor[(18, 2), float64] */, %var_5091)
}

def @func_1691() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %384 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %385 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %386 = %384.0;
  (%385, %386)
}

def @func_3380() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %387 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
  %388 = @func_2927() /* ty=Tensor[(13, 8, 16), float64] */;
  %389 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  (%387, %388, %389)
}

def @func_6078(%var_6035: Tensor[(15, 13, 3), float64], %var_6058: Tensor[(15, 13, 3), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(15, 13, 3), float32], Tensor[(15, 13, 3), uint8], Tensor[(13, 8, 16), float64]) {
  %390 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %391 = @func_5482() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) */;
  %392 = %391.2;
  %393 = cast(%var_6035, dtype="float32") /* ty=Tensor[(15, 13, 3), float32] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="float32") /* ty=Tensor[(15, 13, 3), float32] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %397 = cast(%var_6058, dtype="uint8") /* ty=Tensor[(15, 13, 3), uint8] */;
  %398 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%392, dtype="uint8") /* ty=Tensor[(15, 13, 3), uint8] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %401 = %390.2;
  %402 = power(%395, %396) /* ty=Tensor[(15, 13, 3), float32] */;
  %403 = subtract(%399, %400) /* ty=Tensor[(15, 13, 3), uint8] */;
  %404 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
  (%401, %402, %403, %404)
}

def @func_1952(%var_1944: uint32, %var_1945: Tensor[(14, 14, 11), uint32]) -> (Tensor[(14, 14, 11), uint32],) {
  %405 = cast(%var_1944, dtype="uint32") /* ty=uint32 */;
  %406 = cast(%var_1945, dtype="uint32") /* ty=Tensor[(14, 14, 11), uint32] */;
  %407 = logical_xor(%405, %406) /* ty=Tensor[(14, 14, 11), uint32] */;
  (%407,)
}

def @func_990() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) {
  %408 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %409 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %410 = %408.0;
  %411 = %409.3;
  (%410, %411)
}

def @func_772(%var_721: Tensor[(4, 14, 8), int64], %var_722: Tensor[(4, 14, 8), int64], %var_743: Tensor[(1, 750), uint8]) -> (Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) {
  %412 = cast(%var_722, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %413 = shape_of(%var_721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_721, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = cast(meta[relay.Constant][20] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %417 = cast(meta[relay.Constant][20] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %418 = reshape(%416, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %419 = reshape(%417, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %420 = @func_650(%418, %419) /* ty=(Tensor[(6, 5, 7), uint32],) */;
  %421 = @func_335() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %422 = cast(%var_743, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
  %423 = cast(%var_743, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
  %424 = reshape(%422, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %425 = reshape(%423, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %426 = @func_81(%424, %425) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
  %427 = cast(%var_721, dtype="float64") /* ty=Tensor[(4, 14, 8), float64] */;
  %428 = less(%414, %415) /* ty=Tensor[(4, 14, 8), bool] */;
  %429 = %420.0;
  %430 = %421.1;
  %431 = %426.0;
  %432 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %433 = erf(%427) /* ty=Tensor[(4, 14, 8), float64] */;
  %434 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  (%428, %429, meta[relay.Constant][20] /* ty=Tensor[(210), uint32] */, %430, %431, %var_743, %432, %433, %434)
}

def @func_4857(%var_4829: Tensor[(1, 4, 9), float64], %var_4837: Tensor[(12, 70), int16]) -> (Tensor[(1, 4, 9), float64], Tensor[(10, 7, 12), int16], Tensor[(12, 70), int16]) {
  %435 = cast(%var_4829, dtype="float64") /* ty=Tensor[(1, 4, 9), float64] */;
  %436 = cast(%var_4837, dtype="int16") /* ty=Tensor[(12, 70), int16] */;
  %437 = reshape(%436, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), int16] */;
  %438 = log10(%435) /* ty=Tensor[(1, 4, 9), float64] */;
  %439 = @func_4613(%437) /* ty=Tensor[(10, 7, 12), int16] */;
  (%438, %439, %var_4837)
}

def @func_6498() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(50, 15), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %440 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %441 = cast(meta[relay.Constant][21] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %442 = cast(meta[relay.Constant][21] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(50, 15), uint8] */, dtype="uint8") /* ty=Tensor[(50, 15), uint8] */;
  %444 = reshape(%441, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %445 = reshape(%442, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %446 = reshape(%443, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %447 = @func_772(%444, %445, %446) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
  %448 = cast(meta[relay.Constant][22] /* ty=Tensor[(50, 15), uint8] */, dtype="float32") /* ty=Tensor[(50, 15), float32] */;
  %449 = %440.0;
  %450 = %447.3;
  %451 = asinh(%448) /* ty=Tensor[(50, 15), float32] */;
  %452 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
  %453 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
  (%449, %450, meta[relay.Constant][21] /* ty=Tensor[(448), int64] */, %451, %452, %453)
}

def @func_2031(%var_2018: Tensor[(9, 15, 11), float64]) -> (Tensor[(9, 15, 11), float64],) {
  %454 = cast(%var_2018, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %455 = erf(%454) /* ty=Tensor[(9, 15, 11), float64] */;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %457 = sqrt(%456) /* ty=Tensor[(9, 15, 11), float64] */;
  (%457,)
}

def @func_5669(%var_5656: Tensor[(15, 13, 3), float64]) -> Tensor[(15, 13, 3), uint32] {
  %458 = @func_5482() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) */;
  %459 = %458.2;
  %460 = cast(%var_5656, dtype="uint32") /* ty=Tensor[(15, 13, 3), uint32] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="uint32") /* ty=Tensor[(15, 13, 3), uint32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%462, %463) /* ty=Tensor[(15, 13, 3), uint32] */
}

def @func_3703() -> (Tensor[(13, 8, 16), float64],) {
  %464 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %465 = %464.0;
  (%465,)
}

def @func_2269(%var_2265: Tensor[(15, 13, 3), float64]) -> Tensor[(15, 13, 3), float64] {
  %466 = cast(%var_2265, dtype="float64") /* ty=Tensor[(15, 13, 3), float64] */;
  erf(%466) /* ty=Tensor[(15, 13, 3), float64] */
}

def @func_4773() -> (Tensor[(750), uint8],) {
  %467 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %468 = %467.3;
  (%468,)
}

def @func_1324() -> (Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) {
  %469 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %470 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %471 = %470.2;
  %472 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 5, 10), bool] */, dtype="int64") /* ty=Tensor[(15, 5, 10), int64] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="int64") /* ty=Tensor[(15, 5, 10), int64] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %476 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %477 = @func_856() /* ty=(Tensor[(3, 9, 3), float32],) */;
  %478 = %469.0;
  %479 = bitwise_and(%474, %475) /* ty=Tensor[(15, 5, 10), int64] */;
  %480 = %476.0;
  %481 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
  %482 = %477.0;
  (%478, %479, %480, %481, %482)
}

def @func_4303(%var_4291: Tensor[(7, 10, 9), float64]) -> (Tensor[(7, 10, 9), int8], Tensor[(14, 15, 12), float64]) {
  %483 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %484 = %483.3;
  %485 = cast(%var_4291, dtype="int8") /* ty=Tensor[(7, 10, 9), int8] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="int8") /* ty=Tensor[(7, 10, 9), int8] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %489 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %490 = maximum(%487, %488) /* ty=Tensor[(7, 10, 9), int8] */;
  %491 = %489.0;
  (%490, %491)
}

def @func_3170() -> (Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64]) {
  %492 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %493 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %494 = %492.0;
  %495 = %493.0;
  (%494, %495)
}

def @func_3278(%var_3254: Tensor[(3, 9, 3), float64]) -> (Tensor[(3, 9, 3), float32], Tensor[(3, 9, 3), uint8], Tensor[(3, 9, 3), float64]) {
  %496 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
  %497 = cast(%var_3254, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %501 = cast(%496, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
  %502 = shape_of(%var_3254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_3254, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %505 = cast(%var_3254, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
  %506 = mod(%499, %500) /* ty=Tensor[(3, 9, 3), float32] */;
  %507 = add(%503, %504) /* ty=Tensor[(3, 9, 3), uint8] */;
  %508 = tan(%505) /* ty=Tensor[(3, 9, 3), float64] */;
  (%506, %507, %508)
}

def @func_6278() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %509 = @func_2908() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %510 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
  %511 = %509.0;
  %512 = %510.2;
  (%511, %512)
}

def @func_81(%var_73: Tensor[(15, 5, 10), uint8], %var_74: Tensor[(15, 5, 10), uint8]) -> (Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) {
  %513 = cast(%var_74, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %514 = shape_of(%var_73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_73, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = equal(%515, %516) /* ty=Tensor[(15, 5, 10), bool] */;
  %518 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  (%517, %518)
}

def @func_6655(%var_6641: Tensor[(10, 9, 8), float32]) -> (Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) {
  %519 = cast(%var_6641, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
  %520 = cast(%var_6641, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %521 = exp(%519) /* ty=Tensor[(10, 9, 8), float32] */;
  %522 = log(%520) /* ty=Tensor[(10, 9, 8), float64] */;
  (%521, %522)
}

def @func_2424(%var_2407: Tensor[(16, 4, 15), int64]) -> Tensor[(16, 4, 15), int64] {
  %523 = cast(%var_2407, dtype="int64") /* ty=Tensor[(16, 4, 15), int64] */;
  %524 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(16, 4, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 4, 15), int64] */, dtype="int64") /* ty=Tensor[(16, 4, 15), int64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%525, %526) /* ty=Tensor[(16, 4, 15), int64] */
}

def @func_6384(%var_6352: Tensor[(32), float32]) -> (Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], Tensor[(750), uint8], Tensor[(2184), float64], Tensor[(14, 15, 12), float64], Tensor[(112, 4), int32]) {
  %527 = @func_5379() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %528 = @func_5237() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %529 = cast(%var_6352, dtype="float32") /* ty=Tensor[(32), float32] */;
  %530 = cast(meta[relay.Constant][25] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %531 = cast(meta[relay.Constant][26] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %532 = cast(-8.99585f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %533 = cast(meta[relay.Constant][27] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %534 = reshape(%529, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %535 = reshape(%530, newshape=[112, 4]) /* ty=Tensor[(112, 4), int64] */;
  %536 = reshape(%531, newshape=[5, 150]) /* ty=Tensor[(5, 150), uint8] */;
  %537 = reshape(%532, newshape=[]) /* ty=float64 */;
  %538 = reshape(%533, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %539 = @func_5918(%534, %535, %536, %537, %538) /* ty=(Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) */;
  %540 = %539.1;
  %541 = cast(%540, dtype="int32") /* ty=Tensor[(112, 4), int32] */;
  %542 = cast(-8.99585f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %543 = %527.1;
  %544 = %528.0;
  %545 = bitwise_xor(%541, %542) /* ty=Tensor[(112, 4), int32] */;
  (%543, %var_6352, meta[relay.Constant][25] /* ty=Tensor[(448), int64] */, meta[relay.Constant][26] /* ty=Tensor[(750), uint8] */, meta[relay.Constant][27] /* ty=Tensor[(2184), float64] */, %544, %545)
}

def @func_2563() -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) {
  %546 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %547 = %546.2;
  %548 = @func_542() /* ty=Tensor[(13, 8, 16), float64] */;
  (%547, %548)
}

def @func_1149() -> (Tensor[(13, 8, 16), float64],) {
  %549 = @func_542() /* ty=Tensor[(13, 8, 16), float64] */;
  (%549,)
}

def @func_415() -> Tensor[(3, 9, 3), float64] {
  %550 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
  log(%550) /* ty=Tensor[(3, 9, 3), float64] */
}

def @func_2908() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
  %551 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
  %552 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  %553 = %551.3;
  (%552, %553)
}

def @func_288() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %554 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %556 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  %557 = atanh(%555) /* ty=Tensor[(13, 8, 16), float64] */;
  (%556, %557)
}

def @func_960() -> (Tensor[(3, 9, 3), float64],) {
  %558 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
  (%558,)
}

def @func_5223() -> (Tensor[(15, 5, 10), float64], Tensor[(14, 15, 12), float64], Tensor[(630), float64], Tensor[(3, 9, 3), uint16]) {
  %559 = @func_1923() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool]) */;
  %560 = %559.2;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %562 = cast(meta[relay.Constant][29] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %563 = reshape(%562, newshape=[7, 10, 9]) /* ty=Tensor[(7, 10, 9), float64] */;
  %564 = @func_4303(%563) /* ty=(Tensor[(7, 10, 9), int8], Tensor[(14, 15, 12), float64]) */;
  %565 = @func_1666() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %566 = asin(%561) /* ty=Tensor[(15, 5, 10), float64] */;
  %567 = %564.1;
  %568 = %565.0;
  (%566, %567, meta[relay.Constant][29] /* ty=Tensor[(630), float64] */, %568)
}

def @func_2388() -> (Tensor[(13, 8, 16), float64],) {
  %569 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %570 = %569.2;
  (%570,)
}

def @func_1666() -> (Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) {
  %571 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %572 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
  %573 = %571.0;
  %574 = %572.0;
  (%573, %574)
}

def @func_2113() -> Tensor[(13, 8, 16), float64] {
  @func_542() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_1447(%var_1413: float64, %var_1414: Tensor[(2184, 1), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) {
  %575 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %576 = %575.1;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %578 = reshape(%577, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %579 = @func_689(%578) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %580 = cast(%var_1413, dtype="float64") /* ty=float64 */;
  %581 = cast(%var_1414, dtype="float64") /* ty=Tensor[(2184, 1), float64] */;
  %582 = reshape(%580, newshape=[]) /* ty=float64 */;
  %583 = reshape(%581, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
  %584 = @func_1379(%582, %583) /* ty=(Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) */;
  %585 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
  %586 = %585.1;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(7, 10, 9), float64] */;
  %588 = %579.0;
  %589 = %584.4;
  %590 = sinh(%587) /* ty=Tensor[(7, 10, 9), float64] */;
  (%576, %588, %589, %var_1413, %var_1414, %590)
}

def @func_3607() -> (Tensor[(13, 8, 16), float64],) {
  %591 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %592 = %591.0;
  (%592,)
}

def @func_3746(%var_3741: Tensor[(12, 7), float32]) -> (Tensor[(12, 7), float32],) {
  %593 = cast(%var_3741, dtype="float32") /* ty=Tensor[(12, 7), float32] */;
  %594 = acos(%593) /* ty=Tensor[(12, 7), float32] */;
  (%594,)
}

def @func_591() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) {
  %595 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %596 = cast(meta[relay.Constant][30] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %597 = cast(meta[relay.Constant][30] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %598 = reshape(%596, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %599 = reshape(%597, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %600 = @func_81(%598, %599) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
  %601 = %595.0;
  %602 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  %603 = %600.0;
  (%601, %602, %603, meta[relay.Constant][30] /* ty=Tensor[(750), uint8] */)
}

def @func_5641() -> Tensor[(13, 8, 16), float64] {
  @func_4535() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_1639() -> (Tensor[(14, 15, 12), float64],) {
  %604 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 12), float64] */;
  %605 = log(%604) /* ty=Tensor[(14, 15, 12), float64] */;
  (%605,)
}

def @func_296() -> Tensor[(13, 8, 16), float64] {
  @func_215() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2752() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) {
  %606 = @func_1484() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %607 = %606.0;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %609 = cast(%607, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %610 = reshape(%609, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %611 = @func_689(%610) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %612 = %611.0;
  %613 = cast(%607, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %617 = cast(4.82165f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %618 = cast(meta[relay.Constant][32] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %619 = reshape(%617, newshape=[]) /* ty=float64 */;
  %620 = reshape(%618, newshape=[2184, 1]) /* ty=Tensor[(2184, 1), float64] */;
  %621 = @func_1447(%619, %620) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) */;
  %622 = exp(%608) /* ty=Tensor[(13, 8, 16), float64] */;
  %623 = logical_xor(%615, %616) /* ty=Tensor[(13, 8, 16), int16] */;
  %624 = @func_2113() /* ty=Tensor[(13, 8, 16), float64] */;
  %625 = %621.1;
  (%622, %623, %624, %625, 4.82165f64 /* ty=float64 */, meta[relay.Constant][32] /* ty=Tensor[(2184), float64] */)
}

def @func_650(%var_632: Tensor[(6, 5, 7), uint32], %var_633: Tensor[(6, 5, 7), uint32]) -> (Tensor[(6, 5, 7), uint32],) {
  %626 = cast(%var_633, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
  %627 = shape_of(%var_632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%var_632, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %630 = bitwise_and(%628, %629) /* ty=Tensor[(6, 5, 7), uint32] */;
  (%630,)
}

def @func_940() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
  %631 = @func_833() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %632 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %633 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %634 = %632.0;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %636 = reshape(%635, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %637 = @func_689(%636) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %638 = %637.1;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %640 = sin(%639) /* ty=Tensor[(13, 8, 16), float32] */;
  %641 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
  %644 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%640, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %647 = %631.0;
  %648 = %633.1;
  %649 = equal(%645, %646) /* ty=Tensor[(13, 8, 16), bool] */;
  (%647, %634, %648, %649)
}

def @func_1284() -> Tensor[(3, 9, 3), float64] {
  @func_415() /* ty=Tensor[(3, 9, 3), float64] */
}

def @func_5379() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %650 = @func_3032() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %651 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %652 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %653 = %650.0;
  %654 = %651.1;
  %655 = %652.1;
  (%653, %654, %655)
}

def @func_6669() -> (Tensor[(13, 8, 16), float64],) {
  %656 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
  (%656,)
}

def @func_3142(%var_3139: Tensor[(448), int64]) -> (Tensor[(13, 8, 16), float64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(750), uint8]) {
  %657 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
  %658 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %659 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %662 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
  %663 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %666 = multiply(%664, %665) /* ty=Tensor[(2, 12, 16), uint16] */;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(2, 12, 16), float64] */;
  %668 = cast(%var_3139, dtype="int64") /* ty=Tensor[(448), int64] */;
  %669 = cast(%var_3139, dtype="int64") /* ty=Tensor[(448), int64] */;
  %670 = cast(meta[relay.Constant][35] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %671 = reshape(%668, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %672 = reshape(%669, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %673 = reshape(%670, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %674 = @func_772(%671, %672, %673) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
  %675 = %657.0;
  %676 = greater(%660, %661) /* ty=Tensor[(2, 12, 16), bool] */;
  %677 = sinh(%667) /* ty=Tensor[(2, 12, 16), float64] */;
  %678 = %674.6;
  (%675, %676, %677, %678, %var_3139, meta[relay.Constant][35] /* ty=Tensor[(750), uint8] */)
}

def @func_4613(%var_4600: Tensor[(10, 7, 12), int16]) -> Tensor[(10, 7, 12), int16] {
  %679 = cast(%var_4600, dtype="int16") /* ty=Tensor[(10, 7, 12), int16] */;
  %680 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(10, 7, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 7, 12), int16] */, dtype="int16") /* ty=Tensor[(10, 7, 12), int16] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%681, %682) /* ty=Tensor[(10, 7, 12), int16] */
}

def @func_2216(%var_2212: Tensor[(1, 750), uint8]) -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float32], Tensor[(52, 32), float64], Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(1, 750), uint8]) {
  %683 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %684 = cast(meta[relay.Constant][37] /* ty=Tensor[(52, 32), float64] */, dtype="float64") /* ty=Tensor[(52, 32), float64] */;
  %685 = reshape(%684, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %686 = @func_689(%685) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %687 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %688 = cast(%var_2212, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
  %689 = reshape(%688, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %690 = @func_1770(%689) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) */;
  %691 = %683.4;
  %692 = %686.1;
  %693 = %687.0;
  %694 = %690.2;
  (%691, %692, meta[relay.Constant][37] /* ty=Tensor[(52, 32), float64] */, %693, %694, %var_2212)
}

def @func_4021(%var_4014: float64) -> (Tensor[(11, 4, 14), float64],) {
  %695 = cast(%var_4014, dtype="float64") /* ty=float64 */;
  %696 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 4, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %697 = minimum(%695, %696) /* ty=Tensor[(11, 4, 14), float64] */;
  (%697,)
}

def @func_4662(%var_4658: Tensor[(2, 16, 11), float32]) -> Tensor[(2, 16, 11), float32] {
  %698 = cast(%var_4658, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
  %699 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(2, 16, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%700, %701) /* ty=Tensor[(2, 16, 11), float32] */
}

def @func_2307() -> Tensor[(13, 8, 16), float64] {
  %702 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %702.0
}

def @func_6246() -> (Tensor[(750), float64],) {
  %703 = @func_5284() /* ty=Tensor[(750), uint8] */;
  %704 = cast(%703, dtype="float64") /* ty=Tensor[(750), float64] */;
  %705 = sinh(%704) /* ty=Tensor[(750), float64] */;
  (%705,)
}

def @func_4062(%var_4045: Tensor[(9, 8, 14), uint8], %var_4046: Tensor[(9, 8, 14), uint8], %var_4053: Tensor[(9, 8, 14), uint8]) -> (Tensor[(9, 8, 14), uint8], Tensor[(13, 8, 16), float64], Tensor[(9, 8, 14), int8]) {
  %706 = cast(%var_4046, dtype="uint8") /* ty=Tensor[(9, 8, 14), uint8] */;
  %707 = shape_of(%var_4045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_4045, dtype="uint8") /* ty=Tensor[(9, 8, 14), uint8] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %710 = @func_3249() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %711 = cast(%var_4053, dtype="int8") /* ty=Tensor[(9, 8, 14), int8] */;
  %712 = shape_of(%var_4046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%var_4046, dtype="int8") /* ty=Tensor[(9, 8, 14), int8] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %715 = bitwise_and(%708, %709) /* ty=Tensor[(9, 8, 14), uint8] */;
  %716 = %710.1;
  %717 = right_shift(%713, %714) /* ty=Tensor[(9, 8, 14), int8] */;
  (%715, %716, %717)
}

def @func_394() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %718 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  %719 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  %720 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  %721 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  (%718, %719, %720, %721)
}

def @func_1197() -> (Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) {
  %722 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %723 = %722.0;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
  %725 = asinh(%724) /* ty=Tensor[(3, 9, 3), float32] */;
  %726 = cast(%723, dtype="uint16") /* ty=Tensor[(3, 9, 3), uint16] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="uint16") /* ty=Tensor[(3, 9, 3), uint16] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %730 = bitwise_and(%728, %729) /* ty=Tensor[(3, 9, 3), uint16] */;
  %731 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  (%730, %731)
}

def @func_3434() -> Tensor[(7, 10, 9), float64] {
  @func_1115() /* ty=Tensor[(7, 10, 9), float64] */
}

def @func_2822(%var_2792: Tensor[(6, 8, 2), int32]) -> (Tensor[(6, 8, 2), int32], Tensor[(3, 9, 3), uint16], Tensor[(6, 8, 2), int64], Tensor[(13, 8, 16), float64], Tensor[(6, 8, 2), bool]) {
  %732 = cast(%var_2792, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
  %733 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %736 = @func_1666() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %737 = cast(%var_2792, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %738 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 8, 2), int32] */, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %741 = not_equal(%739, %740) /* ty=Tensor[(6, 8, 2), bool] */;
  %742 = cast(%var_2792, dtype="int64") /* ty=Tensor[(6, 8, 2), int64] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="int64") /* ty=Tensor[(6, 8, 2), int64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %746 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %747 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 8, 2), int32] */, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %748 = shape_of(%var_2792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_2792, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = bitwise_or(%734, %735) /* ty=Tensor[(6, 8, 2), int32] */;
  %752 = %736.0;
  %753 = bitwise_and(%744, %745) /* ty=Tensor[(6, 8, 2), int64] */;
  %754 = %746.1;
  %755 = less_equal(%749, %750) /* ty=Tensor[(6, 8, 2), bool] */;
  (%751, %752, %753, %754, %755)
}

def @func_5482() -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) {
  %756 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %757 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %758 = cast(meta[relay.Constant][41] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %759 = reshape(%758, newshape=[15, 13, 3]) /* ty=Tensor[(15, 13, 3), float64] */;
  %760 = %756.0;
  %761 = %757.0;
  %762 = @func_2269(%759) /* ty=Tensor[(15, 13, 3), float64] */;
  %763 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
  (%760, %761, %762, meta[relay.Constant][41] /* ty=Tensor[(585), float64] */, %763)
}

def @func_6754() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) {
  %764 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %765 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %766 = @func_6246() /* ty=(Tensor[(750), float64],) */;
  %767 = %764.0;
  %768 = %765.1;
  %769 = %766.0;
  (%767, %768, %769)
}

def @func_6550(%var_6540: Tensor[(546), int8]) -> (Tensor[(13, 8, 16), float64], Tensor[(7, 13, 6), bool], Tensor[(546), int8], Tensor[(13, 8, 16), bool]) {
  %770 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %771 = cast(%var_6540, dtype="int8") /* ty=Tensor[(546), int8] */;
  %772 = reshape(%771, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), int8] */;
  %773 = @func_3799(%772) /* ty=(Tensor[(7, 13, 6), bool], Tensor[(7, 13, 6), bool]) */;
  %774 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
  %775 = %770.1;
  %776 = %773.0;
  %777 = %774.3;
  (%775, %776, %var_6540, %777)
}

def @func_335() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %778 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  %779 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %780 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  (%778, %779, %780)
}

def @func_2927() -> Tensor[(13, 8, 16), float64] {
  %781 = @func_2908() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %781.0
}

def @func_313() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %782 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %783 = %782.1;
  %784 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  (%783, %784)
}

def @func_3799(%var_3776: Tensor[(7, 13, 6), int8]) -> (Tensor[(7, 13, 6), bool], Tensor[(7, 13, 6), bool]) {
  %785 = cast(%var_3776, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %786 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(7, 13, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 13, 6), int8] */, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %789 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 13, 6), int8] */, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
  %790 = cosh(%789) /* ty=Tensor[(7, 13, 6), float32] */;
  %791 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 13, 6), int8] */, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %795 = greater(%787, %788) /* ty=Tensor[(7, 13, 6), bool] */;
  %796 = logical_or(%793, %794) /* ty=Tensor[(7, 13, 6), bool] */;
  (%795, %796)
}

def @func_5594() -> Tensor[(7, 9, 14), float32] {
  %797 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
  sin(%797) /* ty=Tensor[(7, 9, 14), float32] */
}

def @func_3249() -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %798 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
  %800 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %801 = exp(%799) /* ty=Tensor[(3, 9, 3), float32] */;
  %802 = %800.1;
  %803 = @func_3060() /* ty=Tensor[(13, 8, 16), float64] */;
  (%801, %802, %803)
}

def @func_5727() -> (Tensor[(13, 8, 16), float32], Tensor[(12, 7), float32], Tensor[(84), float32]) {
  %804 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %806 = cast(meta[relay.Constant][44] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %807 = reshape(%806, newshape=[12, 7]) /* ty=Tensor[(12, 7), float32] */;
  %808 = @func_3746(%807) /* ty=(Tensor[(12, 7), float32],) */;
  %809 = rsqrt(%805) /* ty=Tensor[(13, 8, 16), float32] */;
  %810 = %808.0;
  (%809, %810, meta[relay.Constant][44] /* ty=Tensor[(84), float32] */)
}

def @func_61() -> Tensor[(13, 8, 16), float64] {
  %811 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %812 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(13, 8, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%813, %814) /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2469() -> Tensor[(13, 8, 16), float64] {
  @func_296() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_1379(%var_1326: float64, %var_1327: Tensor[(12, 13, 14), float64]) -> (Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) {
  %815 = cast(%var_1326, dtype="float64") /* ty=float64 */;
  %816 = cast(%var_1327, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %817 = cast(meta[relay.Constant][47] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %818 = cast(meta[relay.Constant][47] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %819 = reshape(%817, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %820 = reshape(%818, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %821 = @func_81(%819, %820) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
  %822 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  %823 = cast(%822, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %824 = cast(%822, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %825 = floor_mod(%815, %816) /* ty=Tensor[(12, 13, 14), float64] */;
  %826 = %821.1;
  %827 = erf(%823) /* ty=Tensor[(13, 8, 16), float32] */;
  %828 = log10(%824) /* ty=Tensor[(13, 8, 16), float64] */;
  (%825, %826, meta[relay.Constant][47] /* ty=Tensor[(750), uint8] */, %827, %828)
}

def @func_5551(%var_5526: Tensor[(3, 10, 12), int32]) -> (Tensor[(3, 10, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), bool], Tensor[(1664), float64]) {
  %829 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 10, 12), int32] */, dtype="int32") /* ty=Tensor[(3, 10, 12), int32] */;
  %830 = shape_of(%var_5526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_5526, dtype="int32") /* ty=Tensor[(3, 10, 12), int32] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %833 = bitwise_or(%831, %832) /* ty=Tensor[(3, 10, 12), int32] */;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %835 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %836 = cast(meta[relay.Constant][49] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %837 = reshape(%836, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %838 = @func_689(%837) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %839 = exp(%834) /* ty=Tensor[(3, 10, 12), float32] */;
  %840 = %835.0;
  %841 = %838.0;
  (%839, %840, %841, meta[relay.Constant][49] /* ty=Tensor[(1664), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_215() -> Tensor[(13, 8, 16), float64] {
  @func_206() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_1231() -> (Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) {
  @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */
}

def @func_1620(%var_1617: Tensor[(1, 4), float32]) -> (Tensor[(1, 4), float32],) {
  %0 = cast(%var_1617, dtype="float32") /* ty=Tensor[(1, 4), float32] */;
  %1 = log2(%0) /* ty=Tensor[(1, 4), float32] */;
  (%1,)
}

def @func_5672(%var_5670: Tensor[(15, 13, 3), float64]) -> Tensor[(15, 13, 3), uint32] {
  @func_5669(%var_5670) /* ty=Tensor[(15, 13, 3), uint32] */
}

def @func_5482() -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) {
  %2 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %3 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %5 = reshape(%4, newshape=[15, 13, 3]) /* ty=Tensor[(15, 13, 3), float64] */;
  %6 = %2.0;
  %7 = %3.0;
  %8 = @func_2269(%5) /* ty=Tensor[(15, 13, 3), float64] */;
  %9 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
  (%6, %7, %8, meta[relay.Constant][0] /* ty=Tensor[(585), float64] */, %9)
}

def @func_3738() -> Tensor[(13, 8, 16), float64] {
  %11 = fn () -> Tensor[(13, 8, 16), float64] {
    %10 = @func_3703() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %10.0
  };
  %11() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2427(%var_2425: Tensor[(16, 4, 15), int64]) -> Tensor[(16, 4, 15), int64] {
  @func_2424(%var_2425) /* ty=Tensor[(16, 4, 15), int64] */
}

def @func_4223() -> (Tensor[(13, 8, 16), float64],) {
  @func_4221() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_4598() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_4596() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_2309() -> Tensor[(13, 8, 16), float64] {
  @func_2307() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_1082(%var_1080: Tensor[(448), int64], %var_1081: Tensor[(1, 750), uint8]) -> (Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) {
  @func_1078(%var_1080, %var_1081) /* ty=(Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) */
}

def @func_1869() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(7, 10, 9), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %29 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(7, 10, 9), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %12 = @func_313() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %13 = @func_335() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %14 = %13.2;
    %15 = cast(%14, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
    %16 = acosh(%15) /* ty=Tensor[(13, 8, 16), float32] */;
    %17 = cast(%16, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
    %18 = asinh(%17) /* ty=Tensor[(13, 8, 16), float32] */;
    %19 = cast(%16, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
    %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%18, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %23 = @func_1504() /* ty=Tensor[(13, 8, 16), float64] */;
    %24 = %12.1;
    %25 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
    %26 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
    %27 = power(%21, %22) /* ty=Tensor[(13, 8, 16), float64] */;
    %28 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
    (%23, %24, %25, %26, %27, %28)
  };
  %29() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(7, 10, 9), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_2908() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
  %30 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
  %31 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  %32 = %30.3;
  (%31, %32)
}

def @func_2424(%var_2407: Tensor[(16, 4, 15), int64]) -> Tensor[(16, 4, 15), int64] {
  %33 = cast(%var_2407, dtype="int64") /* ty=Tensor[(16, 4, 15), int64] */;
  %34 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(16, 4, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 4, 15), int64] */, dtype="int64") /* ty=Tensor[(16, 4, 15), int64] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%35, %36) /* ty=Tensor[(16, 4, 15), int64] */
}

def @func_2031(%var_2018: Tensor[(9, 15, 11), float64]) -> (Tensor[(9, 15, 11), float64],) {
  %37 = cast(%var_2018, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %38 = erf(%37) /* ty=Tensor[(9, 15, 11), float64] */;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %40 = sqrt(%39) /* ty=Tensor[(9, 15, 11), float64] */;
  (%40,)
}

def @func_6500() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(50, 15), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_6498() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(50, 15), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_2685(%var_2684: Tensor[(10, 75), uint8]) -> (Tensor[(13, 8, 16), float64], Tensor[(52, 32), float64], Tensor[(10, 75), uint8]) {
  %47 = fn (%var_2675: Tensor[(10, 75), uint8]) -> (Tensor[(13, 8, 16), float64], Tensor[(52, 32), float64], Tensor[(10, 75), uint8]) {
    %41 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
    %42 = cast(%var_2675, dtype="uint8") /* ty=Tensor[(10, 75), uint8] */;
    %43 = reshape(%42, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
    %44 = @func_2216(%43) /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float32], Tensor[(52, 32), float64], Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(1, 750), uint8]) */;
    %45 = %41.0;
    %46 = %44.2;
    (%45, %46, %var_2675)
  };
  %47(%var_2684) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(52, 32), float64], Tensor[(10, 75), uint8]) */
}

def @func_1447(%var_1413: float64, %var_1414: Tensor[(2184, 1), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) {
  %48 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %49 = %48.1;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %51 = reshape(%50, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %52 = @func_689(%51) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %53 = cast(%var_1413, dtype="float64") /* ty=float64 */;
  %54 = cast(%var_1414, dtype="float64") /* ty=Tensor[(2184, 1), float64] */;
  %55 = reshape(%53, newshape=[]) /* ty=float64 */;
  %56 = reshape(%54, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
  %57 = @func_1379(%55, %56) /* ty=(Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) */;
  %58 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
  %59 = %58.1;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(7, 10, 9), float64] */;
  %61 = %52.0;
  %62 = %57.4;
  %63 = sinh(%60) /* ty=Tensor[(7, 10, 9), float64] */;
  (%49, %61, %62, %var_1413, %var_1414, %63)
}

def @func_84(%var_82: Tensor[(15, 5, 10), uint8], %var_83: Tensor[(15, 5, 10), uint8]) -> (Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) {
  %70 = fn (%var_73: Tensor[(15, 5, 10), uint8], %var_74: Tensor[(15, 5, 10), uint8]) -> (Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) {
    %64 = cast(%var_74, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
    %65 = shape_of(%var_73, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%var_73, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %68 = equal(%66, %67) /* ty=Tensor[(15, 5, 10), bool] */;
    %69 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
    (%68, %69)
  };
  %70(%var_82, %var_83) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */
}

def @func_1984(%var_1983: Tensor[(14, 8, 11), float32]) -> Tensor[(14, 8, 11), float32] {
  %72 = fn (%var_1979: Tensor[(14, 8, 11), float32]) -> Tensor[(14, 8, 11), float32] {
    %71 = cast(%var_1979, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
    acosh(%71) /* ty=Tensor[(14, 8, 11), float32] */
  };
  %72(%var_1983) /* ty=Tensor[(14, 8, 11), float32] */
}

def @func_2640(%var_2639: Tensor[(750), uint8]) -> (Tensor[(3, 9, 3), int8], Tensor[(448), int64], Tensor[(448), int64], Tensor[(750), uint8]) {
  %91 = fn (%var_2626: Tensor[(750), uint8]) -> (Tensor[(3, 9, 3), int8], Tensor[(448), int64], Tensor[(448), int64], Tensor[(750), uint8]) {
    %73 = @func_1666() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
    %74 = %73.0;
    %75 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 9, 3), uint16] */, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %79 = logical_and(%77, %78) /* ty=Tensor[(3, 9, 3), bool] */;
    %80 = cast(%79, dtype="int8") /* ty=Tensor[(3, 9, 3), int8] */;
    %81 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%74, dtype="int8") /* ty=Tensor[(3, 9, 3), int8] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %84 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
    %85 = cast(%var_2626, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %86 = reshape(%84, newshape=[448]) /* ty=Tensor[(448), int64] */;
    %87 = reshape(%85, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
    %88 = @func_1078(%86, %87) /* ty=(Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) */;
    %89 = left_shift(%82, %83) /* ty=Tensor[(3, 9, 3), int8] */;
    %90 = %88.2;
    (%89, %90, meta[relay.Constant][3] /* ty=Tensor[(448), int64] */, %var_2626)
  };
  %91(%var_2639) /* ty=(Tensor[(3, 9, 3), int8], Tensor[(448), int64], Tensor[(448), int64], Tensor[(750), uint8]) */
}

def @func_4091() -> Tensor[(13, 8, 16), float64] {
  %93 = fn () -> Tensor[(13, 8, 16), float64] {
    %92 = @func_3249() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %92.1
  };
  %93() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2910() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
  @func_2908() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */
}

def @func_1285() -> Tensor[(3, 9, 3), float64] {
  %94 = fn () -> Tensor[(3, 9, 3), float64] {
    @func_415() /* ty=Tensor[(3, 9, 3), float64] */
  };
  %94() /* ty=Tensor[(3, 9, 3), float64] */
}

def @func_3704() -> (Tensor[(13, 8, 16), float64],) {
  %97 = fn () -> (Tensor[(13, 8, 16), float64],) {
    %95 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %96 = %95.0;
    (%96,)
  };
  %97() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_5284() -> Tensor[(750), uint8] {
  %98 = @func_4773() /* ty=(Tensor[(750), uint8],) */;
  %98.0
}

def @func_3987() -> (Tensor[(14, 15, 12), float64],) {
  %99 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %100 = %99.0;
  (%100,)
}

def @func_5551(%var_5526: Tensor[(3, 10, 12), int32]) -> (Tensor[(3, 10, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), bool], Tensor[(1664), float64]) {
  %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 10, 12), int32] */, dtype="int32") /* ty=Tensor[(3, 10, 12), int32] */;
  %102 = shape_of(%var_5526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_5526, dtype="int32") /* ty=Tensor[(3, 10, 12), int32] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %105 = bitwise_or(%103, %104) /* ty=Tensor[(3, 10, 12), int32] */;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %107 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %109 = reshape(%108, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %110 = @func_689(%109) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %111 = exp(%106) /* ty=Tensor[(3, 10, 12), float32] */;
  %112 = %107.0;
  %113 = %110.0;
  (%111, %112, %113, meta[relay.Constant][5] /* ty=Tensor[(1664), float64] */)
}

def @func_4615(%var_4614: Tensor[(10, 7, 12), int16]) -> Tensor[(10, 7, 12), int16] {
  %118 = fn (%var_4600: Tensor[(10, 7, 12), int16]) -> Tensor[(10, 7, 12), int16] {
    %114 = cast(%var_4600, dtype="int16") /* ty=Tensor[(10, 7, 12), int16] */;
    %115 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(10, 7, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 7, 12), int16] */, dtype="int16") /* ty=Tensor[(10, 7, 12), int16] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    multiply(%116, %117) /* ty=Tensor[(10, 7, 12), int16] */
  };
  %118(%var_4614) /* ty=Tensor[(10, 7, 12), int16] */
}

def @func_5924(%var_5919: Tensor[(16, 1, 2), float32], %var_5920: Tensor[(112, 4), int64], %var_5921: Tensor[(5, 150), uint8], %var_5922: float64, %var_5923: Tensor[(2184), float64]) -> (Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) {
  %152 = fn (%var_5852: Tensor[(16, 1, 2), float32], %var_5864: Tensor[(112, 4), int64], %var_5865: Tensor[(5, 150), uint8], %var_5899: float64, %var_5900: Tensor[(2184), float64]) -> (Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) {
    %119 = cast(%var_5864, dtype="int64") /* ty=Tensor[(112, 4), int64] */;
    %120 = cast(%var_5865, dtype="uint8") /* ty=Tensor[(5, 150), uint8] */;
    %121 = reshape(%119, newshape=[448]) /* ty=Tensor[(448), int64] */;
    %122 = reshape(%120, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
    %123 = @func_1078(%121, %122) /* ty=(Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) */;
    %124 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %125 = @func_313() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %126 = cast(%var_5852, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
    %127 = atanh(%126) /* ty=Tensor[(16, 1, 2), float32] */;
    %128 = cast(%var_5852, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
    %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %130 = cast(%127, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %132 = greater_equal(%130, %131) /* ty=Tensor[(16, ?, 2), bool] */;
    %133 = cast(%132, dtype="float64") /* ty=Tensor[(16, ?, 2), float64] */;
    %134 = acosh(%133) /* ty=Tensor[(16, ?, 2), float64] */;
    %135 = cast(%127, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
    %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(%134, dtype="bool") /* ty=Tensor[(16, ?, 2), bool] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %139 = cast(%var_5899, dtype="float64") /* ty=float64 */;
    %140 = cast(%var_5900, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %141 = reshape(%139, newshape=[]) /* ty=float64 */;
    %142 = reshape(%140, newshape=[12, 13, 14]) /* ty=Tensor[(12, 13, 14), float64] */;
    %143 = @func_1379(%141, %142) /* ty=(Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) */;
    %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(960, 1), int64] */, dtype="int64") /* ty=Tensor[(960, 1), int64] */;
    %145 = reshape(%144, newshape=[16, 4, 15]) /* ty=Tensor[(16, 4, 15), int64] */;
    %146 = %123.3;
    %147 = %124.0;
    %148 = %125.1;
    %149 = greater(%137, %138) /* ty=Tensor[(16, ?, 2), bool] */;
    %150 = %143.3;
    %151 = @func_2424(%145) /* ty=Tensor[(16, 4, 15), int64] */;
    (%146, %var_5864, %var_5865, %147, %148, %149, %150, %var_5899, %var_5900, %151, meta[relay.Constant][7] /* ty=Tensor[(960, 1), int64] */)
  };
  %152(%var_5919, %var_5920, %var_5921, %var_5922, %var_5923) /* ty=(Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) */
}

def @func_6331(%var_6327: Tensor[(448), int64]) -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64], Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], float64, Tensor[(2, 1092), float64]) {
  %153 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %154 = @func_4585() /* ty=(Tensor[(7, 10, 9), float64], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %155 = @func_6246() /* ty=(Tensor[(750), float64],) */;
  %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %157 = cast(%var_6327, dtype="int64") /* ty=Tensor[(448), int64] */;
  %158 = %155.0;
  %159 = cast(%158, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %160 = cast(-9.38155f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %161 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 1092), float64] */, dtype="float64") /* ty=Tensor[(2, 1092), float64] */;
  %162 = reshape(%156, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %163 = reshape(%157, newshape=[112, 4]) /* ty=Tensor[(112, 4), int64] */;
  %164 = reshape(%159, newshape=[5, 150]) /* ty=Tensor[(5, 150), uint8] */;
  %165 = reshape(%160, newshape=[]) /* ty=float64 */;
  %166 = reshape(%161, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %167 = @func_5918(%162, %163, %164, %165, %166) /* ty=(Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) */;
  %168 = %153.0;
  %169 = %154.3;
  %170 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %171 = %167.3;
  (%168, %169, %170, %158, %171, meta[relay.Constant][8] /* ty=Tensor[(32), float32] */, %var_6327, -9.38155f64 /* ty=float64 */, meta[relay.Constant][9] /* ty=Tensor[(2, 1092), float64] */)
}

def @func_1952(%var_1944: uint32, %var_1945: Tensor[(14, 14, 11), uint32]) -> (Tensor[(14, 14, 11), uint32],) {
  %172 = cast(%var_1944, dtype="uint32") /* ty=uint32 */;
  %173 = cast(%var_1945, dtype="uint32") /* ty=Tensor[(14, 14, 11), uint32] */;
  %174 = logical_xor(%172, %173) /* ty=Tensor[(14, 14, 11), uint32] */;
  (%174,)
}

def @func_3380() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %175 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
  %176 = @func_2927() /* ty=Tensor[(13, 8, 16), float64] */;
  %177 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  (%175, %176, %177)
}

def @func_6657(%var_6656: Tensor[(10, 9, 8), float32]) -> (Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) {
  %182 = fn (%var_6641: Tensor[(10, 9, 8), float32]) -> (Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) {
    %178 = cast(%var_6641, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
    %179 = cast(%var_6641, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
    %180 = exp(%178) /* ty=Tensor[(10, 9, 8), float32] */;
    %181 = log(%179) /* ty=Tensor[(10, 9, 8), float64] */;
    (%180, %181)
  };
  %182(%var_6656) /* ty=(Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) */
}

def @func_6078(%var_6035: Tensor[(15, 13, 3), float64], %var_6058: Tensor[(15, 13, 3), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(15, 13, 3), float32], Tensor[(15, 13, 3), uint8], Tensor[(13, 8, 16), float64]) {
  %183 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %184 = @func_5482() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) */;
  %185 = %184.2;
  %186 = cast(%var_6035, dtype="float32") /* ty=Tensor[(15, 13, 3), float32] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="float32") /* ty=Tensor[(15, 13, 3), float32] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %190 = cast(%var_6058, dtype="uint8") /* ty=Tensor[(15, 13, 3), uint8] */;
  %191 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%185, dtype="uint8") /* ty=Tensor[(15, 13, 3), uint8] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %194 = %183.2;
  %195 = power(%188, %189) /* ty=Tensor[(15, 13, 3), float32] */;
  %196 = subtract(%192, %193) /* ty=Tensor[(15, 13, 3), uint8] */;
  %197 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
  (%194, %195, %196, %197)
}

def @func_3554(%var_3528: Tensor[(13, 8, 16), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) {
  %198 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %199 = %198.0;
  %200 = cast(%var_3528, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %204 = @func_856() /* ty=(Tensor[(3, 9, 3), float32],) */;
  %205 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %206 = floor_divide(%202, %203) /* ty=Tensor[(13, 8, 16), float64] */;
  %207 = %204.0;
  %208 = %205.1;
  (%206, %207, %208)
}

def @func_217() -> Tensor[(13, 8, 16), float64] {
  @func_215() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_5379() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %209 = @func_3032() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %210 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %211 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %212 = %209.0;
  %213 = %210.1;
  %214 = %211.1;
  (%212, %213, %214)
}

def @func_5381() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_5379() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_1505() -> Tensor[(13, 8, 16), float64] {
  %215 = fn () -> Tensor[(13, 8, 16), float64] {
    @func_61() /* ty=Tensor[(13, 8, 16), float64] */
  };
  %215() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2929() -> Tensor[(13, 8, 16), float64] {
  @func_2927() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2927() -> Tensor[(13, 8, 16), float64] {
  %216 = @func_2908() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %216.0
}

def @func_1325() -> (Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) {
  %231 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) {
    %217 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %218 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
    %219 = %218.2;
    %220 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 5, 10), bool] */, dtype="int64") /* ty=Tensor[(15, 5, 10), int64] */;
    %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %222 = cast(%219, dtype="int64") /* ty=Tensor[(15, 5, 10), int64] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %224 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %225 = @func_856() /* ty=(Tensor[(3, 9, 3), float32],) */;
    %226 = %217.0;
    %227 = bitwise_and(%222, %223) /* ty=Tensor[(15, 5, 10), int64] */;
    %228 = %224.0;
    %229 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
    %230 = %225.0;
    (%226, %227, %228, %229, %230)
  };
  %231() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */
}

def @func_834() -> (Tensor[(13, 8, 16), float64],) {
  %233 = fn () -> (Tensor[(13, 8, 16), float64],) {
    %232 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
    (%232,)
  };
  %233() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_417() -> Tensor[(3, 9, 3), float64] {
  @func_415() /* ty=Tensor[(3, 9, 3), float64] */
}

def @func_6756() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) {
  @func_6754() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) */
}

def @func_174() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %236 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %234 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
    %235 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
    (%234, %235)
  };
  %236() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_804() -> (Tensor[(13, 8, 16), float64],) {
  %237 = @func_313() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %238 = %237.0;
  (%238,)
}

def @func_544() -> Tensor[(13, 8, 16), float64] {
  @func_542() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2471() -> Tensor[(13, 8, 16), float64] {
  @func_2469() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_5330(%var_5329: Tensor[(13, 8, 16), float64]) -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), int16]) {
  %247 = fn (%var_5321: Tensor[(13, 8, 16), float64]) -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), int16]) {
    %239 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
    %240 = @func_3060() /* ty=Tensor[(13, 8, 16), float64] */;
    %241 = cast(%var_5321, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
    %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%240, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %245 = %239.4;
    %246 = minimum(%243, %244) /* ty=Tensor[(13, 8, 16), int16] */;
    (%245, %246)
  };
  %247(%var_5329) /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), int16]) */
}

def @func_941() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
  %267 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
    %248 = @func_833() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %249 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %250 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %251 = %249.0;
    %252 = cast(%251, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
    %253 = reshape(%252, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
    %254 = @func_689(%253) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
    %255 = %254.1;
    %256 = cast(%255, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
    %257 = sin(%256) /* ty=Tensor[(13, 8, 16), float32] */;
    %258 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %259 = %258.0;
    %260 = cast(%259, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
    %261 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%257, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %264 = %248.0;
    %265 = %250.1;
    %266 = equal(%262, %263) /* ty=Tensor[(13, 8, 16), bool] */;
    (%264, %251, %265, %266)
  };
  %267() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */
}

def @func_1078(%var_1062: Tensor[(448), int64], %var_1063: Tensor[(1, 750), uint8]) -> (Tensor[(3, 9, 3), float64], Tensor[(210), uint32], Tensor[(448), int64], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64]) {
  %268 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %269 = cast(%var_1062, dtype="int64") /* ty=Tensor[(448), int64] */;
  %270 = cast(%var_1062, dtype="int64") /* ty=Tensor[(448), int64] */;
  %271 = cast(%var_1063, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
  %272 = reshape(%269, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %273 = reshape(%270, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %274 = reshape(%271, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %275 = @func_772(%272, %273, %274) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
  %276 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %277 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %278 = %268.0;
  %279 = %275.2;
  %280 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  %281 = %276.0;
  %282 = %277.0;
  (%278, %279, %var_1062, %var_1063, %280, %281, %282)
}

def @func_4023(%var_4022: float64) -> (Tensor[(11, 4, 14), float64],) {
  %286 = fn (%var_4014: float64) -> (Tensor[(11, 4, 14), float64],) {
    %283 = cast(%var_4014, dtype="float64") /* ty=float64 */;
    %284 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 4, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
    %285 = minimum(%283, %284) /* ty=Tensor[(11, 4, 14), float64] */;
    (%285,)
  };
  %286(%var_4022) /* ty=(Tensor[(11, 4, 14), float64],) */
}

def @func_5821(%var_5819: Tensor[(6, 11, 6), uint64]) -> (Tensor[(6, 11, 6), uint64], Tensor[(13, 8, 16), float64]) {
  @func_5818(%var_5819) /* ty=(Tensor[(6, 11, 6), uint64], Tensor[(13, 8, 16), float64]) */
}

def @func_6962(%var_6960: float64) -> (Tensor[(6, 4, 10), float64], Tensor[(11, 4, 14), float64], float64, Tensor[(6, 4, 10), int8], Tensor[(13, 8, 16), float64]) {
  @func_6959(%var_6960) /* ty=(Tensor[(6, 4, 10), float64], Tensor[(11, 4, 14), float64], float64, Tensor[(6, 4, 10), int8], Tensor[(13, 8, 16), float64]) */
}

def @func_4306(%var_4304: Tensor[(7, 10, 9), float64]) -> (Tensor[(7, 10, 9), int8], Tensor[(14, 15, 12), float64]) {
  @func_4303(%var_4304) /* ty=(Tensor[(7, 10, 9), int8], Tensor[(14, 15, 12), float64]) */
}

def @func_1623(%var_1621: Tensor[(1, 4), float32]) -> (Tensor[(1, 4), float32],) {
  @func_1620(%var_1621) /* ty=(Tensor[(1, 4), float32],) */
}

def @func_2271(%var_2270: Tensor[(15, 13, 3), float64]) -> Tensor[(15, 13, 3), float64] {
  %288 = fn (%var_2265: Tensor[(15, 13, 3), float64]) -> Tensor[(15, 13, 3), float64] {
    %287 = cast(%var_2265, dtype="float64") /* ty=Tensor[(15, 13, 3), float64] */;
    erf(%287) /* ty=Tensor[(15, 13, 3), float64] */
  };
  %288(%var_2270) /* ty=Tensor[(15, 13, 3), float64] */
}

def @func_3746(%var_3741: Tensor[(12, 7), float32]) -> (Tensor[(12, 7), float32],) {
  %289 = cast(%var_3741, dtype="float32") /* ty=Tensor[(12, 7), float32] */;
  %290 = acos(%289) /* ty=Tensor[(12, 7), float32] */;
  (%290,)
}

def @func_5286() -> Tensor[(750), uint8] {
  @func_5284() /* ty=Tensor[(750), uint8] */
}

def @func_3749(%var_3747: Tensor[(12, 7), float32]) -> (Tensor[(12, 7), float32],) {
  @func_3746(%var_3747) /* ty=(Tensor[(12, 7), float32],) */
}

def @func_1693() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_1691() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_3388() -> Tensor[(13, 8, 16), float64] {
  %291 = @func_2908() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %291.0
}

def @func_3034() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_3032() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_3170() -> (Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64]) {
  %292 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %293 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %294 = %292.0;
  %295 = %293.0;
  (%294, %295)
}

def @func_1451(%var_1449: float64, %var_1450: Tensor[(2184, 1), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) {
  @func_1447(%var_1449, %var_1450) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) */
}

def @func_5405(%var_5398: Tensor[(750), uint8]) -> (Tensor[(3, 9, 3), float64], Tensor[(750), uint8], Tensor[(750), uint8]) {
  %296 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %297 = cast(%var_5398, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %298 = reshape(%297, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %299 = @func_2638(%298) /* ty=(Tensor[(3, 9, 3), int8], Tensor[(448), int64], Tensor[(448), int64], Tensor[(750), uint8]) */;
  %300 = %296.0;
  %301 = %299.3;
  (%300, %301, %var_5398)
}

def @func_6265() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %305 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %302 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %303 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
    %304 = %302.0;
    (%303, %304)
  };
  %305() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_962() -> (Tensor[(3, 9, 3), float64],) {
  @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */
}

def @func_298() -> Tensor[(13, 8, 16), float64] {
  @func_296() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_3607() -> (Tensor[(13, 8, 16), float64],) {
  %306 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %307 = %306.0;
  (%307,)
}

def @func_2564() -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) {
  %311 = fn () -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) {
    %308 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
    %309 = %308.2;
    %310 = @func_542() /* ty=Tensor[(13, 8, 16), float64] */;
    (%309, %310)
  };
  %311() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) */
}

def @func_5554(%var_5552: Tensor[(3, 10, 12), int32]) -> (Tensor[(3, 10, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), bool], Tensor[(1664), float64]) {
  @func_5551(%var_5552) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), bool], Tensor[(1664), float64]) */
}

def @func_2034(%var_2032: Tensor[(9, 15, 11), float64]) -> (Tensor[(9, 15, 11), float64],) {
  @func_2031(%var_2032) /* ty=(Tensor[(9, 15, 11), float64],) */
}

def @func_5595() -> Tensor[(7, 9, 14), float32] {
  %313 = fn () -> Tensor[(7, 9, 14), float32] {
    %312 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
    sin(%312) /* ty=Tensor[(7, 9, 14), float32] */
  };
  %313() /* ty=Tensor[(7, 9, 14), float32] */
}

def @func_6882() -> (Tensor[(3, 9, 3), float64],) {
  %316 = fn () -> (Tensor[(3, 9, 3), float64],) {
    %314 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
    %315 = %314.0;
    (%315,)
  };
  %316() /* ty=(Tensor[(3, 9, 3), float64],) */
}

def @main(%var_7108: Tensor[(15, 5, 10), float64], %var_7114: Tensor[(1274), uint32]) -> (Tensor[(7, 10, 9), float64], Tensor[(5, 7, 7), bool], Tensor[(245), uint16], Tensor[(448), int64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(1664), float64], Tensor[(15, 5, 10), bool], Tensor[(13, 14, 7), uint32], Tensor[(1274), uint32], Tensor[(15, 5, 10), float32]) {
  %317 = cast(meta[relay.Constant][13] /* ty=Tensor[(245), uint16] */, dtype="uint16") /* ty=Tensor[(245), uint16] */;
  %318 = cast(meta[relay.Constant][13] /* ty=Tensor[(245), uint16] */, dtype="uint16") /* ty=Tensor[(245), uint16] */;
  %319 = cast(meta[relay.Constant][14] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %320 = reshape(%317, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), uint16] */;
  %321 = reshape(%318, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), uint16] */;
  %322 = reshape(%319, newshape=[448]) /* ty=Tensor[(448), int64] */;
  %323 = @func_6992(%320, %321, %322) /* ty=(Tensor[(5, 7, 7), bool], Tensor[(4, 14, 8), bool], Tensor[(448), int64], Tensor[(750), uint8]) */;
  %324 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %325 = %324.2;
  %326 = cast(%325, dtype="uint8") /* ty=Tensor[(15, 5, 10), uint8] */;
  %327 = reshape(%326, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %328 = @func_1772(%327) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) */;
  %329 = cast(meta[relay.Constant][15] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %330 = reshape(%329, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %331 = @func_3557(%330) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) */;
  %332 = @func_593() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %333 = %332.2;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %335 = acosh(%334) /* ty=Tensor[(15, 5, 10), float64] */;
  %336 = cast(%var_7108, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = cast(%var_7114, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %341 = reshape(%340, newshape=[13, 14, 7]) /* ty=Tensor[(13, 14, 7), uint32] */;
  %342 = @func_5520(%341) /* ty=(Tensor[(13, 14, 7), uint32],) */;
  %343 = cast(%333, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %344 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%335, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %347 = power(%345, %346) /* ty=Tensor[(15, 5, 10), float64] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(15, 5, 10), float32] */;
  %349 = @func_3434() /* ty=Tensor[(7, 10, 9), float64] */;
  %350 = %323.0;
  %351 = %328.1;
  %352 = %331.0;
  %353 = greater(%338, %339) /* ty=Tensor[(15, 5, 10), bool] */;
  %354 = %342.0;
  %355 = exp(%348) /* ty=Tensor[(15, 5, 10), float32] */;
  (%349, %350, meta[relay.Constant][13] /* ty=Tensor[(245), uint16] */, meta[relay.Constant][14] /* ty=Tensor[(448), int64] */, %351, %352, meta[relay.Constant][15] /* ty=Tensor[(1664), float64] */, %353, %354, %var_7114, %355)
}

def @func_2937(%var_2933: Tensor[(7, 6, 1), float64]) -> Tensor[(7, 6, 1), float64] {
  %356 = cast(%var_2933, dtype="float64") /* ty=Tensor[(7, 6, 1), float64] */;
  cos(%356) /* ty=Tensor[(7, 6, 1), float64] */
}

def @func_6280() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_6278() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_5225() -> (Tensor[(15, 5, 10), float64], Tensor[(14, 15, 12), float64], Tensor[(630), float64], Tensor[(3, 9, 3), uint16]) {
  @func_5223() /* ty=(Tensor[(15, 5, 10), float64], Tensor[(14, 15, 12), float64], Tensor[(630), float64], Tensor[(3, 9, 3), uint16]) */
}

def @func_5979() -> (Tensor[(13, 8, 16), float64],) {
  %358 = fn () -> (Tensor[(13, 8, 16), float64],) {
    %357 = @func_3737() /* ty=Tensor[(13, 8, 16), float64] */;
    (%357,)
  };
  %358() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_4303(%var_4291: Tensor[(7, 10, 9), float64]) -> (Tensor[(7, 10, 9), int8], Tensor[(14, 15, 12), float64]) {
  %359 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %360 = %359.3;
  %361 = cast(%var_4291, dtype="int8") /* ty=Tensor[(7, 10, 9), int8] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="int8") /* ty=Tensor[(7, 10, 9), int8] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %365 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %366 = maximum(%363, %364) /* ty=Tensor[(7, 10, 9), int8] */;
  %367 = %365.0;
  (%366, %367)
}

def @func_5223() -> (Tensor[(15, 5, 10), float64], Tensor[(14, 15, 12), float64], Tensor[(630), float64], Tensor[(3, 9, 3), uint16]) {
  %368 = @func_1923() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool]) */;
  %369 = %368.2;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(15, 5, 10), float64] */;
  %371 = cast(meta[relay.Constant][16] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %372 = reshape(%371, newshape=[7, 10, 9]) /* ty=Tensor[(7, 10, 9), float64] */;
  %373 = @func_4303(%372) /* ty=(Tensor[(7, 10, 9), int8], Tensor[(14, 15, 12), float64]) */;
  %374 = @func_1666() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %375 = asin(%370) /* ty=Tensor[(15, 5, 10), float64] */;
  %376 = %373.1;
  %377 = %374.0;
  (%375, %376, meta[relay.Constant][16] /* ty=Tensor[(630), float64] */, %377)
}

def @func_3142(%var_3139: Tensor[(448), int64]) -> (Tensor[(13, 8, 16), float64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(750), uint8]) {
  %378 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
  %379 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %380 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
  %384 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %387 = multiply(%385, %386) /* ty=Tensor[(2, 12, 16), uint16] */;
  %388 = cast(%387, dtype="float64") /* ty=Tensor[(2, 12, 16), float64] */;
  %389 = cast(%var_3139, dtype="int64") /* ty=Tensor[(448), int64] */;
  %390 = cast(%var_3139, dtype="int64") /* ty=Tensor[(448), int64] */;
  %391 = cast(meta[relay.Constant][19] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %392 = reshape(%389, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %393 = reshape(%390, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %394 = reshape(%391, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %395 = @func_772(%392, %393, %394) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
  %396 = %378.0;
  %397 = greater(%381, %382) /* ty=Tensor[(2, 12, 16), bool] */;
  %398 = sinh(%388) /* ty=Tensor[(2, 12, 16), float64] */;
  %399 = %395.6;
  (%396, %397, %398, %399, %var_3139, meta[relay.Constant][19] /* ty=Tensor[(750), uint8] */)
}

def @func_3557(%var_3555: Tensor[(13, 8, 16), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) {
  @func_3554(%var_3555) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64]) */
}

def @func_289() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %404 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %400 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
    %401 = cast(%400, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
    %402 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
    %403 = atanh(%401) /* ty=Tensor[(13, 8, 16), float64] */;
    (%402, %403)
  };
  %404() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_4713() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
  %409 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) {
    %405 = @func_833() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %406 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
    %407 = %405.0;
    %408 = %406.3;
    (%407, %408)
  };
  %409() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */
}

def @func_7042() -> (Tensor[(3, 9, 3), float32],) {
  @func_7040() /* ty=(Tensor[(3, 9, 3), float32],) */
}

def @func_806() -> (Tensor[(13, 8, 16), float64],) {
  @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_4596() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %410 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
  %411 = @func_3388() /* ty=Tensor[(13, 8, 16), float64] */;
  (%410, %411)
}

def @func_4662(%var_4658: Tensor[(2, 16, 11), float32]) -> Tensor[(2, 16, 11), float32] {
  %412 = cast(%var_4658, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
  %413 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(2, 16, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%414, %415) /* ty=Tensor[(2, 16, 11), float32] */
}

def @func_3172() -> (Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64]) {
  @func_3170() /* ty=(Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_3250() -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %422 = fn () -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %416 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
    %417 = cast(%416, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
    %418 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
    %419 = exp(%417) /* ty=Tensor[(3, 9, 3), float32] */;
    %420 = %418.1;
    %421 = @func_3060() /* ty=Tensor[(13, 8, 16), float64] */;
    (%419, %420, %421)
  };
  %422() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_4536() -> Tensor[(13, 8, 16), float64] {
  %424 = fn () -> Tensor[(13, 8, 16), float64] {
    %423 = @func_833() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %423.0
  };
  %424() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2162() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) {
  %433 = fn () -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) {
    %425 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
    %426 = @func_1691() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %427 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
    %428 = %427.0;
    %429 = cast(%428, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
    %430 = %425.0;
    %431 = %426.0;
    %432 = acos(%429) /* ty=Tensor[(3, 9, 3), float32] */;
    (%430, %431, %432)
  };
  %433() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */
}

def @func_2283() -> (Tensor[(7, 10, 9), float64],) {
  @func_2281() /* ty=(Tensor[(7, 10, 9), float64],) */
}

def @func_776(%var_773: Tensor[(4, 14, 8), int64], %var_774: Tensor[(4, 14, 8), int64], %var_775: Tensor[(1, 750), uint8]) -> (Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) {
  %457 = fn (%var_721: Tensor[(4, 14, 8), int64], %var_722: Tensor[(4, 14, 8), int64], %var_743: Tensor[(1, 750), uint8]) -> (Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) {
    %434 = cast(%var_722, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
    %435 = shape_of(%var_721, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%var_721, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %438 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %439 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %440 = reshape(%438, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
    %441 = reshape(%439, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
    %442 = @func_650(%440, %441) /* ty=(Tensor[(6, 5, 7), uint32],) */;
    %443 = @func_335() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %444 = cast(%var_743, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
    %445 = cast(%var_743, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
    %446 = reshape(%444, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
    %447 = reshape(%445, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
    %448 = @func_81(%446, %447) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
    %449 = cast(%var_721, dtype="float64") /* ty=Tensor[(4, 14, 8), float64] */;
    %450 = less(%436, %437) /* ty=Tensor[(4, 14, 8), bool] */;
    %451 = %442.0;
    %452 = %443.1;
    %453 = %448.0;
    %454 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
    %455 = erf(%449) /* ty=Tensor[(4, 14, 8), float64] */;
    %456 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
    (%450, %451, meta[relay.Constant][21] /* ty=Tensor[(210), uint32] */, %452, %453, %var_743, %454, %455, %456)
  };
  %457(%var_773, %var_774, %var_775) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_6754() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) {
  %458 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %459 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %460 = @func_6246() /* ty=(Tensor[(750), float64],) */;
  %461 = %458.0;
  %462 = %459.1;
  %463 = %460.0;
  (%461, %462, %463)
}

def @func_3145(%var_3143: Tensor[(448), int64]) -> (Tensor[(13, 8, 16), float64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(750), uint8]) {
  @func_3142(%var_3143) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(750), uint8]) */
}

def @func_4946() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_4944() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_5237() -> (Tensor[(14, 15, 12), float64],) {
  %464 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
  %465 = %464.0;
  (%465,)
}

def @func_4586() -> (Tensor[(7, 10, 9), float64], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %482 = fn () -> (Tensor[(7, 10, 9), float64], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %466 = @func_2281() /* ty=(Tensor[(7, 10, 9), float64],) */;
    %467 = %466.0;
    %468 = cast(%467, dtype="float32") /* ty=Tensor[(7, 10, 9), float32] */;
    %469 = sqrt(%468) /* ty=Tensor[(7, 10, 9), float32] */;
    %470 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 10, 9), float32] */, dtype="uint64") /* ty=Tensor[(7, 10, 9), uint64] */;
    %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%469, dtype="uint64") /* ty=Tensor[(7, 10, 9), uint64] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %474 = bitwise_xor(%472, %473) /* ty=Tensor[(7, 10, 9), uint64] */;
    %475 = cast(%474, dtype="float64") /* ty=Tensor[(7, 10, 9), float64] */;
    %476 = @func_1639() /* ty=(Tensor[(14, 15, 12), float64],) */;
    %477 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
    %478 = atanh(%475) /* ty=Tensor[(7, 10, 9), float64] */;
    %479 = %476.0;
    %480 = %477.1;
    %481 = @func_3060() /* ty=Tensor[(13, 8, 16), float64] */;
    (%478, %479, %480, %481)
  };
  %482() /* ty=(Tensor[(7, 10, 9), float64], Tensor[(14, 15, 12), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_5408(%var_5406: Tensor[(750), uint8]) -> (Tensor[(3, 9, 3), float64], Tensor[(750), uint8], Tensor[(750), uint8]) {
  @func_5405(%var_5406) /* ty=(Tensor[(3, 9, 3), float64], Tensor[(750), uint8], Tensor[(750), uint8]) */
}

def @func_5642() -> Tensor[(13, 8, 16), float64] {
  %483 = fn () -> Tensor[(13, 8, 16), float64] {
    @func_4535() /* ty=Tensor[(13, 8, 16), float64] */
  };
  %483() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_5729() -> (Tensor[(13, 8, 16), float32], Tensor[(12, 7), float32], Tensor[(84), float32]) {
  @func_5727() /* ty=(Tensor[(13, 8, 16), float32], Tensor[(12, 7), float32], Tensor[(84), float32]) */
}

def @func_1229() -> (Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) {
  %484 = @func_542() /* ty=Tensor[(13, 8, 16), float64] */;
  %485 = @func_1115() /* ty=Tensor[(7, 10, 9), float64] */;
  (%484, %485)
}

def @func_2281() -> (Tensor[(7, 10, 9), float64],) {
  %486 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %487 = %486.3;
  (%487,)
}

def @func_4774() -> (Tensor[(750), uint8],) {
  %490 = fn () -> (Tensor[(750), uint8],) {
    %488 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
    %489 = %488.3;
    (%489,)
  };
  %490() /* ty=(Tensor[(750), uint8],) */
}

def @func_5517(%var_5513: Tensor[(13, 14, 7), uint32]) -> (Tensor[(13, 14, 7), uint32],) {
  %491 = cast(%var_5513, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
  %492 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 14, 7), uint32] */, dtype="uint32") /* ty=Tensor[(13, 14, 7), uint32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %495 = add(%493, %494) /* ty=Tensor[(13, 14, 7), uint32] */;
  (%495,)
}

def @func_1198() -> (Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) {
  %506 = fn () -> (Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) {
    %496 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
    %497 = %496.0;
    %498 = cast(%497, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
    %499 = asinh(%498) /* ty=Tensor[(3, 9, 3), float32] */;
    %500 = cast(%497, dtype="uint16") /* ty=Tensor[(3, 9, 3), uint16] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%499, dtype="uint16") /* ty=Tensor[(3, 9, 3), uint16] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %504 = bitwise_and(%502, %503) /* ty=Tensor[(3, 9, 3), uint16] */;
    %505 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
    (%504, %505)
  };
  %506() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */
}

def @func_2339(%var_2337: Tensor[(5, 13, 2), uint8]) -> (Tensor[(5, 13, 2), uint8], Tensor[(5, 13, 2), float32], Tensor[(13, 8, 16), float64]) {
  @func_2336(%var_2337) /* ty=(Tensor[(5, 13, 2), uint8], Tensor[(5, 13, 2), float32], Tensor[(13, 8, 16), float64]) */
}

def @func_2389() -> (Tensor[(13, 8, 16), float64],) {
  %509 = fn () -> (Tensor[(13, 8, 16), float64],) {
    %507 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %508 = %507.2;
    (%508,)
  };
  %509() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_63() -> Tensor[(13, 8, 16), float64] {
  @func_61() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_2115() -> Tensor[(13, 8, 16), float64] {
  @func_2113() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_7040() -> (Tensor[(3, 9, 3), float32],) {
  %510 = @func_2161() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32]) */;
  %511 = %510.2;
  (%511,)
}

def @func_4067(%var_4064: Tensor[(9, 8, 14), uint8], %var_4065: Tensor[(9, 8, 14), uint8], %var_4066: Tensor[(9, 8, 14), uint8]) -> (Tensor[(9, 8, 14), uint8], Tensor[(13, 8, 16), float64], Tensor[(9, 8, 14), int8]) {
  @func_4062(%var_4064, %var_4065, %var_4066) /* ty=(Tensor[(9, 8, 14), uint8], Tensor[(13, 8, 16), float64], Tensor[(9, 8, 14), int8]) */
}

def @func_1923() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool]) {
  %512 = @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %513 = @func_1484() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %514 = %513.0;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %516 = @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */;
  %517 = %512.0;
  %518 = cos(%515) /* ty=Tensor[(13, 8, 16), float64] */;
  %519 = %516.2;
  (%517, %518, %519)
}

def @func_1925() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool]) {
  @func_1923() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool]) */
}

def @func_335() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %520 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
  %521 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %522 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  (%520, %521, %522)
}

def @func_395() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %527 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %523 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
    %524 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
    %525 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
    %526 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
    (%523, %524, %525, %526)
  };
  %527() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_3390() -> Tensor[(13, 8, 16), float64] {
  @func_3388() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_296() -> Tensor[(13, 8, 16), float64] {
  @func_215() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_337() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_335() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_6498() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(448), int64], Tensor[(50, 15), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %528 = @func_990() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */;
  %529 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %530 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
  %531 = cast(meta[relay.Constant][25] /* ty=Tensor[(50, 15), uint8] */, dtype="uint8") /* ty=Tensor[(50, 15), uint8] */;
  %532 = reshape(%529, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %533 = reshape(%530, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
  %534 = reshape(%531, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
  %535 = @func_772(%532, %533, %534) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
  %536 = cast(meta[relay.Constant][25] /* ty=Tensor[(50, 15), uint8] */, dtype="float32") /* ty=Tensor[(50, 15), float32] */;
  %537 = %528.0;
  %538 = %535.3;
  %539 = asinh(%536) /* ty=Tensor[(50, 15), float32] */;
  %540 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
  %541 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
  (%537, %538, meta[relay.Constant][24] /* ty=Tensor[(448), int64] */, %539, %540, %541)
}

def @func_1691() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %542 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %543 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %544 = %542.0;
  (%543, %544)
}

def @func_6992(%var_6989: Tensor[(5, 7, 7), uint16], %var_6990: Tensor[(5, 7, 7), uint16], %var_6991: Tensor[(448), int64]) -> (Tensor[(5, 7, 7), bool], Tensor[(4, 14, 8), bool], Tensor[(448), int64], Tensor[(750), uint8]) {
  %558 = fn (%var_6967: Tensor[(5, 7, 7), uint16], %var_6968: Tensor[(5, 7, 7), uint16], %var_6985: Tensor[(448), int64]) -> (Tensor[(5, 7, 7), bool], Tensor[(4, 14, 8), bool], Tensor[(448), int64], Tensor[(750), uint8]) {
    %545 = cast(%var_6968, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
    %546 = shape_of(%var_6967, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%var_6967, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %549 = cast(%var_6985, dtype="int64") /* ty=Tensor[(448), int64] */;
    %550 = cast(%var_6985, dtype="int64") /* ty=Tensor[(448), int64] */;
    %551 = cast(meta[relay.Constant][26] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %552 = reshape(%549, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
    %553 = reshape(%550, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), int64] */;
    %554 = reshape(%551, newshape=[1, 750]) /* ty=Tensor[(1, 750), uint8] */;
    %555 = @func_772(%552, %553, %554) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(1, 750), uint8], Tensor[(13, 8, 16), float64], Tensor[(4, 14, 8), float64], Tensor[(13, 8, 16), float64]) */;
    %556 = less(%547, %548) /* ty=Tensor[(5, 7, 7), bool] */;
    %557 = %555.0;
    (%556, %557, %var_6985, meta[relay.Constant][26] /* ty=Tensor[(750), uint8] */)
  };
  %558(%var_6989, %var_6990, %var_6991) /* ty=(Tensor[(5, 7, 7), bool], Tensor[(4, 14, 8), bool], Tensor[(448), int64], Tensor[(750), uint8]) */
}

def @func_61() -> Tensor[(13, 8, 16), float64] {
  %559 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %560 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(13, 8, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%561, %562) /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_6082(%var_6080: Tensor[(15, 13, 3), float64], %var_6081: Tensor[(15, 13, 3), float64]) -> (Tensor[(13, 8, 16), float64], Tensor[(15, 13, 3), float32], Tensor[(15, 13, 3), uint8], Tensor[(13, 8, 16), float64]) {
  @func_6078(%var_6080, %var_6081) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 13, 3), float32], Tensor[(15, 13, 3), uint8], Tensor[(13, 8, 16), float64]) */
}

def @func_991() -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) {
  %567 = fn () -> (Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) {
    %563 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
    %564 = @func_394() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %565 = %563.0;
    %566 = %564.3;
    (%565, %566)
  };
  %567() /* ty=(Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_6188() -> (Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], float64, Tensor[(2184), float64]) {
  %575 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], float64, Tensor[(2184), float64]) {
    %568 = cast(-9.41968f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %569 = cast(meta[relay.Constant][29] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %570 = reshape(%568, newshape=[]) /* ty=float64 */;
    %571 = reshape(%569, newshape=[2184, 1]) /* ty=Tensor[(2184, 1), float64] */;
    %572 = @func_1447(%570, %571) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) */;
    %573 = @func_1504() /* ty=Tensor[(13, 8, 16), float64] */;
    %574 = %572.5;
    (%573, %574, -9.41968f64 /* ty=float64 */, meta[relay.Constant][29] /* ty=Tensor[(2184), float64] */)
  };
  %575() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], float64, Tensor[(2184), float64]) */
}

def @func_5520(%var_5518: Tensor[(13, 14, 7), uint32]) -> (Tensor[(13, 14, 7), uint32],) {
  @func_5517(%var_5518) /* ty=(Tensor[(13, 14, 7), uint32],) */
}

def @func_3801(%var_3800: Tensor[(7, 13, 6), int8]) -> (Tensor[(7, 13, 6), bool], Tensor[(7, 13, 6), bool]) {
  %588 = fn (%var_3776: Tensor[(7, 13, 6), int8]) -> (Tensor[(7, 13, 6), bool], Tensor[(7, 13, 6), bool]) {
    %576 = cast(%var_3776, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %577 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(7, 13, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 13, 6), int8] */, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %580 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 13, 6), int8] */, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
    %581 = cosh(%580) /* ty=Tensor[(7, 13, 6), float32] */;
    %582 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 13, 6), int8] */, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%581, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %586 = greater(%578, %579) /* ty=Tensor[(7, 13, 6), bool] */;
    %587 = logical_or(%584, %585) /* ty=Tensor[(7, 13, 6), bool] */;
    (%586, %587)
  };
  %588(%var_3800) /* ty=(Tensor[(7, 13, 6), bool], Tensor[(7, 13, 6), bool]) */
}

def @func_3434() -> Tensor[(7, 10, 9), float64] {
  @func_1115() /* ty=Tensor[(7, 10, 9), float64] */
}

def @func_2469() -> Tensor[(13, 8, 16), float64] {
  @func_296() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_1151() -> (Tensor[(13, 8, 16), float64],) {
  @func_1149() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_6248() -> (Tensor[(750), float64],) {
  @func_6246() /* ty=(Tensor[(750), float64],) */
}

def @func_207() -> Tensor[(13, 8, 16), float64] {
  %590 = fn () -> Tensor[(13, 8, 16), float64] {
    %589 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %589.0
  };
  %590() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_3609() -> (Tensor[(13, 8, 16), float64],) {
  @func_3607() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_3061() -> Tensor[(13, 8, 16), float64] {
  %591 = fn () -> Tensor[(13, 8, 16), float64] {
    @func_1504() /* ty=Tensor[(13, 8, 16), float64] */
  };
  %591() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_6959(%var_6940: float64) -> (Tensor[(6, 4, 10), float64], Tensor[(11, 4, 14), float64], float64, Tensor[(6, 4, 10), int8], Tensor[(13, 8, 16), float64]) {
  %592 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 10), float32] */;
  %593 = tan(%592) /* ty=Tensor[(6, 4, 10), float32] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %595 = cast(%var_6940, dtype="float64") /* ty=float64 */;
  %596 = reshape(%595, newshape=[]) /* ty=float64 */;
  %597 = @func_4021(%596) /* ty=(Tensor[(11, 4, 14), float64],) */;
  %598 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 4, 10), float32] */, dtype="uint8") /* ty=Tensor[(6, 4, 10), uint8] */;
  %599 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%593, dtype="uint8") /* ty=Tensor[(6, 4, 10), uint8] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %602 = right_shift(%600, %601) /* ty=Tensor[(6, 4, 10), uint8] */;
  %603 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 4, 10), uint8] */, dtype="int8") /* ty=Tensor[(6, 4, 10), int8] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="int8") /* ty=Tensor[(6, 4, 10), int8] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %607 = erf(%594) /* ty=Tensor[(6, 4, 10), float64] */;
  %608 = %597.0;
  %609 = multiply(%605, %606) /* ty=Tensor[(6, 4, 10), int8] */;
  %610 = @func_5641() /* ty=Tensor[(13, 8, 16), float64] */;
  (%607, %608, %var_6940, %609, %610)
}

def @func_591() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) {
  %611 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %612 = cast(meta[relay.Constant][33] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %613 = cast(meta[relay.Constant][33] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %614 = reshape(%612, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %615 = reshape(%613, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %616 = @func_81(%614, %615) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
  %617 = %611.0;
  %618 = @func_61() /* ty=Tensor[(13, 8, 16), float64] */;
  %619 = %616.0;
  (%617, %618, %619, meta[relay.Constant][33] /* ty=Tensor[(750), uint8] */)
}

def @func_1149() -> (Tensor[(13, 8, 16), float64],) {
  %620 = @func_542() /* ty=Tensor[(13, 8, 16), float64] */;
  (%620,)
}

def @func_1956(%var_1954: uint32, %var_1955: Tensor[(14, 14, 11), uint32]) -> (Tensor[(14, 14, 11), uint32],) {
  @func_1952(%var_1954, %var_1955) /* ty=(Tensor[(14, 14, 11), uint32],) */
}

def @func_5669(%var_5656: Tensor[(15, 13, 3), float64]) -> Tensor[(15, 13, 3), uint32] {
  %621 = @func_5482() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) */;
  %622 = %621.2;
  %623 = cast(%var_5656, dtype="uint32") /* ty=Tensor[(15, 13, 3), uint32] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="uint32") /* ty=Tensor[(15, 13, 3), uint32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%625, %626) /* ty=Tensor[(15, 13, 3), uint32] */
}

def @func_6868() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) {
  %631 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) {
    %627 = @func_6246() /* ty=(Tensor[(750), float64],) */;
    %628 = @func_1504() /* ty=Tensor[(13, 8, 16), float64] */;
    %629 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
    %630 = %627.0;
    (%628, %629, %630)
  };
  %631() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64]) */
}

def @func_6712(%var_6711: Tensor[(972), bool]) -> (Tensor[(13, 8, 16), bool], Tensor[(12, 9, 9), bool], bool, Tensor[(972), float64]) {
  %642 = fn (%var_6702: Tensor[(972), bool]) -> (Tensor[(13, 8, 16), bool], Tensor[(12, 9, 9), bool], bool, Tensor[(972), float64]) {
    %632 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
    %633 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %634 = cast(%var_6702, dtype="bool") /* ty=Tensor[(972), bool] */;
    %635 = reshape(%633, newshape=[]) /* ty=bool */;
    %636 = reshape(%634, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), bool] */;
    %637 = @func_4457(%635, %636) /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) */;
    %638 = cast(%var_6702, dtype="float64") /* ty=Tensor[(972), float64] */;
    %639 = %632.3;
    %640 = %637.0;
    %641 = acosh(%638) /* ty=Tensor[(972), float64] */;
    (%639, %640, False /* ty=bool */, %641)
  };
  %642(%var_6711) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(12, 9, 9), bool], bool, Tensor[(972), float64]) */
}

def @func_4665(%var_4663: Tensor[(2, 16, 11), float32]) -> Tensor[(2, 16, 11), float32] {
  @func_4662(%var_4663) /* ty=Tensor[(2, 16, 11), float32] */
}

def @func_1379(%var_1326: float64, %var_1327: Tensor[(12, 13, 14), float64]) -> (Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) {
  %643 = cast(%var_1326, dtype="float64") /* ty=float64 */;
  %644 = cast(%var_1327, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %645 = cast(meta[relay.Constant][34] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %646 = cast(meta[relay.Constant][34] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
  %647 = reshape(%645, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %648 = reshape(%646, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
  %649 = @func_81(%647, %648) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
  %650 = @func_296() /* ty=Tensor[(13, 8, 16), float64] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %652 = cast(%650, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
  %653 = floor_mod(%643, %644) /* ty=Tensor[(12, 13, 14), float64] */;
  %654 = %649.1;
  %655 = erf(%651) /* ty=Tensor[(13, 8, 16), float32] */;
  %656 = log10(%652) /* ty=Tensor[(13, 8, 16), float64] */;
  (%653, %654, meta[relay.Constant][34] /* ty=Tensor[(750), uint8] */, %655, %656)
}

def @func_691(%var_690: Tensor[(13, 8, 16), float64]) -> (Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) {
  %669 = fn (%var_676: Tensor[(13, 8, 16), float64]) -> (Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) {
    %657 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %658 = %657.1;
    %659 = cast(%var_676, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%658, dtype="bool") /* ty=Tensor[(13, 8, 16), bool] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %663 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 8, 16), float64] */, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
    %664 = shape_of(%var_676, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%var_676, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %667 = greater(%661, %662) /* ty=Tensor[(13, 8, 16), bool] */;
    %668 = mod(%665, %666) /* ty=Tensor[(13, 8, 16), float32] */;
    (%667, %668)
  };
  %669(%var_690) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */
}

def @func_1383(%var_1381: float64, %var_1382: Tensor[(12, 13, 14), float64]) -> (Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) {
  @func_1379(%var_1381, %var_1382) /* ty=(Tensor[(12, 13, 14), float64], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float32], Tensor[(13, 8, 16), float64]) */
}

def @func_6334(%var_6332: Tensor[(448), int64]) -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64], Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], float64, Tensor[(2, 1092), float64]) {
  @func_6331(%var_6332) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(750), float64], Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], float64, Tensor[(2, 1092), float64]) */
}

def @func_5562() -> Tensor[(13, 8, 16), float64] {
  %671 = fn () -> Tensor[(13, 8, 16), float64] {
    %670 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
    %670.0
  };
  %671() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_6550(%var_6540: Tensor[(546), int8]) -> (Tensor[(13, 8, 16), float64], Tensor[(7, 13, 6), bool], Tensor[(546), int8], Tensor[(13, 8, 16), bool]) {
  %672 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %673 = cast(%var_6540, dtype="int8") /* ty=Tensor[(546), int8] */;
  %674 = reshape(%673, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), int8] */;
  %675 = @func_3799(%674) /* ty=(Tensor[(7, 13, 6), bool], Tensor[(7, 13, 6), bool]) */;
  %676 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
  %677 = %672.1;
  %678 = %675.0;
  %679 = %676.3;
  (%677, %678, %var_6540, %679)
}

def @func_2113() -> Tensor[(13, 8, 16), float64] {
  @func_542() /* ty=Tensor[(13, 8, 16), float64] */
}

def @func_593() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) {
  @func_591() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), bool], Tensor[(750), uint8]) */
}

def @func_4857(%var_4829: Tensor[(1, 4, 9), float64], %var_4837: Tensor[(12, 70), int16]) -> (Tensor[(1, 4, 9), float64], Tensor[(10, 7, 12), int16], Tensor[(12, 70), int16]) {
  %680 = cast(%var_4829, dtype="float64") /* ty=Tensor[(1, 4, 9), float64] */;
  %681 = cast(%var_4837, dtype="int16") /* ty=Tensor[(12, 70), int16] */;
  %682 = reshape(%681, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), int16] */;
  %683 = log10(%680) /* ty=Tensor[(1, 4, 9), float64] */;
  %684 = @func_4613(%682) /* ty=Tensor[(10, 7, 12), int16] */;
  (%683, %684, %var_4837)
}

def @func_6246() -> (Tensor[(750), float64],) {
  %685 = @func_5284() /* ty=Tensor[(750), uint8] */;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(750), float64] */;
  %687 = sinh(%686) /* ty=Tensor[(750), float64] */;
  (%687,)
}

def @func_3436() -> Tensor[(7, 10, 9), float64] {
  @func_3434() /* ty=Tensor[(7, 10, 9), float64] */
}

def @func_960() -> (Tensor[(3, 9, 3), float64],) {
  %688 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
  (%688,)
}

def @func_5239() -> (Tensor[(14, 15, 12), float64],) {
  @func_5237() /* ty=(Tensor[(14, 15, 12), float64],) */
}

def @func_1640() -> (Tensor[(14, 15, 12), float64],) {
  %691 = fn () -> (Tensor[(14, 15, 12), float64],) {
    %689 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 12), float64] */;
    %690 = log(%689) /* ty=Tensor[(14, 15, 12), float64] */;
    (%690,)
  };
  %691() /* ty=(Tensor[(14, 15, 12), float64],) */
}

def @func_2824(%var_2823: Tensor[(6, 8, 2), int32]) -> (Tensor[(6, 8, 2), int32], Tensor[(3, 9, 3), uint16], Tensor[(6, 8, 2), int64], Tensor[(13, 8, 16), float64], Tensor[(6, 8, 2), bool]) {
  %716 = fn (%var_2792: Tensor[(6, 8, 2), int32]) -> (Tensor[(6, 8, 2), int32], Tensor[(3, 9, 3), uint16], Tensor[(6, 8, 2), int64], Tensor[(13, 8, 16), float64], Tensor[(6, 8, 2), bool]) {
    %692 = cast(%var_2792, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
    %693 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %694 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(6, 8, 2), int32] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %696 = @func_1666() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
    %697 = cast(%var_2792, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
    %698 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(6, 8, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 8, 2), int32] */, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %701 = not_equal(%699, %700) /* ty=Tensor[(6, 8, 2), bool] */;
    %702 = cast(%var_2792, dtype="int64") /* ty=Tensor[(6, 8, 2), int64] */;
    %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%701, dtype="int64") /* ty=Tensor[(6, 8, 2), int64] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %706 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
    %707 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 8, 2), int32] */, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
    %708 = shape_of(%var_2792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%var_2792, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %711 = bitwise_or(%694, %695) /* ty=Tensor[(6, 8, 2), int32] */;
    %712 = %696.0;
    %713 = bitwise_and(%704, %705) /* ty=Tensor[(6, 8, 2), int64] */;
    %714 = %706.1;
    %715 = less_equal(%709, %710) /* ty=Tensor[(6, 8, 2), bool] */;
    (%711, %712, %713, %714, %715)
  };
  %716(%var_2823) /* ty=(Tensor[(6, 8, 2), int32], Tensor[(3, 9, 3), uint16], Tensor[(6, 8, 2), int64], Tensor[(13, 8, 16), float64], Tensor[(6, 8, 2), bool]) */
}

def @func_5103(%var_5102: Tensor[(1, 840), int16]) -> (Tensor[(13, 8, 16), float64], Tensor[(10, 7, 12), int16], Tensor[(18, 2), float64], Tensor[(1, 840), int16]) {
  %725 = fn (%var_5091: Tensor[(1, 840), int16]) -> (Tensor[(13, 8, 16), float64], Tensor[(10, 7, 12), int16], Tensor[(18, 2), float64], Tensor[(1, 840), int16]) {
    %717 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %718 = cast(meta[relay.Constant][38] /* ty=Tensor[(18, 2), float64] */, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
    %719 = cast(%var_5091, dtype="int16") /* ty=Tensor[(1, 840), int16] */;
    %720 = reshape(%718, newshape=[1, 4, 9]) /* ty=Tensor[(1, 4, 9), float64] */;
    %721 = reshape(%719, newshape=[12, 70]) /* ty=Tensor[(12, 70), int16] */;
    %722 = @func_4857(%720, %721) /* ty=(Tensor[(1, 4, 9), float64], Tensor[(10, 7, 12), int16], Tensor[(12, 70), int16]) */;
    %723 = %717.1;
    %724 = %722.1;
    (%723, %724, meta[relay.Constant][38] /* ty=Tensor[(18, 2), float64] */, %var_5091)
  };
  %725(%var_5102) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(10, 7, 12), int16], Tensor[(18, 2), float64], Tensor[(1, 840), int16]) */
}

def @func_542() -> Tensor[(13, 8, 16), float64] {
  %726 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %726.1
}

def @func_5727() -> (Tensor[(13, 8, 16), float32], Tensor[(12, 7), float32], Tensor[(84), float32]) {
  %727 = @func_2469() /* ty=Tensor[(13, 8, 16), float64] */;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %729 = cast(meta[relay.Constant][39] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %730 = reshape(%729, newshape=[12, 7]) /* ty=Tensor[(12, 7), float32] */;
  %731 = @func_3746(%730) /* ty=(Tensor[(12, 7), float32],) */;
  %732 = rsqrt(%728) /* ty=Tensor[(13, 8, 16), float32] */;
  %733 = %731.0;
  (%732, %733, meta[relay.Constant][39] /* ty=Tensor[(84), float32] */)
}

def @func_4887() -> Tensor[(7, 10, 9), float32] {
  %737 = fn () -> Tensor[(7, 10, 9), float32] {
    %734 = @func_2281() /* ty=(Tensor[(7, 10, 9), float64],) */;
    %735 = %734.0;
    %736 = cast(%735, dtype="float32") /* ty=Tensor[(7, 10, 9), float32] */;
    sin(%736) /* ty=Tensor[(7, 10, 9), float32] */
  };
  %737() /* ty=Tensor[(7, 10, 9), float32] */
}

def @func_2216(%var_2212: Tensor[(1, 750), uint8]) -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float32], Tensor[(52, 32), float64], Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(1, 750), uint8]) {
  %738 = @func_1324() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(15, 5, 10), int64], Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64], Tensor[(3, 9, 3), float32]) */;
  %739 = cast(meta[relay.Constant][40] /* ty=Tensor[(52, 32), float64] */, dtype="float64") /* ty=Tensor[(52, 32), float64] */;
  %740 = reshape(%739, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
  %741 = @func_689(%740) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
  %742 = @func_960() /* ty=(Tensor[(3, 9, 3), float64],) */;
  %743 = cast(%var_2212, dtype="uint8") /* ty=Tensor[(1, 750), uint8] */;
  %744 = reshape(%743, newshape=[750]) /* ty=Tensor[(750), uint8] */;
  %745 = @func_1770(%744) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) */;
  %746 = %738.4;
  %747 = %741.1;
  %748 = %742.0;
  %749 = %745.2;
  (%746, %747, meta[relay.Constant][40] /* ty=Tensor[(52, 32), float64] */, %748, %749, %var_2212)
}

def @func_6278() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %750 = @func_2908() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %751 = @func_2752() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */;
  %752 = %750.0;
  %753 = %751.2;
  (%752, %753)
}

def @func_5818(%var_5804: Tensor[(6, 11, 6), uint64]) -> (Tensor[(6, 11, 6), uint64], Tensor[(13, 8, 16), float64]) {
  %754 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 11, 6), uint64] */, dtype="uint64") /* ty=Tensor[(6, 11, 6), uint64] */;
  %755 = shape_of(%var_5804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_5804, dtype="uint64") /* ty=Tensor[(6, 11, 6), uint64] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %758 = @func_3380() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %759 = multiply(%756, %757) /* ty=Tensor[(6, 11, 6), uint64] */;
  %760 = %758.1;
  (%759, %760)
}

def @func_6670() -> (Tensor[(13, 8, 16), float64],) {
  %762 = fn () -> (Tensor[(13, 8, 16), float64],) {
    %761 = @func_2307() /* ty=Tensor[(13, 8, 16), float64] */;
    (%761,)
  };
  %762() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_5484() -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) {
  @func_5482() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float64], Tensor[(15, 13, 3), float64], Tensor[(585), float64], Tensor[(3, 9, 3), float64]) */
}

def @func_2336(%var_2327: Tensor[(5, 13, 2), uint8]) -> (Tensor[(5, 13, 2), uint8], Tensor[(5, 13, 2), float32], Tensor[(13, 8, 16), float64]) {
  %763 = cast(%var_2327, dtype="uint8") /* ty=Tensor[(5, 13, 2), uint8] */;
  %764 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(5, 13, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 13, 2), uint8] */, dtype="uint8") /* ty=Tensor[(5, 13, 2), uint8] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %767 = cast(%var_2327, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  %768 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
  %769 = minimum(%765, %766) /* ty=Tensor[(5, 13, 2), uint8] */;
  %770 = sinh(%767) /* ty=Tensor[(5, 13, 2), float32] */;
  %771 = %768.1;
  (%769, %770, %771)
}

def @func_523() -> (Tensor[(13, 8, 16), float64],) {
  @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */
}

def @func_6386(%var_6385: Tensor[(32), float32]) -> (Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], Tensor[(750), uint8], Tensor[(2184), float64], Tensor[(14, 15, 12), float64], Tensor[(112, 4), int32]) {
  %791 = fn (%var_6352: Tensor[(32), float32]) -> (Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], Tensor[(750), uint8], Tensor[(2184), float64], Tensor[(14, 15, 12), float64], Tensor[(112, 4), int32]) {
    %772 = @func_5379() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %773 = @func_5237() /* ty=(Tensor[(14, 15, 12), float64],) */;
    %774 = cast(%var_6352, dtype="float32") /* ty=Tensor[(32), float32] */;
    %775 = cast(meta[relay.Constant][43] /* ty=Tensor[(448), int64] */, dtype="int64") /* ty=Tensor[(448), int64] */;
    %776 = cast(meta[relay.Constant][44] /* ty=Tensor[(750), uint8] */, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %777 = cast(-8.99585f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %778 = cast(meta[relay.Constant][45] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %779 = reshape(%774, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
    %780 = reshape(%775, newshape=[112, 4]) /* ty=Tensor[(112, 4), int64] */;
    %781 = reshape(%776, newshape=[5, 150]) /* ty=Tensor[(5, 150), uint8] */;
    %782 = reshape(%777, newshape=[]) /* ty=float64 */;
    %783 = reshape(%778, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %784 = @func_5918(%779, %780, %781, %782, %783) /* ty=(Tensor[(1, 750), uint8], Tensor[(112, 4), int64], Tensor[(5, 150), uint8], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(16, ?, 2), bool], Tensor[(13, 8, 16), float32], float64, Tensor[(2184), float64], Tensor[(16, 4, 15), int64], Tensor[(960, 1), int64]) */;
    %785 = %784.1;
    %786 = cast(%785, dtype="int32") /* ty=Tensor[(112, 4), int32] */;
    %787 = cast(-8.99585f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
    %788 = %772.1;
    %789 = %773.0;
    %790 = bitwise_xor(%786, %787) /* ty=Tensor[(112, 4), int32] */;
    (%788, %var_6352, meta[relay.Constant][43] /* ty=Tensor[(448), int64] */, meta[relay.Constant][44] /* ty=Tensor[(750), uint8] */, meta[relay.Constant][45] /* ty=Tensor[(2184), float64] */, %789, %790)
  };
  %791(%var_6385) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(32), float32], Tensor[(448), int64], Tensor[(750), uint8], Tensor[(2184), float64], Tensor[(14, 15, 12), float64], Tensor[(112, 4), int32]) */
}

def @func_415() -> Tensor[(3, 9, 3), float64] {
  %792 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
  log(%792) /* ty=Tensor[(3, 9, 3), float64] */
}

def @func_4944() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %793 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %794 = @func_940() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool]) */;
  %795 = %793.0;
  %796 = @func_206() /* ty=Tensor[(13, 8, 16), float64] */;
  %797 = %794.1;
  (%795, %796, %797)
}

def @func_4461(%var_4459: bool, %var_4460: Tensor[(12, 9, 9), bool]) -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  @func_4457(%var_4459, %var_4460) /* ty=(Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) */
}

def @func_521() -> (Tensor[(13, 8, 16), float64],) {
  %798 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %799 = %798.0;
  (%799,)
}

def @func_653(%var_651: Tensor[(6, 5, 7), uint32], %var_652: Tensor[(6, 5, 7), uint32]) -> (Tensor[(6, 5, 7), uint32],) {
  %805 = fn (%var_632: Tensor[(6, 5, 7), uint32], %var_633: Tensor[(6, 5, 7), uint32]) -> (Tensor[(6, 5, 7), uint32],) {
    %800 = cast(%var_633, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
    %801 = shape_of(%var_632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%var_632, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %804 = bitwise_and(%802, %803) /* ty=Tensor[(6, 5, 7), uint32] */;
    (%804,)
  };
  %805(%var_651, %var_652) /* ty=(Tensor[(6, 5, 7), uint32],) */
}

def @func_6788() -> Tensor[(7, 10, 9), float64] {
  %807 = fn () -> Tensor[(7, 10, 9), float64] {
    %806 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
    %806.1
  };
  %807() /* ty=Tensor[(7, 10, 9), float64] */
}

def @func_2940(%var_2938: Tensor[(7, 6, 1), float64]) -> Tensor[(7, 6, 1), float64] {
  @func_2937(%var_2938) /* ty=Tensor[(7, 6, 1), float64] */
}

def @func_4861(%var_4859: Tensor[(1, 4, 9), float64], %var_4860: Tensor[(12, 70), int16]) -> (Tensor[(1, 4, 9), float64], Tensor[(10, 7, 12), int16], Tensor[(12, 70), int16]) {
  @func_4857(%var_4859, %var_4860) /* ty=(Tensor[(1, 4, 9), float64], Tensor[(10, 7, 12), int16], Tensor[(12, 70), int16]) */
}

def @func_1772(%var_1771: Tensor[(750), uint8]) -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) {
  %820 = fn (%var_1755: Tensor[(750), uint8]) -> (Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) {
    %808 = @func_173() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %809 = @func_856() /* ty=(Tensor[(3, 9, 3), float32],) */;
    %810 = cast(%var_1755, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %811 = cast(%var_1755, dtype="uint8") /* ty=Tensor[(750), uint8] */;
    %812 = reshape(%810, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
    %813 = reshape(%811, newshape=[15, 5, 10]) /* ty=Tensor[(15, 5, 10), uint8] */;
    %814 = @func_81(%812, %813) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(13, 8, 16), float64]) */;
    %815 = @func_521() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %816 = %808.1;
    %817 = %809.0;
    %818 = %814.1;
    %819 = %815.0;
    (%816, %817, %818, %var_1755, %819)
  };
  %820(%var_1771) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(750), uint8], Tensor[(13, 8, 16), float64]) */
}

def @func_4457(%var_4430: bool, %var_4431: Tensor[(12, 9, 9), bool]) -> (Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float64]) {
  %821 = cast(%var_4430, dtype="bool") /* ty=bool */;
  %822 = cast(%var_4431, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %823 = logical_or(%821, %822) /* ty=Tensor[(12, 9, 9), bool] */;
  %824 = cast(%var_4431, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = cast(%823, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %829 = less(%826, %827) /* ty=Tensor[(12, 9, 9), bool] */;
  %830 = atan(%828) /* ty=Tensor[(12, 9, 9), float64] */;
  (%829, %830)
}

def @func_3280(%var_3279: Tensor[(3, 9, 3), float64]) -> (Tensor[(3, 9, 3), float32], Tensor[(3, 9, 3), uint8], Tensor[(3, 9, 3), float64]) {
  %844 = fn (%var_3254: Tensor[(3, 9, 3), float64]) -> (Tensor[(3, 9, 3), float32], Tensor[(3, 9, 3), uint8], Tensor[(3, 9, 3), float64]) {
    %831 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
    %832 = cast(%var_3254, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
    %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %834 = cast(%831, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %836 = cast(%831, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
    %837 = shape_of(%var_3254, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%var_3254, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %840 = cast(%var_3254, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
    %841 = mod(%834, %835) /* ty=Tensor[(3, 9, 3), float32] */;
    %842 = add(%838, %839) /* ty=Tensor[(3, 9, 3), uint8] */;
    %843 = tan(%840) /* ty=Tensor[(3, 9, 3), float64] */;
    (%841, %842, %843)
  };
  %844(%var_3279) /* ty=(Tensor[(3, 9, 3), float32], Tensor[(3, 9, 3), uint8], Tensor[(3, 9, 3), float64]) */
}

def @func_4062(%var_4045: Tensor[(9, 8, 14), uint8], %var_4046: Tensor[(9, 8, 14), uint8], %var_4053: Tensor[(9, 8, 14), uint8]) -> (Tensor[(9, 8, 14), uint8], Tensor[(13, 8, 16), float64], Tensor[(9, 8, 14), int8]) {
  %845 = cast(%var_4046, dtype="uint8") /* ty=Tensor[(9, 8, 14), uint8] */;
  %846 = shape_of(%var_4045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%var_4045, dtype="uint8") /* ty=Tensor[(9, 8, 14), uint8] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %849 = @func_3249() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %850 = cast(%var_4053, dtype="int8") /* ty=Tensor[(9, 8, 14), int8] */;
  %851 = shape_of(%var_4046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%var_4046, dtype="int8") /* ty=Tensor[(9, 8, 14), int8] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %854 = bitwise_and(%847, %848) /* ty=Tensor[(9, 8, 14), uint8] */;
  %855 = %849.1;
  %856 = right_shift(%852, %853) /* ty=Tensor[(9, 8, 14), int8] */;
  (%854, %855, %856)
}

def @func_3989() -> (Tensor[(14, 15, 12), float64],) {
  @func_3987() /* ty=(Tensor[(14, 15, 12), float64],) */
}

def @func_1667() -> (Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) {
  %861 = fn () -> (Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) {
    %857 = @func_1197() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */;
    %858 = @func_1229() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 10, 9), float64]) */;
    %859 = %857.0;
    %860 = %858.0;
    (%859, %860)
  };
  %861() /* ty=(Tensor[(3, 9, 3), uint16], Tensor[(13, 8, 16), float64]) */
}

def @func_2753() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) {
  %882 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) {
    %862 = @func_1484() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %863 = %862.0;
    %864 = cast(%863, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
    %865 = cast(%863, dtype="float64") /* ty=Tensor[(13, 8, 16), float64] */;
    %866 = reshape(%865, newshape=[13, 8, 16]) /* ty=Tensor[(13, 8, 16), float64] */;
    %867 = @func_689(%866) /* ty=(Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float32]) */;
    %868 = %867.0;
    %869 = cast(%863, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
    %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %871 = cast(%868, dtype="int16") /* ty=Tensor[(13, 8, 16), int16] */;
    %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %873 = cast(4.82165f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %874 = cast(meta[relay.Constant][47] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %875 = reshape(%873, newshape=[]) /* ty=float64 */;
    %876 = reshape(%874, newshape=[2184, 1]) /* ty=Tensor[(2184, 1), float64] */;
    %877 = @func_1447(%875, %876) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], Tensor[(13, 8, 16), float64], float64, Tensor[(2184, 1), float64], Tensor[(7, 10, 9), float64]) */;
    %878 = exp(%864) /* ty=Tensor[(13, 8, 16), float64] */;
    %879 = logical_xor(%871, %872) /* ty=Tensor[(13, 8, 16), int16] */;
    %880 = @func_2113() /* ty=Tensor[(13, 8, 16), float64] */;
    %881 = %877.1;
    (%878, %879, %880, %881, 4.82165f64 /* ty=float64 */, meta[relay.Constant][47] /* ty=Tensor[(2184), float64] */)
  };
  %882() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), int16], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), bool], float64, Tensor[(2184), float64]) */
}

def @func_6553(%var_6551: Tensor[(546), int8]) -> (Tensor[(13, 8, 16), float64], Tensor[(7, 13, 6), bool], Tensor[(546), int8], Tensor[(13, 8, 16), bool]) {
  @func_6550(%var_6551) /* ty=(Tensor[(13, 8, 16), float64], Tensor[(7, 13, 6), bool], Tensor[(546), int8], Tensor[(13, 8, 16), bool]) */
}

def @func_857() -> (Tensor[(3, 9, 3), float32],) {
  %889 = fn () -> (Tensor[(3, 9, 3), float32],) {
    %883 = @func_415() /* ty=Tensor[(3, 9, 3), float64] */;
    %884 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 9, 3), float64] */, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
    %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
    %886 = cast(%883, dtype="float32") /* ty=Tensor[(3, 9, 3), float32] */;
    %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %888 = divide(%886, %887) /* ty=Tensor[(3, 9, 3), float32] */;
    (%888,)
  };
  %889() /* ty=(Tensor[(3, 9, 3), float32],) */
}

def @func_1485() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %894 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %890 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
    %891 = @func_335() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %892 = %890.0;
    %893 = %891.1;
    (%892, %893)
  };
  %894() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_2219(%var_2217: Tensor[(1, 750), uint8]) -> (Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float32], Tensor[(52, 32), float64], Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(1, 750), uint8]) {
  @func_2216(%var_2217) /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float32], Tensor[(52, 32), float64], Tensor[(3, 9, 3), float64], Tensor[(13, 8, 16), float64], Tensor[(1, 750), uint8]) */
}

def @func_2307() -> Tensor[(13, 8, 16), float64] {
  %895 = @func_804() /* ty=(Tensor[(13, 8, 16), float64],) */;
  %895.0
}

def @func_3382() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  @func_3380() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

def @func_3032() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %896 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %897 = @func_2113() /* ty=Tensor[(13, 8, 16), float64] */;
  %898 = %896.0;
  (%897, %898)
}

def @func_1116() -> Tensor[(7, 10, 9), float64] {
  %900 = fn () -> Tensor[(7, 10, 9), float64] {
    %899 = cast(meta[relay.Constant][49] /* ty=Tensor[(7, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 9), float64] */;
    rsqrt(%899) /* ty=Tensor[(7, 10, 9), float64] */
  };
  %900() /* ty=Tensor[(7, 10, 9), float64] */
}

def @func_4221() -> (Tensor[(13, 8, 16), float64],) {
  %901 = @func_3249() /* ty=(Tensor[(3, 9, 3), float32], Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
  %902 = %901.1;
  (%902,)
}

def @func_314() -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
  %906 = fn () -> (Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) {
    %903 = @func_288() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */;
    %904 = %903.1;
    %905 = @func_215() /* ty=Tensor[(13, 8, 16), float64] */;
    (%904, %905)
  };
  %906() /* ty=(Tensor[(13, 8, 16), float64], Tensor[(13, 8, 16), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen108/build/output.py", line 2725, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:17] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

