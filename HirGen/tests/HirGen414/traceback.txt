==========mod==========
#[version = "0.0.5"]
def @func_7982() -> (Tensor[(13, 8, 2), float64],) {
  %0 = @func_7163() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) */;
  %1 = %0.1;
  (%1,)
}

def @func_7286(%var_7266: Tensor[(182), uint8], %var_7274: Tensor[(125, 2), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) {
  %2 = @func_6585() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %3 = cast(%var_7266, dtype="uint8") /* ty=Tensor[(182), uint8] */;
  %4 = reshape(%3, newshape=[91, 2]) /* ty=Tensor[(91, 2), uint8] */;
  %5 = @func_6784(%4) /* ty=(Tensor[(91, 1), float64], Tensor[(91, 9), bool], Tensor[(91, 9), bool], Tensor[(224), float64], Tensor[(13, 16), float64], Tensor[(12, 6, 6), float32], Tensor[(91, ?), uint16], Tensor[(91, 2), int8], Tensor[(208), float32]) */;
  %6 = cast(%var_7274, dtype="uint64") /* ty=Tensor[(125, 2), uint64] */;
  %7 = cast(%var_7274, dtype="uint64") /* ty=Tensor[(125, 2), uint64] */;
  %8 = reshape(%6, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %9 = reshape(%7, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %10 = %2.0;
  %11 = %5.5;
  %12 = @func_1449(%8, %9) /* ty=Tensor[(10, 5, 5), bool] */;
  (%10, %11, %var_7266, %12, %var_7274)
}

def @func_4720(%var_4681: Tensor[(6, 12, 12), uint64]) -> (Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) {
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 12), uint64] */, dtype="uint64") /* ty=Tensor[(6, 12, 12), uint64] */;
  %14 = shape_of(%var_4681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%var_4681, dtype="uint64") /* ty=Tensor[(6, 12, 12), uint64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 12), uint64] */, dtype="int64") /* ty=Tensor[(6, 12, 12), int64] */;
  %18 = shape_of(%var_4681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_4681, dtype="int64") /* ty=Tensor[(6, 12, 12), int64] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %24 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 112), float64] */, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %25 = reshape(%21, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int8] */;
  %26 = reshape(%22, newshape=[13, 7]) /* ty=Tensor[(13, 7), uint8] */;
  %27 = reshape(%23, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %28 = reshape(%24, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %29 = @func_2603(%25, %26, %27, %28) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) */;
  %30 = cast(%var_4681, dtype="float64") /* ty=Tensor[(6, 12, 12), float64] */;
  %31 = atan(%30) /* ty=Tensor[(6, 12, 12), float64] */;
  %32 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 12), uint64] */, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %36 = maximum(%15, %16) /* ty=Tensor[(6, 12, 12), uint64] */;
  %37 = bitwise_xor(%19, %20) /* ty=Tensor[(6, 12, 12), int64] */;
  %38 = %29.4;
  %39 = less(%34, %35) /* ty=Tensor[(6, 12, 12), bool] */;
  (%36, %37, %38, meta[relay.Constant][1] /* ty=Tensor[(1260), int8] */, meta[relay.Constant][2] /* ty=Tensor[(91), uint8] */, meta[relay.Constant][3] /* ty=Tensor[(208), float64] */, meta[relay.Constant][4] /* ty=Tensor[(2, 112), float64] */, %39)
}

def @func_6623() -> Tensor[(13, 8, 2), float64] {
  %40 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %40.0
}

def @func_6784(%var_6776: Tensor[(91, 2), uint8]) -> (Tensor[(91, 1), float64], Tensor[(91, 9), bool], Tensor[(91, 9), bool], Tensor[(224), float64], Tensor[(13, 16), float64], Tensor[(12, 6, 6), float32], Tensor[(91, ?), uint16], Tensor[(91, 2), int8], Tensor[(208), float32]) {
  %41 = @func_6059() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), bool], Tensor[(91, 1), uint8]) */;
  %42 = %41.2;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
  %44 = cast(%42, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
  %45 = tan(%44) /* ty=Tensor[(91, 1), float64] */;
  %46 = cast(%45, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
  %47 = cast(meta[relay.Constant][5] /* ty=Tensor[(91, 9), float64] */, dtype="bool") /* ty=Tensor[(91, 9), bool] */;
  %48 = cast(meta[relay.Constant][5] /* ty=Tensor[(91, 9), float64] */, dtype="bool") /* ty=Tensor[(91, 9), bool] */;
  %49 = cast(%45, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
  %50 = @func_6699() /* ty=(Tensor[(224), float64],) */;
  %51 = cast(meta[relay.Constant][6] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %52 = %50.0;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(224), float64] */;
  %54 = reshape(%51, newshape=[13, 16]) /* ty=Tensor[(13, 16), float64] */;
  %55 = reshape(%53, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %56 = @func_2153(%54, %55) /* ty=(Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) */;
  %57 = cast(%45, dtype="uint16") /* ty=Tensor[(91, 1), uint16] */;
  %58 = shape_of(%42, dtype="int32") /* ty=Tensor[(2), int32] */;
  %59 = cast(%42, dtype="uint16") /* ty=Tensor[(91, 1), uint16] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %61 = cast(%42, dtype="int8") /* ty=Tensor[(91, 1), int8] */;
  %62 = cast(%var_6776, dtype="int8") /* ty=Tensor[(91, 2), int8] */;
  %63 = cast(meta[relay.Constant][6] /* ty=Tensor[(208), float64] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %64 = acos(%43) /* ty=Tensor[(91, 1), float64] */;
  %65 = not_equal(%46, %47) /* ty=Tensor[(91, 9), bool] */;
  %66 = greater(%48, %49) /* ty=Tensor[(91, 9), bool] */;
  %67 = %56.0;
  %68 = @func_6461() /* ty=Tensor[(12, 6, 6), float32] */;
  %69 = right_shift(%59, %60) /* ty=Tensor[(91, ?), uint16] */;
  %70 = left_shift(%61, %62) /* ty=Tensor[(91, 2), int8] */;
  %71 = sigmoid(%63) /* ty=Tensor[(208), float32] */;
  (%64, %65, %66, %52, %67, %68, %69, %70, %71)
}

def @func_6327() -> (Tensor[(13, 8, 2), float64],) {
  %72 = @func_5229() /* ty=Tensor[(13, 8, 2), float64] */;
  (%72,)
}

def @func_3594(%var_3585: Tensor[(9, 11, 15), float32], %var_3586: Tensor[(9, 11, 15), float32]) -> (Tensor[(9, 11, 15), float32],) {
  %73 = cast(%var_3586, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %74 = shape_of(%var_3585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%var_3585, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %77 = multiply(%75, %76) /* ty=Tensor[(9, 11, 15), float32] */;
  (%77,)
}

def @func_7514(%var_7490: Tensor[(16, 3, 12), uint16], %var_7491: Tensor[(16, 3, 12), uint16]) -> (Tensor[(16, 3, 12), uint16], Tensor[(12, 6, 6), float32]) {
  %78 = cast(%var_7491, dtype="uint16") /* ty=Tensor[(16, 3, 12), uint16] */;
  %79 = shape_of(%var_7490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_7490, dtype="uint16") /* ty=Tensor[(16, 3, 12), uint16] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %82 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %83 = %82.0;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %85 = left_shift(%80, %81) /* ty=Tensor[(16, 3, 12), uint16] */;
  %86 = sqrt(%84) /* ty=Tensor[(12, 6, 6), float32] */;
  (%85, %86)
}

def @func_7924() -> (Tensor[(13, 8, 2), float64],) {
  %87 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %88 = %87.0;
  (%88,)
}

def @func_6149(%var_6119: Tensor[(7, 5, 9), uint32], %var_6125: Tensor[(864), float32]) -> (Tensor[(7, 5, 9), uint32], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32]) {
  %89 = cast(%var_6119, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %90 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %93 = cast(%var_6125, dtype="float32") /* ty=Tensor[(864), float32] */;
  %94 = cast(meta[relay.Constant][8] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %95 = reshape(%93, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %96 = reshape(%94, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %97 = @func_1387(%95, %96) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %98 = left_shift(%91, %92) /* ty=Tensor[(7, 5, 9), uint32] */;
  %99 = %97.0;
  (%98, %99, %var_6125, meta[relay.Constant][8] /* ty=Tensor[(1), int32] */)
}

def @func_2153(%var_2113: Tensor[(13, 16), float64], %var_2142: Tensor[(224), float64]) -> (Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) {
  %100 = cast(%var_2113, dtype="float64") /* ty=Tensor[(13, 16), float64] */;
  %101 = cast(%var_2142, dtype="float64") /* ty=Tensor[(224), float64] */;
  %102 = reshape(%101, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %103 = @func_882(%102) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %104 = log(%100) /* ty=Tensor[(13, 16), float64] */;
  %105 = %103.0;
  (%104, %105, %var_2142)
}

def @func_6641() -> (Tensor[(13, 8, 2), float64],) {
  %106 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %107 = %106.0;
  (%107,)
}

def @func_5163(%var_5138: Tensor[(91), uint8]) -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), int16], Tensor[(91), uint64]) {
  %108 = cast(%var_5138, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %109 = cast(%var_5138, dtype="bool") /* ty=Tensor[(91), bool] */;
  %110 = reshape(%108, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
  %111 = reshape(%109, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %112 = @func_1730(%110, %111) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
  %113 = cast(%var_5138, dtype="float64") /* ty=Tensor[(91), float64] */;
  %114 = sinh(%113) /* ty=Tensor[(91), float64] */;
  %115 = cast(%var_5138, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(1), int32] */;
  %117 = cast(%114, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %119 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %120 = %112.2;
  %121 = maximum(%117, %118) /* ty=Tensor[(91), uint64] */;
  (%119, %120, %121)
}

def @func_4808() -> (Tensor[(12, 6, 6), float64],) {
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %123 = asin(%122) /* ty=Tensor[(12, 6, 6), float64] */;
  (%123,)
}

def @func_8807(%var_8798: Tensor[(4, 7, 6), float32]) -> (Tensor[(4, 7, 6), float32], Tensor[(224), float64]) {
  %124 = cast(%var_8798, dtype="float32") /* ty=Tensor[(4, 7, 6), float32] */;
  %125 = @func_7013() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(224), float64]) */;
  %126 = erf(%124) /* ty=Tensor[(4, 7, 6), float32] */;
  %127 = %125.2;
  (%126, %127)
}

def @func_5229() -> Tensor[(13, 8, 2), float64] {
  %128 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %128.0
}

def @func_1730(%var_1688: Tensor[(13, 7, 1), uint8], %var_1718: Tensor[(13, 7, 1), bool]) -> (Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) {
  %129 = cast(%var_1688, dtype="uint8") /* ty=Tensor[(13, 7, 1), uint8] */;
  %130 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(13, 7, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 7, 1), uint8] */, dtype="uint8") /* ty=Tensor[(13, 7, 1), uint8] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %133 = bitwise_xor(%131, %132) /* ty=Tensor[(13, 7, ?), uint8] */;
  %134 = cast(%var_1688, dtype="float32") /* ty=Tensor[(13, 7, 1), float32] */;
  %135 = sqrt(%134) /* ty=Tensor[(13, 7, 1), float32] */;
  %136 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 7, 1), uint8] */, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %140 = logical_or(%138, %139) /* ty=Tensor[(13, 7, ?), bool] */;
  %141 = cast(%140, dtype="int16") /* ty=Tensor[(13, 7, ?), int16] */;
  %142 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%133, dtype="int16") /* ty=Tensor[(13, 7, ?), int16] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %145 = cast(%var_1718, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %146 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%140, dtype="bool") /* ty=Tensor[(13, 7, ?), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = cast(%133, dtype="int16") /* ty=Tensor[(13, 7, ?), int16] */;
  %150 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%135, dtype="int16") /* ty=Tensor[(13, 7, 1), int16] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %153 = logical_xor(%143, %144) /* ty=Tensor[(13, 7, ?), int16] */;
  %154 = greater_equal(%147, %148) /* ty=Tensor[(13, 7, ?), bool] */;
  %155 = multiply(%151, %152) /* ty=Tensor[(13, 7, ?), int16] */;
  (%153, %154, %155)
}

def @func_7444() -> (Tensor[(13, 8, 2), float64],) {
  %156 = @func_7384() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %157 = %156.0;
  (%157,)
}

def @func_2603(%var_2551: Tensor[(10, 14, 9), int8], %var_2576: Tensor[(13, 7), uint8], %var_2584: Tensor[(208), float64], %var_2585: Tensor[(112, 2), float64]) -> (Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) {
  %158 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 14, 9), int8] */, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %159 = shape_of(%var_2551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%var_2551, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %162 = cast(%var_2584, dtype="float64") /* ty=Tensor[(208), float64] */;
  %163 = cast(%var_2585, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
  %164 = reshape(%162, newshape=[13, 16]) /* ty=Tensor[(13, 16), float64] */;
  %165 = reshape(%163, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %166 = @func_2153(%164, %165) /* ty=(Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) */;
  %167 = %166.2;
  %168 = cast(%var_2576, dtype="uint8") /* ty=Tensor[(13, 7), uint8] */;
  %169 = cast(%var_2576, dtype="bool") /* ty=Tensor[(13, 7), bool] */;
  %170 = reshape(%168, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
  %171 = reshape(%169, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %172 = @func_1730(%170, %171) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
  %173 = %172.1;
  %174 = cast(%167, dtype="int32") /* ty=Tensor[(224), int32] */;
  %175 = cast(%173, dtype="int32") /* ty=Tensor[(13, 7, ?), int32] */;
  %176 = cast(%173, dtype="float64") /* ty=Tensor[(13, 7, ?), float64] */;
  %177 = less(%160, %161) /* ty=Tensor[(10, 14, 9), bool] */;
  %178 = left_shift(%174, %175) /* ty=Tensor[(13, 7, 224), int32] */;
  %179 = exp(%176) /* ty=Tensor[(13, 7, ?), float64] */;
  (%177, %var_2576, %var_2584, %var_2585, %178, %179)
}

def @func_7354(%var_7337: Tensor[(528), float64], %var_7346: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64], Tensor[(288), float32], Tensor[(1), int32], Tensor[(250), uint64], Tensor[(250), uint64]) {
  %180 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %184 = reshape(%181, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %185 = reshape(%182, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %186 = reshape(%183, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %187 = @func_3364(%184, %185, %186) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) */;
  %188 = cast(%var_7337, dtype="float64") /* ty=Tensor[(528), float64] */;
  %189 = reshape(%188, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float64] */;
  %190 = @func_4562(%189) /* ty=(Tensor[(11, 12, 4), float64],) */;
  %191 = cast(meta[relay.Constant][14] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %192 = %187.2;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %194 = reshape(%191, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %195 = reshape(%193, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %196 = @func_5583(%194, %195) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) */;
  %197 = cast(%var_7346, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %198 = reshape(%197, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %199 = @func_5913(%198) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) */;
  %200 = %180.0;
  %201 = %190.0;
  %202 = %196.10;
  %203 = %199.2;
  (%200, %192, meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, meta[relay.Constant][13] /* ty=Tensor[(288), float32] */, %201, %var_7337, %202, meta[relay.Constant][14] /* ty=Tensor[(1), int32] */, %203, %var_7346)
}

def @func_4953(%var_4916: Tensor[(1), int32], %var_4949: Tensor[(112, 2), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) {
  %204 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %205 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %207 = cast(%var_4916, dtype="int32") /* ty=Tensor[(1), int32] */;
  %208 = reshape(%206, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %209 = reshape(%207, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %210 = @func_1387(%208, %209) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %211 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), float32] */, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %212 = reshape(%211, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint64] */;
  %213 = @func_4720(%212) /* ty=(Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) */;
  %214 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %215 = cast(%var_4916, dtype="int32") /* ty=Tensor[(1), int32] */;
  %216 = reshape(%214, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %217 = reshape(%215, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %218 = @func_1387(%216, %217) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %219 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %220 = cast(%var_4916, dtype="int32") /* ty=Tensor[(1), int32] */;
  %221 = reshape(%219, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %222 = reshape(%220, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %223 = @func_1387(%221, %222) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %224 = cast(meta[relay.Constant][16] /* ty=Tensor[(1260, 1), int8] */, dtype="int8") /* ty=Tensor[(1260, 1), int8] */;
  %225 = cast(meta[relay.Constant][17] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %226 = %213.5;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(208), float64] */;
  %228 = cast(%var_4949, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
  %229 = reshape(%224, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int8] */;
  %230 = reshape(%225, newshape=[13, 7]) /* ty=Tensor[(13, 7), uint8] */;
  %231 = reshape(%227, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %232 = reshape(%228, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %233 = @func_2603(%229, %230, %231, %232) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) */;
  %234 = %204.0;
  %235 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %236 = %205.0;
  %237 = %210.0;
  %238 = %218.0;
  %239 = %223.2;
  %240 = %233.3;
  (%234, %235, %236, %237, meta[relay.Constant][15] /* ty=Tensor[(864), float32] */, %var_4916, %226, %238, %239, %240, meta[relay.Constant][16] /* ty=Tensor[(1260, 1), int8] */, meta[relay.Constant][17] /* ty=Tensor[(91), uint8] */, %var_4949)
}

def @func_5364() -> (Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) {
  %241 = cast(meta[relay.Constant][18] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %242 = reshape(%241, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %243 = @func_882(%242) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %244 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %245 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %246 = %243.0;
  %247 = %244.0;
  (%245, %246, meta[relay.Constant][18] /* ty=Tensor[(224), float64] */, %247)
}

def @func_7090(%var_7040: Tensor[(495, 3), float32], %var_7052: Tensor[(25, 10), float32]) -> (Tensor[(12, 10, 15), int64], Tensor[(224), float64], Tensor[(2520, 1), uint8], Tensor[(91), uint8], Tensor[(224, 1), float64], Tensor[(9, 11, 15), float32], Tensor[(495, 3), float32], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(13, 8, 2), float64]) {
  %248 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 10, 15), int64] */, dtype="int64") /* ty=Tensor[(12, 10, 15), int64] */;
  %249 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(12, 10, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 10, 15), int64] */, dtype="int64") /* ty=Tensor[(12, 10, 15), int64] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %252 = cast(meta[relay.Constant][21] /* ty=Tensor[(2520, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2520, 1), uint8] */;
  %253 = cast(meta[relay.Constant][21] /* ty=Tensor[(2520, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2520, 1), uint8] */;
  %254 = cast(meta[relay.Constant][22] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %255 = cast(meta[relay.Constant][23] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %256 = reshape(%252, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
  %257 = reshape(%253, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
  %258 = reshape(%254, newshape=[91, 1]) /* ty=Tensor[(91, 1), uint8] */;
  %259 = reshape(%255, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %260 = @func_3654(%256, %257, %258, %259) /* ty=(Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) */;
  %261 = cast(%var_7040, dtype="float32") /* ty=Tensor[(495, 3), float32] */;
  %262 = cast(%var_7040, dtype="float32") /* ty=Tensor[(495, 3), float32] */;
  %263 = reshape(%261, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %264 = reshape(%262, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %265 = @func_3594(%263, %264) /* ty=(Tensor[(9, 11, 15), float32],) */;
  %266 = cast(meta[relay.Constant][24] /* ty=Tensor[(25, 10), uint64] */, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %267 = reshape(%266, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %268 = @func_5913(%267) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) */;
  %269 = cast(meta[relay.Constant][24] /* ty=Tensor[(25, 10), uint64] */, dtype="float32") /* ty=Tensor[(25, 10), float32] */;
  %270 = log(%269) /* ty=Tensor[(25, 10), float32] */;
  %271 = cast(%var_7052, dtype="uint32") /* ty=Tensor[(25, 10), uint32] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%270, dtype="uint32") /* ty=Tensor[(25, 10), uint32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %275 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %276 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %277 = add(%250, %251) /* ty=Tensor[(12, 10, 15), int64] */;
  %278 = %260.4;
  %279 = %265.0;
  %280 = %268.1;
  %281 = bitwise_xor(%273, %274) /* ty=Tensor[(25, 10), uint32] */;
  %282 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
  %283 = %275.0;
  %284 = %276.0;
  (%277, %278, meta[relay.Constant][21] /* ty=Tensor[(2520, 1), uint8] */, meta[relay.Constant][22] /* ty=Tensor[(91), uint8] */, meta[relay.Constant][23] /* ty=Tensor[(224, 1), float64] */, %279, %var_7040, %280, %281, %282, %283, %284)
}

def @func_7417() -> Tensor[(13, 8, 2), float64] {
  %285 = @func_6444() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) */;
  %285.1
}

def @func_5989(%var_5985: Tensor[(165, 9), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(165, 9), float32]) {
  %286 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %287 = cast(%var_5985, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
  %288 = cast(%var_5985, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
  %289 = reshape(%287, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %290 = reshape(%288, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %291 = @func_3594(%289, %290) /* ty=(Tensor[(9, 11, 15), float32],) */;
  %292 = %286.0;
  %293 = %291.0;
  (%292, %293, %var_5985)
}

def @func_8031() -> (Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) {
  %294 = @func_7575() /* ty=(Tensor[(16, 6, 3), float64],) */;
  %295 = cast(meta[relay.Constant][25] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %296 = %294.0;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(16, 6, 3), float64] */;
  %298 = reshape(%295, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %299 = reshape(%297, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %300 = @func_5478(%298, %299) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), int32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 5, 5), bool], Tensor[(5, 50), uint64]) */;
  %301 = %300.1;
  (%296, %301, meta[relay.Constant][25] /* ty=Tensor[(224), float64] */)
}

def @func_5913(%var_5897: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) {
  %302 = cast(%var_5897, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %303 = cast(%var_5897, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %304 = reshape(%302, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %305 = reshape(%303, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %306 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %307 = @func_1449(%304, %305) /* ty=Tensor[(10, 5, 5), bool] */;
  (%306, %307, %var_5897)
}

def @func_7585() -> Tensor[(13, 8, 2), float64] {
  %308 = @func_7163() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) */;
  %308.1
}

def @func_4043(%var_4013: Tensor[(12, 12, 2), float64], %var_4014: Tensor[(12, 12, 2), float64]) -> (Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float64]) {
  %309 = cast(%var_4014, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %310 = shape_of(%var_4013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%var_4013, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %313 = cast(%var_4013, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %314 = floor_mod(%311, %312) /* ty=Tensor[(12, 12, 2), float64] */;
  %315 = asin(%313) /* ty=Tensor[(12, 12, 2), float64] */;
  (%314, %315)
}

def @func_6059() -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), bool], Tensor[(91, 1), uint8]) {
  %316 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %317 = cast(meta[relay.Constant][26] /* ty=Tensor[(91, 1), uint8] */, dtype="uint8") /* ty=Tensor[(91, 1), uint8] */;
  %318 = cast(meta[relay.Constant][26] /* ty=Tensor[(91, 1), uint8] */, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
  %319 = reshape(%317, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
  %320 = reshape(%318, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %321 = @func_1730(%319, %320) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
  %322 = %316.0;
  %323 = %321.1;
  (%322, %323, meta[relay.Constant][26] /* ty=Tensor[(91, 1), uint8] */)
}

def @func_6699() -> (Tensor[(224), float64],) {
  %324 = @func_6077() /* ty=(Tensor[(224), float64],) */;
  %325 = %324.0;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(224), float64] */;
  %327 = log(%326) /* ty=Tensor[(224), float64] */;
  (%327,)
}

def @func_8305(%var_8303: Tensor[(864), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(1485), float32], Tensor[(1188), int16], Tensor[(1188), int16], Tensor[(864), uint64]) {
  %328 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %329 = cast(meta[relay.Constant][27] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %330 = cast(meta[relay.Constant][27] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %331 = reshape(%329, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %332 = reshape(%330, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %333 = @func_3594(%331, %332) /* ty=(Tensor[(9, 11, 15), float32],) */;
  %334 = cast(meta[relay.Constant][28] /* ty=Tensor[(1188), int16] */, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %335 = cast(%var_8303, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %336 = reshape(%334, newshape=[1188]) /* ty=Tensor[(1188), int16] */;
  %337 = reshape(%335, newshape=[864]) /* ty=Tensor[(864), uint64] */;
  %338 = @func_6290(%336, %337) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) */;
  %339 = %328.0;
  %340 = %333.0;
  %341 = %338.2;
  (%339, %340, meta[relay.Constant][27] /* ty=Tensor[(1485), float32] */, %341, meta[relay.Constant][28] /* ty=Tensor[(1188), int16] */, %var_8303)
}

def @func_2059(%var_1980: Tensor[(16, 6, 3), float32], %var_2039: Tensor[(25, 10), uint64], %var_2045: Tensor[(4, 56), float64]) -> (Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) {
  %342 = cast(%var_1980, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %343 = asin(%342) /* ty=Tensor[(16, 6, 3), float32] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(16, 6, 3), float64] */;
  %345 = cast(%var_2039, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %346 = cast(%var_2039, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %347 = reshape(%345, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %348 = reshape(%346, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %349 = cast(%var_2045, dtype="float64") /* ty=Tensor[(4, 56), float64] */;
  %350 = reshape(%349, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %351 = @func_882(%350) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %352 = asinh(%344) /* ty=Tensor[(16, 6, 3), float64] */;
  %353 = @func_1449(%347, %348) /* ty=Tensor[(10, 5, 5), bool] */;
  %354 = %351.0;
  (%352, %353, %var_2039, %354, %var_2045)
}

def @func_7212() -> (Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) {
  %355 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 9, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 9, 5), float64] */;
  %356 = cast(meta[relay.Constant][30] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %357 = cast(meta[relay.Constant][30] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %358 = cast(meta[relay.Constant][31] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %359 = reshape(%356, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %360 = reshape(%357, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %361 = reshape(%358, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %362 = @func_3364(%359, %360, %361) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) */;
  %363 = exp(%355) /* ty=Tensor[(14, 9, 5), float64] */;
  %364 = %362.2;
  (%363, %364, meta[relay.Constant][30] /* ty=Tensor[(720), float64] */, meta[relay.Constant][31] /* ty=Tensor[(288), float32] */)
}

def @func_5861() -> (Tensor[(12, 6, 6), float64],) {
  %365 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %366 = %365.0;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %368 = exp(%367) /* ty=Tensor[(12, 6, 6), float64] */;
  (%368,)
}

def @func_554(%var_544: Tensor[(1, 1), int32]) -> (Tensor[(1, 13), int32],) {
  %369 = cast(%var_544, dtype="int32") /* ty=Tensor[(1, 1), int32] */;
  %370 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 13), int32] */, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %371 = bitwise_xor(%369, %370) /* ty=Tensor[(1, 13), int32] */;
  (%371,)
}

def @func_2693(%var_2662: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), float32], Tensor[(11, 3, 14), float64], Tensor[(231, 2), float64], Tensor[(1, 13), int32], Tensor[(1), int32]) {
  %372 = cast(%var_2662, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %373 = cast(meta[relay.Constant][33] /* ty=Tensor[(231, 2), float64] */, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
  %374 = reshape(%373, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %375 = @func_1517(%374) /* ty=(Tensor[(11, 3, 14), float64],) */;
  %376 = cast(meta[relay.Constant][34] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %377 = reshape(%376, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %378 = @func_554(%377) /* ty=(Tensor[(1, 13), int32],) */;
  %379 = log(%372) /* ty=Tensor[(16, 6, 3), float32] */;
  %380 = %375.0;
  %381 = %378.0;
  (%379, %380, meta[relay.Constant][33] /* ty=Tensor[(231, 2), float64] */, %381, meta[relay.Constant][34] /* ty=Tensor[(1), int32] */)
}

def @func_3364(%var_3345: Tensor[(8, 6, 15), float64], %var_3346: Tensor[(8, 6, 15), float64], %var_3358: Tensor[(288), float32]) -> (Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) {
  %382 = cast(%var_3346, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %383 = shape_of(%var_3345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%var_3345, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %386 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 6, 15), float64] */, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %387 = shape_of(%var_3346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_3346, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %390 = cast(%var_3358, dtype="float32") /* ty=Tensor[(288), float32] */;
  %391 = cast(meta[relay.Constant][36] /* ty=Tensor[(250), uint64] */, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %392 = cast(meta[relay.Constant][37] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %393 = reshape(%390, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %394 = reshape(%391, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %395 = reshape(%392, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %396 = @func_2059(%393, %394, %395) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %397 = divide(%384, %385) /* ty=Tensor[(8, 6, 15), float64] */;
  %398 = not_equal(%388, %389) /* ty=Tensor[(8, 6, 15), bool] */;
  %399 = %396.0;
  (%397, %398, %399, %var_3358, meta[relay.Constant][36] /* ty=Tensor[(250), uint64] */, meta[relay.Constant][37] /* ty=Tensor[(224), float64] */)
}

def @func_8693(%var_8681: Tensor[(11, 250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(224), float64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(13, 8, 2), float64], Tensor[(11, 250), bool]) {
  %400 = cast(meta[relay.Constant][38] /* ty=Tensor[(1188), int16] */, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %401 = cast(meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %402 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 250), uint64] */, dtype="uint64") /* ty=Tensor[(1, 250), uint64] */;
  %403 = reshape(%400, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), int16] */;
  %404 = reshape(%401, newshape=[24, 12]) /* ty=Tensor[(24, 12), float32] */;
  %405 = reshape(%402, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %406 = @func_2812(%403, %404, %405) /* ty=(Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) */;
  %407 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %408 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 250), uint64] */, dtype="bool") /* ty=Tensor[(1, 250), bool] */;
  %409 = cast(%var_8681, dtype="bool") /* ty=Tensor[(11, 250), bool] */;
  %410 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %411 = %406.3;
  %412 = %407.0;
  %413 = logical_and(%408, %409) /* ty=Tensor[(11, 250), bool] */;
  (%410, %411, meta[relay.Constant][38] /* ty=Tensor[(1188), int16] */, meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, %412, %413)
}

def @func_7718() -> Tensor[(13, 8, 2), float64] {
  @func_6113() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_8176(%var_8165: Tensor[(4, 15, 3), float32]) -> Tensor[(4, 15, 3), float32] {
  %414 = cast(%var_8165, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  rsqrt(%414) /* ty=Tensor[(4, 15, 3), float32] */
}

def @func_6182() -> Tensor[(13, 8, 2), float64] {
  @func_6113() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_8649(%var_8605: Tensor[(1), int32], %var_8647: Tensor[(288), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(182), uint8], Tensor[(182), uint8], Tensor[(224), float64], Tensor[(1, 13), int32], Tensor[(13, 8, 2), float64], Tensor[(250), float64], Tensor[(8, 9, 12), float32], Tensor[(1485), bool], Tensor[(13, 7, ?), float32], Tensor[(288), float32]) {
  %415 = @func_7163() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) */;
  %416 = cast(meta[relay.Constant][41] /* ty=Tensor[(182), uint8] */, dtype="uint8") /* ty=Tensor[(182), uint8] */;
  %417 = cast(meta[relay.Constant][42] /* ty=Tensor[(250), uint64] */, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %418 = reshape(%416, newshape=[182]) /* ty=Tensor[(182), uint8] */;
  %419 = reshape(%417, newshape=[125, 2]) /* ty=Tensor[(125, 2), uint64] */;
  %420 = @func_7286(%418, %419) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) */;
  %421 = @func_8031() /* ty=(Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) */;
  %422 = cast(%var_8605, dtype="int32") /* ty=Tensor[(1), int32] */;
  %423 = reshape(%422, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %424 = @func_554(%423) /* ty=(Tensor[(1, 13), int32],) */;
  %425 = @func_6641() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %426 = cast(meta[relay.Constant][42] /* ty=Tensor[(250), uint64] */, dtype="float64") /* ty=Tensor[(250), float64] */;
  %427 = cast(%var_8605, dtype="float64") /* ty=Tensor[(1), float64] */;
  %428 = cast(%var_8605, dtype="int32") /* ty=Tensor[(1), int32] */;
  %429 = %421.2;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(224), float64] */;
  %431 = reshape(%428, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %432 = reshape(%430, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %433 = @func_4953(%431, %432) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) */;
  %434 = cast(meta[relay.Constant][43] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %435 = cast(meta[relay.Constant][43] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %436 = reshape(%434, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %437 = reshape(%435, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %438 = @func_3594(%436, %437) /* ty=(Tensor[(9, 11, 15), float32],) */;
  %439 = %438.0;
  %440 = cast(%439, dtype="bool") /* ty=Tensor[(9, 11, 15), bool] */;
  %441 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(1485), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %442 = cast(meta[relay.Constant][43] /* ty=Tensor[(1485), float32] */, dtype="bool") /* ty=Tensor[(1485), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?), bool] */;
  %444 = cast(%var_8605, dtype="int32") /* ty=Tensor[(1), int32] */;
  %445 = cast(%var_8647, dtype="float32") /* ty=Tensor[(288), float32] */;
  %446 = reshape(%444, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %447 = reshape(%445, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %448 = @func_5583(%446, %447) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) */;
  %449 = %415.0;
  %450 = %420.2;
  %451 = %424.0;
  %452 = %425.0;
  %453 = floor_divide(%426, %427) /* ty=Tensor[(250), float64] */;
  %454 = %433.8;
  %455 = logical_or(%442, %443) /* ty=Tensor[(1485), bool] */;
  %456 = %448.1;
  (%449, %450, meta[relay.Constant][41] /* ty=Tensor[(182), uint8] */, %429, %451, %452, %453, %454, %455, %456, %var_8647)
}

def @func_6077() -> (Tensor[(224), float64],) {
  %457 = @func_5364() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) */;
  %458 = %457.2;
  (%458,)
}

def @func_2812(%var_2755: Tensor[(9, 12, 11), int16], %var_2774: Tensor[(24, 12), float32], %var_2775: Tensor[(250), uint64]) -> (Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) {
  %459 = cast(%var_2774, dtype="float32") /* ty=Tensor[(24, 12), float32] */;
  %460 = cast(%var_2775, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %461 = cast(meta[relay.Constant][44] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %462 = reshape(%459, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %463 = reshape(%460, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %464 = reshape(%461, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %465 = @func_2059(%462, %463, %464) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %466 = %465.1;
  %467 = cast(%466, dtype="uint64") /* ty=Tensor[(10, 5, 5), uint64] */;
  %468 = cast(%466, dtype="uint64") /* ty=Tensor[(10, 5, 5), uint64] */;
  %469 = reshape(%467, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %470 = reshape(%468, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %471 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 12, 11), int16] */, dtype="float64") /* ty=Tensor[(1, 12, 11), float64] */;
  %472 = log(%471) /* ty=Tensor[(1, 12, 11), float64] */;
  %473 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 12, 11), int16] */, dtype="int16") /* ty=Tensor[(1, 12, 11), int16] */;
  %474 = cast(%var_2755, dtype="int16") /* ty=Tensor[(9, 12, 11), int16] */;
  %475 = bitwise_or(%473, %474) /* ty=Tensor[(9, 12, 11), int16] */;
  %476 = cast(%472, dtype="bool") /* ty=Tensor[(1, 12, 11), bool] */;
  %477 = cast(%475, dtype="bool") /* ty=Tensor[(9, 12, 11), bool] */;
  %478 = logical_or(%476, %477) /* ty=Tensor[(9, 12, 11), bool] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(9, 12, 11), float32] */;
  %480 = @func_1449(%469, %470) /* ty=Tensor[(10, 5, 5), bool] */;
  %481 = exp(%479) /* ty=Tensor[(9, 12, 11), float32] */;
  (%466, %var_2774, %var_2775, meta[relay.Constant][44] /* ty=Tensor[(224), float64] */, %480, %481)
}

def @func_5583(%var_5563: Tensor[(1), int32], %var_5576: Tensor[(288), float32]) -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) {
  %482 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 7), uint8] */, dtype="uint8") /* ty=Tensor[(13, 7), uint8] */;
  %483 = reshape(%482, newshape=[91]) /* ty=Tensor[(91), uint8] */;
  %484 = @func_5163(%483) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), int16], Tensor[(91), uint64]) */;
  %485 = %484.1;
  %486 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 7), uint8] */, dtype="float32") /* ty=Tensor[(13, 7), float32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(13, 7, ?), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %490 = cast(%var_5563, dtype="int32") /* ty=Tensor[(1), int32] */;
  %491 = reshape(%490, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %492 = @func_554(%491) /* ty=(Tensor[(1, 13), int32],) */;
  %493 = cast(meta[relay.Constant][47] /* ty=Tensor[(864), uint64] */, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %494 = reshape(%493, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint64] */;
  %495 = @func_4720(%494) /* ty=(Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) */;
  %496 = cast(%485, dtype="float64") /* ty=Tensor[(13, 7, ?), float64] */;
  %497 = atanh(%496) /* ty=Tensor[(13, 7, ?), float64] */;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(13, 7, ?), float32] */;
  %499 = cast(%var_5576, dtype="float32") /* ty=Tensor[(288), float32] */;
  %500 = reshape(%499, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %501 = @func_2693(%500) /* ty=(Tensor[(16, 6, 3), float32], Tensor[(11, 3, 14), float64], Tensor[(231, 2), float64], Tensor[(1, 13), int32], Tensor[(1), int32]) */;
  %502 = cast(meta[relay.Constant][48] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %503 = reshape(%502, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float64] */;
  %504 = @func_4562(%503) /* ty=(Tensor[(11, 12, 4), float64],) */;
  %505 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %506 = floor_mod(%488, %489) /* ty=Tensor[(13, 7, ?), float32] */;
  %507 = @func_5229() /* ty=Tensor[(13, 8, 2), float64] */;
  %508 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %509 = %492.0;
  %510 = %495.3;
  %511 = log(%498) /* ty=Tensor[(13, 7, ?), float32] */;
  %512 = %501.2;
  %513 = %504.0;
  (%505, %506, %507, %508, %509, %var_5563, %510, meta[relay.Constant][47] /* ty=Tensor[(864), uint64] */, %511, %512, %var_5576, %513, meta[relay.Constant][48] /* ty=Tensor[(528), float64] */)
}

def @func_7145(%var_7104: Tensor[(15, 99), float32], %var_7105: Tensor[(250), float32], %var_7132: Tensor[(224), float64]) -> (Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(15, 99), float32], Tensor[(250), float32], Tensor[(13, 8, 2), float64], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(224), float64]) {
  %514 = @func_6444() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) */;
  %515 = cast(%var_7104, dtype="float32") /* ty=Tensor[(15, 99), float32] */;
  %516 = cast(%var_7105, dtype="float32") /* ty=Tensor[(250), float32] */;
  %517 = reshape(%515, newshape=[495, 3]) /* ty=Tensor[(495, 3), float32] */;
  %518 = reshape(%516, newshape=[25, 10]) /* ty=Tensor[(25, 10), float32] */;
  %519 = @func_7090(%517, %518) /* ty=(Tensor[(12, 10, 15), int64], Tensor[(224), float64], Tensor[(2520, 1), uint8], Tensor[(91), uint8], Tensor[(224, 1), float64], Tensor[(9, 11, 15), float32], Tensor[(495, 3), float32], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(13, 8, 2), float64]) */;
  %520 = cast(meta[relay.Constant][49] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %521 = cast(%var_7105, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %522 = cast(%var_7132, dtype="float64") /* ty=Tensor[(224), float64] */;
  %523 = reshape(%520, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %524 = reshape(%521, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %525 = reshape(%522, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %526 = @func_2059(%523, %524, %525) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %527 = %514.1;
  %528 = %519.3;
  %529 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
  %530 = %526.0;
  (%527, %528, %var_7104, %var_7105, %529, %530, meta[relay.Constant][49] /* ty=Tensor[(288), float32] */, %var_7132)
}

def @func_1449(%var_1436: Tensor[(10, 5, 5), uint64], %var_1437: Tensor[(10, 5, 5), uint64]) -> Tensor[(10, 5, 5), bool] {
  %531 = cast(%var_1437, dtype="bool") /* ty=Tensor[(10, 5, 5), bool] */;
  %532 = shape_of(%var_1436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_1436, dtype="bool") /* ty=Tensor[(10, 5, 5), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%533, %534) /* ty=Tensor[(10, 5, 5), bool] */
}

def @func_3654(%var_3600: Tensor[(12, 15, 14), uint8], %var_3601: Tensor[(12, 15, 14), uint8], %var_3621: Tensor[(91, 1), uint8], %var_3644: Tensor[(224), float64]) -> (Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) {
  %535 = cast(%var_3601, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
  %536 = shape_of(%var_3600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_3600, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = equal(%537, %538) /* ty=Tensor[(12, 15, 14), bool] */;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %541 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%var_3601, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %544 = cast(%var_3621, dtype="uint8") /* ty=Tensor[(91, 1), uint8] */;
  %545 = cast(%var_3621, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
  %546 = reshape(%544, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
  %547 = reshape(%545, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %548 = @func_1730(%546, %547) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
  %549 = %548.2;
  %550 = cast(%549, dtype="bool") /* ty=Tensor[(13, 7, ?), bool] */;
  %551 = shape_of(%var_3621, dtype="int32") /* ty=Tensor[(2), int32] */;
  %552 = cast(%var_3621, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %554 = cast(%var_3601, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %555 = cast(%var_3644, dtype="float64") /* ty=Tensor[(224), float64] */;
  %556 = reshape(%555, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %557 = @func_882(%556) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %558 = cast(meta[relay.Constant][50] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %559 = %557.0;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %561 = reshape(%558, newshape=[13, 16]) /* ty=Tensor[(13, 16), float64] */;
  %562 = reshape(%560, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %563 = @func_2153(%561, %562) /* ty=(Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) */;
  %564 = floor_mod(%542, %543) /* ty=Tensor[(12, 15, 14), float32] */;
  %565 = logical_and(%552, %553) /* ty=Tensor[(91, ?), bool] */;
  %566 = sinh(%554) /* ty=Tensor[(12, 15, 14), float32] */;
  %567 = %563.2;
  (%564, %565, %566, %559, %var_3644, %567, meta[relay.Constant][50] /* ty=Tensor[(208), float64] */)
}

def @func_8768(%var_8756: Tensor[(12, 48), uint16], %var_8764: Tensor[(120), float64]) -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 48), bool], Tensor[(13, 8, 2), float64], Tensor[(112, 2), float64], Tensor[(120), float64]) {
  %568 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 48), uint16] */, dtype="uint16") /* ty=Tensor[(12, 48), uint16] */;
  %569 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 48), uint16] */, dtype="uint16") /* ty=Tensor[(12, 48), uint16] */;
  %570 = reshape(%568, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), uint16] */;
  %571 = reshape(%569, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), uint16] */;
  %572 = @func_7514(%570, %571) /* ty=(Tensor[(16, 3, 12), uint16], Tensor[(12, 6, 6), float32]) */;
  %573 = cast(%var_8756, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
  %574 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(12, 48), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %575 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 48), uint16] */, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %577 = @func_6641() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
  %580 = cast(%var_8764, dtype="float64") /* ty=Tensor[(120), float64] */;
  %581 = reshape(%580, newshape=[2, 15, 4]) /* ty=Tensor[(2, 15, 4), float64] */;
  %582 = @func_3930(%581) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(91), uint8], Tensor[(2, 15, 4), uint32], Tensor[(13, 7, ?), float64], Tensor[(1260), int8], Tensor[(208), float64], Tensor[(112, 2), float64]) */;
  %583 = @func_7718() /* ty=Tensor[(13, 8, 2), float64] */;
  %584 = %572.1;
  %585 = not_equal(%575, %576) /* ty=Tensor[(12, 48), bool] */;
  %586 = exp(%579) /* ty=Tensor[(13, 8, 2), float64] */;
  %587 = %582.6;
  (%583, %584, %585, %586, %587, %var_8764)
}

def @func_6356(%var_6346: Tensor[(6, 11, 1), float64]) -> (Tensor[(6, 11, 1), float64],) {
  %588 = cast(%var_6346, dtype="float64") /* ty=Tensor[(6, 11, 1), float64] */;
  %589 = atanh(%588) /* ty=Tensor[(6, 11, 1), float64] */;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(6, 11, 1), float64] */;
  %591 = log10(%590) /* ty=Tensor[(6, 11, 1), float64] */;
  (%591,)
}

def @func_4562(%var_4559: Tensor[(11, 12, 4), float64]) -> (Tensor[(11, 12, 4), float64],) {
  %592 = cast(%var_4559, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
  %593 = rsqrt(%592) /* ty=Tensor[(11, 12, 4), float64] */;
  (%593,)
}

def @func_8552(%var_8492: Tensor[(6, 30), float32], %var_8538: Tensor[(5, 297), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(4, 15, 3), float32], Tensor[(6, 30), float32], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(165, 9), float64], Tensor[(5, 297), bool], Tensor[(165, 9), float32]) {
  %594 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %595 = cast(%var_8492, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %596 = reshape(%595, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %597 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %598 = @func_5364() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) */;
  %599 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 297), float32] */, dtype="float32") /* ty=Tensor[(5, 297), float32] */;
  %600 = reshape(%599, newshape=[165, 9]) /* ty=Tensor[(165, 9), float32] */;
  %601 = @func_5989(%600) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(165, 9), float32]) */;
  %602 = %601.2;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(165, 9), float64] */;
  %604 = exp(%603) /* ty=Tensor[(165, 9), float64] */;
  %605 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 297), float32] */, dtype="float64") /* ty=Tensor[(5, 297), float64] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(2), int32] */;
  %607 = cast(%604, dtype="float64") /* ty=Tensor[(165, 9), float64] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %609 = cast(%var_8538, dtype="bool") /* ty=Tensor[(5, 297), bool] */;
  %610 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(5, 297), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %611 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 297), float32] */, dtype="bool") /* ty=Tensor[(5, 297), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %613 = cast(%602, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
  %614 = shape_of(%604, dtype="int32") /* ty=Tensor[(2), int32] */;
  %615 = cast(%604, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %617 = maximum(%615, %616) /* ty=Tensor[(165, 9), int64] */;
  %618 = cast(%617, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
  %619 = shape_of(%604, dtype="int32") /* ty=Tensor[(2), int32] */;
  %620 = cast(%604, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %622 = greater_equal(%620, %621) /* ty=Tensor[(165, 9), bool] */;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
  %624 = shape_of(%604, dtype="int32") /* ty=Tensor[(2), int32] */;
  %625 = cast(%604, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %627 = @func_6461() /* ty=Tensor[(12, 6, 6), float32] */;
  %628 = %594.0;
  %629 = @func_8176(%596) /* ty=Tensor[(4, 15, 3), float32] */;
  %630 = %597.0;
  %631 = %598.1;
  %632 = floor_divide(%607, %608) /* ty=Tensor[(165, 9), float64] */;
  %633 = less_equal(%611, %612) /* ty=Tensor[(5, 297), bool] */;
  %634 = divide(%625, %626) /* ty=Tensor[(165, 9), float32] */;
  (%627, %628, %629, %var_8492, %630, %631, %632, %633, %634)
}

def @func_1387(%var_1356: Tensor[(8, 9, 12), float32], %var_1371: Tensor[(1, 1), int32]) -> (Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) {
  %635 = cast(%var_1371, dtype="int32") /* ty=Tensor[(1, 1), int32] */;
  %636 = reshape(%635, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %637 = @func_554(%636) /* ty=(Tensor[(1, 13), int32],) */;
  %638 = cast(%var_1356, dtype="float32") /* ty=Tensor[(8, 9, 12), float32] */;
  %639 = acosh(%638) /* ty=Tensor[(8, 9, 12), float32] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(8, 9, 12), float32] */;
  %641 = %637.0;
  %642 = acos(%640) /* ty=Tensor[(8, 9, 12), float32] */;
  (%641, %var_1371, %642)
}

def @func_1517(%var_1510: Tensor[(11, 3, 14), float64]) -> (Tensor[(11, 3, 14), float64],) {
  %643 = cast(%var_1510, dtype="float64") /* ty=Tensor[(11, 3, 14), float64] */;
  %644 = rsqrt(%643) /* ty=Tensor[(11, 3, 14), float64] */;
  (%644,)
}

def @func_5618() -> (Tensor[(13, 8, 2), float64],) {
  %645 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %646 = %645.0;
  (%646,)
}

def @func_7013() -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(224), float64]) {
  %647 = @func_6077() /* ty=(Tensor[(224), float64],) */;
  %648 = @func_6113() /* ty=Tensor[(13, 8, 2), float64] */;
  %649 = @func_6461() /* ty=Tensor[(12, 6, 6), float32] */;
  %650 = %647.0;
  (%648, %649, %650)
}

def @func_7163() -> (Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) {
  %651 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %652 = cast(meta[relay.Constant][53] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %653 = reshape(%652, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %654 = @func_882(%653) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %655 = %651.0;
  %656 = @func_6623() /* ty=Tensor[(13, 8, 2), float64] */;
  %657 = %654.0;
  (%655, %656, %657, meta[relay.Constant][53] /* ty=Tensor[(224, 1), float64] */)
}

def @func_6113() -> Tensor[(13, 8, 2), float64] {
  %658 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %658.0
}

def @func_7471() -> (Tensor[(224), float64], Tensor[(11, 12, 4), float64], Tensor[(1), int32], Tensor[(288), float32]) {
  %659 = @func_6699() /* ty=(Tensor[(224), float64],) */;
  %660 = cast(meta[relay.Constant][54] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %661 = cast(meta[relay.Constant][55] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %662 = reshape(%660, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %663 = reshape(%661, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %664 = @func_5583(%662, %663) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) */;
  %665 = %659.0;
  %666 = %664.11;
  (%665, %666, meta[relay.Constant][54] /* ty=Tensor[(1), int32] */, meta[relay.Constant][55] /* ty=Tensor[(288), float32] */)
}

def @main(%var_8892: Tensor[(182), uint8], %var_8893: Tensor[(250), uint64], %var_8913: Tensor[(1188), int16], %var_8914: Tensor[(864), uint64]) -> (Tensor[(224), float64], Tensor[(182), uint8], Tensor[(250), uint64], Tensor[(91), uint8], Tensor[(864), uint64], Tensor[(1, 13), int32], Tensor[(10, 5, 5), bool], Tensor[(1188), float64]) {
  %667 = @func_6077() /* ty=(Tensor[(224), float64],) */;
  %668 = cast(%var_8913, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %669 = cast(%var_8914, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %670 = reshape(%668, newshape=[1188]) /* ty=Tensor[(1188), int16] */;
  %671 = reshape(%669, newshape=[864]) /* ty=Tensor[(864), uint64] */;
  %672 = @func_6290(%670, %671) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) */;
  %673 = cast(%var_8892, dtype="uint8") /* ty=Tensor[(182), uint8] */;
  %674 = cast(%var_8893, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %675 = cast(meta[relay.Constant][56] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %676 = reshape(%673, newshape=[182]) /* ty=Tensor[(182), uint8] */;
  %677 = reshape(%674, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %678 = reshape(%675, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %679 = @func_7671(%676, %677, %678) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(182), uint8], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(250), float32], Tensor[(14, 9, 5), float64], Tensor[(250), float64]) */;
  %680 = %679.2;
  %681 = cast(%680, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %682 = cast(meta[relay.Constant][56] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %683 = cast(%var_8893, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %684 = cast(%var_8893, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %685 = reshape(%683, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %686 = reshape(%684, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %687 = cast(%var_8913, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %688 = sqrt(%687) /* ty=Tensor[(1188), float32] */;
  %689 = cast(%688, dtype="float64") /* ty=Tensor[(1188), float64] */;
  %690 = %667.0;
  %691 = %672.6;
  %692 = bitwise_and(%681, %682) /* ty=Tensor[(1, 13), int32] */;
  %693 = @func_1449(%685, %686) /* ty=Tensor[(10, 5, 5), bool] */;
  %694 = acosh(%689) /* ty=Tensor[(1188), float64] */;
  (%690, %var_8892, %var_8893, %691, %var_8914, %692, %693, %694)
}

def @func_4871() -> Tensor[(12, 6, 6), float64] {
  %695 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %695.0
}

def @func_3930(%var_3892: Tensor[(2, 15, 4), float64]) -> (Tensor[(13, 7, ?), int16], Tensor[(91), uint8], Tensor[(2, 15, 4), uint32], Tensor[(13, 7, ?), float64], Tensor[(1260), int8], Tensor[(208), float64], Tensor[(112, 2), float64]) {
  %696 = cast(meta[relay.Constant][57] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %697 = cast(meta[relay.Constant][57] /* ty=Tensor[(91), uint8] */, dtype="bool") /* ty=Tensor[(91), bool] */;
  %698 = reshape(%696, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
  %699 = reshape(%697, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %700 = @func_1730(%698, %699) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
  %701 = cast(%var_3892, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
  %702 = rsqrt(%701) /* ty=Tensor[(2, 15, 4), float64] */;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(2, 15, 4), float32] */;
  %704 = asinh(%703) /* ty=Tensor[(2, 15, 4), float32] */;
  %705 = cast(%var_3892, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
  %706 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%702, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %709 = minimum(%707, %708) /* ty=Tensor[(2, 15, 4), float64] */;
  %710 = cast(%709, dtype="uint32") /* ty=Tensor[(2, 15, 4), uint32] */;
  %711 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%704, dtype="uint32") /* ty=Tensor[(2, 15, 4), uint32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %714 = cast(meta[relay.Constant][58] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %715 = %700.2;
  %716 = cast(%715, dtype="uint8") /* ty=Tensor[(13, 7, ?), uint8] */;
  %717 = cast(meta[relay.Constant][59] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %718 = cast(meta[relay.Constant][60] /* ty=Tensor[(112, 2), float64] */, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
  %719 = reshape(%714, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int8] */;
  %720 = reshape(%716, newshape=[13, 7]) /* ty=Tensor[(13, 7), uint8] */;
  %721 = reshape(%717, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %722 = reshape(%718, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %723 = @func_2603(%719, %720, %721, %722) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) */;
  %724 = bitwise_xor(%712, %713) /* ty=Tensor[(2, 15, 4), uint32] */;
  %725 = %723.5;
  (%715, meta[relay.Constant][57] /* ty=Tensor[(91), uint8] */, %724, %725, meta[relay.Constant][58] /* ty=Tensor[(1260), int8] */, meta[relay.Constant][59] /* ty=Tensor[(208), float64] */, meta[relay.Constant][60] /* ty=Tensor[(112, 2), float64] */)
}

def @func_4985() -> (Tensor[(13, 8, 2), float64],) {
  %726 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
  %727 = asin(%726) /* ty=Tensor[(13, 8, 2), float64] */;
  (%727,)
}

def @func_8155(%var_8145: Tensor[(720), float64]) -> (Tensor[(224), float64], Tensor[(720), float64], Tensor[(720), float64]) {
  %728 = @func_8031() /* ty=(Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) */;
  %729 = cast(%var_8145, dtype="float64") /* ty=Tensor[(720), float64] */;
  %730 = reshape(%729, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %731 = @func_5031(%730) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */;
  %732 = %728.2;
  %733 = %731.2;
  (%732, %733, %var_8145)
}

def @func_5031(%var_5023: Tensor[(720), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) {
  %734 = cast(%var_5023, dtype="float64") /* ty=Tensor[(720), float64] */;
  %735 = cast(%var_5023, dtype="float64") /* ty=Tensor[(720), float64] */;
  %736 = cast(meta[relay.Constant][62] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %737 = reshape(%734, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %738 = reshape(%735, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %739 = reshape(%736, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %740 = @func_3364(%737, %738, %739) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) */;
  %741 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %742 = %740.2;
  (%741, %742, %var_5023, meta[relay.Constant][62] /* ty=Tensor[(288), float32] */)
}

def @func_6461() -> Tensor[(12, 6, 6), float32] {
  %743 = @func_6444() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) */;
  %743.0
}

def @func_7384() -> (Tensor[(13, 8, 2), float64],) {
  %744 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
  (%744,)
}

def @func_7671(%var_7606: Tensor[(182), uint8], %var_7607: Tensor[(250), uint64], %var_7622: Tensor[(1), int32]) -> (Tensor[(16, 6, 3), float64], Tensor[(182), uint8], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(250), float32], Tensor[(14, 9, 5), float64], Tensor[(250), float64]) {
  %745 = @func_7575() /* ty=(Tensor[(16, 6, 3), float64],) */;
  %746 = cast(%var_7622, dtype="int32") /* ty=Tensor[(1), int32] */;
  %747 = reshape(%746, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %748 = @func_554(%747) /* ty=(Tensor[(1, 13), int32],) */;
  %749 = cast(%var_7607, dtype="float32") /* ty=Tensor[(250), float32] */;
  %750 = @func_7212() /* ty=(Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */;
  %751 = cast(%var_7607, dtype="float32") /* ty=Tensor[(250), float32] */;
  %752 = tan(%751) /* ty=Tensor[(250), float32] */;
  %753 = cast(%var_7606, dtype="uint8") /* ty=Tensor[(182), uint8] */;
  %754 = cast(%var_7607, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %755 = reshape(%753, newshape=[182]) /* ty=Tensor[(182), uint8] */;
  %756 = reshape(%754, newshape=[125, 2]) /* ty=Tensor[(125, 2), uint64] */;
  %757 = @func_7286(%755, %756) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) */;
  %758 = %757.3;
  %759 = cast(%758, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %760 = shape_of(%752, dtype="int32") /* ty=Tensor[(1), int32] */;
  %761 = cast(%752, dtype="float64") /* ty=Tensor[(250), float64] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?), float64] */;
  %763 = %745.0;
  %764 = %748.0;
  %765 = atan(%749) /* ty=Tensor[(250), float32] */;
  %766 = %750.0;
  %767 = divide(%761, %762) /* ty=Tensor[(250), float64] */;
  (%763, %var_7606, %764, %var_7622, %765, %766, %767)
}

def @func_7777(%var_7728: Tensor[(12, 6, 5), float32], %var_7729: Tensor[(12, 6, 5), float32], %var_7746: Tensor[(288), float32], %var_7747: Tensor[(250), uint64], %var_7774: Tensor[(528), float64]) -> (Tensor[(12, 6, 5), float32], Tensor[(13, 8, 2), float64], Tensor[(25, 10), uint64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(12, 6, 5), float32], Tensor[(112, 2), float64], Tensor[(1), int32], Tensor[(16, 6, 3), float64], Tensor[(528), float64]) {
  %768 = cast(%var_7729, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %769 = shape_of(%var_7728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%var_7728, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %772 = @func_6641() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %773 = cast(%var_7746, dtype="float32") /* ty=Tensor[(288), float32] */;
  %774 = cast(%var_7747, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %775 = cast(meta[relay.Constant][63] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %776 = reshape(%773, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %777 = reshape(%774, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %778 = reshape(%775, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %779 = @func_2059(%776, %777, %778) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %780 = cast(%var_7729, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %781 = cast(meta[relay.Constant][64] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %782 = cast(meta[relay.Constant][63] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %783 = reshape(%781, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %784 = reshape(%782, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %785 = @func_4953(%783, %784) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) */;
  %786 = cast(%var_7774, dtype="float64") /* ty=Tensor[(528), float64] */;
  %787 = %779.2;
  %788 = cast(%787, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %789 = reshape(%786, newshape=[528]) /* ty=Tensor[(528), float64] */;
  %790 = reshape(%788, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %791 = @func_7354(%789, %790) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64], Tensor[(288), float32], Tensor[(1), int32], Tensor[(250), uint64], Tensor[(250), uint64]) */;
  %792 = add(%770, %771) /* ty=Tensor[(12, 6, 5), float32] */;
  %793 = %772.0;
  %794 = log10(%780) /* ty=Tensor[(12, 6, 5), float32] */;
  %795 = %785.12;
  %796 = %791.1;
  (%792, %793, %787, %var_7746, %var_7747, meta[relay.Constant][63] /* ty=Tensor[(224), float64] */, %794, %795, meta[relay.Constant][64] /* ty=Tensor[(1), int32] */, %796, %var_7774)
}

def @func_6585() -> (Tensor[(13, 8, 2), float64],) {
  %797 = @func_6327() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %798 = %797.0;
  (%798,)
}

def @func_6290(%var_6249: Tensor[(1188), int16], %var_6263: Tensor[(864), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) {
  %799 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %800 = cast(%var_6249, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %801 = cast(meta[relay.Constant][65] /* ty=Tensor[(250), uint64] */, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %802 = reshape(%800, newshape=[1188]) /* ty=Tensor[(1188), int16] */;
  %803 = reshape(%801, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %804 = @func_5801(%802, %803) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(250), uint64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(250), uint64]) */;
  %805 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %806 = cast(%var_6263, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %807 = reshape(%806, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint64] */;
  %808 = @func_4720(%807) /* ty=(Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) */;
  %809 = %799.0;
  %810 = %804.3;
  %811 = @func_6113() /* ty=Tensor[(13, 8, 2), float64] */;
  %812 = %805.0;
  %813 = %808.4;
  (%809, %810, %var_6249, meta[relay.Constant][65] /* ty=Tensor[(250), uint64] */, %811, %812, %813, %var_6263)
}

def @func_7874(%var_7837: Tensor[(2, 16, 11), float64], %var_7838: Tensor[(2, 16, 11), float64], %var_7859: Tensor[(1, 91), uint8], %var_7860: Tensor[(112, 2), float64]) -> (Tensor[(2, 16, 11), int16], Tensor[(2520), uint8], Tensor[(1, 91), uint8], Tensor[(112, 2), float64], Tensor[(91, ?), float64]) {
  %814 = cast(%var_7838, dtype="float64") /* ty=Tensor[(2, 16, 11), float64] */;
  %815 = shape_of(%var_7837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_7837, dtype="float64") /* ty=Tensor[(2, 16, 11), float64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %818 = floor_mod(%816, %817) /* ty=Tensor[(2, 16, 11), float64] */;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
  %820 = shape_of(%var_7837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_7837, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %823 = add(%821, %822) /* ty=Tensor[(2, 16, 11), float32] */;
  %824 = cast(%var_7838, dtype="int16") /* ty=Tensor[(2, 16, 11), int16] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="int16") /* ty=Tensor[(2, 16, 11), int16] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %828 = cast(meta[relay.Constant][66] /* ty=Tensor[(2520), uint8] */, dtype="uint8") /* ty=Tensor[(2520), uint8] */;
  %829 = cast(meta[relay.Constant][66] /* ty=Tensor[(2520), uint8] */, dtype="uint8") /* ty=Tensor[(2520), uint8] */;
  %830 = cast(%var_7859, dtype="uint8") /* ty=Tensor[(1, 91), uint8] */;
  %831 = cast(%var_7860, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
  %832 = reshape(%828, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
  %833 = reshape(%829, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
  %834 = reshape(%830, newshape=[91, 1]) /* ty=Tensor[(91, 1), uint8] */;
  %835 = reshape(%831, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %836 = @func_3654(%832, %833, %834, %835) /* ty=(Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) */;
  %837 = %836.1;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(91, ?), float64] */;
  %839 = right_shift(%826, %827) /* ty=Tensor[(2, 16, 11), int16] */;
  %840 = cosh(%838) /* ty=Tensor[(91, ?), float64] */;
  (%839, meta[relay.Constant][66] /* ty=Tensor[(2520), uint8] */, %var_7859, %var_7860, %840)
}

def @func_5478(%var_5417: Tensor[(224), float64], %var_5462: Tensor[(288), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), int32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 5, 5), bool], Tensor[(5, 50), uint64]) {
  %841 = cast(%var_5417, dtype="float64") /* ty=Tensor[(224), float64] */;
  %842 = reshape(%841, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %843 = @func_882(%842) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %844 = %843.0;
  %845 = cast(%844, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %846 = sqrt(%845) /* ty=Tensor[(14, 8, 2), float64] */;
  %847 = cast(%var_5417, dtype="int32") /* ty=Tensor[(224), int32] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="int32") /* ty=Tensor[(14, 8, 2), int32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %851 = cast(%var_5462, dtype="float64") /* ty=Tensor[(288), float64] */;
  %852 = cast(%var_5462, dtype="float64") /* ty=Tensor[(288), float64] */;
  %853 = reshape(%851, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %854 = reshape(%852, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
  %855 = @func_4043(%853, %854) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float64]) */;
  %856 = cast(meta[relay.Constant][67] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %857 = reshape(%856, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %858 = @func_1517(%857) /* ty=(Tensor[(11, 3, 14), float64],) */;
  %859 = cast(meta[relay.Constant][68] /* ty=Tensor[(5, 50), uint64] */, dtype="uint64") /* ty=Tensor[(5, 50), uint64] */;
  %860 = cast(meta[relay.Constant][68] /* ty=Tensor[(5, 50), uint64] */, dtype="uint64") /* ty=Tensor[(5, 50), uint64] */;
  %861 = reshape(%859, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %862 = reshape(%860, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %863 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %864 = bitwise_or(%849, %850) /* ty=Tensor[(14, 8, 2), int32] */;
  %865 = %855.1;
  %866 = %858.0;
  %867 = @func_1449(%861, %862) /* ty=Tensor[(10, 5, 5), bool] */;
  (%863, %864, %865, %var_5462, %866, meta[relay.Constant][67] /* ty=Tensor[(462), float64] */, %867, meta[relay.Constant][68] /* ty=Tensor[(5, 50), uint64] */)
}

def @func_8106() -> (Tensor[(11, 12, 4), float64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64]) {
  %868 = @func_7471() /* ty=(Tensor[(224), float64], Tensor[(11, 12, 4), float64], Tensor[(1), int32], Tensor[(288), float32]) */;
  %869 = @func_6585() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %870 = %868.1;
  %871 = @func_6623() /* ty=Tensor[(13, 8, 2), float64] */;
  %872 = %869.0;
  (%870, %871, %872)
}

def @func_5801(%var_5770: Tensor[(1188), int16], %var_5772: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(250), uint64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(250), uint64]) {
  %873 = @func_5364() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) */;
  %874 = cast(%var_5770, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %875 = cast(meta[relay.Constant][69] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %876 = cast(%var_5772, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %877 = reshape(%874, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), int16] */;
  %878 = reshape(%875, newshape=[24, 12]) /* ty=Tensor[(24, 12), float32] */;
  %879 = reshape(%876, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %880 = @func_2812(%877, %878, %879) /* ty=(Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) */;
  %881 = %873.0;
  %882 = %880.2;
  (%881, %882, %var_5770, meta[relay.Constant][69] /* ty=Tensor[(288), float32] */, %var_5772)
}

def @func_5081() -> (Tensor[(13, 8, 2), float64],) {
  %883 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %884 = %883.0;
  (%884,)
}

def @func_882(%var_850: Tensor[(14, 8, 2), float64]) -> (Tensor[(14, 8, 2), uint32],) {
  %885 = cast(%var_850, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %886 = log(%885) /* ty=Tensor[(14, 8, 2), float64] */;
  %887 = cast(%var_850, dtype="uint32") /* ty=Tensor[(14, 8, 2), uint32] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="uint32") /* ty=Tensor[(14, 8, 2), uint32] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %891 = left_shift(%889, %890) /* ty=Tensor[(14, 8, 2), uint32] */;
  (%891,)
}

def @func_6444() -> (Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) {
  %892 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %893 = %892.0;
  %894 = cast(%893, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %895 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %896 = atan(%894) /* ty=Tensor[(12, 6, 6), float32] */;
  %897 = %895.0;
  (%896, %897)
}

def @func_8461(%var_8367: Tensor[(13, 8, 2), float64], %var_8381: Tensor[(288), float32], %var_8401: Tensor[(1), int32]) -> (Tensor[(13, 8, 2), bool], Tensor[(288), float32], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(1, 13), int32], Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), uint16], Tensor[(13, 8, 2), float64], Tensor[(10, 5, 5), float64]) {
  %898 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
  %899 = cast(%var_8367, dtype="bool") /* ty=Tensor[(13, 8, 2), bool] */;
  %900 = shape_of(%898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%898, dtype="bool") /* ty=Tensor[(13, 8, 2), bool] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %903 = cast(%var_8381, dtype="float32") /* ty=Tensor[(288), float32] */;
  %904 = cast(meta[relay.Constant][71] /* ty=Tensor[(250, 1), uint64] */, dtype="uint64") /* ty=Tensor[(250, 1), uint64] */;
  %905 = cast(meta[relay.Constant][70] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %906 = reshape(%903, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %907 = reshape(%904, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %908 = reshape(%905, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %909 = @func_2059(%906, %907, %908) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %910 = %909.1;
  %911 = cast(meta[relay.Constant][71] /* ty=Tensor[(250, 1), uint64] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
  %912 = shape_of(%910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%910, dtype="bool") /* ty=Tensor[(10, 5, 5), bool] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %915 = cast(%var_8401, dtype="int32") /* ty=Tensor[(1), int32] */;
  %916 = reshape(%915, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %917 = @func_554(%916) /* ty=(Tensor[(1, 13), int32],) */;
  %918 = @func_7575() /* ty=(Tensor[(16, 6, 3), float64],) */;
  %919 = cast(%910, dtype="uint16") /* ty=Tensor[(10, 5, 5), uint16] */;
  %920 = cast(%var_8401, dtype="uint16") /* ty=Tensor[(1), uint16] */;
  %921 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %922 = cast(%910, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %923 = acos(%922) /* ty=Tensor[(10, 5, 5), float32] */;
  %924 = cast(%923, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %925 = less_equal(%901, %902) /* ty=Tensor[(13, 8, 2), bool] */;
  %926 = greater_equal(%913, %914) /* ty=Tensor[(10, 5, 5), bool] */;
  %927 = %917.0;
  %928 = %918.0;
  %929 = left_shift(%919, %920) /* ty=Tensor[(10, 5, 5), uint16] */;
  %930 = %921.0;
  %931 = asinh(%924) /* ty=Tensor[(10, 5, 5), float64] */;
  (%925, %var_8381, meta[relay.Constant][70] /* ty=Tensor[(224), float64] */, %926, %927, %928, %929, %930, %931)
}

def @func_7575() -> (Tensor[(16, 6, 3), float64],) {
  %932 = @func_7212() /* ty=(Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */;
  %933 = %932.1;
  (%933,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5587(%var_5585: Tensor[(1), int32], %var_5586: Tensor[(288), float32]) -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) {
  @func_5583(%var_5585, %var_5586) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) */
}

def @func_7675(%var_7672: Tensor[(182), uint8], %var_7673: Tensor[(250), uint64], %var_7674: Tensor[(1), int32]) -> (Tensor[(16, 6, 3), float64], Tensor[(182), uint8], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(250), float32], Tensor[(14, 9, 5), float64], Tensor[(250), float64]) {
  %23 = fn (%var_7606: Tensor[(182), uint8], %var_7607: Tensor[(250), uint64], %var_7622: Tensor[(1), int32]) -> (Tensor[(16, 6, 3), float64], Tensor[(182), uint8], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(250), float32], Tensor[(14, 9, 5), float64], Tensor[(250), float64]) {
    %0 = @func_7575() /* ty=(Tensor[(16, 6, 3), float64],) */;
    %1 = cast(%var_7622, dtype="int32") /* ty=Tensor[(1), int32] */;
    %2 = reshape(%1, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
    %3 = @func_554(%2) /* ty=(Tensor[(1, 13), int32],) */;
    %4 = cast(%var_7607, dtype="float32") /* ty=Tensor[(250), float32] */;
    %5 = @func_7212() /* ty=(Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */;
    %6 = cast(%var_7607, dtype="float32") /* ty=Tensor[(250), float32] */;
    %7 = tan(%6) /* ty=Tensor[(250), float32] */;
    %8 = cast(%var_7606, dtype="uint8") /* ty=Tensor[(182), uint8] */;
    %9 = cast(%var_7607, dtype="uint64") /* ty=Tensor[(250), uint64] */;
    %10 = reshape(%8, newshape=[182]) /* ty=Tensor[(182), uint8] */;
    %11 = reshape(%9, newshape=[125, 2]) /* ty=Tensor[(125, 2), uint64] */;
    %12 = @func_7286(%10, %11) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) */;
    %13 = %12.3;
    %14 = cast(%13, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
    %15 = shape_of(%7, dtype="int32") /* ty=Tensor[(1), int32] */;
    %16 = cast(%7, dtype="float64") /* ty=Tensor[(250), float64] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?), float64] */;
    %18 = %0.0;
    %19 = %3.0;
    %20 = atan(%4) /* ty=Tensor[(250), float32] */;
    %21 = %5.0;
    %22 = divide(%16, %17) /* ty=Tensor[(250), float64] */;
    (%18, %var_7606, %19, %var_7622, %20, %21, %22)
  };
  %23(%var_7672, %var_7673, %var_7674) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(182), uint8], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(250), float32], Tensor[(14, 9, 5), float64], Tensor[(250), float64]) */
}

def @func_6079() -> (Tensor[(224), float64],) {
  @func_6077() /* ty=(Tensor[(224), float64],) */
}

def @func_8555(%var_8553: Tensor[(6, 30), float32], %var_8554: Tensor[(5, 297), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(4, 15, 3), float32], Tensor[(6, 30), float32], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(165, 9), float64], Tensor[(5, 297), bool], Tensor[(165, 9), float32]) {
  %65 = fn (%var_8492: Tensor[(6, 30), float32], %var_8538: Tensor[(5, 297), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(4, 15, 3), float32], Tensor[(6, 30), float32], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(165, 9), float64], Tensor[(5, 297), bool], Tensor[(165, 9), float32]) {
    %24 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
    %25 = cast(%var_8492, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %26 = reshape(%25, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
    %27 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %28 = @func_5364() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) */;
    %29 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 297), float32] */, dtype="float32") /* ty=Tensor[(5, 297), float32] */;
    %30 = reshape(%29, newshape=[165, 9]) /* ty=Tensor[(165, 9), float32] */;
    %31 = @func_5989(%30) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(165, 9), float32]) */;
    %32 = %31.2;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(165, 9), float64] */;
    %34 = exp(%33) /* ty=Tensor[(165, 9), float64] */;
    %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 297), float32] */, dtype="float64") /* ty=Tensor[(5, 297), float64] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
    %37 = cast(%34, dtype="float64") /* ty=Tensor[(165, 9), float64] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %39 = cast(%var_8538, dtype="bool") /* ty=Tensor[(5, 297), bool] */;
    %40 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 297), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %41 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 297), float32] */, dtype="bool") /* ty=Tensor[(5, 297), bool] */;
    %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %43 = cast(%32, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
    %44 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
    %45 = cast(%34, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %47 = maximum(%45, %46) /* ty=Tensor[(165, 9), int64] */;
    %48 = cast(%47, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
    %49 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
    %50 = cast(%34, dtype="bool") /* ty=Tensor[(165, 9), bool] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %52 = greater_equal(%50, %51) /* ty=Tensor[(165, 9), bool] */;
    %53 = cast(%52, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
    %54 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
    %55 = cast(%34, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %57 = @func_6461() /* ty=Tensor[(12, 6, 6), float32] */;
    %58 = %24.0;
    %59 = @func_8176(%26) /* ty=Tensor[(4, 15, 3), float32] */;
    %60 = %27.0;
    %61 = %28.1;
    %62 = floor_divide(%37, %38) /* ty=Tensor[(165, 9), float64] */;
    %63 = less_equal(%41, %42) /* ty=Tensor[(5, 297), bool] */;
    %64 = divide(%55, %56) /* ty=Tensor[(165, 9), float32] */;
    (%57, %58, %59, %var_8492, %60, %61, %62, %63, %64)
  };
  %65(%var_8553, %var_8554) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(4, 15, 3), float32], Tensor[(6, 30), float32], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(165, 9), float64], Tensor[(5, 297), bool], Tensor[(165, 9), float32]) */
}

def @func_7472() -> (Tensor[(224), float64], Tensor[(11, 12, 4), float64], Tensor[(1), int32], Tensor[(288), float32]) {
  %74 = fn () -> (Tensor[(224), float64], Tensor[(11, 12, 4), float64], Tensor[(1), int32], Tensor[(288), float32]) {
    %66 = @func_6699() /* ty=(Tensor[(224), float64],) */;
    %67 = cast(meta[relay.Constant][1] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %69 = reshape(%67, newshape=[1]) /* ty=Tensor[(1), int32] */;
    %70 = reshape(%68, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %71 = @func_5583(%69, %70) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) */;
    %72 = %66.0;
    %73 = %71.11;
    (%72, %73, meta[relay.Constant][1] /* ty=Tensor[(1), int32] */, meta[relay.Constant][2] /* ty=Tensor[(288), float32] */)
  };
  %74() /* ty=(Tensor[(224), float64], Tensor[(11, 12, 4), float64], Tensor[(1), int32], Tensor[(288), float32]) */
}

def @func_5992(%var_5990: Tensor[(165, 9), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(165, 9), float32]) {
  @func_5989(%var_5990) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(165, 9), float32]) */
}

def @func_2153(%var_2113: Tensor[(13, 16), float64], %var_2142: Tensor[(224), float64]) -> (Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) {
  %75 = cast(%var_2113, dtype="float64") /* ty=Tensor[(13, 16), float64] */;
  %76 = cast(%var_2142, dtype="float64") /* ty=Tensor[(224), float64] */;
  %77 = reshape(%76, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %78 = @func_882(%77) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %79 = log(%75) /* ty=Tensor[(13, 16), float64] */;
  %80 = %78.0;
  (%79, %80, %var_2142)
}

def @func_7720() -> Tensor[(13, 8, 2), float64] {
  @func_7718() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_8653(%var_8651: Tensor[(1), int32], %var_8652: Tensor[(288), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(182), uint8], Tensor[(182), uint8], Tensor[(224), float64], Tensor[(1, 13), int32], Tensor[(13, 8, 2), float64], Tensor[(250), float64], Tensor[(8, 9, 12), float32], Tensor[(1485), bool], Tensor[(13, 7, ?), float32], Tensor[(288), float32]) {
  @func_8649(%var_8651, %var_8652) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(182), uint8], Tensor[(182), uint8], Tensor[(224), float64], Tensor[(1, 13), int32], Tensor[(13, 8, 2), float64], Tensor[(250), float64], Tensor[(8, 9, 12), float32], Tensor[(1485), bool], Tensor[(13, 7, ?), float32], Tensor[(288), float32]) */
}

def @func_6329() -> (Tensor[(13, 8, 2), float64],) {
  @func_6327() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_6784(%var_6776: Tensor[(91, 2), uint8]) -> (Tensor[(91, 1), float64], Tensor[(91, 9), bool], Tensor[(91, 9), bool], Tensor[(224), float64], Tensor[(13, 16), float64], Tensor[(12, 6, 6), float32], Tensor[(91, ?), uint16], Tensor[(91, 2), int8], Tensor[(208), float32]) {
  %81 = @func_6059() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), bool], Tensor[(91, 1), uint8]) */;
  %82 = %81.2;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
  %84 = cast(%82, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
  %85 = tan(%84) /* ty=Tensor[(91, 1), float64] */;
  %86 = cast(%85, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
  %87 = cast(meta[relay.Constant][3] /* ty=Tensor[(91, 9), float64] */, dtype="bool") /* ty=Tensor[(91, 9), bool] */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(91, 9), float64] */, dtype="bool") /* ty=Tensor[(91, 9), bool] */;
  %89 = cast(%85, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
  %90 = @func_6699() /* ty=(Tensor[(224), float64],) */;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %92 = %90.0;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(224), float64] */;
  %94 = reshape(%91, newshape=[13, 16]) /* ty=Tensor[(13, 16), float64] */;
  %95 = reshape(%93, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %96 = @func_2153(%94, %95) /* ty=(Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) */;
  %97 = cast(%85, dtype="uint16") /* ty=Tensor[(91, 1), uint16] */;
  %98 = shape_of(%82, dtype="int32") /* ty=Tensor[(2), int32] */;
  %99 = cast(%82, dtype="uint16") /* ty=Tensor[(91, 1), uint16] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %101 = cast(%82, dtype="int8") /* ty=Tensor[(91, 1), int8] */;
  %102 = cast(%var_6776, dtype="int8") /* ty=Tensor[(91, 2), int8] */;
  %103 = cast(meta[relay.Constant][4] /* ty=Tensor[(208), float64] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %104 = acos(%83) /* ty=Tensor[(91, 1), float64] */;
  %105 = not_equal(%86, %87) /* ty=Tensor[(91, 9), bool] */;
  %106 = greater(%88, %89) /* ty=Tensor[(91, 9), bool] */;
  %107 = %96.0;
  %108 = @func_6461() /* ty=Tensor[(12, 6, 6), float32] */;
  %109 = right_shift(%99, %100) /* ty=Tensor[(91, ?), uint16] */;
  %110 = left_shift(%101, %102) /* ty=Tensor[(91, 2), int8] */;
  %111 = sigmoid(%103) /* ty=Tensor[(208), float32] */;
  (%104, %105, %106, %92, %107, %108, %109, %110, %111)
}

def @func_7984() -> (Tensor[(13, 8, 2), float64],) {
  @func_7982() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_6060() -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), bool], Tensor[(91, 1), uint8]) {
  %120 = fn () -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), bool], Tensor[(91, 1), uint8]) {
    %112 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
    %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(91, 1), uint8] */, dtype="uint8") /* ty=Tensor[(91, 1), uint8] */;
    %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(91, 1), uint8] */, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
    %115 = reshape(%113, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
    %116 = reshape(%114, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
    %117 = @func_1730(%115, %116) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
    %118 = %112.0;
    %119 = %117.1;
    (%118, %119, meta[relay.Constant][5] /* ty=Tensor[(91, 1), uint8] */)
  };
  %120() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), bool], Tensor[(91, 1), uint8]) */
}

def @func_7982() -> (Tensor[(13, 8, 2), float64],) {
  %121 = @func_7163() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) */;
  %122 = %121.1;
  (%122,)
}

def @func_5583(%var_5563: Tensor[(1), int32], %var_5576: Tensor[(288), float32]) -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) {
  %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 7), uint8] */, dtype="uint8") /* ty=Tensor[(13, 7), uint8] */;
  %124 = reshape(%123, newshape=[91]) /* ty=Tensor[(91), uint8] */;
  %125 = @func_5163(%124) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), int16], Tensor[(91), uint64]) */;
  %126 = %125.1;
  %127 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 7), uint8] */, dtype="float32") /* ty=Tensor[(13, 7), float32] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="float32") /* ty=Tensor[(13, 7, ?), float32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %131 = cast(%var_5563, dtype="int32") /* ty=Tensor[(1), int32] */;
  %132 = reshape(%131, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %133 = @func_554(%132) /* ty=(Tensor[(1, 13), int32],) */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(864), uint64] */, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %135 = reshape(%134, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint64] */;
  %136 = @func_4720(%135) /* ty=(Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) */;
  %137 = cast(%126, dtype="float64") /* ty=Tensor[(13, 7, ?), float64] */;
  %138 = atanh(%137) /* ty=Tensor[(13, 7, ?), float64] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(13, 7, ?), float32] */;
  %140 = cast(%var_5576, dtype="float32") /* ty=Tensor[(288), float32] */;
  %141 = reshape(%140, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %142 = @func_2693(%141) /* ty=(Tensor[(16, 6, 3), float32], Tensor[(11, 3, 14), float64], Tensor[(231, 2), float64], Tensor[(1, 13), int32], Tensor[(1), int32]) */;
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %144 = reshape(%143, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float64] */;
  %145 = @func_4562(%144) /* ty=(Tensor[(11, 12, 4), float64],) */;
  %146 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %147 = floor_mod(%129, %130) /* ty=Tensor[(13, 7, ?), float32] */;
  %148 = @func_5229() /* ty=Tensor[(13, 8, 2), float64] */;
  %149 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %150 = %133.0;
  %151 = %136.3;
  %152 = log(%139) /* ty=Tensor[(13, 7, ?), float32] */;
  %153 = %142.2;
  %154 = %145.0;
  (%146, %147, %148, %149, %150, %var_5563, %151, meta[relay.Constant][7] /* ty=Tensor[(864), uint64] */, %152, %153, %var_5576, %154, meta[relay.Constant][8] /* ty=Tensor[(528), float64] */)
}

def @func_8155(%var_8145: Tensor[(720), float64]) -> (Tensor[(224), float64], Tensor[(720), float64], Tensor[(720), float64]) {
  %155 = @func_8031() /* ty=(Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) */;
  %156 = cast(%var_8145, dtype="float64") /* ty=Tensor[(720), float64] */;
  %157 = reshape(%156, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %158 = @func_5031(%157) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */;
  %159 = %155.2;
  %160 = %158.2;
  (%159, %160, %var_8145)
}

def @func_6463() -> Tensor[(12, 6, 6), float32] {
  @func_6461() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_8696(%var_8694: Tensor[(11, 250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(224), float64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(13, 8, 2), float64], Tensor[(11, 250), bool]) {
  @func_8693(%var_8694) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(224), float64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(13, 8, 2), float64], Tensor[(11, 250), bool]) */
}

def @func_2064(%var_2061: Tensor[(16, 6, 3), float32], %var_2062: Tensor[(25, 10), uint64], %var_2063: Tensor[(4, 56), float64]) -> (Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) {
  @func_2059(%var_2061, %var_2062, %var_2063) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */
}

def @func_5863() -> (Tensor[(12, 6, 6), float64],) {
  @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */
}

def @func_7517(%var_7515: Tensor[(16, 3, 12), uint16], %var_7516: Tensor[(16, 3, 12), uint16]) -> (Tensor[(16, 3, 12), uint16], Tensor[(12, 6, 6), float32]) {
  %170 = fn (%var_7490: Tensor[(16, 3, 12), uint16], %var_7491: Tensor[(16, 3, 12), uint16]) -> (Tensor[(16, 3, 12), uint16], Tensor[(12, 6, 6), float32]) {
    %161 = cast(%var_7491, dtype="uint16") /* ty=Tensor[(16, 3, 12), uint16] */;
    %162 = shape_of(%var_7490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %163 = cast(%var_7490, dtype="uint16") /* ty=Tensor[(16, 3, 12), uint16] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %165 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
    %166 = %165.0;
    %167 = cast(%166, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
    %168 = left_shift(%163, %164) /* ty=Tensor[(16, 3, 12), uint16] */;
    %169 = sqrt(%167) /* ty=Tensor[(12, 6, 6), float32] */;
    (%168, %169)
  };
  %170(%var_7515, %var_7516) /* ty=(Tensor[(16, 3, 12), uint16], Tensor[(12, 6, 6), float32]) */
}

def @func_8649(%var_8605: Tensor[(1), int32], %var_8647: Tensor[(288), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(182), uint8], Tensor[(182), uint8], Tensor[(224), float64], Tensor[(1, 13), int32], Tensor[(13, 8, 2), float64], Tensor[(250), float64], Tensor[(8, 9, 12), float32], Tensor[(1485), bool], Tensor[(13, 7, ?), float32], Tensor[(288), float32]) {
  %171 = @func_7163() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) */;
  %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(182), uint8] */, dtype="uint8") /* ty=Tensor[(182), uint8] */;
  %173 = cast(meta[relay.Constant][10] /* ty=Tensor[(250), uint64] */, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %174 = reshape(%172, newshape=[182]) /* ty=Tensor[(182), uint8] */;
  %175 = reshape(%173, newshape=[125, 2]) /* ty=Tensor[(125, 2), uint64] */;
  %176 = @func_7286(%174, %175) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) */;
  %177 = @func_8031() /* ty=(Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) */;
  %178 = cast(%var_8605, dtype="int32") /* ty=Tensor[(1), int32] */;
  %179 = reshape(%178, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %180 = @func_554(%179) /* ty=(Tensor[(1, 13), int32],) */;
  %181 = @func_6641() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(250), uint64] */, dtype="float64") /* ty=Tensor[(250), float64] */;
  %183 = cast(%var_8605, dtype="float64") /* ty=Tensor[(1), float64] */;
  %184 = cast(%var_8605, dtype="int32") /* ty=Tensor[(1), int32] */;
  %185 = %177.2;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(224), float64] */;
  %187 = reshape(%184, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %188 = reshape(%186, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %189 = @func_4953(%187, %188) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) */;
  %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %191 = cast(meta[relay.Constant][11] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %192 = reshape(%190, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %193 = reshape(%191, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %194 = @func_3594(%192, %193) /* ty=(Tensor[(9, 11, 15), float32],) */;
  %195 = %194.0;
  %196 = cast(%195, dtype="bool") /* ty=Tensor[(9, 11, 15), bool] */;
  %197 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(1485), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(1485), float32] */, dtype="bool") /* ty=Tensor[(1485), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?), bool] */;
  %200 = cast(%var_8605, dtype="int32") /* ty=Tensor[(1), int32] */;
  %201 = cast(%var_8647, dtype="float32") /* ty=Tensor[(288), float32] */;
  %202 = reshape(%200, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %203 = reshape(%201, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %204 = @func_5583(%202, %203) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) */;
  %205 = %171.0;
  %206 = %176.2;
  %207 = %180.0;
  %208 = %181.0;
  %209 = floor_divide(%182, %183) /* ty=Tensor[(250), float64] */;
  %210 = %189.8;
  %211 = logical_or(%198, %199) /* ty=Tensor[(1485), bool] */;
  %212 = %204.1;
  (%205, %206, meta[relay.Constant][9] /* ty=Tensor[(182), uint8] */, %185, %207, %208, %209, %210, %211, %212, %var_8647)
}

def @func_1453(%var_1451: Tensor[(10, 5, 5), uint64], %var_1452: Tensor[(10, 5, 5), uint64]) -> Tensor[(10, 5, 5), bool] {
  @func_1449(%var_1451, %var_1452) /* ty=Tensor[(10, 5, 5), bool] */
}

def @func_8033() -> (Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) {
  @func_8031() /* ty=(Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) */
}

def @func_8809(%var_8808: Tensor[(4, 7, 6), float32]) -> (Tensor[(4, 7, 6), float32], Tensor[(224), float64]) {
  %217 = fn (%var_8798: Tensor[(4, 7, 6), float32]) -> (Tensor[(4, 7, 6), float32], Tensor[(224), float64]) {
    %213 = cast(%var_8798, dtype="float32") /* ty=Tensor[(4, 7, 6), float32] */;
    %214 = @func_7013() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(224), float64]) */;
    %215 = erf(%213) /* ty=Tensor[(4, 7, 6), float32] */;
    %216 = %214.2;
    (%215, %216)
  };
  %217(%var_8808) /* ty=(Tensor[(4, 7, 6), float32], Tensor[(224), float64]) */
}

def @func_3369(%var_3366: Tensor[(8, 6, 15), float64], %var_3367: Tensor[(8, 6, 15), float64], %var_3368: Tensor[(288), float32]) -> (Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) {
  @func_3364(%var_3366, %var_3367, %var_3368) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) */
}

def @func_5804(%var_5802: Tensor[(1188), int16], %var_5803: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(250), uint64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(250), uint64]) {
  %228 = fn (%var_5770: Tensor[(1188), int16], %var_5772: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(250), uint64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(250), uint64]) {
    %218 = @func_5364() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) */;
    %219 = cast(%var_5770, dtype="int16") /* ty=Tensor[(1188), int16] */;
    %220 = cast(meta[relay.Constant][12] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %221 = cast(%var_5772, dtype="uint64") /* ty=Tensor[(250), uint64] */;
    %222 = reshape(%219, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), int16] */;
    %223 = reshape(%220, newshape=[24, 12]) /* ty=Tensor[(24, 12), float32] */;
    %224 = reshape(%221, newshape=[250]) /* ty=Tensor[(250), uint64] */;
    %225 = @func_2812(%222, %223, %224) /* ty=(Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) */;
    %226 = %218.0;
    %227 = %225.2;
    (%226, %227, %var_5770, meta[relay.Constant][12] /* ty=Tensor[(288), float32] */, %var_5772)
  };
  %228(%var_5802, %var_5803) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(250), uint64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(250), uint64]) */
}

def @func_5230() -> Tensor[(13, 8, 2), float64] {
  %230 = fn () -> Tensor[(13, 8, 2), float64] {
    %229 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %229.0
  };
  %230() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_8771(%var_8769: Tensor[(12, 48), uint16], %var_8770: Tensor[(120), float64]) -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 48), bool], Tensor[(13, 8, 2), float64], Tensor[(112, 2), float64], Tensor[(120), float64]) {
  %251 = fn (%var_8756: Tensor[(12, 48), uint16], %var_8764: Tensor[(120), float64]) -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 48), bool], Tensor[(13, 8, 2), float64], Tensor[(112, 2), float64], Tensor[(120), float64]) {
    %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 48), uint16] */, dtype="uint16") /* ty=Tensor[(12, 48), uint16] */;
    %232 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 48), uint16] */, dtype="uint16") /* ty=Tensor[(12, 48), uint16] */;
    %233 = reshape(%231, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), uint16] */;
    %234 = reshape(%232, newshape=[16, 3, 12]) /* ty=Tensor[(16, 3, 12), uint16] */;
    %235 = @func_7514(%233, %234) /* ty=(Tensor[(16, 3, 12), uint16], Tensor[(12, 6, 6), float32]) */;
    %236 = cast(%var_8756, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
    %237 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(12, 48), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %238 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 48), uint16] */, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %240 = @func_6641() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %241 = %240.0;
    %242 = cast(%241, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
    %243 = cast(%var_8764, dtype="float64") /* ty=Tensor[(120), float64] */;
    %244 = reshape(%243, newshape=[2, 15, 4]) /* ty=Tensor[(2, 15, 4), float64] */;
    %245 = @func_3930(%244) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(91), uint8], Tensor[(2, 15, 4), uint32], Tensor[(13, 7, ?), float64], Tensor[(1260), int8], Tensor[(208), float64], Tensor[(112, 2), float64]) */;
    %246 = @func_7718() /* ty=Tensor[(13, 8, 2), float64] */;
    %247 = %235.1;
    %248 = not_equal(%238, %239) /* ty=Tensor[(12, 48), bool] */;
    %249 = exp(%242) /* ty=Tensor[(13, 8, 2), float64] */;
    %250 = %245.6;
    (%246, %247, %248, %249, %250, %var_8764)
  };
  %251(%var_8769, %var_8770) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 48), bool], Tensor[(13, 8, 2), float64], Tensor[(112, 2), float64], Tensor[(120), float64]) */
}

def @func_5033(%var_5032: Tensor[(720), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) {
  %261 = fn (%var_5023: Tensor[(720), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) {
    %252 = cast(%var_5023, dtype="float64") /* ty=Tensor[(720), float64] */;
    %253 = cast(%var_5023, dtype="float64") /* ty=Tensor[(720), float64] */;
    %254 = cast(meta[relay.Constant][14] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %255 = reshape(%252, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
    %256 = reshape(%253, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
    %257 = reshape(%254, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %258 = @func_3364(%255, %256, %257) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) */;
    %259 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
    %260 = %258.2;
    (%259, %260, %var_5023, meta[relay.Constant][14] /* ty=Tensor[(288), float32] */)
  };
  %261(%var_5032) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */
}

def @func_8178(%var_8177: Tensor[(4, 15, 3), float32]) -> Tensor[(4, 15, 3), float32] {
  %263 = fn (%var_8165: Tensor[(4, 15, 3), float32]) -> Tensor[(4, 15, 3), float32] {
    %262 = cast(%var_8165, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
    rsqrt(%262) /* ty=Tensor[(4, 15, 3), float32] */
  };
  %263(%var_8177) /* ty=Tensor[(4, 15, 3), float32] */
}

def @func_6461() -> Tensor[(12, 6, 6), float32] {
  %264 = @func_6444() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) */;
  %264.0
}

def @func_8466(%var_8463: Tensor[(13, 8, 2), float64], %var_8464: Tensor[(288), float32], %var_8465: Tensor[(1), int32]) -> (Tensor[(13, 8, 2), bool], Tensor[(288), float32], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(1, 13), int32], Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), uint16], Tensor[(13, 8, 2), float64], Tensor[(10, 5, 5), float64]) {
  @func_8461(%var_8463, %var_8464, %var_8465) /* ty=(Tensor[(13, 8, 2), bool], Tensor[(288), float32], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(1, 13), int32], Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), uint16], Tensor[(13, 8, 2), float64], Tensor[(10, 5, 5), float64]) */
}

def @func_7777(%var_7728: Tensor[(12, 6, 5), float32], %var_7729: Tensor[(12, 6, 5), float32], %var_7746: Tensor[(288), float32], %var_7747: Tensor[(250), uint64], %var_7774: Tensor[(528), float64]) -> (Tensor[(12, 6, 5), float32], Tensor[(13, 8, 2), float64], Tensor[(25, 10), uint64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(12, 6, 5), float32], Tensor[(112, 2), float64], Tensor[(1), int32], Tensor[(16, 6, 3), float64], Tensor[(528), float64]) {
  %265 = cast(%var_7729, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %266 = shape_of(%var_7728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%var_7728, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %269 = @func_6641() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %270 = cast(%var_7746, dtype="float32") /* ty=Tensor[(288), float32] */;
  %271 = cast(%var_7747, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %272 = cast(meta[relay.Constant][15] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %273 = reshape(%270, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %274 = reshape(%271, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %275 = reshape(%272, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %276 = @func_2059(%273, %274, %275) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %277 = cast(%var_7729, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %278 = cast(meta[relay.Constant][16] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %279 = cast(meta[relay.Constant][15] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %280 = reshape(%278, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %281 = reshape(%279, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %282 = @func_4953(%280, %281) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) */;
  %283 = cast(%var_7774, dtype="float64") /* ty=Tensor[(528), float64] */;
  %284 = %276.2;
  %285 = cast(%284, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %286 = reshape(%283, newshape=[528]) /* ty=Tensor[(528), float64] */;
  %287 = reshape(%285, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %288 = @func_7354(%286, %287) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64], Tensor[(288), float32], Tensor[(1), int32], Tensor[(250), uint64], Tensor[(250), uint64]) */;
  %289 = add(%267, %268) /* ty=Tensor[(12, 6, 5), float32] */;
  %290 = %269.0;
  %291 = log10(%277) /* ty=Tensor[(12, 6, 5), float32] */;
  %292 = %282.12;
  %293 = %288.1;
  (%289, %290, %284, %var_7746, %var_7747, meta[relay.Constant][15] /* ty=Tensor[(224), float64] */, %291, %292, meta[relay.Constant][16] /* ty=Tensor[(1), int32] */, %293, %var_7774)
}

def @func_4871() -> Tensor[(12, 6, 6), float64] {
  %294 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %294.0
}

def @func_5082() -> (Tensor[(13, 8, 2), float64],) {
  %297 = fn () -> (Tensor[(13, 8, 2), float64],) {
    %295 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %296 = %295.0;
    (%296,)
  };
  %297() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_1734(%var_1732: Tensor[(13, 7, 1), uint8], %var_1733: Tensor[(13, 7, 1), bool]) -> (Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) {
  @func_1730(%var_1732, %var_1733) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */
}

def @func_6113() -> Tensor[(13, 8, 2), float64] {
  %298 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %298.0
}

def @func_5481(%var_5479: Tensor[(224), float64], %var_5480: Tensor[(288), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), int32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 5, 5), bool], Tensor[(5, 50), uint64]) {
  %326 = fn (%var_5417: Tensor[(224), float64], %var_5462: Tensor[(288), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), int32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 5, 5), bool], Tensor[(5, 50), uint64]) {
    %299 = cast(%var_5417, dtype="float64") /* ty=Tensor[(224), float64] */;
    %300 = reshape(%299, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
    %301 = @func_882(%300) /* ty=(Tensor[(14, 8, 2), uint32],) */;
    %302 = %301.0;
    %303 = cast(%302, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
    %304 = sqrt(%303) /* ty=Tensor[(14, 8, 2), float64] */;
    %305 = cast(%var_5417, dtype="int32") /* ty=Tensor[(224), int32] */;
    %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%304, dtype="int32") /* ty=Tensor[(14, 8, 2), int32] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %309 = cast(%var_5462, dtype="float64") /* ty=Tensor[(288), float64] */;
    %310 = cast(%var_5462, dtype="float64") /* ty=Tensor[(288), float64] */;
    %311 = reshape(%309, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
    %312 = reshape(%310, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float64] */;
    %313 = @func_4043(%311, %312) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float64]) */;
    %314 = cast(meta[relay.Constant][17] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %315 = reshape(%314, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
    %316 = @func_1517(%315) /* ty=(Tensor[(11, 3, 14), float64],) */;
    %317 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 50), uint64] */, dtype="uint64") /* ty=Tensor[(5, 50), uint64] */;
    %318 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 50), uint64] */, dtype="uint64") /* ty=Tensor[(5, 50), uint64] */;
    %319 = reshape(%317, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
    %320 = reshape(%318, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
    %321 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
    %322 = bitwise_or(%307, %308) /* ty=Tensor[(14, 8, 2), int32] */;
    %323 = %313.1;
    %324 = %316.0;
    %325 = @func_1449(%319, %320) /* ty=Tensor[(10, 5, 5), bool] */;
    (%321, %322, %323, %var_5462, %324, meta[relay.Constant][17] /* ty=Tensor[(462), float64] */, %325, meta[relay.Constant][18] /* ty=Tensor[(5, 50), uint64] */)
  };
  %326(%var_5479, %var_5480) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), int32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 5, 5), bool], Tensor[(5, 50), uint64]) */
}

def @func_7576() -> (Tensor[(16, 6, 3), float64],) {
  %329 = fn () -> (Tensor[(16, 6, 3), float64],) {
    %327 = @func_7212() /* ty=(Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */;
    %328 = %327.1;
    (%328,)
  };
  %329() /* ty=(Tensor[(16, 6, 3), float64],) */
}

def @func_554(%var_544: Tensor[(1, 1), int32]) -> (Tensor[(1, 13), int32],) {
  %330 = cast(%var_544, dtype="int32") /* ty=Tensor[(1, 1), int32] */;
  %331 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 13), int32] */, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %332 = bitwise_xor(%330, %331) /* ty=Tensor[(1, 13), int32] */;
  (%332,)
}

def @func_557(%var_555: Tensor[(1, 1), int32]) -> (Tensor[(1, 13), int32],) {
  @func_554(%var_555) /* ty=(Tensor[(1, 13), int32],) */
}

def @func_3932(%var_3931: Tensor[(2, 15, 4), float64]) -> (Tensor[(13, 7, ?), int16], Tensor[(91), uint8], Tensor[(2, 15, 4), uint32], Tensor[(13, 7, ?), float64], Tensor[(1260), int8], Tensor[(208), float64], Tensor[(112, 2), float64]) {
  %363 = fn (%var_3892: Tensor[(2, 15, 4), float64]) -> (Tensor[(13, 7, ?), int16], Tensor[(91), uint8], Tensor[(2, 15, 4), uint32], Tensor[(13, 7, ?), float64], Tensor[(1260), int8], Tensor[(208), float64], Tensor[(112, 2), float64]) {
    %333 = cast(meta[relay.Constant][20] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
    %334 = cast(meta[relay.Constant][20] /* ty=Tensor[(91), uint8] */, dtype="bool") /* ty=Tensor[(91), bool] */;
    %335 = reshape(%333, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
    %336 = reshape(%334, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
    %337 = @func_1730(%335, %336) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
    %338 = cast(%var_3892, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
    %339 = rsqrt(%338) /* ty=Tensor[(2, 15, 4), float64] */;
    %340 = cast(%339, dtype="float32") /* ty=Tensor[(2, 15, 4), float32] */;
    %341 = asinh(%340) /* ty=Tensor[(2, 15, 4), float32] */;
    %342 = cast(%var_3892, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
    %343 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %344 = cast(%339, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
    %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %346 = minimum(%344, %345) /* ty=Tensor[(2, 15, 4), float64] */;
    %347 = cast(%346, dtype="uint32") /* ty=Tensor[(2, 15, 4), uint32] */;
    %348 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%341, dtype="uint32") /* ty=Tensor[(2, 15, 4), uint32] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %352 = %337.2;
    %353 = cast(%352, dtype="uint8") /* ty=Tensor[(13, 7, ?), uint8] */;
    %354 = cast(meta[relay.Constant][22] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
    %355 = cast(meta[relay.Constant][23] /* ty=Tensor[(112, 2), float64] */, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
    %356 = reshape(%351, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int8] */;
    %357 = reshape(%353, newshape=[13, 7]) /* ty=Tensor[(13, 7), uint8] */;
    %358 = reshape(%354, newshape=[208]) /* ty=Tensor[(208), float64] */;
    %359 = reshape(%355, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
    %360 = @func_2603(%356, %357, %358, %359) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) */;
    %361 = bitwise_xor(%349, %350) /* ty=Tensor[(2, 15, 4), uint32] */;
    %362 = %360.5;
    (%352, meta[relay.Constant][20] /* ty=Tensor[(91), uint8] */, %361, %362, meta[relay.Constant][21] /* ty=Tensor[(1260), int8] */, meta[relay.Constant][22] /* ty=Tensor[(208), float64] */, meta[relay.Constant][23] /* ty=Tensor[(112, 2), float64] */)
  };
  %363(%var_3931) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(91), uint8], Tensor[(2, 15, 4), uint32], Tensor[(13, 7, ?), float64], Tensor[(1260), int8], Tensor[(208), float64], Tensor[(112, 2), float64]) */
}

def @func_6787(%var_6785: Tensor[(91, 2), uint8]) -> (Tensor[(91, 1), float64], Tensor[(91, 9), bool], Tensor[(91, 9), bool], Tensor[(224), float64], Tensor[(13, 16), float64], Tensor[(12, 6, 6), float32], Tensor[(91, ?), uint16], Tensor[(91, 2), int8], Tensor[(208), float32]) {
  @func_6784(%var_6785) /* ty=(Tensor[(91, 1), float64], Tensor[(91, 9), bool], Tensor[(91, 9), bool], Tensor[(224), float64], Tensor[(13, 16), float64], Tensor[(12, 6, 6), float32], Tensor[(91, ?), uint16], Tensor[(91, 2), int8], Tensor[(208), float32]) */
}

def @func_5989(%var_5985: Tensor[(165, 9), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(165, 9), float32]) {
  %364 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %365 = cast(%var_5985, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
  %366 = cast(%var_5985, dtype="float32") /* ty=Tensor[(165, 9), float32] */;
  %367 = reshape(%365, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %368 = reshape(%366, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %369 = @func_3594(%367, %368) /* ty=(Tensor[(9, 11, 15), float32],) */;
  %370 = %364.0;
  %371 = %369.0;
  (%370, %371, %var_5985)
}

def @func_7418() -> Tensor[(13, 8, 2), float64] {
  %373 = fn () -> Tensor[(13, 8, 2), float64] {
    %372 = @func_6444() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) */;
    %372.1
  };
  %373() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_7718() -> Tensor[(13, 8, 2), float64] {
  @func_6113() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_5365() -> (Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) {
  %381 = fn () -> (Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) {
    %374 = cast(meta[relay.Constant][24] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
    %375 = reshape(%374, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
    %376 = @func_882(%375) /* ty=(Tensor[(14, 8, 2), uint32],) */;
    %377 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %378 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
    %379 = %376.0;
    %380 = %377.0;
    (%378, %379, meta[relay.Constant][24] /* ty=Tensor[(224), float64] */, %380)
  };
  %381() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) */
}

def @func_7090(%var_7040: Tensor[(495, 3), float32], %var_7052: Tensor[(25, 10), float32]) -> (Tensor[(12, 10, 15), int64], Tensor[(224), float64], Tensor[(2520, 1), uint8], Tensor[(91), uint8], Tensor[(224, 1), float64], Tensor[(9, 11, 15), float32], Tensor[(495, 3), float32], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(13, 8, 2), float64]) {
  %382 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 10, 15), int64] */, dtype="int64") /* ty=Tensor[(12, 10, 15), int64] */;
  %383 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(12, 10, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 10, 15), int64] */, dtype="int64") /* ty=Tensor[(12, 10, 15), int64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %386 = cast(meta[relay.Constant][27] /* ty=Tensor[(2520, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2520, 1), uint8] */;
  %387 = cast(meta[relay.Constant][27] /* ty=Tensor[(2520, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2520, 1), uint8] */;
  %388 = cast(meta[relay.Constant][28] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %389 = cast(meta[relay.Constant][29] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %390 = reshape(%386, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
  %391 = reshape(%387, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
  %392 = reshape(%388, newshape=[91, 1]) /* ty=Tensor[(91, 1), uint8] */;
  %393 = reshape(%389, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %394 = @func_3654(%390, %391, %392, %393) /* ty=(Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) */;
  %395 = cast(%var_7040, dtype="float32") /* ty=Tensor[(495, 3), float32] */;
  %396 = cast(%var_7040, dtype="float32") /* ty=Tensor[(495, 3), float32] */;
  %397 = reshape(%395, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %398 = reshape(%396, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
  %399 = @func_3594(%397, %398) /* ty=(Tensor[(9, 11, 15), float32],) */;
  %400 = cast(meta[relay.Constant][30] /* ty=Tensor[(25, 10), uint64] */, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %401 = reshape(%400, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %402 = @func_5913(%401) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) */;
  %403 = cast(meta[relay.Constant][30] /* ty=Tensor[(25, 10), uint64] */, dtype="float32") /* ty=Tensor[(25, 10), float32] */;
  %404 = log(%403) /* ty=Tensor[(25, 10), float32] */;
  %405 = cast(%var_7052, dtype="uint32") /* ty=Tensor[(25, 10), uint32] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(2), int32] */;
  %407 = cast(%404, dtype="uint32") /* ty=Tensor[(25, 10), uint32] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %409 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %410 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %411 = add(%384, %385) /* ty=Tensor[(12, 10, 15), int64] */;
  %412 = %394.4;
  %413 = %399.0;
  %414 = %402.1;
  %415 = bitwise_xor(%407, %408) /* ty=Tensor[(25, 10), uint32] */;
  %416 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
  %417 = %409.0;
  %418 = %410.0;
  (%411, %412, meta[relay.Constant][27] /* ty=Tensor[(2520, 1), uint8] */, meta[relay.Constant][28] /* ty=Tensor[(91), uint8] */, meta[relay.Constant][29] /* ty=Tensor[(224, 1), float64] */, %413, %var_7040, %414, %415, %416, %417, %418)
}

def @func_7879(%var_7875: Tensor[(2, 16, 11), float64], %var_7876: Tensor[(2, 16, 11), float64], %var_7877: Tensor[(1, 91), uint8], %var_7878: Tensor[(112, 2), float64]) -> (Tensor[(2, 16, 11), int16], Tensor[(2520), uint8], Tensor[(1, 91), uint8], Tensor[(112, 2), float64], Tensor[(91, ?), float64]) {
  %446 = fn (%var_7837: Tensor[(2, 16, 11), float64], %var_7838: Tensor[(2, 16, 11), float64], %var_7859: Tensor[(1, 91), uint8], %var_7860: Tensor[(112, 2), float64]) -> (Tensor[(2, 16, 11), int16], Tensor[(2520), uint8], Tensor[(1, 91), uint8], Tensor[(112, 2), float64], Tensor[(91, ?), float64]) {
    %419 = cast(%var_7838, dtype="float64") /* ty=Tensor[(2, 16, 11), float64] */;
    %420 = shape_of(%var_7837, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(%var_7837, dtype="float64") /* ty=Tensor[(2, 16, 11), float64] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %423 = floor_mod(%421, %422) /* ty=Tensor[(2, 16, 11), float64] */;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
    %425 = shape_of(%var_7837, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%var_7837, dtype="float32") /* ty=Tensor[(2, 16, 11), float32] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %428 = add(%426, %427) /* ty=Tensor[(2, 16, 11), float32] */;
    %429 = cast(%var_7838, dtype="int16") /* ty=Tensor[(2, 16, 11), int16] */;
    %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(%428, dtype="int16") /* ty=Tensor[(2, 16, 11), int16] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %433 = cast(meta[relay.Constant][31] /* ty=Tensor[(2520), uint8] */, dtype="uint8") /* ty=Tensor[(2520), uint8] */;
    %434 = cast(meta[relay.Constant][31] /* ty=Tensor[(2520), uint8] */, dtype="uint8") /* ty=Tensor[(2520), uint8] */;
    %435 = cast(%var_7859, dtype="uint8") /* ty=Tensor[(1, 91), uint8] */;
    %436 = cast(%var_7860, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
    %437 = reshape(%433, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
    %438 = reshape(%434, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), uint8] */;
    %439 = reshape(%435, newshape=[91, 1]) /* ty=Tensor[(91, 1), uint8] */;
    %440 = reshape(%436, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %441 = @func_3654(%437, %438, %439, %440) /* ty=(Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) */;
    %442 = %441.1;
    %443 = cast(%442, dtype="float64") /* ty=Tensor[(91, ?), float64] */;
    %444 = right_shift(%431, %432) /* ty=Tensor[(2, 16, 11), int16] */;
    %445 = cosh(%443) /* ty=Tensor[(91, ?), float64] */;
    (%444, meta[relay.Constant][31] /* ty=Tensor[(2520), uint8] */, %var_7859, %var_7860, %445)
  };
  %446(%var_7875, %var_7876, %var_7877, %var_7878) /* ty=(Tensor[(2, 16, 11), int16], Tensor[(2520), uint8], Tensor[(1, 91), uint8], Tensor[(112, 2), float64], Tensor[(91, ?), float64]) */
}

def @func_7385() -> (Tensor[(13, 8, 2), float64],) {
  %448 = fn () -> (Tensor[(13, 8, 2), float64],) {
    %447 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
    (%447,)
  };
  %448() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_6182() -> Tensor[(13, 8, 2), float64] {
  @func_6113() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_4987() -> (Tensor[(13, 8, 2), float64],) {
  @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_7094(%var_7092: Tensor[(495, 3), float32], %var_7093: Tensor[(25, 10), float32]) -> (Tensor[(12, 10, 15), int64], Tensor[(224), float64], Tensor[(2520, 1), uint8], Tensor[(91), uint8], Tensor[(224, 1), float64], Tensor[(9, 11, 15), float32], Tensor[(495, 3), float32], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(13, 8, 2), float64]) {
  @func_7090(%var_7092, %var_7093) /* ty=(Tensor[(12, 10, 15), int64], Tensor[(224), float64], Tensor[(2520, 1), uint8], Tensor[(91), uint8], Tensor[(224, 1), float64], Tensor[(9, 11, 15), float32], Tensor[(495, 3), float32], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(13, 8, 2), float64]) */
}

def @func_7784(%var_7779: Tensor[(12, 6, 5), float32], %var_7780: Tensor[(12, 6, 5), float32], %var_7781: Tensor[(288), float32], %var_7782: Tensor[(250), uint64], %var_7783: Tensor[(528), float64]) -> (Tensor[(12, 6, 5), float32], Tensor[(13, 8, 2), float64], Tensor[(25, 10), uint64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(12, 6, 5), float32], Tensor[(112, 2), float64], Tensor[(1), int32], Tensor[(16, 6, 3), float64], Tensor[(528), float64]) {
  @func_7777(%var_7779, %var_7780, %var_7781, %var_7782, %var_7783) /* ty=(Tensor[(12, 6, 5), float32], Tensor[(13, 8, 2), float64], Tensor[(25, 10), uint64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(12, 6, 5), float32], Tensor[(112, 2), float64], Tensor[(1), int32], Tensor[(16, 6, 3), float64], Tensor[(528), float64]) */
}

def @func_2157(%var_2155: Tensor[(13, 16), float64], %var_2156: Tensor[(224), float64]) -> (Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) {
  @func_2153(%var_2155, %var_2156) /* ty=(Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) */
}

def @func_7014() -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(224), float64]) {
  %453 = fn () -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(224), float64]) {
    %449 = @func_6077() /* ty=(Tensor[(224), float64],) */;
    %450 = @func_6113() /* ty=Tensor[(13, 8, 2), float64] */;
    %451 = @func_6461() /* ty=Tensor[(12, 6, 6), float32] */;
    %452 = %449.0;
    (%450, %451, %452)
  };
  %453() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(224), float64]) */
}

def @func_5916(%var_5914: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) {
  @func_5913(%var_5914) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) */
}

def @func_7164() -> (Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) {
  %461 = fn () -> (Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) {
    %454 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %455 = cast(meta[relay.Constant][32] /* ty=Tensor[(224, 1), float64] */, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %456 = reshape(%455, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
    %457 = @func_882(%456) /* ty=(Tensor[(14, 8, 2), uint32],) */;
    %458 = %454.0;
    %459 = @func_6623() /* ty=Tensor[(13, 8, 2), float64] */;
    %460 = %457.0;
    (%458, %459, %460, meta[relay.Constant][32] /* ty=Tensor[(224, 1), float64] */)
  };
  %461() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) */
}

def @func_3659(%var_3655: Tensor[(12, 15, 14), uint8], %var_3656: Tensor[(12, 15, 14), uint8], %var_3657: Tensor[(91, 1), uint8], %var_3658: Tensor[(224), float64]) -> (Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) {
  %495 = fn (%var_3600: Tensor[(12, 15, 14), uint8], %var_3601: Tensor[(12, 15, 14), uint8], %var_3621: Tensor[(91, 1), uint8], %var_3644: Tensor[(224), float64]) -> (Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) {
    %462 = cast(%var_3601, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
    %463 = shape_of(%var_3600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%var_3600, dtype="bool") /* ty=Tensor[(12, 15, 14), bool] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %466 = equal(%464, %465) /* ty=Tensor[(12, 15, 14), bool] */;
    %467 = cast(%466, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
    %468 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%var_3601, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %471 = cast(%var_3621, dtype="uint8") /* ty=Tensor[(91, 1), uint8] */;
    %472 = cast(%var_3621, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
    %473 = reshape(%471, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
    %474 = reshape(%472, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
    %475 = @func_1730(%473, %474) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
    %476 = %475.2;
    %477 = cast(%476, dtype="bool") /* ty=Tensor[(13, 7, ?), bool] */;
    %478 = shape_of(%var_3621, dtype="int32") /* ty=Tensor[(2), int32] */;
    %479 = cast(%var_3621, dtype="bool") /* ty=Tensor[(91, 1), bool] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %481 = cast(%var_3601, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
    %482 = cast(%var_3644, dtype="float64") /* ty=Tensor[(224), float64] */;
    %483 = reshape(%482, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
    %484 = @func_882(%483) /* ty=(Tensor[(14, 8, 2), uint32],) */;
    %485 = cast(meta[relay.Constant][33] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
    %486 = %484.0;
    %487 = cast(%486, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
    %488 = reshape(%485, newshape=[13, 16]) /* ty=Tensor[(13, 16), float64] */;
    %489 = reshape(%487, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %490 = @func_2153(%488, %489) /* ty=(Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) */;
    %491 = floor_mod(%469, %470) /* ty=Tensor[(12, 15, 14), float32] */;
    %492 = logical_and(%479, %480) /* ty=Tensor[(91, ?), bool] */;
    %493 = sinh(%481) /* ty=Tensor[(12, 15, 14), float32] */;
    %494 = %490.2;
    (%491, %492, %493, %486, %var_3644, %494, meta[relay.Constant][33] /* ty=Tensor[(208), float64] */)
  };
  %495(%var_3655, %var_3656, %var_3657, %var_3658) /* ty=(Tensor[(12, 15, 14), float32], Tensor[(91, ?), bool], Tensor[(12, 15, 14), float32], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(224), float64], Tensor[(208), float64]) */
}

def @func_8031() -> (Tensor[(16, 6, 3), float64], Tensor[(14, 8, 2), int32], Tensor[(224), float64]) {
  %496 = @func_7575() /* ty=(Tensor[(16, 6, 3), float64],) */;
  %497 = cast(meta[relay.Constant][34] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %498 = %496.0;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(16, 6, 3), float64] */;
  %500 = reshape(%497, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %501 = reshape(%499, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %502 = @func_5478(%500, %501) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), int32], Tensor[(12, 12, 2), float64], Tensor[(288), float64], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 5, 5), bool], Tensor[(5, 50), uint64]) */;
  %503 = %502.1;
  (%498, %503, meta[relay.Constant][34] /* ty=Tensor[(224), float64] */)
}

def @func_1517(%var_1510: Tensor[(11, 3, 14), float64]) -> (Tensor[(11, 3, 14), float64],) {
  %504 = cast(%var_1510, dtype="float64") /* ty=Tensor[(11, 3, 14), float64] */;
  %505 = rsqrt(%504) /* ty=Tensor[(11, 3, 14), float64] */;
  (%505,)
}

def @func_4873() -> Tensor[(12, 6, 6), float64] {
  @func_4871() /* ty=Tensor[(12, 6, 6), float64] */
}

def @func_6077() -> (Tensor[(224), float64],) {
  %506 = @func_5364() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64], Tensor[(13, 8, 2), float64]) */;
  %507 = %506.2;
  (%507,)
}

def @func_6327() -> (Tensor[(13, 8, 2), float64],) {
  %508 = @func_5229() /* ty=Tensor[(13, 8, 2), float64] */;
  (%508,)
}

def @func_5913(%var_5897: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) {
  %509 = cast(%var_5897, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %510 = cast(%var_5897, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %511 = reshape(%509, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %512 = reshape(%510, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %513 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %514 = @func_1449(%511, %512) /* ty=Tensor[(10, 5, 5), bool] */;
  (%513, %514, %var_5897)
}

def @func_2816(%var_2813: Tensor[(9, 12, 11), int16], %var_2814: Tensor[(24, 12), float32], %var_2815: Tensor[(250), uint64]) -> (Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) {
  %538 = fn (%var_2755: Tensor[(9, 12, 11), int16], %var_2774: Tensor[(24, 12), float32], %var_2775: Tensor[(250), uint64]) -> (Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) {
    %515 = cast(%var_2774, dtype="float32") /* ty=Tensor[(24, 12), float32] */;
    %516 = cast(%var_2775, dtype="uint64") /* ty=Tensor[(250), uint64] */;
    %517 = cast(meta[relay.Constant][35] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
    %518 = reshape(%515, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
    %519 = reshape(%516, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
    %520 = reshape(%517, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
    %521 = @func_2059(%518, %519, %520) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
    %522 = %521.1;
    %523 = cast(%522, dtype="uint64") /* ty=Tensor[(10, 5, 5), uint64] */;
    %524 = cast(%522, dtype="uint64") /* ty=Tensor[(10, 5, 5), uint64] */;
    %525 = reshape(%523, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
    %526 = reshape(%524, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
    %527 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 11), int16] */, dtype="float64") /* ty=Tensor[(1, 12, 11), float64] */;
    %528 = log(%527) /* ty=Tensor[(1, 12, 11), float64] */;
    %529 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 11), int16] */, dtype="int16") /* ty=Tensor[(1, 12, 11), int16] */;
    %530 = cast(%var_2755, dtype="int16") /* ty=Tensor[(9, 12, 11), int16] */;
    %531 = bitwise_or(%529, %530) /* ty=Tensor[(9, 12, 11), int16] */;
    %532 = cast(%528, dtype="bool") /* ty=Tensor[(1, 12, 11), bool] */;
    %533 = cast(%531, dtype="bool") /* ty=Tensor[(9, 12, 11), bool] */;
    %534 = logical_or(%532, %533) /* ty=Tensor[(9, 12, 11), bool] */;
    %535 = cast(%534, dtype="float32") /* ty=Tensor[(9, 12, 11), float32] */;
    %536 = @func_1449(%525, %526) /* ty=Tensor[(10, 5, 5), bool] */;
    %537 = exp(%535) /* ty=Tensor[(9, 12, 11), float32] */;
    (%522, %var_2774, %var_2775, meta[relay.Constant][35] /* ty=Tensor[(224), float64] */, %536, %537)
  };
  %538(%var_2813, %var_2814, %var_2815) /* ty=(Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) */
}

def @func_3598(%var_3596: Tensor[(9, 11, 15), float32], %var_3597: Tensor[(9, 11, 15), float32]) -> (Tensor[(9, 11, 15), float32],) {
  @func_3594(%var_3596, %var_3597) /* ty=(Tensor[(9, 11, 15), float32],) */
}

def @func_6699() -> (Tensor[(224), float64],) {
  %539 = @func_6077() /* ty=(Tensor[(224), float64],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(224), float64] */;
  %542 = log(%541) /* ty=Tensor[(224), float64] */;
  (%542,)
}

def @func_6445() -> (Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) {
  %549 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) {
    %543 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
    %544 = %543.0;
    %545 = cast(%544, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
    %546 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %547 = atan(%545) /* ty=Tensor[(12, 6, 6), float32] */;
    %548 = %546.0;
    (%547, %548)
  };
  %549() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) */
}

def @func_6624() -> Tensor[(13, 8, 2), float64] {
  %551 = fn () -> Tensor[(13, 8, 2), float64] {
    %550 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %550.0
  };
  %551() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_6115() -> Tensor[(13, 8, 2), float64] {
  @func_6113() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_4985() -> (Tensor[(13, 8, 2), float64],) {
  %552 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
  %553 = asin(%552) /* ty=Tensor[(13, 8, 2), float64] */;
  (%553,)
}

def @func_5619() -> (Tensor[(13, 8, 2), float64],) {
  %556 = fn () -> (Tensor[(13, 8, 2), float64],) {
    %554 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %555 = %554.0;
    (%555,)
  };
  %556() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_6184() -> Tensor[(13, 8, 2), float64] {
  @func_6182() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_4723(%var_4721: Tensor[(6, 12, 12), uint64]) -> (Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) {
  @func_4720(%var_4721) /* ty=(Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) */
}

def @func_5861() -> (Tensor[(12, 6, 6), float64],) {
  %557 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %558 = %557.0;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %560 = exp(%559) /* ty=Tensor[(12, 6, 6), float64] */;
  (%560,)
}

def @func_6356(%var_6346: Tensor[(6, 11, 1), float64]) -> (Tensor[(6, 11, 1), float64],) {
  %561 = cast(%var_6346, dtype="float64") /* ty=Tensor[(6, 11, 1), float64] */;
  %562 = atanh(%561) /* ty=Tensor[(6, 11, 1), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(6, 11, 1), float64] */;
  %564 = log10(%563) /* ty=Tensor[(6, 11, 1), float64] */;
  (%564,)
}

def @func_8461(%var_8367: Tensor[(13, 8, 2), float64], %var_8381: Tensor[(288), float32], %var_8401: Tensor[(1), int32]) -> (Tensor[(13, 8, 2), bool], Tensor[(288), float32], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(1, 13), int32], Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), uint16], Tensor[(13, 8, 2), float64], Tensor[(10, 5, 5), float64]) {
  %565 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
  %566 = cast(%var_8367, dtype="bool") /* ty=Tensor[(13, 8, 2), bool] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="bool") /* ty=Tensor[(13, 8, 2), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = cast(%var_8381, dtype="float32") /* ty=Tensor[(288), float32] */;
  %571 = cast(meta[relay.Constant][39] /* ty=Tensor[(250, 1), uint64] */, dtype="uint64") /* ty=Tensor[(250, 1), uint64] */;
  %572 = cast(meta[relay.Constant][38] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %573 = reshape(%570, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %574 = reshape(%571, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %575 = reshape(%572, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %576 = @func_2059(%573, %574, %575) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %577 = %576.1;
  %578 = cast(meta[relay.Constant][39] /* ty=Tensor[(250, 1), uint64] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(10, 5, 5), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %582 = cast(%var_8401, dtype="int32") /* ty=Tensor[(1), int32] */;
  %583 = reshape(%582, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %584 = @func_554(%583) /* ty=(Tensor[(1, 13), int32],) */;
  %585 = @func_7575() /* ty=(Tensor[(16, 6, 3), float64],) */;
  %586 = cast(%577, dtype="uint16") /* ty=Tensor[(10, 5, 5), uint16] */;
  %587 = cast(%var_8401, dtype="uint16") /* ty=Tensor[(1), uint16] */;
  %588 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %589 = cast(%577, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %590 = acos(%589) /* ty=Tensor[(10, 5, 5), float32] */;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %592 = less_equal(%568, %569) /* ty=Tensor[(13, 8, 2), bool] */;
  %593 = greater_equal(%580, %581) /* ty=Tensor[(10, 5, 5), bool] */;
  %594 = %584.0;
  %595 = %585.0;
  %596 = left_shift(%586, %587) /* ty=Tensor[(10, 5, 5), uint16] */;
  %597 = %588.0;
  %598 = asinh(%591) /* ty=Tensor[(10, 5, 5), float64] */;
  (%592, %var_8381, meta[relay.Constant][38] /* ty=Tensor[(224), float64] */, %593, %594, %595, %596, %597, %598)
}

def @func_1449(%var_1436: Tensor[(10, 5, 5), uint64], %var_1437: Tensor[(10, 5, 5), uint64]) -> Tensor[(10, 5, 5), bool] {
  %599 = cast(%var_1437, dtype="bool") /* ty=Tensor[(10, 5, 5), bool] */;
  %600 = shape_of(%var_1436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_1436, dtype="bool") /* ty=Tensor[(10, 5, 5), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%601, %602) /* ty=Tensor[(10, 5, 5), bool] */
}

def @func_6642() -> (Tensor[(13, 8, 2), float64],) {
  %605 = fn () -> (Tensor[(13, 8, 2), float64],) {
    %603 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %604 = %603.0;
    (%604,)
  };
  %605() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_6701() -> (Tensor[(224), float64],) {
  @func_6699() /* ty=(Tensor[(224), float64],) */
}

def @func_7212() -> (Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) {
  %606 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 9, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 9, 5), float64] */;
  %607 = cast(meta[relay.Constant][41] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %608 = cast(meta[relay.Constant][41] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %609 = cast(meta[relay.Constant][42] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %610 = reshape(%607, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %611 = reshape(%608, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %612 = reshape(%609, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %613 = @func_3364(%610, %611, %612) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) */;
  %614 = exp(%606) /* ty=Tensor[(14, 9, 5), float64] */;
  %615 = %613.2;
  (%614, %615, meta[relay.Constant][41] /* ty=Tensor[(720), float64] */, meta[relay.Constant][42] /* ty=Tensor[(288), float32] */)
}

def @func_7290(%var_7288: Tensor[(182), uint8], %var_7289: Tensor[(125, 2), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) {
  @func_7286(%var_7288, %var_7289) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) */
}

def @func_6586() -> (Tensor[(13, 8, 2), float64],) {
  %618 = fn () -> (Tensor[(13, 8, 2), float64],) {
    %616 = @func_6327() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %617 = %616.0;
    (%617,)
  };
  %618() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_7149(%var_7146: Tensor[(15, 99), float32], %var_7147: Tensor[(250), float32], %var_7148: Tensor[(224), float64]) -> (Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(15, 99), float32], Tensor[(250), float32], Tensor[(13, 8, 2), float64], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(224), float64]) {
  %636 = fn (%var_7104: Tensor[(15, 99), float32], %var_7105: Tensor[(250), float32], %var_7132: Tensor[(224), float64]) -> (Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(15, 99), float32], Tensor[(250), float32], Tensor[(13, 8, 2), float64], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(224), float64]) {
    %619 = @func_6444() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 8, 2), float64]) */;
    %620 = cast(%var_7104, dtype="float32") /* ty=Tensor[(15, 99), float32] */;
    %621 = cast(%var_7105, dtype="float32") /* ty=Tensor[(250), float32] */;
    %622 = reshape(%620, newshape=[495, 3]) /* ty=Tensor[(495, 3), float32] */;
    %623 = reshape(%621, newshape=[25, 10]) /* ty=Tensor[(25, 10), float32] */;
    %624 = @func_7090(%622, %623) /* ty=(Tensor[(12, 10, 15), int64], Tensor[(224), float64], Tensor[(2520, 1), uint8], Tensor[(91), uint8], Tensor[(224, 1), float64], Tensor[(9, 11, 15), float32], Tensor[(495, 3), float32], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(13, 8, 2), float64]) */;
    %625 = cast(meta[relay.Constant][43] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %626 = cast(%var_7105, dtype="uint64") /* ty=Tensor[(250), uint64] */;
    %627 = cast(%var_7132, dtype="float64") /* ty=Tensor[(224), float64] */;
    %628 = reshape(%625, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
    %629 = reshape(%626, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
    %630 = reshape(%627, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
    %631 = @func_2059(%628, %629, %630) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
    %632 = %619.1;
    %633 = %624.3;
    %634 = @func_6182() /* ty=Tensor[(13, 8, 2), float64] */;
    %635 = %631.0;
    (%632, %633, %var_7104, %var_7105, %634, %635, meta[relay.Constant][43] /* ty=Tensor[(288), float32] */, %var_7132)
  };
  %636(%var_7146, %var_7147, %var_7148) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(15, 99), float32], Tensor[(250), float32], Tensor[(13, 8, 2), float64], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(224), float64]) */
}

def @func_1390(%var_1388: Tensor[(8, 9, 12), float32], %var_1389: Tensor[(1, 1), int32]) -> (Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) {
  %645 = fn (%var_1356: Tensor[(8, 9, 12), float32], %var_1371: Tensor[(1, 1), int32]) -> (Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) {
    %637 = cast(%var_1371, dtype="int32") /* ty=Tensor[(1, 1), int32] */;
    %638 = reshape(%637, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
    %639 = @func_554(%638) /* ty=(Tensor[(1, 13), int32],) */;
    %640 = cast(%var_1356, dtype="float32") /* ty=Tensor[(8, 9, 12), float32] */;
    %641 = acosh(%640) /* ty=Tensor[(8, 9, 12), float32] */;
    %642 = cast(%641, dtype="float32") /* ty=Tensor[(8, 9, 12), float32] */;
    %643 = %639.0;
    %644 = acos(%642) /* ty=Tensor[(8, 9, 12), float32] */;
    (%643, %var_1371, %644)
  };
  %645(%var_1388, %var_1389) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */
}

def @func_6149(%var_6119: Tensor[(7, 5, 9), uint32], %var_6125: Tensor[(864), float32]) -> (Tensor[(7, 5, 9), uint32], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32]) {
  %646 = cast(%var_6119, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %647 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(7, 5, 9), uint32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %650 = cast(%var_6125, dtype="float32") /* ty=Tensor[(864), float32] */;
  %651 = cast(meta[relay.Constant][45] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %652 = reshape(%650, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %653 = reshape(%651, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %654 = @func_1387(%652, %653) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %655 = left_shift(%648, %649) /* ty=Tensor[(7, 5, 9), uint32] */;
  %656 = %654.0;
  (%655, %656, %var_6125, meta[relay.Constant][45] /* ty=Tensor[(1), int32] */)
}

def @func_7925() -> (Tensor[(13, 8, 2), float64],) {
  %659 = fn () -> (Tensor[(13, 8, 2), float64],) {
    %657 = @func_4985() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %658 = %657.0;
    (%658,)
  };
  %659() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_6294(%var_6292: Tensor[(1188), int16], %var_6293: Tensor[(864), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) {
  @func_6290(%var_6292, %var_6293) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) */
}

def @func_7286(%var_7266: Tensor[(182), uint8], %var_7274: Tensor[(125, 2), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float32], Tensor[(182), uint8], Tensor[(10, 5, 5), bool], Tensor[(125, 2), uint64]) {
  %660 = @func_6585() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %661 = cast(%var_7266, dtype="uint8") /* ty=Tensor[(182), uint8] */;
  %662 = reshape(%661, newshape=[91, 2]) /* ty=Tensor[(91, 2), uint8] */;
  %663 = @func_6784(%662) /* ty=(Tensor[(91, 1), float64], Tensor[(91, 9), bool], Tensor[(91, 9), bool], Tensor[(224), float64], Tensor[(13, 16), float64], Tensor[(12, 6, 6), float32], Tensor[(91, ?), uint16], Tensor[(91, 2), int8], Tensor[(208), float32]) */;
  %664 = cast(%var_7274, dtype="uint64") /* ty=Tensor[(125, 2), uint64] */;
  %665 = cast(%var_7274, dtype="uint64") /* ty=Tensor[(125, 2), uint64] */;
  %666 = reshape(%664, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %667 = reshape(%665, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %668 = %660.0;
  %669 = %663.5;
  %670 = @func_1449(%666, %667) /* ty=Tensor[(10, 5, 5), bool] */;
  (%668, %669, %var_7266, %670, %var_7274)
}

def @func_1520(%var_1518: Tensor[(11, 3, 14), float64]) -> (Tensor[(11, 3, 14), float64],) {
  @func_1517(%var_1518) /* ty=(Tensor[(11, 3, 14), float64],) */
}

def @func_2059(%var_1980: Tensor[(16, 6, 3), float32], %var_2039: Tensor[(25, 10), uint64], %var_2045: Tensor[(4, 56), float64]) -> (Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) {
  %671 = cast(%var_1980, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %672 = asin(%671) /* ty=Tensor[(16, 6, 3), float32] */;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(16, 6, 3), float64] */;
  %674 = cast(%var_2039, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %675 = cast(%var_2039, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %676 = reshape(%674, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %677 = reshape(%675, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %678 = cast(%var_2045, dtype="float64") /* ty=Tensor[(4, 56), float64] */;
  %679 = reshape(%678, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %680 = @func_882(%679) /* ty=(Tensor[(14, 8, 2), uint32],) */;
  %681 = asinh(%673) /* ty=Tensor[(16, 6, 3), float64] */;
  %682 = @func_1449(%676, %677) /* ty=Tensor[(10, 5, 5), bool] */;
  %683 = %680.0;
  (%681, %682, %var_2039, %683, %var_2045)
}

def @func_8693(%var_8681: Tensor[(11, 250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(224), float64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(13, 8, 2), float64], Tensor[(11, 250), bool]) {
  %684 = cast(meta[relay.Constant][46] /* ty=Tensor[(1188), int16] */, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %685 = cast(meta[relay.Constant][47] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %686 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 250), uint64] */, dtype="uint64") /* ty=Tensor[(1, 250), uint64] */;
  %687 = reshape(%684, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), int16] */;
  %688 = reshape(%685, newshape=[24, 12]) /* ty=Tensor[(24, 12), float32] */;
  %689 = reshape(%686, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %690 = @func_2812(%687, %688, %689) /* ty=(Tensor[(10, 5, 5), bool], Tensor[(24, 12), float32], Tensor[(250), uint64], Tensor[(224), float64], Tensor[(10, 5, 5), bool], Tensor[(9, 12, 11), float32]) */;
  %691 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %692 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 250), uint64] */, dtype="bool") /* ty=Tensor[(1, 250), bool] */;
  %693 = cast(%var_8681, dtype="bool") /* ty=Tensor[(11, 250), bool] */;
  %694 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %695 = %690.3;
  %696 = %691.0;
  %697 = logical_and(%692, %693) /* ty=Tensor[(11, 250), bool] */;
  (%694, %695, meta[relay.Constant][46] /* ty=Tensor[(1188), int16] */, meta[relay.Constant][47] /* ty=Tensor[(288), float32] */, %696, %697)
}

def @func_8307(%var_8306: Tensor[(864), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(1485), float32], Tensor[(1188), int16], Tensor[(1188), int16], Tensor[(864), uint64]) {
  %712 = fn (%var_8303: Tensor[(864), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(1485), float32], Tensor[(1188), int16], Tensor[(1188), int16], Tensor[(864), uint64]) {
    %698 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %699 = cast(meta[relay.Constant][49] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
    %700 = cast(meta[relay.Constant][49] /* ty=Tensor[(1485), float32] */, dtype="float32") /* ty=Tensor[(1485), float32] */;
    %701 = reshape(%699, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
    %702 = reshape(%700, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float32] */;
    %703 = @func_3594(%701, %702) /* ty=(Tensor[(9, 11, 15), float32],) */;
    %704 = cast(meta[relay.Constant][50] /* ty=Tensor[(1188), int16] */, dtype="int16") /* ty=Tensor[(1188), int16] */;
    %705 = cast(%var_8303, dtype="uint64") /* ty=Tensor[(864), uint64] */;
    %706 = reshape(%704, newshape=[1188]) /* ty=Tensor[(1188), int16] */;
    %707 = reshape(%705, newshape=[864]) /* ty=Tensor[(864), uint64] */;
    %708 = @func_6290(%706, %707) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) */;
    %709 = %698.0;
    %710 = %703.0;
    %711 = %708.2;
    (%709, %710, meta[relay.Constant][49] /* ty=Tensor[(1485), float32] */, %711, meta[relay.Constant][50] /* ty=Tensor[(1188), int16] */, %var_8303)
  };
  %712(%var_8306) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(9, 11, 15), float32], Tensor[(1485), float32], Tensor[(1188), int16], Tensor[(1188), int16], Tensor[(864), uint64]) */
}

def @func_4953(%var_4916: Tensor[(1), int32], %var_4949: Tensor[(112, 2), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) {
  %713 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %714 = @func_4808() /* ty=(Tensor[(12, 6, 6), float64],) */;
  %715 = cast(meta[relay.Constant][51] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %716 = cast(%var_4916, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = reshape(%715, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %718 = reshape(%716, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %719 = @func_1387(%717, %718) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %720 = cast(meta[relay.Constant][51] /* ty=Tensor[(864), float32] */, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %721 = reshape(%720, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint64] */;
  %722 = @func_4720(%721) /* ty=(Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) */;
  %723 = cast(meta[relay.Constant][51] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %724 = cast(%var_4916, dtype="int32") /* ty=Tensor[(1), int32] */;
  %725 = reshape(%723, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %726 = reshape(%724, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %727 = @func_1387(%725, %726) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %728 = cast(meta[relay.Constant][51] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %729 = cast(%var_4916, dtype="int32") /* ty=Tensor[(1), int32] */;
  %730 = reshape(%728, newshape=[8, 9, 12]) /* ty=Tensor[(8, 9, 12), float32] */;
  %731 = reshape(%729, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
  %732 = @func_1387(%730, %731) /* ty=(Tensor[(1, 13), int32], Tensor[(1, 1), int32], Tensor[(8, 9, 12), float32]) */;
  %733 = cast(meta[relay.Constant][52] /* ty=Tensor[(1260, 1), int8] */, dtype="int8") /* ty=Tensor[(1260, 1), int8] */;
  %734 = cast(meta[relay.Constant][53] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %735 = %722.5;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(208), float64] */;
  %737 = cast(%var_4949, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
  %738 = reshape(%733, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int8] */;
  %739 = reshape(%734, newshape=[13, 7]) /* ty=Tensor[(13, 7), uint8] */;
  %740 = reshape(%736, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %741 = reshape(%737, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %742 = @func_2603(%738, %739, %740, %741) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) */;
  %743 = %713.0;
  %744 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %745 = %714.0;
  %746 = %719.0;
  %747 = %727.0;
  %748 = %732.2;
  %749 = %742.3;
  (%743, %744, %745, %746, meta[relay.Constant][51] /* ty=Tensor[(864), float32] */, %var_4916, %735, %747, %748, %749, meta[relay.Constant][52] /* ty=Tensor[(1260, 1), int8] */, meta[relay.Constant][53] /* ty=Tensor[(91), uint8] */, %var_4949)
}

def @func_2608(%var_2604: Tensor[(10, 14, 9), int8], %var_2605: Tensor[(13, 7), uint8], %var_2606: Tensor[(208), float64], %var_2607: Tensor[(112, 2), float64]) -> (Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) {
  %772 = fn (%var_2551: Tensor[(10, 14, 9), int8], %var_2576: Tensor[(13, 7), uint8], %var_2584: Tensor[(208), float64], %var_2585: Tensor[(112, 2), float64]) -> (Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) {
    %750 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 9), int8] */, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
    %751 = shape_of(%var_2551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(%var_2551, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %754 = cast(%var_2584, dtype="float64") /* ty=Tensor[(208), float64] */;
    %755 = cast(%var_2585, dtype="float64") /* ty=Tensor[(112, 2), float64] */;
    %756 = reshape(%754, newshape=[13, 16]) /* ty=Tensor[(13, 16), float64] */;
    %757 = reshape(%755, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %758 = @func_2153(%756, %757) /* ty=(Tensor[(13, 16), float64], Tensor[(14, 8, 2), uint32], Tensor[(224), float64]) */;
    %759 = %758.2;
    %760 = cast(%var_2576, dtype="uint8") /* ty=Tensor[(13, 7), uint8] */;
    %761 = cast(%var_2576, dtype="bool") /* ty=Tensor[(13, 7), bool] */;
    %762 = reshape(%760, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
    %763 = reshape(%761, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
    %764 = @func_1730(%762, %763) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
    %765 = %764.1;
    %766 = cast(%759, dtype="int32") /* ty=Tensor[(224), int32] */;
    %767 = cast(%765, dtype="int32") /* ty=Tensor[(13, 7, ?), int32] */;
    %768 = cast(%765, dtype="float64") /* ty=Tensor[(13, 7, ?), float64] */;
    %769 = less(%752, %753) /* ty=Tensor[(10, 14, 9), bool] */;
    %770 = left_shift(%766, %767) /* ty=Tensor[(13, 7, 224), int32] */;
    %771 = exp(%768) /* ty=Tensor[(13, 7, ?), float64] */;
    (%769, %var_2576, %var_2584, %var_2585, %770, %771)
  };
  %772(%var_2604, %var_2605, %var_2606, %var_2607) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) */
}

def @func_6290(%var_6249: Tensor[(1188), int16], %var_6263: Tensor[(864), uint64]) -> (Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) {
  %773 = @func_5618() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %774 = cast(%var_6249, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %775 = cast(meta[relay.Constant][55] /* ty=Tensor[(250), uint64] */, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %776 = reshape(%774, newshape=[1188]) /* ty=Tensor[(1188), int16] */;
  %777 = reshape(%775, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %778 = @func_5801(%776, %777) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(250), uint64], Tensor[(1188), int16], Tensor[(288), float32], Tensor[(250), uint64]) */;
  %779 = @func_5081() /* ty=(Tensor[(13, 8, 2), float64],) */;
  %780 = cast(%var_6263, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %781 = reshape(%780, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint64] */;
  %782 = @func_4720(%781) /* ty=(Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) */;
  %783 = %773.0;
  %784 = %778.3;
  %785 = @func_6113() /* ty=Tensor[(13, 8, 2), float64] */;
  %786 = %779.0;
  %787 = %782.4;
  (%783, %784, %var_6249, meta[relay.Constant][55] /* ty=Tensor[(250), uint64] */, %785, %786, %787, %var_6263)
}

def @func_4564(%var_4563: Tensor[(11, 12, 4), float64]) -> (Tensor[(11, 12, 4), float64],) {
  %790 = fn (%var_4559: Tensor[(11, 12, 4), float64]) -> (Tensor[(11, 12, 4), float64],) {
    %788 = cast(%var_4559, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
    %789 = rsqrt(%788) /* ty=Tensor[(11, 12, 4), float64] */;
    (%789,)
  };
  %790(%var_4563) /* ty=(Tensor[(11, 12, 4), float64],) */
}

def @func_7586() -> Tensor[(13, 8, 2), float64] {
  %792 = fn () -> Tensor[(13, 8, 2), float64] {
    %791 = @func_7163() /* ty=(Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(14, 8, 2), uint32], Tensor[(224, 1), float64]) */;
    %791.1
  };
  %792() /* ty=Tensor[(13, 8, 2), float64] */
}

def @func_7445() -> (Tensor[(13, 8, 2), float64],) {
  %795 = fn () -> (Tensor[(13, 8, 2), float64],) {
    %793 = @func_7384() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %794 = %793.0;
    (%794,)
  };
  %795() /* ty=(Tensor[(13, 8, 2), float64],) */
}

def @func_4047(%var_4045: Tensor[(12, 12, 2), float64], %var_4046: Tensor[(12, 12, 2), float64]) -> (Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float64]) {
  @func_4043(%var_4045, %var_4046) /* ty=(Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float64]) */
}

def @func_3364(%var_3345: Tensor[(8, 6, 15), float64], %var_3346: Tensor[(8, 6, 15), float64], %var_3358: Tensor[(288), float32]) -> (Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) {
  %796 = cast(%var_3346, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %797 = shape_of(%var_3345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_3345, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %800 = cast(meta[relay.Constant][56] /* ty=Tensor[(8, 6, 15), float64] */, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %801 = shape_of(%var_3346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%var_3346, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %804 = cast(%var_3358, dtype="float32") /* ty=Tensor[(288), float32] */;
  %805 = cast(meta[relay.Constant][57] /* ty=Tensor[(250), uint64] */, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %806 = cast(meta[relay.Constant][58] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %807 = reshape(%804, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %808 = reshape(%805, newshape=[25, 10]) /* ty=Tensor[(25, 10), uint64] */;
  %809 = reshape(%806, newshape=[4, 56]) /* ty=Tensor[(4, 56), float64] */;
  %810 = @func_2059(%807, %808, %809) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(10, 5, 5), bool], Tensor[(25, 10), uint64], Tensor[(14, 8, 2), uint32], Tensor[(4, 56), float64]) */;
  %811 = divide(%798, %799) /* ty=Tensor[(8, 6, 15), float64] */;
  %812 = not_equal(%802, %803) /* ty=Tensor[(8, 6, 15), bool] */;
  %813 = %810.0;
  (%811, %812, %813, %var_3358, meta[relay.Constant][57] /* ty=Tensor[(250), uint64] */, meta[relay.Constant][58] /* ty=Tensor[(224), float64] */)
}

def @func_4043(%var_4013: Tensor[(12, 12, 2), float64], %var_4014: Tensor[(12, 12, 2), float64]) -> (Tensor[(12, 12, 2), float64], Tensor[(12, 12, 2), float64]) {
  %814 = cast(%var_4014, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %815 = shape_of(%var_4013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_4013, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %818 = cast(%var_4013, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %819 = floor_mod(%816, %817) /* ty=Tensor[(12, 12, 2), float64] */;
  %820 = asin(%818) /* ty=Tensor[(12, 12, 2), float64] */;
  (%819, %820)
}

def @func_1730(%var_1688: Tensor[(13, 7, 1), uint8], %var_1718: Tensor[(13, 7, 1), bool]) -> (Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) {
  %821 = cast(%var_1688, dtype="uint8") /* ty=Tensor[(13, 7, 1), uint8] */;
  %822 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(13, 7, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(meta[relay.Constant][59] /* ty=Tensor[(13, 7, 1), uint8] */, dtype="uint8") /* ty=Tensor[(13, 7, 1), uint8] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %825 = bitwise_xor(%823, %824) /* ty=Tensor[(13, 7, ?), uint8] */;
  %826 = cast(%var_1688, dtype="float32") /* ty=Tensor[(13, 7, 1), float32] */;
  %827 = sqrt(%826) /* ty=Tensor[(13, 7, 1), float32] */;
  %828 = cast(meta[relay.Constant][59] /* ty=Tensor[(13, 7, 1), uint8] */, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%827, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %832 = logical_or(%830, %831) /* ty=Tensor[(13, 7, ?), bool] */;
  %833 = cast(%832, dtype="int16") /* ty=Tensor[(13, 7, ?), int16] */;
  %834 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%825, dtype="int16") /* ty=Tensor[(13, 7, ?), int16] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %837 = cast(%var_1718, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %838 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%832, dtype="bool") /* ty=Tensor[(13, 7, ?), bool] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %841 = cast(%825, dtype="int16") /* ty=Tensor[(13, 7, ?), int16] */;
  %842 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%827, dtype="int16") /* ty=Tensor[(13, 7, 1), int16] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %845 = logical_xor(%835, %836) /* ty=Tensor[(13, 7, ?), int16] */;
  %846 = greater_equal(%839, %840) /* ty=Tensor[(13, 7, ?), bool] */;
  %847 = multiply(%843, %844) /* ty=Tensor[(13, 7, ?), int16] */;
  (%845, %846, %847)
}

def @func_4957(%var_4955: Tensor[(1), int32], %var_4956: Tensor[(112, 2), float64]) -> (Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) {
  @func_4953(%var_4955, %var_4956) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32], Tensor[(208), float64], Tensor[(1, 13), int32], Tensor[(8, 9, 12), float32], Tensor[(112, 2), float64], Tensor[(1260, 1), int8], Tensor[(91), uint8], Tensor[(112, 2), float64]) */
}

def @func_7214() -> (Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) {
  @func_7212() /* ty=(Tensor[(14, 9, 5), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32]) */
}

def @func_6153(%var_6151: Tensor[(7, 5, 9), uint32], %var_6152: Tensor[(864), float32]) -> (Tensor[(7, 5, 9), uint32], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32]) {
  @func_6149(%var_6151, %var_6152) /* ty=(Tensor[(7, 5, 9), uint32], Tensor[(1, 13), int32], Tensor[(864), float32], Tensor[(1), int32]) */
}

def @func_5166(%var_5164: Tensor[(91), uint8]) -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), int16], Tensor[(91), uint64]) {
  @func_5163(%var_5164) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), int16], Tensor[(91), uint64]) */
}

def @func_8158(%var_8156: Tensor[(720), float64]) -> (Tensor[(224), float64], Tensor[(720), float64], Tensor[(720), float64]) {
  @func_8155(%var_8156) /* ty=(Tensor[(224), float64], Tensor[(720), float64], Tensor[(720), float64]) */
}

def @func_7357(%var_7355: Tensor[(528), float64], %var_7356: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64], Tensor[(288), float32], Tensor[(1), int32], Tensor[(250), uint64], Tensor[(250), uint64]) {
  %872 = fn (%var_7337: Tensor[(528), float64], %var_7346: Tensor[(250), uint64]) -> (Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64], Tensor[(288), float32], Tensor[(1), int32], Tensor[(250), uint64], Tensor[(250), uint64]) {
    %848 = @func_5861() /* ty=(Tensor[(12, 6, 6), float64],) */;
    %849 = cast(meta[relay.Constant][60] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %850 = cast(meta[relay.Constant][60] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %851 = cast(meta[relay.Constant][61] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %852 = reshape(%849, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
    %853 = reshape(%850, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
    %854 = reshape(%851, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %855 = @func_3364(%852, %853, %854) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(8, 6, 15), bool], Tensor[(16, 6, 3), float64], Tensor[(288), float32], Tensor[(250), uint64], Tensor[(224), float64]) */;
    %856 = cast(%var_7337, dtype="float64") /* ty=Tensor[(528), float64] */;
    %857 = reshape(%856, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), float64] */;
    %858 = @func_4562(%857) /* ty=(Tensor[(11, 12, 4), float64],) */;
    %859 = cast(meta[relay.Constant][62] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %860 = %855.2;
    %861 = cast(%860, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
    %862 = reshape(%859, newshape=[1]) /* ty=Tensor[(1), int32] */;
    %863 = reshape(%861, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %864 = @func_5583(%862, %863) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), float32], Tensor[(13, 8, 2), float64], Tensor[(12, 6, 6), float64], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(1260), int8], Tensor[(864), uint64], Tensor[(13, 7, ?), float32], Tensor[(231, 2), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64]) */;
    %865 = cast(%var_7346, dtype="uint64") /* ty=Tensor[(250), uint64] */;
    %866 = reshape(%865, newshape=[250]) /* ty=Tensor[(250), uint64] */;
    %867 = @func_5913(%866) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(10, 5, 5), bool], Tensor[(250), uint64]) */;
    %868 = %848.0;
    %869 = %858.0;
    %870 = %864.10;
    %871 = %867.2;
    (%868, %860, meta[relay.Constant][60] /* ty=Tensor[(720), float64] */, meta[relay.Constant][61] /* ty=Tensor[(288), float32] */, %869, %var_7337, %870, meta[relay.Constant][62] /* ty=Tensor[(1), int32] */, %871, %var_7346)
  };
  %872(%var_7355, %var_7356) /* ty=(Tensor[(12, 6, 6), float64], Tensor[(16, 6, 3), float64], Tensor[(720), float64], Tensor[(288), float32], Tensor[(11, 12, 4), float64], Tensor[(528), float64], Tensor[(288), float32], Tensor[(1), int32], Tensor[(250), uint64], Tensor[(250), uint64]) */
}

def @func_3594(%var_3585: Tensor[(9, 11, 15), float32], %var_3586: Tensor[(9, 11, 15), float32]) -> (Tensor[(9, 11, 15), float32],) {
  %873 = cast(%var_3586, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %874 = shape_of(%var_3585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%var_3585, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %877 = multiply(%875, %876) /* ty=Tensor[(9, 11, 15), float32] */;
  (%877,)
}

def @func_8107() -> (Tensor[(11, 12, 4), float64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64]) {
  %883 = fn () -> (Tensor[(11, 12, 4), float64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64]) {
    %878 = @func_7471() /* ty=(Tensor[(224), float64], Tensor[(11, 12, 4), float64], Tensor[(1), int32], Tensor[(288), float32]) */;
    %879 = @func_6585() /* ty=(Tensor[(13, 8, 2), float64],) */;
    %880 = %878.1;
    %881 = @func_6623() /* ty=Tensor[(13, 8, 2), float64] */;
    %882 = %879.0;
    (%880, %881, %882)
  };
  %883() /* ty=(Tensor[(11, 12, 4), float64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64]) */
}

def @main(%var_8892: Tensor[(182), uint8], %var_8893: Tensor[(250), uint64], %var_8913: Tensor[(1188), int16], %var_8914: Tensor[(864), uint64]) -> (Tensor[(224), float64], Tensor[(182), uint8], Tensor[(250), uint64], Tensor[(91), uint8], Tensor[(864), uint64], Tensor[(1, 13), int32], Tensor[(10, 5, 5), bool], Tensor[(1188), float64]) {
  %884 = @func_6079() /* ty=(Tensor[(224), float64],) */;
  %885 = cast(%var_8913, dtype="int16") /* ty=Tensor[(1188), int16] */;
  %886 = cast(%var_8914, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %887 = reshape(%885, newshape=[1188]) /* ty=Tensor[(1188), int16] */;
  %888 = reshape(%886, newshape=[864]) /* ty=Tensor[(864), uint64] */;
  %889 = @func_6294(%887, %888) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(288), float32], Tensor[(1188), int16], Tensor[(250), uint64], Tensor[(13, 8, 2), float64], Tensor[(13, 8, 2), float64], Tensor[(91), uint8], Tensor[(864), uint64]) */;
  %890 = cast(%var_8892, dtype="uint8") /* ty=Tensor[(182), uint8] */;
  %891 = cast(%var_8893, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %892 = cast(meta[relay.Constant][63] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %893 = reshape(%890, newshape=[182]) /* ty=Tensor[(182), uint8] */;
  %894 = reshape(%891, newshape=[250]) /* ty=Tensor[(250), uint64] */;
  %895 = reshape(%892, newshape=[1]) /* ty=Tensor[(1), int32] */;
  %896 = @func_7675(%893, %894, %895) /* ty=(Tensor[(16, 6, 3), float64], Tensor[(182), uint8], Tensor[(1, 13), int32], Tensor[(1), int32], Tensor[(250), float32], Tensor[(14, 9, 5), float64], Tensor[(250), float64]) */;
  %897 = %896.2;
  %898 = cast(%897, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %899 = cast(meta[relay.Constant][63] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %900 = cast(%var_8893, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %901 = cast(%var_8893, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %902 = reshape(%900, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %903 = reshape(%901, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint64] */;
  %904 = cast(%var_8913, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %905 = sqrt(%904) /* ty=Tensor[(1188), float32] */;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(1188), float64] */;
  %907 = %884.0;
  %908 = %889.6;
  %909 = bitwise_and(%898, %899) /* ty=Tensor[(1, 13), int32] */;
  %910 = @func_1449(%902, %903) /* ty=Tensor[(10, 5, 5), bool] */;
  %911 = acosh(%906) /* ty=Tensor[(1188), float64] */;
  (%907, %var_8892, %var_8893, %908, %var_8914, %909, %910, %911)
}

def @func_4809() -> (Tensor[(12, 6, 6), float64],) {
  %914 = fn () -> (Tensor[(12, 6, 6), float64],) {
    %912 = cast(meta[relay.Constant][64] /* ty=Tensor[(12, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
    %913 = asin(%912) /* ty=Tensor[(12, 6, 6), float64] */;
    (%913,)
  };
  %914() /* ty=(Tensor[(12, 6, 6), float64],) */
}

def @func_2695(%var_2694: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), float32], Tensor[(11, 3, 14), float64], Tensor[(231, 2), float64], Tensor[(1, 13), int32], Tensor[(1), int32]) {
  %925 = fn (%var_2662: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), float32], Tensor[(11, 3, 14), float64], Tensor[(231, 2), float64], Tensor[(1, 13), int32], Tensor[(1), int32]) {
    %915 = cast(%var_2662, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
    %916 = cast(meta[relay.Constant][65] /* ty=Tensor[(231, 2), float64] */, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
    %917 = reshape(%916, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
    %918 = @func_1517(%917) /* ty=(Tensor[(11, 3, 14), float64],) */;
    %919 = cast(meta[relay.Constant][66] /* ty=Tensor[(1), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %920 = reshape(%919, newshape=[1, 1]) /* ty=Tensor[(1, 1), int32] */;
    %921 = @func_554(%920) /* ty=(Tensor[(1, 13), int32],) */;
    %922 = log(%915) /* ty=Tensor[(16, 6, 3), float32] */;
    %923 = %918.0;
    %924 = %921.0;
    (%922, %923, meta[relay.Constant][65] /* ty=Tensor[(231, 2), float64] */, %924, meta[relay.Constant][66] /* ty=Tensor[(1), int32] */)
  };
  %925(%var_2694) /* ty=(Tensor[(16, 6, 3), float32], Tensor[(11, 3, 14), float64], Tensor[(231, 2), float64], Tensor[(1, 13), int32], Tensor[(1), int32]) */
}

def @func_4720(%var_4681: Tensor[(6, 12, 12), uint64]) -> (Tensor[(6, 12, 12), uint64], Tensor[(6, 12, 12), int64], Tensor[(13, 7, 224), int32], Tensor[(1260), int8], Tensor[(91), uint8], Tensor[(208), float64], Tensor[(2, 112), float64], Tensor[(6, 12, 12), bool]) {
  %926 = cast(meta[relay.Constant][67] /* ty=Tensor[(6, 12, 12), uint64] */, dtype="uint64") /* ty=Tensor[(6, 12, 12), uint64] */;
  %927 = shape_of(%var_4681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %928 = cast(%var_4681, dtype="uint64") /* ty=Tensor[(6, 12, 12), uint64] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %930 = cast(meta[relay.Constant][67] /* ty=Tensor[(6, 12, 12), uint64] */, dtype="int64") /* ty=Tensor[(6, 12, 12), int64] */;
  %931 = shape_of(%var_4681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(%var_4681, dtype="int64") /* ty=Tensor[(6, 12, 12), int64] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %934 = cast(meta[relay.Constant][68] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %935 = cast(meta[relay.Constant][69] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %936 = cast(meta[relay.Constant][70] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %937 = cast(meta[relay.Constant][71] /* ty=Tensor[(2, 112), float64] */, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %938 = reshape(%934, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int8] */;
  %939 = reshape(%935, newshape=[13, 7]) /* ty=Tensor[(13, 7), uint8] */;
  %940 = reshape(%936, newshape=[208]) /* ty=Tensor[(208), float64] */;
  %941 = reshape(%937, newshape=[112, 2]) /* ty=Tensor[(112, 2), float64] */;
  %942 = @func_2603(%938, %939, %940, %941) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(13, 7), uint8], Tensor[(208), float64], Tensor[(112, 2), float64], Tensor[(13, 7, 224), int32], Tensor[(13, 7, ?), float64]) */;
  %943 = cast(%var_4681, dtype="float64") /* ty=Tensor[(6, 12, 12), float64] */;
  %944 = atan(%943) /* ty=Tensor[(6, 12, 12), float64] */;
  %945 = cast(meta[relay.Constant][67] /* ty=Tensor[(6, 12, 12), uint64] */, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%944, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %949 = maximum(%928, %929) /* ty=Tensor[(6, 12, 12), uint64] */;
  %950 = bitwise_xor(%932, %933) /* ty=Tensor[(6, 12, 12), int64] */;
  %951 = %942.4;
  %952 = less(%947, %948) /* ty=Tensor[(6, 12, 12), bool] */;
  (%949, %950, %951, meta[relay.Constant][68] /* ty=Tensor[(1260), int8] */, meta[relay.Constant][69] /* ty=Tensor[(91), uint8] */, meta[relay.Constant][70] /* ty=Tensor[(208), float64] */, meta[relay.Constant][71] /* ty=Tensor[(2, 112), float64] */, %952)
}

def @func_884(%var_883: Tensor[(14, 8, 2), float64]) -> (Tensor[(14, 8, 2), uint32],) {
  %960 = fn (%var_850: Tensor[(14, 8, 2), float64]) -> (Tensor[(14, 8, 2), uint32],) {
    %953 = cast(%var_850, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
    %954 = log(%953) /* ty=Tensor[(14, 8, 2), float64] */;
    %955 = cast(%var_850, dtype="uint32") /* ty=Tensor[(14, 8, 2), uint32] */;
    %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
    %957 = cast(%954, dtype="uint32") /* ty=Tensor[(14, 8, 2), uint32] */;
    %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %959 = left_shift(%957, %958) /* ty=Tensor[(14, 8, 2), uint32] */;
    (%959,)
  };
  %960(%var_883) /* ty=(Tensor[(14, 8, 2), uint32],) */
}

def @func_6359(%var_6357: Tensor[(6, 11, 1), float64]) -> (Tensor[(6, 11, 1), float64],) {
  @func_6356(%var_6357) /* ty=(Tensor[(6, 11, 1), float64],) */
}

def @func_5163(%var_5138: Tensor[(91), uint8]) -> (Tensor[(12, 6, 6), float64], Tensor[(13, 7, ?), int16], Tensor[(91), uint64]) {
  %961 = cast(%var_5138, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %962 = cast(%var_5138, dtype="bool") /* ty=Tensor[(91), bool] */;
  %963 = reshape(%961, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), uint8] */;
  %964 = reshape(%962, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %965 = @func_1730(%963, %964) /* ty=(Tensor[(13, 7, ?), int16], Tensor[(13, 7, ?), bool], Tensor[(13, 7, ?), int16]) */;
  %966 = cast(%var_5138, dtype="float64") /* ty=Tensor[(91), float64] */;
  %967 = sinh(%966) /* ty=Tensor[(91), float64] */;
  %968 = cast(%var_5138, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %969 = shape_of(%967, dtype="int32") /* ty=Tensor[(1), int32] */;
  %970 = cast(%967, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %972 = @func_4871() /* ty=Tensor[(12, 6, 6), float64] */;
  %973 = %965.2;
  %974 = maximum(%970, %971) /* ty=Tensor[(91), uint64] */;
  (%972, %973, %974)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen414/build/output.py", line 1949, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:15:24] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

