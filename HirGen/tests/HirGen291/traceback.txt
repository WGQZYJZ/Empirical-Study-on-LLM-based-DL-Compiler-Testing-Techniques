==========mod==========
#[version = "0.0.5"]
def @func_2352(%var_2341: Tensor[(6, 28), float64]) -> (Tensor[(784), float64], Tensor[(256), int8], Tensor[(2, 14, 6), float64], Tensor[(6, 28), float64]) {
  %0 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %1 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %2 = cast(%var_2341, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
  %3 = %0.3;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(784), float64] */;
  %5 = reshape(%2, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float64] */;
  %6 = reshape(%4, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %7 = @func_1805(%5, %6) /* ty=(Tensor[(2, 14, 6), float64], Tensor[(9, 15, 12), int32], Tensor[(1620), bool], Tensor[(784), float64]) */;
  %8 = %1.3;
  %9 = %7.0;
  (%3, %8, %9, %var_2341)
}

def @func_4243(%var_4155: Tensor[(9, 15, 12), bool], %var_4194: Tensor[(8, 32), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(8, 32), int32], Tensor[(1, 49), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 784), float64], Tensor[(2, 16, 8), float32], Tensor[(5, 49), bool], Tensor[(784), float32], Tensor[(15, 49), bool], Tensor[(245), float64], Tensor[(?, 49), int16]) {
  %10 = @func_3968() /* ty=Tensor[(9, 15, 12), bool] */;
  %11 = cast(%var_4155, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %15 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
  %16 = %15.0;
  %17 = cast(%var_4194, dtype="int32") /* ty=Tensor[(8, 32), int32] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(2), int32] */;
  %19 = cast(%16, dtype="int32") /* ty=Tensor[(8, 32), int32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %21 = @func_3556() /* ty=(Tensor[(1, 49), float64],) */;
  %22 = %21.0;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 784), float64] */, dtype="float64") /* ty=Tensor[(1, 784), float64] */;
  %25 = reshape(%23, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %26 = reshape(%24, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
  %27 = @func_752(%25, %26) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
  %28 = cast(%var_4194, dtype="bool") /* ty=Tensor[(8, 32), bool] */;
  %29 = reshape(%28, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), bool] */;
  %30 = @func_3525(%29) /* ty=(Tensor[(2, 16, 8), float32],) */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(245), int16] */, dtype="int16") /* ty=Tensor[(245), int16] */;
  %32 = reshape(%31, newshape=[5, 49]) /* ty=Tensor[(5, 49), int16] */;
  %33 = @func_3004(%32) /* ty=(Tensor[(5, 49), bool],) */;
  %34 = @func_2816() /* ty=(Tensor[(15, 49), bool],) */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(245), int16] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %36 = exp(%35) /* ty=Tensor[(245), float64] */;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(245), float64] */;
  %38 = @func_1720() /* ty=(Tensor[(?, 49), int16],) */;
  %39 = greater(%13, %14) /* ty=Tensor[(9, 15, 12), bool] */;
  %40 = bitwise_or(%19, %20) /* ty=Tensor[(8, 32), int32] */;
  %41 = %27.5;
  %42 = %30.0;
  %43 = %33.0;
  %44 = @func_1762() /* ty=Tensor[(784), float32] */;
  %45 = %34.0;
  %46 = cos(%37) /* ty=Tensor[(245), float64] */;
  %47 = %38.0;
  (%39, %40, %22, %41, meta[relay.Constant][0] /* ty=Tensor[(1, 784), float64] */, %42, %43, %44, %45, %46, %47)
}

def @func_3089() -> (Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) {
  %48 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 35), int16] */, dtype="int16") /* ty=Tensor[(7, 35), int16] */;
  %50 = reshape(%49, newshape=[5, 49]) /* ty=Tensor[(5, 49), int16] */;
  %51 = @func_3004(%50) /* ty=(Tensor[(5, 49), bool],) */;
  %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 35), int16] */, dtype="float32") /* ty=Tensor[(7, 35), float32] */;
  %53 = acos(%52) /* ty=Tensor[(7, 35), float32] */;
  %54 = cast(%53, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %55 = @func_1342() /* ty=(Tensor[(?, 49), int16],) */;
  %56 = cast(%53, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 32), int8] */, dtype="int8") /* ty=Tensor[(8, 32), int8] */;
  %58 = reshape(%57, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %59 = @func_2285(%58) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %60 = %48.1;
  %61 = %51.0;
  %62 = asin(%54) /* ty=Tensor[(7, 35), float64] */;
  %63 = %55.0;
  %64 = atanh(%56) /* ty=Tensor[(7, 35), float64] */;
  %65 = %59.0;
  (%60, %61, %62, %63, %64, %65, meta[relay.Constant][3] /* ty=Tensor[(8, 32), int8] */)
}

def @func_1394(%var_1369: Tensor[(12, 1, 14), float64], %var_1370: Tensor[(12, 16, 14), float64], %var_1386: Tensor[(12, 15, 14), float64]) -> (Tensor[(12, 16, 14), float64], Tensor[(12, 15, 14), uint16]) {
  %66 = cast(%var_1369, dtype="float64") /* ty=Tensor[(12, 1, 14), float64] */;
  %67 = cast(%var_1370, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
  %68 = cast(%var_1369, dtype="uint16") /* ty=Tensor[(12, 1, 14), uint16] */;
  %69 = cast(%var_1386, dtype="uint16") /* ty=Tensor[(12, 15, 14), uint16] */;
  %70 = multiply(%66, %67) /* ty=Tensor[(12, 16, 14), float64] */;
  %71 = left_shift(%68, %69) /* ty=Tensor[(12, 15, 14), uint16] */;
  (%70, %71)
}

def @func_1016(%var_1003: Tensor[(1, 49), float64], %var_1004: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) {
  %72 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %73 = cast(%var_1003, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %74 = cast(%var_1004, dtype="float64") /* ty=Tensor[(784), float64] */;
  %75 = reshape(%73, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %76 = reshape(%74, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
  %77 = @func_752(%75, %76) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
  %78 = %77.5;
  %79 = cast(%78, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %80 = %72.1;
  %81 = log10(%79) /* ty=Tensor[(2, 16, 8), float32] */;
  (%80, %var_1003, %var_1004, %81)
}

def @func_1867() -> (Tensor[(2, 16, 8), int8],) {
  %82 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
  %83 = %82.2;
  (%83,)
}

def @func_3573(%var_3569: Tensor[(256), int8]) -> (Tensor[(1, 49), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) {
  %84 = cast(%var_3569, dtype="int8") /* ty=Tensor[(256), int8] */;
  %85 = reshape(%84, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %86 = @func_2285(%85) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %87 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %88 = %86.0;
  (%87, %88, %var_3569)
}

def @func_2229(%var_2211: Tensor[(784), float64]) -> (Tensor[(6, 2, 6), float32], Tensor[(49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(?, 49), float64]) {
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %90 = cast(%var_2211, dtype="float64") /* ty=Tensor[(784), float64] */;
  %91 = reshape(%90, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %92 = @func_1229(%91) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) */;
  %93 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %94 = @func_1833() /* ty=(Tensor[(?, 49), float64], Tensor[(?, 49), float32]) */;
  %95 = cos(%89) /* ty=Tensor[(6, 2, 6), float32] */;
  %96 = %92.2;
  %97 = %93.0;
  %98 = %94.0;
  (%95, %96, %var_2211, %97, %98)
}

def @func_3899() -> (Tensor[(1, 49), float64], Tensor[(1, 49), float64]) {
  %99 = @func_2756() /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) */;
  %100 = %99.0;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %102 = reshape(%101, newshape=[49, 1]) /* ty=Tensor[(49, 1), float64] */;
  %103 = @func_1705(%102) /* ty=(Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %104 = %103.5;
  (%100, %104)
}

def @func_5443() -> Tensor[(784), float64] {
  %105 = @func_4318() /* ty=Tensor[(784), float64] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(784), float64] */;
  asinh(%106) /* ty=Tensor[(784), float64] */
}

def @func_3928() -> (Tensor[(9, 15, 12), bool],) {
  %107 = @func_1447() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %108 = %107.0;
  (%108,)
}

def @func_5132(%var_5084: Tensor[(13, 49), int16], %var_5101: Tensor[(13, 49), float64]) -> (Tensor[(13, 49), uint16], Tensor[(13, 49), bool], Tensor[(13, 49), uint64]) {
  %109 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  %110 = cast(%109, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %111 = cast(%var_5084, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
  %112 = less(%110, %111) /* ty=Tensor[(13, 49), bool] */;
  %113 = cast(%var_5084, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
  %114 = atan(%113) /* ty=Tensor[(13, 49), float64] */;
  %115 = cast(%114, dtype="uint16") /* ty=Tensor[(13, 49), uint16] */;
  %116 = shape_of(%112, dtype="int32") /* ty=Tensor[(2), int32] */;
  %117 = cast(%112, dtype="uint16") /* ty=Tensor[(13, 49), uint16] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %119 = cast(%var_5101, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
  %120 = shape_of(%114, dtype="int32") /* ty=Tensor[(2), int32] */;
  %121 = cast(%114, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %123 = cast(%112, dtype="uint64") /* ty=Tensor[(13, 49), uint64] */;
  %124 = shape_of(%var_5084, dtype="int32") /* ty=Tensor[(2), int32] */;
  %125 = cast(%var_5084, dtype="uint64") /* ty=Tensor[(13, 49), uint64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %127 = subtract(%117, %118) /* ty=Tensor[(13, 49), uint16] */;
  %128 = logical_or(%121, %122) /* ty=Tensor[(13, 49), bool] */;
  %129 = logical_xor(%125, %126) /* ty=Tensor[(13, 49), uint64] */;
  (%127, %128, %129)
}

def @func_2285(%var_2265: Tensor[(2, 16, 8), int8]) -> (Tensor[(2, 16, 8), int64],) {
  %130 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %131 = %130.0;
  %132 = cast(%var_2265, dtype="int64") /* ty=Tensor[(2, 16, 8), int64] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="int64") /* ty=Tensor[(2, 16, 8), int64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %136 = add(%134, %135) /* ty=Tensor[(2, 16, 8), int64] */;
  (%136,)
}

def @func_3257(%var_3229: Tensor[(14, 16, 6), uint8], %var_3230: Tensor[(14, 16, 6), uint8], %var_3240: Tensor[(14, 16, 6), uint8]) -> (Tensor[(14, 16, 6), float64], Tensor[(14, 16, 6), float64], Tensor[(256), int8]) {
  %137 = cast(%var_3230, dtype="uint8") /* ty=Tensor[(14, 16, 6), uint8] */;
  %138 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_3229, dtype="uint8") /* ty=Tensor[(14, 16, 6), uint8] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %141 = bitwise_xor(%139, %140) /* ty=Tensor[(14, 16, 6), uint8] */;
  %142 = cast(%var_3240, dtype="float64") /* ty=Tensor[(14, 16, 6), float64] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="float64") /* ty=Tensor[(14, 16, 6), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %146 = cast(%141, dtype="float64") /* ty=Tensor[(14, 16, 6), float64] */;
  %147 = @func_1935() /* ty=(Tensor[(256), int8], Tensor[(9, 15, 12), bool]) */;
  %148 = floor_divide(%144, %145) /* ty=Tensor[(14, 16, 6), float64] */;
  %149 = log10(%146) /* ty=Tensor[(14, 16, 6), float64] */;
  %150 = %147.0;
  (%148, %149, %150)
}

def @func_2756() -> (Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) {
  %151 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %154 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %156 = reshape(%153, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %157 = reshape(%155, newshape=[7, 7]) /* ty=Tensor[(7, 7), float64] */;
  %158 = @func_2438(%156, %157) /* ty=(Tensor[(2, 16, 8), bool], Tensor[(2, 16, 8), bool], Tensor[(2, 392), float64], Tensor[(7, 7), float64], Tensor[(8, 98), float64]) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %161 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%152, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = logical_and(%162, %163) /* ty=Tensor[(2, 16, 8), bool] */;
  (%154, %164)
}

def @func_3984() -> (Tensor[(1, 49), float64], Tensor[(784), float64]) {
  %165 = @func_3556() /* ty=(Tensor[(1, 49), float64],) */;
  %166 = %165.0;
  %167 = @func_2942() /* ty=Tensor[(784), float64] */;
  (%166, %167)
}

def @func_2709(%var_2688: Tensor[(15, 6, 14), float32], %var_2698: Tensor[(256), int8]) -> (Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
  %168 = cast(%var_2688, dtype="float32") /* ty=Tensor[(15, 6, 14), float32] */;
  %169 = cast(%var_2698, dtype="int8") /* ty=Tensor[(256), int8] */;
  %170 = cast(%var_2698, dtype="int8") /* ty=Tensor[(256), int8] */;
  %171 = reshape(%169, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %172 = reshape(%170, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %173 = @func_266(%171, %172) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %174 = cos(%168) /* ty=Tensor[(15, 6, 14), float32] */;
  %175 = %173.0;
  (%174, %175, %var_2698)
}

def @func_1132(%var_1053: Tensor[(9, 15, 12), bool], %var_1080: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), int32], Tensor[(2, 16, 8), int8], Tensor[(128, 2), int8], Tensor[(2, 16, 8), int8], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(9, 15, 12), float32], Tensor[(2, 16, 8), int8], Tensor[(2, 16, 8), int8]) {
  %176 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %177 = %176.0;
  %178 = cast(%var_1053, dtype="int32") /* ty=Tensor[(9, 15, 12), int32] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="int32") /* ty=Tensor[(9, 15, 12), int32] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %182 = cast(meta[relay.Constant][5] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %183 = cast(meta[relay.Constant][5] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %184 = reshape(%182, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %185 = reshape(%183, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %186 = @func_266(%184, %185) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %187 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %188 = cast(%var_1080, dtype="float64") /* ty=Tensor[(784), float64] */;
  %189 = reshape(%187, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %190 = reshape(%188, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %191 = @func_965(%189, %190) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
  %192 = cast(meta[relay.Constant][5] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %193 = cast(meta[relay.Constant][5] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %194 = reshape(%192, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %195 = reshape(%193, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %196 = @func_266(%194, %195) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %197 = cast(%var_1053, dtype="uint32") /* ty=Tensor[(9, 15, 12), uint32] */;
  %198 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%177, dtype="uint32") /* ty=Tensor[(9, 15, 12), uint32] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %201 = multiply(%199, %200) /* ty=Tensor[(9, 15, 12), uint32] */;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %203 = log(%202) /* ty=Tensor[(9, 15, 12), float32] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %205 = cast(meta[relay.Constant][5] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %206 = %186.0;
  %207 = cast(%206, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %208 = reshape(%205, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %209 = reshape(%207, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %210 = @func_266(%208, %209) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %211 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %212 = cast(%var_1080, dtype="float64") /* ty=Tensor[(784), float64] */;
  %213 = reshape(%211, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %214 = reshape(%212, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
  %215 = @func_752(%213, %214) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
  %216 = left_shift(%180, %181) /* ty=Tensor[(9, 15, 12), int32] */;
  %217 = %191.0;
  %218 = %196.0;
  %219 = tan(%204) /* ty=Tensor[(9, 15, 12), float32] */;
  %220 = %210.0;
  %221 = %215.1;
  (%216, %206, meta[relay.Constant][5] /* ty=Tensor[(128, 2), int8] */, %217, meta[relay.Constant][6] /* ty=Tensor[(1, 49), float64] */, %var_1080, %218, %219, %220, %221)
}

def @func_4968() -> Tensor[(2, 16, 8), float64] {
  @func_3483() /* ty=Tensor[(2, 16, 8), float64] */
}

def @func_1833() -> (Tensor[(?, 49), float64], Tensor[(?, 49), float32]) {
  %222 = @func_1720() /* ty=(Tensor[(?, 49), int16],) */;
  %223 = %222.0;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(?, 49), float64] */;
  %225 = cast(%223, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %226 = asin(%224) /* ty=Tensor[(?, 49), float64] */;
  %227 = atanh(%225) /* ty=Tensor[(?, 49), float32] */;
  (%226, %227)
}

def @func_3762(%var_3716: Tensor[(12, 49), int16], %var_3722: Tensor[(12, 49), float32], %var_3748: Tensor[(12, 49), bool]) -> (Tensor[(12, 49), bool], Tensor[(12, 49), uint32], Tensor[(?, 49), int16], Tensor[(12, 49), float64], Tensor[(12, 49), float32], Tensor[(?, 49), int16]) {
  %228 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %230 = cast(%var_3716, dtype="float32") /* ty=Tensor[(12, 49), float32] */;
  %231 = divide(%229, %230) /* ty=Tensor[(12, 49), float32] */;
  %232 = cast(%var_3722, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(2), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %236 = cast(%var_3722, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
  %237 = shape_of(%var_3716, dtype="int32") /* ty=Tensor[(2), int32] */;
  %238 = cast(%var_3716, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %240 = logical_or(%238, %239) /* ty=Tensor[(12, 49), bool] */;
  %241 = cast(%240, dtype="uint32") /* ty=Tensor[(12, 49), uint32] */;
  %242 = shape_of(%231, dtype="int32") /* ty=Tensor[(2), int32] */;
  %243 = cast(%231, dtype="uint32") /* ty=Tensor[(12, 49), uint32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %245 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
  %246 = cast(%240, dtype="float64") /* ty=Tensor[(12, 49), float64] */;
  %247 = cast(%var_3748, dtype="float32") /* ty=Tensor[(12, 49), float32] */;
  %248 = shape_of(%240, dtype="int32") /* ty=Tensor[(2), int32] */;
  %249 = cast(%240, dtype="float32") /* ty=Tensor[(12, 49), float32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %251 = @func_2382() /* ty=(Tensor[(?, 49), int16], Tensor[(256), int8]) */;
  %252 = logical_and(%234, %235) /* ty=Tensor[(12, 49), bool] */;
  %253 = right_shift(%243, %244) /* ty=Tensor[(12, 49), uint32] */;
  %254 = %245.3;
  %255 = asin(%246) /* ty=Tensor[(12, 49), float64] */;
  %256 = floor_divide(%249, %250) /* ty=Tensor[(12, 49), float32] */;
  %257 = %251.0;
  (%252, %253, %254, %255, %256, %257)
}

def @func_2942() -> Tensor[(784), float64] {
  @func_2188() /* ty=Tensor[(784), float64] */
}

def @func_3968() -> Tensor[(9, 15, 12), bool] {
  %258 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
  %258.0
}

def @func_5248() -> (Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(392, 2), float64]) {
  %259 = @func_3556() /* ty=(Tensor[(1, 49), float64],) */;
  %260 = %259.0;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %262 = cast(meta[relay.Constant][7] /* ty=Tensor[(392, 2), float64] */, dtype="float64") /* ty=Tensor[(392, 2), float64] */;
  %263 = reshape(%261, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
  %264 = reshape(%262, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %265 = @func_1016(%263, %264) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
  %266 = %265.2;
  (%260, %266, meta[relay.Constant][7] /* ty=Tensor[(392, 2), float64] */)
}

def @func_3483() -> Tensor[(2, 16, 8), float64] {
  %267 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
  %268 = %267.1;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %270 = sqrt(%269) /* ty=Tensor[(2, 16, 8), float64] */;
  %271 = cast(%268, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%273, %274) /* ty=Tensor[(2, 16, 8), float64] */
}

def @func_3167(%var_3133: Tensor[(784), float64]) -> (Tensor[(784), uint8], Tensor[(784), float64]) {
  %275 = @func_2942() /* ty=Tensor[(784), float64] */;
  %276 = cast(%var_3133, dtype="float64") /* ty=Tensor[(784), float64] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(1), int32] */;
  %278 = cast(%275, dtype="float64") /* ty=Tensor[(784), float64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?), float64] */;
  %280 = floor_mod(%278, %279) /* ty=Tensor[(784), float64] */;
  %281 = cast(%280, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %282 = shape_of(%275, dtype="int32") /* ty=Tensor[(1), int32] */;
  %283 = cast(%275, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %285 = @func_2942() /* ty=Tensor[(784), float64] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(784), float64] */;
  %287 = maximum(%283, %284) /* ty=Tensor[(784), uint8] */;
  %288 = atan(%286) /* ty=Tensor[(784), float64] */;
  (%287, %288)
}

def @func_5219() -> (Tensor[(784), float32],) {
  %289 = @func_1762() /* ty=Tensor[(784), float32] */;
  (%289,)
}

def @func_810() -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
  %290 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 15, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %291 = acosh(%290) /* ty=Tensor[(9, 15, 12), float32] */;
  %292 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 15, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %296 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 15, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %297 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(9, 15, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 15, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = cast(meta[relay.Constant][10] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %301 = cast(meta[relay.Constant][10] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %302 = reshape(%300, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %303 = reshape(%301, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %304 = @func_266(%302, %303) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %305 = less(%294, %295) /* ty=Tensor[(9, 15, 12), bool] */;
  %306 = equal(%298, %299) /* ty=Tensor[(9, 15, 12), bool] */;
  %307 = %304.0;
  (%305, %306, %307, meta[relay.Constant][10] /* ty=Tensor[(256), int8] */)
}

def @func_5302() -> (Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) {
  %308 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
  %309 = cast(meta[relay.Constant][11] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %310 = reshape(%309, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %311 = @func_2285(%310) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %312 = %308.0;
  %313 = %311.0;
  (%312, %313, meta[relay.Constant][11] /* ty=Tensor[(256), int8] */)
}

def @func_1277() -> Tensor[(784), float64] {
  %314 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %314.3
}

def @func_1229(%var_1225: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) {
  %315 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %316 = cast(meta[relay.Constant][12] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %317 = cast(%var_1225, dtype="float64") /* ty=Tensor[(784), float64] */;
  %318 = reshape(%316, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
  %319 = reshape(%317, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %320 = @func_1016(%318, %319) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
  %321 = %315.1;
  %322 = %320.2;
  %323 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  (%321, %322, meta[relay.Constant][12] /* ty=Tensor[(49), float64] */, %var_1225, %323)
}

def @func_3885(%var_3851: Tensor[(1, 3, 12), float32]) -> (Tensor[(1, 3, 12), float32], Tensor[(1, 3, 12), float64], Tensor[(2, 16, 8), int8]) {
  %324 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %325 = cast(%var_3851, dtype="float32") /* ty=Tensor[(1, 3, 12), float32] */;
  %326 = cast(%var_3851, dtype="float64") /* ty=Tensor[(1, 3, 12), float64] */;
  %327 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
  %328 = floor_mod(%324, %325) /* ty=Tensor[(1, 3, 12), float32] */;
  %329 = asin(%326) /* ty=Tensor[(1, 3, 12), float64] */;
  %330 = %327.2;
  (%328, %329, %330)
}

def @func_2816() -> (Tensor[(15, 49), bool],) {
  %331 = @func_1833() /* ty=(Tensor[(?, 49), float64], Tensor[(?, 49), float32]) */;
  %332 = %331.1;
  %333 = cast(%332, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %334 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 49), float32] */, dtype="bool") /* ty=Tensor[(15, 49), bool] */;
  %335 = equal(%333, %334) /* ty=Tensor[(15, 49), bool] */;
  (%335,)
}

def @func_4552(%var_4468: Tensor[(1260), float32], %var_4469: Tensor[(256), int8], %var_4512: Tensor[(49), float64], %var_4532: Tensor[(49), float64]) -> (Tensor[(784), float64], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(256), int8], Tensor[(784), float32], Tensor[(2, 16, 8), float64], Tensor[(784), float64], Tensor[(49), int32], Tensor[(1, 49), float64]) {
  %336 = cast(%var_4468, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %337 = cast(%var_4469, dtype="int8") /* ty=Tensor[(256), int8] */;
  %338 = reshape(%336, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), float32] */;
  %339 = reshape(%337, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %340 = @func_2709(%338, %339) /* ty=(Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %341 = @func_3628() /* ty=(Tensor[(1, 49), float64], Tensor[(784), float32]) */;
  %342 = cast(%var_4512, dtype="float64") /* ty=Tensor[(49), float64] */;
  %343 = %341.1;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(784), float64] */;
  %345 = reshape(%342, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %346 = reshape(%344, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %347 = @func_965(%345, %346) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
  %348 = cast(%var_4532, dtype="int32") /* ty=Tensor[(49), int32] */;
  %349 = shape_of(%var_4512, dtype="int32") /* ty=Tensor[(1), int32] */;
  %350 = cast(%var_4512, dtype="int32") /* ty=Tensor[(49), int32] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?), int32] */;
  %352 = cast(%var_4469, dtype="int8") /* ty=Tensor[(256), int8] */;
  %353 = reshape(%352, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %354 = @func_3573(%353) /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) */;
  %355 = @func_2833() /* ty=Tensor[(784), float64] */;
  %356 = %340.2;
  %357 = %347.4;
  %358 = @func_2833() /* ty=Tensor[(784), float64] */;
  %359 = left_shift(%350, %351) /* ty=Tensor[(49), int32] */;
  %360 = %354.0;
  (%355, %356, %var_4468, %var_4469, %343, %357, %358, %359, %360)
}

def @func_1805(%var_1784: Tensor[(2, 14, 6), float64], %var_1801: Tensor[(784), float64]) -> (Tensor[(2, 14, 6), float64], Tensor[(9, 15, 12), int32], Tensor[(1620), bool], Tensor[(784), float64]) {
  %361 = cast(%var_1784, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  %362 = cast(meta[relay.Constant][15] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %363 = cast(%var_1801, dtype="float64") /* ty=Tensor[(784), float64] */;
  %364 = reshape(%362, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %365 = reshape(%363, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %366 = @func_1132(%364, %365) /* ty=(Tensor[(9, 15, 12), int32], Tensor[(2, 16, 8), int8], Tensor[(128, 2), int8], Tensor[(2, 16, 8), int8], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(9, 15, 12), float32], Tensor[(2, 16, 8), int8], Tensor[(2, 16, 8), int8]) */;
  %367 = tan(%361) /* ty=Tensor[(2, 14, 6), float64] */;
  %368 = %366.0;
  (%367, %368, meta[relay.Constant][15] /* ty=Tensor[(1620), bool] */, %var_1801)
}

def @func_965(%var_919: Tensor[(49), float64], %var_920: Tensor[(784), float64]) -> (Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) {
  %369 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %370 = cast(%var_919, dtype="float64") /* ty=Tensor[(49), float64] */;
  %371 = cast(%var_920, dtype="float64") /* ty=Tensor[(784), float64] */;
  %372 = cast(%var_919, dtype="float64") /* ty=Tensor[(49), float64] */;
  %373 = cast(%var_920, dtype="float64") /* ty=Tensor[(784), float64] */;
  %374 = %369.2;
  %375 = cast(%374, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %376 = reshape(%372, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
  %377 = reshape(%373, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %378 = reshape(%375, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %379 = @func_495(%376, %377, %378) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
  %380 = %379.1;
  %381 = cast(%380, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %382 = reshape(%370, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
  %383 = reshape(%371, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %384 = reshape(%381, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %385 = @func_495(%382, %383, %384) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
  %386 = cast(%380, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %387 = tan(%386) /* ty=Tensor[(2, 16, 8), float64] */;
  %388 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %392 = cast(%var_919, dtype="float64") /* ty=Tensor[(49), float64] */;
  %393 = %385.3;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %395 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 16, 8), float64] */, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %396 = reshape(%392, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
  %397 = reshape(%394, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %398 = reshape(%395, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %399 = @func_495(%396, %397, %398) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
  %400 = minimum(%390, %391) /* ty=Tensor[(2, 16, 8), float64] */;
  %401 = %399.0;
  (%374, %var_919, %var_920, %393, %400, %401)
}

def @func_3685() -> Tensor[(11, 10, 14), float32] {
  %402 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 14), float32] */;
  acosh(%402) /* ty=Tensor[(11, 10, 14), float32] */
}

def @func_4281() -> (Tensor[(?, 49), int16],) {
  %403 = @func_2804() /* ty=(Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %404 = %403.0;
  (%404,)
}

def @func_5561(%var_5540: Tensor[(256), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(256), int8], Tensor[(2, 16, 8), int64]) {
  %405 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
  %406 = @func_1935() /* ty=(Tensor[(256), int8], Tensor[(9, 15, 12), bool]) */;
  %407 = @func_2188() /* ty=Tensor[(784), float64] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(784), float64] */;
  %409 = %405.0;
  %410 = cast(%409, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
  %411 = cast(%var_5540, dtype="int8") /* ty=Tensor[(256), int8] */;
  %412 = reshape(%410, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %413 = reshape(%411, newshape=[8, 32]) /* ty=Tensor[(8, 32), int8] */;
  %414 = @func_4243(%412, %413) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(8, 32), int32], Tensor[(1, 49), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 784), float64], Tensor[(2, 16, 8), float32], Tensor[(5, 49), bool], Tensor[(784), float32], Tensor[(15, 49), bool], Tensor[(245), float64], Tensor[(?, 49), int16]) */;
  %415 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
  %416 = %406.1;
  %417 = exp(%408) /* ty=Tensor[(784), float64] */;
  %418 = %414.5;
  %419 = %415.5;
  (%409, %416, %417, %418, %var_5540, %419)
}

def @func_4654() -> (Tensor[(784), float64], Tensor[(784), float64]) {
  %420 = @func_1277() /* ty=Tensor[(784), float64] */;
  %421 = @func_1277() /* ty=Tensor[(784), float64] */;
  (%420, %421)
}

def @func_4454() -> Tensor[(9, 15, 12), float32] {
  %422 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
  %423 = %422.0;
  %424 = cast(%423, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  rsqrt(%424) /* ty=Tensor[(9, 15, 12), float32] */
}

def @func_3652() -> Tensor[(784), float64] {
  %425 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
  %425.0
}

def @main(%var_5648: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(?, 49), float64], Tensor[(784), int64]) {
  %426 = @func_1447() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %427 = @func_1833() /* ty=(Tensor[(?, 49), float64], Tensor[(?, 49), float32]) */;
  %428 = @func_1277() /* ty=Tensor[(784), float64] */;
  %429 = cast(%var_5648, dtype="int64") /* ty=Tensor[(784), int64] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(1), int32] */;
  %431 = cast(%428, dtype="int64") /* ty=Tensor[(784), int64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?), int64] */;
  %433 = %426.0;
  %434 = %427.0;
  %435 = bitwise_and(%431, %432) /* ty=Tensor[(784), int64] */;
  (%433, %434, %435)
}

def @func_1720() -> (Tensor[(?, 49), int16],) {
  %436 = @func_1342() /* ty=(Tensor[(?, 49), int16],) */;
  %437 = %436.0;
  (%437,)
}

def @func_1705(%var_1690: Tensor[(49, 1), float64]) -> (Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) {
  %438 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
  %439 = cast(%var_1690, dtype="float64") /* ty=Tensor[(49, 1), float64] */;
  %440 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 98), float64] */, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
  %441 = reshape(%439, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %442 = reshape(%440, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %443 = @func_965(%441, %442) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
  %444 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 98), float64] */, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
  %445 = cast(%var_1690, dtype="float64") /* ty=Tensor[(49, 1), float64] */;
  %446 = atan(%444) /* ty=Tensor[(8, 98), float64] */;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
  %448 = reshape(%445, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
  %449 = reshape(%447, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %450 = @func_1016(%448, %449) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
  %451 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %452 = %438.1;
  %453 = %443.3;
  %454 = %450.0;
  %455 = %451.1;
  (%452, %453, %var_1690, %446, %454, %455)
}

def @func_4018() -> (Tensor[(784), float64], Tensor[(8, 32), int8]) {
  %456 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
  %457 = @func_2717() /* ty=Tensor[(784), float64] */;
  %458 = %456.0;
  (%457, %458)
}

def @func_3556() -> (Tensor[(1, 49), float64],) {
  %459 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %461 = acos(%460) /* ty=Tensor[(1, 49), float64] */;
  (%461,)
}

def @func_2804() -> (Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
  %462 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %463 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %464 = reshape(%462, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %465 = reshape(%463, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %466 = @func_266(%464, %465) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %467 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  %468 = %466.0;
  (%467, %468, meta[relay.Constant][19] /* ty=Tensor[(256), int8] */)
}

def @func_5357(%var_5310: Tensor[(8, 49), int16], %var_5336: Tensor[(8, 49), float32], %var_5345: Tensor[(8, 49), bool], %var_5353: Tensor[(637), int16]) -> (Tensor[(784), float64], Tensor[(8, 49), float32], Tensor[(8, 49), bool], Tensor[(13, 49), bool], Tensor[(637), int16]) {
  %469 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
  %470 = cast(%var_5310, dtype="float32") /* ty=Tensor[(8, 49), float32] */;
  %471 = cosh(%470) /* ty=Tensor[(8, 49), float32] */;
  %472 = cast(%var_5336, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(2), int32] */;
  %474 = cast(%471, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %476 = less_equal(%474, %475) /* ty=Tensor[(8, 49), bool] */;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(8, 49), float32] */;
  %478 = @func_3306() /* ty=(Tensor[(?, 49), int16],) */;
  %479 = %478.0;
  %480 = cast(%479, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %481 = cast(%var_5310, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
  %482 = logical_or(%480, %481) /* ty=Tensor[(8, 49), bool] */;
  %483 = cast(%var_5345, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(2), int32] */;
  %485 = cast(%482, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %487 = cast(%var_5353, dtype="int16") /* ty=Tensor[(637), int16] */;
  %488 = reshape(%487, newshape=[13, 49]) /* ty=Tensor[(13, 49), int16] */;
  %489 = @func_1468(%488) /* ty=(Tensor[(13, 49), bool],) */;
  %490 = %469.0;
  %491 = exp(%477) /* ty=Tensor[(8, 49), float32] */;
  %492 = greater_equal(%485, %486) /* ty=Tensor[(8, 49), bool] */;
  %493 = %489.0;
  (%490, %491, %492, %493, %var_5353)
}

def @func_495(%var_402: Tensor[(7, 1, 7), float64], %var_403: Tensor[(7, 16, 7), float64], %var_433: Tensor[(256), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) {
  %494 = cast(%var_402, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
  %495 = cast(%var_403, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %496 = cast(%var_433, dtype="int8") /* ty=Tensor[(256), int8] */;
  %497 = cast(%var_433, dtype="int8") /* ty=Tensor[(256), int8] */;
  %498 = reshape(%496, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %499 = reshape(%497, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %500 = @func_266(%498, %499) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %501 = cast(%var_402, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
  %502 = log2(%501) /* ty=Tensor[(7, 1, 7), float64] */;
  %503 = cast(%var_402, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
  %504 = cast(%var_403, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %505 = floor_mod(%503, %504) /* ty=Tensor[(7, 16, 7), float32] */;
  %506 = cast(%502, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
  %507 = cast(%505, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %508 = cast(%var_433, dtype="int8") /* ty=Tensor[(256), int8] */;
  %509 = %500.0;
  %510 = cast(%509, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %511 = reshape(%508, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %512 = reshape(%510, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %513 = @func_266(%511, %512) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %514 = maximum(%494, %495) /* ty=Tensor[(7, 16, 7), float64] */;
  %515 = power(%506, %507) /* ty=Tensor[(7, 16, 7), float64] */;
  %516 = %513.0;
  (%514, %509, %var_433, %515, %516)
}

def @func_4075(%var_4031: Tensor[(6, 4, 9), float64], %var_4035: Tensor[(637), bool], %var_4067: Tensor[(637), bool]) -> (Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 256), int8], Tensor[(6, 4, 9), float32], Tensor[(1, 3, 12), float64], Tensor[(36), float32], Tensor[(9, 15, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(637), float32], Tensor[(784), float64]) {
  %517 = cast(%var_4035, dtype="bool") /* ty=Tensor[(637), bool] */;
  %518 = reshape(%517, newshape=[13, 49]) /* ty=Tensor[(13, 49), bool] */;
  %519 = @func_3422(%518) /* ty=(Tensor[(784), float64], Tensor[(637, 1), int16], Tensor[(13, 49), float64], Tensor[(13, 49), float32]) */;
  %520 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 256), int8] */, dtype="int8") /* ty=Tensor[(1, 256), int8] */;
  %521 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 256), int8] */, dtype="int8") /* ty=Tensor[(1, 256), int8] */;
  %522 = reshape(%520, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %523 = reshape(%521, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %524 = @func_266(%522, %523) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %525 = cast(%var_4031, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
  %526 = cosh(%525) /* ty=Tensor[(6, 4, 9), float64] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
  %528 = cast(meta[relay.Constant][21] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %529 = reshape(%528, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), float32] */;
  %530 = @func_3885(%529) /* ty=(Tensor[(1, 3, 12), float32], Tensor[(1, 3, 12), float64], Tensor[(2, 16, 8), int8]) */;
  %531 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
  %532 = cast(%526, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
  %533 = cast(%var_4067, dtype="float32") /* ty=Tensor[(637), float32] */;
  %534 = shape_of(%var_4035, dtype="int32") /* ty=Tensor[(1), int32] */;
  %535 = cast(%var_4035, dtype="float32") /* ty=Tensor[(637), float32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?), float32] */;
  %537 = %519.0;
  %538 = %524.0;
  %539 = sigmoid(%527) /* ty=Tensor[(6, 4, 9), float32] */;
  %540 = %530.1;
  %541 = %531.0;
  %542 = rsqrt(%532) /* ty=Tensor[(6, 4, 9), float64] */;
  %543 = power(%535, %536) /* ty=Tensor[(637), float32] */;
  %544 = @func_2942() /* ty=Tensor[(784), float64] */;
  (%537, %538, meta[relay.Constant][20] /* ty=Tensor[(1, 256), int8] */, %539, %540, meta[relay.Constant][21] /* ty=Tensor[(36), float32] */, %541, %542, %543, %544)
}

def @func_1194() -> Tensor[(1, 49), float64] {
  %545 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %545.1
}

def @func_3382() -> (Tensor[(8, 32), int8], Tensor[(?, 49), bool]) {
  %546 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
  %547 = @func_3306() /* ty=(Tensor[(?, 49), int16],) */;
  %548 = %547.0;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %550 = acosh(%549) /* ty=Tensor[(?, 49), float32] */;
  %551 = cast(%548, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(2), int32] */;
  %553 = cast(%550, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %555 = %546.6;
  %556 = not_equal(%553, %554) /* ty=Tensor[(?, 49), bool] */;
  (%555, %556)
}

def @func_5187(%var_5145: Tensor[(2, 6, 8), float64]) -> (Tensor[(2, 6, 8), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(7, 35), float64]) {
  %557 = cast(%var_5145, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %558 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %559 = cast(meta[relay.Constant][22] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %560 = %558.0;
  %561 = cast(%560, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %562 = reshape(%559, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), float32] */;
  %563 = reshape(%561, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %564 = @func_2709(%562, %563) /* ty=(Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %565 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
  %566 = sinh(%557) /* ty=Tensor[(2, 6, 8), float64] */;
  %567 = %564.2;
  %568 = %565.4;
  (%566, %560, %567, meta[relay.Constant][22] /* ty=Tensor[(1260), float32] */, %568)
}

def @func_1179() -> (Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) {
  %569 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %570 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %571 = cast(meta[relay.Constant][24] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %572 = reshape(%570, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
  %573 = reshape(%571, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %574 = @func_1016(%572, %573) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
  %575 = %574.2;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(784), float64] */;
  %577 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(784), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %578 = cast(meta[relay.Constant][24] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?), float64] */;
  %580 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %581 = cast(%575, dtype="float64") /* ty=Tensor[(784), float64] */;
  %582 = reshape(%580, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
  %583 = reshape(%581, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %584 = @func_1016(%582, %583) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
  %585 = cast(%575, dtype="uint16") /* ty=Tensor[(784), uint16] */;
  %586 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(784), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %587 = cast(meta[relay.Constant][24] /* ty=Tensor[(784), float64] */, dtype="uint16") /* ty=Tensor[(784), uint16] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %589 = %569.0;
  %590 = power(%578, %579) /* ty=Tensor[(784), float64] */;
  %591 = %584.2;
  %592 = left_shift(%587, %588) /* ty=Tensor[(784), uint16] */;
  (%589, meta[relay.Constant][23] /* ty=Tensor[(1, 49), float64] */, %590, %591, %592)
}

def @func_1468(%var_1461: Tensor[(13, 49), int16]) -> (Tensor[(13, 49), bool],) {
  %593 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  %594 = cast(%593, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %595 = cast(%var_1461, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
  %596 = not_equal(%594, %595) /* ty=Tensor[(13, 49), bool] */;
  (%596,)
}

def @func_4813(%var_4693: Tensor[(49), float64], %var_4748: Tensor[(49), float64]) -> (Tensor[(7, 16, 7), bool], Tensor[(15, 49), bool], Tensor[(49), uint32], Tensor[(8, 32), int8], Tensor[(49), bool], Tensor[(8, 32), int8], Tensor[(784), float64], Tensor[(49), float32]) {
  %597 = cast(%var_4693, dtype="float64") /* ty=Tensor[(49), float64] */;
  %598 = reshape(%597, newshape=[49, 1]) /* ty=Tensor[(49, 1), float64] */;
  %599 = @func_1705(%598) /* ty=(Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %600 = %599.1;
  %601 = @func_3652() /* ty=Tensor[(784), float64] */;
  %602 = cast(%601, dtype="bool") /* ty=Tensor[(784), bool] */;
  %603 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%600, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = @func_2816() /* ty=(Tensor[(15, 49), bool],) */;
  %607 = cast(%var_4693, dtype="float64") /* ty=Tensor[(49), float64] */;
  %608 = log2(%607) /* ty=Tensor[(49), float64] */;
  %609 = cast(%var_4748, dtype="bool") /* ty=Tensor[(49), bool] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(1), int32] */;
  %611 = cast(%608, dtype="bool") /* ty=Tensor[(49), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?), bool] */;
  %613 = logical_or(%611, %612) /* ty=Tensor[(49), bool] */;
  %614 = cast(%613, dtype="uint32") /* ty=Tensor[(49), uint32] */;
  %615 = shape_of(%608, dtype="int32") /* ty=Tensor[(1), int32] */;
  %616 = cast(%608, dtype="uint32") /* ty=Tensor[(49), uint32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %618 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
  %619 = cast(%608, dtype="bool") /* ty=Tensor[(49), bool] */;
  %620 = shape_of(%613, dtype="int32") /* ty=Tensor[(1), int32] */;
  %621 = cast(%613, dtype="bool") /* ty=Tensor[(49), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?), bool] */;
  %623 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
  %624 = cast(%613, dtype="float32") /* ty=Tensor[(49), float32] */;
  %625 = sqrt(%624) /* ty=Tensor[(49), float32] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(49), float32] */;
  %627 = greater(%604, %605) /* ty=Tensor[(7, 16, 7), bool] */;
  %628 = %606.0;
  %629 = multiply(%616, %617) /* ty=Tensor[(49), uint32] */;
  %630 = %618.0;
  %631 = less_equal(%621, %622) /* ty=Tensor[(49), bool] */;
  %632 = %623.0;
  %633 = @func_2717() /* ty=Tensor[(784), float64] */;
  %634 = acos(%626) /* ty=Tensor[(49), float32] */;
  (%627, %628, %629, %630, %631, %632, %633, %634)
}

def @func_3422(%var_3409: Tensor[(13, 49), bool]) -> (Tensor[(784), float64], Tensor[(637, 1), int16], Tensor[(13, 49), float64], Tensor[(13, 49), float32]) {
  %635 = cast(meta[relay.Constant][25] /* ty=Tensor[(637, 1), int16] */, dtype="int16") /* ty=Tensor[(637, 1), int16] */;
  %636 = reshape(%635, newshape=[13, 49]) /* ty=Tensor[(13, 49), int16] */;
  %637 = @func_1468(%636) /* ty=(Tensor[(13, 49), bool],) */;
  %638 = %637.0;
  %639 = cast(%var_3409, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(2), int32] */;
  %641 = cast(%638, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %643 = cast(%638, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
  %644 = erf(%643) /* ty=Tensor[(13, 49), float64] */;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(13, 49), float32] */;
  %646 = @func_1277() /* ty=Tensor[(784), float64] */;
  %647 = floor_mod(%641, %642) /* ty=Tensor[(13, 49), float64] */;
  %648 = acosh(%645) /* ty=Tensor[(13, 49), float32] */;
  (%646, meta[relay.Constant][25] /* ty=Tensor[(637, 1), int16] */, %647, %648)
}

def @func_752(%var_739: Tensor[(49), float64], %var_740: Tensor[(2, 392), float64]) -> (Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) {
  %649 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 14, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
  %650 = cast(%var_739, dtype="float64") /* ty=Tensor[(49), float64] */;
  %651 = cast(%var_740, dtype="float64") /* ty=Tensor[(2, 392), float64] */;
  %652 = cast(meta[relay.Constant][27] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %653 = reshape(%650, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
  %654 = reshape(%651, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %655 = reshape(%652, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %656 = @func_495(%653, %654, %655) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
  %657 = cast(meta[relay.Constant][27] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %658 = %656.1;
  %659 = cast(%658, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %660 = reshape(%657, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %661 = reshape(%659, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %662 = @func_266(%660, %661) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %663 = atan(%649) /* ty=Tensor[(4, 14, 1), float64] */;
  %664 = %662.0;
  (%663, %658, %var_739, %var_740, meta[relay.Constant][27] /* ty=Tensor[(256), int8] */, %664)
}

def @func_3306() -> (Tensor[(?, 49), int16],) {
  %665 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  (%665,)
}

def @func_1535() -> (Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) {
  %666 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %667 = %666.2;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %669 = atanh(%668) /* ty=Tensor[(2, 16, 8), float32] */;
  %670 = cast(%669, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %671 = cast(%667, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %672 = reshape(%670, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %673 = reshape(%671, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %674 = @func_266(%672, %673) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %675 = @func_1277() /* ty=Tensor[(784), float64] */;
  %676 = %674.0;
  (%675, %669, %676)
}

def @func_2382() -> (Tensor[(?, 49), int16], Tensor[(256), int8]) {
  %677 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
  %678 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %679 = %677.1;
  %680 = %678.3;
  (%679, %680)
}

def @func_1297() -> Tensor[(?, 49), int16] {
  %681 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %682 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %683 = cast(%682, dtype="int16") /* ty=Tensor[(1, 49), int16] */;
  %684 = shape_of(%681, dtype="int32") /* ty=Tensor[(2), int32] */;
  %685 = cast(%681, dtype="int16") /* ty=Tensor[(1, 49), int16] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  right_shift(%685, %686) /* ty=Tensor[(?, 49), int16] */
}

def @func_1773() -> Tensor[(784), float64] {
  %687 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
  %687.0
}

def @func_2482(%var_2457: Tensor[(16, 6, 12), uint8], %var_2458: Tensor[(16, 6, 12), uint8]) -> (Tensor[(16, 6, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(1, 784), float64], Tensor[(256), int8]) {
  %688 = cast(%var_2458, dtype="bool") /* ty=Tensor[(16, 6, 12), bool] */;
  %689 = shape_of(%var_2457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_2457, dtype="bool") /* ty=Tensor[(16, 6, 12), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = cast(meta[relay.Constant][28] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %693 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 784), float64] */, dtype="float64") /* ty=Tensor[(1, 784), float64] */;
  %694 = cast(meta[relay.Constant][30] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %695 = reshape(%692, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
  %696 = reshape(%693, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %697 = reshape(%694, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %698 = @func_495(%695, %696, %697) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
  %699 = greater(%690, %691) /* ty=Tensor[(16, 6, 12), bool] */;
  %700 = %698.1;
  (%699, %700, meta[relay.Constant][28] /* ty=Tensor[(49), float64] */, meta[relay.Constant][29] /* ty=Tensor[(1, 784), float64] */, meta[relay.Constant][30] /* ty=Tensor[(256), int8] */)
}

def @func_1762() -> Tensor[(784), float32] {
  %701 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(784), float32] */;
  log10(%703) /* ty=Tensor[(784), float32] */
}

def @func_2438(%var_2401: Tensor[(2, 16, 8), int8], %var_2428: Tensor[(7, 7), float64]) -> (Tensor[(2, 16, 8), bool], Tensor[(2, 16, 8), bool], Tensor[(2, 392), float64], Tensor[(7, 7), float64], Tensor[(8, 98), float64]) {
  %704 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %705 = %704.0;
  %706 = cast(%var_2401, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %710 = cast(%var_2401, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %711 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%705, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %714 = cast(%var_2428, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
  %715 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 98), float64] */, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
  %716 = reshape(%714, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %717 = reshape(%715, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
  %718 = @func_752(%716, %717) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
  %719 = equal(%708, %709) /* ty=Tensor[(2, 16, 8), bool] */;
  %720 = less_equal(%712, %713) /* ty=Tensor[(2, 16, 8), bool] */;
  %721 = %718.3;
  (%719, %720, %721, %var_2428, meta[relay.Constant][31] /* ty=Tensor[(8, 98), float64] */)
}

def @func_3004(%var_2998: Tensor[(5, 49), int16]) -> (Tensor[(5, 49), bool],) {
  %722 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  %723 = cast(%722, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %724 = cast(%var_2998, dtype="bool") /* ty=Tensor[(5, 49), bool] */;
  %725 = logical_or(%723, %724) /* ty=Tensor[(5, 49), bool] */;
  (%725,)
}

def @func_1630() -> (Tensor[(784), float64], Tensor[(?, 49), int16]) {
  %726 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %727 = %726.2;
  %728 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  (%727, %728)
}

def @func_266(%var_256: Tensor[(2, 16, 8), int8], %var_257: Tensor[(2, 16, 8), int8]) -> (Tensor[(2, 16, 8), int8],) {
  %729 = cast(%var_257, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %730 = shape_of(%var_256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_256, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %733 = left_shift(%731, %732) /* ty=Tensor[(2, 16, 8), int8] */;
  (%733,)
}

def @func_1342() -> (Tensor[(?, 49), int16],) {
  %734 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  (%734,)
}

def @func_5059(%var_4987: Tensor[(3, 49), int16], %var_4999: Tensor[(784, 1), float64], %var_5042: Tensor[(256), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(3, 49), float32], Tensor[(1, 49), float64], Tensor[(784, 49), bool], Tensor[(?, 49), float32], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8], Tensor[(256), int8]) {
  %735 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %736 = @func_3306() /* ty=(Tensor[(?, 49), int16],) */;
  %737 = %736.0;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %739 = cast(%var_4987, dtype="float32") /* ty=Tensor[(3, 49), float32] */;
  %740 = cast(%var_4999, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
  %741 = reshape(%740, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %742 = @func_1229(%741) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) */;
  %743 = cast(%var_4999, dtype="bool") /* ty=Tensor[(784, 1), bool] */;
  %744 = cast(%737, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %745 = cast(%737, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %746 = sinh(%745) /* ty=Tensor[(?, 49), float32] */;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(?, 49), float64] */;
  %748 = cast(%var_4999, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
  %749 = reshape(%747, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %750 = reshape(%748, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %751 = @func_965(%749, %750) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
  %752 = cast(%var_5042, dtype="int8") /* ty=Tensor[(256), int8] */;
  %753 = reshape(%752, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %754 = @func_2285(%753) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %755 = @func_2804() /* ty=(Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %756 = %735.1;
  %757 = floor_mod(%738, %739) /* ty=Tensor[(3, 49), float32] */;
  %758 = %742.4;
  %759 = equal(%743, %744) /* ty=Tensor[(784, 49), bool] */;
  %760 = %751.3;
  %761 = %754.0;
  %762 = %755.2;
  (%756, %757, %758, %759, %746, %760, %761, %var_5042, %762)
}

def @func_2833() -> Tensor[(784), float64] {
  %763 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %763.2
}

def @func_1447() -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) {
  %764 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %765 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %766 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %767 = %764.0;
  %768 = %765.1;
  %769 = %766.1;
  (%767, %768, %769)
}

def @func_5579(%var_5572: Tensor[(15, 49), bool]) -> Tensor[(15, 49), float32] {
  %770 = @func_2816() /* ty=(Tensor[(15, 49), bool],) */;
  %771 = %770.0;
  %772 = cast(%var_5572, dtype="float32") /* ty=Tensor[(15, 49), float32] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(2), int32] */;
  %774 = cast(%771, dtype="float32") /* ty=Tensor[(15, 49), float32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  divide(%774, %775) /* ty=Tensor[(15, 49), float32] */
}

def @func_1935() -> (Tensor[(256), int8], Tensor[(9, 15, 12), bool]) {
  %776 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %777 = @func_1447() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %778 = %776.3;
  %779 = %777.1;
  (%778, %779)
}

def @func_2188() -> Tensor[(784), float64] {
  @func_1773() /* ty=Tensor[(784), float64] */
}

def @func_3525(%var_3513: Tensor[(2, 16, 8), bool]) -> (Tensor[(2, 16, 8), float32],) {
  %780 = @func_2756() /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) */;
  %781 = %780.1;
  %782 = cast(%var_3513, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %786 = mod(%784, %785) /* ty=Tensor[(2, 16, 8), float32] */;
  (%786,)
}

def @func_3628() -> (Tensor[(1, 49), float64], Tensor[(784), float32]) {
  %787 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
  %788 = %787.0;
  %789 = cast(%788, dtype="float32") /* ty=Tensor[(784), float32] */;
  %790 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %791 = cosh(%789) /* ty=Tensor[(784), float32] */;
  (%790, %791)
}

def @func_2717() -> Tensor[(784), float64] {
  %792 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %792.2
}

def @func_4318() -> Tensor[(784), float64] {
  @func_3652() /* ty=Tensor[(784), float64] */
}

def @func_4107() -> Tensor[(2, 16, 8), int64] {
  %793 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
  %793.5
}

def @func_4941() -> (Tensor[(11, 10, 14), float32], Tensor[(784), float64], Tensor[(784), float32]) {
  %794 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
  %795 = @func_3628() /* ty=(Tensor[(1, 49), float64], Tensor[(784), float32]) */;
  %796 = @func_3685() /* ty=Tensor[(11, 10, 14), float32] */;
  %797 = %794.0;
  %798 = %795.1;
  (%796, %797, %798)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4655() -> (Tensor[(784), float64], Tensor[(784), float64]) {
  %2 = fn () -> (Tensor[(784), float64], Tensor[(784), float64]) {
    %0 = @func_1277() /* ty=Tensor[(784), float64] */;
    %1 = @func_1277() /* ty=Tensor[(784), float64] */;
    (%0, %1)
  };
  %2() /* ty=(Tensor[(784), float64], Tensor[(784), float64]) */
}

def @func_1180() -> (Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) {
  %27 = fn () -> (Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) {
    %3 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
    %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %6 = reshape(%4, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
    %7 = reshape(%5, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %8 = @func_1016(%6, %7) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
    %9 = %8.2;
    %10 = cast(%9, dtype="float64") /* ty=Tensor[(784), float64] */;
    %11 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(784), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?), float64] */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
    %15 = cast(%9, dtype="float64") /* ty=Tensor[(784), float64] */;
    %16 = reshape(%14, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
    %17 = reshape(%15, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %18 = @func_1016(%16, %17) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
    %19 = cast(%9, dtype="uint16") /* ty=Tensor[(784), uint16] */;
    %20 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(784), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(784), float64] */, dtype="uint16") /* ty=Tensor[(784), uint16] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %23 = %3.0;
    %24 = power(%12, %13) /* ty=Tensor[(784), float64] */;
    %25 = %18.2;
    %26 = left_shift(%21, %22) /* ty=Tensor[(784), uint16] */;
    (%23, meta[relay.Constant][0] /* ty=Tensor[(1, 49), float64] */, %24, %25, %26)
  };
  %27() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */
}

def @func_4942() -> (Tensor[(11, 10, 14), float32], Tensor[(784), float64], Tensor[(784), float32]) {
  %33 = fn () -> (Tensor[(11, 10, 14), float32], Tensor[(784), float64], Tensor[(784), float32]) {
    %28 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
    %29 = @func_3628() /* ty=(Tensor[(1, 49), float64], Tensor[(784), float32]) */;
    %30 = @func_3685() /* ty=Tensor[(11, 10, 14), float32] */;
    %31 = %28.0;
    %32 = %29.1;
    (%30, %31, %32)
  };
  %33() /* ty=(Tensor[(11, 10, 14), float32], Tensor[(784), float64], Tensor[(784), float32]) */
}

def @func_1136(%var_1134: Tensor[(9, 15, 12), bool], %var_1135: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), int32], Tensor[(2, 16, 8), int8], Tensor[(128, 2), int8], Tensor[(2, 16, 8), int8], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(9, 15, 12), float32], Tensor[(2, 16, 8), int8], Tensor[(2, 16, 8), int8]) {
  @func_1132(%var_1134, %var_1135) /* ty=(Tensor[(9, 15, 12), int32], Tensor[(2, 16, 8), int8], Tensor[(128, 2), int8], Tensor[(2, 16, 8), int8], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(9, 15, 12), float32], Tensor[(2, 16, 8), int8], Tensor[(2, 16, 8), int8]) */
}

def @func_5220() -> (Tensor[(784), float32],) {
  %35 = fn () -> (Tensor[(784), float32],) {
    %34 = @func_1762() /* ty=Tensor[(784), float32] */;
    (%34,)
  };
  %35() /* ty=(Tensor[(784), float32],) */
}

def @func_1720() -> (Tensor[(?, 49), int16],) {
  %36 = @func_1342() /* ty=(Tensor[(?, 49), int16],) */;
  %37 = %36.0;
  (%37,)
}

def @func_1774() -> Tensor[(784), float64] {
  %39 = fn () -> Tensor[(784), float64] {
    %38 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
    %38.0
  };
  %39() /* ty=Tensor[(784), float64] */
}

def @func_3525(%var_3513: Tensor[(2, 16, 8), bool]) -> (Tensor[(2, 16, 8), float32],) {
  %40 = @func_2756() /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) */;
  %41 = %40.1;
  %42 = cast(%var_3513, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %46 = mod(%44, %45) /* ty=Tensor[(2, 16, 8), float32] */;
  (%46,)
}

def @main(%var_5648: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(?, 49), float64], Tensor[(784), int64]) {
  %47 = @func_1448() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %48 = @func_1835() /* ty=(Tensor[(?, 49), float64], Tensor[(?, 49), float32]) */;
  %49 = @func_1277() /* ty=Tensor[(784), float64] */;
  %50 = cast(%var_5648, dtype="int64") /* ty=Tensor[(784), int64] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(1), int32] */;
  %52 = cast(%49, dtype="int64") /* ty=Tensor[(784), int64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?), int64] */;
  %54 = %47.0;
  %55 = %48.0;
  %56 = bitwise_and(%52, %53) /* ty=Tensor[(784), int64] */;
  (%54, %55, %56)
}

def @func_1630() -> (Tensor[(784), float64], Tensor[(?, 49), int16]) {
  %57 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
  %58 = %57.2;
  %59 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  (%58, %59)
}

def @func_2942() -> Tensor[(784), float64] {
  @func_2188() /* ty=Tensor[(784), float64] */
}

def @func_2354(%var_2353: Tensor[(6, 28), float64]) -> (Tensor[(784), float64], Tensor[(256), int8], Tensor[(2, 14, 6), float64], Tensor[(6, 28), float64]) {
  %70 = fn (%var_2341: Tensor[(6, 28), float64]) -> (Tensor[(784), float64], Tensor[(256), int8], Tensor[(2, 14, 6), float64], Tensor[(6, 28), float64]) {
    %60 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
    %61 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %62 = cast(%var_2341, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
    %63 = %60.3;
    %64 = cast(%63, dtype="float64") /* ty=Tensor[(784), float64] */;
    %65 = reshape(%62, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float64] */;
    %66 = reshape(%64, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %67 = @func_1805(%65, %66) /* ty=(Tensor[(2, 14, 6), float64], Tensor[(9, 15, 12), int32], Tensor[(1620), bool], Tensor[(784), float64]) */;
    %68 = %61.3;
    %69 = %67.0;
    (%63, %68, %69, %var_2341)
  };
  %70(%var_2353) /* ty=(Tensor[(784), float64], Tensor[(256), int8], Tensor[(2, 14, 6), float64], Tensor[(6, 28), float64]) */
}

def @func_2818() -> (Tensor[(15, 49), bool],) {
  @func_2816() /* ty=(Tensor[(15, 49), bool],) */
}

def @func_266(%var_256: Tensor[(2, 16, 8), int8], %var_257: Tensor[(2, 16, 8), int8]) -> (Tensor[(2, 16, 8), int8],) {
  %71 = cast(%var_257, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %72 = shape_of(%var_256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_256, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %75 = left_shift(%73, %74) /* ty=Tensor[(2, 16, 8), int8] */;
  (%75,)
}

def @func_5064(%var_5061: Tensor[(3, 49), int16], %var_5062: Tensor[(784, 1), float64], %var_5063: Tensor[(256), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(3, 49), float32], Tensor[(1, 49), float64], Tensor[(784, 49), bool], Tensor[(?, 49), float32], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8], Tensor[(256), int8]) {
  @func_5059(%var_5061, %var_5062, %var_5063) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(3, 49), float32], Tensor[(1, 49), float64], Tensor[(784, 49), bool], Tensor[(?, 49), float32], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8], Tensor[(256), int8]) */
}

def @func_2384() -> (Tensor[(?, 49), int16], Tensor[(256), int8]) {
  @func_2382() /* ty=(Tensor[(?, 49), int16], Tensor[(256), int8]) */
}

def @func_1394(%var_1369: Tensor[(12, 1, 14), float64], %var_1370: Tensor[(12, 16, 14), float64], %var_1386: Tensor[(12, 15, 14), float64]) -> (Tensor[(12, 16, 14), float64], Tensor[(12, 15, 14), uint16]) {
  %76 = cast(%var_1369, dtype="float64") /* ty=Tensor[(12, 1, 14), float64] */;
  %77 = cast(%var_1370, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
  %78 = cast(%var_1369, dtype="uint16") /* ty=Tensor[(12, 1, 14), uint16] */;
  %79 = cast(%var_1386, dtype="uint16") /* ty=Tensor[(12, 15, 14), uint16] */;
  %80 = multiply(%76, %77) /* ty=Tensor[(12, 16, 14), float64] */;
  %81 = left_shift(%78, %79) /* ty=Tensor[(12, 15, 14), uint16] */;
  (%80, %81)
}

def @func_270(%var_268: Tensor[(2, 16, 8), int8], %var_269: Tensor[(2, 16, 8), int8]) -> (Tensor[(2, 16, 8), int8],) {
  @func_266(%var_268, %var_269) /* ty=(Tensor[(2, 16, 8), int8],) */
}

def @func_1536() -> (Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) {
  %93 = fn () -> (Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) {
    %82 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %83 = %82.2;
    %84 = cast(%83, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
    %85 = atanh(%84) /* ty=Tensor[(2, 16, 8), float32] */;
    %86 = cast(%85, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
    %87 = cast(%83, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
    %88 = reshape(%86, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %89 = reshape(%87, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %90 = @func_266(%88, %89) /* ty=(Tensor[(2, 16, 8), int8],) */;
    %91 = @func_1277() /* ty=Tensor[(784), float64] */;
    %92 = %90.0;
    (%91, %85, %92)
  };
  %93() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */
}

def @func_4080(%var_4077: Tensor[(6, 4, 9), float64], %var_4078: Tensor[(637), bool], %var_4079: Tensor[(637), bool]) -> (Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 256), int8], Tensor[(6, 4, 9), float32], Tensor[(1, 3, 12), float64], Tensor[(36), float32], Tensor[(9, 15, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(637), float32], Tensor[(784), float64]) {
  @func_4075(%var_4077, %var_4078, %var_4079) /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 256), int8], Tensor[(6, 4, 9), float32], Tensor[(1, 3, 12), float64], Tensor[(36), float32], Tensor[(9, 15, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(637), float32], Tensor[(784), float64]) */
}

def @func_3169(%var_3168: Tensor[(784), float64]) -> (Tensor[(784), uint8], Tensor[(784), float64]) {
  %108 = fn (%var_3133: Tensor[(784), float64]) -> (Tensor[(784), uint8], Tensor[(784), float64]) {
    %94 = @func_2942() /* ty=Tensor[(784), float64] */;
    %95 = cast(%var_3133, dtype="float64") /* ty=Tensor[(784), float64] */;
    %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(1), int32] */;
    %97 = cast(%94, dtype="float64") /* ty=Tensor[(784), float64] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?), float64] */;
    %99 = floor_mod(%97, %98) /* ty=Tensor[(784), float64] */;
    %100 = cast(%99, dtype="uint8") /* ty=Tensor[(784), uint8] */;
    %101 = shape_of(%94, dtype="int32") /* ty=Tensor[(1), int32] */;
    %102 = cast(%94, dtype="uint8") /* ty=Tensor[(784), uint8] */;
    %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %104 = @func_2942() /* ty=Tensor[(784), float64] */;
    %105 = cast(%104, dtype="float64") /* ty=Tensor[(784), float64] */;
    %106 = maximum(%102, %103) /* ty=Tensor[(784), uint8] */;
    %107 = atan(%105) /* ty=Tensor[(784), float64] */;
    (%106, %107)
  };
  %108(%var_3168) /* ty=(Tensor[(784), uint8], Tensor[(784), float64]) */
}

def @func_1936() -> (Tensor[(256), int8], Tensor[(9, 15, 12), bool]) {
  %113 = fn () -> (Tensor[(256), int8], Tensor[(9, 15, 12), bool]) {
    %109 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %110 = @func_1447() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
    %111 = %109.3;
    %112 = %110.1;
    (%111, %112)
  };
  %113() /* ty=(Tensor[(256), int8], Tensor[(9, 15, 12), bool]) */
}

def @func_2442(%var_2440: Tensor[(2, 16, 8), int8], %var_2441: Tensor[(7, 7), float64]) -> (Tensor[(2, 16, 8), bool], Tensor[(2, 16, 8), bool], Tensor[(2, 392), float64], Tensor[(7, 7), float64], Tensor[(8, 98), float64]) {
  @func_2438(%var_2440, %var_2441) /* ty=(Tensor[(2, 16, 8), bool], Tensor[(2, 16, 8), bool], Tensor[(2, 392), float64], Tensor[(7, 7), float64], Tensor[(8, 98), float64]) */
}

def @func_3887(%var_3886: Tensor[(1, 3, 12), float32]) -> (Tensor[(1, 3, 12), float32], Tensor[(1, 3, 12), float64], Tensor[(2, 16, 8), int8]) {
  %121 = fn (%var_3851: Tensor[(1, 3, 12), float32]) -> (Tensor[(1, 3, 12), float32], Tensor[(1, 3, 12), float64], Tensor[(2, 16, 8), int8]) {
    %114 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
    %115 = cast(%var_3851, dtype="float32") /* ty=Tensor[(1, 3, 12), float32] */;
    %116 = cast(%var_3851, dtype="float64") /* ty=Tensor[(1, 3, 12), float64] */;
    %117 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
    %118 = floor_mod(%114, %115) /* ty=Tensor[(1, 3, 12), float32] */;
    %119 = asin(%116) /* ty=Tensor[(1, 3, 12), float64] */;
    %120 = %117.2;
    (%118, %119, %120)
  };
  %121(%var_3886) /* ty=(Tensor[(1, 3, 12), float32], Tensor[(1, 3, 12), float64], Tensor[(2, 16, 8), int8]) */
}

def @func_3654() -> Tensor[(784), float64] {
  @func_3652() /* ty=Tensor[(784), float64] */
}

def @func_1868() -> (Tensor[(2, 16, 8), int8],) {
  %124 = fn () -> (Tensor[(2, 16, 8), int8],) {
    %122 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
    %123 = %122.2;
    (%123,)
  };
  %124() /* ty=(Tensor[(2, 16, 8), int8],) */
}

def @func_3930() -> (Tensor[(9, 15, 12), bool],) {
  @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */
}

def @func_811() -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
  %143 = fn () -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
    %125 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 15, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
    %126 = acosh(%125) /* ty=Tensor[(9, 15, 12), float32] */;
    %127 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 15, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 15, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
    %132 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(9, 15, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 15, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %135 = cast(meta[relay.Constant][5] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
    %136 = cast(meta[relay.Constant][5] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
    %137 = reshape(%135, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %138 = reshape(%136, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %139 = @func_266(%137, %138) /* ty=(Tensor[(2, 16, 8), int8],) */;
    %140 = less(%129, %130) /* ty=Tensor[(9, 15, 12), bool] */;
    %141 = equal(%133, %134) /* ty=Tensor[(9, 15, 12), bool] */;
    %142 = %139.0;
    (%140, %141, %142, meta[relay.Constant][5] /* ty=Tensor[(256), int8] */)
  };
  %143() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */
}

def @func_1016(%var_1003: Tensor[(1, 49), float64], %var_1004: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) {
  %144 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %145 = cast(%var_1003, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %146 = cast(%var_1004, dtype="float64") /* ty=Tensor[(784), float64] */;
  %147 = reshape(%145, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %148 = reshape(%146, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
  %149 = @func_752(%147, %148) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
  %150 = %149.5;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %152 = %144.1;
  %153 = log10(%151) /* ty=Tensor[(2, 16, 8), float32] */;
  (%152, %var_1003, %var_1004, %153)
}

def @func_4813(%var_4693: Tensor[(49), float64], %var_4748: Tensor[(49), float64]) -> (Tensor[(7, 16, 7), bool], Tensor[(15, 49), bool], Tensor[(49), uint32], Tensor[(8, 32), int8], Tensor[(49), bool], Tensor[(8, 32), int8], Tensor[(784), float64], Tensor[(49), float32]) {
  %154 = cast(%var_4693, dtype="float64") /* ty=Tensor[(49), float64] */;
  %155 = reshape(%154, newshape=[49, 1]) /* ty=Tensor[(49, 1), float64] */;
  %156 = @func_1705(%155) /* ty=(Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %157 = %156.1;
  %158 = @func_3652() /* ty=Tensor[(784), float64] */;
  %159 = cast(%158, dtype="bool") /* ty=Tensor[(784), bool] */;
  %160 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%157, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %163 = @func_2816() /* ty=(Tensor[(15, 49), bool],) */;
  %164 = cast(%var_4693, dtype="float64") /* ty=Tensor[(49), float64] */;
  %165 = log2(%164) /* ty=Tensor[(49), float64] */;
  %166 = cast(%var_4748, dtype="bool") /* ty=Tensor[(49), bool] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %168 = cast(%165, dtype="bool") /* ty=Tensor[(49), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?), bool] */;
  %170 = logical_or(%168, %169) /* ty=Tensor[(49), bool] */;
  %171 = cast(%170, dtype="uint32") /* ty=Tensor[(49), uint32] */;
  %172 = shape_of(%165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %173 = cast(%165, dtype="uint32") /* ty=Tensor[(49), uint32] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %175 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
  %176 = cast(%165, dtype="bool") /* ty=Tensor[(49), bool] */;
  %177 = shape_of(%170, dtype="int32") /* ty=Tensor[(1), int32] */;
  %178 = cast(%170, dtype="bool") /* ty=Tensor[(49), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?), bool] */;
  %180 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
  %181 = cast(%170, dtype="float32") /* ty=Tensor[(49), float32] */;
  %182 = sqrt(%181) /* ty=Tensor[(49), float32] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(49), float32] */;
  %184 = greater(%161, %162) /* ty=Tensor[(7, 16, 7), bool] */;
  %185 = %163.0;
  %186 = multiply(%173, %174) /* ty=Tensor[(49), uint32] */;
  %187 = %175.0;
  %188 = less_equal(%178, %179) /* ty=Tensor[(49), bool] */;
  %189 = %180.0;
  %190 = @func_2717() /* ty=Tensor[(784), float64] */;
  %191 = acos(%183) /* ty=Tensor[(49), float32] */;
  (%184, %185, %186, %187, %188, %189, %190, %191)
}

def @func_1298() -> Tensor[(?, 49), int16] {
  %198 = fn () -> Tensor[(?, 49), int16] {
    %192 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
    %193 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
    %194 = cast(%193, dtype="int16") /* ty=Tensor[(1, 49), int16] */;
    %195 = shape_of(%192, dtype="int32") /* ty=Tensor[(2), int32] */;
    %196 = cast(%192, dtype="int16") /* ty=Tensor[(1, 49), int16] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    right_shift(%196, %197) /* ty=Tensor[(?, 49), int16] */
  };
  %198() /* ty=Tensor[(?, 49), int16] */
}

def @func_3307() -> (Tensor[(?, 49), int16],) {
  %200 = fn () -> (Tensor[(?, 49), int16],) {
    %199 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
    (%199,)
  };
  %200() /* ty=(Tensor[(?, 49), int16],) */
}

def @func_1231(%var_1230: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) {
  %210 = fn (%var_1225: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) {
    %201 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %202 = cast(meta[relay.Constant][6] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
    %203 = cast(%var_1225, dtype="float64") /* ty=Tensor[(784), float64] */;
    %204 = reshape(%202, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
    %205 = reshape(%203, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %206 = @func_1016(%204, %205) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
    %207 = %201.1;
    %208 = %206.2;
    %209 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
    (%207, %208, meta[relay.Constant][6] /* ty=Tensor[(49), float64] */, %var_1225, %209)
  };
  %210(%var_1230) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) */
}

def @func_3969() -> Tensor[(9, 15, 12), bool] {
  %212 = fn () -> Tensor[(9, 15, 12), bool] {
    %211 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
    %211.0
  };
  %212() /* ty=Tensor[(9, 15, 12), bool] */
}

def @func_3383() -> (Tensor[(8, 32), int8], Tensor[(?, 49), bool]) {
  %224 = fn () -> (Tensor[(8, 32), int8], Tensor[(?, 49), bool]) {
    %213 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
    %214 = @func_3306() /* ty=(Tensor[(?, 49), int16],) */;
    %215 = %214.0;
    %216 = cast(%215, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
    %217 = acosh(%216) /* ty=Tensor[(?, 49), float32] */;
    %218 = cast(%215, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(2), int32] */;
    %220 = cast(%217, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %222 = %213.6;
    %223 = not_equal(%220, %221) /* ty=Tensor[(?, 49), bool] */;
    (%222, %223)
  };
  %224() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */
}

def @func_4246(%var_4244: Tensor[(9, 15, 12), bool], %var_4245: Tensor[(8, 32), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(8, 32), int32], Tensor[(1, 49), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 784), float64], Tensor[(2, 16, 8), float32], Tensor[(5, 49), bool], Tensor[(784), float32], Tensor[(15, 49), bool], Tensor[(245), float64], Tensor[(?, 49), int16]) {
  %263 = fn (%var_4155: Tensor[(9, 15, 12), bool], %var_4194: Tensor[(8, 32), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(8, 32), int32], Tensor[(1, 49), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 784), float64], Tensor[(2, 16, 8), float32], Tensor[(5, 49), bool], Tensor[(784), float32], Tensor[(15, 49), bool], Tensor[(245), float64], Tensor[(?, 49), int16]) {
    %225 = @func_3968() /* ty=Tensor[(9, 15, 12), bool] */;
    %226 = cast(%var_4155, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
    %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
    %228 = cast(%225, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %230 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
    %231 = %230.0;
    %232 = cast(%var_4194, dtype="int32") /* ty=Tensor[(8, 32), int32] */;
    %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(2), int32] */;
    %234 = cast(%231, dtype="int32") /* ty=Tensor[(8, 32), int32] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %236 = @func_3556() /* ty=(Tensor[(1, 49), float64],) */;
    %237 = %236.0;
    %238 = cast(%237, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
    %239 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 784), float64] */, dtype="float64") /* ty=Tensor[(1, 784), float64] */;
    %240 = reshape(%238, newshape=[49]) /* ty=Tensor[(49), float64] */;
    %241 = reshape(%239, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
    %242 = @func_752(%240, %241) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
    %243 = cast(%var_4194, dtype="bool") /* ty=Tensor[(8, 32), bool] */;
    %244 = reshape(%243, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), bool] */;
    %245 = @func_3525(%244) /* ty=(Tensor[(2, 16, 8), float32],) */;
    %246 = cast(meta[relay.Constant][8] /* ty=Tensor[(245), int16] */, dtype="int16") /* ty=Tensor[(245), int16] */;
    %247 = reshape(%246, newshape=[5, 49]) /* ty=Tensor[(5, 49), int16] */;
    %248 = @func_3004(%247) /* ty=(Tensor[(5, 49), bool],) */;
    %249 = @func_2816() /* ty=(Tensor[(15, 49), bool],) */;
    %250 = cast(meta[relay.Constant][8] /* ty=Tensor[(245), int16] */, dtype="float64") /* ty=Tensor[(245), float64] */;
    %251 = exp(%250) /* ty=Tensor[(245), float64] */;
    %252 = cast(%251, dtype="float64") /* ty=Tensor[(245), float64] */;
    %253 = @func_1720() /* ty=(Tensor[(?, 49), int16],) */;
    %254 = greater(%228, %229) /* ty=Tensor[(9, 15, 12), bool] */;
    %255 = bitwise_or(%234, %235) /* ty=Tensor[(8, 32), int32] */;
    %256 = %242.5;
    %257 = %245.0;
    %258 = %248.0;
    %259 = @func_1762() /* ty=Tensor[(784), float32] */;
    %260 = %249.0;
    %261 = cos(%252) /* ty=Tensor[(245), float64] */;
    %262 = %253.0;
    (%254, %255, %237, %256, meta[relay.Constant][7] /* ty=Tensor[(1, 784), float64] */, %257, %258, %259, %260, %261, %262)
  };
  %263(%var_4244, %var_4245) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(8, 32), int32], Tensor[(1, 49), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 784), float64], Tensor[(2, 16, 8), float32], Tensor[(5, 49), bool], Tensor[(784), float32], Tensor[(15, 49), bool], Tensor[(245), float64], Tensor[(?, 49), int16]) */
}

def @func_1833() -> (Tensor[(?, 49), float64], Tensor[(?, 49), float32]) {
  %264 = @func_1720() /* ty=(Tensor[(?, 49), int16],) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(?, 49), float64] */;
  %267 = cast(%265, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %268 = asin(%266) /* ty=Tensor[(?, 49), float64] */;
  %269 = atanh(%267) /* ty=Tensor[(?, 49), float32] */;
  (%268, %269)
}

def @func_2834() -> Tensor[(784), float64] {
  %271 = fn () -> Tensor[(784), float64] {
    %270 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
    %270.2
  };
  %271() /* ty=Tensor[(784), float64] */
}

def @func_3484() -> Tensor[(2, 16, 8), float64] {
  %280 = fn () -> Tensor[(2, 16, 8), float64] {
    %272 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
    %273 = %272.1;
    %274 = cast(%273, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
    %275 = sqrt(%274) /* ty=Tensor[(2, 16, 8), float64] */;
    %276 = cast(%273, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
    %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%275, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%278, %279) /* ty=Tensor[(2, 16, 8), float64] */
  };
  %280() /* ty=Tensor[(2, 16, 8), float64] */
}

def @func_500(%var_497: Tensor[(7, 1, 7), float64], %var_498: Tensor[(7, 16, 7), float64], %var_499: Tensor[(256), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) {
  @func_495(%var_497, %var_498, %var_499) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */
}

def @func_968(%var_966: Tensor[(49), float64], %var_967: Tensor[(784), float64]) -> (Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) {
  %314 = fn (%var_919: Tensor[(49), float64], %var_920: Tensor[(784), float64]) -> (Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) {
    %281 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %282 = cast(%var_919, dtype="float64") /* ty=Tensor[(49), float64] */;
    %283 = cast(%var_920, dtype="float64") /* ty=Tensor[(784), float64] */;
    %284 = cast(%var_919, dtype="float64") /* ty=Tensor[(49), float64] */;
    %285 = cast(%var_920, dtype="float64") /* ty=Tensor[(784), float64] */;
    %286 = %281.2;
    %287 = cast(%286, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
    %288 = reshape(%284, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
    %289 = reshape(%285, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
    %290 = reshape(%287, newshape=[256]) /* ty=Tensor[(256), int8] */;
    %291 = @func_495(%288, %289, %290) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
    %292 = %291.1;
    %293 = cast(%292, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
    %294 = reshape(%282, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
    %295 = reshape(%283, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
    %296 = reshape(%293, newshape=[256]) /* ty=Tensor[(256), int8] */;
    %297 = @func_495(%294, %295, %296) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
    %298 = cast(%292, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
    %299 = tan(%298) /* ty=Tensor[(2, 16, 8), float64] */;
    %300 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
    %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%299, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %304 = cast(%var_919, dtype="float64") /* ty=Tensor[(49), float64] */;
    %305 = %297.3;
    %306 = cast(%305, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
    %307 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 16, 8), float64] */, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
    %308 = reshape(%304, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
    %309 = reshape(%306, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
    %310 = reshape(%307, newshape=[256]) /* ty=Tensor[(256), int8] */;
    %311 = @func_495(%308, %309, %310) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
    %312 = minimum(%302, %303) /* ty=Tensor[(2, 16, 8), float64] */;
    %313 = %311.0;
    (%286, %var_919, %var_920, %305, %312, %313)
  };
  %314(%var_966, %var_967) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_2189() -> Tensor[(784), float64] {
  %315 = fn () -> Tensor[(784), float64] {
    @func_1773() /* ty=Tensor[(784), float64] */
  };
  %315() /* ty=Tensor[(784), float64] */
}

def @func_1722() -> (Tensor[(?, 49), int16],) {
  @func_1720() /* ty=(Tensor[(?, 49), int16],) */
}

def @func_1132(%var_1053: Tensor[(9, 15, 12), bool], %var_1080: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), int32], Tensor[(2, 16, 8), int8], Tensor[(128, 2), int8], Tensor[(2, 16, 8), int8], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(9, 15, 12), float32], Tensor[(2, 16, 8), int8], Tensor[(2, 16, 8), int8]) {
  %316 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %317 = %316.0;
  %318 = cast(%var_1053, dtype="int32") /* ty=Tensor[(9, 15, 12), int32] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="int32") /* ty=Tensor[(9, 15, 12), int32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %322 = cast(meta[relay.Constant][10] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %323 = cast(meta[relay.Constant][10] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %324 = reshape(%322, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %325 = reshape(%323, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %326 = @func_266(%324, %325) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %327 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %328 = cast(%var_1080, dtype="float64") /* ty=Tensor[(784), float64] */;
  %329 = reshape(%327, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %330 = reshape(%328, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %331 = @func_965(%329, %330) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
  %332 = cast(meta[relay.Constant][10] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %333 = cast(meta[relay.Constant][10] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %334 = reshape(%332, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %335 = reshape(%333, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %336 = @func_266(%334, %335) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %337 = cast(%var_1053, dtype="uint32") /* ty=Tensor[(9, 15, 12), uint32] */;
  %338 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%317, dtype="uint32") /* ty=Tensor[(9, 15, 12), uint32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %341 = multiply(%339, %340) /* ty=Tensor[(9, 15, 12), uint32] */;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %343 = log(%342) /* ty=Tensor[(9, 15, 12), float32] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %345 = cast(meta[relay.Constant][10] /* ty=Tensor[(128, 2), int8] */, dtype="int8") /* ty=Tensor[(128, 2), int8] */;
  %346 = %326.0;
  %347 = cast(%346, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %348 = reshape(%345, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %349 = reshape(%347, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %350 = @func_266(%348, %349) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %351 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %352 = cast(%var_1080, dtype="float64") /* ty=Tensor[(784), float64] */;
  %353 = reshape(%351, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %354 = reshape(%352, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
  %355 = @func_752(%353, %354) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
  %356 = left_shift(%320, %321) /* ty=Tensor[(9, 15, 12), int32] */;
  %357 = %331.0;
  %358 = %336.0;
  %359 = tan(%344) /* ty=Tensor[(9, 15, 12), float32] */;
  %360 = %350.0;
  %361 = %355.1;
  (%356, %346, meta[relay.Constant][10] /* ty=Tensor[(128, 2), int8] */, %357, meta[relay.Constant][11] /* ty=Tensor[(1, 49), float64] */, %var_1080, %358, %359, %360, %361)
}

def @func_1805(%var_1784: Tensor[(2, 14, 6), float64], %var_1801: Tensor[(784), float64]) -> (Tensor[(2, 14, 6), float64], Tensor[(9, 15, 12), int32], Tensor[(1620), bool], Tensor[(784), float64]) {
  %362 = cast(%var_1784, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  %363 = cast(meta[relay.Constant][12] /* ty=Tensor[(1620), bool] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %364 = cast(%var_1801, dtype="float64") /* ty=Tensor[(784), float64] */;
  %365 = reshape(%363, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
  %366 = reshape(%364, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %367 = @func_1132(%365, %366) /* ty=(Tensor[(9, 15, 12), int32], Tensor[(2, 16, 8), int8], Tensor[(128, 2), int8], Tensor[(2, 16, 8), int8], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(9, 15, 12), float32], Tensor[(2, 16, 8), int8], Tensor[(2, 16, 8), int8]) */;
  %368 = tan(%362) /* ty=Tensor[(2, 14, 6), float64] */;
  %369 = %367.0;
  (%368, %369, meta[relay.Constant][12] /* ty=Tensor[(1620), bool] */, %var_1801)
}

def @func_1343() -> (Tensor[(?, 49), int16],) {
  %371 = fn () -> (Tensor[(?, 49), int16],) {
    %370 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
    (%370,)
  };
  %371() /* ty=(Tensor[(?, 49), int16],) */
}

def @func_1020(%var_1018: Tensor[(1, 49), float64], %var_1019: Tensor[(784), float64]) -> (Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) {
  @func_1016(%var_1018, %var_1019) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */
}

def @func_2482(%var_2457: Tensor[(16, 6, 12), uint8], %var_2458: Tensor[(16, 6, 12), uint8]) -> (Tensor[(16, 6, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(1, 784), float64], Tensor[(256), int8]) {
  %372 = cast(%var_2458, dtype="bool") /* ty=Tensor[(16, 6, 12), bool] */;
  %373 = shape_of(%var_2457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_2457, dtype="bool") /* ty=Tensor[(16, 6, 12), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = cast(meta[relay.Constant][13] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %377 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 784), float64] */, dtype="float64") /* ty=Tensor[(1, 784), float64] */;
  %378 = cast(meta[relay.Constant][15] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %379 = reshape(%376, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
  %380 = reshape(%377, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %381 = reshape(%378, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %382 = @func_495(%379, %380, %381) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
  %383 = greater(%374, %375) /* ty=Tensor[(16, 6, 12), bool] */;
  %384 = %382.1;
  (%383, %384, meta[relay.Constant][13] /* ty=Tensor[(49), float64] */, meta[relay.Constant][14] /* ty=Tensor[(1, 784), float64] */, meta[relay.Constant][15] /* ty=Tensor[(256), int8] */)
}

def @func_3257(%var_3229: Tensor[(14, 16, 6), uint8], %var_3230: Tensor[(14, 16, 6), uint8], %var_3240: Tensor[(14, 16, 6), uint8]) -> (Tensor[(14, 16, 6), float64], Tensor[(14, 16, 6), float64], Tensor[(256), int8]) {
  %385 = cast(%var_3230, dtype="uint8") /* ty=Tensor[(14, 16, 6), uint8] */;
  %386 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_3229, dtype="uint8") /* ty=Tensor[(14, 16, 6), uint8] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %389 = bitwise_xor(%387, %388) /* ty=Tensor[(14, 16, 6), uint8] */;
  %390 = cast(%var_3240, dtype="float64") /* ty=Tensor[(14, 16, 6), float64] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="float64") /* ty=Tensor[(14, 16, 6), float64] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %394 = cast(%389, dtype="float64") /* ty=Tensor[(14, 16, 6), float64] */;
  %395 = @func_1935() /* ty=(Tensor[(256), int8], Tensor[(9, 15, 12), bool]) */;
  %396 = floor_divide(%392, %393) /* ty=Tensor[(14, 16, 6), float64] */;
  %397 = log10(%394) /* ty=Tensor[(14, 16, 6), float64] */;
  %398 = %395.0;
  (%396, %397, %398)
}

def @func_3424(%var_3423: Tensor[(13, 49), bool]) -> (Tensor[(784), float64], Tensor[(637, 1), int16], Tensor[(13, 49), float64], Tensor[(13, 49), float32]) {
  %413 = fn (%var_3409: Tensor[(13, 49), bool]) -> (Tensor[(784), float64], Tensor[(637, 1), int16], Tensor[(13, 49), float64], Tensor[(13, 49), float32]) {
    %399 = cast(meta[relay.Constant][16] /* ty=Tensor[(637, 1), int16] */, dtype="int16") /* ty=Tensor[(637, 1), int16] */;
    %400 = reshape(%399, newshape=[13, 49]) /* ty=Tensor[(13, 49), int16] */;
    %401 = @func_1468(%400) /* ty=(Tensor[(13, 49), bool],) */;
    %402 = %401.0;
    %403 = cast(%var_3409, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
    %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(2), int32] */;
    %405 = cast(%402, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %407 = cast(%402, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
    %408 = erf(%407) /* ty=Tensor[(13, 49), float64] */;
    %409 = cast(%408, dtype="float32") /* ty=Tensor[(13, 49), float32] */;
    %410 = @func_1277() /* ty=Tensor[(784), float64] */;
    %411 = floor_mod(%405, %406) /* ty=Tensor[(13, 49), float64] */;
    %412 = acosh(%409) /* ty=Tensor[(13, 49), float32] */;
    (%410, meta[relay.Constant][16] /* ty=Tensor[(637, 1), int16] */, %411, %412)
  };
  %413(%var_3423) /* ty=(Tensor[(784), float64], Tensor[(637, 1), int16], Tensor[(13, 49), float64], Tensor[(13, 49), float32]) */
}

def @func_2712(%var_2710: Tensor[(15, 6, 14), float32], %var_2711: Tensor[(256), int8]) -> (Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
  %422 = fn (%var_2688: Tensor[(15, 6, 14), float32], %var_2698: Tensor[(256), int8]) -> (Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
    %414 = cast(%var_2688, dtype="float32") /* ty=Tensor[(15, 6, 14), float32] */;
    %415 = cast(%var_2698, dtype="int8") /* ty=Tensor[(256), int8] */;
    %416 = cast(%var_2698, dtype="int8") /* ty=Tensor[(256), int8] */;
    %417 = reshape(%415, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %418 = reshape(%416, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %419 = @func_266(%417, %418) /* ty=(Tensor[(2, 16, 8), int8],) */;
    %420 = cos(%414) /* ty=Tensor[(15, 6, 14), float32] */;
    %421 = %419.0;
    (%420, %421, %var_2698)
  };
  %422(%var_2710, %var_2711) /* ty=(Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */
}

def @func_5136(%var_5134: Tensor[(13, 49), int16], %var_5135: Tensor[(13, 49), float64]) -> (Tensor[(13, 49), uint16], Tensor[(13, 49), bool], Tensor[(13, 49), uint64]) {
  @func_5132(%var_5134, %var_5135) /* ty=(Tensor[(13, 49), uint16], Tensor[(13, 49), bool], Tensor[(13, 49), uint64]) */
}

def @func_3900() -> (Tensor[(1, 49), float64], Tensor[(1, 49), float64]) {
  %429 = fn () -> (Tensor[(1, 49), float64], Tensor[(1, 49), float64]) {
    %423 = @func_2756() /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) */;
    %424 = %423.0;
    %425 = cast(%424, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
    %426 = reshape(%425, newshape=[49, 1]) /* ty=Tensor[(49, 1), float64] */;
    %427 = @func_1705(%426) /* ty=(Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
    %428 = %427.5;
    (%424, %428)
  };
  %429() /* ty=(Tensor[(1, 49), float64], Tensor[(1, 49), float64]) */
}

def @func_2382() -> (Tensor[(?, 49), int16], Tensor[(256), int8]) {
  %430 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
  %431 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %432 = %430.1;
  %433 = %431.3;
  (%432, %433)
}

def @func_4282() -> (Tensor[(?, 49), int16],) {
  %436 = fn () -> (Tensor[(?, 49), int16],) {
    %434 = @func_2804() /* ty=(Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %435 = %434.0;
    (%435,)
  };
  %436() /* ty=(Tensor[(?, 49), int16],) */
}

def @func_4320() -> Tensor[(784), float64] {
  @func_4318() /* ty=Tensor[(784), float64] */
}

def @func_1632() -> (Tensor[(784), float64], Tensor[(?, 49), int16]) {
  @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */
}

def @func_4019() -> (Tensor[(784), float64], Tensor[(8, 32), int8]) {
  %440 = fn () -> (Tensor[(784), float64], Tensor[(8, 32), int8]) {
    %437 = @func_3382() /* ty=(Tensor[(8, 32), int8], Tensor[(?, 49), bool]) */;
    %438 = @func_2717() /* ty=Tensor[(784), float64] */;
    %439 = %437.0;
    (%438, %439)
  };
  %440() /* ty=(Tensor[(784), float64], Tensor[(8, 32), int8]) */
}

def @func_3984() -> (Tensor[(1, 49), float64], Tensor[(784), float64]) {
  %441 = @func_3556() /* ty=(Tensor[(1, 49), float64],) */;
  %442 = %441.0;
  %443 = @func_2942() /* ty=Tensor[(784), float64] */;
  (%442, %443)
}

def @func_4456() -> Tensor[(9, 15, 12), float32] {
  @func_4454() /* ty=Tensor[(9, 15, 12), float32] */
}

def @func_4817(%var_4815: Tensor[(49), float64], %var_4816: Tensor[(49), float64]) -> (Tensor[(7, 16, 7), bool], Tensor[(15, 49), bool], Tensor[(49), uint32], Tensor[(8, 32), int8], Tensor[(49), bool], Tensor[(8, 32), int8], Tensor[(784), float64], Tensor[(49), float32]) {
  @func_4813(%var_4815, %var_4816) /* ty=(Tensor[(7, 16, 7), bool], Tensor[(15, 49), bool], Tensor[(49), uint32], Tensor[(8, 32), int8], Tensor[(49), bool], Tensor[(8, 32), int8], Tensor[(784), float64], Tensor[(49), float32]) */
}

def @func_2757() -> (Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) {
  %458 = fn () -> (Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) {
    %444 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
    %445 = %444.0;
    %446 = cast(%445, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
    %447 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
    %448 = cast(%447, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
    %449 = reshape(%446, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %450 = reshape(%448, newshape=[7, 7]) /* ty=Tensor[(7, 7), float64] */;
    %451 = @func_2438(%449, %450) /* ty=(Tensor[(2, 16, 8), bool], Tensor[(2, 16, 8), bool], Tensor[(2, 392), float64], Tensor[(7, 7), float64], Tensor[(8, 98), float64]) */;
    %452 = %451.0;
    %453 = cast(%452, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
    %454 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
    %455 = cast(%445, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %457 = logical_and(%455, %456) /* ty=Tensor[(2, 16, 8), bool] */;
    (%447, %457)
  };
  %458() /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), bool]) */
}

def @func_4968() -> Tensor[(2, 16, 8), float64] {
  @func_3483() /* ty=Tensor[(2, 16, 8), float64] */
}

def @func_1399(%var_1396: Tensor[(12, 1, 14), float64], %var_1397: Tensor[(12, 16, 14), float64], %var_1398: Tensor[(12, 15, 14), float64]) -> (Tensor[(12, 16, 14), float64], Tensor[(12, 15, 14), uint16]) {
  @func_1394(%var_1396, %var_1397, %var_1398) /* ty=(Tensor[(12, 16, 14), float64], Tensor[(12, 15, 14), uint16]) */
}

def @func_2944() -> Tensor[(784), float64] {
  @func_2942() /* ty=Tensor[(784), float64] */
}

def @func_1763() -> Tensor[(784), float32] {
  %462 = fn () -> Tensor[(784), float32] {
    %459 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
    %460 = %459.0;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(784), float32] */;
    log10(%461) /* ty=Tensor[(784), float32] */
  };
  %462() /* ty=Tensor[(784), float32] */
}

def @func_3089() -> (Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) {
  %463 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %464 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 35), int16] */, dtype="int16") /* ty=Tensor[(7, 35), int16] */;
  %465 = reshape(%464, newshape=[5, 49]) /* ty=Tensor[(5, 49), int16] */;
  %466 = @func_3004(%465) /* ty=(Tensor[(5, 49), bool],) */;
  %467 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 35), int16] */, dtype="float32") /* ty=Tensor[(7, 35), float32] */;
  %468 = acos(%467) /* ty=Tensor[(7, 35), float32] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %470 = @func_1342() /* ty=(Tensor[(?, 49), int16],) */;
  %471 = cast(%468, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %472 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 32), int8] */, dtype="int8") /* ty=Tensor[(8, 32), int8] */;
  %473 = reshape(%472, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %474 = @func_2285(%473) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %475 = %463.1;
  %476 = %466.0;
  %477 = asin(%469) /* ty=Tensor[(7, 35), float64] */;
  %478 = %470.0;
  %479 = atanh(%471) /* ty=Tensor[(7, 35), float64] */;
  %480 = %474.0;
  (%475, %476, %477, %478, %479, %480, meta[relay.Constant][18] /* ty=Tensor[(8, 32), int8] */)
}

def @func_2804() -> (Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
  %481 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %482 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %483 = reshape(%481, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %484 = reshape(%482, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %485 = @func_266(%483, %484) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %486 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  %487 = %485.0;
  (%486, %487, meta[relay.Constant][19] /* ty=Tensor[(256), int8] */)
}

def @func_3630() -> (Tensor[(1, 49), float64], Tensor[(784), float32]) {
  @func_3628() /* ty=(Tensor[(1, 49), float64], Tensor[(784), float32]) */
}

def @func_5581(%var_5580: Tensor[(15, 49), bool]) -> Tensor[(15, 49), float32] {
  %494 = fn (%var_5572: Tensor[(15, 49), bool]) -> Tensor[(15, 49), float32] {
    %488 = @func_2816() /* ty=(Tensor[(15, 49), bool],) */;
    %489 = %488.0;
    %490 = cast(%var_5572, dtype="float32") /* ty=Tensor[(15, 49), float32] */;
    %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(2), int32] */;
    %492 = cast(%489, dtype="float32") /* ty=Tensor[(15, 49), float32] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    divide(%492, %493) /* ty=Tensor[(15, 49), float32] */
  };
  %494(%var_5580) /* ty=Tensor[(15, 49), float32] */
}

def @func_4970() -> Tensor[(2, 16, 8), float64] {
  @func_4968() /* ty=Tensor[(2, 16, 8), float64] */
}

def @func_3685() -> Tensor[(11, 10, 14), float32] {
  %495 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 14), float32] */;
  acosh(%495) /* ty=Tensor[(11, 10, 14), float32] */
}

def @func_2288(%var_2286: Tensor[(2, 16, 8), int8]) -> (Tensor[(2, 16, 8), int64],) {
  @func_2285(%var_2286) /* ty=(Tensor[(2, 16, 8), int64],) */
}

def @func_4558(%var_4554: Tensor[(1260), float32], %var_4555: Tensor[(256), int8], %var_4556: Tensor[(49), float64], %var_4557: Tensor[(49), float64]) -> (Tensor[(784), float64], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(256), int8], Tensor[(784), float32], Tensor[(2, 16, 8), float64], Tensor[(784), float64], Tensor[(49), int32], Tensor[(1, 49), float64]) {
  @func_4552(%var_4554, %var_4555, %var_4556, %var_4557) /* ty=(Tensor[(784), float64], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(256), int8], Tensor[(784), float32], Tensor[(2, 16, 8), float64], Tensor[(784), float64], Tensor[(49), int32], Tensor[(1, 49), float64]) */
}

def @func_4318() -> Tensor[(784), float64] {
  @func_3652() /* ty=Tensor[(784), float64] */
}

def @func_5059(%var_4987: Tensor[(3, 49), int16], %var_4999: Tensor[(784, 1), float64], %var_5042: Tensor[(256), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(3, 49), float32], Tensor[(1, 49), float64], Tensor[(784, 49), bool], Tensor[(?, 49), float32], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8], Tensor[(256), int8]) {
  %496 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %497 = @func_3306() /* ty=(Tensor[(?, 49), int16],) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %500 = cast(%var_4987, dtype="float32") /* ty=Tensor[(3, 49), float32] */;
  %501 = cast(%var_4999, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
  %502 = reshape(%501, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %503 = @func_1229(%502) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) */;
  %504 = cast(%var_4999, dtype="bool") /* ty=Tensor[(784, 1), bool] */;
  %505 = cast(%498, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %506 = cast(%498, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
  %507 = sinh(%506) /* ty=Tensor[(?, 49), float32] */;
  %508 = cast(%507, dtype="float64") /* ty=Tensor[(?, 49), float64] */;
  %509 = cast(%var_4999, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
  %510 = reshape(%508, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %511 = reshape(%509, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %512 = @func_965(%510, %511) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
  %513 = cast(%var_5042, dtype="int8") /* ty=Tensor[(256), int8] */;
  %514 = reshape(%513, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %515 = @func_2285(%514) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %516 = @func_2804() /* ty=(Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %517 = %496.1;
  %518 = floor_mod(%499, %500) /* ty=Tensor[(3, 49), float32] */;
  %519 = %503.4;
  %520 = equal(%504, %505) /* ty=Tensor[(784, 49), bool] */;
  %521 = %512.3;
  %522 = %515.0;
  %523 = %516.2;
  (%517, %518, %519, %520, %507, %521, %522, %var_5042, %523)
}

def @func_5362(%var_5358: Tensor[(8, 49), int16], %var_5359: Tensor[(8, 49), float32], %var_5360: Tensor[(8, 49), bool], %var_5361: Tensor[(637), int16]) -> (Tensor[(784), float64], Tensor[(8, 49), float32], Tensor[(8, 49), bool], Tensor[(13, 49), bool], Tensor[(637), int16]) {
  %549 = fn (%var_5310: Tensor[(8, 49), int16], %var_5336: Tensor[(8, 49), float32], %var_5345: Tensor[(8, 49), bool], %var_5353: Tensor[(637), int16]) -> (Tensor[(784), float64], Tensor[(8, 49), float32], Tensor[(8, 49), bool], Tensor[(13, 49), bool], Tensor[(637), int16]) {
    %524 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
    %525 = cast(%var_5310, dtype="float32") /* ty=Tensor[(8, 49), float32] */;
    %526 = cosh(%525) /* ty=Tensor[(8, 49), float32] */;
    %527 = cast(%var_5336, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
    %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(2), int32] */;
    %529 = cast(%526, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %531 = less_equal(%529, %530) /* ty=Tensor[(8, 49), bool] */;
    %532 = cast(%531, dtype="float32") /* ty=Tensor[(8, 49), float32] */;
    %533 = @func_3306() /* ty=(Tensor[(?, 49), int16],) */;
    %534 = %533.0;
    %535 = cast(%534, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
    %536 = cast(%var_5310, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
    %537 = logical_or(%535, %536) /* ty=Tensor[(8, 49), bool] */;
    %538 = cast(%var_5345, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
    %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(2), int32] */;
    %540 = cast(%537, dtype="bool") /* ty=Tensor[(8, 49), bool] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %542 = cast(%var_5353, dtype="int16") /* ty=Tensor[(637), int16] */;
    %543 = reshape(%542, newshape=[13, 49]) /* ty=Tensor[(13, 49), int16] */;
    %544 = @func_1468(%543) /* ty=(Tensor[(13, 49), bool],) */;
    %545 = %524.0;
    %546 = exp(%532) /* ty=Tensor[(8, 49), float32] */;
    %547 = greater_equal(%540, %541) /* ty=Tensor[(8, 49), bool] */;
    %548 = %544.0;
    (%545, %546, %547, %548, %var_5353)
  };
  %549(%var_5358, %var_5359, %var_5360, %var_5361) /* ty=(Tensor[(784), float64], Tensor[(8, 49), float32], Tensor[(8, 49), bool], Tensor[(13, 49), bool], Tensor[(637), int16]) */
}

def @func_3006(%var_3005: Tensor[(5, 49), int16]) -> (Tensor[(5, 49), bool],) {
  %554 = fn (%var_2998: Tensor[(5, 49), int16]) -> (Tensor[(5, 49), bool],) {
    %550 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
    %551 = cast(%550, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
    %552 = cast(%var_2998, dtype="bool") /* ty=Tensor[(5, 49), bool] */;
    %553 = logical_or(%551, %552) /* ty=Tensor[(5, 49), bool] */;
    (%553,)
  };
  %554(%var_3005) /* ty=(Tensor[(5, 49), bool],) */
}

def @func_4108() -> Tensor[(2, 16, 8), int64] {
  %556 = fn () -> Tensor[(2, 16, 8), int64] {
    %555 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
    %555.5
  };
  %556() /* ty=Tensor[(2, 16, 8), int64] */
}

def @func_3576(%var_3574: Tensor[(256), int8]) -> (Tensor[(1, 49), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) {
  @func_3573(%var_3574) /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) */
}

def @func_3091() -> (Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) {
  @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */
}

def @func_2438(%var_2401: Tensor[(2, 16, 8), int8], %var_2428: Tensor[(7, 7), float64]) -> (Tensor[(2, 16, 8), bool], Tensor[(2, 16, 8), bool], Tensor[(2, 392), float64], Tensor[(7, 7), float64], Tensor[(8, 98), float64]) {
  %557 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %558 = %557.0;
  %559 = cast(%var_2401, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %563 = cast(%var_2401, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %564 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%558, dtype="bool") /* ty=Tensor[(2, 16, 8), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %567 = cast(%var_2428, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
  %568 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 98), float64] */, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
  %569 = reshape(%567, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %570 = reshape(%568, newshape=[2, 392]) /* ty=Tensor[(2, 392), float64] */;
  %571 = @func_752(%569, %570) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */;
  %572 = equal(%561, %562) /* ty=Tensor[(2, 16, 8), bool] */;
  %573 = less_equal(%565, %566) /* ty=Tensor[(2, 16, 8), bool] */;
  %574 = %571.3;
  (%572, %573, %574, %var_2428, meta[relay.Constant][21] /* ty=Tensor[(8, 98), float64] */)
}

def @func_4454() -> Tensor[(9, 15, 12), float32] {
  %575 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
  %576 = %575.0;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  rsqrt(%577) /* ty=Tensor[(9, 15, 12), float32] */
}

def @func_5302() -> (Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) {
  %578 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
  %579 = cast(meta[relay.Constant][22] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %580 = reshape(%579, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %581 = @func_2285(%580) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %582 = %578.0;
  %583 = %581.0;
  (%582, %583, meta[relay.Constant][22] /* ty=Tensor[(256), int8] */)
}

def @func_2285(%var_2265: Tensor[(2, 16, 8), int8]) -> (Tensor[(2, 16, 8), int64],) {
  %584 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %585 = %584.0;
  %586 = cast(%var_2265, dtype="int64") /* ty=Tensor[(2, 16, 8), int64] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="int64") /* ty=Tensor[(2, 16, 8), int64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %590 = add(%588, %589) /* ty=Tensor[(2, 16, 8), int64] */;
  (%590,)
}

def @func_3557() -> (Tensor[(1, 49), float64],) {
  %594 = fn () -> (Tensor[(1, 49), float64],) {
    %591 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
    %592 = cast(%591, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
    %593 = acos(%592) /* ty=Tensor[(1, 49), float64] */;
    (%593,)
  };
  %594() /* ty=(Tensor[(1, 49), float64],) */
}

def @func_5248() -> (Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(392, 2), float64]) {
  %595 = @func_3556() /* ty=(Tensor[(1, 49), float64],) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %598 = cast(meta[relay.Constant][23] /* ty=Tensor[(392, 2), float64] */, dtype="float64") /* ty=Tensor[(392, 2), float64] */;
  %599 = reshape(%597, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
  %600 = reshape(%598, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %601 = @func_1016(%599, %600) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
  %602 = %601.2;
  (%596, %602, meta[relay.Constant][23] /* ty=Tensor[(392, 2), float64] */)
}

def @func_5304() -> (Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) {
  @func_5302() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) */
}

def @func_2231(%var_2230: Tensor[(784), float64]) -> (Tensor[(6, 2, 6), float32], Tensor[(49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(?, 49), float64]) {
  %613 = fn (%var_2211: Tensor[(784), float64]) -> (Tensor[(6, 2, 6), float32], Tensor[(49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(?, 49), float64]) {
    %603 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
    %604 = cast(%var_2211, dtype="float64") /* ty=Tensor[(784), float64] */;
    %605 = reshape(%604, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %606 = @func_1229(%605) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(49), float64], Tensor[(784), float64], Tensor[(1, 49), float64]) */;
    %607 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
    %608 = @func_1833() /* ty=(Tensor[(?, 49), float64], Tensor[(?, 49), float32]) */;
    %609 = cos(%603) /* ty=Tensor[(6, 2, 6), float32] */;
    %610 = %606.2;
    %611 = %607.0;
    %612 = %608.0;
    (%609, %610, %var_2211, %611, %612)
  };
  %613(%var_2230) /* ty=(Tensor[(6, 2, 6), float32], Tensor[(49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(?, 49), float64]) */
}

def @func_3262(%var_3259: Tensor[(14, 16, 6), uint8], %var_3260: Tensor[(14, 16, 6), uint8], %var_3261: Tensor[(14, 16, 6), uint8]) -> (Tensor[(14, 16, 6), float64], Tensor[(14, 16, 6), float64], Tensor[(256), int8]) {
  @func_3257(%var_3259, %var_3260, %var_3261) /* ty=(Tensor[(14, 16, 6), float64], Tensor[(14, 16, 6), float64], Tensor[(256), int8]) */
}

def @func_495(%var_402: Tensor[(7, 1, 7), float64], %var_403: Tensor[(7, 16, 7), float64], %var_433: Tensor[(256), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) {
  %614 = cast(%var_402, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
  %615 = cast(%var_403, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %616 = cast(%var_433, dtype="int8") /* ty=Tensor[(256), int8] */;
  %617 = cast(%var_433, dtype="int8") /* ty=Tensor[(256), int8] */;
  %618 = reshape(%616, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %619 = reshape(%617, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %620 = @func_266(%618, %619) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %621 = cast(%var_402, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
  %622 = log2(%621) /* ty=Tensor[(7, 1, 7), float64] */;
  %623 = cast(%var_402, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
  %624 = cast(%var_403, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %625 = floor_mod(%623, %624) /* ty=Tensor[(7, 16, 7), float32] */;
  %626 = cast(%622, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
  %627 = cast(%625, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %628 = cast(%var_433, dtype="int8") /* ty=Tensor[(256), int8] */;
  %629 = %620.0;
  %630 = cast(%629, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %631 = reshape(%628, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %632 = reshape(%630, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %633 = @func_266(%631, %632) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %634 = maximum(%614, %615) /* ty=Tensor[(7, 16, 7), float64] */;
  %635 = power(%626, %627) /* ty=Tensor[(7, 16, 7), float64] */;
  %636 = %633.0;
  (%634, %629, %var_433, %635, %636)
}

def @func_4552(%var_4468: Tensor[(1260), float32], %var_4469: Tensor[(256), int8], %var_4512: Tensor[(49), float64], %var_4532: Tensor[(49), float64]) -> (Tensor[(784), float64], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(256), int8], Tensor[(784), float32], Tensor[(2, 16, 8), float64], Tensor[(784), float64], Tensor[(49), int32], Tensor[(1, 49), float64]) {
  %637 = cast(%var_4468, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %638 = cast(%var_4469, dtype="int8") /* ty=Tensor[(256), int8] */;
  %639 = reshape(%637, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), float32] */;
  %640 = reshape(%638, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %641 = @func_2709(%639, %640) /* ty=(Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %642 = @func_3628() /* ty=(Tensor[(1, 49), float64], Tensor[(784), float32]) */;
  %643 = cast(%var_4512, dtype="float64") /* ty=Tensor[(49), float64] */;
  %644 = %642.1;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(784), float64] */;
  %646 = reshape(%643, newshape=[49]) /* ty=Tensor[(49), float64] */;
  %647 = reshape(%645, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %648 = @func_965(%646, %647) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
  %649 = cast(%var_4532, dtype="int32") /* ty=Tensor[(49), int32] */;
  %650 = shape_of(%var_4512, dtype="int32") /* ty=Tensor[(1), int32] */;
  %651 = cast(%var_4512, dtype="int32") /* ty=Tensor[(49), int32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?), int32] */;
  %653 = cast(%var_4469, dtype="int8") /* ty=Tensor[(256), int8] */;
  %654 = reshape(%653, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %655 = @func_3573(%654) /* ty=(Tensor[(1, 49), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) */;
  %656 = @func_2833() /* ty=Tensor[(784), float64] */;
  %657 = %641.2;
  %658 = %648.4;
  %659 = @func_2833() /* ty=Tensor[(784), float64] */;
  %660 = left_shift(%651, %652) /* ty=Tensor[(49), int32] */;
  %661 = %655.0;
  (%656, %657, %var_4468, %var_4469, %644, %658, %659, %660, %661)
}

def @func_1707(%var_1706: Tensor[(49, 1), float64]) -> (Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) {
  %680 = fn (%var_1690: Tensor[(49, 1), float64]) -> (Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) {
    %662 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
    %663 = cast(%var_1690, dtype="float64") /* ty=Tensor[(49, 1), float64] */;
    %664 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 98), float64] */, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
    %665 = reshape(%663, newshape=[49]) /* ty=Tensor[(49), float64] */;
    %666 = reshape(%664, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %667 = @func_965(%665, %666) /* ty=(Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(784), float64], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), float64], Tensor[(7, 16, 7), float64]) */;
    %668 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 98), float64] */, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
    %669 = cast(%var_1690, dtype="float64") /* ty=Tensor[(49, 1), float64] */;
    %670 = atan(%668) /* ty=Tensor[(8, 98), float64] */;
    %671 = cast(%670, dtype="float64") /* ty=Tensor[(8, 98), float64] */;
    %672 = reshape(%669, newshape=[1, 49]) /* ty=Tensor[(1, 49), float64] */;
    %673 = reshape(%671, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %674 = @func_1016(%672, %673) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(2, 16, 8), float32]) */;
    %675 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
    %676 = %662.1;
    %677 = %667.3;
    %678 = %674.0;
    %679 = %675.1;
    (%676, %677, %var_1690, %670, %678, %679)
  };
  %680(%var_1706) /* ty=(Tensor[(2, 16, 8), float32], Tensor[(7, 16, 7), float64], Tensor[(49, 1), float64], Tensor[(8, 98), float64], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */
}

def @func_1195() -> Tensor[(1, 49), float64] {
  %682 = fn () -> Tensor[(1, 49), float64] {
    %681 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
    %681.1
  };
  %682() /* ty=Tensor[(1, 49), float64] */
}

def @func_755(%var_753: Tensor[(49), float64], %var_754: Tensor[(2, 392), float64]) -> (Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) {
  %699 = fn (%var_739: Tensor[(49), float64], %var_740: Tensor[(2, 392), float64]) -> (Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) {
    %683 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 14, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
    %684 = cast(%var_739, dtype="float64") /* ty=Tensor[(49), float64] */;
    %685 = cast(%var_740, dtype="float64") /* ty=Tensor[(2, 392), float64] */;
    %686 = cast(meta[relay.Constant][27] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
    %687 = reshape(%684, newshape=[7, 1, 7]) /* ty=Tensor[(7, 1, 7), float64] */;
    %688 = reshape(%685, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
    %689 = reshape(%686, newshape=[256]) /* ty=Tensor[(256), int8] */;
    %690 = @func_495(%687, %688, %689) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(7, 16, 7), float64], Tensor[(2, 16, 8), int8]) */;
    %691 = cast(meta[relay.Constant][27] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
    %692 = %690.1;
    %693 = cast(%692, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
    %694 = reshape(%691, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %695 = reshape(%693, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
    %696 = @func_266(%694, %695) /* ty=(Tensor[(2, 16, 8), int8],) */;
    %697 = atan(%683) /* ty=Tensor[(4, 14, 1), float64] */;
    %698 = %696.0;
    (%697, %692, %var_739, %var_740, meta[relay.Constant][27] /* ty=Tensor[(256), int8] */, %698)
  };
  %699(%var_753, %var_754) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(2, 392), float64], Tensor[(256), int8], Tensor[(2, 16, 8), int8]) */
}

def @func_2486(%var_2484: Tensor[(16, 6, 12), uint8], %var_2485: Tensor[(16, 6, 12), uint8]) -> (Tensor[(16, 6, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(1, 784), float64], Tensor[(256), int8]) {
  @func_2482(%var_2484, %var_2485) /* ty=(Tensor[(16, 6, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(49), float64], Tensor[(1, 784), float64], Tensor[(256), int8]) */
}

def @func_1809(%var_1807: Tensor[(2, 14, 6), float64], %var_1808: Tensor[(784), float64]) -> (Tensor[(2, 14, 6), float64], Tensor[(9, 15, 12), int32], Tensor[(1620), bool], Tensor[(784), float64]) {
  @func_1805(%var_1807, %var_1808) /* ty=(Tensor[(2, 14, 6), float64], Tensor[(9, 15, 12), int32], Tensor[(1620), bool], Tensor[(784), float64]) */
}

def @func_2806() -> (Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) {
  @func_2804() /* ty=(Tensor[(?, 49), int16], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */
}

def @func_2718() -> Tensor[(784), float64] {
  %701 = fn () -> Tensor[(784), float64] {
    %700 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
    %700.2
  };
  %701() /* ty=Tensor[(784), float64] */
}

def @func_2816() -> (Tensor[(15, 49), bool],) {
  %702 = @func_1833() /* ty=(Tensor[(?, 49), float64], Tensor[(?, 49), float32]) */;
  %703 = %702.1;
  %704 = cast(%703, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %705 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 49), float32] */, dtype="bool") /* ty=Tensor[(15, 49), bool] */;
  %706 = equal(%704, %705) /* ty=Tensor[(15, 49), bool] */;
  (%706,)
}

def @func_1448() -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) {
  %713 = fn () -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) {
    %707 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %708 = @func_810() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
    %709 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
    %710 = %707.0;
    %711 = %708.1;
    %712 = %709.1;
    (%710, %711, %712)
  };
  %713() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */
}

def @func_3573(%var_3569: Tensor[(256), int8]) -> (Tensor[(1, 49), float64], Tensor[(2, 16, 8), int64], Tensor[(256), int8]) {
  %714 = cast(%var_3569, dtype="int8") /* ty=Tensor[(256), int8] */;
  %715 = reshape(%714, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %716 = @func_2285(%715) /* ty=(Tensor[(2, 16, 8), int64],) */;
  %717 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %718 = %716.0;
  (%717, %718, %var_3569)
}

def @func_1835() -> (Tensor[(?, 49), float64], Tensor[(?, 49), float32]) {
  @func_1833() /* ty=(Tensor[(?, 49), float64], Tensor[(?, 49), float32]) */
}

def @func_3687() -> Tensor[(11, 10, 14), float32] {
  @func_3685() /* ty=Tensor[(11, 10, 14), float32] */
}

def @func_3928() -> (Tensor[(9, 15, 12), bool],) {
  %719 = @func_1447() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64]) */;
  %720 = %719.0;
  (%720,)
}

def @func_3528(%var_3526: Tensor[(2, 16, 8), bool]) -> (Tensor[(2, 16, 8), float32],) {
  @func_3525(%var_3526) /* ty=(Tensor[(2, 16, 8), float32],) */
}

def @func_3986() -> (Tensor[(1, 49), float64], Tensor[(784), float64]) {
  @func_3984() /* ty=(Tensor[(1, 49), float64], Tensor[(784), float64]) */
}

def @func_5190(%var_5188: Tensor[(2, 6, 8), float64]) -> (Tensor[(2, 6, 8), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(7, 35), float64]) {
  @func_5187(%var_5188) /* ty=(Tensor[(2, 6, 8), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(7, 35), float64]) */
}

def @func_3652() -> Tensor[(784), float64] {
  %721 = @func_1535() /* ty=(Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), int8]) */;
  %721.0
}

def @func_3766(%var_3763: Tensor[(12, 49), int16], %var_3764: Tensor[(12, 49), float32], %var_3765: Tensor[(12, 49), bool]) -> (Tensor[(12, 49), bool], Tensor[(12, 49), uint32], Tensor[(?, 49), int16], Tensor[(12, 49), float64], Tensor[(12, 49), float32], Tensor[(?, 49), int16]) {
  %752 = fn (%var_3716: Tensor[(12, 49), int16], %var_3722: Tensor[(12, 49), float32], %var_3748: Tensor[(12, 49), bool]) -> (Tensor[(12, 49), bool], Tensor[(12, 49), uint32], Tensor[(?, 49), int16], Tensor[(12, 49), float64], Tensor[(12, 49), float32], Tensor[(?, 49), int16]) {
    %722 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
    %723 = cast(%722, dtype="float32") /* ty=Tensor[(?, 49), float32] */;
    %724 = cast(%var_3716, dtype="float32") /* ty=Tensor[(12, 49), float32] */;
    %725 = divide(%723, %724) /* ty=Tensor[(12, 49), float32] */;
    %726 = cast(%var_3722, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
    %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(2), int32] */;
    %728 = cast(%725, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %730 = cast(%var_3722, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
    %731 = shape_of(%var_3716, dtype="int32") /* ty=Tensor[(2), int32] */;
    %732 = cast(%var_3716, dtype="bool") /* ty=Tensor[(12, 49), bool] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %734 = logical_or(%732, %733) /* ty=Tensor[(12, 49), bool] */;
    %735 = cast(%734, dtype="uint32") /* ty=Tensor[(12, 49), uint32] */;
    %736 = shape_of(%725, dtype="int32") /* ty=Tensor[(2), int32] */;
    %737 = cast(%725, dtype="uint32") /* ty=Tensor[(12, 49), uint32] */;
    %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %739 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
    %740 = cast(%734, dtype="float64") /* ty=Tensor[(12, 49), float64] */;
    %741 = cast(%var_3748, dtype="float32") /* ty=Tensor[(12, 49), float32] */;
    %742 = shape_of(%734, dtype="int32") /* ty=Tensor[(2), int32] */;
    %743 = cast(%734, dtype="float32") /* ty=Tensor[(12, 49), float32] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %745 = @func_2382() /* ty=(Tensor[(?, 49), int16], Tensor[(256), int8]) */;
    %746 = logical_and(%728, %729) /* ty=Tensor[(12, 49), bool] */;
    %747 = right_shift(%737, %738) /* ty=Tensor[(12, 49), uint32] */;
    %748 = %739.3;
    %749 = asin(%740) /* ty=Tensor[(12, 49), float64] */;
    %750 = floor_divide(%743, %744) /* ty=Tensor[(12, 49), float32] */;
    %751 = %745.0;
    (%746, %747, %748, %749, %750, %751)
  };
  %752(%var_3763, %var_3764, %var_3765) /* ty=(Tensor[(12, 49), bool], Tensor[(12, 49), uint32], Tensor[(?, 49), int16], Tensor[(12, 49), float64], Tensor[(12, 49), float32], Tensor[(?, 49), int16]) */
}

def @func_5132(%var_5084: Tensor[(13, 49), int16], %var_5101: Tensor[(13, 49), float64]) -> (Tensor[(13, 49), uint16], Tensor[(13, 49), bool], Tensor[(13, 49), uint64]) {
  %753 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
  %754 = cast(%753, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
  %755 = cast(%var_5084, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
  %756 = less(%754, %755) /* ty=Tensor[(13, 49), bool] */;
  %757 = cast(%var_5084, dtype="float64") /* ty=Tensor[(13, 49), float64] */;
  %758 = atan(%757) /* ty=Tensor[(13, 49), float64] */;
  %759 = cast(%758, dtype="uint16") /* ty=Tensor[(13, 49), uint16] */;
  %760 = shape_of(%756, dtype="int32") /* ty=Tensor[(2), int32] */;
  %761 = cast(%756, dtype="uint16") /* ty=Tensor[(13, 49), uint16] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %763 = cast(%var_5101, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
  %764 = shape_of(%758, dtype="int32") /* ty=Tensor[(2), int32] */;
  %765 = cast(%758, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %767 = cast(%756, dtype="uint64") /* ty=Tensor[(13, 49), uint64] */;
  %768 = shape_of(%var_5084, dtype="int32") /* ty=Tensor[(2), int32] */;
  %769 = cast(%var_5084, dtype="uint64") /* ty=Tensor[(13, 49), uint64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %771 = subtract(%761, %762) /* ty=Tensor[(13, 49), uint16] */;
  %772 = logical_or(%765, %766) /* ty=Tensor[(13, 49), bool] */;
  %773 = logical_xor(%769, %770) /* ty=Tensor[(13, 49), uint64] */;
  (%771, %772, %773)
}

def @func_5443() -> Tensor[(784), float64] {
  %774 = @func_4318() /* ty=Tensor[(784), float64] */;
  %775 = cast(%774, dtype="float64") /* ty=Tensor[(784), float64] */;
  asinh(%775) /* ty=Tensor[(784), float64] */
}

def @func_5445() -> Tensor[(784), float64] {
  @func_5443() /* ty=Tensor[(784), float64] */
}

def @func_4075(%var_4031: Tensor[(6, 4, 9), float64], %var_4035: Tensor[(637), bool], %var_4067: Tensor[(637), bool]) -> (Tensor[(784), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 256), int8], Tensor[(6, 4, 9), float32], Tensor[(1, 3, 12), float64], Tensor[(36), float32], Tensor[(9, 15, 12), bool], Tensor[(6, 4, 9), float64], Tensor[(637), float32], Tensor[(784), float64]) {
  %776 = cast(%var_4035, dtype="bool") /* ty=Tensor[(637), bool] */;
  %777 = reshape(%776, newshape=[13, 49]) /* ty=Tensor[(13, 49), bool] */;
  %778 = @func_3422(%777) /* ty=(Tensor[(784), float64], Tensor[(637, 1), int16], Tensor[(13, 49), float64], Tensor[(13, 49), float32]) */;
  %779 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 256), int8] */, dtype="int8") /* ty=Tensor[(1, 256), int8] */;
  %780 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 256), int8] */, dtype="int8") /* ty=Tensor[(1, 256), int8] */;
  %781 = reshape(%779, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %782 = reshape(%780, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), int8] */;
  %783 = @func_266(%781, %782) /* ty=(Tensor[(2, 16, 8), int8],) */;
  %784 = cast(%var_4031, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
  %785 = cosh(%784) /* ty=Tensor[(6, 4, 9), float64] */;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
  %787 = cast(meta[relay.Constant][30] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %788 = reshape(%787, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), float32] */;
  %789 = @func_3885(%788) /* ty=(Tensor[(1, 3, 12), float32], Tensor[(1, 3, 12), float64], Tensor[(2, 16, 8), int8]) */;
  %790 = @func_3928() /* ty=(Tensor[(9, 15, 12), bool],) */;
  %791 = cast(%785, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
  %792 = cast(%var_4067, dtype="float32") /* ty=Tensor[(637), float32] */;
  %793 = shape_of(%var_4035, dtype="int32") /* ty=Tensor[(1), int32] */;
  %794 = cast(%var_4035, dtype="float32") /* ty=Tensor[(637), float32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?), float32] */;
  %796 = %778.0;
  %797 = %783.0;
  %798 = sigmoid(%786) /* ty=Tensor[(6, 4, 9), float32] */;
  %799 = %789.1;
  %800 = %790.0;
  %801 = rsqrt(%791) /* ty=Tensor[(6, 4, 9), float64] */;
  %802 = power(%794, %795) /* ty=Tensor[(637), float32] */;
  %803 = @func_2942() /* ty=Tensor[(784), float64] */;
  (%796, %797, meta[relay.Constant][29] /* ty=Tensor[(1, 256), int8] */, %798, %799, meta[relay.Constant][30] /* ty=Tensor[(36), float32] */, %800, %801, %802, %803)
}

def @func_1470(%var_1469: Tensor[(13, 49), int16]) -> (Tensor[(13, 49), bool],) {
  %808 = fn (%var_1461: Tensor[(13, 49), int16]) -> (Tensor[(13, 49), bool],) {
    %804 = @func_1297() /* ty=Tensor[(?, 49), int16] */;
    %805 = cast(%804, dtype="bool") /* ty=Tensor[(?, 49), bool] */;
    %806 = cast(%var_1461, dtype="bool") /* ty=Tensor[(13, 49), bool] */;
    %807 = not_equal(%805, %806) /* ty=Tensor[(13, 49), bool] */;
    (%807,)
  };
  %808(%var_1469) /* ty=(Tensor[(13, 49), bool],) */
}

def @func_5187(%var_5145: Tensor[(2, 6, 8), float64]) -> (Tensor[(2, 6, 8), float64], Tensor[(2, 16, 8), int8], Tensor[(256), int8], Tensor[(1260), float32], Tensor[(7, 35), float64]) {
  %809 = cast(%var_5145, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %810 = @func_1867() /* ty=(Tensor[(2, 16, 8), int8],) */;
  %811 = cast(meta[relay.Constant][31] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %812 = %810.0;
  %813 = cast(%812, dtype="int8") /* ty=Tensor[(2, 16, 8), int8] */;
  %814 = reshape(%811, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), float32] */;
  %815 = reshape(%813, newshape=[256]) /* ty=Tensor[(256), int8] */;
  %816 = @func_2709(%814, %815) /* ty=(Tensor[(15, 6, 14), float32], Tensor[(2, 16, 8), int8], Tensor[(256), int8]) */;
  %817 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
  %818 = sinh(%809) /* ty=Tensor[(2, 6, 8), float64] */;
  %819 = %816.2;
  %820 = %817.4;
  (%818, %812, %819, meta[relay.Constant][31] /* ty=Tensor[(1260), float32] */, %820)
}

def @func_1278() -> Tensor[(784), float64] {
  %822 = fn () -> Tensor[(784), float64] {
    %821 = @func_1179() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(784), uint16]) */;
    %821.3
  };
  %822() /* ty=Tensor[(784), float64] */
}

def @func_5563(%var_5562: Tensor[(256), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(256), int8], Tensor[(2, 16, 8), int64]) {
  %838 = fn (%var_5540: Tensor[(256), int8]) -> (Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(256), int8], Tensor[(2, 16, 8), int64]) {
    %823 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
    %824 = @func_1935() /* ty=(Tensor[(256), int8], Tensor[(9, 15, 12), bool]) */;
    %825 = @func_2188() /* ty=Tensor[(784), float64] */;
    %826 = cast(%825, dtype="float64") /* ty=Tensor[(784), float64] */;
    %827 = %823.0;
    %828 = cast(%827, dtype="bool") /* ty=Tensor[(9, 15, 12), bool] */;
    %829 = cast(%var_5540, dtype="int8") /* ty=Tensor[(256), int8] */;
    %830 = reshape(%828, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), bool] */;
    %831 = reshape(%829, newshape=[8, 32]) /* ty=Tensor[(8, 32), int8] */;
    %832 = @func_4243(%830, %831) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(8, 32), int32], Tensor[(1, 49), float64], Tensor[(2, 16, 8), int8], Tensor[(1, 784), float64], Tensor[(2, 16, 8), float32], Tensor[(5, 49), bool], Tensor[(784), float32], Tensor[(15, 49), bool], Tensor[(245), float64], Tensor[(?, 49), int16]) */;
    %833 = @func_3089() /* ty=(Tensor[(9, 15, 12), bool], Tensor[(5, 49), bool], Tensor[(7, 35), float64], Tensor[(?, 49), int16], Tensor[(7, 35), float64], Tensor[(2, 16, 8), int64], Tensor[(8, 32), int8]) */;
    %834 = %824.1;
    %835 = exp(%826) /* ty=Tensor[(784), float64] */;
    %836 = %832.5;
    %837 = %833.5;
    (%827, %834, %835, %836, %var_5540, %837)
  };
  %838(%var_5562) /* ty=(Tensor[(9, 15, 12), bool], Tensor[(9, 15, 12), bool], Tensor[(784), float64], Tensor[(2, 16, 8), float32], Tensor[(256), int8], Tensor[(2, 16, 8), int64]) */
}

def @func_3628() -> (Tensor[(1, 49), float64], Tensor[(784), float32]) {
  %839 = @func_1630() /* ty=(Tensor[(784), float64], Tensor[(?, 49), int16]) */;
  %840 = %839.0;
  %841 = cast(%840, dtype="float32") /* ty=Tensor[(784), float32] */;
  %842 = @func_1194() /* ty=Tensor[(1, 49), float64] */;
  %843 = cosh(%841) /* ty=Tensor[(784), float32] */;
  (%842, %843)
}

def @func_5250() -> (Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(392, 2), float64]) {
  @func_5248() /* ty=(Tensor[(1, 49), float64], Tensor[(784), float64], Tensor[(392, 2), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen291/build/output.py", line 1900, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:04:15] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

