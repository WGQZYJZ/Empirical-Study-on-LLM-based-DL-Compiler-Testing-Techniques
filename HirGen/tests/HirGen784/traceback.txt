==========mod==========
#[version = "0.0.5"]
def @func_7247(%var_7241: Tensor[(40, 14), float32]) -> (Tensor[(8, 13, 5), float64], Tensor[(16, 5, 7), float64], Tensor[(40, 14), float32]) {
  %0 = @func_7218() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %1 = cast(%var_7241, dtype="float32") /* ty=Tensor[(40, 14), float32] */;
  %2 = reshape(%1, newshape=[16, 5, 7]) /* ty=Tensor[(16, 5, 7), float32] */;
  %3 = %0.1;
  %4 = @func_3846(%2) /* ty=Tensor[(16, 5, 7), float64] */;
  (%3, %4, %var_7241)
}

def @func_3907(%var_3902: Tensor[(9, 13, 16), float64]) -> (Tensor[(9, 13, 16), float64],) {
  %5 = cast(%var_3902, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
  %6 = tan(%5) /* ty=Tensor[(9, 13, 16), float64] */;
  (%6,)
}

def @func_8054() -> (Tensor[(16, 5, ?), int8], Tensor[(440), float64], Tensor[(8, 14, 5), float64]) {
  %7 = @func_7405() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) */;
  %8 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %9 = @func_7490() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %12 = cos(%11) /* ty=Tensor[(8, 14, 5), float64] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %14 = %7.1;
  %15 = %8.2;
  %16 = asin(%13) /* ty=Tensor[(8, 14, 5), float64] */;
  (%14, %15, %16)
}

def @func_2069() -> Tensor[(16, 5, 1), float32] {
  %17 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %17.0
}

def @func_7985() -> (Tensor[(16, 5, 6), float64],) {
  %18 = @func_4521() /* ty=Tensor[(16, 5, 6), float64] */;
  (%18,)
}

def @func_9868() -> (Tensor[(8, 14, 5), float64],) {
  %19 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
  (%19,)
}

def @func_10096(%var_10088: float64, %var_10089: Tensor[(1, 6, 2), float64]) -> Tensor[(1, 6, 2), float64] {
  %20 = cast(%var_10088, dtype="float64") /* ty=float64 */;
  %21 = cast(%var_10089, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
  power(%20, %21) /* ty=Tensor[(1, 6, 2), float64] */
}

def @func_4966() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) {
  %22 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %23 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %24 = %23.4;
  %25 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %26 = cast(%24, dtype="float32") /* ty=Tensor[(520), float32] */;
  %27 = cast(%25, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %28 = @func_4089() /* ty=Tensor[(16, 5, 6), float64] */;
  %29 = %22.1;
  %30 = subtract(%26, %27) /* ty=Tensor[(16, 5, 520), float32] */;
  (%28, %29, %30)
}

def @func_6455(%var_6365: Tensor[(520), float64], %var_6366: Tensor[(7, 4), uint8]) -> (Tensor[(16, 5, 6), float64], Tensor[(28), uint8], Tensor[(7, 4), uint8], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), float32], Tensor[(16, 5, 520), float64], Tensor[(16, 5, 520), float64]) {
  %31 = cast(%var_6365, dtype="float64") /* ty=Tensor[(520), float64] */;
  %32 = cast(%var_6366, dtype="uint8") /* ty=Tensor[(7, 4), uint8] */;
  %33 = reshape(%31, newshape=[1, 520]) /* ty=Tensor[(1, 520), float64] */;
  %34 = reshape(%32, newshape=[28]) /* ty=Tensor[(28), uint8] */;
  %35 = @func_4485(%33, %34) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(?, 520), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(28), uint8], Tensor[(28), uint8]) */;
  %36 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %37 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %38 = %37.0;
  %39 = cast(%var_6365, dtype="bool") /* ty=Tensor[(520), bool] */;
  %40 = cast(%38, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %41 = equal(%39, %40) /* ty=Tensor[(16, 5, 520), bool] */;
  %42 = cast(%var_6365, dtype="float32") /* ty=Tensor[(520), float32] */;
  %43 = cast(%41, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
  %44 = floor_mod(%42, %43) /* ty=Tensor[(16, 5, 520), float32] */;
  %45 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 5, 520), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 5, 520), float32] */, dtype="float64") /* ty=Tensor[(16, 5, 520), float64] */;
  %50 = cast(%var_6365, dtype="float64") /* ty=Tensor[(520), float64] */;
  %51 = cast(%41, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
  %52 = exp(%51) /* ty=Tensor[(16, 5, 520), float32] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(16, 5, 520), float64] */;
  %54 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %55 = %35.5;
  %56 = %36.0;
  %57 = floor_divide(%47, %48) /* ty=Tensor[(16, 5, 520), float32] */;
  %58 = maximum(%49, %50) /* ty=Tensor[(16, 5, 520), float64] */;
  %59 = atan(%53) /* ty=Tensor[(16, 5, 520), float64] */;
  (%54, %55, %var_6366, %56, %57, %58, %59)
}

def @func_4746() -> (Tensor[(16, 11, 1), float64],) {
  %60 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 1), float64] */;
  %61 = log10(%60) /* ty=Tensor[(16, 11, 1), float64] */;
  (%61,)
}

def @func_1998(%var_1985: Tensor[(1694), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float32]) {
  %62 = cast(%var_1985, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %63 = reshape(%62, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %64 = @func_818(%63) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %65 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %66 = %65.0;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %68 = %64.1;
  %69 = asin(%67) /* ty=Tensor[(16, 5, 1), float32] */;
  (%68, %var_1985, %69)
}

def @func_9094() -> Tensor[(16, 5, 6), float64] {
  %70 = @func_8588() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
  %70.1
}

def @func_8630() -> (Tensor[(8, 14, 5), float64],) {
  %71 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
  (%71,)
}

def @func_9694() -> Tensor[(1, 13, 5), float64] {
  @func_5233() /* ty=Tensor[(1, 13, 5), float64] */
}

def @func_6684() -> (Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) {
  %72 = @func_6473() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %73 = %72.0;
  %74 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 5, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %79 = less_equal(%76, %77) /* ty=Tensor[(16, 5, 6), bool] */;
  %80 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %81 = %78.0;
  %82 = @func_5142() /* ty=Tensor[(16, 5, 1), float32] */;
  (%79, %80, %81, %82)
}

def @func_5369() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) {
  %83 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %84 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %85 = %83.0;
  %86 = %84.0;
  (%85, %86)
}

def @func_2970(%var_2922: Tensor[(1694), float64]) -> (Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) {
  %87 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %88 = cast(%var_2922, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %89 = reshape(%88, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
  %90 = @func_2309(%89) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) */;
  %91 = %90.3;
  %92 = cast(%var_2922, dtype="float32") /* ty=Tensor[(1694), float32] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(2), int32] */;
  %94 = cast(%91, dtype="float32") /* ty=Tensor[(121, 14), float32] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %96 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %99 = sinh(%98) /* ty=Tensor[(16, 5, 6), float32] */;
  %100 = cast(%97, dtype="int16") /* ty=Tensor[(16, 5, 6), int16] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="int16") /* ty=Tensor[(16, 5, 6), int16] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %104 = bitwise_and(%102, %103) /* ty=Tensor[(16, 5, 6), int16] */;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %106 = %87.0;
  %107 = floor_mod(%94, %95) /* ty=Tensor[(121, 14), float32] */;
  %108 = asinh(%105) /* ty=Tensor[(16, 5, 6), float32] */;
  (%106, %107, %108)
}

def @func_4134(%var_4124: Tensor[(490), float64]) -> (Tensor[(440), float64], Tensor[(2, 1, 14), uint8], Tensor[(490), float64], Tensor[(16, 5, 1), bool], float64, Tensor[(1728), uint8]) {
  %109 = cast(-7.59098f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %110 = cast(%var_4124, dtype="float64") /* ty=Tensor[(490), float64] */;
  %111 = reshape(%109, newshape=[]) /* ty=float64 */;
  %112 = reshape(%110, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %113 = @func_758(%111, %112) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) */;
  %114 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %115 = cast(%114, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %116 = cast(-7.59098f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %117 = cast(meta[relay.Constant][3] /* ty=Tensor[(1728), uint8] */, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
  %118 = cast(meta[relay.Constant][3] /* ty=Tensor[(1728), uint8] */, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
  %119 = cast(-7.59098f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %120 = reshape(%117, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %121 = reshape(%118, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %122 = reshape(%119, newshape=[]) /* ty=float64 */;
  %123 = @func_2518(%120, %121, %122) /* ty=(Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) */;
  %124 = @func_3481() /* ty=Tensor[(440), float64] */;
  %125 = %113.0;
  %126 = not_equal(%115, %116) /* ty=Tensor[(16, 5, 1), bool] */;
  %127 = %123.2;
  (%124, %125, %var_4124, %126, %127, meta[relay.Constant][3] /* ty=Tensor[(1728), uint8] */)
}

def @func_4521() -> Tensor[(16, 5, 6), float64] {
  %128 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %128.0
}

def @func_8349() -> (Tensor[(16, 5, 6), float64],) {
  %129 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %130 = %129.0;
  (%130,)
}

def @func_4038() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) {
  %131 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %132 = @func_3952() /* ty=(Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %133 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %134 = %131.0;
  %135 = @func_3745() /* ty=Tensor[(16, 5, 6), float64] */;
  %136 = %132.0;
  %137 = %133.0;
  (%134, %135, %136, %137)
}

def @func_5279(%var_5240: Tensor[(16, 5, 16), float32], %var_5261: Tensor[(28), uint8]) -> (Tensor[(16, 5, 16), float32], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(28), uint8], Tensor[(16, 5, 1), float32]) {
  %138 = @func_3952() /* ty=(Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %139 = %138.1;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %141 = cast(%var_5240, dtype="float32") /* ty=Tensor[(16, 5, 16), float32] */;
  %142 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %143 = cast(%var_5261, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %144 = reshape(%143, newshape=[28]) /* ty=Tensor[(28), uint8] */;
  %145 = @func_2740(%144) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) */;
  %146 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %147 = mod(%140, %141) /* ty=Tensor[(16, 5, 16), float32] */;
  %148 = %142.0;
  %149 = %145.4;
  %150 = %146.0;
  (%147, %148, %149, %var_5261, %150)
}

def @func_9298() -> (Tensor[(8, 14, 5), float64], Tensor[(16, 5, 1), float32]) {
  %151 = @func_8818() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %152 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %153 = %151.0;
  %154 = %152.1;
  (%153, %154)
}

def @func_1872() -> (Tensor[(16, 5, 1), float32],) {
  %155 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %156 = tan(%155) /* ty=Tensor[(16, 5, 1), float32] */;
  (%156,)
}

def @func_9358() -> (Tensor[(16, 5, 6), float64],) {
  %157 = @func_5090() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) */;
  %158 = %157.3;
  (%158,)
}

def @func_7814(%var_7780: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 11, 1), float64], Tensor[(16, 5, 6), float32], Tensor[(16, 11, 1), float64]) {
  %159 = @func_4746() /* ty=(Tensor[(16, 11, 1), float64],) */;
  %160 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %161 = cast(%var_7780, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %165 = @func_4746() /* ty=(Tensor[(16, 11, 1), float64],) */;
  %166 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %167 = %159.0;
  %168 = subtract(%163, %164) /* ty=Tensor[(16, 5, 6), float32] */;
  %169 = %165.0;
  (%166, %167, %168, %169)
}

def @func_10492(%var_10461: Tensor[(9, 9, 1), float64], %var_10469: Tensor[(693, 22), float64], %var_10474: Tensor[(440), float64], %var_10482: Tensor[(108), float64]) -> (Tensor[(693, 22), float64], Tensor[(1, 9, 12), float64], Tensor[(108), float64], Tensor[(9, 9, 440), bool]) {
  %170 = cast(%var_10482, dtype="float64") /* ty=Tensor[(108), float64] */;
  %171 = reshape(%170, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float64] */;
  %172 = @func_9766(%171) /* ty=(Tensor[(1, 9, 12), float64], Tensor[(16, 5, 6), float64]) */;
  %173 = cast(%var_10461, dtype="float64") /* ty=Tensor[(9, 9, 1), float64] */;
  %174 = acos(%173) /* ty=Tensor[(9, 9, 1), float64] */;
  %175 = cast(%var_10461, dtype="bool") /* ty=Tensor[(9, 9, 1), bool] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="bool") /* ty=Tensor[(9, 9, 1), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %179 = logical_or(%177, %178) /* ty=Tensor[(9, 9, ?), bool] */;
  %180 = cast(%var_10469, dtype="float64") /* ty=Tensor[(693, 22), float64] */;
  %181 = reshape(%180, newshape=[1694, 9]) /* ty=Tensor[(1694, 9), float64] */;
  %182 = @func_4362(%181) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) */;
  %183 = %182.5;
  %184 = cast(%var_10474, dtype="float32") /* ty=Tensor[(440), float32] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(%183, dtype="float32") /* ty=Tensor[(440), float32] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), float32] */;
  %188 = power(%186, %187) /* ty=Tensor[(440), float32] */;
  %189 = cast(%179, dtype="bool") /* ty=Tensor[(9, 9, ?), bool] */;
  %190 = cast(%188, dtype="bool") /* ty=Tensor[(440), bool] */;
  %191 = %172.0;
  %192 = greater(%189, %190) /* ty=Tensor[(9, 9, 440), bool] */;
  (%var_10469, %191, %var_10482, %192)
}

def @func_7062() -> Tensor[(16, 5, 1), float64] {
  %193 = @func_5545() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  log(%195) /* ty=Tensor[(16, 5, 1), float64] */
}

def @func_4564() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64]) {
  %196 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %197 = cast(meta[relay.Constant][5] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %198 = reshape(%197, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %199 = @func_2970(%198) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) */;
  %200 = cast(meta[relay.Constant][6] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %201 = reshape(%200, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
  %202 = @func_1576(%201) /* ty=(Tensor[(11, 8, 5), float64],) */;
  %203 = %196.0;
  %204 = %199.2;
  %205 = %202.0;
  (%203, %204, meta[relay.Constant][5] /* ty=Tensor[(1694), float64] */, %205, meta[relay.Constant][6] /* ty=Tensor[(440), float64] */)
}

def @func_6592() -> (Tensor[(16, 5, 6), float64], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8]) {
  %206 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %207 = cast(meta[relay.Constant][7] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %208 = reshape(%207, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %209 = %206.0;
  %210 = @func_396(%208) /* ty=Tensor[(2, 1, 14), uint8] */;
  (%209, %210, meta[relay.Constant][7] /* ty=Tensor[(28), uint8] */)
}

def @func_3776() -> Tensor[(440), float64] {
  %211 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %211.2
}

def @func_5008() -> (Tensor[(16, 5, 1), float32],) {
  %212 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %213 = %212.1;
  (%213,)
}

def @func_6103(%var_6034: Tensor[(1694), float64], %var_6066: Tensor[(15246), float64]) -> (Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) {
  %214 = @func_4966() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) */;
  %215 = cast(%var_6066, dtype="float64") /* ty=Tensor[(15246), float64] */;
  %216 = reshape(%215, newshape=[1694, 9]) /* ty=Tensor[(1694, 9), float64] */;
  %217 = @func_4362(%216) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) */;
  %218 = cast(meta[relay.Constant][8] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %219 = reshape(%218, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
  %220 = @func_1576(%219) /* ty=(Tensor[(11, 8, 5), float64],) */;
  %221 = cast(%var_6034, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %222 = reshape(%221, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %223 = @func_4420(%222) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(14, 2), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float64]) */;
  %224 = %223.3;
  %225 = cast(%224, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %226 = cast(%var_6034, dtype="bool") /* ty=Tensor[(1694), bool] */;
  %227 = not_equal(%225, %226) /* ty=Tensor[(16, 5, 1694), bool] */;
  %228 = cast(%var_6034, dtype="uint16") /* ty=Tensor[(1694), uint16] */;
  %229 = cast(%227, dtype="uint16") /* ty=Tensor[(16, 5, 1694), uint16] */;
  %230 = %214.2;
  %231 = %217.0;
  %232 = %220.0;
  %233 = subtract(%228, %229) /* ty=Tensor[(16, 5, 1694), uint16] */;
  (%230, %231, %var_6066, %232, meta[relay.Constant][8] /* ty=Tensor[(440), float64] */, %233)
}

def @func_10515() -> (Tensor[(16, 5, 6), float64],) {
  %234 = @func_9244() /* ty=Tensor[(16, 5, 6), float64] */;
  (%234,)
}

def @func_3432() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) {
  %235 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %236 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %237 = %235.0;
  %238 = %236.0;
  %239 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  (%237, %238, %239)
}

def @func_9285(%var_9252: Tensor[(13, 5, 4), float64]) -> (Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), float32]) {
  %240 = cast(%var_9252, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %241 = cast(%var_9252, dtype="float32") /* ty=Tensor[(13, 5, 4), float32] */;
  %242 = rsqrt(%240) /* ty=Tensor[(13, 5, 4), float64] */;
  %243 = log(%241) /* ty=Tensor[(13, 5, 4), float32] */;
  (%242, %243)
}

def @func_9737(%var_9724: Tensor[(10, 7, 1), float32], %var_9725: Tensor[(10, 7, 14), float32]) -> (Tensor[(10, 7, 14), float32],) {
  %244 = cast(%var_9724, dtype="float32") /* ty=Tensor[(10, 7, 1), float32] */;
  %245 = cast(%var_9725, dtype="float32") /* ty=Tensor[(10, 7, 14), float32] */;
  %246 = divide(%244, %245) /* ty=Tensor[(10, 7, 14), float32] */;
  (%246,)
}

def @func_4015() -> (Tensor[(16, 5, 6), float64],) {
  %247 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  (%247,)
}

def @func_9152(%var_9144: Tensor[(5, 13, 5), float64]) -> (Tensor[(5, 13, 5), int8], Tensor[(8, 14, 5), float64]) {
  %248 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %249 = %248.0;
  %250 = cast(%249, dtype="int8") /* ty=Tensor[(1, 13, 5), int8] */;
  %251 = cast(%var_9144, dtype="int8") /* ty=Tensor[(5, 13, 5), int8] */;
  %252 = @func_8630() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %253 = bitwise_or(%250, %251) /* ty=Tensor[(5, 13, 5), int8] */;
  %254 = %252.0;
  (%253, %254)
}

def @func_5545() -> (Tensor[(16, 5, 1), float32],) {
  %255 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %256 = %255.0;
  (%256,)
}

def @func_9753() -> (Tensor[(16, 5, 6), float64],) {
  %257 = @func_5369() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) */;
  %258 = %257.0;
  (%258,)
}

def @func_5514() -> Tensor[(16, 5, 6), float64] {
  @func_4089() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_6473() -> (Tensor[(16, 5, 6), float64],) {
  %259 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %260 = %259.0;
  (%260,)
}

def @func_5539() -> (Tensor[(16, 5, 1), float32],) {
  %261 = @func_5008() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %262 = %261.0;
  (%262,)
}

def @func_9351() -> (Tensor[(16, 5, 6), float64], Tensor[(10, 16, 4), uint16], Tensor[(1, 640), uint16], Tensor[(1, 1694), float64]) {
  %263 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %264 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 640), uint16] */, dtype="uint16") /* ty=Tensor[(1, 640), uint16] */;
  %265 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 640), uint16] */, dtype="uint16") /* ty=Tensor[(1, 640), uint16] */;
  %266 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1694), float64] */, dtype="float64") /* ty=Tensor[(1, 1694), float64] */;
  %267 = reshape(%264, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint16] */;
  %268 = reshape(%265, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint16] */;
  %269 = reshape(%266, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
  %270 = @func_3624(%267, %268, %269) /* ty=(Tensor[(10, 16, 4), uint16], Tensor[(14, 2), uint8], Tensor[(121, 14), float64], Tensor[(440), float64]) */;
  %271 = %263.0;
  %272 = %270.0;
  (%271, %272, meta[relay.Constant][9] /* ty=Tensor[(1, 640), uint16] */, meta[relay.Constant][10] /* ty=Tensor[(1, 1694), float64] */)
}

def @func_6963(%var_6799: float64, %var_6860: Tensor[(490), float64]) -> (Tensor[(5, 14, 7), float32], float64, Tensor[(11, 8, 5), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490), bool], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(16, 5, 490), float64], Tensor[(490), uint32], Tensor[(440), float64]) {
  %273 = cast(%var_6799, dtype="float64") /* ty=float64 */;
  %274 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %275 = reshape(%273, newshape=[]) /* ty=float64 */;
  %276 = reshape(%274, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %277 = @func_758(%275, %276) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) */;
  %278 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %279 = cast(%var_6860, dtype="bool") /* ty=Tensor[(490), bool] */;
  %280 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %281 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), float64] */, dtype="bool") /* ty=Tensor[(490), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?), bool] */;
  %283 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %284 = @func_5778() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %285 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %286 = cast(%var_6860, dtype="float32") /* ty=Tensor[(490), float32] */;
  %287 = cos(%286) /* ty=Tensor[(490), float32] */;
  %288 = @func_5090() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) */;
  %289 = %288.0;
  %290 = cast(%287, dtype="float64") /* ty=Tensor[(490), float64] */;
  %291 = cast(%289, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %292 = cast(%287, dtype="float64") /* ty=Tensor[(490), float64] */;
  %293 = log10(%292) /* ty=Tensor[(490), float64] */;
  %294 = cast(meta[relay.Constant][12] /* ty=Tensor[(490), float64] */, dtype="uint32") /* ty=Tensor[(490), uint32] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(1), int32] */;
  %296 = cast(%293, dtype="uint32") /* ty=Tensor[(490), uint32] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %298 = %277.3;
  %299 = %278.1;
  %300 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %301 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %302 = greater_equal(%281, %282) /* ty=Tensor[(490), bool] */;
  %303 = %283.1;
  %304 = %284.0;
  %305 = %285.0;
  %306 = power(%290, %291) /* ty=Tensor[(16, 5, 490), float64] */;
  %307 = bitwise_xor(%296, %297) /* ty=Tensor[(490), uint32] */;
  %308 = @func_3481() /* ty=Tensor[(440), float64] */;
  (%298, %var_6799, %299, %300, %301, %302, %303, %304, %305, %306, %307, %308)
}

def @func_10083() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) {
  %309 = @func_9710() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(13, 5, 4), float32], Tensor[(260), float64]) */;
  %310 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %311 = @func_4089() /* ty=Tensor[(16, 5, 6), float64] */;
  %312 = %309.0;
  %313 = %310.0;
  (%311, %312, %313)
}

def @func_2518(%var_2478: Tensor[(12, 12, 12), uint8], %var_2479: Tensor[(12, 12, 12), uint8], %var_2485: float64) -> (Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) {
  %314 = cast(%var_2479, dtype="uint8") /* ty=Tensor[(12, 12, 12), uint8] */;
  %315 = shape_of(%var_2478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_2478, dtype="uint8") /* ty=Tensor[(12, 12, 12), uint8] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %318 = cast(%var_2485, dtype="float64") /* ty=float64 */;
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(245, 2), float64] */, dtype="float64") /* ty=Tensor[(245, 2), float64] */;
  %320 = reshape(%318, newshape=[]) /* ty=float64 */;
  %321 = reshape(%319, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %322 = @func_758(%320, %321) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) */;
  %323 = add(%316, %317) /* ty=Tensor[(12, 12, 12), uint8] */;
  %324 = %322.2;
  (%323, %324, %var_2485, meta[relay.Constant][13] /* ty=Tensor[(245, 2), float64] */)
}

def @func_4485(%var_4436: Tensor[(1, 520), float64], %var_4483: Tensor[(28), uint8]) -> (Tensor[(16, 5, 6), float32], Tensor[(?, 520), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(28), uint8], Tensor[(28), uint8]) {
  %325 = @func_3986() /* ty=(Tensor[(16, 5, 6), bool],) */;
  %326 = %325.0;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %328 = cast(%var_4436, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
  %329 = reshape(%328, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %330 = @func_2389(%329) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %331 = %330.2;
  %332 = cast(%331, dtype="uint8") /* ty=Tensor[(8, 13, 5), uint8] */;
  %333 = shape_of(%var_4436, dtype="int32") /* ty=Tensor[(2), int32] */;
  %334 = cast(%var_4436, dtype="uint8") /* ty=Tensor[(1, 520), uint8] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %336 = @func_3139() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %337 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %338 = cast(%var_4483, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %339 = reshape(%338, newshape=[28]) /* ty=Tensor[(28), uint8] */;
  %340 = @func_2740(%339) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) */;
  %341 = tan(%327) /* ty=Tensor[(16, 5, 6), float32] */;
  %342 = bitwise_xor(%334, %335) /* ty=Tensor[(?, 520), uint8] */;
  %343 = %336.0;
  %344 = %337.0;
  %345 = %340.3;
  (%341, %342, %343, %344, %345, %var_4483)
}

def @func_9766(%var_9759: Tensor[(1, 9, 12), float64]) -> (Tensor[(1, 9, 12), float64], Tensor[(16, 5, 6), float64]) {
  %346 = cast(%var_9759, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %347 = sin(%346) /* ty=Tensor[(1, 9, 12), float64] */;
  %348 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  (%347, %348)
}

def @func_3572() -> Tensor[(16, 5, 6), float64] {
  %349 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %349.0
}

def @func_7947(%var_7925: Tensor[(8, 13, 15), int8]) -> (Tensor[(8, 13, 15), int8],) {
  %350 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 13, 15), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 15), int8] */;
  %351 = shape_of(%var_7925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_7925, dtype="int8") /* ty=Tensor[(8, 13, 15), int8] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %354 = maximum(%352, %353) /* ty=Tensor[(8, 13, 15), int8] */;
  (%354,)
}

def @func_10246() -> (Tensor[(16, 5, 6), float64],) {
  %355 = @func_3745() /* ty=Tensor[(16, 5, 6), float64] */;
  (%355,)
}

def @func_3846(%var_3838: Tensor[(16, 5, 7), float32]) -> Tensor[(16, 5, 7), float64] {
  %356 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %358 = cast(%var_3838, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  power(%357, %358) /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_6004() -> Tensor[(16, 5, 1), float32] {
  %359 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %359.0
}

def @func_2666() -> (Tensor[(16, 5, 6), float64],) {
  %360 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %361 = %360.0;
  %362 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %363 = cast(%361, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %364 = cast(%362, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  %365 = floor_divide(%363, %364) /* ty=Tensor[(16, 5, 6), float64] */;
  (%365,)
}

def @func_8088() -> (Tensor[(16, 5, 6), float64],) {
  %366 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %367 = %366.0;
  (%367,)
}

def @func_3920() -> Tensor[(16, 5, 1), float32] {
  @func_2069() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_5778() -> (Tensor[(16, 5, 6), float64],) {
  %368 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %369 = %368.0;
  (%369,)
}

def @func_10277() -> Tensor[(16, 5, 6), float64] {
  %370 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %370.0
}

def @func_3237() -> (Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) {
  %371 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %372 = %371.0;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %374 = cast(meta[relay.Constant][15] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %375 = reshape(%374, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
  %376 = @func_1576(%375) /* ty=(Tensor[(11, 8, 5), float64],) */;
  %377 = cast(meta[relay.Constant][16] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %378 = reshape(%377, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
  %379 = @func_2309(%378) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) */;
  %380 = sinh(%373) /* ty=Tensor[(16, 5, 1), float32] */;
  %381 = %376.0;
  %382 = %379.3;
  (%380, %381, meta[relay.Constant][15] /* ty=Tensor[(440), float64] */, %382, meta[relay.Constant][16] /* ty=Tensor[(1694), float64] */)
}

def @func_2583() -> Tensor[(16, 5, 6), float64] {
  %383 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %385 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 5, 6), float32] */, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  power(%384, %385) /* ty=Tensor[(16, 5, 6), float64] */
}

def @main(%var_10520: Tensor[(13, 9, 1), int16], %var_10538: Tensor[(13, 9, 5), int16]) -> Tensor[(13, 9, 5), int32] {
  %386 = cast(%var_10520, dtype="int16") /* ty=Tensor[(13, 9, 1), int16] */;
  %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 9, 5), int16] */, dtype="int16") /* ty=Tensor[(13, 9, 5), int16] */;
  %388 = right_shift(%386, %387) /* ty=Tensor[(13, 9, 5), int16] */;
  %389 = cast(%var_10538, dtype="int32") /* ty=Tensor[(13, 9, 5), int32] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="int32") /* ty=Tensor[(13, 9, 5), int32] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%391, %392) /* ty=Tensor[(13, 9, 5), int32] */
}

def @func_5997() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) {
  %393 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %394 = @func_4176() /* ty=Tensor[(16, 5, 6), float64] */;
  %395 = %393.0;
  (%394, %395)
}

def @func_2714() -> (Tensor[(16, 5, 6), float64],) {
  %396 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  (%396,)
}

def @func_5585(%var_5574: Tensor[(2, 5, 14), int64], %var_5575: Tensor[(2, 5, 14), int64]) -> (Tensor[(2, 5, 14), bool],) {
  %397 = cast(%var_5575, dtype="bool") /* ty=Tensor[(2, 5, 14), bool] */;
  %398 = shape_of(%var_5574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_5574, dtype="bool") /* ty=Tensor[(2, 5, 14), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %401 = equal(%399, %400) /* ty=Tensor[(2, 5, 14), bool] */;
  (%401,)
}

def @func_9244() -> Tensor[(16, 5, 6), float64] {
  @func_3745() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_9326() -> (Tensor[(16, 5, 6), float64],) {
  %402 = @func_4015() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %403 = %402.0;
  (%403,)
}

def @func_5090() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) {
  %404 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %405 = cast(meta[relay.Constant][19] /* ty=Tensor[(490, 1), float64] */, dtype="float64") /* ty=Tensor[(490, 1), float64] */;
  %406 = reshape(%405, newshape=[490]) /* ty=Tensor[(490), float64] */;
  %407 = @func_4134(%406) /* ty=(Tensor[(440), float64], Tensor[(2, 1, 14), uint8], Tensor[(490), float64], Tensor[(16, 5, 1), bool], float64, Tensor[(1728), uint8]) */;
  %408 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %409 = @func_4966() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) */;
  %410 = @func_4908() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
  %411 = cast(meta[relay.Constant][19] /* ty=Tensor[(490, 1), float64] */, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %412 = sigmoid(%411) /* ty=Tensor[(490, 1), float32] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %414 = acosh(%413) /* ty=Tensor[(490, 1), float32] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(490, 1), float64] */;
  %416 = %404.0;
  %417 = %407.3;
  %418 = %408.3;
  %419 = %409.0;
  %420 = %410.0;
  %421 = cos(%415) /* ty=Tensor[(490, 1), float64] */;
  (%416, %417, %418, %419, %420, %421)
}

def @func_818(%var_781: Tensor[(14, 11, 11), float64]) -> (Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) {
  %422 = cast(%var_781, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %423 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 2), uint8] */, dtype="uint8") /* ty=Tensor[(14, 2), uint8] */;
  %424 = reshape(%423, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %425 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 2), uint8] */, dtype="uint8") /* ty=Tensor[(14, 2), uint8] */;
  %426 = reshape(%425, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %427 = cosh(%422) /* ty=Tensor[(14, 11, 11), float64] */;
  %428 = @func_396(%424) /* ty=Tensor[(2, 1, 14), uint8] */;
  %429 = @func_396(%426) /* ty=Tensor[(2, 1, 14), uint8] */;
  (%427, %428, meta[relay.Constant][20] /* ty=Tensor[(14, 2), uint8] */, %429)
}

def @func_6147(%var_6127: Tensor[(4, 6, 1), float64], %var_6128: Tensor[(4, 6, 9), float64]) -> Tensor[(4, 6, 9), bool] {
  %430 = cast(%var_6127, dtype="bool") /* ty=Tensor[(4, 6, 1), bool] */;
  %431 = cast(%var_6128, dtype="bool") /* ty=Tensor[(4, 6, 9), bool] */;
  equal(%430, %431) /* ty=Tensor[(4, 6, 9), bool] */
}

def @func_2097(%var_2090: Tensor[(10, 8, 11), float32]) -> Tensor[(10, 8, 11), float32] {
  %432 = cast(%var_2090, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  %433 = exp(%432) /* ty=Tensor[(10, 8, 11), float32] */;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  log(%434) /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_8701(%var_8682: Tensor[(8, 14, 5), float64]) -> (Tensor[(440), float64], Tensor[(8, 14, 5), uint32]) {
  %435 = @func_8147() /* ty=(Tensor[(440), float64],) */;
  %436 = @func_7900() /* ty=Tensor[(8, 14, 5), float64] */;
  %437 = cast(%var_8682, dtype="uint32") /* ty=Tensor[(8, 14, 5), uint32] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="uint32") /* ty=Tensor[(8, 14, 5), uint32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %441 = %435.0;
  %442 = bitwise_and(%439, %440) /* ty=Tensor[(8, 14, 5), uint32] */;
  (%441, %442)
}

def @func_3952() -> (Tensor[(440), float64], Tensor[(16, 5, 1), float32]) {
  %443 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %444 = @func_3776() /* ty=Tensor[(440), float64] */;
  %445 = %443.0;
  (%444, %445)
}

def @func_4779() -> (Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) {
  %446 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %447 = cast(meta[relay.Constant][21] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %448 = reshape(%447, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %449 = @func_2970(%448) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) */;
  %450 = %449.0;
  %451 = cast(meta[relay.Constant][21] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %452 = cast(%450, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %453 = minimum(%451, %452) /* ty=Tensor[(16, 5, 1694), float64] */;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(16, 5, 1694), float64] */;
  %455 = %446.3;
  %456 = sqrt(%454) /* ty=Tensor[(16, 5, 1694), float64] */;
  (%455, %456)
}

def @func_7022() -> (Tensor[(16, 5, 1694), float32], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1694), bool]) {
  %457 = @func_5645() /* ty=(Tensor[(16, 5, 1694), float64], Tensor[(16, 5, 1), float32]) */;
  %458 = %457.0;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(16, 5, 1694), float64] */;
  %460 = sinh(%459) /* ty=Tensor[(16, 5, 1694), float64] */;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(16, 5, 1694), float64] */;
  %462 = asinh(%461) /* ty=Tensor[(16, 5, 1694), float64] */;
  %463 = cast(%460, dtype="int32") /* ty=Tensor[(16, 5, 1694), int32] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="int32") /* ty=Tensor[(16, 5, 1694), int32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %467 = bitwise_xor(%465, %466) /* ty=Tensor[(16, 5, 1694), int32] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(16, 5, 1694), float32] */;
  %469 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%462, dtype="float32") /* ty=Tensor[(16, 5, 1694), float32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %472 = @func_4908() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
  %473 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %474 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %475 = %474.0;
  %476 = cast(%462, dtype="bool") /* ty=Tensor[(16, 5, 1694), bool] */;
  %477 = cast(%475, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %478 = mod(%470, %471) /* ty=Tensor[(16, 5, 1694), float32] */;
  %479 = %472.0;
  %480 = %473.0;
  %481 = less(%476, %477) /* ty=Tensor[(16, 5, 1694), bool] */;
  (%478, %479, %480, %481)
}

def @func_8368() -> (Tensor[(16, 5, 6), float64],) {
  %482 = @func_4176() /* ty=Tensor[(16, 5, 6), float64] */;
  (%482,)
}

def @func_4623() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) {
  %483 = @func_3432() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) */;
  %484 = cast(meta[relay.Constant][22] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %485 = reshape(%484, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %486 = @func_2389(%485) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %487 = %483.0;
  %488 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %489 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %490 = %486.1;
  (%487, %488, %489, %490, meta[relay.Constant][22] /* ty=Tensor[(520), float64] */)
}

def @func_9677() -> (Tensor[(16, 5, 1), float64], Tensor[(16, 5, 1), float64]) {
  %491 = @func_8524() /* ty=(Tensor[(16, 5, 1), float64],) */;
  %492 = @func_8524() /* ty=(Tensor[(16, 5, 1), float64],) */;
  %493 = %491.0;
  %494 = %492.0;
  (%493, %494)
}

def @func_10011(%var_10005: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), bool],) {
  %495 = @func_6473() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %496 = %495.0;
  %497 = cast(%var_10005, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %501 = less(%499, %500) /* ty=Tensor[(16, 5, 6), bool] */;
  (%501,)
}

def @func_7480() -> (Tensor[(16, 5, 6), float64],) {
  %502 = @func_4521() /* ty=Tensor[(16, 5, 6), float64] */;
  (%502,)
}

def @func_3986() -> (Tensor[(16, 5, 6), bool],) {
  %503 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %504 = %503.1;
  (%504,)
}

def @func_4362(%var_4347: Tensor[(1694, 9), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) {
  %505 = cast(meta[relay.Constant][23] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %506 = reshape(%505, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %507 = cast(meta[relay.Constant][24] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %508 = reshape(%507, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
  %509 = @func_1576(%508) /* ty=(Tensor[(11, 8, 5), float64],) */;
  %510 = @func_3897() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694, 1), float64]) */;
  %511 = %510.2;
  %512 = cast(%511, dtype="int32") /* ty=Tensor[(1694, 1), int32] */;
  %513 = cast(%var_4347, dtype="int32") /* ty=Tensor[(1694, 9), int32] */;
  %514 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %515 = cast(%511, dtype="float64") /* ty=Tensor[(1694, 1), float64] */;
  %516 = reshape(%515, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %517 = @func_818(%516) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %518 = @func_396(%506) /* ty=Tensor[(2, 1, 14), uint8] */;
  %519 = %509.0;
  %520 = logical_xor(%512, %513) /* ty=Tensor[(1694, 9), int32] */;
  %521 = %514.2;
  %522 = %517.2;
  (%518, meta[relay.Constant][23] /* ty=Tensor[(28), uint8] */, %519, meta[relay.Constant][24] /* ty=Tensor[(440), float64] */, %520, %521, %522)
}

def @func_9837() -> (Tensor[(1, 13, 5), float64],) {
  %523 = @func_9694() /* ty=Tensor[(1, 13, 5), float64] */;
  (%523,)
}

def @func_5125() -> (Tensor[(440), float64],) {
  %524 = @func_3481() /* ty=Tensor[(440), float64] */;
  (%524,)
}

def @func_9565(%var_9547: Tensor[(8, 13, 5), uint8], %var_9548: Tensor[(8, 13, 5), uint8], %var_9552: Tensor[(8, 13, 5), uint8]) -> (Tensor[(8, 13, 5), uint8], Tensor[(8, 13, 5), bool]) {
  %525 = cast(%var_9548, dtype="uint8") /* ty=Tensor[(8, 13, 5), uint8] */;
  %526 = shape_of(%var_9547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_9547, dtype="uint8") /* ty=Tensor[(8, 13, 5), uint8] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %529 = cast(%var_9552, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %530 = shape_of(%var_9548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_9548, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = bitwise_and(%527, %528) /* ty=Tensor[(8, 13, 5), uint8] */;
  %534 = greater_equal(%531, %532) /* ty=Tensor[(8, 13, 5), bool] */;
  (%533, %534)
}

def @func_9192() -> (Tensor[(16, 5, 6), float64],) {
  %535 = @func_7405() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) */;
  %536 = %535.0;
  (%536,)
}

def @func_2389(%var_2383: Tensor[(8, 13, 5), float64]) -> (Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) {
  %537 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %538 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %539 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %540 = cast(%var_2383, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %541 = cosh(%537) /* ty=Tensor[(1, 13, 5), float64] */;
  %542 = asinh(%538) /* ty=Tensor[(1, 13, 5), float64] */;
  %543 = power(%539, %540) /* ty=Tensor[(8, 13, 5), float64] */;
  (%541, %542, %543)
}

def @func_5142() -> Tensor[(16, 5, 1), float32] {
  @func_3920() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_5842() -> (Tensor[(16, 5, 1), float32],) {
  %544 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %545 = %544.0;
  (%545,)
}

def @func_4908() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) {
  %546 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %547 = %546.0;
  %548 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %549 = @func_4089() /* ty=Tensor[(16, 5, 6), float64] */;
  (%547, %548, %549)
}

def @func_4420(%var_4411: Tensor[(1694), float64]) -> (Tensor[(16, 5, 6), float32], Tensor[(14, 2), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float64]) {
  %550 = @func_4015() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %553 = cast(%var_4411, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %554 = reshape(%553, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %555 = @func_818(%554) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %556 = cast(%var_4411, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %557 = reshape(%556, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
  %558 = @func_2309(%557) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) */;
  %559 = log2(%552) /* ty=Tensor[(16, 5, 6), float32] */;
  %560 = %555.2;
  %561 = %558.5;
  (%559, %560, %var_4411, %561)
}

def @func_7528() -> Tensor[(16, 5, 6), float32] {
  %562 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %563 = %562.0;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  exp(%564) /* ty=Tensor[(16, 5, 6), float32] */
}

def @func_7218() -> (Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) {
  %565 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  %567 = cast(meta[relay.Constant][26] /* ty=Tensor[(520, 1), float64] */, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %568 = reshape(%567, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %569 = @func_2389(%568) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %570 = @func_5997() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) */;
  %571 = rsqrt(%566) /* ty=Tensor[(16, 5, 6), float64] */;
  %572 = %569.2;
  %573 = @func_3776() /* ty=Tensor[(440), float64] */;
  %574 = %570.1;
  (%571, %572, meta[relay.Constant][26] /* ty=Tensor[(520, 1), float64] */, %573, %574)
}

def @func_5233() -> Tensor[(1, 13, 5), float64] {
  %575 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %575.0
}

def @func_4089() -> Tensor[(16, 5, 6), float64] {
  @func_3572() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_7852(%var_7826: Tensor[(12, 14, 9), float32]) -> (Tensor[(16, 5, 1), float32], Tensor[(12, 14, 9), float64]) {
  %576 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %577 = cast(%var_7826, dtype="float32") /* ty=Tensor[(12, 14, 9), float32] */;
  %578 = cosh(%577) /* ty=Tensor[(12, 14, 9), float32] */;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(12, 14, 9), float64] */;
  %580 = %576.0;
  %581 = sinh(%579) /* ty=Tensor[(12, 14, 9), float64] */;
  (%580, %581)
}

def @func_7100() -> (Tensor[(13, 5, 14), int16], Tensor[(2, 1, 14), uint8], Tensor[(96, 18), float32]) {
  %582 = cast(meta[relay.Constant][27] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %583 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 5, 14), int16] */, dtype="int16") /* ty=Tensor[(13, 5, 14), int16] */;
  %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 18), uint8] */, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %585 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 18), uint8] */, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %586 = cast(meta[relay.Constant][27] /* ty=int16 */, dtype="float64") /* ty=float64 */;
  %587 = reshape(%584, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %588 = reshape(%585, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %589 = reshape(%586, newshape=[]) /* ty=float64 */;
  %590 = @func_2518(%587, %588, %589) /* ty=(Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) */;
  %591 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 18), uint8] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %592 = multiply(%582, %583) /* ty=Tensor[(13, 5, 14), int16] */;
  %593 = %590.1;
  %594 = sin(%591) /* ty=Tensor[(96, 18), float32] */;
  (%592, %593, %594)
}

def @func_9710() -> (Tensor[(16, 5, 1), float32], Tensor[(13, 5, 4), float32], Tensor[(260), float64]) {
  %595 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %596 = cast(meta[relay.Constant][30] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %597 = reshape(%596, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), float64] */;
  %598 = @func_9285(%597) /* ty=(Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), float32]) */;
  %599 = %595.0;
  %600 = %598.1;
  (%599, %600, meta[relay.Constant][30] /* ty=Tensor[(260), float64] */)
}

def @func_10400(%var_10332: Tensor[(1, 140), int64]) -> (Tensor[(16, 5, 6), float64], Tensor[(2, 5, 14), bool], Tensor[(1, 140), int64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(560), float32]) {
  %601 = @func_5090() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) */;
  %602 = cast(%var_10332, dtype="int64") /* ty=Tensor[(1, 140), int64] */;
  %603 = cast(%var_10332, dtype="int64") /* ty=Tensor[(1, 140), int64] */;
  %604 = reshape(%602, newshape=[2, 5, 14]) /* ty=Tensor[(2, 5, 14), int64] */;
  %605 = reshape(%603, newshape=[2, 5, 14]) /* ty=Tensor[(2, 5, 14), int64] */;
  %606 = @func_5585(%604, %605) /* ty=(Tensor[(2, 5, 14), bool],) */;
  %607 = cast(meta[relay.Constant][31] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %608 = reshape(%607, newshape=[16, 5, 7]) /* ty=Tensor[(16, 5, 7), float32] */;
  %609 = %601.4;
  %610 = %606.0;
  %611 = @func_3745() /* ty=Tensor[(16, 5, 6), float64] */;
  %612 = @func_3846(%608) /* ty=Tensor[(16, 5, 7), float64] */;
  (%609, %610, %var_10332, %611, %612, meta[relay.Constant][31] /* ty=Tensor[(560), float32] */)
}

def @func_8147() -> (Tensor[(440), float64],) {
  %613 = @func_4564() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64]) */;
  %614 = %613.4;
  (%614,)
}

def @func_8200(%var_8181: Tensor[(1, 12, 3), float64]) -> (Tensor[(1, 12, 3), float32],) {
  %615 = cast(%var_8181, dtype="float64") /* ty=Tensor[(1, 12, 3), float64] */;
  %616 = cos(%615) /* ty=Tensor[(1, 12, 3), float64] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(1, 12, 3), float32] */;
  %618 = acos(%617) /* ty=Tensor[(1, 12, 3), float32] */;
  (%618,)
}

def @func_8401() -> (Tensor[(16, 5, ?), int8], Tensor[(16, 5, 6), float32]) {
  %619 = @func_8054() /* ty=(Tensor[(16, 5, ?), int8], Tensor[(440), float64], Tensor[(8, 14, 5), float64]) */;
  %620 = %619.0;
  %621 = @func_7528() /* ty=Tensor[(16, 5, 6), float32] */;
  (%620, %621)
}

def @func_4176() -> Tensor[(16, 5, 6), float64] {
  %622 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %622.0
}

def @func_9803() -> Tensor[(440), float64] {
  %623 = @func_8147() /* ty=(Tensor[(440), float64],) */;
  %623.0
}

def @func_8588() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) {
  %624 = @func_7218() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %625 = @func_4966() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) */;
  %626 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %627 = %624.0;
  %628 = %625.1;
  %629 = %626.0;
  (%627, %628, %629)
}

def @func_8524() -> (Tensor[(16, 5, 1), float64],) {
  %630 = @func_7062() /* ty=Tensor[(16, 5, 1), float64] */;
  (%630,)
}

def @func_3139() -> (Tensor[(16, 5, 6), float64],) {
  %631 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %632 = %631.0;
  (%632,)
}

def @func_7895() -> (Tensor[(440), float64],) {
  %633 = @func_3776() /* ty=Tensor[(440), float64] */;
  (%633,)
}

def @func_3745() -> Tensor[(16, 5, 6), float64] {
  %634 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %634.0
}

def @func_6263() -> Tensor[(16, 5, 6), bool] {
  %635 = @func_3986() /* ty=(Tensor[(16, 5, 6), bool],) */;
  %635.0
}

def @func_3897() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694, 1), float64]) {
  %636 = cast(meta[relay.Constant][32] /* ty=Tensor[(1694, 1), float64] */, dtype="float64") /* ty=Tensor[(1694, 1), float64] */;
  %637 = reshape(%636, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %638 = @func_2970(%637) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) */;
  %639 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %640 = %638.2;
  (%639, %640, meta[relay.Constant][32] /* ty=Tensor[(1694, 1), float64] */)
}

def @func_9074(%var_8946: Tensor[(15246), float64], %var_9041: Tensor[(16, 5, 520), bool]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(1694), float64], Tensor[(15246), float64], Tensor[(440), float64], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 520), uint64], Tensor[(2, 1, 14), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), int16]) {
  %641 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %642 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %643 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %644 = cast(meta[relay.Constant][33] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %645 = cast(%var_8946, dtype="float64") /* ty=Tensor[(15246), float64] */;
  %646 = reshape(%644, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %647 = reshape(%645, newshape=[15246]) /* ty=Tensor[(15246), float64] */;
  %648 = @func_6103(%646, %647) /* ty=(Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) */;
  %649 = %648.0;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(16, 5, 520), float64] */;
  %651 = tan(%650) /* ty=Tensor[(16, 5, 520), float64] */;
  %652 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %653 = %652.0;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
  %655 = cast(%653, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %656 = greater_equal(%654, %655) /* ty=Tensor[(16, 5, 520), bool] */;
  %657 = @func_7062() /* ty=Tensor[(16, 5, 1), float64] */;
  %658 = cast(%656, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
  %659 = cast(%657, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %660 = less(%658, %659) /* ty=Tensor[(16, 5, 520), bool] */;
  %661 = cast(%649, dtype="uint64") /* ty=Tensor[(16, 5, 520), uint64] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="uint64") /* ty=Tensor[(16, 5, 520), uint64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %665 = cast(meta[relay.Constant][33] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %666 = cast(%var_8946, dtype="float64") /* ty=Tensor[(15246), float64] */;
  %667 = reshape(%665, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %668 = reshape(%666, newshape=[15246]) /* ty=Tensor[(15246), float64] */;
  %669 = @func_6103(%667, %668) /* ty=(Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) */;
  %670 = @func_7985() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %671 = cast(%651, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
  %672 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%656, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %675 = logical_and(%673, %674) /* ty=Tensor[(16, 5, 520), bool] */;
  %676 = cast(%var_9041, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = greater(%678, %679) /* ty=Tensor[(16, 5, 520), bool] */;
  %681 = cast(%651, dtype="int16") /* ty=Tensor[(16, 5, 520), int16] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="int16") /* ty=Tensor[(16, 5, 520), int16] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %685 = %641.3;
  %686 = %642.0;
  %687 = @func_3481() /* ty=Tensor[(440), float64] */;
  %688 = %643.1;
  %689 = left_shift(%663, %664) /* ty=Tensor[(16, 5, 520), uint64] */;
  %690 = %669.1;
  %691 = %670.0;
  %692 = @func_6004() /* ty=Tensor[(16, 5, 1), float32] */;
  %693 = minimum(%683, %684) /* ty=Tensor[(16, 5, 520), int16] */;
  (%685, %686, meta[relay.Constant][33] /* ty=Tensor[(1694), float64] */, %var_8946, %687, %688, %689, %690, %691, %692, %693)
}

def @func_7126() -> (Tensor[(16, 5, 6), float64],) {
  %694 = @func_3432() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) */;
  %695 = %694.0;
  (%695,)
}

def @func_3624(%var_3597: Tensor[(10, 16, 4), uint16], %var_3598: Tensor[(10, 16, 4), uint16], %var_3608: Tensor[(121, 14), float64]) -> (Tensor[(10, 16, 4), uint16], Tensor[(14, 2), uint8], Tensor[(121, 14), float64], Tensor[(440), float64]) {
  %696 = cast(%var_3598, dtype="uint16") /* ty=Tensor[(10, 16, 4), uint16] */;
  %697 = shape_of(%var_3597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_3597, dtype="uint16") /* ty=Tensor[(10, 16, 4), uint16] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %700 = cast(%var_3608, dtype="float64") /* ty=Tensor[(121, 14), float64] */;
  %701 = reshape(%700, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %702 = @func_818(%701) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %703 = add(%698, %699) /* ty=Tensor[(10, 16, 4), uint16] */;
  %704 = %702.2;
  %705 = @func_3481() /* ty=Tensor[(440), float64] */;
  (%703, %704, %var_3608, %705)
}

def @func_4148(%var_4145: Tensor[(28), uint8]) -> (Tensor[(16, 5, 6), bool], Tensor[(28), uint8], Tensor[(28), uint8]) {
  %706 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %707 = cast(%var_4145, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %708 = reshape(%707, newshape=[28]) /* ty=Tensor[(28), uint8] */;
  %709 = @func_2740(%708) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) */;
  %710 = %706.1;
  %711 = %709.3;
  (%710, %711, %var_4145)
}

def @func_5645() -> (Tensor[(16, 5, 1694), float64], Tensor[(16, 5, 1), float32]) {
  %712 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %713 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %714 = %712.1;
  %715 = %713.2;
  (%714, %715)
}

def @func_8818() -> (Tensor[(8, 14, 5), float64],) {
  %716 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %718 = atan(%717) /* ty=Tensor[(8, 14, 5), float64] */;
  (%718,)
}

def @func_3682() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) {
  %719 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %720 = @func_3139() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %723 = sin(%722) /* ty=Tensor[(16, 5, 6), float32] */;
  %724 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %725 = cast(%724, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %726 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%723, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = %719.0;
  %730 = logical_and(%727, %728) /* ty=Tensor[(16, 5, 6), bool] */;
  (%729, %730)
}

def @func_758(%var_710: float64, %var_711: Tensor[(5, 14, 7), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) {
  %731 = cast(meta[relay.Constant][34] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %732 = reshape(%731, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %733 = cast(meta[relay.Constant][34] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %734 = reshape(%733, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %735 = cast(%var_710, dtype="float64") /* ty=float64 */;
  %736 = cast(%var_711, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
  %737 = power(%735, %736) /* ty=Tensor[(5, 14, 7), float64] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(5, 14, 7), float32] */;
  %739 = @func_396(%732) /* ty=Tensor[(2, 1, 14), uint8] */;
  %740 = cast(%739, dtype="uint8") /* ty=Tensor[(2, 1, 14), uint8] */;
  %741 = reshape(%740, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %742 = @func_396(%734) /* ty=Tensor[(2, 1, 14), uint8] */;
  %743 = exp(%738) /* ty=Tensor[(5, 14, 7), float32] */;
  %744 = @func_396(%741) /* ty=Tensor[(2, 1, 14), uint8] */;
  (%739, meta[relay.Constant][34] /* ty=Tensor[(28), uint8] */, %742, %743, %744)
}

def @func_8227() -> Tensor[(8, 14, 5), float64] {
  %745 = @func_7490() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %745.0
}

def @func_2437() -> (Tensor[(16, 5, 1), float32],) {
  %746 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %747 = %746.0;
  (%747,)
}

def @func_7900() -> Tensor[(8, 14, 5), float64] {
  %748 = @func_7490() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %748.0
}

def @func_9585() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float32]) {
  %749 = @func_6004() /* ty=Tensor[(16, 5, 1), float32] */;
  %750 = @func_7528() /* ty=Tensor[(16, 5, 6), float32] */;
  (%749, %750)
}

def @func_2847() -> (Tensor[(16, 5, 6), float64],) {
  %751 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %752 = %751.0;
  (%752,)
}

def @func_8174() -> (Tensor[(16, 5, 1), float32],) {
  %753 = @func_5008() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %754 = %753.0;
  (%754,)
}

def @func_3176() -> (Tensor[(16, 5, 1), float32],) {
  %755 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %756 = %755.0;
  (%756,)
}

def @func_4237(%var_4231: Tensor[(4, 140), float32]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(4, 140), float32]) {
  %757 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %758 = cast(%var_4231, dtype="float32") /* ty=Tensor[(4, 140), float32] */;
  %759 = reshape(%758, newshape=[16, 5, 7]) /* ty=Tensor[(16, 5, 7), float32] */;
  %760 = %757.0;
  %761 = @func_3846(%759) /* ty=Tensor[(16, 5, 7), float64] */;
  (%760, %761, %var_4231)
}

def @func_3481() -> Tensor[(440), float64] {
  %762 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %762.2
}

def @func_8740() -> (Tensor[(16, 5, 6), float64],) {
  %763 = @func_8588() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
  %764 = %763.0;
  (%764,)
}

def @func_1576(%var_1560: Tensor[(11, 8, 5), float64]) -> (Tensor[(11, 8, 5), float64],) {
  %765 = cast(%var_1560, dtype="float64") /* ty=Tensor[(11, 8, 5), float64] */;
  %766 = log(%765) /* ty=Tensor[(11, 8, 5), float64] */;
  (%766,)
}

def @func_2309(%var_2291: Tensor[(121, 14), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) {
  %767 = cast(meta[relay.Constant][35] /* ty=Tensor[(880), float32] */, dtype="float32") /* ty=Tensor[(880), float32] */;
  %768 = reshape(%767, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float32] */;
  %769 = cast(%var_2291, dtype="float64") /* ty=Tensor[(121, 14), float64] */;
  %770 = reshape(%769, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %771 = @func_818(%770) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %772 = cast(%var_2291, dtype="float64") /* ty=Tensor[(121, 14), float64] */;
  %773 = reshape(%772, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %774 = @func_818(%773) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %775 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %778 = @func_2097(%768) /* ty=Tensor[(10, 8, 11), float32] */;
  %779 = %771.1;
  %780 = %774.2;
  %781 = log2(%777) /* ty=Tensor[(16, 5, 1), float64] */;
  (%778, meta[relay.Constant][35] /* ty=Tensor[(880), float32] */, %779, %var_2291, %780, %781)
}

def @func_396(%var_381: Tensor[(2, 1, 14), uint8]) -> Tensor[(2, 1, 14), uint8] {
  %782 = cast(meta[relay.Constant][36] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %783 = cast(%var_381, dtype="uint8") /* ty=Tensor[(2, 1, 14), uint8] */;
  bitwise_or(%782, %783) /* ty=Tensor[(2, 1, 14), uint8] */
}

def @func_5700() -> (Tensor[(16, 5, 6), float64],) {
  %784 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %785 = %784.0;
  (%785,)
}

def @func_7490() -> (Tensor[(8, 14, 5), float64],) {
  %786 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 14, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %787 = acosh(%786) /* ty=Tensor[(8, 14, 5), float64] */;
  (%787,)
}

def @func_7405() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) {
  %788 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
  %789 = @func_6684() /* ty=(Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) */;
  %790 = %789.3;
  %791 = cast(%790, dtype="int8") /* ty=Tensor[(16, 5, 1), int8] */;
  %792 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%788, dtype="int8") /* ty=Tensor[(16, 5, 1), int8] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %795 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %796 = bitwise_or(%793, %794) /* ty=Tensor[(16, 5, ?), int8] */;
  (%795, %796)
}

def @func_2740(%var_2726: Tensor[(28), uint8]) -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) {
  %797 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %798 = cast(%var_2726, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %799 = reshape(%798, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %800 = cast(meta[relay.Constant][38] /* ty=Tensor[(260, 2), float64] */, dtype="float64") /* ty=Tensor[(260, 2), float64] */;
  %801 = reshape(%800, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %802 = @func_2389(%801) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %803 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
  %804 = %797.0;
  %805 = @func_396(%799) /* ty=Tensor[(2, 1, 14), uint8] */;
  %806 = %802.0;
  (%803, %804, %805, %var_2726, %806, meta[relay.Constant][38] /* ty=Tensor[(260, 2), float64] */)
}

def @func_9410() -> Tensor[(440), float64] {
  @func_3776() /* ty=Tensor[(440), float64] */
}

def @func_8486(%var_8454: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), uint16], Tensor[(16, 5, 1694), float32], Tensor[(8, 14, 5), float64]) {
  %807 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %808 = @func_7480() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %809 = %808.0;
  %810 = cast(%var_8454, dtype="uint16") /* ty=Tensor[(16, 5, 6), uint16] */;
  %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%809, dtype="uint16") /* ty=Tensor[(16, 5, 6), uint16] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %814 = @func_7022() /* ty=(Tensor[(16, 5, 1694), float32], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1694), bool]) */;
  %815 = %807.0;
  %816 = bitwise_xor(%812, %813) /* ty=Tensor[(16, 5, 6), uint16] */;
  %817 = %814.0;
  %818 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
  (%815, %816, %817, %818)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10400(%var_10332: Tensor[(1, 140), int64]) -> (Tensor[(16, 5, 6), float64], Tensor[(2, 5, 14), bool], Tensor[(1, 140), int64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(560), float32]) {
  %0 = @func_5090() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) */;
  %1 = cast(%var_10332, dtype="int64") /* ty=Tensor[(1, 140), int64] */;
  %2 = cast(%var_10332, dtype="int64") /* ty=Tensor[(1, 140), int64] */;
  %3 = reshape(%1, newshape=[2, 5, 14]) /* ty=Tensor[(2, 5, 14), int64] */;
  %4 = reshape(%2, newshape=[2, 5, 14]) /* ty=Tensor[(2, 5, 14), int64] */;
  %5 = @func_5585(%3, %4) /* ty=(Tensor[(2, 5, 14), bool],) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %7 = reshape(%6, newshape=[16, 5, 7]) /* ty=Tensor[(16, 5, 7), float32] */;
  %8 = %0.4;
  %9 = %5.0;
  %10 = @func_3745() /* ty=Tensor[(16, 5, 6), float64] */;
  %11 = @func_3846(%7) /* ty=Tensor[(16, 5, 7), float64] */;
  (%8, %9, %var_10332, %10, %11, meta[relay.Constant][0] /* ty=Tensor[(560), float32] */)
}

def @func_5540() -> (Tensor[(16, 5, 1), float32],) {
  %14 = fn () -> (Tensor[(16, 5, 1), float32],) {
    %12 = @func_5008() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %13 = %12.0;
    (%13,)
  };
  %14() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_758(%var_710: float64, %var_711: Tensor[(5, 14, 7), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) {
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %16 = reshape(%15, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %18 = reshape(%17, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %19 = cast(%var_710, dtype="float64") /* ty=float64 */;
  %20 = cast(%var_711, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
  %21 = power(%19, %20) /* ty=Tensor[(5, 14, 7), float64] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(5, 14, 7), float32] */;
  %23 = @func_396(%16) /* ty=Tensor[(2, 1, 14), uint8] */;
  %24 = cast(%23, dtype="uint8") /* ty=Tensor[(2, 1, 14), uint8] */;
  %25 = reshape(%24, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %26 = @func_396(%18) /* ty=Tensor[(2, 1, 14), uint8] */;
  %27 = exp(%22) /* ty=Tensor[(5, 14, 7), float32] */;
  %28 = @func_396(%25) /* ty=Tensor[(2, 1, 14), uint8] */;
  (%23, meta[relay.Constant][1] /* ty=Tensor[(28), uint8] */, %26, %27, %28)
}

def @func_8368() -> (Tensor[(16, 5, 6), float64],) {
  %29 = @func_4176() /* ty=Tensor[(16, 5, 6), float64] */;
  (%29,)
}

def @func_7247(%var_7241: Tensor[(40, 14), float32]) -> (Tensor[(8, 13, 5), float64], Tensor[(16, 5, 7), float64], Tensor[(40, 14), float32]) {
  %30 = @func_7218() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %31 = cast(%var_7241, dtype="float32") /* ty=Tensor[(40, 14), float32] */;
  %32 = reshape(%31, newshape=[16, 5, 7]) /* ty=Tensor[(16, 5, 7), float32] */;
  %33 = %30.1;
  %34 = @func_3846(%32) /* ty=Tensor[(16, 5, 7), float64] */;
  (%33, %34, %var_7241)
}

def @func_9753() -> (Tensor[(16, 5, 6), float64],) {
  %35 = @func_5369() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) */;
  %36 = %35.0;
  (%36,)
}

def @func_5647() -> (Tensor[(16, 5, 1694), float64], Tensor[(16, 5, 1), float32]) {
  @func_5645() /* ty=(Tensor[(16, 5, 1694), float64], Tensor[(16, 5, 1), float32]) */
}

def @func_5998() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) {
  %40 = fn () -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) {
    %37 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %38 = @func_4176() /* ty=Tensor[(16, 5, 6), float64] */;
    %39 = %37.0;
    (%38, %39)
  };
  %40() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) */
}

def @func_9299() -> (Tensor[(8, 14, 5), float64], Tensor[(16, 5, 1), float32]) {
  %45 = fn () -> (Tensor[(8, 14, 5), float64], Tensor[(16, 5, 1), float32]) {
    %41 = @func_8818() /* ty=(Tensor[(8, 14, 5), float64],) */;
    %42 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
    %43 = %41.0;
    %44 = %42.1;
    (%43, %44)
  };
  %45() /* ty=(Tensor[(8, 14, 5), float64], Tensor[(16, 5, 1), float32]) */
}

def @func_9155(%var_9153: Tensor[(5, 13, 5), float64]) -> (Tensor[(5, 13, 5), int8], Tensor[(8, 14, 5), float64]) {
  @func_9152(%var_9153) /* ty=(Tensor[(5, 13, 5), int8], Tensor[(8, 14, 5), float64]) */
}

def @func_6967(%var_6965: float64, %var_6966: Tensor[(490), float64]) -> (Tensor[(5, 14, 7), float32], float64, Tensor[(11, 8, 5), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490), bool], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(16, 5, 490), float64], Tensor[(490), uint32], Tensor[(440), float64]) {
  @func_6963(%var_6965, %var_6966) /* ty=(Tensor[(5, 14, 7), float32], float64, Tensor[(11, 8, 5), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490), bool], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(16, 5, 490), float64], Tensor[(490), uint32], Tensor[(440), float64]) */
}

def @func_762(%var_760: float64, %var_761: Tensor[(5, 14, 7), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) {
  @func_758(%var_760, %var_761) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) */
}

def @func_8701(%var_8682: Tensor[(8, 14, 5), float64]) -> (Tensor[(440), float64], Tensor[(8, 14, 5), uint32]) {
  %46 = @func_8147() /* ty=(Tensor[(440), float64],) */;
  %47 = @func_7900() /* ty=Tensor[(8, 14, 5), float64] */;
  %48 = cast(%var_8682, dtype="uint32") /* ty=Tensor[(8, 14, 5), uint32] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="uint32") /* ty=Tensor[(8, 14, 5), uint32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %52 = %46.0;
  %53 = bitwise_and(%50, %51) /* ty=Tensor[(8, 14, 5), uint32] */;
  (%52, %53)
}

def @func_9586() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float32]) {
  %56 = fn () -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float32]) {
    %54 = @func_6004() /* ty=Tensor[(16, 5, 1), float32] */;
    %55 = @func_7528() /* ty=Tensor[(16, 5, 6), float32] */;
    (%54, %55)
  };
  %56() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float32]) */
}

def @func_3177() -> (Tensor[(16, 5, 1), float32],) {
  %59 = fn () -> (Tensor[(16, 5, 1), float32],) {
    %57 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %58 = %57.0;
    (%58,)
  };
  %59() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_8401() -> (Tensor[(16, 5, ?), int8], Tensor[(16, 5, 6), float32]) {
  %60 = @func_8054() /* ty=(Tensor[(16, 5, ?), int8], Tensor[(440), float64], Tensor[(8, 14, 5), float64]) */;
  %61 = %60.0;
  %62 = @func_7528() /* ty=Tensor[(16, 5, 6), float32] */;
  (%61, %62)
}

def @func_2523(%var_2520: Tensor[(12, 12, 12), uint8], %var_2521: Tensor[(12, 12, 12), uint8], %var_2522: float64) -> (Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) {
  @func_2518(%var_2520, %var_2521, %var_2522) /* ty=(Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) */
}

def @func_4910() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) {
  @func_4908() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */
}

def @func_9677() -> (Tensor[(16, 5, 1), float64], Tensor[(16, 5, 1), float64]) {
  %63 = @func_8524() /* ty=(Tensor[(16, 5, 1), float64],) */;
  %64 = @func_8524() /* ty=(Tensor[(16, 5, 1), float64],) */;
  %65 = %63.0;
  %66 = %64.0;
  (%65, %66)
}

def @func_5779() -> (Tensor[(16, 5, 6), float64],) {
  %69 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %67 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %68 = %67.0;
    (%68,)
  };
  %69() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_10083() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) {
  %70 = @func_9710() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(13, 5, 4), float32], Tensor[(260), float64]) */;
  %71 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %72 = @func_4089() /* ty=Tensor[(16, 5, 6), float64] */;
  %73 = %70.0;
  %74 = %71.0;
  (%72, %73, %74)
}

def @func_2668() -> (Tensor[(16, 5, 6), float64],) {
  @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_8704(%var_8702: Tensor[(8, 14, 5), float64]) -> (Tensor[(440), float64], Tensor[(8, 14, 5), uint32]) {
  @func_8701(%var_8702) /* ty=(Tensor[(440), float64], Tensor[(8, 14, 5), uint32]) */
}

def @func_399(%var_397: Tensor[(2, 1, 14), uint8]) -> Tensor[(2, 1, 14), uint8] {
  @func_396(%var_397) /* ty=Tensor[(2, 1, 14), uint8] */
}

def @func_4176() -> Tensor[(16, 5, 6), float64] {
  %75 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %75.0
}

def @func_3987() -> (Tensor[(16, 5, 6), bool],) {
  %78 = fn () -> (Tensor[(16, 5, 6), bool],) {
    %76 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
    %77 = %76.1;
    (%77,)
  };
  %78() /* ty=(Tensor[(16, 5, 6), bool],) */
}

def @func_3628(%var_3625: Tensor[(10, 16, 4), uint16], %var_3626: Tensor[(10, 16, 4), uint16], %var_3627: Tensor[(121, 14), float64]) -> (Tensor[(10, 16, 4), uint16], Tensor[(14, 2), uint8], Tensor[(121, 14), float64], Tensor[(440), float64]) {
  %89 = fn (%var_3597: Tensor[(10, 16, 4), uint16], %var_3598: Tensor[(10, 16, 4), uint16], %var_3608: Tensor[(121, 14), float64]) -> (Tensor[(10, 16, 4), uint16], Tensor[(14, 2), uint8], Tensor[(121, 14), float64], Tensor[(440), float64]) {
    %79 = cast(%var_3598, dtype="uint16") /* ty=Tensor[(10, 16, 4), uint16] */;
    %80 = shape_of(%var_3597, dtype="int32") /* ty=Tensor[(3), int32] */;
    %81 = cast(%var_3597, dtype="uint16") /* ty=Tensor[(10, 16, 4), uint16] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %83 = cast(%var_3608, dtype="float64") /* ty=Tensor[(121, 14), float64] */;
    %84 = reshape(%83, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
    %85 = @func_818(%84) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
    %86 = add(%81, %82) /* ty=Tensor[(10, 16, 4), uint16] */;
    %87 = %85.2;
    %88 = @func_3481() /* ty=Tensor[(440), float64] */;
    (%86, %87, %var_3608, %88)
  };
  %89(%var_3625, %var_3626, %var_3627) /* ty=(Tensor[(10, 16, 4), uint16], Tensor[(14, 2), uint8], Tensor[(121, 14), float64], Tensor[(440), float64]) */
}

def @func_2585() -> Tensor[(16, 5, 6), float64] {
  @func_2583() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_9740(%var_9738: Tensor[(10, 7, 1), float32], %var_9739: Tensor[(10, 7, 14), float32]) -> (Tensor[(10, 7, 14), float32],) {
  %93 = fn (%var_9724: Tensor[(10, 7, 1), float32], %var_9725: Tensor[(10, 7, 14), float32]) -> (Tensor[(10, 7, 14), float32],) {
    %90 = cast(%var_9724, dtype="float32") /* ty=Tensor[(10, 7, 1), float32] */;
    %91 = cast(%var_9725, dtype="float32") /* ty=Tensor[(10, 7, 14), float32] */;
    %92 = divide(%90, %91) /* ty=Tensor[(10, 7, 14), float32] */;
    (%92,)
  };
  %93(%var_9738, %var_9739) /* ty=(Tensor[(10, 7, 14), float32],) */
}

def @func_9077(%var_9075: Tensor[(15246), float64], %var_9076: Tensor[(16, 5, 520), bool]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(1694), float64], Tensor[(15246), float64], Tensor[(440), float64], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 520), uint64], Tensor[(2, 1, 14), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), int16]) {
  %147 = fn (%var_8946: Tensor[(15246), float64], %var_9041: Tensor[(16, 5, 520), bool]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(1694), float64], Tensor[(15246), float64], Tensor[(440), float64], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 520), uint64], Tensor[(2, 1, 14), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), int16]) {
    %94 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
    %95 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %96 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
    %97 = cast(meta[relay.Constant][2] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
    %98 = cast(%var_8946, dtype="float64") /* ty=Tensor[(15246), float64] */;
    %99 = reshape(%97, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
    %100 = reshape(%98, newshape=[15246]) /* ty=Tensor[(15246), float64] */;
    %101 = @func_6103(%99, %100) /* ty=(Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) */;
    %102 = %101.0;
    %103 = cast(%102, dtype="float64") /* ty=Tensor[(16, 5, 520), float64] */;
    %104 = tan(%103) /* ty=Tensor[(16, 5, 520), float64] */;
    %105 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
    %106 = %105.0;
    %107 = cast(%104, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
    %108 = cast(%106, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
    %109 = greater_equal(%107, %108) /* ty=Tensor[(16, 5, 520), bool] */;
    %110 = @func_7062() /* ty=Tensor[(16, 5, 1), float64] */;
    %111 = cast(%109, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
    %112 = cast(%110, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
    %113 = less(%111, %112) /* ty=Tensor[(16, 5, 520), bool] */;
    %114 = cast(%102, dtype="uint64") /* ty=Tensor[(16, 5, 520), uint64] */;
    %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%113, dtype="uint64") /* ty=Tensor[(16, 5, 520), uint64] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %118 = cast(meta[relay.Constant][2] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
    %119 = cast(%var_8946, dtype="float64") /* ty=Tensor[(15246), float64] */;
    %120 = reshape(%118, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
    %121 = reshape(%119, newshape=[15246]) /* ty=Tensor[(15246), float64] */;
    %122 = @func_6103(%120, %121) /* ty=(Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) */;
    %123 = @func_7985() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %124 = cast(%104, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
    %125 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(%109, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %128 = logical_and(%126, %127) /* ty=Tensor[(16, 5, 520), bool] */;
    %129 = cast(%var_9041, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%128, dtype="bool") /* ty=Tensor[(16, 5, 520), bool] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %133 = greater(%131, %132) /* ty=Tensor[(16, 5, 520), bool] */;
    %134 = cast(%104, dtype="int16") /* ty=Tensor[(16, 5, 520), int16] */;
    %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%133, dtype="int16") /* ty=Tensor[(16, 5, 520), int16] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %138 = %94.3;
    %139 = %95.0;
    %140 = @func_3481() /* ty=Tensor[(440), float64] */;
    %141 = %96.1;
    %142 = left_shift(%116, %117) /* ty=Tensor[(16, 5, 520), uint64] */;
    %143 = %122.1;
    %144 = %123.0;
    %145 = @func_6004() /* ty=Tensor[(16, 5, 1), float32] */;
    %146 = minimum(%136, %137) /* ty=Tensor[(16, 5, 520), int16] */;
    (%138, %139, meta[relay.Constant][2] /* ty=Tensor[(1694), float64] */, %var_8946, %140, %141, %142, %143, %144, %145, %146)
  };
  %147(%var_9075, %var_9076) /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(1694), float64], Tensor[(15246), float64], Tensor[(440), float64], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 520), uint64], Tensor[(2, 1, 14), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), int16]) */
}

def @func_1578(%var_1577: Tensor[(11, 8, 5), float64]) -> (Tensor[(11, 8, 5), float64],) {
  %150 = fn (%var_1560: Tensor[(11, 8, 5), float64]) -> (Tensor[(11, 8, 5), float64],) {
    %148 = cast(%var_1560, dtype="float64") /* ty=Tensor[(11, 8, 5), float64] */;
    %149 = log(%148) /* ty=Tensor[(11, 8, 5), float64] */;
    (%149,)
  };
  %150(%var_1577) /* ty=(Tensor[(11, 8, 5), float64],) */
}

def @func_5546() -> (Tensor[(16, 5, 1), float32],) {
  %153 = fn () -> (Tensor[(16, 5, 1), float32],) {
    %151 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %152 = %151.0;
    (%152,)
  };
  %153() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_4565() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64]) {
  %164 = fn () -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64]) {
    %154 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %155 = cast(meta[relay.Constant][3] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
    %156 = reshape(%155, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
    %157 = @func_2970(%156) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) */;
    %158 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %159 = reshape(%158, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
    %160 = @func_1576(%159) /* ty=(Tensor[(11, 8, 5), float64],) */;
    %161 = %154.0;
    %162 = %157.2;
    %163 = %160.0;
    (%161, %162, meta[relay.Constant][3] /* ty=Tensor[(1694), float64] */, %163, meta[relay.Constant][4] /* ty=Tensor[(440), float64] */)
  };
  %164() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64]) */
}

def @func_5142() -> Tensor[(16, 5, 1), float32] {
  @func_3920() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_2715() -> (Tensor[(16, 5, 6), float64],) {
  %166 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %165 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
    (%165,)
  };
  %166() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_4420(%var_4411: Tensor[(1694), float64]) -> (Tensor[(16, 5, 6), float32], Tensor[(14, 2), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float64]) {
  %167 = @func_4015() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %168 = %167.0;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %170 = cast(%var_4411, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %171 = reshape(%170, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %172 = @func_818(%171) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %173 = cast(%var_4411, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %174 = reshape(%173, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
  %175 = @func_2309(%174) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) */;
  %176 = log2(%169) /* ty=Tensor[(16, 5, 6), float32] */;
  %177 = %172.2;
  %178 = %175.5;
  (%176, %177, %var_4411, %178)
}

def @func_5589(%var_5587: Tensor[(2, 5, 14), int64], %var_5588: Tensor[(2, 5, 14), int64]) -> (Tensor[(2, 5, 14), bool],) {
  @func_5585(%var_5587, %var_5588) /* ty=(Tensor[(2, 5, 14), bool],) */
}

def @func_4488(%var_4486: Tensor[(1, 520), float64], %var_4487: Tensor[(28), uint8]) -> (Tensor[(16, 5, 6), float32], Tensor[(?, 520), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(28), uint8], Tensor[(28), uint8]) {
  %200 = fn (%var_4436: Tensor[(1, 520), float64], %var_4483: Tensor[(28), uint8]) -> (Tensor[(16, 5, 6), float32], Tensor[(?, 520), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(28), uint8], Tensor[(28), uint8]) {
    %179 = @func_3986() /* ty=(Tensor[(16, 5, 6), bool],) */;
    %180 = %179.0;
    %181 = cast(%180, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
    %182 = cast(%var_4436, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
    %183 = reshape(%182, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
    %184 = @func_2389(%183) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
    %185 = %184.2;
    %186 = cast(%185, dtype="uint8") /* ty=Tensor[(8, 13, 5), uint8] */;
    %187 = shape_of(%var_4436, dtype="int32") /* ty=Tensor[(2), int32] */;
    %188 = cast(%var_4436, dtype="uint8") /* ty=Tensor[(1, 520), uint8] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %190 = @func_3139() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %191 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %192 = cast(%var_4483, dtype="uint8") /* ty=Tensor[(28), uint8] */;
    %193 = reshape(%192, newshape=[28]) /* ty=Tensor[(28), uint8] */;
    %194 = @func_2740(%193) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) */;
    %195 = tan(%181) /* ty=Tensor[(16, 5, 6), float32] */;
    %196 = bitwise_xor(%188, %189) /* ty=Tensor[(?, 520), uint8] */;
    %197 = %190.0;
    %198 = %191.0;
    %199 = %194.3;
    (%195, %196, %197, %198, %199, %var_4483)
  };
  %200(%var_4486, %var_4487) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(?, 520), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(28), uint8], Tensor[(28), uint8]) */
}

def @func_6592() -> (Tensor[(16, 5, 6), float64], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8]) {
  %201 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %202 = cast(meta[relay.Constant][5] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %203 = reshape(%202, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %204 = %201.0;
  %205 = @func_396(%203) /* ty=Tensor[(2, 1, 14), uint8] */;
  (%204, %205, meta[relay.Constant][5] /* ty=Tensor[(28), uint8] */)
}

def @func_8588() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) {
  %206 = @func_7218() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %207 = @func_4966() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) */;
  %208 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %209 = %206.0;
  %210 = %207.1;
  %211 = %208.0;
  (%209, %210, %211)
}

def @func_6265() -> Tensor[(16, 5, 6), bool] {
  @func_6263() /* ty=Tensor[(16, 5, 6), bool] */
}

def @func_10279() -> Tensor[(16, 5, 6), float64] {
  @func_10277() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_3684() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) {
  @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */
}

def @func_3909(%var_3908: Tensor[(9, 13, 16), float64]) -> (Tensor[(9, 13, 16), float64],) {
  %214 = fn (%var_3902: Tensor[(9, 13, 16), float64]) -> (Tensor[(9, 13, 16), float64],) {
    %212 = cast(%var_3902, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
    %213 = tan(%212) /* ty=Tensor[(9, 13, 16), float64] */;
    (%213,)
  };
  %214(%var_3908) /* ty=(Tensor[(9, 13, 16), float64],) */
}

def @func_3849(%var_3847: Tensor[(16, 5, 7), float32]) -> Tensor[(16, 5, 7), float64] {
  @func_3846(%var_3847) /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_4365(%var_4363: Tensor[(1694, 9), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) {
  @func_4362(%var_4363) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) */
}

def @func_9246() -> Tensor[(16, 5, 6), float64] {
  @func_9244() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_5235() -> Tensor[(1, 13, 5), float64] {
  @func_5233() /* ty=Tensor[(1, 13, 5), float64] */
}

def @func_9287(%var_9286: Tensor[(13, 5, 4), float64]) -> (Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), float32]) {
  %219 = fn (%var_9252: Tensor[(13, 5, 4), float64]) -> (Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), float32]) {
    %215 = cast(%var_9252, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
    %216 = cast(%var_9252, dtype="float32") /* ty=Tensor[(13, 5, 4), float32] */;
    %217 = rsqrt(%215) /* ty=Tensor[(13, 5, 4), float64] */;
    %218 = log(%216) /* ty=Tensor[(13, 5, 4), float32] */;
    (%217, %218)
  };
  %219(%var_9286) /* ty=(Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), float32]) */
}

def @func_4625() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) {
  @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */
}

def @func_4089() -> Tensor[(16, 5, 6), float64] {
  @func_3572() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_7528() -> Tensor[(16, 5, 6), float32] {
  %220 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %221 = %220.0;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  exp(%222) /* ty=Tensor[(16, 5, 6), float32] */
}

def @func_2000(%var_1999: Tensor[(1694), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float32]) {
  %231 = fn (%var_1985: Tensor[(1694), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float32]) {
    %223 = cast(%var_1985, dtype="float64") /* ty=Tensor[(1694), float64] */;
    %224 = reshape(%223, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
    %225 = @func_818(%224) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
    %226 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %227 = %226.0;
    %228 = cast(%227, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
    %229 = %225.1;
    %230 = asin(%228) /* ty=Tensor[(16, 5, 1), float32] */;
    (%229, %var_1985, %230)
  };
  %231(%var_1999) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float32]) */
}

def @func_5701() -> (Tensor[(16, 5, 6), float64],) {
  %234 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %232 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %233 = %232.0;
    (%233,)
  };
  %234() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_10011(%var_10005: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), bool],) {
  %235 = @func_6473() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %236 = %235.0;
  %237 = cast(%var_10005, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = less(%239, %240) /* ty=Tensor[(16, 5, 6), bool] */;
  (%241,)
}

def @func_4747() -> (Tensor[(16, 11, 1), float64],) {
  %244 = fn () -> (Tensor[(16, 11, 1), float64],) {
    %242 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 11, 1), float64] */;
    %243 = log10(%242) /* ty=Tensor[(16, 11, 1), float64] */;
    (%243,)
  };
  %244() /* ty=(Tensor[(16, 11, 1), float64],) */
}

def @func_8054() -> (Tensor[(16, 5, ?), int8], Tensor[(440), float64], Tensor[(8, 14, 5), float64]) {
  %245 = @func_7405() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) */;
  %246 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %247 = @func_7490() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %248 = %247.0;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %250 = cos(%249) /* ty=Tensor[(8, 14, 5), float64] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %252 = %245.1;
  %253 = %246.2;
  %254 = asin(%251) /* ty=Tensor[(8, 14, 5), float64] */;
  (%252, %253, %254)
}

def @func_4908() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) {
  %255 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %256 = %255.0;
  %257 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %258 = @func_4089() /* ty=Tensor[(16, 5, 6), float64] */;
  (%256, %257, %258)
}

def @func_9769(%var_9767: Tensor[(1, 9, 12), float64]) -> (Tensor[(1, 9, 12), float64], Tensor[(16, 5, 6), float64]) {
  @func_9766(%var_9767) /* ty=(Tensor[(1, 9, 12), float64], Tensor[(16, 5, 6), float64]) */
}

def @main(%var_10520: Tensor[(13, 9, 1), int16], %var_10538: Tensor[(13, 9, 5), int16]) -> Tensor[(13, 9, 5), int32] {
  %259 = cast(%var_10520, dtype="int16") /* ty=Tensor[(13, 9, 1), int16] */;
  %260 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 9, 5), int16] */, dtype="int16") /* ty=Tensor[(13, 9, 5), int16] */;
  %261 = right_shift(%259, %260) /* ty=Tensor[(13, 9, 5), int16] */;
  %262 = cast(%var_10538, dtype="int32") /* ty=Tensor[(13, 9, 5), int32] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="int32") /* ty=Tensor[(13, 9, 5), int32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%264, %265) /* ty=Tensor[(13, 9, 5), int32] */
}

def @func_1872() -> (Tensor[(16, 5, 1), float32],) {
  %266 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %267 = tan(%266) /* ty=Tensor[(16, 5, 1), float32] */;
  (%267,)
}

def @func_9805() -> Tensor[(440), float64] {
  @func_9803() /* ty=Tensor[(440), float64] */
}

def @func_7817(%var_7815: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 11, 1), float64], Tensor[(16, 5, 6), float32], Tensor[(16, 11, 1), float64]) {
  @func_7814(%var_7815) /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 11, 1), float64], Tensor[(16, 5, 6), float32], Tensor[(16, 11, 1), float64]) */
}

def @func_2849() -> (Tensor[(16, 5, 6), float64],) {
  @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_5585(%var_5574: Tensor[(2, 5, 14), int64], %var_5575: Tensor[(2, 5, 14), int64]) -> (Tensor[(2, 5, 14), bool],) {
  %268 = cast(%var_5575, dtype="bool") /* ty=Tensor[(2, 5, 14), bool] */;
  %269 = shape_of(%var_5574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_5574, dtype="bool") /* ty=Tensor[(2, 5, 14), bool] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %272 = equal(%270, %271) /* ty=Tensor[(2, 5, 14), bool] */;
  (%272,)
}

def @func_2309(%var_2291: Tensor[(121, 14), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) {
  %273 = cast(meta[relay.Constant][9] /* ty=Tensor[(880), float32] */, dtype="float32") /* ty=Tensor[(880), float32] */;
  %274 = reshape(%273, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float32] */;
  %275 = cast(%var_2291, dtype="float64") /* ty=Tensor[(121, 14), float64] */;
  %276 = reshape(%275, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %277 = @func_818(%276) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %278 = cast(%var_2291, dtype="float64") /* ty=Tensor[(121, 14), float64] */;
  %279 = reshape(%278, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %280 = @func_818(%279) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %281 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %282 = %281.0;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %284 = @func_2097(%274) /* ty=Tensor[(10, 8, 11), float32] */;
  %285 = %277.1;
  %286 = %280.2;
  %287 = log2(%283) /* ty=Tensor[(16, 5, 1), float64] */;
  (%284, meta[relay.Constant][9] /* ty=Tensor[(880), float32] */, %285, %var_2291, %286, %287)
}

def @func_5092() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) {
  @func_5090() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) */
}

def @func_4966() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) {
  %288 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %289 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %290 = %289.4;
  %291 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %292 = cast(%290, dtype="float32") /* ty=Tensor[(520), float32] */;
  %293 = cast(%291, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %294 = @func_4089() /* ty=Tensor[(16, 5, 6), float64] */;
  %295 = %288.1;
  %296 = subtract(%292, %293) /* ty=Tensor[(16, 5, 520), float32] */;
  (%294, %295, %296)
}

def @func_7100() -> (Tensor[(13, 5, 14), int16], Tensor[(2, 1, 14), uint8], Tensor[(96, 18), float32]) {
  %297 = cast(meta[relay.Constant][10] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %298 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 5, 14), int16] */, dtype="int16") /* ty=Tensor[(13, 5, 14), int16] */;
  %299 = cast(meta[relay.Constant][12] /* ty=Tensor[(96, 18), uint8] */, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(96, 18), uint8] */, dtype="uint8") /* ty=Tensor[(96, 18), uint8] */;
  %301 = cast(meta[relay.Constant][10] /* ty=int16 */, dtype="float64") /* ty=float64 */;
  %302 = reshape(%299, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %303 = reshape(%300, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %304 = reshape(%301, newshape=[]) /* ty=float64 */;
  %305 = @func_2518(%302, %303, %304) /* ty=(Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) */;
  %306 = cast(meta[relay.Constant][12] /* ty=Tensor[(96, 18), uint8] */, dtype="float32") /* ty=Tensor[(96, 18), float32] */;
  %307 = multiply(%297, %298) /* ty=Tensor[(13, 5, 14), int16] */;
  %308 = %305.1;
  %309 = sin(%306) /* ty=Tensor[(96, 18), float32] */;
  (%307, %308, %309)
}

def @func_7897() -> (Tensor[(440), float64],) {
  @func_7895() /* ty=(Tensor[(440), float64],) */
}

def @func_10099(%var_10097: float64, %var_10098: Tensor[(1, 6, 2), float64]) -> Tensor[(1, 6, 2), float64] {
  %312 = fn (%var_10088: float64, %var_10089: Tensor[(1, 6, 2), float64]) -> Tensor[(1, 6, 2), float64] {
    %310 = cast(%var_10088, dtype="float64") /* ty=float64 */;
    %311 = cast(%var_10089, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
    power(%310, %311) /* ty=Tensor[(1, 6, 2), float64] */
  };
  %312(%var_10097, %var_10098) /* ty=Tensor[(1, 6, 2), float64] */
}

def @func_3745() -> Tensor[(16, 5, 6), float64] {
  %313 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %313.0
}

def @func_9410() -> Tensor[(440), float64] {
  @func_3776() /* ty=Tensor[(440), float64] */
}

def @func_2070() -> Tensor[(16, 5, 1), float32] {
  %315 = fn () -> Tensor[(16, 5, 1), float32] {
    %314 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %314.0
  };
  %315() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_4523() -> Tensor[(16, 5, 6), float64] {
  @func_4521() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_8227() -> Tensor[(8, 14, 5), float64] {
  %316 = @func_7490() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %316.0
}

def @func_3140() -> (Tensor[(16, 5, 6), float64],) {
  %319 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %317 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %318 = %317.0;
    (%318,)
  };
  %319() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_2847() -> (Tensor[(16, 5, 6), float64],) {
  %320 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %321 = %320.0;
  (%321,)
}

def @func_3920() -> Tensor[(16, 5, 1), float32] {
  @func_2069() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_4237(%var_4231: Tensor[(4, 140), float32]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(4, 140), float32]) {
  %322 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %323 = cast(%var_4231, dtype="float32") /* ty=Tensor[(4, 140), float32] */;
  %324 = reshape(%323, newshape=[16, 5, 7]) /* ty=Tensor[(16, 5, 7), float32] */;
  %325 = %322.0;
  %326 = @func_3846(%324) /* ty=Tensor[(16, 5, 7), float64] */;
  (%325, %326, %var_4231)
}

def @func_6473() -> (Tensor[(16, 5, 6), float64],) {
  %327 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %328 = %327.0;
  (%328,)
}

def @func_9839() -> (Tensor[(1, 13, 5), float64],) {
  @func_9837() /* ty=(Tensor[(1, 13, 5), float64],) */
}

def @func_9679() -> (Tensor[(16, 5, 1), float64], Tensor[(16, 5, 1), float64]) {
  @func_9677() /* ty=(Tensor[(16, 5, 1), float64], Tensor[(16, 5, 1), float64]) */
}

def @func_8742() -> (Tensor[(16, 5, 6), float64],) {
  @func_8740() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_9837() -> (Tensor[(1, 13, 5), float64],) {
  %329 = @func_9694() /* ty=Tensor[(1, 13, 5), float64] */;
  (%329,)
}

def @func_9244() -> Tensor[(16, 5, 6), float64] {
  @func_3745() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_5844() -> (Tensor[(16, 5, 1), float32],) {
  @func_5842() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_4779() -> (Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) {
  %330 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %331 = cast(meta[relay.Constant][13] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %332 = reshape(%331, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %333 = @func_2970(%332) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) */;
  %334 = %333.0;
  %335 = cast(meta[relay.Constant][13] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %336 = cast(%334, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %337 = minimum(%335, %336) /* ty=Tensor[(16, 5, 1694), float64] */;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(16, 5, 1694), float64] */;
  %339 = %330.3;
  %340 = sqrt(%338) /* ty=Tensor[(16, 5, 1694), float64] */;
  (%339, %340)
}

def @func_4148(%var_4145: Tensor[(28), uint8]) -> (Tensor[(16, 5, 6), bool], Tensor[(28), uint8], Tensor[(28), uint8]) {
  %341 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %342 = cast(%var_4145, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %343 = reshape(%342, newshape=[28]) /* ty=Tensor[(28), uint8] */;
  %344 = @func_2740(%343) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) */;
  %345 = %341.1;
  %346 = %344.3;
  (%345, %346, %var_4145)
}

def @func_7064() -> Tensor[(16, 5, 1), float64] {
  @func_7062() /* ty=Tensor[(16, 5, 1), float64] */
}

def @func_9152(%var_9144: Tensor[(5, 13, 5), float64]) -> (Tensor[(5, 13, 5), int8], Tensor[(8, 14, 5), float64]) {
  %347 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="int8") /* ty=Tensor[(1, 13, 5), int8] */;
  %350 = cast(%var_9144, dtype="int8") /* ty=Tensor[(5, 13, 5), int8] */;
  %351 = @func_8630() /* ty=(Tensor[(8, 14, 5), float64],) */;
  %352 = bitwise_or(%349, %350) /* ty=Tensor[(5, 13, 5), int8] */;
  %353 = %351.0;
  (%352, %353)
}

def @func_6475() -> (Tensor[(16, 5, 6), float64],) {
  @func_6473() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_5515() -> Tensor[(16, 5, 6), float64] {
  %354 = fn () -> Tensor[(16, 5, 6), float64] {
    @func_4089() /* ty=Tensor[(16, 5, 6), float64] */
  };
  %354() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_8740() -> (Tensor[(16, 5, 6), float64],) {
  %355 = @func_8588() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
  %356 = %355.0;
  (%356,)
}

def @func_5279(%var_5240: Tensor[(16, 5, 16), float32], %var_5261: Tensor[(28), uint8]) -> (Tensor[(16, 5, 16), float32], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(28), uint8], Tensor[(16, 5, 1), float32]) {
  %357 = @func_3952() /* ty=(Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %358 = %357.1;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
  %360 = cast(%var_5240, dtype="float32") /* ty=Tensor[(16, 5, 16), float32] */;
  %361 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %362 = cast(%var_5261, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %363 = reshape(%362, newshape=[28]) /* ty=Tensor[(28), uint8] */;
  %364 = @func_2740(%363) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) */;
  %365 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %366 = mod(%359, %360) /* ty=Tensor[(16, 5, 16), float32] */;
  %367 = %361.0;
  %368 = %364.4;
  %369 = %365.0;
  (%366, %367, %368, %var_5261, %369)
}

def @func_8486(%var_8454: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), uint16], Tensor[(16, 5, 1694), float32], Tensor[(8, 14, 5), float64]) {
  %370 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %371 = @func_7480() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %372 = %371.0;
  %373 = cast(%var_8454, dtype="uint16") /* ty=Tensor[(16, 5, 6), uint16] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="uint16") /* ty=Tensor[(16, 5, 6), uint16] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %377 = @func_7022() /* ty=(Tensor[(16, 5, 1694), float32], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1694), bool]) */;
  %378 = %370.0;
  %379 = bitwise_xor(%375, %376) /* ty=Tensor[(16, 5, 6), uint16] */;
  %380 = %377.0;
  %381 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
  (%378, %379, %380, %381)
}

def @func_9803() -> Tensor[(440), float64] {
  %382 = @func_8147() /* ty=(Tensor[(440), float64],) */;
  %382.0
}

def @func_6151(%var_6149: Tensor[(4, 6, 1), float64], %var_6150: Tensor[(4, 6, 9), float64]) -> Tensor[(4, 6, 9), bool] {
  @func_6147(%var_6149, %var_6150) /* ty=Tensor[(4, 6, 9), bool] */
}

def @func_5842() -> (Tensor[(16, 5, 1), float32],) {
  %383 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %384 = %383.0;
  (%384,)
}

def @func_10497(%var_10493: Tensor[(9, 9, 1), float64], %var_10494: Tensor[(693, 22), float64], %var_10495: Tensor[(440), float64], %var_10496: Tensor[(108), float64]) -> (Tensor[(693, 22), float64], Tensor[(1, 9, 12), float64], Tensor[(108), float64], Tensor[(9, 9, 440), bool]) {
  %408 = fn (%var_10461: Tensor[(9, 9, 1), float64], %var_10469: Tensor[(693, 22), float64], %var_10474: Tensor[(440), float64], %var_10482: Tensor[(108), float64]) -> (Tensor[(693, 22), float64], Tensor[(1, 9, 12), float64], Tensor[(108), float64], Tensor[(9, 9, 440), bool]) {
    %385 = cast(%var_10482, dtype="float64") /* ty=Tensor[(108), float64] */;
    %386 = reshape(%385, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float64] */;
    %387 = @func_9766(%386) /* ty=(Tensor[(1, 9, 12), float64], Tensor[(16, 5, 6), float64]) */;
    %388 = cast(%var_10461, dtype="float64") /* ty=Tensor[(9, 9, 1), float64] */;
    %389 = acos(%388) /* ty=Tensor[(9, 9, 1), float64] */;
    %390 = cast(%var_10461, dtype="bool") /* ty=Tensor[(9, 9, 1), bool] */;
    %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%389, dtype="bool") /* ty=Tensor[(9, 9, 1), bool] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %394 = logical_or(%392, %393) /* ty=Tensor[(9, 9, ?), bool] */;
    %395 = cast(%var_10469, dtype="float64") /* ty=Tensor[(693, 22), float64] */;
    %396 = reshape(%395, newshape=[1694, 9]) /* ty=Tensor[(1694, 9), float64] */;
    %397 = @func_4362(%396) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) */;
    %398 = %397.5;
    %399 = cast(%var_10474, dtype="float32") /* ty=Tensor[(440), float32] */;
    %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(1), int32] */;
    %401 = cast(%398, dtype="float32") /* ty=Tensor[(440), float32] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?), float32] */;
    %403 = power(%401, %402) /* ty=Tensor[(440), float32] */;
    %404 = cast(%394, dtype="bool") /* ty=Tensor[(9, 9, ?), bool] */;
    %405 = cast(%403, dtype="bool") /* ty=Tensor[(440), bool] */;
    %406 = %387.0;
    %407 = greater(%404, %405) /* ty=Tensor[(9, 9, 440), bool] */;
    (%var_10469, %406, %var_10482, %407)
  };
  %408(%var_10493, %var_10494, %var_10495, %var_10496) /* ty=(Tensor[(693, 22), float64], Tensor[(1, 9, 12), float64], Tensor[(108), float64], Tensor[(9, 9, 440), bool]) */
}

def @func_7895() -> (Tensor[(440), float64],) {
  %409 = @func_3776() /* ty=Tensor[(440), float64] */;
  (%409,)
}

def @func_7852(%var_7826: Tensor[(12, 14, 9), float32]) -> (Tensor[(16, 5, 1), float32], Tensor[(12, 14, 9), float64]) {
  %410 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %411 = cast(%var_7826, dtype="float32") /* ty=Tensor[(12, 14, 9), float32] */;
  %412 = cosh(%411) /* ty=Tensor[(12, 14, 9), float32] */;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(12, 14, 9), float64] */;
  %414 = %410.0;
  %415 = sinh(%413) /* ty=Tensor[(12, 14, 9), float64] */;
  (%414, %415)
}

def @func_6684() -> (Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) {
  %416 = @func_6473() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %417 = %416.0;
  %418 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 5, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %422 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %423 = less_equal(%420, %421) /* ty=Tensor[(16, 5, 6), bool] */;
  %424 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %425 = %422.0;
  %426 = @func_5142() /* ty=Tensor[(16, 5, 1), float32] */;
  (%423, %424, %425, %426)
}

def @func_6686() -> (Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) {
  @func_6684() /* ty=(Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) */
}

def @func_8631() -> (Tensor[(8, 14, 5), float64],) {
  %428 = fn () -> (Tensor[(8, 14, 5), float64],) {
    %427 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
    (%427,)
  };
  %428() /* ty=(Tensor[(8, 14, 5), float64],) */
}

def @func_2666() -> (Tensor[(16, 5, 6), float64],) {
  %429 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %430 = %429.0;
  %431 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %432 = cast(%430, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %433 = cast(%431, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  %434 = floor_divide(%432, %433) /* ty=Tensor[(16, 5, 6), float64] */;
  (%434,)
}

def @func_8820() -> (Tensor[(8, 14, 5), float64],) {
  @func_8818() /* ty=(Tensor[(8, 14, 5), float64],) */
}

def @func_8202(%var_8201: Tensor[(1, 12, 3), float64]) -> (Tensor[(1, 12, 3), float32],) {
  %439 = fn (%var_8181: Tensor[(1, 12, 3), float64]) -> (Tensor[(1, 12, 3), float32],) {
    %435 = cast(%var_8181, dtype="float64") /* ty=Tensor[(1, 12, 3), float64] */;
    %436 = cos(%435) /* ty=Tensor[(1, 12, 3), float64] */;
    %437 = cast(%436, dtype="float32") /* ty=Tensor[(1, 12, 3), float32] */;
    %438 = acos(%437) /* ty=Tensor[(1, 12, 3), float32] */;
    (%438,)
  };
  %439(%var_8201) /* ty=(Tensor[(1, 12, 3), float32],) */
}

def @func_9095() -> Tensor[(16, 5, 6), float64] {
  %441 = fn () -> Tensor[(16, 5, 6), float64] {
    %440 = @func_8588() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
    %440.1
  };
  %441() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_3238() -> (Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) {
  %454 = fn () -> (Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) {
    %442 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %443 = %442.0;
    %444 = cast(%443, dtype="float32") /* ty=Tensor[(16, 5, 1), float32] */;
    %445 = cast(meta[relay.Constant][15] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %446 = reshape(%445, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
    %447 = @func_1576(%446) /* ty=(Tensor[(11, 8, 5), float64],) */;
    %448 = cast(meta[relay.Constant][16] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
    %449 = reshape(%448, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
    %450 = @func_2309(%449) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) */;
    %451 = sinh(%444) /* ty=Tensor[(16, 5, 1), float32] */;
    %452 = %447.0;
    %453 = %450.3;
    (%451, %452, meta[relay.Constant][15] /* ty=Tensor[(440), float64] */, %453, meta[relay.Constant][16] /* ty=Tensor[(1694), float64] */)
  };
  %454() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */
}

def @func_9358() -> (Tensor[(16, 5, 6), float64],) {
  %455 = @func_5090() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) */;
  %456 = %455.3;
  (%456,)
}

def @func_7126() -> (Tensor[(16, 5, 6), float64],) {
  %457 = @func_3432() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) */;
  %458 = %457.0;
  (%458,)
}

def @func_8148() -> (Tensor[(440), float64],) {
  %461 = fn () -> (Tensor[(440), float64],) {
    %459 = @func_4564() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64]) */;
    %460 = %459.4;
    (%460,)
  };
  %461() /* ty=(Tensor[(440), float64],) */
}

def @func_8590() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) {
  @func_8588() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */
}

def @func_5283(%var_5281: Tensor[(16, 5, 16), float32], %var_5282: Tensor[(28), uint8]) -> (Tensor[(16, 5, 16), float32], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(28), uint8], Tensor[(16, 5, 1), float32]) {
  @func_5279(%var_5281, %var_5282) /* ty=(Tensor[(16, 5, 16), float32], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(28), uint8], Tensor[(16, 5, 1), float32]) */
}

def @func_8525() -> (Tensor[(16, 5, 1), float64],) {
  %463 = fn () -> (Tensor[(16, 5, 1), float64],) {
    %462 = @func_7062() /* ty=Tensor[(16, 5, 1), float64] */;
    (%462,)
  };
  %463() /* ty=(Tensor[(16, 5, 1), float64],) */
}

def @func_9755() -> (Tensor[(16, 5, 6), float64],) {
  @func_9753() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_7406() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) {
  %473 = fn () -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) {
    %464 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
    %465 = @func_6684() /* ty=(Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) */;
    %466 = %465.3;
    %467 = cast(%466, dtype="int8") /* ty=Tensor[(16, 5, 1), int8] */;
    %468 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%464, dtype="int8") /* ty=Tensor[(16, 5, 1), int8] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %471 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
    %472 = bitwise_or(%469, %470) /* ty=Tensor[(16, 5, ?), int8] */;
    (%471, %472)
  };
  %473() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) */
}

def @func_8351() -> (Tensor[(16, 5, 6), float64],) {
  @func_8349() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_9710() -> (Tensor[(16, 5, 1), float32], Tensor[(13, 5, 4), float32], Tensor[(260), float64]) {
  %474 = @func_5539() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %475 = cast(meta[relay.Constant][17] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %476 = reshape(%475, newshape=[13, 5, 4]) /* ty=Tensor[(13, 5, 4), float64] */;
  %477 = @func_9285(%476) /* ty=(Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), float32]) */;
  %478 = %474.0;
  %479 = %477.1;
  (%478, %479, meta[relay.Constant][17] /* ty=Tensor[(260), float64] */)
}

def @func_5010() -> (Tensor[(16, 5, 1), float32],) {
  @func_5008() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_3573() -> Tensor[(16, 5, 6), float64] {
  %481 = fn () -> Tensor[(16, 5, 6), float64] {
    %480 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %480.0
  };
  %481() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_10085() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) {
  @func_10083() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32]) */
}

def @func_9194() -> (Tensor[(16, 5, 6), float64],) {
  @func_9192() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_7901() -> Tensor[(8, 14, 5), float64] {
  %483 = fn () -> Tensor[(8, 14, 5), float64] {
    %482 = @func_7490() /* ty=(Tensor[(8, 14, 5), float64],) */;
    %482.0
  };
  %483() /* ty=Tensor[(8, 14, 5), float64] */
}

def @func_6458(%var_6456: Tensor[(520), float64], %var_6457: Tensor[(7, 4), uint8]) -> (Tensor[(16, 5, 6), float64], Tensor[(28), uint8], Tensor[(7, 4), uint8], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), float32], Tensor[(16, 5, 520), float64], Tensor[(16, 5, 520), float64]) {
  %513 = fn (%var_6365: Tensor[(520), float64], %var_6366: Tensor[(7, 4), uint8]) -> (Tensor[(16, 5, 6), float64], Tensor[(28), uint8], Tensor[(7, 4), uint8], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), float32], Tensor[(16, 5, 520), float64], Tensor[(16, 5, 520), float64]) {
    %484 = cast(%var_6365, dtype="float64") /* ty=Tensor[(520), float64] */;
    %485 = cast(%var_6366, dtype="uint8") /* ty=Tensor[(7, 4), uint8] */;
    %486 = reshape(%484, newshape=[1, 520]) /* ty=Tensor[(1, 520), float64] */;
    %487 = reshape(%485, newshape=[28]) /* ty=Tensor[(28), uint8] */;
    %488 = @func_4485(%486, %487) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(?, 520), uint8], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(28), uint8], Tensor[(28), uint8]) */;
    %489 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
    %490 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
    %491 = %490.0;
    %492 = cast(%var_6365, dtype="bool") /* ty=Tensor[(520), bool] */;
    %493 = cast(%491, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
    %494 = equal(%492, %493) /* ty=Tensor[(16, 5, 520), bool] */;
    %495 = cast(%var_6365, dtype="float32") /* ty=Tensor[(520), float32] */;
    %496 = cast(%494, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
    %497 = floor_mod(%495, %496) /* ty=Tensor[(16, 5, 520), float32] */;
    %498 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 5, 520), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
    %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%497, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %502 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 5, 520), float32] */, dtype="float64") /* ty=Tensor[(16, 5, 520), float64] */;
    %503 = cast(%var_6365, dtype="float64") /* ty=Tensor[(520), float64] */;
    %504 = cast(%494, dtype="float32") /* ty=Tensor[(16, 5, 520), float32] */;
    %505 = exp(%504) /* ty=Tensor[(16, 5, 520), float32] */;
    %506 = cast(%505, dtype="float64") /* ty=Tensor[(16, 5, 520), float64] */;
    %507 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
    %508 = %488.5;
    %509 = %489.0;
    %510 = floor_divide(%500, %501) /* ty=Tensor[(16, 5, 520), float32] */;
    %511 = maximum(%502, %503) /* ty=Tensor[(16, 5, 520), float64] */;
    %512 = atan(%506) /* ty=Tensor[(16, 5, 520), float64] */;
    (%507, %508, %var_6366, %509, %510, %511, %512)
  };
  %513(%var_6456, %var_6457) /* ty=(Tensor[(16, 5, 6), float64], Tensor[(28), uint8], Tensor[(7, 4), uint8], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 520), float32], Tensor[(16, 5, 520), float64], Tensor[(16, 5, 520), float64]) */
}

def @func_7481() -> (Tensor[(16, 5, 6), float64],) {
  %515 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %514 = @func_4521() /* ty=Tensor[(16, 5, 6), float64] */;
    (%514,)
  };
  %515() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_2438() -> (Tensor[(16, 5, 1), float32],) {
  %518 = fn () -> (Tensor[(16, 5, 1), float32],) {
    %516 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %517 = %516.0;
    (%517,)
  };
  %518() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_7023() -> (Tensor[(16, 5, 1694), float32], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1694), bool]) {
  %544 = fn () -> (Tensor[(16, 5, 1694), float32], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1694), bool]) {
    %519 = @func_5645() /* ty=(Tensor[(16, 5, 1694), float64], Tensor[(16, 5, 1), float32]) */;
    %520 = %519.0;
    %521 = cast(%520, dtype="float64") /* ty=Tensor[(16, 5, 1694), float64] */;
    %522 = sinh(%521) /* ty=Tensor[(16, 5, 1694), float64] */;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(16, 5, 1694), float64] */;
    %524 = asinh(%523) /* ty=Tensor[(16, 5, 1694), float64] */;
    %525 = cast(%522, dtype="int32") /* ty=Tensor[(16, 5, 1694), int32] */;
    %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(%524, dtype="int32") /* ty=Tensor[(16, 5, 1694), int32] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %529 = bitwise_xor(%527, %528) /* ty=Tensor[(16, 5, 1694), int32] */;
    %530 = cast(%529, dtype="float32") /* ty=Tensor[(16, 5, 1694), float32] */;
    %531 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%524, dtype="float32") /* ty=Tensor[(16, 5, 1694), float32] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %534 = @func_4908() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
    %535 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %536 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %537 = %536.0;
    %538 = cast(%524, dtype="bool") /* ty=Tensor[(16, 5, 1694), bool] */;
    %539 = cast(%537, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
    %540 = mod(%532, %533) /* ty=Tensor[(16, 5, 1694), float32] */;
    %541 = %534.0;
    %542 = %535.0;
    %543 = less(%538, %539) /* ty=Tensor[(16, 5, 1694), bool] */;
    (%540, %541, %542, %543)
  };
  %544() /* ty=(Tensor[(16, 5, 1694), float32], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1694), bool]) */
}

def @func_6005() -> Tensor[(16, 5, 1), float32] {
  %546 = fn () -> Tensor[(16, 5, 1), float32] {
    %545 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
    %545.0
  };
  %546() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_8489(%var_8487: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), uint16], Tensor[(16, 5, 1694), float32], Tensor[(8, 14, 5), float64]) {
  @func_8486(%var_8487) /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), uint16], Tensor[(16, 5, 1694), float32], Tensor[(8, 14, 5), float64]) */
}

def @func_5371() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) {
  @func_5369() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) */
}

def @func_4362(%var_4347: Tensor[(1694, 9), float64]) -> (Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) {
  %547 = cast(meta[relay.Constant][19] /* ty=Tensor[(28), uint8] */, dtype="uint8") /* ty=Tensor[(28), uint8] */;
  %548 = reshape(%547, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
  %549 = cast(meta[relay.Constant][20] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %550 = reshape(%549, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
  %551 = @func_1576(%550) /* ty=(Tensor[(11, 8, 5), float64],) */;
  %552 = @func_3897() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694, 1), float64]) */;
  %553 = %552.2;
  %554 = cast(%553, dtype="int32") /* ty=Tensor[(1694, 1), int32] */;
  %555 = cast(%var_4347, dtype="int32") /* ty=Tensor[(1694, 9), int32] */;
  %556 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %557 = cast(%553, dtype="float64") /* ty=Tensor[(1694, 1), float64] */;
  %558 = reshape(%557, newshape=[14, 11, 11]) /* ty=Tensor[(14, 11, 11), float64] */;
  %559 = @func_818(%558) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */;
  %560 = @func_396(%548) /* ty=Tensor[(2, 1, 14), uint8] */;
  %561 = %551.0;
  %562 = logical_xor(%554, %555) /* ty=Tensor[(1694, 9), int32] */;
  %563 = %556.2;
  %564 = %559.2;
  (%560, meta[relay.Constant][19] /* ty=Tensor[(28), uint8] */, %561, meta[relay.Constant][20] /* ty=Tensor[(440), float64] */, %562, %563, %564)
}

def @func_10246() -> (Tensor[(16, 5, 6), float64],) {
  %565 = @func_3745() /* ty=Tensor[(16, 5, 6), float64] */;
  (%565,)
}

def @func_5233() -> Tensor[(1, 13, 5), float64] {
  %566 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %566.0
}

def @func_3481() -> Tensor[(440), float64] {
  %567 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %567.2
}

def @func_5645() -> (Tensor[(16, 5, 1694), float64], Tensor[(16, 5, 1), float32]) {
  %568 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %569 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %570 = %568.1;
  %571 = %569.2;
  (%570, %571)
}

def @func_820(%var_819: Tensor[(14, 11, 11), float64]) -> (Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) {
  %580 = fn (%var_781: Tensor[(14, 11, 11), float64]) -> (Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) {
    %572 = cast(%var_781, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
    %573 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 2), uint8] */, dtype="uint8") /* ty=Tensor[(14, 2), uint8] */;
    %574 = reshape(%573, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
    %575 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 2), uint8] */, dtype="uint8") /* ty=Tensor[(14, 2), uint8] */;
    %576 = reshape(%575, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
    %577 = cosh(%572) /* ty=Tensor[(14, 11, 11), float64] */;
    %578 = @func_396(%574) /* ty=Tensor[(2, 1, 14), uint8] */;
    %579 = @func_396(%576) /* ty=Tensor[(2, 1, 14), uint8] */;
    (%577, %578, meta[relay.Constant][21] /* ty=Tensor[(14, 2), uint8] */, %579)
  };
  %580(%var_819) /* ty=(Tensor[(14, 11, 11), float64], Tensor[(2, 1, 14), uint8], Tensor[(14, 2), uint8], Tensor[(2, 1, 14), uint8]) */
}

def @func_8056() -> (Tensor[(16, 5, ?), int8], Tensor[(440), float64], Tensor[(8, 14, 5), float64]) {
  @func_8054() /* ty=(Tensor[(16, 5, ?), int8], Tensor[(440), float64], Tensor[(8, 14, 5), float64]) */
}

def @func_5090() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) {
  %581 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %582 = cast(meta[relay.Constant][22] /* ty=Tensor[(490, 1), float64] */, dtype="float64") /* ty=Tensor[(490, 1), float64] */;
  %583 = reshape(%582, newshape=[490]) /* ty=Tensor[(490), float64] */;
  %584 = @func_4134(%583) /* ty=(Tensor[(440), float64], Tensor[(2, 1, 14), uint8], Tensor[(490), float64], Tensor[(16, 5, 1), bool], float64, Tensor[(1728), uint8]) */;
  %585 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %586 = @func_4966() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) */;
  %587 = @func_4908() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64]) */;
  %588 = cast(meta[relay.Constant][22] /* ty=Tensor[(490, 1), float64] */, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %589 = sigmoid(%588) /* ty=Tensor[(490, 1), float32] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %591 = acosh(%590) /* ty=Tensor[(490, 1), float32] */;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(490, 1), float64] */;
  %593 = %581.0;
  %594 = %584.3;
  %595 = %585.3;
  %596 = %586.0;
  %597 = %587.0;
  %598 = cos(%592) /* ty=Tensor[(490, 1), float64] */;
  (%593, %594, %595, %596, %597, %598)
}

def @func_8176() -> (Tensor[(16, 5, 1), float32],) {
  @func_8174() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_3777() -> Tensor[(440), float64] {
  %600 = fn () -> Tensor[(440), float64] {
    %599 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
    %599.2
  };
  %600() /* ty=Tensor[(440), float64] */
}

def @func_7530() -> Tensor[(16, 5, 6), float32] {
  @func_7528() /* ty=Tensor[(16, 5, 6), float32] */
}

def @func_9870() -> (Tensor[(8, 14, 5), float64],) {
  @func_9868() /* ty=(Tensor[(8, 14, 5), float64],) */
}

def @func_4781() -> (Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) {
  @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */
}

def @func_6963(%var_6799: float64, %var_6860: Tensor[(490), float64]) -> (Tensor[(5, 14, 7), float32], float64, Tensor[(11, 8, 5), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490), bool], Tensor[(16, 5, 6), bool], Tensor[(16, 5, 6), float64], Tensor[(1, 13, 5), float64], Tensor[(16, 5, 490), float64], Tensor[(490), uint32], Tensor[(440), float64]) {
  %601 = cast(%var_6799, dtype="float64") /* ty=float64 */;
  %602 = cast(meta[relay.Constant][23] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %603 = reshape(%601, newshape=[]) /* ty=float64 */;
  %604 = reshape(%602, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %605 = @func_758(%603, %604) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) */;
  %606 = @func_3237() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(121, 14), float64], Tensor[(1694), float64]) */;
  %607 = cast(%var_6860, dtype="bool") /* ty=Tensor[(490), bool] */;
  %608 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(490), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %609 = cast(meta[relay.Constant][23] /* ty=Tensor[(490), float64] */, dtype="bool") /* ty=Tensor[(490), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?), bool] */;
  %611 = @func_3682() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) */;
  %612 = @func_5778() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %613 = @func_4779() /* ty=(Tensor[(1, 13, 5), float64], Tensor[(16, 5, 1694), float64]) */;
  %614 = cast(%var_6860, dtype="float32") /* ty=Tensor[(490), float32] */;
  %615 = cos(%614) /* ty=Tensor[(490), float32] */;
  %616 = @func_5090() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), bool], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(490, 1), float64]) */;
  %617 = %616.0;
  %618 = cast(%615, dtype="float64") /* ty=Tensor[(490), float64] */;
  %619 = cast(%617, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %620 = cast(%615, dtype="float64") /* ty=Tensor[(490), float64] */;
  %621 = log10(%620) /* ty=Tensor[(490), float64] */;
  %622 = cast(meta[relay.Constant][24] /* ty=Tensor[(490), float64] */, dtype="uint32") /* ty=Tensor[(490), uint32] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(1), int32] */;
  %624 = cast(%621, dtype="uint32") /* ty=Tensor[(490), uint32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %626 = %605.3;
  %627 = %606.1;
  %628 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %629 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %630 = greater_equal(%609, %610) /* ty=Tensor[(490), bool] */;
  %631 = %611.1;
  %632 = %612.0;
  %633 = %613.0;
  %634 = power(%618, %619) /* ty=Tensor[(16, 5, 490), float64] */;
  %635 = bitwise_xor(%624, %625) /* ty=Tensor[(490), uint32] */;
  %636 = @func_3481() /* ty=Tensor[(440), float64] */;
  (%626, %var_6799, %627, %628, %629, %630, %631, %632, %633, %634, %635, %636)
}

def @func_9412() -> Tensor[(440), float64] {
  @func_9410() /* ty=Tensor[(440), float64] */
}

def @func_10014(%var_10012: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), bool],) {
  @func_10011(%var_10012) /* ty=(Tensor[(16, 5, 6), bool],) */
}

def @func_9766(%var_9759: Tensor[(1, 9, 12), float64]) -> (Tensor[(1, 9, 12), float64], Tensor[(16, 5, 6), float64]) {
  %637 = cast(%var_9759, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %638 = sin(%637) /* ty=Tensor[(1, 9, 12), float64] */;
  %639 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  (%638, %639)
}

def @func_7950(%var_7948: Tensor[(8, 13, 15), int8]) -> (Tensor[(8, 13, 15), int8],) {
  @func_7947(%var_7948) /* ty=(Tensor[(8, 13, 15), int8],) */
}

def @func_4091() -> Tensor[(16, 5, 6), float64] {
  @func_4089() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_7492() -> (Tensor[(8, 14, 5), float64],) {
  @func_7490() /* ty=(Tensor[(8, 14, 5), float64],) */
}

def @func_7220() -> (Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) {
  @func_7218() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */
}

def @func_4240(%var_4238: Tensor[(4, 140), float32]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(4, 140), float32]) {
  @func_4237(%var_4238) /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(4, 140), float32]) */
}

def @func_3432() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) {
  %640 = @func_2847() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %641 = @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %642 = %640.0;
  %643 = %641.0;
  %644 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  (%642, %643, %644)
}

def @func_3682() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), bool]) {
  %645 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %646 = @func_3139() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %649 = sin(%648) /* ty=Tensor[(16, 5, 6), float32] */;
  %650 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %651 = cast(%650, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %652 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%649, dtype="bool") /* ty=Tensor[(16, 5, 6), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %655 = %645.0;
  %656 = logical_and(%653, %654) /* ty=Tensor[(16, 5, 6), bool] */;
  (%655, %656)
}

def @func_9569(%var_9566: Tensor[(8, 13, 5), uint8], %var_9567: Tensor[(8, 13, 5), uint8], %var_9568: Tensor[(8, 13, 5), uint8]) -> (Tensor[(8, 13, 5), uint8], Tensor[(8, 13, 5), bool]) {
  %667 = fn (%var_9547: Tensor[(8, 13, 5), uint8], %var_9548: Tensor[(8, 13, 5), uint8], %var_9552: Tensor[(8, 13, 5), uint8]) -> (Tensor[(8, 13, 5), uint8], Tensor[(8, 13, 5), bool]) {
    %657 = cast(%var_9548, dtype="uint8") /* ty=Tensor[(8, 13, 5), uint8] */;
    %658 = shape_of(%var_9547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %659 = cast(%var_9547, dtype="uint8") /* ty=Tensor[(8, 13, 5), uint8] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %661 = cast(%var_9552, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
    %662 = shape_of(%var_9548, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%var_9548, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %665 = bitwise_and(%659, %660) /* ty=Tensor[(8, 13, 5), uint8] */;
    %666 = greater_equal(%663, %664) /* ty=Tensor[(8, 13, 5), bool] */;
    (%665, %666)
  };
  %667(%var_9566, %var_9567, %var_9568) /* ty=(Tensor[(8, 13, 5), uint8], Tensor[(8, 13, 5), bool]) */
}

def @func_4178() -> Tensor[(16, 5, 6), float64] {
  @func_4176() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_3898() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694, 1), float64]) {
  %673 = fn () -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694, 1), float64]) {
    %668 = cast(meta[relay.Constant][25] /* ty=Tensor[(1694, 1), float64] */, dtype="float64") /* ty=Tensor[(1694, 1), float64] */;
    %669 = reshape(%668, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
    %670 = @func_2970(%669) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) */;
    %671 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
    %672 = %670.2;
    (%671, %672, meta[relay.Constant][25] /* ty=Tensor[(1694, 1), float64] */)
  };
  %673() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float32], Tensor[(1694, 1), float64]) */
}

def @func_1874() -> (Tensor[(16, 5, 1), float32],) {
  @func_1872() /* ty=(Tensor[(16, 5, 1), float32],) */
}

def @func_6594() -> (Tensor[(16, 5, 6), float64], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8]) {
  @func_6592() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8]) */
}

def @func_4038() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) {
  %674 = @func_3176() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %675 = @func_3952() /* ty=(Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */;
  %676 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %677 = %674.0;
  %678 = @func_3745() /* ty=Tensor[(16, 5, 6), float64] */;
  %679 = %675.0;
  %680 = %676.0;
  (%677, %678, %679, %680)
}

def @func_4623() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) {
  %681 = @func_3432() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) */;
  %682 = cast(meta[relay.Constant][26] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %683 = reshape(%682, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %684 = @func_2389(%683) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %685 = %681.0;
  %686 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %687 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %688 = %684.1;
  (%685, %686, %687, %688, meta[relay.Constant][26] /* ty=Tensor[(520), float64] */)
}

def @func_6263() -> Tensor[(16, 5, 6), bool] {
  %689 = @func_3986() /* ty=(Tensor[(16, 5, 6), bool],) */;
  %689.0
}

def @func_2742(%var_2741: Tensor[(28), uint8]) -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) {
  %700 = fn (%var_2726: Tensor[(28), uint8]) -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) {
    %690 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %691 = cast(%var_2726, dtype="uint8") /* ty=Tensor[(28), uint8] */;
    %692 = reshape(%691, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), uint8] */;
    %693 = cast(meta[relay.Constant][27] /* ty=Tensor[(260, 2), float64] */, dtype="float64") /* ty=Tensor[(260, 2), float64] */;
    %694 = reshape(%693, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
    %695 = @func_2389(%694) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
    %696 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
    %697 = %690.0;
    %698 = @func_396(%692) /* ty=Tensor[(2, 1, 14), uint8] */;
    %699 = %695.0;
    (%696, %697, %698, %var_2726, %699, meta[relay.Constant][27] /* ty=Tensor[(260, 2), float64] */)
  };
  %700(%var_2741) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(1, 13, 5), float64], Tensor[(260, 2), float64]) */
}

def @func_7814(%var_7780: Tensor[(16, 5, 6), float64]) -> (Tensor[(16, 5, 6), float64], Tensor[(16, 11, 1), float64], Tensor[(16, 5, 6), float32], Tensor[(16, 11, 1), float64]) {
  %701 = @func_4746() /* ty=(Tensor[(16, 11, 1), float64],) */;
  %702 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %703 = cast(%var_7780, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %707 = @func_4746() /* ty=(Tensor[(16, 11, 1), float64],) */;
  %708 = @func_3572() /* ty=Tensor[(16, 5, 6), float64] */;
  %709 = %701.0;
  %710 = subtract(%705, %706) /* ty=Tensor[(16, 5, 6), float32] */;
  %711 = %707.0;
  (%708, %709, %710, %711)
}

def @func_3953() -> (Tensor[(440), float64], Tensor[(16, 5, 1), float32]) {
  %715 = fn () -> (Tensor[(440), float64], Tensor[(16, 5, 1), float32]) {
    %712 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
    %713 = @func_3776() /* ty=Tensor[(440), float64] */;
    %714 = %712.0;
    (%713, %714)
  };
  %715() /* ty=(Tensor[(440), float64], Tensor[(16, 5, 1), float32]) */
}

def @func_8403() -> (Tensor[(16, 5, ?), int8], Tensor[(16, 5, 6), float32]) {
  @func_8401() /* ty=(Tensor[(16, 5, ?), int8], Tensor[(16, 5, 6), float32]) */
}

def @func_7128() -> (Tensor[(16, 5, 6), float64],) {
  @func_7126() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_7218() -> (Tensor[(16, 5, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520, 1), float64], Tensor[(440), float64], Tensor[(16, 5, 1), float32]) {
  %716 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  %718 = cast(meta[relay.Constant][28] /* ty=Tensor[(520, 1), float64] */, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %719 = reshape(%718, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %720 = @func_2389(%719) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %721 = @func_5997() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) */;
  %722 = rsqrt(%717) /* ty=Tensor[(16, 5, 6), float64] */;
  %723 = %720.2;
  %724 = @func_3776() /* ty=Tensor[(440), float64] */;
  %725 = %721.1;
  (%722, %723, meta[relay.Constant][28] /* ty=Tensor[(520, 1), float64] */, %724, %725)
}

def @func_396(%var_381: Tensor[(2, 1, 14), uint8]) -> Tensor[(2, 1, 14), uint8] {
  %726 = cast(meta[relay.Constant][29] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %727 = cast(%var_381, dtype="uint8") /* ty=Tensor[(2, 1, 14), uint8] */;
  bitwise_or(%726, %727) /* ty=Tensor[(2, 1, 14), uint8] */
}

def @func_7855(%var_7853: Tensor[(12, 14, 9), float32]) -> (Tensor[(16, 5, 1), float32], Tensor[(12, 14, 9), float64]) {
  @func_7852(%var_7853) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(12, 14, 9), float64]) */
}

def @func_8229() -> Tensor[(8, 14, 5), float64] {
  @func_8227() /* ty=Tensor[(8, 14, 5), float64] */
}

def @func_4137(%var_4135: Tensor[(490), float64]) -> (Tensor[(440), float64], Tensor[(2, 1, 14), uint8], Tensor[(490), float64], Tensor[(16, 5, 1), bool], float64, Tensor[(1728), uint8]) {
  @func_4134(%var_4135) /* ty=(Tensor[(440), float64], Tensor[(2, 1, 14), uint8], Tensor[(490), float64], Tensor[(16, 5, 1), bool], float64, Tensor[(1728), uint8]) */
}

def @func_7986() -> (Tensor[(16, 5, 6), float64],) {
  %729 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %728 = @func_4521() /* ty=Tensor[(16, 5, 6), float64] */;
    (%728,)
  };
  %729() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_9192() -> (Tensor[(16, 5, 6), float64],) {
  %730 = @func_7405() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, ?), int8]) */;
  %731 = %730.0;
  (%731,)
}

def @func_4134(%var_4124: Tensor[(490), float64]) -> (Tensor[(440), float64], Tensor[(2, 1, 14), uint8], Tensor[(490), float64], Tensor[(16, 5, 1), bool], float64, Tensor[(1728), uint8]) {
  %732 = cast(-7.59098f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %733 = cast(%var_4124, dtype="float64") /* ty=Tensor[(490), float64] */;
  %734 = reshape(%732, newshape=[]) /* ty=float64 */;
  %735 = reshape(%733, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %736 = @func_758(%734, %735) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) */;
  %737 = @func_3920() /* ty=Tensor[(16, 5, 1), float32] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %739 = cast(-7.59098f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %740 = cast(meta[relay.Constant][30] /* ty=Tensor[(1728), uint8] */, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
  %741 = cast(meta[relay.Constant][30] /* ty=Tensor[(1728), uint8] */, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
  %742 = cast(-7.59098f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %743 = reshape(%740, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %744 = reshape(%741, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), uint8] */;
  %745 = reshape(%742, newshape=[]) /* ty=float64 */;
  %746 = @func_2518(%743, %744, %745) /* ty=(Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) */;
  %747 = @func_3481() /* ty=Tensor[(440), float64] */;
  %748 = %736.0;
  %749 = not_equal(%738, %739) /* ty=Tensor[(16, 5, 1), bool] */;
  %750 = %746.2;
  (%747, %748, %var_4124, %749, %750, meta[relay.Constant][30] /* ty=Tensor[(1728), uint8] */)
}

def @func_2973(%var_2971: Tensor[(1694), float64]) -> (Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) {
  @func_2970(%var_2971) /* ty=(Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) */
}

def @func_2389(%var_2383: Tensor[(8, 13, 5), float64]) -> (Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) {
  %751 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %752 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %753 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  %754 = cast(%var_2383, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %755 = cosh(%751) /* ty=Tensor[(1, 13, 5), float64] */;
  %756 = asinh(%752) /* ty=Tensor[(1, 13, 5), float64] */;
  %757 = power(%753, %754) /* ty=Tensor[(8, 13, 5), float64] */;
  (%755, %756, %757)
}

def @func_7102() -> (Tensor[(13, 5, 14), int16], Tensor[(2, 1, 14), uint8], Tensor[(96, 18), float32]) {
  @func_7100() /* ty=(Tensor[(13, 5, 14), int16], Tensor[(2, 1, 14), uint8], Tensor[(96, 18), float32]) */
}

def @func_8090() -> (Tensor[(16, 5, 6), float64],) {
  @func_8088() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_10248() -> (Tensor[(16, 5, 6), float64],) {
  @func_10246() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_8818() -> (Tensor[(8, 14, 5), float64],) {
  %758 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
  %759 = cast(%758, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %760 = atan(%759) /* ty=Tensor[(8, 14, 5), float64] */;
  (%760,)
}

def @func_7947(%var_7925: Tensor[(8, 13, 15), int8]) -> (Tensor[(8, 13, 15), int8],) {
  %761 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 13, 15), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 15), int8] */;
  %762 = shape_of(%var_7925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_7925, dtype="int8") /* ty=Tensor[(8, 13, 15), int8] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %765 = maximum(%763, %764) /* ty=Tensor[(8, 13, 15), int8] */;
  (%765,)
}

def @func_5008() -> (Tensor[(16, 5, 1), float32],) {
  %766 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %767 = %766.1;
  (%767,)
}

def @func_9327() -> (Tensor[(16, 5, 6), float64],) {
  %770 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %768 = @func_4015() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %769 = %768.0;
    (%769,)
  };
  %770() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_2583() -> Tensor[(16, 5, 6), float64] {
  %771 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
  %772 = cast(%771, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %773 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 5, 6), float32] */, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  power(%772, %773) /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_10277() -> Tensor[(16, 5, 6), float64] {
  %774 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %774.0
}

def @func_3434() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) {
  @func_3432() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64]) */
}

def @func_8174() -> (Tensor[(16, 5, 1), float32],) {
  %775 = @func_5008() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %776 = %775.0;
  (%776,)
}

def @func_7062() -> Tensor[(16, 5, 1), float64] {
  %777 = @func_5545() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %778 = %777.0;
  %779 = cast(%778, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  log(%779) /* ty=Tensor[(16, 5, 1), float64] */
}

def @func_8370() -> (Tensor[(16, 5, 6), float64],) {
  @func_8368() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_6147(%var_6127: Tensor[(4, 6, 1), float64], %var_6128: Tensor[(4, 6, 9), float64]) -> Tensor[(4, 6, 9), bool] {
  %780 = cast(%var_6127, dtype="bool") /* ty=Tensor[(4, 6, 1), bool] */;
  %781 = cast(%var_6128, dtype="bool") /* ty=Tensor[(4, 6, 9), bool] */;
  equal(%780, %781) /* ty=Tensor[(4, 6, 9), bool] */
}

def @func_2392(%var_2390: Tensor[(8, 13, 5), float64]) -> (Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) {
  @func_2389(%var_2390) /* ty=(Tensor[(1, 13, 5), float64], Tensor[(1, 13, 5), float64], Tensor[(8, 13, 5), float64]) */
}

def @func_3922() -> Tensor[(16, 5, 1), float32] {
  @func_3920() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_10403(%var_10401: Tensor[(1, 140), int64]) -> (Tensor[(16, 5, 6), float64], Tensor[(2, 5, 14), bool], Tensor[(1, 140), int64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(560), float32]) {
  @func_10400(%var_10401) /* ty=(Tensor[(16, 5, 6), float64], Tensor[(2, 5, 14), bool], Tensor[(1, 140), int64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 7), float64], Tensor[(560), float32]) */
}

def @func_9352() -> (Tensor[(16, 5, 6), float64], Tensor[(10, 16, 4), uint16], Tensor[(1, 640), uint16], Tensor[(1, 1694), float64]) {
  %792 = fn () -> (Tensor[(16, 5, 6), float64], Tensor[(10, 16, 4), uint16], Tensor[(1, 640), uint16], Tensor[(1, 1694), float64]) {
    %782 = @func_2714() /* ty=(Tensor[(16, 5, 6), float64],) */;
    %783 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 640), uint16] */, dtype="uint16") /* ty=Tensor[(1, 640), uint16] */;
    %784 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 640), uint16] */, dtype="uint16") /* ty=Tensor[(1, 640), uint16] */;
    %785 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1694), float64] */, dtype="float64") /* ty=Tensor[(1, 1694), float64] */;
    %786 = reshape(%783, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint16] */;
    %787 = reshape(%784, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint16] */;
    %788 = reshape(%785, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
    %789 = @func_3624(%786, %787, %788) /* ty=(Tensor[(10, 16, 4), uint16], Tensor[(14, 2), uint8], Tensor[(121, 14), float64], Tensor[(440), float64]) */;
    %790 = %782.0;
    %791 = %789.0;
    (%790, %791, meta[relay.Constant][34] /* ty=Tensor[(1, 640), uint16] */, meta[relay.Constant][35] /* ty=Tensor[(1, 1694), float64] */)
  };
  %792() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(10, 16, 4), uint16], Tensor[(1, 640), uint16], Tensor[(1, 1694), float64]) */
}

def @func_4521() -> Tensor[(16, 5, 6), float64] {
  %793 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %793.0
}

def @func_4040() -> (Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) {
  @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */
}

def @func_8088() -> (Tensor[(16, 5, 6), float64],) {
  %794 = @func_5700() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %795 = %794.0;
  (%795,)
}

def @func_2312(%var_2310: Tensor[(121, 14), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) {
  @func_2309(%var_2310) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) */
}

def @func_5144() -> Tensor[(16, 5, 1), float32] {
  @func_5142() /* ty=Tensor[(16, 5, 1), float32] */
}

def @func_9868() -> (Tensor[(8, 14, 5), float64],) {
  %796 = @func_8227() /* ty=Tensor[(8, 14, 5), float64] */;
  (%796,)
}

def @func_4968() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) {
  @func_4966() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) */
}

def @func_5126() -> (Tensor[(440), float64],) {
  %798 = fn () -> (Tensor[(440), float64],) {
    %797 = @func_3481() /* ty=Tensor[(440), float64] */;
    (%797,)
  };
  %798() /* ty=(Tensor[(440), float64],) */
}

def @func_4016() -> (Tensor[(16, 5, 6), float64],) {
  %800 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %799 = @func_2583() /* ty=Tensor[(16, 5, 6), float64] */;
    (%799,)
  };
  %800() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_2970(%var_2922: Tensor[(1694), float64]) -> (Tensor[(16, 5, 1), float32], Tensor[(121, 14), float32], Tensor[(16, 5, 6), float32]) {
  %801 = @func_2437() /* ty=(Tensor[(16, 5, 1), float32],) */;
  %802 = cast(%var_2922, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %803 = reshape(%802, newshape=[121, 14]) /* ty=Tensor[(121, 14), float64] */;
  %804 = @func_2309(%803) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(880), float32], Tensor[(2, 1, 14), uint8], Tensor[(121, 14), float64], Tensor[(14, 2), uint8], Tensor[(16, 5, 1), float64]) */;
  %805 = %804.3;
  %806 = cast(%var_2922, dtype="float32") /* ty=Tensor[(1694), float32] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(2), int32] */;
  %808 = cast(%805, dtype="float32") /* ty=Tensor[(121, 14), float32] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %810 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %811 = %810.0;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %813 = sinh(%812) /* ty=Tensor[(16, 5, 6), float32] */;
  %814 = cast(%811, dtype="int16") /* ty=Tensor[(16, 5, 6), int16] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="int16") /* ty=Tensor[(16, 5, 6), int16] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %818 = bitwise_and(%816, %817) /* ty=Tensor[(16, 5, 6), int16] */;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %820 = %801.0;
  %821 = floor_mod(%808, %809) /* ty=Tensor[(121, 14), float32] */;
  %822 = asinh(%819) /* ty=Tensor[(16, 5, 6), float32] */;
  (%820, %821, %822)
}

def @func_3747() -> Tensor[(16, 5, 6), float64] {
  @func_3745() /* ty=Tensor[(16, 5, 6), float64] */
}

def @func_5369() -> (Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32]) {
  %823 = @func_2666() /* ty=(Tensor[(16, 5, 6), float64],) */;
  %824 = @func_4038() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(16, 5, 6), float64], Tensor[(440), float64], Tensor[(16, 5, 6), float64]) */;
  %825 = %823.0;
  %826 = %824.0;
  (%825, %826)
}

def @func_7250(%var_7248: Tensor[(40, 14), float32]) -> (Tensor[(8, 13, 5), float64], Tensor[(16, 5, 7), float64], Tensor[(40, 14), float32]) {
  @func_7247(%var_7248) /* ty=(Tensor[(8, 13, 5), float64], Tensor[(16, 5, 7), float64], Tensor[(40, 14), float32]) */
}

def @func_10516() -> (Tensor[(16, 5, 6), float64],) {
  %828 = fn () -> (Tensor[(16, 5, 6), float64],) {
    %827 = @func_9244() /* ty=Tensor[(16, 5, 6), float64] */;
    (%827,)
  };
  %828() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_6103(%var_6034: Tensor[(1694), float64], %var_6066: Tensor[(15246), float64]) -> (Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) {
  %829 = @func_4966() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 6), float64], Tensor[(16, 5, 520), float32]) */;
  %830 = cast(%var_6066, dtype="float64") /* ty=Tensor[(15246), float64] */;
  %831 = reshape(%830, newshape=[1694, 9]) /* ty=Tensor[(1694, 9), float64] */;
  %832 = @func_4362(%831) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(1694, 9), int32], Tensor[(440), float64], Tensor[(14, 2), uint8]) */;
  %833 = cast(meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %834 = reshape(%833, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), float64] */;
  %835 = @func_1576(%834) /* ty=(Tensor[(11, 8, 5), float64],) */;
  %836 = cast(%var_6034, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %837 = reshape(%836, newshape=[1694]) /* ty=Tensor[(1694), float64] */;
  %838 = @func_4420(%837) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(14, 2), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float64]) */;
  %839 = %838.3;
  %840 = cast(%839, dtype="bool") /* ty=Tensor[(16, 5, 1), bool] */;
  %841 = cast(%var_6034, dtype="bool") /* ty=Tensor[(1694), bool] */;
  %842 = not_equal(%840, %841) /* ty=Tensor[(16, 5, 1694), bool] */;
  %843 = cast(%var_6034, dtype="uint16") /* ty=Tensor[(1694), uint16] */;
  %844 = cast(%842, dtype="uint16") /* ty=Tensor[(16, 5, 1694), uint16] */;
  %845 = %829.2;
  %846 = %832.0;
  %847 = %835.0;
  %848 = subtract(%843, %844) /* ty=Tensor[(16, 5, 1694), uint16] */;
  (%845, %846, %var_6066, %847, meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, %848)
}

def @func_6107(%var_6105: Tensor[(1694), float64], %var_6106: Tensor[(15246), float64]) -> (Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) {
  @func_6103(%var_6105, %var_6106) /* ty=(Tensor[(16, 5, 520), float32], Tensor[(2, 1, 14), uint8], Tensor[(15246), float64], Tensor[(11, 8, 5), float64], Tensor[(440), float64], Tensor[(16, 5, 1694), uint16]) */
}

def @func_3483() -> Tensor[(440), float64] {
  @func_3481() /* ty=Tensor[(440), float64] */
}

def @func_4151(%var_4149: Tensor[(28), uint8]) -> (Tensor[(16, 5, 6), bool], Tensor[(28), uint8], Tensor[(28), uint8]) {
  @func_4148(%var_4149) /* ty=(Tensor[(16, 5, 6), bool], Tensor[(28), uint8], Tensor[(28), uint8]) */
}

def @func_7490() -> (Tensor[(8, 14, 5), float64],) {
  %849 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 14, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  %850 = acosh(%849) /* ty=Tensor[(8, 14, 5), float64] */;
  (%850,)
}

def @func_8349() -> (Tensor[(16, 5, 6), float64],) {
  %851 = @func_4623() /* ty=(Tensor[(16, 5, 6), float64], Tensor[(16, 5, 1), float32], Tensor[(16, 5, 1), float32], Tensor[(1, 13, 5), float64], Tensor[(520), float64]) */;
  %852 = %851.0;
  (%852,)
}

def @func_2518(%var_2478: Tensor[(12, 12, 12), uint8], %var_2479: Tensor[(12, 12, 12), uint8], %var_2485: float64) -> (Tensor[(12, 12, 12), uint8], Tensor[(2, 1, 14), uint8], float64, Tensor[(245, 2), float64]) {
  %853 = cast(%var_2479, dtype="uint8") /* ty=Tensor[(12, 12, 12), uint8] */;
  %854 = shape_of(%var_2478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%var_2478, dtype="uint8") /* ty=Tensor[(12, 12, 12), uint8] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %857 = cast(%var_2485, dtype="float64") /* ty=float64 */;
  %858 = cast(meta[relay.Constant][38] /* ty=Tensor[(245, 2), float64] */, dtype="float64") /* ty=Tensor[(245, 2), float64] */;
  %859 = reshape(%857, newshape=[]) /* ty=float64 */;
  %860 = reshape(%858, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float64] */;
  %861 = @func_758(%859, %860) /* ty=(Tensor[(2, 1, 14), uint8], Tensor[(28), uint8], Tensor[(2, 1, 14), uint8], Tensor[(5, 14, 7), float32], Tensor[(2, 1, 14), uint8]) */;
  %862 = add(%855, %856) /* ty=Tensor[(12, 12, 12), uint8] */;
  %863 = %861.2;
  (%862, %863, %var_2485, meta[relay.Constant][38] /* ty=Tensor[(245, 2), float64] */)
}

def @func_2099(%var_2098: Tensor[(10, 8, 11), float32]) -> Tensor[(10, 8, 11), float32] {
  %867 = fn (%var_2090: Tensor[(10, 8, 11), float32]) -> Tensor[(10, 8, 11), float32] {
    %864 = cast(%var_2090, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
    %865 = exp(%864) /* ty=Tensor[(10, 8, 11), float32] */;
    %866 = cast(%865, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
    log(%866) /* ty=Tensor[(10, 8, 11), float32] */
  };
  %867(%var_2098) /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_9360() -> (Tensor[(16, 5, 6), float64],) {
  @func_9358() /* ty=(Tensor[(16, 5, 6), float64],) */
}

def @func_9712() -> (Tensor[(16, 5, 1), float32], Tensor[(13, 5, 4), float32], Tensor[(260), float64]) {
  @func_9710() /* ty=(Tensor[(16, 5, 1), float32], Tensor[(13, 5, 4), float32], Tensor[(260), float64]) */
}

def @func_9695() -> Tensor[(1, 13, 5), float64] {
  %868 = fn () -> Tensor[(1, 13, 5), float64] {
    @func_5233() /* ty=Tensor[(1, 13, 5), float64] */
  };
  %868() /* ty=Tensor[(1, 13, 5), float64] */
}

def @func_3846(%var_3838: Tensor[(16, 5, 7), float32]) -> Tensor[(16, 5, 7), float64] {
  %869 = @func_2069() /* ty=Tensor[(16, 5, 1), float32] */;
  %870 = cast(%869, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %871 = cast(%var_3838, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  power(%870, %871) /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_4423(%var_4421: Tensor[(1694), float64]) -> (Tensor[(16, 5, 6), float32], Tensor[(14, 2), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float64]) {
  @func_4420(%var_4421) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(14, 2), uint8], Tensor[(1694), float64], Tensor[(16, 5, 1), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen784/build/output.py:2900: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen784/build/output.py", line 2905, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(585) tvmgen_default_fused_right_shift_cast_cast_reshape_bitwise_or_kernel0(int* __restrict__ T_bitwise_or, short* __restrict__ placeholder, short* __restrict__ placeholder1, short* __restrict__ placeholder2) {
  T_bitwise_or[(((int)threadIdx.x))] = (((int)(placeholder[((((int)threadIdx.x) / 5))] >> placeholder1[(((int)threadIdx.x))])) | ((int)placeholder2[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

