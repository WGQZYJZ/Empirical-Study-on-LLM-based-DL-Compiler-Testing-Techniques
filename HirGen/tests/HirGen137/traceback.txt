==========mod==========
#[version = "0.0.5"]
def @func_5139(%var_5130: Tensor[(220), float64]) -> (Tensor[(11, 4, 7), float32], Tensor[(10, 28), uint16], Tensor[(220), float64], Tensor[(1, 252), float32], Tensor[(11, 4, 7), uint16]) {
  %0 = @func_3691() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %1 = cast(%var_5130, dtype="float64") /* ty=Tensor[(220), float64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 252), float32] */, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %3 = reshape(%1, newshape=[55, 4]) /* ty=Tensor[(55, 4), float64] */;
  %4 = reshape(%2, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %5 = @func_4972(%3, %4) /* ty=(bool, Tensor[(1575), int32], Tensor[(55, 4), float64], Tensor[(10, 28), uint16], Tensor[(252), float32]) */;
  %6 = %0.0;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %8 = reshape(%7, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %9 = @func_3316(%8) /* ty=(Tensor[(11, 4, 7), uint16],) */;
  %10 = %5.3;
  %11 = %9.0;
  (%6, %10, %var_5130, meta[relay.Constant][0] /* ty=Tensor[(1, 252), float32] */, %11)
}

def @func_2381(%var_2327: Tensor[(3, 12), float64], %var_2353: Tensor[(2, 40), float64], %var_2368: Tensor[(840), int16]) -> (Tensor[(252), float32], Tensor[(2, 2, 13), float64], Tensor[(2, 2, 13), bool], Tensor[(1365), bool], Tensor[(3, 12), float64], Tensor[(280), uint16], Tensor[(2, 5, 8), float64], Tensor[(2, 40), float64], Tensor[(2, 5, 8), float64], Tensor[(2925), float32], Tensor[(840), bool], Tensor[(10, 7, 4), float64], Tensor[(352), float64]) {
  %12 = cast(4.10817f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %14 = reshape(%12, newshape=[]) /* ty=float64 */;
  %15 = reshape(%13, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %16 = @func_997(%14, %15) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %17 = %16.0;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %19 = cast(4.10817f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %20 = cast(4.10817f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %21 = cast(%17, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
  %22 = cast(%var_2327, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %24 = cast(meta[relay.Constant][3] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %25 = reshape(%22, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %26 = reshape(%23, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %27 = reshape(%24, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %28 = @func_1292(%25, %26, %27) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %29 = cast(%var_2353, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
  %30 = reshape(%29, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %31 = @func_1992(%30) /* ty=(Tensor[(2, 5, 8), float64],) */;
  %32 = cast(%var_2353, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
  %33 = reshape(%32, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %34 = @func_1992(%33) /* ty=(Tensor[(2, 5, 8), float64],) */;
  %35 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %36 = %35.2;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(2925), uint8] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(1), int32] */;
  %39 = cast(%36, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?), float32] */;
  %41 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %42 = %41.0;
  %43 = cast(%var_2368, dtype="bool") /* ty=Tensor[(840), bool] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(1), int32] */;
  %45 = cast(%42, dtype="bool") /* ty=Tensor[(840), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?), bool] */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %49 = reshape(%47, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
  %50 = reshape(%48, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
  %51 = @func_139(%49, %50) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
  %52 = floor_mod(%18, %19) /* ty=Tensor[(2, 2, 13), float64] */;
  %53 = greater_equal(%20, %21) /* ty=Tensor[(2, 2, 13), bool] */;
  %54 = %28.7;
  %55 = %31.0;
  %56 = %34.0;
  %57 = floor_divide(%39, %40) /* ty=Tensor[(2925), float32] */;
  %58 = greater(%45, %46) /* ty=Tensor[(840), bool] */;
  %59 = %51.2;
  (meta[relay.Constant][1] /* ty=Tensor[(252), float32] */, %52, %53, %54, %var_2327, meta[relay.Constant][2] /* ty=Tensor[(280), uint16] */, %55, %var_2353, %56, %57, %58, %59, meta[relay.Constant][4] /* ty=Tensor[(352), float64] */)
}

def @func_4241() -> Tensor[(2925), uint8] {
  %60 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %60.2
}

def @func_3394(%var_3386: Tensor[(4, 13, 10), uint16]) -> Tensor[(4, 13, 10), uint16] {
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 13, 10), uint16] */, dtype="uint16") /* ty=Tensor[(4, 13, 10), uint16] */;
  %62 = shape_of(%var_3386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_3386, dtype="uint16") /* ty=Tensor[(4, 13, 10), uint16] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%63, %64) /* ty=Tensor[(4, 13, 10), uint16] */
}

def @func_4018(%var_3958: Tensor[(2304), float64], %var_4016: Tensor[(252), float32]) -> (float64, Tensor[(7, 8, 5), int32], Tensor[(308), float32], float64, Tensor[(2304), float64], Tensor[(308, 352), int64], Tensor[(11, 4, 7), uint16], Tensor[(840), float32], Tensor[(252, 1), float32], Tensor[(252), float32]) {
  %65 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
  %66 = cast(%var_3958, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %68 = reshape(%66, newshape=[2304]) /* ty=Tensor[(2304), float64] */;
  %69 = reshape(%67, newshape=[8, 44]) /* ty=Tensor[(8, 44), float64] */;
  %70 = @func_2233(%68, %69) /* ty=(Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %72 = reshape(%71, newshape=[308, 1]) /* ty=Tensor[(308, 1), float32] */;
  %73 = @func_3632(%72) /* ty=(Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) */;
  %74 = %73.2;
  %75 = cast(%74, dtype="int64") /* ty=Tensor[(308, 1), int64] */;
  %76 = cast(meta[relay.Constant][7] /* ty=Tensor[(352), float64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %77 = cast(meta[relay.Constant][6] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %78 = reshape(%77, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %79 = @func_3316(%78) /* ty=(Tensor[(11, 4, 7), uint16],) */;
  %80 = %70.2;
  %81 = cast(%80, dtype="float64") /* ty=float64 */;
  %82 = cast(%var_4016, dtype="float32") /* ty=Tensor[(252), float32] */;
  %83 = reshape(%81, newshape=[]) /* ty=float64 */;
  %84 = reshape(%82, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %85 = @func_997(%83, %84) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %86 = %65.2;
  %87 = @func_2916() /* ty=Tensor[(7, 8, 5), int32] */;
  %88 = minimum(%75, %76) /* ty=Tensor[(308, 352), int64] */;
  %89 = %79.0;
  %90 = @func_2745() /* ty=Tensor[(840), float32] */;
  %91 = %85.2;
  (%86, %87, meta[relay.Constant][6] /* ty=Tensor[(308), float32] */, %80, %var_3958, %88, %89, %90, %91, %var_4016)
}

def @func_1168(%var_1073: float64, %var_1074: Tensor[(9, 16, 16), float64], %var_1080: Tensor[(9, 16, 16), float64], %var_1124: Tensor[(9, 16, 16), uint64], %var_1143: Tensor[(352), float64], %var_1161: Tensor[(2, 420), int16]) -> (Tensor[(9, 16, 16), uint16], Tensor[(9, 16, 16), bool], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(252), float32], Tensor[(352), float64], Tensor[(352), float64], Tensor[(9, 16, 16), float32], Tensor[(9, 16, 16), float32], Tensor[(10, 28), uint16], Tensor[(6, 10, 14), int16], Tensor[(2, 420), int16]) {
  %92 = cast(%var_1073, dtype="float64") /* ty=float64 */;
  %93 = cast(%var_1074, dtype="float64") /* ty=Tensor[(9, 16, 16), float64] */;
  %94 = mod(%92, %93) /* ty=Tensor[(9, 16, 16), float64] */;
  %95 = cast(%var_1073, dtype="uint16") /* ty=uint16 */;
  %96 = cast(%94, dtype="uint16") /* ty=Tensor[(9, 16, 16), uint16] */;
  %97 = cast(%var_1080, dtype="int64") /* ty=Tensor[(9, 16, 16), int64] */;
  %98 = shape_of(%var_1074, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%var_1074, dtype="int64") /* ty=Tensor[(9, 16, 16), int64] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %101 = minimum(%99, %100) /* ty=Tensor[(9, 16, 16), int64] */;
  %102 = cast(%101, dtype="uint64") /* ty=Tensor[(9, 16, 16), uint64] */;
  %103 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%94, dtype="uint64") /* ty=Tensor[(9, 16, 16), uint64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %106 = bitwise_and(%104, %105) /* ty=Tensor[(9, 16, 16), uint64] */;
  %107 = cast(%var_1124, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %111 = cast(meta[relay.Constant][8] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %112 = reshape(%111, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %113 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %114 = cast(%var_1143, dtype="float64") /* ty=Tensor[(352), float64] */;
  %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %116 = reshape(%113, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %117 = reshape(%114, newshape=[2, 176]) /* ty=Tensor[(2, 176), float64] */;
  %118 = reshape(%115, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %119 = @func_947(%116, %117, %118) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) */;
  %120 = cast(%var_1073, dtype="float64") /* ty=float64 */;
  %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %122 = reshape(%120, newshape=[]) /* ty=float64 */;
  %123 = reshape(%121, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %124 = @func_997(%122, %123) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %125 = cast(%var_1074, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %126 = log2(%125) /* ty=Tensor[(9, 16, 16), float32] */;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %128 = asin(%127) /* ty=Tensor[(9, 16, 16), float32] */;
  %129 = cast(%106, dtype="float64") /* ty=Tensor[(9, 16, 16), float64] */;
  %130 = cast(%var_1073, dtype="float64") /* ty=float64 */;
  %131 = add(%129, %130) /* ty=Tensor[(9, 16, 16), float64] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %133 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%128, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %136 = cast(%128, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %138 = %124.3;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(352), float64] */;
  %140 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %141 = reshape(%137, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %142 = reshape(%139, newshape=[2, 176]) /* ty=Tensor[(2, 176), float64] */;
  %143 = reshape(%140, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %144 = @func_947(%141, %142, %143) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) */;
  %145 = cast(%var_1161, dtype="int16") /* ty=Tensor[(2, 420), int16] */;
  %146 = reshape(%145, newshape=[6, 10, 14]) /* ty=Tensor[(6, 10, 14), int16] */;
  %147 = @func_512(%146) /* ty=(Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %148 = logical_xor(%95, %96) /* ty=Tensor[(9, 16, 16), uint16] */;
  %149 = greater_equal(%109, %110) /* ty=Tensor[(9, 16, 16), bool] */;
  %150 = @func_60(%112) /* ty=Tensor[(10, 7, 4), float64] */;
  %151 = %119.0;
  %152 = floor_mod(%134, %135) /* ty=Tensor[(9, 16, 16), float32] */;
  %153 = tan(%136) /* ty=Tensor[(9, 16, 16), float32] */;
  %154 = %144.1;
  %155 = %147.0;
  (%148, %149, %150, meta[relay.Constant][8] /* ty=Tensor[(280), uint16] */, %151, meta[relay.Constant][9] /* ty=Tensor[(252), float32] */, %var_1143, %138, %152, %153, %154, %155, %var_1161)
}

def @func_3021() -> Tensor[(6, 10, 14), float32] {
  %156 = @func_2611() /* ty=(Tensor[(6, 10, 14), float32],) */;
  %156.0
}

def @func_3589(%var_3535: Tensor[(525, 3), int32], %var_3555: Tensor[(7, 15, 15), int32], %var_3583: Tensor[(2352), float64]) -> (Tensor[(252), float32], Tensor[(225), int32], Tensor[(7, 15, 15), bool], Tensor[(7, 15, 15), uint32], Tensor[(6, 10, 14), float32], Tensor[(1452), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(12, 14, 14), int16], Tensor[(2352), float64], Tensor[(1792), float32]) {
  %157 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
  %158 = cast(meta[relay.Constant][10] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %159 = cast(%var_3535, dtype="int32") /* ty=Tensor[(525, 3), int32] */;
  %160 = reshape(%158, newshape=[25, 9]) /* ty=Tensor[(25, 9), int32] */;
  %161 = reshape(%159, newshape=[1575]) /* ty=Tensor[(1575), int32] */;
  %162 = @func_2758(%160, %161) /* ty=(bool, Tensor[(7, 15, 15), int32], Tensor[(25, 9), int32], Tensor[(1575), int32]) */;
  %163 = %162.1;
  %164 = cast(%var_3535, dtype="uint64") /* ty=Tensor[(525, 3), uint64] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="uint64") /* ty=Tensor[(7, 15, 15), uint64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %168 = bitwise_and(%166, %167) /* ty=Tensor[(7, 15, 15), uint64] */;
  %169 = cast(%168, dtype="bool") /* ty=Tensor[(7, 15, 15), bool] */;
  %170 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%163, dtype="bool") /* ty=Tensor[(7, 15, 15), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = cast(meta[relay.Constant][10] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %174 = greater_equal(%171, %172) /* ty=Tensor[(7, 15, 15), bool] */;
  %175 = cast(%174, dtype="int32") /* ty=Tensor[(7, 15, 15), int32] */;
  %176 = reshape(%173, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
  %177 = reshape(%175, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
  %178 = @func_1409(%176, %177) /* ty=Tensor[(7, 15, 15), int32] */;
  %179 = cast(%var_3555, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(1452), float64] */, dtype="float64") /* ty=Tensor[(1452), float64] */;
  %184 = cast(meta[relay.Constant][11] /* ty=Tensor[(1452), float64] */, dtype="float64") /* ty=Tensor[(1452), float64] */;
  %185 = reshape(%183, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), float64] */;
  %186 = reshape(%184, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), float64] */;
  %187 = @func_3455(%185, %186) /* ty=(Tensor[(11, 11, 12), float64], Tensor[(11, 11, 12), float64], Tensor[(6, 10, 14), float32]) */;
  %188 = cast(meta[relay.Constant][12] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %189 = reshape(%188, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
  %190 = @func_1992(%189) /* ty=(Tensor[(2, 5, 8), float64],) */;
  %191 = cast(%var_3583, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %193 = reshape(%191, newshape=[12, 14, 14]) /* ty=Tensor[(12, 14, 14), float64] */;
  %194 = reshape(%192, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %195 = @func_3367(%193, %194) /* ty=(Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) */;
  %196 = %157.3;
  %197 = minimum(%181, %182) /* ty=Tensor[(7, 15, 15), uint32] */;
  %198 = %187.2;
  %199 = %190.0;
  %200 = %195.0;
  (%196, meta[relay.Constant][10] /* ty=Tensor[(225), int32] */, %174, %197, %198, meta[relay.Constant][11] /* ty=Tensor[(1452), float64] */, %199, meta[relay.Constant][12] /* ty=Tensor[(80), float64] */, %200, %var_3583, meta[relay.Constant][13] /* ty=Tensor[(1792), float32] */)
}

def @func_3864(%var_3801: int16, %var_3802: Tensor[(16, 1, 13), int16], %var_3812: Tensor[(16, 8, 13), int16]) -> (Tensor[(16, 1, 13), bool], Tensor[(16, 8, 13), uint16], Tensor[(16, 1, 13), float64], Tensor[(11, 4, 7), float32], Tensor[(308), float32], Tensor[(11, 4, 7), float64], Tensor[(1183), int64]) {
  %201 = cast(%var_3801, dtype="bool") /* ty=bool */;
  %202 = cast(%var_3802, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
  %203 = cast(%var_3802, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %204 = cast(%var_3812, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
  %205 = floor_divide(%203, %204) /* ty=Tensor[(16, 8, 13), float32] */;
  %206 = cast(%var_3812, dtype="uint16") /* ty=Tensor[(16, 8, 13), uint16] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="uint16") /* ty=Tensor[(16, 8, 13), uint16] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %210 = cast(%var_3802, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %211 = atan(%210) /* ty=Tensor[(16, 1, 13), float32] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
  %213 = log10(%212) /* ty=Tensor[(16, 1, 13), float64] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %216 = reshape(%215, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %217 = @func_1699(%216) /* ty=(Tensor[(11, 4, 7), float32],) */;
  %218 = %217.0;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %220 = cast(meta[relay.Constant][15] /* ty=Tensor[(1183), int64] */, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %221 = reshape(%219, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %222 = reshape(%220, newshape=[91, 13]) /* ty=Tensor[(91, 13), int64] */;
  %223 = @func_2674(%221, %222) /* ty=(Tensor[(11, 4, 7), uint8], Tensor[(11, 4, 7), float32], Tensor[(728), int64], float64, Tensor[(252), float32], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(36), float64], Tensor[(2925), uint8], Tensor[(11, 4, 7), float64]) */;
  %224 = greater_equal(%201, %202) /* ty=Tensor[(16, 1, 13), bool] */;
  %225 = bitwise_xor(%208, %209) /* ty=Tensor[(16, 8, 13), uint16] */;
  %226 = erf(%214) /* ty=Tensor[(16, 1, 13), float64] */;
  %227 = %223.9;
  (%224, %225, %226, %218, meta[relay.Constant][14] /* ty=Tensor[(308), float32] */, %227, meta[relay.Constant][15] /* ty=Tensor[(1183), int64] */)
}

def @func_1409(%var_1390: Tensor[(1, 15, 15), int32], %var_1391: Tensor[(7, 15, 15), int32]) -> Tensor[(7, 15, 15), int32] {
  %228 = cast(%var_1390, dtype="int32") /* ty=Tensor[(1, 15, 15), int32] */;
  %229 = cast(%var_1391, dtype="int32") /* ty=Tensor[(7, 15, 15), int32] */;
  maximum(%228, %229) /* ty=Tensor[(7, 15, 15), int32] */
}

def @func_2512(%var_2491: Tensor[(280), uint16], %var_2500: Tensor[(1183), int64]) -> (Tensor[(840), int16], Tensor[(13, 7, 15), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(1183), int64], Tensor[(1, 2925), int8]) {
  %230 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %231 = cast(meta[relay.Constant][16] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %232 = cast(%var_2491, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 2925), uint8] */, dtype="uint8") /* ty=Tensor[(1, 2925), uint8] */;
  %234 = reshape(%231, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %235 = reshape(%232, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %236 = reshape(%233, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %237 = @func_1292(%234, %235, %236) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %238 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %239 = cast(%var_2500, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %240 = cast(%var_2491, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %241 = reshape(%238, newshape=[]) /* ty=int64 */;
  %242 = reshape(%239, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %243 = reshape(%240, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %244 = @func_354(%241, %242, %243) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %245 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 2925), uint8] */, dtype="int8") /* ty=Tensor[(1, 2925), int8] */;
  %246 = cast(8 /* ty=int64 */, dtype="int8") /* ty=int8 */;
  %247 = %230.0;
  %248 = %237.6;
  %249 = %244.1;
  %250 = right_shift(%245, %246) /* ty=Tensor[(1, 2925), int8] */;
  (%247, %248, meta[relay.Constant][16] /* ty=Tensor[(36), float64] */, %var_2491, %249, %var_2500, %250)
}

def @func_460(%var_417: Tensor[(11, 5, 4), float64], %var_438: Tensor[(280), uint16]) -> (Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) {
  %251 = cast(%var_438, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %252 = cast(meta[relay.Constant][18] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %253 = reshape(%251, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
  %254 = reshape(%252, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
  %255 = @func_139(%253, %254) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
  %256 = cast(%var_417, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %257 = cosh(%256) /* ty=Tensor[(11, 5, 4), float64] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(11, 5, 4), float32] */;
  %259 = erf(%258) /* ty=Tensor[(11, 5, 4), float32] */;
  %260 = cast(%var_417, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %264 = %255.5;
  %265 = floor_mod(%262, %263) /* ty=Tensor[(11, 5, 4), float64] */;
  (%264, %var_438, meta[relay.Constant][18] /* ty=Tensor[(352), float64] */, %265)
}

def @func_2602(%var_2598: Tensor[(308, 1), float32]) -> (Tensor[(840), int16], Tensor[(11, 4, 7), float32], Tensor[(308, 1), float32]) {
  %266 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %267 = cast(%var_2598, dtype="float32") /* ty=Tensor[(308, 1), float32] */;
  %268 = reshape(%267, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %269 = @func_1699(%268) /* ty=(Tensor[(11, 4, 7), float32],) */;
  %270 = %266.0;
  %271 = %269.0;
  (%270, %271, %var_2598)
}

def @func_2745() -> Tensor[(840), float32] {
  @func_2425() /* ty=Tensor[(840), float32] */
}

def @func_3691() -> (Tensor[(11, 4, 7), float32],) {
  %272 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %273 = %272.0;
  (%273,)
}

def @func_3749(%var_3742: Tensor[(520), uint16]) -> (Tensor[(840), float32], Tensor[(4, 13, 10), uint16], Tensor[(520), uint16]) {
  %274 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %275 = cast(%var_3742, dtype="uint16") /* ty=Tensor[(520), uint16] */;
  %276 = reshape(%275, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint16] */;
  %277 = %274.1;
  %278 = @func_3394(%276) /* ty=Tensor[(4, 13, 10), uint16] */;
  (%277, %278, %var_3742)
}

def @func_4442(%var_4429: Tensor[(14, 10, 12), float64]) -> Tensor[(14, 10, 12), float32] {
  %279 = cast(%var_4429, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
  %280 = atanh(%279) /* ty=Tensor[(14, 10, 12), float64] */;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(14, 10, 12), float32] */;
  asinh(%281) /* ty=Tensor[(14, 10, 12), float32] */
}

def @func_4903(%var_4891: Tensor[(225), int32], %var_4892: Tensor[(1575), int32]) -> (bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), float64]) {
  %282 = cast(%var_4891, dtype="int32") /* ty=Tensor[(225), int32] */;
  %283 = cast(%var_4892, dtype="int32") /* ty=Tensor[(1575), int32] */;
  %284 = reshape(%282, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
  %285 = reshape(%283, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
  %286 = cast(%var_4892, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %287 = @func_4789() /* ty=bool */;
  %288 = @func_1409(%284, %285) /* ty=Tensor[(7, 15, 15), int32] */;
  %289 = acos(%286) /* ty=Tensor[(1575), float64] */;
  (%287, %288, %var_4891, %289)
}

def @func_1292(%var_1247: Tensor[(3, 12, 1), float64], %var_1254: Tensor[(280), uint16], %var_1261: Tensor[(2925), uint8]) -> (Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) {
  %290 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %291 = cast(meta[relay.Constant][19] /* ty=Tensor[(1183), int64] */, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %292 = cast(%var_1254, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %293 = reshape(%290, newshape=[]) /* ty=int64 */;
  %294 = reshape(%291, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %295 = reshape(%292, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %296 = @func_354(%293, %294, %295) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %297 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %298 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %299 = reshape(%297, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
  %300 = reshape(%298, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
  %301 = @func_1029(%299, %300) /* ty=(Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) */;
  %302 = cast(%var_1254, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %303 = reshape(%302, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %304 = cast(-3 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %305 = cast(meta[relay.Constant][20] /* ty=Tensor[(1365), bool] */, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %306 = reshape(%304, newshape=[]) /* ty=bool */;
  %307 = reshape(%305, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), bool] */;
  %308 = @func_962(%306, %307) /* ty=(Tensor[(13, 7, 15), bool],) */;
  %309 = cast(%var_1247, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %310 = log10(%309) /* ty=Tensor[(3, 12, 1), float64] */;
  %311 = cast(%310, dtype="bool") /* ty=Tensor[(3, 12, 1), bool] */;
  %312 = cast(%var_1261, dtype="bool") /* ty=Tensor[(2925), bool] */;
  %313 = %296.2;
  %314 = %301.2;
  %315 = @func_60(%303) /* ty=Tensor[(10, 7, 4), float64] */;
  %316 = %308.0;
  %317 = logical_or(%311, %312) /* ty=Tensor[(3, 12, 2925), bool] */;
  (%313, -3 /* ty=int64 */, meta[relay.Constant][19] /* ty=Tensor[(1183), int64] */, %var_1254, %314, %315, %316, meta[relay.Constant][20] /* ty=Tensor[(1365), bool] */, %317)
}

def @func_3158(%var_3144: Tensor[(14, 8, 16), float32]) -> Tensor[(14, 8, 16), float32] {
  %318 = cast(%var_3144, dtype="float32") /* ty=Tensor[(14, 8, 16), float32] */;
  acosh(%318) /* ty=Tensor[(14, 8, 16), float32] */
}

def @func_962(%var_954: bool, %var_955: Tensor[(13, 7, 15), bool]) -> (Tensor[(13, 7, 15), bool],) {
  %319 = cast(%var_954, dtype="bool") /* ty=bool */;
  %320 = cast(%var_955, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
  %321 = logical_or(%319, %320) /* ty=Tensor[(13, 7, 15), bool] */;
  (%321,)
}

def @func_3316(%var_3303: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 4, 7), uint16],) {
  %322 = @func_2863() /* ty=Tensor[(11, 4, 7), float32] */;
  %323 = cast(%var_3303, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %327 = logical_xor(%325, %326) /* ty=Tensor[(11, 4, 7), uint16] */;
  (%327,)
}

def @func_4972(%var_4967: Tensor[(55, 4), float64], %var_4969: Tensor[(252), float32]) -> (bool, Tensor[(1575), int32], Tensor[(55, 4), float64], Tensor[(10, 28), uint16], Tensor[(252), float32]) {
  %328 = cast(%var_4967, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %329 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 28), uint16] */, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %330 = @func_4789() /* ty=bool */;
  %331 = cast(%330, dtype="float64") /* ty=float64 */;
  %332 = cast(%var_4969, dtype="float32") /* ty=Tensor[(252), float32] */;
  %333 = reshape(%328, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %334 = reshape(%329, newshape=[10, 28]) /* ty=Tensor[(10, 28), uint16] */;
  %335 = reshape(%331, newshape=[]) /* ty=float64 */;
  %336 = reshape(%332, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %337 = @func_2128(%333, %334, %335, %336) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(220), float64], Tensor[(10, 28), uint16], Tensor[(252, 1), float32], Tensor[(252), float32], bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), int32], Tensor[(10, 7, 4), float64], Tensor[(2925), bool]) */;
  %338 = %337.8;
  (%330, %338, %var_4967, meta[relay.Constant][21] /* ty=Tensor[(10, 28), uint16] */, %var_4969)
}

def @func_1632() -> (Tensor[(11, 4, 7), float32],) {
  %339 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 4, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %340 = cos(%339) /* ty=Tensor[(11, 4, 7), float32] */;
  (%340,)
}

def @func_1839() -> (Tensor[(840), float32], bool, Tensor[(2925), uint8]) {
  %341 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %342 = %341.1;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(840), float32] */;
  %344 = cast(meta[relay.Constant][23] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %345 = cast(meta[relay.Constant][23] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %346 = reshape(%344, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
  %347 = reshape(%345, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
  %348 = @func_1029(%346, %347) /* ty=(Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) */;
  %349 = exp(%343) /* ty=Tensor[(840), float32] */;
  %350 = %348.2;
  (%349, %350, meta[relay.Constant][23] /* ty=Tensor[(2925), uint8] */)
}

def @func_2840(%var_2802: Tensor[(11, 4, 7), float32], %var_2824: Tensor[(280), uint16], %var_2825: Tensor[(1183), int64]) -> (Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), float64], Tensor[(280), uint16], Tensor[(280), uint16], Tensor[(1183), int64]) {
  %351 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %352 = %351.3;
  %353 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 7), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = cast(%var_2802, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %358 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%352, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %362 = asin(%361) /* ty=Tensor[(11, 4, 7), float32] */;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  %364 = cast(%var_2824, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %365 = cast(%var_2825, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %366 = reshape(%364, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %367 = reshape(%365, newshape=[1183]) /* ty=Tensor[(1183), int64] */;
  %368 = @func_2512(%366, %367) /* ty=(Tensor[(840), int16], Tensor[(13, 7, 15), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(1183), int64], Tensor[(1, 2925), int8]) */;
  %369 = less_equal(%355, %356) /* ty=Tensor[(11, 4, 7), bool] */;
  %370 = less(%359, %360) /* ty=Tensor[(11, 4, 7), bool] */;
  %371 = cosh(%363) /* ty=Tensor[(11, 4, 7), float64] */;
  %372 = %368.3;
  (%369, %370, %371, %372, %var_2824, %var_2825)
}

def @func_2984(%var_2958: Tensor[(16, 1, 1), int64], %var_2959: Tensor[(16, 5, 11), int64]) -> (Tensor[(16, 5, 11), uint16], Tensor[(16, 5, 11), bool]) {
  %373 = cast(%var_2958, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
  %374 = cast(%var_2959, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
  %375 = less_equal(%373, %374) /* ty=Tensor[(16, 5, 11), bool] */;
  %376 = cast(%375, dtype="uint16") /* ty=Tensor[(16, 5, 11), uint16] */;
  %377 = shape_of(%var_2959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%var_2959, dtype="uint16") /* ty=Tensor[(16, 5, 11), uint16] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %380 = cast(%var_2958, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
  %381 = cast(%375, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
  %382 = bitwise_or(%378, %379) /* ty=Tensor[(16, 5, 11), uint16] */;
  %383 = not_equal(%380, %381) /* ty=Tensor[(16, 5, 11), bool] */;
  (%382, %383)
}

def @func_3887(%var_3877: uint64, %var_3878: Tensor[(7, 1, 10), uint64]) -> Tensor[(7, 1, 10), uint64] {
  %384 = cast(%var_3877, dtype="uint64") /* ty=uint64 */;
  %385 = cast(%var_3878, dtype="uint64") /* ty=Tensor[(7, 1, 10), uint64] */;
  add(%384, %385) /* ty=Tensor[(7, 1, 10), uint64] */
}

def @func_2456(%var_2444: Tensor[(2, 8, 2), int32], %var_2445: Tensor[(2, 8, 2), int32]) -> (Tensor[(2, 8, 2), int32],) {
  %386 = cast(%var_2445, dtype="int32") /* ty=Tensor[(2, 8, 2), int32] */;
  %387 = shape_of(%var_2444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_2444, dtype="int32") /* ty=Tensor[(2, 8, 2), int32] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %390 = left_shift(%388, %389) /* ty=Tensor[(2, 8, 2), int32] */;
  (%390,)
}

def @func_4789() -> bool {
  @func_2700() /* ty=bool */
}

def @func_3243() -> Tensor[(15, 11, 8), float32] {
  %391 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 8), float32] */;
  sqrt(%391) /* ty=Tensor[(15, 11, 8), float32] */
}

def @func_4549(%var_4508: Tensor[(2925), uint8], %var_4527: Tensor[(280), int32]) -> (Tensor[(11, 4, 7), float32], Tensor[(2925), float64], Tensor[(11, 4, 7), float32], Tensor[(7, 8, 5), int8], Tensor[(280), int32]) {
  %392 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %393 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %394 = %393.2;
  %395 = cast(%var_4508, dtype="float64") /* ty=Tensor[(2925), float64] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(1), int32] */;
  %397 = cast(%394, dtype="float64") /* ty=Tensor[(2925), float64] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?), float64] */;
  %399 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %400 = cast(%var_4527, dtype="int32") /* ty=Tensor[(280), int32] */;
  %401 = cast(%var_4527, dtype="int32") /* ty=Tensor[(280), int32] */;
  %402 = reshape(%400, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), int32] */;
  %403 = reshape(%401, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), int32] */;
  %404 = @func_3061(%402, %403) /* ty=(Tensor[(7, 8, 5), uint64], Tensor[(7, 8, 5), uint16], Tensor[(7, 8, 5), int8]) */;
  %405 = %392.0;
  %406 = power(%397, %398) /* ty=Tensor[(2925), float64] */;
  %407 = %399.3;
  %408 = %404.2;
  (%405, %406, %407, %408, %var_4527)
}

def @func_4272(%var_4258: Tensor[(280), uint16]) -> (Tensor[(840), float32], Tensor[(1183), int64], Tensor[(9, 4), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) {
  %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
  %410 = cast(%var_4258, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %411 = cast(meta[relay.Constant][27] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %412 = reshape(%409, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %413 = reshape(%410, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %414 = reshape(%411, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %415 = @func_1292(%412, %413, %414) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %416 = @func_2745() /* ty=Tensor[(840), float32] */;
  %417 = %415.2;
  (%416, %417, meta[relay.Constant][26] /* ty=Tensor[(9, 4), float64] */, %var_4258, meta[relay.Constant][27] /* ty=Tensor[(2925), uint8] */)
}

def @func_997(%var_979: float64, %var_992: Tensor[(252, 1), float32]) -> (Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) {
  %418 = cast(%var_979, dtype="float64") /* ty=float64 */;
  %419 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %420 = cast(%var_992, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
  %421 = cast(meta[relay.Constant][29] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %422 = cast(%var_992, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
  %423 = reshape(%420, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %424 = reshape(%421, newshape=[2, 176]) /* ty=Tensor[(2, 176), float64] */;
  %425 = reshape(%422, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %426 = @func_947(%423, %424, %425) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) */;
  %427 = mod(%418, %419) /* ty=Tensor[(2, 2, 13), float64] */;
  %428 = %426.0;
  (%427, %428, %var_992, meta[relay.Constant][29] /* ty=Tensor[(352), float64] */)
}

def @func_1742() -> (Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) {
  %429 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %430 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
  %431 = reshape(%430, newshape=[6, 10, 14]) /* ty=Tensor[(6, 10, 14), int16] */;
  %432 = @func_512(%431) /* ty=(Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(6, 10, 14), float32] */;
  %435 = %429.0;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %437 = reshape(%436, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %438 = @func_1699(%437) /* ty=(Tensor[(11, 4, 7), float32],) */;
  %439 = cast(%433, dtype="float32") /* ty=Tensor[(6, 10, 14), float32] */;
  %440 = asin(%434) /* ty=Tensor[(6, 10, 14), float32] */;
  %441 = %438.0;
  %442 = sin(%439) /* ty=Tensor[(6, 10, 14), float32] */;
  (%435, meta[relay.Constant][30] /* ty=Tensor[(840), int16] */, %440, %441, %442)
}

def @func_2128(%var_2080: Tensor[(220), float64], %var_2081: Tensor[(10, 28), uint16], %var_2090: float64, %var_2091: Tensor[(252), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(220), float64], Tensor[(10, 28), uint16], Tensor[(252, 1), float32], Tensor[(252), float32], bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), int32], Tensor[(10, 7, 4), float64], Tensor[(2925), bool]) {
  %443 = cast(%var_2080, dtype="float64") /* ty=Tensor[(220), float64] */;
  %444 = cast(%var_2081, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %445 = reshape(%443, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), float64] */;
  %446 = reshape(%444, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %447 = @func_460(%445, %446) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) */;
  %448 = cast(%var_2090, dtype="float64") /* ty=float64 */;
  %449 = cast(%var_2091, dtype="float32") /* ty=Tensor[(252), float32] */;
  %450 = reshape(%448, newshape=[]) /* ty=float64 */;
  %451 = reshape(%449, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %452 = @func_997(%450, %451) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %453 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %454 = cast(meta[relay.Constant][31] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
  %455 = cast(meta[relay.Constant][32] /* ty=Tensor[(1575), int32] */, dtype="int32") /* ty=Tensor[(1575), int32] */;
  %456 = reshape(%454, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
  %457 = reshape(%455, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
  %458 = cast(%var_2081, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %459 = reshape(%458, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %460 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %461 = %460.2;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(2925), float64] */;
  %463 = erf(%462) /* ty=Tensor[(2925), float64] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %465 = exp(%464) /* ty=Tensor[(2925), float32] */;
  %466 = cast(%465, dtype="bool") /* ty=Tensor[(2925), bool] */;
  %467 = cast(%var_2090, dtype="bool") /* ty=bool */;
  %468 = %447.0;
  %469 = %452.2;
  %470 = %453.1;
  %471 = @func_1409(%456, %457) /* ty=Tensor[(7, 15, 15), int32] */;
  %472 = @func_60(%459) /* ty=Tensor[(10, 7, 4), float64] */;
  %473 = logical_and(%466, %467) /* ty=Tensor[(2925), bool] */;
  (%468, %var_2080, %var_2081, %469, %var_2091, %470, %471, meta[relay.Constant][31] /* ty=Tensor[(225), int32] */, meta[relay.Constant][32] /* ty=Tensor[(1575), int32] */, %472, %473)
}

def @func_4640(%var_4594: Tensor[(13, 10, 1), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(11, 4, 7), float32], Tensor[(13, 10, 1), float32]) {
  %474 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %475 = cast(meta[relay.Constant][33] /* ty=Tensor[(91, 13), int64] */, dtype="int64") /* ty=Tensor[(91, 13), int64] */;
  %476 = cast(meta[relay.Constant][34] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %477 = reshape(%474, newshape=[]) /* ty=int64 */;
  %478 = reshape(%475, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %479 = reshape(%476, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %480 = @func_354(%477, %478, %479) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %481 = cast(%var_4594, dtype="float32") /* ty=Tensor[(13, 10, 1), float32] */;
  %482 = sinh(%481) /* ty=Tensor[(13, 10, 1), float32] */;
  %483 = cast(%482, dtype="int16") /* ty=Tensor[(13, 10, 1), int16] */;
  %484 = cast(10 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %485 = multiply(%483, %484) /* ty=Tensor[(13, 10, 1), int16] */;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(13, 10, 1), float32] */;
  %487 = %480.1;
  %488 = @func_3798() /* ty=Tensor[(11, 4, 7), float32] */;
  %489 = atanh(%486) /* ty=Tensor[(13, 10, 1), float32] */;
  (%487, meta[relay.Constant][33] /* ty=Tensor[(91, 13), int64] */, meta[relay.Constant][34] /* ty=Tensor[(280), uint16] */, %488, %489)
}

def @func_2187(%var_2165: int64) -> (Tensor[(840), float32], Tensor[(280), uint16], Tensor[(1, 220), float64], Tensor[(280), uint16], Tensor[(280), uint16], int64, Tensor[(13, 91), int64]) {
  %490 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %491 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 220), float64] */, dtype="float64") /* ty=Tensor[(1, 220), float64] */;
  %492 = cast(meta[relay.Constant][36] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %493 = reshape(%491, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), float64] */;
  %494 = reshape(%492, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %495 = @func_460(%493, %494) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) */;
  %496 = cast(%var_2165, dtype="int64") /* ty=int64 */;
  %497 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 91), int64] */, dtype="int64") /* ty=Tensor[(13, 91), int64] */;
  %498 = %495.1;
  %499 = cast(%498, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %500 = reshape(%496, newshape=[]) /* ty=int64 */;
  %501 = reshape(%497, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %502 = reshape(%499, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %503 = @func_354(%500, %501, %502) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %504 = %490.1;
  %505 = %503.2;
  (%504, %498, meta[relay.Constant][35] /* ty=Tensor[(1, 220), float64] */, meta[relay.Constant][36] /* ty=Tensor[(280), uint16] */, %505, %var_2165, meta[relay.Constant][37] /* ty=Tensor[(13, 91), int64] */)
}

def @func_2262() -> (Tensor[(840), int16],) {
  %506 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %507 = %506.1;
  (%507,)
}

def @func_2863() -> Tensor[(11, 4, 7), float32] {
  %508 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %508.0
}

def @func_4181(%var_4137: Tensor[(2304), float64], %var_4138: Tensor[(4, 88), float64], %var_4154: Tensor[(4, 88), float64]) -> (Tensor[(252), float32], Tensor[(11, 4, 7), float64], Tensor[(2304), float64], Tensor[(4, 88), bool], Tensor[(4, 88), float64], Tensor[(4, 88), float32]) {
  %509 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
  %510 = cast(%var_4137, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %511 = cast(%var_4138, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %512 = reshape(%510, newshape=[2304]) /* ty=Tensor[(2304), float64] */;
  %513 = reshape(%511, newshape=[8, 44]) /* ty=Tensor[(8, 44), float64] */;
  %514 = @func_2233(%512, %513) /* ty=(Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) */;
  %515 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 88), float64] */, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %516 = shape_of(%var_4154, dtype="int32") /* ty=Tensor[(2), int32] */;
  %517 = cast(%var_4154, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %519 = cast(%var_4138, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %520 = shape_of(%var_4154, dtype="int32") /* ty=Tensor[(2), int32] */;
  %521 = cast(%var_4154, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %523 = cast(%var_4154, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %524 = shape_of(%var_4138, dtype="int32") /* ty=Tensor[(2), int32] */;
  %525 = cast(%var_4138, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %527 = add(%525, %526) /* ty=Tensor[(4, 88), float64] */;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %529 = %509.3;
  %530 = %514.0;
  %531 = logical_and(%517, %518) /* ty=Tensor[(4, 88), bool] */;
  %532 = floor_divide(%521, %522) /* ty=Tensor[(4, 88), float64] */;
  %533 = sin(%528) /* ty=Tensor[(4, 88), float32] */;
  (%529, %530, %var_4137, %531, %532, %533)
}

def @func_1699(%var_1688: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 4, 7), float32],) {
  %534 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %535 = %534.0;
  %536 = cast(%var_1688, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %540 = power(%538, %539) /* ty=Tensor[(11, 4, 7), float32] */;
  (%540,)
}

def @func_2027() -> (Tensor[(11, 4, 7), float32], Tensor[(840), float32]) {
  %541 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %542 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %543 = %541.0;
  %544 = %542.0;
  (%543, %544)
}

def @func_3455(%var_3441: Tensor[(11, 11, 12), float64], %var_3447: Tensor[(11, 11, 12), float64]) -> (Tensor[(11, 11, 12), float64], Tensor[(11, 11, 12), float64], Tensor[(6, 10, 14), float32]) {
  %545 = cast(%var_3441, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %546 = cast(%var_3447, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %547 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%var_3441, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %550 = asinh(%545) /* ty=Tensor[(11, 11, 12), float64] */;
  %551 = floor_mod(%548, %549) /* ty=Tensor[(11, 11, 12), float64] */;
  %552 = @func_3021() /* ty=Tensor[(6, 10, 14), float32] */;
  (%550, %551, %552)
}

def @func_3632(%var_3613: Tensor[(308, 1), float32]) -> (Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) {
  %553 = cast(%var_3613, dtype="float32") /* ty=Tensor[(308, 1), float32] */;
  %554 = reshape(%553, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %555 = @func_3316(%554) /* ty=(Tensor[(11, 4, 7), uint16],) */;
  %556 = cast(%var_3613, dtype="float32") /* ty=Tensor[(308, 1), float32] */;
  %557 = reshape(%556, newshape=[308, 1]) /* ty=Tensor[(308, 1), float32] */;
  %558 = @func_2602(%557) /* ty=(Tensor[(840), int16], Tensor[(11, 4, 7), float32], Tensor[(308, 1), float32]) */;
  %559 = @func_3021() /* ty=Tensor[(6, 10, 14), float32] */;
  %560 = %555.0;
  %561 = %558.0;
  (%559, %560, %var_3613, %561)
}

def @func_60(%var_30: Tensor[(10, 7, 4), uint16]) -> Tensor[(10, 7, 4), float64] {
  %562 = cast(meta[relay.Constant][39] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %563 = cast(%var_30, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %564 = logical_xor(%562, %563) /* ty=Tensor[(10, 7, 4), uint16] */;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
  asinh(%565) /* ty=Tensor[(10, 7, 4), float64] */
}

def @func_2758(%var_2755: Tensor[(25, 9), int32], %var_2756: Tensor[(1575), int32]) -> (bool, Tensor[(7, 15, 15), int32], Tensor[(25, 9), int32], Tensor[(1575), int32]) {
  %566 = cast(%var_2755, dtype="int32") /* ty=Tensor[(25, 9), int32] */;
  %567 = cast(%var_2756, dtype="int32") /* ty=Tensor[(1575), int32] */;
  %568 = reshape(%566, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
  %569 = reshape(%567, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
  %570 = @func_2700() /* ty=bool */;
  %571 = @func_1409(%568, %569) /* ty=Tensor[(7, 15, 15), int32] */;
  (%570, %571, %var_2755, %var_2756)
}

def @func_4318(%var_4306: Tensor[(840, 1), int16], %var_4315: Tensor[(2352), float64]) -> (Tensor[(11, 4, 7), float32], Tensor[(840), uint64], Tensor[(840, 1), int16], bool, Tensor[(1792), float32], Tensor[(2352), float64], Tensor[(32, 56), float32]) {
  %572 = @func_3698() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %573 = cast(%var_4306, dtype="int16") /* ty=Tensor[(840, 1), int16] */;
  %574 = reshape(%573, newshape=[840]) /* ty=Tensor[(840), int16] */;
  %575 = @func_2404(%574) /* ty=(Tensor[(840), uint64],) */;
  %576 = cast(%var_4315, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %577 = cast(meta[relay.Constant][40] /* ty=Tensor[(32, 56), float32] */, dtype="float32") /* ty=Tensor[(32, 56), float32] */;
  %578 = reshape(%576, newshape=[12, 14, 14]) /* ty=Tensor[(12, 14, 14), float64] */;
  %579 = reshape(%577, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %580 = @func_3367(%578, %579) /* ty=(Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) */;
  %581 = %572.0;
  %582 = %575.0;
  %583 = @func_2700() /* ty=bool */;
  %584 = %580.2;
  (%581, %582, %var_4306, %583, %584, %var_4315, meta[relay.Constant][40] /* ty=Tensor[(32, 56), float32] */)
}

def @func_4355(%var_4339: Tensor[(14, 3, 7), uint64]) -> (Tensor[(14, 3, 7), uint64], bool, Tensor[(840), float32]) {
  %585 = cast(%var_4339, dtype="uint64") /* ty=Tensor[(14, 3, 7), uint64] */;
  %586 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(14, 3, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 3, 7), uint64] */, dtype="uint64") /* ty=Tensor[(14, 3, 7), uint64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %589 = @func_3131() /* ty=(Tensor[(840), float32],) */;
  %590 = left_shift(%587, %588) /* ty=Tensor[(14, 3, 7), uint64] */;
  %591 = @func_2700() /* ty=bool */;
  %592 = %589.0;
  (%590, %591, %592)
}

def @func_3367(%var_3359: Tensor[(12, 14, 14), float64], %var_3365: Tensor[(1792), float32]) -> (Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) {
  %593 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
  %594 = %593.2;
  %595 = cast(%594, dtype="int16") /* ty=int16 */;
  %596 = cast(%var_3359, dtype="int16") /* ty=Tensor[(12, 14, 14), int16] */;
  %597 = cast(%var_3365, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %598 = reshape(%597, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), float32] */;
  %599 = left_shift(%595, %596) /* ty=Tensor[(12, 14, 14), int16] */;
  %600 = @func_3158(%598) /* ty=Tensor[(14, 8, 16), float32] */;
  (%599, %600, %var_3365)
}

def @main(%var_5175: Tensor[(308), float32], %var_5177: Tensor[(1183), int64], %var_5183: Tensor[(1183), int64]) -> (Tensor[(840), float32], Tensor[(280), uint16], Tensor[(308), float32], Tensor[(280), uint16], Tensor[(1183), bool]) {
  %601 = cast(%var_5175, dtype="float32") /* ty=Tensor[(308), float32] */;
  %602 = cast(meta[relay.Constant][42] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %603 = cast(%var_5177, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %604 = reshape(%601, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %605 = reshape(%602, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %606 = reshape(%603, newshape=[1183]) /* ty=Tensor[(1183), int64] */;
  %607 = @func_2840(%604, %605, %606) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), float64], Tensor[(280), uint16], Tensor[(280), uint16], Tensor[(1183), int64]) */;
  %608 = cast(%var_5183, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %609 = shape_of(%var_5177, dtype="int32") /* ty=Tensor[(1), int32] */;
  %610 = cast(%var_5177, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?), bool] */;
  %612 = @func_2745() /* ty=Tensor[(840), float32] */;
  %613 = %607.3;
  %614 = greater(%610, %611) /* ty=Tensor[(1183), bool] */;
  (%612, %613, %var_5175, meta[relay.Constant][42] /* ty=Tensor[(280), uint16] */, %614)
}

def @func_1029(%var_1019: Tensor[(15, 13, 15), uint8], %var_1020: Tensor[(15, 13, 15), uint8]) -> (Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) {
  %615 = cast(%var_1020, dtype="uint8") /* ty=Tensor[(15, 13, 15), uint8] */;
  %616 = shape_of(%var_1019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_1019, dtype="uint8") /* ty=Tensor[(15, 13, 15), uint8] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %619 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %620 = cast(meta[relay.Constant][43] /* ty=Tensor[(1365), bool] */, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %621 = reshape(%619, newshape=[]) /* ty=bool */;
  %622 = reshape(%620, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), bool] */;
  %623 = @func_962(%621, %622) /* ty=(Tensor[(13, 7, 15), bool],) */;
  %624 = maximum(%617, %618) /* ty=Tensor[(15, 13, 15), uint8] */;
  %625 = %623.0;
  (%624, %625, False /* ty=bool */, meta[relay.Constant][43] /* ty=Tensor[(1365), bool] */)
}

def @func_4745(%var_4734: Tensor[(1, 36), float64], %var_4735: Tensor[(2925), uint8]) -> (Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32], Tensor[(840), float32], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(10, 7, 4), float64], Tensor[(1, 36), float64], Tensor[(2925), uint8]) {
  %626 = @func_2863() /* ty=Tensor[(11, 4, 7), float32] */;
  %627 = cast(%626, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %628 = reshape(%627, newshape=[308, 1]) /* ty=Tensor[(308, 1), float32] */;
  %629 = @func_3632(%628) /* ty=(Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) */;
  %630 = cast(meta[relay.Constant][44] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %631 = cast(meta[relay.Constant][45] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %632 = reshape(%630, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
  %633 = reshape(%631, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
  %634 = @func_139(%632, %633) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
  %635 = cast(%var_4734, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %636 = %634.7;
  %637 = cast(%636, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %638 = cast(%var_4735, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %639 = reshape(%635, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %640 = reshape(%637, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %641 = reshape(%638, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %642 = @func_1292(%639, %640, %641) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %643 = %629.0;
  %644 = @func_2425() /* ty=Tensor[(840), float32] */;
  %645 = %642.5;
  (%626, %643, %644, %636, meta[relay.Constant][44] /* ty=Tensor[(280), uint16] */, meta[relay.Constant][45] /* ty=Tensor[(352), float64] */, %645, %var_4734, %var_4735)
}

def @func_3131() -> (Tensor[(840), float32],) {
  %646 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %647 = %646.0;
  (%647,)
}

def @func_4755() -> (Tensor[(840), int16],) {
  %648 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %649 = %648.0;
  (%649,)
}

def @func_3061(%var_3041: Tensor[(7, 8, 5), int32], %var_3046: Tensor[(7, 8, 5), int32]) -> (Tensor[(7, 8, 5), uint64], Tensor[(7, 8, 5), uint16], Tensor[(7, 8, 5), int8]) {
  %650 = @func_2916() /* ty=Tensor[(7, 8, 5), int32] */;
  %651 = cast(%var_3041, dtype="uint64") /* ty=Tensor[(7, 8, 5), uint64] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%650, dtype="uint64") /* ty=Tensor[(7, 8, 5), uint64] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %655 = cast(%var_3046, dtype="uint16") /* ty=Tensor[(7, 8, 5), uint16] */;
  %656 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%650, dtype="uint16") /* ty=Tensor[(7, 8, 5), uint16] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %659 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int8") /* ty=Tensor[(7, 8, 5), int8] */;
  %660 = shape_of(%var_3041, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%var_3041, dtype="int8") /* ty=Tensor[(7, 8, 5), int8] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %663 = logical_xor(%653, %654) /* ty=Tensor[(7, 8, 5), uint64] */;
  %664 = bitwise_or(%657, %658) /* ty=Tensor[(7, 8, 5), uint16] */;
  %665 = add(%661, %662) /* ty=Tensor[(7, 8, 5), int8] */;
  (%663, %664, %665)
}

def @func_2700() -> bool {
  %666 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %666.1
}

def @func_139(%var_92: Tensor[(70, 4), uint16], %var_122: Tensor[(11, 4, 8), float64]) -> (Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) {
  %667 = cast(%var_92, dtype="uint16") /* ty=Tensor[(70, 4), uint16] */;
  %668 = reshape(%667, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %669 = @func_60(%668) /* ty=Tensor[(10, 7, 4), float64] */;
  %670 = cast(%669, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %671 = reshape(%670, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %672 = cast(%var_92, dtype="uint16") /* ty=Tensor[(70, 4), uint16] */;
  %673 = reshape(%672, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %674 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %675 = atanh(%674) /* ty=Tensor[(11, 4, 8), float32] */;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
  %677 = cosh(%676) /* ty=Tensor[(11, 4, 8), float64] */;
  %678 = cast(%var_122, dtype="uint16") /* ty=Tensor[(11, 4, 8), uint16] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="uint16") /* ty=Tensor[(11, 4, 8), uint16] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %682 = cast(%var_92, dtype="uint16") /* ty=Tensor[(70, 4), uint16] */;
  %683 = reshape(%682, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %684 = cast(%675, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %685 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%677, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = cast(%669, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %689 = reshape(%688, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %690 = @func_60(%671) /* ty=Tensor[(10, 7, 4), float64] */;
  %691 = @func_60(%673) /* ty=Tensor[(10, 7, 4), float64] */;
  %692 = maximum(%680, %681) /* ty=Tensor[(11, 4, 8), uint16] */;
  %693 = @func_60(%683) /* ty=Tensor[(10, 7, 4), float64] */;
  %694 = logical_or(%686, %687) /* ty=Tensor[(11, 4, 8), bool] */;
  %695 = @func_60(%689) /* ty=Tensor[(10, 7, 4), float64] */;
  (%669, %var_92, %690, %691, %692, %693, %694, %695)
}

def @func_3291(%var_3289: int64) -> (Tensor[(11, 4, 7), float32], int64, int64) {
  %696 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %697 = cast(%var_3289, dtype="int64") /* ty=int64 */;
  %698 = reshape(%697, newshape=[]) /* ty=int64 */;
  %699 = @func_2187(%698) /* ty=(Tensor[(840), float32], Tensor[(280), uint16], Tensor[(1, 220), float64], Tensor[(280), uint16], Tensor[(280), uint16], int64, Tensor[(13, 91), int64]) */;
  %700 = %696.0;
  %701 = %699.5;
  (%700, %701, %var_3289)
}

def @func_3497() -> (Tensor[(840), float32],) {
  %702 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %703 = %702.0;
  (%703,)
}

def @func_3798() -> Tensor[(11, 4, 7), float32] {
  @func_2863() /* ty=Tensor[(11, 4, 7), float32] */
}

def @func_354(%var_339: int64, %var_340: Tensor[(7, 13, 13), int64], %var_345: Tensor[(280), uint16]) -> (Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) {
  %704 = cast(%var_339, dtype="int64") /* ty=int64 */;
  %705 = cast(%var_340, dtype="int64") /* ty=Tensor[(7, 13, 13), int64] */;
  %706 = cast(%var_345, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %707 = reshape(%706, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %708 = left_shift(%704, %705) /* ty=Tensor[(7, 13, 13), int64] */;
  %709 = @func_60(%707) /* ty=Tensor[(10, 7, 4), float64] */;
  (%708, %709, %var_345)
}

def @func_2903() -> (Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) {
  %710 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %711 = cast(3.56493f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %712 = cast(meta[relay.Constant][48] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %713 = reshape(%711, newshape=[]) /* ty=float64 */;
  %714 = reshape(%712, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %715 = @func_997(%713, %714) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %716 = %710.2;
  %717 = %715.1;
  (%716, %717, 3.56493f64 /* ty=float64 */, meta[relay.Constant][48] /* ty=Tensor[(252), float32] */)
}

def @func_3698() -> (Tensor[(11, 4, 7), float32],) {
  %718 = @func_2863() /* ty=Tensor[(11, 4, 7), float32] */;
  (%718,)
}

def @func_2425() -> Tensor[(840), float32] {
  %719 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %719.0
}

def @func_5055(%var_5045: Tensor[(130, 4), uint16]) -> (Tensor[(13, 10, 10), uint64], Tensor[(4, 13, 10), uint16], Tensor[(130, 4), uint16]) {
  %720 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 10, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 10, 10), uint64] */;
  %721 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(13, 10, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 10, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 10, 10), uint64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %724 = cast(%var_5045, dtype="uint16") /* ty=Tensor[(130, 4), uint16] */;
  %725 = reshape(%724, newshape=[520]) /* ty=Tensor[(520), uint16] */;
  %726 = @func_3749(%725) /* ty=(Tensor[(840), float32], Tensor[(4, 13, 10), uint16], Tensor[(520), uint16]) */;
  %727 = bitwise_or(%722, %723) /* ty=Tensor[(13, 10, 10), uint64] */;
  %728 = %726.1;
  (%727, %728, %var_5045)
}

def @func_947(%var_890: Tensor[(6, 7, 6), float32], %var_924: Tensor[(2, 176), float64], %var_927: Tensor[(6, 7, 6), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) {
  %729 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 28), uint16] */, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %730 = reshape(%729, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %731 = @func_60(%730) /* ty=Tensor[(10, 7, 4), float64] */;
  %732 = cast(%731, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %733 = cast(%var_924, dtype="float64") /* ty=Tensor[(2, 176), float64] */;
  %734 = reshape(%732, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
  %735 = reshape(%733, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
  %736 = @func_139(%734, %735) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
  %737 = cast(%var_890, dtype="float32") /* ty=Tensor[(6, 7, 6), float32] */;
  %738 = sin(%737) /* ty=Tensor[(6, 7, 6), float32] */;
  %739 = cast(%var_927, dtype="uint64") /* ty=Tensor[(6, 7, 6), uint64] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="uint64") /* ty=Tensor[(6, 7, 6), uint64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %743 = bitwise_or(%741, %742) /* ty=Tensor[(6, 7, 6), uint64] */;
  %744 = cast(%var_927, dtype="int8") /* ty=Tensor[(6, 7, 6), int8] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%743, dtype="int8") /* ty=Tensor[(6, 7, 6), int8] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %748 = %736.3;
  %749 = maximum(%746, %747) /* ty=Tensor[(6, 7, 6), int8] */;
  (%731, meta[relay.Constant][51] /* ty=Tensor[(10, 28), uint16] */, %748, %var_924, %749)
}

def @func_1936(%var_1850: Tensor[(14, 13, 4), int64], %var_1851: Tensor[(14, 13, 4), int64], %var_1888: float64, %var_1889: Tensor[(252, 1), float32], %var_1897: Tensor[(14, 13, 4), float64], %var_1903: Tensor[(1183), int64], %var_1904: Tensor[(280), uint16], %var_1910: Tensor[(14, 13, 4), float64], %var_1933: Tensor[(36), float64], %var_1934: Tensor[(2925), uint8]) -> (Tensor[(14, 13, 4), bool], Tensor[(11, 4, 7), float32], Tensor[(352), float64], float64, Tensor[(252, 1), float32], Tensor[(7, 13, 13), int64], Tensor[(1183), int64], Tensor[(280), uint16], Tensor[(14, 13, 4), int32], Tensor[(14, 13, 4), uint32], Tensor[(14, 13, 4), int64], bool, Tensor[(36), float64], Tensor[(2925), uint8]) {
  %750 = cast(%var_1851, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %751 = shape_of(%var_1850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%var_1850, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %754 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %755 = cast(%var_1888, dtype="float64") /* ty=float64 */;
  %756 = cast(%var_1889, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
  %757 = reshape(%755, newshape=[]) /* ty=float64 */;
  %758 = reshape(%756, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %759 = @func_997(%757, %758) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %760 = cast(%var_1888, dtype="int64") /* ty=int64 */;
  %761 = cast(%var_1903, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %762 = cast(%var_1904, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %763 = reshape(%760, newshape=[]) /* ty=int64 */;
  %764 = reshape(%761, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %765 = reshape(%762, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %766 = @func_354(%763, %764, %765) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %767 = cast(%var_1851, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %768 = atan(%767) /* ty=Tensor[(14, 13, 4), float64] */;
  %769 = cast(%var_1910, dtype="int32") /* ty=Tensor[(14, 13, 4), int32] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="int32") /* ty=Tensor[(14, 13, 4), int32] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %773 = cast(%var_1851, dtype="uint8") /* ty=Tensor[(14, 13, 4), uint8] */;
  %774 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%768, dtype="uint8") /* ty=Tensor[(14, 13, 4), uint8] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %777 = logical_xor(%775, %776) /* ty=Tensor[(14, 13, 4), uint8] */;
  %778 = cast(%var_1851, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %782 = divide(%780, %781) /* ty=Tensor[(14, 13, 4), float64] */;
  %783 = cast(%var_1897, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %787 = power(%785, %786) /* ty=Tensor[(14, 13, 4), float64] */;
  %788 = cast(%768, dtype="uint32") /* ty=Tensor[(14, 13, 4), uint32] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="uint32") /* ty=Tensor[(14, 13, 4), uint32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %792 = cast(%var_1910, dtype="int64") /* ty=Tensor[(14, 13, 4), int64] */;
  %793 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%787, dtype="int64") /* ty=Tensor[(14, 13, 4), int64] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %796 = cast(%var_1933, dtype="float64") /* ty=Tensor[(36), float64] */;
  %797 = cast(%var_1904, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %798 = cast(%var_1934, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %799 = reshape(%796, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %800 = reshape(%797, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %801 = reshape(%798, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %802 = @func_1292(%799, %800, %801) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %803 = less_equal(%752, %753) /* ty=Tensor[(14, 13, 4), bool] */;
  %804 = %754.3;
  %805 = %759.3;
  %806 = %766.0;
  %807 = minimum(%771, %772) /* ty=Tensor[(14, 13, 4), int32] */;
  %808 = bitwise_or(%790, %791) /* ty=Tensor[(14, 13, 4), uint32] */;
  %809 = bitwise_xor(%794, %795) /* ty=Tensor[(14, 13, 4), int64] */;
  %810 = %802.4;
  (%803, %804, %805, %var_1888, %var_1889, %806, %var_1903, %var_1904, %807, %808, %809, %810, %var_1933, %var_1934)
}

def @func_2233(%var_2228: Tensor[(2304), float64], %var_2229: Tensor[(8, 44), float64]) -> (Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) {
  %811 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %812 = %811.0;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  %814 = cast(-4.34044f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %815 = cast(%var_2228, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %816 = cast(%var_2228, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %817 = cast(%var_2228, dtype="uint64") /* ty=Tensor[(2304), uint64] */;
  %818 = cast(%var_2229, dtype="float64") /* ty=Tensor[(8, 44), float64] */;
  %819 = cast(meta[relay.Constant][52] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
  %820 = reshape(%814, newshape=[]) /* ty=float64 */;
  %821 = reshape(%815, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), float64] */;
  %822 = reshape(%816, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), float64] */;
  %823 = reshape(%817, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint64] */;
  %824 = reshape(%818, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %825 = reshape(%819, newshape=[2, 420]) /* ty=Tensor[(2, 420), int16] */;
  %826 = @func_1168(%820, %821, %822, %823, %824, %825) /* ty=(Tensor[(9, 16, 16), uint16], Tensor[(9, 16, 16), bool], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(252), float32], Tensor[(352), float64], Tensor[(352), float64], Tensor[(9, 16, 16), float32], Tensor[(9, 16, 16), float32], Tensor[(10, 28), uint16], Tensor[(6, 10, 14), int16], Tensor[(2, 420), int16]) */;
  %827 = rsqrt(%813) /* ty=Tensor[(11, 4, 7), float64] */;
  %828 = %826.7;
  (%827, %828, -4.34044f64 /* ty=float64 */, %var_2228, %var_2229, meta[relay.Constant][52] /* ty=Tensor[(840), int16] */)
}

def @func_512(%var_504: Tensor[(6, 10, 14), int16]) -> (Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) {
  %829 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 10, 14), int16] */, dtype="int16") /* ty=Tensor[(6, 10, 14), int16] */;
  %830 = shape_of(%var_504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_504, dtype="int16") /* ty=Tensor[(6, 10, 14), int16] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %833 = cast(meta[relay.Constant][54] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %834 = reshape(%833, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %835 = multiply(%831, %832) /* ty=Tensor[(6, 10, 14), int16] */;
  %836 = @func_60(%834) /* ty=Tensor[(10, 7, 4), float64] */;
  (%835, %836, meta[relay.Constant][54] /* ty=Tensor[(280), uint16] */)
}

def @func_4414(%var_4397: int64, %var_4410: Tensor[(36), float64]) -> (Tensor[(11, 4, 7), float32], int64, int64, int64, Tensor[(1365), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) {
  %837 = @func_3691() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %838 = cast(%var_4397, dtype="int64") /* ty=int64 */;
  %839 = reshape(%838, newshape=[]) /* ty=int64 */;
  %840 = @func_3291(%839) /* ty=(Tensor[(11, 4, 7), float32], int64, int64) */;
  %841 = cast(%var_4397, dtype="int64") /* ty=int64 */;
  %842 = reshape(%841, newshape=[]) /* ty=int64 */;
  %843 = @func_3291(%842) /* ty=(Tensor[(11, 4, 7), float32], int64, int64) */;
  %844 = cast(%var_4410, dtype="float64") /* ty=Tensor[(36), float64] */;
  %845 = cast(meta[relay.Constant][55] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %846 = cast(meta[relay.Constant][56] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %847 = reshape(%844, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %848 = reshape(%845, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %849 = reshape(%846, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %850 = @func_1292(%847, %848, %849) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %851 = %837.0;
  %852 = %840.2;
  %853 = %843.1;
  %854 = %850.7;
  (%851, %852, %var_4397, %853, %854, %var_4410, meta[relay.Constant][55] /* ty=Tensor[(280), uint16] */, meta[relay.Constant][56] /* ty=Tensor[(2925), uint8] */)
}

def @func_5021() -> Tensor[(11, 4, 7), float32] {
  %855 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %855.0
}

def @func_2674(%var_2651: Tensor[(11, 4, 7), float32], %var_2661: Tensor[(91, 13), int64]) -> (Tensor[(11, 4, 7), uint8], Tensor[(11, 4, 7), float32], Tensor[(728), int64], float64, Tensor[(252), float32], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(36), float64], Tensor[(2925), uint8], Tensor[(11, 4, 7), float64]) {
  %856 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %857 = %856.0;
  %858 = cast(%var_2651, dtype="uint8") /* ty=Tensor[(11, 4, 7), uint8] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="uint8") /* ty=Tensor[(11, 4, 7), uint8] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %862 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %863 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %864 = cast(-1.54111f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %865 = cast(meta[relay.Constant][58] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %866 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), int64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %867 = cast(%var_2661, dtype="int64") /* ty=Tensor[(91, 13), int64] */;
  %868 = cast(meta[relay.Constant][59] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %869 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), int64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %870 = cast(meta[relay.Constant][60] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %871 = cast(meta[relay.Constant][61] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %872 = reshape(%862, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), int64] */;
  %873 = reshape(%863, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), int64] */;
  %874 = reshape(%864, newshape=[]) /* ty=float64 */;
  %875 = reshape(%865, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %876 = reshape(%866, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), float64] */;
  %877 = reshape(%867, newshape=[1183]) /* ty=Tensor[(1183), int64] */;
  %878 = reshape(%868, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %879 = reshape(%869, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), float64] */;
  %880 = reshape(%870, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %881 = reshape(%871, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %882 = @func_1936(%872, %873, %874, %875, %876, %877, %878, %879, %880, %881) /* ty=(Tensor[(14, 13, 4), bool], Tensor[(11, 4, 7), float32], Tensor[(352), float64], float64, Tensor[(252, 1), float32], Tensor[(7, 13, 13), int64], Tensor[(1183), int64], Tensor[(280), uint16], Tensor[(14, 13, 4), int32], Tensor[(14, 13, 4), uint32], Tensor[(14, 13, 4), int64], bool, Tensor[(36), float64], Tensor[(2925), uint8]) */;
  %883 = cast(%857, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  %884 = bitwise_and(%860, %861) /* ty=Tensor[(11, 4, 7), uint8] */;
  %885 = %882.1;
  %886 = erf(%883) /* ty=Tensor[(11, 4, 7), float64] */;
  (%884, %885, meta[relay.Constant][57] /* ty=Tensor[(728), int64] */, -1.54111f64 /* ty=float64 */, meta[relay.Constant][58] /* ty=Tensor[(252), float32] */, %var_2661, meta[relay.Constant][59] /* ty=Tensor[(280), uint16] */, meta[relay.Constant][60] /* ty=Tensor[(36), float64] */, meta[relay.Constant][61] /* ty=Tensor[(2925), uint8] */, %886)
}

def @func_1992(%var_1980: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), float64],) {
  %887 = cast(%var_1980, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %888 = asinh(%887) /* ty=Tensor[(2, 5, 8), float64] */;
  (%888,)
}

def @func_2916() -> Tensor[(7, 8, 5), int32] {
  %889 = cast(meta[relay.Constant][63] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
  %890 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(meta[relay.Constant][62] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%891, %892) /* ty=Tensor[(7, 8, 5), int32] */
}

def @func_2404(%var_2394: Tensor[(840), int16]) -> (Tensor[(840), uint64],) {
  %893 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %894 = %893.0;
  %895 = cast(%var_2394, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(1), int32] */;
  %897 = cast(%894, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %899 = maximum(%897, %898) /* ty=Tensor[(840), uint64] */;
  (%899,)
}

def @func_2611() -> (Tensor[(6, 10, 14), float32],) {
  %900 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %901 = %900.2;
  (%901,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4906(%var_4904: Tensor[(225), int32], %var_4905: Tensor[(1575), int32]) -> (bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), float64]) {
  %8 = fn (%var_4891: Tensor[(225), int32], %var_4892: Tensor[(1575), int32]) -> (bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), float64]) {
    %0 = cast(%var_4891, dtype="int32") /* ty=Tensor[(225), int32] */;
    %1 = cast(%var_4892, dtype="int32") /* ty=Tensor[(1575), int32] */;
    %2 = reshape(%0, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
    %3 = reshape(%1, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
    %4 = cast(%var_4892, dtype="float64") /* ty=Tensor[(1575), float64] */;
    %5 = @func_4789() /* ty=bool */;
    %6 = @func_1409(%2, %3) /* ty=Tensor[(7, 15, 15), int32] */;
    %7 = acos(%4) /* ty=Tensor[(1575), float64] */;
    (%5, %6, %var_4891, %7)
  };
  %8(%var_4904, %var_4905) /* ty=(bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), float64]) */
}

def @func_1029(%var_1019: Tensor[(15, 13, 15), uint8], %var_1020: Tensor[(15, 13, 15), uint8]) -> (Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) {
  %9 = cast(%var_1020, dtype="uint8") /* ty=Tensor[(15, 13, 15), uint8] */;
  %10 = shape_of(%var_1019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_1019, dtype="uint8") /* ty=Tensor[(15, 13, 15), uint8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %13 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1365), bool] */, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %15 = reshape(%13, newshape=[]) /* ty=bool */;
  %16 = reshape(%14, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), bool] */;
  %17 = @func_962(%15, %16) /* ty=(Tensor[(13, 7, 15), bool],) */;
  %18 = maximum(%11, %12) /* ty=Tensor[(15, 13, 15), uint8] */;
  %19 = %17.0;
  (%18, %19, False /* ty=bool */, meta[relay.Constant][0] /* ty=Tensor[(1365), bool] */)
}

def @func_3131() -> (Tensor[(840), float32],) {
  %20 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %21 = %20.0;
  (%21,)
}

def @func_4789() -> bool {
  @func_2700() /* ty=bool */
}

def @func_4976(%var_4974: Tensor[(55, 4), float64], %var_4975: Tensor[(252), float32]) -> (bool, Tensor[(1575), int32], Tensor[(55, 4), float64], Tensor[(10, 28), uint16], Tensor[(252), float32]) {
  @func_4972(%var_4974, %var_4975) /* ty=(bool, Tensor[(1575), int32], Tensor[(55, 4), float64], Tensor[(10, 28), uint16], Tensor[(252), float32]) */
}

def @func_2237(%var_2235: Tensor[(2304), float64], %var_2236: Tensor[(8, 44), float64]) -> (Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) {
  @func_2233(%var_2235, %var_2236) /* ty=(Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) */
}

def @func_2233(%var_2228: Tensor[(2304), float64], %var_2229: Tensor[(8, 44), float64]) -> (Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) {
  %22 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %23 = %22.0;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  %25 = cast(-4.34044f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %26 = cast(%var_2228, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %27 = cast(%var_2228, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %28 = cast(%var_2228, dtype="uint64") /* ty=Tensor[(2304), uint64] */;
  %29 = cast(%var_2229, dtype="float64") /* ty=Tensor[(8, 44), float64] */;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
  %31 = reshape(%25, newshape=[]) /* ty=float64 */;
  %32 = reshape(%26, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), float64] */;
  %33 = reshape(%27, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), float64] */;
  %34 = reshape(%28, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint64] */;
  %35 = reshape(%29, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %36 = reshape(%30, newshape=[2, 420]) /* ty=Tensor[(2, 420), int16] */;
  %37 = @func_1168(%31, %32, %33, %34, %35, %36) /* ty=(Tensor[(9, 16, 16), uint16], Tensor[(9, 16, 16), bool], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(252), float32], Tensor[(352), float64], Tensor[(352), float64], Tensor[(9, 16, 16), float32], Tensor[(9, 16, 16), float32], Tensor[(10, 28), uint16], Tensor[(6, 10, 14), int16], Tensor[(2, 420), int16]) */;
  %38 = rsqrt(%24) /* ty=Tensor[(11, 4, 7), float64] */;
  %39 = %37.7;
  (%38, %39, -4.34044f64 /* ty=float64 */, %var_2228, %var_2229, meta[relay.Constant][1] /* ty=Tensor[(840), int16] */)
}

def @func_139(%var_92: Tensor[(70, 4), uint16], %var_122: Tensor[(11, 4, 8), float64]) -> (Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) {
  %40 = cast(%var_92, dtype="uint16") /* ty=Tensor[(70, 4), uint16] */;
  %41 = reshape(%40, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %42 = @func_60(%41) /* ty=Tensor[(10, 7, 4), float64] */;
  %43 = cast(%42, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %44 = reshape(%43, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %45 = cast(%var_92, dtype="uint16") /* ty=Tensor[(70, 4), uint16] */;
  %46 = reshape(%45, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %48 = atanh(%47) /* ty=Tensor[(11, 4, 8), float32] */;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
  %50 = cosh(%49) /* ty=Tensor[(11, 4, 8), float64] */;
  %51 = cast(%var_122, dtype="uint16") /* ty=Tensor[(11, 4, 8), uint16] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="uint16") /* ty=Tensor[(11, 4, 8), uint16] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %55 = cast(%var_92, dtype="uint16") /* ty=Tensor[(70, 4), uint16] */;
  %56 = reshape(%55, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %57 = cast(%48, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %58 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%50, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = cast(%42, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %62 = reshape(%61, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %63 = @func_60(%44) /* ty=Tensor[(10, 7, 4), float64] */;
  %64 = @func_60(%46) /* ty=Tensor[(10, 7, 4), float64] */;
  %65 = maximum(%53, %54) /* ty=Tensor[(11, 4, 8), uint16] */;
  %66 = @func_60(%56) /* ty=Tensor[(10, 7, 4), float64] */;
  %67 = logical_or(%59, %60) /* ty=Tensor[(11, 4, 8), bool] */;
  %68 = @func_60(%62) /* ty=Tensor[(10, 7, 4), float64] */;
  (%42, %var_92, %63, %64, %65, %66, %67, %68)
}

def @func_1176(%var_1170: float64, %var_1171: Tensor[(9, 16, 16), float64], %var_1172: Tensor[(9, 16, 16), float64], %var_1173: Tensor[(9, 16, 16), uint64], %var_1174: Tensor[(352), float64], %var_1175: Tensor[(2, 420), int16]) -> (Tensor[(9, 16, 16), uint16], Tensor[(9, 16, 16), bool], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(252), float32], Tensor[(352), float64], Tensor[(352), float64], Tensor[(9, 16, 16), float32], Tensor[(9, 16, 16), float32], Tensor[(10, 28), uint16], Tensor[(6, 10, 14), int16], Tensor[(2, 420), int16]) {
  @func_1168(%var_1170, %var_1171, %var_1172, %var_1173, %var_1174, %var_1175) /* ty=(Tensor[(9, 16, 16), uint16], Tensor[(9, 16, 16), bool], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(252), float32], Tensor[(352), float64], Tensor[(352), float64], Tensor[(9, 16, 16), float32], Tensor[(9, 16, 16), float32], Tensor[(10, 28), uint16], Tensor[(6, 10, 14), int16], Tensor[(2, 420), int16]) */
}

def @func_2840(%var_2802: Tensor[(11, 4, 7), float32], %var_2824: Tensor[(280), uint16], %var_2825: Tensor[(1183), int64]) -> (Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), float64], Tensor[(280), uint16], Tensor[(280), uint16], Tensor[(1183), int64]) {
  %69 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %70 = %69.3;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 4, 7), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %75 = cast(%var_2802, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %76 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%70, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 4, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %80 = asin(%79) /* ty=Tensor[(11, 4, 7), float32] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  %82 = cast(%var_2824, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %83 = cast(%var_2825, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %84 = reshape(%82, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %85 = reshape(%83, newshape=[1183]) /* ty=Tensor[(1183), int64] */;
  %86 = @func_2512(%84, %85) /* ty=(Tensor[(840), int16], Tensor[(13, 7, 15), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(1183), int64], Tensor[(1, 2925), int8]) */;
  %87 = less_equal(%73, %74) /* ty=Tensor[(11, 4, 7), bool] */;
  %88 = less(%77, %78) /* ty=Tensor[(11, 4, 7), bool] */;
  %89 = cosh(%81) /* ty=Tensor[(11, 4, 7), float64] */;
  %90 = %86.3;
  (%87, %88, %89, %90, %var_2824, %var_2825)
}

def @func_514(%var_513: Tensor[(6, 10, 14), int16]) -> (Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) {
  %99 = fn (%var_504: Tensor[(6, 10, 14), int16]) -> (Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) {
    %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 10, 14), int16] */, dtype="int16") /* ty=Tensor[(6, 10, 14), int16] */;
    %92 = shape_of(%var_504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %93 = cast(%var_504, dtype="int16") /* ty=Tensor[(6, 10, 14), int16] */;
    %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %96 = reshape(%95, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
    %97 = multiply(%93, %94) /* ty=Tensor[(6, 10, 14), int16] */;
    %98 = @func_60(%96) /* ty=Tensor[(10, 7, 4), float64] */;
    (%97, %98, meta[relay.Constant][5] /* ty=Tensor[(280), uint16] */)
  };
  %99(%var_513) /* ty=(Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */
}

def @func_2426() -> Tensor[(840), float32] {
  %101 = fn () -> Tensor[(840), float32] {
    %100 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
    %100.0
  };
  %101() /* ty=Tensor[(840), float32] */
}

def @func_4972(%var_4967: Tensor[(55, 4), float64], %var_4969: Tensor[(252), float32]) -> (bool, Tensor[(1575), int32], Tensor[(55, 4), float64], Tensor[(10, 28), uint16], Tensor[(252), float32]) {
  %102 = cast(%var_4967, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 28), uint16] */, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %104 = @func_4789() /* ty=bool */;
  %105 = cast(%104, dtype="float64") /* ty=float64 */;
  %106 = cast(%var_4969, dtype="float32") /* ty=Tensor[(252), float32] */;
  %107 = reshape(%102, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %108 = reshape(%103, newshape=[10, 28]) /* ty=Tensor[(10, 28), uint16] */;
  %109 = reshape(%105, newshape=[]) /* ty=float64 */;
  %110 = reshape(%106, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %111 = @func_2128(%107, %108, %109, %110) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(220), float64], Tensor[(10, 28), uint16], Tensor[(252, 1), float32], Tensor[(252), float32], bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), int32], Tensor[(10, 7, 4), float64], Tensor[(2925), bool]) */;
  %112 = %111.8;
  (%104, %112, %var_4967, meta[relay.Constant][6] /* ty=Tensor[(10, 28), uint16] */, %var_4969)
}

def @func_3161(%var_3159: Tensor[(14, 8, 16), float32]) -> Tensor[(14, 8, 16), float32] {
  @func_3158(%var_3159) /* ty=Tensor[(14, 8, 16), float32] */
}

def @func_2762(%var_2760: Tensor[(25, 9), int32], %var_2761: Tensor[(1575), int32]) -> (bool, Tensor[(7, 15, 15), int32], Tensor[(25, 9), int32], Tensor[(1575), int32]) {
  @func_2758(%var_2760, %var_2761) /* ty=(bool, Tensor[(7, 15, 15), int32], Tensor[(25, 9), int32], Tensor[(1575), int32]) */
}

def @func_4749(%var_4747: Tensor[(1, 36), float64], %var_4748: Tensor[(2925), uint8]) -> (Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32], Tensor[(840), float32], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(10, 7, 4), float64], Tensor[(1, 36), float64], Tensor[(2925), uint8]) {
  @func_4745(%var_4747, %var_4748) /* ty=(Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32], Tensor[(840), float32], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(10, 7, 4), float64], Tensor[(1, 36), float64], Tensor[(2925), uint8]) */
}

def @func_4417(%var_4415: int64, %var_4416: Tensor[(36), float64]) -> (Tensor[(11, 4, 7), float32], int64, int64, int64, Tensor[(1365), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) {
  %131 = fn (%var_4397: int64, %var_4410: Tensor[(36), float64]) -> (Tensor[(11, 4, 7), float32], int64, int64, int64, Tensor[(1365), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) {
    %113 = @func_3691() /* ty=(Tensor[(11, 4, 7), float32],) */;
    %114 = cast(%var_4397, dtype="int64") /* ty=int64 */;
    %115 = reshape(%114, newshape=[]) /* ty=int64 */;
    %116 = @func_3291(%115) /* ty=(Tensor[(11, 4, 7), float32], int64, int64) */;
    %117 = cast(%var_4397, dtype="int64") /* ty=int64 */;
    %118 = reshape(%117, newshape=[]) /* ty=int64 */;
    %119 = @func_3291(%118) /* ty=(Tensor[(11, 4, 7), float32], int64, int64) */;
    %120 = cast(%var_4410, dtype="float64") /* ty=Tensor[(36), float64] */;
    %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
    %123 = reshape(%120, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
    %124 = reshape(%121, newshape=[280]) /* ty=Tensor[(280), uint16] */;
    %125 = reshape(%122, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
    %126 = @func_1292(%123, %124, %125) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
    %127 = %113.0;
    %128 = %116.2;
    %129 = %119.1;
    %130 = %126.7;
    (%127, %128, %var_4397, %129, %130, %var_4410, meta[relay.Constant][7] /* ty=Tensor[(280), uint16] */, meta[relay.Constant][8] /* ty=Tensor[(2925), uint8] */)
  };
  %131(%var_4415, %var_4416) /* ty=(Tensor[(11, 4, 7), float32], int64, int64, int64, Tensor[(1365), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) */
}

def @func_952(%var_949: Tensor[(6, 7, 6), float32], %var_950: Tensor[(2, 176), float64], %var_951: Tensor[(6, 7, 6), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) {
  @func_947(%var_949, %var_950, %var_951) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) */
}

def @func_4552(%var_4550: Tensor[(2925), uint8], %var_4551: Tensor[(280), int32]) -> (Tensor[(11, 4, 7), float32], Tensor[(2925), float64], Tensor[(11, 4, 7), float32], Tensor[(7, 8, 5), int8], Tensor[(280), int32]) {
  %149 = fn (%var_4508: Tensor[(2925), uint8], %var_4527: Tensor[(280), int32]) -> (Tensor[(11, 4, 7), float32], Tensor[(2925), float64], Tensor[(11, 4, 7), float32], Tensor[(7, 8, 5), int8], Tensor[(280), int32]) {
    %132 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
    %133 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
    %134 = %133.2;
    %135 = cast(%var_4508, dtype="float64") /* ty=Tensor[(2925), float64] */;
    %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(1), int32] */;
    %137 = cast(%134, dtype="float64") /* ty=Tensor[(2925), float64] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?), float64] */;
    %139 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
    %140 = cast(%var_4527, dtype="int32") /* ty=Tensor[(280), int32] */;
    %141 = cast(%var_4527, dtype="int32") /* ty=Tensor[(280), int32] */;
    %142 = reshape(%140, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), int32] */;
    %143 = reshape(%141, newshape=[7, 8, 5]) /* ty=Tensor[(7, 8, 5), int32] */;
    %144 = @func_3061(%142, %143) /* ty=(Tensor[(7, 8, 5), uint64], Tensor[(7, 8, 5), uint16], Tensor[(7, 8, 5), int8]) */;
    %145 = %132.0;
    %146 = power(%137, %138) /* ty=Tensor[(2925), float64] */;
    %147 = %139.3;
    %148 = %144.2;
    (%145, %146, %147, %148, %var_4527)
  };
  %149(%var_4550, %var_4551) /* ty=(Tensor[(11, 4, 7), float32], Tensor[(2925), float64], Tensor[(11, 4, 7), float32], Tensor[(7, 8, 5), int8], Tensor[(280), int32]) */
}

def @func_3064(%var_3062: Tensor[(7, 8, 5), int32], %var_3063: Tensor[(7, 8, 5), int32]) -> (Tensor[(7, 8, 5), uint64], Tensor[(7, 8, 5), uint16], Tensor[(7, 8, 5), int8]) {
  %166 = fn (%var_3041: Tensor[(7, 8, 5), int32], %var_3046: Tensor[(7, 8, 5), int32]) -> (Tensor[(7, 8, 5), uint64], Tensor[(7, 8, 5), uint16], Tensor[(7, 8, 5), int8]) {
    %150 = @func_2916() /* ty=Tensor[(7, 8, 5), int32] */;
    %151 = cast(%var_3041, dtype="uint64") /* ty=Tensor[(7, 8, 5), uint64] */;
    %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%150, dtype="uint64") /* ty=Tensor[(7, 8, 5), uint64] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %155 = cast(%var_3046, dtype="uint16") /* ty=Tensor[(7, 8, 5), uint16] */;
    %156 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %157 = cast(%150, dtype="uint16") /* ty=Tensor[(7, 8, 5), uint16] */;
    %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int8") /* ty=Tensor[(7, 8, 5), int8] */;
    %160 = shape_of(%var_3041, dtype="int32") /* ty=Tensor[(3), int32] */;
    %161 = cast(%var_3041, dtype="int8") /* ty=Tensor[(7, 8, 5), int8] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %163 = logical_xor(%153, %154) /* ty=Tensor[(7, 8, 5), uint64] */;
    %164 = bitwise_or(%157, %158) /* ty=Tensor[(7, 8, 5), uint16] */;
    %165 = add(%161, %162) /* ty=Tensor[(7, 8, 5), int8] */;
    (%163, %164, %165)
  };
  %166(%var_3062, %var_3063) /* ty=(Tensor[(7, 8, 5), uint64], Tensor[(7, 8, 5), uint16], Tensor[(7, 8, 5), int8]) */
}

def @func_3455(%var_3441: Tensor[(11, 11, 12), float64], %var_3447: Tensor[(11, 11, 12), float64]) -> (Tensor[(11, 11, 12), float64], Tensor[(11, 11, 12), float64], Tensor[(6, 10, 14), float32]) {
  %167 = cast(%var_3441, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %168 = cast(%var_3447, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %169 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%var_3441, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %172 = asinh(%167) /* ty=Tensor[(11, 11, 12), float64] */;
  %173 = floor_mod(%170, %171) /* ty=Tensor[(11, 11, 12), float64] */;
  %174 = @func_3021() /* ty=Tensor[(6, 10, 14), float32] */;
  (%172, %173, %174)
}

def @func_2264() -> (Tensor[(840), int16],) {
  @func_2262() /* ty=(Tensor[(840), int16],) */
}

def @func_62(%var_61: Tensor[(10, 7, 4), uint16]) -> Tensor[(10, 7, 4), float64] {
  %179 = fn (%var_30: Tensor[(10, 7, 4), uint16]) -> Tensor[(10, 7, 4), float64] {
    %175 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %176 = cast(%var_30, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
    %177 = logical_xor(%175, %176) /* ty=Tensor[(10, 7, 4), uint16] */;
    %178 = cast(%177, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
    asinh(%178) /* ty=Tensor[(10, 7, 4), float64] */
  };
  %179(%var_61) /* ty=Tensor[(10, 7, 4), float64] */
}

def @func_2456(%var_2444: Tensor[(2, 8, 2), int32], %var_2445: Tensor[(2, 8, 2), int32]) -> (Tensor[(2, 8, 2), int32],) {
  %180 = cast(%var_2445, dtype="int32") /* ty=Tensor[(2, 8, 2), int32] */;
  %181 = shape_of(%var_2444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%var_2444, dtype="int32") /* ty=Tensor[(2, 8, 2), int32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %184 = left_shift(%182, %183) /* ty=Tensor[(2, 8, 2), int32] */;
  (%184,)
}

def @func_4640(%var_4594: Tensor[(13, 10, 1), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(11, 4, 7), float32], Tensor[(13, 10, 1), float32]) {
  %185 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %186 = cast(meta[relay.Constant][11] /* ty=Tensor[(91, 13), int64] */, dtype="int64") /* ty=Tensor[(91, 13), int64] */;
  %187 = cast(meta[relay.Constant][12] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %188 = reshape(%185, newshape=[]) /* ty=int64 */;
  %189 = reshape(%186, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %190 = reshape(%187, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %191 = @func_354(%188, %189, %190) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %192 = cast(%var_4594, dtype="float32") /* ty=Tensor[(13, 10, 1), float32] */;
  %193 = sinh(%192) /* ty=Tensor[(13, 10, 1), float32] */;
  %194 = cast(%193, dtype="int16") /* ty=Tensor[(13, 10, 1), int16] */;
  %195 = cast(10 /* ty=int64 */, dtype="int16") /* ty=int16 */;
  %196 = multiply(%194, %195) /* ty=Tensor[(13, 10, 1), int16] */;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(13, 10, 1), float32] */;
  %198 = %191.1;
  %199 = @func_3798() /* ty=Tensor[(11, 4, 7), float32] */;
  %200 = atanh(%197) /* ty=Tensor[(13, 10, 1), float32] */;
  (%198, meta[relay.Constant][11] /* ty=Tensor[(91, 13), int64] */, meta[relay.Constant][12] /* ty=Tensor[(280), uint16] */, %199, %200)
}

def @func_3890(%var_3888: uint64, %var_3889: Tensor[(7, 1, 10), uint64]) -> Tensor[(7, 1, 10), uint64] {
  %203 = fn (%var_3877: uint64, %var_3878: Tensor[(7, 1, 10), uint64]) -> Tensor[(7, 1, 10), uint64] {
    %201 = cast(%var_3877, dtype="uint64") /* ty=uint64 */;
    %202 = cast(%var_3878, dtype="uint64") /* ty=Tensor[(7, 1, 10), uint64] */;
    add(%201, %202) /* ty=Tensor[(7, 1, 10), uint64] */
  };
  %203(%var_3888, %var_3889) /* ty=Tensor[(7, 1, 10), uint64] */
}

def @func_2747() -> Tensor[(840), float32] {
  @func_2745() /* ty=Tensor[(840), float32] */
}

def @func_4643(%var_4641: Tensor[(13, 10, 1), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(11, 4, 7), float32], Tensor[(13, 10, 1), float32]) {
  @func_4640(%var_4641) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(11, 4, 7), float32], Tensor[(13, 10, 1), float32]) */
}

def @func_4275(%var_4273: Tensor[(280), uint16]) -> (Tensor[(840), float32], Tensor[(1183), int64], Tensor[(9, 4), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) {
  @func_4272(%var_4273) /* ty=(Tensor[(840), float32], Tensor[(1183), int64], Tensor[(9, 4), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) */
}

def @func_1742() -> (Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) {
  %204 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %205 = cast(meta[relay.Constant][13] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
  %206 = reshape(%205, newshape=[6, 10, 14]) /* ty=Tensor[(6, 10, 14), int16] */;
  %207 = @func_512(%206) /* ty=(Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %208 = %207.0;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(6, 10, 14), float32] */;
  %210 = %204.0;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %212 = reshape(%211, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %213 = @func_1699(%212) /* ty=(Tensor[(11, 4, 7), float32],) */;
  %214 = cast(%208, dtype="float32") /* ty=Tensor[(6, 10, 14), float32] */;
  %215 = asin(%209) /* ty=Tensor[(6, 10, 14), float32] */;
  %216 = %213.0;
  %217 = sin(%214) /* ty=Tensor[(6, 10, 14), float32] */;
  (%210, meta[relay.Constant][13] /* ty=Tensor[(840), int16] */, %215, %216, %217)
}

def @func_2611() -> (Tensor[(6, 10, 14), float32],) {
  %218 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %219 = %218.2;
  (%219,)
}

def @func_463(%var_461: Tensor[(11, 5, 4), float64], %var_462: Tensor[(280), uint16]) -> (Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) {
  %235 = fn (%var_417: Tensor[(11, 5, 4), float64], %var_438: Tensor[(280), uint16]) -> (Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) {
    %220 = cast(%var_438, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
    %222 = reshape(%220, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
    %223 = reshape(%221, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
    %224 = @func_139(%222, %223) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
    %225 = cast(%var_417, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
    %226 = cosh(%225) /* ty=Tensor[(11, 5, 4), float64] */;
    %227 = cast(%226, dtype="float32") /* ty=Tensor[(11, 5, 4), float32] */;
    %228 = erf(%227) /* ty=Tensor[(11, 5, 4), float32] */;
    %229 = cast(%var_417, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
    %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(%228, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %233 = %224.5;
    %234 = floor_mod(%231, %232) /* ty=Tensor[(11, 5, 4), float64] */;
    (%233, %var_438, meta[relay.Constant][14] /* ty=Tensor[(352), float64] */, %234)
  };
  %235(%var_461, %var_462) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) */
}

def @func_3798() -> Tensor[(11, 4, 7), float32] {
  @func_2863() /* ty=Tensor[(11, 4, 7), float32] */
}

def @func_1633() -> (Tensor[(11, 4, 7), float32],) {
  %238 = fn () -> (Tensor[(11, 4, 7), float32],) {
    %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 4, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
    %237 = cos(%236) /* ty=Tensor[(11, 4, 7), float32] */;
    (%237,)
  };
  %238() /* ty=(Tensor[(11, 4, 7), float32],) */
}

def @func_2404(%var_2394: Tensor[(840), int16]) -> (Tensor[(840), uint64],) {
  %239 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %240 = %239.0;
  %241 = cast(%var_2394, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(1), int32] */;
  %243 = cast(%240, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %245 = maximum(%243, %244) /* ty=Tensor[(840), uint64] */;
  (%245,)
}

def @func_2385(%var_2382: Tensor[(3, 12), float64], %var_2383: Tensor[(2, 40), float64], %var_2384: Tensor[(840), int16]) -> (Tensor[(252), float32], Tensor[(2, 2, 13), float64], Tensor[(2, 2, 13), bool], Tensor[(1365), bool], Tensor[(3, 12), float64], Tensor[(280), uint16], Tensor[(2, 5, 8), float64], Tensor[(2, 40), float64], Tensor[(2, 5, 8), float64], Tensor[(2925), float32], Tensor[(840), bool], Tensor[(10, 7, 4), float64], Tensor[(352), float64]) {
  %294 = fn (%var_2327: Tensor[(3, 12), float64], %var_2353: Tensor[(2, 40), float64], %var_2368: Tensor[(840), int16]) -> (Tensor[(252), float32], Tensor[(2, 2, 13), float64], Tensor[(2, 2, 13), bool], Tensor[(1365), bool], Tensor[(3, 12), float64], Tensor[(280), uint16], Tensor[(2, 5, 8), float64], Tensor[(2, 40), float64], Tensor[(2, 5, 8), float64], Tensor[(2925), float32], Tensor[(840), bool], Tensor[(10, 7, 4), float64], Tensor[(352), float64]) {
    %246 = cast(4.10817f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %247 = cast(meta[relay.Constant][16] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %248 = reshape(%246, newshape=[]) /* ty=float64 */;
    %249 = reshape(%247, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
    %250 = @func_997(%248, %249) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
    %251 = %250.0;
    %252 = cast(%251, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
    %253 = cast(4.10817f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %254 = cast(4.10817f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %255 = cast(%251, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
    %256 = cast(%var_2327, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
    %257 = cast(meta[relay.Constant][17] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %258 = cast(meta[relay.Constant][18] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
    %259 = reshape(%256, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
    %260 = reshape(%257, newshape=[280]) /* ty=Tensor[(280), uint16] */;
    %261 = reshape(%258, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
    %262 = @func_1292(%259, %260, %261) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
    %263 = cast(%var_2353, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
    %264 = reshape(%263, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
    %265 = @func_1992(%264) /* ty=(Tensor[(2, 5, 8), float64],) */;
    %266 = cast(%var_2353, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
    %267 = reshape(%266, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
    %268 = @func_1992(%267) /* ty=(Tensor[(2, 5, 8), float64],) */;
    %269 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
    %270 = %269.2;
    %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(2925), uint8] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
    %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(1), int32] */;
    %273 = cast(%270, dtype="float32") /* ty=Tensor[(2925), float32] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?), float32] */;
    %275 = @func_2262() /* ty=(Tensor[(840), int16],) */;
    %276 = %275.0;
    %277 = cast(%var_2368, dtype="bool") /* ty=Tensor[(840), bool] */;
    %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(1), int32] */;
    %279 = cast(%276, dtype="bool") /* ty=Tensor[(840), bool] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), bool] */;
    %281 = cast(meta[relay.Constant][17] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %282 = cast(meta[relay.Constant][19] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
    %283 = reshape(%281, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
    %284 = reshape(%282, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
    %285 = @func_139(%283, %284) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
    %286 = floor_mod(%252, %253) /* ty=Tensor[(2, 2, 13), float64] */;
    %287 = greater_equal(%254, %255) /* ty=Tensor[(2, 2, 13), bool] */;
    %288 = %262.7;
    %289 = %265.0;
    %290 = %268.0;
    %291 = floor_divide(%273, %274) /* ty=Tensor[(2925), float32] */;
    %292 = greater(%279, %280) /* ty=Tensor[(840), bool] */;
    %293 = %285.2;
    (meta[relay.Constant][16] /* ty=Tensor[(252), float32] */, %286, %287, %288, %var_2327, meta[relay.Constant][17] /* ty=Tensor[(280), uint16] */, %289, %var_2353, %290, %291, %292, %293, meta[relay.Constant][19] /* ty=Tensor[(352), float64] */)
  };
  %294(%var_2382, %var_2383, %var_2384) /* ty=(Tensor[(252), float32], Tensor[(2, 2, 13), float64], Tensor[(2, 2, 13), bool], Tensor[(1365), bool], Tensor[(3, 12), float64], Tensor[(280), uint16], Tensor[(2, 5, 8), float64], Tensor[(2, 40), float64], Tensor[(2, 5, 8), float64], Tensor[(2925), float32], Tensor[(840), bool], Tensor[(10, 7, 4), float64], Tensor[(352), float64]) */
}

def @func_3752(%var_3750: Tensor[(520), uint16]) -> (Tensor[(840), float32], Tensor[(4, 13, 10), uint16], Tensor[(520), uint16]) {
  @func_3749(%var_3750) /* ty=(Tensor[(840), float32], Tensor[(4, 13, 10), uint16], Tensor[(520), uint16]) */
}

def @func_3370(%var_3368: Tensor[(12, 14, 14), float64], %var_3369: Tensor[(1792), float32]) -> (Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) {
  %303 = fn (%var_3359: Tensor[(12, 14, 14), float64], %var_3365: Tensor[(1792), float32]) -> (Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) {
    %295 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
    %296 = %295.2;
    %297 = cast(%296, dtype="int16") /* ty=int16 */;
    %298 = cast(%var_3359, dtype="int16") /* ty=Tensor[(12, 14, 14), int16] */;
    %299 = cast(%var_3365, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %300 = reshape(%299, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), float32] */;
    %301 = left_shift(%297, %298) /* ty=Tensor[(12, 14, 14), int16] */;
    %302 = @func_3158(%300) /* ty=Tensor[(14, 8, 16), float32] */;
    (%301, %302, %var_3365)
  };
  %303(%var_3368, %var_3369) /* ty=(Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) */
}

def @func_1033(%var_1031: Tensor[(15, 13, 15), uint8], %var_1032: Tensor[(15, 13, 15), uint8]) -> (Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) {
  @func_1029(%var_1031, %var_1032) /* ty=(Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) */
}

def @func_2758(%var_2755: Tensor[(25, 9), int32], %var_2756: Tensor[(1575), int32]) -> (bool, Tensor[(7, 15, 15), int32], Tensor[(25, 9), int32], Tensor[(1575), int32]) {
  %304 = cast(%var_2755, dtype="int32") /* ty=Tensor[(25, 9), int32] */;
  %305 = cast(%var_2756, dtype="int32") /* ty=Tensor[(1575), int32] */;
  %306 = reshape(%304, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
  %307 = reshape(%305, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
  %308 = @func_2700() /* ty=bool */;
  %309 = @func_1409(%306, %307) /* ty=Tensor[(7, 15, 15), int32] */;
  (%308, %309, %var_2755, %var_2756)
}

def @func_3800() -> Tensor[(11, 4, 7), float32] {
  @func_3798() /* ty=Tensor[(11, 4, 7), float32] */
}

def @func_1744() -> (Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) {
  @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */
}

def @func_4181(%var_4137: Tensor[(2304), float64], %var_4138: Tensor[(4, 88), float64], %var_4154: Tensor[(4, 88), float64]) -> (Tensor[(252), float32], Tensor[(11, 4, 7), float64], Tensor[(2304), float64], Tensor[(4, 88), bool], Tensor[(4, 88), float64], Tensor[(4, 88), float32]) {
  %310 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
  %311 = cast(%var_4137, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %312 = cast(%var_4138, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %313 = reshape(%311, newshape=[2304]) /* ty=Tensor[(2304), float64] */;
  %314 = reshape(%312, newshape=[8, 44]) /* ty=Tensor[(8, 44), float64] */;
  %315 = @func_2233(%313, %314) /* ty=(Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) */;
  %316 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 88), float64] */, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %317 = shape_of(%var_4154, dtype="int32") /* ty=Tensor[(2), int32] */;
  %318 = cast(%var_4154, dtype="bool") /* ty=Tensor[(4, 88), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %320 = cast(%var_4138, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %321 = shape_of(%var_4154, dtype="int32") /* ty=Tensor[(2), int32] */;
  %322 = cast(%var_4154, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %324 = cast(%var_4154, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %325 = shape_of(%var_4138, dtype="int32") /* ty=Tensor[(2), int32] */;
  %326 = cast(%var_4138, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %328 = add(%326, %327) /* ty=Tensor[(4, 88), float64] */;
  %329 = cast(%328, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %330 = %310.3;
  %331 = %315.0;
  %332 = logical_and(%318, %319) /* ty=Tensor[(4, 88), bool] */;
  %333 = floor_divide(%322, %323) /* ty=Tensor[(4, 88), float64] */;
  %334 = sin(%329) /* ty=Tensor[(4, 88), float32] */;
  (%330, %331, %var_4137, %332, %333, %334)
}

def @func_5021() -> Tensor[(11, 4, 7), float32] {
  %335 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %335.0
}

def @func_2904() -> (Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) {
  %344 = fn () -> (Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) {
    %336 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
    %337 = cast(3.56493f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %338 = cast(meta[relay.Constant][21] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %339 = reshape(%337, newshape=[]) /* ty=float64 */;
    %340 = reshape(%338, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
    %341 = @func_997(%339, %340) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
    %342 = %336.2;
    %343 = %341.1;
    (%342, %343, 3.56493f64 /* ty=float64 */, meta[relay.Constant][21] /* ty=Tensor[(252), float32] */)
  };
  %344() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */
}

def @func_3693() -> (Tensor[(11, 4, 7), float32],) {
  @func_3691() /* ty=(Tensor[(11, 4, 7), float32],) */
}

def @func_2262() -> (Tensor[(840), int16],) {
  %345 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %346 = %345.1;
  (%346,)
}

def @func_1936(%var_1850: Tensor[(14, 13, 4), int64], %var_1851: Tensor[(14, 13, 4), int64], %var_1888: float64, %var_1889: Tensor[(252, 1), float32], %var_1897: Tensor[(14, 13, 4), float64], %var_1903: Tensor[(1183), int64], %var_1904: Tensor[(280), uint16], %var_1910: Tensor[(14, 13, 4), float64], %var_1933: Tensor[(36), float64], %var_1934: Tensor[(2925), uint8]) -> (Tensor[(14, 13, 4), bool], Tensor[(11, 4, 7), float32], Tensor[(352), float64], float64, Tensor[(252, 1), float32], Tensor[(7, 13, 13), int64], Tensor[(1183), int64], Tensor[(280), uint16], Tensor[(14, 13, 4), int32], Tensor[(14, 13, 4), uint32], Tensor[(14, 13, 4), int64], bool, Tensor[(36), float64], Tensor[(2925), uint8]) {
  %347 = cast(%var_1851, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %348 = shape_of(%var_1850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%var_1850, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %352 = cast(%var_1888, dtype="float64") /* ty=float64 */;
  %353 = cast(%var_1889, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
  %354 = reshape(%352, newshape=[]) /* ty=float64 */;
  %355 = reshape(%353, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %356 = @func_997(%354, %355) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %357 = cast(%var_1888, dtype="int64") /* ty=int64 */;
  %358 = cast(%var_1903, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %359 = cast(%var_1904, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %360 = reshape(%357, newshape=[]) /* ty=int64 */;
  %361 = reshape(%358, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %362 = reshape(%359, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %363 = @func_354(%360, %361, %362) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %364 = cast(%var_1851, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %365 = atan(%364) /* ty=Tensor[(14, 13, 4), float64] */;
  %366 = cast(%var_1910, dtype="int32") /* ty=Tensor[(14, 13, 4), int32] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="int32") /* ty=Tensor[(14, 13, 4), int32] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %370 = cast(%var_1851, dtype="uint8") /* ty=Tensor[(14, 13, 4), uint8] */;
  %371 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%365, dtype="uint8") /* ty=Tensor[(14, 13, 4), uint8] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %374 = logical_xor(%372, %373) /* ty=Tensor[(14, 13, 4), uint8] */;
  %375 = cast(%var_1851, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %379 = divide(%377, %378) /* ty=Tensor[(14, 13, 4), float64] */;
  %380 = cast(%var_1897, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="float64") /* ty=Tensor[(14, 13, 4), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %384 = power(%382, %383) /* ty=Tensor[(14, 13, 4), float64] */;
  %385 = cast(%365, dtype="uint32") /* ty=Tensor[(14, 13, 4), uint32] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="uint32") /* ty=Tensor[(14, 13, 4), uint32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %389 = cast(%var_1910, dtype="int64") /* ty=Tensor[(14, 13, 4), int64] */;
  %390 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%384, dtype="int64") /* ty=Tensor[(14, 13, 4), int64] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %393 = cast(%var_1933, dtype="float64") /* ty=Tensor[(36), float64] */;
  %394 = cast(%var_1904, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %395 = cast(%var_1934, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %396 = reshape(%393, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %397 = reshape(%394, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %398 = reshape(%395, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %399 = @func_1292(%396, %397, %398) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %400 = less_equal(%349, %350) /* ty=Tensor[(14, 13, 4), bool] */;
  %401 = %351.3;
  %402 = %356.3;
  %403 = %363.0;
  %404 = minimum(%368, %369) /* ty=Tensor[(14, 13, 4), int32] */;
  %405 = bitwise_or(%387, %388) /* ty=Tensor[(14, 13, 4), uint32] */;
  %406 = bitwise_xor(%391, %392) /* ty=Tensor[(14, 13, 4), int64] */;
  %407 = %399.4;
  (%400, %401, %402, %var_1888, %var_1889, %403, %var_1903, %var_1904, %404, %405, %406, %407, %var_1933, %var_1934)
}

def @func_2604(%var_2603: Tensor[(308, 1), float32]) -> (Tensor[(840), int16], Tensor[(11, 4, 7), float32], Tensor[(308, 1), float32]) {
  %414 = fn (%var_2598: Tensor[(308, 1), float32]) -> (Tensor[(840), int16], Tensor[(11, 4, 7), float32], Tensor[(308, 1), float32]) {
    %408 = @func_2262() /* ty=(Tensor[(840), int16],) */;
    %409 = cast(%var_2598, dtype="float32") /* ty=Tensor[(308, 1), float32] */;
    %410 = reshape(%409, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
    %411 = @func_1699(%410) /* ty=(Tensor[(11, 4, 7), float32],) */;
    %412 = %408.0;
    %413 = %411.0;
    (%412, %413, %var_2598)
  };
  %414(%var_2603) /* ty=(Tensor[(840), int16], Tensor[(11, 4, 7), float32], Tensor[(308, 1), float32]) */
}

def @func_1409(%var_1390: Tensor[(1, 15, 15), int32], %var_1391: Tensor[(7, 15, 15), int32]) -> Tensor[(7, 15, 15), int32] {
  %415 = cast(%var_1390, dtype="int32") /* ty=Tensor[(1, 15, 15), int32] */;
  %416 = cast(%var_1391, dtype="int32") /* ty=Tensor[(7, 15, 15), int32] */;
  maximum(%415, %416) /* ty=Tensor[(7, 15, 15), int32] */
}

def @func_4757() -> (Tensor[(840), int16],) {
  @func_4755() /* ty=(Tensor[(840), int16],) */
}

def @func_2674(%var_2651: Tensor[(11, 4, 7), float32], %var_2661: Tensor[(91, 13), int64]) -> (Tensor[(11, 4, 7), uint8], Tensor[(11, 4, 7), float32], Tensor[(728), int64], float64, Tensor[(252), float32], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(36), float64], Tensor[(2925), uint8], Tensor[(11, 4, 7), float64]) {
  %417 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %418 = %417.0;
  %419 = cast(%var_2651, dtype="uint8") /* ty=Tensor[(11, 4, 7), uint8] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="uint8") /* ty=Tensor[(11, 4, 7), uint8] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %423 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %424 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %425 = cast(-1.54111f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %426 = cast(meta[relay.Constant][23] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %427 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), int64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %428 = cast(%var_2661, dtype="int64") /* ty=Tensor[(91, 13), int64] */;
  %429 = cast(meta[relay.Constant][24] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %430 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), int64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %431 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %432 = cast(meta[relay.Constant][26] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %433 = reshape(%423, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), int64] */;
  %434 = reshape(%424, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), int64] */;
  %435 = reshape(%425, newshape=[]) /* ty=float64 */;
  %436 = reshape(%426, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %437 = reshape(%427, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), float64] */;
  %438 = reshape(%428, newshape=[1183]) /* ty=Tensor[(1183), int64] */;
  %439 = reshape(%429, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %440 = reshape(%430, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), float64] */;
  %441 = reshape(%431, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %442 = reshape(%432, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %443 = @func_1936(%433, %434, %435, %436, %437, %438, %439, %440, %441, %442) /* ty=(Tensor[(14, 13, 4), bool], Tensor[(11, 4, 7), float32], Tensor[(352), float64], float64, Tensor[(252, 1), float32], Tensor[(7, 13, 13), int64], Tensor[(1183), int64], Tensor[(280), uint16], Tensor[(14, 13, 4), int32], Tensor[(14, 13, 4), uint32], Tensor[(14, 13, 4), int64], bool, Tensor[(36), float64], Tensor[(2925), uint8]) */;
  %444 = cast(%418, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  %445 = bitwise_and(%421, %422) /* ty=Tensor[(11, 4, 7), uint8] */;
  %446 = %443.1;
  %447 = erf(%444) /* ty=Tensor[(11, 4, 7), float64] */;
  (%445, %446, meta[relay.Constant][22] /* ty=Tensor[(728), int64] */, -1.54111f64 /* ty=float64 */, meta[relay.Constant][23] /* ty=Tensor[(252), float32] */, %var_2661, meta[relay.Constant][24] /* ty=Tensor[(280), uint16] */, meta[relay.Constant][25] /* ty=Tensor[(36), float64] */, meta[relay.Constant][26] /* ty=Tensor[(2925), uint8] */, %447)
}

def @func_3869(%var_3866: int16, %var_3867: Tensor[(16, 1, 13), int16], %var_3868: Tensor[(16, 8, 13), int16]) -> (Tensor[(16, 1, 13), bool], Tensor[(16, 8, 13), uint16], Tensor[(16, 1, 13), float64], Tensor[(11, 4, 7), float32], Tensor[(308), float32], Tensor[(11, 4, 7), float64], Tensor[(1183), int64]) {
  @func_3864(%var_3866, %var_3867, %var_3868) /* ty=(Tensor[(16, 1, 13), bool], Tensor[(16, 8, 13), uint16], Tensor[(16, 1, 13), float64], Tensor[(11, 4, 7), float32], Tensor[(308), float32], Tensor[(11, 4, 7), float64], Tensor[(1183), int64]) */
}

def @func_947(%var_890: Tensor[(6, 7, 6), float32], %var_924: Tensor[(2, 176), float64], %var_927: Tensor[(6, 7, 6), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) {
  %448 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 28), uint16] */, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %449 = reshape(%448, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %450 = @func_60(%449) /* ty=Tensor[(10, 7, 4), float64] */;
  %451 = cast(%450, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %452 = cast(%var_924, dtype="float64") /* ty=Tensor[(2, 176), float64] */;
  %453 = reshape(%451, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
  %454 = reshape(%452, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
  %455 = @func_139(%453, %454) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
  %456 = cast(%var_890, dtype="float32") /* ty=Tensor[(6, 7, 6), float32] */;
  %457 = sin(%456) /* ty=Tensor[(6, 7, 6), float32] */;
  %458 = cast(%var_927, dtype="uint64") /* ty=Tensor[(6, 7, 6), uint64] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="uint64") /* ty=Tensor[(6, 7, 6), uint64] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %462 = bitwise_or(%460, %461) /* ty=Tensor[(6, 7, 6), uint64] */;
  %463 = cast(%var_927, dtype="int8") /* ty=Tensor[(6, 7, 6), int8] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="int8") /* ty=Tensor[(6, 7, 6), int8] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %467 = %455.3;
  %468 = maximum(%465, %466) /* ty=Tensor[(6, 7, 6), int8] */;
  (%450, meta[relay.Constant][27] /* ty=Tensor[(10, 28), uint16] */, %467, %var_924, %468)
}

def @func_4241() -> Tensor[(2925), uint8] {
  %469 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %469.2
}

def @func_1413(%var_1411: Tensor[(1, 15, 15), int32], %var_1412: Tensor[(7, 15, 15), int32]) -> Tensor[(7, 15, 15), int32] {
  @func_1409(%var_1411, %var_1412) /* ty=Tensor[(7, 15, 15), int32] */
}

def @func_1699(%var_1688: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 4, 7), float32],) {
  %470 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %471 = %470.0;
  %472 = cast(%var_1688, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %476 = power(%474, %475) /* ty=Tensor[(11, 4, 7), float32] */;
  (%476,)
}

def @func_2987(%var_2985: Tensor[(16, 1, 1), int64], %var_2986: Tensor[(16, 5, 11), int64]) -> (Tensor[(16, 5, 11), uint16], Tensor[(16, 5, 11), bool]) {
  %488 = fn (%var_2958: Tensor[(16, 1, 1), int64], %var_2959: Tensor[(16, 5, 11), int64]) -> (Tensor[(16, 5, 11), uint16], Tensor[(16, 5, 11), bool]) {
    %477 = cast(%var_2958, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
    %478 = cast(%var_2959, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
    %479 = less_equal(%477, %478) /* ty=Tensor[(16, 5, 11), bool] */;
    %480 = cast(%479, dtype="uint16") /* ty=Tensor[(16, 5, 11), uint16] */;
    %481 = shape_of(%var_2959, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%var_2959, dtype="uint16") /* ty=Tensor[(16, 5, 11), uint16] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %484 = cast(%var_2958, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
    %485 = cast(%479, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
    %486 = bitwise_or(%482, %483) /* ty=Tensor[(16, 5, 11), uint16] */;
    %487 = not_equal(%484, %485) /* ty=Tensor[(16, 5, 11), bool] */;
    (%486, %487)
  };
  %488(%var_2985, %var_2986) /* ty=(Tensor[(16, 5, 11), uint16], Tensor[(16, 5, 11), bool]) */
}

def @func_4318(%var_4306: Tensor[(840, 1), int16], %var_4315: Tensor[(2352), float64]) -> (Tensor[(11, 4, 7), float32], Tensor[(840), uint64], Tensor[(840, 1), int16], bool, Tensor[(1792), float32], Tensor[(2352), float64], Tensor[(32, 56), float32]) {
  %489 = @func_3698() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %490 = cast(%var_4306, dtype="int16") /* ty=Tensor[(840, 1), int16] */;
  %491 = reshape(%490, newshape=[840]) /* ty=Tensor[(840), int16] */;
  %492 = @func_2404(%491) /* ty=(Tensor[(840), uint64],) */;
  %493 = cast(%var_4315, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %494 = cast(meta[relay.Constant][28] /* ty=Tensor[(32, 56), float32] */, dtype="float32") /* ty=Tensor[(32, 56), float32] */;
  %495 = reshape(%493, newshape=[12, 14, 14]) /* ty=Tensor[(12, 14, 14), float64] */;
  %496 = reshape(%494, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %497 = @func_3367(%495, %496) /* ty=(Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) */;
  %498 = %489.0;
  %499 = %492.0;
  %500 = @func_2700() /* ty=bool */;
  %501 = %497.2;
  (%498, %499, %var_4306, %500, %501, %var_4315, meta[relay.Constant][28] /* ty=Tensor[(32, 56), float32] */)
}

def @func_2745() -> Tensor[(840), float32] {
  @func_2425() /* ty=Tensor[(840), float32] */
}

def @func_4272(%var_4258: Tensor[(280), uint16]) -> (Tensor[(840), float32], Tensor[(1183), int64], Tensor[(9, 4), float64], Tensor[(280), uint16], Tensor[(2925), uint8]) {
  %502 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
  %503 = cast(%var_4258, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %504 = cast(meta[relay.Constant][30] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %505 = reshape(%502, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %506 = reshape(%503, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %507 = reshape(%504, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %508 = @func_1292(%505, %506, %507) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %509 = @func_2745() /* ty=Tensor[(840), float32] */;
  %510 = %508.2;
  (%509, %510, meta[relay.Constant][29] /* ty=Tensor[(9, 4), float64] */, %var_4258, meta[relay.Constant][30] /* ty=Tensor[(2925), uint8] */)
}

def @func_3459(%var_3457: Tensor[(11, 11, 12), float64], %var_3458: Tensor[(11, 11, 12), float64]) -> (Tensor[(11, 11, 12), float64], Tensor[(11, 11, 12), float64], Tensor[(6, 10, 14), float32]) {
  @func_3455(%var_3457, %var_3458) /* ty=(Tensor[(11, 11, 12), float64], Tensor[(11, 11, 12), float64], Tensor[(6, 10, 14), float32]) */
}

def @func_2029() -> (Tensor[(11, 4, 7), float32], Tensor[(840), float32]) {
  @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */
}

def @func_1702(%var_1700: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 4, 7), float32],) {
  @func_1699(%var_1700) /* ty=(Tensor[(11, 4, 7), float32],) */
}

def @func_2190(%var_2188: int64) -> (Tensor[(840), float32], Tensor[(280), uint16], Tensor[(1, 220), float64], Tensor[(280), uint16], Tensor[(280), uint16], int64, Tensor[(13, 91), int64]) {
  @func_2187(%var_2188) /* ty=(Tensor[(840), float32], Tensor[(280), uint16], Tensor[(1, 220), float64], Tensor[(280), uint16], Tensor[(280), uint16], int64, Tensor[(13, 91), int64]) */
}

def @func_358(%var_355: int64, %var_356: Tensor[(7, 13, 13), int64], %var_357: Tensor[(280), uint16]) -> (Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) {
  %517 = fn (%var_339: int64, %var_340: Tensor[(7, 13, 13), int64], %var_345: Tensor[(280), uint16]) -> (Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) {
    %511 = cast(%var_339, dtype="int64") /* ty=int64 */;
    %512 = cast(%var_340, dtype="int64") /* ty=Tensor[(7, 13, 13), int64] */;
    %513 = cast(%var_345, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %514 = reshape(%513, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
    %515 = left_shift(%511, %512) /* ty=Tensor[(7, 13, 13), int64] */;
    %516 = @func_60(%514) /* ty=Tensor[(10, 7, 4), float64] */;
    (%515, %516, %var_345)
  };
  %517(%var_355, %var_356, %var_357) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */
}

def @func_1000(%var_998: float64, %var_999: Tensor[(252, 1), float32]) -> (Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) {
  %529 = fn (%var_979: float64, %var_992: Tensor[(252, 1), float32]) -> (Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) {
    %518 = cast(%var_979, dtype="float64") /* ty=float64 */;
    %519 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
    %520 = cast(%var_992, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
    %521 = cast(meta[relay.Constant][32] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
    %522 = cast(%var_992, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
    %523 = reshape(%520, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
    %524 = reshape(%521, newshape=[2, 176]) /* ty=Tensor[(2, 176), float64] */;
    %525 = reshape(%522, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
    %526 = @func_947(%523, %524, %525) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) */;
    %527 = mod(%518, %519) /* ty=Tensor[(2, 2, 13), float64] */;
    %528 = %526.0;
    (%527, %528, %var_992, meta[relay.Constant][32] /* ty=Tensor[(352), float64] */)
  };
  %529(%var_998, %var_999) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */
}

def @func_5057(%var_5056: Tensor[(130, 4), uint16]) -> (Tensor[(13, 10, 10), uint64], Tensor[(4, 13, 10), uint16], Tensor[(130, 4), uint16]) {
  %539 = fn (%var_5045: Tensor[(130, 4), uint16]) -> (Tensor[(13, 10, 10), uint64], Tensor[(4, 13, 10), uint16], Tensor[(130, 4), uint16]) {
    %530 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 10, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 10, 10), uint64] */;
    %531 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(13, 10, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 10, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 10, 10), uint64] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %534 = cast(%var_5045, dtype="uint16") /* ty=Tensor[(130, 4), uint16] */;
    %535 = reshape(%534, newshape=[520]) /* ty=Tensor[(520), uint16] */;
    %536 = @func_3749(%535) /* ty=(Tensor[(840), float32], Tensor[(4, 13, 10), uint16], Tensor[(520), uint16]) */;
    %537 = bitwise_or(%532, %533) /* ty=Tensor[(13, 10, 10), uint64] */;
    %538 = %536.1;
    (%537, %538, %var_5045)
  };
  %539(%var_5056) /* ty=(Tensor[(13, 10, 10), uint64], Tensor[(4, 13, 10), uint16], Tensor[(130, 4), uint16]) */
}

def @func_1168(%var_1073: float64, %var_1074: Tensor[(9, 16, 16), float64], %var_1080: Tensor[(9, 16, 16), float64], %var_1124: Tensor[(9, 16, 16), uint64], %var_1143: Tensor[(352), float64], %var_1161: Tensor[(2, 420), int16]) -> (Tensor[(9, 16, 16), uint16], Tensor[(9, 16, 16), bool], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(252), float32], Tensor[(352), float64], Tensor[(352), float64], Tensor[(9, 16, 16), float32], Tensor[(9, 16, 16), float32], Tensor[(10, 28), uint16], Tensor[(6, 10, 14), int16], Tensor[(2, 420), int16]) {
  %540 = cast(%var_1073, dtype="float64") /* ty=float64 */;
  %541 = cast(%var_1074, dtype="float64") /* ty=Tensor[(9, 16, 16), float64] */;
  %542 = mod(%540, %541) /* ty=Tensor[(9, 16, 16), float64] */;
  %543 = cast(%var_1073, dtype="uint16") /* ty=uint16 */;
  %544 = cast(%542, dtype="uint16") /* ty=Tensor[(9, 16, 16), uint16] */;
  %545 = cast(%var_1080, dtype="int64") /* ty=Tensor[(9, 16, 16), int64] */;
  %546 = shape_of(%var_1074, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_1074, dtype="int64") /* ty=Tensor[(9, 16, 16), int64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %549 = minimum(%547, %548) /* ty=Tensor[(9, 16, 16), int64] */;
  %550 = cast(%549, dtype="uint64") /* ty=Tensor[(9, 16, 16), uint64] */;
  %551 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%542, dtype="uint64") /* ty=Tensor[(9, 16, 16), uint64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %554 = bitwise_and(%552, %553) /* ty=Tensor[(9, 16, 16), uint64] */;
  %555 = cast(%var_1124, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="bool") /* ty=Tensor[(9, 16, 16), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = cast(meta[relay.Constant][35] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %560 = reshape(%559, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
  %561 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %562 = cast(%var_1143, dtype="float64") /* ty=Tensor[(352), float64] */;
  %563 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %564 = reshape(%561, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %565 = reshape(%562, newshape=[2, 176]) /* ty=Tensor[(2, 176), float64] */;
  %566 = reshape(%563, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %567 = @func_947(%564, %565, %566) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) */;
  %568 = cast(%var_1073, dtype="float64") /* ty=float64 */;
  %569 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %570 = reshape(%568, newshape=[]) /* ty=float64 */;
  %571 = reshape(%569, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
  %572 = @func_997(%570, %571) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
  %573 = cast(%var_1074, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %574 = log2(%573) /* ty=Tensor[(9, 16, 16), float32] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %576 = asin(%575) /* ty=Tensor[(9, 16, 16), float32] */;
  %577 = cast(%554, dtype="float64") /* ty=Tensor[(9, 16, 16), float64] */;
  %578 = cast(%var_1073, dtype="float64") /* ty=float64 */;
  %579 = add(%577, %578) /* ty=Tensor[(9, 16, 16), float64] */;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %581 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%576, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %584 = cast(%576, dtype="float32") /* ty=Tensor[(9, 16, 16), float32] */;
  %585 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %586 = %572.3;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(352), float64] */;
  %588 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %589 = reshape(%585, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %590 = reshape(%587, newshape=[2, 176]) /* ty=Tensor[(2, 176), float64] */;
  %591 = reshape(%588, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), float32] */;
  %592 = @func_947(%589, %590, %591) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(10, 28), uint16], Tensor[(10, 7, 4), float64], Tensor[(2, 176), float64], Tensor[(6, 7, 6), int8]) */;
  %593 = cast(%var_1161, dtype="int16") /* ty=Tensor[(2, 420), int16] */;
  %594 = reshape(%593, newshape=[6, 10, 14]) /* ty=Tensor[(6, 10, 14), int16] */;
  %595 = @func_512(%594) /* ty=(Tensor[(6, 10, 14), int16], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %596 = logical_xor(%543, %544) /* ty=Tensor[(9, 16, 16), uint16] */;
  %597 = greater_equal(%557, %558) /* ty=Tensor[(9, 16, 16), bool] */;
  %598 = @func_60(%560) /* ty=Tensor[(10, 7, 4), float64] */;
  %599 = %567.0;
  %600 = floor_mod(%582, %583) /* ty=Tensor[(9, 16, 16), float32] */;
  %601 = tan(%584) /* ty=Tensor[(9, 16, 16), float32] */;
  %602 = %592.1;
  %603 = %595.0;
  (%596, %597, %598, meta[relay.Constant][35] /* ty=Tensor[(280), uint16] */, %599, meta[relay.Constant][36] /* ty=Tensor[(252), float32] */, %var_1143, %586, %600, %601, %602, %603, %var_1161)
}

def @func_3593(%var_3590: Tensor[(525, 3), int32], %var_3591: Tensor[(7, 15, 15), int32], %var_3592: Tensor[(2352), float64]) -> (Tensor[(252), float32], Tensor[(225), int32], Tensor[(7, 15, 15), bool], Tensor[(7, 15, 15), uint32], Tensor[(6, 10, 14), float32], Tensor[(1452), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(12, 14, 14), int16], Tensor[(2352), float64], Tensor[(1792), float32]) {
  %648 = fn (%var_3535: Tensor[(525, 3), int32], %var_3555: Tensor[(7, 15, 15), int32], %var_3583: Tensor[(2352), float64]) -> (Tensor[(252), float32], Tensor[(225), int32], Tensor[(7, 15, 15), bool], Tensor[(7, 15, 15), uint32], Tensor[(6, 10, 14), float32], Tensor[(1452), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(12, 14, 14), int16], Tensor[(2352), float64], Tensor[(1792), float32]) {
    %604 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
    %605 = cast(meta[relay.Constant][37] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
    %606 = cast(%var_3535, dtype="int32") /* ty=Tensor[(525, 3), int32] */;
    %607 = reshape(%605, newshape=[25, 9]) /* ty=Tensor[(25, 9), int32] */;
    %608 = reshape(%606, newshape=[1575]) /* ty=Tensor[(1575), int32] */;
    %609 = @func_2758(%607, %608) /* ty=(bool, Tensor[(7, 15, 15), int32], Tensor[(25, 9), int32], Tensor[(1575), int32]) */;
    %610 = %609.1;
    %611 = cast(%var_3535, dtype="uint64") /* ty=Tensor[(525, 3), uint64] */;
    %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %613 = cast(%610, dtype="uint64") /* ty=Tensor[(7, 15, 15), uint64] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %615 = bitwise_and(%613, %614) /* ty=Tensor[(7, 15, 15), uint64] */;
    %616 = cast(%615, dtype="bool") /* ty=Tensor[(7, 15, 15), bool] */;
    %617 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %618 = cast(%610, dtype="bool") /* ty=Tensor[(7, 15, 15), bool] */;
    %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %620 = cast(meta[relay.Constant][37] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
    %621 = greater_equal(%618, %619) /* ty=Tensor[(7, 15, 15), bool] */;
    %622 = cast(%621, dtype="int32") /* ty=Tensor[(7, 15, 15), int32] */;
    %623 = reshape(%620, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
    %624 = reshape(%622, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
    %625 = @func_1409(%623, %624) /* ty=Tensor[(7, 15, 15), int32] */;
    %626 = cast(%var_3555, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%625, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %630 = cast(meta[relay.Constant][38] /* ty=Tensor[(1452), float64] */, dtype="float64") /* ty=Tensor[(1452), float64] */;
    %631 = cast(meta[relay.Constant][38] /* ty=Tensor[(1452), float64] */, dtype="float64") /* ty=Tensor[(1452), float64] */;
    %632 = reshape(%630, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), float64] */;
    %633 = reshape(%631, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), float64] */;
    %634 = @func_3455(%632, %633) /* ty=(Tensor[(11, 11, 12), float64], Tensor[(11, 11, 12), float64], Tensor[(6, 10, 14), float32]) */;
    %635 = cast(meta[relay.Constant][39] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %636 = reshape(%635, newshape=[2, 5, 8]) /* ty=Tensor[(2, 5, 8), float64] */;
    %637 = @func_1992(%636) /* ty=(Tensor[(2, 5, 8), float64],) */;
    %638 = cast(%var_3583, dtype="float64") /* ty=Tensor[(2352), float64] */;
    %639 = cast(meta[relay.Constant][40] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %640 = reshape(%638, newshape=[12, 14, 14]) /* ty=Tensor[(12, 14, 14), float64] */;
    %641 = reshape(%639, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
    %642 = @func_3367(%640, %641) /* ty=(Tensor[(12, 14, 14), int16], Tensor[(14, 8, 16), float32], Tensor[(1792), float32]) */;
    %643 = %604.3;
    %644 = minimum(%628, %629) /* ty=Tensor[(7, 15, 15), uint32] */;
    %645 = %634.2;
    %646 = %637.0;
    %647 = %642.0;
    (%643, meta[relay.Constant][37] /* ty=Tensor[(225), int32] */, %621, %644, %645, meta[relay.Constant][38] /* ty=Tensor[(1452), float64] */, %646, meta[relay.Constant][39] /* ty=Tensor[(80), float64] */, %647, %var_3583, meta[relay.Constant][40] /* ty=Tensor[(1792), float32] */)
  };
  %648(%var_3590, %var_3591, %var_3592) /* ty=(Tensor[(252), float32], Tensor[(225), int32], Tensor[(7, 15, 15), bool], Tensor[(7, 15, 15), uint32], Tensor[(6, 10, 14), float32], Tensor[(1452), float64], Tensor[(2, 5, 8), float64], Tensor[(80), float64], Tensor[(12, 14, 14), int16], Tensor[(2352), float64], Tensor[(1792), float32]) */
}

def @func_5141(%var_5140: Tensor[(220), float64]) -> (Tensor[(11, 4, 7), float32], Tensor[(10, 28), uint16], Tensor[(220), float64], Tensor[(1, 252), float32], Tensor[(11, 4, 7), uint16]) {
  %661 = fn (%var_5130: Tensor[(220), float64]) -> (Tensor[(11, 4, 7), float32], Tensor[(10, 28), uint16], Tensor[(220), float64], Tensor[(1, 252), float32], Tensor[(11, 4, 7), uint16]) {
    %649 = @func_3691() /* ty=(Tensor[(11, 4, 7), float32],) */;
    %650 = cast(%var_5130, dtype="float64") /* ty=Tensor[(220), float64] */;
    %651 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 252), float32] */, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
    %652 = reshape(%650, newshape=[55, 4]) /* ty=Tensor[(55, 4), float64] */;
    %653 = reshape(%651, newshape=[252]) /* ty=Tensor[(252), float32] */;
    %654 = @func_4972(%652, %653) /* ty=(bool, Tensor[(1575), int32], Tensor[(55, 4), float64], Tensor[(10, 28), uint16], Tensor[(252), float32]) */;
    %655 = %649.0;
    %656 = cast(%655, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
    %657 = reshape(%656, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
    %658 = @func_3316(%657) /* ty=(Tensor[(11, 4, 7), uint16],) */;
    %659 = %654.3;
    %660 = %658.0;
    (%655, %659, %var_5130, meta[relay.Constant][41] /* ty=Tensor[(1, 252), float32] */, %660)
  };
  %661(%var_5140) /* ty=(Tensor[(11, 4, 7), float32], Tensor[(10, 28), uint16], Tensor[(220), float64], Tensor[(1, 252), float32], Tensor[(11, 4, 7), uint16]) */
}

def @main(%var_5175: Tensor[(308), float32], %var_5177: Tensor[(1183), int64], %var_5183: Tensor[(1183), int64]) -> (Tensor[(840), float32], Tensor[(280), uint16], Tensor[(308), float32], Tensor[(280), uint16], Tensor[(1183), bool]) {
  %662 = cast(%var_5175, dtype="float32") /* ty=Tensor[(308), float32] */;
  %663 = cast(meta[relay.Constant][42] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %664 = cast(%var_5177, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %665 = reshape(%662, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %666 = reshape(%663, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %667 = reshape(%664, newshape=[1183]) /* ty=Tensor[(1183), int64] */;
  %668 = @func_2845(%665, %666, %667) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), float64], Tensor[(280), uint16], Tensor[(280), uint16], Tensor[(1183), int64]) */;
  %669 = cast(%var_5183, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %670 = shape_of(%var_5177, dtype="int32") /* ty=Tensor[(1), int32] */;
  %671 = cast(%var_5177, dtype="bool") /* ty=Tensor[(1183), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?), bool] */;
  %673 = @func_2745() /* ty=Tensor[(840), float32] */;
  %674 = %668.3;
  %675 = greater(%671, %672) /* ty=Tensor[(1183), bool] */;
  (%673, %674, %var_5175, meta[relay.Constant][42] /* ty=Tensor[(280), uint16] */, %675)
}

def @func_1995(%var_1993: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), float64],) {
  @func_1992(%var_1993) /* ty=(Tensor[(2, 5, 8), float64],) */
}

def @func_1992(%var_1980: Tensor[(2, 5, 8), float64]) -> (Tensor[(2, 5, 8), float64],) {
  %676 = cast(%var_1980, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %677 = asinh(%676) /* ty=Tensor[(2, 5, 8), float64] */;
  (%677,)
}

def @func_2701() -> bool {
  %679 = fn () -> bool {
    %678 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
    %678.1
  };
  %679() /* ty=bool */
}

def @func_2027() -> (Tensor[(11, 4, 7), float32], Tensor[(840), float32]) {
  %680 = @func_1632() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %681 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %682 = %680.0;
  %683 = %681.0;
  (%682, %683)
}

def @func_3397(%var_3395: Tensor[(4, 13, 10), uint16]) -> Tensor[(4, 13, 10), uint16] {
  @func_3394(%var_3395) /* ty=Tensor[(4, 13, 10), uint16] */
}

def @func_3864(%var_3801: int16, %var_3802: Tensor[(16, 1, 13), int16], %var_3812: Tensor[(16, 8, 13), int16]) -> (Tensor[(16, 1, 13), bool], Tensor[(16, 8, 13), uint16], Tensor[(16, 1, 13), float64], Tensor[(11, 4, 7), float32], Tensor[(308), float32], Tensor[(11, 4, 7), float64], Tensor[(1183), int64]) {
  %684 = cast(%var_3801, dtype="bool") /* ty=bool */;
  %685 = cast(%var_3802, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
  %686 = cast(%var_3802, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %687 = cast(%var_3812, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
  %688 = floor_divide(%686, %687) /* ty=Tensor[(16, 8, 13), float32] */;
  %689 = cast(%var_3812, dtype="uint16") /* ty=Tensor[(16, 8, 13), uint16] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="uint16") /* ty=Tensor[(16, 8, 13), uint16] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %693 = cast(%var_3802, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %694 = atan(%693) /* ty=Tensor[(16, 1, 13), float32] */;
  %695 = cast(%694, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
  %696 = log10(%695) /* ty=Tensor[(16, 1, 13), float64] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
  %698 = cast(meta[relay.Constant][43] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %699 = reshape(%698, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %700 = @func_1699(%699) /* ty=(Tensor[(11, 4, 7), float32],) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %703 = cast(meta[relay.Constant][44] /* ty=Tensor[(1183), int64] */, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %704 = reshape(%702, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
  %705 = reshape(%703, newshape=[91, 13]) /* ty=Tensor[(91, 13), int64] */;
  %706 = @func_2674(%704, %705) /* ty=(Tensor[(11, 4, 7), uint8], Tensor[(11, 4, 7), float32], Tensor[(728), int64], float64, Tensor[(252), float32], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(36), float64], Tensor[(2925), uint8], Tensor[(11, 4, 7), float64]) */;
  %707 = greater_equal(%684, %685) /* ty=Tensor[(16, 1, 13), bool] */;
  %708 = bitwise_xor(%691, %692) /* ty=Tensor[(16, 8, 13), uint16] */;
  %709 = erf(%697) /* ty=Tensor[(16, 1, 13), float64] */;
  %710 = %706.9;
  (%707, %708, %709, %701, meta[relay.Constant][43] /* ty=Tensor[(308), float32] */, %710, meta[relay.Constant][44] /* ty=Tensor[(1183), int64] */)
}

def @func_1841() -> (Tensor[(840), float32], bool, Tensor[(2925), uint8]) {
  @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */
}

def @func_3158(%var_3144: Tensor[(14, 8, 16), float32]) -> Tensor[(14, 8, 16), float32] {
  %711 = cast(%var_3144, dtype="float32") /* ty=Tensor[(14, 8, 16), float32] */;
  acosh(%711) /* ty=Tensor[(14, 8, 16), float32] */
}

def @func_3749(%var_3742: Tensor[(520), uint16]) -> (Tensor[(840), float32], Tensor[(4, 13, 10), uint16], Tensor[(520), uint16]) {
  %712 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %713 = cast(%var_3742, dtype="uint16") /* ty=Tensor[(520), uint16] */;
  %714 = reshape(%713, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), uint16] */;
  %715 = %712.1;
  %716 = @func_3394(%714) /* ty=Tensor[(4, 13, 10), uint16] */;
  (%715, %716, %var_3742)
}

def @func_2187(%var_2165: int64) -> (Tensor[(840), float32], Tensor[(280), uint16], Tensor[(1, 220), float64], Tensor[(280), uint16], Tensor[(280), uint16], int64, Tensor[(13, 91), int64]) {
  %717 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %718 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 220), float64] */, dtype="float64") /* ty=Tensor[(1, 220), float64] */;
  %719 = cast(meta[relay.Constant][46] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %720 = reshape(%718, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), float64] */;
  %721 = reshape(%719, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %722 = @func_460(%720, %721) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) */;
  %723 = cast(%var_2165, dtype="int64") /* ty=int64 */;
  %724 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 91), int64] */, dtype="int64") /* ty=Tensor[(13, 91), int64] */;
  %725 = %722.1;
  %726 = cast(%725, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %727 = reshape(%723, newshape=[]) /* ty=int64 */;
  %728 = reshape(%724, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %729 = reshape(%726, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %730 = @func_354(%727, %728, %729) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %731 = %717.1;
  %732 = %730.2;
  (%731, %725, meta[relay.Constant][45] /* ty=Tensor[(1, 220), float64] */, meta[relay.Constant][46] /* ty=Tensor[(280), uint16] */, %732, %var_2165, meta[relay.Constant][47] /* ty=Tensor[(13, 91), int64] */)
}

def @func_2613() -> (Tensor[(6, 10, 14), float32],) {
  @func_2611() /* ty=(Tensor[(6, 10, 14), float32],) */
}

def @func_4755() -> (Tensor[(840), int16],) {
  %733 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %734 = %733.0;
  (%734,)
}

def @func_965(%var_963: bool, %var_964: Tensor[(13, 7, 15), bool]) -> (Tensor[(13, 7, 15), bool],) {
  %738 = fn (%var_954: bool, %var_955: Tensor[(13, 7, 15), bool]) -> (Tensor[(13, 7, 15), bool],) {
    %735 = cast(%var_954, dtype="bool") /* ty=bool */;
    %736 = cast(%var_955, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
    %737 = logical_or(%735, %736) /* ty=Tensor[(13, 7, 15), bool] */;
    (%737,)
  };
  %738(%var_963, %var_964) /* ty=(Tensor[(13, 7, 15), bool],) */
}

def @func_3499() -> (Tensor[(840), float32],) {
  @func_3497() /* ty=(Tensor[(840), float32],) */
}

def @func_3318(%var_3317: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 4, 7), uint16],) {
  %745 = fn (%var_3303: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 4, 7), uint16],) {
    %739 = @func_2863() /* ty=Tensor[(11, 4, 7), float32] */;
    %740 = cast(%var_3303, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
    %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%739, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %744 = logical_xor(%742, %743) /* ty=Tensor[(11, 4, 7), uint16] */;
    (%744,)
  };
  %745(%var_3317) /* ty=(Tensor[(11, 4, 7), uint16],) */
}

def @func_2864() -> Tensor[(11, 4, 7), float32] {
  %747 = fn () -> Tensor[(11, 4, 7), float32] {
    %746 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
    %746.0
  };
  %747() /* ty=Tensor[(11, 4, 7), float32] */
}

def @func_3394(%var_3386: Tensor[(4, 13, 10), uint16]) -> Tensor[(4, 13, 10), uint16] {
  %748 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 13, 10), uint16] */, dtype="uint16") /* ty=Tensor[(4, 13, 10), uint16] */;
  %749 = shape_of(%var_3386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_3386, dtype="uint16") /* ty=Tensor[(4, 13, 10), uint16] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%750, %751) /* ty=Tensor[(4, 13, 10), uint16] */
}

def @func_3700() -> (Tensor[(11, 4, 7), float32],) {
  @func_3698() /* ty=(Tensor[(11, 4, 7), float32],) */
}

def @func_2407(%var_2405: Tensor[(840), int16]) -> (Tensor[(840), uint64],) {
  @func_2404(%var_2405) /* ty=(Tensor[(840), uint64],) */
}

def @func_4021(%var_4019: Tensor[(2304), float64], %var_4020: Tensor[(252), float32]) -> (float64, Tensor[(7, 8, 5), int32], Tensor[(308), float32], float64, Tensor[(2304), float64], Tensor[(308, 352), int64], Tensor[(11, 4, 7), uint16], Tensor[(840), float32], Tensor[(252, 1), float32], Tensor[(252), float32]) {
  %779 = fn (%var_3958: Tensor[(2304), float64], %var_4016: Tensor[(252), float32]) -> (float64, Tensor[(7, 8, 5), int32], Tensor[(308), float32], float64, Tensor[(2304), float64], Tensor[(308, 352), int64], Tensor[(11, 4, 7), uint16], Tensor[(840), float32], Tensor[(252, 1), float32], Tensor[(252), float32]) {
    %752 = @func_2903() /* ty=(Tensor[(2925), uint8], Tensor[(10, 7, 4), float64], float64, Tensor[(252), float32]) */;
    %753 = cast(%var_3958, dtype="float64") /* ty=Tensor[(2304), float64] */;
    %754 = cast(meta[relay.Constant][50] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
    %755 = reshape(%753, newshape=[2304]) /* ty=Tensor[(2304), float64] */;
    %756 = reshape(%754, newshape=[8, 44]) /* ty=Tensor[(8, 44), float64] */;
    %757 = @func_2233(%755, %756) /* ty=(Tensor[(11, 4, 7), float64], Tensor[(352), float64], float64, Tensor[(2304), float64], Tensor[(8, 44), float64], Tensor[(840), int16]) */;
    %758 = cast(meta[relay.Constant][49] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
    %759 = reshape(%758, newshape=[308, 1]) /* ty=Tensor[(308, 1), float32] */;
    %760 = @func_3632(%759) /* ty=(Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) */;
    %761 = %760.2;
    %762 = cast(%761, dtype="int64") /* ty=Tensor[(308, 1), int64] */;
    %763 = cast(meta[relay.Constant][50] /* ty=Tensor[(352), float64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
    %764 = cast(meta[relay.Constant][49] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
    %765 = reshape(%764, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
    %766 = @func_3316(%765) /* ty=(Tensor[(11, 4, 7), uint16],) */;
    %767 = %757.2;
    %768 = cast(%767, dtype="float64") /* ty=float64 */;
    %769 = cast(%var_4016, dtype="float32") /* ty=Tensor[(252), float32] */;
    %770 = reshape(%768, newshape=[]) /* ty=float64 */;
    %771 = reshape(%769, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
    %772 = @func_997(%770, %771) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
    %773 = %752.2;
    %774 = @func_2916() /* ty=Tensor[(7, 8, 5), int32] */;
    %775 = minimum(%762, %763) /* ty=Tensor[(308, 352), int64] */;
    %776 = %766.0;
    %777 = @func_2745() /* ty=Tensor[(840), float32] */;
    %778 = %772.2;
    (%773, %774, meta[relay.Constant][49] /* ty=Tensor[(308), float32] */, %767, %var_3958, %775, %776, %777, %778, %var_4016)
  };
  %779(%var_4019, %var_4020) /* ty=(float64, Tensor[(7, 8, 5), int32], Tensor[(308), float32], float64, Tensor[(2304), float64], Tensor[(308, 352), int64], Tensor[(11, 4, 7), uint16], Tensor[(840), float32], Tensor[(252, 1), float32], Tensor[(252), float32]) */
}

def @func_2512(%var_2491: Tensor[(280), uint16], %var_2500: Tensor[(1183), int64]) -> (Tensor[(840), int16], Tensor[(13, 7, 15), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(1183), int64], Tensor[(1, 2925), int8]) {
  %780 = @func_2262() /* ty=(Tensor[(840), int16],) */;
  %781 = cast(meta[relay.Constant][51] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %782 = cast(%var_2491, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %783 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 2925), uint8] */, dtype="uint8") /* ty=Tensor[(1, 2925), uint8] */;
  %784 = reshape(%781, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %785 = reshape(%782, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %786 = reshape(%783, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %787 = @func_1292(%784, %785, %786) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %788 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %789 = cast(%var_2500, dtype="int64") /* ty=Tensor[(1183), int64] */;
  %790 = cast(%var_2491, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %791 = reshape(%788, newshape=[]) /* ty=int64 */;
  %792 = reshape(%789, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
  %793 = reshape(%790, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %794 = @func_354(%791, %792, %793) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
  %795 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 2925), uint8] */, dtype="int8") /* ty=Tensor[(1, 2925), int8] */;
  %796 = cast(8 /* ty=int64 */, dtype="int8") /* ty=int8 */;
  %797 = %780.0;
  %798 = %787.6;
  %799 = %794.1;
  %800 = right_shift(%795, %796) /* ty=Tensor[(1, 2925), int8] */;
  (%797, %798, meta[relay.Constant][51] /* ty=Tensor[(36), float64] */, %var_2491, %799, %var_2500, %800)
}

def @func_4444(%var_4443: Tensor[(14, 10, 12), float64]) -> Tensor[(14, 10, 12), float32] {
  %804 = fn (%var_4429: Tensor[(14, 10, 12), float64]) -> Tensor[(14, 10, 12), float32] {
    %801 = cast(%var_4429, dtype="float64") /* ty=Tensor[(14, 10, 12), float64] */;
    %802 = atanh(%801) /* ty=Tensor[(14, 10, 12), float64] */;
    %803 = cast(%802, dtype="float32") /* ty=Tensor[(14, 10, 12), float32] */;
    asinh(%803) /* ty=Tensor[(14, 10, 12), float32] */
  };
  %804(%var_4443) /* ty=Tensor[(14, 10, 12), float32] */
}

def @func_3022() -> Tensor[(6, 10, 14), float32] {
  %806 = fn () -> Tensor[(6, 10, 14), float32] {
    %805 = @func_2611() /* ty=(Tensor[(6, 10, 14), float32],) */;
    %805.0
  };
  %806() /* ty=Tensor[(6, 10, 14), float32] */
}

def @func_4322(%var_4320: Tensor[(840, 1), int16], %var_4321: Tensor[(2352), float64]) -> (Tensor[(11, 4, 7), float32], Tensor[(840), uint64], Tensor[(840, 1), int16], bool, Tensor[(1792), float32], Tensor[(2352), float64], Tensor[(32, 56), float32]) {
  @func_4318(%var_4320, %var_4321) /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), uint64], Tensor[(840, 1), int16], bool, Tensor[(1792), float32], Tensor[(2352), float64], Tensor[(32, 56), float32]) */
}

def @func_4243() -> Tensor[(2925), uint8] {
  @func_4241() /* ty=Tensor[(2925), uint8] */
}

def @func_3691() -> (Tensor[(11, 4, 7), float32],) {
  %807 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
  %808 = %807.0;
  (%808,)
}

def @func_3698() -> (Tensor[(11, 4, 7), float32],) {
  %809 = @func_2863() /* ty=Tensor[(11, 4, 7), float32] */;
  (%809,)
}

def @func_5023() -> Tensor[(11, 4, 7), float32] {
  @func_5021() /* ty=Tensor[(11, 4, 7), float32] */
}

def @func_2917() -> Tensor[(7, 8, 5), int32] {
  %814 = fn () -> Tensor[(7, 8, 5), int32] {
    %810 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
    %811 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 8, 5), int32] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    right_shift(%812, %813) /* ty=Tensor[(7, 8, 5), int32] */
  };
  %814() /* ty=Tensor[(7, 8, 5), int32] */
}

def @func_3293(%var_3292: int64) -> (Tensor[(11, 4, 7), float32], int64, int64) {
  %821 = fn (%var_3289: int64) -> (Tensor[(11, 4, 7), float32], int64, int64) {
    %815 = @func_2027() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), float32]) */;
    %816 = cast(%var_3289, dtype="int64") /* ty=int64 */;
    %817 = reshape(%816, newshape=[]) /* ty=int64 */;
    %818 = @func_2187(%817) /* ty=(Tensor[(840), float32], Tensor[(280), uint16], Tensor[(1, 220), float64], Tensor[(280), uint16], Tensor[(280), uint16], int64, Tensor[(13, 91), int64]) */;
    %819 = %815.0;
    %820 = %818.5;
    (%819, %820, %var_3289)
  };
  %821(%var_3292) /* ty=(Tensor[(11, 4, 7), float32], int64, int64) */
}

def @func_4791() -> bool {
  @func_4789() /* ty=bool */
}

def @func_3133() -> (Tensor[(840), float32],) {
  @func_3131() /* ty=(Tensor[(840), float32],) */
}

def @func_1948(%var_1938: Tensor[(14, 13, 4), int64], %var_1939: Tensor[(14, 13, 4), int64], %var_1940: float64, %var_1941: Tensor[(252, 1), float32], %var_1942: Tensor[(14, 13, 4), float64], %var_1943: Tensor[(1183), int64], %var_1944: Tensor[(280), uint16], %var_1945: Tensor[(14, 13, 4), float64], %var_1946: Tensor[(36), float64], %var_1947: Tensor[(2925), uint8]) -> (Tensor[(14, 13, 4), bool], Tensor[(11, 4, 7), float32], Tensor[(352), float64], float64, Tensor[(252, 1), float32], Tensor[(7, 13, 13), int64], Tensor[(1183), int64], Tensor[(280), uint16], Tensor[(14, 13, 4), int32], Tensor[(14, 13, 4), uint32], Tensor[(14, 13, 4), int64], bool, Tensor[(36), float64], Tensor[(2925), uint8]) {
  @func_1936(%var_1938, %var_1939, %var_1940, %var_1941, %var_1942, %var_1943, %var_1944, %var_1945, %var_1946, %var_1947) /* ty=(Tensor[(14, 13, 4), bool], Tensor[(11, 4, 7), float32], Tensor[(352), float64], float64, Tensor[(252, 1), float32], Tensor[(7, 13, 13), int64], Tensor[(1183), int64], Tensor[(280), uint16], Tensor[(14, 13, 4), int32], Tensor[(14, 13, 4), uint32], Tensor[(14, 13, 4), int64], bool, Tensor[(36), float64], Tensor[(2925), uint8]) */
}

def @func_143(%var_141: Tensor[(70, 4), uint16], %var_142: Tensor[(11, 4, 8), float64]) -> (Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) {
  @func_139(%var_141, %var_142) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */
}

def @func_2516(%var_2514: Tensor[(280), uint16], %var_2515: Tensor[(1183), int64]) -> (Tensor[(840), int16], Tensor[(13, 7, 15), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(1183), int64], Tensor[(1, 2925), int8]) {
  @func_2512(%var_2514, %var_2515) /* ty=(Tensor[(840), int16], Tensor[(13, 7, 15), bool], Tensor[(36), float64], Tensor[(280), uint16], Tensor[(10, 7, 4), float64], Tensor[(1183), int64], Tensor[(1, 2925), int8]) */
}

def @func_1296(%var_1293: Tensor[(3, 12, 1), float64], %var_1294: Tensor[(280), uint16], %var_1295: Tensor[(2925), uint8]) -> (Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) {
  %850 = fn (%var_1247: Tensor[(3, 12, 1), float64], %var_1254: Tensor[(280), uint16], %var_1261: Tensor[(2925), uint8]) -> (Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) {
    %822 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %823 = cast(meta[relay.Constant][55] /* ty=Tensor[(1183), int64] */, dtype="int64") /* ty=Tensor[(1183), int64] */;
    %824 = cast(%var_1254, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %825 = reshape(%822, newshape=[]) /* ty=int64 */;
    %826 = reshape(%823, newshape=[7, 13, 13]) /* ty=Tensor[(7, 13, 13), int64] */;
    %827 = reshape(%824, newshape=[280]) /* ty=Tensor[(280), uint16] */;
    %828 = @func_354(%825, %826, %827) /* ty=(Tensor[(7, 13, 13), int64], Tensor[(10, 7, 4), float64], Tensor[(280), uint16]) */;
    %829 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
    %830 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
    %831 = reshape(%829, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
    %832 = reshape(%830, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
    %833 = @func_1029(%831, %832) /* ty=(Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) */;
    %834 = cast(%var_1254, dtype="uint16") /* ty=Tensor[(280), uint16] */;
    %835 = reshape(%834, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
    %836 = cast(-3 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %837 = cast(meta[relay.Constant][56] /* ty=Tensor[(1365), bool] */, dtype="bool") /* ty=Tensor[(1365), bool] */;
    %838 = reshape(%836, newshape=[]) /* ty=bool */;
    %839 = reshape(%837, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), bool] */;
    %840 = @func_962(%838, %839) /* ty=(Tensor[(13, 7, 15), bool],) */;
    %841 = cast(%var_1247, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
    %842 = log10(%841) /* ty=Tensor[(3, 12, 1), float64] */;
    %843 = cast(%842, dtype="bool") /* ty=Tensor[(3, 12, 1), bool] */;
    %844 = cast(%var_1261, dtype="bool") /* ty=Tensor[(2925), bool] */;
    %845 = %828.2;
    %846 = %833.2;
    %847 = @func_60(%835) /* ty=Tensor[(10, 7, 4), float64] */;
    %848 = %840.0;
    %849 = logical_or(%843, %844) /* ty=Tensor[(3, 12, 2925), bool] */;
    (%845, -3 /* ty=int64 */, meta[relay.Constant][55] /* ty=Tensor[(1183), int64] */, %var_1254, %846, %847, %848, meta[relay.Constant][56] /* ty=Tensor[(1365), bool] */, %849)
  };
  %850(%var_1293, %var_1294, %var_1295) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */
}

def @func_3244() -> Tensor[(15, 11, 8), float32] {
  %852 = fn () -> Tensor[(15, 11, 8), float32] {
    %851 = cast(meta[relay.Constant][57] /* ty=Tensor[(15, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 8), float32] */;
    sqrt(%851) /* ty=Tensor[(15, 11, 8), float32] */
  };
  %852() /* ty=Tensor[(15, 11, 8), float32] */
}

def @func_2460(%var_2458: Tensor[(2, 8, 2), int32], %var_2459: Tensor[(2, 8, 2), int32]) -> (Tensor[(2, 8, 2), int32],) {
  @func_2456(%var_2458, %var_2459) /* ty=(Tensor[(2, 8, 2), int32],) */
}

def @func_1839() -> (Tensor[(840), float32], bool, Tensor[(2925), uint8]) {
  %853 = @func_1742() /* ty=(Tensor[(11, 4, 7), float32], Tensor[(840), int16], Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32]) */;
  %854 = %853.1;
  %855 = cast(%854, dtype="float32") /* ty=Tensor[(840), float32] */;
  %856 = cast(meta[relay.Constant][58] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %857 = cast(meta[relay.Constant][58] /* ty=Tensor[(2925), uint8] */, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %858 = reshape(%856, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
  %859 = reshape(%857, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint8] */;
  %860 = @func_1029(%858, %859) /* ty=(Tensor[(15, 13, 15), uint8], Tensor[(13, 7, 15), bool], bool, Tensor[(1365), bool]) */;
  %861 = exp(%855) /* ty=Tensor[(840), float32] */;
  %862 = %860.2;
  (%861, %862, meta[relay.Constant][58] /* ty=Tensor[(2925), uint8] */)
}

def @func_3497() -> (Tensor[(840), float32],) {
  %863 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
  %864 = %863.0;
  (%864,)
}

def @func_2133(%var_2129: Tensor[(220), float64], %var_2130: Tensor[(10, 28), uint16], %var_2131: float64, %var_2132: Tensor[(252), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(220), float64], Tensor[(10, 28), uint16], Tensor[(252, 1), float32], Tensor[(252), float32], bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), int32], Tensor[(10, 7, 4), float64], Tensor[(2925), bool]) {
  %896 = fn (%var_2080: Tensor[(220), float64], %var_2081: Tensor[(10, 28), uint16], %var_2090: float64, %var_2091: Tensor[(252), float32]) -> (Tensor[(10, 7, 4), float64], Tensor[(220), float64], Tensor[(10, 28), uint16], Tensor[(252, 1), float32], Tensor[(252), float32], bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), int32], Tensor[(10, 7, 4), float64], Tensor[(2925), bool]) {
    %865 = cast(%var_2080, dtype="float64") /* ty=Tensor[(220), float64] */;
    %866 = cast(%var_2081, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
    %867 = reshape(%865, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), float64] */;
    %868 = reshape(%866, newshape=[280]) /* ty=Tensor[(280), uint16] */;
    %869 = @func_460(%867, %868) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(11, 5, 4), float64]) */;
    %870 = cast(%var_2090, dtype="float64") /* ty=float64 */;
    %871 = cast(%var_2091, dtype="float32") /* ty=Tensor[(252), float32] */;
    %872 = reshape(%870, newshape=[]) /* ty=float64 */;
    %873 = reshape(%871, newshape=[252, 1]) /* ty=Tensor[(252, 1), float32] */;
    %874 = @func_997(%872, %873) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(10, 7, 4), float64], Tensor[(252, 1), float32], Tensor[(352), float64]) */;
    %875 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
    %876 = cast(meta[relay.Constant][59] /* ty=Tensor[(225), int32] */, dtype="int32") /* ty=Tensor[(225), int32] */;
    %877 = cast(meta[relay.Constant][60] /* ty=Tensor[(1575), int32] */, dtype="int32") /* ty=Tensor[(1575), int32] */;
    %878 = reshape(%876, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int32] */;
    %879 = reshape(%877, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int32] */;
    %880 = cast(%var_2081, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
    %881 = reshape(%880, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint16] */;
    %882 = @func_1839() /* ty=(Tensor[(840), float32], bool, Tensor[(2925), uint8]) */;
    %883 = %882.2;
    %884 = cast(%883, dtype="float64") /* ty=Tensor[(2925), float64] */;
    %885 = erf(%884) /* ty=Tensor[(2925), float64] */;
    %886 = cast(%885, dtype="float32") /* ty=Tensor[(2925), float32] */;
    %887 = exp(%886) /* ty=Tensor[(2925), float32] */;
    %888 = cast(%887, dtype="bool") /* ty=Tensor[(2925), bool] */;
    %889 = cast(%var_2090, dtype="bool") /* ty=bool */;
    %890 = %869.0;
    %891 = %874.2;
    %892 = %875.1;
    %893 = @func_1409(%878, %879) /* ty=Tensor[(7, 15, 15), int32] */;
    %894 = @func_60(%881) /* ty=Tensor[(10, 7, 4), float64] */;
    %895 = logical_and(%888, %889) /* ty=Tensor[(2925), bool] */;
    (%890, %var_2080, %var_2081, %891, %var_2091, %892, %893, meta[relay.Constant][59] /* ty=Tensor[(225), int32] */, meta[relay.Constant][60] /* ty=Tensor[(1575), int32] */, %894, %895)
  };
  %896(%var_2129, %var_2130, %var_2131, %var_2132) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(220), float64], Tensor[(10, 28), uint16], Tensor[(252, 1), float32], Tensor[(252), float32], bool, Tensor[(7, 15, 15), int32], Tensor[(225), int32], Tensor[(1575), int32], Tensor[(10, 7, 4), float64], Tensor[(2925), bool]) */
}

def @func_4186(%var_4183: Tensor[(2304), float64], %var_4184: Tensor[(4, 88), float64], %var_4185: Tensor[(4, 88), float64]) -> (Tensor[(252), float32], Tensor[(11, 4, 7), float64], Tensor[(2304), float64], Tensor[(4, 88), bool], Tensor[(4, 88), float64], Tensor[(4, 88), float32]) {
  @func_4181(%var_4183, %var_4184, %var_4185) /* ty=(Tensor[(252), float32], Tensor[(11, 4, 7), float64], Tensor[(2304), float64], Tensor[(4, 88), bool], Tensor[(4, 88), float64], Tensor[(4, 88), float32]) */
}

def @func_3634(%var_3633: Tensor[(308, 1), float32]) -> (Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) {
  %906 = fn (%var_3613: Tensor[(308, 1), float32]) -> (Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) {
    %897 = cast(%var_3613, dtype="float32") /* ty=Tensor[(308, 1), float32] */;
    %898 = reshape(%897, newshape=[11, 4, 7]) /* ty=Tensor[(11, 4, 7), float32] */;
    %899 = @func_3316(%898) /* ty=(Tensor[(11, 4, 7), uint16],) */;
    %900 = cast(%var_3613, dtype="float32") /* ty=Tensor[(308, 1), float32] */;
    %901 = reshape(%900, newshape=[308, 1]) /* ty=Tensor[(308, 1), float32] */;
    %902 = @func_2602(%901) /* ty=(Tensor[(840), int16], Tensor[(11, 4, 7), float32], Tensor[(308, 1), float32]) */;
    %903 = @func_3021() /* ty=Tensor[(6, 10, 14), float32] */;
    %904 = %899.0;
    %905 = %902.0;
    (%903, %904, %var_3613, %905)
  };
  %906(%var_3633) /* ty=(Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) */
}

def @func_2678(%var_2676: Tensor[(11, 4, 7), float32], %var_2677: Tensor[(91, 13), int64]) -> (Tensor[(11, 4, 7), uint8], Tensor[(11, 4, 7), float32], Tensor[(728), int64], float64, Tensor[(252), float32], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(36), float64], Tensor[(2925), uint8], Tensor[(11, 4, 7), float64]) {
  @func_2674(%var_2676, %var_2677) /* ty=(Tensor[(11, 4, 7), uint8], Tensor[(11, 4, 7), float32], Tensor[(728), int64], float64, Tensor[(252), float32], Tensor[(91, 13), int64], Tensor[(280), uint16], Tensor[(36), float64], Tensor[(2925), uint8], Tensor[(11, 4, 7), float64]) */
}

def @func_4745(%var_4734: Tensor[(1, 36), float64], %var_4735: Tensor[(2925), uint8]) -> (Tensor[(11, 4, 7), float32], Tensor[(6, 10, 14), float32], Tensor[(840), float32], Tensor[(10, 7, 4), float64], Tensor[(280), uint16], Tensor[(352), float64], Tensor[(10, 7, 4), float64], Tensor[(1, 36), float64], Tensor[(2925), uint8]) {
  %907 = @func_2863() /* ty=Tensor[(11, 4, 7), float32] */;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %909 = reshape(%908, newshape=[308, 1]) /* ty=Tensor[(308, 1), float32] */;
  %910 = @func_3632(%909) /* ty=(Tensor[(6, 10, 14), float32], Tensor[(11, 4, 7), uint16], Tensor[(308, 1), float32], Tensor[(840), int16]) */;
  %911 = cast(meta[relay.Constant][61] /* ty=Tensor[(280), uint16] */, dtype="uint16") /* ty=Tensor[(280), uint16] */;
  %912 = cast(meta[relay.Constant][62] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %913 = reshape(%911, newshape=[70, 4]) /* ty=Tensor[(70, 4), uint16] */;
  %914 = reshape(%912, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), float64] */;
  %915 = @func_139(%913, %914) /* ty=(Tensor[(10, 7, 4), float64], Tensor[(70, 4), uint16], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), uint16], Tensor[(10, 7, 4), float64], Tensor[(11, 4, 8), bool], Tensor[(10, 7, 4), float64]) */;
  %916 = cast(%var_4734, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %917 = %915.7;
  %918 = cast(%917, dtype="uint16") /* ty=Tensor[(10, 7, 4), uint16] */;
  %919 = cast(%var_4735, dtype="uint8") /* ty=Tensor[(2925), uint8] */;
  %920 = reshape(%916, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %921 = reshape(%918, newshape=[280]) /* ty=Tensor[(280), uint16] */;
  %922 = reshape(%919, newshape=[2925]) /* ty=Tensor[(2925), uint8] */;
  %923 = @func_1292(%920, %921, %922) /* ty=(Tensor[(280), uint16], int64, Tensor[(1183), int64], Tensor[(280), uint16], bool, Tensor[(10, 7, 4), float64], Tensor[(13, 7, 15), bool], Tensor[(1365), bool], Tensor[(3, 12, 2925), bool]) */;
  %924 = %910.0;
  %925 = @func_2425() /* ty=Tensor[(840), float32] */;
  %926 = %923.5;
  (%907, %924, %925, %917, meta[relay.Constant][61] /* ty=Tensor[(280), uint16] */, meta[relay.Constant][62] /* ty=Tensor[(352), float64] */, %926, %var_4734, %var_4735)
}

def @func_2845(%var_2842: Tensor[(11, 4, 7), float32], %var_2843: Tensor[(280), uint16], %var_2844: Tensor[(1183), int64]) -> (Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), float64], Tensor[(280), uint16], Tensor[(280), uint16], Tensor[(1183), int64]) {
  @func_2840(%var_2842, %var_2843, %var_2844) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), bool], Tensor[(11, 4, 7), float64], Tensor[(280), uint16], Tensor[(280), uint16], Tensor[(1183), int64]) */
}

def @func_4357(%var_4356: Tensor[(14, 3, 7), uint64]) -> (Tensor[(14, 3, 7), uint64], bool, Tensor[(840), float32]) {
  %935 = fn (%var_4339: Tensor[(14, 3, 7), uint64]) -> (Tensor[(14, 3, 7), uint64], bool, Tensor[(840), float32]) {
    %927 = cast(%var_4339, dtype="uint64") /* ty=Tensor[(14, 3, 7), uint64] */;
    %928 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(14, 3, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %929 = cast(meta[relay.Constant][63] /* ty=Tensor[(14, 3, 7), uint64] */, dtype="uint64") /* ty=Tensor[(14, 3, 7), uint64] */;
    %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %931 = @func_3131() /* ty=(Tensor[(840), float32],) */;
    %932 = left_shift(%929, %930) /* ty=Tensor[(14, 3, 7), uint64] */;
    %933 = @func_2700() /* ty=bool */;
    %934 = %931.0;
    (%932, %933, %934)
  };
  %935(%var_4356) /* ty=(Tensor[(14, 3, 7), uint64], bool, Tensor[(840), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen137/build/output.py", line 1865, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:52:26] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

