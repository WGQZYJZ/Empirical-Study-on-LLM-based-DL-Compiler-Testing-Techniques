==========mod==========
#[version = "0.0.5"]
def @func_4752(%var_4695: Tensor[(8, 6, 13), float64], %var_4696: Tensor[(8, 6, 13), float64], %var_4719: Tensor[(50), int16], %var_4722: Tensor[(288, 2), int32]) -> (Tensor[(8, 6, 13), bool], Tensor[(10, 1, 5), bool], Tensor[(300), float32], Tensor[(50), int16], Tensor[(288, 2), int64], Tensor[(8, 6, 13), float64]) {
  %0 = cast(%var_4695, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %1 = shape_of(%var_4696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_4696, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %5 = cast(%var_4719, dtype="int16") /* ty=Tensor[(50), int16] */;
  %6 = reshape(%4, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %7 = reshape(%5, newshape=[50]) /* ty=Tensor[(50), int16] */;
  %8 = @func_3051(%6, %7) /* ty=(Tensor[(5, 15, 4), float32], Tensor[(10, 1, 5), bool], Tensor[(50), int16], Tensor[(840), float32]) */;
  %9 = cast(%var_4722, dtype="int32") /* ty=Tensor[(288, 2), int32] */;
  %10 = reshape(%9, newshape=[8, 9, 8]) /* ty=Tensor[(8, 9, 8), int32] */;
  %11 = @func_779(%10) /* ty=Tensor[(8, 9, 8), int32] */;
  %12 = cast(%11, dtype="int64") /* ty=Tensor[(8, 9, 8), int64] */;
  %13 = shape_of(%var_4722, dtype="int32") /* ty=Tensor[(2), int32] */;
  %14 = cast(%var_4722, dtype="int64") /* ty=Tensor[(288, 2), int64] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %16 = cast(%var_4695, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %17 = cos(%16) /* ty=Tensor[(8, 6, 13), float32] */;
  %18 = cast(%var_4696, dtype="int64") /* ty=Tensor[(8, 6, 13), int64] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="int64") /* ty=Tensor[(8, 6, 13), int64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %22 = multiply(%20, %21) /* ty=Tensor[(8, 6, 13), int64] */;
  %23 = cast(%var_4696, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %24 = shape_of(%var_4695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%var_4695, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %27 = less_equal(%25, %26) /* ty=Tensor[(8, 6, 13), bool] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %29 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%22, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %32 = equal(%2, %3) /* ty=Tensor[(8, 6, 13), bool] */;
  %33 = %8.1;
  %34 = minimum(%14, %15) /* ty=Tensor[(288, 2), int64] */;
  %35 = power(%30, %31) /* ty=Tensor[(8, 6, 13), float64] */;
  (%32, %33, meta[relay.Constant][0] /* ty=Tensor[(300), float32] */, %var_4719, %34, %35)
}

def @func_4960() -> (Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) {
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %37 = reshape(%36, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %38 = @func_4263(%37) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %39 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %40 = %38.2;
  (%39, %40, meta[relay.Constant][1] /* ty=Tensor[(840), float32] */)
}

def @func_6930() -> Tensor[(5, 15, 12), float64] {
  @func_5031() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_4212(%var_4129: Tensor[(5, 15, 12), float32], %var_4135: Tensor[(5, 15, 12), float64], %var_4209: Tensor[(512), float32], %var_4210: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) {
  %41 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %42 = %41.0;
  %43 = cast(%var_4129, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %47 = minimum(%45, %46) /* ty=Tensor[(5, 15, 12), float64] */;
  %48 = cast(%var_4135, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %55 = reshape(%52, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %56 = reshape(%53, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %57 = reshape(%54, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %58 = @func_3803(%55, %56, %57) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %60 = cast(%var_4209, dtype="float32") /* ty=Tensor[(512), float32] */;
  %61 = cast(%var_4210, dtype="float32") /* ty=Tensor[(840), float32] */;
  %62 = reshape(%59, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), uint8] */;
  %63 = reshape(%60, newshape=[1, 512]) /* ty=Tensor[(1, 512), float32] */;
  %64 = reshape(%61, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %65 = @func_3022(%62, %63, %64) /* ty=(Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) */;
  %66 = less_equal(%50, %51) /* ty=Tensor[(5, 15, 12), bool] */;
  %67 = %58.5;
  %68 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %69 = %65.1;
  (%66, %67, meta[relay.Constant][2] /* ty=Tensor[(495), float32] */, meta[relay.Constant][3] /* ty=Tensor[(52), uint8] */, meta[relay.Constant][4] /* ty=Tensor[(104), uint8] */, %68, %69, meta[relay.Constant][5] /* ty=Tensor[(1470), uint8] */, %var_4209, %var_4210)
}

def @func_2479(%var_2469: Tensor[(11, 9, 5), float32]) -> Tensor[(11, 9, 5), float32] {
  %70 = cast(%var_2469, dtype="float32") /* ty=Tensor[(11, 9, 5), float32] */;
  %71 = exp(%70) /* ty=Tensor[(11, 9, 5), float32] */;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(11, 9, 5), float32] */;
  erf(%72) /* ty=Tensor[(11, 9, 5), float32] */
}

def @func_779(%var_768: Tensor[(8, 9, 8), int32]) -> Tensor[(8, 9, 8), int32] {
  %73 = cast(%var_768, dtype="int32") /* ty=Tensor[(8, 9, 8), int32] */;
  %74 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(8, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(8, 9, 8), int32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%75, %76) /* ty=Tensor[(8, 9, 8), int32] */
}

def @func_718(%var_708: Tensor[(8, 7, 15), float32]) -> Tensor[(8, 7, 15), float32] {
  %77 = cast(%var_708, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  sigmoid(%77) /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_4535(%var_4528: Tensor[(8, 6, 12), float32], %var_4529: Tensor[(8, 6, 12), float32]) -> (Tensor[(8, 6, 12), bool],) {
  %78 = cast(%var_4529, dtype="bool") /* ty=Tensor[(8, 6, 12), bool] */;
  %79 = shape_of(%var_4528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_4528, dtype="bool") /* ty=Tensor[(8, 6, 12), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = less(%80, %81) /* ty=Tensor[(8, 6, 12), bool] */;
  (%82,)
}

def @func_6855() -> (Tensor[(5, 15, 12), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %83 = @func_6761() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %85 = cast(meta[relay.Constant][8] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %86 = reshape(%84, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %87 = reshape(%85, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %88 = %83.0;
  %89 = @func_3492(%86, %87) /* ty=Tensor[(4, 2, 13), uint8] */;
  (%88, %89, meta[relay.Constant][7] /* ty=Tensor[(52), uint8] */, meta[relay.Constant][8] /* ty=Tensor[(104), uint8] */)
}

def @func_5894(%var_5854: Tensor[(1, 15, 5), int32], %var_5855: Tensor[(2, 15, 5), int32]) -> (Tensor[(2, 15, 5), int32], Tensor[(7, 9, 6), float64]) {
  %90 = cast(%var_5854, dtype="int32") /* ty=Tensor[(1, 15, 5), int32] */;
  %91 = cast(%var_5855, dtype="int32") /* ty=Tensor[(2, 15, 5), int32] */;
  %92 = @func_5083() /* ty=(Tensor[(7, 9, 6), float64],) */;
  %93 = logical_xor(%90, %91) /* ty=Tensor[(2, 15, 5), int32] */;
  %94 = %92.0;
  (%93, %94)
}

def @func_3479(%var_3437: Tensor[(36, 16), int32], %var_3447: Tensor[(840), float32], %var_3466: Tensor[(90, 14), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(8, 9, 8), int32], Tensor[(36, 16), int32], Tensor[(840), float32], Tensor[(120), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float32], Tensor[(15, 1, 14), float32], Tensor[(210), uint8], Tensor[(90, 14), uint8]) {
  %95 = cast(%var_3437, dtype="int32") /* ty=Tensor[(36, 16), int32] */;
  %96 = reshape(%95, newshape=[8, 9, 8]) /* ty=Tensor[(8, 9, 8), int32] */;
  %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %98 = cast(meta[relay.Constant][9] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %99 = cast(%var_3447, dtype="float32") /* ty=Tensor[(840), float32] */;
  %100 = reshape(%97, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), float32] */;
  %101 = reshape(%98, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), float32] */;
  %102 = reshape(%99, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %103 = @func_1192(%100, %101, %102) /* ty=(Tensor[(5, 6, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %104 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %105 = cast(meta[relay.Constant][10] /* ty=Tensor[(210), uint8] */, dtype="uint8") /* ty=Tensor[(210), uint8] */;
  %106 = cast(%var_3466, dtype="uint8") /* ty=Tensor[(90, 14), uint8] */;
  %107 = reshape(%105, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint8] */;
  %108 = reshape(%106, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint8] */;
  %109 = @func_1299(%107, %108) /* ty=(Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) */;
  %110 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %111 = @func_779(%96) /* ty=Tensor[(8, 9, 8), int32] */;
  %112 = %103.2;
  %113 = %104.0;
  %114 = %109.1;
  (%110, %111, %var_3437, %112, meta[relay.Constant][9] /* ty=Tensor[(120), float32] */, %var_3447, %113, %114, meta[relay.Constant][10] /* ty=Tensor[(210), uint8] */, %var_3466)
}

def @func_6452(%var_6388: Tensor[(490, 3), uint8], %var_6449: Tensor[(216), bool]) -> (Tensor[(5, 15, 12), float64], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(512), float32], Tensor[(840), float32], Tensor[(490, 3), int32], Tensor[(490, 3), uint8], Tensor[(5, 15, 12), float32], Tensor[(512), bool], Tensor[(8, 9, 8), int32], Tensor[(576), int32], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float64], Tensor[(6, 4, 9), bool], Tensor[(216), bool]) {
  %115 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %116 = cast(meta[relay.Constant][11] /* ty=Tensor[(2240), uint16] */, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
  %117 = cast(meta[relay.Constant][11] /* ty=Tensor[(2240), uint16] */, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
  %118 = reshape(%116, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
  %119 = reshape(%117, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
  %120 = @func_3992(%118, %119) /* ty=(Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) */;
  %121 = cast(%var_6388, dtype="uint8") /* ty=Tensor[(490, 3), uint8] */;
  %122 = cast(meta[relay.Constant][13] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %123 = cast(%var_6388, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
  %124 = cast(%var_6388, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
  %125 = reshape(%121, newshape=[490, 3]) /* ty=Tensor[(490, 3), uint8] */;
  %126 = reshape(%122, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %127 = reshape(%123, newshape=[490, 3]) /* ty=Tensor[(490, 3), float32] */;
  %128 = reshape(%124, newshape=[490, 3]) /* ty=Tensor[(490, 3), float32] */;
  %129 = @func_5766(%125, %126, %127, %128) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(50, 1), int16], Tensor[(840), float32], Tensor[(10, 2240, 5), int8], Tensor[(490, 3), float32], Tensor[(490, 3), int32]) */;
  %130 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %131 = %115.0;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %133 = cast(%131, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %134 = cast(meta[relay.Constant][12] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %135 = cast(meta[relay.Constant][13] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %136 = reshape(%132, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %137 = reshape(%133, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %138 = reshape(%134, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %139 = reshape(%135, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %140 = @func_4212(%136, %137, %138, %139) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %141 = %140.8;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(512), float32] */;
  %143 = rsqrt(%142) /* ty=Tensor[(512), float32] */;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(512), float64] */;
  %145 = acosh(%144) /* ty=Tensor[(512), float64] */;
  %146 = cast(%143, dtype="int32") /* ty=Tensor[(512), int32] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(1), int32] */;
  %148 = cast(%145, dtype="int32") /* ty=Tensor[(512), int32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?), int32] */;
  %150 = bitwise_or(%148, %149) /* ty=Tensor[(512), int32] */;
  %151 = cast(%150, dtype="bool") /* ty=Tensor[(512), bool] */;
  %152 = shape_of(%143, dtype="int32") /* ty=Tensor[(1), int32] */;
  %153 = cast(%143, dtype="bool") /* ty=Tensor[(512), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?), bool] */;
  %155 = cast(meta[relay.Constant][14] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %156 = reshape(%155, newshape=[8, 9, 8]) /* ty=Tensor[(8, 9, 8), int32] */;
  %157 = cast(%var_6449, dtype="bool") /* ty=Tensor[(216), bool] */;
  %158 = reshape(%157, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), bool] */;
  %159 = @func_3409(%158) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %160 = %120.0;
  %161 = %129.6;
  %162 = %130.0;
  %163 = greater_equal(%153, %154) /* ty=Tensor[(512), bool] */;
  %164 = @func_779(%156) /* ty=Tensor[(8, 9, 8), int32] */;
  %165 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %166 = @func_4338() /* ty=Tensor[(5, 15, 12), float32] */;
  %167 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %168 = %159.0;
  (%131, %160, meta[relay.Constant][11] /* ty=Tensor[(2240), uint16] */, meta[relay.Constant][12] /* ty=Tensor[(512), float32] */, meta[relay.Constant][13] /* ty=Tensor[(840), float32] */, %161, %var_6388, %162, %163, %164, meta[relay.Constant][14] /* ty=Tensor[(576), int32] */, %165, %166, %167, %168, %var_6449)
}

def @func_4018() -> Tensor[(5, 15, 12), float64] {
  %169 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %169.0
}

def @func_5083() -> (Tensor[(7, 9, 6), float64],) {
  %170 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 6), float64] */;
  %171 = cosh(%170) /* ty=Tensor[(7, 9, 6), float64] */;
  (%171,)
}

def @func_6083() -> Tensor[(5, 15, 12), float64] {
  @func_3249() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_7361() -> (Tensor[(5, 15, 12), float64], Tensor[(8, 7, 15), float32], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float32]) {
  %172 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
  %173 = @func_6288() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(7, 9, 6), float64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 16, 4), float32]) */;
  %174 = %173.4;
  %175 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 16, 4), float32] */, dtype="int16") /* ty=Tensor[(8, 16, 4), int16] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="int16") /* ty=Tensor[(8, 16, 4), int16] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %179 = maximum(%177, %178) /* ty=Tensor[(8, 16, 4), int16] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %181 = log10(%180) /* ty=Tensor[(8, 16, 4), float32] */;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(8, 16, 4), float64] */;
  %183 = cast(%181, dtype="float64") /* ty=Tensor[(8, 16, 4), float64] */;
  %184 = cast(%181, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %185 = %172.0;
  %186 = @func_6010() /* ty=Tensor[(8, 7, 15), float32] */;
  %187 = sin(%182) /* ty=Tensor[(8, 16, 4), float64] */;
  %188 = asin(%183) /* ty=Tensor[(8, 16, 4), float64] */;
  %189 = exp(%184) /* ty=Tensor[(8, 16, 4), float32] */;
  (%185, %186, %187, %188, %189)
}

def @func_5998() -> (Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) {
  %190 = cast(meta[relay.Constant][17] /* ty=Tensor[(2304), uint32] */, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
  %191 = cast(meta[relay.Constant][17] /* ty=Tensor[(2304), uint32] */, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
  %192 = reshape(%190, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
  %193 = reshape(%191, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
  %194 = @func_1225(%192, %193) /* ty=(Tensor[(9, 16, 16), uint32],) */;
  %195 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %196 = %194.0;
  (%195, %196, meta[relay.Constant][17] /* ty=Tensor[(2304), uint32] */)
}

def @func_5053(%var_5033: Tensor[(9, 2, 7), float64], %var_5034: Tensor[(9, 2, 7), float64], %var_5039: Tensor[(495), float32]) -> (Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) {
  %197 = cast(%var_5034, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
  %198 = shape_of(%var_5033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_5033, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %201 = cast(%var_5039, dtype="float32") /* ty=Tensor[(495), float32] */;
  %202 = reshape(%201, newshape=[11, 9, 5]) /* ty=Tensor[(11, 9, 5), float32] */;
  %203 = mod(%199, %200) /* ty=Tensor[(9, 2, 7), float64] */;
  %204 = @func_2479(%202) /* ty=Tensor[(11, 9, 5), float32] */;
  %205 = @func_4310() /* ty=Tensor[(5, 15, 12), float64] */;
  (%203, %204, %var_5039, %205)
}

def @func_4310() -> Tensor[(5, 15, 12), float64] {
  %206 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %206.0
}

def @func_3640() -> Tensor[(5, 15, 12), float64] {
  %207 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  log(%208) /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_6618(%var_6599: Tensor[(3, 4, 6), int64]) -> Tensor[(3, 4, 6), int64] {
  %209 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 4, 6), int64] */, dtype="int64") /* ty=Tensor[(3, 4, 6), int64] */;
  %210 = shape_of(%var_6599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_6599, dtype="int64") /* ty=Tensor[(3, 4, 6), int64] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%211, %212) /* ty=Tensor[(3, 4, 6), int64] */
}

def @func_7022() -> Tensor[(5, 15, 12), float32] {
  %213 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %213.0
}

def @func_7457() -> Tensor[(2, 5, 12), uint64] {
  %214 = @func_6761() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) */;
  %215 = %214.2;
  %216 = @func_6761() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) */;
  %217 = %216.2;
  %218 = cast(%217, dtype="uint64") /* ty=Tensor[(2, 5, 12), uint64] */;
  %219 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%215, dtype="uint64") /* ty=Tensor[(2, 5, 12), uint64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%220, %221) /* ty=Tensor[(2, 5, 12), uint64] */
}

def @func_6309() -> (Tensor[(5, 15, 12), float32],) {
  %222 = @func_6175() /* ty=Tensor[(5, 15, 12), float32] */;
  (%222,)
}

def @func_3936(%var_3923: Tensor[(52), uint8], %var_3924: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %223 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %224 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %225 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %226 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %227 = reshape(%224, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %228 = reshape(%225, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %229 = reshape(%226, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %230 = @func_1071(%227, %228, %229) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %231 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %232 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %233 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 495), float32] */, dtype="float32") /* ty=Tensor[(1, 495), float32] */;
  %234 = reshape(%233, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %235 = @func_3748(%234) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %236 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %237 = asinh(%236) /* ty=Tensor[(512), float32] */;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(512), float32] */;
  %239 = sqrt(%238) /* ty=Tensor[(512), float32] */;
  %240 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %241 = shape_of(%237, dtype="int32") /* ty=Tensor[(1), int32] */;
  %242 = cast(%237, dtype="float32") /* ty=Tensor[(512), float32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?), float32] */;
  %244 = power(%242, %243) /* ty=Tensor[(512), float32] */;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(512), float32] */;
  %246 = shape_of(%239, dtype="int32") /* ty=Tensor[(1), int32] */;
  %247 = cast(%239, dtype="float32") /* ty=Tensor[(512), float32] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?), float32] */;
  %249 = floor_divide(%247, %248) /* ty=Tensor[(512), float32] */;
  %250 = cast(%239, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(1), int32] */;
  %252 = cast(%249, dtype="uint8") /* ty=Tensor[(512), uint8] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %254 = cast(%244, dtype="bool") /* ty=Tensor[(512), bool] */;
  %255 = shape_of(%249, dtype="int32") /* ty=Tensor[(1), int32] */;
  %256 = cast(%249, dtype="bool") /* ty=Tensor[(512), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?), bool] */;
  %258 = less(%256, %257) /* ty=Tensor[(512), bool] */;
  %259 = cast(%239, dtype="float32") /* ty=Tensor[(512), float32] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(1), int32] */;
  %261 = cast(%258, dtype="float32") /* ty=Tensor[(512), float32] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?), float32] */;
  %263 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %264 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 495), float32] */, dtype="float32") /* ty=Tensor[(1, 495), float32] */;
  %265 = cast(%var_3923, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %266 = cast(%var_3924, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %267 = reshape(%264, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %268 = reshape(%265, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %269 = reshape(%266, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %270 = @func_3803(%267, %268, %269) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %271 = %223.0;
  %272 = %230.2;
  %273 = %231.2;
  %274 = acosh(%232) /* ty=Tensor[(840), float64] */;
  %275 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
  %276 = %235.0;
  %277 = subtract(%252, %253) /* ty=Tensor[(512), uint8] */;
  %278 = divide(%261, %262) /* ty=Tensor[(512), float32] */;
  %279 = %263.0;
  %280 = %270.2;
  (%271, %272, %273, %274, %275, %276, meta[relay.Constant][21] /* ty=Tensor[(1, 495), float32] */, %277, %278, %279, %280, %var_3923, %var_3924)
}

def @func_7259() -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32]) {
  %281 = @func_4567() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %282 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
  %283 = %281.0;
  %284 = %282.2;
  (%283, %284)
}

def @func_3051(%var_3028: Tensor[(5, 15, 4), float32], %var_3048: Tensor[(50), int16]) -> (Tensor[(5, 15, 4), float32], Tensor[(10, 1, 5), bool], Tensor[(50), int16], Tensor[(840), float32]) {
  %285 = cast(%var_3028, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %286 = cast(%var_3048, dtype="int16") /* ty=Tensor[(50), int16] */;
  %287 = cast(meta[relay.Constant][22] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %288 = reshape(%286, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), int16] */;
  %289 = reshape(%287, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %290 = @func_2823(%288, %289) /* ty=(Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) */;
  %291 = cos(%285) /* ty=Tensor[(5, 15, 4), float32] */;
  %292 = %290.5;
  (%291, %292, %var_3048, meta[relay.Constant][22] /* ty=Tensor[(840), float32] */)
}

def @func_3589() -> (Tensor[(5, 15, 12), float64],) {
  %293 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  (%293,)
}

def @func_3748(%var_3738: Tensor[(495), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) {
  %294 = cast(%var_3738, dtype="float32") /* ty=Tensor[(495), float32] */;
  %295 = reshape(%294, newshape=[11, 9, 5]) /* ty=Tensor[(11, 9, 5), float32] */;
  %296 = @func_2479(%295) /* ty=Tensor[(11, 9, 5), float32] */;
  %297 = cast(%296, dtype="int16") /* ty=Tensor[(11, 9, 5), int16] */;
  %298 = shape_of(%var_3738, dtype="int32") /* ty=Tensor[(1), int32] */;
  %299 = cast(%var_3738, dtype="int16") /* ty=Tensor[(495), int16] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?), int16] */;
  %301 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
  %302 = @func_3640() /* ty=Tensor[(5, 15, 12), float64] */;
  %303 = left_shift(%299, %300) /* ty=Tensor[(495), int16] */;
  (%301, %302, %303)
}

def @func_3492(%var_3486: Tensor[(4, 1, 13), uint8], %var_3487: Tensor[(4, 2, 13), uint8]) -> Tensor[(4, 2, 13), uint8] {
  %304 = cast(%var_3486, dtype="uint8") /* ty=Tensor[(4, 1, 13), uint8] */;
  %305 = cast(%var_3487, dtype="uint8") /* ty=Tensor[(4, 2, 13), uint8] */;
  left_shift(%304, %305) /* ty=Tensor[(4, 2, 13), uint8] */
}

def @func_1192(%var_1181: Tensor[(5, 6, 4), float32], %var_1182: Tensor[(5, 6, 4), float32], %var_1190: Tensor[(840), float32]) -> (Tensor[(5, 6, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) {
  %306 = cast(%var_1182, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %307 = shape_of(%var_1181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%var_1181, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %310 = cast(%var_1190, dtype="float32") /* ty=Tensor[(840), float32] */;
  %311 = reshape(%310, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %312 = floor_mod(%308, %309) /* ty=Tensor[(5, 6, 4), float32] */;
  %313 = @func_718(%311) /* ty=Tensor[(8, 7, 15), float32] */;
  (%312, %313, %var_1190)
}

def @func_3564() -> (Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) {
  %314 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %316 = cast(%314, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %317 = tan(%316) /* ty=Tensor[(5, 15, 12), float64] */;
  %318 = cast(%314, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %322 = cast(meta[relay.Constant][23] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %323 = reshape(%322, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %324 = atanh(%315) /* ty=Tensor[(5, 15, 12), float32] */;
  %325 = logical_xor(%320, %321) /* ty=Tensor[(5, 15, 12), uint32] */;
  %326 = @func_718(%323) /* ty=Tensor[(8, 7, 15), float32] */;
  (%324, %325, %326, meta[relay.Constant][23] /* ty=Tensor[(840), float32] */)
}

def @func_3992(%var_3949: Tensor[(10, 14, 16), uint16], %var_3950: Tensor[(10, 14, 16), uint16]) -> (Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) {
  %327 = cast(%var_3950, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %328 = shape_of(%var_3949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%var_3949, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %331 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %332 = cast(%var_3949, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %333 = log(%332) /* ty=Tensor[(10, 14, 16), float64] */;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
  %335 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %336 = bitwise_xor(%329, %330) /* ty=Tensor[(10, 14, 16), uint16] */;
  %337 = %331.0;
  %338 = exp(%334) /* ty=Tensor[(10, 14, 16), float32] */;
  %339 = %335.0;
  (%336, %337, %338, %339)
}

def @func_4791() -> (Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float32]) {
  %340 = @func_4606() /* ty=Tensor[(5, 15, 12), float32] */;
  %341 = @func_4338() /* ty=Tensor[(5, 15, 12), float32] */;
  (%340, %341)
}

def @func_3803(%var_3776: Tensor[(495), float32], %var_3780: Tensor[(52), uint8], %var_3781: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %342 = cast(%var_3776, dtype="float32") /* ty=Tensor[(495), float32] */;
  %343 = reshape(%342, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %344 = @func_3748(%343) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %345 = cast(%var_3780, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %346 = cast(%var_3781, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %347 = reshape(%345, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %348 = reshape(%346, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %349 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %350 = %344.2;
  %351 = @func_3492(%347, %348) /* ty=Tensor[(4, 2, 13), uint8] */;
  (%349, %350, %var_3776, %351, %var_3780, %var_3781)
}

def @func_4351() -> (Tensor[(5, 15, 12), float32],) {
  %352 = @func_4338() /* ty=Tensor[(5, 15, 12), float32] */;
  (%352,)
}

def @func_5957(%var_5901: Tensor[(1470), uint8], %var_5912: Tensor[(1470), uint8]) -> (Tensor[(1470), bool], Tensor[(1470), int64], Tensor[(5, 15, 12), float64]) {
  %353 = @func_4960() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) */;
  %354 = %353.1;
  %355 = cast(%var_5901, dtype="uint16") /* ty=Tensor[(1470), uint16] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(1), int32] */;
  %357 = cast(%354, dtype="uint16") /* ty=Tensor[(1470), uint16] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %359 = bitwise_xor(%357, %358) /* ty=Tensor[(1470), uint16] */;
  %360 = cast(%359, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %361 = shape_of(%354, dtype="int32") /* ty=Tensor[(1), int32] */;
  %362 = cast(%354, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?), bool] */;
  %364 = cast(%var_5912, dtype="int64") /* ty=Tensor[(1470), int64] */;
  %365 = shape_of(%354, dtype="int32") /* ty=Tensor[(1), int32] */;
  %366 = cast(%354, dtype="int64") /* ty=Tensor[(1470), int64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?), int64] */;
  %368 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
  %369 = greater_equal(%362, %363) /* ty=Tensor[(1470), bool] */;
  %370 = right_shift(%366, %367) /* ty=Tensor[(1470), int64] */;
  %371 = %368.1;
  (%369, %370, %371)
}

def @func_5536() -> (Tensor[(5, 15, 12), float64],) {
  %372 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  (%372,)
}

def @func_5185(%var_5172: Tensor[(126), float64], %var_5173: Tensor[(495), float32]) -> (Tensor[(5, 15, 12), float32], Tensor[(9, 2, 7), float64], Tensor[(126), float64], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) {
  %373 = cast(%var_5172, dtype="float64") /* ty=Tensor[(126), float64] */;
  %374 = cast(%var_5172, dtype="float64") /* ty=Tensor[(126), float64] */;
  %375 = cast(%var_5173, dtype="float32") /* ty=Tensor[(495), float32] */;
  %376 = reshape(%373, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
  %377 = reshape(%374, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
  %378 = reshape(%375, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %379 = @func_5053(%376, %377, %378) /* ty=(Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */;
  %380 = cast(%var_5172, dtype="float64") /* ty=Tensor[(126), float64] */;
  %381 = %379.0;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
  %383 = cast(%var_5173, dtype="float32") /* ty=Tensor[(495), float32] */;
  %384 = reshape(%380, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
  %385 = reshape(%382, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
  %386 = reshape(%383, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %387 = @func_5053(%384, %385, %386) /* ty=(Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */;
  %388 = @func_4890() /* ty=Tensor[(5, 15, 12), float32] */;
  %389 = %387.3;
  (%388, %381, %var_5172, %var_5173, %389)
}

def @func_4263(%var_4261: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) {
  %390 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %392 = cast(%390, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %393 = cast(meta[relay.Constant][24] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %394 = cast(%var_4261, dtype="float32") /* ty=Tensor[(840), float32] */;
  %395 = reshape(%391, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %396 = reshape(%392, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %397 = reshape(%393, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %398 = reshape(%394, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %399 = @func_4212(%395, %396, %397, %398) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %400 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
  %401 = %399.7;
  (%390, %400, %401, meta[relay.Constant][24] /* ty=Tensor[(512), float32] */, %var_4261)
}

def @func_5514() -> (Tensor[(5, 15, 12), float64],) {
  %402 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  (%402,)
}

def @func_6117() -> Tensor[(8, 7, 15), float32] {
  %403 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %403.2
}

def @func_6175() -> Tensor[(5, 15, 12), float32] {
  @func_5611() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_6822(%var_6806: Tensor[(840), float32], %var_6812: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %404 = @func_6309() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %405 = cast(%var_6806, dtype="float32") /* ty=Tensor[(840), float32] */;
  %406 = reshape(%405, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %407 = cast(meta[relay.Constant][25] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %408 = cast(%var_6812, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %409 = reshape(%407, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %410 = reshape(%408, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %411 = %404.0;
  %412 = @func_718(%406) /* ty=Tensor[(8, 7, 15), float32] */;
  %413 = @func_3492(%409, %410) /* ty=Tensor[(4, 2, 13), uint8] */;
  (%411, %412, %var_6806, %413, meta[relay.Constant][25] /* ty=Tensor[(52), uint8] */, %var_6812)
}

def @func_5665() -> (Tensor[(5, 15, 12), float64],) {
  %414 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  (%414,)
}

def @func_4077(%var_4041: Tensor[(5, 15, 12), float64], %var_4047: Tensor[(495), float32], %var_4054: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52, 2), uint8], Tensor[(52), float32]) {
  %415 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %416 = cast(%var_4041, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = cast(%var_4047, dtype="float32") /* ty=Tensor[(495), float32] */;
  %421 = reshape(%420, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %422 = @func_3748(%421) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %423 = cast(meta[relay.Constant][26] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %424 = cast(%var_4054, dtype="float32") /* ty=Tensor[(840), float32] */;
  %425 = cast(meta[relay.Constant][26] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %426 = reshape(%423, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %427 = reshape(%424, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %428 = reshape(%425, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %429 = @func_1071(%426, %427, %428) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %430 = cast(meta[relay.Constant][27] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %431 = cast(meta[relay.Constant][28] /* ty=Tensor[(52, 2), uint8] */, dtype="uint8") /* ty=Tensor[(52, 2), uint8] */;
  %432 = reshape(%430, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %433 = reshape(%431, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %434 = cast(meta[relay.Constant][29] /* ty=Tensor[(52), uint8] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %435 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(52), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(52), uint8] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?), float32] */;
  %438 = greater(%418, %419) /* ty=Tensor[(5, 15, 12), bool] */;
  %439 = %422.0;
  %440 = %429.0;
  %441 = @func_3492(%432, %433) /* ty=Tensor[(4, 2, 13), uint8] */;
  %442 = minimum(%436, %437) /* ty=Tensor[(52), float32] */;
  (%438, %439, %var_4047, %440, meta[relay.Constant][26] /* ty=Tensor[(512), float32] */, %var_4054, %441, meta[relay.Constant][28] /* ty=Tensor[(52, 2), uint8] */, %442)
}

def @func_6982() -> Tensor[(5, 15, 12), float64] {
  %443 = @func_4913() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %443.0
}

def @func_4845() -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) {
  %444 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %445 = cast(meta[relay.Constant][30] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %446 = reshape(%445, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %447 = @func_3748(%446) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %448 = %444.0;
  %449 = %447.1;
  (%448, %449, meta[relay.Constant][30] /* ty=Tensor[(495), float32] */)
}

def @func_6897(%var_6892: Tensor[(5, 15, 12), float64]) -> Tensor[(5, 15, 12), bool] {
  %450 = @func_5998() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) */;
  %451 = %450.0;
  %452 = cast(%var_6892, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%451, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%454, %455) /* ty=Tensor[(5, 15, 12), bool] */
}

def @func_3022(%var_2975: Tensor[(14, 15, 7), uint8], %var_3017: Tensor[(1, 512), float32], %var_3018: Tensor[(840), float32]) -> (Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) {
  %456 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 15, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 15, 7), uint8] */;
  %457 = shape_of(%var_2975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_2975, dtype="uint8") /* ty=Tensor[(14, 15, 7), uint8] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %460 = cast(%var_3017, dtype="float32") /* ty=Tensor[(1, 512), float32] */;
  %461 = cast(%var_3018, dtype="float32") /* ty=Tensor[(840), float32] */;
  %462 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(1, 512), uint64] */;
  %463 = reshape(%460, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %464 = reshape(%461, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %465 = reshape(%462, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %466 = @func_1071(%463, %464, %465) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %467 = cast(%var_3017, dtype="float32") /* ty=Tensor[(1, 512), float32] */;
  %468 = %466.2;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(840), float32] */;
  %470 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(1, 512), uint64] */;
  %471 = reshape(%467, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %472 = reshape(%469, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %473 = reshape(%470, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %474 = @func_1071(%471, %472, %473) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %475 = subtract(%458, %459) /* ty=Tensor[(14, 15, 7), uint8] */;
  %476 = %474.1;
  (%475, %468, %var_3017, %var_3018, %476)
}

def @func_5143(%var_5106: Tensor[(2, 15, 12), float64]) -> (Tensor[(5, 15, 12), float32], Tensor[(2, 15, 12), float64]) {
  %477 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %478 = cast(%var_5106, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
  %479 = asin(%478) /* ty=Tensor[(2, 15, 12), float64] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
  %481 = asinh(%480) /* ty=Tensor[(2, 15, 12), float32] */;
  %482 = cast(%479, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %483 = shape_of(%var_5106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_5106, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = less_equal(%484, %485) /* ty=Tensor[(2, 15, 12), bool] */;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
  %488 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%481, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %491 = mod(%489, %490) /* ty=Tensor[(2, 15, 12), float32] */;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
  %493 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%481, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %496 = %477.0;
  %497 = floor_mod(%494, %495) /* ty=Tensor[(2, 15, 12), float64] */;
  (%496, %497)
}

def @main(%var_7470: Tensor[(13, 2, 5), bool], %var_7471: Tensor[(13, 2, 5), bool]) -> (Tensor[(13, 2, 5), bool], Tensor[(13, 2, 5), int16]) {
  %498 = cast(%var_7471, dtype="bool") /* ty=Tensor[(13, 2, 5), bool] */;
  %499 = shape_of(%var_7470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_7470, dtype="bool") /* ty=Tensor[(13, 2, 5), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = cast(%var_7470, dtype="int16") /* ty=Tensor[(13, 2, 5), int16] */;
  %503 = shape_of(%var_7471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_7471, dtype="int16") /* ty=Tensor[(13, 2, 5), int16] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %506 = logical_or(%500, %501) /* ty=Tensor[(13, 2, 5), bool] */;
  %507 = logical_xor(%504, %505) /* ty=Tensor[(13, 2, 5), int16] */;
  (%506, %507)
}

def @func_4890() -> Tensor[(5, 15, 12), float32] {
  %508 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %508.0
}

def @func_1071(%var_1046: Tensor[(8, 16, 4), float32], %var_1057: Tensor[(840), float32], %var_1060: Tensor[(8, 16, 4), uint64]) -> (Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) {
  %509 = cast(%var_1046, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %510 = cast(%var_1057, dtype="float32") /* ty=Tensor[(840), float32] */;
  %511 = reshape(%510, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %512 = cast(%var_1046, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %513 = cosh(%512) /* ty=Tensor[(8, 16, 4), float32] */;
  %514 = cast(%var_1046, dtype="uint64") /* ty=Tensor[(8, 16, 4), uint64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="uint64") /* ty=Tensor[(8, 16, 4), uint64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %518 = logical_xor(%516, %517) /* ty=Tensor[(8, 16, 4), uint64] */;
  %519 = cast(%var_1060, dtype="bool") /* ty=Tensor[(8, 16, 4), bool] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="bool") /* ty=Tensor[(8, 16, 4), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %523 = acos(%509) /* ty=Tensor[(8, 16, 4), float32] */;
  %524 = @func_718(%511) /* ty=Tensor[(8, 7, 15), float32] */;
  %525 = not_equal(%521, %522) /* ty=Tensor[(8, 16, 4), bool] */;
  (%523, %524, %var_1057, %525)
}

def @func_6761() -> (Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) {
  %526 = @func_6309() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %527 = @func_4960() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) */;
  %528 = @func_5348() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(2, 5, 12), int32]) */;
  %529 = %526.0;
  %530 = %527.2;
  %531 = %528.1;
  (%529, %530, %531)
}

def @func_4567() -> (Tensor[(5, 15, 12), float64],) {
  %532 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  (%532,)
}

def @func_6010() -> Tensor[(8, 7, 15), float32] {
  %533 = @func_5367() /* ty=Tensor[(8, 7, 15), float32] */;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  tan(%534) /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_6733(%var_6690: Tensor[(4, 1), uint64], %var_6719: Tensor[(52), uint8], %var_6726: Tensor[(5, 15, 12), float64]) -> (Tensor[(5, 15, 12), float64], Tensor[(1, 4), uint64], uint64, Tensor[(4, 1), uint64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float64], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), uint32]) {
  %535 = @func_4913() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %536 = cast(meta[relay.Constant][32] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %537 = cast(%var_6690, dtype="uint64") /* ty=Tensor[(4, 1), uint64] */;
  %538 = reshape(%536, newshape=[]) /* ty=uint64 */;
  %539 = reshape(%537, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint64] */;
  %540 = @func_6519(%538, %539) /* ty=(Tensor[(1, 4), uint64],) */;
  %541 = cast(meta[relay.Constant][33] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %542 = reshape(%541, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %543 = @func_4263(%542) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %544 = cast(%var_6719, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %545 = cast(meta[relay.Constant][34] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %546 = reshape(%544, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %547 = reshape(%545, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %548 = @func_3936(%546, %547) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %549 = @func_5514() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %550 = %549.0;
  %551 = cast(%var_6726, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %555 = %535.0;
  %556 = %540.0;
  %557 = %543.3;
  %558 = %548.5;
  %559 = @func_6083() /* ty=Tensor[(5, 15, 12), float64] */;
  %560 = add(%553, %554) /* ty=Tensor[(5, 15, 12), uint32] */;
  (%555, %556, meta[relay.Constant][32] /* ty=uint64 */, %var_6690, %557, meta[relay.Constant][33] /* ty=Tensor[(840), float32] */, %558, %var_6719, meta[relay.Constant][34] /* ty=Tensor[(104), uint8] */, %559, %560)
}

def @func_4514(%var_4482: Tensor[(5, 15, 12), float32], %var_4501: Tensor[(1470), uint8], %var_4507: Tensor[(2240), uint16]) -> (Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) {
  %561 = cast(%var_4501, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %562 = cast(meta[relay.Constant][35] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %563 = cast(meta[relay.Constant][36] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %564 = reshape(%561, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), uint8] */;
  %565 = reshape(%562, newshape=[1, 512]) /* ty=Tensor[(1, 512), float32] */;
  %566 = reshape(%563, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %567 = @func_3022(%564, %565, %566) /* ty=(Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) */;
  %568 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
  %569 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
  %570 = reshape(%568, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
  %571 = reshape(%569, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
  %572 = @func_3992(%570, %571) /* ty=(Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) */;
  %573 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %574 = @func_4387() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %575 = %574.0;
  %576 = cast(%var_4482, dtype="int32") /* ty=Tensor[(5, 15, 12), int32] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="int32") /* ty=Tensor[(5, 15, 12), int32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %580 = maximum(%578, %579) /* ty=Tensor[(5, 15, 12), int32] */;
  %581 = cast(%580, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %582 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%573, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = %567.3;
  %586 = %572.0;
  %587 = not_equal(%583, %584) /* ty=Tensor[(5, 15, 12), bool] */;
  (%585, %var_4501, meta[relay.Constant][35] /* ty=Tensor[(512), float32] */, meta[relay.Constant][36] /* ty=Tensor[(840), float32] */, %586, %var_4507, %587)
}

def @func_5792() -> (Tensor[(5, 15, 12), float64],) {
  %588 = @func_5665() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %589 = %588.0;
  (%589,)
}

def @func_3370(%var_3332: Tensor[(2, 5, 9), float32], %var_3336: Tensor[(6, 140), float32]) -> (Tensor[(8, 7, 15), float32], Tensor[(6, 140), float32], Tensor[(5, 15, 12), float64], Tensor[(15, 6, 14), uint8], Tensor[(210), uint8], Tensor[(18, 70), uint8], Tensor[(2, 5, 9), uint16]) {
  %590 = cast(%var_3336, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %591 = reshape(%590, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %592 = cast(meta[relay.Constant][37] /* ty=Tensor[(210), uint8] */, dtype="uint8") /* ty=Tensor[(210), uint8] */;
  %593 = cast(meta[relay.Constant][38] /* ty=Tensor[(18, 70), uint8] */, dtype="uint8") /* ty=Tensor[(18, 70), uint8] */;
  %594 = reshape(%592, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint8] */;
  %595 = reshape(%593, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint8] */;
  %596 = @func_1299(%594, %595) /* ty=(Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) */;
  %597 = cast(%var_3332, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
  %598 = tan(%597) /* ty=Tensor[(2, 5, 9), float32] */;
  %599 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(2, 5, 9), uint64] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="uint64") /* ty=Tensor[(2, 5, 9), uint64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %603 = subtract(%601, %602) /* ty=Tensor[(2, 5, 9), uint64] */;
  %604 = cast(%603, dtype="uint16") /* ty=Tensor[(2, 5, 9), uint16] */;
  %605 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%598, dtype="uint16") /* ty=Tensor[(2, 5, 9), uint16] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %608 = @func_718(%591) /* ty=Tensor[(8, 7, 15), float32] */;
  %609 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %610 = %596.0;
  %611 = minimum(%606, %607) /* ty=Tensor[(2, 5, 9), uint16] */;
  (%608, %var_3336, %609, %610, meta[relay.Constant][37] /* ty=Tensor[(210), uint8] */, meta[relay.Constant][38] /* ty=Tensor[(18, 70), uint8] */, %611)
}

def @func_4387() -> (Tensor[(5, 15, 12), float32],) {
  %612 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %613 = %612.0;
  (%613,)
}

def @func_7194() -> (Tensor[(5, 15, 12), float64],) {
  %614 = @func_5031() /* ty=Tensor[(5, 15, 12), float64] */;
  (%614,)
}

def @func_5031() -> Tensor[(5, 15, 12), float64] {
  @func_4018() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_3171() -> Tensor[(5, 15, 12), float64] {
  %615 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  cosh(%615) /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_6519(%var_6494: uint64, %var_6495: Tensor[(1, 4), uint64]) -> (Tensor[(1, 4), uint64],) {
  %616 = cast(%var_6494, dtype="uint64") /* ty=uint64 */;
  %617 = cast(%var_6495, dtype="uint64") /* ty=Tensor[(1, 4), uint64] */;
  %618 = bitwise_xor(%616, %617) /* ty=Tensor[(1, 4), uint64] */;
  (%618,)
}

def @func_7001() -> (Tensor[(9, 16, 16), uint32], Tensor[(5, 15, 12), float32]) {
  %619 = @func_5998() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) */;
  %620 = @func_6855() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %621 = %619.1;
  %622 = %620.0;
  (%621, %622)
}

def @func_1225(%var_1219: Tensor[(9, 16, 16), uint32], %var_1220: Tensor[(9, 16, 16), uint32]) -> (Tensor[(9, 16, 16), uint32],) {
  %623 = cast(%var_1220, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %624 = shape_of(%var_1219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%var_1219, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %627 = bitwise_or(%625, %626) /* ty=Tensor[(9, 16, 16), uint32] */;
  (%627,)
}

def @func_4338() -> Tensor[(5, 15, 12), float32] {
  %628 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %629 = %628.1;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  asinh(%630) /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_5367() -> Tensor[(8, 7, 15), float32] {
  %631 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %632 = %631.2;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  asin(%633) /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_3285() -> (Tensor[(5, 15, 12), float32],) {
  %634 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %636 = rsqrt(%635) /* ty=Tensor[(5, 15, 12), float32] */;
  (%636,)
}

def @func_6551() -> Tensor[(5, 15, 12), float64] {
  @func_3249() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_2823(%var_2777: Tensor[(10, 1, 5), int16], %var_2786: Tensor[(840), float32]) -> (Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) {
  %637 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %638 = cast(%var_2777, dtype="bool") /* ty=Tensor[(10, 1, 5), bool] */;
  %639 = cast(meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %640 = cast(%var_2786, dtype="float32") /* ty=Tensor[(840), float32] */;
  %641 = cast(meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %642 = reshape(%639, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %643 = reshape(%640, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %644 = reshape(%641, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %645 = @func_1071(%642, %643, %644) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %646 = cast(%var_2786, dtype="float32") /* ty=Tensor[(840), float32] */;
  %647 = reshape(%646, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %648 = cast(%var_2777, dtype="bool") /* ty=Tensor[(10, 1, 5), bool] */;
  %649 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %650 = less_equal(%637, %638) /* ty=Tensor[(10, 1, 5), bool] */;
  %651 = %645.0;
  %652 = @func_718(%647) /* ty=Tensor[(8, 7, 15), float32] */;
  %653 = not_equal(%648, %649) /* ty=Tensor[(10, 1, 5), bool] */;
  (%650, %651, meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, %var_2786, %652, %653)
}

def @func_7122() -> Tensor[(5, 15, 12), float32] {
  @func_4890() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_5611() -> Tensor[(5, 15, 12), float32] {
  %654 = @func_4387() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %654.0
}

def @func_3249() -> Tensor[(5, 15, 12), float64] {
  %655 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  asin(%656) /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_5476(%var_5440: Tensor[(2304), uint32], %var_5465: Tensor[(5, 15, 12), float64]) -> (Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32], Tensor[(5, 15, 12), int8]) {
  %657 = cast(%var_5440, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
  %658 = cast(%var_5440, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
  %659 = reshape(%657, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
  %660 = reshape(%658, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
  %661 = @func_1225(%659, %660) /* ty=(Tensor[(9, 16, 16), uint32],) */;
  %662 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
  %663 = %662.0;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %665 = exp(%664) /* ty=Tensor[(5, 15, 12), float64] */;
  %666 = cast(%var_5465, dtype="int8") /* ty=Tensor[(5, 15, 12), int8] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="int8") /* ty=Tensor[(5, 15, 12), int8] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %670 = %661.0;
  %671 = bitwise_or(%668, %669) /* ty=Tensor[(5, 15, 12), int8] */;
  (%670, %var_5440, %671)
}

def @func_5348() -> (Tensor[(5, 15, 12), float64], Tensor[(2, 5, 12), int32]) {
  %672 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 12), float32] */;
  %673 = atan(%672) /* ty=Tensor[(2, 5, 12), float32] */;
  %674 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 5, 12), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 12), int32] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="int32") /* ty=Tensor[(2, 5, 12), int32] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %678 = @func_3640() /* ty=Tensor[(5, 15, 12), float64] */;
  %679 = bitwise_or(%676, %677) /* ty=Tensor[(2, 5, 12), int32] */;
  (%678, %679)
}

def @func_5766(%var_5704: Tensor[(490, 3), uint8], %var_5713: Tensor[(840), float32], %var_5750: Tensor[(490, 3), float32], %var_5754: Tensor[(490, 3), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(50, 1), int16], Tensor[(840), float32], Tensor[(10, 2240, 5), int8], Tensor[(490, 3), float32], Tensor[(490, 3), int32]) {
  %680 = @func_5031() /* ty=Tensor[(5, 15, 12), float64] */;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %682 = cast(%var_5704, dtype="uint8") /* ty=Tensor[(490, 3), uint8] */;
  %683 = cast(meta[relay.Constant][43] /* ty=Tensor[(2240, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2240, 1), uint16] */;
  %684 = reshape(%681, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %685 = reshape(%682, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %686 = reshape(%683, newshape=[2240]) /* ty=Tensor[(2240), uint16] */;
  %687 = @func_4514(%684, %685, %686) /* ty=(Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) */;
  %688 = cast(meta[relay.Constant][44] /* ty=Tensor[(50, 1), int16] */, dtype="int16") /* ty=Tensor[(50, 1), int16] */;
  %689 = cast(%var_5713, dtype="float32") /* ty=Tensor[(840), float32] */;
  %690 = reshape(%688, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), int16] */;
  %691 = reshape(%689, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %692 = @func_2823(%690, %691) /* ty=(Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) */;
  %693 = %692.0;
  %694 = cast(meta[relay.Constant][43] /* ty=Tensor[(2240, 1), uint16] */, dtype="int8") /* ty=Tensor[(2240, 1), int8] */;
  %695 = cast(%693, dtype="int8") /* ty=Tensor[(10, 1, 5), int8] */;
  %696 = cast(%var_5704, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
  %697 = erf(%696) /* ty=Tensor[(490, 3), float32] */;
  %698 = cast(%var_5750, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(2), int32] */;
  %700 = cast(%697, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %702 = cast(%var_5754, dtype="int32") /* ty=Tensor[(490, 3), int32] */;
  %703 = shape_of(%697, dtype="int32") /* ty=Tensor[(2), int32] */;
  %704 = cast(%697, dtype="int32") /* ty=Tensor[(490, 3), int32] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %706 = %687.1;
  %707 = bitwise_or(%694, %695) /* ty=Tensor[(10, 2240, 5), int8] */;
  %708 = subtract(%700, %701) /* ty=Tensor[(490, 3), float32] */;
  %709 = bitwise_and(%704, %705) /* ty=Tensor[(490, 3), int32] */;
  (%680, %706, meta[relay.Constant][44] /* ty=Tensor[(50, 1), int16] */, %var_5713, %707, %708, %709)
}

def @func_4434(%var_4414: Tensor[(840), float32], %var_4421: Tensor[(52), uint8], %var_4422: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %710 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %711 = %710.0;
  %712 = cast(%711, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %713 = cast(%711, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %714 = cast(meta[relay.Constant][45] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %715 = cast(%var_4414, dtype="float32") /* ty=Tensor[(840), float32] */;
  %716 = reshape(%712, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %717 = reshape(%713, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %718 = reshape(%714, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %719 = reshape(%715, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %720 = @func_4212(%716, %717, %718, %719) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %721 = cast(%var_4421, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %722 = cast(%var_4422, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %723 = reshape(%721, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %724 = reshape(%722, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %725 = @func_3936(%723, %724) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %726 = %720.2;
  %727 = %725.2;
  (%711, %726, meta[relay.Constant][45] /* ty=Tensor[(512), float32] */, %var_4414, %727, %var_4421, %var_4422)
}

def @func_4606() -> Tensor[(5, 15, 12), float32] {
  %728 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %728.0
}

def @func_5274(%var_5193: Tensor[(4, 15, 5), uint16], %var_5194: Tensor[(4, 15, 5), uint16], %var_5206: Tensor[(4, 15, 5), uint16], %var_5257: Tensor[(64, 8), float32], %var_5258: Tensor[(840), float32], %var_5266: Tensor[(104), uint8], %var_5271: Tensor[(1470), uint8], %var_5272: Tensor[(2240), uint16]) -> (Tensor[(4, 15, 5), uint8], Tensor[(5, 15, 12), float32], Tensor[(4, 15, 5), float64], Tensor[(5, 15, 12), float64], Tensor[(8, 16, 4), float32], Tensor[(64, 8), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(26, 2), uint8], Tensor[(104), uint8], Tensor[(2240), uint16], Tensor[(1470), uint8], Tensor[(2240), uint16]) {
  %729 = cast(%var_5206, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
  %730 = shape_of(%var_5194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_5194, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %733 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %734 = cast(%var_5194, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
  %735 = shape_of(%var_5193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_5193, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %738 = maximum(%736, %737) /* ty=Tensor[(4, 15, 5), uint16] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %740 = cast(%var_5257, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %741 = cast(%var_5258, dtype="float32") /* ty=Tensor[(840), float32] */;
  %742 = cast(%var_5257, dtype="uint64") /* ty=Tensor[(64, 8), uint64] */;
  %743 = reshape(%740, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %744 = reshape(%741, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %745 = reshape(%742, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %746 = @func_1071(%743, %744, %745) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %747 = cast(meta[relay.Constant][46] /* ty=Tensor[(26, 2), uint8] */, dtype="uint8") /* ty=Tensor[(26, 2), uint8] */;
  %748 = cast(%var_5266, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %749 = reshape(%747, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %750 = reshape(%748, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %751 = %733.0;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %753 = cast(%var_5271, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %754 = cast(%var_5272, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
  %755 = reshape(%752, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %756 = reshape(%753, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %757 = reshape(%754, newshape=[2240]) /* ty=Tensor[(2240), uint16] */;
  %758 = @func_4514(%755, %756, %757) /* ty=(Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) */;
  %759 = add(%731, %732) /* ty=Tensor[(4, 15, 5), uint8] */;
  %760 = sin(%739) /* ty=Tensor[(4, 15, 5), float64] */;
  %761 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %762 = %746.0;
  %763 = @func_3492(%749, %750) /* ty=Tensor[(4, 2, 13), uint8] */;
  %764 = %758.5;
  (%759, %751, %760, %761, %762, %var_5257, %var_5258, %763, meta[relay.Constant][46] /* ty=Tensor[(26, 2), uint8] */, %var_5266, %764, %var_5271, %var_5272)
}

def @func_6144(%var_6122: Tensor[(5, 15, 12), float64]) -> (Tensor[(5, 15, 12), uint64], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(495), float32], Tensor[(126), float64]) {
  %765 = @func_5536() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %766 = %765.0;
  %767 = cast(%var_6122, dtype="uint64") /* ty=Tensor[(5, 15, 12), uint64] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="uint64") /* ty=Tensor[(5, 15, 12), uint64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %771 = cast(meta[relay.Constant][47] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %772 = reshape(%771, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %773 = @func_3748(%772) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %774 = cast(meta[relay.Constant][48] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %775 = cast(meta[relay.Constant][48] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %776 = cast(meta[relay.Constant][47] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %777 = reshape(%774, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
  %778 = reshape(%775, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
  %779 = reshape(%776, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %780 = @func_5053(%777, %778, %779) /* ty=(Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */;
  %781 = left_shift(%769, %770) /* ty=Tensor[(5, 15, 12), uint64] */;
  %782 = %773.1;
  %783 = %780.2;
  (%781, %782, meta[relay.Constant][47] /* ty=Tensor[(495), float32] */, %783, meta[relay.Constant][48] /* ty=Tensor[(126), float64] */)
}

def @func_7422() -> Tensor[(8, 7, 15), float32] {
  %784 = @func_7361() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(8, 7, 15), float32], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float32]) */;
  %784.1
}

def @func_4913() -> (Tensor[(5, 15, 12), float64],) {
  %785 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  (%785,)
}

def @func_1645(%var_1642: Tensor[(1, 11, 16), float32]) -> Tensor[(1, 11, 16), float32] {
  %786 = cast(%var_1642, dtype="float32") /* ty=Tensor[(1, 11, 16), float32] */;
  asinh(%786) /* ty=Tensor[(1, 11, 16), float32] */
}

def @func_7107(%var_7072: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(840), float32], Tensor[(52), uint8], Tensor[(104), int32]) {
  %787 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %788 = cast(meta[relay.Constant][49] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %789 = cast(meta[relay.Constant][50] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %790 = cast(meta[relay.Constant][51] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %791 = reshape(%788, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %792 = reshape(%789, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %793 = reshape(%790, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %794 = @func_4434(%791, %792, %793) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %795 = cast(%var_7072, dtype="int32") /* ty=Tensor[(104), int32] */;
  %796 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(104), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %797 = cast(meta[relay.Constant][51] /* ty=Tensor[(104), uint8] */, dtype="int32") /* ty=Tensor[(104), int32] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), int32] */;
  %799 = %787.0;
  %800 = %794.1;
  %801 = multiply(%797, %798) /* ty=Tensor[(104), int32] */;
  (%799, %800, meta[relay.Constant][49] /* ty=Tensor[(840), float32] */, meta[relay.Constant][50] /* ty=Tensor[(52), uint8] */, %801)
}

def @func_6288() -> (Tensor[(5, 15, 12), float64], Tensor[(7, 9, 6), float64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 16, 4), float32]) {
  %802 = @func_4960() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) */;
  %803 = @func_5083() /* ty=(Tensor[(7, 9, 6), float64],) */;
  %804 = cast(meta[relay.Constant][52] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %805 = cast(meta[relay.Constant][53] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %806 = cast(meta[relay.Constant][52] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %807 = reshape(%804, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %808 = reshape(%805, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %809 = reshape(%806, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %810 = @func_1071(%807, %808, %809) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %811 = %810.0;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %813 = %802.0;
  %814 = %803.0;
  %815 = log2(%812) /* ty=Tensor[(8, 16, 4), float32] */;
  (%813, %814, meta[relay.Constant][52] /* ty=Tensor[(512), float32] */, meta[relay.Constant][53] /* ty=Tensor[(840), float32] */, %815)
}

def @func_3409(%var_3399: Tensor[(6, 4, 9), bool]) -> (Tensor[(6, 4, 9), bool],) {
  %816 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 4, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %817 = shape_of(%var_3399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%var_3399, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %820 = logical_and(%818, %819) /* ty=Tensor[(6, 4, 9), bool] */;
  (%820,)
}

def @func_6594(%var_6572: Tensor[(7, 14, 6), float64]) -> (Tensor[(5, 15, 12), float64], Tensor[(7, 14, 6), int16]) {
  %821 = cast(%var_6572, dtype="float64") /* ty=Tensor[(7, 14, 6), float64] */;
  %822 = cosh(%821) /* ty=Tensor[(7, 14, 6), float64] */;
  %823 = cast(%var_6572, dtype="int16") /* ty=Tensor[(7, 14, 6), int16] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="int16") /* ty=Tensor[(7, 14, 6), int16] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %827 = @func_5031() /* ty=Tensor[(5, 15, 12), float64] */;
  %828 = left_shift(%825, %826) /* ty=Tensor[(7, 14, 6), int16] */;
  (%827, %828)
}

def @func_1299(%var_1290: Tensor[(15, 1, 14), uint8], %var_1291: Tensor[(15, 6, 14), uint8]) -> (Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) {
  %829 = cast(%var_1290, dtype="uint8") /* ty=Tensor[(15, 1, 14), uint8] */;
  %830 = cast(%var_1291, dtype="uint8") /* ty=Tensor[(15, 6, 14), uint8] */;
  %831 = cast(%var_1290, dtype="float32") /* ty=Tensor[(15, 1, 14), float32] */;
  %832 = right_shift(%829, %830) /* ty=Tensor[(15, 6, 14), uint8] */;
  %833 = asinh(%831) /* ty=Tensor[(15, 1, 14), float32] */;
  (%832, %833)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1229(%var_1227: Tensor[(9, 16, 16), uint32], %var_1228: Tensor[(9, 16, 16), uint32]) -> (Tensor[(9, 16, 16), uint32],) {
  @func_1225(%var_1227, %var_1228) /* ty=(Tensor[(9, 16, 16), uint32],) */
}

def @func_3748(%var_3738: Tensor[(495), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) {
  %0 = cast(%var_3738, dtype="float32") /* ty=Tensor[(495), float32] */;
  %1 = reshape(%0, newshape=[11, 9, 5]) /* ty=Tensor[(11, 9, 5), float32] */;
  %2 = @func_2479(%1) /* ty=Tensor[(11, 9, 5), float32] */;
  %3 = cast(%2, dtype="int16") /* ty=Tensor[(11, 9, 5), int16] */;
  %4 = shape_of(%var_3738, dtype="int32") /* ty=Tensor[(1), int32] */;
  %5 = cast(%var_3738, dtype="int16") /* ty=Tensor[(495), int16] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?), int16] */;
  %7 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
  %8 = @func_3640() /* ty=Tensor[(5, 15, 12), float64] */;
  %9 = left_shift(%5, %6) /* ty=Tensor[(495), int16] */;
  (%7, %8, %9)
}

def @func_5032() -> Tensor[(5, 15, 12), float64] {
  %10 = fn () -> Tensor[(5, 15, 12), float64] {
    @func_4018() /* ty=Tensor[(5, 15, 12), float64] */
  };
  %10() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_3495(%var_3493: Tensor[(4, 1, 13), uint8], %var_3494: Tensor[(4, 2, 13), uint8]) -> Tensor[(4, 2, 13), uint8] {
  %13 = fn (%var_3486: Tensor[(4, 1, 13), uint8], %var_3487: Tensor[(4, 2, 13), uint8]) -> Tensor[(4, 2, 13), uint8] {
    %11 = cast(%var_3486, dtype="uint8") /* ty=Tensor[(4, 1, 13), uint8] */;
    %12 = cast(%var_3487, dtype="uint8") /* ty=Tensor[(4, 2, 13), uint8] */;
    left_shift(%11, %12) /* ty=Tensor[(4, 2, 13), uint8] */
  };
  %13(%var_3493, %var_3494) /* ty=Tensor[(4, 2, 13), uint8] */
}

def @func_3751(%var_3749: Tensor[(495), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) {
  @func_3748(%var_3749) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */
}

def @func_5369() -> Tensor[(8, 7, 15), float32] {
  @func_5367() /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_7457() -> Tensor[(2, 5, 12), uint64] {
  %14 = @func_6761() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) */;
  %15 = %14.2;
  %16 = @func_6761() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) */;
  %17 = %16.2;
  %18 = cast(%17, dtype="uint64") /* ty=Tensor[(2, 5, 12), uint64] */;
  %19 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%15, dtype="uint64") /* ty=Tensor[(2, 5, 12), uint64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%20, %21) /* ty=Tensor[(2, 5, 12), uint64] */
}

def @func_5771(%var_5767: Tensor[(490, 3), uint8], %var_5768: Tensor[(840), float32], %var_5769: Tensor[(490, 3), float32], %var_5770: Tensor[(490, 3), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(50, 1), int16], Tensor[(840), float32], Tensor[(10, 2240, 5), int8], Tensor[(490, 3), float32], Tensor[(490, 3), int32]) {
  %52 = fn (%var_5704: Tensor[(490, 3), uint8], %var_5713: Tensor[(840), float32], %var_5750: Tensor[(490, 3), float32], %var_5754: Tensor[(490, 3), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(50, 1), int16], Tensor[(840), float32], Tensor[(10, 2240, 5), int8], Tensor[(490, 3), float32], Tensor[(490, 3), int32]) {
    %22 = @func_5031() /* ty=Tensor[(5, 15, 12), float64] */;
    %23 = cast(%22, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
    %24 = cast(%var_5704, dtype="uint8") /* ty=Tensor[(490, 3), uint8] */;
    %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(2240, 1), uint16] */, dtype="uint16") /* ty=Tensor[(2240, 1), uint16] */;
    %26 = reshape(%23, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
    %27 = reshape(%24, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %28 = reshape(%25, newshape=[2240]) /* ty=Tensor[(2240), uint16] */;
    %29 = @func_4514(%26, %27, %28) /* ty=(Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) */;
    %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(50, 1), int16] */, dtype="int16") /* ty=Tensor[(50, 1), int16] */;
    %31 = cast(%var_5713, dtype="float32") /* ty=Tensor[(840), float32] */;
    %32 = reshape(%30, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), int16] */;
    %33 = reshape(%31, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %34 = @func_2823(%32, %33) /* ty=(Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) */;
    %35 = %34.0;
    %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(2240, 1), uint16] */, dtype="int8") /* ty=Tensor[(2240, 1), int8] */;
    %37 = cast(%35, dtype="int8") /* ty=Tensor[(10, 1, 5), int8] */;
    %38 = cast(%var_5704, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
    %39 = erf(%38) /* ty=Tensor[(490, 3), float32] */;
    %40 = cast(%var_5750, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
    %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(2), int32] */;
    %42 = cast(%39, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %44 = cast(%var_5754, dtype="int32") /* ty=Tensor[(490, 3), int32] */;
    %45 = shape_of(%39, dtype="int32") /* ty=Tensor[(2), int32] */;
    %46 = cast(%39, dtype="int32") /* ty=Tensor[(490, 3), int32] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %48 = %29.1;
    %49 = bitwise_or(%36, %37) /* ty=Tensor[(10, 2240, 5), int8] */;
    %50 = subtract(%42, %43) /* ty=Tensor[(490, 3), float32] */;
    %51 = bitwise_and(%46, %47) /* ty=Tensor[(490, 3), int32] */;
    (%22, %48, meta[relay.Constant][1] /* ty=Tensor[(50, 1), int16] */, %var_5713, %49, %50, %51)
  };
  %52(%var_5767, %var_5768, %var_5769, %var_5770) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(50, 1), int16], Tensor[(840), float32], Tensor[(10, 2240, 5), int8], Tensor[(490, 3), float32], Tensor[(490, 3), int32]) */
}

def @func_3374(%var_3372: Tensor[(2, 5, 9), float32], %var_3373: Tensor[(6, 140), float32]) -> (Tensor[(8, 7, 15), float32], Tensor[(6, 140), float32], Tensor[(5, 15, 12), float64], Tensor[(15, 6, 14), uint8], Tensor[(210), uint8], Tensor[(18, 70), uint8], Tensor[(2, 5, 9), uint16]) {
  @func_3370(%var_3372, %var_3373) /* ty=(Tensor[(8, 7, 15), float32], Tensor[(6, 140), float32], Tensor[(5, 15, 12), float64], Tensor[(15, 6, 14), uint8], Tensor[(210), uint8], Tensor[(18, 70), uint8], Tensor[(2, 5, 9), uint16]) */
}

def @func_6825(%var_6823: Tensor[(840), float32], %var_6824: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %63 = fn (%var_6806: Tensor[(840), float32], %var_6812: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
    %53 = @func_6309() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %54 = cast(%var_6806, dtype="float32") /* ty=Tensor[(840), float32] */;
    %55 = reshape(%54, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
    %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
    %57 = cast(%var_6812, dtype="uint8") /* ty=Tensor[(104), uint8] */;
    %58 = reshape(%56, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
    %59 = reshape(%57, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
    %60 = %53.0;
    %61 = @func_718(%55) /* ty=Tensor[(8, 7, 15), float32] */;
    %62 = @func_3492(%58, %59) /* ty=Tensor[(4, 2, 13), uint8] */;
    (%60, %61, %var_6806, %62, meta[relay.Constant][2] /* ty=Tensor[(52), uint8] */, %var_6812)
  };
  %63(%var_6823, %var_6824) /* ty=(Tensor[(5, 15, 12), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */
}

def @func_5667() -> (Tensor[(5, 15, 12), float64],) {
  @func_5665() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @func_6931() -> Tensor[(5, 15, 12), float64] {
  %64 = fn () -> Tensor[(5, 15, 12), float64] {
    @func_5031() /* ty=Tensor[(5, 15, 12), float64] */
  };
  %64() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_2827(%var_2825: Tensor[(10, 1, 5), int16], %var_2826: Tensor[(840), float32]) -> (Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) {
  @func_2823(%var_2825, %var_2826) /* ty=(Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) */
}

def @func_1075(%var_1072: Tensor[(8, 16, 4), float32], %var_1073: Tensor[(840), float32], %var_1074: Tensor[(8, 16, 4), uint64]) -> (Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) {
  %82 = fn (%var_1046: Tensor[(8, 16, 4), float32], %var_1057: Tensor[(840), float32], %var_1060: Tensor[(8, 16, 4), uint64]) -> (Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) {
    %65 = cast(%var_1046, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
    %66 = cast(%var_1057, dtype="float32") /* ty=Tensor[(840), float32] */;
    %67 = reshape(%66, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
    %68 = cast(%var_1046, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
    %69 = cosh(%68) /* ty=Tensor[(8, 16, 4), float32] */;
    %70 = cast(%var_1046, dtype="uint64") /* ty=Tensor[(8, 16, 4), uint64] */;
    %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%69, dtype="uint64") /* ty=Tensor[(8, 16, 4), uint64] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %74 = logical_xor(%72, %73) /* ty=Tensor[(8, 16, 4), uint64] */;
    %75 = cast(%var_1060, dtype="bool") /* ty=Tensor[(8, 16, 4), bool] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="bool") /* ty=Tensor[(8, 16, 4), bool] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %79 = acos(%65) /* ty=Tensor[(8, 16, 4), float32] */;
    %80 = @func_718(%67) /* ty=Tensor[(8, 7, 15), float32] */;
    %81 = not_equal(%77, %78) /* ty=Tensor[(8, 16, 4), bool] */;
    (%79, %80, %var_1057, %81)
  };
  %82(%var_1072, %var_1073, %var_1074) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */
}

def @func_3171() -> Tensor[(5, 15, 12), float64] {
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  cosh(%83) /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_4266(%var_4264: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) {
  @func_4263(%var_4264) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */
}

def @func_4607() -> Tensor[(5, 15, 12), float32] {
  %85 = fn () -> Tensor[(5, 15, 12), float32] {
    %84 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %84.0
  };
  %85() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_1302(%var_1300: Tensor[(15, 1, 14), uint8], %var_1301: Tensor[(15, 6, 14), uint8]) -> (Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) {
  %91 = fn (%var_1290: Tensor[(15, 1, 14), uint8], %var_1291: Tensor[(15, 6, 14), uint8]) -> (Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) {
    %86 = cast(%var_1290, dtype="uint8") /* ty=Tensor[(15, 1, 14), uint8] */;
    %87 = cast(%var_1291, dtype="uint8") /* ty=Tensor[(15, 6, 14), uint8] */;
    %88 = cast(%var_1290, dtype="float32") /* ty=Tensor[(15, 1, 14), float32] */;
    %89 = right_shift(%86, %87) /* ty=Tensor[(15, 6, 14), uint8] */;
    %90 = asinh(%88) /* ty=Tensor[(15, 1, 14), float32] */;
    (%89, %90)
  };
  %91(%var_1300, %var_1301) /* ty=(Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) */
}

def @func_6855() -> (Tensor[(5, 15, 12), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %92 = @func_6761() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) */;
  %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %95 = reshape(%93, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %96 = reshape(%94, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %97 = %92.0;
  %98 = @func_3492(%95, %96) /* ty=Tensor[(4, 2, 13), uint8] */;
  (%97, %98, meta[relay.Constant][4] /* ty=Tensor[(52), uint8] */, meta[relay.Constant][5] /* ty=Tensor[(104), uint8] */)
}

def @func_6983() -> Tensor[(5, 15, 12), float64] {
  %100 = fn () -> Tensor[(5, 15, 12), float64] {
    %99 = @func_4913() /* ty=(Tensor[(5, 15, 12), float64],) */;
    %99.0
  };
  %100() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_2823(%var_2777: Tensor[(10, 1, 5), int16], %var_2786: Tensor[(840), float32]) -> (Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) {
  %101 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %102 = cast(%var_2777, dtype="bool") /* ty=Tensor[(10, 1, 5), bool] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %104 = cast(%var_2786, dtype="float32") /* ty=Tensor[(840), float32] */;
  %105 = cast(meta[relay.Constant][7] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %106 = reshape(%103, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %107 = reshape(%104, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %108 = reshape(%105, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %109 = @func_1071(%106, %107, %108) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %110 = cast(%var_2786, dtype="float32") /* ty=Tensor[(840), float32] */;
  %111 = reshape(%110, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %112 = cast(%var_2777, dtype="bool") /* ty=Tensor[(10, 1, 5), bool] */;
  %113 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %114 = less_equal(%101, %102) /* ty=Tensor[(10, 1, 5), bool] */;
  %115 = %109.0;
  %116 = @func_718(%111) /* ty=Tensor[(8, 7, 15), float32] */;
  %117 = not_equal(%112, %113) /* ty=Tensor[(10, 1, 5), bool] */;
  (%114, %115, meta[relay.Constant][7] /* ty=Tensor[(512), float32] */, %var_2786, %116, %117)
}

def @func_6309() -> (Tensor[(5, 15, 12), float32],) {
  %118 = @func_6175() /* ty=Tensor[(5, 15, 12), float32] */;
  (%118,)
}

def @func_779(%var_768: Tensor[(8, 9, 8), int32]) -> Tensor[(8, 9, 8), int32] {
  %119 = cast(%var_768, dtype="int32") /* ty=Tensor[(8, 9, 8), int32] */;
  %120 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(8, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(8, 9, 8), int32] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%121, %122) /* ty=Tensor[(8, 9, 8), int32] */
}

def @func_4568() -> (Tensor[(5, 15, 12), float64],) {
  %124 = fn () -> (Tensor[(5, 15, 12), float64],) {
    %123 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
    (%123,)
  };
  %124() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @main(%var_7470: Tensor[(13, 2, 5), bool], %var_7471: Tensor[(13, 2, 5), bool]) -> (Tensor[(13, 2, 5), bool], Tensor[(13, 2, 5), int16]) {
  %125 = cast(%var_7471, dtype="bool") /* ty=Tensor[(13, 2, 5), bool] */;
  %126 = shape_of(%var_7470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_7470, dtype="bool") /* ty=Tensor[(13, 2, 5), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = cast(%var_7470, dtype="int16") /* ty=Tensor[(13, 2, 5), int16] */;
  %130 = shape_of(%var_7471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%var_7471, dtype="int16") /* ty=Tensor[(13, 2, 5), int16] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %133 = logical_or(%127, %128) /* ty=Tensor[(13, 2, 5), bool] */;
  %134 = logical_xor(%131, %132) /* ty=Tensor[(13, 2, 5), int16] */;
  (%133, %134)
}

def @func_4518(%var_4515: Tensor[(5, 15, 12), float32], %var_4516: Tensor[(1470), uint8], %var_4517: Tensor[(2240), uint16]) -> (Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) {
  %162 = fn (%var_4482: Tensor[(5, 15, 12), float32], %var_4501: Tensor[(1470), uint8], %var_4507: Tensor[(2240), uint16]) -> (Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) {
    %135 = cast(%var_4501, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %136 = cast(meta[relay.Constant][9] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
    %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %138 = reshape(%135, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), uint8] */;
    %139 = reshape(%136, newshape=[1, 512]) /* ty=Tensor[(1, 512), float32] */;
    %140 = reshape(%137, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %141 = @func_3022(%138, %139, %140) /* ty=(Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) */;
    %142 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
    %143 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
    %144 = reshape(%142, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
    %145 = reshape(%143, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
    %146 = @func_3992(%144, %145) /* ty=(Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) */;
    %147 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
    %148 = @func_4387() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %149 = %148.0;
    %150 = cast(%var_4482, dtype="int32") /* ty=Tensor[(5, 15, 12), int32] */;
    %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%149, dtype="int32") /* ty=Tensor[(5, 15, 12), int32] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %154 = maximum(%152, %153) /* ty=Tensor[(5, 15, 12), int32] */;
    %155 = cast(%154, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
    %156 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %157 = cast(%147, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
    %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %159 = %141.3;
    %160 = %146.0;
    %161 = not_equal(%157, %158) /* ty=Tensor[(5, 15, 12), bool] */;
    (%159, %var_4501, meta[relay.Constant][9] /* ty=Tensor[(512), float32] */, meta[relay.Constant][10] /* ty=Tensor[(840), float32] */, %160, %var_4507, %161)
  };
  %162(%var_4515, %var_4516, %var_4517) /* ty=(Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) */
}

def @func_3250() -> Tensor[(5, 15, 12), float64] {
  %165 = fn () -> Tensor[(5, 15, 12), float64] {
    %163 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
    %164 = cast(%163, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    asin(%164) /* ty=Tensor[(5, 15, 12), float64] */
  };
  %165() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_7260() -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32]) {
  %170 = fn () -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32]) {
    %166 = @func_4567() /* ty=(Tensor[(5, 15, 12), float64],) */;
    %167 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
    %168 = %166.0;
    %169 = %167.2;
    (%168, %169)
  };
  %170() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */
}

def @func_5053(%var_5033: Tensor[(9, 2, 7), float64], %var_5034: Tensor[(9, 2, 7), float64], %var_5039: Tensor[(495), float32]) -> (Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) {
  %171 = cast(%var_5034, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
  %172 = shape_of(%var_5033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%var_5033, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %175 = cast(%var_5039, dtype="float32") /* ty=Tensor[(495), float32] */;
  %176 = reshape(%175, newshape=[11, 9, 5]) /* ty=Tensor[(11, 9, 5), float32] */;
  %177 = mod(%173, %174) /* ty=Tensor[(9, 2, 7), float64] */;
  %178 = @func_2479(%176) /* ty=Tensor[(11, 9, 5), float32] */;
  %179 = @func_4310() /* ty=Tensor[(5, 15, 12), float64] */;
  (%177, %178, %var_5039, %179)
}

def @func_7362() -> (Tensor[(5, 15, 12), float64], Tensor[(8, 7, 15), float32], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float32]) {
  %198 = fn () -> (Tensor[(5, 15, 12), float64], Tensor[(8, 7, 15), float32], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float32]) {
    %180 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
    %181 = @func_6288() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(7, 9, 6), float64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 16, 4), float32]) */;
    %182 = %181.4;
    %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 16, 4), float32] */, dtype="int16") /* ty=Tensor[(8, 16, 4), int16] */;
    %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%182, dtype="int16") /* ty=Tensor[(8, 16, 4), int16] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %187 = maximum(%185, %186) /* ty=Tensor[(8, 16, 4), int16] */;
    %188 = cast(%187, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
    %189 = log10(%188) /* ty=Tensor[(8, 16, 4), float32] */;
    %190 = cast(%189, dtype="float64") /* ty=Tensor[(8, 16, 4), float64] */;
    %191 = cast(%189, dtype="float64") /* ty=Tensor[(8, 16, 4), float64] */;
    %192 = cast(%189, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
    %193 = %180.0;
    %194 = @func_6010() /* ty=Tensor[(8, 7, 15), float32] */;
    %195 = sin(%190) /* ty=Tensor[(8, 16, 4), float64] */;
    %196 = asin(%191) /* ty=Tensor[(8, 16, 4), float64] */;
    %197 = exp(%192) /* ty=Tensor[(8, 16, 4), float32] */;
    (%193, %194, %195, %196, %197)
  };
  %198() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(8, 7, 15), float32], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float32]) */
}

def @func_4439(%var_4436: Tensor[(840), float32], %var_4437: Tensor[(52), uint8], %var_4438: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(52), uint8], Tensor[(104), uint8]) {
  @func_4434(%var_4436, %var_4437, %var_4438) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */
}

def @func_6311() -> (Tensor[(5, 15, 12), float32],) {
  @func_6309() /* ty=(Tensor[(5, 15, 12), float32],) */
}

def @func_4310() -> Tensor[(5, 15, 12), float64] {
  %199 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %199.0
}

def @func_5350() -> (Tensor[(5, 15, 12), float64], Tensor[(2, 5, 12), int32]) {
  @func_5348() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(2, 5, 12), int32]) */
}

def @func_6146(%var_6145: Tensor[(5, 15, 12), float64]) -> (Tensor[(5, 15, 12), uint64], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(495), float32], Tensor[(126), float64]) {
  %219 = fn (%var_6122: Tensor[(5, 15, 12), float64]) -> (Tensor[(5, 15, 12), uint64], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(495), float32], Tensor[(126), float64]) {
    %200 = @func_5536() /* ty=(Tensor[(5, 15, 12), float64],) */;
    %201 = %200.0;
    %202 = cast(%var_6122, dtype="uint64") /* ty=Tensor[(5, 15, 12), uint64] */;
    %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%201, dtype="uint64") /* ty=Tensor[(5, 15, 12), uint64] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %206 = cast(meta[relay.Constant][12] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %207 = reshape(%206, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %208 = @func_3748(%207) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
    %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %211 = cast(meta[relay.Constant][12] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %212 = reshape(%209, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
    %213 = reshape(%210, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
    %214 = reshape(%211, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %215 = @func_5053(%212, %213, %214) /* ty=(Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */;
    %216 = left_shift(%204, %205) /* ty=Tensor[(5, 15, 12), uint64] */;
    %217 = %208.1;
    %218 = %215.2;
    (%216, %217, meta[relay.Constant][12] /* ty=Tensor[(495), float32] */, %218, meta[relay.Constant][13] /* ty=Tensor[(126), float64] */)
  };
  %219(%var_6145) /* ty=(Tensor[(5, 15, 12), uint64], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(495), float32], Tensor[(126), float64]) */
}

def @func_721(%var_719: Tensor[(8, 7, 15), float32]) -> Tensor[(8, 7, 15), float32] {
  @func_718(%var_719) /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_5536() -> (Tensor[(5, 15, 12), float64],) {
  %220 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  (%220,)
}

def @func_4752(%var_4695: Tensor[(8, 6, 13), float64], %var_4696: Tensor[(8, 6, 13), float64], %var_4719: Tensor[(50), int16], %var_4722: Tensor[(288, 2), int32]) -> (Tensor[(8, 6, 13), bool], Tensor[(10, 1, 5), bool], Tensor[(300), float32], Tensor[(50), int16], Tensor[(288, 2), int64], Tensor[(8, 6, 13), float64]) {
  %221 = cast(%var_4695, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %222 = shape_of(%var_4696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_4696, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %226 = cast(%var_4719, dtype="int16") /* ty=Tensor[(50), int16] */;
  %227 = reshape(%225, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %228 = reshape(%226, newshape=[50]) /* ty=Tensor[(50), int16] */;
  %229 = @func_3051(%227, %228) /* ty=(Tensor[(5, 15, 4), float32], Tensor[(10, 1, 5), bool], Tensor[(50), int16], Tensor[(840), float32]) */;
  %230 = cast(%var_4722, dtype="int32") /* ty=Tensor[(288, 2), int32] */;
  %231 = reshape(%230, newshape=[8, 9, 8]) /* ty=Tensor[(8, 9, 8), int32] */;
  %232 = @func_779(%231) /* ty=Tensor[(8, 9, 8), int32] */;
  %233 = cast(%232, dtype="int64") /* ty=Tensor[(8, 9, 8), int64] */;
  %234 = shape_of(%var_4722, dtype="int32") /* ty=Tensor[(2), int32] */;
  %235 = cast(%var_4722, dtype="int64") /* ty=Tensor[(288, 2), int64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %237 = cast(%var_4695, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %238 = cos(%237) /* ty=Tensor[(8, 6, 13), float32] */;
  %239 = cast(%var_4696, dtype="int64") /* ty=Tensor[(8, 6, 13), int64] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="int64") /* ty=Tensor[(8, 6, 13), int64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %243 = multiply(%241, %242) /* ty=Tensor[(8, 6, 13), int64] */;
  %244 = cast(%var_4696, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %245 = shape_of(%var_4695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_4695, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = less_equal(%246, %247) /* ty=Tensor[(8, 6, 13), bool] */;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %250 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%243, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %253 = equal(%223, %224) /* ty=Tensor[(8, 6, 13), bool] */;
  %254 = %229.1;
  %255 = minimum(%235, %236) /* ty=Tensor[(288, 2), int64] */;
  %256 = power(%251, %252) /* ty=Tensor[(8, 6, 13), float64] */;
  (%253, %254, meta[relay.Constant][14] /* ty=Tensor[(300), float32] */, %var_4719, %255, %256)
}

def @func_4434(%var_4414: Tensor[(840), float32], %var_4421: Tensor[(52), uint8], %var_4422: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %257 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %258 = %257.0;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %260 = cast(%258, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %261 = cast(meta[relay.Constant][15] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %262 = cast(%var_4414, dtype="float32") /* ty=Tensor[(840), float32] */;
  %263 = reshape(%259, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %264 = reshape(%260, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %265 = reshape(%261, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %266 = reshape(%262, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %267 = @func_4212(%263, %264, %265, %266) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %268 = cast(%var_4421, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %269 = cast(%var_4422, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %270 = reshape(%268, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %271 = reshape(%269, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %272 = @func_3936(%270, %271) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %273 = %267.2;
  %274 = %272.2;
  (%258, %273, meta[relay.Constant][15] /* ty=Tensor[(512), float32] */, %var_4414, %274, %var_4421, %var_4422)
}

def @func_3641() -> Tensor[(5, 15, 12), float64] {
  %277 = fn () -> Tensor[(5, 15, 12), float64] {
    %275 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
    %276 = cast(%275, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    log(%276) /* ty=Tensor[(5, 15, 12), float64] */
  };
  %277() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_3051(%var_3028: Tensor[(5, 15, 4), float32], %var_3048: Tensor[(50), int16]) -> (Tensor[(5, 15, 4), float32], Tensor[(10, 1, 5), bool], Tensor[(50), int16], Tensor[(840), float32]) {
  %278 = cast(%var_3028, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %279 = cast(%var_3048, dtype="int16") /* ty=Tensor[(50), int16] */;
  %280 = cast(meta[relay.Constant][16] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %281 = reshape(%279, newshape=[10, 1, 5]) /* ty=Tensor[(10, 1, 5), int16] */;
  %282 = reshape(%280, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %283 = @func_2823(%281, %282) /* ty=(Tensor[(10, 1, 5), bool], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(10, 1, 5), bool]) */;
  %284 = cos(%278) /* ty=Tensor[(5, 15, 4), float32] */;
  %285 = %283.5;
  (%284, %285, %var_3048, meta[relay.Constant][16] /* ty=Tensor[(840), float32] */)
}

def @func_3565() -> (Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) {
  %299 = fn () -> (Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) {
    %286 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
    %287 = cast(%286, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
    %288 = cast(%286, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    %289 = tan(%288) /* ty=Tensor[(5, 15, 12), float64] */;
    %290 = cast(%286, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
    %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%289, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %294 = cast(meta[relay.Constant][17] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %295 = reshape(%294, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
    %296 = atanh(%287) /* ty=Tensor[(5, 15, 12), float32] */;
    %297 = logical_xor(%292, %293) /* ty=Tensor[(5, 15, 12), uint32] */;
    %298 = @func_718(%295) /* ty=Tensor[(8, 7, 15), float32] */;
    (%296, %297, %298, meta[relay.Constant][17] /* ty=Tensor[(840), float32] */)
  };
  %299() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */
}

def @func_4791() -> (Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float32]) {
  %300 = @func_4606() /* ty=Tensor[(5, 15, 12), float32] */;
  %301 = @func_4338() /* ty=Tensor[(5, 15, 12), float32] */;
  (%300, %301)
}

def @func_5367() -> Tensor[(8, 7, 15), float32] {
  %302 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %303 = %302.2;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  asin(%304) /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_4217(%var_4213: Tensor[(5, 15, 12), float32], %var_4214: Tensor[(5, 15, 12), float64], %var_4215: Tensor[(512), float32], %var_4216: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) {
  %334 = fn (%var_4129: Tensor[(5, 15, 12), float32], %var_4135: Tensor[(5, 15, 12), float64], %var_4209: Tensor[(512), float32], %var_4210: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) {
    %305 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %306 = %305.0;
    %307 = cast(%var_4129, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%306, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %311 = minimum(%309, %310) /* ty=Tensor[(5, 15, 12), float64] */;
    %312 = cast(%var_4135, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
    %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%311, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %317 = cast(meta[relay.Constant][19] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
    %318 = cast(meta[relay.Constant][20] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
    %319 = reshape(%316, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %320 = reshape(%317, newshape=[52]) /* ty=Tensor[(52), uint8] */;
    %321 = reshape(%318, newshape=[104]) /* ty=Tensor[(104), uint8] */;
    %322 = @func_3803(%319, %320, %321) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */;
    %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %324 = cast(%var_4209, dtype="float32") /* ty=Tensor[(512), float32] */;
    %325 = cast(%var_4210, dtype="float32") /* ty=Tensor[(840), float32] */;
    %326 = reshape(%323, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), uint8] */;
    %327 = reshape(%324, newshape=[1, 512]) /* ty=Tensor[(1, 512), float32] */;
    %328 = reshape(%325, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %329 = @func_3022(%326, %327, %328) /* ty=(Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) */;
    %330 = less_equal(%314, %315) /* ty=Tensor[(5, 15, 12), bool] */;
    %331 = %322.5;
    %332 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
    %333 = %329.1;
    (%330, %331, meta[relay.Constant][18] /* ty=Tensor[(495), float32] */, meta[relay.Constant][19] /* ty=Tensor[(52), uint8] */, meta[relay.Constant][20] /* ty=Tensor[(104), uint8] */, %332, %333, meta[relay.Constant][21] /* ty=Tensor[(1470), uint8] */, %var_4209, %var_4210)
  };
  %334(%var_4213, %var_4214, %var_4215, %var_4216) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */
}

def @func_4312() -> Tensor[(5, 15, 12), float64] {
  @func_4310() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_4077(%var_4041: Tensor[(5, 15, 12), float64], %var_4047: Tensor[(495), float32], %var_4054: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52, 2), uint8], Tensor[(52), float32]) {
  %335 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %336 = cast(%var_4041, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = cast(%var_4047, dtype="float32") /* ty=Tensor[(495), float32] */;
  %341 = reshape(%340, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %342 = @func_3748(%341) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %343 = cast(meta[relay.Constant][22] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %344 = cast(%var_4054, dtype="float32") /* ty=Tensor[(840), float32] */;
  %345 = cast(meta[relay.Constant][22] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %346 = reshape(%343, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %347 = reshape(%344, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %348 = reshape(%345, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %349 = @func_1071(%346, %347, %348) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %350 = cast(meta[relay.Constant][23] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %351 = cast(meta[relay.Constant][24] /* ty=Tensor[(52, 2), uint8] */, dtype="uint8") /* ty=Tensor[(52, 2), uint8] */;
  %352 = reshape(%350, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %353 = reshape(%351, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %354 = cast(meta[relay.Constant][25] /* ty=Tensor[(52), uint8] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %355 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(52), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %356 = cast(meta[relay.Constant][23] /* ty=Tensor[(52), uint8] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?), float32] */;
  %358 = greater(%338, %339) /* ty=Tensor[(5, 15, 12), bool] */;
  %359 = %342.0;
  %360 = %349.0;
  %361 = @func_3492(%352, %353) /* ty=Tensor[(4, 2, 13), uint8] */;
  %362 = minimum(%356, %357) /* ty=Tensor[(52), float32] */;
  (%358, %359, %var_4047, %360, meta[relay.Constant][22] /* ty=Tensor[(512), float32] */, %var_4054, %361, meta[relay.Constant][24] /* ty=Tensor[(52, 2), uint8] */, %362)
}

def @func_5515() -> (Tensor[(5, 15, 12), float64],) {
  %364 = fn () -> (Tensor[(5, 15, 12), float64],) {
    %363 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
    (%363,)
  };
  %364() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @func_6175() -> Tensor[(5, 15, 12), float32] {
  @func_5611() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_3484(%var_3481: Tensor[(36, 16), int32], %var_3482: Tensor[(840), float32], %var_3483: Tensor[(90, 14), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(8, 9, 8), int32], Tensor[(36, 16), int32], Tensor[(840), float32], Tensor[(120), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float32], Tensor[(15, 1, 14), float32], Tensor[(210), uint8], Tensor[(90, 14), uint8]) {
  @func_3479(%var_3481, %var_3482, %var_3483) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(8, 9, 8), int32], Tensor[(36, 16), int32], Tensor[(840), float32], Tensor[(120), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float32], Tensor[(15, 1, 14), float32], Tensor[(210), uint8], Tensor[(90, 14), uint8]) */
}

def @func_7195() -> (Tensor[(5, 15, 12), float64],) {
  %366 = fn () -> (Tensor[(5, 15, 12), float64],) {
    %365 = @func_5031() /* ty=Tensor[(5, 15, 12), float64] */;
    (%365,)
  };
  %366() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @func_5792() -> (Tensor[(5, 15, 12), float64],) {
  %367 = @func_5665() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %368 = %367.0;
  (%368,)
}

def @func_6738(%var_6735: Tensor[(4, 1), uint64], %var_6736: Tensor[(52), uint8], %var_6737: Tensor[(5, 15, 12), float64]) -> (Tensor[(5, 15, 12), float64], Tensor[(1, 4), uint64], uint64, Tensor[(4, 1), uint64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float64], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), uint32]) {
  @func_6733(%var_6735, %var_6736, %var_6737) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1, 4), uint64], uint64, Tensor[(4, 1), uint64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float64], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), uint32]) */
}

def @func_5084() -> (Tensor[(7, 9, 6), float64],) {
  %371 = fn () -> (Tensor[(7, 9, 6), float64],) {
    %369 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 6), float64] */;
    %370 = cosh(%369) /* ty=Tensor[(7, 9, 6), float64] */;
    (%370,)
  };
  %371() /* ty=(Tensor[(7, 9, 6), float64],) */
}

def @func_6011() -> Tensor[(8, 7, 15), float32] {
  %374 = fn () -> Tensor[(8, 7, 15), float32] {
    %372 = @func_5367() /* ty=Tensor[(8, 7, 15), float32] */;
    %373 = cast(%372, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
    tan(%373) /* ty=Tensor[(8, 7, 15), float32] */
  };
  %374() /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_2479(%var_2469: Tensor[(11, 9, 5), float32]) -> Tensor[(11, 9, 5), float32] {
  %375 = cast(%var_2469, dtype="float32") /* ty=Tensor[(11, 9, 5), float32] */;
  %376 = exp(%375) /* ty=Tensor[(11, 9, 5), float32] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(11, 9, 5), float32] */;
  erf(%377) /* ty=Tensor[(11, 9, 5), float32] */
}

def @func_4758(%var_4754: Tensor[(8, 6, 13), float64], %var_4755: Tensor[(8, 6, 13), float64], %var_4756: Tensor[(50), int16], %var_4757: Tensor[(288, 2), int32]) -> (Tensor[(8, 6, 13), bool], Tensor[(10, 1, 5), bool], Tensor[(300), float32], Tensor[(50), int16], Tensor[(288, 2), int64], Tensor[(8, 6, 13), float64]) {
  @func_4752(%var_4754, %var_4755, %var_4756, %var_4757) /* ty=(Tensor[(8, 6, 13), bool], Tensor[(10, 1, 5), bool], Tensor[(300), float32], Tensor[(50), int16], Tensor[(288, 2), int64], Tensor[(8, 6, 13), float64]) */
}

def @func_7107(%var_7072: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(840), float32], Tensor[(52), uint8], Tensor[(104), int32]) {
  %378 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %379 = cast(meta[relay.Constant][27] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %380 = cast(meta[relay.Constant][28] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %381 = cast(meta[relay.Constant][29] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %382 = reshape(%379, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %383 = reshape(%380, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %384 = reshape(%381, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %385 = @func_4434(%382, %383, %384) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %386 = cast(%var_7072, dtype="int32") /* ty=Tensor[(104), int32] */;
  %387 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(104), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %388 = cast(meta[relay.Constant][29] /* ty=Tensor[(104), uint8] */, dtype="int32") /* ty=Tensor[(104), int32] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?), int32] */;
  %390 = %378.0;
  %391 = %385.1;
  %392 = multiply(%388, %389) /* ty=Tensor[(104), int32] */;
  (%390, %391, meta[relay.Constant][27] /* ty=Tensor[(840), float32] */, meta[relay.Constant][28] /* ty=Tensor[(52), uint8] */, %392)
}

def @func_6288() -> (Tensor[(5, 15, 12), float64], Tensor[(7, 9, 6), float64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 16, 4), float32]) {
  %393 = @func_4960() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) */;
  %394 = @func_5083() /* ty=(Tensor[(7, 9, 6), float64],) */;
  %395 = cast(meta[relay.Constant][30] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %396 = cast(meta[relay.Constant][31] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %397 = cast(meta[relay.Constant][30] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %398 = reshape(%395, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
  %399 = reshape(%396, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %400 = reshape(%397, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %401 = @func_1071(%398, %399, %400) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(8, 16, 4), float32] */;
  %404 = %393.0;
  %405 = %394.0;
  %406 = log2(%403) /* ty=Tensor[(8, 16, 4), float32] */;
  (%404, %405, meta[relay.Constant][30] /* ty=Tensor[(512), float32] */, meta[relay.Constant][31] /* ty=Tensor[(840), float32] */, %406)
}

def @func_3026(%var_3023: Tensor[(14, 15, 7), uint8], %var_3024: Tensor[(1, 512), float32], %var_3025: Tensor[(840), float32]) -> (Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) {
  %428 = fn (%var_2975: Tensor[(14, 15, 7), uint8], %var_3017: Tensor[(1, 512), float32], %var_3018: Tensor[(840), float32]) -> (Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) {
    %407 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 15, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 15, 7), uint8] */;
    %408 = shape_of(%var_2975, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%var_2975, dtype="uint8") /* ty=Tensor[(14, 15, 7), uint8] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %411 = cast(%var_3017, dtype="float32") /* ty=Tensor[(1, 512), float32] */;
    %412 = cast(%var_3018, dtype="float32") /* ty=Tensor[(840), float32] */;
    %413 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(1, 512), uint64] */;
    %414 = reshape(%411, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
    %415 = reshape(%412, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %416 = reshape(%413, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
    %417 = @func_1071(%414, %415, %416) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
    %418 = cast(%var_3017, dtype="float32") /* ty=Tensor[(1, 512), float32] */;
    %419 = %417.2;
    %420 = cast(%419, dtype="float32") /* ty=Tensor[(840), float32] */;
    %421 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(1, 512), uint64] */;
    %422 = reshape(%418, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
    %423 = reshape(%420, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %424 = reshape(%421, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
    %425 = @func_1071(%422, %423, %424) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
    %426 = subtract(%409, %410) /* ty=Tensor[(14, 15, 7), uint8] */;
    %427 = %425.1;
    (%426, %419, %var_3017, %var_3018, %427)
  };
  %428(%var_3023, %var_3024, %var_3025) /* ty=(Tensor[(14, 15, 7), uint8], Tensor[(840), float32], Tensor[(1, 512), float32], Tensor[(840), float32], Tensor[(8, 7, 15), float32]) */
}

def @func_1647(%var_1646: Tensor[(1, 11, 16), float32]) -> Tensor[(1, 11, 16), float32] {
  %430 = fn (%var_1642: Tensor[(1, 11, 16), float32]) -> Tensor[(1, 11, 16), float32] {
    %429 = cast(%var_1642, dtype="float32") /* ty=Tensor[(1, 11, 16), float32] */;
    asinh(%429) /* ty=Tensor[(1, 11, 16), float32] */
  };
  %430(%var_1646) /* ty=Tensor[(1, 11, 16), float32] */
}

def @func_3285() -> (Tensor[(5, 15, 12), float32],) {
  %431 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %433 = rsqrt(%432) /* ty=Tensor[(5, 15, 12), float32] */;
  (%433,)
}

def @func_3803(%var_3776: Tensor[(495), float32], %var_3780: Tensor[(52), uint8], %var_3781: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %434 = cast(%var_3776, dtype="float32") /* ty=Tensor[(495), float32] */;
  %435 = reshape(%434, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %436 = @func_3748(%435) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %437 = cast(%var_3780, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %438 = cast(%var_3781, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %439 = reshape(%437, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %440 = reshape(%438, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
  %441 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %442 = %436.2;
  %443 = @func_3492(%439, %440) /* ty=Tensor[(4, 2, 13), uint8] */;
  (%441, %442, %var_3776, %443, %var_3780, %var_3781)
}

def @func_3996(%var_3994: Tensor[(10, 14, 16), uint16], %var_3995: Tensor[(10, 14, 16), uint16]) -> (Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) {
  @func_3992(%var_3994, %var_3995) /* ty=(Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) */
}

def @func_4914() -> (Tensor[(5, 15, 12), float64],) {
  %445 = fn () -> (Tensor[(5, 15, 12), float64],) {
    %444 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
    (%444,)
  };
  %445() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @func_6519(%var_6494: uint64, %var_6495: Tensor[(1, 4), uint64]) -> (Tensor[(1, 4), uint64],) {
  %446 = cast(%var_6494, dtype="uint64") /* ty=uint64 */;
  %447 = cast(%var_6495, dtype="uint64") /* ty=Tensor[(1, 4), uint64] */;
  %448 = bitwise_xor(%446, %447) /* ty=Tensor[(1, 4), uint64] */;
  (%448,)
}

def @func_6733(%var_6690: Tensor[(4, 1), uint64], %var_6719: Tensor[(52), uint8], %var_6726: Tensor[(5, 15, 12), float64]) -> (Tensor[(5, 15, 12), float64], Tensor[(1, 4), uint64], uint64, Tensor[(4, 1), uint64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float64], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), uint32]) {
  %449 = @func_4913() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %450 = cast(meta[relay.Constant][33] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %451 = cast(%var_6690, dtype="uint64") /* ty=Tensor[(4, 1), uint64] */;
  %452 = reshape(%450, newshape=[]) /* ty=uint64 */;
  %453 = reshape(%451, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint64] */;
  %454 = @func_6519(%452, %453) /* ty=(Tensor[(1, 4), uint64],) */;
  %455 = cast(meta[relay.Constant][34] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %456 = reshape(%455, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %457 = @func_4263(%456) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %458 = cast(%var_6719, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %459 = cast(meta[relay.Constant][35] /* ty=Tensor[(104), uint8] */, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %460 = reshape(%458, newshape=[52]) /* ty=Tensor[(52), uint8] */;
  %461 = reshape(%459, newshape=[104]) /* ty=Tensor[(104), uint8] */;
  %462 = @func_3936(%460, %461) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %463 = @func_5514() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %464 = %463.0;
  %465 = cast(%var_6726, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="uint32") /* ty=Tensor[(5, 15, 12), uint32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %469 = %449.0;
  %470 = %454.0;
  %471 = %457.3;
  %472 = %462.5;
  %473 = @func_6083() /* ty=Tensor[(5, 15, 12), float64] */;
  %474 = add(%467, %468) /* ty=Tensor[(5, 15, 12), uint32] */;
  (%469, %470, meta[relay.Constant][33] /* ty=uint64 */, %var_6690, %471, meta[relay.Constant][34] /* ty=Tensor[(840), float32] */, %472, %var_6719, meta[relay.Constant][35] /* ty=Tensor[(104), uint8] */, %473, %474)
}

def @func_6523(%var_6521: uint64, %var_6522: Tensor[(1, 4), uint64]) -> (Tensor[(1, 4), uint64],) {
  @func_6519(%var_6521, %var_6522) /* ty=(Tensor[(1, 4), uint64],) */
}

def @func_3287() -> (Tensor[(5, 15, 12), float32],) {
  @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */
}

def @func_3479(%var_3437: Tensor[(36, 16), int32], %var_3447: Tensor[(840), float32], %var_3466: Tensor[(90, 14), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(8, 9, 8), int32], Tensor[(36, 16), int32], Tensor[(840), float32], Tensor[(120), float32], Tensor[(840), float32], Tensor[(5, 15, 12), float32], Tensor[(15, 1, 14), float32], Tensor[(210), uint8], Tensor[(90, 14), uint8]) {
  %475 = cast(%var_3437, dtype="int32") /* ty=Tensor[(36, 16), int32] */;
  %476 = reshape(%475, newshape=[8, 9, 8]) /* ty=Tensor[(8, 9, 8), int32] */;
  %477 = cast(meta[relay.Constant][36] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %478 = cast(meta[relay.Constant][36] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %479 = cast(%var_3447, dtype="float32") /* ty=Tensor[(840), float32] */;
  %480 = reshape(%477, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), float32] */;
  %481 = reshape(%478, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), float32] */;
  %482 = reshape(%479, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %483 = @func_1192(%480, %481, %482) /* ty=(Tensor[(5, 6, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %484 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %485 = cast(meta[relay.Constant][37] /* ty=Tensor[(210), uint8] */, dtype="uint8") /* ty=Tensor[(210), uint8] */;
  %486 = cast(%var_3466, dtype="uint8") /* ty=Tensor[(90, 14), uint8] */;
  %487 = reshape(%485, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint8] */;
  %488 = reshape(%486, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint8] */;
  %489 = @func_1299(%487, %488) /* ty=(Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) */;
  %490 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %491 = @func_779(%476) /* ty=Tensor[(8, 9, 8), int32] */;
  %492 = %483.2;
  %493 = %484.0;
  %494 = %489.1;
  (%490, %491, %var_3437, %492, meta[relay.Constant][36] /* ty=Tensor[(120), float32] */, %var_3447, %493, %494, meta[relay.Constant][37] /* ty=Tensor[(210), uint8] */, %var_3466)
}

def @func_4539(%var_4537: Tensor[(8, 6, 12), float32], %var_4538: Tensor[(8, 6, 12), float32]) -> (Tensor[(8, 6, 12), bool],) {
  @func_4535(%var_4537, %var_4538) /* ty=(Tensor[(8, 6, 12), bool],) */
}

def @func_6456(%var_6454: Tensor[(490, 3), uint8], %var_6455: Tensor[(216), bool]) -> (Tensor[(5, 15, 12), float64], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(512), float32], Tensor[(840), float32], Tensor[(490, 3), int32], Tensor[(490, 3), uint8], Tensor[(5, 15, 12), float32], Tensor[(512), bool], Tensor[(8, 9, 8), int32], Tensor[(576), int32], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float64], Tensor[(6, 4, 9), bool], Tensor[(216), bool]) {
  @func_6452(%var_6454, %var_6455) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(512), float32], Tensor[(840), float32], Tensor[(490, 3), int32], Tensor[(490, 3), uint8], Tensor[(5, 15, 12), float32], Tensor[(512), bool], Tensor[(8, 9, 8), int32], Tensor[(576), int32], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float64], Tensor[(6, 4, 9), bool], Tensor[(216), bool]) */
}

def @func_1197(%var_1194: Tensor[(5, 6, 4), float32], %var_1195: Tensor[(5, 6, 4), float32], %var_1196: Tensor[(840), float32]) -> (Tensor[(5, 6, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) {
  @func_1192(%var_1194, %var_1195, %var_1196) /* ty=(Tensor[(5, 6, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */
}

def @func_1192(%var_1181: Tensor[(5, 6, 4), float32], %var_1182: Tensor[(5, 6, 4), float32], %var_1190: Tensor[(840), float32]) -> (Tensor[(5, 6, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) {
  %495 = cast(%var_1182, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %496 = shape_of(%var_1181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_1181, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %499 = cast(%var_1190, dtype="float32") /* ty=Tensor[(840), float32] */;
  %500 = reshape(%499, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %501 = floor_mod(%497, %498) /* ty=Tensor[(5, 6, 4), float32] */;
  %502 = @func_718(%500) /* ty=Tensor[(8, 7, 15), float32] */;
  (%501, %502, %var_1190)
}

def @func_4389() -> (Tensor[(5, 15, 12), float32],) {
  @func_4387() /* ty=(Tensor[(5, 15, 12), float32],) */
}

def @func_5188(%var_5186: Tensor[(126), float64], %var_5187: Tensor[(495), float32]) -> (Tensor[(5, 15, 12), float32], Tensor[(9, 2, 7), float64], Tensor[(126), float64], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) {
  %520 = fn (%var_5172: Tensor[(126), float64], %var_5173: Tensor[(495), float32]) -> (Tensor[(5, 15, 12), float32], Tensor[(9, 2, 7), float64], Tensor[(126), float64], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) {
    %503 = cast(%var_5172, dtype="float64") /* ty=Tensor[(126), float64] */;
    %504 = cast(%var_5172, dtype="float64") /* ty=Tensor[(126), float64] */;
    %505 = cast(%var_5173, dtype="float32") /* ty=Tensor[(495), float32] */;
    %506 = reshape(%503, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
    %507 = reshape(%504, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
    %508 = reshape(%505, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %509 = @func_5053(%506, %507, %508) /* ty=(Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */;
    %510 = cast(%var_5172, dtype="float64") /* ty=Tensor[(126), float64] */;
    %511 = %509.0;
    %512 = cast(%511, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
    %513 = cast(%var_5173, dtype="float32") /* ty=Tensor[(495), float32] */;
    %514 = reshape(%510, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
    %515 = reshape(%512, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float64] */;
    %516 = reshape(%513, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %517 = @func_5053(%514, %515, %516) /* ty=(Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */;
    %518 = @func_4890() /* ty=Tensor[(5, 15, 12), float32] */;
    %519 = %517.3;
    (%518, %511, %var_5172, %var_5173, %519)
  };
  %520(%var_5186, %var_5187) /* ty=(Tensor[(5, 15, 12), float32], Tensor[(9, 2, 7), float64], Tensor[(126), float64], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */
}

def @func_718(%var_708: Tensor[(8, 7, 15), float32]) -> Tensor[(8, 7, 15), float32] {
  %521 = cast(%var_708, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  sigmoid(%521) /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_3055(%var_3053: Tensor[(5, 15, 4), float32], %var_3054: Tensor[(50), int16]) -> (Tensor[(5, 15, 4), float32], Tensor[(10, 1, 5), bool], Tensor[(50), int16], Tensor[(840), float32]) {
  @func_3051(%var_3053, %var_3054) /* ty=(Tensor[(5, 15, 4), float32], Tensor[(10, 1, 5), bool], Tensor[(50), int16], Tensor[(840), float32]) */
}

def @func_5999() -> (Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) {
  %529 = fn () -> (Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) {
    %522 = cast(meta[relay.Constant][38] /* ty=Tensor[(2304), uint32] */, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
    %523 = cast(meta[relay.Constant][38] /* ty=Tensor[(2304), uint32] */, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
    %524 = reshape(%522, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
    %525 = reshape(%523, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
    %526 = @func_1225(%524, %525) /* ty=(Tensor[(9, 16, 16), uint32],) */;
    %527 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
    %528 = %526.0;
    (%527, %528, meta[relay.Constant][38] /* ty=Tensor[(2304), uint32] */)
  };
  %529() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) */
}

def @func_3992(%var_3949: Tensor[(10, 14, 16), uint16], %var_3950: Tensor[(10, 14, 16), uint16]) -> (Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) {
  %530 = cast(%var_3950, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %531 = shape_of(%var_3949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_3949, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %534 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %535 = cast(%var_3949, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %536 = log(%535) /* ty=Tensor[(10, 14, 16), float64] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(10, 14, 16), float32] */;
  %538 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %539 = bitwise_xor(%532, %533) /* ty=Tensor[(10, 14, 16), uint16] */;
  %540 = %534.0;
  %541 = exp(%537) /* ty=Tensor[(10, 14, 16), float32] */;
  %542 = %538.0;
  (%539, %540, %541, %542)
}

def @func_4082(%var_4079: Tensor[(5, 15, 12), float64], %var_4080: Tensor[(495), float32], %var_4081: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52, 2), uint8], Tensor[(52), float32]) {
  @func_4077(%var_4079, %var_4080, %var_4081) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(8, 16, 4), float32], Tensor[(512), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(52, 2), uint8], Tensor[(52), float32]) */
}

def @func_4019() -> Tensor[(5, 15, 12), float64] {
  %544 = fn () -> Tensor[(5, 15, 12), float64] {
    %543 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
    %543.0
  };
  %544() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_6119() -> Tensor[(8, 7, 15), float32] {
  @func_6117() /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_6290() -> (Tensor[(5, 15, 12), float64], Tensor[(7, 9, 6), float64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 16, 4), float32]) {
  @func_6288() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(7, 9, 6), float64], Tensor[(512), float32], Tensor[(840), float32], Tensor[(8, 16, 4), float32]) */
}

def @func_6177() -> Tensor[(5, 15, 12), float32] {
  @func_6175() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_7459() -> Tensor[(2, 5, 12), uint64] {
  @func_7457() /* ty=Tensor[(2, 5, 12), uint64] */
}

def @func_6594(%var_6572: Tensor[(7, 14, 6), float64]) -> (Tensor[(5, 15, 12), float64], Tensor[(7, 14, 6), int16]) {
  %545 = cast(%var_6572, dtype="float64") /* ty=Tensor[(7, 14, 6), float64] */;
  %546 = cosh(%545) /* ty=Tensor[(7, 14, 6), float64] */;
  %547 = cast(%var_6572, dtype="int16") /* ty=Tensor[(7, 14, 6), int16] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="int16") /* ty=Tensor[(7, 14, 6), int16] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %551 = @func_5031() /* ty=Tensor[(5, 15, 12), float64] */;
  %552 = left_shift(%549, %550) /* ty=Tensor[(7, 14, 6), int16] */;
  (%551, %552)
}

def @func_3590() -> (Tensor[(5, 15, 12), float64],) {
  %554 = fn () -> (Tensor[(5, 15, 12), float64],) {
    %553 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
    (%553,)
  };
  %554() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @func_5479(%var_5477: Tensor[(2304), uint32], %var_5478: Tensor[(5, 15, 12), float64]) -> (Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32], Tensor[(5, 15, 12), int8]) {
  %570 = fn (%var_5440: Tensor[(2304), uint32], %var_5465: Tensor[(5, 15, 12), float64]) -> (Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32], Tensor[(5, 15, 12), int8]) {
    %555 = cast(%var_5440, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
    %556 = cast(%var_5440, dtype="uint32") /* ty=Tensor[(2304), uint32] */;
    %557 = reshape(%555, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
    %558 = reshape(%556, newshape=[9, 16, 16]) /* ty=Tensor[(9, 16, 16), uint32] */;
    %559 = @func_1225(%557, %558) /* ty=(Tensor[(9, 16, 16), uint32],) */;
    %560 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
    %561 = %560.0;
    %562 = cast(%561, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    %563 = exp(%562) /* ty=Tensor[(5, 15, 12), float64] */;
    %564 = cast(%var_5465, dtype="int8") /* ty=Tensor[(5, 15, 12), int8] */;
    %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%563, dtype="int8") /* ty=Tensor[(5, 15, 12), int8] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %568 = %559.0;
    %569 = bitwise_or(%566, %567) /* ty=Tensor[(5, 15, 12), int8] */;
    (%568, %var_5440, %569)
  };
  %570(%var_5477, %var_5478) /* ty=(Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32], Tensor[(5, 15, 12), int8]) */
}

def @func_5961(%var_5959: Tensor[(1470), uint8], %var_5960: Tensor[(1470), uint8]) -> (Tensor[(1470), bool], Tensor[(1470), int64], Tensor[(5, 15, 12), float64]) {
  @func_5957(%var_5959, %var_5960) /* ty=(Tensor[(1470), bool], Tensor[(1470), int64], Tensor[(5, 15, 12), float64]) */
}

def @func_5145(%var_5144: Tensor[(2, 15, 12), float64]) -> (Tensor[(5, 15, 12), float32], Tensor[(2, 15, 12), float64]) {
  %592 = fn (%var_5106: Tensor[(2, 15, 12), float64]) -> (Tensor[(5, 15, 12), float32], Tensor[(2, 15, 12), float64]) {
    %571 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %572 = cast(%var_5106, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
    %573 = asin(%572) /* ty=Tensor[(2, 15, 12), float64] */;
    %574 = cast(%573, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
    %575 = asinh(%574) /* ty=Tensor[(2, 15, 12), float32] */;
    %576 = cast(%573, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
    %577 = shape_of(%var_5106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(%var_5106, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %580 = less_equal(%578, %579) /* ty=Tensor[(2, 15, 12), bool] */;
    %581 = cast(%580, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
    %582 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%575, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %585 = mod(%583, %584) /* ty=Tensor[(2, 15, 12), float32] */;
    %586 = cast(%585, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
    %587 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
    %588 = cast(%575, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
    %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %590 = %571.0;
    %591 = floor_mod(%588, %589) /* ty=Tensor[(2, 15, 12), float64] */;
    (%590, %591)
  };
  %592(%var_5144) /* ty=(Tensor[(5, 15, 12), float32], Tensor[(2, 15, 12), float64]) */
}

def @func_3808(%var_3805: Tensor[(495), float32], %var_3806: Tensor[(52), uint8], %var_3807: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  @func_3803(%var_3805, %var_3806, %var_3807) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */
}

def @func_3411(%var_3410: Tensor[(6, 4, 9), bool]) -> (Tensor[(6, 4, 9), bool],) {
  %598 = fn (%var_3399: Tensor[(6, 4, 9), bool]) -> (Tensor[(6, 4, 9), bool],) {
    %593 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 4, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
    %594 = shape_of(%var_3399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%var_3399, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %597 = logical_and(%595, %596) /* ty=Tensor[(6, 4, 9), bool] */;
    (%597,)
  };
  %598(%var_3410) /* ty=(Tensor[(6, 4, 9), bool],) */
}

def @func_4263(%var_4261: Tensor[(840), float32]) -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) {
  %599 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %601 = cast(%599, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %602 = cast(meta[relay.Constant][40] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %603 = cast(%var_4261, dtype="float32") /* ty=Tensor[(840), float32] */;
  %604 = reshape(%600, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %605 = reshape(%601, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %606 = reshape(%602, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %607 = reshape(%603, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %608 = @func_4212(%604, %605, %606, %607) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %609 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
  %610 = %608.7;
  (%599, %609, %610, meta[relay.Constant][40] /* ty=Tensor[(512), float32] */, %var_4261)
}

def @func_4353() -> (Tensor[(5, 15, 12), float32],) {
  @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */
}

def @func_4387() -> (Tensor[(5, 15, 12), float32],) {
  %611 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %612 = %611.0;
  (%612,)
}

def @func_3939(%var_3937: Tensor[(52), uint8], %var_3938: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) {
  %671 = fn (%var_3923: Tensor[(52), uint8], %var_3924: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) {
    %613 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
    %614 = cast(meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
    %615 = cast(meta[relay.Constant][42] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %616 = cast(meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, dtype="uint64") /* ty=Tensor[(512), uint64] */;
    %617 = reshape(%614, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
    %618 = reshape(%615, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %619 = reshape(%616, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
    %620 = @func_1071(%617, %618, %619) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
    %621 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
    %622 = cast(meta[relay.Constant][42] /* ty=Tensor[(840), float32] */, dtype="float64") /* ty=Tensor[(840), float64] */;
    %623 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 495), float32] */, dtype="float32") /* ty=Tensor[(1, 495), float32] */;
    %624 = reshape(%623, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %625 = @func_3748(%624) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
    %626 = cast(meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
    %627 = asinh(%626) /* ty=Tensor[(512), float32] */;
    %628 = cast(%627, dtype="float32") /* ty=Tensor[(512), float32] */;
    %629 = sqrt(%628) /* ty=Tensor[(512), float32] */;
    %630 = cast(meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
    %631 = shape_of(%627, dtype="int32") /* ty=Tensor[(1), int32] */;
    %632 = cast(%627, dtype="float32") /* ty=Tensor[(512), float32] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?), float32] */;
    %634 = power(%632, %633) /* ty=Tensor[(512), float32] */;
    %635 = cast(%634, dtype="float32") /* ty=Tensor[(512), float32] */;
    %636 = shape_of(%629, dtype="int32") /* ty=Tensor[(1), int32] */;
    %637 = cast(%629, dtype="float32") /* ty=Tensor[(512), float32] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?), float32] */;
    %639 = floor_divide(%637, %638) /* ty=Tensor[(512), float32] */;
    %640 = cast(%629, dtype="uint8") /* ty=Tensor[(512), uint8] */;
    %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(1), int32] */;
    %642 = cast(%639, dtype="uint8") /* ty=Tensor[(512), uint8] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %644 = cast(%634, dtype="bool") /* ty=Tensor[(512), bool] */;
    %645 = shape_of(%639, dtype="int32") /* ty=Tensor[(1), int32] */;
    %646 = cast(%639, dtype="bool") /* ty=Tensor[(512), bool] */;
    %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), bool] */;
    %648 = less(%646, %647) /* ty=Tensor[(512), bool] */;
    %649 = cast(%629, dtype="float32") /* ty=Tensor[(512), float32] */;
    %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(1), int32] */;
    %651 = cast(%648, dtype="float32") /* ty=Tensor[(512), float32] */;
    %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?), float32] */;
    %653 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %654 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 495), float32] */, dtype="float32") /* ty=Tensor[(1, 495), float32] */;
    %655 = cast(%var_3923, dtype="uint8") /* ty=Tensor[(52), uint8] */;
    %656 = cast(%var_3924, dtype="uint8") /* ty=Tensor[(104), uint8] */;
    %657 = reshape(%654, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %658 = reshape(%655, newshape=[52]) /* ty=Tensor[(52), uint8] */;
    %659 = reshape(%656, newshape=[104]) /* ty=Tensor[(104), uint8] */;
    %660 = @func_3803(%657, %658, %659) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), int16], Tensor[(495), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */;
    %661 = %613.0;
    %662 = %620.2;
    %663 = %621.2;
    %664 = acosh(%622) /* ty=Tensor[(840), float64] */;
    %665 = @func_3249() /* ty=Tensor[(5, 15, 12), float64] */;
    %666 = %625.0;
    %667 = subtract(%642, %643) /* ty=Tensor[(512), uint8] */;
    %668 = divide(%651, %652) /* ty=Tensor[(512), float32] */;
    %669 = %653.0;
    %670 = %660.2;
    (%661, %662, %663, %664, %665, %666, meta[relay.Constant][43] /* ty=Tensor[(1, 495), float32] */, %667, %668, %669, %670, %var_3923, %var_3924)
  };
  %671(%var_3937, %var_3938) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float64], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 495), float32], Tensor[(512), uint8], Tensor[(512), float32], Tensor[(5, 15, 12), float32], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8]) */
}

def @func_7001() -> (Tensor[(9, 16, 16), uint32], Tensor[(5, 15, 12), float32]) {
  %672 = @func_5998() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) */;
  %673 = @func_6855() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */;
  %674 = %672.1;
  %675 = %673.0;
  (%674, %675)
}

def @func_6897(%var_6892: Tensor[(5, 15, 12), float64]) -> Tensor[(5, 15, 12), bool] {
  %676 = @func_5998() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(9, 16, 16), uint32], Tensor[(2304), uint32]) */;
  %677 = %676.0;
  %678 = cast(%var_6892, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%680, %681) /* ty=Tensor[(5, 15, 12), bool] */
}

def @func_7423() -> Tensor[(8, 7, 15), float32] {
  %683 = fn () -> Tensor[(8, 7, 15), float32] {
    %682 = @func_7361() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(8, 7, 15), float32], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float64], Tensor[(8, 16, 4), float32]) */;
    %682.1
  };
  %683() /* ty=Tensor[(8, 7, 15), float32] */
}

def @func_5612() -> Tensor[(5, 15, 12), float32] {
  %685 = fn () -> Tensor[(5, 15, 12), float32] {
    %684 = @func_4387() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %684.0
  };
  %685() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_7123() -> Tensor[(5, 15, 12), float32] {
  %686 = fn () -> Tensor[(5, 15, 12), float32] {
    @func_4890() /* ty=Tensor[(5, 15, 12), float32] */
  };
  %686() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_4535(%var_4528: Tensor[(8, 6, 12), float32], %var_4529: Tensor[(8, 6, 12), float32]) -> (Tensor[(8, 6, 12), bool],) {
  %687 = cast(%var_4529, dtype="bool") /* ty=Tensor[(8, 6, 12), bool] */;
  %688 = shape_of(%var_4528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%var_4528, dtype="bool") /* ty=Tensor[(8, 6, 12), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = less(%689, %690) /* ty=Tensor[(8, 6, 12), bool] */;
  (%691,)
}

def @func_7003() -> (Tensor[(9, 16, 16), uint32], Tensor[(5, 15, 12), float32]) {
  @func_7001() /* ty=(Tensor[(9, 16, 16), uint32], Tensor[(5, 15, 12), float32]) */
}

def @func_4351() -> (Tensor[(5, 15, 12), float32],) {
  %692 = @func_4338() /* ty=Tensor[(5, 15, 12), float32] */;
  (%692,)
}

def @func_6552() -> Tensor[(5, 15, 12), float64] {
  %693 = fn () -> Tensor[(5, 15, 12), float64] {
    @func_3249() /* ty=Tensor[(5, 15, 12), float64] */
  };
  %693() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_6620(%var_6619: Tensor[(3, 4, 6), int64]) -> Tensor[(3, 4, 6), int64] {
  %698 = fn (%var_6599: Tensor[(3, 4, 6), int64]) -> Tensor[(3, 4, 6), int64] {
    %694 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 4, 6), int64] */, dtype="int64") /* ty=Tensor[(3, 4, 6), int64] */;
    %695 = shape_of(%var_6599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%var_6599, dtype="int64") /* ty=Tensor[(3, 4, 6), int64] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    minimum(%696, %697) /* ty=Tensor[(3, 4, 6), int64] */
  };
  %698(%var_6619) /* ty=Tensor[(3, 4, 6), int64] */
}

def @func_6762() -> (Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) {
  %705 = fn () -> (Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) {
    %699 = @func_6309() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %700 = @func_4960() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) */;
    %701 = @func_5348() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(2, 5, 12), int32]) */;
    %702 = %699.0;
    %703 = %700.2;
    %704 = %701.1;
    (%702, %703, %704)
  };
  %705() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(840), float32], Tensor[(2, 5, 12), int32]) */
}

def @func_6900(%var_6898: Tensor[(5, 15, 12), float64]) -> Tensor[(5, 15, 12), bool] {
  @func_6897(%var_6898) /* ty=Tensor[(5, 15, 12), bool] */
}

def @func_1225(%var_1219: Tensor[(9, 16, 16), uint32], %var_1220: Tensor[(9, 16, 16), uint32]) -> (Tensor[(9, 16, 16), uint32],) {
  %706 = cast(%var_1220, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %707 = shape_of(%var_1219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_1219, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %710 = bitwise_or(%708, %709) /* ty=Tensor[(9, 16, 16), uint32] */;
  (%710,)
}

def @func_2482(%var_2480: Tensor[(11, 9, 5), float32]) -> Tensor[(11, 9, 5), float32] {
  @func_2479(%var_2480) /* ty=Tensor[(11, 9, 5), float32] */
}

def @func_4891() -> Tensor[(5, 15, 12), float32] {
  %712 = fn () -> Tensor[(5, 15, 12), float32] {
    %711 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %711.0
  };
  %712() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_6084() -> Tensor[(5, 15, 12), float64] {
  %713 = fn () -> Tensor[(5, 15, 12), float64] {
    @func_3249() /* ty=Tensor[(5, 15, 12), float64] */
  };
  %713() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_5794() -> (Tensor[(5, 15, 12), float64],) {
  @func_5792() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @func_782(%var_780: Tensor[(8, 9, 8), int32]) -> Tensor[(8, 9, 8), int32] {
  @func_779(%var_780) /* ty=Tensor[(8, 9, 8), int32] */
}

def @func_4961() -> (Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) {
  %719 = fn () -> (Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) {
    %714 = cast(meta[relay.Constant][45] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %715 = reshape(%714, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %716 = @func_4263(%715) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
    %717 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
    %718 = %716.2;
    (%717, %718, meta[relay.Constant][45] /* ty=Tensor[(840), float32] */)
  };
  %719() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) */
}

def @func_6597(%var_6595: Tensor[(7, 14, 6), float64]) -> (Tensor[(5, 15, 12), float64], Tensor[(7, 14, 6), int16]) {
  @func_6594(%var_6595) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(7, 14, 6), int16]) */
}

def @func_4845() -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) {
  %720 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %721 = cast(meta[relay.Constant][46] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %722 = reshape(%721, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %723 = @func_3748(%722) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), int16]) */;
  %724 = %720.0;
  %725 = %723.1;
  (%724, %725, meta[relay.Constant][46] /* ty=Tensor[(495), float32] */)
}

def @func_4793() -> (Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float32]) {
  @func_4791() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float32]) */
}

def @func_5058(%var_5055: Tensor[(9, 2, 7), float64], %var_5056: Tensor[(9, 2, 7), float64], %var_5057: Tensor[(495), float32]) -> (Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) {
  @func_5053(%var_5055, %var_5056, %var_5057) /* ty=(Tensor[(9, 2, 7), float64], Tensor[(11, 9, 5), float32], Tensor[(495), float32], Tensor[(5, 15, 12), float64]) */
}

def @func_7110(%var_7108: Tensor[(104), uint8]) -> (Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(840), float32], Tensor[(52), uint8], Tensor[(104), int32]) {
  @func_7107(%var_7108) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(495), float32], Tensor[(840), float32], Tensor[(52), uint8], Tensor[(104), int32]) */
}

def @func_3370(%var_3332: Tensor[(2, 5, 9), float32], %var_3336: Tensor[(6, 140), float32]) -> (Tensor[(8, 7, 15), float32], Tensor[(6, 140), float32], Tensor[(5, 15, 12), float64], Tensor[(15, 6, 14), uint8], Tensor[(210), uint8], Tensor[(18, 70), uint8], Tensor[(2, 5, 9), uint16]) {
  %726 = cast(%var_3336, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %727 = reshape(%726, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %728 = cast(meta[relay.Constant][47] /* ty=Tensor[(210), uint8] */, dtype="uint8") /* ty=Tensor[(210), uint8] */;
  %729 = cast(meta[relay.Constant][48] /* ty=Tensor[(18, 70), uint8] */, dtype="uint8") /* ty=Tensor[(18, 70), uint8] */;
  %730 = reshape(%728, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint8] */;
  %731 = reshape(%729, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint8] */;
  %732 = @func_1299(%730, %731) /* ty=(Tensor[(15, 6, 14), uint8], Tensor[(15, 1, 14), float32]) */;
  %733 = cast(%var_3332, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
  %734 = tan(%733) /* ty=Tensor[(2, 5, 9), float32] */;
  %735 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(2, 5, 9), uint64] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="uint64") /* ty=Tensor[(2, 5, 9), uint64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %739 = subtract(%737, %738) /* ty=Tensor[(2, 5, 9), uint64] */;
  %740 = cast(%739, dtype="uint16") /* ty=Tensor[(2, 5, 9), uint16] */;
  %741 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%734, dtype="uint16") /* ty=Tensor[(2, 5, 9), uint16] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %744 = @func_718(%727) /* ty=Tensor[(8, 7, 15), float32] */;
  %745 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  %746 = %732.0;
  %747 = minimum(%742, %743) /* ty=Tensor[(2, 5, 9), uint16] */;
  (%744, %var_3336, %745, %746, meta[relay.Constant][47] /* ty=Tensor[(210), uint8] */, meta[relay.Constant][48] /* ty=Tensor[(18, 70), uint8] */, %747)
}

def @func_5665() -> (Tensor[(5, 15, 12), float64],) {
  %748 = @func_3171() /* ty=Tensor[(5, 15, 12), float64] */;
  (%748,)
}

def @func_7024() -> Tensor[(5, 15, 12), float32] {
  @func_7022() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_6452(%var_6388: Tensor[(490, 3), uint8], %var_6449: Tensor[(216), bool]) -> (Tensor[(5, 15, 12), float64], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(512), float32], Tensor[(840), float32], Tensor[(490, 3), int32], Tensor[(490, 3), uint8], Tensor[(5, 15, 12), float32], Tensor[(512), bool], Tensor[(8, 9, 8), int32], Tensor[(576), int32], Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), float64], Tensor[(6, 4, 9), bool], Tensor[(216), bool]) {
  %749 = @func_3589() /* ty=(Tensor[(5, 15, 12), float64],) */;
  %750 = cast(meta[relay.Constant][49] /* ty=Tensor[(2240), uint16] */, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
  %751 = cast(meta[relay.Constant][49] /* ty=Tensor[(2240), uint16] */, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
  %752 = reshape(%750, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
  %753 = reshape(%751, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), uint16] */;
  %754 = @func_3992(%752, %753) /* ty=(Tensor[(10, 14, 16), uint16], Tensor[(5, 15, 12), float32], Tensor[(10, 14, 16), float32], Tensor[(5, 15, 12), float64]) */;
  %755 = cast(%var_6388, dtype="uint8") /* ty=Tensor[(490, 3), uint8] */;
  %756 = cast(meta[relay.Constant][51] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %757 = cast(%var_6388, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
  %758 = cast(%var_6388, dtype="float32") /* ty=Tensor[(490, 3), float32] */;
  %759 = reshape(%755, newshape=[490, 3]) /* ty=Tensor[(490, 3), uint8] */;
  %760 = reshape(%756, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %761 = reshape(%757, newshape=[490, 3]) /* ty=Tensor[(490, 3), float32] */;
  %762 = reshape(%758, newshape=[490, 3]) /* ty=Tensor[(490, 3), float32] */;
  %763 = @func_5766(%759, %760, %761, %762) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(50, 1), int16], Tensor[(840), float32], Tensor[(10, 2240, 5), int8], Tensor[(490, 3), float32], Tensor[(490, 3), int32]) */;
  %764 = @func_3285() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %765 = %749.0;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %767 = cast(%765, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %768 = cast(meta[relay.Constant][50] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %769 = cast(meta[relay.Constant][51] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %770 = reshape(%766, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
  %771 = reshape(%767, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %772 = reshape(%768, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %773 = reshape(%769, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %774 = @func_4212(%770, %771, %772, %773) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(104), uint8], Tensor[(495), float32], Tensor[(52), uint8], Tensor[(104), uint8], Tensor[(5, 15, 12), float64], Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32]) */;
  %775 = %774.8;
  %776 = cast(%775, dtype="float32") /* ty=Tensor[(512), float32] */;
  %777 = rsqrt(%776) /* ty=Tensor[(512), float32] */;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(512), float64] */;
  %779 = acosh(%778) /* ty=Tensor[(512), float64] */;
  %780 = cast(%777, dtype="int32") /* ty=Tensor[(512), int32] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(1), int32] */;
  %782 = cast(%779, dtype="int32") /* ty=Tensor[(512), int32] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?), int32] */;
  %784 = bitwise_or(%782, %783) /* ty=Tensor[(512), int32] */;
  %785 = cast(%784, dtype="bool") /* ty=Tensor[(512), bool] */;
  %786 = shape_of(%777, dtype="int32") /* ty=Tensor[(1), int32] */;
  %787 = cast(%777, dtype="bool") /* ty=Tensor[(512), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?), bool] */;
  %789 = cast(meta[relay.Constant][52] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %790 = reshape(%789, newshape=[8, 9, 8]) /* ty=Tensor[(8, 9, 8), int32] */;
  %791 = cast(%var_6449, dtype="bool") /* ty=Tensor[(216), bool] */;
  %792 = reshape(%791, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), bool] */;
  %793 = @func_3409(%792) /* ty=(Tensor[(6, 4, 9), bool],) */;
  %794 = %754.0;
  %795 = %763.6;
  %796 = %764.0;
  %797 = greater_equal(%787, %788) /* ty=Tensor[(512), bool] */;
  %798 = @func_779(%790) /* ty=Tensor[(8, 9, 8), int32] */;
  %799 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %800 = @func_4338() /* ty=Tensor[(5, 15, 12), float32] */;
  %801 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
  %802 = %793.0;
  (%765, %794, meta[relay.Constant][49] /* ty=Tensor[(2240), uint16] */, meta[relay.Constant][50] /* ty=Tensor[(512), float32] */, meta[relay.Constant][51] /* ty=Tensor[(840), float32] */, %795, %var_6388, %796, %797, %798, meta[relay.Constant][52] /* ty=Tensor[(576), int32] */, %799, %800, %801, %802, %var_6449)
}

def @func_7022() -> Tensor[(5, 15, 12), float32] {
  %803 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
  %803.0
}

def @func_5538() -> (Tensor[(5, 15, 12), float64],) {
  @func_5536() /* ty=(Tensor[(5, 15, 12), float64],) */
}

def @func_4847() -> (Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) {
  @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */
}

def @func_5957(%var_5901: Tensor[(1470), uint8], %var_5912: Tensor[(1470), uint8]) -> (Tensor[(1470), bool], Tensor[(1470), int64], Tensor[(5, 15, 12), float64]) {
  %804 = @func_4960() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(1470), uint8], Tensor[(840), float32]) */;
  %805 = %804.1;
  %806 = cast(%var_5901, dtype="uint16") /* ty=Tensor[(1470), uint16] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(1), int32] */;
  %808 = cast(%805, dtype="uint16") /* ty=Tensor[(1470), uint16] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %810 = bitwise_xor(%808, %809) /* ty=Tensor[(1470), uint16] */;
  %811 = cast(%810, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %812 = shape_of(%805, dtype="int32") /* ty=Tensor[(1), int32] */;
  %813 = cast(%805, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?), bool] */;
  %815 = cast(%var_5912, dtype="int64") /* ty=Tensor[(1470), int64] */;
  %816 = shape_of(%805, dtype="int32") /* ty=Tensor[(1), int32] */;
  %817 = cast(%805, dtype="int64") /* ty=Tensor[(1470), int64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?), int64] */;
  %819 = @func_4845() /* ty=(Tensor[(5, 15, 12), float64], Tensor[(5, 15, 12), float64], Tensor[(495), float32]) */;
  %820 = greater_equal(%813, %814) /* ty=Tensor[(1470), bool] */;
  %821 = right_shift(%817, %818) /* ty=Tensor[(1470), int64] */;
  %822 = %819.1;
  (%820, %821, %822)
}

def @func_6857() -> (Tensor[(5, 15, 12), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) {
  @func_6855() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(4, 2, 13), uint8], Tensor[(52), uint8], Tensor[(104), uint8]) */
}

def @func_4339() -> Tensor[(5, 15, 12), float32] {
  %826 = fn () -> Tensor[(5, 15, 12), float32] {
    %823 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
    %824 = %823.1;
    %825 = cast(%824, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
    asinh(%825) /* ty=Tensor[(5, 15, 12), float32] */
  };
  %826() /* ty=Tensor[(5, 15, 12), float32] */
}

def @func_3173() -> Tensor[(5, 15, 12), float64] {
  @func_3171() /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_5348() -> (Tensor[(5, 15, 12), float64], Tensor[(2, 5, 12), int32]) {
  %827 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 12), float32] */;
  %828 = atan(%827) /* ty=Tensor[(2, 5, 12), float32] */;
  %829 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 5, 12), float32] */, dtype="int32") /* ty=Tensor[(2, 5, 12), int32] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%828, dtype="int32") /* ty=Tensor[(2, 5, 12), int32] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %833 = @func_3640() /* ty=Tensor[(5, 15, 12), float64] */;
  %834 = bitwise_or(%831, %832) /* ty=Tensor[(2, 5, 12), int32] */;
  (%833, %834)
}

def @func_6117() -> Tensor[(8, 7, 15), float32] {
  %835 = @func_3564() /* ty=(Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), uint32], Tensor[(8, 7, 15), float32], Tensor[(840), float32]) */;
  %835.2
}

def @func_5283(%var_5275: Tensor[(4, 15, 5), uint16], %var_5276: Tensor[(4, 15, 5), uint16], %var_5277: Tensor[(4, 15, 5), uint16], %var_5278: Tensor[(64, 8), float32], %var_5279: Tensor[(840), float32], %var_5280: Tensor[(104), uint8], %var_5281: Tensor[(1470), uint8], %var_5282: Tensor[(2240), uint16]) -> (Tensor[(4, 15, 5), uint8], Tensor[(5, 15, 12), float32], Tensor[(4, 15, 5), float64], Tensor[(5, 15, 12), float64], Tensor[(8, 16, 4), float32], Tensor[(64, 8), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(26, 2), uint8], Tensor[(104), uint8], Tensor[(2240), uint16], Tensor[(1470), uint8], Tensor[(2240), uint16]) {
  %872 = fn (%var_5193: Tensor[(4, 15, 5), uint16], %var_5194: Tensor[(4, 15, 5), uint16], %var_5206: Tensor[(4, 15, 5), uint16], %var_5257: Tensor[(64, 8), float32], %var_5258: Tensor[(840), float32], %var_5266: Tensor[(104), uint8], %var_5271: Tensor[(1470), uint8], %var_5272: Tensor[(2240), uint16]) -> (Tensor[(4, 15, 5), uint8], Tensor[(5, 15, 12), float32], Tensor[(4, 15, 5), float64], Tensor[(5, 15, 12), float64], Tensor[(8, 16, 4), float32], Tensor[(64, 8), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(26, 2), uint8], Tensor[(104), uint8], Tensor[(2240), uint16], Tensor[(1470), uint8], Tensor[(2240), uint16]) {
    %836 = cast(%var_5206, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
    %837 = shape_of(%var_5194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%var_5194, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %840 = @func_4351() /* ty=(Tensor[(5, 15, 12), float32],) */;
    %841 = cast(%var_5194, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
    %842 = shape_of(%var_5193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %843 = cast(%var_5193, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
    %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %845 = maximum(%843, %844) /* ty=Tensor[(4, 15, 5), uint16] */;
    %846 = cast(%845, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
    %847 = cast(%var_5257, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
    %848 = cast(%var_5258, dtype="float32") /* ty=Tensor[(840), float32] */;
    %849 = cast(%var_5257, dtype="uint64") /* ty=Tensor[(64, 8), uint64] */;
    %850 = reshape(%847, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float32] */;
    %851 = reshape(%848, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %852 = reshape(%849, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
    %853 = @func_1071(%850, %851, %852) /* ty=(Tensor[(8, 16, 4), float32], Tensor[(8, 7, 15), float32], Tensor[(840), float32], Tensor[(8, 16, 4), bool]) */;
    %854 = cast(meta[relay.Constant][54] /* ty=Tensor[(26, 2), uint8] */, dtype="uint8") /* ty=Tensor[(26, 2), uint8] */;
    %855 = cast(%var_5266, dtype="uint8") /* ty=Tensor[(104), uint8] */;
    %856 = reshape(%854, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
    %857 = reshape(%855, newshape=[4, 2, 13]) /* ty=Tensor[(4, 2, 13), uint8] */;
    %858 = %840.0;
    %859 = cast(%858, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
    %860 = cast(%var_5271, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %861 = cast(%var_5272, dtype="uint16") /* ty=Tensor[(2240), uint16] */;
    %862 = reshape(%859, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float32] */;
    %863 = reshape(%860, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %864 = reshape(%861, newshape=[2240]) /* ty=Tensor[(2240), uint16] */;
    %865 = @func_4514(%862, %863, %864) /* ty=(Tensor[(840), float32], Tensor[(1470), uint8], Tensor[(512), float32], Tensor[(840), float32], Tensor[(10, 14, 16), uint16], Tensor[(2240), uint16], Tensor[(5, 15, 12), bool]) */;
    %866 = add(%838, %839) /* ty=Tensor[(4, 15, 5), uint8] */;
    %867 = sin(%846) /* ty=Tensor[(4, 15, 5), float64] */;
    %868 = @func_4018() /* ty=Tensor[(5, 15, 12), float64] */;
    %869 = %853.0;
    %870 = @func_3492(%856, %857) /* ty=Tensor[(4, 2, 13), uint8] */;
    %871 = %865.5;
    (%866, %858, %867, %868, %869, %var_5257, %var_5258, %870, meta[relay.Constant][54] /* ty=Tensor[(26, 2), uint8] */, %var_5266, %871, %var_5271, %var_5272)
  };
  %872(%var_5275, %var_5276, %var_5277, %var_5278, %var_5279, %var_5280, %var_5281, %var_5282) /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(5, 15, 12), float32], Tensor[(4, 15, 5), float64], Tensor[(5, 15, 12), float64], Tensor[(8, 16, 4), float32], Tensor[(64, 8), float32], Tensor[(840), float32], Tensor[(4, 2, 13), uint8], Tensor[(26, 2), uint8], Tensor[(104), uint8], Tensor[(2240), uint16], Tensor[(1470), uint8], Tensor[(2240), uint16]) */
}

def @func_5897(%var_5895: Tensor[(1, 15, 5), int32], %var_5896: Tensor[(2, 15, 5), int32]) -> (Tensor[(2, 15, 5), int32], Tensor[(7, 9, 6), float64]) {
  %878 = fn (%var_5854: Tensor[(1, 15, 5), int32], %var_5855: Tensor[(2, 15, 5), int32]) -> (Tensor[(2, 15, 5), int32], Tensor[(7, 9, 6), float64]) {
    %873 = cast(%var_5854, dtype="int32") /* ty=Tensor[(1, 15, 5), int32] */;
    %874 = cast(%var_5855, dtype="int32") /* ty=Tensor[(2, 15, 5), int32] */;
    %875 = @func_5083() /* ty=(Tensor[(7, 9, 6), float64],) */;
    %876 = logical_xor(%873, %874) /* ty=Tensor[(2, 15, 5), int32] */;
    %877 = %875.0;
    (%876, %877)
  };
  %878(%var_5895, %var_5896) /* ty=(Tensor[(2, 15, 5), int32], Tensor[(7, 9, 6), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen120/build/output.py:2015: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen120/build/output.py", line 2020, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(130) tvmgen_default_fused_reshape_logical_or_kernel0(signed char* __restrict__ T_logical_or, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_logical_or[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) || ((bool)placeholder1[(((int)threadIdx.x))])));
}

extern "C" __global__ void __launch_bounds__(130) tvmgen_default_fused_cast_cast_reshape_logical_xor_kernel0(short* __restrict__ T_logical_xor, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_logical_xor[(((int)threadIdx.x))] = (((short)((bool)placeholder[(((int)threadIdx.x))])) ^ ((short)((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

