==========mod==========
#[version = "0.0.5"]
def @func_5021() -> Tensor[(2028), uint16] {
  @func_3826() /* ty=Tensor[(2028), uint16] */
}

def @func_12482() -> bool {
  %0 = @func_11431() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) */;
  %0.2
}

def @func_4986() -> (bool,) {
  %1 = @func_4115() /* ty=(bool,) */;
  %2 = %1.0;
  (%2,)
}

def @func_16460() -> Tensor[(2028), uint16] {
  %3 = @func_13755() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 24), float64]) */;
  %3.0
}

def @func_17621() -> Tensor[(2028), uint16] {
  %4 = @func_10484() /* ty=(Tensor[(2028), uint16],) */;
  %4.0
}

def @func_13951() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(468), uint8], Tensor[(672), uint8], Tensor[(330), float32], bool, Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16]) {
  %5 = @func_12669() /* ty=(Tensor[(2028), uint16],) */;
  %6 = @func_8515() /* ty=(bool, Tensor[(2028), uint16]) */;
  %7 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %8 = @func_12275() /* ty=(Tensor[(2028), int16],) */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(468), uint8] */, dtype="uint8") /* ty=Tensor[(468), uint8] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(468), uint8] */, dtype="uint8") /* ty=Tensor[(468), uint8] */;
  %11 = reshape(%9, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %12 = reshape(%10, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %13 = @func_5577(%11, %12) /* ty=(Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %15 = reshape(%14, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %16 = @func_6240(%15) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) */;
  %17 = @func_6652() /* ty=(bool, Tensor[(2028), uint16]) */;
  %18 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %19 = @func_11431() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) */;
  %20 = @func_8172() /* ty=(Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) */;
  %21 = %5.0;
  %22 = %6.1;
  %23 = %7.2;
  %24 = %8.0;
  %25 = %13.1;
  %26 = %16.5;
  %27 = %17.0;
  %28 = %18.0;
  %29 = %19.3;
  %30 = %20.0;
  (%21, %22, %23, %24, %25, meta[relay.Constant][0] /* ty=Tensor[(468), uint8] */, %26, meta[relay.Constant][1] /* ty=Tensor[(330), float32] */, %27, %28, %29, %30)
}

def @func_7460(%var_7436: Tensor[(392), uint64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 7, 4), bool], Tensor[(392), uint64], Tensor[(4, 9, 12), bool], Tensor[(432), float32], bool) {
  %31 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
  %32 = cast(%var_7436, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %33 = cast(%var_7436, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %34 = reshape(%32, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint64] */;
  %35 = reshape(%33, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint64] */;
  %36 = @func_7312(%34, %35) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(2028), uint16], Tensor[(14, 7, 4), float32]) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %38 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %39 = reshape(%37, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), float32] */;
  %40 = reshape(%38, newshape=[]) /* ty=bool */;
  %41 = @func_3060(%39, %40) /* ty=(Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) */;
  %42 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  %43 = %31.0;
  %44 = %36.0;
  %45 = %41.0;
  (%42, %43, %44, %var_7436, %45, meta[relay.Constant][2] /* ty=Tensor[(432), float32] */, True /* ty=bool */)
}

def @func_13503() -> (Tensor[(8, 15, 16), float64],) {
  %46 = @func_13354() /* ty=Tensor[(8, 15, 16), float64] */;
  (%46,)
}

def @func_9761() -> (Tensor[(2028), uint16],) {
  %47 = @func_8372() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) */;
  %48 = %47.1;
  (%48,)
}

def @func_9881() -> Tensor[(2028), uint16] {
  @func_9792() /* ty=Tensor[(2028), uint16] */
}

def @func_5734(%var_5685: int32, %var_5708: Tensor[(14, 154), float32]) -> (Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) {
  %49 = cast(%var_5685, dtype="bool") /* ty=bool */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 6, 5), int32] */, dtype="bool") /* ty=Tensor[(5, 6, 5), bool] */;
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(2028), int16] */, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %52 = reshape(%51, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %53 = @func_5395(%52) /* ty=(Tensor[(2028), bool],) */;
  %54 = cast(%var_5708, dtype="float32") /* ty=Tensor[(14, 154), float32] */;
  %55 = cast(%var_5708, dtype="float32") /* ty=Tensor[(14, 154), float32] */;
  %56 = reshape(%54, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %57 = reshape(%55, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %58 = @func_51(%56, %57) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %59 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %60 = less(%49, %50) /* ty=Tensor[(5, 6, 5), bool] */;
  %61 = %53.0;
  %62 = %58.1;
  %63 = %59.0;
  (%60, %61, meta[relay.Constant][4] /* ty=Tensor[(2028), int16] */, %62, %var_5708, %63)
}

def @func_12275() -> (Tensor[(2028), int16],) {
  %64 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
  %65 = %64.1;
  (%65,)
}

def @func_10073(%var_10025: Tensor[(416), float64], %var_10031: Tensor[(126), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(14, 5, 14), uint8], Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(126), float64], int32, Tensor[(126), float64], Tensor[(432), float32]) {
  %66 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %69 = reshape(%68, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %70 = @func_9011(%69) /* ty=(Tensor[(2028), float32],) */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(980), uint8] */, dtype="uint8") /* ty=Tensor[(980), uint8] */;
  %72 = reshape(%71, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
  %73 = @func_6979(%72) /* ty=Tensor[(14, 5, 14), uint8] */;
  %74 = cast(%73, dtype="uint8") /* ty=Tensor[(14, 5, 14), uint8] */;
  %75 = reshape(%74, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
  %76 = cast(%var_10025, dtype="float64") /* ty=Tensor[(416), float64] */;
  %77 = reshape(%76, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %78 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %79 = cast(%var_10031, dtype="float64") /* ty=Tensor[(126), float64] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %81 = reshape(%78, newshape=[]) /* ty=int32 */;
  %82 = reshape(%79, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %83 = reshape(%80, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %84 = @func_7055(%81, %82, %83) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) */;
  %85 = %70.0;
  %86 = @func_6979(%75) /* ty=Tensor[(14, 5, 14), uint8] */;
  %87 = @func_829(%77) /* ty=Tensor[(16, 2, 13), float64] */;
  %88 = %84.5;
  (%67, %85, %73, meta[relay.Constant][5] /* ty=Tensor[(980), uint8] */, %86, %87, %var_10025, %88, 5 /* ty=int32 */, %var_10031, meta[relay.Constant][6] /* ty=Tensor[(432), float32] */)
}

def @func_8038(%var_8033: Tensor[(980), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(2, 14, 7), float32]) {
  %89 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
  %90 = @func_6933() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %91 = cast(%var_8033, dtype="uint8") /* ty=Tensor[(980), uint8] */;
  %92 = reshape(%91, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
  %93 = %89.0;
  %94 = %90.0;
  %95 = @func_6979(%92) /* ty=Tensor[(14, 5, 14), uint8] */;
  %96 = @func_5945() /* ty=Tensor[(2, 14, 7), float32] */;
  (%93, %94, %95, %var_8033, %96)
}

def @func_15477() -> (Tensor[(2028), uint16],) {
  %97 = @func_9655() /* ty=Tensor[(2028), uint16] */;
  (%97,)
}

def @func_10209() -> (Tensor[(2028), float32], bool, Tensor[(2028), uint16]) {
  %98 = @func_6098() /* ty=Tensor[(2028), uint16] */;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %100 = @func_6336() /* ty=(bool,) */;
  %101 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %102 = asin(%99) /* ty=Tensor[(2028), float32] */;
  %103 = %100.0;
  %104 = %101.0;
  (%102, %103, %104)
}

def @func_12669() -> (Tensor[(2028), uint16],) {
  %105 = @func_9761() /* ty=(Tensor[(2028), uint16],) */;
  %106 = %105.0;
  (%106,)
}

def @func_17311() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %107 = @func_7565() /* ty=Tensor[(2028), uint16] */;
  %108 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  (%107, %108)
}

def @func_9792() -> Tensor[(2028), uint16] {
  %109 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %109.0
}

def @func_9716() -> (Tensor[(8, 15, 16), float32],) {
  %110 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %111 = %110.0;
  (%111,)
}

def @func_7957(%var_7955: Tensor[(4, 24), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) {
  %112 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %113 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
  %114 = cast(%var_7955, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %115 = reshape(%114, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %116 = @func_1447(%115) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %117 = %112.2;
  %118 = %113.0;
  %119 = %116.0;
  (%117, %118, %119, %var_7955)
}

def @func_6363() -> (Tensor[(49, 4), float32], Tensor[(49, 4), float64]) {
  %120 = @func_5922() /* ty=(Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) */;
  %121 = %120.2;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %123 = cos(%122) /* ty=Tensor[(49, 4), float32] */;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %125 = cast(%123, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
  %126 = cosh(%124) /* ty=Tensor[(49, 4), float32] */;
  %127 = atan(%125) /* ty=Tensor[(49, 4), float64] */;
  (%126, %127)
}

def @func_16180() -> (Tensor[(2028), uint16],) {
  %128 = @func_14532() /* ty=Tensor[(2028), uint16] */;
  (%128,)
}

def @func_13010() -> Tensor[(2028), uint16] {
  %129 = @func_10484() /* ty=(Tensor[(2028), uint16],) */;
  %129.0
}

def @func_892(%var_846: Tensor[(3, 14, 3), float64]) -> (Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  %130 = cast(%var_846, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %131 = cast(meta[relay.Constant][7] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %132 = reshape(%131, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %133 = log10(%130) /* ty=Tensor[(3, 14, 3), float64] */;
  %134 = @func_829(%132) /* ty=Tensor[(16, 2, 13), float64] */;
  (%133, %134, meta[relay.Constant][7] /* ty=Tensor[(416), float64] */)
}

def @func_8372() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) {
  %135 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %137 = reshape(%136, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
  %138 = @func_7957(%137) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) */;
  %139 = %135.0;
  %140 = %138.1;
  (%139, %140, meta[relay.Constant][8] /* ty=Tensor[(96), float64] */)
}

def @func_5181() -> (Tensor[(2028), uint16],) {
  %141 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  (%141,)
}

def @func_15299() -> (bool,) {
  %142 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %143 = %142.2;
  (%143,)
}

def @func_13580() -> Tensor[(126), float64] {
  @func_11073() /* ty=Tensor[(126), float64] */
}

def @func_13397() -> (Tensor[(2028), uint16],) {
  %144 = @func_6933() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %145 = %144.0;
  (%145,)
}

def @func_12232() -> Tensor[(2028), uint16] {
  @func_6098() /* ty=Tensor[(2028), uint16] */
}

def @func_3060(%var_3025: Tensor[(4, 9, 12), float32], %var_3052: bool) -> (Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) {
  %146 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 9, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 9, 12), bool] */;
  %147 = shape_of(%var_3025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_3025, dtype="bool") /* ty=Tensor[(4, 9, 12), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = cast(%var_3025, dtype="float32") /* ty=Tensor[(4, 9, 12), float32] */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(2028), uint16] */, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(2028), uint16] */, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %153 = reshape(%151, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %154 = reshape(%152, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %155 = cast(meta[relay.Constant][11] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %156 = reshape(%155, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), float64] */;
  %157 = @func_1724(%156) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) */;
  %158 = cast(%var_3052, dtype="bool") /* ty=bool */;
  %159 = %157.2;
  %160 = cast(%159, dtype="uint16") /* ty=Tensor[(13, 156), uint16] */;
  %161 = reshape(%158, newshape=[]) /* ty=bool */;
  %162 = reshape(%160, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %163 = @func_1950(%161, %162) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %164 = greater_equal(%148, %149) /* ty=Tensor[(4, 9, 12), bool] */;
  %165 = erf(%150) /* ty=Tensor[(4, 9, 12), float32] */;
  %166 = @func_170(%153, %154) /* ty=Tensor[(13, 13, 12), uint16] */;
  %167 = %163.2;
  (%164, %165, %166, meta[relay.Constant][10] /* ty=Tensor[(2028), uint16] */, %159, meta[relay.Constant][11] /* ty=Tensor[(1456), float64] */, %167, %var_3052)
}

def @func_16258() -> Tensor[(2028), uint16] {
  %168 = @func_12458() /* ty=(Tensor[(2028), uint16],) */;
  %168.0
}

def @func_4219() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) {
  %169 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
  %170 = cast(meta[relay.Constant][12] /* ty=Tensor[(55, 6), float32] */, dtype="float32") /* ty=Tensor[(55, 6), float32] */;
  %171 = reshape(%170, newshape=[165, 2]) /* ty=Tensor[(165, 2), float32] */;
  %172 = @func_3450(%171) /* ty=(Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) */;
  %173 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %174 = %169.0;
  %175 = %172.0;
  (%173, %174, %175, meta[relay.Constant][12] /* ty=Tensor[(55, 6), float32] */)
}

def @func_8061() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %176 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
  %177 = @func_5404() /* ty=(Tensor[(2028), uint16],) */;
  %178 = %176.0;
  %179 = %177.0;
  (%178, %179)
}

def @func_3922(%var_3890: Tensor[(14, 6, 8), uint8], %var_3891: Tensor[(14, 6, 8), uint8]) -> (Tensor[(14, 6, 8), float32],) {
  %180 = cast(%var_3891, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %181 = shape_of(%var_3890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%var_3890, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %184 = greater(%182, %183) /* ty=Tensor[(14, 6, 8), bool] */;
  %185 = cast(%var_3891, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = less(%187, %188) /* ty=Tensor[(14, 6, 8), bool] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(14, 6, 8), float32] */;
  %191 = sin(%190) /* ty=Tensor[(14, 6, 8), float32] */;
  (%191,)
}

def @func_15849() -> (Tensor[(2028), float32], Tensor[(10, 9, 13), bool], Tensor[(2028), int16]) {
  %192 = @func_15579() /* ty=(Tensor[(2028), float32],) */;
  %193 = %192.0;
  %194 = cast(%193, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %195 = reshape(%194, newshape=[1, 2028]) /* ty=Tensor[(1, 2028), uint16] */;
  %196 = @func_10475(%195) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) */;
  %197 = @func_12275() /* ty=(Tensor[(2028), int16],) */;
  %198 = %196.0;
  %199 = %197.0;
  (%193, %198, %199)
}

def @func_5119() -> Tensor[(2028), uint16] {
  @func_5064() /* ty=Tensor[(2028), uint16] */
}

def @func_18420() -> Tensor[(126), float64] {
  @func_13580() /* ty=Tensor[(126), float64] */
}

def @func_13148() -> (Tensor[(2028), uint16],) {
  %200 = @func_11493() /* ty=Tensor[(2028), uint16] */;
  (%200,)
}

def @func_16152() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(330), float32], Tensor[(2028), uint16]) {
  %201 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
  %202 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
  %203 = cast(meta[relay.Constant][13] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %204 = reshape(%203, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %205 = @func_6240(%204) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) */;
  %206 = %201.0;
  %207 = %202.0;
  %208 = %205.2;
  %209 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  (%206, %207, %208, meta[relay.Constant][13] /* ty=Tensor[(330), float32] */, %209)
}

def @func_5577(%var_5533: Tensor[(13, 3, 12), uint8], %var_5534: Tensor[(13, 3, 12), uint8]) -> (Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %210 = cast(%var_5534, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %211 = shape_of(%var_5533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%var_5533, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = equal(%212, %213) /* ty=Tensor[(13, 3, 12), bool] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(13, 3, 12), float64] */;
  %216 = @func_5404() /* ty=(Tensor[(2028), uint16],) */;
  %217 = exp(%215) /* ty=Tensor[(13, 3, 12), float64] */;
  %218 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %219 = %216.0;
  (%217, %218, %219)
}

def @func_3998() -> (bool, Tensor[(2028), uint16], Tensor[(416), float64]) {
  %220 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="bool") /* ty=bool */;
  %223 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %224 = cast(%223, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %225 = reshape(%222, newshape=[]) /* ty=bool */;
  %226 = reshape(%224, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %227 = @func_1950(%225, %226) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %228 = %227.3;
  (%221, %223, %228)
}

def @func_4303() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %229 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %230 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %231 = %229.1;
  %232 = %230.0;
  (%231, %232)
}

def @func_11731() -> (Tensor[(14, 6, 8), float32],) {
  %233 = @func_9825() /* ty=(Tensor[(14, 6, 8), float32],) */;
  %234 = %233.0;
  (%234,)
}

def @func_10556() -> Tensor[(2028), uint16] {
  %235 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %235.0
}

def @func_13962(%var_13958: Tensor[(8, 6, 14), float32]) -> Tensor[(8, 6, 14), float32] {
  %236 = cast(%var_13958, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  asinh(%236) /* ty=Tensor[(8, 6, 14), float32] */
}

def @func_5245() -> (Tensor[(2028), uint16],) {
  %237 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %238 = %237.0;
  (%238,)
}

def @func_3019() -> (Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) {
  %239 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %240 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(2028), uint16] */, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %242 = reshape(%240, newshape=[]) /* ty=bool */;
  %243 = reshape(%241, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %244 = @func_1950(%242, %243) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %245 = log2(%239) /* ty=Tensor[(2, 14, 7), float32] */;
  %246 = %244.2;
  (%245, %246, False /* ty=bool */, meta[relay.Constant][15] /* ty=Tensor[(2028), uint16] */)
}

def @func_8992() -> (Tensor[(2028), uint16],) {
  %247 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  (%247,)
}

def @func_9682(%var_9678: Tensor[(9, 13, 10), float32]) -> Tensor[(9, 13, 10), float32] {
  %248 = cast(%var_9678, dtype="float32") /* ty=Tensor[(9, 13, 10), float32] */;
  sinh(%248) /* ty=Tensor[(9, 13, 10), float32] */
}

def @func_14297() -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %249 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %250 = @func_11308() /* ty=Tensor[(2028), float32] */;
  %251 = @func_13212() /* ty=Tensor[(2028), uint16] */;
  %252 = %249.2;
  (%250, %251, %252)
}

def @func_10484() -> (Tensor[(2028), uint16],) {
  %253 = @func_9655() /* ty=Tensor[(2028), uint16] */;
  (%253,)
}

def @func_9011(%var_9002: Tensor[(2028), uint16]) -> (Tensor[(2028), float32],) {
  %254 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
  %255 = %254.0;
  %256 = cast(%var_9002, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(1), int32] */;
  %258 = cast(%255, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?), float32] */;
  %260 = maximum(%258, %259) /* ty=Tensor[(2028), float32] */;
  (%260,)
}

def @func_6771(%var_6744: Tensor[(2028), uint16], %var_6745: Tensor[(126), float64], %var_6746: Tensor[(2156), float32]) -> (Tensor[(8, 15, 16), float32], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(49, 4), float32]) {
  %261 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %262 = cast(%var_6744, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %263 = cast(%var_6745, dtype="float64") /* ty=Tensor[(126), float64] */;
  %264 = cast(%var_6746, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %265 = reshape(%262, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %266 = reshape(%263, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %267 = reshape(%264, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %268 = @func_3638(%265, %266, %267) /* ty=(Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) */;
  %269 = @func_5922() /* ty=(Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) */;
  %270 = %261.0;
  %271 = %268.3;
  %272 = %269.2;
  (%270, %271, %var_6744, %var_6745, %var_6746, %272)
}

def @func_17077() -> (bool, Tensor[(16, 2, 13), bool], Tensor[(416), float64], Tensor[(2028), uint16]) {
  %273 = @func_15299() /* ty=(bool,) */;
  %274 = cast(meta[relay.Constant][16] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %275 = reshape(%274, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %276 = @func_8789(%275) /* ty=(Tensor[(16, 2, 13), bool],) */;
  %277 = %273.0;
  %278 = %276.0;
  %279 = @func_16227() /* ty=Tensor[(2028), uint16] */;
  (%277, %278, meta[relay.Constant][16] /* ty=Tensor[(416), float64] */, %279)
}

def @func_5479(%var_5465: Tensor[(2028), uint16]) -> Tensor[(2028), int32] {
  %280 = @func_5181() /* ty=(Tensor[(2028), uint16],) */;
  %281 = %280.0;
  %282 = cast(%var_5465, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(1), int32] */;
  %284 = cast(%281, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?), int32] */;
  bitwise_xor(%284, %285) /* ty=Tensor[(2028), int32] */
}

def @func_12348() -> Tensor[(2028), uint16] {
  %286 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %286.2
}

def @func_9214(%var_9209: Tensor[(672), uint8]) -> (Tensor[(2028), uint16], bool, Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  %287 = @func_4986() /* ty=(bool,) */;
  %288 = cast(%var_9209, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %289 = cast(%var_9209, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %290 = reshape(%288, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %291 = reshape(%289, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %292 = @func_3922(%290, %291) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %293 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  %294 = %287.0;
  %295 = %292.0;
  (%293, %294, %295, %var_9209)
}

def @func_13686() -> (Tensor[(2028), uint16], bool, Tensor[(2028), float32]) {
  %296 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  %297 = cast(%296, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %298 = reshape(%297, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %299 = @func_9011(%298) /* ty=(Tensor[(2028), float32],) */;
  %300 = @func_12482() /* ty=bool */;
  %301 = %299.0;
  (%296, %300, %301)
}

def @func_7875() -> bool {
  %302 = @func_4986() /* ty=(bool,) */;
  %302.0
}

def @func_7387() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %303 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %304 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %305 = %303.0;
  %306 = %304.0;
  (%305, %306)
}

def @func_13241(%var_13233: int32) -> (Tensor[(2028), uint16], Tensor[(154, 14), float32], int32, Tensor[(126), float64], Tensor[(4, 108), float32]) {
  %307 = cast(%var_13233, dtype="int32") /* ty=int32 */;
  %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %309 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %310 = reshape(%307, newshape=[]) /* ty=int32 */;
  %311 = reshape(%308, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %312 = reshape(%309, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %313 = @func_7055(%310, %311, %312) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) */;
  %314 = @func_10556() /* ty=Tensor[(2028), uint16] */;
  %315 = %313.3;
  (%314, %315, %var_13233, meta[relay.Constant][17] /* ty=Tensor[(126), float64] */, meta[relay.Constant][18] /* ty=Tensor[(4, 108), float32] */)
}

def @func_7220(%var_7173: Tensor[(1, 5, 2), float32]) -> (Tensor[(1, 5, 2), float32],) {
  %316 = cast(%var_7173, dtype="float32") /* ty=Tensor[(1, 5, 2), float32] */;
  %317 = asin(%316) /* ty=Tensor[(1, 5, 2), float32] */;
  (%317,)
}

def @func_9480() -> (Tensor[(96), float64],) {
  %318 = @func_8372() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) */;
  %319 = %318.2;
  (%319,)
}

def @func_13714() -> (Tensor[(2028), float32],) {
  %320 = @func_5218() /* ty=Tensor[(2028), float32] */;
  (%320,)
}

def @func_14569() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %321 = @func_5064() /* ty=Tensor[(2028), uint16] */;
  %322 = @func_7565() /* ty=Tensor[(2028), uint16] */;
  (%321, %322)
}

def @func_9655() -> Tensor[(2028), uint16] {
  @func_7741() /* ty=Tensor[(2028), uint16] */
}

def @func_1724(%var_1713: Tensor[(13, 16, 7), float64]) -> (Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) {
  %323 = cast(%var_1713, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
  %324 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 156), uint16] */, dtype="uint16") /* ty=Tensor[(13, 156), uint16] */;
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 156), uint16] */, dtype="uint16") /* ty=Tensor[(13, 156), uint16] */;
  %326 = reshape(%324, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %327 = reshape(%325, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %328 = rsqrt(%323) /* ty=Tensor[(13, 16, 7), float64] */;
  %329 = @func_170(%326, %327) /* ty=Tensor[(13, 13, 12), uint16] */;
  (%328, %329, meta[relay.Constant][19] /* ty=Tensor[(13, 156), uint16] */)
}

def @func_6933() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %330 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %331 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %332 = %330.0;
  %333 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  %334 = %331.0;
  (%332, %333, %334)
}

def @func_8658() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %335 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
  %336 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %337 = @func_5181() /* ty=(Tensor[(2028), uint16],) */;
  %338 = %335.0;
  %339 = %336.0;
  %340 = %337.0;
  (%338, %339, %340)
}

def @func_6979(%var_6970: Tensor[(14, 5, 14), uint8]) -> Tensor[(14, 5, 14), uint8] {
  %341 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 5, 14), uint8] */, dtype="uint8") /* ty=Tensor[(14, 5, 14), uint8] */;
  %342 = shape_of(%var_6970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_6970, dtype="uint8") /* ty=Tensor[(14, 5, 14), uint8] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%343, %344) /* ty=Tensor[(14, 5, 14), uint8] */
}

def @func_12881() -> (Tensor[(2028), uint16], Tensor[(2028), float32]) {
  %345 = @func_10347() /* ty=(Tensor[(2028), float32],) */;
  %346 = @func_9655() /* ty=Tensor[(2028), uint16] */;
  %347 = %345.0;
  (%346, %347)
}

def @func_4062() -> (Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) {
  %348 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %349 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 15, 16), float64] */, dtype="float32") /* ty=Tensor[(8, 15, 16), float32] */;
  %350 = atanh(%348) /* ty=Tensor[(8, 15, 16), float64] */;
  %351 = sigmoid(%349) /* ty=Tensor[(8, 15, 16), float32] */;
  (%350, %351)
}

def @func_12041(%var_12002: Tensor[(96), float64]) -> (Tensor[(672), uint8], Tensor[(4, 12, 2), float64], Tensor[(96), float64], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) {
  %352 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %353 = cast(%var_12002, dtype="float64") /* ty=Tensor[(96), float64] */;
  %354 = reshape(%353, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
  %355 = @func_1447(%354) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %356 = cast(%var_12002, dtype="float64") /* ty=Tensor[(96), float64] */;
  %357 = reshape(%356, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %358 = @func_8952(%357) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) */;
  %359 = @func_6336() /* ty=(bool,) */;
  %360 = @func_8172() /* ty=(Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) */;
  %361 = %352.2;
  %362 = %355.0;
  %363 = %358.0;
  %364 = %359.0;
  %365 = %360.0;
  (%361, %362, %var_12002, %363, %364, %365)
}

def @func_4410(%var_4380: Tensor[(2028), int16]) -> (Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) {
  %366 = @func_4062() /* ty=(Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) */;
  %367 = cast(%var_4380, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %368 = reshape(%367, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %369 = @func_3725(%368) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
  %370 = %369.1;
  %371 = cast(%370, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %372 = reshape(%371, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %373 = @func_3167(%372) /* ty=Tensor[(2028), int16] */;
  %374 = cast(%373, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %375 = reshape(%374, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %376 = %366.1;
  %377 = @func_3167(%375) /* ty=Tensor[(2028), int16] */;
  (%376, %370, %var_4380, %373, %377)
}

def @func_11203() -> Tensor[(126), float64] {
  @func_11073() /* ty=Tensor[(126), float64] */
}

def @func_12326() -> (Tensor[(2028), uint16],) {
  %378 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  (%378,)
}

def @func_10347() -> (Tensor[(2028), float32],) {
  %379 = @func_5218() /* ty=Tensor[(2028), float32] */;
  (%379,)
}

def @func_6573() -> Tensor[(2028), uint16] {
  %380 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %380.1
}

def @func_12167() -> (Tensor[(126), float64],) {
  %381 = @func_9319() /* ty=Tensor[(126), float64] */;
  (%381,)
}

def @func_3481() -> Tensor[(2028), uint16] {
  %382 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %382.3
}

def @func_8496() -> (bool,) {
  %383 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %384 = %383.2;
  (%384,)
}

def @func_5299() -> (Tensor[(2028), uint16],) {
  %385 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  (%385,)
}

def @func_5218() -> Tensor[(2028), float32] {
  %386 = @func_4303() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %387 = %386.1;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(2028), float32] */;
  sigmoid(%388) /* ty=Tensor[(2028), float32] */
}

def @func_14229() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) {
  %389 = @func_12309() /* ty=(Tensor[(2028), uint16],) */;
  %390 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %391 = @func_12912() /* ty=(bool, Tensor[(2028), uint16]) */;
  %392 = %389.0;
  %393 = %390.0;
  %394 = %391.0;
  %395 = @func_11214() /* ty=Tensor[(2028), uint16] */;
  (%392, %393, %394, %395)
}

def @func_11911(%var_11909: Tensor[(2156), float32]) -> (bool, Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(49, 4), float64], Tensor[(8, 15, 16), float32], Tensor[(2, 14, 7), bool], Tensor[(10, 9, 13), bool], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32]) {
  %396 = @func_4115() /* ty=(bool,) */;
  %397 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %398 = @func_9564() /* ty=(Tensor[(49, 4), float64],) */;
  %399 = @func_9716() /* ty=(Tensor[(8, 15, 16), float32],) */;
  %400 = %398.0;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %402 = reshape(%401, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %403 = @func_4779(%402) /* ty=(Tensor[(2, 14, 7), bool],) */;
  %404 = %397.0;
  %405 = cast(%404, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %406 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %407 = cast(%406, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %408 = reshape(%405, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %409 = reshape(%407, newshape=[2028]) /* ty=Tensor[(2028), int32] */;
  %410 = @func_4574(%408, %409) /* ty=(Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) */;
  %411 = cast(%406, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %412 = cast(meta[relay.Constant][22] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %413 = cast(%var_11909, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %414 = reshape(%411, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %415 = reshape(%412, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %416 = reshape(%413, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %417 = @func_6771(%414, %415, %416) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(49, 4), float32]) */;
  %418 = %396.0;
  %419 = %399.0;
  %420 = %403.0;
  %421 = %410.1;
  %422 = %417.2;
  (%418, %406, %404, %400, %419, %420, %421, %422, meta[relay.Constant][22] /* ty=Tensor[(126), float64] */, %var_11909)
}

def @func_474(%var_409: Tensor[(5, 6, 11), float64], %var_418: Tensor[(2156), float32]) -> (Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) {
  %423 = cast(meta[relay.Constant][23] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %424 = cast(meta[relay.Constant][23] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %425 = cast(%var_418, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %426 = reshape(%423, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), float32] */;
  %427 = reshape(%424, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), float32] */;
  %428 = reshape(%425, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %429 = @func_296(%426, %427, %428) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(14, 11, 14), float32]) */;
  %430 = cast(%var_409, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %431 = sinh(%430) /* ty=Tensor[(5, 6, 11), float64] */;
  %432 = cast(%var_409, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = less_equal(%434, %435) /* ty=Tensor[(5, 6, 11), bool] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
  %438 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%431, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %441 = cast(%var_418, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %442 = cast(%var_418, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %443 = reshape(%441, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %444 = reshape(%442, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %445 = @func_51(%443, %444) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %446 = %429.0;
  %447 = power(%439, %440) /* ty=Tensor[(5, 6, 11), float32] */;
  %448 = %445.0;
  (%446, meta[relay.Constant][23] /* ty=Tensor[(42), float32] */, %var_418, %447, %448)
}

def @func_7361(%var_7317: Tensor[(6, 15, 2), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32]) {
  %449 = cast(%var_7317, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %450 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %451 = asinh(%449) /* ty=Tensor[(6, 15, 2), float64] */;
  %452 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  %453 = %450.1;
  (%451, %452, %453)
}

def @func_14469() -> (Tensor[(14, 6, 8), float32],) {
  %454 = @func_11731() /* ty=(Tensor[(14, 6, 8), float32],) */;
  %455 = %454.0;
  (%455,)
}

def @func_3450(%var_3442: Tensor[(165, 2), float32]) -> (Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) {
  %456 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %457 = cast(meta[relay.Constant][24] /* ty=Tensor[(165, 2), float64] */, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
  %458 = cast(meta[relay.Constant][25] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %459 = reshape(%457, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %460 = reshape(%458, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %461 = @func_474(%459, %460) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %462 = cast(meta[relay.Constant][24] /* ty=Tensor[(165, 2), float64] */, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
  %463 = cast(meta[relay.Constant][25] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %464 = reshape(%462, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %465 = reshape(%463, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %466 = @func_474(%464, %465) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %467 = cast(meta[relay.Constant][24] /* ty=Tensor[(165, 2), float64] */, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
  %468 = log10(%467) /* ty=Tensor[(165, 2), float32] */;
  %469 = cast(%var_3442, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %471 = cast(%468, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %473 = %456.3;
  %474 = %461.0;
  %475 = %466.1;
  %476 = multiply(%471, %472) /* ty=Tensor[(165, 2), int16] */;
  (%473, %474, meta[relay.Constant][25] /* ty=Tensor[(2156), float32] */, %475, %476)
}

def @func_14328() -> Tensor[(2028), uint16] {
  %477 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %477.2
}

def @func_8236() -> (Tensor[(2028), uint16], Tensor[(432), float32], int32, Tensor[(126), float64], Tensor[(432), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(2028), uint16]) {
  %478 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %479 = cast(meta[relay.Constant][26] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %480 = cast(meta[relay.Constant][27] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %481 = reshape(%478, newshape=[]) /* ty=int32 */;
  %482 = reshape(%479, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %483 = reshape(%480, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %484 = @func_7055(%481, %482, %483) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) */;
  %485 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %486 = cast(meta[relay.Constant][28] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %487 = reshape(%485, newshape=[]) /* ty=int32 */;
  %488 = reshape(%486, newshape=[14, 154]) /* ty=Tensor[(14, 154), float32] */;
  %489 = @func_5734(%487, %488) /* ty=(Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) */;
  %490 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %491 = %484.9;
  %492 = %489.3;
  %493 = @func_5119() /* ty=Tensor[(2028), uint16] */;
  (%490, %491, 9 /* ty=int32 */, meta[relay.Constant][26] /* ty=Tensor[(126), float64] */, meta[relay.Constant][27] /* ty=Tensor[(432), float32] */, %492, meta[relay.Constant][28] /* ty=Tensor[(2156), float32] */, %493)
}

def @func_3331(%var_3284: Tensor[(2028), uint16], %var_3297: Tensor[(126), float64]) -> (Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) {
  %494 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %495 = %494.0;
  %496 = cast(%var_3284, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(1), int32] */;
  %498 = cast(%495, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?), float32] */;
  %500 = cast(%var_3297, dtype="float64") /* ty=Tensor[(126), float64] */;
  %501 = reshape(%500, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %502 = @func_892(%501) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %503 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %504 = cast(%var_3297, dtype="float64") /* ty=Tensor[(126), float64] */;
  %505 = reshape(%504, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %506 = @func_892(%505) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %507 = cast(meta[relay.Constant][29] /* ty=Tensor[(605), float32] */, dtype="float32") /* ty=Tensor[(605), float32] */;
  %508 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 364), float64] */, dtype="float64") /* ty=Tensor[(4, 364), float64] */;
  %509 = reshape(%507, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), float32] */;
  %510 = reshape(%508, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %511 = @func_2581(%509, %510) /* ty=(Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) */;
  %512 = floor_divide(%498, %499) /* ty=Tensor[(2028), float32] */;
  %513 = %502.2;
  %514 = %503.1;
  %515 = %506.1;
  %516 = %511.3;
  (%512, %513, %var_3297, %514, %515, %516, meta[relay.Constant][29] /* ty=Tensor[(605), float32] */, meta[relay.Constant][30] /* ty=Tensor[(4, 364), float64] */)
}

def @func_14673() -> (Tensor[(2028), uint16],) {
  %517 = @func_8061() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %518 = %517.0;
  (%518,)
}

def @func_13212() -> Tensor[(2028), uint16] {
  @func_9044() /* ty=Tensor[(2028), uint16] */
}

def @func_7312(%var_7292: Tensor[(14, 7, 4), uint64], %var_7293: Tensor[(14, 7, 4), uint64]) -> (Tensor[(14, 7, 4), bool], Tensor[(2028), uint16], Tensor[(14, 7, 4), float32]) {
  %519 = cast(%var_7293, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %520 = shape_of(%var_7292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_7292, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %523 = cast(%var_7293, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
  %524 = shape_of(%var_7292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_7292, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %527 = greater(%521, %522) /* ty=Tensor[(14, 7, 4), bool] */;
  %528 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  %529 = mod(%525, %526) /* ty=Tensor[(14, 7, 4), float32] */;
  (%527, %528, %529)
}

def @func_15167(%var_15141: Tensor[(2028), uint16]) -> (Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2028), uint16]) {
  %530 = cast(%var_15141, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %531 = cast(meta[relay.Constant][31] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %532 = reshape(%530, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %533 = reshape(%531, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %534 = @func_3331(%532, %533) /* ty=(Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) */;
  %535 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %536 = @func_6259() /* ty=Tensor[(16, 2, 13), float64] */;
  %537 = %534.1;
  %538 = %535.2;
  (%536, %537, %var_15141, meta[relay.Constant][31] /* ty=Tensor[(126), float64] */, %538)
}

def @func_5344() -> (Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) {
  %539 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %540 = %539.0;
  %541 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 15, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %545 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %546 = not_equal(%543, %544) /* ty=Tensor[(8, 15, 16), bool] */;
  %547 = %545.3;
  (%546, %547)
}

def @func_13354() -> Tensor[(8, 15, 16), float64] {
  %548 = @func_9716() /* ty=(Tensor[(8, 15, 16), float32],) */;
  %549 = %548.0;
  %550 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 15, 16), float32] */, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  maximum(%552, %553) /* ty=Tensor[(8, 15, 16), float64] */
}

def @func_15627(%var_15602: uint16, %var_15603: Tensor[(4, 7, 11), uint16]) -> Tensor[(4, 7, 11), uint16] {
  %554 = cast(%var_15602, dtype="uint16") /* ty=uint16 */;
  %555 = cast(%var_15603, dtype="uint16") /* ty=Tensor[(4, 7, 11), uint16] */;
  subtract(%554, %555) /* ty=Tensor[(4, 7, 11), uint16] */
}

def @func_15770() -> (Tensor[(2028), uint16],) {
  %556 = @func_12232() /* ty=Tensor[(2028), uint16] */;
  (%556,)
}

def @func_15042() -> (Tensor[(2028), float32], Tensor[(2028), float32]) {
  %557 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %558 = @func_13714() /* ty=(Tensor[(2028), float32],) */;
  %559 = %557.1;
  %560 = %558.0;
  (%559, %560)
}

def @func_9522() -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %561 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %562 = %561.1;
  %563 = @func_6581() /* ty=Tensor[(2028), float32] */;
  %564 = @func_9084() /* ty=Tensor[(2028), uint16] */;
  %565 = @func_5064() /* ty=Tensor[(2028), uint16] */;
  (%562, %563, %564, %565)
}

def @func_5634() -> (bool,) {
  %566 = @func_4115() /* ty=(bool,) */;
  %567 = %566.0;
  (%567,)
}

def @func_6323() -> (Tensor[(2028), uint16], Tensor[(2, 14, 7), bool], Tensor[(196), float32], Tensor[(2, 14, 7), bool]) {
  %568 = cast(meta[relay.Constant][34] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %569 = reshape(%568, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %570 = @func_4779(%569) /* ty=(Tensor[(2, 14, 7), bool],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %573 = reshape(%572, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %574 = @func_4779(%573) /* ty=(Tensor[(2, 14, 7), bool],) */;
  %575 = @func_6098() /* ty=Tensor[(2028), uint16] */;
  %576 = %574.0;
  (%575, %571, meta[relay.Constant][34] /* ty=Tensor[(196), float32] */, %576)
}

def @func_16728() -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %577 = @func_15042() /* ty=(Tensor[(2028), float32], Tensor[(2028), float32]) */;
  %578 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %579 = %577.1;
  %580 = %578.0;
  %581 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  (%579, %580, %581)
}

def @func_17697() -> (Tensor[(16, 2, 13), float64], Tensor[(2, 14, 7), float32]) {
  %582 = @func_6259() /* ty=Tensor[(16, 2, 13), float64] */;
  %583 = @func_5945() /* ty=Tensor[(2, 14, 7), float32] */;
  (%582, %583)
}

def @func_8172() -> (Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) {
  %584 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %585 = @func_7387() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %586 = @func_5064() /* ty=Tensor[(2028), uint16] */;
  %587 = %584.0;
  %588 = %585.0;
  (%586, %587, %588)
}

def @func_8545() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %589 = @func_5181() /* ty=(Tensor[(2028), uint16],) */;
  %590 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %591 = %589.0;
  %592 = @func_7565() /* ty=Tensor[(2028), uint16] */;
  %593 = %590.0;
  (%591, %592, %593)
}

def @func_18054(%var_18032: Tensor[(6, 1, 10), float64], %var_18050: Tensor[(672), float32]) -> (Tensor[(6, 1, 10), float64], Tensor[(2028), uint16], Tensor[(8, 6, 14), float32], Tensor[(672), float32]) {
  %594 = cast(2.86413f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %595 = cast(%var_18032, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
  %596 = @func_13397() /* ty=(Tensor[(2028), uint16],) */;
  %597 = cast(%var_18050, dtype="float32") /* ty=Tensor[(672), float32] */;
  %598 = reshape(%597, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), float32] */;
  %599 = divide(%594, %595) /* ty=Tensor[(6, 1, 10), float64] */;
  %600 = %596.0;
  %601 = @func_13962(%598) /* ty=Tensor[(8, 6, 14), float32] */;
  (%599, %600, %601, %var_18050)
}

def @func_11308() -> Tensor[(2028), float32] {
  %602 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %602.1
}

def @func_16841() -> (Tensor[(14, 6, 8), float32],) {
  %603 = @func_11731() /* ty=(Tensor[(14, 6, 8), float32],) */;
  %604 = %603.0;
  (%604,)
}

def @func_17533(%var_17511: Tensor[(7, 3, 16), uint8], %var_17512: Tensor[(7, 3, 16), uint8], %var_17527: Tensor[(416), float64]) -> (Tensor[(7, 3, 16), uint8], bool, Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  %605 = cast(%var_17512, dtype="uint8") /* ty=Tensor[(7, 3, 16), uint8] */;
  %606 = shape_of(%var_17511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%var_17511, dtype="uint8") /* ty=Tensor[(7, 3, 16), uint8] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %609 = cast(%var_17527, dtype="float64") /* ty=Tensor[(416), float64] */;
  %610 = reshape(%609, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %611 = right_shift(%607, %608) /* ty=Tensor[(7, 3, 16), uint8] */;
  %612 = @func_12624() /* ty=bool */;
  %613 = @func_829(%610) /* ty=Tensor[(16, 2, 13), float64] */;
  (%611, %612, %613, %var_17527)
}

def @func_3826() -> Tensor[(2028), uint16] {
  %614 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %614.0
}

def @func_4635() -> (Tensor[(2028), uint16], Tensor[(2028), int16]) {
  %615 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %616 = %615.0;
  %617 = cast(%616, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %618 = reshape(%617, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %619 = @func_4410(%618) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) */;
  %620 = %619.2;
  (%616, %620)
}

def @func_5922() -> (Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) {
  %621 = @func_5218() /* ty=Tensor[(2028), float32] */;
  %622 = cast(meta[relay.Constant][35] /* ty=Tensor[(2028), float32] */, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(1), int32] */;
  %624 = cast(%621, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?), bool] */;
  %626 = cast(meta[relay.Constant][36] /* ty=Tensor[(49, 4), float32] */, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %627 = reshape(%626, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %628 = @func_4779(%627) /* ty=(Tensor[(2, 14, 7), bool],) */;
  %629 = not_equal(%624, %625) /* ty=Tensor[(2028), bool] */;
  %630 = %628.0;
  (%629, %630, meta[relay.Constant][36] /* ty=Tensor[(49, 4), float32] */)
}

def @func_6506(%var_6490: Tensor[(56, 26), float64]) -> (Tensor[(2028), uint16], Tensor[(13, 16, 7), float64], Tensor[(56, 26), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(2028), uint16]) {
  %631 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %632 = cast(%var_6490, dtype="float64") /* ty=Tensor[(56, 26), float64] */;
  %633 = reshape(%632, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), float64] */;
  %634 = @func_1724(%633) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) */;
  %635 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %636 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %637 = reshape(%635, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %638 = reshape(%636, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %639 = @func_3922(%637, %638) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %640 = %631.0;
  %641 = cast(%640, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %642 = reshape(%641, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %643 = @func_3725(%642) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
  %644 = %634.0;
  %645 = %639.0;
  %646 = %643.0;
  (%640, %644, %var_6490, %645, meta[relay.Constant][37] /* ty=Tensor[(672), uint8] */, %646)
}

def @func_8435(%var_8427: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32],) {
  %647 = cast(%var_8427, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %648 = acos(%647) /* ty=Tensor[(6, 3, 3), float32] */;
  (%648,)
}

def @func_12372() -> Tensor[(8, 15, 16), float32] {
  %649 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %649.0
}

def @func_5404() -> (Tensor[(2028), uint16],) {
  %650 = @func_5119() /* ty=Tensor[(2028), uint16] */;
  (%650,)
}

def @func_5148() -> (Tensor[(2028), uint16],) {
  %651 = @func_4303() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %652 = %651.1;
  (%652,)
}

def @func_8952(%var_8918: Tensor[(96), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) {
  %653 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
  %654 = cast(%var_8918, dtype="float64") /* ty=Tensor[(96), float64] */;
  %655 = reshape(%654, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
  %656 = @func_7957(%655) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) */;
  %657 = @func_4986() /* ty=(bool,) */;
  %658 = %653.0;
  %659 = %656.1;
  %660 = %657.0;
  (%658, %659, %var_8918, %660)
}

def @func_15579() -> (Tensor[(2028), float32],) {
  %661 = @func_11308() /* ty=Tensor[(2028), float32] */;
  (%661,)
}

def @func_17207() -> (Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16]) {
  %662 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
  %663 = %662.1;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(126), float64] */;
  %665 = reshape(%664, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %666 = @func_892(%665) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %667 = @func_15770() /* ty=(Tensor[(2028), uint16],) */;
  %668 = %666.1;
  %669 = %667.0;
  (%663, %668, %669)
}

def @func_7644() -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) {
  %670 = @func_6933() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %671 = %670.1;
  %672 = @func_6581() /* ty=Tensor[(2028), float32] */;
  %673 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  (%671, %672, %673)
}

def @main(%var_18747: Tensor[(605), float32], %var_18748: Tensor[(1, 1456), float64], %var_18755: Tensor[(2156), float32]) -> (Tensor[(416), float64], Tensor[(1, 2028), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(1, 1456), float64], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(?, 2028), float32]) {
  %674 = @func_3998() /* ty=(bool, Tensor[(2028), uint16], Tensor[(416), float64]) */;
  %675 = @func_15042() /* ty=(Tensor[(2028), float32], Tensor[(2028), float32]) */;
  %676 = %675.1;
  %677 = cast(%676, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %678 = reshape(%677, newshape=[1, 2028]) /* ty=Tensor[(1, 2028), uint16] */;
  %679 = @func_10475(%678) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) */;
  %680 = %679.1;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %682 = erf(%681) /* ty=Tensor[(1, 2028), float64] */;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %684 = cast(%var_18747, dtype="float32") /* ty=Tensor[(605), float32] */;
  %685 = cast(%var_18748, dtype="float64") /* ty=Tensor[(1, 1456), float64] */;
  %686 = reshape(%684, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), float32] */;
  %687 = reshape(%685, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %688 = @func_2581(%686, %687) /* ty=(Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) */;
  %689 = cast(%var_18755, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %690 = reshape(%689, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %691 = @func_11911(%690) /* ty=(bool, Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(49, 4), float64], Tensor[(8, 15, 16), float32], Tensor[(2, 14, 7), bool], Tensor[(10, 9, 13), bool], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32]) */;
  %692 = cast(%676, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %693 = shape_of(%680, dtype="int32") /* ty=Tensor[(2), int32] */;
  %694 = cast(%680, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %696 = minimum(%694, %695) /* ty=Tensor[(?, 2028), float64] */;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(?, 2028), float32] */;
  %698 = shape_of(%682, dtype="int32") /* ty=Tensor[(2), int32] */;
  %699 = cast(%682, dtype="float32") /* ty=Tensor[(1, 2028), float32] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %701 = power(%699, %700) /* ty=Tensor[(?, 2028), float32] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(?, 2028), float32] */;
  %703 = %674.2;
  %704 = log10(%683) /* ty=Tensor[(1, 2028), float64] */;
  %705 = %688.3;
  %706 = %691.8;
  %707 = asin(%702) /* ty=Tensor[(?, 2028), float32] */;
  (%703, %704, %705, %var_18747, %var_18748, %706, %var_18755, %707)
}

def @func_12912() -> (bool, Tensor[(2028), uint16]) {
  %708 = @func_11431() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) */;
  %709 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %710 = %708.2;
  %711 = %709.0;
  (%710, %711)
}

def @func_14360() -> (bool,) {
  %712 = @func_4986() /* ty=(bool,) */;
  %713 = %712.0;
  (%713,)
}

def @func_51(%var_12: Tensor[(14, 11, 14), float32], %var_20: Tensor[(14, 11, 14), float32]) -> (Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) {
  %714 = cast(%var_12, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %715 = cast(%var_20, dtype="bool") /* ty=Tensor[(14, 11, 14), bool] */;
  %716 = shape_of(%var_12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_12, dtype="bool") /* ty=Tensor[(14, 11, 14), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %719 = equal(%717, %718) /* ty=Tensor[(14, 11, 14), bool] */;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %721 = atan(%714) /* ty=Tensor[(14, 11, 14), float32] */;
  %722 = sqrt(%720) /* ty=Tensor[(14, 11, 14), float32] */;
  (%721, %722)
}

def @func_4080() -> (Tensor[(2028), uint16],) {
  %723 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %724 = %723.0;
  (%724,)
}

def @func_10319(%var_10284: Tensor[(2028), uint16]) -> (Tensor[(2028), int64], Tensor[(14, 11, 14), float32], Tensor[(2156), float32]) {
  %725 = @func_8515() /* ty=(bool, Tensor[(2028), uint16]) */;
  %726 = %725.1;
  %727 = cast(%var_10284, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(1), int32] */;
  %729 = cast(%726, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?), int64] */;
  %731 = cast(meta[relay.Constant][38] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %732 = cast(meta[relay.Constant][38] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %733 = reshape(%731, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %734 = reshape(%732, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %735 = @func_51(%733, %734) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %736 = subtract(%729, %730) /* ty=Tensor[(2028), int64] */;
  %737 = %735.1;
  (%736, %737, meta[relay.Constant][38] /* ty=Tensor[(2156), float32] */)
}

def @func_12309() -> (Tensor[(2028), uint16],) {
  %738 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %739 = %738.0;
  (%739,)
}

def @func_17116() -> (bool,) {
  %740 = @func_15299() /* ty=(bool,) */;
  %741 = %740.0;
  (%741,)
}

def @func_17418() -> (bool,) {
  %742 = @func_10945() /* ty=(bool,) */;
  %743 = %742.0;
  (%743,)
}

def @func_14532() -> Tensor[(2028), uint16] {
  %744 = @func_10484() /* ty=(Tensor[(2028), uint16],) */;
  %744.0
}

def @func_16925() -> (Tensor[(126), float64],) {
  %745 = @func_12167() /* ty=(Tensor[(126), float64],) */;
  %746 = %745.0;
  (%746,)
}

def @func_17994(%var_17940: Tensor[(15, 8, 2), float64], %var_17941: Tensor[(15, 8, 2), float64]) -> (Tensor[(15, 8, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(2028), uint16], Tensor[(2028), int16]) {
  %747 = cast(%var_17941, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %748 = shape_of(%var_17940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_17940, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %752 = @func_14469() /* ty=(Tensor[(14, 6, 8), float32],) */;
  %753 = @func_17311() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %754 = @func_17254() /* ty=(Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(8, 15, 16), float32]) */;
  %755 = divide(%749, %750) /* ty=Tensor[(15, 8, 2), float64] */;
  %756 = %751.0;
  %757 = %752.0;
  %758 = %753.1;
  %759 = %754.0;
  (%755, %756, %757, %758, %759)
}

def @func_2581(%var_2554: Tensor[(11, 11, 5), float32], %var_2573: Tensor[(1456), float64]) -> (Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) {
  %760 = cast(%var_2554, dtype="float32") /* ty=Tensor[(11, 11, 5), float32] */;
  %761 = exp(%760) /* ty=Tensor[(11, 11, 5), float32] */;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(11, 11, 5), float64] */;
  %763 = cast(%761, dtype="float64") /* ty=Tensor[(11, 11, 5), float64] */;
  %764 = cast(%var_2573, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %765 = reshape(%764, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), float64] */;
  %766 = @func_1724(%765) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) */;
  %767 = log2(%762) /* ty=Tensor[(11, 11, 5), float64] */;
  %768 = atan(%763) /* ty=Tensor[(11, 11, 5), float64] */;
  %769 = %766.2;
  (%767, %768, %769, %var_2573)
}

def @func_9044() -> Tensor[(2028), uint16] {
  %770 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
  %770.0
}

def @func_9388() -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(180), float64]) {
  %771 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %772 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %773 = reshape(%772, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %774 = @func_7361(%773) /* ty=(Tensor[(6, 15, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32]) */;
  %775 = %771.1;
  %776 = %774.1;
  (%775, %776, meta[relay.Constant][39] /* ty=Tensor[(180), float64] */)
}

def @func_18179(%var_18143: Tensor[(11, 9, 12), float32], %var_18150: Tensor[(11, 9, 12), float32]) -> (Tensor[(11, 9, 12), float64], Tensor[(14, 6, 8), float32], Tensor[(240), float64]) {
  %777 = cast(%var_18143, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %778 = log10(%777) /* ty=Tensor[(11, 9, 12), float32] */;
  %779 = cast(%var_18150, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%778, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %783 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %784 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %785 = reshape(%783, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %786 = reshape(%784, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %787 = @func_17994(%785, %786) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(2028), uint16], Tensor[(2028), int16]) */;
  %788 = power(%781, %782) /* ty=Tensor[(11, 9, 12), float64] */;
  %789 = %787.2;
  (%788, %789, meta[relay.Constant][40] /* ty=Tensor[(240), float64] */)
}

def @func_6720() -> (Tensor[(2028), uint16],) {
  %790 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %791 = %790.0;
  (%791,)
}

def @func_5768() -> (Tensor[(2028), float32],) {
  %792 = @func_5218() /* ty=Tensor[(2028), float32] */;
  (%792,)
}

def @func_16936() -> (Tensor[(2028), uint16],) {
  %793 = @func_9084() /* ty=Tensor[(2028), uint16] */;
  (%793,)
}

def @func_17773() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(330), float32], Tensor[(2028), uint16]) {
  %794 = cast(meta[relay.Constant][41] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %795 = reshape(%794, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %796 = @func_6240(%795) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) */;
  %797 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
  %798 = @func_11493() /* ty=Tensor[(2028), uint16] */;
  %799 = %796.0;
  %800 = %797.0;
  (%798, %799, meta[relay.Constant][41] /* ty=Tensor[(330), float32] */, %800)
}

def @func_17465() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %801 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %802 = @func_5404() /* ty=(Tensor[(2028), uint16],) */;
  %803 = %801.2;
  %804 = %802.0;
  (%803, %804)
}

def @func_11493() -> Tensor[(2028), uint16] {
  %805 = @func_9761() /* ty=(Tensor[(2028), uint16],) */;
  %805.0
}

def @func_13415() -> Tensor[(2028), uint16] {
  %806 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %806.0
}

def @func_18400(%var_18368: Tensor[(2156), float32], %var_18395: Tensor[(2156), float32]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 11, 14), float32], Tensor[(2156), bool], Tensor[(2028), uint64], Tensor[(2028), int16], Tensor[(2156), bool]) {
  %807 = @func_13148() /* ty=(Tensor[(2028), uint16],) */;
  %808 = cast(%var_18368, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %809 = cast(%var_18368, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %810 = reshape(%808, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %811 = reshape(%809, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %812 = @func_51(%810, %811) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %813 = @func_16507() /* ty=(bool,) */;
  %814 = %813.0;
  %815 = cast(%var_18368, dtype="bool") /* ty=Tensor[(2156), bool] */;
  %816 = cast(%814, dtype="bool") /* ty=bool */;
  %817 = %807.0;
  %818 = cast(%817, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %819 = cast(%817, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %820 = reshape(%818, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %821 = reshape(%819, newshape=[2028]) /* ty=Tensor[(2028), int32] */;
  %822 = @func_4574(%820, %821) /* ty=(Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) */;
  %823 = cast(%817, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %824 = reshape(%823, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %825 = @func_4410(%824) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) */;
  %826 = cast(%var_18395, dtype="bool") /* ty=Tensor[(2156), bool] */;
  %827 = shape_of(%var_18368, dtype="int32") /* ty=Tensor[(1), int32] */;
  %828 = cast(%var_18368, dtype="bool") /* ty=Tensor[(2156), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?), bool] */;
  %830 = @func_18021() /* ty=Tensor[(2028), uint16] */;
  %831 = %812.0;
  %832 = equal(%815, %816) /* ty=Tensor[(2156), bool] */;
  %833 = %822.0;
  %834 = %825.2;
  %835 = not_equal(%828, %829) /* ty=Tensor[(2156), bool] */;
  (%830, %817, %831, %832, %833, %834, %835)
}

def @func_9319() -> Tensor[(126), float64] {
  %836 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
  %836.2
}

def @func_6336() -> (bool,) {
  %837 = @func_4115() /* ty=(bool,) */;
  %838 = %837.0;
  (%838,)
}

def @func_10475(%var_10452: Tensor[(1, 2028), uint16]) -> (Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) {
  %839 = @func_4986() /* ty=(bool,) */;
  %840 = %839.0;
  %841 = cast(%840, dtype="bool") /* ty=bool */;
  %842 = cast(%var_10452, dtype="uint16") /* ty=Tensor[(1, 2028), uint16] */;
  %843 = reshape(%841, newshape=[]) /* ty=bool */;
  %844 = reshape(%842, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %845 = @func_1950(%843, %844) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %846 = cast(%var_10452, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %847 = cast(%840, dtype="float64") /* ty=float64 */;
  %848 = %845.0;
  %849 = mod(%846, %847) /* ty=Tensor[(1, 2028), float64] */;
  (%848, %849)
}

def @func_10893() -> Tensor[(2028), uint16] {
  @func_7741() /* ty=Tensor[(2028), uint16] */
}

def @func_6379() -> (Tensor[(2028), uint16],) {
  %850 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  (%850,)
}

def @func_6652() -> (bool, Tensor[(2028), uint16]) {
  %851 = @func_6336() /* ty=(bool,) */;
  %852 = @func_5344() /* ty=(Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) */;
  %853 = %851.0;
  %854 = %852.1;
  (%853, %854)
}

def @func_10800(%var_10798: Tensor[(1456), float64]) -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(1456), float64]) {
  %855 = @func_10347() /* ty=(Tensor[(2028), float32],) */;
  %856 = cast(%var_10798, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %857 = reshape(%856, newshape=[56, 26]) /* ty=Tensor[(56, 26), float64] */;
  %858 = @func_6506(%857) /* ty=(Tensor[(2028), uint16], Tensor[(13, 16, 7), float64], Tensor[(56, 26), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(2028), uint16]) */;
  %859 = %855.0;
  %860 = @func_5119() /* ty=Tensor[(2028), uint16] */;
  %861 = %858.3;
  (%859, %860, %861, %var_10798)
}

def @func_16227() -> Tensor[(2028), uint16] {
  %862 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %862.0
}

def @func_12655() -> bool {
  @func_12401() /* ty=bool */
}

def @func_6240(%var_6197: Tensor[(330), float32]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) {
  %863 = @func_5344() /* ty=(Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) */;
  %864 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %867 = cast(meta[relay.Constant][42] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %868 = cast(meta[relay.Constant][42] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %869 = reshape(%867, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %870 = reshape(%868, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %871 = @func_3922(%869, %870) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %872 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %873 = cast(%var_6197, dtype="float32") /* ty=Tensor[(330), float32] */;
  %874 = reshape(%873, newshape=[165, 2]) /* ty=Tensor[(165, 2), float32] */;
  %875 = @func_3450(%874) /* ty=(Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) */;
  %876 = @func_5634() /* ty=(bool,) */;
  %877 = @func_3481() /* ty=Tensor[(2028), uint16] */;
  %878 = %863.1;
  %879 = atanh(%866) /* ty=Tensor[(2028), float64] */;
  %880 = %871.0;
  %881 = %872.2;
  %882 = %875.0;
  %883 = %876.0;
  (%877, %878, %879, %880, meta[relay.Constant][42] /* ty=Tensor[(672), uint8] */, %881, %882, %var_6197, %883)
}

def @func_17850(%var_17800: Tensor[(1, 12, 10), float32]) -> (Tensor[(1, 12, 10), float64], Tensor[(?, 12, 10), bool], Tensor[(2028), uint16], Tensor[(49, 4), float64]) {
  %884 = cast(%var_17800, dtype="float32") /* ty=Tensor[(1, 12, 10), float32] */;
  %885 = log(%884) /* ty=Tensor[(1, 12, 10), float32] */;
  %886 = cast(%885, dtype="float64") /* ty=Tensor[(1, 12, 10), float64] */;
  %887 = cast(%885, dtype="bool") /* ty=Tensor[(1, 12, 10), bool] */;
  %888 = shape_of(%var_17800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%var_17800, dtype="bool") /* ty=Tensor[(1, 12, 10), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = @func_17465() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %892 = @func_6363() /* ty=(Tensor[(49, 4), float32], Tensor[(49, 4), float64]) */;
  %893 = acosh(%886) /* ty=Tensor[(1, 12, 10), float64] */;
  %894 = logical_and(%889, %890) /* ty=Tensor[(?, 12, 10), bool] */;
  %895 = %891.1;
  %896 = %892.1;
  (%893, %894, %895, %896)
}

def @func_5964() -> (Tensor[(2028), uint16],) {
  %897 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  (%897,)
}

def @func_7741() -> Tensor[(2028), uint16] {
  @func_5881() /* ty=Tensor[(2028), uint16] */
}

def @func_9425() -> Tensor[(16, 2, 13), float64] {
  @func_6259() /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_9825() -> (Tensor[(14, 6, 8), float32],) {
  %898 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %899 = %898.1;
  (%899,)
}

def @func_16865() -> (Tensor[(2028), uint16],) {
  %900 = @func_9044() /* ty=Tensor[(2028), uint16] */;
  (%900,)
}

def @func_1447(%var_1444: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64],) {
  %901 = cast(%var_1444, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %902 = tan(%901) /* ty=Tensor[(4, 12, 2), float64] */;
  (%902,)
}

def @func_4115() -> (bool,) {
  %903 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %904 = %903.2;
  (%904,)
}

def @func_15747() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %905 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
  %906 = @func_6098() /* ty=Tensor[(2028), uint16] */;
  %907 = %905.0;
  %908 = @func_11245() /* ty=Tensor[(2028), uint16] */;
  (%906, %907, %908)
}

def @func_11073() -> Tensor[(126), float64] {
  @func_9319() /* ty=Tensor[(126), float64] */
}

def @func_11431() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) {
  %909 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %910 = @func_8515() /* ty=(bool, Tensor[(2028), uint16]) */;
  %911 = %910.0;
  %912 = cast(%911, dtype="int32") /* ty=int32 */;
  %913 = cast(meta[relay.Constant][43] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %914 = reshape(%912, newshape=[]) /* ty=int32 */;
  %915 = reshape(%913, newshape=[14, 154]) /* ty=Tensor[(14, 154), float32] */;
  %916 = @func_5734(%914, %915) /* ty=(Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) */;
  %917 = cast(meta[relay.Constant][43] /* ty=Tensor[(2156), float32] */, dtype="float64") /* ty=Tensor[(2156), float64] */;
  %918 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  %919 = %909.2;
  %920 = %916.2;
  %921 = atanh(%917) /* ty=Tensor[(2156), float64] */;
  (%918, %919, %911, %920, %921)
}

def @func_16475() -> (Tensor[(2028), uint16],) {
  %922 = @func_10893() /* ty=Tensor[(2028), uint16] */;
  (%922,)
}

def @func_13254() -> Tensor[(2028), uint16] {
  %923 = @func_12458() /* ty=(Tensor[(2028), uint16],) */;
  %923.0
}

def @func_3725(%var_3697: Tensor[(2028), int16]) -> (Tensor[(2028), uint16], Tensor[(2028), float64]) {
  %924 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %925 = %924.0;
  %926 = cast(%925, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %927 = reshape(%926, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %928 = @func_3167(%927) /* ty=Tensor[(2028), int16] */;
  %929 = cast(%var_3697, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %930 = shape_of(%928, dtype="int32") /* ty=Tensor[(1), int32] */;
  %931 = cast(%928, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?), float64] */;
  %933 = power(%931, %932) /* ty=Tensor[(2028), float64] */;
  (%925, %933)
}

def @func_1950(%var_1845: bool, %var_1860: Tensor[(2028), uint16]) -> (Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  %934 = cast(%var_1845, dtype="bool") /* ty=bool */;
  %935 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(10, 9, 13), bool] */;
  %936 = cast(%var_1860, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %937 = cast(%var_1860, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %938 = reshape(%936, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %939 = reshape(%937, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %940 = @func_170(%938, %939) /* ty=Tensor[(13, 13, 12), uint16] */;
  %941 = cast(%var_1860, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%940, dtype="bool") /* ty=Tensor[(13, 13, 12), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = cast(meta[relay.Constant][45] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %946 = reshape(%945, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %947 = logical_and(%934, %935) /* ty=Tensor[(10, 9, 13), bool] */;
  %948 = logical_or(%943, %944) /* ty=Tensor[(13, 13, 12), bool] */;
  %949 = @func_829(%946) /* ty=Tensor[(16, 2, 13), float64] */;
  (%947, %948, %949, meta[relay.Constant][45] /* ty=Tensor[(416), float64] */)
}

def @func_170(%var_154: Tensor[(13, 13, 12), uint16], %var_155: Tensor[(13, 13, 12), uint16]) -> Tensor[(13, 13, 12), uint16] {
  %950 = cast(%var_155, dtype="uint16") /* ty=Tensor[(13, 13, 12), uint16] */;
  %951 = shape_of(%var_154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %952 = cast(%var_154, dtype="uint16") /* ty=Tensor[(13, 13, 12), uint16] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%952, %953) /* ty=Tensor[(13, 13, 12), uint16] */
}

def @func_18021() -> Tensor[(2028), uint16] {
  %954 = @func_13951() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(468), uint8], Tensor[(672), uint8], Tensor[(330), float32], bool, Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16]) */;
  %954.11
}

def @func_7806(%var_7787: Tensor[(2028), uint16]) -> (Tensor[(2028), float64], Tensor[(2028), uint16]) {
  %955 = @func_3998() /* ty=(bool, Tensor[(2028), uint16], Tensor[(416), float64]) */;
  %956 = %955.1;
  %957 = cast(%var_7787, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %958 = shape_of(%956, dtype="int32") /* ty=Tensor[(1), int32] */;
  %959 = cast(%956, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?), float64] */;
  %961 = floor_mod(%959, %960) /* ty=Tensor[(2028), float64] */;
  %962 = @func_6573() /* ty=Tensor[(2028), uint16] */;
  (%961, %962)
}

def @func_18264(%var_18232: Tensor[(7, 9, 8), uint8], %var_18233: Tensor[(7, 9, 8), uint8]) -> (Tensor[(7, 9, 8), uint8],) {
  %963 = cast(%var_18233, dtype="uint8") /* ty=Tensor[(7, 9, 8), uint8] */;
  %964 = shape_of(%var_18232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%var_18232, dtype="uint8") /* ty=Tensor[(7, 9, 8), uint8] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %967 = bitwise_or(%965, %966) /* ty=Tensor[(7, 9, 8), uint8] */;
  (%967,)
}

def @func_3167(%var_3162: Tensor[(2028), uint16]) -> Tensor[(2028), int16] {
  %968 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %969 = %968.0;
  %970 = cast(%var_3162, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %971 = shape_of(%969, dtype="int32") /* ty=Tensor[(1), int32] */;
  %972 = cast(%969, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?), int16] */;
  left_shift(%972, %973) /* ty=Tensor[(2028), int16] */
}

def @func_5945() -> Tensor[(2, 14, 7), float32] {
  %974 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %974.0
}

def @func_18676(%var_18615: Tensor[(4, 16, 14), float32]) -> (bool, Tensor[(2028), uint16], Tensor[(4, 16, 14), float64], Tensor[(2028), uint16], Tensor[(13, 13, 12), uint16]) {
  %975 = @func_6336() /* ty=(bool,) */;
  %976 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
  %977 = cast(%var_18615, dtype="float32") /* ty=Tensor[(4, 16, 14), float32] */;
  %978 = sigmoid(%977) /* ty=Tensor[(4, 16, 14), float32] */;
  %979 = cast(%var_18615, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
  %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%978, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %983 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %984 = %976.0;
  %985 = cast(%984, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %986 = %983.0;
  %987 = cast(%986, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %988 = reshape(%985, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %989 = reshape(%987, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %990 = %975.0;
  %991 = floor_mod(%981, %982) /* ty=Tensor[(4, 16, 14), float64] */;
  %992 = @func_170(%988, %989) /* ty=Tensor[(13, 13, 12), uint16] */;
  (%990, %984, %991, %986, %992)
}

def @func_4706(%var_4669: Tensor[(2, 14, 7), float32], %var_4677: Tensor[(3, 42), float64]) -> (Tensor[(2, 14, 7), int16], Tensor[(416), float64], Tensor[(3, 42), float64], Tensor[(2028), int32]) {
  %993 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %994 = %993.0;
  %995 = cast(%var_4669, dtype="int16") /* ty=Tensor[(2, 14, 7), int16] */;
  %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(%994, dtype="int16") /* ty=Tensor[(2, 14, 7), int16] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %999 = cast(%var_4677, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %1000 = reshape(%999, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %1001 = @func_892(%1000) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %1002 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %1003 = %1002.0;
  %1004 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %1005 = %1004.0;
  %1006 = cast(%1005, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %1007 = shape_of(%1003, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1008 = cast(%1003, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?), int32] */;
  %1010 = left_shift(%997, %998) /* ty=Tensor[(2, 14, 7), int16] */;
  %1011 = %1001.2;
  %1012 = multiply(%1008, %1009) /* ty=Tensor[(2028), int32] */;
  (%1010, %1011, %var_4677, %1012)
}

def @func_6703(%var_6698: Tensor[(2028), uint16]) -> Tensor[(2028), float64] {
  %1013 = @func_6098() /* ty=Tensor[(2028), uint16] */;
  %1014 = cast(%var_6698, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1015 = shape_of(%1013, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1016 = cast(%1013, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?), float64] */;
  divide(%1016, %1017) /* ty=Tensor[(2028), float64] */
}

def @func_10866(%var_10838: Tensor[(13, 1, 5), uint8], %var_10839: Tensor[(13, 15, 5), uint8]) -> (Tensor[(13, 15, 5), bool], Tensor[(2028), uint16]) {
  %1018 = cast(%var_10838, dtype="bool") /* ty=Tensor[(13, 1, 5), bool] */;
  %1019 = cast(%var_10839, dtype="bool") /* ty=Tensor[(13, 15, 5), bool] */;
  %1020 = not_equal(%1018, %1019) /* ty=Tensor[(13, 15, 5), bool] */;
  %1021 = @func_7728() /* ty=Tensor[(2028), uint16] */;
  (%1020, %1021)
}

def @func_7546(%var_7539: bool) -> (Tensor[(2028), uint16], Tensor[(1456), float64], Tensor[(4, 108), float32], bool) {
  %1022 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1023 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %1024 = cast(%var_7539, dtype="bool") /* ty=bool */;
  %1025 = reshape(%1023, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), float32] */;
  %1026 = reshape(%1024, newshape=[]) /* ty=bool */;
  %1027 = @func_3060(%1025, %1026) /* ty=(Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) */;
  %1028 = %1022.3;
  %1029 = %1027.5;
  (%1028, %1029, meta[relay.Constant][46] /* ty=Tensor[(4, 108), float32] */, %var_7539)
}

def @func_12458() -> (Tensor[(2028), uint16],) {
  %1030 = @func_9761() /* ty=(Tensor[(2028), uint16],) */;
  %1031 = %1030.0;
  (%1031,)
}

def @func_15414() -> (Tensor[(2028), uint16],) {
  %1032 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %1033 = %1032.0;
  (%1033,)
}

def @func_15238() -> (Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %1034 = @func_3481() /* ty=Tensor[(2028), uint16] */;
  %1035 = cast(%1034, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %1036 = reshape(%1035, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %1037 = @func_3725(%1036) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
  %1038 = %1037.1;
  %1039 = @func_9792() /* ty=Tensor[(2028), uint16] */;
  %1040 = @func_9655() /* ty=Tensor[(2028), uint16] */;
  (%1034, %1038, %1039, %1040)
}

def @func_15555(%var_15519: Tensor[(1, 10), float32]) -> (Tensor[(2028), uint16], Tensor[(1, 5, 2), float32], Tensor[(1, 10), float32], int32, int32, Tensor[(2028), uint16]) {
  %1041 = cast(%var_15519, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %1042 = reshape(%1041, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), float32] */;
  %1043 = @func_7220(%1042) /* ty=(Tensor[(1, 5, 2), float32],) */;
  %1044 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1045 = reshape(%1044, newshape=[]) /* ty=int32 */;
  %1046 = @func_13241(%1045) /* ty=(Tensor[(2028), uint16], Tensor[(154, 14), float32], int32, Tensor[(126), float64], Tensor[(4, 108), float32]) */;
  %1047 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %1048 = @func_13212() /* ty=Tensor[(2028), uint16] */;
  %1049 = %1043.0;
  %1050 = %1046.2;
  %1051 = %1047.0;
  (%1048, %1049, %var_15519, %1050, 7 /* ty=int32 */, %1051)
}

def @func_13189() -> Tensor[(16, 2, 13), float64] {
  @func_6259() /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_17906(%var_17901: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), float32],) {
  %1052 = cast(%var_17901, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %1053 = cos(%1052) /* ty=Tensor[(7, 15, 9), float32] */;
  (%1053,)
}

def @func_829(%var_815: Tensor[(16, 2, 13), float64]) -> Tensor[(16, 2, 13), float64] {
  %1054 = cast(%var_815, dtype="float64") /* ty=Tensor[(16, 2, 13), float64] */;
  atanh(%1054) /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_4779(%var_4766: Tensor[(2, 14, 7), float32]) -> (Tensor[(2, 14, 7), bool],) {
  %1055 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1056 = %1055.0;
  %1057 = cast(%var_4766, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %1058 = shape_of(%1056, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1059 = cast(%1056, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1061 = greater_equal(%1059, %1060) /* ty=Tensor[(2, 14, 7), bool] */;
  (%1061,)
}

def @func_6098() -> Tensor[(2028), uint16] {
  %1062 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %1062.0
}

def @func_10945() -> (bool,) {
  %1063 = @func_8496() /* ty=(bool,) */;
  %1064 = %1063.0;
  (%1064,)
}

def @func_11572(%var_11563: Tensor[(980), uint8]) -> (Tensor[(14, 11, 14), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8]) {
  %1065 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %1066 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %1067 = cast(%var_11563, dtype="uint8") /* ty=Tensor[(980), uint8] */;
  %1068 = reshape(%1067, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
  %1069 = %1065.1;
  %1070 = @func_5218() /* ty=Tensor[(2028), float32] */;
  %1071 = %1066.0;
  %1072 = @func_10556() /* ty=Tensor[(2028), uint16] */;
  %1073 = @func_6979(%1068) /* ty=Tensor[(14, 5, 14), uint8] */;
  (%1069, %1070, %1071, %1072, %1073, %var_11563)
}

def @func_3966() -> (Tensor[(2028), uint16],) {
  %1074 = @func_3481() /* ty=Tensor[(2028), uint16] */;
  (%1074,)
}

def @func_16437() -> Tensor[(2028), float32] {
  %1075 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1075.1
}

def @func_12624() -> bool {
  %1076 = @func_4115() /* ty=(bool,) */;
  %1076.0
}

def @func_16507() -> (bool,) {
  %1077 = @func_4115() /* ty=(bool,) */;
  %1078 = %1077.0;
  (%1078,)
}

def @func_9084() -> Tensor[(2028), uint16] {
  %1079 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %1079.0
}

def @func_12187() -> Tensor[(2028), float32] {
  %1080 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1080.1
}

def @func_13755() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 24), float64]) {
  %1081 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %1082 = reshape(%1081, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %1083 = @func_8952(%1082) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) */;
  %1084 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  %1085 = %1083.1;
  (%1084, %1085, meta[relay.Constant][47] /* ty=Tensor[(4, 24), float64] */)
}

def @func_14900() -> Tensor[(2028), uint16] {
  @func_5119() /* ty=Tensor[(2028), uint16] */
}

def @func_6581() -> Tensor[(2028), float32] {
  @func_5218() /* ty=Tensor[(2028), float32] */
}

def @func_6074() -> (Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) {
  %1086 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
  %1087 = %1086.0;
  %1088 = cast(%1087, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1089 = cast(meta[relay.Constant][48] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1090 = reshape(%1088, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1091 = reshape(%1089, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1092 = @func_3331(%1090, %1091) /* ty=(Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) */;
  %1093 = cast(meta[relay.Constant][49] /* ty=Tensor[(98, 2), float32] */, dtype="float32") /* ty=Tensor[(98, 2), float32] */;
  %1094 = %1092.2;
  %1095 = cast(%1094, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1096 = reshape(%1093, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %1097 = reshape(%1095, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
  %1098 = @func_4706(%1096, %1097) /* ty=(Tensor[(2, 14, 7), int16], Tensor[(416), float64], Tensor[(3, 42), float64], Tensor[(2028), int32]) */;
  %1099 = cast(meta[relay.Constant][49] /* ty=Tensor[(98, 2), float32] */, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
  %1100 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %1101 = %1098.1;
  %1102 = acos(%1099) /* ty=Tensor[(98, 2), float64] */;
  %1103 = %1100.1;
  (%1087, %1094, meta[relay.Constant][48] /* ty=Tensor[(126), float64] */, %1101, %1102, %1103)
}

def @func_15400() -> (Tensor[(2028), uint16], Tensor[(10, 9, 13), bool]) {
  %1104 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %1105 = %1104.0;
  %1106 = cast(%1105, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1107 = reshape(%1106, newshape=[1, 2028]) /* ty=Tensor[(1, 2028), uint16] */;
  %1108 = @func_10475(%1107) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) */;
  %1109 = %1108.0;
  (%1105, %1109)
}

def @func_6259() -> Tensor[(16, 2, 13), float64] {
  %1110 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1110.1
}

def @func_3118() -> (Tensor[(2028), uint16],) {
  %1111 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1112 = %1111.3;
  (%1112,)
}

def @func_4606() -> (Tensor[(2028), uint16],) {
  %1113 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %1114 = %1113.0;
  (%1114,)
}

def @func_296(%var_268: Tensor[(7, 3, 2), float32], %var_269: Tensor[(7, 3, 2), float32], %var_290: Tensor[(2156), float32]) -> (Tensor[(7, 3, 2), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(14, 11, 14), float32]) {
  %1115 = cast(%var_269, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %1116 = shape_of(%var_268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1117 = cast(%var_268, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %1118 = dyn.reshape(%1115, %1116, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1119 = power(%1117, %1118) /* ty=Tensor[(7, 3, 2), float32] */;
  %1120 = cast(%1119, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %1121 = cast(%var_290, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1122 = cast(%var_290, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1123 = reshape(%1121, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1124 = reshape(%1122, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1125 = @func_51(%1123, %1124) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %1126 = %1125.1;
  %1127 = cast(%1126, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %1128 = cast(%1126, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %1129 = reshape(%1127, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1130 = reshape(%1128, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1131 = @func_51(%1129, %1130) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %1132 = asinh(%1120) /* ty=Tensor[(7, 3, 2), float32] */;
  %1133 = %1131.1;
  (%1132, %1126, %var_290, %1133)
}

def @func_5881() -> Tensor[(2028), uint16] {
  %1134 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %1134.0
}

def @func_11245() -> Tensor[(2028), uint16] {
  @func_5119() /* ty=Tensor[(2028), uint16] */
}

def @func_4574(%var_4539: Tensor[(2028), uint16], %var_4559: Tensor[(2028), int32]) -> (Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) {
  %1135 = @func_4080() /* ty=(Tensor[(2028), uint16],) */;
  %1136 = %1135.0;
  %1137 = cast(%var_4539, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %1138 = shape_of(%1136, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1139 = cast(%1136, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %1140 = dyn.reshape(%1137, %1138, newshape=[]) /* ty=Tensor[(?), int32] */;
  %1141 = right_shift(%1139, %1140) /* ty=Tensor[(2028), int32] */;
  %1142 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(2028), uint64] */;
  %1143 = shape_of(%1141, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1144 = cast(%1141, dtype="uint64") /* ty=Tensor[(2028), uint64] */;
  %1145 = dyn.reshape(%1142, %1143, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %1146 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1147 = cast(%1136, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1148 = reshape(%1146, newshape=[]) /* ty=bool */;
  %1149 = reshape(%1147, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1150 = @func_1950(%1148, %1149) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %1151 = bitwise_and(%1144, %1145) /* ty=Tensor[(2028), uint64] */;
  %1152 = %1150.0;
  (%1151, %1152, False /* ty=bool */)
}

def @func_7728() -> Tensor[(2028), uint16] {
  @func_6098() /* ty=Tensor[(2028), uint16] */
}

def @func_10601(%var_10559: Tensor[(11, 9, 10), float64]) -> (Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64]) {
  %1153 = cast(%var_10559, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %1154 = cast(%var_10559, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %1155 = cast(%var_10559, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %1156 = cosh(%1153) /* ty=Tensor[(11, 9, 10), float64] */;
  %1157 = sin(%1154) /* ty=Tensor[(11, 9, 10), float64] */;
  %1158 = atanh(%1155) /* ty=Tensor[(11, 9, 10), float64] */;
  (%1156, %1157, %1158)
}

def @func_3638(%var_3558: Tensor[(2028), uint16], %var_3574: Tensor[(126), float64], %var_3600: Tensor[(2156), float32]) -> (Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) {
  %1159 = @func_3481() /* ty=Tensor[(2028), uint16] */;
  %1160 = cast(%var_3558, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %1161 = shape_of(%1159, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1162 = cast(%1159, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %1163 = dyn.reshape(%1160, %1161, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1164 = cast(%var_3574, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1165 = reshape(%1164, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %1166 = @func_892(%1165) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %1167 = logical_and(%1162, %1163) /* ty=Tensor[(2028), bool] */;
  %1168 = cast(%1167, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1169 = cast(%var_3574, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1170 = reshape(%1168, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1171 = reshape(%1169, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1172 = @func_3331(%1170, %1171) /* ty=(Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) */;
  %1173 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 330), float64] */, dtype="float64") /* ty=Tensor[(1, 330), float64] */;
  %1174 = cast(%var_3600, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1175 = reshape(%1173, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %1176 = reshape(%1174, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %1177 = @func_474(%1175, %1176) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %1178 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 330), float64] */, dtype="float64") /* ty=Tensor[(1, 330), float64] */;
  %1179 = atan(%1178) /* ty=Tensor[(1, 330), float64] */;
  %1180 = cast(%1179, dtype="bool") /* ty=Tensor[(1, 330), bool] */;
  %1181 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 330), float64] */, dtype="bool") /* ty=Tensor[(16, 330), bool] */;
  %1182 = %1166.2;
  %1183 = %1172.3;
  %1184 = %1177.2;
  %1185 = greater_equal(%1180, %1181) /* ty=Tensor[(16, 330), bool] */;
  (%1167, %1182, %var_3574, %1183, %1184, %var_3600, %1185)
}

def @func_11214() -> Tensor[(2028), uint16] {
  @func_3481() /* ty=Tensor[(2028), uint16] */
}

def @func_5395(%var_5374: Tensor[(2028), int16]) -> (Tensor[(2028), bool],) {
  %1186 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
  %1187 = %1186.1;
  %1188 = cast(%var_5374, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %1189 = shape_of(%1187, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1190 = cast(%1187, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %1191 = dyn.reshape(%1188, %1189, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1192 = logical_or(%1190, %1191) /* ty=Tensor[(2028), bool] */;
  (%1192,)
}

def @func_7055(%var_7007: int32, %var_7028: Tensor[(126), float64], %var_7053: Tensor[(432), float32]) -> (Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) {
  %1193 = cast(meta[relay.Constant][52] /* ty=Tensor[(4, 11, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %1194 = cast(%var_7007, dtype="int32") /* ty=int32 */;
  %1195 = cast(meta[relay.Constant][53] /* ty=Tensor[(154, 14), float32] */, dtype="float32") /* ty=Tensor[(154, 14), float32] */;
  %1196 = reshape(%1194, newshape=[]) /* ty=int32 */;
  %1197 = reshape(%1195, newshape=[14, 154]) /* ty=Tensor[(14, 154), float32] */;
  %1198 = @func_5734(%1196, %1197) /* ty=(Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) */;
  %1199 = %1198.1;
  %1200 = cast(%1199, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1201 = cast(%var_7028, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1202 = cast(meta[relay.Constant][53] /* ty=Tensor[(154, 14), float32] */, dtype="float32") /* ty=Tensor[(154, 14), float32] */;
  %1203 = reshape(%1200, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1204 = reshape(%1201, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1205 = reshape(%1202, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %1206 = @func_3638(%1203, %1204, %1205) /* ty=(Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) */;
  %1207 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %1208 = cast(%var_7053, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1209 = cast(%var_7007, dtype="bool") /* ty=bool */;
  %1210 = reshape(%1208, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), float32] */;
  %1211 = reshape(%1209, newshape=[]) /* ty=bool */;
  %1212 = @func_3060(%1210, %1211) /* ty=(Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) */;
  %1213 = erf(%1193) /* ty=Tensor[(4, 11, 3), float32] */;
  %1214 = %1206.4;
  %1215 = %1207.0;
  %1216 = @func_3481() /* ty=Tensor[(2028), uint16] */;
  %1217 = %1212.1;
  (%1213, %1199, %var_7007, meta[relay.Constant][53] /* ty=Tensor[(154, 14), float32] */, %1214, %var_7028, %1215, %1216, %1217, %var_7053)
}

def @func_16018() -> (Tensor[(2028), uint16],) {
  %1218 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %1219 = %1218.0;
  (%1219,)
}

def @func_9590() -> (Tensor[(2028), uint16],) {
  %1220 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %1221 = %1220.0;
  (%1221,)
}

def @func_15943() -> (Tensor[(2028), uint16], Tensor[(2028), float64]) {
  %1222 = @func_14900() /* ty=Tensor[(2028), uint16] */;
  %1223 = cast(%1222, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1224 = reshape(%1223, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1225 = @func_6703(%1224) /* ty=Tensor[(2028), float64] */;
  (%1222, %1225)
}

def @func_13290(%var_13279: Tensor[(126), float64]) -> (Tensor[(2028), float32], Tensor[(432), float32], Tensor[(416), float64], Tensor[(126), float64]) {
  %1226 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1227 = cast(meta[relay.Constant][54] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %1228 = cast(%var_13279, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1229 = reshape(%1227, newshape=[416]) /* ty=Tensor[(416), float64] */;
  %1230 = reshape(%1228, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1231 = @func_10073(%1229, %1230) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(14, 5, 14), uint8], Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(126), float64], int32, Tensor[(126), float64], Tensor[(432), float32]) */;
  %1232 = %1226.1;
  %1233 = %1231.10;
  (%1232, %1233, meta[relay.Constant][54] /* ty=Tensor[(416), float64] */, %var_13279)
}

def @func_14433() -> (Tensor[(2028), float32],) {
  %1234 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1235 = %1234.1;
  (%1235,)
}

def @func_14757() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %1236 = @func_9881() /* ty=Tensor[(2028), uint16] */;
  %1237 = @func_14328() /* ty=Tensor[(2028), uint16] */;
  (%1236, %1237)
}

def @func_15307() -> (Tensor[(2028), uint16],) {
  %1238 = @func_14757() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1239 = %1238.0;
  (%1239,)
}

def @func_8515() -> (bool, Tensor[(2028), uint16]) {
  %1240 = @func_4115() /* ty=(bool,) */;
  %1241 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %1242 = %1240.0;
  %1243 = %1241.0;
  (%1242, %1243)
}

def @func_4482() -> (Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) {
  %1244 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %1245 = cast(meta[relay.Constant][55] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1246 = cast(meta[relay.Constant][55] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1247 = reshape(%1245, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1248 = reshape(%1246, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1249 = @func_51(%1247, %1248) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %1250 = %1249.0;
  %1251 = cast(meta[relay.Constant][55] /* ty=Tensor[(2156), float32] */, dtype="uint16") /* ty=Tensor[(2156), uint16] */;
  %1252 = shape_of(%1250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1253 = cast(%1250, dtype="uint16") /* ty=Tensor[(14, 11, 14), uint16] */;
  %1254 = dyn.reshape(%1251, %1252, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1255 = %1244.0;
  %1256 = cast(%1255, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %1257 = reshape(%1256, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %1258 = @func_3725(%1257) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
  %1259 = bitwise_or(%1253, %1254) /* ty=Tensor[(14, 11, 14), uint16] */;
  %1260 = %1258.0;
  (%1255, %1259, %1260)
}

def @func_9837() -> (Tensor[(126), float64],) {
  %1261 = @func_9319() /* ty=Tensor[(126), float64] */;
  (%1261,)
}

def @func_17254() -> (Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(8, 15, 16), float32]) {
  %1262 = @func_9716() /* ty=(Tensor[(8, 15, 16), float32],) */;
  %1263 = @func_13038() /* ty=Tensor[(2028), int16] */;
  %1264 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  %1265 = %1262.0;
  (%1263, %1264, %1265)
}

def @func_13038() -> Tensor[(2028), int16] {
  %1266 = @func_12275() /* ty=(Tensor[(2028), int16],) */;
  %1266.0
}

def @func_9443(%var_9437: Tensor[(7, 10, 10), float32], %var_9438: Tensor[(7, 10, 10), float32]) -> Tensor[(7, 10, 10), bool] {
  %1267 = cast(%var_9438, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %1268 = shape_of(%var_9437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1269 = cast(%var_9437, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %1270 = dyn.reshape(%1267, %1268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%1269, %1270) /* ty=Tensor[(7, 10, 10), bool] */
}

def @func_15907() -> (Tensor[(126), float64], Tensor[(2028), uint16]) {
  %1271 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
  %1272 = %1271.1;
  %1273 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  (%1272, %1273)
}

def @func_4886() -> (Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  %1274 = @func_4062() /* ty=(Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) */;
  %1275 = cast(meta[relay.Constant][56] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1276 = cast(meta[relay.Constant][56] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1277 = reshape(%1275, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1278 = reshape(%1276, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1279 = @func_3922(%1277, %1278) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %1280 = %1274.1;
  %1281 = %1279.0;
  (%1280, %1281, meta[relay.Constant][56] /* ty=Tensor[(672), uint8] */)
}

def @func_15706() -> Tensor[(2028), uint16] {
  %1282 = @func_8061() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1282.1
}

def @func_16339() -> Tensor[(2028), uint16] {
  @func_13415() /* ty=Tensor[(2028), uint16] */
}

def @func_16355() -> bool {
  %1283 = @func_8496() /* ty=(bool,) */;
  %1283.0
}

def @func_16405() -> Tensor[(2028), uint16] {
  %1284 = @func_15414() /* ty=(Tensor[(2028), uint16],) */;
  %1284.0
}

def @func_7565() -> Tensor[(2028), uint16] {
  %1285 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
  %1285.0
}

def @func_16764(%var_16746: Tensor[(8, 9, 10), int8]) -> (Tensor[(8, 9, 10), int8], Tensor[(2028), uint16]) {
  %1286 = cast(meta[relay.Constant][57] /* ty=Tensor[(8, 9, 10), int8] */, dtype="int8") /* ty=Tensor[(8, 9, 10), int8] */;
  %1287 = shape_of(%var_16746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1288 = cast(%var_16746, dtype="int8") /* ty=Tensor[(8, 9, 10), int8] */;
  %1289 = dyn.reshape(%1286, %1287, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1290 = @func_15414() /* ty=(Tensor[(2028), uint16],) */;
  %1291 = multiply(%1288, %1289) /* ty=Tensor[(8, 9, 10), int8] */;
  %1292 = %1290.0;
  (%1291, %1292)
}

def @func_12401() -> bool {
  %1293 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1293.2
}

def @func_8620(%var_8617: Tensor[(672), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(78, 6), uint8], Tensor[(2156), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  %1294 = @func_7387() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1295 = cast(meta[relay.Constant][58] /* ty=Tensor[(78, 6), uint8] */, dtype="uint8") /* ty=Tensor[(78, 6), uint8] */;
  %1296 = cast(meta[relay.Constant][58] /* ty=Tensor[(78, 6), uint8] */, dtype="uint8") /* ty=Tensor[(78, 6), uint8] */;
  %1297 = reshape(%1295, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %1298 = reshape(%1296, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %1299 = @func_5577(%1297, %1298) /* ty=(Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1300 = @func_8236() /* ty=(Tensor[(2028), uint16], Tensor[(432), float32], int32, Tensor[(126), float64], Tensor[(432), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(2028), uint16]) */;
  %1301 = cast(%var_8617, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1302 = cast(%var_8617, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1303 = reshape(%1301, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1304 = reshape(%1302, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1305 = @func_3922(%1303, %1304) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %1306 = %1294.0;
  %1307 = @func_5218() /* ty=Tensor[(2028), float32] */;
  %1308 = %1299.2;
  %1309 = %1300.6;
  %1310 = %1305.0;
  (%1306, %1307, %1308, meta[relay.Constant][58] /* ty=Tensor[(78, 6), uint8] */, %1309, %1310, %var_8617)
}

def @func_13159(%var_13151: Tensor[(12, 8, 15), float64]) -> Tensor[(12, 8, 15), float64] {
  %1311 = cast(%var_13151, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  cosh(%1311) /* ty=Tensor[(12, 8, 15), float64] */
}

def @func_8789(%var_8758: Tensor[(16, 2, 13), float64]) -> (Tensor[(16, 2, 13), bool],) {
  %1312 = @func_6259() /* ty=Tensor[(16, 2, 13), float64] */;
  %1313 = cast(%var_8758, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
  %1314 = shape_of(%1312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1315 = cast(%1312, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
  %1316 = dyn.reshape(%1313, %1314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1317 = logical_and(%1315, %1316) /* ty=Tensor[(16, 2, 13), bool] */;
  (%1317,)
}

def @func_16627(%var_16625: Tensor[(980), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(980), uint8]) {
  %1318 = cast(%var_16625, dtype="uint8") /* ty=Tensor[(980), uint8] */;
  %1319 = reshape(%1318, newshape=[980]) /* ty=Tensor[(980), uint8] */;
  %1320 = @func_11572(%1319) /* ty=(Tensor[(14, 11, 14), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8]) */;
  %1321 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  %1322 = %1320.3;
  (%1321, %1322, %var_16625)
}

def @func_6473(%var_6443: Tensor[(672), uint8], %var_6448: Tensor[(5, 16, 8), bool], %var_6465: Tensor[(330), float64], %var_6466: Tensor[(2156), float32]) -> (Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(5, 16, 8), int32], Tensor[(42), float32], Tensor[(330), float64], Tensor[(2156), float32]) {
  %1323 = cast(%var_6443, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1324 = cast(%var_6443, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1325 = reshape(%1323, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1326 = reshape(%1324, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1327 = @func_3922(%1325, %1326) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %1328 = @func_5634() /* ty=(bool,) */;
  %1329 = %1328.0;
  %1330 = cast(%1329, dtype="int32") /* ty=int32 */;
  %1331 = cast(%var_6448, dtype="int32") /* ty=Tensor[(5, 16, 8), int32] */;
  %1332 = cast(%var_6465, dtype="float64") /* ty=Tensor[(330), float64] */;
  %1333 = cast(%var_6466, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1334 = reshape(%1332, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %1335 = reshape(%1333, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %1336 = @func_474(%1334, %1335) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %1337 = %1327.0;
  %1338 = left_shift(%1330, %1331) /* ty=Tensor[(5, 16, 8), int32] */;
  %1339 = %1336.1;
  (%1337, %var_6443, %1338, %1339, %var_6465, %var_6466)
}

def @func_5064() -> Tensor[(2028), uint16] {
  @func_3481() /* ty=Tensor[(2028), uint16] */
}

def @func_14918() -> Tensor[(2028), uint16] {
  %1340 = @func_7387() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1340.1
}

def @func_16586() -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), float32], Tensor[(2028), float32]) {
  %1341 = @func_14433() /* ty=(Tensor[(2028), float32],) */;
  %1342 = @func_14900() /* ty=Tensor[(2028), uint16] */;
  %1343 = cast(%1342, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1344 = reshape(%1343, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1345 = @func_9011(%1344) /* ty=(Tensor[(2028), float32],) */;
  %1346 = %1341.0;
  %1347 = @func_12187() /* ty=Tensor[(2028), float32] */;
  %1348 = %1345.0;
  (%1342, %1346, %1347, %1348)
}

def @func_9564() -> (Tensor[(49, 4), float64],) {
  %1349 = @func_6363() /* ty=(Tensor[(49, 4), float32], Tensor[(49, 4), float64]) */;
  %1350 = %1349.0;
  %1351 = @func_4986() /* ty=(bool,) */;
  %1352 = %1351.0;
  %1353 = cast(%1350, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
  %1354 = cast(%1352, dtype="float64") /* ty=float64 */;
  %1355 = floor_mod(%1353, %1354) /* ty=Tensor[(49, 4), float64] */;
  (%1355,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3335(%var_3333: Tensor[(2028), uint16], %var_3334: Tensor[(126), float64]) -> (Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) {
  @func_3331(%var_3333, %var_3334) /* ty=(Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) */
}

def @func_10866(%var_10838: Tensor[(13, 1, 5), uint8], %var_10839: Tensor[(13, 15, 5), uint8]) -> (Tensor[(13, 15, 5), bool], Tensor[(2028), uint16]) {
  %0 = cast(%var_10838, dtype="bool") /* ty=Tensor[(13, 1, 5), bool] */;
  %1 = cast(%var_10839, dtype="bool") /* ty=Tensor[(13, 15, 5), bool] */;
  %2 = not_equal(%0, %1) /* ty=Tensor[(13, 15, 5), bool] */;
  %3 = @func_7728() /* ty=Tensor[(2028), uint16] */;
  (%2, %3)
}

def @func_5406() -> (Tensor[(2028), uint16],) {
  @func_5404() /* ty=(Tensor[(2028), uint16],) */
}

def @func_15558(%var_15556: Tensor[(1, 10), float32]) -> (Tensor[(2028), uint16], Tensor[(1, 5, 2), float32], Tensor[(1, 10), float32], int32, int32, Tensor[(2028), uint16]) {
  @func_15555(%var_15556) /* ty=(Tensor[(2028), uint16], Tensor[(1, 5, 2), float32], Tensor[(1, 10), float32], int32, int32, Tensor[(2028), uint16]) */
}

def @func_9085() -> Tensor[(2028), uint16] {
  %5 = fn () -> Tensor[(2028), uint16] {
    %4 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
    %4.0
  };
  %5() /* ty=Tensor[(2028), uint16] */
}

def @func_3021() -> (Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) {
  @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */
}

def @func_16260() -> Tensor[(2028), uint16] {
  @func_16258() /* ty=Tensor[(2028), uint16] */
}

def @func_174(%var_172: Tensor[(13, 13, 12), uint16], %var_173: Tensor[(13, 13, 12), uint16]) -> Tensor[(13, 13, 12), uint16] {
  @func_170(%var_172, %var_173) /* ty=Tensor[(13, 13, 12), uint16] */
}

def @func_5022() -> Tensor[(2028), uint16] {
  %6 = fn () -> Tensor[(2028), uint16] {
    @func_3826() /* ty=Tensor[(2028), uint16] */
  };
  %6() /* ty=Tensor[(2028), uint16] */
}

def @func_1726(%var_1725: Tensor[(13, 16, 7), float64]) -> (Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) {
  %14 = fn (%var_1713: Tensor[(13, 16, 7), float64]) -> (Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) {
    %7 = cast(%var_1713, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 156), uint16] */, dtype="uint16") /* ty=Tensor[(13, 156), uint16] */;
    %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 156), uint16] */, dtype="uint16") /* ty=Tensor[(13, 156), uint16] */;
    %10 = reshape(%8, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
    %11 = reshape(%9, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
    %12 = rsqrt(%7) /* ty=Tensor[(13, 16, 7), float64] */;
    %13 = @func_170(%10, %11) /* ty=Tensor[(13, 13, 12), uint16] */;
    (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(13, 156), uint16] */)
  };
  %14(%var_1725) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) */
}

def @func_3450(%var_3442: Tensor[(165, 2), float32]) -> (Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) {
  %15 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(165, 2), float64] */, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %18 = reshape(%16, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %19 = reshape(%17, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %20 = @func_474(%18, %19) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(165, 2), float64] */, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %23 = reshape(%21, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %24 = reshape(%22, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %25 = @func_474(%23, %24) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(165, 2), float64] */, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
  %27 = log10(%26) /* ty=Tensor[(165, 2), float32] */;
  %28 = cast(%var_3442, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(2), int32] */;
  %30 = cast(%27, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %32 = %15.3;
  %33 = %20.0;
  %34 = %25.1;
  %35 = multiply(%30, %31) /* ty=Tensor[(165, 2), int16] */;
  (%32, %33, meta[relay.Constant][2] /* ty=Tensor[(2156), float32] */, %34, %35)
}

def @func_8374() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) {
  @func_8372() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) */
}

def @func_13040() -> Tensor[(2028), int16] {
  @func_13038() /* ty=Tensor[(2028), int16] */
}

def @func_16406() -> Tensor[(2028), uint16] {
  %37 = fn () -> Tensor[(2028), uint16] {
    %36 = @func_15414() /* ty=(Tensor[(2028), uint16],) */;
    %36.0
  };
  %37() /* ty=Tensor[(2028), uint16] */
}

def @func_5181() -> (Tensor[(2028), uint16],) {
  %38 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  (%38,)
}

def @func_9763() -> (Tensor[(2028), uint16],) {
  @func_9761() /* ty=(Tensor[(2028), uint16],) */
}

def @func_4574(%var_4539: Tensor[(2028), uint16], %var_4559: Tensor[(2028), int32]) -> (Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) {
  %39 = @func_4080() /* ty=(Tensor[(2028), uint16],) */;
  %40 = %39.0;
  %41 = cast(%var_4539, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(1), int32] */;
  %43 = cast(%40, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), int32] */;
  %45 = right_shift(%43, %44) /* ty=Tensor[(2028), int32] */;
  %46 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(2028), uint64] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(1), int32] */;
  %48 = cast(%45, dtype="uint64") /* ty=Tensor[(2028), uint64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %50 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %51 = cast(%40, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %52 = reshape(%50, newshape=[]) /* ty=bool */;
  %53 = reshape(%51, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %54 = @func_1950(%52, %53) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %55 = bitwise_and(%48, %49) /* ty=Tensor[(2028), uint64] */;
  %56 = %54.0;
  (%55, %56, False /* ty=bool */)
}

def @func_13951() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(468), uint8], Tensor[(672), uint8], Tensor[(330), float32], bool, Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16]) {
  %57 = @func_12669() /* ty=(Tensor[(2028), uint16],) */;
  %58 = @func_8515() /* ty=(bool, Tensor[(2028), uint16]) */;
  %59 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %60 = @func_12275() /* ty=(Tensor[(2028), int16],) */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(468), uint8] */, dtype="uint8") /* ty=Tensor[(468), uint8] */;
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(468), uint8] */, dtype="uint8") /* ty=Tensor[(468), uint8] */;
  %63 = reshape(%61, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %64 = reshape(%62, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %65 = @func_5577(%63, %64) /* ty=(Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %67 = reshape(%66, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %68 = @func_6240(%67) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) */;
  %69 = @func_6652() /* ty=(bool, Tensor[(2028), uint16]) */;
  %70 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %71 = @func_11431() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) */;
  %72 = @func_8172() /* ty=(Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) */;
  %73 = %57.0;
  %74 = %58.1;
  %75 = %59.2;
  %76 = %60.0;
  %77 = %65.1;
  %78 = %68.5;
  %79 = %69.0;
  %80 = %70.0;
  %81 = %71.3;
  %82 = %72.0;
  (%73, %74, %75, %76, %77, meta[relay.Constant][3] /* ty=Tensor[(468), uint8] */, %78, meta[relay.Constant][4] /* ty=Tensor[(330), float32] */, %79, %80, %81, %82)
}

def @func_5246() -> (Tensor[(2028), uint16],) {
  %85 = fn () -> (Tensor[(2028), uint16],) {
    %83 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
    %84 = %83.0;
    (%84,)
  };
  %85() /* ty=(Tensor[(2028), uint16],) */
}

def @func_13213() -> Tensor[(2028), uint16] {
  %86 = fn () -> Tensor[(2028), uint16] {
    @func_9044() /* ty=Tensor[(2028), uint16] */
  };
  %86() /* ty=Tensor[(2028), uint16] */
}

def @func_6324() -> (Tensor[(2028), uint16], Tensor[(2, 14, 7), bool], Tensor[(196), float32], Tensor[(2, 14, 7), bool]) {
  %96 = fn () -> (Tensor[(2028), uint16], Tensor[(2, 14, 7), bool], Tensor[(196), float32], Tensor[(2, 14, 7), bool]) {
    %87 = cast(meta[relay.Constant][5] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
    %88 = reshape(%87, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
    %89 = @func_4779(%88) /* ty=(Tensor[(2, 14, 7), bool],) */;
    %90 = %89.0;
    %91 = cast(%90, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
    %92 = reshape(%91, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
    %93 = @func_4779(%92) /* ty=(Tensor[(2, 14, 7), bool],) */;
    %94 = @func_6098() /* ty=Tensor[(2028), uint16] */;
    %95 = %93.0;
    (%94, %90, meta[relay.Constant][5] /* ty=Tensor[(196), float32] */, %95)
  };
  %96() /* ty=(Tensor[(2028), uint16], Tensor[(2, 14, 7), bool], Tensor[(196), float32], Tensor[(2, 14, 7), bool]) */
}

def @func_13189() -> Tensor[(16, 2, 13), float64] {
  @func_6259() /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_8546() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %102 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %97 = @func_5181() /* ty=(Tensor[(2028), uint16],) */;
    %98 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
    %99 = %97.0;
    %100 = @func_7565() /* ty=Tensor[(2028), uint16] */;
    %101 = %98.0;
    (%99, %100, %101)
  };
  %102() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_9656() -> Tensor[(2028), uint16] {
  %103 = fn () -> Tensor[(2028), uint16] {
    @func_7741() /* ty=Tensor[(2028), uint16] */
  };
  %103() /* ty=Tensor[(2028), uint16] */
}

def @func_14471() -> (Tensor[(14, 6, 8), float32],) {
  @func_14469() /* ty=(Tensor[(14, 6, 8), float32],) */
}

def @func_11574(%var_11573: Tensor[(980), uint8]) -> (Tensor[(14, 11, 14), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8]) {
  %113 = fn (%var_11563: Tensor[(980), uint8]) -> (Tensor[(14, 11, 14), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8]) {
    %104 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
    %105 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
    %106 = cast(%var_11563, dtype="uint8") /* ty=Tensor[(980), uint8] */;
    %107 = reshape(%106, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
    %108 = %104.1;
    %109 = @func_5218() /* ty=Tensor[(2028), float32] */;
    %110 = %105.0;
    %111 = @func_10556() /* ty=Tensor[(2028), uint16] */;
    %112 = @func_6979(%107) /* ty=Tensor[(14, 5, 14), uint8] */;
    (%108, %109, %110, %111, %112, %var_11563)
  };
  %113(%var_11573) /* ty=(Tensor[(14, 11, 14), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8]) */
}

def @func_3998() -> (bool, Tensor[(2028), uint16], Tensor[(416), float64]) {
  %114 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %115 = %114.2;
  %116 = cast(%115, dtype="bool") /* ty=bool */;
  %117 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %118 = cast(%117, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %119 = reshape(%116, newshape=[]) /* ty=bool */;
  %120 = reshape(%118, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %121 = @func_1950(%119, %120) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %122 = %121.3;
  (%115, %117, %122)
}

def @func_17998(%var_17996: Tensor[(15, 8, 2), float64], %var_17997: Tensor[(15, 8, 2), float64]) -> (Tensor[(15, 8, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(2028), uint16], Tensor[(2028), int16]) {
  @func_17994(%var_17996, %var_17997) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(2028), uint16], Tensor[(2028), int16]) */
}

def @func_6706(%var_6704: Tensor[(2028), uint16]) -> Tensor[(2028), float64] {
  @func_6703(%var_6704) /* ty=Tensor[(2028), float64] */
}

def @func_10894() -> Tensor[(2028), uint16] {
  %123 = fn () -> Tensor[(2028), uint16] {
    @func_7741() /* ty=Tensor[(2028), uint16] */
  };
  %123() /* ty=Tensor[(2028), uint16] */
}

def @func_3967() -> (Tensor[(2028), uint16],) {
  %125 = fn () -> (Tensor[(2028), uint16],) {
    %124 = @func_3481() /* ty=Tensor[(2028), uint16] */;
    (%124,)
  };
  %125() /* ty=(Tensor[(2028), uint16],) */
}

def @func_14532() -> Tensor[(2028), uint16] {
  %126 = @func_10484() /* ty=(Tensor[(2028), uint16],) */;
  %126.0
}

def @func_17697() -> (Tensor[(16, 2, 13), float64], Tensor[(2, 14, 7), float32]) {
  %127 = @func_6259() /* ty=Tensor[(16, 2, 13), float64] */;
  %128 = @func_5945() /* ty=Tensor[(2, 14, 7), float32] */;
  (%127, %128)
}

def @func_9013(%var_9012: Tensor[(2028), uint16]) -> (Tensor[(2028), float32],) {
  %136 = fn (%var_9002: Tensor[(2028), uint16]) -> (Tensor[(2028), float32],) {
    %129 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
    %130 = %129.0;
    %131 = cast(%var_9002, dtype="float32") /* ty=Tensor[(2028), float32] */;
    %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(1), int32] */;
    %133 = cast(%130, dtype="float32") /* ty=Tensor[(2028), float32] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?), float32] */;
    %135 = maximum(%133, %134) /* ty=Tensor[(2028), float32] */;
    (%135,)
  };
  %136(%var_9012) /* ty=(Tensor[(2028), float32],) */
}

def @func_12669() -> (Tensor[(2028), uint16],) {
  %137 = @func_9761() /* ty=(Tensor[(2028), uint16],) */;
  %138 = %137.0;
  (%138,)
}

def @func_7645() -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) {
  %143 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) {
    %139 = @func_6933() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %140 = %139.1;
    %141 = @func_6581() /* ty=Tensor[(2028), float32] */;
    %142 = @func_5881() /* ty=Tensor[(2028), uint16] */;
    (%140, %141, %142)
  };
  %143() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */
}

def @func_6075() -> (Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) {
  %162 = fn () -> (Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) {
    %144 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
    %145 = %144.0;
    %146 = cast(%145, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %147 = cast(meta[relay.Constant][6] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %148 = reshape(%146, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
    %149 = reshape(%147, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %150 = @func_3331(%148, %149) /* ty=(Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) */;
    %151 = cast(meta[relay.Constant][7] /* ty=Tensor[(98, 2), float32] */, dtype="float32") /* ty=Tensor[(98, 2), float32] */;
    %152 = %150.2;
    %153 = cast(%152, dtype="float64") /* ty=Tensor[(126), float64] */;
    %154 = reshape(%151, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
    %155 = reshape(%153, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
    %156 = @func_4706(%154, %155) /* ty=(Tensor[(2, 14, 7), int16], Tensor[(416), float64], Tensor[(3, 42), float64], Tensor[(2028), int32]) */;
    %157 = cast(meta[relay.Constant][7] /* ty=Tensor[(98, 2), float32] */, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
    %158 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
    %159 = %156.1;
    %160 = acos(%157) /* ty=Tensor[(98, 2), float64] */;
    %161 = %158.1;
    (%145, %152, meta[relay.Constant][6] /* ty=Tensor[(126), float64] */, %159, %160, %161)
  };
  %162() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */
}

def @func_11914(%var_11912: Tensor[(2156), float32]) -> (bool, Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(49, 4), float64], Tensor[(8, 15, 16), float32], Tensor[(2, 14, 7), bool], Tensor[(10, 9, 13), bool], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32]) {
  @func_11911(%var_11912) /* ty=(bool, Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(49, 4), float64], Tensor[(8, 15, 16), float32], Tensor[(2, 14, 7), bool], Tensor[(10, 9, 13), bool], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32]) */
}

def @func_10558() -> Tensor[(2028), uint16] {
  @func_10556() /* ty=Tensor[(2028), uint16] */
}

def @func_16926() -> (Tensor[(126), float64],) {
  %165 = fn () -> (Tensor[(126), float64],) {
    %163 = @func_12167() /* ty=(Tensor[(126), float64],) */;
    %164 = %163.0;
    (%164,)
  };
  %165() /* ty=(Tensor[(126), float64],) */
}

def @func_9522() -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %166 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %167 = %166.1;
  %168 = @func_6581() /* ty=Tensor[(2028), float32] */;
  %169 = @func_9084() /* ty=Tensor[(2028), uint16] */;
  %170 = @func_5064() /* ty=Tensor[(2028), uint16] */;
  (%167, %168, %169, %170)
}

def @func_12671() -> (Tensor[(2028), uint16],) {
  @func_12669() /* ty=(Tensor[(2028), uint16],) */
}

def @func_10211() -> (Tensor[(2028), float32], bool, Tensor[(2028), uint16]) {
  @func_10209() /* ty=(Tensor[(2028), float32], bool, Tensor[(2028), uint16]) */
}

def @func_16627(%var_16625: Tensor[(980), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(980), uint8]) {
  %171 = cast(%var_16625, dtype="uint8") /* ty=Tensor[(980), uint8] */;
  %172 = reshape(%171, newshape=[980]) /* ty=Tensor[(980), uint8] */;
  %173 = @func_11572(%172) /* ty=(Tensor[(14, 11, 14), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8]) */;
  %174 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  %175 = %173.3;
  (%174, %175, %var_16625)
}

def @func_16180() -> (Tensor[(2028), uint16],) {
  %176 = @func_14532() /* ty=Tensor[(2028), uint16] */;
  (%176,)
}

def @func_13191() -> Tensor[(16, 2, 13), float64] {
  @func_13189() /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_17908(%var_17907: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), float32],) {
  %179 = fn (%var_17901: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), float32],) {
    %177 = cast(%var_17901, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
    %178 = cos(%177) /* ty=Tensor[(7, 15, 9), float32] */;
    (%178,)
  };
  %179(%var_17907) /* ty=(Tensor[(7, 15, 9), float32],) */
}

def @func_10477(%var_10476: Tensor[(1, 2028), uint16]) -> (Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) {
  %191 = fn (%var_10452: Tensor[(1, 2028), uint16]) -> (Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) {
    %180 = @func_4986() /* ty=(bool,) */;
    %181 = %180.0;
    %182 = cast(%181, dtype="bool") /* ty=bool */;
    %183 = cast(%var_10452, dtype="uint16") /* ty=Tensor[(1, 2028), uint16] */;
    %184 = reshape(%182, newshape=[]) /* ty=bool */;
    %185 = reshape(%183, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
    %186 = @func_1950(%184, %185) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
    %187 = cast(%var_10452, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
    %188 = cast(%181, dtype="float64") /* ty=float64 */;
    %189 = %186.0;
    %190 = mod(%187, %188) /* ty=Tensor[(1, 2028), float64] */;
    (%189, %190)
  };
  %191(%var_10476) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) */
}

def @func_5965() -> (Tensor[(2028), uint16],) {
  %193 = fn () -> (Tensor[(2028), uint16],) {
    %192 = @func_5881() /* ty=Tensor[(2028), uint16] */;
    (%192,)
  };
  %193() /* ty=(Tensor[(2028), uint16],) */
}

def @func_12277() -> (Tensor[(2028), int16],) {
  @func_12275() /* ty=(Tensor[(2028), int16],) */
}

def @func_13150() -> (Tensor[(2028), uint16],) {
  @func_13148() /* ty=(Tensor[(2028), uint16],) */
}

def @func_16587() -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), float32], Tensor[(2028), float32]) {
  %202 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), float32], Tensor[(2028), float32]) {
    %194 = @func_14433() /* ty=(Tensor[(2028), float32],) */;
    %195 = @func_14900() /* ty=Tensor[(2028), uint16] */;
    %196 = cast(%195, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %197 = reshape(%196, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
    %198 = @func_9011(%197) /* ty=(Tensor[(2028), float32],) */;
    %199 = %194.0;
    %200 = @func_12187() /* ty=Tensor[(2028), float32] */;
    %201 = %198.0;
    (%195, %199, %200, %201)
  };
  %202() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), float32], Tensor[(2028), float32]) */
}

def @func_4637() -> (Tensor[(2028), uint16], Tensor[(2028), int16]) {
  @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */
}

def @func_12188() -> Tensor[(2028), float32] {
  %204 = fn () -> Tensor[(2028), float32] {
    %203 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %203.1
  };
  %204() /* ty=Tensor[(2028), float32] */
}

def @func_13011() -> Tensor[(2028), uint16] {
  %206 = fn () -> Tensor[(2028), uint16] {
    %205 = @func_10484() /* ty=(Tensor[(2028), uint16],) */;
    %205.0
  };
  %206() /* ty=Tensor[(2028), uint16] */
}

def @func_15851() -> (Tensor[(2028), float32], Tensor[(10, 9, 13), bool], Tensor[(2028), int16]) {
  @func_15849() /* ty=(Tensor[(2028), float32], Tensor[(10, 9, 13), bool], Tensor[(2028), int16]) */
}

def @func_8623(%var_8621: Tensor[(672), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(78, 6), uint8], Tensor[(2156), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  @func_8620(%var_8621) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(78, 6), uint8], Tensor[(2156), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */
}

def @func_4886() -> (Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  %207 = @func_4062() /* ty=(Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) */;
  %208 = cast(meta[relay.Constant][8] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %209 = cast(meta[relay.Constant][8] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %210 = reshape(%208, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %211 = reshape(%209, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %212 = @func_3922(%210, %211) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %213 = %207.1;
  %214 = %212.0;
  (%213, %214, meta[relay.Constant][8] /* ty=Tensor[(672), uint8] */)
}

def @func_4117() -> (bool,) {
  @func_4115() /* ty=(bool,) */
}

def @func_11204() -> Tensor[(126), float64] {
  %215 = fn () -> Tensor[(126), float64] {
    @func_11073() /* ty=Tensor[(126), float64] */
  };
  %215() /* ty=Tensor[(126), float64] */
}

def @func_6573() -> Tensor[(2028), uint16] {
  %216 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %216.1
}

def @func_10870(%var_10868: Tensor[(13, 1, 5), uint8], %var_10869: Tensor[(13, 15, 5), uint8]) -> (Tensor[(13, 15, 5), bool], Tensor[(2028), uint16]) {
  @func_10866(%var_10868, %var_10869) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(2028), uint16]) */
}

def @func_3828() -> Tensor[(2028), uint16] {
  @func_3826() /* ty=Tensor[(2028), uint16] */
}

def @func_9882() -> Tensor[(2028), uint16] {
  %217 = fn () -> Tensor[(2028), uint16] {
    @func_9792() /* ty=Tensor[(2028), uint16] */
  };
  %217() /* ty=Tensor[(2028), uint16] */
}

def @func_4607() -> (Tensor[(2028), uint16],) {
  %220 = fn () -> (Tensor[(2028), uint16],) {
    %218 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
    %219 = %218.0;
    (%219,)
  };
  %220() /* ty=(Tensor[(2028), uint16],) */
}

def @func_17538(%var_17535: Tensor[(7, 3, 16), uint8], %var_17536: Tensor[(7, 3, 16), uint8], %var_17537: Tensor[(416), float64]) -> (Tensor[(7, 3, 16), uint8], bool, Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  @func_17533(%var_17535, %var_17536, %var_17537) /* ty=(Tensor[(7, 3, 16), uint8], bool, Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */
}

def @func_7361(%var_7317: Tensor[(6, 15, 2), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32]) {
  %221 = cast(%var_7317, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %222 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %223 = asinh(%221) /* ty=Tensor[(6, 15, 2), float64] */;
  %224 = @func_5881() /* ty=Tensor[(2028), uint16] */;
  %225 = %222.1;
  (%223, %224, %225)
}

def @func_9564() -> (Tensor[(49, 4), float64],) {
  %226 = @func_6363() /* ty=(Tensor[(49, 4), float32], Tensor[(49, 4), float64]) */;
  %227 = %226.0;
  %228 = @func_4986() /* ty=(bool,) */;
  %229 = %228.0;
  %230 = cast(%227, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
  %231 = cast(%229, dtype="float64") /* ty=float64 */;
  %232 = floor_mod(%230, %231) /* ty=Tensor[(49, 4), float64] */;
  (%232,)
}

def @func_9443(%var_9437: Tensor[(7, 10, 10), float32], %var_9438: Tensor[(7, 10, 10), float32]) -> Tensor[(7, 10, 10), bool] {
  %233 = cast(%var_9438, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %234 = shape_of(%var_9437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_9437, dtype="bool") /* ty=Tensor[(7, 10, 10), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%235, %236) /* ty=Tensor[(7, 10, 10), bool] */
}

def @func_13356() -> Tensor[(8, 15, 16), float64] {
  @func_13354() /* ty=Tensor[(8, 15, 16), float64] */
}

def @func_15239() -> (Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %244 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %237 = @func_3481() /* ty=Tensor[(2028), uint16] */;
    %238 = cast(%237, dtype="int16") /* ty=Tensor[(2028), int16] */;
    %239 = reshape(%238, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
    %240 = @func_3725(%239) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
    %241 = %240.1;
    %242 = @func_9792() /* ty=Tensor[(2028), uint16] */;
    %243 = @func_9655() /* ty=Tensor[(2028), uint16] */;
    (%237, %241, %242, %243)
  };
  %244() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_18267(%var_18265: Tensor[(7, 9, 8), uint8], %var_18266: Tensor[(7, 9, 8), uint8]) -> (Tensor[(7, 9, 8), uint8],) {
  %250 = fn (%var_18232: Tensor[(7, 9, 8), uint8], %var_18233: Tensor[(7, 9, 8), uint8]) -> (Tensor[(7, 9, 8), uint8],) {
    %245 = cast(%var_18233, dtype="uint8") /* ty=Tensor[(7, 9, 8), uint8] */;
    %246 = shape_of(%var_18232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %247 = cast(%var_18232, dtype="uint8") /* ty=Tensor[(7, 9, 8), uint8] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %249 = bitwise_or(%247, %248) /* ty=Tensor[(7, 9, 8), uint8] */;
    (%249,)
  };
  %250(%var_18265, %var_18266) /* ty=(Tensor[(7, 9, 8), uint8],) */
}

def @func_5737(%var_5735: int32, %var_5736: Tensor[(14, 154), float32]) -> (Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) {
  %266 = fn (%var_5685: int32, %var_5708: Tensor[(14, 154), float32]) -> (Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) {
    %251 = cast(%var_5685, dtype="bool") /* ty=bool */;
    %252 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 6, 5), int32] */, dtype="bool") /* ty=Tensor[(5, 6, 5), bool] */;
    %253 = cast(meta[relay.Constant][10] /* ty=Tensor[(2028), int16] */, dtype="int16") /* ty=Tensor[(2028), int16] */;
    %254 = reshape(%253, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
    %255 = @func_5395(%254) /* ty=(Tensor[(2028), bool],) */;
    %256 = cast(%var_5708, dtype="float32") /* ty=Tensor[(14, 154), float32] */;
    %257 = cast(%var_5708, dtype="float32") /* ty=Tensor[(14, 154), float32] */;
    %258 = reshape(%256, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %259 = reshape(%257, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %260 = @func_51(%258, %259) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
    %261 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %262 = less(%251, %252) /* ty=Tensor[(5, 6, 5), bool] */;
    %263 = %255.0;
    %264 = %260.1;
    %265 = %261.0;
    (%262, %263, meta[relay.Constant][10] /* ty=Tensor[(2028), int16] */, %264, %var_5708, %265)
  };
  %266(%var_5735, %var_5736) /* ty=(Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) */
}

def @func_15301() -> (bool,) {
  @func_15299() /* ty=(bool,) */
}

def @func_1449(%var_1448: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64],) {
  %269 = fn (%var_1444: Tensor[(4, 12, 2), float64]) -> (Tensor[(4, 12, 2), float64],) {
    %267 = cast(%var_1444, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %268 = tan(%267) /* ty=Tensor[(4, 12, 2), float64] */;
    (%268,)
  };
  %269(%var_1448) /* ty=(Tensor[(4, 12, 2), float64],) */
}

def @func_13162(%var_13160: Tensor[(12, 8, 15), float64]) -> Tensor[(12, 8, 15), float64] {
  @func_13159(%var_13160) /* ty=Tensor[(12, 8, 15), float64] */
}

def @func_17621() -> Tensor[(2028), uint16] {
  %270 = @func_10484() /* ty=(Tensor[(2028), uint16],) */;
  %270.0
}

def @func_9837() -> (Tensor[(126), float64],) {
  %271 = @func_9319() /* ty=Tensor[(126), float64] */;
  (%271,)
}

def @func_6934() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %277 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %272 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
    %273 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
    %274 = %272.0;
    %275 = @func_5021() /* ty=Tensor[(2028), uint16] */;
    %276 = %273.0;
    (%274, %275, %276)
  };
  %277() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_15402() -> (Tensor[(2028), uint16], Tensor[(10, 9, 13), bool]) {
  @func_15400() /* ty=(Tensor[(2028), uint16], Tensor[(10, 9, 13), bool]) */
}

def @func_54(%var_52: Tensor[(14, 11, 14), float32], %var_53: Tensor[(14, 11, 14), float32]) -> (Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) {
  %287 = fn (%var_12: Tensor[(14, 11, 14), float32], %var_20: Tensor[(14, 11, 14), float32]) -> (Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) {
    %278 = cast(%var_12, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
    %279 = cast(%var_20, dtype="bool") /* ty=Tensor[(14, 11, 14), bool] */;
    %280 = shape_of(%var_12, dtype="int32") /* ty=Tensor[(3), int32] */;
    %281 = cast(%var_12, dtype="bool") /* ty=Tensor[(14, 11, 14), bool] */;
    %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %283 = equal(%281, %282) /* ty=Tensor[(14, 11, 14), bool] */;
    %284 = cast(%283, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
    %285 = atan(%278) /* ty=Tensor[(14, 11, 14), float32] */;
    %286 = sqrt(%284) /* ty=Tensor[(14, 11, 14), float32] */;
    (%285, %286)
  };
  %287(%var_52, %var_53) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */
}

def @func_6479(%var_6475: Tensor[(672), uint8], %var_6476: Tensor[(5, 16, 8), bool], %var_6477: Tensor[(330), float64], %var_6478: Tensor[(2156), float32]) -> (Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(5, 16, 8), int32], Tensor[(42), float32], Tensor[(330), float64], Tensor[(2156), float32]) {
  @func_6473(%var_6475, %var_6476, %var_6477, %var_6478) /* ty=(Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(5, 16, 8), int32], Tensor[(42), float32], Tensor[(330), float64], Tensor[(2156), float32]) */
}

def @func_11494() -> Tensor[(2028), uint16] {
  %289 = fn () -> Tensor[(2028), uint16] {
    %288 = @func_9761() /* ty=(Tensor[(2028), uint16],) */;
    %288.0
  };
  %289() /* ty=Tensor[(2028), uint16] */
}

def @func_15044() -> (Tensor[(2028), float32], Tensor[(2028), float32]) {
  @func_15042() /* ty=(Tensor[(2028), float32], Tensor[(2028), float32]) */
}

def @func_14328() -> Tensor[(2028), uint16] {
  %290 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %290.2
}

def @func_17312() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %293 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %291 = @func_7565() /* ty=Tensor[(2028), uint16] */;
    %292 = @func_3826() /* ty=Tensor[(2028), uint16] */;
    (%291, %292)
  };
  %293() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_13354() -> Tensor[(8, 15, 16), float64] {
  %294 = @func_9716() /* ty=(Tensor[(8, 15, 16), float32],) */;
  %295 = %294.0;
  %296 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 15, 16), float32] */, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  maximum(%298, %299) /* ty=Tensor[(8, 15, 16), float64] */
}

def @func_17699() -> (Tensor[(16, 2, 13), float64], Tensor[(2, 14, 7), float32]) {
  @func_17697() /* ty=(Tensor[(16, 2, 13), float64], Tensor[(2, 14, 7), float32]) */
}

def @func_13292(%var_13291: Tensor[(126), float64]) -> (Tensor[(2028), float32], Tensor[(432), float32], Tensor[(416), float64], Tensor[(126), float64]) {
  %308 = fn (%var_13279: Tensor[(126), float64]) -> (Tensor[(2028), float32], Tensor[(432), float32], Tensor[(416), float64], Tensor[(126), float64]) {
    %300 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %301 = cast(meta[relay.Constant][12] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %302 = cast(%var_13279, dtype="float64") /* ty=Tensor[(126), float64] */;
    %303 = reshape(%301, newshape=[416]) /* ty=Tensor[(416), float64] */;
    %304 = reshape(%302, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %305 = @func_10073(%303, %304) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(14, 5, 14), uint8], Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(126), float64], int32, Tensor[(126), float64], Tensor[(432), float32]) */;
    %306 = %300.1;
    %307 = %305.10;
    (%306, %307, meta[relay.Constant][12] /* ty=Tensor[(416), float64] */, %var_13279)
  };
  %308(%var_13291) /* ty=(Tensor[(2028), float32], Tensor[(432), float32], Tensor[(416), float64], Tensor[(126), float64]) */
}

def @func_10073(%var_10025: Tensor[(416), float64], %var_10031: Tensor[(126), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(14, 5, 14), uint8], Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(126), float64], int32, Tensor[(126), float64], Tensor[(432), float32]) {
  %309 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %312 = reshape(%311, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %313 = @func_9011(%312) /* ty=(Tensor[(2028), float32],) */;
  %314 = cast(meta[relay.Constant][13] /* ty=Tensor[(980), uint8] */, dtype="uint8") /* ty=Tensor[(980), uint8] */;
  %315 = reshape(%314, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
  %316 = @func_6979(%315) /* ty=Tensor[(14, 5, 14), uint8] */;
  %317 = cast(%316, dtype="uint8") /* ty=Tensor[(14, 5, 14), uint8] */;
  %318 = reshape(%317, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
  %319 = cast(%var_10025, dtype="float64") /* ty=Tensor[(416), float64] */;
  %320 = reshape(%319, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %321 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %322 = cast(%var_10031, dtype="float64") /* ty=Tensor[(126), float64] */;
  %323 = cast(meta[relay.Constant][14] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %324 = reshape(%321, newshape=[]) /* ty=int32 */;
  %325 = reshape(%322, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %326 = reshape(%323, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %327 = @func_7055(%324, %325, %326) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) */;
  %328 = %313.0;
  %329 = @func_6979(%318) /* ty=Tensor[(14, 5, 14), uint8] */;
  %330 = @func_829(%320) /* ty=Tensor[(16, 2, 13), float64] */;
  %331 = %327.5;
  (%310, %328, %316, meta[relay.Constant][13] /* ty=Tensor[(980), uint8] */, %329, %330, %var_10025, %331, 5 /* ty=int32 */, %var_10031, meta[relay.Constant][14] /* ty=Tensor[(432), float32] */)
}

def @func_5636() -> (bool,) {
  @func_5634() /* ty=(bool,) */
}

def @func_1953(%var_1951: bool, %var_1952: Tensor[(2028), uint16]) -> (Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  %348 = fn (%var_1845: bool, %var_1860: Tensor[(2028), uint16]) -> (Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
    %332 = cast(%var_1845, dtype="bool") /* ty=bool */;
    %333 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(10, 9, 13), bool] */;
    %334 = cast(%var_1860, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %335 = cast(%var_1860, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %336 = reshape(%334, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
    %337 = reshape(%335, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
    %338 = @func_170(%336, %337) /* ty=Tensor[(13, 13, 12), uint16] */;
    %339 = cast(%var_1860, dtype="bool") /* ty=Tensor[(2028), bool] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%338, dtype="bool") /* ty=Tensor[(13, 13, 12), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %343 = cast(meta[relay.Constant][16] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %344 = reshape(%343, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
    %345 = logical_and(%332, %333) /* ty=Tensor[(10, 9, 13), bool] */;
    %346 = logical_or(%341, %342) /* ty=Tensor[(13, 13, 12), bool] */;
    %347 = @func_829(%344) /* ty=Tensor[(16, 2, 13), float64] */;
    (%345, %346, %347, meta[relay.Constant][16] /* ty=Tensor[(416), float64] */)
  };
  %348(%var_1951, %var_1952) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */
}

def @func_10485() -> (Tensor[(2028), uint16],) {
  %350 = fn () -> (Tensor[(2028), uint16],) {
    %349 = @func_9655() /* ty=Tensor[(2028), uint16] */;
    (%349,)
  };
  %350() /* ty=(Tensor[(2028), uint16],) */
}

def @func_5119() -> Tensor[(2028), uint16] {
  @func_5064() /* ty=Tensor[(2028), uint16] */
}

def @func_2585(%var_2583: Tensor[(11, 11, 5), float32], %var_2584: Tensor[(1456), float64]) -> (Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) {
  @func_2581(%var_2583, %var_2584) /* ty=(Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) */
}

def @func_5882() -> Tensor[(2028), uint16] {
  %352 = fn () -> Tensor[(2028), uint16] {
    %351 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
    %351.0
  };
  %352() /* ty=Tensor[(2028), uint16] */
}

def @func_12043(%var_12042: Tensor[(96), float64]) -> (Tensor[(672), uint8], Tensor[(4, 12, 2), float64], Tensor[(96), float64], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) {
  %367 = fn (%var_12002: Tensor[(96), float64]) -> (Tensor[(672), uint8], Tensor[(4, 12, 2), float64], Tensor[(96), float64], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) {
    %353 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
    %354 = cast(%var_12002, dtype="float64") /* ty=Tensor[(96), float64] */;
    %355 = reshape(%354, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
    %356 = @func_1447(%355) /* ty=(Tensor[(4, 12, 2), float64],) */;
    %357 = cast(%var_12002, dtype="float64") /* ty=Tensor[(96), float64] */;
    %358 = reshape(%357, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %359 = @func_8952(%358) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) */;
    %360 = @func_6336() /* ty=(bool,) */;
    %361 = @func_8172() /* ty=(Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) */;
    %362 = %353.2;
    %363 = %356.0;
    %364 = %359.0;
    %365 = %360.0;
    %366 = %361.0;
    (%362, %363, %var_12002, %364, %365, %366)
  };
  %367(%var_12042) /* ty=(Tensor[(672), uint8], Tensor[(4, 12, 2), float64], Tensor[(96), float64], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) */
}

def @func_12311() -> (Tensor[(2028), uint16],) {
  @func_12309() /* ty=(Tensor[(2028), uint16],) */
}

def @func_16766(%var_16765: Tensor[(8, 9, 10), int8]) -> (Tensor[(8, 9, 10), int8], Tensor[(2028), uint16]) {
  %375 = fn (%var_16746: Tensor[(8, 9, 10), int8]) -> (Tensor[(8, 9, 10), int8], Tensor[(2028), uint16]) {
    %368 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 9, 10), int8] */, dtype="int8") /* ty=Tensor[(8, 9, 10), int8] */;
    %369 = shape_of(%var_16746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %370 = cast(%var_16746, dtype="int8") /* ty=Tensor[(8, 9, 10), int8] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %372 = @func_15414() /* ty=(Tensor[(2028), uint16],) */;
    %373 = multiply(%370, %371) /* ty=Tensor[(8, 9, 10), int8] */;
    %374 = %372.0;
    (%373, %374)
  };
  %375(%var_16765) /* ty=(Tensor[(8, 9, 10), int8], Tensor[(2028), uint16]) */
}

def @func_10945() -> (bool,) {
  %376 = @func_8496() /* ty=(bool,) */;
  %377 = %376.0;
  (%377,)
}

def @func_892(%var_846: Tensor[(3, 14, 3), float64]) -> (Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  %378 = cast(%var_846, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %379 = cast(meta[relay.Constant][18] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %380 = reshape(%379, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %381 = log10(%378) /* ty=Tensor[(3, 14, 3), float64] */;
  %382 = @func_829(%380) /* ty=Tensor[(16, 2, 13), float64] */;
  (%381, %382, meta[relay.Constant][18] /* ty=Tensor[(416), float64] */)
}

def @func_8993() -> (Tensor[(2028), uint16],) {
  %384 = fn () -> (Tensor[(2028), uint16],) {
    %383 = @func_5881() /* ty=Tensor[(2028), uint16] */;
    (%383,)
  };
  %384() /* ty=(Tensor[(2028), uint16],) */
}

def @func_7728() -> Tensor[(2028), uint16] {
  @func_6098() /* ty=Tensor[(2028), uint16] */
}

def @func_14360() -> (bool,) {
  %385 = @func_4986() /* ty=(bool,) */;
  %386 = %385.0;
  (%386,)
}

def @func_14330() -> Tensor[(2028), uint16] {
  @func_14328() /* ty=Tensor[(2028), uint16] */
}

def @func_3063(%var_3061: Tensor[(4, 9, 12), float32], %var_3062: bool) -> (Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) {
  %409 = fn (%var_3025: Tensor[(4, 9, 12), float32], %var_3052: bool) -> (Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) {
    %387 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 9, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 9, 12), bool] */;
    %388 = shape_of(%var_3025, dtype="int32") /* ty=Tensor[(3), int32] */;
    %389 = cast(%var_3025, dtype="bool") /* ty=Tensor[(4, 9, 12), bool] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %391 = cast(%var_3025, dtype="float32") /* ty=Tensor[(4, 9, 12), float32] */;
    %392 = cast(meta[relay.Constant][20] /* ty=Tensor[(2028), uint16] */, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %393 = cast(meta[relay.Constant][20] /* ty=Tensor[(2028), uint16] */, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %394 = reshape(%392, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
    %395 = reshape(%393, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
    %396 = cast(meta[relay.Constant][21] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %397 = reshape(%396, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), float64] */;
    %398 = @func_1724(%397) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) */;
    %399 = cast(%var_3052, dtype="bool") /* ty=bool */;
    %400 = %398.2;
    %401 = cast(%400, dtype="uint16") /* ty=Tensor[(13, 156), uint16] */;
    %402 = reshape(%399, newshape=[]) /* ty=bool */;
    %403 = reshape(%401, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
    %404 = @func_1950(%402, %403) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
    %405 = greater_equal(%389, %390) /* ty=Tensor[(4, 9, 12), bool] */;
    %406 = erf(%391) /* ty=Tensor[(4, 9, 12), float32] */;
    %407 = @func_170(%394, %395) /* ty=Tensor[(13, 13, 12), uint16] */;
    %408 = %404.2;
    (%405, %406, %407, meta[relay.Constant][20] /* ty=Tensor[(2028), uint16] */, %400, meta[relay.Constant][21] /* ty=Tensor[(1456), float64] */, %408, %var_3052)
  };
  %409(%var_3061, %var_3062) /* ty=(Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) */
}

def @func_16357() -> bool {
  @func_16355() /* ty=bool */
}

def @func_12882() -> (Tensor[(2028), uint16], Tensor[(2028), float32]) {
  %413 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), float32]) {
    %410 = @func_10347() /* ty=(Tensor[(2028), float32],) */;
    %411 = @func_9655() /* ty=Tensor[(2028), uint16] */;
    %412 = %410.0;
    (%411, %412)
  };
  %413() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32]) */
}

def @func_16630(%var_16628: Tensor[(980), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(980), uint8]) {
  @func_16627(%var_16628) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(980), uint8]) */
}

def @func_16730() -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_16728() /* ty=(Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_5947() -> Tensor[(2, 14, 7), float32] {
  @func_5945() /* ty=Tensor[(2, 14, 7), float32] */
}

def @func_10322(%var_10320: Tensor[(2028), uint16]) -> (Tensor[(2028), int64], Tensor[(14, 11, 14), float32], Tensor[(2156), float32]) {
  @func_10319(%var_10320) /* ty=(Tensor[(2028), int64], Tensor[(14, 11, 14), float32], Tensor[(2156), float32]) */
}

def @func_17774() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(330), float32], Tensor[(2028), uint16]) {
  %421 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(330), float32], Tensor[(2028), uint16]) {
    %414 = cast(meta[relay.Constant][22] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %415 = reshape(%414, newshape=[330]) /* ty=Tensor[(330), float32] */;
    %416 = @func_6240(%415) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) */;
    %417 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
    %418 = @func_11493() /* ty=Tensor[(2028), uint16] */;
    %419 = %416.0;
    %420 = %417.0;
    (%418, %419, meta[relay.Constant][22] /* ty=Tensor[(330), float32] */, %420)
  };
  %421() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(330), float32], Tensor[(2028), uint16]) */
}

def @func_9389() -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(180), float64]) {
  %428 = fn () -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(180), float64]) {
    %422 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
    %423 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %424 = reshape(%423, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
    %425 = @func_7361(%424) /* ty=(Tensor[(6, 15, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32]) */;
    %426 = %422.1;
    %427 = %425.1;
    (%426, %427, meta[relay.Constant][23] /* ty=Tensor[(180), float64] */)
  };
  %428() /* ty=(Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(180), float64]) */
}

def @func_10802(%var_10801: Tensor[(1456), float64]) -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(1456), float64]) {
  %436 = fn (%var_10798: Tensor[(1456), float64]) -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(1456), float64]) {
    %429 = @func_10347() /* ty=(Tensor[(2028), float32],) */;
    %430 = cast(%var_10798, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %431 = reshape(%430, newshape=[56, 26]) /* ty=Tensor[(56, 26), float64] */;
    %432 = @func_6506(%431) /* ty=(Tensor[(2028), uint16], Tensor[(13, 16, 7), float64], Tensor[(56, 26), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(2028), uint16]) */;
    %433 = %429.0;
    %434 = @func_5119() /* ty=Tensor[(2028), uint16] */;
    %435 = %432.3;
    (%433, %434, %435, %var_10798)
  };
  %436(%var_10801) /* ty=(Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(1456), float64]) */
}

def @func_10077(%var_10075: Tensor[(416), float64], %var_10076: Tensor[(126), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(14, 5, 14), uint8], Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(126), float64], int32, Tensor[(126), float64], Tensor[(432), float32]) {
  @func_10073(%var_10075, %var_10076) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(14, 5, 14), uint8], Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(126), float64], int32, Tensor[(126), float64], Tensor[(432), float32]) */
}

def @func_170(%var_154: Tensor[(13, 13, 12), uint16], %var_155: Tensor[(13, 13, 12), uint16]) -> Tensor[(13, 13, 12), uint16] {
  %437 = cast(%var_155, dtype="uint16") /* ty=Tensor[(13, 13, 12), uint16] */;
  %438 = shape_of(%var_154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_154, dtype="uint16") /* ty=Tensor[(13, 13, 12), uint16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%439, %440) /* ty=Tensor[(13, 13, 12), uint16] */
}

def @func_7462(%var_7461: Tensor[(392), uint64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 7, 4), bool], Tensor[(392), uint64], Tensor[(4, 9, 12), bool], Tensor[(432), float32], bool) {
  %456 = fn (%var_7436: Tensor[(392), uint64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 7, 4), bool], Tensor[(392), uint64], Tensor[(4, 9, 12), bool], Tensor[(432), float32], bool) {
    %441 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
    %442 = cast(%var_7436, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %443 = cast(%var_7436, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %444 = reshape(%442, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint64] */;
    %445 = reshape(%443, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint64] */;
    %446 = @func_7312(%444, %445) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(2028), uint16], Tensor[(14, 7, 4), float32]) */;
    %447 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %448 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %449 = reshape(%447, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), float32] */;
    %450 = reshape(%448, newshape=[]) /* ty=bool */;
    %451 = @func_3060(%449, %450) /* ty=(Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) */;
    %452 = @func_5881() /* ty=Tensor[(2028), uint16] */;
    %453 = %441.0;
    %454 = %446.0;
    %455 = %451.0;
    (%452, %453, %454, %var_7436, %455, meta[relay.Constant][24] /* ty=Tensor[(432), float32] */, True /* ty=bool */)
  };
  %456(%var_7461) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 7, 4), bool], Tensor[(392), uint64], Tensor[(4, 9, 12), bool], Tensor[(432), float32], bool) */
}

def @func_17994(%var_17940: Tensor[(15, 8, 2), float64], %var_17941: Tensor[(15, 8, 2), float64]) -> (Tensor[(15, 8, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(2028), uint16], Tensor[(2028), int16]) {
  %457 = cast(%var_17941, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %458 = shape_of(%var_17940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_17940, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %461 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %462 = @func_14469() /* ty=(Tensor[(14, 6, 8), float32],) */;
  %463 = @func_17311() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %464 = @func_17254() /* ty=(Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(8, 15, 16), float32]) */;
  %465 = divide(%459, %460) /* ty=Tensor[(15, 8, 2), float64] */;
  %466 = %461.0;
  %467 = %462.0;
  %468 = %463.1;
  %469 = %464.0;
  (%465, %466, %467, %468, %469)
}

def @func_9214(%var_9209: Tensor[(672), uint8]) -> (Tensor[(2028), uint16], bool, Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  %470 = @func_4986() /* ty=(bool,) */;
  %471 = cast(%var_9209, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %472 = cast(%var_9209, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %473 = reshape(%471, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %474 = reshape(%472, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %475 = @func_3922(%473, %474) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %476 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  %477 = %470.0;
  %478 = %475.0;
  (%476, %477, %478, %var_9209)
}

def @func_14757() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %479 = @func_9881() /* ty=Tensor[(2028), uint16] */;
  %480 = @func_14328() /* ty=Tensor[(2028), uint16] */;
  (%479, %480)
}

def @func_16509() -> (bool,) {
  @func_16507() /* ty=(bool,) */
}

def @func_15944() -> (Tensor[(2028), uint16], Tensor[(2028), float64]) {
  %485 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), float64]) {
    %481 = @func_14900() /* ty=Tensor[(2028), uint16] */;
    %482 = cast(%481, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %483 = reshape(%482, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
    %484 = @func_6703(%483) /* ty=Tensor[(2028), float64] */;
    (%481, %484)
  };
  %485() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */
}

def @func_13038() -> Tensor[(2028), int16] {
  %486 = @func_12275() /* ty=(Tensor[(2028), int16],) */;
  %486.0
}

def @func_16258() -> Tensor[(2028), uint16] {
  %487 = @func_12458() /* ty=(Tensor[(2028), uint16],) */;
  %487.0
}

def @func_12328() -> (Tensor[(2028), uint16],) {
  @func_12326() /* ty=(Tensor[(2028), uint16],) */
}

def @func_15849() -> (Tensor[(2028), float32], Tensor[(10, 9, 13), bool], Tensor[(2028), int16]) {
  %488 = @func_15579() /* ty=(Tensor[(2028), float32],) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %491 = reshape(%490, newshape=[1, 2028]) /* ty=Tensor[(1, 2028), uint16] */;
  %492 = @func_10475(%491) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) */;
  %493 = @func_12275() /* ty=(Tensor[(2028), int16],) */;
  %494 = %492.0;
  %495 = %493.0;
  (%489, %494, %495)
}

def @func_14534() -> Tensor[(2028), uint16] {
  @func_14532() /* ty=Tensor[(2028), uint16] */
}

def @func_16152() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(330), float32], Tensor[(2028), uint16]) {
  %496 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
  %497 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
  %498 = cast(meta[relay.Constant][25] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %499 = reshape(%498, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %500 = @func_6240(%499) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) */;
  %501 = %496.0;
  %502 = %497.0;
  %503 = %500.2;
  %504 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  (%501, %502, %503, meta[relay.Constant][25] /* ty=Tensor[(330), float32] */, %504)
}

def @func_4578(%var_4576: Tensor[(2028), uint16], %var_4577: Tensor[(2028), int32]) -> (Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) {
  @func_4574(%var_4576, %var_4577) /* ty=(Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) */
}

def @func_8658() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %505 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
  %506 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %507 = @func_5181() /* ty=(Tensor[(2028), uint16],) */;
  %508 = %505.0;
  %509 = %506.0;
  %510 = %507.0;
  (%508, %509, %510)
}

def @func_4988() -> (bool,) {
  @func_4986() /* ty=(bool,) */
}

def @func_15555(%var_15519: Tensor[(1, 10), float32]) -> (Tensor[(2028), uint16], Tensor[(1, 5, 2), float32], Tensor[(1, 10), float32], int32, int32, Tensor[(2028), uint16]) {
  %511 = cast(%var_15519, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %512 = reshape(%511, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), float32] */;
  %513 = @func_7220(%512) /* ty=(Tensor[(1, 5, 2), float32],) */;
  %514 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %515 = reshape(%514, newshape=[]) /* ty=int32 */;
  %516 = @func_13241(%515) /* ty=(Tensor[(2028), uint16], Tensor[(154, 14), float32], int32, Tensor[(126), float64], Tensor[(4, 108), float32]) */;
  %517 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %518 = @func_13212() /* ty=Tensor[(2028), uint16] */;
  %519 = %513.0;
  %520 = %516.2;
  %521 = %517.0;
  (%518, %519, %var_15519, %520, 7 /* ty=int32 */, %521)
}

def @func_5577(%var_5533: Tensor[(13, 3, 12), uint8], %var_5534: Tensor[(13, 3, 12), uint8]) -> (Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %522 = cast(%var_5534, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %523 = shape_of(%var_5533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_5533, dtype="bool") /* ty=Tensor[(13, 3, 12), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = equal(%524, %525) /* ty=Tensor[(13, 3, 12), bool] */;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(13, 3, 12), float64] */;
  %528 = @func_5404() /* ty=(Tensor[(2028), uint16],) */;
  %529 = exp(%527) /* ty=Tensor[(13, 3, 12), float64] */;
  %530 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %531 = %528.0;
  (%529, %530, %531)
}

def @func_15415() -> (Tensor[(2028), uint16],) {
  %534 = fn () -> (Tensor[(2028), uint16],) {
    %532 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
    %533 = %532.0;
    (%533,)
  };
  %534() /* ty=(Tensor[(2028), uint16],) */
}

def @func_16842() -> (Tensor[(14, 6, 8), float32],) {
  %537 = fn () -> (Tensor[(14, 6, 8), float32],) {
    %535 = @func_11731() /* ty=(Tensor[(14, 6, 8), float32],) */;
    %536 = %535.0;
    (%536,)
  };
  %537() /* ty=(Tensor[(14, 6, 8), float32],) */
}

def @func_4064() -> (Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) {
  @func_4062() /* ty=(Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) */
}

def @func_5397(%var_5396: Tensor[(2028), int16]) -> (Tensor[(2028), bool],) {
  %545 = fn (%var_5374: Tensor[(2028), int16]) -> (Tensor[(2028), bool],) {
    %538 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
    %539 = %538.1;
    %540 = cast(%var_5374, dtype="bool") /* ty=Tensor[(2028), bool] */;
    %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(1), int32] */;
    %542 = cast(%539, dtype="bool") /* ty=Tensor[(2028), bool] */;
    %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?), bool] */;
    %544 = logical_or(%542, %543) /* ty=Tensor[(2028), bool] */;
    (%544,)
  };
  %545(%var_5396) /* ty=(Tensor[(2028), bool],) */
}

def @func_16728() -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %546 = @func_15042() /* ty=(Tensor[(2028), float32], Tensor[(2028), float32]) */;
  %547 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
  %548 = %546.1;
  %549 = %547.0;
  %550 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  (%548, %549, %550)
}

def @func_5220() -> Tensor[(2028), float32] {
  @func_5218() /* ty=Tensor[(2028), float32] */
}

def @func_8620(%var_8617: Tensor[(672), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(78, 6), uint8], Tensor[(2156), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  %551 = @func_7387() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %552 = cast(meta[relay.Constant][26] /* ty=Tensor[(78, 6), uint8] */, dtype="uint8") /* ty=Tensor[(78, 6), uint8] */;
  %553 = cast(meta[relay.Constant][26] /* ty=Tensor[(78, 6), uint8] */, dtype="uint8") /* ty=Tensor[(78, 6), uint8] */;
  %554 = reshape(%552, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %555 = reshape(%553, newshape=[13, 3, 12]) /* ty=Tensor[(13, 3, 12), uint8] */;
  %556 = @func_5577(%554, %555) /* ty=(Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %557 = @func_8236() /* ty=(Tensor[(2028), uint16], Tensor[(432), float32], int32, Tensor[(126), float64], Tensor[(432), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(2028), uint16]) */;
  %558 = cast(%var_8617, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %559 = cast(%var_8617, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %560 = reshape(%558, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %561 = reshape(%559, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %562 = @func_3922(%560, %561) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %563 = %551.0;
  %564 = @func_5218() /* ty=Tensor[(2028), float32] */;
  %565 = %556.2;
  %566 = %557.6;
  %567 = %562.0;
  (%563, %564, %565, meta[relay.Constant][26] /* ty=Tensor[(78, 6), uint8] */, %566, %567, %var_8617)
}

def @func_895(%var_893: Tensor[(3, 14, 3), float64]) -> (Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  @func_892(%var_893) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */
}

def @func_9792() -> Tensor[(2028), uint16] {
  %568 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %568.0
}

def @func_12275() -> (Tensor[(2028), int16],) {
  %569 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
  %570 = %569.1;
  (%570,)
}

def @func_12626() -> bool {
  @func_12624() /* ty=bool */
}

def @func_12912() -> (bool, Tensor[(2028), uint16]) {
  %571 = @func_11431() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) */;
  %572 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %573 = %571.2;
  %574 = %572.0;
  (%573, %574)
}

def @func_18676(%var_18615: Tensor[(4, 16, 14), float32]) -> (bool, Tensor[(2028), uint16], Tensor[(4, 16, 14), float64], Tensor[(2028), uint16], Tensor[(13, 13, 12), uint16]) {
  %575 = @func_6336() /* ty=(bool,) */;
  %576 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
  %577 = cast(%var_18615, dtype="float32") /* ty=Tensor[(4, 16, 14), float32] */;
  %578 = sigmoid(%577) /* ty=Tensor[(4, 16, 14), float32] */;
  %579 = cast(%var_18615, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %583 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %584 = %576.0;
  %585 = cast(%584, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %586 = %583.0;
  %587 = cast(%586, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %588 = reshape(%585, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %589 = reshape(%587, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), uint16] */;
  %590 = %575.0;
  %591 = floor_mod(%581, %582) /* ty=Tensor[(4, 16, 14), float64] */;
  %592 = @func_170(%588, %589) /* ty=Tensor[(13, 13, 12), uint16] */;
  (%590, %584, %591, %586, %592)
}

def @func_13503() -> (Tensor[(8, 15, 16), float64],) {
  %593 = @func_13354() /* ty=Tensor[(8, 15, 16), float64] */;
  (%593,)
}

def @func_12624() -> bool {
  %594 = @func_4115() /* ty=(bool,) */;
  %594.0
}

def @func_13715() -> (Tensor[(2028), float32],) {
  %596 = fn () -> (Tensor[(2028), float32],) {
    %595 = @func_5218() /* ty=Tensor[(2028), float32] */;
    (%595,)
  };
  %596() /* ty=(Tensor[(2028), float32],) */
}

def @func_14469() -> (Tensor[(14, 6, 8), float32],) {
  %597 = @func_11731() /* ty=(Tensor[(14, 6, 8), float32],) */;
  %598 = %597.0;
  (%598,)
}

def @func_9761() -> (Tensor[(2028), uint16],) {
  %599 = @func_8372() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) */;
  %600 = %599.1;
  (%600,)
}

def @func_5345() -> (Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) {
  %610 = fn () -> (Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) {
    %601 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
    %602 = %601.0;
    %603 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 15, 16), float32] */, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
    %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%602, dtype="bool") /* ty=Tensor[(8, 15, 16), bool] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %607 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %608 = not_equal(%605, %606) /* ty=Tensor[(8, 15, 16), bool] */;
    %609 = %607.3;
    (%608, %609)
  };
  %610() /* ty=(Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) */
}

def @func_8061() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %611 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
  %612 = @func_5404() /* ty=(Tensor[(2028), uint16],) */;
  %613 = %611.0;
  %614 = %612.0;
  (%613, %614)
}

def @func_2581(%var_2554: Tensor[(11, 11, 5), float32], %var_2573: Tensor[(1456), float64]) -> (Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) {
  %615 = cast(%var_2554, dtype="float32") /* ty=Tensor[(11, 11, 5), float32] */;
  %616 = exp(%615) /* ty=Tensor[(11, 11, 5), float32] */;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(11, 11, 5), float64] */;
  %618 = cast(%616, dtype="float64") /* ty=Tensor[(11, 11, 5), float64] */;
  %619 = cast(%var_2573, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %620 = reshape(%619, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), float64] */;
  %621 = @func_1724(%620) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) */;
  %622 = log2(%617) /* ty=Tensor[(11, 11, 5), float64] */;
  %623 = atan(%618) /* ty=Tensor[(11, 11, 5), float64] */;
  %624 = %621.2;
  (%622, %623, %624, %var_2573)
}

def @func_12401() -> bool {
  %625 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %625.2
}

def @func_8954(%var_8953: Tensor[(96), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) {
  %634 = fn (%var_8918: Tensor[(96), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) {
    %626 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
    %627 = cast(%var_8918, dtype="float64") /* ty=Tensor[(96), float64] */;
    %628 = reshape(%627, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
    %629 = @func_7957(%628) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) */;
    %630 = @func_4986() /* ty=(bool,) */;
    %631 = %626.0;
    %632 = %629.1;
    %633 = %630.0;
    (%631, %632, %var_8918, %633)
  };
  %634(%var_8953) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) */
}

def @func_4000() -> (bool, Tensor[(2028), uint16], Tensor[(416), float64]) {
  @func_3998() /* ty=(bool, Tensor[(2028), uint16], Tensor[(416), float64]) */
}

def @func_9566() -> (Tensor[(49, 4), float64],) {
  @func_9564() /* ty=(Tensor[(49, 4), float64],) */
}

def @func_7389() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_7387() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_5404() -> (Tensor[(2028), uint16],) {
  %635 = @func_5119() /* ty=Tensor[(2028), uint16] */;
  (%635,)
}

def @func_9427() -> Tensor[(16, 2, 13), float64] {
  @func_9425() /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_13148() -> (Tensor[(2028), uint16],) {
  %636 = @func_11493() /* ty=Tensor[(2028), uint16] */;
  (%636,)
}

def @func_10319(%var_10284: Tensor[(2028), uint16]) -> (Tensor[(2028), int64], Tensor[(14, 11, 14), float32], Tensor[(2156), float32]) {
  %637 = @func_8515() /* ty=(bool, Tensor[(2028), uint16]) */;
  %638 = %637.1;
  %639 = cast(%var_10284, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(1), int32] */;
  %641 = cast(%638, dtype="int64") /* ty=Tensor[(2028), int64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?), int64] */;
  %643 = cast(meta[relay.Constant][28] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %644 = cast(meta[relay.Constant][28] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %645 = reshape(%643, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %646 = reshape(%644, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %647 = @func_51(%645, %646) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %648 = subtract(%641, %642) /* ty=Tensor[(2028), int64] */;
  %649 = %647.1;
  (%648, %649, meta[relay.Constant][28] /* ty=Tensor[(2156), float32] */)
}

def @func_9480() -> (Tensor[(96), float64],) {
  %650 = @func_8372() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) */;
  %651 = %650.2;
  (%651,)
}

def @func_7364(%var_7362: Tensor[(6, 15, 2), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32]) {
  @func_7361(%var_7362) /* ty=(Tensor[(6, 15, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32]) */
}

def @func_5065() -> Tensor[(2028), uint16] {
  %652 = fn () -> Tensor[(2028), uint16] {
    @func_3481() /* ty=Tensor[(2028), uint16] */
  };
  %652() /* ty=Tensor[(2028), uint16] */
}

def @func_17117() -> (bool,) {
  %655 = fn () -> (bool,) {
    %653 = @func_15299() /* ty=(bool,) */;
    %654 = %653.0;
    (%654,)
  };
  %655() /* ty=(bool,) */
}

def @func_11075() -> Tensor[(126), float64] {
  @func_11073() /* ty=Tensor[(126), float64] */
}

def @func_11308() -> Tensor[(2028), float32] {
  %656 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %656.1
}

def @func_8237() -> (Tensor[(2028), uint16], Tensor[(432), float32], int32, Tensor[(126), float64], Tensor[(432), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(2028), uint16]) {
  %673 = fn () -> (Tensor[(2028), uint16], Tensor[(432), float32], int32, Tensor[(126), float64], Tensor[(432), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(2028), uint16]) {
    %657 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %658 = cast(meta[relay.Constant][29] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %659 = cast(meta[relay.Constant][30] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %660 = reshape(%657, newshape=[]) /* ty=int32 */;
    %661 = reshape(%658, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %662 = reshape(%659, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %663 = @func_7055(%660, %661, %662) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) */;
    %664 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %665 = cast(meta[relay.Constant][31] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %666 = reshape(%664, newshape=[]) /* ty=int32 */;
    %667 = reshape(%665, newshape=[14, 154]) /* ty=Tensor[(14, 154), float32] */;
    %668 = @func_5734(%666, %667) /* ty=(Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) */;
    %669 = @func_3826() /* ty=Tensor[(2028), uint16] */;
    %670 = %663.9;
    %671 = %668.3;
    %672 = @func_5119() /* ty=Tensor[(2028), uint16] */;
    (%669, %670, 9 /* ty=int32 */, meta[relay.Constant][29] /* ty=Tensor[(126), float64] */, meta[relay.Constant][30] /* ty=Tensor[(432), float32] */, %671, meta[relay.Constant][31] /* ty=Tensor[(2156), float32] */, %672)
  };
  %673() /* ty=(Tensor[(2028), uint16], Tensor[(432), float32], int32, Tensor[(126), float64], Tensor[(432), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(2028), uint16]) */
}

def @func_14759() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_14757() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_16461() -> Tensor[(2028), uint16] {
  %675 = fn () -> Tensor[(2028), uint16] {
    %674 = @func_13755() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 24), float64]) */;
    %674.0
  };
  %675() /* ty=Tensor[(2028), uint16] */
}

def @func_14433() -> (Tensor[(2028), float32],) {
  %676 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %677 = %676.1;
  (%677,)
}

def @func_18022() -> Tensor[(2028), uint16] {
  %679 = fn () -> Tensor[(2028), uint16] {
    %678 = @func_13951() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(468), uint8], Tensor[(672), uint8], Tensor[(330), float32], bool, Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16]) */;
    %678.11
  };
  %679() /* ty=Tensor[(2028), uint16] */
}

def @func_6720() -> (Tensor[(2028), uint16],) {
  %680 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %681 = %680.0;
  (%681,)
}

def @func_6363() -> (Tensor[(49, 4), float32], Tensor[(49, 4), float64]) {
  %682 = @func_5922() /* ty=(Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) */;
  %683 = %682.2;
  %684 = cast(%683, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %685 = cos(%684) /* ty=Tensor[(49, 4), float32] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %687 = cast(%685, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
  %688 = cosh(%686) /* ty=Tensor[(49, 4), float32] */;
  %689 = atan(%687) /* ty=Tensor[(49, 4), float64] */;
  (%688, %689)
}

def @func_3926(%var_3924: Tensor[(14, 6, 8), uint8], %var_3925: Tensor[(14, 6, 8), uint8]) -> (Tensor[(14, 6, 8), float32],) {
  @func_3922(%var_3924, %var_3925) /* ty=(Tensor[(14, 6, 8), float32],) */
}

def @func_18421() -> Tensor[(126), float64] {
  %690 = fn () -> Tensor[(126), float64] {
    @func_13580() /* ty=Tensor[(126), float64] */
  };
  %690() /* ty=Tensor[(126), float64] */
}

def @func_829(%var_815: Tensor[(16, 2, 13), float64]) -> Tensor[(16, 2, 13), float64] {
  %691 = cast(%var_815, dtype="float64") /* ty=Tensor[(16, 2, 13), float64] */;
  atanh(%691) /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_9685(%var_9683: Tensor[(9, 13, 10), float32]) -> Tensor[(9, 13, 10), float32] {
  @func_9682(%var_9683) /* ty=Tensor[(9, 13, 10), float32] */
}

def @func_7548(%var_7547: bool) -> (Tensor[(2028), uint16], Tensor[(1456), float64], Tensor[(4, 108), float32], bool) {
  %700 = fn (%var_7539: bool) -> (Tensor[(2028), uint16], Tensor[(1456), float64], Tensor[(4, 108), float32], bool) {
    %692 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %693 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
    %694 = cast(%var_7539, dtype="bool") /* ty=bool */;
    %695 = reshape(%693, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), float32] */;
    %696 = reshape(%694, newshape=[]) /* ty=bool */;
    %697 = @func_3060(%695, %696) /* ty=(Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) */;
    %698 = %692.3;
    %699 = %697.5;
    (%698, %699, meta[relay.Constant][32] /* ty=Tensor[(4, 108), float32] */, %var_7539)
  };
  %700(%var_7547) /* ty=(Tensor[(2028), uint16], Tensor[(1456), float64], Tensor[(4, 108), float32], bool) */
}

def @func_15170(%var_15168: Tensor[(2028), uint16]) -> (Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2028), uint16]) {
  @func_15167(%var_15168) /* ty=(Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2028), uint16]) */
}

def @func_15400() -> (Tensor[(2028), uint16], Tensor[(10, 9, 13), bool]) {
  %701 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %704 = reshape(%703, newshape=[1, 2028]) /* ty=Tensor[(1, 2028), uint16] */;
  %705 = @func_10475(%704) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) */;
  %706 = %705.0;
  (%702, %706)
}

def @func_18183(%var_18181: Tensor[(11, 9, 12), float32], %var_18182: Tensor[(11, 9, 12), float32]) -> (Tensor[(11, 9, 12), float64], Tensor[(14, 6, 8), float32], Tensor[(240), float64]) {
  @func_18179(%var_18181, %var_18182) /* ty=(Tensor[(11, 9, 12), float64], Tensor[(14, 6, 8), float32], Tensor[(240), float64]) */
}

def @func_7809(%var_7807: Tensor[(2028), uint16]) -> (Tensor[(2028), float64], Tensor[(2028), uint16]) {
  @func_7806(%var_7807) /* ty=(Tensor[(2028), float64], Tensor[(2028), uint16]) */
}

def @func_7742() -> Tensor[(2028), uint16] {
  %707 = fn () -> Tensor[(2028), uint16] {
    @func_5881() /* ty=Tensor[(2028), uint16] */
  };
  %707() /* ty=Tensor[(2028), uint16] */
}

def @func_16938() -> (Tensor[(2028), uint16],) {
  @func_16936() /* ty=(Tensor[(2028), uint16],) */
}

def @func_7059(%var_7056: int32, %var_7057: Tensor[(126), float64], %var_7058: Tensor[(432), float32]) -> (Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) {
  %733 = fn (%var_7007: int32, %var_7028: Tensor[(126), float64], %var_7053: Tensor[(432), float32]) -> (Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) {
    %708 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 11, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %709 = cast(%var_7007, dtype="int32") /* ty=int32 */;
    %710 = cast(meta[relay.Constant][34] /* ty=Tensor[(154, 14), float32] */, dtype="float32") /* ty=Tensor[(154, 14), float32] */;
    %711 = reshape(%709, newshape=[]) /* ty=int32 */;
    %712 = reshape(%710, newshape=[14, 154]) /* ty=Tensor[(14, 154), float32] */;
    %713 = @func_5734(%711, %712) /* ty=(Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) */;
    %714 = %713.1;
    %715 = cast(%714, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %716 = cast(%var_7028, dtype="float64") /* ty=Tensor[(126), float64] */;
    %717 = cast(meta[relay.Constant][34] /* ty=Tensor[(154, 14), float32] */, dtype="float32") /* ty=Tensor[(154, 14), float32] */;
    %718 = reshape(%715, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
    %719 = reshape(%716, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %720 = reshape(%717, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
    %721 = @func_3638(%718, %719, %720) /* ty=(Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) */;
    %722 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
    %723 = cast(%var_7053, dtype="float32") /* ty=Tensor[(432), float32] */;
    %724 = cast(%var_7007, dtype="bool") /* ty=bool */;
    %725 = reshape(%723, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), float32] */;
    %726 = reshape(%724, newshape=[]) /* ty=bool */;
    %727 = @func_3060(%725, %726) /* ty=(Tensor[(4, 9, 12), bool], Tensor[(4, 9, 12), float32], Tensor[(13, 13, 12), uint16], Tensor[(2028), uint16], Tensor[(13, 156), uint16], Tensor[(1456), float64], Tensor[(16, 2, 13), float64], bool) */;
    %728 = erf(%708) /* ty=Tensor[(4, 11, 3), float32] */;
    %729 = %721.4;
    %730 = %722.0;
    %731 = @func_3481() /* ty=Tensor[(2028), uint16] */;
    %732 = %727.1;
    (%728, %714, %var_7007, meta[relay.Constant][34] /* ty=Tensor[(154, 14), float32] */, %729, %var_7028, %730, %731, %732, %var_7053)
  };
  %733(%var_7056, %var_7057, %var_7058) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) */
}

def @func_11246() -> Tensor[(2028), uint16] {
  %734 = fn () -> Tensor[(2028), uint16] {
    @func_5119() /* ty=Tensor[(2028), uint16] */
  };
  %734() /* ty=Tensor[(2028), uint16] */
}

def @func_8063() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_8061() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_3019() -> (Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) {
  %735 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %736 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %737 = cast(meta[relay.Constant][36] /* ty=Tensor[(2028), uint16] */, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %738 = reshape(%736, newshape=[]) /* ty=bool */;
  %739 = reshape(%737, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %740 = @func_1950(%738, %739) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(13, 13, 12), bool], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %741 = log2(%735) /* ty=Tensor[(2, 14, 7), float32] */;
  %742 = %740.2;
  (%741, %742, False /* ty=bool */, meta[relay.Constant][36] /* ty=Tensor[(2028), uint16] */)
}

def @func_4709(%var_4707: Tensor[(2, 14, 7), float32], %var_4708: Tensor[(3, 42), float64]) -> (Tensor[(2, 14, 7), int16], Tensor[(416), float64], Tensor[(3, 42), float64], Tensor[(2028), int32]) {
  %763 = fn (%var_4669: Tensor[(2, 14, 7), float32], %var_4677: Tensor[(3, 42), float64]) -> (Tensor[(2, 14, 7), int16], Tensor[(416), float64], Tensor[(3, 42), float64], Tensor[(2028), int32]) {
    %743 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %744 = %743.0;
    %745 = cast(%var_4669, dtype="int16") /* ty=Tensor[(2, 14, 7), int16] */;
    %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
    %747 = cast(%744, dtype="int16") /* ty=Tensor[(2, 14, 7), int16] */;
    %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %749 = cast(%var_4677, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
    %750 = reshape(%749, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
    %751 = @func_892(%750) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
    %752 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
    %753 = %752.0;
    %754 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
    %755 = %754.0;
    %756 = cast(%755, dtype="int32") /* ty=Tensor[(2028), int32] */;
    %757 = shape_of(%753, dtype="int32") /* ty=Tensor[(1), int32] */;
    %758 = cast(%753, dtype="int32") /* ty=Tensor[(2028), int32] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?), int32] */;
    %760 = left_shift(%747, %748) /* ty=Tensor[(2, 14, 7), int16] */;
    %761 = %751.2;
    %762 = multiply(%758, %759) /* ty=Tensor[(2028), int32] */;
    (%760, %761, %var_4677, %762)
  };
  %763(%var_4707, %var_4708) /* ty=(Tensor[(2, 14, 7), int16], Tensor[(416), float64], Tensor[(3, 42), float64], Tensor[(2028), int32]) */
}

def @func_3638(%var_3558: Tensor[(2028), uint16], %var_3574: Tensor[(126), float64], %var_3600: Tensor[(2156), float32]) -> (Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) {
  %764 = @func_3481() /* ty=Tensor[(2028), uint16] */;
  %765 = cast(%var_3558, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(1), int32] */;
  %767 = cast(%764, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?), bool] */;
  %769 = cast(%var_3574, dtype="float64") /* ty=Tensor[(126), float64] */;
  %770 = reshape(%769, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %771 = @func_892(%770) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %772 = logical_and(%767, %768) /* ty=Tensor[(2028), bool] */;
  %773 = cast(%772, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %774 = cast(%var_3574, dtype="float64") /* ty=Tensor[(126), float64] */;
  %775 = reshape(%773, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %776 = reshape(%774, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %777 = @func_3331(%775, %776) /* ty=(Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) */;
  %778 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 330), float64] */, dtype="float64") /* ty=Tensor[(1, 330), float64] */;
  %779 = cast(%var_3600, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %780 = reshape(%778, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %781 = reshape(%779, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %782 = @func_474(%780, %781) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %783 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 330), float64] */, dtype="float64") /* ty=Tensor[(1, 330), float64] */;
  %784 = atan(%783) /* ty=Tensor[(1, 330), float64] */;
  %785 = cast(%784, dtype="bool") /* ty=Tensor[(1, 330), bool] */;
  %786 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 330), float64] */, dtype="bool") /* ty=Tensor[(16, 330), bool] */;
  %787 = %771.2;
  %788 = %777.3;
  %789 = %782.2;
  %790 = greater_equal(%785, %786) /* ty=Tensor[(16, 330), bool] */;
  (%772, %787, %var_3574, %788, %789, %var_3600, %790)
}

def @func_3453(%var_3451: Tensor[(165, 2), float32]) -> (Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) {
  @func_3450(%var_3451) /* ty=(Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) */
}

def @func_5581(%var_5579: Tensor[(13, 3, 12), uint8], %var_5580: Tensor[(13, 3, 12), uint8]) -> (Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_5577(%var_5579, %var_5580) /* ty=(Tensor[(13, 3, 12), float64], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_17209() -> (Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16]) {
  @func_17207() /* ty=(Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16]) */
}

def @func_4062() -> (Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) {
  %791 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 16), float64] */;
  %792 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 15, 16), float64] */, dtype="float32") /* ty=Tensor[(8, 15, 16), float32] */;
  %793 = atanh(%791) /* ty=Tensor[(8, 15, 16), float64] */;
  %794 = sigmoid(%792) /* ty=Tensor[(8, 15, 16), float32] */;
  (%793, %794)
}

def @func_15581() -> (Tensor[(2028), float32],) {
  @func_15579() /* ty=(Tensor[(2028), float32],) */
}

def @func_13688() -> (Tensor[(2028), uint16], bool, Tensor[(2028), float32]) {
  @func_13686() /* ty=(Tensor[(2028), uint16], bool, Tensor[(2028), float32]) */
}

def @func_3643(%var_3640: Tensor[(2028), uint16], %var_3641: Tensor[(126), float64], %var_3642: Tensor[(2156), float32]) -> (Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) {
  @func_3638(%var_3640, %var_3641, %var_3642) /* ty=(Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) */
}

def @func_6776(%var_6773: Tensor[(2028), uint16], %var_6774: Tensor[(126), float64], %var_6775: Tensor[(2156), float32]) -> (Tensor[(8, 15, 16), float32], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(49, 4), float32]) {
  @func_6771(%var_6773, %var_6774, %var_6775) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(49, 4), float32]) */
}

def @func_8515() -> (bool, Tensor[(2028), uint16]) {
  %795 = @func_4115() /* ty=(bool,) */;
  %796 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %797 = %795.0;
  %798 = %796.0;
  (%797, %798)
}

def @func_18179(%var_18143: Tensor[(11, 9, 12), float32], %var_18150: Tensor[(11, 9, 12), float32]) -> (Tensor[(11, 9, 12), float64], Tensor[(14, 6, 8), float32], Tensor[(240), float64]) {
  %799 = cast(%var_18143, dtype="float32") /* ty=Tensor[(11, 9, 12), float32] */;
  %800 = log10(%799) /* ty=Tensor[(11, 9, 12), float32] */;
  %801 = cast(%var_18150, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="float64") /* ty=Tensor[(11, 9, 12), float64] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %805 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %806 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %807 = reshape(%805, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %808 = reshape(%806, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %809 = @func_17994(%807, %808) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2028), uint16], Tensor[(14, 6, 8), float32], Tensor[(2028), uint16], Tensor[(2028), int16]) */;
  %810 = power(%803, %804) /* ty=Tensor[(11, 9, 12), float64] */;
  %811 = %809.2;
  (%810, %811, meta[relay.Constant][40] /* ty=Tensor[(240), float64] */)
}

def @func_9590() -> (Tensor[(2028), uint16],) {
  %812 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %813 = %812.0;
  (%813,)
}

def @func_4219() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) {
  %814 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
  %815 = cast(meta[relay.Constant][41] /* ty=Tensor[(55, 6), float32] */, dtype="float32") /* ty=Tensor[(55, 6), float32] */;
  %816 = reshape(%815, newshape=[165, 2]) /* ty=Tensor[(165, 2), float32] */;
  %817 = @func_3450(%816) /* ty=(Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) */;
  %818 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %819 = %814.0;
  %820 = %817.0;
  (%818, %819, %820, meta[relay.Constant][41] /* ty=Tensor[(55, 6), float32] */)
}

def @func_11310() -> Tensor[(2028), float32] {
  @func_11308() /* ty=Tensor[(2028), float32] */
}

def @func_16437() -> Tensor[(2028), float32] {
  %821 = @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %821.1
}

def @func_6575() -> Tensor[(2028), uint16] {
  @func_6573() /* ty=Tensor[(2028), uint16] */
}

def @func_13159(%var_13151: Tensor[(12, 8, 15), float64]) -> Tensor[(12, 8, 15), float64] {
  %822 = cast(%var_13151, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  cosh(%822) /* ty=Tensor[(12, 8, 15), float64] */
}

def @func_13582() -> Tensor[(126), float64] {
  @func_13580() /* ty=Tensor[(126), float64] */
}

def @func_5300() -> (Tensor[(2028), uint16],) {
  %824 = fn () -> (Tensor[(2028), uint16],) {
    %823 = @func_3826() /* ty=Tensor[(2028), uint16] */;
    (%823,)
  };
  %824() /* ty=(Tensor[(2028), uint16],) */
}

def @func_9482() -> (Tensor[(96), float64],) {
  @func_9480() /* ty=(Tensor[(96), float64],) */
}

def @func_12374() -> Tensor[(8, 15, 16), float32] {
  @func_12372() /* ty=Tensor[(8, 15, 16), float32] */
}

def @func_13256() -> Tensor[(2028), uint16] {
  @func_13254() /* ty=Tensor[(2028), uint16] */
}

def @func_15042() -> (Tensor[(2028), float32], Tensor[(2028), float32]) {
  %825 = @func_7644() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16]) */;
  %826 = @func_13714() /* ty=(Tensor[(2028), float32],) */;
  %827 = %825.1;
  %828 = %826.0;
  (%827, %828)
}

def @func_12403() -> bool {
  @func_12401() /* ty=bool */
}

def @func_9320() -> Tensor[(126), float64] {
  %830 = fn () -> Tensor[(126), float64] {
    %829 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
    %829.2
  };
  %830() /* ty=Tensor[(126), float64] */
}

def @func_832(%var_830: Tensor[(16, 2, 13), float64]) -> Tensor[(16, 2, 13), float64] {
  @func_829(%var_830) /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_8040(%var_8039: Tensor[(980), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(2, 14, 7), float32]) {
  %839 = fn (%var_8033: Tensor[(980), uint8]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(2, 14, 7), float32]) {
    %831 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
    %832 = @func_6933() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %833 = cast(%var_8033, dtype="uint8") /* ty=Tensor[(980), uint8] */;
    %834 = reshape(%833, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint8] */;
    %835 = %831.0;
    %836 = %832.0;
    %837 = @func_6979(%834) /* ty=Tensor[(14, 5, 14), uint8] */;
    %838 = @func_5945() /* ty=Tensor[(2, 14, 7), float32] */;
    (%835, %836, %837, %var_8033, %838)
  };
  %839(%var_8039) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 5, 14), uint8], Tensor[(980), uint8], Tensor[(2, 14, 7), float32]) */
}

def @func_9524() -> (Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_9522() /* ty=(Tensor[(2028), uint16], Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_13953() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(468), uint8], Tensor[(672), uint8], Tensor[(330), float32], bool, Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16]) {
  @func_13951() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(468), uint8], Tensor[(672), uint8], Tensor[(330), float32], bool, Tensor[(2028), uint16], Tensor[(2028), int16], Tensor[(2028), uint16]) */
}

def @func_3331(%var_3284: Tensor[(2028), uint16], %var_3297: Tensor[(126), float64]) -> (Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) {
  %840 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %841 = %840.0;
  %842 = cast(%var_3284, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(1), int32] */;
  %844 = cast(%841, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?), float32] */;
  %846 = cast(%var_3297, dtype="float64") /* ty=Tensor[(126), float64] */;
  %847 = reshape(%846, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %848 = @func_892(%847) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %849 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %850 = cast(%var_3297, dtype="float64") /* ty=Tensor[(126), float64] */;
  %851 = reshape(%850, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %852 = @func_892(%851) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %853 = cast(meta[relay.Constant][42] /* ty=Tensor[(605), float32] */, dtype="float32") /* ty=Tensor[(605), float32] */;
  %854 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 364), float64] */, dtype="float64") /* ty=Tensor[(4, 364), float64] */;
  %855 = reshape(%853, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), float32] */;
  %856 = reshape(%854, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %857 = @func_2581(%855, %856) /* ty=(Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) */;
  %858 = floor_divide(%844, %845) /* ty=Tensor[(2028), float32] */;
  %859 = %848.2;
  %860 = %849.1;
  %861 = %852.1;
  %862 = %857.3;
  (%858, %859, %var_3297, %860, %861, %862, meta[relay.Constant][42] /* ty=Tensor[(605), float32] */, meta[relay.Constant][43] /* ty=Tensor[(4, 364), float64] */)
}

def @func_14675() -> (Tensor[(2028), uint16],) {
  @func_14673() /* ty=(Tensor[(2028), uint16],) */
}

def @func_12459() -> (Tensor[(2028), uint16],) {
  %865 = fn () -> (Tensor[(2028), uint16],) {
    %863 = @func_9761() /* ty=(Tensor[(2028), uint16],) */;
    %864 = %863.0;
    (%864,)
  };
  %865() /* ty=(Tensor[(2028), uint16],) */
}

def @func_4221() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) {
  @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */
}

def @func_301(%var_298: Tensor[(7, 3, 2), float32], %var_299: Tensor[(7, 3, 2), float32], %var_300: Tensor[(2156), float32]) -> (Tensor[(7, 3, 2), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(14, 11, 14), float32]) {
  @func_296(%var_298, %var_299, %var_300) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(14, 11, 14), float32]) */
}

def @func_5183() -> (Tensor[(2028), uint16],) {
  @func_5181() /* ty=(Tensor[(2028), uint16],) */
}

def @func_6365() -> (Tensor[(49, 4), float32], Tensor[(49, 4), float64]) {
  @func_6363() /* ty=(Tensor[(49, 4), float32], Tensor[(49, 4), float64]) */
}

def @func_9425() -> Tensor[(16, 2, 13), float64] {
  @func_6259() /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_9716() -> (Tensor[(8, 15, 16), float32],) {
  %866 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %867 = %866.0;
  (%867,)
}

def @func_11911(%var_11909: Tensor[(2156), float32]) -> (bool, Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(49, 4), float64], Tensor[(8, 15, 16), float32], Tensor[(2, 14, 7), bool], Tensor[(10, 9, 13), bool], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32]) {
  %868 = @func_4115() /* ty=(bool,) */;
  %869 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %870 = @func_9564() /* ty=(Tensor[(49, 4), float64],) */;
  %871 = @func_9716() /* ty=(Tensor[(8, 15, 16), float32],) */;
  %872 = %870.0;
  %873 = cast(%872, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %874 = reshape(%873, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %875 = @func_4779(%874) /* ty=(Tensor[(2, 14, 7), bool],) */;
  %876 = %869.0;
  %877 = cast(%876, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %878 = @func_3826() /* ty=Tensor[(2028), uint16] */;
  %879 = cast(%878, dtype="int32") /* ty=Tensor[(2028), int32] */;
  %880 = reshape(%877, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %881 = reshape(%879, newshape=[2028]) /* ty=Tensor[(2028), int32] */;
  %882 = @func_4574(%880, %881) /* ty=(Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) */;
  %883 = cast(%878, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %884 = cast(meta[relay.Constant][44] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %885 = cast(%var_11909, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %886 = reshape(%883, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %887 = reshape(%884, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %888 = reshape(%885, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %889 = @func_6771(%886, %887, %888) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(49, 4), float32]) */;
  %890 = %868.0;
  %891 = %871.0;
  %892 = %875.0;
  %893 = %882.1;
  %894 = %889.2;
  (%890, %878, %876, %872, %891, %892, %893, %894, meta[relay.Constant][44] /* ty=Tensor[(126), float64] */, %var_11909)
}

def @func_477(%var_475: Tensor[(5, 6, 11), float64], %var_476: Tensor[(2156), float32]) -> (Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) {
  %921 = fn (%var_409: Tensor[(5, 6, 11), float64], %var_418: Tensor[(2156), float32]) -> (Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) {
    %895 = cast(meta[relay.Constant][45] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %896 = cast(meta[relay.Constant][45] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %897 = cast(%var_418, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %898 = reshape(%895, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), float32] */;
    %899 = reshape(%896, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), float32] */;
    %900 = reshape(%897, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
    %901 = @func_296(%898, %899, %900) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(14, 11, 14), float32]) */;
    %902 = cast(%var_409, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
    %903 = sinh(%902) /* ty=Tensor[(5, 6, 11), float64] */;
    %904 = cast(%var_409, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
    %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
    %906 = cast(%903, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %908 = less_equal(%906, %907) /* ty=Tensor[(5, 6, 11), bool] */;
    %909 = cast(%908, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
    %910 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
    %911 = cast(%903, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
    %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %913 = cast(%var_418, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %914 = cast(%var_418, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %915 = reshape(%913, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %916 = reshape(%914, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %917 = @func_51(%915, %916) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
    %918 = %901.0;
    %919 = power(%911, %912) /* ty=Tensor[(5, 6, 11), float32] */;
    %920 = %917.0;
    (%918, meta[relay.Constant][45] /* ty=Tensor[(42), float32] */, %var_418, %919, %920)
  };
  %921(%var_475, %var_476) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */
}

def @func_17467() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_17465() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_13254() -> Tensor[(2028), uint16] {
  %922 = @func_12458() /* ty=(Tensor[(2028), uint16],) */;
  %922.0
}

def @func_12483() -> bool {
  %924 = fn () -> bool {
    %923 = @func_11431() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) */;
    %923.2
  };
  %924() /* ty=bool */
}

def @func_13417() -> Tensor[(2028), uint16] {
  @func_13415() /* ty=Tensor[(2028), uint16] */
}

def @main(%var_18747: Tensor[(605), float32], %var_18748: Tensor[(1, 1456), float64], %var_18755: Tensor[(2156), float32]) -> (Tensor[(416), float64], Tensor[(1, 2028), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(1, 1456), float64], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(?, 2028), float32]) {
  %925 = @func_4000() /* ty=(bool, Tensor[(2028), uint16], Tensor[(416), float64]) */;
  %926 = @func_15042() /* ty=(Tensor[(2028), float32], Tensor[(2028), float32]) */;
  %927 = %926.1;
  %928 = cast(%927, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %929 = reshape(%928, newshape=[1, 2028]) /* ty=Tensor[(1, 2028), uint16] */;
  %930 = @func_10477(%929) /* ty=(Tensor[(10, 9, 13), bool], Tensor[(1, 2028), float64]) */;
  %931 = %930.1;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %933 = erf(%932) /* ty=Tensor[(1, 2028), float64] */;
  %934 = cast(%933, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %935 = cast(%var_18747, dtype="float32") /* ty=Tensor[(605), float32] */;
  %936 = cast(%var_18748, dtype="float64") /* ty=Tensor[(1, 1456), float64] */;
  %937 = reshape(%935, newshape=[11, 11, 5]) /* ty=Tensor[(11, 11, 5), float32] */;
  %938 = reshape(%936, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %939 = @func_2585(%937, %938) /* ty=(Tensor[(11, 11, 5), float64], Tensor[(11, 11, 5), float64], Tensor[(13, 156), uint16], Tensor[(1456), float64]) */;
  %940 = cast(%var_18755, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %941 = reshape(%940, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %942 = @func_11914(%941) /* ty=(bool, Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(49, 4), float64], Tensor[(8, 15, 16), float32], Tensor[(2, 14, 7), bool], Tensor[(10, 9, 13), bool], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32]) */;
  %943 = @func_15044() /* ty=(Tensor[(2028), float32], Tensor[(2028), float32]) */;
  %944 = %943.1;
  %945 = cast(%944, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %946 = shape_of(%931, dtype="int32") /* ty=Tensor[(2), int32] */;
  %947 = cast(%931, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %949 = minimum(%947, %948) /* ty=Tensor[(?, 2028), float64] */;
  %950 = cast(%949, dtype="float32") /* ty=Tensor[(?, 2028), float32] */;
  %951 = shape_of(%933, dtype="int32") /* ty=Tensor[(2), int32] */;
  %952 = cast(%933, dtype="float32") /* ty=Tensor[(1, 2028), float32] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %954 = power(%952, %953) /* ty=Tensor[(?, 2028), float32] */;
  %955 = cast(%954, dtype="float32") /* ty=Tensor[(?, 2028), float32] */;
  %956 = %925.2;
  %957 = log10(%934) /* ty=Tensor[(1, 2028), float64] */;
  %958 = %939.3;
  %959 = %942.8;
  %960 = asin(%955) /* ty=Tensor[(?, 2028), float32] */;
  (%956, %957, %958, %var_18747, %var_18748, %959, %var_18755, %960)
}

def @func_4888() -> (Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */
}

def @func_16228() -> Tensor[(2028), uint16] {
  %962 = fn () -> Tensor[(2028), uint16] {
    %961 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
    %961.0
  };
  %962() /* ty=Tensor[(2028), uint16] */
}

def @func_8660() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  @func_8658() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_18679(%var_18677: Tensor[(4, 16, 14), float32]) -> (bool, Tensor[(2028), uint16], Tensor[(4, 16, 14), float64], Tensor[(2028), uint16], Tensor[(13, 13, 12), uint16]) {
  @func_18676(%var_18677) /* ty=(bool, Tensor[(2028), uint16], Tensor[(4, 16, 14), float64], Tensor[(2028), uint16], Tensor[(13, 13, 12), uint16]) */
}

def @func_16936() -> (Tensor[(2028), uint16],) {
  %963 = @func_9084() /* ty=Tensor[(2028), uint16] */;
  (%963,)
}

def @func_14230() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) {
  %971 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) {
    %964 = @func_12309() /* ty=(Tensor[(2028), uint16],) */;
    %965 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
    %966 = @func_12912() /* ty=(bool, Tensor[(2028), uint16]) */;
    %967 = %964.0;
    %968 = %965.0;
    %969 = %966.0;
    %970 = @func_11214() /* ty=Tensor[(2028), uint16] */;
    (%967, %968, %969, %970)
  };
  %971() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), uint16]) */
}

def @func_8372() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64]) {
  %972 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %973 = cast(meta[relay.Constant][46] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %974 = reshape(%973, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
  %975 = @func_7957(%974) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) */;
  %976 = %972.0;
  %977 = %975.1;
  (%976, %977, meta[relay.Constant][46] /* ty=Tensor[(96), float64] */)
}

def @func_8517() -> (bool, Tensor[(2028), uint16]) {
  @func_8515() /* ty=(bool, Tensor[(2028), uint16]) */
}

def @func_11215() -> Tensor[(2028), uint16] {
  %978 = fn () -> Tensor[(2028), uint16] {
    @func_3481() /* ty=Tensor[(2028), uint16] */
  };
  %978() /* ty=Tensor[(2028), uint16] */
}

def @func_13756() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 24), float64]) {
  %984 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 24), float64]) {
    %979 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
    %980 = reshape(%979, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %981 = @func_8952(%980) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(96), float64], bool) */;
    %982 = @func_5881() /* ty=Tensor[(2028), uint16] */;
    %983 = %981.1;
    (%982, %983, meta[relay.Constant][47] /* ty=Tensor[(4, 24), float64] */)
  };
  %984() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 24), float64]) */
}

def @func_7387() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %985 = @func_6379() /* ty=(Tensor[(2028), uint16],) */;
  %986 = @func_5299() /* ty=(Tensor[(2028), uint16],) */;
  %987 = %985.0;
  %988 = %986.0;
  (%987, %988)
}

def @func_12372() -> Tensor[(8, 15, 16), float32] {
  %989 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %989.0
}

def @func_7222(%var_7221: Tensor[(1, 5, 2), float32]) -> (Tensor[(1, 5, 2), float32],) {
  %992 = fn (%var_7173: Tensor[(1, 5, 2), float32]) -> (Tensor[(1, 5, 2), float32],) {
    %990 = cast(%var_7173, dtype="float32") /* ty=Tensor[(1, 5, 2), float32] */;
    %991 = asin(%990) /* ty=Tensor[(1, 5, 2), float32] */;
    (%991,)
  };
  %992(%var_7221) /* ty=(Tensor[(1, 5, 2), float32],) */
}

def @func_5481(%var_5480: Tensor[(2028), uint16]) -> Tensor[(2028), int32] {
  %999 = fn (%var_5465: Tensor[(2028), uint16]) -> Tensor[(2028), int32] {
    %993 = @func_5181() /* ty=(Tensor[(2028), uint16],) */;
    %994 = %993.0;
    %995 = cast(%var_5465, dtype="int32") /* ty=Tensor[(2028), int32] */;
    %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(1), int32] */;
    %997 = cast(%994, dtype="int32") /* ty=Tensor[(2028), int32] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?), int32] */;
    bitwise_xor(%997, %998) /* ty=Tensor[(2028), int32] */
  };
  %999(%var_5480) /* ty=Tensor[(2028), int32] */
}

def @func_15771() -> (Tensor[(2028), uint16],) {
  %1001 = fn () -> (Tensor[(2028), uint16],) {
    %1000 = @func_12232() /* ty=Tensor[(2028), uint16] */;
    (%1000,)
  };
  %1001() /* ty=(Tensor[(2028), uint16],) */
}

def @func_15748() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %1006 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %1002 = @func_9590() /* ty=(Tensor[(2028), uint16],) */;
    %1003 = @func_6098() /* ty=Tensor[(2028), uint16] */;
    %1004 = %1002.0;
    %1005 = @func_11245() /* ty=Tensor[(2028), uint16] */;
    (%1003, %1004, %1005)
  };
  %1006() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_13580() -> Tensor[(126), float64] {
  @func_11073() /* ty=Tensor[(126), float64] */
}

def @func_16866() -> (Tensor[(2028), uint16],) {
  %1008 = fn () -> (Tensor[(2028), uint16],) {
    %1007 = @func_9044() /* ty=Tensor[(2028), uint16] */;
    (%1007,)
  };
  %1008() /* ty=(Tensor[(2028), uint16],) */
}

def @func_6703(%var_6698: Tensor[(2028), uint16]) -> Tensor[(2028), float64] {
  %1009 = @func_6098() /* ty=Tensor[(2028), uint16] */;
  %1010 = cast(%var_6698, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1011 = shape_of(%1009, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1012 = cast(%1009, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?), float64] */;
  divide(%1012, %1013) /* ty=Tensor[(2028), float64] */
}

def @func_9825() -> (Tensor[(14, 6, 8), float32],) {
  %1014 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %1015 = %1014.1;
  (%1015,)
}

def @func_3725(%var_3697: Tensor[(2028), int16]) -> (Tensor[(2028), uint16], Tensor[(2028), float64]) {
  %1016 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %1017 = %1016.0;
  %1018 = cast(%1017, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1019 = reshape(%1018, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1020 = @func_3167(%1019) /* ty=Tensor[(2028), int16] */;
  %1021 = cast(%var_3697, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1022 = shape_of(%1020, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1023 = cast(%1020, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1025 = power(%1023, %1024) /* ty=Tensor[(2028), float64] */;
  (%1017, %1025)
}

def @func_11432() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) {
  %1039 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) {
    %1026 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %1027 = @func_8515() /* ty=(bool, Tensor[(2028), uint16]) */;
    %1028 = %1027.0;
    %1029 = cast(%1028, dtype="int32") /* ty=int32 */;
    %1030 = cast(meta[relay.Constant][48] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %1031 = reshape(%1029, newshape=[]) /* ty=int32 */;
    %1032 = reshape(%1030, newshape=[14, 154]) /* ty=Tensor[(14, 154), float32] */;
    %1033 = @func_5734(%1031, %1032) /* ty=(Tensor[(5, 6, 5), bool], Tensor[(2028), bool], Tensor[(2028), int16], Tensor[(14, 11, 14), float32], Tensor[(14, 154), float32], Tensor[(2, 14, 7), float32]) */;
    %1034 = cast(meta[relay.Constant][48] /* ty=Tensor[(2156), float32] */, dtype="float64") /* ty=Tensor[(2156), float64] */;
    %1035 = @func_7741() /* ty=Tensor[(2028), uint16] */;
    %1036 = %1026.2;
    %1037 = %1033.2;
    %1038 = atanh(%1034) /* ty=Tensor[(2156), float64] */;
    (%1035, %1036, %1028, %1037, %1038)
  };
  %1039() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], bool, Tensor[(2028), int16], Tensor[(2156), float64]) */
}

def @func_9592() -> (Tensor[(2028), uint16],) {
  @func_9590() /* ty=(Tensor[(2028), uint16],) */
}

def @func_5218() -> Tensor[(2028), float32] {
  %1040 = @func_4303() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1041 = %1040.1;
  %1042 = cast(%1041, dtype="float32") /* ty=Tensor[(2028), float32] */;
  sigmoid(%1042) /* ty=Tensor[(2028), float32] */
}

def @func_4483() -> (Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) {
  %1060 = fn () -> (Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) {
    %1043 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
    %1044 = cast(meta[relay.Constant][49] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %1045 = cast(meta[relay.Constant][49] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %1046 = reshape(%1044, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %1047 = reshape(%1045, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %1048 = @func_51(%1046, %1047) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
    %1049 = %1048.0;
    %1050 = cast(meta[relay.Constant][49] /* ty=Tensor[(2156), float32] */, dtype="uint16") /* ty=Tensor[(2156), uint16] */;
    %1051 = shape_of(%1049, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1052 = cast(%1049, dtype="uint16") /* ty=Tensor[(14, 11, 14), uint16] */;
    %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1054 = %1043.0;
    %1055 = cast(%1054, dtype="int16") /* ty=Tensor[(2028), int16] */;
    %1056 = reshape(%1055, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
    %1057 = @func_3725(%1056) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
    %1058 = bitwise_or(%1052, %1053) /* ty=Tensor[(14, 11, 14), uint16] */;
    %1059 = %1057.0;
    (%1054, %1058, %1059)
  };
  %1060() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */
}

def @func_5945() -> Tensor[(2, 14, 7), float32] {
  %1061 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1061.0
}

def @func_6771(%var_6744: Tensor[(2028), uint16], %var_6745: Tensor[(126), float64], %var_6746: Tensor[(2156), float32]) -> (Tensor[(8, 15, 16), float32], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2156), float32], Tensor[(49, 4), float32]) {
  %1062 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %1063 = cast(%var_6744, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1064 = cast(%var_6745, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1065 = cast(%var_6746, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1066 = reshape(%1063, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1067 = reshape(%1064, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1068 = reshape(%1065, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %1069 = @func_3638(%1066, %1067, %1068) /* ty=(Tensor[(2028), bool], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2156), float32], Tensor[(2156), float32], Tensor[(16, 330), bool]) */;
  %1070 = @func_5922() /* ty=(Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) */;
  %1071 = %1062.0;
  %1072 = %1069.3;
  %1073 = %1070.2;
  (%1071, %1072, %var_6744, %var_6745, %var_6746, %1073)
}

def @func_12326() -> (Tensor[(2028), uint16],) {
  %1074 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  (%1074,)
}

def @func_13964(%var_13963: Tensor[(8, 6, 14), float32]) -> Tensor[(8, 6, 14), float32] {
  %1076 = fn (%var_13958: Tensor[(8, 6, 14), float32]) -> Tensor[(8, 6, 14), float32] {
    %1075 = cast(%var_13958, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
    asinh(%1075) /* ty=Tensor[(8, 6, 14), float32] */
  };
  %1076(%var_13963) /* ty=Tensor[(8, 6, 14), float32] */
}

def @func_17533(%var_17511: Tensor[(7, 3, 16), uint8], %var_17512: Tensor[(7, 3, 16), uint8], %var_17527: Tensor[(416), float64]) -> (Tensor[(7, 3, 16), uint8], bool, Tensor[(16, 2, 13), float64], Tensor[(416), float64]) {
  %1077 = cast(%var_17512, dtype="uint8") /* ty=Tensor[(7, 3, 16), uint8] */;
  %1078 = shape_of(%var_17511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1079 = cast(%var_17511, dtype="uint8") /* ty=Tensor[(7, 3, 16), uint8] */;
  %1080 = dyn.reshape(%1077, %1078, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1081 = cast(%var_17527, dtype="float64") /* ty=Tensor[(416), float64] */;
  %1082 = reshape(%1081, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
  %1083 = right_shift(%1079, %1080) /* ty=Tensor[(7, 3, 16), uint8] */;
  %1084 = @func_12624() /* ty=bool */;
  %1085 = @func_829(%1082) /* ty=Tensor[(16, 2, 13), float64] */;
  (%1083, %1084, %1085, %var_17527)
}

def @func_15707() -> Tensor[(2028), uint16] {
  %1087 = fn () -> Tensor[(2028), uint16] {
    %1086 = @func_8061() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %1086.1
  };
  %1087() /* ty=Tensor[(2028), uint16] */
}

def @func_14570() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %1090 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %1088 = @func_5064() /* ty=Tensor[(2028), uint16] */;
    %1089 = @func_7565() /* ty=Tensor[(2028), uint16] */;
    (%1088, %1089)
  };
  %1090() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_16018() -> (Tensor[(2028), uint16],) {
  %1091 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %1092 = %1091.0;
  (%1092,)
}

def @func_9794() -> Tensor[(2028), uint16] {
  @func_9792() /* ty=Tensor[(2028), uint16] */
}

def @func_12348() -> Tensor[(2028), uint16] {
  %1093 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
  %1093.2
}

def @func_14673() -> (Tensor[(2028), uint16],) {
  %1094 = @func_8061() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1095 = %1094.0;
  (%1095,)
}

def @func_7959(%var_7958: Tensor[(4, 24), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) {
  %1104 = fn (%var_7955: Tensor[(4, 24), float64]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) {
    %1096 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
    %1097 = @func_4635() /* ty=(Tensor[(2028), uint16], Tensor[(2028), int16]) */;
    %1098 = cast(%var_7955, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
    %1099 = reshape(%1098, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float64] */;
    %1100 = @func_1447(%1099) /* ty=(Tensor[(4, 12, 2), float64],) */;
    %1101 = %1096.2;
    %1102 = %1097.0;
    %1103 = %1100.0;
    (%1101, %1102, %1103, %var_7955)
  };
  %1104(%var_7958) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 12, 2), float64], Tensor[(4, 24), float64]) */
}

def @func_9718() -> (Tensor[(8, 15, 16), float32],) {
  @func_9716() /* ty=(Tensor[(8, 15, 16), float32],) */
}

def @func_13505() -> (Tensor[(8, 15, 16), float64],) {
  @func_13503() /* ty=(Tensor[(8, 15, 16), float64],) */
}

def @func_16439() -> Tensor[(2028), float32] {
  @func_16437() /* ty=Tensor[(2028), float32] */
}

def @func_17207() -> (Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(2028), uint16]) {
  %1105 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
  %1106 = %1105.1;
  %1107 = cast(%1106, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1108 = reshape(%1107, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), float64] */;
  %1109 = @func_892(%1108) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(16, 2, 13), float64], Tensor[(416), float64]) */;
  %1110 = @func_15770() /* ty=(Tensor[(2028), uint16],) */;
  %1111 = %1109.1;
  %1112 = %1110.0;
  (%1106, %1111, %1112)
}

def @func_9217(%var_9215: Tensor[(672), uint8]) -> (Tensor[(2028), uint16], bool, Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) {
  @func_9214(%var_9215) /* ty=(Tensor[(2028), uint16], bool, Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */
}

def @func_18057(%var_18055: Tensor[(6, 1, 10), float64], %var_18056: Tensor[(672), float32]) -> (Tensor[(6, 1, 10), float64], Tensor[(2028), uint16], Tensor[(8, 6, 14), float32], Tensor[(672), float32]) {
  %1121 = fn (%var_18032: Tensor[(6, 1, 10), float64], %var_18050: Tensor[(672), float32]) -> (Tensor[(6, 1, 10), float64], Tensor[(2028), uint16], Tensor[(8, 6, 14), float32], Tensor[(672), float32]) {
    %1113 = cast(2.86413f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1114 = cast(%var_18032, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
    %1115 = @func_13397() /* ty=(Tensor[(2028), uint16],) */;
    %1116 = cast(%var_18050, dtype="float32") /* ty=Tensor[(672), float32] */;
    %1117 = reshape(%1116, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), float32] */;
    %1118 = divide(%1113, %1114) /* ty=Tensor[(6, 1, 10), float64] */;
    %1119 = %1115.0;
    %1120 = @func_13962(%1117) /* ty=Tensor[(8, 6, 14), float32] */;
    (%1118, %1119, %1120, %var_18050)
  };
  %1121(%var_18055, %var_18056) /* ty=(Tensor[(6, 1, 10), float64], Tensor[(2028), uint16], Tensor[(8, 6, 14), float32], Tensor[(672), float32]) */
}

def @func_3482() -> Tensor[(2028), uint16] {
  %1123 = fn () -> Tensor[(2028), uint16] {
    %1122 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %1122.3
  };
  %1123() /* ty=Tensor[(2028), uint16] */
}

def @func_14298() -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %1128 = fn () -> (Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %1124 = @func_4482() /* ty=(Tensor[(2028), uint16], Tensor[(14, 11, 14), uint16], Tensor[(2028), uint16]) */;
    %1125 = @func_11308() /* ty=Tensor[(2028), float32] */;
    %1126 = @func_13212() /* ty=Tensor[(2028), uint16] */;
    %1127 = %1124.2;
    (%1125, %1126, %1127)
  };
  %1128() /* ty=(Tensor[(2028), float32], Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_15299() -> (bool,) {
  %1129 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1130 = %1129.2;
  (%1130,)
}

def @func_4410(%var_4380: Tensor[(2028), int16]) -> (Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) {
  %1131 = @func_4062() /* ty=(Tensor[(8, 15, 16), float64], Tensor[(8, 15, 16), float32]) */;
  %1132 = cast(%var_4380, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %1133 = reshape(%1132, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %1134 = @func_3725(%1133) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
  %1135 = %1134.1;
  %1136 = cast(%1135, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1137 = reshape(%1136, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1138 = @func_3167(%1137) /* ty=Tensor[(2028), int16] */;
  %1139 = cast(%1138, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1140 = reshape(%1139, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1141 = %1131.1;
  %1142 = @func_3167(%1140) /* ty=Tensor[(2028), int16] */;
  (%1141, %1135, %var_4380, %1138, %1142)
}

def @func_7806(%var_7787: Tensor[(2028), uint16]) -> (Tensor[(2028), float64], Tensor[(2028), uint16]) {
  %1143 = @func_3998() /* ty=(bool, Tensor[(2028), uint16], Tensor[(416), float64]) */;
  %1144 = %1143.1;
  %1145 = cast(%var_7787, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1146 = shape_of(%1144, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1147 = cast(%1144, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1148 = dyn.reshape(%1145, %1146, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1149 = floor_mod(%1147, %1148) /* ty=Tensor[(2028), float64] */;
  %1150 = @func_6573() /* ty=Tensor[(2028), uint16] */;
  (%1149, %1150)
}

def @func_15478() -> (Tensor[(2028), uint16],) {
  %1152 = fn () -> (Tensor[(2028), uint16],) {
    %1151 = @func_9655() /* ty=Tensor[(2028), uint16] */;
    (%1151,)
  };
  %1152() /* ty=(Tensor[(2028), uint16],) */
}

def @func_12168() -> (Tensor[(126), float64],) {
  %1154 = fn () -> (Tensor[(126), float64],) {
    %1153 = @func_9319() /* ty=Tensor[(126), float64] */;
    (%1153,)
  };
  %1154() /* ty=(Tensor[(126), float64],) */
}

def @func_6337() -> (bool,) {
  %1157 = fn () -> (bool,) {
    %1155 = @func_4115() /* ty=(bool,) */;
    %1156 = %1155.0;
    (%1156,)
  };
  %1157() /* ty=(bool,) */
}

def @func_12350() -> Tensor[(2028), uint16] {
  @func_12348() /* ty=Tensor[(2028), uint16] */
}

def @func_5923() -> (Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) {
  %1168 = fn () -> (Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) {
    %1158 = @func_5218() /* ty=Tensor[(2028), float32] */;
    %1159 = cast(meta[relay.Constant][50] /* ty=Tensor[(2028), float32] */, dtype="bool") /* ty=Tensor[(2028), bool] */;
    %1160 = shape_of(%1158, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1161 = cast(%1158, dtype="bool") /* ty=Tensor[(2028), bool] */;
    %1162 = dyn.reshape(%1159, %1160, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1163 = cast(meta[relay.Constant][51] /* ty=Tensor[(49, 4), float32] */, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
    %1164 = reshape(%1163, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
    %1165 = @func_4779(%1164) /* ty=(Tensor[(2, 14, 7), bool],) */;
    %1166 = not_equal(%1161, %1162) /* ty=Tensor[(2028), bool] */;
    %1167 = %1165.0;
    (%1166, %1167, meta[relay.Constant][51] /* ty=Tensor[(49, 4), float32] */)
  };
  %1168() /* ty=(Tensor[(2028), bool], Tensor[(2, 14, 7), bool], Tensor[(49, 4), float32]) */
}

def @func_17078() -> (bool, Tensor[(16, 2, 13), bool], Tensor[(416), float64], Tensor[(2028), uint16]) {
  %1176 = fn () -> (bool, Tensor[(16, 2, 13), bool], Tensor[(416), float64], Tensor[(2028), uint16]) {
    %1169 = @func_15299() /* ty=(bool,) */;
    %1170 = cast(meta[relay.Constant][52] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %1171 = reshape(%1170, newshape=[16, 2, 13]) /* ty=Tensor[(16, 2, 13), float64] */;
    %1172 = @func_8789(%1171) /* ty=(Tensor[(16, 2, 13), bool],) */;
    %1173 = %1169.0;
    %1174 = %1172.0;
    %1175 = @func_16227() /* ty=Tensor[(2028), uint16] */;
    (%1173, %1174, meta[relay.Constant][52] /* ty=Tensor[(416), float64] */, %1175)
  };
  %1176() /* ty=(bool, Tensor[(16, 2, 13), bool], Tensor[(416), float64], Tensor[(2028), uint16]) */
}

def @func_15308() -> (Tensor[(2028), uint16],) {
  %1179 = fn () -> (Tensor[(2028), uint16],) {
    %1177 = @func_14757() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %1178 = %1177.0;
    (%1178,)
  };
  %1179() /* ty=(Tensor[(2028), uint16],) */
}

def @func_3826() -> Tensor[(2028), uint16] {
  %1180 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
  %1180.0
}

def @func_4115() -> (bool,) {
  %1181 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
  %1182 = %1181.2;
  (%1182,)
}

def @func_13415() -> Tensor[(2028), uint16] {
  %1183 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %1183.0
}

def @func_4304() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %1188 = fn () -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
    %1184 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
    %1185 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
    %1186 = %1184.1;
    %1187 = %1185.0;
    (%1186, %1187)
  };
  %1188() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */
}

def @func_11732() -> (Tensor[(14, 6, 8), float32],) {
  %1191 = fn () -> (Tensor[(14, 6, 8), float32],) {
    %1189 = @func_9825() /* ty=(Tensor[(14, 6, 8), float32],) */;
    %1190 = %1189.0;
    (%1190,)
  };
  %1191() /* ty=(Tensor[(14, 6, 8), float32],) */
}

def @func_7315(%var_7313: Tensor[(14, 7, 4), uint64], %var_7314: Tensor[(14, 7, 4), uint64]) -> (Tensor[(14, 7, 4), bool], Tensor[(2028), uint16], Tensor[(14, 7, 4), float32]) {
  %1203 = fn (%var_7292: Tensor[(14, 7, 4), uint64], %var_7293: Tensor[(14, 7, 4), uint64]) -> (Tensor[(14, 7, 4), bool], Tensor[(2028), uint16], Tensor[(14, 7, 4), float32]) {
    %1192 = cast(%var_7293, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
    %1193 = shape_of(%var_7292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1194 = cast(%var_7292, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
    %1195 = dyn.reshape(%1192, %1193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1196 = cast(%var_7293, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
    %1197 = shape_of(%var_7292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1198 = cast(%var_7292, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
    %1199 = dyn.reshape(%1196, %1197, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1200 = greater(%1194, %1195) /* ty=Tensor[(14, 7, 4), bool] */;
    %1201 = @func_5021() /* ty=Tensor[(2028), uint16] */;
    %1202 = mod(%1198, %1199) /* ty=Tensor[(14, 7, 4), float32] */;
    (%1200, %1201, %1202)
  };
  %1203(%var_7313, %var_7314) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(2028), uint16], Tensor[(14, 7, 4), float32]) */
}

def @func_10947() -> (bool,) {
  @func_10945() /* ty=(bool,) */
}

def @func_7730() -> Tensor[(2028), uint16] {
  @func_7728() /* ty=Tensor[(2028), uint16] */
}

def @func_6582() -> Tensor[(2028), float32] {
  %1204 = fn () -> Tensor[(2028), float32] {
    @func_5218() /* ty=Tensor[(2028), float32] */
  };
  %1204() /* ty=Tensor[(2028), float32] */
}

def @func_8172() -> (Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) {
  %1205 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
  %1206 = @func_7387() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1207 = @func_5064() /* ty=Tensor[(2028), uint16] */;
  %1208 = %1205.0;
  %1209 = %1206.0;
  (%1207, %1208, %1209)
}

def @func_10556() -> Tensor[(2028), uint16] {
  %1210 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
  %1210.0
}

def @func_6981(%var_6980: Tensor[(14, 5, 14), uint8]) -> Tensor[(14, 5, 14), uint8] {
  %1215 = fn (%var_6970: Tensor[(14, 5, 14), uint8]) -> Tensor[(14, 5, 14), uint8] {
    %1211 = cast(meta[relay.Constant][53] /* ty=Tensor[(14, 5, 14), uint8] */, dtype="uint8") /* ty=Tensor[(14, 5, 14), uint8] */;
    %1212 = shape_of(%var_6970, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1213 = cast(%var_6970, dtype="uint8") /* ty=Tensor[(14, 5, 14), uint8] */;
    %1214 = dyn.reshape(%1211, %1212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%1213, %1214) /* ty=Tensor[(14, 5, 14), uint8] */
  };
  %1215(%var_6980) /* ty=Tensor[(14, 5, 14), uint8] */
}

def @func_14919() -> Tensor[(2028), uint16] {
  %1217 = fn () -> Tensor[(2028), uint16] {
    %1216 = @func_7387() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %1216.1
  };
  %1217() /* ty=Tensor[(2028), uint16] */
}

def @func_10209() -> (Tensor[(2028), float32], bool, Tensor[(2028), uint16]) {
  %1218 = @func_6098() /* ty=Tensor[(2028), uint16] */;
  %1219 = cast(%1218, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %1220 = @func_6336() /* ty=(bool,) */;
  %1221 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %1222 = asin(%1219) /* ty=Tensor[(2028), float32] */;
  %1223 = %1220.0;
  %1224 = %1221.0;
  (%1222, %1223, %1224)
}

def @func_3728(%var_3726: Tensor[(2028), int16]) -> (Tensor[(2028), uint16], Tensor[(2028), float64]) {
  @func_3725(%var_3726) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */
}

def @func_16182() -> (Tensor[(2028), uint16],) {
  @func_16180() /* ty=(Tensor[(2028), uint16],) */
}

def @func_16340() -> Tensor[(2028), uint16] {
  %1225 = fn () -> Tensor[(2028), uint16] {
    @func_13415() /* ty=Tensor[(2028), uint16] */
  };
  %1225() /* ty=Tensor[(2028), uint16] */
}

def @func_3922(%var_3890: Tensor[(14, 6, 8), uint8], %var_3891: Tensor[(14, 6, 8), uint8]) -> (Tensor[(14, 6, 8), float32],) {
  %1226 = cast(%var_3891, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %1227 = shape_of(%var_3890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1228 = cast(%var_3890, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %1229 = dyn.reshape(%1226, %1227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1230 = greater(%1228, %1229) /* ty=Tensor[(14, 6, 8), bool] */;
  %1231 = cast(%var_3891, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %1232 = shape_of(%1230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1233 = cast(%1230, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %1234 = dyn.reshape(%1231, %1232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1235 = less(%1233, %1234) /* ty=Tensor[(14, 6, 8), bool] */;
  %1236 = cast(%1235, dtype="float32") /* ty=Tensor[(14, 6, 8), float32] */;
  %1237 = sin(%1236) /* ty=Tensor[(14, 6, 8), float32] */;
  (%1237,)
}

def @func_12233() -> Tensor[(2028), uint16] {
  %1238 = fn () -> Tensor[(2028), uint16] {
    @func_6098() /* ty=Tensor[(2028), uint16] */
  };
  %1238() /* ty=Tensor[(2028), uint16] */
}

def @func_17419() -> (bool,) {
  %1241 = fn () -> (bool,) {
    %1239 = @func_10945() /* ty=(bool,) */;
    %1240 = %1239.0;
    (%1240,)
  };
  %1241() /* ty=(bool,) */
}

def @func_17623() -> Tensor[(2028), uint16] {
  @func_17621() /* ty=Tensor[(2028), uint16] */
}

def @func_4781(%var_4780: Tensor[(2, 14, 7), float32]) -> (Tensor[(2, 14, 7), bool],) {
  %1249 = fn (%var_4766: Tensor[(2, 14, 7), float32]) -> (Tensor[(2, 14, 7), bool],) {
    %1242 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %1243 = %1242.0;
    %1244 = cast(%var_4766, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
    %1245 = shape_of(%1243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1246 = cast(%1243, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
    %1247 = dyn.reshape(%1244, %1245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1248 = greater_equal(%1246, %1247) /* ty=Tensor[(2, 14, 7), bool] */;
    (%1248,)
  };
  %1249(%var_4780) /* ty=(Tensor[(2, 14, 7), bool],) */
}

def @func_9827() -> (Tensor[(14, 6, 8), float32],) {
  @func_9825() /* ty=(Tensor[(14, 6, 8), float32],) */
}

def @func_5150() -> (Tensor[(2028), uint16],) {
  @func_5148() /* ty=(Tensor[(2028), uint16],) */
}

def @func_296(%var_268: Tensor[(7, 3, 2), float32], %var_269: Tensor[(7, 3, 2), float32], %var_290: Tensor[(2156), float32]) -> (Tensor[(7, 3, 2), float32], Tensor[(14, 11, 14), float32], Tensor[(2156), float32], Tensor[(14, 11, 14), float32]) {
  %1250 = cast(%var_269, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %1251 = shape_of(%var_268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1252 = cast(%var_268, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %1253 = dyn.reshape(%1250, %1251, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1254 = power(%1252, %1253) /* ty=Tensor[(7, 3, 2), float32] */;
  %1255 = cast(%1254, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %1256 = cast(%var_290, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1257 = cast(%var_290, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1258 = reshape(%1256, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1259 = reshape(%1257, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1260 = @func_51(%1258, %1259) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %1261 = %1260.1;
  %1262 = cast(%1261, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %1263 = cast(%1261, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %1264 = reshape(%1262, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1265 = reshape(%1263, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
  %1266 = @func_51(%1264, %1265) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
  %1267 = asinh(%1255) /* ty=Tensor[(7, 3, 2), float32] */;
  %1268 = %1266.1;
  (%1267, %1261, %var_290, %1268)
}

def @func_8174() -> (Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) {
  @func_8172() /* ty=(Tensor[(2028), uint16], Tensor[(8, 15, 16), float32], Tensor[(2028), uint16]) */
}

def @func_17465() -> (Tensor[(2028), uint16], Tensor[(2028), uint16]) {
  %1269 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1270 = @func_5404() /* ty=(Tensor[(2028), uint16],) */;
  %1271 = %1269.2;
  %1272 = %1270.0;
  (%1271, %1272)
}

def @func_6508(%var_6507: Tensor[(56, 26), float64]) -> (Tensor[(2028), uint16], Tensor[(13, 16, 7), float64], Tensor[(56, 26), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(2028), uint16]) {
  %1289 = fn (%var_6490: Tensor[(56, 26), float64]) -> (Tensor[(2028), uint16], Tensor[(13, 16, 7), float64], Tensor[(56, 26), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(2028), uint16]) {
    %1273 = @func_4219() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(55, 6), float32]) */;
    %1274 = cast(%var_6490, dtype="float64") /* ty=Tensor[(56, 26), float64] */;
    %1275 = reshape(%1274, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), float64] */;
    %1276 = @func_1724(%1275) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(13, 13, 12), uint16], Tensor[(13, 156), uint16]) */;
    %1277 = cast(meta[relay.Constant][54] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
    %1278 = cast(meta[relay.Constant][54] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
    %1279 = reshape(%1277, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
    %1280 = reshape(%1278, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
    %1281 = @func_3922(%1279, %1280) /* ty=(Tensor[(14, 6, 8), float32],) */;
    %1282 = %1273.0;
    %1283 = cast(%1282, dtype="int16") /* ty=Tensor[(2028), int16] */;
    %1284 = reshape(%1283, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
    %1285 = @func_3725(%1284) /* ty=(Tensor[(2028), uint16], Tensor[(2028), float64]) */;
    %1286 = %1276.0;
    %1287 = %1281.0;
    %1288 = %1285.0;
    (%1282, %1286, %var_6490, %1287, meta[relay.Constant][54] /* ty=Tensor[(672), uint8] */, %1288)
  };
  %1289(%var_6507) /* ty=(Tensor[(2028), uint16], Tensor[(13, 16, 7), float64], Tensor[(56, 26), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(2028), uint16]) */
}

def @func_18403(%var_18401: Tensor[(2156), float32], %var_18402: Tensor[(2156), float32]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 11, 14), float32], Tensor[(2156), bool], Tensor[(2028), uint64], Tensor[(2028), int16], Tensor[(2156), bool]) {
  %1319 = fn (%var_18368: Tensor[(2156), float32], %var_18395: Tensor[(2156), float32]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 11, 14), float32], Tensor[(2156), bool], Tensor[(2028), uint64], Tensor[(2028), int16], Tensor[(2156), bool]) {
    %1290 = @func_13148() /* ty=(Tensor[(2028), uint16],) */;
    %1291 = cast(%var_18368, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %1292 = cast(%var_18368, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %1293 = reshape(%1291, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %1294 = reshape(%1292, newshape=[14, 11, 14]) /* ty=Tensor[(14, 11, 14), float32] */;
    %1295 = @func_51(%1293, %1294) /* ty=(Tensor[(14, 11, 14), float32], Tensor[(14, 11, 14), float32]) */;
    %1296 = @func_16507() /* ty=(bool,) */;
    %1297 = %1296.0;
    %1298 = cast(%var_18368, dtype="bool") /* ty=Tensor[(2156), bool] */;
    %1299 = cast(%1297, dtype="bool") /* ty=bool */;
    %1300 = %1290.0;
    %1301 = cast(%1300, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
    %1302 = cast(%1300, dtype="int32") /* ty=Tensor[(2028), int32] */;
    %1303 = reshape(%1301, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
    %1304 = reshape(%1302, newshape=[2028]) /* ty=Tensor[(2028), int32] */;
    %1305 = @func_4574(%1303, %1304) /* ty=(Tensor[(2028), uint64], Tensor[(10, 9, 13), bool], bool) */;
    %1306 = cast(%1300, dtype="int16") /* ty=Tensor[(2028), int16] */;
    %1307 = reshape(%1306, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
    %1308 = @func_4410(%1307) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) */;
    %1309 = cast(%var_18395, dtype="bool") /* ty=Tensor[(2156), bool] */;
    %1310 = shape_of(%var_18368, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1311 = cast(%var_18368, dtype="bool") /* ty=Tensor[(2156), bool] */;
    %1312 = dyn.reshape(%1309, %1310, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1313 = @func_18021() /* ty=Tensor[(2028), uint16] */;
    %1314 = %1295.0;
    %1315 = equal(%1298, %1299) /* ty=Tensor[(2156), bool] */;
    %1316 = %1305.0;
    %1317 = %1308.2;
    %1318 = not_equal(%1311, %1312) /* ty=Tensor[(2156), bool] */;
    (%1313, %1300, %1314, %1315, %1316, %1317, %1318)
  };
  %1319(%var_18401, %var_18402) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(14, 11, 14), float32], Tensor[(2156), bool], Tensor[(2028), uint64], Tensor[(2028), int16], Tensor[(2156), bool]) */
}

def @func_8497() -> (bool,) {
  %1322 = fn () -> (bool,) {
    %1320 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %1321 = %1320.2;
    (%1321,)
  };
  %1322() /* ty=(bool,) */
}

def @func_3169(%var_3168: Tensor[(2028), uint16]) -> Tensor[(2028), int16] {
  %1329 = fn (%var_3162: Tensor[(2028), uint16]) -> Tensor[(2028), int16] {
    %1323 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
    %1324 = %1323.0;
    %1325 = cast(%var_3162, dtype="int16") /* ty=Tensor[(2028), int16] */;
    %1326 = shape_of(%1324, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1327 = cast(%1324, dtype="int16") /* ty=Tensor[(2028), int16] */;
    %1328 = dyn.reshape(%1325, %1326, newshape=[]) /* ty=Tensor[(?), int16] */;
    left_shift(%1327, %1328) /* ty=Tensor[(2028), int16] */
  };
  %1329(%var_3168) /* ty=Tensor[(2028), int16] */
}

def @func_5769() -> (Tensor[(2028), float32],) {
  %1331 = fn () -> (Tensor[(2028), float32],) {
    %1330 = @func_5218() /* ty=Tensor[(2028), float32] */;
    (%1330,)
  };
  %1331() /* ty=(Tensor[(2028), float32],) */
}

def @func_7566() -> Tensor[(2028), uint16] {
  %1333 = fn () -> Tensor[(2028), uint16] {
    %1332 = @func_6720() /* ty=(Tensor[(2028), uint16],) */;
    %1332.0
  };
  %1333() /* ty=Tensor[(2028), uint16] */
}

def @func_6099() -> Tensor[(2028), uint16] {
  %1335 = fn () -> Tensor[(2028), uint16] {
    %1334 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
    %1334.0
  };
  %1335() /* ty=Tensor[(2028), uint16] */
}

def @func_8791(%var_8790: Tensor[(16, 2, 13), float64]) -> (Tensor[(16, 2, 13), bool],) {
  %1342 = fn (%var_8758: Tensor[(16, 2, 13), float64]) -> (Tensor[(16, 2, 13), bool],) {
    %1336 = @func_6259() /* ty=Tensor[(16, 2, 13), float64] */;
    %1337 = cast(%var_8758, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
    %1338 = shape_of(%1336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1339 = cast(%1336, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
    %1340 = dyn.reshape(%1337, %1338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1341 = logical_and(%1339, %1340) /* ty=Tensor[(16, 2, 13), bool] */;
    (%1341,)
  };
  %1342(%var_8790) /* ty=(Tensor[(16, 2, 13), bool],) */
}

def @func_4635() -> (Tensor[(2028), uint16], Tensor[(2028), int16]) {
  %1343 = @func_4606() /* ty=(Tensor[(2028), uint16],) */;
  %1344 = %1343.0;
  %1345 = cast(%1344, dtype="int16") /* ty=Tensor[(2028), int16] */;
  %1346 = reshape(%1345, newshape=[2028]) /* ty=Tensor[(2028), int16] */;
  %1347 = @func_4410(%1346) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) */;
  %1348 = %1347.2;
  (%1344, %1348)
}

def @func_9839() -> (Tensor[(126), float64],) {
  @func_9837() /* ty=(Tensor[(126), float64],) */
}

def @func_13398() -> (Tensor[(2028), uint16],) {
  %1351 = fn () -> (Tensor[(2028), uint16],) {
    %1349 = @func_6933() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %1350 = %1349.0;
    (%1350,)
  };
  %1351() /* ty=(Tensor[(2028), uint16],) */
}

def @func_14901() -> Tensor[(2028), uint16] {
  %1352 = fn () -> Tensor[(2028), uint16] {
    @func_5119() /* ty=Tensor[(2028), uint16] */
  };
  %1352() /* ty=Tensor[(2028), uint16] */
}

def @func_9682(%var_9678: Tensor[(9, 13, 10), float32]) -> Tensor[(9, 13, 10), float32] {
  %1353 = cast(%var_9678, dtype="float32") /* ty=Tensor[(9, 13, 10), float32] */;
  sinh(%1353) /* ty=Tensor[(9, 13, 10), float32] */
}

def @func_13686() -> (Tensor[(2028), uint16], bool, Tensor[(2028), float32]) {
  %1354 = @func_7741() /* ty=Tensor[(2028), uint16] */;
  %1355 = cast(%1354, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1356 = reshape(%1355, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1357 = @func_9011(%1356) /* ty=(Tensor[(2028), float32],) */;
  %1358 = @func_12482() /* ty=bool */;
  %1359 = %1357.0;
  (%1354, %1358, %1359)
}

def @func_6260() -> Tensor[(16, 2, 13), float64] {
  %1361 = fn () -> Tensor[(16, 2, 13), float64] {
    %1360 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %1360.1
  };
  %1361() /* ty=Tensor[(16, 2, 13), float64] */
}

def @func_6653() -> (bool, Tensor[(2028), uint16]) {
  %1366 = fn () -> (bool, Tensor[(2028), uint16]) {
    %1362 = @func_6336() /* ty=(bool,) */;
    %1363 = @func_5344() /* ty=(Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) */;
    %1364 = %1362.0;
    %1365 = %1363.1;
    (%1364, %1365)
  };
  %1366() /* ty=(bool, Tensor[(2028), uint16]) */
}

def @func_14435() -> (Tensor[(2028), float32],) {
  @func_14433() /* ty=(Tensor[(2028), float32],) */
}

def @func_9045() -> Tensor[(2028), uint16] {
  %1368 = fn () -> Tensor[(2028), uint16] {
    %1367 = @func_3966() /* ty=(Tensor[(2028), uint16],) */;
    %1367.0
  };
  %1368() /* ty=Tensor[(2028), uint16] */
}

def @func_7876() -> bool {
  %1370 = fn () -> bool {
    %1369 = @func_4986() /* ty=(bool,) */;
    %1369.0
  };
  %1370() /* ty=bool */
}

def @func_6380() -> (Tensor[(2028), uint16],) {
  %1372 = fn () -> (Tensor[(2028), uint16],) {
    %1371 = @func_5881() /* ty=Tensor[(2028), uint16] */;
    (%1371,)
  };
  %1372() /* ty=(Tensor[(2028), uint16],) */
}

def @func_5634() -> (bool,) {
  %1373 = @func_4115() /* ty=(bool,) */;
  %1374 = %1373.0;
  (%1374,)
}

def @func_4986() -> (bool,) {
  %1375 = @func_4115() /* ty=(bool,) */;
  %1376 = %1375.0;
  (%1376,)
}

def @func_15167(%var_15141: Tensor[(2028), uint16]) -> (Tensor[(16, 2, 13), float64], Tensor[(416), float64], Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(2028), uint16]) {
  %1377 = cast(%var_15141, dtype="uint16") /* ty=Tensor[(2028), uint16] */;
  %1378 = cast(meta[relay.Constant][55] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1379 = reshape(%1377, newshape=[2028]) /* ty=Tensor[(2028), uint16] */;
  %1380 = reshape(%1378, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1381 = @func_3331(%1379, %1380) /* ty=(Tensor[(2028), float32], Tensor[(416), float64], Tensor[(126), float64], Tensor[(16, 2, 13), float64], Tensor[(16, 2, 13), float64], Tensor[(1456), float64], Tensor[(605), float32], Tensor[(4, 364), float64]) */;
  %1382 = @func_8545() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1383 = @func_6259() /* ty=Tensor[(16, 2, 13), float64] */;
  %1384 = %1381.1;
  %1385 = %1382.2;
  (%1383, %1384, %var_15141, meta[relay.Constant][55] /* ty=Tensor[(126), float64] */, %1385)
}

def @func_15630(%var_15628: uint16, %var_15629: Tensor[(4, 7, 11), uint16]) -> Tensor[(4, 7, 11), uint16] {
  %1388 = fn (%var_15602: uint16, %var_15603: Tensor[(4, 7, 11), uint16]) -> Tensor[(4, 7, 11), uint16] {
    %1386 = cast(%var_15602, dtype="uint16") /* ty=uint16 */;
    %1387 = cast(%var_15603, dtype="uint16") /* ty=Tensor[(4, 7, 11), uint16] */;
    subtract(%1386, %1387) /* ty=Tensor[(4, 7, 11), uint16] */
  };
  %1388(%var_15628, %var_15629) /* ty=Tensor[(4, 7, 11), uint16] */
}

def @func_12657() -> bool {
  @func_12655() /* ty=bool */
}

def @func_13243(%var_13242: int32) -> (Tensor[(2028), uint16], Tensor[(154, 14), float32], int32, Tensor[(126), float64], Tensor[(4, 108), float32]) {
  %1398 = fn (%var_13233: int32) -> (Tensor[(2028), uint16], Tensor[(154, 14), float32], int32, Tensor[(126), float64], Tensor[(4, 108), float32]) {
    %1389 = cast(%var_13233, dtype="int32") /* ty=int32 */;
    %1390 = cast(meta[relay.Constant][56] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %1391 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
    %1392 = reshape(%1389, newshape=[]) /* ty=int32 */;
    %1393 = reshape(%1390, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %1394 = reshape(%1391, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %1395 = @func_7055(%1392, %1393, %1394) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(2028), bool], int32, Tensor[(154, 14), float32], Tensor[(2156), float32], Tensor[(126), float64], Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(4, 9, 12), float32], Tensor[(432), float32]) */;
    %1396 = @func_10556() /* ty=Tensor[(2028), uint16] */;
    %1397 = %1395.3;
    (%1396, %1397, %var_13233, meta[relay.Constant][56] /* ty=Tensor[(126), float64] */, meta[relay.Constant][57] /* ty=Tensor[(4, 108), float32] */)
  };
  %1398(%var_13242) /* ty=(Tensor[(2028), uint16], Tensor[(154, 14), float32], int32, Tensor[(126), float64], Tensor[(4, 108), float32]) */
}

def @func_6242(%var_6241: Tensor[(330), float32]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) {
  %1420 = fn (%var_6197: Tensor[(330), float32]) -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) {
    %1399 = @func_5344() /* ty=(Tensor[(8, 15, 16), bool], Tensor[(2028), uint16]) */;
    %1400 = @func_5964() /* ty=(Tensor[(2028), uint16],) */;
    %1401 = %1400.0;
    %1402 = cast(%1401, dtype="float64") /* ty=Tensor[(2028), float64] */;
    %1403 = cast(meta[relay.Constant][58] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
    %1404 = cast(meta[relay.Constant][58] /* ty=Tensor[(672), uint8] */, dtype="uint8") /* ty=Tensor[(672), uint8] */;
    %1405 = reshape(%1403, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
    %1406 = reshape(%1404, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
    %1407 = @func_3922(%1405, %1406) /* ty=(Tensor[(14, 6, 8), float32],) */;
    %1408 = @func_4886() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(14, 6, 8), float32], Tensor[(672), uint8]) */;
    %1409 = cast(%var_6197, dtype="float32") /* ty=Tensor[(330), float32] */;
    %1410 = reshape(%1409, newshape=[165, 2]) /* ty=Tensor[(165, 2), float32] */;
    %1411 = @func_3450(%1410) /* ty=(Tensor[(2028), uint16], Tensor[(7, 3, 2), float32], Tensor[(2156), float32], Tensor[(42), float32], Tensor[(165, 2), int16]) */;
    %1412 = @func_5634() /* ty=(bool,) */;
    %1413 = @func_3481() /* ty=Tensor[(2028), uint16] */;
    %1414 = %1399.1;
    %1415 = atanh(%1402) /* ty=Tensor[(2028), float64] */;
    %1416 = %1407.0;
    %1417 = %1408.2;
    %1418 = %1411.0;
    %1419 = %1412.0;
    (%1413, %1414, %1415, %1416, meta[relay.Constant][58] /* ty=Tensor[(672), uint8] */, %1417, %1418, %var_6197, %1419)
  };
  %1420(%var_6241) /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(672), uint8], Tensor[(2028), uint16], Tensor[(330), float32], bool) */
}

def @func_16355() -> bool {
  %1421 = @func_8496() /* ty=(bool,) */;
  %1421.0
}

def @func_4413(%var_4411: Tensor[(2028), int16]) -> (Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) {
  @func_4410(%var_4411) /* ty=(Tensor[(8, 15, 16), float32], Tensor[(2028), float64], Tensor[(2028), int16], Tensor[(2028), int16], Tensor[(2028), int16]) */
}

def @func_10348() -> (Tensor[(2028), float32],) {
  %1423 = fn () -> (Tensor[(2028), float32],) {
    %1422 = @func_5218() /* ty=Tensor[(2028), float32] */;
    (%1422,)
  };
  %1423() /* ty=(Tensor[(2028), float32],) */
}

def @func_17256() -> (Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(8, 15, 16), float32]) {
  @func_17254() /* ty=(Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(8, 15, 16), float32]) */
}

def @func_5148() -> (Tensor[(2028), uint16],) {
  %1424 = @func_4303() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
  %1425 = %1424.1;
  (%1425,)
}

def @func_10603(%var_10602: Tensor[(11, 9, 10), float64]) -> (Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64]) {
  %1432 = fn (%var_10559: Tensor[(11, 9, 10), float64]) -> (Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64]) {
    %1426 = cast(%var_10559, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
    %1427 = cast(%var_10559, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
    %1428 = cast(%var_10559, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
    %1429 = cosh(%1426) /* ty=Tensor[(11, 9, 10), float64] */;
    %1430 = sin(%1427) /* ty=Tensor[(11, 9, 10), float64] */;
    %1431 = atanh(%1428) /* ty=Tensor[(11, 9, 10), float64] */;
    (%1429, %1430, %1431)
  };
  %1432(%var_10602) /* ty=(Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64], Tensor[(11, 9, 10), float64]) */
}

def @func_12655() -> bool {
  @func_12401() /* ty=bool */
}

def @func_16507() -> (bool,) {
  %1433 = @func_4115() /* ty=(bool,) */;
  %1434 = %1433.0;
  (%1434,)
}

def @func_6722() -> (Tensor[(2028), uint16],) {
  @func_6720() /* ty=(Tensor[(2028), uint16],) */
}

def @func_9447(%var_9445: Tensor[(7, 10, 10), float32], %var_9446: Tensor[(7, 10, 10), float32]) -> Tensor[(7, 10, 10), bool] {
  @func_9443(%var_9445, %var_9446) /* ty=Tensor[(7, 10, 10), bool] */
}

def @func_12914() -> (bool, Tensor[(2028), uint16]) {
  @func_12912() /* ty=(bool, Tensor[(2028), uint16]) */
}

def @func_16476() -> (Tensor[(2028), uint16],) {
  %1436 = fn () -> (Tensor[(2028), uint16],) {
    %1435 = @func_10893() /* ty=Tensor[(2028), uint16] */;
    (%1435,)
  };
  %1436() /* ty=(Tensor[(2028), uint16],) */
}

def @func_11073() -> Tensor[(126), float64] {
  @func_9319() /* ty=Tensor[(126), float64] */
}

def @func_4081() -> (Tensor[(2028), uint16],) {
  %1439 = fn () -> (Tensor[(2028), uint16],) {
    %1437 = @func_3118() /* ty=(Tensor[(2028), uint16],) */;
    %1438 = %1437.0;
    (%1438,)
  };
  %1439() /* ty=(Tensor[(2028), uint16],) */
}

def @func_16020() -> (Tensor[(2028), uint16],) {
  @func_16018() /* ty=(Tensor[(2028), uint16],) */
}

def @func_3119() -> (Tensor[(2028), uint16],) {
  %1442 = fn () -> (Tensor[(2028), uint16],) {
    %1440 = @func_3019() /* ty=(Tensor[(2, 14, 7), float32], Tensor[(16, 2, 13), float64], bool, Tensor[(2028), uint16]) */;
    %1441 = %1440.3;
    (%1441,)
  };
  %1442() /* ty=(Tensor[(2028), uint16],) */
}

def @func_17852(%var_17851: Tensor[(1, 12, 10), float32]) -> (Tensor[(1, 12, 10), float64], Tensor[(?, 12, 10), bool], Tensor[(2028), uint16], Tensor[(49, 4), float64]) {
  %1456 = fn (%var_17800: Tensor[(1, 12, 10), float32]) -> (Tensor[(1, 12, 10), float64], Tensor[(?, 12, 10), bool], Tensor[(2028), uint16], Tensor[(49, 4), float64]) {
    %1443 = cast(%var_17800, dtype="float32") /* ty=Tensor[(1, 12, 10), float32] */;
    %1444 = log(%1443) /* ty=Tensor[(1, 12, 10), float32] */;
    %1445 = cast(%1444, dtype="float64") /* ty=Tensor[(1, 12, 10), float64] */;
    %1446 = cast(%1444, dtype="bool") /* ty=Tensor[(1, 12, 10), bool] */;
    %1447 = shape_of(%var_17800, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1448 = cast(%var_17800, dtype="bool") /* ty=Tensor[(1, 12, 10), bool] */;
    %1449 = dyn.reshape(%1446, %1447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1450 = @func_17465() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16]) */;
    %1451 = @func_6363() /* ty=(Tensor[(49, 4), float32], Tensor[(49, 4), float64]) */;
    %1452 = acosh(%1445) /* ty=Tensor[(1, 12, 10), float64] */;
    %1453 = logical_and(%1448, %1449) /* ty=Tensor[(?, 12, 10), bool] */;
    %1454 = %1450.1;
    %1455 = %1451.1;
    (%1452, %1453, %1454, %1455)
  };
  %1456(%var_17851) /* ty=(Tensor[(1, 12, 10), float64], Tensor[(?, 12, 10), bool], Tensor[(2028), uint16], Tensor[(49, 4), float64]) */
}

def @func_16154() -> (Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(330), float32], Tensor[(2028), uint16]) {
  @func_16152() /* ty=(Tensor[(2028), uint16], Tensor[(2028), uint16], Tensor[(2028), float64], Tensor[(330), float32], Tensor[(2028), uint16]) */
}

def @func_8435(%var_8427: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32],) {
  %1457 = cast(%var_8427, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %1458 = acos(%1457) /* ty=Tensor[(6, 3, 3), float32] */;
  (%1458,)
}

def @func_8438(%var_8436: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32],) {
  @func_8435(%var_8436) /* ty=(Tensor[(6, 3, 3), float32],) */
}

def @func_12309() -> (Tensor[(2028), uint16],) {
  %1459 = @func_5148() /* ty=(Tensor[(2028), uint16],) */;
  %1460 = %1459.0;
  (%1460,)
}

def @func_15908() -> (Tensor[(126), float64], Tensor[(2028), uint16]) {
  %1464 = fn () -> (Tensor[(126), float64], Tensor[(2028), uint16]) {
    %1461 = @func_6074() /* ty=(Tensor[(2028), uint16], Tensor[(126), float64], Tensor[(126), float64], Tensor[(416), float64], Tensor[(98, 2), float64], Tensor[(2028), uint16]) */;
    %1462 = %1461.1;
    %1463 = @func_5881() /* ty=Tensor[(2028), uint16] */;
    (%1462, %1463)
  };
  %1464() /* ty=(Tensor[(126), float64], Tensor[(2028), uint16]) */
}

def @func_15579() -> (Tensor[(2028), float32],) {
  %1465 = @func_11308() /* ty=Tensor[(2028), float32] */;
  (%1465,)
}

def @func_17254() -> (Tensor[(2028), int16], Tensor[(2028), uint16], Tensor[(8, 15, 16), float32]) {
  %1466 = @func_9716() /* ty=(Tensor[(8, 15, 16), float32],) */;
  %1467 = @func_13038() /* ty=Tensor[(2028), int16] */;
  %1468 = @func_5021() /* ty=Tensor[(2028), uint16] */;
  %1469 = %1466.0;
  (%1467, %1468, %1469)
}

def @func_6473(%var_6443: Tensor[(672), uint8], %var_6448: Tensor[(5, 16, 8), bool], %var_6465: Tensor[(330), float64], %var_6466: Tensor[(2156), float32]) -> (Tensor[(14, 6, 8), float32], Tensor[(672), uint8], Tensor[(5, 16, 8), int32], Tensor[(42), float32], Tensor[(330), float64], Tensor[(2156), float32]) {
  %1470 = cast(%var_6443, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1471 = cast(%var_6443, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %1472 = reshape(%1470, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1473 = reshape(%1471, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), uint8] */;
  %1474 = @func_3922(%1472, %1473) /* ty=(Tensor[(14, 6, 8), float32],) */;
  %1475 = @func_5634() /* ty=(bool,) */;
  %1476 = %1475.0;
  %1477 = cast(%1476, dtype="int32") /* ty=int32 */;
  %1478 = cast(%var_6448, dtype="int32") /* ty=Tensor[(5, 16, 8), int32] */;
  %1479 = cast(%var_6465, dtype="float64") /* ty=Tensor[(330), float64] */;
  %1480 = cast(%var_6466, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %1481 = reshape(%1479, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %1482 = reshape(%1480, newshape=[2156]) /* ty=Tensor[(2156), float32] */;
  %1483 = @func_474(%1481, %1482) /* ty=(Tensor[(7, 3, 2), float32], Tensor[(42), float32], Tensor[(2156), float32], Tensor[(5, 6, 11), float32], Tensor[(14, 11, 14), float32]) */;
  %1484 = %1474.0;
  %1485 = left_shift(%1477, %1478) /* ty=Tensor[(5, 16, 8), int32] */;
  %1486 = %1483.1;
  (%1484, %var_6443, %1485, %1486, %var_6465, %var_6466)
}

def @func_5121() -> Tensor[(2028), uint16] {
  @func_5119() /* ty=Tensor[(2028), uint16] */
}

def @func_14362() -> (bool,) {
  @func_14360() /* ty=(bool,) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen845/build/output.py", line 4958, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:27:17] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

