==========mod==========
#[version = "0.0.5"]
def @func_1505() -> (Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(360, 6), float64] */, dtype="float64") /* ty=Tensor[(360, 6), float64] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(360, 6), float64] */, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(360, 6), float64] */, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
  %4 = reshape(%0, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
  %5 = reshape(%1, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %6 = reshape(%2, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %7 = reshape(%3, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %8 = @func_1203(%4, %5, %6, %7) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %10 = reshape(%9, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float32] */;
  %11 = @func_879(%10) /* ty=(Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) */;
  %12 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %13 = %8.11;
  %14 = %11.2;
  (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(360, 6), float64] */, meta[relay.Constant][1] /* ty=Tensor[(960), float32] */, %14, meta[relay.Constant][2] /* ty=Tensor[(156), float32] */)
}

def @func_4994() -> (Tensor[(960), float32], Tensor[(15, 9), float64]) {
  %15 = @func_2789() /* ty=(Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) */;
  %16 = @func_4677() /* ty=(Tensor[(15, 9), float64],) */;
  %17 = %15.4;
  %18 = %16.0;
  (%17, %18)
}

def @func_4000() -> (Tensor[(960), float32],) {
  %19 = @func_3986() /* ty=Tensor[(960), float32] */;
  (%19,)
}

def @func_2659(%var_2612: Tensor[(9, 9, 11), int32], %var_2631: Tensor[(2160), float64], %var_2632: Tensor[(960), float32]) -> (Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) {
  %20 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %21 = %20.0;
  %22 = cast(%var_2612, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %26 = cast(%var_2631, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %27 = cast(%var_2632, dtype="float32") /* ty=Tensor[(960), float32] */;
  %28 = cast(%var_2631, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %29 = cast(%var_2631, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %30 = reshape(%26, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
  %31 = reshape(%27, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %32 = reshape(%28, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %33 = reshape(%29, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %34 = @func_1203(%30, %31, %32, %33) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
  %35 = cast(%var_2631, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %36 = reshape(%35, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %37 = logical_or(%24, %25) /* ty=Tensor[(9, 9, 11), bool] */;
  %38 = %34.1;
  %39 = @func_2273() /* ty=Tensor[(15, 9), float64] */;
  %40 = @func_2076(%36) /* ty=Tensor[(180, 12), float32] */;
  (%37, %38, %var_2631, %var_2632, %39, %40)
}

def @func_6987() -> Tensor[(180, 12), float32] {
  %41 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %43 = atan(%42) /* ty=Tensor[(180, 12), float64] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  cosh(%44) /* ty=Tensor[(180, 12), float32] */
}

def @func_1795(%var_1775: Tensor[(135), float64], %var_1776: Tensor[(2160), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), int16], int16, Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(10, 12, 8), uint32], Tensor[(1, 960), float32]) {
  %45 = cast(meta[relay.Constant][3] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(182), int16] */, dtype="int16") /* ty=Tensor[(182), int16] */;
  %47 = reshape(%45, newshape=[]) /* ty=int16 */;
  %48 = reshape(%46, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
  %49 = @func_1023(%47, %48) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
  %50 = cast(%var_1775, dtype="float64") /* ty=Tensor[(135), float64] */;
  %51 = cast(%var_1776, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %52 = reshape(%50, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %53 = reshape(%51, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %54 = cast(%var_1776, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %55 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 960), float32] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
  %56 = cast(%var_1776, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %57 = cast(%var_1776, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %58 = reshape(%54, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
  %59 = reshape(%55, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %60 = reshape(%56, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %61 = reshape(%57, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %62 = @func_1203(%58, %59, %60, %61) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
  %63 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %64 = %49.0;
  %65 = @func_48(%52, %53) /* ty=Tensor[(15, 16, 9), bool] */;
  %66 = %62.3;
  (%63, %64, meta[relay.Constant][3] /* ty=int16 */, meta[relay.Constant][4] /* ty=Tensor[(182), int16] */, %65, %var_1775, %var_1776, %66, meta[relay.Constant][5] /* ty=Tensor[(1, 960), float32] */)
}

def @func_4276() -> Tensor[(9, 9, 11), float32] {
  @func_1253() /* ty=Tensor[(9, 9, 11), float32] */
}

def @func_372(%var_344: Tensor[(10, 12, 8), float32]) -> (Tensor[(10, 12, 8), uint32],) {
  %67 = cast(%var_344, dtype="float32") /* ty=Tensor[(10, 12, 8), float32] */;
  %68 = log2(%67) /* ty=Tensor[(10, 12, 8), float32] */;
  %69 = cast(%var_344, dtype="uint32") /* ty=Tensor[(10, 12, 8), uint32] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="uint32") /* ty=Tensor[(10, 12, 8), uint32] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %73 = right_shift(%71, %72) /* ty=Tensor[(10, 12, 8), uint32] */;
  (%73,)
}

def @func_2928() -> (Tensor[(15, 9), float64],) {
  %74 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
  (%74,)
}

def @func_1809() -> Tensor[(15, 9), float64] {
  %75 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %75.4
}

def @func_1566() -> (Tensor[(180, 12), float32],) {
  %76 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  (%76,)
}

def @func_2230() -> Tensor[(180, 12), float32] {
  %77 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
  %77.0
}

def @func_7264(%var_7261: Tensor[(16, 12, 9), float32]) -> Tensor[(16, 12, 9), float32] {
  %78 = cast(%var_7261, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  log(%78) /* ty=Tensor[(16, 12, 9), float32] */
}

def @func_1309(%var_1291: Tensor[(60, 16), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) {
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %80 = reshape(%79, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float32] */;
  %81 = @func_879(%80) /* ty=(Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) */;
  %82 = cast(%var_1291, dtype="float32") /* ty=Tensor[(60, 16), float32] */;
  %83 = reshape(%82, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
  %84 = @func_372(%83) /* ty=(Tensor[(10, 12, 8), uint32],) */;
  %85 = cast(meta[relay.Constant][7] /* ty=Tensor[(60, 16), float32] */, dtype="bool") /* ty=Tensor[(60, 16), bool] */;
  %86 = shape_of(%var_1291, dtype="int32") /* ty=Tensor[(2), int32] */;
  %87 = cast(%var_1291, dtype="bool") /* ty=Tensor[(60, 16), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %89 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %90 = %81.3;
  %91 = %84.0;
  %92 = greater(%87, %88) /* ty=Tensor[(60, 16), bool] */;
  (%89, %90, meta[relay.Constant][6] /* ty=Tensor[(156), float32] */, %91, %92)
}

def @func_7054(%var_6999: Tensor[(891), int32], %var_7001: Tensor[(1092), float64], %var_7032: Tensor[(9, 9, 11), bool]) -> (Tensor[(182), int16], Tensor[(891), int32], Tensor[(960), float32], Tensor[(1092), float64], Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(9, 9, 11), int64], Tensor[(960), float32]) {
  %93 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %94 = cast(%var_6999, dtype="int32") /* ty=Tensor[(891), int32] */;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %96 = cast(%var_7001, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %97 = reshape(%94, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %98 = reshape(%95, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %99 = reshape(%96, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %100 = @func_3964(%97, %98, %99) /* ty=(Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) */;
  %101 = %100.1;
  %102 = cast(%var_7032, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %106 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %107 = %93.1;
  %108 = @func_5449() /* ty=Tensor[(15, 9), float64] */;
  %109 = @func_6708() /* ty=Tensor[(180, 12), float32] */;
  %110 = minimum(%104, %105) /* ty=Tensor[(9, 9, 11), int64] */;
  %111 = %106.1;
  (%107, %var_6999, meta[relay.Constant][8] /* ty=Tensor[(960), float32] */, %var_7001, %108, %109, %110, %111)
}

def @func_3578(%var_3543: Tensor[(15, 10, 16), uint32], %var_3544: Tensor[(15, 10, 16), uint32]) -> (Tensor[(15, 10, 16), bool], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(182), int16]) {
  %112 = cast(%var_3544, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %113 = shape_of(%var_3543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_3543, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %116 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %117 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %118 = less(%114, %115) /* ty=Tensor[(15, 10, 16), bool] */;
  %119 = %116.1;
  %120 = %117.0;
  %121 = @func_2188() /* ty=Tensor[(182), int16] */;
  (%118, %119, %120, %121)
}

def @func_737(%var_732: Tensor[(13, 6, 14), float64]) -> Tensor[(13, 6, 14), float64] {
  %122 = cast(%var_732, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
  asinh(%122) /* ty=Tensor[(13, 6, 14), float64] */
}

def @func_2076(%var_2066: Tensor[(180, 12), float32]) -> Tensor[(180, 12), float32] {
  %123 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %124 = cast(%var_2066, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(2), int32] */;
  %126 = cast(%123, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  add(%126, %127) /* ty=Tensor[(180, 12), float32] */
}

def @func_6708() -> Tensor[(180, 12), float32] {
  @func_1525() /* ty=Tensor[(180, 12), float32] */
}

def @func_6645() -> Tensor[(960), float32] {
  %128 = @func_4842() /* ty=(Tensor[(960), float32],) */;
  %128.0
}

def @func_6751(%var_6738: Tensor[(180, 12), float32]) -> Tensor[(180, 12), float64] {
  %129 = @func_6708() /* ty=Tensor[(180, 12), float32] */;
  %130 = cast(%var_6738, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %134 = less_equal(%132, %133) /* ty=Tensor[(180, 12), bool] */;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %136 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %137 = cast(%129, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_mod(%137, %138) /* ty=Tensor[(180, 12), float64] */
}

def @func_3152() -> (Tensor[(15, 9), float64],) {
  %139 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
  %140 = %139.0;
  (%140,)
}

def @func_6492() -> (Tensor[(182), int16],) {
  %141 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %142 = %141.1;
  (%142,)
}

def @func_3964(%var_3918: Tensor[(891), int32], %var_3919: Tensor[(960), float32], %var_3957: Tensor[(1092), float64]) -> (Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) {
  %143 = cast(%var_3918, dtype="int32") /* ty=Tensor[(891), int32] */;
  %144 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %146 = cast(%var_3919, dtype="float32") /* ty=Tensor[(960), float32] */;
  %147 = reshape(%143, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), int32] */;
  %148 = reshape(%145, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %149 = reshape(%146, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %150 = @func_2659(%147, %148, %149) /* ty=(Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %151 = cast(%var_3918, dtype="float32") /* ty=Tensor[(891), float32] */;
  %152 = cast(%144, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %153 = reshape(%152, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %154 = @func_3110(%153) /* ty=(Tensor[(180, 12), bool],) */;
  %155 = cast(%var_3957, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %156 = reshape(%155, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %157 = %150.0;
  %158 = acos(%151) /* ty=Tensor[(891), float32] */;
  %159 = %154.0;
  %160 = @func_737(%156) /* ty=Tensor[(13, 6, 14), float64] */;
  (%144, %157, %var_3919, %158, %159, %160, %var_3957)
}

def @func_6960() -> (Tensor[(15, 9), float64], Tensor[(2, 80), int64]) {
  %161 = @func_4159() /* ty=Tensor[(15, 9), float64] */;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
  %163 = reshape(%162, newshape=[45, 3]) /* ty=Tensor[(45, 3), float64] */;
  %164 = @func_4777(%163) /* ty=(Tensor[(960), float32], Tensor[(182), int16], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(15, 16, 9), bool], Tensor[(45, 3), float64], Tensor[(135), float64], Tensor[(546, 2), float64], int64, Tensor[(2, 80), int64]) */;
  %165 = %164.10;
  (%161, %165)
}

def @func_7095() -> (Tensor[(180, 12), float32],) {
  %166 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
  %167 = %166.0;
  (%167,)
}

def @func_2712(%var_2683: Tensor[(11, 10, 9), uint8], %var_2684: Tensor[(11, 10, 9), uint8], %var_2697: Tensor[(1080, 2), bool]) -> (Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) {
  %168 = cast(%var_2684, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
  %169 = shape_of(%var_2683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%var_2683, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %172 = subtract(%170, %171) /* ty=Tensor[(11, 10, 9), uint8] */;
  %173 = cast(%var_2683, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = cast(%var_2697, dtype="bool") /* ty=Tensor[(1080, 2), bool] */;
  %178 = reshape(%177, newshape=[180, 12]) /* ty=Tensor[(180, 12), bool] */;
  %179 = @func_2545(%178) /* ty=(Tensor[(180, 12), bool],) */;
  %180 = logical_or(%175, %176) /* ty=Tensor[(11, 10, 9), bool] */;
  %181 = %179.0;
  (%180, %181, %var_2697)
}

def @func_48(%var_17: Tensor[(15, 1, 9), float64], %var_18: Tensor[(15, 16, 9), float64]) -> Tensor[(15, 16, 9), bool] {
  %182 = cast(%var_17, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %183 = cast(%var_18, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  less_equal(%182, %183) /* ty=Tensor[(15, 16, 9), bool] */
}

def @func_4677() -> (Tensor[(15, 9), float64],) {
  %184 = @func_4159() /* ty=Tensor[(15, 9), float64] */;
  (%184,)
}

def @func_4061() -> Tensor[(960), float32] {
  %185 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %185.0
}

def @func_4777(%var_4751: Tensor[(45, 3), float64]) -> (Tensor[(960), float32], Tensor[(182), int16], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(15, 16, 9), bool], Tensor[(45, 3), float64], Tensor[(135), float64], Tensor[(546, 2), float64], int64, Tensor[(2, 80), int64]) {
  %186 = @func_4000() /* ty=(Tensor[(960), float32],) */;
  %187 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %188 = @func_2789() /* ty=(Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) */;
  %189 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %190 = cast(%var_4751, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %191 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %193 = reshape(%190, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %194 = reshape(%192, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %195 = cast(%var_4751, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %196 = cast(%191, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %197 = reshape(%195, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %198 = reshape(%196, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), bool] */;
  %199 = @func_1738(%197, %198) /* ty=(Tensor[(135), float64], Tensor[(180, 12), uint64], Tensor[(15, 16, 9), bool], Tensor[(15, 16, 9), uint64]) */;
  %200 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %201 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 80), int64] */, dtype="int64") /* ty=Tensor[(2, 80), int64] */;
  %202 = reshape(%200, newshape=[]) /* ty=int64 */;
  %203 = reshape(%201, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int64] */;
  %204 = @func_1067(%202, %203) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) */;
  %205 = %186.0;
  %206 = %187.1;
  %207 = %188.4;
  %208 = %189.0;
  %209 = @func_48(%193, %194) /* ty=Tensor[(15, 16, 9), bool] */;
  %210 = %199.0;
  %211 = %204.2;
  (%205, %206, %191, %207, %208, %209, %var_4751, %210, %211, -4 /* ty=int64 */, meta[relay.Constant][9] /* ty=Tensor[(2, 80), int64] */)
}

def @func_5438() -> (Tensor[(960), float32], Tensor[(9, 9, 11), int32]) {
  %212 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %213 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %214 = %212.1;
  %215 = %213.0;
  (%214, %215)
}

def @func_5240(%var_5228: Tensor[(990), uint8]) -> (Tensor[(160), int64], Tensor[(180, 12), bool], Tensor[(990), uint8]) {
  %216 = @func_3859() /* ty=(Tensor[(160), int64],) */;
  %217 = cast(%var_5228, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %218 = reshape(%217, newshape=[990]) /* ty=Tensor[(990), uint8] */;
  %219 = @func_3665(%218) /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) */;
  %220 = %216.0;
  %221 = %219.1;
  (%220, %221, %var_5228)
}

def @func_5989(%var_5976: Tensor[(11, 4, 14), float32], %var_5985: Tensor[(11, 4, 14), bool]) -> (Tensor[(180, 12), float32], Tensor[(11, 4, 14), float64]) {
  %222 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %223 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 4, 14), uint64] */, dtype="uint64") /* ty=Tensor[(11, 4, 14), uint64] */;
  %224 = left_shift(%222, %223) /* ty=Tensor[(11, 4, 14), uint64] */;
  %225 = cast(%224, dtype="float32") /* ty=Tensor[(11, 4, 14), float32] */;
  %226 = tan(%225) /* ty=Tensor[(11, 4, 14), float32] */;
  %227 = cast(%var_5976, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = greater_equal(%229, %230) /* ty=Tensor[(11, 4, 14), bool] */;
  %232 = cast(%var_5985, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %236 = @func_5069() /* ty=Tensor[(180, 12), float32] */;
  %237 = power(%234, %235) /* ty=Tensor[(11, 4, 14), float64] */;
  (%236, %237)
}

def @func_6576(%var_6535: Tensor[(8, 1, 10), int8], %var_6573: Tensor[(990), uint8]) -> (Tensor[(8, 8, 10), int8], Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(2400), uint32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) {
  %238 = cast(%var_6535, dtype="int8") /* ty=Tensor[(8, 1, 10), int8] */;
  %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 8, 10), int8] */, dtype="int8") /* ty=Tensor[(8, 8, 10), int8] */;
  %240 = cast(meta[relay.Constant][13] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %241 = reshape(%240, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %242 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %243 = cast(%var_6573, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %244 = cast(%var_6573, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %245 = cast(meta[relay.Constant][14] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %246 = reshape(%243, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %247 = reshape(%244, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %248 = reshape(%245, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
  %249 = @func_2712(%246, %247, %248) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
  %250 = subtract(%238, %239) /* ty=Tensor[(8, 8, 10), int8] */;
  %251 = @func_737(%241) /* ty=Tensor[(13, 6, 14), float64] */;
  %252 = %242.2;
  %253 = %249.1;
  (%250, %251, meta[relay.Constant][13] /* ty=Tensor[(1092), float64] */, %252, %253, %var_6573, meta[relay.Constant][14] /* ty=Tensor[(2160), bool] */)
}

def @func_7286() -> Tensor[(960), float32] {
  @func_5348() /* ty=Tensor[(960), float32] */
}

def @func_6878(%var_6843: Tensor[(7, 6, 6), float32]) -> (Tensor[(9, 9, 11), float64], Tensor[(7, 6, 6), bool]) {
  %254 = cast(%var_6843, dtype="float32") /* ty=Tensor[(7, 6, 6), float32] */;
  %255 = log10(%254) /* ty=Tensor[(7, 6, 6), float32] */;
  %256 = cast(%var_6843, dtype="float64") /* ty=Tensor[(7, 6, 6), float64] */;
  %257 = exp(%256) /* ty=Tensor[(7, 6, 6), float64] */;
  %258 = cast(%257, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %259 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%255, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = @func_5840() /* ty=Tensor[(9, 9, 11), float64] */;
  %263 = not_equal(%260, %261) /* ty=Tensor[(7, 6, 6), bool] */;
  (%262, %263)
}

def @func_6678() -> Tensor[(9, 9, 11), float64] {
  @func_4402() /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_4212(%var_4185: Tensor[(960, 16), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 9), float64], Tensor[(960, 16), float32]) {
  %264 = cast(meta[relay.Constant][15] /* ty=Tensor[(960, 1), float32] */, dtype="float32") /* ty=Tensor[(960, 1), float32] */;
  %265 = reshape(%264, newshape=[60, 16]) /* ty=Tensor[(60, 16), float32] */;
  %266 = @func_1309(%265) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) */;
  %267 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(960, 1), float32] */, dtype="float32") /* ty=Tensor[(960, 1), float32] */;
  %269 = cast(%var_4185, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
  %270 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %271 = %266.1;
  %272 = %267.0;
  %273 = power(%268, %269) /* ty=Tensor[(960, 16), float32] */;
  (%270, %271, %272, %273)
}

def @func_7419(%var_7387: Tensor[(80), int8]) -> (Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(2400), uint32], Tensor[(180, 12), float32], Tensor[(990, 80), bool], Tensor[(182), int16]) {
  %274 = @func_5840() /* ty=Tensor[(9, 9, 11), float64] */;
  %275 = cast(%274, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
  %276 = reshape(%275, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %277 = @func_6235(%276) /* ty=(Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(1080, 2), float64], Tensor[(960), float32], Tensor[(891), float32], Tensor[(891), int32], Tensor[(9, 9, 11), uint8]) */;
  %278 = cast(%var_7387, dtype="int8") /* ty=Tensor[(80), int8] */;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(990, 1), uint8] */, dtype="uint8") /* ty=Tensor[(990, 1), uint8] */;
  %280 = reshape(%278, newshape=[8, 1, 10]) /* ty=Tensor[(8, 1, 10), int8] */;
  %281 = reshape(%279, newshape=[990]) /* ty=Tensor[(990), uint8] */;
  %282 = @func_6576(%280, %281) /* ty=(Tensor[(8, 8, 10), int8], Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(2400), uint32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) */;
  %283 = cast(meta[relay.Constant][16] /* ty=Tensor[(990, 1), uint8] */, dtype="bool") /* ty=Tensor[(990, 1), bool] */;
  %284 = cast(%var_7387, dtype="bool") /* ty=Tensor[(80), bool] */;
  %285 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %286 = %277.0;
  %287 = %282.3;
  %288 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
  %289 = greater_equal(%283, %284) /* ty=Tensor[(990, 80), bool] */;
  %290 = %285.1;
  (%274, %286, %287, %288, %289, %290)
}

def @func_4043(%var_4040: Tensor[(10, 4, 3), float64]) -> Tensor[(10, 4, 3), float64] {
  %291 = cast(%var_4040, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
  asinh(%291) /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_6313() -> (Tensor[(160), int64], Tensor[(15, 9), float64]) {
  %292 = @func_3859() /* ty=(Tensor[(160), int64],) */;
  %293 = %292.0;
  %294 = @func_4056() /* ty=Tensor[(15, 9), float64] */;
  (%293, %294)
}

def @func_3163() -> (Tensor[(9, 9, 11), float32],) {
  %295 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  (%295,)
}

def @func_7561() -> (Tensor[(15, 9), float64],) {
  %296 = @func_5398() /* ty=(Tensor[(15, 9), float64],) */;
  %297 = %296.0;
  (%297,)
}

def @func_1100() -> (Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) {
  %298 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
  %299 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(9, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %302 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 9, 11), int32] */, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %303 = bitwise_or(%300, %301) /* ty=Tensor[(9, 9, 11), int32] */;
  %304 = rsqrt(%302) /* ty=Tensor[(9, 9, 11), float64] */;
  (%303, %304)
}

def @func_5398() -> (Tensor[(15, 9), float64],) {
  %305 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
  %306 = %305.0;
  (%306,)
}

def @func_4159() -> Tensor[(15, 9), float64] {
  %307 = @func_3526() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
  %307.0
}

def @func_5640(%var_5598: Tensor[(3, 15, 5), float32], %var_5599: Tensor[(3, 15, 5), float32]) -> (Tensor[(3, 15, 5), float32], Tensor[(15, 9), float64], Tensor[(3, 15, 5), float64]) {
  %308 = cast(%var_5599, dtype="float32") /* ty=Tensor[(3, 15, 5), float32] */;
  %309 = shape_of(%var_5598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_5598, dtype="float32") /* ty=Tensor[(3, 15, 5), float32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %312 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %313 = cast(%var_5599, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %314 = mod(%310, %311) /* ty=Tensor[(3, 15, 5), float32] */;
  %315 = %312.0;
  %316 = sin(%313) /* ty=Tensor[(3, 15, 5), float64] */;
  (%314, %315, %316)
}

def @func_2033(%var_2006: Tensor[(135), float64], %var_2022: Tensor[(9, 9, 11), int32]) -> (Tensor[(13, ?, 12), float32], Tensor[(135), uint16], Tensor[(9, 9, 11), bool]) {
  %317 = cast(%var_2006, dtype="float64") /* ty=Tensor[(135), float64] */;
  %318 = reshape(%317, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %319 = @func_1437(%318) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %320 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), float64] */, dtype="uint16") /* ty=Tensor[(135), uint16] */;
  %321 = shape_of(%var_2006, dtype="int32") /* ty=Tensor[(1), int32] */;
  %322 = cast(%var_2006, dtype="uint16") /* ty=Tensor[(135), uint16] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %324 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %325 = %324.0;
  %326 = cast(%var_2022, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = %319.4;
  %331 = bitwise_xor(%322, %323) /* ty=Tensor[(135), uint16] */;
  %332 = less_equal(%328, %329) /* ty=Tensor[(9, 9, 11), bool] */;
  (%330, %331, %332)
}

def @func_4112(%var_4103: float64, %var_4104: Tensor[(6, 4, 11), float64]) -> Tensor[(6, 4, 11), bool] {
  %333 = cast(%var_4103, dtype="bool") /* ty=bool */;
  %334 = cast(%var_4104, dtype="bool") /* ty=Tensor[(6, 4, 11), bool] */;
  greater(%333, %334) /* ty=Tensor[(6, 4, 11), bool] */
}

def @func_7515() -> (Tensor[(9, 9, 11), float32], Tensor[(960), float32], Tensor[(182), int16], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) {
  %335 = @func_4580() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
  %336 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %337 = cast(meta[relay.Constant][20] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %338 = reshape(%337, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %339 = %335.1;
  %340 = %336.3;
  %341 = @func_2188() /* ty=Tensor[(182), int16] */;
  %342 = @func_737(%338) /* ty=Tensor[(13, 6, 14), float64] */;
  (%339, %340, %341, %342, meta[relay.Constant][20] /* ty=Tensor[(1092), float64] */)
}

def @func_5154(%var_5098: Tensor[(160), int64]) -> (Tensor[(546, 2), float64], Tensor[(160), int64], Tensor[(960), float32], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float64]) {
  %343 = cast(-9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %344 = cast(%var_5098, dtype="int64") /* ty=Tensor[(160), int64] */;
  %345 = reshape(%343, newshape=[]) /* ty=int64 */;
  %346 = reshape(%344, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int64] */;
  %347 = @func_1067(%345, %346) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) */;
  %348 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
  %349 = %348.1;
  %350 = cast(-9 /* ty=int64 */, dtype="float64") /* ty=float64 */;
  %351 = cast(%349, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %352 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %353 = cast(%349, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %354 = log2(%353) /* ty=Tensor[(9, 9, 11), float64] */;
  %355 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %359 = %347.2;
  %360 = @func_4061() /* ty=Tensor[(960), float32] */;
  %361 = multiply(%350, %351) /* ty=Tensor[(9, 9, 11), float64] */;
  %362 = %352.0;
  %363 = floor_mod(%357, %358) /* ty=Tensor[(9, 9, 11), float64] */;
  (%359, %var_5098, %360, %361, %362, %363)
}

def @func_4132() -> (Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) {
  %364 = @func_3510() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(180, 12), float32]) */;
  %365 = cast(meta[relay.Constant][22] /* ty=Tensor[(2400), uint32] */, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
  %366 = cast(meta[relay.Constant][22] /* ty=Tensor[(2400), uint32] */, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
  %367 = reshape(%365, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
  %368 = reshape(%366, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
  %369 = @func_3578(%367, %368) /* ty=(Tensor[(15, 10, 16), bool], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(182), int16]) */;
  %370 = %364.1;
  %371 = %369.3;
  (%370, %371, meta[relay.Constant][22] /* ty=Tensor[(2400), uint32] */)
}

def @func_6092(%var_6087: Tensor[(891), int32]) -> (Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) {
  %372 = cast(%var_6087, dtype="int32") /* ty=Tensor[(891), int32] */;
  %373 = cast(meta[relay.Constant][23] /* ty=Tensor[(20, 48), float32] */, dtype="float32") /* ty=Tensor[(20, 48), float32] */;
  %374 = cast(meta[relay.Constant][24] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %375 = reshape(%372, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %376 = reshape(%373, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %377 = reshape(%374, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %378 = @func_3964(%375, %376, %377) /* ty=(Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) */;
  %379 = @func_4056() /* ty=Tensor[(15, 9), float64] */;
  %380 = %378.3;
  (%379, %380, %var_6087, meta[relay.Constant][23] /* ty=Tensor[(20, 48), float32] */, meta[relay.Constant][24] /* ty=Tensor[(1092), float64] */)
}

def @func_6170(%var_6142: Tensor[(11, 3, 7), float64]) -> (Tensor[(11, 3, 7), uint16],) {
  %381 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 7), float64] */;
  %382 = log(%381) /* ty=Tensor[(11, 3, 7), float64] */;
  %383 = cast(%var_6142, dtype="uint16") /* ty=Tensor[(11, 3, 7), uint16] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="uint16") /* ty=Tensor[(11, 3, 7), uint16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %387 = minimum(%385, %386) /* ty=Tensor[(11, 3, 7), uint16] */;
  (%387,)
}

def @func_2789() -> (Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) {
  %388 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %389 = cast(meta[relay.Constant][26] /* ty=Tensor[(891), int32] */, dtype="int32") /* ty=Tensor[(891), int32] */;
  %390 = @func_2230() /* ty=Tensor[(180, 12), float32] */;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %393 = reshape(%389, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), int32] */;
  %394 = reshape(%391, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %395 = reshape(%392, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %396 = @func_2659(%393, %394, %395) /* ty=(Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %397 = %388.2;
  %398 = %396.3;
  (%397, %390, %398, meta[relay.Constant][26] /* ty=Tensor[(891), int32] */, meta[relay.Constant][27] /* ty=Tensor[(960), float32] */)
}

def @func_7195() -> Tensor[(960), float32] {
  %399 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %399.1
}

def @func_7656(%var_7626: Tensor[(135), float64], %var_7652: Tensor[(256), uint8]) -> (Tensor[(180, 12), float32], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float32], Tensor[(891), float32], Tensor[(256), uint8]) {
  %400 = cast(%var_7626, dtype="float64") /* ty=Tensor[(135), float64] */;
  %401 = reshape(%400, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %402 = @func_1437(%401) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %403 = %402.4;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(13, ?, 12), float32] */;
  %405 = cast(meta[relay.Constant][28] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %406 = cast(%var_7652, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %407 = cast(meta[relay.Constant][28] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %408 = reshape(%405, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %409 = reshape(%406, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %410 = reshape(%407, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %411 = @func_5562(%408, %409, %410) /* ty=(Tensor[(9, 9, 11), int64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(256), uint8], Tensor[(9, 9, 11), float32]) */;
  %412 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %413 = erf(%404) /* ty=Tensor[(13, ?, 12), float32] */;
  %414 = %411.4;
  (%412, %var_7626, %413, %414, meta[relay.Constant][28] /* ty=Tensor[(891), float32] */, %var_7652)
}

def @func_6928(%var_6898: Tensor[(5, 30), int16], %var_6915: Tensor[(891), float32]) -> (Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(5, 30), int16], Tensor[(9, 9, 11), int32], Tensor[(891), float32], Tensor[(5, 198), int64], Tensor[(9, 9, 11), float32]) {
  %415 = @func_4580() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
  %418 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 198), uint8] */, dtype="uint8") /* ty=Tensor[(5, 198), uint8] */;
  %419 = cast(%var_6898, dtype="int16") /* ty=Tensor[(5, 30), int16] */;
  %420 = reshape(%417, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %421 = reshape(%418, newshape=[990]) /* ty=Tensor[(990), uint8] */;
  %422 = reshape(%419, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), int16] */;
  %423 = @func_5792(%420, %421, %422) /* ty=(Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2, 1080), float64], Tensor[(891), float32], Tensor[(9, 9, 11), uint8], Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(9, 9, 11), float32], Tensor[(10, 1, 15), int8], Tensor[(14, 13, 1), float64]) */;
  %424 = cast(%var_6915, dtype="float32") /* ty=Tensor[(891), float32] */;
  %425 = reshape(%424, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %426 = @func_2265(%425) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) */;
  %427 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 198), uint8] */, dtype="float32") /* ty=Tensor[(5, 198), float32] */;
  %428 = erf(%427) /* ty=Tensor[(5, 198), float32] */;
  %429 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 198), uint8] */, dtype="int64") /* ty=Tensor[(5, 198), int64] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(2), int32] */;
  %431 = cast(%428, dtype="int64") /* ty=Tensor[(5, 198), int64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %433 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %434 = %423.1;
  %435 = %426.2;
  %436 = subtract(%431, %432) /* ty=Tensor[(5, 198), int64] */;
  %437 = %433.0;
  (%416, %434, %var_6898, %435, %var_6915, %436, %437)
}

def @func_1253() -> Tensor[(9, 9, 11), float32] {
  %438 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %439 = %438.1;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  asin(%440) /* ty=Tensor[(9, 9, 11), float32] */
}

def @func_4645(%var_4615: float64, %var_4616: Tensor[(8, 3, 2), float64]) -> (Tensor[(8, 3, 2), bool], Tensor[(13, 6, 14), float64], Tensor[(13, 6, 14), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) {
  %441 = cast(%var_4615, dtype="bool") /* ty=bool */;
  %442 = cast(%var_4616, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %443 = @func_2390() /* ty=(Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) */;
  %444 = %443.4;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
  %446 = reshape(%445, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %447 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %448 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
  %449 = greater_equal(%441, %442) /* ty=Tensor[(8, 3, 2), bool] */;
  %450 = @func_737(%446) /* ty=Tensor[(13, 6, 14), float64] */;
  %451 = %447.0;
  %452 = %448.1;
  (%449, %444, %450, %451, %452)
}

def @func_7321() -> (Tensor[(9, 9, 11), float32],) {
  %453 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
  %454 = %453.0;
  (%454,)
}

def @func_4929(%var_4921: Tensor[(9, 9, 11), float64]) -> Tensor[(9, 9, 11), uint8] {
  %455 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %456 = %455.1;
  %457 = cast(%var_4921, dtype="uint8") /* ty=Tensor[(9, 9, 11), uint8] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="uint8") /* ty=Tensor[(9, 9, 11), uint8] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%459, %460) /* ty=Tensor[(9, 9, 11), uint8] */
}

def @func_7605(%var_7600: Tensor[(13, 2, 6), float64]) -> Tensor[(13, 2, 6), float64] {
  %461 = cast(%var_7600, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %462 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(13, 2, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%463, %464) /* ty=Tensor[(13, 2, 6), float64] */
}

def @func_5562(%var_5519: Tensor[(9, 9, 11), float32], %var_5541: Tensor[(256), uint8], %var_5558: Tensor[(9, 9, 11), float32]) -> (Tensor[(9, 9, 11), int64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(256), uint8], Tensor[(9, 9, 11), float32]) {
  %465 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %466 = %465.0;
  %467 = cast(%var_5519, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %471 = cast(%var_5541, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %472 = cast(%var_5541, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %473 = cast(%466, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
  %474 = reshape(%471, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), uint8] */;
  %475 = reshape(%472, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), uint8] */;
  %476 = reshape(%473, newshape=[891, 1]) /* ty=Tensor[(891, 1), int32] */;
  %477 = @func_4519(%474, %475, %476) /* ty=(Tensor[(4, 8, 8), bool], Tensor[(180, 12), float32], Tensor[(15, 16, 9), bool], Tensor[(180, 12), bool], Tensor[(891, 960), uint8]) */;
  %478 = cast(%var_5558, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %479 = shape_of(%var_5519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%var_5519, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %482 = bitwise_and(%469, %470) /* ty=Tensor[(9, 9, 11), int64] */;
  %483 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
  %484 = %477.2;
  %485 = maximum(%480, %481) /* ty=Tensor[(9, 9, 11), float32] */;
  (%482, %483, %484, %var_5541, %485)
}

def @func_1437(%var_1394: Tensor[(135), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) {
  %486 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %487 = cast(meta[relay.Constant][31] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
  %488 = reshape(%487, newshape=[60, 16]) /* ty=Tensor[(60, 16), float32] */;
  %489 = @func_1309(%488) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) */;
  %490 = cast(%var_1394, dtype="float64") /* ty=Tensor[(135), float64] */;
  %491 = %489.1;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %493 = reshape(%490, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %494 = reshape(%492, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %495 = cast(meta[relay.Constant][32] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %496 = reshape(%495, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float32] */;
  %497 = @func_879(%496) /* ty=(Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) */;
  %498 = %497.0;
  %499 = cast(meta[relay.Constant][32] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="float32") /* ty=Tensor[(13, ?, 12), float32] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %503 = cast(meta[relay.Constant][31] /* ty=Tensor[(480, 2), float32] */, dtype="float64") /* ty=Tensor[(480, 2), float64] */;
  %504 = cast(meta[relay.Constant][31] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
  %505 = reshape(%504, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
  %506 = @func_372(%505) /* ty=(Tensor[(10, 12, 8), uint32],) */;
  %507 = %486.1;
  %508 = @func_48(%493, %494) /* ty=Tensor[(15, 16, 9), bool] */;
  %509 = floor_divide(%501, %502) /* ty=Tensor[(13, ?, 12), float32] */;
  %510 = log10(%503) /* ty=Tensor[(480, 2), float64] */;
  %511 = %506.0;
  (%507, %491, %508, %var_1394, %509, %510, %511)
}

def @func_6782() -> (Tensor[(9, 9, 11), float32],) {
  %512 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  (%512,)
}

def @func_6326() -> (Tensor[(9, 9, 11), float32],) {
  %513 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
  %514 = %513.1;
  (%514,)
}

def @func_4056() -> Tensor[(15, 9), float64] {
  %515 = @func_3526() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
  %515.0
}

def @func_1880(%var_1832: Tensor[(135), float64], %var_1833: Tensor[(2160), float64], %var_1858: Tensor[(9, 9, 11), float32]) -> (Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) {
  %516 = cast(%var_1832, dtype="float64") /* ty=Tensor[(135), float64] */;
  %517 = cast(%var_1833, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %518 = reshape(%516, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %519 = reshape(%517, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %520 = cast(%var_1832, dtype="float64") /* ty=Tensor[(135), float64] */;
  %521 = reshape(%520, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %522 = @func_1437(%521) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %523 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %524 = cast(%var_1858, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = cast(%var_1832, dtype="float64") /* ty=Tensor[(135), float64] */;
  %529 = @func_48(%518, %519) /* ty=Tensor[(15, 16, 9), bool] */;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %531 = reshape(%528, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %532 = reshape(%530, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %533 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %534 = %522.4;
  %535 = power(%526, %527) /* ty=Tensor[(9, 9, 11), float64] */;
  %536 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
  %537 = @func_48(%531, %532) /* ty=Tensor[(15, 16, 9), bool] */;
  (%529, %var_1832, %var_1833, %533, %534, %535, %536, %537)
}

def @func_3986() -> Tensor[(960), float32] {
  @func_2760() /* ty=Tensor[(960), float32] */
}

def @func_3729(%var_3700: Tensor[(12, 11, 10), int16], %var_3701: Tensor[(12, 11, 10), int16]) -> (Tensor[(12, 11, 10), bool], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(27, 9), float64]) {
  %538 = cast(%var_3701, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %539 = shape_of(%var_3700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_3700, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = cast(meta[relay.Constant][33] /* ty=Tensor[(3), float64] */, dtype="float64") /* ty=Tensor[(3), float64] */;
  %543 = cast(meta[relay.Constant][34] /* ty=Tensor[(27, 9), float64] */, dtype="float64") /* ty=Tensor[(27, 9), float64] */;
  %544 = reshape(%542, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), float64] */;
  %545 = reshape(%543, newshape=[9, 9, 3]) /* ty=Tensor[(9, 9, 3), float64] */;
  %546 = @func_1928(%544, %545) /* ty=(Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) */;
  %547 = less_equal(%540, %541) /* ty=Tensor[(12, 11, 10), bool] */;
  %548 = %546.2;
  (%547, %548, meta[relay.Constant][33] /* ty=Tensor[(3), float64] */, meta[relay.Constant][34] /* ty=Tensor[(27, 9), float64] */)
}

def @func_1928(%var_1910: Tensor[(1, 1, 3), float64], %var_1911: Tensor[(9, 9, 3), float64]) -> (Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) {
  %549 = cast(meta[relay.Constant][35] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %550 = reshape(%549, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %551 = cast(%var_1910, dtype="float64") /* ty=Tensor[(1, 1, 3), float64] */;
  %552 = cast(%var_1911, dtype="float64") /* ty=Tensor[(9, 9, 3), float64] */;
  %553 = floor_divide(%551, %552) /* ty=Tensor[(9, 9, 3), float64] */;
  %554 = cast(%var_1911, dtype="float64") /* ty=Tensor[(9, 9, 3), float64] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="float64") /* ty=Tensor[(9, 9, 3), float64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %558 = @func_737(%550) /* ty=Tensor[(13, 6, 14), float64] */;
  %559 = add(%556, %557) /* ty=Tensor[(9, 9, 3), float64] */;
  (%558, meta[relay.Constant][35] /* ty=Tensor[(1092), float64] */, %559)
}

def @func_5840() -> Tensor[(9, 9, 11), float64] {
  %560 = @func_5059() /* ty=Tensor[(9, 9, 11), float64] */;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  cosh(%561) /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_2390() -> (Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) {
  %562 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  %563 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(4, 12, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %566 = power(%564, %565) /* ty=Tensor[(4, 12, 13), float64] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(4, 12, 13), float32] */;
  %568 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %569 = cast(meta[relay.Constant][38] /* ty=Tensor[(160), int64] */, dtype="int64") /* ty=Tensor[(160), int64] */;
  %570 = reshape(%568, newshape=[]) /* ty=int64 */;
  %571 = reshape(%569, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int64] */;
  %572 = @func_1067(%570, %571) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) */;
  %573 = %572.2;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %575 = reshape(%574, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %576 = sin(%567) /* ty=Tensor[(4, 12, 13), float32] */;
  %577 = @func_737(%575) /* ty=Tensor[(13, 6, 14), float64] */;
  (%576, %573, 7 /* ty=int64 */, meta[relay.Constant][38] /* ty=Tensor[(160), int64] */, %577)
}

def @func_6430() -> (Tensor[(180, 12), float64], Tensor[(9, 9, 11), float32]) {
  %578 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %579 = %578.1;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %581 = @func_6366() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %582 = log(%580) /* ty=Tensor[(180, 12), float64] */;
  %583 = %581.0;
  (%582, %583)
}

def @func_1067(%var_1057: int64, %var_1058: Tensor[(8, 4, 5), int64]) -> (Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) {
  %584 = cast(%var_1057, dtype="bool") /* ty=bool */;
  %585 = cast(%var_1058, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %586 = cast(meta[relay.Constant][39] /* ty=Tensor[(546, 2), float64] */, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %587 = reshape(%586, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %588 = greater(%584, %585) /* ty=Tensor[(8, 4, 5), bool] */;
  %589 = @func_737(%587) /* ty=Tensor[(13, 6, 14), float64] */;
  (%588, %589, meta[relay.Constant][39] /* ty=Tensor[(546, 2), float64] */)
}

def @func_1738(%var_1643: Tensor[(135), float64], %var_1720: Tensor[(15, 16, 9), bool]) -> (Tensor[(135), float64], Tensor[(180, 12), uint64], Tensor[(15, 16, 9), bool], Tensor[(15, 16, 9), uint64]) {
  %590 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %591 = cast(%var_1643, dtype="float64") /* ty=Tensor[(135), float64] */;
  %592 = cast(%590, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %593 = reshape(%591, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %594 = reshape(%592, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %595 = @func_48(%593, %594) /* ty=Tensor[(15, 16, 9), bool] */;
  %596 = cast(%595, dtype="uint64") /* ty=Tensor[(15, 16, 9), uint64] */;
  %597 = shape_of(%590, dtype="int32") /* ty=Tensor[(2), int32] */;
  %598 = cast(%590, dtype="uint64") /* ty=Tensor[(180, 12), uint64] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %600 = cast(%var_1643, dtype="float64") /* ty=Tensor[(135), float64] */;
  %601 = reshape(%600, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %602 = @func_1437(%601) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %603 = cast(%595, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %604 = sigmoid(%603) /* ty=Tensor[(15, 16, 9), float64] */;
  %605 = cast(%595, dtype="float32") /* ty=Tensor[(15, 16, 9), float32] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="float32") /* ty=Tensor[(15, 16, 9), float32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %609 = floor_divide(%607, %608) /* ty=Tensor[(15, 16, 9), float32] */;
  %610 = cast(%604, dtype="int64") /* ty=Tensor[(15, 16, 9), int64] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="int64") /* ty=Tensor[(15, 16, 9), int64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %614 = minimum(%612, %613) /* ty=Tensor[(15, 16, 9), int64] */;
  %615 = cast(%614, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  %616 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%604, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = not_equal(%617, %618) /* ty=Tensor[(15, 16, 9), bool] */;
  %620 = cast(%var_1720, dtype="uint64") /* ty=Tensor[(15, 16, 9), uint64] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="uint64") /* ty=Tensor[(15, 16, 9), uint64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %624 = bitwise_and(%598, %599) /* ty=Tensor[(180, 12), uint64] */;
  %625 = %602.2;
  %626 = subtract(%622, %623) /* ty=Tensor[(15, 16, 9), uint64] */;
  (%var_1643, %624, %625, %626)
}

def @func_4519(%var_4477: Tensor[(4, 8, 8), uint8], %var_4478: Tensor[(4, 8, 8), uint8], %var_4498: Tensor[(891, 1), int32]) -> (Tensor[(4, 8, 8), bool], Tensor[(180, 12), float32], Tensor[(15, 16, 9), bool], Tensor[(180, 12), bool], Tensor[(891, 960), uint8]) {
  %627 = cast(%var_4478, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %628 = shape_of(%var_4477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_4477, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = cast(%var_4498, dtype="int32") /* ty=Tensor[(891, 1), int32] */;
  %632 = @func_2230() /* ty=Tensor[(180, 12), float32] */;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %634 = cast(meta[relay.Constant][40] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %635 = reshape(%631, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), int32] */;
  %636 = reshape(%633, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %637 = reshape(%634, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %638 = @func_2659(%635, %636, %637) /* ty=(Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %639 = %638.1;
  %640 = cast(%639, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  %641 = reshape(%640, newshape=[180, 12]) /* ty=Tensor[(180, 12), bool] */;
  %642 = @func_2545(%641) /* ty=(Tensor[(180, 12), bool],) */;
  %643 = cast(meta[relay.Constant][40] /* ty=Tensor[(960), float32] */, dtype="uint8") /* ty=Tensor[(960), uint8] */;
  %644 = cast(%var_4498, dtype="uint8") /* ty=Tensor[(891, 1), uint8] */;
  %645 = greater_equal(%629, %630) /* ty=Tensor[(4, 8, 8), bool] */;
  %646 = %642.0;
  %647 = bitwise_xor(%643, %644) /* ty=Tensor[(891, 960), uint8] */;
  (%645, %632, %639, %646, %647)
}

def @func_3859() -> (Tensor[(160), int64],) {
  %648 = @func_2390() /* ty=(Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) */;
  %649 = %648.3;
  (%649,)
}

def @func_879(%var_859: Tensor[(13, 1, 12), float32]) -> (Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) {
  %650 = cast(%var_859, dtype="float32") /* ty=Tensor[(13, 1, 12), float32] */;
  %651 = rsqrt(%650) /* ty=Tensor[(13, 1, 12), float32] */;
  %652 = cast(%651, dtype="uint32") /* ty=Tensor[(13, 1, 12), uint32] */;
  %653 = shape_of(%var_859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_859, dtype="uint32") /* ty=Tensor[(13, 1, 12), uint32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %656 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
  %657 = cast(meta[relay.Constant][42] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %658 = reshape(%656, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %659 = reshape(%657, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %660 = bitwise_xor(%654, %655) /* ty=Tensor[(13, ?, 12), uint32] */;
  %661 = @func_48(%658, %659) /* ty=Tensor[(15, 16, 9), bool] */;
  (%660, %661, meta[relay.Constant][41] /* ty=Tensor[(15, 9), float64] */, meta[relay.Constant][42] /* ty=Tensor[(2160), float64] */)
}

def @func_2517(%var_2497: Tensor[(1, 135), float64], %var_2504: Tensor[(3, 1), float64], %var_2505: Tensor[(243), float64], %var_2509: Tensor[(6, 135), float64]) -> (Tensor[(180, 12), float32], Tensor[(2160), float64], Tensor[(60, 36), float32], Tensor[(3, 1), float64], Tensor[(243), float64], Tensor[(6, 135), int8]) {
  %662 = cast(%var_2497, dtype="float64") /* ty=Tensor[(1, 135), float64] */;
  %663 = reshape(%662, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %664 = @func_1437(%663) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %665 = %664.1;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %667 = cast(%var_2504, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
  %668 = cast(%var_2505, dtype="float64") /* ty=Tensor[(243), float64] */;
  %669 = reshape(%666, newshape=[60, 36]) /* ty=Tensor[(60, 36), float32] */;
  %670 = reshape(%667, newshape=[3]) /* ty=Tensor[(3), float64] */;
  %671 = reshape(%668, newshape=[243]) /* ty=Tensor[(243), float64] */;
  %672 = @func_2454(%669, %670, %671) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), float32], Tensor[(60, 36), float32], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(243), float64], Tensor[(182), int16], Tensor[(180, 12), float32], int16, Tensor[(9, 9, 11), int32]) */;
  %673 = cast(%var_2497, dtype="int8") /* ty=Tensor[(1, 135), int8] */;
  %674 = cast(%var_2509, dtype="int8") /* ty=Tensor[(6, 135), int8] */;
  %675 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
  %676 = %672.2;
  %677 = minimum(%673, %674) /* ty=Tensor[(6, 135), int8] */;
  (%675, %665, %676, %var_2504, %var_2505, %677)
}

def @func_1203(%var_1123: Tensor[(180, 12), float64], %var_1128: Tensor[(10, 96), float32], %var_1161: Tensor[(180, 12), float32], %var_1171: Tensor[(180, 12), float32]) -> (Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) {
  %678 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %679 = cast(meta[relay.Constant][43] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %680 = cast(%var_1123, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %681 = reshape(%679, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %682 = reshape(%680, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %683 = cast(%var_1128, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %684 = reshape(%683, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
  %685 = @func_372(%684) /* ty=(Tensor[(10, 12, 8), uint32],) */;
  %686 = %685.0;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(10, 12, 8), float32] */;
  %688 = reshape(%687, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
  %689 = @func_372(%688) /* ty=(Tensor[(10, 12, 8), uint32],) */;
  %690 = cast(%686, dtype="bool") /* ty=Tensor[(10, 12, 8), bool] */;
  %691 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(2), int32] */;
  %692 = cast(%var_1128, dtype="bool") /* ty=Tensor[(10, 96), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %694 = cast(%var_1123, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %695 = rsqrt(%694) /* ty=Tensor[(180, 12), float32] */;
  %696 = cast(%var_1161, dtype="int8") /* ty=Tensor[(180, 12), int8] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(2), int32] */;
  %698 = cast(%695, dtype="int8") /* ty=Tensor[(180, 12), int8] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %700 = cast(%var_1123, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %701 = shape_of(%695, dtype="int32") /* ty=Tensor[(2), int32] */;
  %702 = cast(%695, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %704 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %705 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %706 = cast(meta[relay.Constant][43] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %707 = @func_48(%681, %682) /* ty=Tensor[(15, 16, 9), bool] */;
  %708 = cast(%707, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %709 = reshape(%706, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %710 = reshape(%708, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %711 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %712 = cast(%var_1171, dtype="int64") /* ty=Tensor[(180, 12), int64] */;
  %713 = shape_of(%695, dtype="int32") /* ty=Tensor[(2), int32] */;
  %714 = cast(%695, dtype="int64") /* ty=Tensor[(180, 12), int64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %716 = bitwise_xor(%714, %715) /* ty=Tensor[(180, 12), int64] */;
  %717 = cast(%var_1161, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(2), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %721 = %678.1;
  %722 = %689.0;
  %723 = greater_equal(%692, %693) /* ty=Tensor[(10, 96), bool] */;
  %724 = subtract(%698, %699) /* ty=Tensor[(180, 12), int8] */;
  %725 = floor_divide(%702, %703) /* ty=Tensor[(180, 12), float64] */;
  %726 = %704.1;
  %727 = %705.0;
  %728 = @func_48(%709, %710) /* ty=Tensor[(15, 16, 9), bool] */;
  %729 = %711.1;
  %730 = equal(%719, %720) /* ty=Tensor[(180, 12), bool] */;
  (%721, %707, meta[relay.Constant][43] /* ty=Tensor[(135), float64] */, %722, %723, %724, %725, %726, %727, %728, %729, %730)
}

def @func_2545(%var_2539: Tensor[(180, 12), bool]) -> (Tensor[(180, 12), bool],) {
  %731 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %732 = %731.1;
  %733 = cast(%var_2539, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(2), int32] */;
  %735 = cast(%732, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %737 = greater(%735, %736) /* ty=Tensor[(180, 12), bool] */;
  (%737,)
}

def @func_2188() -> Tensor[(182), int16] {
  %738 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %738.4
}

def @func_5059() -> Tensor[(9, 9, 11), float64] {
  %739 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  acosh(%741) /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_3017() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %742 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %743 = %742.0;
  %744 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  (%743, %744)
}

def @func_6366() -> (Tensor[(9, 9, 11), float32],) {
  %745 = @func_6326() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %746 = %745.0;
  (%746,)
}

def @main(%var_7779: int16) -> (Tensor[(160), int64], Tensor[(182), int16], Tensor[(14, 13, 1), bool]) {
  %747 = @func_3859() /* ty=(Tensor[(160), int64],) */;
  %748 = cast(%var_7779, dtype="int16") /* ty=int16 */;
  %749 = cast(meta[relay.Constant][44] /* ty=Tensor[(182), int16] */, dtype="int16") /* ty=Tensor[(182), int16] */;
  %750 = reshape(%748, newshape=[]) /* ty=int16 */;
  %751 = reshape(%749, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
  %752 = @func_1023(%750, %751) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
  %753 = %752.1;
  %754 = cast(%var_7779, dtype="bool") /* ty=bool */;
  %755 = cast(%753, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %756 = %747.0;
  %757 = logical_or(%754, %755) /* ty=Tensor[(14, 13, 1), bool] */;
  (%756, meta[relay.Constant][44] /* ty=Tensor[(182), int16] */, %757)
}

def @func_2298() -> Tensor[(180, 12), float32] {
  %758 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
  %758.0
}

def @func_5930(%var_5910: Tensor[(13, 14, 16), int64], %var_5911: Tensor[(13, 14, 16), int64]) -> (Tensor[(13, 14, 16), bool], Tensor[(13, 14, 16), float64]) {
  %759 = cast(%var_5911, dtype="bool") /* ty=Tensor[(13, 14, 16), bool] */;
  %760 = shape_of(%var_5910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%var_5910, dtype="bool") /* ty=Tensor[(13, 14, 16), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %763 = cast(%var_5910, dtype="float64") /* ty=Tensor[(13, 14, 16), float64] */;
  %764 = equal(%761, %762) /* ty=Tensor[(13, 14, 16), bool] */;
  %765 = sqrt(%763) /* ty=Tensor[(13, 14, 16), float64] */;
  (%764, %765)
}

def @func_2273() -> Tensor[(15, 9), float64] {
  @func_1809() /* ty=Tensor[(15, 9), float64] */
}

def @func_3665(%var_3640: Tensor[(990), uint8]) -> (Tensor[(15, 9), float64], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) {
  %766 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
  %767 = cast(%var_3640, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %768 = cast(%var_3640, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %769 = cast(meta[relay.Constant][45] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %770 = reshape(%767, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %771 = reshape(%768, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %772 = reshape(%769, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
  %773 = @func_2712(%770, %771, %772) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
  %774 = %766.0;
  %775 = %773.1;
  (%774, %775, %var_3640, meta[relay.Constant][45] /* ty=Tensor[(2160), bool] */)
}

def @func_3510() -> (Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(180, 12), float32]) {
  %776 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
  %777 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
  %778 = %776.0;
  %779 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  (%777, %778, %779)
}

def @func_3526() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %780 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
  %783 = reshape(%782, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %784 = @func_1437(%783) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %785 = %784.0;
  (%781, %785)
}

def @func_3110(%var_3100: Tensor[(180, 12), float32]) -> (Tensor[(180, 12), bool],) {
  %786 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %787 = %786.1;
  %788 = cast(%var_3100, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(2), int32] */;
  %790 = cast(%787, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %792 = less(%790, %791) /* ty=Tensor[(180, 12), bool] */;
  (%792,)
}

def @func_4402() -> Tensor[(9, 9, 11), float64] {
  %793 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %793.1
}

def @func_4580() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %794 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %795 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
  %796 = %794.0;
  (%795, %796)
}

def @func_2265(%var_2249: Tensor[(9, 9, 11), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) {
  %797 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %798 = cast(%var_2249, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%797, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %802 = cast(%var_2249, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %803 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %804 = divide(%800, %801) /* ty=Tensor[(9, 9, 11), float32] */;
  %805 = log(%802) /* ty=Tensor[(9, 9, 11), float32] */;
  %806 = %803.0;
  (%804, %805, %806)
}

def @func_5348() -> Tensor[(960), float32] {
  %807 = @func_4000() /* ty=(Tensor[(960), float32],) */;
  %807.0
}

def @func_3695() -> (Tensor[(960), float32], Tensor[(960), float32]) {
  %808 = @func_2789() /* ty=(Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) */;
  %809 = @func_2760() /* ty=Tensor[(960), float32] */;
  %810 = %808.4;
  (%809, %810)
}

def @func_4842() -> (Tensor[(960), float32],) {
  %811 = @func_2760() /* ty=Tensor[(960), float32] */;
  (%811,)
}

def @func_2454(%var_2426: Tensor[(60, 36), float32], %var_2430: Tensor[(3), float64], %var_2431: Tensor[(243), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(180, 12), float32], Tensor[(60, 36), float32], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(243), float64], Tensor[(182), int16], Tensor[(180, 12), float32], int16, Tensor[(9, 9, 11), int32]) {
  %812 = cast(%var_2426, dtype="float32") /* ty=Tensor[(60, 36), float32] */;
  %813 = reshape(%812, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %814 = cast(%var_2430, dtype="float64") /* ty=Tensor[(3), float64] */;
  %815 = cast(%var_2431, dtype="float64") /* ty=Tensor[(243), float64] */;
  %816 = reshape(%814, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), float64] */;
  %817 = reshape(%815, newshape=[9, 9, 3]) /* ty=Tensor[(9, 9, 3), float64] */;
  %818 = @func_1928(%816, %817) /* ty=(Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) */;
  %819 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %820 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %821 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %822 = @func_2076(%813) /* ty=Tensor[(180, 12), float32] */;
  %823 = %818.2;
  %824 = @func_2188() /* ty=Tensor[(182), int16] */;
  %825 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
  %826 = %819.3;
  %827 = %820.0;
  (%821, %822, %var_2426, %823, %var_2430, %var_2431, %824, %825, %826, %827)
}

def @func_5792(%var_5729: Tensor[(135), float64], %var_5765: Tensor[(990), uint8], %var_5776: Tensor[(10, 1, 15), int16]) -> (Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2, 1080), float64], Tensor[(891), float32], Tensor[(9, 9, 11), uint8], Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(9, 9, 11), float32], Tensor[(10, 1, 15), int8], Tensor[(14, 13, 1), float64]) {
  %828 = cast(%var_5729, dtype="float64") /* ty=Tensor[(135), float64] */;
  %829 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 1080), float64] */, dtype="float64") /* ty=Tensor[(2, 1080), float64] */;
  %830 = cast(meta[relay.Constant][47] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %831 = reshape(%828, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %832 = reshape(%829, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %833 = reshape(%830, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %834 = @func_1880(%831, %832, %833) /* ty=(Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) */;
  %835 = cast(meta[relay.Constant][47] /* ty=Tensor[(891), float32] */, dtype="float64") /* ty=Tensor[(891), float64] */;
  %836 = reshape(%835, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float64] */;
  %837 = cast(meta[relay.Constant][47] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %838 = reshape(%837, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %839 = @func_2265(%838) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) */;
  %840 = cast(%var_5765, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %841 = cast(%var_5765, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %842 = %834.7;
  %843 = cast(%842, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  %844 = reshape(%840, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %845 = reshape(%841, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %846 = reshape(%843, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
  %847 = @func_2712(%844, %845, %846) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
  %848 = cast(meta[relay.Constant][48] /* ty=int16 */, dtype="int8") /* ty=int8 */;
  %849 = cast(%var_5776, dtype="int8") /* ty=Tensor[(10, 1, 15), int8] */;
  %850 = cast(meta[relay.Constant][48] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %851 = @func_2188() /* ty=Tensor[(182), int16] */;
  %852 = cast(%851, dtype="int16") /* ty=Tensor[(182), int16] */;
  %853 = reshape(%850, newshape=[]) /* ty=int16 */;
  %854 = reshape(%852, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
  %855 = @func_1023(%853, %854) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
  %856 = %855.1;
  %857 = cast(%856, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %858 = @func_4929(%836) /* ty=Tensor[(9, 9, 11), uint8] */;
  %859 = %839.1;
  %860 = %847.1;
  %861 = @func_4276() /* ty=Tensor[(9, 9, 11), float32] */;
  %862 = add(%848, %849) /* ty=Tensor[(10, 1, 15), int8] */;
  %863 = atan(%857) /* ty=Tensor[(14, 13, 1), float64] */;
  (%851, %842, %var_5729, meta[relay.Constant][46] /* ty=Tensor[(2, 1080), float64] */, meta[relay.Constant][47] /* ty=Tensor[(891), float32] */, %858, %859, %860, %var_5765, %861, %862, %863)
}

def @func_6024() -> (Tensor[(9, 9, 11), float32], Tensor[(15, 9), float64]) {
  %864 = @func_5901() /* ty=(Tensor[(9, 9, 11), float64], Tensor[(960), float32]) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %867 = @func_4677() /* ty=(Tensor[(15, 9), float64],) */;
  %868 = sigmoid(%866) /* ty=Tensor[(9, 9, 11), float32] */;
  %869 = %867.0;
  (%868, %869)
}

def @func_2760() -> Tensor[(960), float32] {
  %870 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %870.3
}

def @func_3433(%var_3407: Tensor[(2160), bool]) -> (Tensor[(9, 9, 11), float32], Tensor[(1080, 2), bool], Tensor[(990), uint8], Tensor[(2160), bool], Tensor[(960), float32]) {
  %871 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %872 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), uint8] */, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %873 = cast(meta[relay.Constant][49] /* ty=Tensor[(990), uint8] */, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %874 = cast(%var_3407, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %875 = reshape(%872, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %876 = reshape(%873, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %877 = reshape(%874, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
  %878 = @func_2712(%875, %876, %877) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
  %879 = %871.1;
  %880 = %878.2;
  %881 = @func_2760() /* ty=Tensor[(960), float32] */;
  (%879, %880, meta[relay.Constant][49] /* ty=Tensor[(990), uint8] */, %var_3407, %881)
}

def @func_5069() -> Tensor[(180, 12), float32] {
  %882 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %882.1
}

def @func_5449() -> Tensor[(15, 9), float64] {
  @func_4159() /* ty=Tensor[(15, 9), float64] */
}

def @func_6267() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %883 = @func_4677() /* ty=(Tensor[(15, 9), float64],) */;
  %884 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %885 = %883.0;
  %886 = %884.0;
  (%885, %886)
}

def @func_7736(%var_7684: Tensor[(135), float64], %var_7685: Tensor[(2160), float64], %var_7698: Tensor[(891), float32]) -> (Tensor[(960), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(891), uint64], Tensor[(9, 9, 11), float32], Tensor[(960), float32]) {
  %887 = cast(%var_7684, dtype="float64") /* ty=Tensor[(135), float64] */;
  %888 = cast(%var_7685, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %889 = cast(meta[relay.Constant][50] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %890 = reshape(%887, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %891 = reshape(%888, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %892 = reshape(%889, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %893 = @func_1880(%890, %891, %892) /* ty=(Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) */;
  %894 = cast(%var_7698, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %895 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(891), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %896 = cast(meta[relay.Constant][50] /* ty=Tensor[(891), float32] */, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %898 = @func_7321() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %899 = @func_2760() /* ty=Tensor[(960), float32] */;
  %900 = %893.1;
  %901 = bitwise_and(%896, %897) /* ty=Tensor[(891), uint64] */;
  %902 = %898.0;
  %903 = @func_3986() /* ty=Tensor[(960), float32] */;
  (%899, %900, %var_7684, %var_7685, %901, %902, %903)
}

def @func_1370() -> (Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) {
  %904 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %905 = cast(meta[relay.Constant][51] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %906 = cast(meta[relay.Constant][52] /* ty=Tensor[(182), int16] */, dtype="int16") /* ty=Tensor[(182), int16] */;
  %907 = reshape(%905, newshape=[]) /* ty=int16 */;
  %908 = reshape(%906, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
  %909 = @func_1023(%907, %908) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
  %910 = %904.0;
  %911 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %912 = %909.1;
  (%910, %911, %912, meta[relay.Constant][51] /* ty=int16 */, meta[relay.Constant][52] /* ty=Tensor[(182), int16] */)
}

def @func_6512() -> Tensor[(180, 12), float32] {
  @func_2298() /* ty=Tensor[(180, 12), float32] */
}

def @func_3749() -> (Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) {
  %913 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %914 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %915 = %914.0;
  %916 = cast(%915, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %917 = %913.0;
  %918 = tan(%916) /* ty=Tensor[(9, 9, 11), float32] */;
  (%917, %918)
}

def @func_1023(%var_1007: int16, %var_1008: Tensor[(14, 13, 1), int16]) -> (Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) {
  %919 = cast(%var_1007, dtype="int16") /* ty=int16 */;
  %920 = cast(%var_1008, dtype="int16") /* ty=Tensor[(14, 13, 1), int16] */;
  %921 = cast(%var_1007, dtype="bool") /* ty=bool */;
  %922 = cast(%var_1008, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %923 = logical_xor(%919, %920) /* ty=Tensor[(14, 13, 1), int16] */;
  %924 = greater_equal(%921, %922) /* ty=Tensor[(14, 13, 1), bool] */;
  (%923, %924)
}

def @func_3241() -> (Tensor[(9, 9, 11), float32],) {
  %925 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %926 = %925.0;
  (%926,)
}

def @func_5901() -> (Tensor[(9, 9, 11), float64], Tensor[(960), float32]) {
  %927 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %928 = %927.0;
  %929 = cast(%928, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %930 = sqrt(%929) /* ty=Tensor[(9, 9, 11), float32] */;
  %931 = cast(%930, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %932 = @func_4842() /* ty=(Tensor[(960), float32],) */;
  %933 = acos(%931) /* ty=Tensor[(9, 9, 11), float64] */;
  %934 = %932.0;
  (%933, %934)
}

def @func_6120(%var_6111: Tensor[(99, 9), int32]) -> (Tensor[(15, 9), float64], Tensor[(15, 9), float64], Tensor[(99, 9), float32]) {
  %935 = cast(%var_6111, dtype="int32") /* ty=Tensor[(99, 9), int32] */;
  %936 = reshape(%935, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %937 = @func_6092(%936) /* ty=(Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) */;
  %938 = cast(%var_6111, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %939 = @func_4159() /* ty=Tensor[(15, 9), float64] */;
  %940 = %937.0;
  %941 = asinh(%938) /* ty=Tensor[(99, 9), float32] */;
  (%939, %940, %941)
}

def @func_3039(%var_3024: Tensor[(8, 5, 5), int16], %var_3025: Tensor[(8, 5, 5), int16]) -> (Tensor[(8, 5, 5), bool],) {
  %942 = cast(%var_3025, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
  %943 = shape_of(%var_3024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%var_3024, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %946 = not_equal(%944, %945) /* ty=Tensor[(8, 5, 5), bool] */;
  (%946,)
}

def @func_6235(%var_6196: Tensor[(891), int32]) -> (Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(1080, 2), float64], Tensor[(960), float32], Tensor[(891), float32], Tensor[(891), int32], Tensor[(9, 9, 11), uint8]) {
  %947 = @func_5398() /* ty=(Tensor[(15, 9), float64],) */;
  %948 = cast(meta[relay.Constant][53] /* ty=Tensor[(1080, 2), float64] */, dtype="float64") /* ty=Tensor[(1080, 2), float64] */;
  %949 = cast(meta[relay.Constant][54] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %950 = cast(meta[relay.Constant][53] /* ty=Tensor[(1080, 2), float64] */, dtype="float32") /* ty=Tensor[(1080, 2), float32] */;
  %951 = cast(meta[relay.Constant][53] /* ty=Tensor[(1080, 2), float64] */, dtype="float32") /* ty=Tensor[(1080, 2), float32] */;
  %952 = reshape(%948, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
  %953 = reshape(%949, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %954 = reshape(%950, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %955 = reshape(%951, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %956 = @func_1203(%952, %953, %954, %955) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
  %957 = cast(%var_6196, dtype="int32") /* ty=Tensor[(891), int32] */;
  %958 = reshape(%957, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %959 = @func_6092(%958) /* ty=(Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) */;
  %960 = cast(%var_6196, dtype="float64") /* ty=Tensor[(891), float64] */;
  %961 = reshape(%960, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float64] */;
  %962 = %947.0;
  %963 = %956.9;
  %964 = %959.1;
  %965 = @func_4929(%961) /* ty=Tensor[(9, 9, 11), uint8] */;
  (%962, %963, meta[relay.Constant][53] /* ty=Tensor[(1080, 2), float64] */, meta[relay.Constant][54] /* ty=Tensor[(960), float32] */, %964, %var_6196, %965)
}

def @func_1525() -> Tensor[(180, 12), float32] {
  %966 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %967 = %966.1;
  %968 = cast(%967, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %969 = atanh(%968) /* ty=Tensor[(180, 12), float64] */;
  %970 = cast(%969, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  sinh(%970) /* ty=Tensor[(180, 12), float32] */
}

def @func_2345() -> (Tensor[(15, 9), float64], Tensor[(180, 12), float32]) {
  %971 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
  %972 = %971.0;
  %973 = cast(%972, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %974 = acosh(%973) /* ty=Tensor[(180, 12), float32] */;
  %975 = cast(%974, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %976 = @func_2273() /* ty=Tensor[(15, 9), float64] */;
  %977 = exp(%975) /* ty=Tensor[(180, 12), float32] */;
  (%976, %977)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6961() -> (Tensor[(15, 9), float64], Tensor[(2, 80), int64]) {
  %5 = fn () -> (Tensor[(15, 9), float64], Tensor[(2, 80), int64]) {
    %0 = @func_4159() /* ty=Tensor[(15, 9), float64] */;
    %1 = cast(%0, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
    %2 = reshape(%1, newshape=[45, 3]) /* ty=Tensor[(45, 3), float64] */;
    %3 = @func_4777(%2) /* ty=(Tensor[(960), float32], Tensor[(182), int16], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(15, 16, 9), bool], Tensor[(45, 3), float64], Tensor[(135), float64], Tensor[(546, 2), float64], int64, Tensor[(2, 80), int64]) */;
    %4 = %3.10;
    (%0, %4)
  };
  %5() /* ty=(Tensor[(15, 9), float64], Tensor[(2, 80), int64]) */
}

def @func_7196() -> Tensor[(960), float32] {
  %7 = fn () -> Tensor[(960), float32] {
    %6 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
    %6.1
  };
  %7() /* ty=Tensor[(960), float32] */
}

def @func_2523(%var_2519: Tensor[(1, 135), float64], %var_2520: Tensor[(3, 1), float64], %var_2521: Tensor[(243), float64], %var_2522: Tensor[(6, 135), float64]) -> (Tensor[(180, 12), float32], Tensor[(2160), float64], Tensor[(60, 36), float32], Tensor[(3, 1), float64], Tensor[(243), float64], Tensor[(6, 135), int8]) {
  @func_2517(%var_2519, %var_2520, %var_2521, %var_2522) /* ty=(Tensor[(180, 12), float32], Tensor[(2160), float64], Tensor[(60, 36), float32], Tensor[(3, 1), float64], Tensor[(243), float64], Tensor[(6, 135), int8]) */
}

def @func_5566(%var_5563: Tensor[(9, 9, 11), float32], %var_5564: Tensor[(256), uint8], %var_5565: Tensor[(9, 9, 11), float32]) -> (Tensor[(9, 9, 11), int64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(256), uint8], Tensor[(9, 9, 11), float32]) {
  %29 = fn (%var_5519: Tensor[(9, 9, 11), float32], %var_5541: Tensor[(256), uint8], %var_5558: Tensor[(9, 9, 11), float32]) -> (Tensor[(9, 9, 11), int64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(256), uint8], Tensor[(9, 9, 11), float32]) {
    %8 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
    %9 = %8.0;
    %10 = cast(%var_5519, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
    %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%9, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %14 = cast(%var_5541, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %15 = cast(%var_5541, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %16 = cast(%9, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
    %17 = reshape(%14, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), uint8] */;
    %18 = reshape(%15, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), uint8] */;
    %19 = reshape(%16, newshape=[891, 1]) /* ty=Tensor[(891, 1), int32] */;
    %20 = @func_4519(%17, %18, %19) /* ty=(Tensor[(4, 8, 8), bool], Tensor[(180, 12), float32], Tensor[(15, 16, 9), bool], Tensor[(180, 12), bool], Tensor[(891, 960), uint8]) */;
    %21 = cast(%var_5558, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
    %22 = shape_of(%var_5519, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%var_5519, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %25 = bitwise_and(%12, %13) /* ty=Tensor[(9, 9, 11), int64] */;
    %26 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
    %27 = %20.2;
    %28 = maximum(%23, %24) /* ty=Tensor[(9, 9, 11), float32] */;
    (%25, %26, %27, %var_5541, %28)
  };
  %29(%var_5563, %var_5564, %var_5565) /* ty=(Tensor[(9, 9, 11), int64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(256), uint8], Tensor[(9, 9, 11), float32]) */
}

def @func_2760() -> Tensor[(960), float32] {
  %30 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %30.3
}

def @func_6881(%var_6879: Tensor[(7, 6, 6), float32]) -> (Tensor[(9, 9, 11), float64], Tensor[(7, 6, 6), bool]) {
  @func_6878(%var_6879) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(7, 6, 6), bool]) */
}

def @func_1738(%var_1643: Tensor[(135), float64], %var_1720: Tensor[(15, 16, 9), bool]) -> (Tensor[(135), float64], Tensor[(180, 12), uint64], Tensor[(15, 16, 9), bool], Tensor[(15, 16, 9), uint64]) {
  %31 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %32 = cast(%var_1643, dtype="float64") /* ty=Tensor[(135), float64] */;
  %33 = cast(%31, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %34 = reshape(%32, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %35 = reshape(%33, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %36 = @func_48(%34, %35) /* ty=Tensor[(15, 16, 9), bool] */;
  %37 = cast(%36, dtype="uint64") /* ty=Tensor[(15, 16, 9), uint64] */;
  %38 = shape_of(%31, dtype="int32") /* ty=Tensor[(2), int32] */;
  %39 = cast(%31, dtype="uint64") /* ty=Tensor[(180, 12), uint64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %41 = cast(%var_1643, dtype="float64") /* ty=Tensor[(135), float64] */;
  %42 = reshape(%41, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %43 = @func_1437(%42) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %44 = cast(%36, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %45 = sigmoid(%44) /* ty=Tensor[(15, 16, 9), float64] */;
  %46 = cast(%36, dtype="float32") /* ty=Tensor[(15, 16, 9), float32] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="float32") /* ty=Tensor[(15, 16, 9), float32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %50 = floor_divide(%48, %49) /* ty=Tensor[(15, 16, 9), float32] */;
  %51 = cast(%45, dtype="int64") /* ty=Tensor[(15, 16, 9), int64] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="int64") /* ty=Tensor[(15, 16, 9), int64] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %55 = minimum(%53, %54) /* ty=Tensor[(15, 16, 9), int64] */;
  %56 = cast(%55, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  %57 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%45, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %60 = not_equal(%58, %59) /* ty=Tensor[(15, 16, 9), bool] */;
  %61 = cast(%var_1720, dtype="uint64") /* ty=Tensor[(15, 16, 9), uint64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="uint64") /* ty=Tensor[(15, 16, 9), uint64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %65 = bitwise_and(%39, %40) /* ty=Tensor[(180, 12), uint64] */;
  %66 = %43.2;
  %67 = subtract(%63, %64) /* ty=Tensor[(15, 16, 9), uint64] */;
  (%var_1643, %65, %66, %67)
}

def @func_3163() -> (Tensor[(9, 9, 11), float32],) {
  %68 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  (%68,)
}

def @func_6123(%var_6121: Tensor[(99, 9), int32]) -> (Tensor[(15, 9), float64], Tensor[(15, 9), float64], Tensor[(99, 9), float32]) {
  @func_6120(%var_6121) /* ty=(Tensor[(15, 9), float64], Tensor[(15, 9), float64], Tensor[(99, 9), float32]) */
}

def @func_6313() -> (Tensor[(160), int64], Tensor[(15, 9), float64]) {
  %69 = @func_3859() /* ty=(Tensor[(160), int64],) */;
  %70 = %69.0;
  %71 = @func_4056() /* ty=Tensor[(15, 9), float64] */;
  (%70, %71)
}

def @func_2454(%var_2426: Tensor[(60, 36), float32], %var_2430: Tensor[(3), float64], %var_2431: Tensor[(243), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(180, 12), float32], Tensor[(60, 36), float32], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(243), float64], Tensor[(182), int16], Tensor[(180, 12), float32], int16, Tensor[(9, 9, 11), int32]) {
  %72 = cast(%var_2426, dtype="float32") /* ty=Tensor[(60, 36), float32] */;
  %73 = reshape(%72, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %74 = cast(%var_2430, dtype="float64") /* ty=Tensor[(3), float64] */;
  %75 = cast(%var_2431, dtype="float64") /* ty=Tensor[(243), float64] */;
  %76 = reshape(%74, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), float64] */;
  %77 = reshape(%75, newshape=[9, 9, 3]) /* ty=Tensor[(9, 9, 3), float64] */;
  %78 = @func_1928(%76, %77) /* ty=(Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) */;
  %79 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %80 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %81 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %82 = @func_2076(%73) /* ty=Tensor[(180, 12), float32] */;
  %83 = %78.2;
  %84 = @func_2188() /* ty=Tensor[(182), int16] */;
  %85 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
  %86 = %79.3;
  %87 = %80.0;
  (%81, %82, %var_2426, %83, %var_2430, %var_2431, %84, %85, %86, %87)
}

def @func_3751() -> (Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) {
  @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */
}

def @func_2929() -> (Tensor[(15, 9), float64],) {
  %89 = fn () -> (Tensor[(15, 9), float64],) {
    %88 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
    (%88,)
  };
  %89() /* ty=(Tensor[(15, 9), float64],) */
}

def @func_372(%var_344: Tensor[(10, 12, 8), float32]) -> (Tensor[(10, 12, 8), uint32],) {
  %90 = cast(%var_344, dtype="float32") /* ty=Tensor[(10, 12, 8), float32] */;
  %91 = log2(%90) /* ty=Tensor[(10, 12, 8), float32] */;
  %92 = cast(%var_344, dtype="uint32") /* ty=Tensor[(10, 12, 8), uint32] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="uint32") /* ty=Tensor[(10, 12, 8), uint32] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %96 = right_shift(%94, %95) /* ty=Tensor[(10, 12, 8), uint32] */;
  (%96,)
}

def @func_7741(%var_7738: Tensor[(135), float64], %var_7739: Tensor[(2160), float64], %var_7740: Tensor[(891), float32]) -> (Tensor[(960), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(891), uint64], Tensor[(9, 9, 11), float32], Tensor[(960), float32]) {
  @func_7736(%var_7738, %var_7739, %var_7740) /* ty=(Tensor[(960), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(891), uint64], Tensor[(9, 9, 11), float32], Tensor[(960), float32]) */
}

def @func_6237(%var_6236: Tensor[(891), int32]) -> (Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(1080, 2), float64], Tensor[(960), float32], Tensor[(891), float32], Tensor[(891), int32], Tensor[(9, 9, 11), uint8]) {
  %116 = fn (%var_6196: Tensor[(891), int32]) -> (Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(1080, 2), float64], Tensor[(960), float32], Tensor[(891), float32], Tensor[(891), int32], Tensor[(9, 9, 11), uint8]) {
    %97 = @func_5398() /* ty=(Tensor[(15, 9), float64],) */;
    %98 = cast(meta[relay.Constant][0] /* ty=Tensor[(1080, 2), float64] */, dtype="float64") /* ty=Tensor[(1080, 2), float64] */;
    %99 = cast(meta[relay.Constant][1] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %100 = cast(meta[relay.Constant][0] /* ty=Tensor[(1080, 2), float64] */, dtype="float32") /* ty=Tensor[(1080, 2), float32] */;
    %101 = cast(meta[relay.Constant][0] /* ty=Tensor[(1080, 2), float64] */, dtype="float32") /* ty=Tensor[(1080, 2), float32] */;
    %102 = reshape(%98, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
    %103 = reshape(%99, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
    %104 = reshape(%100, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %105 = reshape(%101, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %106 = @func_1203(%102, %103, %104, %105) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
    %107 = cast(%var_6196, dtype="int32") /* ty=Tensor[(891), int32] */;
    %108 = reshape(%107, newshape=[891]) /* ty=Tensor[(891), int32] */;
    %109 = @func_6092(%108) /* ty=(Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) */;
    %110 = cast(%var_6196, dtype="float64") /* ty=Tensor[(891), float64] */;
    %111 = reshape(%110, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float64] */;
    %112 = %97.0;
    %113 = %106.9;
    %114 = %109.1;
    %115 = @func_4929(%111) /* ty=Tensor[(9, 9, 11), uint8] */;
    (%112, %113, meta[relay.Constant][0] /* ty=Tensor[(1080, 2), float64] */, meta[relay.Constant][1] /* ty=Tensor[(960), float32] */, %114, %var_6196, %115)
  };
  %116(%var_6236) /* ty=(Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(1080, 2), float64], Tensor[(960), float32], Tensor[(891), float32], Tensor[(891), int32], Tensor[(9, 9, 11), uint8]) */
}

def @func_3968(%var_3965: Tensor[(891), int32], %var_3966: Tensor[(960), float32], %var_3967: Tensor[(1092), float64]) -> (Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) {
  %135 = fn (%var_3918: Tensor[(891), int32], %var_3919: Tensor[(960), float32], %var_3957: Tensor[(1092), float64]) -> (Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) {
    %117 = cast(%var_3918, dtype="int32") /* ty=Tensor[(891), int32] */;
    %118 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
    %119 = cast(%118, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
    %120 = cast(%var_3919, dtype="float32") /* ty=Tensor[(960), float32] */;
    %121 = reshape(%117, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), int32] */;
    %122 = reshape(%119, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
    %123 = reshape(%120, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %124 = @func_2659(%121, %122, %123) /* ty=(Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
    %125 = cast(%var_3918, dtype="float32") /* ty=Tensor[(891), float32] */;
    %126 = cast(%118, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    %127 = reshape(%126, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %128 = @func_3110(%127) /* ty=(Tensor[(180, 12), bool],) */;
    %129 = cast(%var_3957, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %130 = reshape(%129, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
    %131 = %124.0;
    %132 = acos(%125) /* ty=Tensor[(891), float32] */;
    %133 = %128.0;
    %134 = @func_737(%130) /* ty=Tensor[(13, 6, 14), float64] */;
    (%118, %131, %var_3919, %132, %133, %134, %var_3957)
  };
  %135(%var_3965, %var_3966, %var_3967) /* ty=(Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) */
}

def @func_6989() -> Tensor[(180, 12), float32] {
  @func_6987() /* ty=Tensor[(180, 12), float32] */
}

def @func_3042(%var_3040: Tensor[(8, 5, 5), int16], %var_3041: Tensor[(8, 5, 5), int16]) -> (Tensor[(8, 5, 5), bool],) {
  %141 = fn (%var_3024: Tensor[(8, 5, 5), int16], %var_3025: Tensor[(8, 5, 5), int16]) -> (Tensor[(8, 5, 5), bool],) {
    %136 = cast(%var_3025, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
    %137 = shape_of(%var_3024, dtype="int32") /* ty=Tensor[(3), int32] */;
    %138 = cast(%var_3024, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %140 = not_equal(%138, %139) /* ty=Tensor[(8, 5, 5), bool] */;
    (%140,)
  };
  %141(%var_3040, %var_3041) /* ty=(Tensor[(8, 5, 5), bool],) */
}

def @func_3861() -> (Tensor[(160), int64],) {
  @func_3859() /* ty=(Tensor[(160), int64],) */
}

def @func_2517(%var_2497: Tensor[(1, 135), float64], %var_2504: Tensor[(3, 1), float64], %var_2505: Tensor[(243), float64], %var_2509: Tensor[(6, 135), float64]) -> (Tensor[(180, 12), float32], Tensor[(2160), float64], Tensor[(60, 36), float32], Tensor[(3, 1), float64], Tensor[(243), float64], Tensor[(6, 135), int8]) {
  %142 = cast(%var_2497, dtype="float64") /* ty=Tensor[(1, 135), float64] */;
  %143 = reshape(%142, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %144 = @func_1437(%143) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %145 = %144.1;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %147 = cast(%var_2504, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
  %148 = cast(%var_2505, dtype="float64") /* ty=Tensor[(243), float64] */;
  %149 = reshape(%146, newshape=[60, 36]) /* ty=Tensor[(60, 36), float32] */;
  %150 = reshape(%147, newshape=[3]) /* ty=Tensor[(3), float64] */;
  %151 = reshape(%148, newshape=[243]) /* ty=Tensor[(243), float64] */;
  %152 = @func_2454(%149, %150, %151) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), float32], Tensor[(60, 36), float32], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(243), float64], Tensor[(182), int16], Tensor[(180, 12), float32], int16, Tensor[(9, 9, 11), int32]) */;
  %153 = cast(%var_2497, dtype="int8") /* ty=Tensor[(1, 135), int8] */;
  %154 = cast(%var_2509, dtype="int8") /* ty=Tensor[(6, 135), int8] */;
  %155 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
  %156 = %152.2;
  %157 = minimum(%153, %154) /* ty=Tensor[(6, 135), int8] */;
  (%155, %145, %156, %var_2504, %var_2505, %157)
}

def @func_5934(%var_5932: Tensor[(13, 14, 16), int64], %var_5933: Tensor[(13, 14, 16), int64]) -> (Tensor[(13, 14, 16), bool], Tensor[(13, 14, 16), float64]) {
  @func_5930(%var_5932, %var_5933) /* ty=(Tensor[(13, 14, 16), bool], Tensor[(13, 14, 16), float64]) */
}

def @func_4134() -> (Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) {
  @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */
}

def @func_2230() -> Tensor[(180, 12), float32] {
  %158 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
  %158.0
}

def @func_3018() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %162 = fn () -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
    %159 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
    %160 = %159.0;
    %161 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
    (%160, %161)
  };
  %162() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */
}

def @func_6430() -> (Tensor[(180, 12), float64], Tensor[(9, 9, 11), float32]) {
  %163 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %164 = %163.1;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %166 = @func_6366() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %167 = log(%165) /* ty=Tensor[(180, 12), float64] */;
  %168 = %166.0;
  (%167, %168)
}

def @func_6680() -> Tensor[(9, 9, 11), float64] {
  @func_6678() /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_2789() -> (Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) {
  %169 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %170 = cast(meta[relay.Constant][2] /* ty=Tensor[(891), int32] */, dtype="int32") /* ty=Tensor[(891), int32] */;
  %171 = @func_2230() /* ty=Tensor[(180, 12), float32] */;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %173 = cast(meta[relay.Constant][3] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %174 = reshape(%170, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), int32] */;
  %175 = reshape(%172, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %176 = reshape(%173, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %177 = @func_2659(%174, %175, %176) /* ty=(Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %178 = %169.2;
  %179 = %177.3;
  (%178, %171, %179, meta[relay.Constant][2] /* ty=Tensor[(891), int32] */, meta[relay.Constant][3] /* ty=Tensor[(960), float32] */)
}

def @func_7515() -> (Tensor[(9, 9, 11), float32], Tensor[(960), float32], Tensor[(182), int16], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) {
  %180 = @func_4580() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
  %181 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %182 = cast(meta[relay.Constant][4] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %183 = reshape(%182, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %184 = %180.1;
  %185 = %181.3;
  %186 = @func_2188() /* ty=Tensor[(182), int16] */;
  %187 = @func_737(%183) /* ty=Tensor[(13, 6, 14), float64] */;
  (%184, %185, %186, %187, meta[relay.Constant][4] /* ty=Tensor[(1092), float64] */)
}

def @func_4115(%var_4113: float64, %var_4114: Tensor[(6, 4, 11), float64]) -> Tensor[(6, 4, 11), bool] {
  %190 = fn (%var_4103: float64, %var_4104: Tensor[(6, 4, 11), float64]) -> Tensor[(6, 4, 11), bool] {
    %188 = cast(%var_4103, dtype="bool") /* ty=bool */;
    %189 = cast(%var_4104, dtype="bool") /* ty=Tensor[(6, 4, 11), bool] */;
    greater(%188, %189) /* ty=Tensor[(6, 4, 11), bool] */
  };
  %190(%var_4113, %var_4114) /* ty=Tensor[(6, 4, 11), bool] */
}

def @func_5440() -> (Tensor[(960), float32], Tensor[(9, 9, 11), int32]) {
  @func_5438() /* ty=(Tensor[(960), float32], Tensor[(9, 9, 11), int32]) */
}

def @func_4523(%var_4520: Tensor[(4, 8, 8), uint8], %var_4521: Tensor[(4, 8, 8), uint8], %var_4522: Tensor[(891, 1), int32]) -> (Tensor[(4, 8, 8), bool], Tensor[(180, 12), float32], Tensor[(15, 16, 9), bool], Tensor[(180, 12), bool], Tensor[(891, 960), uint8]) {
  %212 = fn (%var_4477: Tensor[(4, 8, 8), uint8], %var_4478: Tensor[(4, 8, 8), uint8], %var_4498: Tensor[(891, 1), int32]) -> (Tensor[(4, 8, 8), bool], Tensor[(180, 12), float32], Tensor[(15, 16, 9), bool], Tensor[(180, 12), bool], Tensor[(891, 960), uint8]) {
    %191 = cast(%var_4478, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
    %192 = shape_of(%var_4477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%var_4477, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %195 = cast(%var_4498, dtype="int32") /* ty=Tensor[(891, 1), int32] */;
    %196 = @func_2230() /* ty=Tensor[(180, 12), float32] */;
    %197 = cast(%196, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
    %198 = cast(meta[relay.Constant][5] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %199 = reshape(%195, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), int32] */;
    %200 = reshape(%197, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
    %201 = reshape(%198, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %202 = @func_2659(%199, %200, %201) /* ty=(Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
    %203 = %202.1;
    %204 = cast(%203, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
    %205 = reshape(%204, newshape=[180, 12]) /* ty=Tensor[(180, 12), bool] */;
    %206 = @func_2545(%205) /* ty=(Tensor[(180, 12), bool],) */;
    %207 = cast(meta[relay.Constant][5] /* ty=Tensor[(960), float32] */, dtype="uint8") /* ty=Tensor[(960), uint8] */;
    %208 = cast(%var_4498, dtype="uint8") /* ty=Tensor[(891, 1), uint8] */;
    %209 = greater_equal(%193, %194) /* ty=Tensor[(4, 8, 8), bool] */;
    %210 = %206.0;
    %211 = bitwise_xor(%207, %208) /* ty=Tensor[(891, 960), uint8] */;
    (%209, %196, %203, %210, %211)
  };
  %212(%var_4520, %var_4521, %var_4522) /* ty=(Tensor[(4, 8, 8), bool], Tensor[(180, 12), float32], Tensor[(15, 16, 9), bool], Tensor[(180, 12), bool], Tensor[(891, 960), uint8]) */
}

def @func_6173(%var_6171: Tensor[(11, 3, 7), float64]) -> (Tensor[(11, 3, 7), uint16],) {
  @func_6170(%var_6171) /* ty=(Tensor[(11, 3, 7), uint16],) */
}

def @func_2459(%var_2456: Tensor[(60, 36), float32], %var_2457: Tensor[(3), float64], %var_2458: Tensor[(243), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(180, 12), float32], Tensor[(60, 36), float32], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(243), float64], Tensor[(182), int16], Tensor[(180, 12), float32], int16, Tensor[(9, 9, 11), int32]) {
  @func_2454(%var_2456, %var_2457, %var_2458) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), float32], Tensor[(60, 36), float32], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(243), float64], Tensor[(182), int16], Tensor[(180, 12), float32], int16, Tensor[(9, 9, 11), int32]) */
}

def @func_4132() -> (Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) {
  %213 = @func_3510() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(180, 12), float32]) */;
  %214 = cast(meta[relay.Constant][6] /* ty=Tensor[(2400), uint32] */, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
  %215 = cast(meta[relay.Constant][6] /* ty=Tensor[(2400), uint32] */, dtype="uint32") /* ty=Tensor[(2400), uint32] */;
  %216 = reshape(%214, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
  %217 = reshape(%215, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), uint32] */;
  %218 = @func_3578(%216, %217) /* ty=(Tensor[(15, 10, 16), bool], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(182), int16]) */;
  %219 = %213.1;
  %220 = %218.3;
  (%219, %220, meta[relay.Constant][6] /* ty=Tensor[(2400), uint32] */)
}

def @func_4996() -> (Tensor[(960), float32], Tensor[(15, 9), float64]) {
  @func_4994() /* ty=(Tensor[(960), float32], Tensor[(15, 9), float64]) */
}

def @func_1312(%var_1310: Tensor[(60, 16), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) {
  @func_1309(%var_1310) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) */
}

def @func_6326() -> (Tensor[(9, 9, 11), float32],) {
  %221 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
  %222 = %221.1;
  (%222,)
}

def @func_6492() -> (Tensor[(182), int16],) {
  %223 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %224 = %223.1;
  (%224,)
}

def @func_6576(%var_6535: Tensor[(8, 1, 10), int8], %var_6573: Tensor[(990), uint8]) -> (Tensor[(8, 8, 10), int8], Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(2400), uint32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) {
  %225 = cast(%var_6535, dtype="int8") /* ty=Tensor[(8, 1, 10), int8] */;
  %226 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 8, 10), int8] */, dtype="int8") /* ty=Tensor[(8, 8, 10), int8] */;
  %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %228 = reshape(%227, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %229 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %230 = cast(%var_6573, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %231 = cast(%var_6573, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %232 = cast(meta[relay.Constant][9] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %233 = reshape(%230, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %234 = reshape(%231, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %235 = reshape(%232, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
  %236 = @func_2712(%233, %234, %235) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
  %237 = subtract(%225, %226) /* ty=Tensor[(8, 8, 10), int8] */;
  %238 = @func_737(%228) /* ty=Tensor[(13, 6, 14), float64] */;
  %239 = %229.2;
  %240 = %236.1;
  (%237, %238, meta[relay.Constant][8] /* ty=Tensor[(1092), float64] */, %239, %240, %var_6573, meta[relay.Constant][9] /* ty=Tensor[(2160), bool] */)
}

def @func_6366() -> (Tensor[(9, 9, 11), float32],) {
  %241 = @func_6326() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %242 = %241.0;
  (%242,)
}

def @func_1507() -> (Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) {
  @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */
}

def @func_5399() -> (Tensor[(15, 9), float64],) {
  %245 = fn () -> (Tensor[(15, 9), float64],) {
    %243 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
    %244 = %243.0;
    (%244,)
  };
  %245() /* ty=(Tensor[(15, 9), float64],) */
}

def @func_7288() -> Tensor[(960), float32] {
  @func_7286() /* ty=Tensor[(960), float32] */
}

def @func_6751(%var_6738: Tensor[(180, 12), float32]) -> Tensor[(180, 12), float64] {
  %246 = @func_6708() /* ty=Tensor[(180, 12), float32] */;
  %247 = cast(%var_6738, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(2), int32] */;
  %249 = cast(%246, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %251 = less_equal(%249, %250) /* ty=Tensor[(180, 12), bool] */;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %253 = shape_of(%246, dtype="int32") /* ty=Tensor[(2), int32] */;
  %254 = cast(%246, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_mod(%254, %255) /* ty=Tensor[(180, 12), float64] */
}

def @func_1526() -> Tensor[(180, 12), float32] {
  %261 = fn () -> Tensor[(180, 12), float32] {
    %256 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
    %257 = %256.1;
    %258 = cast(%257, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
    %259 = atanh(%258) /* ty=Tensor[(180, 12), float64] */;
    %260 = cast(%259, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    sinh(%260) /* ty=Tensor[(180, 12), float32] */
  };
  %261() /* ty=Tensor[(180, 12), float32] */
}

def @func_2188() -> Tensor[(182), int16] {
  %262 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %262.4
}

def @func_6709() -> Tensor[(180, 12), float32] {
  %263 = fn () -> Tensor[(180, 12), float32] {
    @func_1525() /* ty=Tensor[(180, 12), float32] */
  };
  %263() /* ty=Tensor[(180, 12), float32] */
}

def @func_4043(%var_4040: Tensor[(10, 4, 3), float64]) -> Tensor[(10, 4, 3), float64] {
  %264 = cast(%var_4040, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
  asinh(%264) /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_2265(%var_2249: Tensor[(9, 9, 11), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) {
  %265 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %266 = cast(%var_2249, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %270 = cast(%var_2249, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %271 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %272 = divide(%268, %269) /* ty=Tensor[(9, 9, 11), float32] */;
  %273 = log(%270) /* ty=Tensor[(9, 9, 11), float32] */;
  %274 = %271.0;
  (%272, %273, %274)
}

def @func_3436(%var_3434: Tensor[(2160), bool]) -> (Tensor[(9, 9, 11), float32], Tensor[(1080, 2), bool], Tensor[(990), uint8], Tensor[(2160), bool], Tensor[(960), float32]) {
  @func_3433(%var_3434) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(1080, 2), bool], Tensor[(990), uint8], Tensor[(2160), bool], Tensor[(960), float32]) */
}

def @func_4215(%var_4213: Tensor[(960, 16), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 9), float64], Tensor[(960, 16), float32]) {
  @func_4212(%var_4213) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 9), float64], Tensor[(960, 16), float32]) */
}

def @func_2273() -> Tensor[(15, 9), float64] {
  @func_1809() /* ty=Tensor[(15, 9), float64] */
}

def @func_4777(%var_4751: Tensor[(45, 3), float64]) -> (Tensor[(960), float32], Tensor[(182), int16], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(15, 16, 9), bool], Tensor[(45, 3), float64], Tensor[(135), float64], Tensor[(546, 2), float64], int64, Tensor[(2, 80), int64]) {
  %275 = @func_4000() /* ty=(Tensor[(960), float32],) */;
  %276 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %277 = @func_2789() /* ty=(Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) */;
  %278 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %279 = cast(%var_4751, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %280 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %282 = reshape(%279, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %283 = reshape(%281, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %284 = cast(%var_4751, dtype="float64") /* ty=Tensor[(45, 3), float64] */;
  %285 = cast(%280, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %286 = reshape(%284, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %287 = reshape(%285, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), bool] */;
  %288 = @func_1738(%286, %287) /* ty=(Tensor[(135), float64], Tensor[(180, 12), uint64], Tensor[(15, 16, 9), bool], Tensor[(15, 16, 9), uint64]) */;
  %289 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %290 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 80), int64] */, dtype="int64") /* ty=Tensor[(2, 80), int64] */;
  %291 = reshape(%289, newshape=[]) /* ty=int64 */;
  %292 = reshape(%290, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int64] */;
  %293 = @func_1067(%291, %292) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) */;
  %294 = %275.0;
  %295 = %276.1;
  %296 = %277.4;
  %297 = %278.0;
  %298 = @func_48(%282, %283) /* ty=Tensor[(15, 16, 9), bool] */;
  %299 = %288.0;
  %300 = %293.2;
  (%294, %295, %280, %296, %297, %298, %var_4751, %299, %300, -4 /* ty=int64 */, meta[relay.Constant][10] /* ty=Tensor[(2, 80), int64] */)
}

def @func_3859() -> (Tensor[(160), int64],) {
  %301 = @func_2390() /* ty=(Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) */;
  %302 = %301.3;
  (%302,)
}

def @func_6432() -> (Tensor[(180, 12), float64], Tensor[(9, 9, 11), float32]) {
  @func_6430() /* ty=(Tensor[(180, 12), float64], Tensor[(9, 9, 11), float32]) */
}

def @func_7562() -> (Tensor[(15, 9), float64],) {
  %305 = fn () -> (Tensor[(15, 9), float64],) {
    %303 = @func_5398() /* ty=(Tensor[(15, 9), float64],) */;
    %304 = %303.0;
    (%304,)
  };
  %305() /* ty=(Tensor[(15, 9), float64],) */
}

def @func_2299() -> Tensor[(180, 12), float32] {
  %307 = fn () -> Tensor[(180, 12), float32] {
    %306 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
    %306.0
  };
  %307() /* ty=Tensor[(180, 12), float32] */
}

def @func_1067(%var_1057: int64, %var_1058: Tensor[(8, 4, 5), int64]) -> (Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) {
  %308 = cast(%var_1057, dtype="bool") /* ty=bool */;
  %309 = cast(%var_1058, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %310 = cast(meta[relay.Constant][11] /* ty=Tensor[(546, 2), float64] */, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %311 = reshape(%310, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %312 = greater(%308, %309) /* ty=Tensor[(8, 4, 5), bool] */;
  %313 = @func_737(%311) /* ty=Tensor[(13, 6, 14), float64] */;
  (%312, %313, meta[relay.Constant][11] /* ty=Tensor[(546, 2), float64] */)
}

def @func_4001() -> (Tensor[(960), float32],) {
  %315 = fn () -> (Tensor[(960), float32],) {
    %314 = @func_3986() /* ty=Tensor[(960), float32] */;
    (%314,)
  };
  %315() /* ty=(Tensor[(960), float32],) */
}

def @func_4842() -> (Tensor[(960), float32],) {
  %316 = @func_2760() /* ty=Tensor[(960), float32] */;
  (%316,)
}

def @func_1309(%var_1291: Tensor[(60, 16), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) {
  %317 = cast(meta[relay.Constant][12] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %318 = reshape(%317, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float32] */;
  %319 = @func_879(%318) /* ty=(Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) */;
  %320 = cast(%var_1291, dtype="float32") /* ty=Tensor[(60, 16), float32] */;
  %321 = reshape(%320, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
  %322 = @func_372(%321) /* ty=(Tensor[(10, 12, 8), uint32],) */;
  %323 = cast(meta[relay.Constant][13] /* ty=Tensor[(60, 16), float32] */, dtype="bool") /* ty=Tensor[(60, 16), bool] */;
  %324 = shape_of(%var_1291, dtype="int32") /* ty=Tensor[(2), int32] */;
  %325 = cast(%var_1291, dtype="bool") /* ty=Tensor[(60, 16), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %327 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %328 = %319.3;
  %329 = %322.0;
  %330 = greater(%325, %326) /* ty=Tensor[(60, 16), bool] */;
  (%327, %328, meta[relay.Constant][12] /* ty=Tensor[(156), float32] */, %329, %330)
}

def @func_2275() -> Tensor[(15, 9), float64] {
  @func_2273() /* ty=Tensor[(15, 9), float64] */
}

def @func_6315() -> (Tensor[(160), int64], Tensor[(15, 9), float64]) {
  @func_6313() /* ty=(Tensor[(160), int64], Tensor[(15, 9), float64]) */
}

def @func_2036(%var_2034: Tensor[(135), float64], %var_2035: Tensor[(9, 9, 11), int32]) -> (Tensor[(13, ?, 12), float32], Tensor[(135), uint16], Tensor[(9, 9, 11), bool]) {
  %347 = fn (%var_2006: Tensor[(135), float64], %var_2022: Tensor[(9, 9, 11), int32]) -> (Tensor[(13, ?, 12), float32], Tensor[(135), uint16], Tensor[(9, 9, 11), bool]) {
    %331 = cast(%var_2006, dtype="float64") /* ty=Tensor[(135), float64] */;
    %332 = reshape(%331, newshape=[135]) /* ty=Tensor[(135), float64] */;
    %333 = @func_1437(%332) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
    %334 = cast(meta[relay.Constant][14] /* ty=Tensor[(135), float64] */, dtype="uint16") /* ty=Tensor[(135), uint16] */;
    %335 = shape_of(%var_2006, dtype="int32") /* ty=Tensor[(1), int32] */;
    %336 = cast(%var_2006, dtype="uint16") /* ty=Tensor[(135), uint16] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %338 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
    %339 = %338.0;
    %340 = cast(%var_2022, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %344 = %333.4;
    %345 = bitwise_xor(%336, %337) /* ty=Tensor[(135), uint16] */;
    %346 = less_equal(%342, %343) /* ty=Tensor[(9, 9, 11), bool] */;
    (%344, %345, %346)
  };
  %347(%var_2034, %var_2035) /* ty=(Tensor[(13, ?, 12), float32], Tensor[(135), uint16], Tensor[(9, 9, 11), bool]) */
}

def @func_3667(%var_3666: Tensor[(990), uint8]) -> (Tensor[(15, 9), float64], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) {
  %358 = fn (%var_3640: Tensor[(990), uint8]) -> (Tensor[(15, 9), float64], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) {
    %348 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
    %349 = cast(%var_3640, dtype="uint8") /* ty=Tensor[(990), uint8] */;
    %350 = cast(%var_3640, dtype="uint8") /* ty=Tensor[(990), uint8] */;
    %351 = cast(meta[relay.Constant][15] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
    %352 = reshape(%349, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
    %353 = reshape(%350, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
    %354 = reshape(%351, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
    %355 = @func_2712(%352, %353, %354) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
    %356 = %348.0;
    %357 = %355.1;
    (%356, %357, %var_3640, meta[relay.Constant][15] /* ty=Tensor[(2160), bool] */)
  };
  %358(%var_3666) /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) */
}

def @func_4276() -> Tensor[(9, 9, 11), float32] {
  @func_1253() /* ty=Tensor[(9, 9, 11), float32] */
}

def @func_1880(%var_1832: Tensor[(135), float64], %var_1833: Tensor[(2160), float64], %var_1858: Tensor[(9, 9, 11), float32]) -> (Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) {
  %359 = cast(%var_1832, dtype="float64") /* ty=Tensor[(135), float64] */;
  %360 = cast(%var_1833, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %361 = reshape(%359, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %362 = reshape(%360, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %363 = cast(%var_1832, dtype="float64") /* ty=Tensor[(135), float64] */;
  %364 = reshape(%363, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %365 = @func_1437(%364) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
  %366 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %367 = cast(%var_1858, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %371 = cast(%var_1832, dtype="float64") /* ty=Tensor[(135), float64] */;
  %372 = @func_48(%361, %362) /* ty=Tensor[(15, 16, 9), bool] */;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %374 = reshape(%371, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %375 = reshape(%373, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %376 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
  %377 = %365.4;
  %378 = power(%369, %370) /* ty=Tensor[(9, 9, 11), float64] */;
  %379 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
  %380 = @func_48(%374, %375) /* ty=Tensor[(15, 16, 9), bool] */;
  (%372, %var_1832, %var_1833, %376, %377, %378, %379, %380)
}

def @func_5449() -> Tensor[(15, 9), float64] {
  @func_4159() /* ty=Tensor[(15, 9), float64] */
}

def @func_879(%var_859: Tensor[(13, 1, 12), float32]) -> (Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) {
  %381 = cast(%var_859, dtype="float32") /* ty=Tensor[(13, 1, 12), float32] */;
  %382 = rsqrt(%381) /* ty=Tensor[(13, 1, 12), float32] */;
  %383 = cast(%382, dtype="uint32") /* ty=Tensor[(13, 1, 12), uint32] */;
  %384 = shape_of(%var_859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_859, dtype="uint32") /* ty=Tensor[(13, 1, 12), uint32] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %387 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
  %388 = cast(meta[relay.Constant][17] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %389 = reshape(%387, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %390 = reshape(%388, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %391 = bitwise_xor(%385, %386) /* ty=Tensor[(13, ?, 12), uint32] */;
  %392 = @func_48(%389, %390) /* ty=Tensor[(15, 16, 9), bool] */;
  (%391, %392, meta[relay.Constant][16] /* ty=Tensor[(15, 9), float64] */, meta[relay.Constant][17] /* ty=Tensor[(2160), float64] */)
}

def @func_2545(%var_2539: Tensor[(180, 12), bool]) -> (Tensor[(180, 12), bool],) {
  %393 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %394 = %393.1;
  %395 = cast(%var_2539, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(2), int32] */;
  %397 = cast(%394, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %399 = greater(%397, %398) /* ty=Tensor[(180, 12), bool] */;
  (%399,)
}

def @func_2712(%var_2683: Tensor[(11, 10, 9), uint8], %var_2684: Tensor[(11, 10, 9), uint8], %var_2697: Tensor[(1080, 2), bool]) -> (Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) {
  %400 = cast(%var_2684, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
  %401 = shape_of(%var_2683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%var_2683, dtype="uint8") /* ty=Tensor[(11, 10, 9), uint8] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %404 = subtract(%402, %403) /* ty=Tensor[(11, 10, 9), uint8] */;
  %405 = cast(%var_2683, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = cast(%var_2697, dtype="bool") /* ty=Tensor[(1080, 2), bool] */;
  %410 = reshape(%409, newshape=[180, 12]) /* ty=Tensor[(180, 12), bool] */;
  %411 = @func_2545(%410) /* ty=(Tensor[(180, 12), bool],) */;
  %412 = logical_or(%407, %408) /* ty=Tensor[(11, 10, 9), bool] */;
  %413 = %411.0;
  (%412, %413, %var_2697)
}

def @func_6878(%var_6843: Tensor[(7, 6, 6), float32]) -> (Tensor[(9, 9, 11), float64], Tensor[(7, 6, 6), bool]) {
  %414 = cast(%var_6843, dtype="float32") /* ty=Tensor[(7, 6, 6), float32] */;
  %415 = log10(%414) /* ty=Tensor[(7, 6, 6), float32] */;
  %416 = cast(%var_6843, dtype="float64") /* ty=Tensor[(7, 6, 6), float64] */;
  %417 = exp(%416) /* ty=Tensor[(7, 6, 6), float64] */;
  %418 = cast(%417, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %419 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%415, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %422 = @func_5840() /* ty=Tensor[(9, 9, 11), float64] */;
  %423 = not_equal(%420, %421) /* ty=Tensor[(7, 6, 6), bool] */;
  (%422, %423)
}

def @func_4402() -> Tensor[(9, 9, 11), float64] {
  %424 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %424.1
}

def @func_5349() -> Tensor[(960), float32] {
  %426 = fn () -> Tensor[(960), float32] {
    %425 = @func_4000() /* ty=(Tensor[(960), float32],) */;
    %425.0
  };
  %426() /* ty=Tensor[(960), float32] */
}

def @func_4062() -> Tensor[(960), float32] {
  %428 = fn () -> Tensor[(960), float32] {
    %427 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
    %427.0
  };
  %428() /* ty=Tensor[(960), float32] */
}

def @func_5060() -> Tensor[(9, 9, 11), float64] {
  %432 = fn () -> Tensor[(9, 9, 11), float64] {
    %429 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
    %430 = %429.0;
    %431 = cast(%430, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
    acosh(%431) /* ty=Tensor[(9, 9, 11), float64] */
  };
  %432() /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_5243(%var_5241: Tensor[(990), uint8]) -> (Tensor[(160), int64], Tensor[(180, 12), bool], Tensor[(990), uint8]) {
  @func_5240(%var_5241) /* ty=(Tensor[(160), int64], Tensor[(180, 12), bool], Tensor[(990), uint8]) */
}

def @func_51(%var_49: Tensor[(15, 1, 9), float64], %var_50: Tensor[(15, 16, 9), float64]) -> Tensor[(15, 16, 9), bool] {
  %435 = fn (%var_17: Tensor[(15, 1, 9), float64], %var_18: Tensor[(15, 16, 9), float64]) -> Tensor[(15, 16, 9), bool] {
    %433 = cast(%var_17, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
    %434 = cast(%var_18, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
    less_equal(%433, %434) /* ty=Tensor[(15, 16, 9), bool] */
  };
  %435(%var_49, %var_50) /* ty=Tensor[(15, 16, 9), bool] */
}

def @func_7605(%var_7600: Tensor[(13, 2, 6), float64]) -> Tensor[(13, 2, 6), float64] {
  %436 = cast(%var_7600, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %437 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(13, 2, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 2, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 6), float64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%438, %439) /* ty=Tensor[(13, 2, 6), float64] */
}

def @func_5842() -> Tensor[(9, 9, 11), float64] {
  @func_5840() /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_5903() -> (Tensor[(9, 9, 11), float64], Tensor[(960), float32]) {
  @func_5901() /* ty=(Tensor[(9, 9, 11), float64], Tensor[(960), float32]) */
}

def @func_1102() -> (Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) {
  @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */
}

def @func_3578(%var_3543: Tensor[(15, 10, 16), uint32], %var_3544: Tensor[(15, 10, 16), uint32]) -> (Tensor[(15, 10, 16), bool], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(182), int16]) {
  %440 = cast(%var_3544, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %441 = shape_of(%var_3543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_3543, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %445 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %446 = less(%442, %443) /* ty=Tensor[(15, 10, 16), bool] */;
  %447 = %444.1;
  %448 = %445.0;
  %449 = @func_2188() /* ty=Tensor[(182), int16] */;
  (%446, %447, %448, %449)
}

def @func_3511() -> (Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(180, 12), float32]) {
  %454 = fn () -> (Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(180, 12), float32]) {
    %450 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
    %451 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
    %452 = %450.0;
    %453 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
    (%451, %452, %453)
  };
  %454() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(180, 12), float32]) */
}

def @func_5792(%var_5729: Tensor[(135), float64], %var_5765: Tensor[(990), uint8], %var_5776: Tensor[(10, 1, 15), int16]) -> (Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2, 1080), float64], Tensor[(891), float32], Tensor[(9, 9, 11), uint8], Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(9, 9, 11), float32], Tensor[(10, 1, 15), int8], Tensor[(14, 13, 1), float64]) {
  %455 = cast(%var_5729, dtype="float64") /* ty=Tensor[(135), float64] */;
  %456 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 1080), float64] */, dtype="float64") /* ty=Tensor[(2, 1080), float64] */;
  %457 = cast(meta[relay.Constant][20] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %458 = reshape(%455, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %459 = reshape(%456, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %460 = reshape(%457, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %461 = @func_1880(%458, %459, %460) /* ty=(Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) */;
  %462 = cast(meta[relay.Constant][20] /* ty=Tensor[(891), float32] */, dtype="float64") /* ty=Tensor[(891), float64] */;
  %463 = reshape(%462, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float64] */;
  %464 = cast(meta[relay.Constant][20] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %465 = reshape(%464, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %466 = @func_2265(%465) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) */;
  %467 = cast(%var_5765, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %468 = cast(%var_5765, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %469 = %461.7;
  %470 = cast(%469, dtype="bool") /* ty=Tensor[(15, 16, 9), bool] */;
  %471 = reshape(%467, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %472 = reshape(%468, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %473 = reshape(%470, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
  %474 = @func_2712(%471, %472, %473) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
  %475 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int8") /* ty=int8 */;
  %476 = cast(%var_5776, dtype="int8") /* ty=Tensor[(10, 1, 15), int8] */;
  %477 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %478 = @func_2188() /* ty=Tensor[(182), int16] */;
  %479 = cast(%478, dtype="int16") /* ty=Tensor[(182), int16] */;
  %480 = reshape(%477, newshape=[]) /* ty=int16 */;
  %481 = reshape(%479, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
  %482 = @func_1023(%480, %481) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
  %483 = %482.1;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %485 = @func_4929(%463) /* ty=Tensor[(9, 9, 11), uint8] */;
  %486 = %466.1;
  %487 = %474.1;
  %488 = @func_4276() /* ty=Tensor[(9, 9, 11), float32] */;
  %489 = add(%475, %476) /* ty=Tensor[(10, 1, 15), int8] */;
  %490 = atan(%484) /* ty=Tensor[(14, 13, 1), float64] */;
  (%478, %469, %var_5729, meta[relay.Constant][19] /* ty=Tensor[(2, 1080), float64] */, meta[relay.Constant][20] /* ty=Tensor[(891), float32] */, %485, %486, %487, %var_5765, %488, %489, %490)
}

def @func_6678() -> Tensor[(9, 9, 11), float64] {
  @func_4402() /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_3241() -> (Tensor[(9, 9, 11), float32],) {
  %491 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %492 = %491.0;
  (%492,)
}

def @func_4931(%var_4930: Tensor[(9, 9, 11), float64]) -> Tensor[(9, 9, 11), uint8] {
  %499 = fn (%var_4921: Tensor[(9, 9, 11), float64]) -> Tensor[(9, 9, 11), uint8] {
    %493 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
    %494 = %493.1;
    %495 = cast(%var_4921, dtype="uint8") /* ty=Tensor[(9, 9, 11), uint8] */;
    %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%494, dtype="uint8") /* ty=Tensor[(9, 9, 11), uint8] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    subtract(%497, %498) /* ty=Tensor[(9, 9, 11), uint8] */
  };
  %499(%var_4930) /* ty=Tensor[(9, 9, 11), uint8] */
}

def @func_3153() -> (Tensor[(15, 9), float64],) {
  %502 = fn () -> (Tensor[(15, 9), float64],) {
    %500 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
    %501 = %500.0;
    (%501,)
  };
  %502() /* ty=(Tensor[(15, 9), float64],) */
}

def @func_1439(%var_1438: Tensor[(135), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) {
  %529 = fn (%var_1394: Tensor[(135), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) {
    %503 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
    %504 = cast(meta[relay.Constant][22] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
    %505 = reshape(%504, newshape=[60, 16]) /* ty=Tensor[(60, 16), float32] */;
    %506 = @func_1309(%505) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) */;
    %507 = cast(%var_1394, dtype="float64") /* ty=Tensor[(135), float64] */;
    %508 = %506.1;
    %509 = cast(%508, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %510 = reshape(%507, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
    %511 = reshape(%509, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
    %512 = cast(meta[relay.Constant][23] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %513 = reshape(%512, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float32] */;
    %514 = @func_879(%513) /* ty=(Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) */;
    %515 = %514.0;
    %516 = cast(meta[relay.Constant][23] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%515, dtype="float32") /* ty=Tensor[(13, ?, 12), float32] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %520 = cast(meta[relay.Constant][22] /* ty=Tensor[(480, 2), float32] */, dtype="float64") /* ty=Tensor[(480, 2), float64] */;
    %521 = cast(meta[relay.Constant][22] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
    %522 = reshape(%521, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
    %523 = @func_372(%522) /* ty=(Tensor[(10, 12, 8), uint32],) */;
    %524 = %503.1;
    %525 = @func_48(%510, %511) /* ty=Tensor[(15, 16, 9), bool] */;
    %526 = floor_divide(%518, %519) /* ty=Tensor[(13, ?, 12), float32] */;
    %527 = log10(%520) /* ty=Tensor[(480, 2), float64] */;
    %528 = %523.0;
    (%524, %508, %525, %var_1394, %526, %527, %528)
  };
  %529(%var_1438) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */
}

def @func_6783() -> (Tensor[(9, 9, 11), float32],) {
  %531 = fn () -> (Tensor[(9, 9, 11), float32],) {
    %530 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
    (%530,)
  };
  %531() /* ty=(Tensor[(9, 9, 11), float32],) */
}

def @func_4582() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  @func_4580() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */
}

def @func_6514() -> Tensor[(180, 12), float32] {
  @func_6512() /* ty=Tensor[(180, 12), float32] */
}

def @func_4212(%var_4185: Tensor[(960, 16), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 9), float64], Tensor[(960, 16), float32]) {
  %532 = cast(meta[relay.Constant][24] /* ty=Tensor[(960, 1), float32] */, dtype="float32") /* ty=Tensor[(960, 1), float32] */;
  %533 = reshape(%532, newshape=[60, 16]) /* ty=Tensor[(60, 16), float32] */;
  %534 = @func_1309(%533) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(156), float32], Tensor[(10, 12, 8), uint32], Tensor[(60, 16), bool]) */;
  %535 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %536 = cast(meta[relay.Constant][24] /* ty=Tensor[(960, 1), float32] */, dtype="float32") /* ty=Tensor[(960, 1), float32] */;
  %537 = cast(%var_4185, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
  %538 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %539 = %534.1;
  %540 = %535.0;
  %541 = power(%536, %537) /* ty=Tensor[(960, 16), float32] */;
  (%538, %539, %540, %541)
}

def @func_2232() -> Tensor[(180, 12), float32] {
  @func_2230() /* ty=Tensor[(180, 12), float32] */
}

def @func_375(%var_373: Tensor[(10, 12, 8), float32]) -> (Tensor[(10, 12, 8), uint32],) {
  @func_372(%var_373) /* ty=(Tensor[(10, 12, 8), uint32],) */
}

def @func_4679() -> (Tensor[(15, 9), float64],) {
  @func_4677() /* ty=(Tensor[(15, 9), float64],) */
}

def @func_5840() -> Tensor[(9, 9, 11), float64] {
  %542 = @func_5059() /* ty=Tensor[(9, 9, 11), float64] */;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  cosh(%543) /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_5993(%var_5991: Tensor[(11, 4, 14), float32], %var_5992: Tensor[(11, 4, 14), bool]) -> (Tensor[(180, 12), float32], Tensor[(11, 4, 14), float64]) {
  @func_5989(%var_5991, %var_5992) /* ty=(Tensor[(180, 12), float32], Tensor[(11, 4, 14), float64]) */
}

def @func_4994() -> (Tensor[(960), float32], Tensor[(15, 9), float64]) {
  %544 = @func_2789() /* ty=(Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) */;
  %545 = @func_4677() /* ty=(Tensor[(15, 9), float64],) */;
  %546 = %544.4;
  %547 = %545.0;
  (%546, %547)
}

def @func_1071(%var_1069: int64, %var_1070: Tensor[(8, 4, 5), int64]) -> (Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) {
  @func_1067(%var_1069, %var_1070) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) */
}

def @func_3986() -> Tensor[(960), float32] {
  @func_2760() /* ty=Tensor[(960), float32] */
}

def @func_2078(%var_2077: Tensor[(180, 12), float32]) -> Tensor[(180, 12), float32] {
  %553 = fn (%var_2066: Tensor[(180, 12), float32]) -> Tensor[(180, 12), float32] {
    %548 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
    %549 = cast(%var_2066, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(2), int32] */;
    %551 = cast(%548, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    add(%551, %552) /* ty=Tensor[(180, 12), float32] */
  };
  %553(%var_2077) /* ty=Tensor[(180, 12), float32] */
}

def @func_2391() -> (Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) {
  %570 = fn () -> (Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) {
    %554 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
    %555 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 12, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %558 = power(%556, %557) /* ty=Tensor[(4, 12, 13), float64] */;
    %559 = cast(%558, dtype="float32") /* ty=Tensor[(4, 12, 13), float32] */;
    %560 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %561 = cast(meta[relay.Constant][27] /* ty=Tensor[(160), int64] */, dtype="int64") /* ty=Tensor[(160), int64] */;
    %562 = reshape(%560, newshape=[]) /* ty=int64 */;
    %563 = reshape(%561, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int64] */;
    %564 = @func_1067(%562, %563) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) */;
    %565 = %564.2;
    %566 = cast(%565, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
    %567 = reshape(%566, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
    %568 = sin(%559) /* ty=Tensor[(4, 12, 13), float32] */;
    %569 = @func_737(%567) /* ty=Tensor[(13, 6, 14), float64] */;
    (%568, %565, 7 /* ty=int64 */, meta[relay.Constant][27] /* ty=Tensor[(160), int64] */, %569)
  };
  %570() /* ty=(Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) */
}

def @func_2791() -> (Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) {
  @func_2789() /* ty=(Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) */
}

def @func_4404() -> Tensor[(9, 9, 11), float64] {
  @func_4402() /* ty=Tensor[(9, 9, 11), float64] */
}

def @func_1885(%var_1882: Tensor[(135), float64], %var_1883: Tensor[(2160), float64], %var_1884: Tensor[(9, 9, 11), float32]) -> (Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) {
  @func_1880(%var_1882, %var_1883, %var_1884) /* ty=(Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) */
}

def @func_6170(%var_6142: Tensor[(11, 3, 7), float64]) -> (Tensor[(11, 3, 7), uint16],) {
  %571 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 7), float64] */;
  %572 = log(%571) /* ty=Tensor[(11, 3, 7), float64] */;
  %573 = cast(%var_6142, dtype="uint16") /* ty=Tensor[(11, 3, 7), uint16] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="uint16") /* ty=Tensor[(11, 3, 7), uint16] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %577 = minimum(%575, %576) /* ty=Tensor[(11, 3, 7), uint16] */;
  (%577,)
}

def @func_7059(%var_7056: Tensor[(891), int32], %var_7057: Tensor[(1092), float64], %var_7058: Tensor[(9, 9, 11), bool]) -> (Tensor[(182), int16], Tensor[(891), int32], Tensor[(960), float32], Tensor[(1092), float64], Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(9, 9, 11), int64], Tensor[(960), float32]) {
  @func_7054(%var_7056, %var_7057, %var_7058) /* ty=(Tensor[(182), int16], Tensor[(891), int32], Tensor[(960), float32], Tensor[(1092), float64], Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(9, 9, 11), int64], Tensor[(960), float32]) */
}

def @func_6987() -> Tensor[(180, 12), float32] {
  %578 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %580 = atan(%579) /* ty=Tensor[(180, 12), float64] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  cosh(%581) /* ty=Tensor[(180, 12), float32] */
}

def @func_6580(%var_6578: Tensor[(8, 1, 10), int8], %var_6579: Tensor[(990), uint8]) -> (Tensor[(8, 8, 10), int8], Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(2400), uint32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) {
  @func_6576(%var_6578, %var_6579) /* ty=(Tensor[(8, 8, 10), int8], Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(2400), uint32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) */
}

def @func_737(%var_732: Tensor[(13, 6, 14), float64]) -> Tensor[(13, 6, 14), float64] {
  %582 = cast(%var_732, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
  asinh(%582) /* ty=Tensor[(13, 6, 14), float64] */
}

def @func_1255() -> Tensor[(9, 9, 11), float32] {
  @func_1253() /* ty=Tensor[(9, 9, 11), float32] */
}

def @func_3988() -> Tensor[(960), float32] {
  @func_3986() /* ty=Tensor[(960), float32] */
}

def @func_1811() -> Tensor[(15, 9), float64] {
  @func_1809() /* ty=Tensor[(15, 9), float64] */
}

def @func_1203(%var_1123: Tensor[(180, 12), float64], %var_1128: Tensor[(10, 96), float32], %var_1161: Tensor[(180, 12), float32], %var_1171: Tensor[(180, 12), float32]) -> (Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) {
  %583 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %585 = cast(%var_1123, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %586 = reshape(%584, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %587 = reshape(%585, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %588 = cast(%var_1128, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %589 = reshape(%588, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
  %590 = @func_372(%589) /* ty=(Tensor[(10, 12, 8), uint32],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(10, 12, 8), float32] */;
  %593 = reshape(%592, newshape=[10, 12, 8]) /* ty=Tensor[(10, 12, 8), float32] */;
  %594 = @func_372(%593) /* ty=(Tensor[(10, 12, 8), uint32],) */;
  %595 = cast(%591, dtype="bool") /* ty=Tensor[(10, 12, 8), bool] */;
  %596 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(2), int32] */;
  %597 = cast(%var_1128, dtype="bool") /* ty=Tensor[(10, 96), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %599 = cast(%var_1123, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %600 = rsqrt(%599) /* ty=Tensor[(180, 12), float32] */;
  %601 = cast(%var_1161, dtype="int8") /* ty=Tensor[(180, 12), int8] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %603 = cast(%600, dtype="int8") /* ty=Tensor[(180, 12), int8] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %605 = cast(%var_1123, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %606 = shape_of(%600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %607 = cast(%600, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %609 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %610 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %611 = cast(meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %612 = @func_48(%586, %587) /* ty=Tensor[(15, 16, 9), bool] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %614 = reshape(%611, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
  %615 = reshape(%613, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
  %616 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %617 = cast(%var_1171, dtype="int64") /* ty=Tensor[(180, 12), int64] */;
  %618 = shape_of(%600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %619 = cast(%600, dtype="int64") /* ty=Tensor[(180, 12), int64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %621 = bitwise_xor(%619, %620) /* ty=Tensor[(180, 12), int64] */;
  %622 = cast(%var_1161, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(2), int32] */;
  %624 = cast(%621, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %626 = %583.1;
  %627 = %594.0;
  %628 = greater_equal(%597, %598) /* ty=Tensor[(10, 96), bool] */;
  %629 = subtract(%603, %604) /* ty=Tensor[(180, 12), int8] */;
  %630 = floor_divide(%607, %608) /* ty=Tensor[(180, 12), float64] */;
  %631 = %609.1;
  %632 = %610.0;
  %633 = @func_48(%614, %615) /* ty=Tensor[(15, 16, 9), bool] */;
  %634 = %616.1;
  %635 = equal(%624, %625) /* ty=Tensor[(180, 12), bool] */;
  (%626, %612, meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, %627, %628, %629, %630, %631, %632, %633, %634, %635)
}

def @func_3729(%var_3700: Tensor[(12, 11, 10), int16], %var_3701: Tensor[(12, 11, 10), int16]) -> (Tensor[(12, 11, 10), bool], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(27, 9), float64]) {
  %636 = cast(%var_3701, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %637 = shape_of(%var_3700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%var_3700, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %640 = cast(meta[relay.Constant][30] /* ty=Tensor[(3), float64] */, dtype="float64") /* ty=Tensor[(3), float64] */;
  %641 = cast(meta[relay.Constant][31] /* ty=Tensor[(27, 9), float64] */, dtype="float64") /* ty=Tensor[(27, 9), float64] */;
  %642 = reshape(%640, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), float64] */;
  %643 = reshape(%641, newshape=[9, 9, 3]) /* ty=Tensor[(9, 9, 3), float64] */;
  %644 = @func_1928(%642, %643) /* ty=(Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) */;
  %645 = less_equal(%638, %639) /* ty=Tensor[(12, 11, 10), bool] */;
  %646 = %644.2;
  (%645, %646, meta[relay.Constant][30] /* ty=Tensor[(3), float64] */, meta[relay.Constant][31] /* ty=Tensor[(27, 9), float64] */)
}

def @func_7517() -> (Tensor[(9, 9, 11), float32], Tensor[(960), float32], Tensor[(182), int16], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) {
  @func_7515() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(960), float32], Tensor[(182), int16], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) */
}

def @func_6095(%var_6093: Tensor[(891), int32]) -> (Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) {
  @func_6092(%var_6093) /* ty=(Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) */
}

def @func_6025() -> (Tensor[(9, 9, 11), float32], Tensor[(15, 9), float64]) {
  %653 = fn () -> (Tensor[(9, 9, 11), float32], Tensor[(15, 9), float64]) {
    %647 = @func_5901() /* ty=(Tensor[(9, 9, 11), float64], Tensor[(960), float32]) */;
    %648 = %647.0;
    %649 = cast(%648, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
    %650 = @func_4677() /* ty=(Tensor[(15, 9), float64],) */;
    %651 = sigmoid(%649) /* ty=Tensor[(9, 9, 11), float32] */;
    %652 = %650.0;
    (%651, %652)
  };
  %653() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(15, 9), float64]) */
}

def @func_3243() -> (Tensor[(9, 9, 11), float32],) {
  @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */
}

def @func_1100() -> (Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) {
  %654 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
  %655 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(9, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %658 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 9, 11), int32] */, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %659 = bitwise_or(%656, %657) /* ty=Tensor[(9, 9, 11), int32] */;
  %660 = rsqrt(%658) /* ty=Tensor[(9, 9, 11), float64] */;
  (%659, %660)
}

def @func_5069() -> Tensor[(180, 12), float32] {
  %661 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
  %661.1
}

def @func_4046(%var_4044: Tensor[(10, 4, 3), float64]) -> Tensor[(10, 4, 3), float64] {
  @func_4043(%var_4044) /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_5797(%var_5794: Tensor[(135), float64], %var_5795: Tensor[(990), uint8], %var_5796: Tensor[(10, 1, 15), int16]) -> (Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2, 1080), float64], Tensor[(891), float32], Tensor[(9, 9, 11), uint8], Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(9, 9, 11), float32], Tensor[(10, 1, 15), int8], Tensor[(14, 13, 1), float64]) {
  @func_5792(%var_5794, %var_5795, %var_5796) /* ty=(Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2, 1080), float64], Tensor[(891), float32], Tensor[(9, 9, 11), uint8], Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(9, 9, 11), float32], Tensor[(10, 1, 15), int8], Tensor[(14, 13, 1), float64]) */
}

def @func_7267(%var_7265: Tensor[(16, 12, 9), float32]) -> Tensor[(16, 12, 9), float32] {
  @func_7264(%var_7265) /* ty=Tensor[(16, 12, 9), float32] */
}

def @func_1372() -> (Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) {
  @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */
}

def @func_5438() -> (Tensor[(960), float32], Tensor[(9, 9, 11), int32]) {
  %662 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %663 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %664 = %662.1;
  %665 = %663.0;
  (%664, %665)
}

def @func_7322() -> (Tensor[(9, 9, 11), float32],) {
  %668 = fn () -> (Tensor[(9, 9, 11), float32],) {
    %666 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
    %667 = %666.0;
    (%667,)
  };
  %668() /* ty=(Tensor[(9, 9, 11), float32],) */
}

def @func_2346() -> (Tensor[(15, 9), float64], Tensor[(180, 12), float32]) {
  %676 = fn () -> (Tensor[(15, 9), float64], Tensor[(180, 12), float32]) {
    %669 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
    %670 = %669.0;
    %671 = cast(%670, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    %672 = acosh(%671) /* ty=Tensor[(180, 12), float32] */;
    %673 = cast(%672, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    %674 = @func_2273() /* ty=Tensor[(15, 9), float64] */;
    %675 = exp(%673) /* ty=Tensor[(180, 12), float32] */;
    (%674, %675)
  };
  %676() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */
}

def @func_2190() -> Tensor[(182), int16] {
  @func_2188() /* ty=Tensor[(182), int16] */
}

def @func_1253() -> Tensor[(9, 9, 11), float32] {
  %677 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %678 = %677.1;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  asin(%679) /* ty=Tensor[(9, 9, 11), float32] */
}

def @func_1742(%var_1740: Tensor[(135), float64], %var_1741: Tensor[(15, 16, 9), bool]) -> (Tensor[(135), float64], Tensor[(180, 12), uint64], Tensor[(15, 16, 9), bool], Tensor[(15, 16, 9), uint64]) {
  @func_1738(%var_1740, %var_1741) /* ty=(Tensor[(135), float64], Tensor[(180, 12), uint64], Tensor[(15, 16, 9), bool], Tensor[(15, 16, 9), uint64]) */
}

def @func_4580() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %680 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %681 = @func_1809() /* ty=Tensor[(15, 9), float64] */;
  %682 = %680.0;
  (%681, %682)
}

def @func_6647() -> Tensor[(960), float32] {
  @func_6645() /* ty=Tensor[(960), float32] */
}

def @func_6645() -> Tensor[(960), float32] {
  %683 = @func_4842() /* ty=(Tensor[(960), float32],) */;
  %683.0
}

def @func_4278() -> Tensor[(9, 9, 11), float32] {
  @func_4276() /* ty=Tensor[(9, 9, 11), float32] */
}

def @func_6092(%var_6087: Tensor[(891), int32]) -> (Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) {
  %684 = cast(%var_6087, dtype="int32") /* ty=Tensor[(891), int32] */;
  %685 = cast(meta[relay.Constant][34] /* ty=Tensor[(20, 48), float32] */, dtype="float32") /* ty=Tensor[(20, 48), float32] */;
  %686 = cast(meta[relay.Constant][35] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %687 = reshape(%684, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %688 = reshape(%685, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %689 = reshape(%686, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %690 = @func_3964(%687, %688, %689) /* ty=(Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) */;
  %691 = @func_4056() /* ty=Tensor[(15, 9), float64] */;
  %692 = %690.3;
  (%691, %692, %var_6087, meta[relay.Constant][34] /* ty=Tensor[(20, 48), float32] */, meta[relay.Constant][35] /* ty=Tensor[(1092), float64] */)
}

def @func_6268() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %697 = fn () -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
    %693 = @func_4677() /* ty=(Tensor[(15, 9), float64],) */;
    %694 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
    %695 = %693.0;
    %696 = %694.0;
    (%695, %696)
  };
  %697() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */
}

def @func_2762() -> Tensor[(960), float32] {
  @func_2760() /* ty=Tensor[(960), float32] */
}

def @func_1567() -> (Tensor[(180, 12), float32],) {
  %699 = fn () -> (Tensor[(180, 12), float32],) {
    %698 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
    (%698,)
  };
  %699() /* ty=(Tensor[(180, 12), float32],) */
}

def @func_6120(%var_6111: Tensor[(99, 9), int32]) -> (Tensor[(15, 9), float64], Tensor[(15, 9), float64], Tensor[(99, 9), float32]) {
  %700 = cast(%var_6111, dtype="int32") /* ty=Tensor[(99, 9), int32] */;
  %701 = reshape(%700, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %702 = @func_6092(%701) /* ty=(Tensor[(15, 9), float64], Tensor[(891), float32], Tensor[(891), int32], Tensor[(20, 48), float32], Tensor[(1092), float64]) */;
  %703 = cast(%var_6111, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %704 = @func_4159() /* ty=Tensor[(15, 9), float64] */;
  %705 = %702.0;
  %706 = asinh(%703) /* ty=Tensor[(99, 9), float32] */;
  (%704, %705, %706)
}

def @func_5930(%var_5910: Tensor[(13, 14, 16), int64], %var_5911: Tensor[(13, 14, 16), int64]) -> (Tensor[(13, 14, 16), bool], Tensor[(13, 14, 16), float64]) {
  %707 = cast(%var_5911, dtype="bool") /* ty=Tensor[(13, 14, 16), bool] */;
  %708 = shape_of(%var_5910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%var_5910, dtype="bool") /* ty=Tensor[(13, 14, 16), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = cast(%var_5910, dtype="float64") /* ty=Tensor[(13, 14, 16), float64] */;
  %712 = equal(%709, %710) /* ty=Tensor[(13, 14, 16), bool] */;
  %713 = sqrt(%711) /* ty=Tensor[(13, 14, 16), float64] */;
  (%712, %713)
}

def @func_6512() -> Tensor[(180, 12), float32] {
  @func_2298() /* ty=Tensor[(180, 12), float32] */
}

def @func_1209(%var_1205: Tensor[(180, 12), float64], %var_1206: Tensor[(10, 96), float32], %var_1207: Tensor[(180, 12), float32], %var_1208: Tensor[(180, 12), float32]) -> (Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) {
  @func_1203(%var_1205, %var_1206, %var_1207, %var_1208) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */
}

def @func_5643(%var_5641: Tensor[(3, 15, 5), float32], %var_5642: Tensor[(3, 15, 5), float32]) -> (Tensor[(3, 15, 5), float32], Tensor[(15, 9), float64], Tensor[(3, 15, 5), float64]) {
  %723 = fn (%var_5598: Tensor[(3, 15, 5), float32], %var_5599: Tensor[(3, 15, 5), float32]) -> (Tensor[(3, 15, 5), float32], Tensor[(15, 9), float64], Tensor[(3, 15, 5), float64]) {
    %714 = cast(%var_5599, dtype="float32") /* ty=Tensor[(3, 15, 5), float32] */;
    %715 = shape_of(%var_5598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%var_5598, dtype="float32") /* ty=Tensor[(3, 15, 5), float32] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %718 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
    %719 = cast(%var_5599, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %720 = mod(%716, %717) /* ty=Tensor[(3, 15, 5), float32] */;
    %721 = %718.0;
    %722 = sin(%719) /* ty=Tensor[(3, 15, 5), float64] */;
    (%720, %721, %722)
  };
  %723(%var_5641, %var_5642) /* ty=(Tensor[(3, 15, 5), float32], Tensor[(15, 9), float64], Tensor[(3, 15, 5), float64]) */
}

def @func_3733(%var_3731: Tensor[(12, 11, 10), int16], %var_3732: Tensor[(12, 11, 10), int16]) -> (Tensor[(12, 11, 10), bool], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(27, 9), float64]) {
  @func_3729(%var_3731, %var_3732) /* ty=(Tensor[(12, 11, 10), bool], Tensor[(9, 9, 3), float64], Tensor[(3), float64], Tensor[(27, 9), float64]) */
}

def @func_2548(%var_2546: Tensor[(180, 12), bool]) -> (Tensor[(180, 12), bool],) {
  @func_2545(%var_2546) /* ty=(Tensor[(180, 12), bool],) */
}

def @func_1026(%var_1024: int16, %var_1025: Tensor[(14, 13, 1), int16]) -> (Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) {
  %730 = fn (%var_1007: int16, %var_1008: Tensor[(14, 13, 1), int16]) -> (Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) {
    %724 = cast(%var_1007, dtype="int16") /* ty=int16 */;
    %725 = cast(%var_1008, dtype="int16") /* ty=Tensor[(14, 13, 1), int16] */;
    %726 = cast(%var_1007, dtype="bool") /* ty=bool */;
    %727 = cast(%var_1008, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
    %728 = logical_xor(%724, %725) /* ty=Tensor[(14, 13, 1), int16] */;
    %729 = greater_equal(%726, %727) /* ty=Tensor[(14, 13, 1), bool] */;
    (%728, %729)
  };
  %730(%var_1024, %var_1025) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */
}

def @func_1928(%var_1910: Tensor[(1, 1, 3), float64], %var_1911: Tensor[(9, 9, 3), float64]) -> (Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) {
  %731 = cast(meta[relay.Constant][36] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %732 = reshape(%731, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
  %733 = cast(%var_1910, dtype="float64") /* ty=Tensor[(1, 1, 3), float64] */;
  %734 = cast(%var_1911, dtype="float64") /* ty=Tensor[(9, 9, 3), float64] */;
  %735 = floor_divide(%733, %734) /* ty=Tensor[(9, 9, 3), float64] */;
  %736 = cast(%var_1911, dtype="float64") /* ty=Tensor[(9, 9, 3), float64] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="float64") /* ty=Tensor[(9, 9, 3), float64] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %740 = @func_737(%732) /* ty=Tensor[(13, 6, 14), float64] */;
  %741 = add(%738, %739) /* ty=Tensor[(9, 9, 3), float64] */;
  (%740, meta[relay.Constant][36] /* ty=Tensor[(1092), float64] */, %741)
}

def @func_6754(%var_6752: Tensor[(180, 12), float32]) -> Tensor[(180, 12), float64] {
  @func_6751(%var_6752) /* ty=Tensor[(180, 12), float64] */
}

def @func_1505() -> (Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) {
  %742 = cast(meta[relay.Constant][37] /* ty=Tensor[(360, 6), float64] */, dtype="float64") /* ty=Tensor[(360, 6), float64] */;
  %743 = cast(meta[relay.Constant][38] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %744 = cast(meta[relay.Constant][37] /* ty=Tensor[(360, 6), float64] */, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
  %745 = cast(meta[relay.Constant][37] /* ty=Tensor[(360, 6), float64] */, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
  %746 = reshape(%742, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
  %747 = reshape(%743, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
  %748 = reshape(%744, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %749 = reshape(%745, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %750 = @func_1203(%746, %747, %748, %749) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
  %751 = cast(meta[relay.Constant][39] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %752 = reshape(%751, newshape=[13, 1, 12]) /* ty=Tensor[(13, 1, 12), float32] */;
  %753 = @func_879(%752) /* ty=(Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) */;
  %754 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %755 = %750.11;
  %756 = %753.2;
  (%754, %755, meta[relay.Constant][37] /* ty=Tensor[(360, 6), float64] */, meta[relay.Constant][38] /* ty=Tensor[(960), float32] */, %756, meta[relay.Constant][39] /* ty=Tensor[(156), float32] */)
}

def @func_3582(%var_3580: Tensor[(15, 10, 16), uint32], %var_3581: Tensor[(15, 10, 16), uint32]) -> (Tensor[(15, 10, 16), bool], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(182), int16]) {
  @func_3578(%var_3580, %var_3581) /* ty=(Tensor[(15, 10, 16), bool], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(182), int16]) */
}

def @func_1809() -> Tensor[(15, 9), float64] {
  %757 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %757.4
}

def @func_3433(%var_3407: Tensor[(2160), bool]) -> (Tensor[(9, 9, 11), float32], Tensor[(1080, 2), bool], Tensor[(990), uint8], Tensor[(2160), bool], Tensor[(960), float32]) {
  %758 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %759 = cast(meta[relay.Constant][40] /* ty=Tensor[(990), uint8] */, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %760 = cast(meta[relay.Constant][40] /* ty=Tensor[(990), uint8] */, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %761 = cast(%var_3407, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %762 = reshape(%759, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %763 = reshape(%760, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %764 = reshape(%761, newshape=[1080, 2]) /* ty=Tensor[(1080, 2), bool] */;
  %765 = @func_2712(%762, %763, %764) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */;
  %766 = %758.1;
  %767 = %765.2;
  %768 = @func_2760() /* ty=Tensor[(960), float32] */;
  (%766, %767, meta[relay.Constant][40] /* ty=Tensor[(990), uint8] */, %var_3407, %768)
}

def @func_6928(%var_6898: Tensor[(5, 30), int16], %var_6915: Tensor[(891), float32]) -> (Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(5, 30), int16], Tensor[(9, 9, 11), int32], Tensor[(891), float32], Tensor[(5, 198), int64], Tensor[(9, 9, 11), float32]) {
  %769 = @func_4580() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
  %772 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 198), uint8] */, dtype="uint8") /* ty=Tensor[(5, 198), uint8] */;
  %773 = cast(%var_6898, dtype="int16") /* ty=Tensor[(5, 30), int16] */;
  %774 = reshape(%771, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %775 = reshape(%772, newshape=[990]) /* ty=Tensor[(990), uint8] */;
  %776 = reshape(%773, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), int16] */;
  %777 = @func_5792(%774, %775, %776) /* ty=(Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2, 1080), float64], Tensor[(891), float32], Tensor[(9, 9, 11), uint8], Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(9, 9, 11), float32], Tensor[(10, 1, 15), int8], Tensor[(14, 13, 1), float64]) */;
  %778 = cast(%var_6915, dtype="float32") /* ty=Tensor[(891), float32] */;
  %779 = reshape(%778, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %780 = @func_2265(%779) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) */;
  %781 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 198), uint8] */, dtype="float32") /* ty=Tensor[(5, 198), float32] */;
  %782 = erf(%781) /* ty=Tensor[(5, 198), float32] */;
  %783 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 198), uint8] */, dtype="int64") /* ty=Tensor[(5, 198), int64] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(2), int32] */;
  %785 = cast(%782, dtype="int64") /* ty=Tensor[(5, 198), int64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %787 = @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %788 = %777.1;
  %789 = %780.2;
  %790 = subtract(%785, %786) /* ty=Tensor[(5, 198), int64] */;
  %791 = %787.0;
  (%770, %788, %var_6898, %789, %var_6915, %790, %791)
}

def @func_2268(%var_2266: Tensor[(9, 9, 11), float32]) -> (Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) {
  @func_2265(%var_2266) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), int32]) */
}

def @func_740(%var_738: Tensor[(13, 6, 14), float64]) -> Tensor[(13, 6, 14), float64] {
  @func_737(%var_738) /* ty=Tensor[(13, 6, 14), float64] */
}

def @func_4844() -> (Tensor[(960), float32],) {
  @func_4842() /* ty=(Tensor[(960), float32],) */
}

def @func_2717(%var_2714: Tensor[(11, 10, 9), uint8], %var_2715: Tensor[(11, 10, 9), uint8], %var_2716: Tensor[(1080, 2), bool]) -> (Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) {
  @func_2712(%var_2714, %var_2715, %var_2716) /* ty=(Tensor[(11, 10, 9), bool], Tensor[(180, 12), bool], Tensor[(1080, 2), bool]) */
}

def @func_4648(%var_4646: float64, %var_4647: Tensor[(8, 3, 2), float64]) -> (Tensor[(8, 3, 2), bool], Tensor[(13, 6, 14), float64], Tensor[(13, 6, 14), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) {
  %804 = fn (%var_4615: float64, %var_4616: Tensor[(8, 3, 2), float64]) -> (Tensor[(8, 3, 2), bool], Tensor[(13, 6, 14), float64], Tensor[(13, 6, 14), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) {
    %792 = cast(%var_4615, dtype="bool") /* ty=bool */;
    %793 = cast(%var_4616, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
    %794 = @func_2390() /* ty=(Tensor[(4, 12, 13), float32], Tensor[(546, 2), float64], int64, Tensor[(160), int64], Tensor[(13, 6, 14), float64]) */;
    %795 = %794.4;
    %796 = cast(%795, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
    %797 = reshape(%796, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), float64] */;
    %798 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
    %799 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
    %800 = greater_equal(%792, %793) /* ty=Tensor[(8, 3, 2), bool] */;
    %801 = @func_737(%797) /* ty=Tensor[(13, 6, 14), float64] */;
    %802 = %798.0;
    %803 = %799.1;
    (%800, %795, %801, %802, %803)
  };
  %804(%var_4646, %var_4647) /* ty=(Tensor[(8, 3, 2), bool], Tensor[(13, 6, 14), float64], Tensor[(13, 6, 14), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */
}

def @func_6328() -> (Tensor[(9, 9, 11), float32],) {
  @func_6326() /* ty=(Tensor[(9, 9, 11), float32],) */
}

def @func_3749() -> (Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) {
  %805 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %806 = @func_1370() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) */;
  %807 = %806.0;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %809 = %805.0;
  %810 = tan(%808) /* ty=Tensor[(9, 9, 11), float32] */;
  (%809, %810)
}

def @func_4780(%var_4778: Tensor[(45, 3), float64]) -> (Tensor[(960), float32], Tensor[(182), int16], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(15, 16, 9), bool], Tensor[(45, 3), float64], Tensor[(135), float64], Tensor[(546, 2), float64], int64, Tensor[(2, 80), int64]) {
  @func_4777(%var_4778) /* ty=(Tensor[(960), float32], Tensor[(182), int16], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(15, 16, 9), bool], Tensor[(45, 3), float64], Tensor[(135), float64], Tensor[(546, 2), float64], int64, Tensor[(2, 80), int64]) */
}

def @func_5901() -> (Tensor[(9, 9, 11), float64], Tensor[(960), float32]) {
  %811 = @func_1505() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(180, 12), bool], Tensor[(360, 6), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(156), float32]) */;
  %812 = %811.0;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(9, 9, 11), float32] */;
  %814 = sqrt(%813) /* ty=Tensor[(9, 9, 11), float32] */;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %816 = @func_4842() /* ty=(Tensor[(960), float32],) */;
  %817 = acos(%815) /* ty=Tensor[(9, 9, 11), float64] */;
  %818 = %816.0;
  (%817, %818)
}

def @func_6932(%var_6930: Tensor[(5, 30), int16], %var_6931: Tensor[(891), float32]) -> (Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(5, 30), int16], Tensor[(9, 9, 11), int32], Tensor[(891), float32], Tensor[(5, 198), int64], Tensor[(9, 9, 11), float32]) {
  @func_6928(%var_6930, %var_6931) /* ty=(Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(5, 30), int16], Tensor[(9, 9, 11), int32], Tensor[(891), float32], Tensor[(5, 198), int64], Tensor[(9, 9, 11), float32]) */
}

def @func_7054(%var_6999: Tensor[(891), int32], %var_7001: Tensor[(1092), float64], %var_7032: Tensor[(9, 9, 11), bool]) -> (Tensor[(182), int16], Tensor[(891), int32], Tensor[(960), float32], Tensor[(1092), float64], Tensor[(15, 9), float64], Tensor[(180, 12), float32], Tensor[(9, 9, 11), int64], Tensor[(960), float32]) {
  %819 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
  %820 = cast(%var_6999, dtype="int32") /* ty=Tensor[(891), int32] */;
  %821 = cast(meta[relay.Constant][42] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %822 = cast(%var_7001, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %823 = reshape(%820, newshape=[891]) /* ty=Tensor[(891), int32] */;
  %824 = reshape(%821, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %825 = reshape(%822, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %826 = @func_3964(%823, %824, %825) /* ty=(Tensor[(180, 12), float32], Tensor[(9, 9, 11), bool], Tensor[(960), float32], Tensor[(891), float32], Tensor[(180, 12), bool], Tensor[(13, 6, 14), float64], Tensor[(1092), float64]) */;
  %827 = %826.1;
  %828 = cast(%var_7032, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
  %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%827, dtype="int64") /* ty=Tensor[(9, 9, 11), int64] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %832 = @func_3695() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */;
  %833 = %819.1;
  %834 = @func_5449() /* ty=Tensor[(15, 9), float64] */;
  %835 = @func_6708() /* ty=Tensor[(180, 12), float32] */;
  %836 = minimum(%830, %831) /* ty=Tensor[(9, 9, 11), int64] */;
  %837 = %832.1;
  (%833, %var_6999, meta[relay.Constant][42] /* ty=Tensor[(960), float32] */, %var_7001, %834, %835, %836, %837)
}

def @func_7608(%var_7606: Tensor[(13, 2, 6), float64]) -> Tensor[(13, 2, 6), float64] {
  @func_7605(%var_7606) /* ty=Tensor[(13, 2, 6), float64] */
}

def @main(%var_7779: int16) -> (Tensor[(160), int64], Tensor[(182), int16], Tensor[(14, 13, 1), bool]) {
  %838 = @func_3861() /* ty=(Tensor[(160), int64],) */;
  %839 = cast(%var_7779, dtype="int16") /* ty=int16 */;
  %840 = cast(meta[relay.Constant][43] /* ty=Tensor[(182), int16] */, dtype="int16") /* ty=Tensor[(182), int16] */;
  %841 = reshape(%839, newshape=[]) /* ty=int16 */;
  %842 = reshape(%840, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
  %843 = @func_1026(%841, %842) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
  %844 = %843.1;
  %845 = cast(%var_7779, dtype="bool") /* ty=bool */;
  %846 = cast(%844, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %847 = %838.0;
  %848 = logical_or(%845, %846) /* ty=Tensor[(14, 13, 1), bool] */;
  (%847, meta[relay.Constant][43] /* ty=Tensor[(182), int16] */, %848)
}

def @func_3112(%var_3111: Tensor[(180, 12), float32]) -> (Tensor[(180, 12), bool],) {
  %856 = fn (%var_3100: Tensor[(180, 12), float32]) -> (Tensor[(180, 12), bool],) {
    %849 = @func_2345() /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */;
    %850 = %849.1;
    %851 = cast(%var_3100, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
    %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(2), int32] */;
    %853 = cast(%850, dtype="bool") /* ty=Tensor[(180, 12), bool] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %855 = less(%853, %854) /* ty=Tensor[(180, 12), bool] */;
    (%855,)
  };
  %856(%var_3111) /* ty=(Tensor[(180, 12), bool],) */
}

def @func_5154(%var_5098: Tensor[(160), int64]) -> (Tensor[(546, 2), float64], Tensor[(160), int64], Tensor[(960), float32], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float64]) {
  %857 = cast(-9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %858 = cast(%var_5098, dtype="int64") /* ty=Tensor[(160), int64] */;
  %859 = reshape(%857, newshape=[]) /* ty=int64 */;
  %860 = reshape(%858, newshape=[8, 4, 5]) /* ty=Tensor[(8, 4, 5), int64] */;
  %861 = @func_1067(%859, %860) /* ty=(Tensor[(8, 4, 5), bool], Tensor[(13, 6, 14), float64], Tensor[(546, 2), float64]) */;
  %862 = @func_3749() /* ty=(Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float32]) */;
  %863 = %862.1;
  %864 = cast(-9 /* ty=int64 */, dtype="float64") /* ty=float64 */;
  %865 = cast(%863, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %866 = @func_3241() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %867 = cast(%863, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %868 = log2(%867) /* ty=Tensor[(9, 9, 11), float64] */;
  %869 = cast(meta[relay.Constant][44] /* ty=Tensor[(9, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%868, dtype="float64") /* ty=Tensor[(9, 9, 11), float64] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %873 = %861.2;
  %874 = @func_4061() /* ty=Tensor[(960), float32] */;
  %875 = multiply(%864, %865) /* ty=Tensor[(9, 9, 11), float64] */;
  %876 = %866.0;
  %877 = floor_mod(%871, %872) /* ty=Tensor[(9, 9, 11), float64] */;
  (%873, %var_5098, %874, %875, %876, %877)
}

def @func_5989(%var_5976: Tensor[(11, 4, 14), float32], %var_5985: Tensor[(11, 4, 14), bool]) -> (Tensor[(180, 12), float32], Tensor[(11, 4, 14), float64]) {
  %878 = cast(meta[relay.Constant][45] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %879 = cast(meta[relay.Constant][46] /* ty=Tensor[(11, 4, 14), uint64] */, dtype="uint64") /* ty=Tensor[(11, 4, 14), uint64] */;
  %880 = left_shift(%878, %879) /* ty=Tensor[(11, 4, 14), uint64] */;
  %881 = cast(%880, dtype="float32") /* ty=Tensor[(11, 4, 14), float32] */;
  %882 = tan(%881) /* ty=Tensor[(11, 4, 14), float32] */;
  %883 = cast(%var_5976, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
  %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%882, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %887 = greater_equal(%885, %886) /* ty=Tensor[(11, 4, 14), bool] */;
  %888 = cast(%var_5985, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %889 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(%887, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %892 = @func_5069() /* ty=Tensor[(180, 12), float32] */;
  %893 = power(%890, %891) /* ty=Tensor[(11, 4, 14), float64] */;
  (%892, %893)
}

def @func_3527() -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
  %900 = fn () -> (Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) {
    %894 = @func_2928() /* ty=(Tensor[(15, 9), float64],) */;
    %895 = %894.0;
    %896 = cast(%895, dtype="float64") /* ty=Tensor[(15, 9), float64] */;
    %897 = reshape(%896, newshape=[135]) /* ty=Tensor[(135), float64] */;
    %898 = @func_1437(%897) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
    %899 = %898.0;
    (%895, %899)
  };
  %900() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */
}

def @func_4056() -> Tensor[(15, 9), float64] {
  %901 = @func_3526() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
  %901.0
}

def @func_7096() -> (Tensor[(180, 12), float32],) {
  %904 = fn () -> (Tensor[(180, 12), float32],) {
    %902 = @func_1566() /* ty=(Tensor[(180, 12), float32],) */;
    %903 = %902.0;
    (%903,)
  };
  %904() /* ty=(Tensor[(180, 12), float32],) */
}

def @func_1798(%var_1796: Tensor[(135), float64], %var_1797: Tensor[(2160), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), int16], int16, Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(10, 12, 8), uint32], Tensor[(1, 960), float32]) {
  %927 = fn (%var_1775: Tensor[(135), float64], %var_1776: Tensor[(2160), float64]) -> (Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), int16], int16, Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(10, 12, 8), uint32], Tensor[(1, 960), float32]) {
    %905 = cast(meta[relay.Constant][47] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %906 = cast(meta[relay.Constant][48] /* ty=Tensor[(182), int16] */, dtype="int16") /* ty=Tensor[(182), int16] */;
    %907 = reshape(%905, newshape=[]) /* ty=int16 */;
    %908 = reshape(%906, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
    %909 = @func_1023(%907, %908) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
    %910 = cast(%var_1775, dtype="float64") /* ty=Tensor[(135), float64] */;
    %911 = cast(%var_1776, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %912 = reshape(%910, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float64] */;
    %913 = reshape(%911, newshape=[15, 16, 9]) /* ty=Tensor[(15, 16, 9), float64] */;
    %914 = cast(%var_1776, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %915 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 960), float32] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
    %916 = cast(%var_1776, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %917 = cast(%var_1776, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %918 = reshape(%914, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
    %919 = reshape(%915, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
    %920 = reshape(%916, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %921 = reshape(%917, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %922 = @func_1203(%918, %919, %920, %921) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
    %923 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
    %924 = %909.0;
    %925 = @func_48(%912, %913) /* ty=Tensor[(15, 16, 9), bool] */;
    %926 = %922.3;
    (%923, %924, meta[relay.Constant][47] /* ty=int16 */, meta[relay.Constant][48] /* ty=Tensor[(182), int16] */, %925, %var_1775, %var_1776, %926, meta[relay.Constant][49] /* ty=Tensor[(1, 960), float32] */)
  };
  %927(%var_1796, %var_1797) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), int16], int16, Tensor[(182), int16], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(10, 12, 8), uint32], Tensor[(1, 960), float32]) */
}

def @func_2663(%var_2660: Tensor[(9, 9, 11), int32], %var_2661: Tensor[(2160), float64], %var_2662: Tensor[(960), float32]) -> (Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) {
  %949 = fn (%var_2612: Tensor[(9, 9, 11), int32], %var_2631: Tensor[(2160), float64], %var_2632: Tensor[(960), float32]) -> (Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) {
    %928 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
    %929 = %928.0;
    %930 = cast(%var_2612, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
    %931 = shape_of(%929, dtype="int32") /* ty=Tensor[(3), int32] */;
    %932 = cast(%929, dtype="bool") /* ty=Tensor[(9, 9, 11), bool] */;
    %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %934 = cast(%var_2631, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %935 = cast(%var_2632, dtype="float32") /* ty=Tensor[(960), float32] */;
    %936 = cast(%var_2631, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %937 = cast(%var_2631, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %938 = reshape(%934, newshape=[180, 12]) /* ty=Tensor[(180, 12), float64] */;
    %939 = reshape(%935, newshape=[10, 96]) /* ty=Tensor[(10, 96), float32] */;
    %940 = reshape(%936, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %941 = reshape(%937, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %942 = @func_1203(%938, %939, %940, %941) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(10, 12, 8), uint32], Tensor[(10, 96), bool], Tensor[(180, 12), int8], Tensor[(180, 12), float64], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), int32], Tensor[(15, 16, 9), bool], Tensor[(9, 9, 11), float64], Tensor[(180, 12), bool]) */;
    %943 = cast(%var_2631, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %944 = reshape(%943, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
    %945 = logical_or(%932, %933) /* ty=Tensor[(9, 9, 11), bool] */;
    %946 = %942.1;
    %947 = @func_2273() /* ty=Tensor[(15, 9), float64] */;
    %948 = @func_2076(%944) /* ty=Tensor[(180, 12), float32] */;
    (%945, %946, %var_2631, %var_2632, %947, %948)
  };
  %949(%var_2660, %var_2661, %var_2662) /* ty=(Tensor[(9, 9, 11), bool], Tensor[(15, 16, 9), bool], Tensor[(2160), float64], Tensor[(960), float32], Tensor[(15, 9), float64], Tensor[(180, 12), float32]) */
}

def @func_7264(%var_7261: Tensor[(16, 12, 9), float32]) -> Tensor[(16, 12, 9), float32] {
  %950 = cast(%var_7261, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  log(%950) /* ty=Tensor[(16, 12, 9), float32] */
}

def @func_3696() -> (Tensor[(960), float32], Tensor[(960), float32]) {
  %954 = fn () -> (Tensor[(960), float32], Tensor[(960), float32]) {
    %951 = @func_2789() /* ty=(Tensor[(360, 6), float64], Tensor[(180, 12), float32], Tensor[(960), float32], Tensor[(891), int32], Tensor[(960), float32]) */;
    %952 = @func_2760() /* ty=Tensor[(960), float32] */;
    %953 = %951.4;
    (%952, %953)
  };
  %954() /* ty=(Tensor[(960), float32], Tensor[(960), float32]) */
}

def @func_4160() -> Tensor[(15, 9), float64] {
  %956 = fn () -> Tensor[(15, 9), float64] {
    %955 = @func_3526() /* ty=(Tensor[(15, 9), float64], Tensor[(9, 9, 11), float32]) */;
    %955.0
  };
  %956() /* ty=Tensor[(15, 9), float64] */
}

def @func_3165() -> (Tensor[(9, 9, 11), float32],) {
  @func_3163() /* ty=(Tensor[(9, 9, 11), float32],) */
}

def @func_4677() -> (Tensor[(15, 9), float64],) {
  %957 = @func_4159() /* ty=Tensor[(15, 9), float64] */;
  (%957,)
}

def @func_1932(%var_1930: Tensor[(1, 1, 3), float64], %var_1931: Tensor[(9, 9, 3), float64]) -> (Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) {
  @func_1928(%var_1930, %var_1931) /* ty=(Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(9, 9, 3), float64]) */
}

def @func_6494() -> (Tensor[(182), int16],) {
  @func_6492() /* ty=(Tensor[(182), int16],) */
}

def @func_7286() -> Tensor[(960), float32] {
  @func_5348() /* ty=Tensor[(960), float32] */
}

def @func_5157(%var_5155: Tensor[(160), int64]) -> (Tensor[(546, 2), float64], Tensor[(160), int64], Tensor[(960), float32], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float64]) {
  @func_5154(%var_5155) /* ty=(Tensor[(546, 2), float64], Tensor[(160), int64], Tensor[(960), float32], Tensor[(9, 9, 11), float64], Tensor[(9, 9, 11), float32], Tensor[(9, 9, 11), float64]) */
}

def @func_882(%var_880: Tensor[(13, 1, 12), float32]) -> (Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) {
  @func_879(%var_880) /* ty=(Tensor[(13, ?, 12), uint32], Tensor[(15, 16, 9), bool], Tensor[(15, 9), float64], Tensor[(2160), float64]) */
}

def @func_7421(%var_7420: Tensor[(80), int8]) -> (Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(2400), uint32], Tensor[(180, 12), float32], Tensor[(990, 80), bool], Tensor[(182), int16]) {
  %975 = fn (%var_7387: Tensor[(80), int8]) -> (Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(2400), uint32], Tensor[(180, 12), float32], Tensor[(990, 80), bool], Tensor[(182), int16]) {
    %958 = @func_5840() /* ty=Tensor[(9, 9, 11), float64] */;
    %959 = cast(%958, dtype="int32") /* ty=Tensor[(9, 9, 11), int32] */;
    %960 = reshape(%959, newshape=[891]) /* ty=Tensor[(891), int32] */;
    %961 = @func_6235(%960) /* ty=(Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(1080, 2), float64], Tensor[(960), float32], Tensor[(891), float32], Tensor[(891), int32], Tensor[(9, 9, 11), uint8]) */;
    %962 = cast(%var_7387, dtype="int8") /* ty=Tensor[(80), int8] */;
    %963 = cast(meta[relay.Constant][50] /* ty=Tensor[(990, 1), uint8] */, dtype="uint8") /* ty=Tensor[(990, 1), uint8] */;
    %964 = reshape(%962, newshape=[8, 1, 10]) /* ty=Tensor[(8, 1, 10), int8] */;
    %965 = reshape(%963, newshape=[990]) /* ty=Tensor[(990), uint8] */;
    %966 = @func_6576(%964, %965) /* ty=(Tensor[(8, 8, 10), int8], Tensor[(13, 6, 14), float64], Tensor[(1092), float64], Tensor[(2400), uint32], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) */;
    %967 = cast(meta[relay.Constant][50] /* ty=Tensor[(990, 1), uint8] */, dtype="bool") /* ty=Tensor[(990, 1), bool] */;
    %968 = cast(%var_7387, dtype="bool") /* ty=Tensor[(80), bool] */;
    %969 = @func_4132() /* ty=(Tensor[(180, 12), float32], Tensor[(182), int16], Tensor[(2400), uint32]) */;
    %970 = %961.0;
    %971 = %966.3;
    %972 = @func_2298() /* ty=Tensor[(180, 12), float32] */;
    %973 = greater_equal(%967, %968) /* ty=Tensor[(990, 80), bool] */;
    %974 = %969.1;
    (%958, %970, %971, %972, %973, %974)
  };
  %975(%var_7420) /* ty=(Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(2400), uint32], Tensor[(180, 12), float32], Tensor[(990, 80), bool], Tensor[(182), int16]) */
}

def @func_7736(%var_7684: Tensor[(135), float64], %var_7685: Tensor[(2160), float64], %var_7698: Tensor[(891), float32]) -> (Tensor[(960), float32], Tensor[(135), float64], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(891), uint64], Tensor[(9, 9, 11), float32], Tensor[(960), float32]) {
  %976 = cast(%var_7684, dtype="float64") /* ty=Tensor[(135), float64] */;
  %977 = cast(%var_7685, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %978 = cast(meta[relay.Constant][51] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %979 = reshape(%976, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %980 = reshape(%977, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %981 = reshape(%978, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
  %982 = @func_1880(%979, %980, %981) /* ty=(Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(2160), float64], Tensor[(180, 12), float32], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool]) */;
  %983 = cast(%var_7698, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %984 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(891), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %985 = cast(meta[relay.Constant][51] /* ty=Tensor[(891), float32] */, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %987 = @func_7321() /* ty=(Tensor[(9, 9, 11), float32],) */;
  %988 = @func_2760() /* ty=Tensor[(960), float32] */;
  %989 = %982.1;
  %990 = bitwise_and(%985, %986) /* ty=Tensor[(891), uint64] */;
  %991 = %987.0;
  %992 = @func_3986() /* ty=Tensor[(960), float32] */;
  (%988, %989, %var_7684, %var_7685, %990, %991, %992)
}

def @func_7659(%var_7657: Tensor[(135), float64], %var_7658: Tensor[(256), uint8]) -> (Tensor[(180, 12), float32], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float32], Tensor[(891), float32], Tensor[(256), uint8]) {
  %1008 = fn (%var_7626: Tensor[(135), float64], %var_7652: Tensor[(256), uint8]) -> (Tensor[(180, 12), float32], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float32], Tensor[(891), float32], Tensor[(256), uint8]) {
    %993 = cast(%var_7626, dtype="float64") /* ty=Tensor[(135), float64] */;
    %994 = reshape(%993, newshape=[135]) /* ty=Tensor[(135), float64] */;
    %995 = @func_1437(%994) /* ty=(Tensor[(9, 9, 11), float32], Tensor[(2160), float64], Tensor[(15, 16, 9), bool], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(480, 2), float64], Tensor[(10, 12, 8), uint32]) */;
    %996 = %995.4;
    %997 = cast(%996, dtype="float32") /* ty=Tensor[(13, ?, 12), float32] */;
    %998 = cast(meta[relay.Constant][52] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
    %999 = cast(%var_7652, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %1000 = cast(meta[relay.Constant][52] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
    %1001 = reshape(%998, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
    %1002 = reshape(%999, newshape=[256]) /* ty=Tensor[(256), uint8] */;
    %1003 = reshape(%1000, newshape=[9, 9, 11]) /* ty=Tensor[(9, 9, 11), float32] */;
    %1004 = @func_5562(%1001, %1002, %1003) /* ty=(Tensor[(9, 9, 11), int64], Tensor[(15, 9), float64], Tensor[(15, 16, 9), bool], Tensor[(256), uint8], Tensor[(9, 9, 11), float32]) */;
    %1005 = @func_1525() /* ty=Tensor[(180, 12), float32] */;
    %1006 = erf(%997) /* ty=Tensor[(13, ?, 12), float32] */;
    %1007 = %1004.4;
    (%1005, %var_7626, %1006, %1007, meta[relay.Constant][52] /* ty=Tensor[(891), float32] */, %var_7652)
  };
  %1008(%var_7657, %var_7658) /* ty=(Tensor[(180, 12), float32], Tensor[(135), float64], Tensor[(13, ?, 12), float32], Tensor[(9, 9, 11), float32], Tensor[(891), float32], Tensor[(256), uint8]) */
}

def @func_4058() -> Tensor[(15, 9), float64] {
  @func_4056() /* ty=Tensor[(15, 9), float64] */
}

def @func_5071() -> Tensor[(180, 12), float32] {
  @func_5069() /* ty=Tensor[(180, 12), float32] */
}

def @func_5240(%var_5228: Tensor[(990), uint8]) -> (Tensor[(160), int64], Tensor[(180, 12), bool], Tensor[(990), uint8]) {
  %1009 = @func_3859() /* ty=(Tensor[(160), int64],) */;
  %1010 = cast(%var_5228, dtype="uint8") /* ty=Tensor[(990), uint8] */;
  %1011 = reshape(%1010, newshape=[990]) /* ty=Tensor[(990), uint8] */;
  %1012 = @func_3665(%1011) /* ty=(Tensor[(15, 9), float64], Tensor[(180, 12), bool], Tensor[(990), uint8], Tensor[(2160), bool]) */;
  %1013 = %1009.0;
  %1014 = %1012.1;
  (%1013, %1014, %var_5228)
}

def @func_5451() -> Tensor[(15, 9), float64] {
  @func_5449() /* ty=Tensor[(15, 9), float64] */
}

def @func_1370() -> (Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float32], Tensor[(14, 13, 1), bool], int16, Tensor[(182), int16]) {
  %1015 = @func_1100() /* ty=(Tensor[(9, 9, 11), int32], Tensor[(9, 9, 11), float64]) */;
  %1016 = cast(meta[relay.Constant][53] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %1017 = cast(meta[relay.Constant][54] /* ty=Tensor[(182), int16] */, dtype="int16") /* ty=Tensor[(182), int16] */;
  %1018 = reshape(%1016, newshape=[]) /* ty=int16 */;
  %1019 = reshape(%1017, newshape=[14, 13, 1]) /* ty=Tensor[(14, 13, 1), int16] */;
  %1020 = @func_1023(%1018, %1019) /* ty=(Tensor[(14, 13, 1), int16], Tensor[(14, 13, 1), bool]) */;
  %1021 = %1015.0;
  %1022 = @func_1253() /* ty=Tensor[(9, 9, 11), float32] */;
  %1023 = %1020.1;
  (%1021, %1022, %1023, meta[relay.Constant][53] /* ty=int16 */, meta[relay.Constant][54] /* ty=Tensor[(182), int16] */)
}

def @func_6368() -> (Tensor[(9, 9, 11), float32],) {
  @func_6366() /* ty=(Tensor[(9, 9, 11), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen480/build/output.py", line 2734, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:22:13] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

