==========mod==========
#[version = "0.0.5"]
def @func_92(%var_83: Tensor[(13, 10, 13), float32]) -> (Tensor[(13, 10, 13), float32],) {
  %0 = cast(%var_83, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %1 = acos(%0) /* ty=Tensor[(13, 10, 13), float32] */;
  (%1,)
}

def @func_2942() -> (Tensor[(2, 10, 16), float64],) {
  %2 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %3 = %2.1;
  (%3,)
}

def @func_2060() -> Tensor[(2, 10, 16), float64] {
  %4 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %4.0
}

def @func_3897(%var_3857: Tensor[(4, 11, 10), uint64], %var_3858: Tensor[(4, 11, 10), uint64]) -> (Tensor[(4, 11, 10), uint64], Tensor[(4, 11, 10), float64]) {
  %5 = cast(%var_3858, dtype="uint64") /* ty=Tensor[(4, 11, 10), uint64] */;
  %6 = shape_of(%var_3857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_3857, dtype="uint64") /* ty=Tensor[(4, 11, 10), uint64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %9 = cast(%var_3857, dtype="float64") /* ty=Tensor[(4, 11, 10), float64] */;
  %10 = bitwise_or(%7, %8) /* ty=Tensor[(4, 11, 10), uint64] */;
  %11 = erf(%9) /* ty=Tensor[(4, 11, 10), float64] */;
  (%10, %11)
}

def @func_5253(%var_5226: Tensor[(2, 10, 16), float64], %var_5247: Tensor[(120), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(13, 10, 13), float32], Tensor[(120), float32], float64, Tensor[(576), bool]) {
  %12 = @func_5215() /* ty=Tensor[(2, 10, 16), float64] */;
  %13 = cast(%var_5226, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %18 = reshape(%17, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %19 = @func_4030(%18) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(1690), float32]) */;
  %20 = cast(%var_5247, dtype="float32") /* ty=Tensor[(120), float32] */;
  %21 = cast(4.68801f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %23 = reshape(%20, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
  %24 = reshape(%21, newshape=[]) /* ty=float64 */;
  %25 = reshape(%22, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
  %26 = @func_480(%23, %24, %25) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
  %27 = less(%15, %16) /* ty=Tensor[(2, 10, 16), bool] */;
  %28 = %19.4;
  %29 = %26.1;
  (%27, %28, meta[relay.Constant][0] /* ty=Tensor[(864), float32] */, %29, %var_5247, 4.68801f64 /* ty=float64 */, meta[relay.Constant][1] /* ty=Tensor[(576), bool] */)
}

def @func_7134() -> Tensor[(2, 10, 16), float64] {
  @func_6759() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_480(%var_448: Tensor[(10, 3, 4), float32], %var_461: float64, %var_466: Tensor[(1, 576), bool]) -> (Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) {
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 3, 4), float32] */, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %31 = shape_of(%var_448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_448, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %34 = cast(%var_461, dtype="float64") /* ty=float64 */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %36 = reshape(%34, newshape=[]) /* ty=float64 */;
  %37 = reshape(%35, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %38 = @func_131(%36, %37) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %39 = cast(%var_466, dtype="bool") /* ty=Tensor[(1, 576), bool] */;
  %40 = reshape(%39, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
  %41 = @func_191(%40) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %43 = log2(%42) /* ty=Tensor[(10, 3, 4), float32] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %45 = equal(%32, %33) /* ty=Tensor[(10, 3, 4), bool] */;
  %46 = %38.1;
  %47 = %41.0;
  %48 = acos(%44) /* ty=Tensor[(10, 3, 4), float32] */;
  (%45, %46, %var_461, meta[relay.Constant][3] /* ty=Tensor[(1690), float32] */, %47, %var_466, %48)
}

def @func_4699(%var_4646: Tensor[(294), uint16], %var_4652: Tensor[(14, 3, 7), uint16], %var_4692: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(294), uint16], Tensor[(14, 3, 7), float64], Tensor[(14, 3, 7), float32], Tensor[(14, 3, 7), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
  %49 = cast(%var_4646, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %50 = reshape(%49, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint16] */;
  %51 = @func_3604(%50) /* ty=(Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %52 = %51.0;
  %53 = cast(%var_4652, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %57 = cast(%var_4652, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
  %58 = cast(%var_4652, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
  %59 = @func_4514() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %60 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %61 = cast(%var_4692, dtype="bool") /* ty=Tensor[(576), bool] */;
  %62 = reshape(%61, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %63 = @func_3211(%62) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %64 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  %65 = maximum(%55, %56) /* ty=Tensor[(14, 3, 7), float64] */;
  %66 = exp(%57) /* ty=Tensor[(14, 3, 7), float32] */;
  %67 = atan(%58) /* ty=Tensor[(14, 3, 7), float32] */;
  %68 = %59.1;
  %69 = %60.0;
  %70 = %63.2;
  (%64, %var_4646, %65, %66, %67, %68, %69, %70, %var_4692)
}

def @func_3679() -> (Tensor[(2, 10, 16), float64],) {
  %71 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %72 = %71.0;
  (%72,)
}

def @func_4030(%var_4025: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(1690), float32]) {
  %73 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %74 = cast(%var_4025, dtype="float32") /* ty=Tensor[(864), float32] */;
  %75 = cast(%var_4025, dtype="float32") /* ty=Tensor[(864), float32] */;
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %77 = reshape(%74, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %78 = reshape(%75, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %79 = reshape(%76, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %80 = @func_355(%77, %78, %79) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %81 = %73.1;
  %82 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  %83 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
  %84 = @func_3951() /* ty=Tensor[(2, 10, 16), float64] */;
  %85 = %80.3;
  (%81, %82, %83, %84, %85, %var_4025, meta[relay.Constant][4] /* ty=Tensor[(1690), float32] */)
}

def @func_6115() -> (Tensor[(2, 10, 16), float64],) {
  %86 = @func_3411() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %87 = %86.1;
  (%87,)
}

def @func_1986() -> (Tensor[(2, 10, 16), float64],) {
  %88 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %89 = %88.0;
  (%89,)
}

def @func_7422() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %90 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %91 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
  %92 = %90.0;
  (%91, %92)
}

def @func_1470(%var_1398: Tensor[(12, 14, 12), float64], %var_1416: Tensor[(1690), float32], %var_1429: Tensor[(576), bool], %var_1438: float64) -> (Tensor[(864), float32], Tensor[(1690), int32], Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(14, 13, 1690), bool], Tensor[(14, 13, 1690), bool], Tensor[(13, 10, 13), float32], Tensor[(12, 14, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(1690), float32]) {
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %95 = cast(%var_1416, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %96 = reshape(%93, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %97 = reshape(%94, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %98 = reshape(%95, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %99 = @func_355(%96, %97, %98) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %100 = %99.1;
  %101 = cast(%100, dtype="int32") /* ty=Tensor[(13, 10, 13), int32] */;
  %102 = shape_of(%var_1416, dtype="int32") /* ty=Tensor[(1), int32] */;
  %103 = cast(%var_1416, dtype="int32") /* ty=Tensor[(1690), int32] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?), int32] */;
  %105 = cast(%var_1429, dtype="bool") /* ty=Tensor[(576), bool] */;
  %106 = reshape(%105, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
  %107 = @func_191(%106) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %108 = cast(%var_1438, dtype="float64") /* ty=float64 */;
  %109 = cast(%100, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %110 = reshape(%108, newshape=[]) /* ty=float64 */;
  %111 = reshape(%109, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %112 = @func_131(%110, %111) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %113 = cast(%var_1438, dtype="float64") /* ty=float64 */;
  %114 = cast(%var_1416, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %115 = reshape(%113, newshape=[]) /* ty=float64 */;
  %116 = reshape(%114, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %117 = @func_131(%115, %116) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %118 = cast(%var_1438, dtype="float64") /* ty=float64 */;
  %119 = cast(%var_1416, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %120 = reshape(%118, newshape=[]) /* ty=float64 */;
  %121 = reshape(%119, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %122 = @func_131(%120, %121) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %123 = cast(%var_1398, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %124 = sinh(%123) /* ty=Tensor[(12, 14, 12), float64] */;
  %125 = cast(%124, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %126 = cast(%var_1438, dtype="bool") /* ty=bool */;
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %129 = cast(%100, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %130 = reshape(%127, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %131 = reshape(%128, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %132 = reshape(%129, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %133 = @func_355(%130, %131, %132) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %134 = cast(%var_1429, dtype="bool") /* ty=Tensor[(576), bool] */;
  %135 = reshape(%134, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
  %136 = @func_191(%135) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %137 = logical_xor(%103, %104) /* ty=Tensor[(1690), int32] */;
  %138 = %107.2;
  %139 = %112.2;
  %140 = %117.2;
  %141 = %122.1;
  %142 = logical_and(%125, %126) /* ty=Tensor[(12, 14, 12), bool] */;
  %143 = %133.0;
  %144 = %136.3;
  (meta[relay.Constant][5] /* ty=Tensor[(864), float32] */, %137, %138, %var_1429, %139, %140, %141, %142, %143, %144)
}

def @func_3778() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %145 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %146 = @func_2942() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %147 = %145.0;
  %148 = %146.0;
  %149 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
  (%147, %148, %149)
}

def @func_9722(%var_9716: Tensor[(2, 15, 3), float64]) -> (Tensor[(2, 15, 3), float64],) {
  %150 = cast(%var_9716, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %151 = log10(%150) /* ty=Tensor[(2, 15, 3), float64] */;
  (%151,)
}

def @func_4886(%var_4878: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  %152 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %153 = cast(%var_4878, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %154 = reshape(%153, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %155 = @func_3145(%154) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %156 = %152.0;
  %157 = %155.0;
  (%156, %157, %var_4878)
}

def @func_10445() -> (Tensor[(2, 10, 16), float64],) {
  %158 = @func_3778() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %159 = %158.1;
  (%159,)
}

def @func_9964() -> Tensor[(2, 10, 16), float64] {
  %160 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %160.0
}

def @func_3640() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %161 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %162 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  %163 = %161.1;
  (%162, %163)
}

def @func_2074() -> (Tensor[(2, 10, 16), float64],) {
  %164 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  (%164,)
}

def @func_4463() -> (Tensor[(2, 10, 16), float64],) {
  %165 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %166 = %165.1;
  (%166,)
}

def @func_8401(%var_8385: Tensor[(14, 4), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(14, 4), bool]) {
  %167 = cast(%var_8385, dtype="bool") /* ty=Tensor[(14, 4), bool] */;
  %168 = cast(%var_8385, dtype="bool") /* ty=Tensor[(14, 4), bool] */;
  %169 = reshape(%167, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %170 = reshape(%168, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %171 = @func_5295(%169, %170) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) */;
  %172 = @func_3819() /* ty=Tensor[(2, 10, 16), float64] */;
  %173 = %171.1;
  (%172, %173, %var_8385)
}

def @func_4571() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) {
  %174 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
  %175 = %174.0;
  %176 = cast(%175, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %177 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  %178 = sin(%176) /* ty=Tensor[(2, 10, 16), float32] */;
  (%177, %178)
}

def @func_9756(%var_9751: float32, %var_9752: Tensor[(3, 10, 1), float32]) -> Tensor[(3, 10, 1), float32] {
  %179 = cast(%var_9751, dtype="float32") /* ty=float32 */;
  %180 = cast(%var_9752, dtype="float32") /* ty=Tensor[(3, 10, 1), float32] */;
  power(%179, %180) /* ty=Tensor[(3, 10, 1), float32] */
}

def @func_10050() -> Tensor[(2, 10, 16), float64] {
  @func_2242() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_7039() -> (Tensor[(2, 10, 16), float64],) {
  %181 = @func_4514() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %182 = %181.0;
  (%182,)
}

def @func_4909(%var_4903: float32, %var_4904: Tensor[(9, 2, 4), float32]) -> Tensor[(9, 2, 4), bool] {
  %183 = cast(%var_4903, dtype="bool") /* ty=bool */;
  %184 = cast(%var_4904, dtype="bool") /* ty=Tensor[(9, 2, 4), bool] */;
  equal(%183, %184) /* ty=Tensor[(9, 2, 4), bool] */
}

def @func_10832() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(6, 12, 4), float32]) {
  %185 = @func_8178() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %186 = @func_8154() /* ty=(Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) */;
  %187 = %185.0;
  %188 = @func_6712() /* ty=Tensor[(2, 10, 16), float64] */;
  %189 = %186.0;
  (%187, %188, %189)
}

def @func_7554() -> (Tensor[(2, 10, 16), float64],) {
  %190 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %191 = %190.1;
  (%191,)
}

def @func_9301() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 130), bool]) {
  %192 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %193 = @func_3778() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %194 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 130), float32] */, dtype="float32") /* ty=Tensor[(13, 130), float32] */;
  %195 = reshape(%194, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %196 = @func_92(%195) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="bool") /* ty=Tensor[(13, 10, 13), bool] */;
  %199 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(13, 130), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %200 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 130), float32] */, dtype="bool") /* ty=Tensor[(13, 130), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %202 = %192.0;
  %203 = %193.0;
  %204 = less(%200, %201) /* ty=Tensor[(13, 130), bool] */;
  (%202, %203, %204)
}

def @func_5591() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) {
  %205 = @func_5180() /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %206 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %207 = cast(9.65901f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %208 = reshape(%207, newshape=[]) /* ty=float64 */;
  %209 = @func_2920(%208) /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) */;
  %210 = %205.1;
  %211 = %206.0;
  %212 = %209.2;
  (%210, %211, %212, 9.65901f64 /* ty=float64 */)
}

def @func_10213() -> Tensor[(2, 10, 16), bool] {
  %213 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
  %213.1
}

def @func_8894(%var_8852: Tensor[(1690), float32], %var_8881: float64) -> (Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(16, 2, 13), float64], float64, Tensor[(375), uint32], Tensor[(2, 10, 16), float64]) {
  %214 = @func_6298() /* ty=(Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
  %215 = cast(%var_8852, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %216 = reshape(%215, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %217 = @func_3145(%216) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %218 = cast(%var_8852, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %219 = cast(%var_8881, dtype="float64") /* ty=float64 */;
  %220 = cast(meta[relay.Constant][7] /* ty=Tensor[(375), uint32] */, dtype="uint32") /* ty=Tensor[(375), uint32] */;
  %221 = %217.1;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %223 = reshape(%219, newshape=[]) /* ty=float64 */;
  %224 = reshape(%220, newshape=[375]) /* ty=Tensor[(375), uint32] */;
  %225 = reshape(%222, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %226 = @func_7784(%223, %224, %225) /* ty=(Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) */;
  %227 = cast(%var_8852, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %228 = reshape(%227, newshape=[169, 10]) /* ty=Tensor[(169, 10), float32] */;
  %229 = @func_7311(%228) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), int8]) */;
  %230 = %214.4;
  %231 = atanh(%218) /* ty=Tensor[(1690), float64] */;
  %232 = %226.0;
  %233 = %229.0;
  (%230, %221, %231, %232, %var_8881, meta[relay.Constant][7] /* ty=Tensor[(375), uint32] */, %233)
}

def @func_3145(%var_3129: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
  %234 = @func_2563() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %235 = cast(%var_3129, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %236 = reshape(%235, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %237 = @func_92(%236) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %238 = %234.0;
  %239 = %237.0;
  (%238, %239, %var_3129)
}

def @func_4724() -> (Tensor[(2, 10, 16), float64],) {
  %240 = @func_4112() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64]) */;
  %241 = %240.0;
  (%241,)
}

def @func_5549(%var_5510: bool, %var_5511: Tensor[(7, 4, 3), bool]) -> (Tensor[(7, 4, 3), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  %242 = cast(%var_5510, dtype="bool") /* ty=bool */;
  %243 = cast(%var_5511, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %244 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %246 = reshape(%245, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %247 = @func_5071(%246) /* ty=(Tensor[(2, 10, 16), bool],) */;
  %248 = cast(meta[relay.Constant][8] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %249 = reshape(%248, newshape=[4, 11, 6]) /* ty=Tensor[(4, 11, 6), float32] */;
  %250 = @func_4246(%249) /* ty=(Tensor[(4, 11, 6), float32],) */;
  %251 = logical_and(%242, %243) /* ty=Tensor[(7, 4, 3), bool] */;
  %252 = %247.0;
  %253 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  %254 = @func_3819() /* ty=Tensor[(2, 10, 16), float64] */;
  %255 = %250.0;
  (%251, %244, %252, %253, %254, %255, meta[relay.Constant][8] /* ty=Tensor[(264), float32] */)
}

def @func_7311(%var_7300: Tensor[(169, 10), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), int8]) {
  %256 = cast(%var_7300, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
  %257 = reshape(%256, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %258 = @func_3145(%257) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %259 = %258.1;
  %260 = cast(%var_7300, dtype="int8") /* ty=Tensor[(169, 10), int8] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="int8") /* ty=Tensor[(13, 10, 13), int8] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %264 = @func_6738() /* ty=Tensor[(2, 10, 16), float64] */;
  %265 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  %266 = add(%262, %263) /* ty=Tensor[(13, 10, 13), int8] */;
  (%264, %265, %266)
}

def @func_10708() -> Tensor[(2, 10, 16), bool] {
  @func_4979() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_10074() -> (Tensor[(2, 10, 16), float64],) {
  %267 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %268 = %267.0;
  (%268,)
}

def @func_4840() -> (Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) {
  %269 = @func_3411() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %270 = cast(meta[relay.Constant][9] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
  %271 = reshape(%270, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float64] */;
  %272 = @func_1671(%271) /* ty=(Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) */;
  %273 = %269.0;
  %274 = %272.2;
  (%273, %274, meta[relay.Constant][9] /* ty=Tensor[(980), float64] */)
}

def @func_6623(%var_6602: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  %275 = @func_3640() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %276 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %277 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %278 = cast(meta[relay.Constant][10] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %279 = reshape(%278, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %280 = @func_3211(%279) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %281 = %280.1;
  %282 = cast(%var_6602, dtype="float64") /* ty=Tensor[(576), float64] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(1), int32] */;
  %284 = cast(%281, dtype="float64") /* ty=Tensor[(576), float64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?), float64] */;
  %286 = cast(meta[relay.Constant][11] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %287 = reshape(%286, newshape=[4, 11, 6]) /* ty=Tensor[(4, 11, 6), float32] */;
  %288 = @func_4246(%287) /* ty=(Tensor[(4, 11, 6), float32],) */;
  %289 = %275.1;
  %290 = %276.0;
  %291 = %277.0;
  %292 = divide(%284, %285) /* ty=Tensor[(576), float64] */;
  %293 = %288.0;
  (%289, meta[relay.Constant][10] /* ty=Tensor[(576), bool] */, %290, %291, %292, %293, meta[relay.Constant][11] /* ty=Tensor[(264), float32] */)
}

def @func_3046() -> (Tensor[(2, 10, 16), float64],) {
  %294 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  (%294,)
}

def @func_4246(%var_4242: Tensor[(4, 11, 6), float32]) -> (Tensor[(4, 11, 6), float32],) {
  %295 = cast(%var_4242, dtype="float32") /* ty=Tensor[(4, 11, 6), float32] */;
  %296 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(4, 11, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 6), float32] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %299 = mod(%297, %298) /* ty=Tensor[(4, 11, 6), float32] */;
  (%299,)
}

def @func_5978(%var_5971: Tensor[(15, 11, 1), float64]) -> (Tensor[(15, 11, 1), float64],) {
  %300 = @func_5591() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) */;
  %301 = %300.3;
  %302 = cast(%301, dtype="float64") /* ty=float64 */;
  %303 = cast(%var_5971, dtype="float64") /* ty=Tensor[(15, 11, 1), float64] */;
  %304 = divide(%302, %303) /* ty=Tensor[(15, 11, 1), float64] */;
  (%304,)
}

def @func_6961(%var_6948: Tensor[(15, 10, 12), uint16], %var_6949: Tensor[(15, 10, 12), uint16]) -> (Tensor[(15, 10, 12), bool], Tensor[(120), float32], Tensor[(576), bool]) {
  %305 = cast(%var_6949, dtype="bool") /* ty=Tensor[(15, 10, 12), bool] */;
  %306 = shape_of(%var_6948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%var_6948, dtype="bool") /* ty=Tensor[(15, 10, 12), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %309 = cast(meta[relay.Constant][13] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %310 = reshape(%309, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %311 = @func_2020(%310) /* ty=(Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) */;
  %312 = less(%307, %308) /* ty=Tensor[(15, 10, 12), bool] */;
  %313 = %311.0;
  (%312, %313, meta[relay.Constant][13] /* ty=Tensor[(576), bool] */)
}

def @func_10645(%var_10630: Tensor[(72), float32], %var_10639: Tensor[(264), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(9, 2, 4), bool], float32, Tensor[(72), float32], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  %314 = @func_10445() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %315 = @func_9920() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %316 = cast(-6.6326f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %317 = cast(%var_10630, dtype="float32") /* ty=Tensor[(72), float32] */;
  %318 = reshape(%316, newshape=[]) /* ty=float32 */;
  %319 = reshape(%317, newshape=[9, 2, 4]) /* ty=Tensor[(9, 2, 4), float32] */;
  %320 = cast(%var_10639, dtype="float32") /* ty=Tensor[(264), float32] */;
  %321 = reshape(%320, newshape=[4, 11, 6]) /* ty=Tensor[(4, 11, 6), float32] */;
  %322 = @func_4246(%321) /* ty=(Tensor[(4, 11, 6), float32],) */;
  %323 = %314.0;
  %324 = %315.3;
  %325 = @func_4909(%318, %319) /* ty=Tensor[(9, 2, 4), bool] */;
  %326 = %322.0;
  (%323, %324, %325, -6.6326f /* ty=float32 */, %var_10630, %326, %var_10639)
}

def @func_10909() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %327 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %328 = @func_8044() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %329 = %327.0;
  %330 = %328.0;
  %331 = @func_10109() /* ty=Tensor[(2, 10, 16), float64] */;
  (%329, %330, %331)
}

def @func_6432() -> (Tensor[(576), bool], Tensor[(1690), float32]) {
  %332 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %333 = @func_5180() /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %334 = %332.2;
  %335 = %333.2;
  (%334, %335)
}

def @func_6856() -> (Tensor[(2, 10, 16), float64],) {
  %336 = @func_6507() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %337 = %336.0;
  (%337,)
}

def @func_6697() -> Tensor[(2, 10, 16), float64] {
  %338 = @func_5895() /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(120), float32], Tensor[(1690), float32]) */;
  %338.0
}

def @func_11585() -> Tensor[(2, 10, 16), float64] {
  %339 = @func_7422() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %339.1
}

def @func_2101() -> Tensor[(2, 10, 16), float64] {
  %340 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %340.0
}

def @func_6024(%var_6014: Tensor[(169, 10), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(1690), float64], Tensor[(169, 10), float32]) {
  %341 = cast(%var_6014, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
  %342 = cast(%var_6014, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
  %343 = reshape(%341, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %344 = reshape(%342, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %345 = @func_3341(%343, %344) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) */;
  %346 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
  %347 = %345.2;
  (%346, %347, %var_6014)
}

def @func_2772() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) {
  %348 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %350 = reshape(%349, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %351 = @func_1567(%350) /* ty=Tensor[(2, 10, 16), int16] */;
  (%348, %351)
}

def @func_10475(%var_10455: Tensor[(5, 14, 1), float32], %var_10456: Tensor[(5, 14, 15), float32]) -> Tensor[(5, 14, 15), float32] {
  %352 = cast(%var_10455, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
  %353 = cast(%var_10456, dtype="float32") /* ty=Tensor[(5, 14, 15), float32] */;
  power(%352, %353) /* ty=Tensor[(5, 14, 15), float32] */
}

def @func_9058(%var_8996: Tensor[(576, 1), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576, ?), bool], Tensor[(2, 10, 16), int16]) {
  %354 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %355 = @func_7554() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %356 = cast(%var_8996, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
  %357 = reshape(%356, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %358 = @func_3211(%357) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %359 = @func_7341() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %360 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %361 = cast(%var_8996, dtype="float32") /* ty=Tensor[(576, 1), float32] */;
  %362 = acos(%361) /* ty=Tensor[(576, 1), float32] */;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
  %364 = sigmoid(%363) /* ty=Tensor[(576, 1), float64] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
  %366 = sqrt(%365) /* ty=Tensor[(576, 1), float64] */;
  %367 = cast(%362, dtype="uint32") /* ty=Tensor[(576, 1), uint32] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(2), int32] */;
  %369 = cast(%366, dtype="uint32") /* ty=Tensor[(576, 1), uint32] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %371 = bitwise_or(%369, %370) /* ty=Tensor[(576, ?), uint32] */;
  %372 = cast(%371, dtype="bool") /* ty=Tensor[(576, ?), bool] */;
  %373 = shape_of(%366, dtype="int32") /* ty=Tensor[(2), int32] */;
  %374 = cast(%366, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %376 = @func_2772() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) */;
  %377 = %354.0;
  %378 = %355.0;
  %379 = %358.1;
  %380 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
  %381 = %359.0;
  %382 = %360.0;
  %383 = less_equal(%374, %375) /* ty=Tensor[(576, ?), bool] */;
  %384 = %376.1;
  (%377, %378, %379, %380, %381, %382, %383, %384)
}

def @func_9920() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %385 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %386 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %387 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %388 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %389 = %385.0;
  %390 = @func_5436() /* ty=Tensor[(2, 10, 16), float64] */;
  %391 = %386.1;
  %392 = %387.0;
  %393 = %388.0;
  (%389, %390, %391, %392, %393)
}

def @func_6507() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %394 = @func_3778() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %395 = @func_6315() /* ty=Tensor[(2, 10, 16), float64] */;
  %396 = %394.2;
  (%395, %396)
}

def @func_8178() -> (Tensor[(2, 10, 16), float64],) {
  %397 = @func_7108() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %398 = %397.0;
  (%398,)
}

def @func_2458() -> Tensor[(2, 10, 16), bool] {
  %399 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %400 = %399.0;
  %401 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 10, 16), float64] */, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%403, %404) /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_191(%var_167: Tensor[(12, 3, 16), bool]) -> (Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
  %405 = cast(%var_167, dtype="bool") /* ty=Tensor[(12, 3, 16), bool] */;
  %406 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 3, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 3, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 16), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 3, 16), bool] */, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %410 = cast(meta[relay.Constant][16] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %411 = reshape(%410, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %412 = @func_92(%411) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %413 = logical_or(%407, %408) /* ty=Tensor[(12, 3, 16), bool] */;
  %414 = atanh(%409) /* ty=Tensor[(12, 3, 16), float32] */;
  %415 = %412.0;
  (%413, %414, %415, meta[relay.Constant][16] /* ty=Tensor[(1690), float32] */)
}

def @func_10109() -> Tensor[(2, 10, 16), float64] {
  @func_5436() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_11054() -> Tensor[(2, 10, 16), bool] {
  @func_10708() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_11554() -> (Tensor[(2, 10, 16), float64],) {
  %416 = @func_6298() /* ty=(Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
  %417 = %416.3;
  (%417,)
}

def @func_4380() -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) {
  %418 = @func_3411() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %419 = cast(meta[relay.Constant][17] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %420 = reshape(%419, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %421 = @func_3145(%420) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %422 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %423 = %418.0;
  %424 = %421.1;
  %425 = %422.0;
  (%423, %424, meta[relay.Constant][17] /* ty=Tensor[(1690), float32] */, %425)
}

def @func_5413(%var_5399: Tensor[(1, 440), uint64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(11, 9, 10), float64], Tensor[(990), float64], float64, float64, Tensor[(4, 11, 10), float64], Tensor[(1, 440), float32], Tensor[(2, 10, 16), float64]) {
  %426 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %427 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
  %428 = cast(meta[relay.Constant][18] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %429 = reshape(%428, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), float64] */;
  %430 = @func_4963(%429) /* ty=(Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) */;
  %431 = cast(-8.59423f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %432 = reshape(%431, newshape=[]) /* ty=float64 */;
  %433 = @func_2920(%432) /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) */;
  %434 = cast(%var_5399, dtype="uint64") /* ty=Tensor[(1, 440), uint64] */;
  %435 = cast(%var_5399, dtype="uint64") /* ty=Tensor[(1, 440), uint64] */;
  %436 = reshape(%434, newshape=[4, 11, 10]) /* ty=Tensor[(4, 11, 10), uint64] */;
  %437 = reshape(%435, newshape=[4, 11, 10]) /* ty=Tensor[(4, 11, 10), uint64] */;
  %438 = @func_3897(%436, %437) /* ty=(Tensor[(4, 11, 10), uint64], Tensor[(4, 11, 10), float64]) */;
  %439 = %438.0;
  %440 = cast(%var_5399, dtype="float64") /* ty=Tensor[(1, 440), float64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="float64") /* ty=Tensor[(4, 11, 10), float64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %444 = cast(%var_5399, dtype="float32") /* ty=Tensor[(1, 440), float32] */;
  %445 = asinh(%444) /* ty=Tensor[(1, 440), float32] */;
  %446 = cast(%445, dtype="float32") /* ty=Tensor[(1, 440), float32] */;
  %447 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %448 = %426.0;
  %449 = %427.1;
  %450 = %430.2;
  %451 = %433.1;
  %452 = power(%442, %443) /* ty=Tensor[(4, 11, 10), float64] */;
  %453 = log10(%446) /* ty=Tensor[(1, 440), float32] */;
  %454 = %447.0;
  (%448, %449, %450, meta[relay.Constant][18] /* ty=Tensor[(990), float64] */, %451, -8.59423f64 /* ty=float64 */, %452, %453, %454)
}

def @func_2020(%var_2006: Tensor[(576), bool]) -> (Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) {
  %455 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="uint16") /* ty=Tensor[(2, 10, 16), uint16] */;
  %458 = cast(-3.29608f64 /* ty=float64 */, dtype="uint16") /* ty=uint16 */;
  %459 = cast(meta[relay.Constant][19] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %460 = cast(-3.29608f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %461 = cast(%var_2006, dtype="bool") /* ty=Tensor[(576), bool] */;
  %462 = reshape(%459, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
  %463 = reshape(%460, newshape=[]) /* ty=float64 */;
  %464 = reshape(%461, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
  %465 = @func_480(%462, %463, %464) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
  %466 = %465.5;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
  %468 = multiply(%457, %458) /* ty=Tensor[(2, 10, 16), uint16] */;
  %469 = cosh(%467) /* ty=Tensor[(1, 576), float64] */;
  (meta[relay.Constant][19] /* ty=Tensor[(120), float32] */, %var_2006, %468, %469)
}

def @func_4217(%var_4201: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(1690, 1), float32], Tensor[(1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %470 = cast(%var_4201, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %471 = cast(-9.56566f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %472 = reshape(%470, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %473 = reshape(%471, newshape=[]) /* ty=float64 */;
  %474 = @func_1839(%472, %473) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) */;
  %475 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %476 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %477 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %478 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  %479 = %474.2;
  %480 = %475.0;
  %481 = %476.0;
  %482 = %477.0;
  (%478, %479, %var_4201, -9.56566f64 /* ty=float64 */, %480, %481, %482)
}

def @func_5840() -> (Tensor[(2, 10, 16), float64],) {
  %483 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  (%483,)
}

def @func_8506(%var_8455: Tensor[(9, 13, 15), int32], %var_8456: Tensor[(9, 13, 15), int32]) -> (Tensor[(9, 13, 15), bool], Tensor[(9, 13, 15), float32], Tensor[(2, 10, 16), bool], Tensor[(9, 13, 15), int64]) {
  %484 = cast(%var_8456, dtype="int32") /* ty=Tensor[(9, 13, 15), int32] */;
  %485 = shape_of(%var_8455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_8455, dtype="int32") /* ty=Tensor[(9, 13, 15), int32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %488 = logical_xor(%486, %487) /* ty=Tensor[(9, 13, 15), int32] */;
  %489 = cast(%488, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %490 = shape_of(%var_8456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%var_8456, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = cast(%var_8455, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %494 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%488, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %497 = cast(%488, dtype="int64") /* ty=Tensor[(9, 13, 15), int64] */;
  %498 = shape_of(%var_8456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_8456, dtype="int64") /* ty=Tensor[(9, 13, 15), int64] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %501 = logical_or(%491, %492) /* ty=Tensor[(9, 13, 15), bool] */;
  %502 = add(%495, %496) /* ty=Tensor[(9, 13, 15), float32] */;
  %503 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  %504 = minimum(%499, %500) /* ty=Tensor[(9, 13, 15), int64] */;
  (%501, %502, %503, %504)
}

def @func_2734() -> Tensor[(2, 10, 16), float64] {
  %505 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %505.0
}

def @func_7341() -> (Tensor[(2, 10, 16), float64],) {
  %506 = @func_6298() /* ty=(Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
  %507 = %506.3;
  (%507,)
}

def @func_6899(%var_6871: Tensor[(1, 6, 8), float32]) -> (Tensor[(1, 6, 8), float32], Tensor[(2, 10, 16), float64]) {
  %508 = cast(%var_6871, dtype="float32") /* ty=Tensor[(1, 6, 8), float32] */;
  %509 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %510 = atan(%508) /* ty=Tensor[(1, 6, 8), float32] */;
  %511 = %509.1;
  (%510, %511)
}

def @func_2619(%var_2601: Tensor[(2, 10, 16), float64]) -> Tensor[(2, 10, 16), bool] {
  %512 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %513 = %512.0;
  %514 = cast(%var_2601, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%516, %517) /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_1490() -> (Tensor[(2, 10, 16), float64],) {
  %518 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %519 = rsqrt(%518) /* ty=Tensor[(2, 10, 16), float64] */;
  (%519,)
}

def @func_11325() -> Tensor[(2, 10, 16), float64] {
  %520 = @func_4463() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %520.0
}

def @func_6473() -> (Tensor[(2, 10, 16), float64],) {
  %521 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %522 = %521.1;
  (%522,)
}

def @func_9379() -> (Tensor[(576), bool],) {
  %523 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %524 = %523.2;
  (%524,)
}

def @func_6381(%var_6326: Tensor[(1, 576), bool], %var_6372: Tensor[(15, 576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(15, 576), uint8]) {
  %525 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %526 = cast(%var_6326, dtype="bool") /* ty=Tensor[(1, 576), bool] */;
  %527 = reshape(%526, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %528 = @func_3211(%527) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %529 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %530 = @func_2563() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %531 = cast(%var_6326, dtype="uint8") /* ty=Tensor[(1, 576), uint8] */;
  %532 = cast(%var_6372, dtype="uint8") /* ty=Tensor[(15, 576), uint8] */;
  %533 = %525.0;
  %534 = %528.0;
  %535 = %529.2;
  %536 = %530.0;
  %537 = left_shift(%531, %532) /* ty=Tensor[(15, 576), uint8] */;
  (%533, %534, %535, %536, %537)
}

def @func_11306() -> (Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool]) {
  %538 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
  %539 = @func_10213() /* ty=Tensor[(2, 10, 16), bool] */;
  %540 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
  %541 = %538.1;
  (%539, %540, %541)
}

def @func_9111() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %542 = @func_4148() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %543 = @func_7531() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) */;
  %544 = %542.1;
  %545 = %543.0;
  (%544, %545)
}

def @func_2563() -> (Tensor[(2, 10, 16), float64],) {
  %546 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %547 = %546.0;
  (%547,)
}

def @func_9215(%var_9128: Tensor[(3, 15, 14), float32], %var_9129: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(864), float32], Tensor[(169, 10), float32], Tensor[(2, 10, 16), float64], Tensor[(3, 15, 14), float32], Tensor[(2, 10, 16), float64]) {
  %548 = cast(%var_9129, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %549 = shape_of(%var_9128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%var_9128, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %552 = @func_9111() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %553 = cast(meta[relay.Constant][21] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %554 = cast(meta[relay.Constant][21] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %555 = cast(meta[relay.Constant][22] /* ty=Tensor[(169, 10), float32] */, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
  %556 = reshape(%553, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %557 = reshape(%554, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %558 = reshape(%555, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %559 = @func_355(%556, %557, %558) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %560 = %559.2;
  %561 = cast(%var_9129, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %562 = cast(%560, dtype="float32") /* ty=float32 */;
  %563 = @func_7554() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %564 = subtract(%550, %551) /* ty=Tensor[(3, 15, 14), float32] */;
  %565 = %552.0;
  %566 = mod(%561, %562) /* ty=Tensor[(3, 15, 14), float32] */;
  %567 = %563.0;
  (%564, meta[relay.Constant][21] /* ty=Tensor[(864), float32] */, meta[relay.Constant][22] /* ty=Tensor[(169, 10), float32] */, %565, %566, %567)
}

def @func_7784(%var_7753: float64, %var_7778: Tensor[(375), uint32], %var_7779: Tensor[(1690, 1), float32]) -> (Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) {
  %568 = cast(%var_7753, dtype="float64") /* ty=float64 */;
  %569 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 13), float64] */;
  %570 = cast(%var_7778, dtype="uint32") /* ty=Tensor[(375), uint32] */;
  %571 = cast(%var_7778, dtype="uint32") /* ty=Tensor[(375), uint32] */;
  %572 = cast(%var_7779, dtype="float32") /* ty=Tensor[(1690, 1), float32] */;
  %573 = reshape(%570, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint32] */;
  %574 = reshape(%571, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint32] */;
  %575 = reshape(%572, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %576 = @func_6835(%573, %574, %575) /* ty=(Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(5, 15, 5), bool]) */;
  %577 = subtract(%568, %569) /* ty=Tensor[(16, 2, 13), float64] */;
  %578 = %576.2;
  (%577, %578, %var_7778, %var_7779)
}

def @func_8011() -> (Tensor[(2, 10, 16), float64],) {
  %579 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  (%579,)
}

def @func_8154() -> (Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) {
  %580 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
  %581 = @func_6432() /* ty=(Tensor[(576), bool], Tensor[(1690), float32]) */;
  %582 = sinh(%580) /* ty=Tensor[(6, 12, 4), float32] */;
  %583 = %581.1;
  %584 = @func_5215() /* ty=Tensor[(2, 10, 16), float64] */;
  (%582, %583, %584)
}

def @func_3951() -> Tensor[(2, 10, 16), float64] {
  @func_2734() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_6077() -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
  %585 = cast(meta[relay.Constant][25] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %586 = reshape(%585, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %587 = @func_3211(%586) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %588 = @func_5215() /* ty=Tensor[(2, 10, 16), float64] */;
  %589 = %587.1;
  (%588, %589, meta[relay.Constant][25] /* ty=Tensor[(576), bool] */)
}

def @func_3819() -> Tensor[(2, 10, 16), float64] {
  %590 = @func_2942() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %590.0
}

def @func_5071(%var_5056: Tensor[(2, 10, 16), float64]) -> (Tensor[(2, 10, 16), bool],) {
  %591 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  %592 = cast(%var_5056, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = logical_or(%594, %595) /* ty=Tensor[(2, 10, 16), bool] */;
  (%596,)
}

def @func_8300(%var_8298: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(13, 10, 13), float32], Tensor[(864), float32]) {
  %597 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %598 = cast(meta[relay.Constant][26] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %599 = reshape(%598, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %600 = @func_4217(%599) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(1690, 1), float32], Tensor[(1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %601 = cast(%var_8298, dtype="float32") /* ty=Tensor[(864), float32] */;
  %602 = cast(%var_8298, dtype="float32") /* ty=Tensor[(864), float32] */;
  %603 = cast(meta[relay.Constant][26] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %604 = reshape(%601, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %605 = reshape(%602, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %606 = reshape(%603, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %607 = @func_355(%604, %605, %606) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %608 = %597.0;
  %609 = %600.6;
  %610 = %607.1;
  (%608, %609, meta[relay.Constant][26] /* ty=Tensor[(1690), float32] */, %610, %var_8298)
}

def @func_8623() -> Tensor[(2, 10, 16), float64] {
  %611 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %611.0
}

def @func_2534() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %612 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %613 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  (%612, %613)
}

def @func_2181(%var_2149: Tensor[(2, 10, 16), float64]) -> (Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) {
  %614 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %615 = cast(%614, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %616 = reshape(%615, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %617 = cast(%var_2149, dtype="uint32") /* ty=Tensor[(2, 10, 16), uint32] */;
  %618 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%614, dtype="uint32") /* ty=Tensor[(2, 10, 16), uint32] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %621 = cast(%614, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %622 = atanh(%621) /* ty=Tensor[(2, 10, 16), float64] */;
  %623 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 10, 16), float64] */, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %627 = @func_1567(%616) /* ty=Tensor[(2, 10, 16), int16] */;
  %628 = left_shift(%619, %620) /* ty=Tensor[(2, 10, 16), uint32] */;
  %629 = power(%625, %626) /* ty=Tensor[(2, 10, 16), float32] */;
  (%627, %628, %629)
}

def @func_8589() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %630 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %631 = @func_7108() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %632 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %633 = %630.1;
  %634 = %631.1;
  %635 = %632.1;
  (%633, %634, %635)
}

def @func_3341(%var_3268: Tensor[(1690), float32], %var_3296: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) {
  %636 = @func_2772() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) */;
  %637 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %638 = reshape(%637, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %639 = @func_92(%638) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %640 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %641 = reshape(%640, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %642 = @func_3145(%641) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %643 = %642.2;
  %644 = cast(meta[relay.Constant][28] /* ty=Tensor[(1690), float32] */, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(1), int32] */;
  %646 = cast(%643, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), float64] */;
  %648 = cast(%var_3296, dtype="uint16") /* ty=Tensor[(1690), uint16] */;
  %649 = shape_of(%var_3268, dtype="int32") /* ty=Tensor[(1), int32] */;
  %650 = cast(%var_3268, dtype="uint16") /* ty=Tensor[(1690), uint16] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %652 = multiply(%650, %651) /* ty=Tensor[(1690), uint16] */;
  %653 = cast(%643, dtype="uint32") /* ty=Tensor[(1690), uint32] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(1), int32] */;
  %655 = cast(%652, dtype="uint32") /* ty=Tensor[(1690), uint32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %657 = %636.0;
  %658 = %639.0;
  %659 = power(%646, %647) /* ty=Tensor[(1690), float64] */;
  %660 = right_shift(%655, %656) /* ty=Tensor[(1690), uint32] */;
  %661 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  (%657, %658, %659, %660, %661)
}

def @func_10971(%var_10956: Tensor[(11, 15, 4), float32]) -> (Tensor[(11, 15, 4), float64],) {
  %662 = cast(%var_10956, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %663 = sigmoid(%662) /* ty=Tensor[(11, 15, 4), float32] */;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(11, 15, 4), float64] */;
  %665 = sqrt(%664) /* ty=Tensor[(11, 15, 4), float64] */;
  (%665,)
}

def @func_2920(%var_2918: float64) -> (Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) {
  %666 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %667 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1690), float32] */, dtype="float32") /* ty=Tensor[(1, 1690), float32] */;
  %668 = cast(%var_2918, dtype="float64") /* ty=float64 */;
  %669 = reshape(%667, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %670 = reshape(%668, newshape=[]) /* ty=float64 */;
  %671 = @func_1839(%669, %670) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) */;
  %672 = %666.0;
  %673 = %671.5;
  (%672, %673, meta[relay.Constant][29] /* ty=Tensor[(1, 1690), float32] */, %var_2918)
}

def @func_7217(%var_7165: Tensor[(13, 15, 14), uint32], %var_7202: Tensor[(294), uint16]) -> (Tensor[(13, 15, 14), uint32], Tensor[(14, 3, 7), float32], Tensor[(294), uint16], Tensor[(576), bool], Tensor[(13, 15, 14), float64], Tensor[(2, 10, 16), float64]) {
  %674 = cast(%var_7165, dtype="uint32") /* ty=Tensor[(13, 15, 14), uint32] */;
  %675 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(13, 15, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 15, 14), uint32] */, dtype="uint32") /* ty=Tensor[(13, 15, 14), uint32] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %678 = cast(%var_7202, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %679 = cast(%var_7202, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %680 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %681 = reshape(%678, newshape=[294]) /* ty=Tensor[(294), uint16] */;
  %682 = reshape(%679, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint16] */;
  %683 = reshape(%680, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %684 = @func_4699(%681, %682, %683) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(294), uint16], Tensor[(14, 3, 7), float64], Tensor[(14, 3, 7), float32], Tensor[(14, 3, 7), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %685 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 15, 14), uint32] */, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
  %686 = subtract(%676, %677) /* ty=Tensor[(13, 15, 14), uint32] */;
  %687 = %684.3;
  %688 = cos(%685) /* ty=Tensor[(13, 15, 14), float64] */;
  %689 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  (%686, %687, %var_7202, meta[relay.Constant][31] /* ty=Tensor[(576), bool] */, %688, %689)
}

def @func_8759(%var_8726: Tensor[(1, 990), float64]) -> (Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 990), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %690 = @func_6152() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %691 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %692 = @func_4571() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
  %693 = @func_4148() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %694 = cast(%var_8726, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
  %695 = reshape(%694, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), float64] */;
  %696 = @func_4963(%695) /* ty=(Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) */;
  %697 = @func_8011() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %698 = @func_8044() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %699 = %690.2;
  %700 = @func_6697() /* ty=Tensor[(2, 10, 16), float64] */;
  %701 = %691.0;
  %702 = %692.1;
  %703 = %693.1;
  %704 = %696.1;
  %705 = %697.0;
  %706 = %698.0;
  (%699, %700, %701, %702, %703, %704, %var_8726, %705, %706)
}

def @func_5180() -> (Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  %707 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %708 = cast(meta[relay.Constant][33] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %709 = reshape(%708, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %710 = @func_4886(%709) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %711 = asinh(%707) /* ty=Tensor[(15, 8, 2), float64] */;
  %712 = %710.0;
  (%711, %712, meta[relay.Constant][33] /* ty=Tensor[(1690), float32] */)
}

def @func_11528() -> (Tensor[(2, 10, 16), float64],) {
  %713 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  (%713,)
}

def @func_5295(%var_5284: Tensor[(14, 2, 2), bool], %var_5285: Tensor[(14, 2, 2), bool]) -> (Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) {
  %714 = cast(%var_5285, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %715 = shape_of(%var_5284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_5284, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = cast(meta[relay.Constant][34] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %719 = cast(-9.26201f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %720 = reshape(%718, newshape=[30, 4]) /* ty=Tensor[(30, 4), float32] */;
  %721 = reshape(%719, newshape=[]) /* ty=float64 */;
  %722 = @func_2343(%720, %721) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) */;
  %723 = logical_and(%716, %717) /* ty=Tensor[(14, 2, 2), bool] */;
  %724 = %722.0;
  (%723, %724, meta[relay.Constant][34] /* ty=Tensor[(120), float32] */, -9.26201f64 /* ty=float64 */)
}

def @func_2242() -> Tensor[(2, 10, 16), float64] {
  %725 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %725.0
}

def @func_6759() -> Tensor[(2, 10, 16), float64] {
  %726 = @func_6507() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %726.1
}

def @func_7393() -> (Tensor[(2, 10, 16), float64],) {
  %727 = @func_6152() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %728 = %727.1;
  (%728,)
}

def @func_11219(%var_11208: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32]) {
  %729 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %731 = reshape(%730, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %732 = @func_5071(%731) /* ty=(Tensor[(2, 10, 16), bool],) */;
  %733 = cast(%var_11208, dtype="float32") /* ty=Tensor[(864), float32] */;
  %734 = reshape(%733, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %735 = @func_8300(%734) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(13, 10, 13), float32], Tensor[(864), float32]) */;
  %736 = %732.0;
  %737 = %735.2;
  (%729, %736, %737, %var_11208)
}

def @func_9331() -> Tensor[(6, 12, 4), float32] {
  %738 = @func_8154() /* ty=(Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) */;
  %738.0
}

def @func_9477() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %739 = @func_6507() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %740 = @func_5754() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %741 = %739.0;
  %742 = %740.0;
  (%741, %742)
}

def @func_4797() -> (Tensor[(2, 10, 16), float64],) {
  %743 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %744 = %743.0;
  (%744,)
}

def @func_5626() -> Tensor[(2, 10, 16), float64] {
  %745 = @func_4840() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) */;
  %745.0
}

def @func_7987() -> (Tensor[(2, 10, 16), float64],) {
  %746 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %747 = %746.0;
  (%747,)
}

def @func_9663(%var_9636: Tensor[(1, 1690), float32], %var_9637: float64, %var_9640: Tensor[(1, 375), uint32], %var_9653: Tensor[(8640), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(16, 2, 13), float64], Tensor[(1, 1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(144, 4), bool], Tensor[(8640), bool], Tensor[(?, 375), int16]) {
  %748 = cast(%var_9636, dtype="float32") /* ty=Tensor[(1, 1690), float32] */;
  %749 = cast(%var_9637, dtype="float64") /* ty=float64 */;
  %750 = reshape(%748, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %751 = reshape(%749, newshape=[]) /* ty=float64 */;
  %752 = @func_8894(%750, %751) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(16, 2, 13), float64], float64, Tensor[(375), uint32], Tensor[(2, 10, 16), float64]) */;
  %753 = cast(meta[relay.Constant][35] /* ty=Tensor[(144, 4), bool] */, dtype="bool") /* ty=Tensor[(144, 4), bool] */;
  %754 = cast(%var_9653, dtype="bool") /* ty=Tensor[(8640), bool] */;
  %755 = reshape(%753, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
  %756 = reshape(%754, newshape=[15, 576]) /* ty=Tensor[(15, 576), bool] */;
  %757 = @func_6381(%755, %756) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(15, 576), uint8]) */;
  %758 = cast(%var_9640, dtype="float64") /* ty=Tensor[(1, 375), float64] */;
  %759 = cosh(%758) /* ty=Tensor[(1, 375), float64] */;
  %760 = cast(%var_9637, dtype="float64") /* ty=float64 */;
  %761 = cast(%var_9640, dtype="uint32") /* ty=Tensor[(1, 375), uint32] */;
  %762 = cast(%var_9636, dtype="float32") /* ty=Tensor[(1, 1690), float32] */;
  %763 = reshape(%760, newshape=[]) /* ty=float64 */;
  %764 = reshape(%761, newshape=[375]) /* ty=Tensor[(375), uint32] */;
  %765 = reshape(%762, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %766 = @func_7784(%763, %764, %765) /* ty=(Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) */;
  %767 = %766.2;
  %768 = cast(%767, dtype="int16") /* ty=Tensor[(375), int16] */;
  %769 = shape_of(%759, dtype="int32") /* ty=Tensor[(2), int32] */;
  %770 = cast(%759, dtype="int16") /* ty=Tensor[(1, 375), int16] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %772 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %773 = %752.3;
  %774 = %757.0;
  %775 = logical_xor(%770, %771) /* ty=Tensor[(?, 375), int16] */;
  (%772, %773, %var_9636, %var_9637, %774, meta[relay.Constant][35] /* ty=Tensor[(144, 4), bool] */, %var_9653, %775)
}

def @func_7531() -> (Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) {
  %776 = cast(meta[relay.Constant][36] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
  %777 = reshape(%776, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float64] */;
  %778 = @func_1671(%777) /* ty=(Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) */;
  %779 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  %780 = %778.5;
  %781 = @func_3819() /* ty=Tensor[(2, 10, 16), float64] */;
  (%779, %780, meta[relay.Constant][36] /* ty=Tensor[(980), float64] */, %781)
}

def @func_3665() -> Tensor[(2, 10, 16), float64] {
  %782 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %782.0
}

def @func_11127(%var_11125: Tensor[(110, 9), float64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(110, 9), float64]) {
  %783 = @func_5840() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %784 = cast(%var_11125, dtype="float64") /* ty=Tensor[(110, 9), float64] */;
  %785 = reshape(%784, newshape=[1, 990]) /* ty=Tensor[(1, 990), float64] */;
  %786 = @func_8759(%785) /* ty=(Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 990), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %787 = %783.0;
  %788 = %786.5;
  (%787, %788, %var_11125)
}

def @func_10726() -> Tensor[(2, 10, 16), float64] {
  %789 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %789.0
}

def @func_1567(%var_1548: Tensor[(2, 10, 16), float64]) -> Tensor[(2, 10, 16), int16] {
  %790 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %791 = %790.0;
  %792 = cast(%var_1548, dtype="int16") /* ty=Tensor[(2, 10, 16), int16] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%791, dtype="int16") /* ty=Tensor[(2, 10, 16), int16] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%794, %795) /* ty=Tensor[(2, 10, 16), int16] */
}

def @func_6738() -> Tensor[(2, 10, 16), float64] {
  %796 = @func_5840() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %796.0
}

def @func_547(%var_541: Tensor[(11, 2, 4), int16]) -> Tensor[(11, 2, 4), int16] {
  %797 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 2, 4), int16] */, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
  %798 = shape_of(%var_541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%var_541, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%799, %800) /* ty=Tensor[(11, 2, 4), int16] */
}

def @func_5895() -> (Tensor[(2, 10, 16), float64], float64, Tensor[(120), float32], Tensor[(1690), float32]) {
  %801 = @func_5754() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %802 = cast(meta[relay.Constant][38] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %803 = reshape(%802, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %804 = @func_3477(%803) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(120), float32], float64, Tensor[(576, 1), bool]) */;
  %805 = cast(meta[relay.Constant][38] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %806 = %804.4;
  %807 = cast(%806, dtype="float64") /* ty=float64 */;
  %808 = reshape(%805, newshape=[30, 4]) /* ty=Tensor[(30, 4), float32] */;
  %809 = reshape(%807, newshape=[]) /* ty=float64 */;
  %810 = @func_2343(%808, %809) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) */;
  %811 = %801.0;
  %812 = %810.7;
  (%811, %806, meta[relay.Constant][38] /* ty=Tensor[(120), float32] */, %812)
}

def @func_5754() -> (Tensor[(2, 10, 16), float64],) {
  %813 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  (%813,)
}

def @func_1839(%var_1820: Tensor[(1690, 1), float32], %var_1828: float64) -> (Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) {
  %814 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %815 = %814.0;
  %816 = cast(%815, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %817 = cast(%var_1820, dtype="float32") /* ty=Tensor[(1690, 1), float32] */;
  %818 = reshape(%817, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %819 = @func_92(%818) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %820 = cast(%var_1820, dtype="float32") /* ty=Tensor[(1690, 1), float32] */;
  %821 = reshape(%820, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %822 = @func_92(%821) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %823 = cast(%var_1828, dtype="float64") /* ty=float64 */;
  %824 = %819.0;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %826 = reshape(%823, newshape=[]) /* ty=float64 */;
  %827 = reshape(%825, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %828 = @func_131(%826, %827) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %829 = asin(%816) /* ty=Tensor[(2, 10, 16), float32] */;
  %830 = %822.0;
  %831 = %828.2;
  (%829, %824, %var_1820, %830, %831, %var_1828)
}

def @func_4963(%var_4952: Tensor[(11, 9, 10), float64]) -> (Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) {
  %832 = cast(%var_4952, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %833 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(11, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %836 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %837 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %838 = add(%834, %835) /* ty=Tensor[(11, 9, 10), float64] */;
  %839 = %836.0;
  %840 = acos(%837) /* ty=Tensor[(11, 9, 10), float64] */;
  (%838, %839, %840)
}

def @func_6152() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  %841 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %842 = cast(meta[relay.Constant][40] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %843 = cast(meta[relay.Constant][40] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %844 = reshape(%842, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %845 = reshape(%843, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %846 = @func_3341(%844, %845) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) */;
  %847 = %841.0;
  %848 = %846.0;
  (%847, %848, meta[relay.Constant][40] /* ty=Tensor[(1690), float32] */)
}

def @func_3254() -> (Tensor[(2, 10, 16), float64],) {
  %849 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %850 = %849.0;
  (%850,)
}

def @func_10286(%var_10266: Tensor[(5, 11, 4), int64], %var_10267: Tensor[(5, 11, 4), int64], %var_10284: Tensor[(1690), float32]) -> (Tensor[(5, 11, 4), bool], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
  %851 = cast(%var_10267, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %852 = shape_of(%var_10266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_10266, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %855 = cast(%var_10284, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %856 = reshape(%855, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %857 = @func_92(%856) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %858 = equal(%853, %854) /* ty=Tensor[(5, 11, 4), bool] */;
  %859 = %857.0;
  (%858, %859, %var_10284)
}

def @func_10735() -> (Tensor[(2, 10, 16), float64],) {
  %860 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %861 = %860.0;
  (%861,)
}

def @func_6712() -> Tensor[(2, 10, 16), float64] {
  %862 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %862.0
}

def @func_8824() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %863 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %864 = @func_4840() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) */;
  %865 = %863.0;
  %866 = %864.0;
  (%865, %866)
}

def @func_7276() -> (Tensor[(2, 10, 16), float64],) {
  %867 = @func_5767() /* ty=Tensor[(2, 10, 16), float64] */;
  (%867,)
}

def @func_8958(%var_8915: Tensor[(16, 13, 10), bool], %var_8916: Tensor[(16, 13, 10), bool], %var_8923: Tensor[(56), bool]) -> (Tensor[(16, 13, 10), bool], Tensor[(14, 2, 2), bool], Tensor[(56), bool], Tensor[(2, 10, 16), float64]) {
  %868 = cast(%var_8916, dtype="bool") /* ty=Tensor[(16, 13, 10), bool] */;
  %869 = shape_of(%var_8915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%var_8915, dtype="bool") /* ty=Tensor[(16, 13, 10), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %872 = cast(%var_8923, dtype="bool") /* ty=Tensor[(56), bool] */;
  %873 = cast(%var_8923, dtype="bool") /* ty=Tensor[(56), bool] */;
  %874 = reshape(%872, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %875 = reshape(%873, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %876 = @func_5295(%874, %875) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) */;
  %877 = @func_4463() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %878 = logical_or(%870, %871) /* ty=Tensor[(16, 13, 10), bool] */;
  %879 = %876.0;
  %880 = %877.0;
  (%878, %879, %var_8923, %880)
}

def @func_1955(%var_1895: Tensor[(576), bool], %var_1899: Tensor[(2, 10, 16), float64]) -> (Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), int16], Tensor[(13, 10, 13), float32]) {
  %881 = cast(%var_1895, dtype="bool") /* ty=Tensor[(576), bool] */;
  %882 = reshape(%881, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
  %883 = @func_191(%882) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %884 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %885 = %884.0;
  %886 = cast(%var_1899, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(%885, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %890 = floor_divide(%888, %889) /* ty=Tensor[(2, 10, 16), float32] */;
  %891 = cast(%890, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %892 = reshape(%891, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %893 = %883.2;
  %894 = cast(%893, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %895 = reshape(%894, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %896 = @func_92(%895) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %897 = @func_1567(%892) /* ty=Tensor[(2, 10, 16), int16] */;
  %898 = %896.0;
  (%893, %var_1895, %890, %897, %898)
}

def @func_3211(%var_3206: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
  %899 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %900 = cast(%var_3206, dtype="bool") /* ty=Tensor[(576), bool] */;
  %901 = reshape(%900, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %902 = @func_2020(%901) /* ty=(Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) */;
  %903 = %899.0;
  %904 = %902.1;
  (%903, %904, %var_3206)
}

def @func_2660(%var_2635: float64, %var_2636: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(13, 10, 13), float32]) {
  %905 = cast(%var_2635, dtype="float64") /* ty=float64 */;
  %906 = cast(%var_2636, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %907 = reshape(%905, newshape=[]) /* ty=float64 */;
  %908 = reshape(%906, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %909 = @func_131(%907, %908) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %910 = cast(%var_2636, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %911 = acosh(%910) /* ty=Tensor[(1690), float64] */;
  %912 = cast(%911, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %913 = cast(%var_2636, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %914 = reshape(%913, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %915 = @func_92(%914) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %916 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
  %917 = %909.0;
  %918 = log2(%912) /* ty=Tensor[(1690), float32] */;
  %919 = %915.0;
  (%916, %917, %var_2635, %918, %919)
}

def @func_5436() -> Tensor[(2, 10, 16), float64] {
  @func_5215() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_10790() -> (Tensor[(2, 10, 16), float64], Tensor[(6, 12, 12), float32], Tensor[(864), float32], Tensor[(1690), float32], Tensor[(72, 8), bool]) {
  %920 = @func_9111() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %921 = cast(meta[relay.Constant][41] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %922 = cast(meta[relay.Constant][41] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %923 = cast(meta[relay.Constant][42] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %924 = reshape(%921, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %925 = reshape(%922, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %926 = reshape(%923, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %927 = @func_355(%924, %925, %926) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %928 = @func_7531() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) */;
  %929 = %920.0;
  %930 = %927.0;
  %931 = %928.1;
  (%929, %930, meta[relay.Constant][41] /* ty=Tensor[(864), float32] */, meta[relay.Constant][42] /* ty=Tensor[(1690), float32] */, %931)
}

def @func_11447() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(6, 12, 4), float64], Tensor[(2, 10, 16), float64], Tensor[(294), uint16]) {
  %932 = @func_10832() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(6, 12, 4), float32]) */;
  %933 = @func_7422() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %934 = @func_8044() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %935 = @func_9379() /* ty=(Tensor[(576), bool],) */;
  %936 = @func_9331() /* ty=Tensor[(6, 12, 4), float32] */;
  %937 = cast(%936, dtype="float64") /* ty=Tensor[(6, 12, 4), float64] */;
  %938 = cast(meta[relay.Constant][43] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %939 = reshape(%938, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint16] */;
  %940 = @func_3604(%939) /* ty=(Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %941 = %932.0;
  %942 = %933.0;
  %943 = %934.0;
  %944 = %935.0;
  %945 = log(%937) /* ty=Tensor[(6, 12, 4), float64] */;
  %946 = %940.2;
  (%941, %942, %943, %944, %945, %946, meta[relay.Constant][43] /* ty=Tensor[(294), uint16] */)
}

def @func_3477(%var_3467: Tensor[(120), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(120), float32], float64, Tensor[(576, 1), bool]) {
  %947 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %948 = cast(%var_3467, dtype="float32") /* ty=Tensor[(120), float32] */;
  %949 = cast(2.34679f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %950 = cast(meta[relay.Constant][44] /* ty=Tensor[(576, 1), bool] */, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
  %951 = reshape(%948, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
  %952 = reshape(%949, newshape=[]) /* ty=float64 */;
  %953 = reshape(%950, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
  %954 = @func_480(%951, %952, %953) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
  %955 = %947.0;
  %956 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  %957 = %954.3;
  (%955, %956, %957, %var_3467, 2.34679f64 /* ty=float64 */, meta[relay.Constant][44] /* ty=Tensor[(576, 1), bool] */)
}

def @func_9948(%var_9940: Tensor[(15, 4, 13), float32]) -> Tensor[(15, 4, 13), int64] {
  %958 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 1, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 13), float32] */;
  %959 = log2(%958) /* ty=Tensor[(15, 1, 13), float32] */;
  %960 = cast(%959, dtype="int64") /* ty=Tensor[(15, 1, 13), int64] */;
  %961 = cast(%var_9940, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
  %962 = bitwise_or(%960, %961) /* ty=Tensor[(15, 4, 13), int64] */;
  %963 = cast(%var_9940, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
  %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%962, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%965, %966) /* ty=Tensor[(15, 4, 13), int64] */
}

def @func_4112() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64]) {
  %967 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %968 = %967.1;
  %969 = cast(%968, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %970 = reshape(%969, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %971 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %972 = @func_2619(%970) /* ty=Tensor[(2, 10, 16), bool] */;
  %973 = %971.0;
  (%968, %972, %973)
}

def @func_2343(%var_2289: Tensor[(30, 4), float32], %var_2290: float64) -> (Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) {
  %974 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %975 = cast(%var_2289, dtype="float32") /* ty=Tensor[(30, 4), float32] */;
  %976 = cast(%var_2290, dtype="float64") /* ty=float64 */;
  %977 = cast(meta[relay.Constant][46] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %978 = reshape(%975, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
  %979 = reshape(%976, newshape=[]) /* ty=float64 */;
  %980 = reshape(%977, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
  %981 = @func_480(%978, %979, %980) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
  %982 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %983 = cast(meta[relay.Constant][47] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %984 = cast(%var_2290, dtype="float64") /* ty=float64 */;
  %985 = reshape(%983, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %986 = reshape(%984, newshape=[]) /* ty=float64 */;
  %987 = @func_1839(%985, %986) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) */;
  %988 = %974.1;
  %989 = %981.0;
  %990 = %982.0;
  %991 = %987.0;
  (%988, %989, %var_2289, %var_2290, meta[relay.Constant][46] /* ty=Tensor[(576), bool] */, %990, %991, meta[relay.Constant][47] /* ty=Tensor[(1690), float32] */)
}

def @func_131(%var_99: float64, %var_112: Tensor[(1690), float32]) -> (Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) {
  %992 = cast(%var_112, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %993 = reshape(%992, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %994 = @func_92(%993) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %995 = cast(%var_112, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %996 = log10(%995) /* ty=Tensor[(1690), float64] */;
  %997 = cast(%996, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %998 = reshape(%997, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %999 = @func_92(%998) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %1000 = cast(%var_99, dtype="float64") /* ty=float64 */;
  %1001 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %1002 = floor_divide(%1000, %1001) /* ty=Tensor[(14, 13, 1), float64] */;
  %1003 = cast(%1002, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %1004 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(14, 13, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1005 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %1006 = dyn.reshape(%1003, %1004, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1007 = power(%1005, %1006) /* ty=Tensor[(14, 13, ?), float64] */;
  %1008 = cast(%1007, dtype="bool") /* ty=Tensor[(14, 13, ?), bool] */;
  %1009 = cast(%996, dtype="bool") /* ty=Tensor[(1690), bool] */;
  %1010 = %994.0;
  %1011 = %999.0;
  %1012 = logical_or(%1008, %1009) /* ty=Tensor[(14, 13, 1690), bool] */;
  (%1010, %1011, %1012)
}

def @func_6911() -> Tensor[(1690), float32] {
  %1013 = @func_6152() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %1013.2
}

def @func_3604(%var_3568: Tensor[(14, 3, 7), uint16]) -> (Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1014 = cast(meta[relay.Constant][49] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1015 = cast(%var_3568, dtype="uint16") /* ty=Tensor[(14, 3, 7), uint16] */;
  %1016 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1017 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1018 = bitwise_and(%1014, %1015) /* ty=Tensor[(14, 3, 7), uint16] */;
  %1019 = %1016.0;
  %1020 = %1017.0;
  (%1018, %1019, %1020)
}

def @func_2970() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1021 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1022 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  %1023 = %1021.1;
  (%1022, %1023)
}

def @func_6315() -> Tensor[(2, 10, 16), float64] {
  @func_3819() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_2118() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1024 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1025 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1026 = %1024.0;
  %1027 = %1025.0;
  (%1026, %1027)
}

def @func_5796() -> Tensor[(2, 10, 16), float64] {
  %1028 = @func_5180() /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %1028.1
}

def @func_4514() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1029 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1030 = %1029.0;
  %1031 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  (%1030, %1031)
}

def @func_1671(%var_1611: Tensor[(10, 7, 14), float64]) -> (Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) {
  %1032 = cast(%var_1611, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
  %1033 = cast(meta[relay.Constant][50] /* ty=Tensor[(88), int16] */, dtype="int16") /* ty=Tensor[(88), int16] */;
  %1034 = reshape(%1033, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), int16] */;
  %1035 = cast(meta[relay.Constant][51] /* ty=Tensor[(2016, 1), float64] */, dtype="float64") /* ty=Tensor[(2016, 1), float64] */;
  %1036 = cast(meta[relay.Constant][52] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1037 = cast(meta[relay.Constant][53] /* ty=Tensor[(72, 8), bool] */, dtype="bool") /* ty=Tensor[(72, 8), bool] */;
  %1038 = cast(-1.13508f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1039 = reshape(%1035, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %1040 = reshape(%1036, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1041 = reshape(%1037, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %1042 = reshape(%1038, newshape=[]) /* ty=float64 */;
  %1043 = @func_1470(%1039, %1040, %1041, %1042) /* ty=(Tensor[(864), float32], Tensor[(1690), int32], Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(14, 13, 1690), bool], Tensor[(14, 13, 1690), bool], Tensor[(13, 10, 13), float32], Tensor[(12, 14, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(1690), float32]) */;
  %1044 = cast(-1.13508f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %1045 = cast(meta[relay.Constant][52] /* ty=Tensor[(1690), float32] */, dtype="bool") /* ty=Tensor[(1690), bool] */;
  %1046 = log2(%1032) /* ty=Tensor[(10, 7, 14), float64] */;
  %1047 = @func_547(%1034) /* ty=Tensor[(11, 2, 4), int16] */;
  %1048 = %1043.4;
  %1049 = less(%1044, %1045) /* ty=Tensor[(1690), bool] */;
  (%1046, %1047, meta[relay.Constant][50] /* ty=Tensor[(88), int16] */, %1048, meta[relay.Constant][51] /* ty=Tensor[(2016, 1), float64] */, meta[relay.Constant][53] /* ty=Tensor[(72, 8), bool] */, %1049)
}

def @func_8044() -> (Tensor[(2, 10, 16), float64],) {
  %1050 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
  (%1050,)
}

def @func_3836() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) {
  %1051 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1052 = %1051.0;
  %1053 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  (%1052, %1053)
}

def @main(%var_11617: Tensor[(11, 7, 6), float32], %var_11626: Tensor[(11, 7, 6), float32], %var_11636: Tensor[(864), float32], %var_11693: Tensor[(144, 4), bool]) -> (Tensor[(11, 7, 6), bool], Tensor[(864), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(14, 13, 1690), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(144, 4), bool], Tensor[(14, 13, 1690), bool]) {
  %1054 = cast(meta[relay.Constant][54] /* ty=Tensor[(11, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %1055 = shape_of(%var_11617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1056 = cast(%var_11617, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %1057 = dyn.reshape(%1054, %1055, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1058 = maximum(%1056, %1057) /* ty=Tensor[(11, 7, 6), float32] */;
  %1059 = cast(%var_11626, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %1060 = shape_of(%1058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1061 = cast(%1058, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %1062 = dyn.reshape(%1059, %1060, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1063 = @func_7276() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1064 = cast(%var_11636, dtype="float32") /* ty=Tensor[(864), float32] */;
  %1065 = cast(%var_11636, dtype="float32") /* ty=Tensor[(864), float32] */;
  %1066 = cast(meta[relay.Constant][55] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1067 = reshape(%1064, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %1068 = reshape(%1065, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %1069 = reshape(%1066, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1070 = @func_355(%1067, %1068, %1069) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %1071 = %1070.4;
  %1072 = cast(%1071, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %1073 = asin(%1072) /* ty=Tensor[(14, 13, 1690), float64] */;
  %1074 = cast(%1073, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %1075 = log10(%1074) /* ty=Tensor[(14, 13, 1690), float64] */;
  %1076 = cast(%1075, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %1077 = @func_3640() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1078 = cast(%var_11693, dtype="bool") /* ty=Tensor[(144, 4), bool] */;
  %1079 = reshape(%1078, newshape=[576, 1]) /* ty=Tensor[(576, 1), bool] */;
  %1080 = @func_9058(%1079) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576, ?), bool], Tensor[(2, 10, 16), int16]) */;
  %1081 = cast(%1075, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %1082 = cosh(%1081) /* ty=Tensor[(14, 13, 1690), float64] */;
  %1083 = cast(%1073, dtype="bool") /* ty=Tensor[(14, 13, 1690), bool] */;
  %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1085 = cast(%1082, dtype="bool") /* ty=Tensor[(14, 13, 1690), bool] */;
  %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1087 = equal(%1061, %1062) /* ty=Tensor[(11, 7, 6), bool] */;
  %1088 = @func_8623() /* ty=Tensor[(2, 10, 16), float64] */;
  %1089 = %1063.0;
  %1090 = sqrt(%1076) /* ty=Tensor[(14, 13, 1690), float64] */;
  %1091 = %1077.1;
  %1092 = %1080.3;
  %1093 = logical_and(%1085, %1086) /* ty=Tensor[(14, 13, 1690), bool] */;
  (%1087, %var_11636, meta[relay.Constant][55] /* ty=Tensor[(1690), float32] */, %1088, %1089, %1090, %1091, %1092, %var_11693, %1093)
}

def @func_5767() -> Tensor[(2, 10, 16), float64] {
  %1094 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1094.0
}

def @func_355(%var_330: Tensor[(6, 12, 12), float32], %var_331: Tensor[(6, 12, 12), float32], %var_343: Tensor[(1690), float32]) -> (Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) {
  %1095 = cast(%var_331, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
  %1096 = shape_of(%var_330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1097 = cast(%var_330, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
  %1098 = dyn.reshape(%1095, %1096, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1099 = cast(-6.17138f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1100 = cast(%var_343, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1101 = reshape(%1099, newshape=[]) /* ty=float64 */;
  %1102 = reshape(%1100, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1103 = @func_131(%1101, %1102) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %1104 = cast(-6.17138f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1105 = cast(%var_343, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1106 = reshape(%1104, newshape=[]) /* ty=float64 */;
  %1107 = reshape(%1105, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1108 = @func_131(%1106, %1107) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %1109 = mod(%1097, %1098) /* ty=Tensor[(6, 12, 12), float32] */;
  %1110 = %1103.0;
  %1111 = %1108.2;
  (%1109, %1110, -6.17138f64 /* ty=float64 */, %var_343, %1111)
}

def @func_10325(%var_10318: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(5, 11, 4), bool], Tensor[(220), int64], Tensor[(1690), float32]) {
  %1112 = cast(meta[relay.Constant][56] /* ty=Tensor[(220), int64] */, dtype="int64") /* ty=Tensor[(220), int64] */;
  %1113 = cast(meta[relay.Constant][56] /* ty=Tensor[(220), int64] */, dtype="int64") /* ty=Tensor[(220), int64] */;
  %1114 = cast(%var_10318, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1115 = reshape(%1112, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), int64] */;
  %1116 = reshape(%1113, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), int64] */;
  %1117 = reshape(%1114, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1118 = @func_10286(%1115, %1116, %1117) /* ty=(Tensor[(5, 11, 4), bool], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %1119 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
  %1120 = %1118.0;
  (%1119, %1120, meta[relay.Constant][56] /* ty=Tensor[(220), int64] */, %var_10318)
}

def @func_7971(%var_7943: Tensor[(56, 1), bool]) -> (Tensor[(2, 10, 16), float64], float64, Tensor[(56, 1), bool]) {
  %1121 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1122 = cast(%var_7943, dtype="bool") /* ty=Tensor[(56, 1), bool] */;
  %1123 = cast(%var_7943, dtype="bool") /* ty=Tensor[(56, 1), bool] */;
  %1124 = reshape(%1122, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %1125 = reshape(%1123, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %1126 = @func_5295(%1124, %1125) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) */;
  %1127 = %1121.0;
  %1128 = %1126.3;
  (%1127, %1128, %var_7943)
}

def @func_5922() -> Tensor[(2, 10, 16), float64] {
  %1129 = @func_5591() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) */;
  %1129.0
}

def @func_4979() -> Tensor[(2, 10, 16), bool] {
  @func_2458() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_4148() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1130 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1131 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1132 = %1130.0;
  %1133 = %1131.0;
  (%1132, %1133)
}

def @func_7680(%var_7608: Tensor[(1690), float32], %var_7627: Tensor[(165), float64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(15, 11, 1), float64], Tensor[(165), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), int16], Tensor[(30, 4), float32], Tensor[(120), float32]) {
  %1134 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %1135 = cast(-8.04729f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1136 = cast(%var_7608, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1137 = reshape(%1135, newshape=[]) /* ty=float64 */;
  %1138 = reshape(%1136, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1139 = @func_131(%1137, %1138) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %1140 = cast(meta[relay.Constant][57] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %1141 = reshape(%1140, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %1142 = @func_3211(%1141) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %1143 = cast(%var_7627, dtype="float64") /* ty=Tensor[(165), float64] */;
  %1144 = reshape(%1143, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), float64] */;
  %1145 = @func_5978(%1144) /* ty=(Tensor[(15, 11, 1), float64],) */;
  %1146 = @func_7108() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1147 = @func_2563() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1148 = cast(%var_7608, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1149 = asinh(%1148) /* ty=Tensor[(1690), float32] */;
  %1150 = cast(meta[relay.Constant][58] /* ty=Tensor[(1690), float32] */, dtype="int16") /* ty=Tensor[(1690), int16] */;
  %1151 = shape_of(%1149, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1152 = cast(%1149, dtype="int16") /* ty=Tensor[(1690), int16] */;
  %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?), int16] */;
  %1154 = cast(meta[relay.Constant][59] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %1155 = cast(-8.04729f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1156 = reshape(%1154, newshape=[30, 4]) /* ty=Tensor[(30, 4), float32] */;
  %1157 = reshape(%1155, newshape=[]) /* ty=float64 */;
  %1158 = @func_2343(%1156, %1157) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) */;
  %1159 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
  %1160 = %1134.0;
  %1161 = %1139.1;
  %1162 = %1142.0;
  %1163 = %1145.0;
  %1164 = %1146.1;
  %1165 = %1147.0;
  %1166 = bitwise_xor(%1152, %1153) /* ty=Tensor[(1690), int16] */;
  %1167 = %1158.2;
  (%1159, %1160, %1161, -8.04729f64 /* ty=float64 */, %1162, meta[relay.Constant][57] /* ty=Tensor[(576), bool] */, %1163, %var_7627, %1164, %1165, %1166, %1167, meta[relay.Constant][59] /* ty=Tensor[(120), float32] */)
}

def @func_6298() -> (Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) {
  %1168 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1169 = %1168.1;
  %1170 = cast(%1169, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %1171 = reshape(%1170, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %1172 = @func_2181(%1171) /* ty=(Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) */;
  %1173 = %1172.2;
  %1174 = cast(%1169, dtype="uint64") /* ty=Tensor[(2, 10, 16), uint64] */;
  %1175 = shape_of(%1173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1176 = cast(%1173, dtype="uint64") /* ty=Tensor[(2, 10, 16), uint64] */;
  %1177 = dyn.reshape(%1174, %1175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1178 = @func_4463() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1179 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1180 = @func_5754() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1181 = %1180.0;
  %1182 = cast(%1181, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %1183 = reshape(%1182, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %1184 = @func_2181(%1183) /* ty=(Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) */;
  %1185 = logical_xor(%1176, %1177) /* ty=Tensor[(2, 10, 16), uint64] */;
  %1186 = %1178.0;
  %1187 = %1179.0;
  %1188 = %1184.2;
  (%1185, %1186, %1187, %1181, %1188)
}

def @func_5215() -> Tensor[(2, 10, 16), float64] {
  %1189 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1189.0
}

def @func_10003() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1190 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1191 = @func_7089() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1192 = %1190.0;
  %1193 = %1191.1;
  (%1192, %1193)
}

def @func_10428(%var_10424: Tensor[(22, 4), int16]) -> (Tensor[(2, 10, 16), float64], Tensor[(11, 2, 4), int16], Tensor[(22, 4), int16]) {
  %1194 = @func_4840() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) */;
  %1195 = cast(%var_10424, dtype="int16") /* ty=Tensor[(22, 4), int16] */;
  %1196 = reshape(%1195, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), int16] */;
  %1197 = %1194.0;
  %1198 = @func_547(%1196) /* ty=Tensor[(11, 2, 4), int16] */;
  (%1197, %1198, %var_10424)
}

def @func_3411() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1199 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1200 = @func_2772() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) */;
  %1201 = %1199.0;
  %1202 = %1200.0;
  (%1201, %1202)
}

def @func_7089() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1203 = @func_5840() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1204 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1205 = %1203.0;
  %1206 = %1204.0;
  (%1205, %1206)
}

def @func_11542() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1207 = @func_4148() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1208 = @func_9807() /* ty=Tensor[(2, 10, 16), float64] */;
  %1209 = %1207.1;
  (%1208, %1209)
}

def @func_7108() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1210 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1211 = %1210.0;
  %1212 = @func_5767() /* ty=Tensor[(2, 10, 16), float64] */;
  (%1211, %1212)
}

def @func_7481() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1213 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1214 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
  %1215 = %1213.0;
  (%1214, %1215)
}

def @func_9807() -> Tensor[(2, 10, 16), float64] {
  %1216 = @func_7341() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1216.0
}

def @func_5151() -> (Tensor[(2, 10, 16), float64],) {
  %1217 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1218 = %1217.0;
  (%1218,)
}

def @func_6835(%var_6808: Tensor[(5, 15, 5), uint32], %var_6809: Tensor[(5, 15, 5), uint32], %var_6818: Tensor[(1690), float32]) -> (Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(5, 15, 5), bool]) {
  %1219 = cast(4.62047f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1220 = cast(%var_6818, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1221 = reshape(%1219, newshape=[]) /* ty=float64 */;
  %1222 = reshape(%1220, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1223 = @func_131(%1221, %1222) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %1224 = cast(%var_6809, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
  %1225 = shape_of(%var_6808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1226 = cast(%var_6808, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
  %1227 = dyn.reshape(%1224, %1225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1228 = less_equal(%1226, %1227) /* ty=Tensor[(5, 15, 5), bool] */;
  %1229 = cast(%1228, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
  %1230 = shape_of(%var_6809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1231 = cast(%var_6809, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
  %1232 = dyn.reshape(%1229, %1230, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1233 = %1223.0;
  %1234 = equal(%1231, %1232) /* ty=Tensor[(5, 15, 5), bool] */;
  (%1233, 4.62047f64 /* ty=float64 */, %var_6818, %1234)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10974(%var_10972: Tensor[(11, 15, 4), float32]) -> (Tensor[(11, 15, 4), float64],) {
  @func_10971(%var_10972) /* ty=(Tensor[(11, 15, 4), float64],) */
}

def @func_10911() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_10909() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_6625(%var_6624: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  %19 = fn (%var_6602: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
    %0 = @func_3640() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %1 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %2 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %4 = reshape(%3, newshape=[576]) /* ty=Tensor[(576), bool] */;
    %5 = @func_3211(%4) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
    %6 = %5.1;
    %7 = cast(%var_6602, dtype="float64") /* ty=Tensor[(576), float64] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(1), int32] */;
    %9 = cast(%6, dtype="float64") /* ty=Tensor[(576), float64] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?), float64] */;
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %12 = reshape(%11, newshape=[4, 11, 6]) /* ty=Tensor[(4, 11, 6), float32] */;
    %13 = @func_4246(%12) /* ty=(Tensor[(4, 11, 6), float32],) */;
    %14 = %0.1;
    %15 = %1.0;
    %16 = %2.0;
    %17 = divide(%9, %10) /* ty=Tensor[(576), float64] */;
    %18 = %13.0;
    (%14, meta[relay.Constant][0] /* ty=Tensor[(576), bool] */, %15, %16, %17, %18, meta[relay.Constant][1] /* ty=Tensor[(264), float32] */)
  };
  %19(%var_6624) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) */
}

def @func_6384(%var_6382: Tensor[(1, 576), bool], %var_6383: Tensor[(15, 576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(15, 576), uint8]) {
  %33 = fn (%var_6326: Tensor[(1, 576), bool], %var_6372: Tensor[(15, 576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(15, 576), uint8]) {
    %20 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %21 = cast(%var_6326, dtype="bool") /* ty=Tensor[(1, 576), bool] */;
    %22 = reshape(%21, newshape=[576]) /* ty=Tensor[(576), bool] */;
    %23 = @func_3211(%22) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
    %24 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
    %25 = @func_2563() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %26 = cast(%var_6326, dtype="uint8") /* ty=Tensor[(1, 576), uint8] */;
    %27 = cast(%var_6372, dtype="uint8") /* ty=Tensor[(15, 576), uint8] */;
    %28 = %20.0;
    %29 = %23.0;
    %30 = %24.2;
    %31 = %25.0;
    %32 = left_shift(%26, %27) /* ty=Tensor[(15, 576), uint8] */;
    (%28, %29, %30, %31, %32)
  };
  %33(%var_6382, %var_6383) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(15, 576), uint8]) */
}

def @func_5257(%var_5255: Tensor[(2, 10, 16), float64], %var_5256: Tensor[(120), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(13, 10, 13), float32], Tensor[(120), float32], float64, Tensor[(576), bool]) {
  @func_5253(%var_5255, %var_5256) /* ty=(Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(13, 10, 13), float32], Tensor[(120), float32], float64, Tensor[(576), bool]) */
}

def @func_4725() -> (Tensor[(2, 10, 16), float64],) {
  %36 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %34 = @func_4112() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64]) */;
    %35 = %34.0;
    (%35,)
  };
  %36() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_11530() -> (Tensor[(2, 10, 16), float64],) {
  @func_11528() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_9921() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %46 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %37 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %38 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %39 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %40 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %41 = %37.0;
    %42 = @func_5436() /* ty=Tensor[(2, 10, 16), float64] */;
    %43 = %38.1;
    %44 = %39.0;
    %45 = %40.0;
    (%41, %42, %43, %44, %45)
  };
  %46() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_3679() -> (Tensor[(2, 10, 16), float64],) {
  %47 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %48 = %47.0;
  (%48,)
}

def @func_10004() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %53 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %49 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %50 = @func_7089() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %51 = %49.0;
    %52 = %50.1;
    (%51, %52)
  };
  %53() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_6738() -> Tensor[(2, 10, 16), float64] {
  %54 = @func_5840() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %54.0
}

def @func_9950(%var_9949: Tensor[(15, 4, 13), float32]) -> Tensor[(15, 4, 13), int64] {
  %64 = fn (%var_9940: Tensor[(15, 4, 13), float32]) -> Tensor[(15, 4, 13), int64] {
    %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 1, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 13), float32] */;
    %56 = log2(%55) /* ty=Tensor[(15, 1, 13), float32] */;
    %57 = cast(%56, dtype="int64") /* ty=Tensor[(15, 1, 13), int64] */;
    %58 = cast(%var_9940, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
    %59 = bitwise_or(%57, %58) /* ty=Tensor[(15, 4, 13), int64] */;
    %60 = cast(%var_9940, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
    %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
    %62 = cast(%59, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_xor(%62, %63) /* ty=Tensor[(15, 4, 13), int64] */
  };
  %64(%var_9949) /* ty=Tensor[(15, 4, 13), int64] */
}

def @func_11554() -> (Tensor[(2, 10, 16), float64],) {
  %65 = @func_6298() /* ty=(Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
  %66 = %65.3;
  (%66,)
}

def @func_5796() -> Tensor[(2, 10, 16), float64] {
  %67 = @func_5180() /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %67.1
}

def @func_3951() -> Tensor[(2, 10, 16), float64] {
  @func_2734() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_3254() -> (Tensor[(2, 10, 16), float64],) {
  %68 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %69 = %68.0;
  (%69,)
}

def @func_6913() -> Tensor[(1690), float32] {
  @func_6911() /* ty=Tensor[(1690), float32] */
}

def @func_11219(%var_11208: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32]) {
  %70 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %72 = reshape(%71, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %73 = @func_5071(%72) /* ty=(Tensor[(2, 10, 16), bool],) */;
  %74 = cast(%var_11208, dtype="float32") /* ty=Tensor[(864), float32] */;
  %75 = reshape(%74, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %76 = @func_8300(%75) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(13, 10, 13), float32], Tensor[(864), float32]) */;
  %77 = %73.0;
  %78 = %76.2;
  (%70, %77, %78, %var_11208)
}

def @func_7217(%var_7165: Tensor[(13, 15, 14), uint32], %var_7202: Tensor[(294), uint16]) -> (Tensor[(13, 15, 14), uint32], Tensor[(14, 3, 7), float32], Tensor[(294), uint16], Tensor[(576), bool], Tensor[(13, 15, 14), float64], Tensor[(2, 10, 16), float64]) {
  %79 = cast(%var_7165, dtype="uint32") /* ty=Tensor[(13, 15, 14), uint32] */;
  %80 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(13, 15, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 15, 14), uint32] */, dtype="uint32") /* ty=Tensor[(13, 15, 14), uint32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %83 = cast(%var_7202, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %84 = cast(%var_7202, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %86 = reshape(%83, newshape=[294]) /* ty=Tensor[(294), uint16] */;
  %87 = reshape(%84, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint16] */;
  %88 = reshape(%85, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %89 = @func_4699(%86, %87, %88) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(294), uint16], Tensor[(14, 3, 7), float64], Tensor[(14, 3, 7), float32], Tensor[(14, 3, 7), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 15, 14), uint32] */, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
  %91 = subtract(%81, %82) /* ty=Tensor[(13, 15, 14), uint32] */;
  %92 = %89.3;
  %93 = cos(%90) /* ty=Tensor[(13, 15, 14), float64] */;
  %94 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  (%91, %92, %var_7202, meta[relay.Constant][4] /* ty=Tensor[(576), bool] */, %93, %94)
}

def @func_7040() -> (Tensor[(2, 10, 16), float64],) {
  %97 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %95 = @func_4514() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %96 = %95.0;
    (%96,)
  };
  %97() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_8156() -> (Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) {
  @func_8154() /* ty=(Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) */
}

def @func_7533() -> (Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) {
  @func_7531() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_8180() -> (Tensor[(2, 10, 16), float64],) {
  @func_8178() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_2102() -> Tensor[(2, 10, 16), float64] {
  %99 = fn () -> Tensor[(2, 10, 16), float64] {
    %98 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %98.0
  };
  %99() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_8761(%var_8760: Tensor[(1, 990), float64]) -> (Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 990), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %117 = fn (%var_8726: Tensor[(1, 990), float64]) -> (Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 990), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %100 = @func_6152() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
    %101 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %102 = @func_4571() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
    %103 = @func_4148() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %104 = cast(%var_8726, dtype="float64") /* ty=Tensor[(1, 990), float64] */;
    %105 = reshape(%104, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), float64] */;
    %106 = @func_4963(%105) /* ty=(Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) */;
    %107 = @func_8011() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %108 = @func_8044() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %109 = %100.2;
    %110 = @func_6697() /* ty=Tensor[(2, 10, 16), float64] */;
    %111 = %101.0;
    %112 = %102.1;
    %113 = %103.1;
    %114 = %106.1;
    %115 = %107.0;
    %116 = %108.0;
    (%109, %110, %111, %112, %113, %114, %var_8726, %115, %116)
  };
  %117(%var_8760) /* ty=(Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 990), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_5180() -> (Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %120 = reshape(%119, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %121 = @func_4886(%120) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %122 = asinh(%118) /* ty=Tensor[(15, 8, 2), float64] */;
  %123 = %121.0;
  (%122, %123, meta[relay.Constant][6] /* ty=Tensor[(1690), float32] */)
}

def @func_2923(%var_2921: float64) -> (Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) {
  @func_2920(%var_2921) /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) */
}

def @func_1492() -> (Tensor[(2, 10, 16), float64],) {
  @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_6298() -> (Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) {
  %124 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %125 = %124.1;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %127 = reshape(%126, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %128 = @func_2181(%127) /* ty=(Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) */;
  %129 = %128.2;
  %130 = cast(%125, dtype="uint64") /* ty=Tensor[(2, 10, 16), uint64] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="uint64") /* ty=Tensor[(2, 10, 16), uint64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %134 = @func_4463() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %135 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %136 = @func_5754() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %137 = %136.0;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %139 = reshape(%138, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %140 = @func_2181(%139) /* ty=(Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) */;
  %141 = logical_xor(%132, %133) /* ty=Tensor[(2, 10, 16), uint64] */;
  %142 = %134.0;
  %143 = %135.0;
  %144 = %140.2;
  (%141, %142, %143, %137, %144)
}

def @func_94(%var_93: Tensor[(13, 10, 13), float32]) -> (Tensor[(13, 10, 13), float32],) {
  %147 = fn (%var_83: Tensor[(13, 10, 13), float32]) -> (Tensor[(13, 10, 13), float32],) {
    %145 = cast(%var_83, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
    %146 = acos(%145) /* ty=Tensor[(13, 10, 13), float32] */;
    (%146,)
  };
  %147(%var_93) /* ty=(Tensor[(13, 10, 13), float32],) */
}

def @func_7556() -> (Tensor[(2, 10, 16), float64],) {
  @func_7554() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_480(%var_448: Tensor[(10, 3, 4), float32], %var_461: float64, %var_466: Tensor[(1, 576), bool]) -> (Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) {
  %148 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 3, 4), float32] */, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %149 = shape_of(%var_448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_448, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = cast(%var_461, dtype="float64") /* ty=float64 */;
  %153 = cast(meta[relay.Constant][8] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %154 = reshape(%152, newshape=[]) /* ty=float64 */;
  %155 = reshape(%153, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %156 = @func_131(%154, %155) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %157 = cast(%var_466, dtype="bool") /* ty=Tensor[(1, 576), bool] */;
  %158 = reshape(%157, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
  %159 = @func_191(%158) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %160 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %161 = log2(%160) /* ty=Tensor[(10, 3, 4), float32] */;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %163 = equal(%150, %151) /* ty=Tensor[(10, 3, 4), bool] */;
  %164 = %156.1;
  %165 = %159.0;
  %166 = acos(%162) /* ty=Tensor[(10, 3, 4), float32] */;
  (%163, %164, %var_461, meta[relay.Constant][8] /* ty=Tensor[(1690), float32] */, %165, %var_466, %166)
}

def @func_6508() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %170 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %167 = @func_3778() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %168 = @func_6315() /* ty=Tensor[(2, 10, 16), float64] */;
    %169 = %167.2;
    (%168, %169)
  };
  %170() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_6153() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  %179 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
    %171 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %174 = reshape(%172, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %175 = reshape(%173, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %176 = @func_3341(%174, %175) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) */;
    %177 = %171.0;
    %178 = %176.0;
    (%177, %178, meta[relay.Constant][9] /* ty=Tensor[(1690), float32] */)
  };
  %179() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */
}

def @func_4148() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %180 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %181 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %182 = %180.0;
  %183 = %181.0;
  (%182, %183)
}

def @func_2022(%var_2021: Tensor[(576), bool]) -> (Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) {
  %199 = fn (%var_2006: Tensor[(576), bool]) -> (Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) {
    %184 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %185 = %184.0;
    %186 = cast(%185, dtype="uint16") /* ty=Tensor[(2, 10, 16), uint16] */;
    %187 = cast(-3.29608f64 /* ty=float64 */, dtype="uint16") /* ty=uint16 */;
    %188 = cast(meta[relay.Constant][10] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %189 = cast(-3.29608f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %190 = cast(%var_2006, dtype="bool") /* ty=Tensor[(576), bool] */;
    %191 = reshape(%188, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
    %192 = reshape(%189, newshape=[]) /* ty=float64 */;
    %193 = reshape(%190, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
    %194 = @func_480(%191, %192, %193) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
    %195 = %194.5;
    %196 = cast(%195, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
    %197 = multiply(%186, %187) /* ty=Tensor[(2, 10, 16), uint16] */;
    %198 = cosh(%196) /* ty=Tensor[(1, 576), float64] */;
    (meta[relay.Constant][10] /* ty=Tensor[(120), float32] */, %var_2006, %197, %198)
  };
  %199(%var_2021) /* ty=(Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) */
}

def @func_9663(%var_9636: Tensor[(1, 1690), float32], %var_9637: float64, %var_9640: Tensor[(1, 375), uint32], %var_9653: Tensor[(8640), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(16, 2, 13), float64], Tensor[(1, 1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(144, 4), bool], Tensor[(8640), bool], Tensor[(?, 375), int16]) {
  %200 = cast(%var_9636, dtype="float32") /* ty=Tensor[(1, 1690), float32] */;
  %201 = cast(%var_9637, dtype="float64") /* ty=float64 */;
  %202 = reshape(%200, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %203 = reshape(%201, newshape=[]) /* ty=float64 */;
  %204 = @func_8894(%202, %203) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(16, 2, 13), float64], float64, Tensor[(375), uint32], Tensor[(2, 10, 16), float64]) */;
  %205 = cast(meta[relay.Constant][11] /* ty=Tensor[(144, 4), bool] */, dtype="bool") /* ty=Tensor[(144, 4), bool] */;
  %206 = cast(%var_9653, dtype="bool") /* ty=Tensor[(8640), bool] */;
  %207 = reshape(%205, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
  %208 = reshape(%206, newshape=[15, 576]) /* ty=Tensor[(15, 576), bool] */;
  %209 = @func_6381(%207, %208) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(15, 576), uint8]) */;
  %210 = cast(%var_9640, dtype="float64") /* ty=Tensor[(1, 375), float64] */;
  %211 = cosh(%210) /* ty=Tensor[(1, 375), float64] */;
  %212 = cast(%var_9637, dtype="float64") /* ty=float64 */;
  %213 = cast(%var_9640, dtype="uint32") /* ty=Tensor[(1, 375), uint32] */;
  %214 = cast(%var_9636, dtype="float32") /* ty=Tensor[(1, 1690), float32] */;
  %215 = reshape(%212, newshape=[]) /* ty=float64 */;
  %216 = reshape(%213, newshape=[375]) /* ty=Tensor[(375), uint32] */;
  %217 = reshape(%214, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %218 = @func_7784(%215, %216, %217) /* ty=(Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) */;
  %219 = %218.2;
  %220 = cast(%219, dtype="int16") /* ty=Tensor[(375), int16] */;
  %221 = shape_of(%211, dtype="int32") /* ty=Tensor[(2), int32] */;
  %222 = cast(%211, dtype="int16") /* ty=Tensor[(1, 375), int16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %224 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %225 = %204.3;
  %226 = %209.0;
  %227 = logical_xor(%222, %223) /* ty=Tensor[(?, 375), int16] */;
  (%224, %225, %var_9636, %var_9637, %226, meta[relay.Constant][11] /* ty=Tensor[(144, 4), bool] */, %var_9653, %227)
}

def @func_2120() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_4033(%var_4031: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(1690), float32]) {
  @func_4030(%var_4031) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(1690), float32]) */
}

def @func_5593() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) {
  @func_5591() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) */
}

def @func_5923() -> Tensor[(2, 10, 16), float64] {
  %229 = fn () -> Tensor[(2, 10, 16), float64] {
    %228 = @func_5591() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) */;
    %228.0
  };
  %229() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_10431(%var_10429: Tensor[(22, 4), int16]) -> (Tensor[(2, 10, 16), float64], Tensor[(11, 2, 4), int16], Tensor[(22, 4), int16]) {
  @func_10428(%var_10429) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(11, 2, 4), int16], Tensor[(22, 4), int16]) */
}

def @func_11544() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_11542() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_11556() -> (Tensor[(2, 10, 16), float64],) {
  @func_11554() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_6434() -> (Tensor[(576), bool], Tensor[(1690), float32]) {
  @func_6432() /* ty=(Tensor[(576), bool], Tensor[(1690), float32]) */
}

def @func_7423() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %233 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %230 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %231 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
    %232 = %230.0;
    (%231, %232)
  };
  %233() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_1674(%var_1672: Tensor[(10, 7, 14), float64]) -> (Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) {
  @func_1671(%var_1672) /* ty=(Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) */
}

def @func_11308() -> (Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool]) {
  @func_11306() /* ty=(Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool]) */
}

def @func_6698() -> Tensor[(2, 10, 16), float64] {
  %235 = fn () -> Tensor[(2, 10, 16), float64] {
    %234 = @func_5895() /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(120), float32], Tensor[(1690), float32]) */;
    %234.0
  };
  %235() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_3048() -> (Tensor[(2, 10, 16), float64],) {
  @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_10737() -> (Tensor[(2, 10, 16), float64],) {
  @func_10735() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_7090() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %240 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %236 = @func_5840() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %237 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %238 = %236.0;
    %239 = %237.0;
    (%238, %239)
  };
  %240() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_10327(%var_10326: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(5, 11, 4), bool], Tensor[(220), int64], Tensor[(1690), float32]) {
  %250 = fn (%var_10318: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(5, 11, 4), bool], Tensor[(220), int64], Tensor[(1690), float32]) {
    %241 = cast(meta[relay.Constant][12] /* ty=Tensor[(220), int64] */, dtype="int64") /* ty=Tensor[(220), int64] */;
    %242 = cast(meta[relay.Constant][12] /* ty=Tensor[(220), int64] */, dtype="int64") /* ty=Tensor[(220), int64] */;
    %243 = cast(%var_10318, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %244 = reshape(%241, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), int64] */;
    %245 = reshape(%242, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), int64] */;
    %246 = reshape(%243, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %247 = @func_10286(%244, %245, %246) /* ty=(Tensor[(5, 11, 4), bool], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
    %248 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
    %249 = %247.0;
    (%248, %249, meta[relay.Constant][12] /* ty=Tensor[(220), int64] */, %var_10318)
  };
  %250(%var_10326) /* ty=(Tensor[(2, 10, 16), bool], Tensor[(5, 11, 4), bool], Tensor[(220), int64], Tensor[(1690), float32]) */
}

def @func_8824() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %251 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %252 = @func_4840() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) */;
  %253 = %251.0;
  %254 = %252.0;
  (%253, %254)
}

def @func_8589() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %255 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %256 = @func_7108() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %257 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %258 = %255.1;
  %259 = %256.1;
  %260 = %257.1;
  (%258, %259, %260)
}

def @func_11326() -> Tensor[(2, 10, 16), float64] {
  %262 = fn () -> Tensor[(2, 10, 16), float64] {
    %261 = @func_4463() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %261.0
  };
  %262() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_10447() -> (Tensor[(2, 10, 16), float64],) {
  @func_10445() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_2943() -> (Tensor[(2, 10, 16), float64],) {
  %265 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %263 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %264 = %263.1;
    (%264,)
  };
  %265() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_3667() -> Tensor[(2, 10, 16), float64] {
  @func_3665() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_4514() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %266 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %267 = %266.0;
  %268 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  (%267, %268)
}

def @func_3780() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_3778() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_3046() -> (Tensor[(2, 10, 16), float64],) {
  %269 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  (%269,)
}

def @func_6027(%var_6025: Tensor[(169, 10), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(1690), float64], Tensor[(169, 10), float32]) {
  @func_6024(%var_6025) /* ty=(Tensor[(2, 10, 16), bool], Tensor[(1690), float64], Tensor[(169, 10), float32]) */
}

def @func_8958(%var_8915: Tensor[(16, 13, 10), bool], %var_8916: Tensor[(16, 13, 10), bool], %var_8923: Tensor[(56), bool]) -> (Tensor[(16, 13, 10), bool], Tensor[(14, 2, 2), bool], Tensor[(56), bool], Tensor[(2, 10, 16), float64]) {
  %270 = cast(%var_8916, dtype="bool") /* ty=Tensor[(16, 13, 10), bool] */;
  %271 = shape_of(%var_8915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_8915, dtype="bool") /* ty=Tensor[(16, 13, 10), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = cast(%var_8923, dtype="bool") /* ty=Tensor[(56), bool] */;
  %275 = cast(%var_8923, dtype="bool") /* ty=Tensor[(56), bool] */;
  %276 = reshape(%274, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %277 = reshape(%275, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %278 = @func_5295(%276, %277) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) */;
  %279 = @func_4463() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %280 = logical_or(%272, %273) /* ty=Tensor[(16, 13, 10), bool] */;
  %281 = %278.0;
  %282 = %279.0;
  (%280, %281, %var_8923, %282)
}

def @func_6315() -> Tensor[(2, 10, 16), float64] {
  @func_3819() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_10479(%var_10477: Tensor[(5, 14, 1), float32], %var_10478: Tensor[(5, 14, 15), float32]) -> Tensor[(5, 14, 15), float32] {
  @func_10475(%var_10477, %var_10478) /* ty=Tensor[(5, 14, 15), float32] */
}

def @func_1490() -> (Tensor[(2, 10, 16), float64],) {
  %283 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %284 = rsqrt(%283) /* ty=Tensor[(2, 10, 16), float64] */;
  (%284,)
}

def @func_10735() -> (Tensor[(2, 10, 16), float64],) {
  %285 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %286 = %285.0;
  (%286,)
}

def @func_6712() -> Tensor[(2, 10, 16), float64] {
  %287 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %287.0
}

def @func_2118() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %288 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %289 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %290 = %288.0;
  %291 = %289.0;
  (%290, %291)
}

def @func_4463() -> (Tensor[(2, 10, 16), float64],) {
  %292 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %293 = %292.1;
  (%293,)
}

def @func_191(%var_167: Tensor[(12, 3, 16), bool]) -> (Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
  %294 = cast(%var_167, dtype="bool") /* ty=Tensor[(12, 3, 16), bool] */;
  %295 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(12, 3, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 3, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 16), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 3, 16), bool] */, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %299 = cast(meta[relay.Constant][15] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %300 = reshape(%299, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %301 = @func_92(%300) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %302 = logical_or(%296, %297) /* ty=Tensor[(12, 3, 16), bool] */;
  %303 = atanh(%298) /* ty=Tensor[(12, 3, 16), float32] */;
  %304 = %301.0;
  (%302, %303, %304, meta[relay.Constant][15] /* ty=Tensor[(1690), float32] */)
}

def @func_10445() -> (Tensor[(2, 10, 16), float64],) {
  %305 = @func_3778() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %306 = %305.1;
  (%306,)
}

def @func_6899(%var_6871: Tensor[(1, 6, 8), float32]) -> (Tensor[(1, 6, 8), float32], Tensor[(2, 10, 16), float64]) {
  %307 = cast(%var_6871, dtype="float32") /* ty=Tensor[(1, 6, 8), float32] */;
  %308 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %309 = atan(%307) /* ty=Tensor[(1, 6, 8), float32] */;
  %310 = %308.1;
  (%309, %310)
}

def @func_5895() -> (Tensor[(2, 10, 16), float64], float64, Tensor[(120), float32], Tensor[(1690), float32]) {
  %311 = @func_5754() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %312 = cast(meta[relay.Constant][16] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %313 = reshape(%312, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %314 = @func_3477(%313) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(120), float32], float64, Tensor[(576, 1), bool]) */;
  %315 = cast(meta[relay.Constant][16] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %316 = %314.4;
  %317 = cast(%316, dtype="float64") /* ty=float64 */;
  %318 = reshape(%315, newshape=[30, 4]) /* ty=Tensor[(30, 4), float32] */;
  %319 = reshape(%317, newshape=[]) /* ty=float64 */;
  %320 = @func_2343(%318, %319) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) */;
  %321 = %311.0;
  %322 = %320.7;
  (%321, %316, meta[relay.Constant][16] /* ty=Tensor[(120), float32] */, %322)
}

def @func_6432() -> (Tensor[(576), bool], Tensor[(1690), float32]) {
  %323 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %324 = @func_5180() /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %325 = %323.2;
  %326 = %324.2;
  (%325, %326)
}

def @func_5980(%var_5979: Tensor[(15, 11, 1), float64]) -> (Tensor[(15, 11, 1), float64],) {
  %332 = fn (%var_5971: Tensor[(15, 11, 1), float64]) -> (Tensor[(15, 11, 1), float64],) {
    %327 = @func_5591() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) */;
    %328 = %327.3;
    %329 = cast(%328, dtype="float64") /* ty=float64 */;
    %330 = cast(%var_5971, dtype="float64") /* ty=Tensor[(15, 11, 1), float64] */;
    %331 = divide(%329, %330) /* ty=Tensor[(15, 11, 1), float64] */;
    (%331,)
  };
  %332(%var_5979) /* ty=(Tensor[(15, 11, 1), float64],) */
}

def @func_2663(%var_2661: float64, %var_2662: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(13, 10, 13), float32]) {
  %348 = fn (%var_2635: float64, %var_2636: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(13, 10, 13), float32]) {
    %333 = cast(%var_2635, dtype="float64") /* ty=float64 */;
    %334 = cast(%var_2636, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %335 = reshape(%333, newshape=[]) /* ty=float64 */;
    %336 = reshape(%334, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %337 = @func_131(%335, %336) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
    %338 = cast(%var_2636, dtype="float64") /* ty=Tensor[(1690), float64] */;
    %339 = acosh(%338) /* ty=Tensor[(1690), float64] */;
    %340 = cast(%339, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %341 = cast(%var_2636, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %342 = reshape(%341, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
    %343 = @func_92(%342) /* ty=(Tensor[(13, 10, 13), float32],) */;
    %344 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
    %345 = %337.0;
    %346 = log2(%340) /* ty=Tensor[(1690), float32] */;
    %347 = %343.0;
    (%344, %345, %var_2635, %346, %347)
  };
  %348(%var_2661, %var_2662) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(13, 10, 13), float32]) */
}

def @func_4704(%var_4701: Tensor[(294), uint16], %var_4702: Tensor[(14, 3, 7), uint16], %var_4703: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(294), uint16], Tensor[(14, 3, 7), float64], Tensor[(14, 3, 7), float32], Tensor[(14, 3, 7), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
  @func_4699(%var_4701, %var_4702, %var_4703) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(294), uint16], Tensor[(14, 3, 7), float64], Tensor[(14, 3, 7), float32], Tensor[(14, 3, 7), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */
}

def @func_4981() -> Tensor[(2, 10, 16), bool] {
  @func_4979() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_4841() -> (Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) {
  %355 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) {
    %349 = @func_3411() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %350 = cast(meta[relay.Constant][17] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
    %351 = reshape(%350, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float64] */;
    %352 = @func_1671(%351) /* ty=(Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) */;
    %353 = %349.0;
    %354 = %352.2;
    (%353, %354, meta[relay.Constant][17] /* ty=Tensor[(980), float64] */)
  };
  %355() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) */
}

def @func_10709() -> Tensor[(2, 10, 16), bool] {
  %356 = fn () -> Tensor[(2, 10, 16), bool] {
    @func_4979() /* ty=Tensor[(2, 10, 16), bool] */
  };
  %356() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_6115() -> (Tensor[(2, 10, 16), float64],) {
  %357 = @func_3411() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %358 = %357.1;
  (%358,)
}

def @func_9061(%var_9059: Tensor[(576, 1), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576, ?), bool], Tensor[(2, 10, 16), int16]) {
  @func_9058(%var_9059) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576, ?), bool], Tensor[(2, 10, 16), int16]) */
}

def @func_9807() -> Tensor[(2, 10, 16), float64] {
  %359 = @func_7341() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %359.0
}

def @func_11542() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %360 = @func_4148() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %361 = @func_9807() /* ty=Tensor[(2, 10, 16), float64] */;
  %362 = %360.1;
  (%361, %362)
}

def @func_11306() -> (Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool]) {
  %363 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
  %364 = @func_10213() /* ty=Tensor[(2, 10, 16), bool] */;
  %365 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
  %366 = %363.1;
  (%364, %365, %366)
}

def @func_3147(%var_3146: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
  %373 = fn (%var_3129: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
    %367 = @func_2563() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %368 = cast(%var_3129, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %369 = reshape(%368, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
    %370 = @func_92(%369) /* ty=(Tensor[(13, 10, 13), float32],) */;
    %371 = %367.0;
    %372 = %370.0;
    (%371, %372, %var_3129)
  };
  %373(%var_3146) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */
}

def @func_2734() -> Tensor[(2, 10, 16), float64] {
  %374 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %374.0
}

def @func_135(%var_133: float64, %var_134: Tensor[(1690), float32]) -> (Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) {
  @func_131(%var_133, %var_134) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */
}

def @func_2565() -> (Tensor[(2, 10, 16), float64],) {
  @func_2563() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_9759(%var_9757: float32, %var_9758: Tensor[(3, 10, 1), float32]) -> Tensor[(3, 10, 1), float32] {
  %377 = fn (%var_9751: float32, %var_9752: Tensor[(3, 10, 1), float32]) -> Tensor[(3, 10, 1), float32] {
    %375 = cast(%var_9751, dtype="float32") /* ty=float32 */;
    %376 = cast(%var_9752, dtype="float32") /* ty=Tensor[(3, 10, 1), float32] */;
    power(%375, %376) /* ty=Tensor[(3, 10, 1), float32] */
  };
  %377(%var_9757, %var_9758) /* ty=Tensor[(3, 10, 1), float32] */
}

def @func_9113() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_9111() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_6839(%var_6836: Tensor[(5, 15, 5), uint32], %var_6837: Tensor[(5, 15, 5), uint32], %var_6838: Tensor[(1690), float32]) -> (Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(5, 15, 5), bool]) {
  %394 = fn (%var_6808: Tensor[(5, 15, 5), uint32], %var_6809: Tensor[(5, 15, 5), uint32], %var_6818: Tensor[(1690), float32]) -> (Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(5, 15, 5), bool]) {
    %378 = cast(4.62047f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %379 = cast(%var_6818, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %380 = reshape(%378, newshape=[]) /* ty=float64 */;
    %381 = reshape(%379, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %382 = @func_131(%380, %381) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
    %383 = cast(%var_6809, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
    %384 = shape_of(%var_6808, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%var_6808, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %387 = less_equal(%385, %386) /* ty=Tensor[(5, 15, 5), bool] */;
    %388 = cast(%387, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
    %389 = shape_of(%var_6809, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%var_6809, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %392 = %382.0;
    %393 = equal(%390, %391) /* ty=Tensor[(5, 15, 5), bool] */;
    (%392, 4.62047f64 /* ty=float64 */, %var_6818, %393)
  };
  %394(%var_6836, %var_6837, %var_6838) /* ty=(Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(5, 15, 5), bool]) */
}

def @func_6964(%var_6962: Tensor[(15, 10, 12), uint16], %var_6963: Tensor[(15, 10, 12), uint16]) -> (Tensor[(15, 10, 12), bool], Tensor[(120), float32], Tensor[(576), bool]) {
  %404 = fn (%var_6948: Tensor[(15, 10, 12), uint16], %var_6949: Tensor[(15, 10, 12), uint16]) -> (Tensor[(15, 10, 12), bool], Tensor[(120), float32], Tensor[(576), bool]) {
    %395 = cast(%var_6949, dtype="bool") /* ty=Tensor[(15, 10, 12), bool] */;
    %396 = shape_of(%var_6948, dtype="int32") /* ty=Tensor[(3), int32] */;
    %397 = cast(%var_6948, dtype="bool") /* ty=Tensor[(15, 10, 12), bool] */;
    %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %399 = cast(meta[relay.Constant][18] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %400 = reshape(%399, newshape=[576]) /* ty=Tensor[(576), bool] */;
    %401 = @func_2020(%400) /* ty=(Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) */;
    %402 = less(%397, %398) /* ty=Tensor[(15, 10, 12), bool] */;
    %403 = %401.0;
    (%402, %403, meta[relay.Constant][18] /* ty=Tensor[(576), bool] */)
  };
  %404(%var_6962, %var_6963) /* ty=(Tensor[(15, 10, 12), bool], Tensor[(120), float32], Tensor[(576), bool]) */
}

def @func_5436() -> Tensor[(2, 10, 16), float64] {
  @func_5215() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_8403(%var_8402: Tensor[(14, 4), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(14, 4), bool]) {
  %412 = fn (%var_8385: Tensor[(14, 4), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(14, 4), bool]) {
    %405 = cast(%var_8385, dtype="bool") /* ty=Tensor[(14, 4), bool] */;
    %406 = cast(%var_8385, dtype="bool") /* ty=Tensor[(14, 4), bool] */;
    %407 = reshape(%405, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
    %408 = reshape(%406, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
    %409 = @func_5295(%407, %408) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) */;
    %410 = @func_3819() /* ty=Tensor[(2, 10, 16), float64] */;
    %411 = %409.1;
    (%410, %411, %var_8385)
  };
  %412(%var_8402) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(14, 4), bool]) */
}

def @func_7278() -> (Tensor[(2, 10, 16), float64],) {
  @func_7276() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_5073(%var_5072: Tensor[(2, 10, 16), float64]) -> (Tensor[(2, 10, 16), bool],) {
  %419 = fn (%var_5056: Tensor[(2, 10, 16), float64]) -> (Tensor[(2, 10, 16), bool],) {
    %413 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
    %414 = cast(%var_5056, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
    %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%413, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %418 = logical_or(%416, %417) /* ty=Tensor[(2, 10, 16), bool] */;
    (%418,)
  };
  %419(%var_5072) /* ty=(Tensor[(2, 10, 16), bool],) */
}

def @func_10728() -> Tensor[(2, 10, 16), float64] {
  @func_10726() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_2536() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_3213(%var_3212: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
  %426 = fn (%var_3206: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
    %420 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %421 = cast(%var_3206, dtype="bool") /* ty=Tensor[(576), bool] */;
    %422 = reshape(%421, newshape=[576]) /* ty=Tensor[(576), bool] */;
    %423 = @func_2020(%422) /* ty=(Tensor[(120), float32], Tensor[(576), bool], Tensor[(2, 10, 16), uint16], Tensor[(1, 576), float64]) */;
    %424 = %420.0;
    %425 = %423.1;
    (%424, %425, %var_3206)
  };
  %426(%var_3212) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */
}

def @func_9301() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 130), bool]) {
  %427 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %428 = @func_3778() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %429 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 130), float32] */, dtype="float32") /* ty=Tensor[(13, 130), float32] */;
  %430 = reshape(%429, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %431 = @func_92(%430) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="bool") /* ty=Tensor[(13, 10, 13), bool] */;
  %434 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(13, 130), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 130), float32] */, dtype="bool") /* ty=Tensor[(13, 130), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %437 = %427.0;
  %438 = %428.0;
  %439 = less(%435, %436) /* ty=Tensor[(13, 130), bool] */;
  (%437, %438, %439)
}

def @func_9478() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %444 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %440 = @func_6507() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %441 = @func_5754() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %442 = %440.0;
    %443 = %441.0;
    (%442, %443)
  };
  %444() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_10649(%var_10647: Tensor[(72), float32], %var_10648: Tensor[(264), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(9, 2, 4), bool], float32, Tensor[(72), float32], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  @func_10645(%var_10647, %var_10648) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(9, 2, 4), bool], float32, Tensor[(72), float32], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) */
}

def @func_4382() -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) {
  @func_4380() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) */
}

def @func_6714() -> Tensor[(2, 10, 16), float64] {
  @func_6712() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_7531() -> (Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) {
  %445 = cast(meta[relay.Constant][20] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
  %446 = reshape(%445, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float64] */;
  %447 = @func_1671(%446) /* ty=(Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) */;
  %448 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  %449 = %447.5;
  %450 = @func_3819() /* ty=Tensor[(2, 10, 16), float64] */;
  (%448, %449, meta[relay.Constant][20] /* ty=Tensor[(980), float64] */, %450)
}

def @func_485(%var_482: Tensor[(10, 3, 4), float32], %var_483: float64, %var_484: Tensor[(1, 576), bool]) -> (Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) {
  @func_480(%var_482, %var_483, %var_484) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */
}

def @func_1842(%var_1840: Tensor[(1690, 1), float32], %var_1841: float64) -> (Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) {
  %469 = fn (%var_1820: Tensor[(1690, 1), float32], %var_1828: float64) -> (Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) {
    %451 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %452 = %451.0;
    %453 = cast(%452, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
    %454 = cast(%var_1820, dtype="float32") /* ty=Tensor[(1690, 1), float32] */;
    %455 = reshape(%454, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
    %456 = @func_92(%455) /* ty=(Tensor[(13, 10, 13), float32],) */;
    %457 = cast(%var_1820, dtype="float32") /* ty=Tensor[(1690, 1), float32] */;
    %458 = reshape(%457, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
    %459 = @func_92(%458) /* ty=(Tensor[(13, 10, 13), float32],) */;
    %460 = cast(%var_1828, dtype="float64") /* ty=float64 */;
    %461 = %456.0;
    %462 = cast(%461, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
    %463 = reshape(%460, newshape=[]) /* ty=float64 */;
    %464 = reshape(%462, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %465 = @func_131(%463, %464) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
    %466 = asin(%453) /* ty=Tensor[(2, 10, 16), float32] */;
    %467 = %459.0;
    %468 = %465.2;
    (%466, %461, %var_1820, %467, %468, %var_1828)
  };
  %469(%var_1840, %var_1841) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) */
}

def @func_2181(%var_2149: Tensor[(2, 10, 16), float64]) -> (Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) {
  %470 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %472 = reshape(%471, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %473 = cast(%var_2149, dtype="uint32") /* ty=Tensor[(2, 10, 16), uint32] */;
  %474 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%470, dtype="uint32") /* ty=Tensor[(2, 10, 16), uint32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %477 = cast(%470, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %478 = atanh(%477) /* ty=Tensor[(2, 10, 16), float64] */;
  %479 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 10, 16), float64] */, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %483 = @func_1567(%472) /* ty=Tensor[(2, 10, 16), int16] */;
  %484 = left_shift(%475, %476) /* ty=Tensor[(2, 10, 16), uint32] */;
  %485 = power(%481, %482) /* ty=Tensor[(2, 10, 16), float32] */;
  (%483, %484, %485)
}

def @func_7974(%var_7972: Tensor[(56, 1), bool]) -> (Tensor[(2, 10, 16), float64], float64, Tensor[(56, 1), bool]) {
  @func_7971(%var_7972) /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(56, 1), bool]) */
}

def @func_4380() -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) {
  %486 = @func_3411() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %487 = cast(meta[relay.Constant][22] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %488 = reshape(%487, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %489 = @func_3145(%488) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %490 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %491 = %486.0;
  %492 = %489.1;
  %493 = %490.0;
  (%491, %492, meta[relay.Constant][22] /* ty=Tensor[(1690), float32] */, %493)
}

def @func_4465() -> (Tensor[(2, 10, 16), float64],) {
  @func_4463() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_6117() -> (Tensor[(2, 10, 16), float64],) {
  @func_6115() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_5438() -> Tensor[(2, 10, 16), float64] {
  @func_5436() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_6902(%var_6900: Tensor[(1, 6, 8), float32]) -> (Tensor[(1, 6, 8), float32], Tensor[(2, 10, 16), float64]) {
  @func_6899(%var_6900) /* ty=(Tensor[(1, 6, 8), float32], Tensor[(2, 10, 16), float64]) */
}

def @func_11528() -> (Tensor[(2, 10, 16), float64],) {
  %494 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  (%494,)
}

def @func_10051() -> Tensor[(2, 10, 16), float64] {
  %495 = fn () -> Tensor[(2, 10, 16), float64] {
    @func_2242() /* ty=Tensor[(2, 10, 16), float64] */
  };
  %495() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_5628() -> Tensor[(2, 10, 16), float64] {
  @func_5626() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_3953() -> Tensor[(2, 10, 16), float64] {
  @func_3951() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_5298(%var_5296: Tensor[(14, 2, 2), bool], %var_5297: Tensor[(14, 2, 2), bool]) -> (Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) {
  %507 = fn (%var_5284: Tensor[(14, 2, 2), bool], %var_5285: Tensor[(14, 2, 2), bool]) -> (Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) {
    %496 = cast(%var_5285, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %497 = shape_of(%var_5284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%var_5284, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %500 = cast(meta[relay.Constant][23] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %501 = cast(-9.26201f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %502 = reshape(%500, newshape=[30, 4]) /* ty=Tensor[(30, 4), float32] */;
    %503 = reshape(%501, newshape=[]) /* ty=float64 */;
    %504 = @func_2343(%502, %503) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) */;
    %505 = logical_and(%498, %499) /* ty=Tensor[(14, 2, 2), bool] */;
    %506 = %504.0;
    (%505, %506, meta[relay.Constant][23] /* ty=Tensor[(120), float32] */, -9.26201f64 /* ty=float64 */)
  };
  %507(%var_5296, %var_5297) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) */
}

def @func_10790() -> (Tensor[(2, 10, 16), float64], Tensor[(6, 12, 12), float32], Tensor[(864), float32], Tensor[(1690), float32], Tensor[(72, 8), bool]) {
  %508 = @func_9111() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %509 = cast(meta[relay.Constant][24] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %510 = cast(meta[relay.Constant][24] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %511 = cast(meta[relay.Constant][25] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %512 = reshape(%509, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %513 = reshape(%510, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %514 = reshape(%511, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %515 = @func_355(%512, %513, %514) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %516 = @func_7531() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) */;
  %517 = %508.0;
  %518 = %515.0;
  %519 = %516.1;
  (%517, %518, meta[relay.Constant][24] /* ty=Tensor[(864), float32] */, meta[relay.Constant][25] /* ty=Tensor[(1690), float32] */, %519)
}

def @func_9331() -> Tensor[(6, 12, 4), float32] {
  %520 = @func_8154() /* ty=(Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) */;
  %520.0
}

def @func_3256() -> (Tensor[(2, 10, 16), float64],) {
  @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_10074() -> (Tensor[(2, 10, 16), float64],) {
  %521 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %522 = %521.0;
  (%522,)
}

def @func_2244() -> Tensor[(2, 10, 16), float64] {
  @func_2242() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_11586() -> Tensor[(2, 10, 16), float64] {
  %524 = fn () -> Tensor[(2, 10, 16), float64] {
    %523 = @func_7422() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %523.1
  };
  %524() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_3681() -> (Tensor[(2, 10, 16), float64],) {
  @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_3479(%var_3478: Tensor[(120), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(120), float32], float64, Tensor[(576, 1), bool]) {
  %536 = fn (%var_3467: Tensor[(120), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(120), float32], float64, Tensor[(576, 1), bool]) {
    %525 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %526 = cast(%var_3467, dtype="float32") /* ty=Tensor[(120), float32] */;
    %527 = cast(2.34679f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %528 = cast(meta[relay.Constant][26] /* ty=Tensor[(576, 1), bool] */, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
    %529 = reshape(%526, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
    %530 = reshape(%527, newshape=[]) /* ty=float64 */;
    %531 = reshape(%528, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
    %532 = @func_480(%529, %530, %531) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
    %533 = %525.0;
    %534 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
    %535 = %532.3;
    (%533, %534, %535, %var_3467, 2.34679f64 /* ty=float64 */, meta[relay.Constant][26] /* ty=Tensor[(576, 1), bool] */)
  };
  %536(%var_3478) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(120), float32], float64, Tensor[(576, 1), bool]) */
}

def @func_10832() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(6, 12, 4), float32]) {
  %537 = @func_8178() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %538 = @func_8154() /* ty=(Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) */;
  %539 = %537.0;
  %540 = @func_6712() /* ty=Tensor[(2, 10, 16), float64] */;
  %541 = %538.0;
  (%539, %540, %541)
}

def @func_10834() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(6, 12, 4), float32]) {
  @func_10832() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(6, 12, 4), float32]) */
}

def @func_3821() -> Tensor[(2, 10, 16), float64] {
  @func_3819() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_5216() -> Tensor[(2, 10, 16), float64] {
  %543 = fn () -> Tensor[(2, 10, 16), float64] {
    %542 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %542.0
  };
  %543() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_7313(%var_7312: Tensor[(169, 10), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), int8]) {
  %555 = fn (%var_7300: Tensor[(169, 10), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), int8]) {
    %544 = cast(%var_7300, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
    %545 = reshape(%544, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %546 = @func_3145(%545) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
    %547 = %546.1;
    %548 = cast(%var_7300, dtype="int8") /* ty=Tensor[(169, 10), int8] */;
    %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %550 = cast(%547, dtype="int8") /* ty=Tensor[(13, 10, 13), int8] */;
    %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %552 = @func_6738() /* ty=Tensor[(2, 10, 16), float64] */;
    %553 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
    %554 = add(%550, %551) /* ty=Tensor[(13, 10, 13), int8] */;
    (%552, %553, %554)
  };
  %555(%var_7312) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), int8]) */
}

def @func_10110() -> Tensor[(2, 10, 16), float64] {
  %556 = fn () -> Tensor[(2, 10, 16), float64] {
    @func_5436() /* ty=Tensor[(2, 10, 16), float64] */
  };
  %556() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_6740() -> Tensor[(2, 10, 16), float64] {
  @func_6738() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_4150() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_4148() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_6317() -> Tensor[(2, 10, 16), float64] {
  @func_6315() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_11129(%var_11128: Tensor[(110, 9), float64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(110, 9), float64]) {
  %563 = fn (%var_11125: Tensor[(110, 9), float64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(110, 9), float64]) {
    %557 = @func_5840() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %558 = cast(%var_11125, dtype="float64") /* ty=Tensor[(110, 9), float64] */;
    %559 = reshape(%558, newshape=[1, 990]) /* ty=Tensor[(1, 990), float64] */;
    %560 = @func_8759(%559) /* ty=(Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 990), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %561 = %557.0;
    %562 = %560.5;
    (%561, %562, %var_11125)
  };
  %563(%var_11128) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(110, 9), float64]) */
}

def @func_1569(%var_1568: Tensor[(2, 10, 16), float64]) -> Tensor[(2, 10, 16), int16] {
  %570 = fn (%var_1548: Tensor[(2, 10, 16), float64]) -> Tensor[(2, 10, 16), int16] {
    %564 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %565 = %564.0;
    %566 = cast(%var_1548, dtype="int16") /* ty=Tensor[(2, 10, 16), int16] */;
    %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
    %568 = cast(%565, dtype="int16") /* ty=Tensor[(2, 10, 16), int16] */;
    %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_or(%568, %569) /* ty=Tensor[(2, 10, 16), int16] */
  };
  %570(%var_1568) /* ty=Tensor[(2, 10, 16), int16] */
}

def @func_5182() -> (Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  @func_5180() /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */
}

def @func_8963(%var_8960: Tensor[(16, 13, 10), bool], %var_8961: Tensor[(16, 13, 10), bool], %var_8962: Tensor[(56), bool]) -> (Tensor[(16, 13, 10), bool], Tensor[(14, 2, 2), bool], Tensor[(56), bool], Tensor[(2, 10, 16), float64]) {
  @func_8958(%var_8960, %var_8961, %var_8962) /* ty=(Tensor[(16, 13, 10), bool], Tensor[(14, 2, 2), bool], Tensor[(56), bool], Tensor[(2, 10, 16), float64]) */
}

def @func_8510(%var_8508: Tensor[(9, 13, 15), int32], %var_8509: Tensor[(9, 13, 15), int32]) -> (Tensor[(9, 13, 15), bool], Tensor[(9, 13, 15), float32], Tensor[(2, 10, 16), bool], Tensor[(9, 13, 15), int64]) {
  @func_8506(%var_8508, %var_8509) /* ty=(Tensor[(9, 13, 15), bool], Tensor[(9, 13, 15), float32], Tensor[(2, 10, 16), bool], Tensor[(9, 13, 15), int64]) */
}

def @func_2971() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %574 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %571 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %572 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
    %573 = %571.1;
    (%572, %573)
  };
  %574() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_2622(%var_2620: Tensor[(2, 10, 16), float64]) -> Tensor[(2, 10, 16), bool] {
  @func_2619(%var_2620) /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_5253(%var_5226: Tensor[(2, 10, 16), float64], %var_5247: Tensor[(120), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(13, 10, 13), float32], Tensor[(120), float32], float64, Tensor[(576), bool]) {
  %575 = @func_5215() /* ty=Tensor[(2, 10, 16), float64] */;
  %576 = cast(%var_5226, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %580 = cast(meta[relay.Constant][27] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %581 = reshape(%580, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %582 = @func_4030(%581) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(1690), float32]) */;
  %583 = cast(%var_5247, dtype="float32") /* ty=Tensor[(120), float32] */;
  %584 = cast(4.68801f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %585 = cast(meta[relay.Constant][28] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %586 = reshape(%583, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
  %587 = reshape(%584, newshape=[]) /* ty=float64 */;
  %588 = reshape(%585, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
  %589 = @func_480(%586, %587, %588) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
  %590 = less(%578, %579) /* ty=Tensor[(2, 10, 16), bool] */;
  %591 = %582.4;
  %592 = %589.1;
  (%590, %591, meta[relay.Constant][27] /* ty=Tensor[(864), float32] */, %592, %var_5247, 4.68801f64 /* ty=float64 */, meta[relay.Constant][28] /* ty=Tensor[(576), bool] */)
}

def @func_5549(%var_5510: bool, %var_5511: Tensor[(7, 4, 3), bool]) -> (Tensor[(7, 4, 3), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  %593 = cast(%var_5510, dtype="bool") /* ty=bool */;
  %594 = cast(%var_5511, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %595 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %597 = reshape(%596, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %598 = @func_5071(%597) /* ty=(Tensor[(2, 10, 16), bool],) */;
  %599 = cast(meta[relay.Constant][29] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %600 = reshape(%599, newshape=[4, 11, 6]) /* ty=Tensor[(4, 11, 6), float32] */;
  %601 = @func_4246(%600) /* ty=(Tensor[(4, 11, 6), float32],) */;
  %602 = logical_and(%593, %594) /* ty=Tensor[(7, 4, 3), bool] */;
  %603 = %598.0;
  %604 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  %605 = @func_3819() /* ty=Tensor[(2, 10, 16), float64] */;
  %606 = %601.0;
  (%602, %595, %603, %604, %605, %606, meta[relay.Constant][29] /* ty=Tensor[(264), float32] */)
}

def @func_2075() -> (Tensor[(2, 10, 16), float64],) {
  %608 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %607 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
    (%607,)
  };
  %608() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_3837() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) {
  %612 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) {
    %609 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %610 = %609.0;
    %611 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
    (%610, %611)
  };
  %612() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */
}

def @func_5841() -> (Tensor[(2, 10, 16), float64],) {
  %614 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %613 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
    (%613,)
  };
  %614() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_547(%var_541: Tensor[(11, 2, 4), int16]) -> Tensor[(11, 2, 4), int16] {
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 2, 4), int16] */, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
  %616 = shape_of(%var_541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_541, dtype="int16") /* ty=Tensor[(11, 2, 4), int16] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%617, %618) /* ty=Tensor[(11, 2, 4), int16] */
}

def @func_7108() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %619 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %620 = %619.0;
  %621 = @func_5767() /* ty=Tensor[(2, 10, 16), float64] */;
  (%620, %621)
}

def @func_3819() -> Tensor[(2, 10, 16), float64] {
  %622 = @func_2942() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %622.0
}

def @func_2242() -> Tensor[(2, 10, 16), float64] {
  %623 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %623.0
}

def @func_4572() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) {
  %629 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) {
    %624 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
    %625 = %624.0;
    %626 = cast(%625, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
    %627 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
    %628 = sin(%626) /* ty=Tensor[(2, 10, 16), float32] */;
    (%627, %628)
  };
  %629() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */
}

def @func_9303() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 130), bool]) {
  @func_9301() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 130), bool]) */
}

def @func_6024(%var_6014: Tensor[(169, 10), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(1690), float64], Tensor[(169, 10), float32]) {
  %630 = cast(%var_6014, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
  %631 = cast(%var_6014, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
  %632 = reshape(%630, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %633 = reshape(%631, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %634 = @func_3341(%632, %633) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) */;
  %635 = @func_4979() /* ty=Tensor[(2, 10, 16), bool] */;
  %636 = %634.2;
  (%635, %636, %var_6014)
}

def @func_5415(%var_5414: Tensor[(1, 440), uint64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(11, 9, 10), float64], Tensor[(990), float64], float64, float64, Tensor[(4, 11, 10), float64], Tensor[(1, 440), float32], Tensor[(2, 10, 16), float64]) {
  %666 = fn (%var_5399: Tensor[(1, 440), uint64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(11, 9, 10), float64], Tensor[(990), float64], float64, float64, Tensor[(4, 11, 10), float64], Tensor[(1, 440), float32], Tensor[(2, 10, 16), float64]) {
    %637 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %638 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
    %639 = cast(meta[relay.Constant][31] /* ty=Tensor[(990), float64] */, dtype="float64") /* ty=Tensor[(990), float64] */;
    %640 = reshape(%639, newshape=[11, 9, 10]) /* ty=Tensor[(11, 9, 10), float64] */;
    %641 = @func_4963(%640) /* ty=(Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) */;
    %642 = cast(-8.59423f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %643 = reshape(%642, newshape=[]) /* ty=float64 */;
    %644 = @func_2920(%643) /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) */;
    %645 = cast(%var_5399, dtype="uint64") /* ty=Tensor[(1, 440), uint64] */;
    %646 = cast(%var_5399, dtype="uint64") /* ty=Tensor[(1, 440), uint64] */;
    %647 = reshape(%645, newshape=[4, 11, 10]) /* ty=Tensor[(4, 11, 10), uint64] */;
    %648 = reshape(%646, newshape=[4, 11, 10]) /* ty=Tensor[(4, 11, 10), uint64] */;
    %649 = @func_3897(%647, %648) /* ty=(Tensor[(4, 11, 10), uint64], Tensor[(4, 11, 10), float64]) */;
    %650 = %649.0;
    %651 = cast(%var_5399, dtype="float64") /* ty=Tensor[(1, 440), float64] */;
    %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%650, dtype="float64") /* ty=Tensor[(4, 11, 10), float64] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %655 = cast(%var_5399, dtype="float32") /* ty=Tensor[(1, 440), float32] */;
    %656 = asinh(%655) /* ty=Tensor[(1, 440), float32] */;
    %657 = cast(%656, dtype="float32") /* ty=Tensor[(1, 440), float32] */;
    %658 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %659 = %637.0;
    %660 = %638.1;
    %661 = %641.2;
    %662 = %644.1;
    %663 = power(%653, %654) /* ty=Tensor[(4, 11, 10), float64] */;
    %664 = log10(%657) /* ty=Tensor[(1, 440), float32] */;
    %665 = %658.0;
    (%659, %660, %661, meta[relay.Constant][31] /* ty=Tensor[(990), float64] */, %662, -8.59423f64 /* ty=float64 */, %663, %664, %665)
  };
  %666(%var_5414) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(11, 9, 10), float64], Tensor[(990), float64], float64, float64, Tensor[(4, 11, 10), float64], Tensor[(1, 440), float32], Tensor[(2, 10, 16), float64]) */
}

def @func_6300() -> (Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) {
  @func_6298() /* ty=(Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */
}

def @func_4113() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64]) {
  %674 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64]) {
    %667 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %668 = %667.1;
    %669 = cast(%668, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
    %670 = reshape(%669, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
    %671 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %672 = @func_2619(%670) /* ty=Tensor[(2, 10, 16), bool] */;
    %673 = %671.0;
    (%668, %672, %673)
  };
  %674() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64]) */
}

def @func_4912(%var_4910: float32, %var_4911: Tensor[(9, 2, 4), float32]) -> Tensor[(9, 2, 4), bool] {
  %677 = fn (%var_4903: float32, %var_4904: Tensor[(9, 2, 4), float32]) -> Tensor[(9, 2, 4), bool] {
    %675 = cast(%var_4903, dtype="bool") /* ty=bool */;
    %676 = cast(%var_4904, dtype="bool") /* ty=Tensor[(9, 2, 4), bool] */;
    equal(%675, %676) /* ty=Tensor[(9, 2, 4), bool] */
  };
  %677(%var_4910, %var_4911) /* ty=Tensor[(9, 2, 4), bool] */
}

def @func_10909() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %678 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %679 = @func_8044() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %680 = %678.0;
  %681 = %679.0;
  %682 = @func_10109() /* ty=Tensor[(2, 10, 16), float64] */;
  (%680, %681, %682)
}

def @func_7276() -> (Tensor[(2, 10, 16), float64],) {
  %683 = @func_5767() /* ty=Tensor[(2, 10, 16), float64] */;
  (%683,)
}

def @func_5768() -> Tensor[(2, 10, 16), float64] {
  %685 = fn () -> Tensor[(2, 10, 16), float64] {
    %684 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %684.0
  };
  %685() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_7987() -> (Tensor[(2, 10, 16), float64],) {
  %686 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %687 = %686.0;
  (%687,)
}

def @main(%var_11617: Tensor[(11, 7, 6), float32], %var_11626: Tensor[(11, 7, 6), float32], %var_11636: Tensor[(864), float32], %var_11693: Tensor[(144, 4), bool]) -> (Tensor[(11, 7, 6), bool], Tensor[(864), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(14, 13, 1690), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(144, 4), bool], Tensor[(14, 13, 1690), bool]) {
  %688 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %689 = shape_of(%var_11617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_11617, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %692 = maximum(%690, %691) /* ty=Tensor[(11, 7, 6), float32] */;
  %693 = cast(%var_11626, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %697 = @func_7278() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %698 = cast(%var_11636, dtype="float32") /* ty=Tensor[(864), float32] */;
  %699 = cast(%var_11636, dtype="float32") /* ty=Tensor[(864), float32] */;
  %700 = cast(meta[relay.Constant][33] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %701 = reshape(%698, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %702 = reshape(%699, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %703 = reshape(%700, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %704 = @func_359(%701, %702, %703) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %705 = %704.4;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %707 = asin(%706) /* ty=Tensor[(14, 13, 1690), float64] */;
  %708 = cast(%707, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %709 = log10(%708) /* ty=Tensor[(14, 13, 1690), float64] */;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %711 = @func_3642() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %712 = cast(%var_11693, dtype="bool") /* ty=Tensor[(144, 4), bool] */;
  %713 = reshape(%712, newshape=[576, 1]) /* ty=Tensor[(576, 1), bool] */;
  %714 = @func_9061(%713) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576, ?), bool], Tensor[(2, 10, 16), int16]) */;
  %715 = cast(%709, dtype="float64") /* ty=Tensor[(14, 13, 1690), float64] */;
  %716 = cosh(%715) /* ty=Tensor[(14, 13, 1690), float64] */;
  %717 = cast(%707, dtype="bool") /* ty=Tensor[(14, 13, 1690), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(14, 13, 1690), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %721 = equal(%695, %696) /* ty=Tensor[(11, 7, 6), bool] */;
  %722 = @func_8623() /* ty=Tensor[(2, 10, 16), float64] */;
  %723 = %697.0;
  %724 = sqrt(%710) /* ty=Tensor[(14, 13, 1690), float64] */;
  %725 = %711.1;
  %726 = %714.3;
  %727 = logical_and(%719, %720) /* ty=Tensor[(14, 13, 1690), bool] */;
  (%721, %var_11636, meta[relay.Constant][33] /* ty=Tensor[(1690), float32] */, %722, %723, %724, %725, %726, %var_11693, %727)
}

def @func_6911() -> Tensor[(1690), float32] {
  %728 = @func_6152() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %728.2
}

def @func_4798() -> (Tensor[(2, 10, 16), float64],) {
  %731 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %729 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %730 = %729.0;
    (%730,)
  };
  %731() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_9809() -> Tensor[(2, 10, 16), float64] {
  @func_9807() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_4889(%var_4887: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  @func_4886(%var_4887) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */
}

def @func_9111() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %732 = @func_4148() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %733 = @func_7531() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(72, 8), bool], Tensor[(980), float64], Tensor[(2, 10, 16), float64]) */;
  %734 = %732.1;
  %735 = %733.0;
  (%734, %735)
}

def @func_1986() -> (Tensor[(2, 10, 16), float64],) {
  %736 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %737 = %736.0;
  (%737,)
}

def @func_3642() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_3640() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_11448() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(6, 12, 4), float64], Tensor[(2, 10, 16), float64], Tensor[(294), uint16]) {
  %753 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(6, 12, 4), float64], Tensor[(2, 10, 16), float64], Tensor[(294), uint16]) {
    %738 = @func_10832() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(6, 12, 4), float32]) */;
    %739 = @func_7422() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %740 = @func_8044() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %741 = @func_9379() /* ty=(Tensor[(576), bool],) */;
    %742 = @func_9331() /* ty=Tensor[(6, 12, 4), float32] */;
    %743 = cast(%742, dtype="float64") /* ty=Tensor[(6, 12, 4), float64] */;
    %744 = cast(meta[relay.Constant][34] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
    %745 = reshape(%744, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint16] */;
    %746 = @func_3604(%745) /* ty=(Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %747 = %738.0;
    %748 = %739.0;
    %749 = %740.0;
    %750 = %741.0;
    %751 = log(%743) /* ty=Tensor[(6, 12, 4), float64] */;
    %752 = %746.2;
    (%747, %748, %749, %750, %751, %752, meta[relay.Constant][34] /* ty=Tensor[(294), uint16] */)
  };
  %753() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(6, 12, 4), float64], Tensor[(2, 10, 16), float64], Tensor[(294), uint16]) */
}

def @func_2346(%var_2344: Tensor[(30, 4), float32], %var_2345: float64) -> (Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) {
  %772 = fn (%var_2289: Tensor[(30, 4), float32], %var_2290: float64) -> (Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) {
    %754 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %755 = cast(%var_2289, dtype="float32") /* ty=Tensor[(30, 4), float32] */;
    %756 = cast(%var_2290, dtype="float64") /* ty=float64 */;
    %757 = cast(meta[relay.Constant][35] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %758 = reshape(%755, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
    %759 = reshape(%756, newshape=[]) /* ty=float64 */;
    %760 = reshape(%757, newshape=[1, 576]) /* ty=Tensor[(1, 576), bool] */;
    %761 = @func_480(%758, %759, %760) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(12, 3, 16), bool], Tensor[(1, 576), bool], Tensor[(10, 3, 4), float32]) */;
    %762 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %763 = cast(meta[relay.Constant][36] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %764 = cast(%var_2290, dtype="float64") /* ty=float64 */;
    %765 = reshape(%763, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
    %766 = reshape(%764, newshape=[]) /* ty=float64 */;
    %767 = @func_1839(%765, %766) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) */;
    %768 = %754.1;
    %769 = %761.0;
    %770 = %762.0;
    %771 = %767.0;
    (%768, %769, %var_2289, %var_2290, meta[relay.Constant][35] /* ty=Tensor[(576), bool] */, %770, %771, meta[relay.Constant][36] /* ty=Tensor[(1690), float32] */)
  };
  %772(%var_2344, %var_2345) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) */
}

def @func_2534() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %773 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %774 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  (%773, %774)
}

def @func_6475() -> (Tensor[(2, 10, 16), float64],) {
  @func_6473() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_8826() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_8824() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_9966() -> Tensor[(2, 10, 16), float64] {
  @func_9964() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_194(%var_192: Tensor[(12, 3, 16), bool]) -> (Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
  @func_191(%var_192) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */
}

def @func_7221(%var_7219: Tensor[(13, 15, 14), uint32], %var_7220: Tensor[(294), uint16]) -> (Tensor[(13, 15, 14), uint32], Tensor[(14, 3, 7), float32], Tensor[(294), uint16], Tensor[(576), bool], Tensor[(13, 15, 14), float64], Tensor[(2, 10, 16), float64]) {
  @func_7217(%var_7219, %var_7220) /* ty=(Tensor[(13, 15, 14), uint32], Tensor[(14, 3, 7), float32], Tensor[(294), uint16], Tensor[(576), bool], Tensor[(13, 15, 14), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_2772() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) {
  %775 = @func_2101() /* ty=Tensor[(2, 10, 16), float64] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
  %777 = reshape(%776, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
  %778 = @func_1567(%777) /* ty=Tensor[(2, 10, 16), int16] */;
  (%775, %778)
}

def @func_7482() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %782 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %779 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %780 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
    %781 = %779.0;
    (%780, %781)
  };
  %782() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_1988() -> (Tensor[(2, 10, 16), float64],) {
  @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_5626() -> Tensor[(2, 10, 16), float64] {
  %783 = @func_4840() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) */;
  %783.0
}

def @func_6760() -> Tensor[(2, 10, 16), float64] {
  %785 = fn () -> Tensor[(2, 10, 16), float64] {
    %784 = @func_6507() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %784.1
  };
  %785() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_10428(%var_10424: Tensor[(22, 4), int16]) -> (Tensor[(2, 10, 16), float64], Tensor[(11, 2, 4), int16], Tensor[(22, 4), int16]) {
  %786 = @func_4840() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(88), int16], Tensor[(980), float64]) */;
  %787 = cast(%var_10424, dtype="int16") /* ty=Tensor[(22, 4), int16] */;
  %788 = reshape(%787, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), int16] */;
  %789 = %786.0;
  %790 = @func_547(%788) /* ty=Tensor[(11, 2, 4), int16] */;
  (%789, %790, %var_10424)
}

def @func_6473() -> (Tensor[(2, 10, 16), float64],) {
  %791 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %792 = %791.1;
  (%792,)
}

def @func_1470(%var_1398: Tensor[(12, 14, 12), float64], %var_1416: Tensor[(1690), float32], %var_1429: Tensor[(576), bool], %var_1438: float64) -> (Tensor[(864), float32], Tensor[(1690), int32], Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(14, 13, 1690), bool], Tensor[(14, 13, 1690), bool], Tensor[(13, 10, 13), float32], Tensor[(12, 14, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(1690), float32]) {
  %793 = cast(meta[relay.Constant][37] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %794 = cast(meta[relay.Constant][37] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %795 = cast(%var_1416, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %796 = reshape(%793, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %797 = reshape(%794, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %798 = reshape(%795, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %799 = @func_355(%796, %797, %798) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %800 = %799.1;
  %801 = cast(%800, dtype="int32") /* ty=Tensor[(13, 10, 13), int32] */;
  %802 = shape_of(%var_1416, dtype="int32") /* ty=Tensor[(1), int32] */;
  %803 = cast(%var_1416, dtype="int32") /* ty=Tensor[(1690), int32] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?), int32] */;
  %805 = cast(%var_1429, dtype="bool") /* ty=Tensor[(576), bool] */;
  %806 = reshape(%805, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
  %807 = @func_191(%806) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %808 = cast(%var_1438, dtype="float64") /* ty=float64 */;
  %809 = cast(%800, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %810 = reshape(%808, newshape=[]) /* ty=float64 */;
  %811 = reshape(%809, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %812 = @func_131(%810, %811) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %813 = cast(%var_1438, dtype="float64") /* ty=float64 */;
  %814 = cast(%var_1416, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %815 = reshape(%813, newshape=[]) /* ty=float64 */;
  %816 = reshape(%814, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %817 = @func_131(%815, %816) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %818 = cast(%var_1438, dtype="float64") /* ty=float64 */;
  %819 = cast(%var_1416, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %820 = reshape(%818, newshape=[]) /* ty=float64 */;
  %821 = reshape(%819, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %822 = @func_131(%820, %821) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %823 = cast(%var_1398, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %824 = sinh(%823) /* ty=Tensor[(12, 14, 12), float64] */;
  %825 = cast(%824, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %826 = cast(%var_1438, dtype="bool") /* ty=bool */;
  %827 = cast(meta[relay.Constant][37] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %828 = cast(meta[relay.Constant][37] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %829 = cast(%800, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
  %830 = reshape(%827, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %831 = reshape(%828, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %832 = reshape(%829, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %833 = @func_355(%830, %831, %832) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %834 = cast(%var_1429, dtype="bool") /* ty=Tensor[(576), bool] */;
  %835 = reshape(%834, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
  %836 = @func_191(%835) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %837 = logical_xor(%803, %804) /* ty=Tensor[(1690), int32] */;
  %838 = %807.2;
  %839 = %812.2;
  %840 = %817.2;
  %841 = %822.1;
  %842 = logical_and(%825, %826) /* ty=Tensor[(12, 14, 12), bool] */;
  %843 = %833.0;
  %844 = %836.3;
  (meta[relay.Constant][37] /* ty=Tensor[(864), float32] */, %837, %838, %var_1429, %839, %840, %841, %842, %843, %844)
}

def @func_131(%var_99: float64, %var_112: Tensor[(1690), float32]) -> (Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) {
  %845 = cast(%var_112, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %846 = reshape(%845, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %847 = @func_92(%846) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %848 = cast(%var_112, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %849 = log10(%848) /* ty=Tensor[(1690), float64] */;
  %850 = cast(%849, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %851 = reshape(%850, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %852 = @func_92(%851) /* ty=(Tensor[(13, 10, 13), float32],) */;
  %853 = cast(%var_99, dtype="float64") /* ty=float64 */;
  %854 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %855 = floor_divide(%853, %854) /* ty=Tensor[(14, 13, 1), float64] */;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %857 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(14, 13, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %860 = power(%858, %859) /* ty=Tensor[(14, 13, ?), float64] */;
  %861 = cast(%860, dtype="bool") /* ty=Tensor[(14, 13, ?), bool] */;
  %862 = cast(%849, dtype="bool") /* ty=Tensor[(1690), bool] */;
  %863 = %847.0;
  %864 = %852.0;
  %865 = logical_or(%861, %862) /* ty=Tensor[(14, 13, 1690), bool] */;
  (%863, %864, %865)
}

def @func_9669(%var_9665: Tensor[(1, 1690), float32], %var_9666: float64, %var_9667: Tensor[(1, 375), uint32], %var_9668: Tensor[(8640), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(16, 2, 13), float64], Tensor[(1, 1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(144, 4), bool], Tensor[(8640), bool], Tensor[(?, 375), int16]) {
  @func_9663(%var_9665, %var_9666, %var_9667, %var_9668) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(16, 2, 13), float64], Tensor[(1, 1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(144, 4), bool], Tensor[(8640), bool], Tensor[(?, 375), int16]) */
}

def @func_8300(%var_8298: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(13, 10, 13), float32], Tensor[(864), float32]) {
  %866 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %867 = cast(meta[relay.Constant][39] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %868 = reshape(%867, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %869 = @func_4217(%868) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(1690, 1), float32], Tensor[(1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %870 = cast(%var_8298, dtype="float32") /* ty=Tensor[(864), float32] */;
  %871 = cast(%var_8298, dtype="float32") /* ty=Tensor[(864), float32] */;
  %872 = cast(meta[relay.Constant][39] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %873 = reshape(%870, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %874 = reshape(%871, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %875 = reshape(%872, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %876 = @func_355(%873, %874, %875) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %877 = %866.0;
  %878 = %869.6;
  %879 = %876.1;
  (%877, %878, meta[relay.Constant][39] /* ty=Tensor[(1690), float32] */, %879, %var_8298)
}

def @func_2563() -> (Tensor[(2, 10, 16), float64],) {
  %880 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %881 = %880.0;
  (%881,)
}

def @func_4963(%var_4952: Tensor[(11, 9, 10), float64]) -> (Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) {
  %882 = cast(%var_4952, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %883 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(11, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %886 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %887 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 10), float64] */;
  %888 = add(%884, %885) /* ty=Tensor[(11, 9, 10), float64] */;
  %889 = %886.0;
  %890 = acos(%887) /* ty=Tensor[(11, 9, 10), float64] */;
  (%888, %889, %890)
}

def @func_1958(%var_1956: Tensor[(576), bool], %var_1957: Tensor[(2, 10, 16), float64]) -> (Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), int16], Tensor[(13, 10, 13), float32]) {
  %909 = fn (%var_1895: Tensor[(576), bool], %var_1899: Tensor[(2, 10, 16), float64]) -> (Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), int16], Tensor[(13, 10, 13), float32]) {
    %891 = cast(%var_1895, dtype="bool") /* ty=Tensor[(576), bool] */;
    %892 = reshape(%891, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), bool] */;
    %893 = @func_191(%892) /* ty=(Tensor[(12, 3, 16), bool], Tensor[(12, 3, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
    %894 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %895 = %894.0;
    %896 = cast(%var_1899, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
    %897 = shape_of(%895, dtype="int32") /* ty=Tensor[(3), int32] */;
    %898 = cast(%895, dtype="float32") /* ty=Tensor[(2, 10, 16), float32] */;
    %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %900 = floor_divide(%898, %899) /* ty=Tensor[(2, 10, 16), float32] */;
    %901 = cast(%900, dtype="float64") /* ty=Tensor[(2, 10, 16), float64] */;
    %902 = reshape(%901, newshape=[2, 10, 16]) /* ty=Tensor[(2, 10, 16), float64] */;
    %903 = %893.2;
    %904 = cast(%903, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
    %905 = reshape(%904, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
    %906 = @func_92(%905) /* ty=(Tensor[(13, 10, 13), float32],) */;
    %907 = @func_1567(%902) /* ty=Tensor[(2, 10, 16), int16] */;
    %908 = %906.0;
    (%903, %var_1895, %900, %907, %908)
  };
  %909(%var_1956, %var_1957) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(2, 10, 16), float32], Tensor[(2, 10, 16), int16], Tensor[(13, 10, 13), float32]) */
}

def @func_9724(%var_9723: Tensor[(2, 15, 3), float64]) -> (Tensor[(2, 15, 3), float64],) {
  %912 = fn (%var_9716: Tensor[(2, 15, 3), float64]) -> (Tensor[(2, 15, 3), float64],) {
    %910 = cast(%var_9716, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
    %911 = log10(%910) /* ty=Tensor[(2, 15, 3), float64] */;
    (%911,)
  };
  %912(%var_9723) /* ty=(Tensor[(2, 15, 3), float64],) */
}

def @func_1671(%var_1611: Tensor[(10, 7, 14), float64]) -> (Tensor[(10, 7, 14), float64], Tensor[(11, 2, 4), int16], Tensor[(88), int16], Tensor[(14, 13, 1690), bool], Tensor[(2016, 1), float64], Tensor[(72, 8), bool], Tensor[(1690), bool]) {
  %913 = cast(%var_1611, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
  %914 = cast(meta[relay.Constant][41] /* ty=Tensor[(88), int16] */, dtype="int16") /* ty=Tensor[(88), int16] */;
  %915 = reshape(%914, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), int16] */;
  %916 = cast(meta[relay.Constant][42] /* ty=Tensor[(2016, 1), float64] */, dtype="float64") /* ty=Tensor[(2016, 1), float64] */;
  %917 = cast(meta[relay.Constant][43] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %918 = cast(meta[relay.Constant][44] /* ty=Tensor[(72, 8), bool] */, dtype="bool") /* ty=Tensor[(72, 8), bool] */;
  %919 = cast(-1.13508f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %920 = reshape(%916, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %921 = reshape(%917, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %922 = reshape(%918, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %923 = reshape(%919, newshape=[]) /* ty=float64 */;
  %924 = @func_1470(%920, %921, %922, %923) /* ty=(Tensor[(864), float32], Tensor[(1690), int32], Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(14, 13, 1690), bool], Tensor[(14, 13, 1690), bool], Tensor[(13, 10, 13), float32], Tensor[(12, 14, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(1690), float32]) */;
  %925 = cast(-1.13508f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %926 = cast(meta[relay.Constant][43] /* ty=Tensor[(1690), float32] */, dtype="bool") /* ty=Tensor[(1690), bool] */;
  %927 = log2(%913) /* ty=Tensor[(10, 7, 14), float64] */;
  %928 = @func_547(%915) /* ty=Tensor[(11, 2, 4), int16] */;
  %929 = %924.4;
  %930 = less(%925, %926) /* ty=Tensor[(1690), bool] */;
  (%927, %928, meta[relay.Constant][41] /* ty=Tensor[(88), int16] */, %929, meta[relay.Constant][42] /* ty=Tensor[(2016, 1), float64] */, meta[relay.Constant][44] /* ty=Tensor[(72, 8), bool] */, %930)
}

def @func_8013() -> (Tensor[(2, 10, 16), float64],) {
  @func_8011() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_9218(%var_9216: Tensor[(3, 15, 14), float32], %var_9217: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(864), float32], Tensor[(169, 10), float32], Tensor[(2, 10, 16), float64], Tensor[(3, 15, 14), float32], Tensor[(2, 10, 16), float64]) {
  %951 = fn (%var_9128: Tensor[(3, 15, 14), float32], %var_9129: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(864), float32], Tensor[(169, 10), float32], Tensor[(2, 10, 16), float64], Tensor[(3, 15, 14), float32], Tensor[(2, 10, 16), float64]) {
    %931 = cast(%var_9129, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %932 = shape_of(%var_9128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %933 = cast(%var_9128, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %935 = @func_9111() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %936 = cast(meta[relay.Constant][45] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %937 = cast(meta[relay.Constant][45] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %938 = cast(meta[relay.Constant][46] /* ty=Tensor[(169, 10), float32] */, dtype="float32") /* ty=Tensor[(169, 10), float32] */;
    %939 = reshape(%936, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
    %940 = reshape(%937, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
    %941 = reshape(%938, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %942 = @func_355(%939, %940, %941) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
    %943 = %942.2;
    %944 = cast(%var_9129, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %945 = cast(%943, dtype="float32") /* ty=float32 */;
    %946 = @func_7554() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %947 = subtract(%933, %934) /* ty=Tensor[(3, 15, 14), float32] */;
    %948 = %935.0;
    %949 = mod(%944, %945) /* ty=Tensor[(3, 15, 14), float32] */;
    %950 = %946.0;
    (%947, meta[relay.Constant][45] /* ty=Tensor[(864), float32] */, meta[relay.Constant][46] /* ty=Tensor[(169, 10), float32] */, %948, %949, %950)
  };
  %951(%var_9216, %var_9217) /* ty=(Tensor[(3, 15, 14), float32], Tensor[(864), float32], Tensor[(169, 10), float32], Tensor[(2, 10, 16), float64], Tensor[(3, 15, 14), float32], Tensor[(2, 10, 16), float64]) */
}

def @func_7788(%var_7785: float64, %var_7786: Tensor[(375), uint32], %var_7787: Tensor[(1690, 1), float32]) -> (Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) {
  %963 = fn (%var_7753: float64, %var_7778: Tensor[(375), uint32], %var_7779: Tensor[(1690, 1), float32]) -> (Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) {
    %952 = cast(%var_7753, dtype="float64") /* ty=float64 */;
    %953 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 13), float64] */;
    %954 = cast(%var_7778, dtype="uint32") /* ty=Tensor[(375), uint32] */;
    %955 = cast(%var_7778, dtype="uint32") /* ty=Tensor[(375), uint32] */;
    %956 = cast(%var_7779, dtype="float32") /* ty=Tensor[(1690, 1), float32] */;
    %957 = reshape(%954, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint32] */;
    %958 = reshape(%955, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint32] */;
    %959 = reshape(%956, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %960 = @func_6835(%957, %958, %959) /* ty=(Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(5, 15, 5), bool]) */;
    %961 = subtract(%952, %953) /* ty=Tensor[(16, 2, 13), float64] */;
    %962 = %960.2;
    (%961, %962, %var_7778, %var_7779)
  };
  %963(%var_7785, %var_7786, %var_7787) /* ty=(Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) */
}

def @func_11222(%var_11220: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32]) {
  @func_11219(%var_11220) /* ty=(Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(1690), float32], Tensor[(864), float32]) */
}

def @func_3665() -> Tensor[(2, 10, 16), float64] {
  %964 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %964.0
}

def @func_6857() -> (Tensor[(2, 10, 16), float64],) {
  %967 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %965 = @func_6507() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
    %966 = %965.0;
    (%966,)
  };
  %967() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_10076() -> (Tensor[(2, 10, 16), float64],) {
  @func_10074() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_10645(%var_10630: Tensor[(72), float32], %var_10639: Tensor[(264), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(9, 2, 4), bool], float32, Tensor[(72), float32], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  %968 = @func_10445() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %969 = @func_9920() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %970 = cast(-6.6326f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %971 = cast(%var_10630, dtype="float32") /* ty=Tensor[(72), float32] */;
  %972 = reshape(%970, newshape=[]) /* ty=float32 */;
  %973 = reshape(%971, newshape=[9, 2, 4]) /* ty=Tensor[(9, 2, 4), float32] */;
  %974 = cast(%var_10639, dtype="float32") /* ty=Tensor[(264), float32] */;
  %975 = reshape(%974, newshape=[4, 11, 6]) /* ty=Tensor[(4, 11, 6), float32] */;
  %976 = @func_4246(%975) /* ty=(Tensor[(4, 11, 6), float32],) */;
  %977 = %968.0;
  %978 = %969.3;
  %979 = @func_4909(%972, %973) /* ty=Tensor[(9, 2, 4), bool] */;
  %980 = %976.0;
  (%977, %978, %979, -6.6326f /* ty=float32 */, %var_10630, %980, %var_10639)
}

def @func_3412() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %985 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %981 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %982 = @func_2772() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) */;
    %983 = %981.0;
    %984 = %982.0;
    (%983, %984)
  };
  %985() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_10792() -> (Tensor[(2, 10, 16), float64], Tensor[(6, 12, 12), float32], Tensor[(864), float32], Tensor[(1690), float32], Tensor[(72, 8), bool]) {
  @func_10790() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(6, 12, 12), float32], Tensor[(864), float32], Tensor[(1690), float32], Tensor[(72, 8), bool]) */
}

def @func_1476(%var_1472: Tensor[(12, 14, 12), float64], %var_1473: Tensor[(1690), float32], %var_1474: Tensor[(576), bool], %var_1475: float64) -> (Tensor[(864), float32], Tensor[(1690), int32], Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(14, 13, 1690), bool], Tensor[(14, 13, 1690), bool], Tensor[(13, 10, 13), float32], Tensor[(12, 14, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(1690), float32]) {
  @func_1470(%var_1472, %var_1473, %var_1474, %var_1475) /* ty=(Tensor[(864), float32], Tensor[(1690), int32], Tensor[(13, 10, 13), float32], Tensor[(576), bool], Tensor[(14, 13, 1690), bool], Tensor[(14, 13, 1690), bool], Tensor[(13, 10, 13), float32], Tensor[(12, 14, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(1690), float32]) */
}

def @func_8044() -> (Tensor[(2, 10, 16), float64],) {
  %986 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
  (%986,)
}

def @func_3778() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %987 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %988 = @func_2942() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %989 = %987.0;
  %990 = %988.0;
  %991 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
  (%989, %990, %991)
}

def @func_5553(%var_5551: bool, %var_5552: Tensor[(7, 4, 3), bool]) -> (Tensor[(7, 4, 3), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) {
  @func_5549(%var_5551, %var_5552) /* ty=(Tensor[(7, 4, 3), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), bool], Tensor[(2, 10, 16), float64], Tensor[(4, 11, 6), float32], Tensor[(264), float32]) */
}

def @func_7394() -> (Tensor[(2, 10, 16), float64],) {
  %994 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %992 = @func_6152() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
    %993 = %992.1;
    (%993,)
  };
  %994() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_6078() -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
  %1000 = fn () -> (Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
    %995 = cast(meta[relay.Constant][48] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %996 = reshape(%995, newshape=[576]) /* ty=Tensor[(576), bool] */;
    %997 = @func_3211(%996) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
    %998 = @func_5215() /* ty=Tensor[(2, 10, 16), float64] */;
    %999 = %997.1;
    (%998, %999, meta[relay.Constant][48] /* ty=Tensor[(576), bool] */)
  };
  %1000() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */
}

def @func_550(%var_548: Tensor[(11, 2, 4), int16]) -> Tensor[(11, 2, 4), int16] {
  @func_547(%var_548) /* ty=Tensor[(11, 2, 4), int16] */
}

def @func_2920(%var_2918: float64) -> (Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) {
  %1001 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1002 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 1690), float32] */, dtype="float32") /* ty=Tensor[(1, 1690), float32] */;
  %1003 = cast(%var_2918, dtype="float64") /* ty=float64 */;
  %1004 = reshape(%1002, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %1005 = reshape(%1003, newshape=[]) /* ty=float64 */;
  %1006 = @func_1839(%1004, %1005) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) */;
  %1007 = %1001.0;
  %1008 = %1006.5;
  (%1007, %1008, meta[relay.Constant][49] /* ty=Tensor[(1, 1690), float32] */, %var_2918)
}

def @func_8011() -> (Tensor[(2, 10, 16), float64],) {
  %1009 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  (%1009,)
}

def @func_9333() -> Tensor[(6, 12, 4), float32] {
  @func_9331() /* ty=Tensor[(6, 12, 4), float32] */
}

def @func_8897(%var_8895: Tensor[(1690), float32], %var_8896: float64) -> (Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(16, 2, 13), float64], float64, Tensor[(375), uint32], Tensor[(2, 10, 16), float64]) {
  %1030 = fn (%var_8852: Tensor[(1690), float32], %var_8881: float64) -> (Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(16, 2, 13), float64], float64, Tensor[(375), uint32], Tensor[(2, 10, 16), float64]) {
    %1010 = @func_6298() /* ty=(Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
    %1011 = cast(%var_8852, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %1012 = reshape(%1011, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %1013 = @func_3145(%1012) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
    %1014 = cast(%var_8852, dtype="float64") /* ty=Tensor[(1690), float64] */;
    %1015 = cast(%var_8881, dtype="float64") /* ty=float64 */;
    %1016 = cast(meta[relay.Constant][50] /* ty=Tensor[(375), uint32] */, dtype="uint32") /* ty=Tensor[(375), uint32] */;
    %1017 = %1013.1;
    %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(13, 10, 13), float32] */;
    %1019 = reshape(%1015, newshape=[]) /* ty=float64 */;
    %1020 = reshape(%1016, newshape=[375]) /* ty=Tensor[(375), uint32] */;
    %1021 = reshape(%1018, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
    %1022 = @func_7784(%1019, %1020, %1021) /* ty=(Tensor[(16, 2, 13), float64], Tensor[(1690), float32], Tensor[(375), uint32], Tensor[(1690, 1), float32]) */;
    %1023 = cast(%var_8852, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %1024 = reshape(%1023, newshape=[169, 10]) /* ty=Tensor[(169, 10), float32] */;
    %1025 = @func_7311(%1024) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), int8]) */;
    %1026 = %1010.4;
    %1027 = atanh(%1014) /* ty=Tensor[(1690), float64] */;
    %1028 = %1022.0;
    %1029 = %1025.0;
    (%1026, %1017, %1027, %1028, %var_8881, meta[relay.Constant][50] /* ty=Tensor[(375), uint32] */, %1029)
  };
  %1030(%var_8895, %var_8896) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(16, 2, 13), float64], float64, Tensor[(375), uint32], Tensor[(2, 10, 16), float64]) */
}

def @func_8506(%var_8455: Tensor[(9, 13, 15), int32], %var_8456: Tensor[(9, 13, 15), int32]) -> (Tensor[(9, 13, 15), bool], Tensor[(9, 13, 15), float32], Tensor[(2, 10, 16), bool], Tensor[(9, 13, 15), int64]) {
  %1031 = cast(%var_8456, dtype="int32") /* ty=Tensor[(9, 13, 15), int32] */;
  %1032 = shape_of(%var_8455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1033 = cast(%var_8455, dtype="int32") /* ty=Tensor[(9, 13, 15), int32] */;
  %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1035 = logical_xor(%1033, %1034) /* ty=Tensor[(9, 13, 15), int32] */;
  %1036 = cast(%1035, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %1037 = shape_of(%var_8456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1038 = cast(%var_8456, dtype="bool") /* ty=Tensor[(9, 13, 15), bool] */;
  %1039 = dyn.reshape(%1036, %1037, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1040 = cast(%var_8455, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %1041 = shape_of(%1035, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1042 = cast(%1035, dtype="float32") /* ty=Tensor[(9, 13, 15), float32] */;
  %1043 = dyn.reshape(%1040, %1041, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1044 = cast(%1035, dtype="int64") /* ty=Tensor[(9, 13, 15), int64] */;
  %1045 = shape_of(%var_8456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1046 = cast(%var_8456, dtype="int64") /* ty=Tensor[(9, 13, 15), int64] */;
  %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1048 = logical_or(%1038, %1039) /* ty=Tensor[(9, 13, 15), bool] */;
  %1049 = add(%1042, %1043) /* ty=Tensor[(9, 13, 15), float32] */;
  %1050 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
  %1051 = minimum(%1046, %1047) /* ty=Tensor[(9, 13, 15), int64] */;
  (%1048, %1049, %1050, %1051)
}

def @func_359(%var_356: Tensor[(6, 12, 12), float32], %var_357: Tensor[(6, 12, 12), float32], %var_358: Tensor[(1690), float32]) -> (Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) {
  %1069 = fn (%var_330: Tensor[(6, 12, 12), float32], %var_331: Tensor[(6, 12, 12), float32], %var_343: Tensor[(1690), float32]) -> (Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) {
    %1052 = cast(%var_331, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
    %1053 = shape_of(%var_330, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1054 = cast(%var_330, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
    %1055 = dyn.reshape(%1052, %1053, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1056 = cast(-6.17138f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1057 = cast(%var_343, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %1058 = reshape(%1056, newshape=[]) /* ty=float64 */;
    %1059 = reshape(%1057, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %1060 = @func_131(%1058, %1059) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
    %1061 = cast(-6.17138f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1062 = cast(%var_343, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %1063 = reshape(%1061, newshape=[]) /* ty=float64 */;
    %1064 = reshape(%1062, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %1065 = @func_131(%1063, %1064) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
    %1066 = mod(%1054, %1055) /* ty=Tensor[(6, 12, 12), float32] */;
    %1067 = %1060.0;
    %1068 = %1065.2;
    (%1066, %1067, -6.17138f64 /* ty=float64 */, %var_343, %1068)
  };
  %1069(%var_356, %var_357, %var_358) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */
}

def @func_3900(%var_3898: Tensor[(4, 11, 10), uint64], %var_3899: Tensor[(4, 11, 10), uint64]) -> (Tensor[(4, 11, 10), uint64], Tensor[(4, 11, 10), float64]) {
  %1077 = fn (%var_3857: Tensor[(4, 11, 10), uint64], %var_3858: Tensor[(4, 11, 10), uint64]) -> (Tensor[(4, 11, 10), uint64], Tensor[(4, 11, 10), float64]) {
    %1070 = cast(%var_3858, dtype="uint64") /* ty=Tensor[(4, 11, 10), uint64] */;
    %1071 = shape_of(%var_3857, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1072 = cast(%var_3857, dtype="uint64") /* ty=Tensor[(4, 11, 10), uint64] */;
    %1073 = dyn.reshape(%1070, %1071, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1074 = cast(%var_3857, dtype="float64") /* ty=Tensor[(4, 11, 10), float64] */;
    %1075 = bitwise_or(%1072, %1073) /* ty=Tensor[(4, 11, 10), uint64] */;
    %1076 = erf(%1074) /* ty=Tensor[(4, 11, 10), float64] */;
    (%1075, %1076)
  };
  %1077(%var_3898, %var_3899) /* ty=(Tensor[(4, 11, 10), uint64], Tensor[(4, 11, 10), float64]) */
}

def @func_2774() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) {
  @func_2772() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) */
}

def @func_4248(%var_4247: Tensor[(4, 11, 6), float32]) -> (Tensor[(4, 11, 6), float32],) {
  %1083 = fn (%var_4242: Tensor[(4, 11, 6), float32]) -> (Tensor[(4, 11, 6), float32],) {
    %1078 = cast(%var_4242, dtype="float32") /* ty=Tensor[(4, 11, 6), float32] */;
    %1079 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(4, 11, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1080 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 6), float32] */;
    %1081 = dyn.reshape(%1078, %1079, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1082 = mod(%1080, %1081) /* ty=Tensor[(4, 11, 6), float32] */;
    (%1082,)
  };
  %1083(%var_4247) /* ty=(Tensor[(4, 11, 6), float32],) */
}

def @func_5798() -> Tensor[(2, 10, 16), float64] {
  @func_5796() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_9964() -> Tensor[(2, 10, 16), float64] {
  %1084 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1084.0
}

def @func_4516() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_4514() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_11055() -> Tensor[(2, 10, 16), bool] {
  %1085 = fn () -> Tensor[(2, 10, 16), bool] {
    @func_10708() /* ty=Tensor[(2, 10, 16), bool] */
  };
  %1085() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_3344(%var_3342: Tensor[(1690), float32], %var_3343: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) {
  %1112 = fn (%var_3268: Tensor[(1690), float32], %var_3296: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) {
    %1086 = @func_2772() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) */;
    %1087 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %1088 = reshape(%1087, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
    %1089 = @func_92(%1088) /* ty=(Tensor[(13, 10, 13), float32],) */;
    %1090 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %1091 = reshape(%1090, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
    %1092 = @func_3145(%1091) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
    %1093 = %1092.2;
    %1094 = cast(meta[relay.Constant][52] /* ty=Tensor[(1690), float32] */, dtype="float64") /* ty=Tensor[(1690), float64] */;
    %1095 = shape_of(%1093, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1096 = cast(%1093, dtype="float64") /* ty=Tensor[(1690), float64] */;
    %1097 = dyn.reshape(%1094, %1095, newshape=[]) /* ty=Tensor[(?), float64] */;
    %1098 = cast(%var_3296, dtype="uint16") /* ty=Tensor[(1690), uint16] */;
    %1099 = shape_of(%var_3268, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1100 = cast(%var_3268, dtype="uint16") /* ty=Tensor[(1690), uint16] */;
    %1101 = dyn.reshape(%1098, %1099, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %1102 = multiply(%1100, %1101) /* ty=Tensor[(1690), uint16] */;
    %1103 = cast(%1093, dtype="uint32") /* ty=Tensor[(1690), uint32] */;
    %1104 = shape_of(%1102, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1105 = cast(%1102, dtype="uint32") /* ty=Tensor[(1690), uint32] */;
    %1106 = dyn.reshape(%1103, %1104, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %1107 = %1086.0;
    %1108 = %1089.0;
    %1109 = power(%1096, %1097) /* ty=Tensor[(1690), float64] */;
    %1110 = right_shift(%1105, %1106) /* ty=Tensor[(1690), uint32] */;
    %1111 = @func_2458() /* ty=Tensor[(2, 10, 16), bool] */;
    (%1107, %1108, %1109, %1110, %1111)
  };
  %1112(%var_3342, %var_3343) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float64], Tensor[(1690), uint32], Tensor[(2, 10, 16), bool]) */
}

def @func_10214() -> Tensor[(2, 10, 16), bool] {
  %1114 = fn () -> Tensor[(2, 10, 16), bool] {
    %1113 = @func_3836() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), bool]) */;
    %1113.1
  };
  %1114() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_7110() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_7108() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_8178() -> (Tensor[(2, 10, 16), float64],) {
  %1115 = @func_7108() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1116 = %1115.0;
  (%1116,)
}

def @func_8591() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_8589() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_4217(%var_4201: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(1690, 1), float32], Tensor[(1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1117 = cast(%var_4201, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1118 = cast(-9.56566f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1119 = reshape(%1117, newshape=[1690, 1]) /* ty=Tensor[(1690, 1), float32] */;
  %1120 = reshape(%1118, newshape=[]) /* ty=float64 */;
  %1121 = @func_1839(%1119, %1120) /* ty=(Tensor[(2, 10, 16), float32], Tensor[(13, 10, 13), float32], Tensor[(1690, 1), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool], float64) */;
  %1122 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1123 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1124 = @func_3046() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1125 = @func_3665() /* ty=Tensor[(2, 10, 16), float64] */;
  %1126 = %1121.2;
  %1127 = %1122.0;
  %1128 = %1123.0;
  %1129 = %1124.0;
  (%1125, %1126, %var_4201, -9.56566f64 /* ty=float64 */, %1127, %1128, %1129)
}

def @func_4886(%var_4878: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) {
  %1130 = @func_3679() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1131 = cast(%var_4878, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1132 = reshape(%1131, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1133 = @func_3145(%1132) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */;
  %1134 = %1130.0;
  %1135 = %1133.0;
  (%1134, %1135, %var_4878)
}

def @func_10726() -> Tensor[(2, 10, 16), float64] {
  %1136 = @func_4797() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1136.0
}

def @func_7554() -> (Tensor[(2, 10, 16), float64],) {
  %1137 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1138 = %1137.1;
  (%1138,)
}

def @func_7135() -> Tensor[(2, 10, 16), float64] {
  %1139 = fn () -> Tensor[(2, 10, 16), float64] {
    @func_6759() /* ty=Tensor[(2, 10, 16), float64] */
  };
  %1139() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_7680(%var_7608: Tensor[(1690), float32], %var_7627: Tensor[(165), float64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(15, 11, 1), float64], Tensor[(165), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), int16], Tensor[(30, 4), float32], Tensor[(120), float32]) {
  %1140 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %1141 = cast(-8.04729f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1142 = cast(%var_7608, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1143 = reshape(%1141, newshape=[]) /* ty=float64 */;
  %1144 = reshape(%1142, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1145 = @func_131(%1143, %1144) /* ty=(Tensor[(13, 10, 13), float32], Tensor[(13, 10, 13), float32], Tensor[(14, 13, 1690), bool]) */;
  %1146 = cast(meta[relay.Constant][53] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %1147 = reshape(%1146, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %1148 = @func_3211(%1147) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %1149 = cast(%var_7627, dtype="float64") /* ty=Tensor[(165), float64] */;
  %1150 = reshape(%1149, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), float64] */;
  %1151 = @func_5978(%1150) /* ty=(Tensor[(15, 11, 1), float64],) */;
  %1152 = @func_7108() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1153 = @func_2563() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1154 = cast(%var_7608, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1155 = asinh(%1154) /* ty=Tensor[(1690), float32] */;
  %1156 = cast(meta[relay.Constant][54] /* ty=Tensor[(1690), float32] */, dtype="int16") /* ty=Tensor[(1690), int16] */;
  %1157 = shape_of(%1155, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1158 = cast(%1155, dtype="int16") /* ty=Tensor[(1690), int16] */;
  %1159 = dyn.reshape(%1156, %1157, newshape=[]) /* ty=Tensor[(?), int16] */;
  %1160 = cast(meta[relay.Constant][55] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %1161 = cast(-8.04729f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1162 = reshape(%1160, newshape=[30, 4]) /* ty=Tensor[(30, 4), float32] */;
  %1163 = reshape(%1161, newshape=[]) /* ty=float64 */;
  %1164 = @func_2343(%1162, %1163) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(10, 3, 4), bool], Tensor[(30, 4), float32], float64, Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32], Tensor[(1690), float32]) */;
  %1165 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
  %1166 = %1140.0;
  %1167 = %1145.1;
  %1168 = %1148.0;
  %1169 = %1151.0;
  %1170 = %1152.1;
  %1171 = %1153.0;
  %1172 = bitwise_xor(%1158, %1159) /* ty=Tensor[(1690), int16] */;
  %1173 = %1164.2;
  (%1165, %1166, %1167, -8.04729f64 /* ty=float64 */, %1168, meta[relay.Constant][53] /* ty=Tensor[(576), bool] */, %1169, %var_7627, %1170, %1171, %1172, %1173, meta[relay.Constant][55] /* ty=Tensor[(120), float32] */)
}

def @func_8303(%var_8301: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(13, 10, 13), float32], Tensor[(864), float32]) {
  @func_8300(%var_8301) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(13, 10, 13), float32], Tensor[(864), float32]) */
}

def @func_3606(%var_3605: Tensor[(14, 3, 7), uint16]) -> (Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1181 = fn (%var_3568: Tensor[(14, 3, 7), uint16]) -> (Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
    %1174 = cast(meta[relay.Constant][56] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %1175 = cast(%var_3568, dtype="uint16") /* ty=Tensor[(14, 3, 7), uint16] */;
    %1176 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %1177 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %1178 = bitwise_and(%1174, %1175) /* ty=Tensor[(14, 3, 7), uint16] */;
    %1179 = %1176.0;
    %1180 = %1177.0;
    (%1178, %1179, %1180)
  };
  %1181(%var_3605) /* ty=(Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_9058(%var_8996: Tensor[(576, 1), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576, ?), bool], Tensor[(2, 10, 16), int16]) {
  %1182 = @func_7039() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1183 = @func_7554() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1184 = cast(%var_8996, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
  %1185 = reshape(%1184, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %1186 = @func_3211(%1185) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %1187 = @func_7341() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1188 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1189 = cast(%var_8996, dtype="float32") /* ty=Tensor[(576, 1), float32] */;
  %1190 = acos(%1189) /* ty=Tensor[(576, 1), float32] */;
  %1191 = cast(%1190, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
  %1192 = sigmoid(%1191) /* ty=Tensor[(576, 1), float64] */;
  %1193 = cast(%1192, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
  %1194 = sqrt(%1193) /* ty=Tensor[(576, 1), float64] */;
  %1195 = cast(%1190, dtype="uint32") /* ty=Tensor[(576, 1), uint32] */;
  %1196 = shape_of(%1194, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1197 = cast(%1194, dtype="uint32") /* ty=Tensor[(576, 1), uint32] */;
  %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %1199 = bitwise_or(%1197, %1198) /* ty=Tensor[(576, ?), uint32] */;
  %1200 = cast(%1199, dtype="bool") /* ty=Tensor[(576, ?), bool] */;
  %1201 = shape_of(%1194, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1202 = cast(%1194, dtype="bool") /* ty=Tensor[(576, 1), bool] */;
  %1203 = dyn.reshape(%1200, %1201, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1204 = @func_2772() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), int16]) */;
  %1205 = %1182.0;
  %1206 = %1183.0;
  %1207 = %1186.1;
  %1208 = @func_7134() /* ty=Tensor[(2, 10, 16), float64] */;
  %1209 = %1187.0;
  %1210 = %1188.0;
  %1211 = less_equal(%1202, %1203) /* ty=Tensor[(576, ?), bool] */;
  %1212 = %1204.1;
  (%1205, %1206, %1207, %1208, %1209, %1210, %1211, %1212)
}

def @func_2459() -> Tensor[(2, 10, 16), bool] {
  %1219 = fn () -> Tensor[(2, 10, 16), bool] {
    %1213 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %1214 = %1213.0;
    %1215 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 10, 16), float64] */, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
    %1216 = shape_of(%1214, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1217 = cast(%1214, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
    %1218 = dyn.reshape(%1215, %1216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%1217, %1218) /* ty=Tensor[(2, 10, 16), bool] */
  };
  %1219() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_7341() -> (Tensor[(2, 10, 16), float64],) {
  %1220 = @func_6298() /* ty=(Tensor[(2, 10, 16), uint64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float32]) */;
  %1221 = %1220.3;
  (%1221,)
}

def @func_10290(%var_10287: Tensor[(5, 11, 4), int64], %var_10288: Tensor[(5, 11, 4), int64], %var_10289: Tensor[(1690), float32]) -> (Tensor[(5, 11, 4), bool], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
  %1231 = fn (%var_10266: Tensor[(5, 11, 4), int64], %var_10267: Tensor[(5, 11, 4), int64], %var_10284: Tensor[(1690), float32]) -> (Tensor[(5, 11, 4), bool], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) {
    %1222 = cast(%var_10267, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    %1223 = shape_of(%var_10266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1224 = cast(%var_10266, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    %1225 = dyn.reshape(%1222, %1223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1226 = cast(%var_10284, dtype="float32") /* ty=Tensor[(1690), float32] */;
    %1227 = reshape(%1226, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
    %1228 = @func_92(%1227) /* ty=(Tensor[(13, 10, 13), float32],) */;
    %1229 = equal(%1224, %1225) /* ty=Tensor[(5, 11, 4), bool] */;
    %1230 = %1228.0;
    (%1229, %1230, %var_10284)
  };
  %1231(%var_10287, %var_10288, %var_10289) /* ty=(Tensor[(5, 11, 4), bool], Tensor[(13, 10, 13), float32], Tensor[(1690), float32]) */
}

def @func_4699(%var_4646: Tensor[(294), uint16], %var_4652: Tensor[(14, 3, 7), uint16], %var_4692: Tensor[(576), bool]) -> (Tensor[(2, 10, 16), float64], Tensor[(294), uint16], Tensor[(14, 3, 7), float64], Tensor[(14, 3, 7), float32], Tensor[(14, 3, 7), float32], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) {
  %1232 = cast(%var_4646, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %1233 = reshape(%1232, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint16] */;
  %1234 = @func_3604(%1233) /* ty=(Tensor[(14, 3, 7), uint16], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1235 = %1234.0;
  %1236 = cast(%var_4652, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
  %1237 = shape_of(%1235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1238 = cast(%1235, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
  %1239 = dyn.reshape(%1236, %1237, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1240 = cast(%var_4652, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
  %1241 = cast(%var_4652, dtype="float32") /* ty=Tensor[(14, 3, 7), float32] */;
  %1242 = @func_4514() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1243 = @func_1986() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1244 = cast(%var_4692, dtype="bool") /* ty=Tensor[(576), bool] */;
  %1245 = reshape(%1244, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %1246 = @func_3211(%1245) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
  %1247 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  %1248 = maximum(%1238, %1239) /* ty=Tensor[(14, 3, 7), float64] */;
  %1249 = exp(%1240) /* ty=Tensor[(14, 3, 7), float32] */;
  %1250 = atan(%1241) /* ty=Tensor[(14, 3, 7), float32] */;
  %1251 = %1242.1;
  %1252 = %1243.0;
  %1253 = %1246.2;
  (%1247, %var_4646, %1248, %1249, %1250, %1251, %1252, %1253, %var_4692)
}

def @func_5897() -> (Tensor[(2, 10, 16), float64], float64, Tensor[(120), float32], Tensor[(1690), float32]) {
  @func_5895() /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(120), float32], Tensor[(1690), float32]) */
}

def @func_2736() -> Tensor[(2, 10, 16), float64] {
  @func_2734() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_9380() -> (Tensor[(576), bool],) {
  %1256 = fn () -> (Tensor[(576), bool],) {
    %1254 = @func_6077() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(576), bool]) */;
    %1255 = %1254.2;
    (%1255,)
  };
  %1256() /* ty=(Tensor[(576), bool],) */
}

def @func_3640() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  %1257 = @func_2534() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1258 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
  %1259 = %1257.1;
  (%1258, %1259)
}

def @func_2619(%var_2601: Tensor[(2, 10, 16), float64]) -> Tensor[(2, 10, 16), bool] {
  %1260 = @func_2118() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1261 = %1260.0;
  %1262 = cast(%var_2601, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %1263 = shape_of(%1261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1264 = cast(%1261, dtype="bool") /* ty=Tensor[(2, 10, 16), bool] */;
  %1265 = dyn.reshape(%1262, %1263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%1264, %1265) /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_7989() -> (Tensor[(2, 10, 16), float64],) {
  @func_7987() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_5152() -> (Tensor[(2, 10, 16), float64],) {
  %1268 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %1266 = @func_2074() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %1267 = %1266.0;
    (%1267,)
  };
  %1268() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_7343() -> (Tensor[(2, 10, 16), float64],) {
  @func_7341() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_2061() -> Tensor[(2, 10, 16), float64] {
  %1270 = fn () -> Tensor[(2, 10, 16), float64] {
    %1269 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %1269.0
  };
  %1270() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_4220(%var_4218: Tensor[(1690), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(1690, 1), float32], Tensor[(1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) {
  @func_4217(%var_4218) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(1690, 1), float32], Tensor[(1690), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */
}

def @func_5755() -> (Tensor[(2, 10, 16), float64],) {
  %1272 = fn () -> (Tensor[(2, 10, 16), float64],) {
    %1271 = @func_2060() /* ty=Tensor[(2, 10, 16), float64] */;
    (%1271,)
  };
  %1272() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_7971(%var_7943: Tensor[(56, 1), bool]) -> (Tensor[(2, 10, 16), float64], float64, Tensor[(56, 1), bool]) {
  %1273 = @func_3254() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1274 = cast(%var_7943, dtype="bool") /* ty=Tensor[(56, 1), bool] */;
  %1275 = cast(%var_7943, dtype="bool") /* ty=Tensor[(56, 1), bool] */;
  %1276 = reshape(%1274, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %1277 = reshape(%1275, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), bool] */;
  %1278 = @func_5295(%1276, %1277) /* ty=(Tensor[(14, 2, 2), bool], Tensor[(2, 10, 16), float64], Tensor[(120), float32], float64) */;
  %1279 = %1273.0;
  %1280 = %1278.3;
  (%1279, %1280, %var_7943)
}

def @func_10475(%var_10455: Tensor[(5, 14, 1), float32], %var_10456: Tensor[(5, 14, 15), float32]) -> Tensor[(5, 14, 15), float32] {
  %1281 = cast(%var_10455, dtype="float32") /* ty=Tensor[(5, 14, 1), float32] */;
  %1282 = cast(%var_10456, dtype="float32") /* ty=Tensor[(5, 14, 15), float32] */;
  power(%1281, %1282) /* ty=Tensor[(5, 14, 15), float32] */
}

def @func_10971(%var_10956: Tensor[(11, 15, 4), float32]) -> (Tensor[(11, 15, 4), float64],) {
  %1283 = cast(%var_10956, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %1284 = sigmoid(%1283) /* ty=Tensor[(11, 15, 4), float32] */;
  %1285 = cast(%1284, dtype="float64") /* ty=Tensor[(11, 15, 4), float64] */;
  %1286 = sqrt(%1285) /* ty=Tensor[(11, 15, 4), float64] */;
  (%1286,)
}

def @func_7684(%var_7682: Tensor[(1690), float32], %var_7683: Tensor[(165), float64]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(15, 11, 1), float64], Tensor[(165), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), int16], Tensor[(30, 4), float32], Tensor[(120), float32]) {
  @func_7680(%var_7682, %var_7683) /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(13, 10, 13), float32], float64, Tensor[(2, 10, 16), float64], Tensor[(576), bool], Tensor[(15, 11, 1), float64], Tensor[(165), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), int16], Tensor[(30, 4), float32], Tensor[(120), float32]) */
}

def @func_8154() -> (Tensor[(6, 12, 4), float32], Tensor[(1690), float32], Tensor[(2, 10, 16), float64]) {
  %1287 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
  %1288 = @func_6432() /* ty=(Tensor[(576), bool], Tensor[(1690), float32]) */;
  %1289 = sinh(%1287) /* ty=Tensor[(6, 12, 4), float32] */;
  %1290 = %1288.1;
  %1291 = @func_5215() /* ty=Tensor[(2, 10, 16), float64] */;
  (%1289, %1290, %1291)
}

def @func_4030(%var_4025: Tensor[(864), float32]) -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32], Tensor[(864), float32], Tensor[(1690), float32]) {
  %1292 = @func_2970() /* ty=(Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64]) */;
  %1293 = cast(%var_4025, dtype="float32") /* ty=Tensor[(864), float32] */;
  %1294 = cast(%var_4025, dtype="float32") /* ty=Tensor[(864), float32] */;
  %1295 = cast(meta[relay.Constant][59] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %1296 = reshape(%1293, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %1297 = reshape(%1294, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %1298 = reshape(%1295, newshape=[1690]) /* ty=Tensor[(1690), float32] */;
  %1299 = @func_355(%1296, %1297, %1298) /* ty=(Tensor[(6, 12, 12), float32], Tensor[(13, 10, 13), float32], float64, Tensor[(1690), float32], Tensor[(14, 13, 1690), bool]) */;
  %1300 = %1292.1;
  %1301 = @func_2734() /* ty=Tensor[(2, 10, 16), float64] */;
  %1302 = @func_2242() /* ty=Tensor[(2, 10, 16), float64] */;
  %1303 = @func_3951() /* ty=Tensor[(2, 10, 16), float64] */;
  %1304 = %1299.3;
  (%1300, %1301, %1302, %1303, %1304, %var_4025, meta[relay.Constant][59] /* ty=Tensor[(1690), float32] */)
}

def @func_4966(%var_4964: Tensor[(11, 9, 10), float64]) -> (Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) {
  @func_4963(%var_4964) /* ty=(Tensor[(11, 9, 10), float64], Tensor[(2, 10, 16), float64], Tensor[(11, 9, 10), float64]) */
}

def @func_4979() -> Tensor[(2, 10, 16), bool] {
  @func_2458() /* ty=Tensor[(2, 10, 16), bool] */
}

def @func_2184(%var_2182: Tensor[(2, 10, 16), float64]) -> (Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) {
  @func_2181(%var_2182) /* ty=(Tensor[(2, 10, 16), int16], Tensor[(2, 10, 16), uint32], Tensor[(2, 10, 16), float32]) */
}

def @func_8046() -> (Tensor[(2, 10, 16), float64],) {
  @func_8044() /* ty=(Tensor[(2, 10, 16), float64],) */
}

def @func_8624() -> Tensor[(2, 10, 16), float64] {
  %1306 = fn () -> Tensor[(2, 10, 16), float64] {
    %1305 = @func_1490() /* ty=(Tensor[(2, 10, 16), float64],) */;
    %1305.0
  };
  %1306() /* ty=Tensor[(2, 10, 16), float64] */
}

def @func_5591() -> (Tensor[(2, 10, 16), float64], Tensor[(2, 10, 16), float64], Tensor[(1, 1690), float32], float64) {
  %1307 = @func_5180() /* ty=(Tensor[(15, 8, 2), float64], Tensor[(2, 10, 16), float64], Tensor[(1690), float32]) */;
  %1308 = @func_5151() /* ty=(Tensor[(2, 10, 16), float64],) */;
  %1309 = cast(9.65901f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1310 = reshape(%1309, newshape=[]) /* ty=float64 */;
  %1311 = @func_2920(%1310) /* ty=(Tensor[(2, 10, 16), float64], float64, Tensor[(1, 1690), float32], float64) */;
  %1312 = %1307.1;
  %1313 = %1308.0;
  %1314 = %1311.2;
  (%1312, %1313, %1314, 9.65901f64 /* ty=float64 */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen568/build/output.py", line 3743, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:33:47] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

