==========mod==========
#[version = "0.0.5"]
def @func_5042() -> Tensor[(2, 13, 5), float64] {
  %0 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %0.0
}

def @func_4825() -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
  %1 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %2 = %1.0;
  %3 = @func_3947() /* ty=Tensor[(2, 13, 5), float64] */;
  (%2, %3)
}

def @func_6195() -> (Tensor[(2, 13, 5), bool],) {
  %4 = @func_6185() /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) */;
  %5 = %4.0;
  (%5,)
}

def @func_5178(%var_5135: Tensor[(525), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(525), float32], Tensor[(5, 7, 15), float32], Tensor[(2, 13, 5), float64]) {
  %6 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %7 = cast(%var_5135, dtype="float32") /* ty=Tensor[(525), float32] */;
  %8 = cast(%var_5135, dtype="float32") /* ty=Tensor[(525), float32] */;
  %9 = reshape(%7, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), float32] */;
  %10 = reshape(%8, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), float32] */;
  %11 = @func_3380(%9, %10) /* ty=(Tensor[(5, 7, 15), float32],) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %14 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %15 = %6.0;
  %16 = acos(%13) /* ty=Tensor[(5, 7, 15), float32] */;
  %17 = %14.0;
  (%15, %var_5135, %16, %17)
}

def @func_7569(%var_7554: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) {
  %18 = cast(%var_7554, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %19 = cast(%var_7554, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %20 = reshape(%18, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %21 = reshape(%19, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %22 = @func_7507(%20, %21) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) */;
  %23 = @func_5521() /* ty=Tensor[(2, 13, 5), float32] */;
  %24 = %22.1;
  (%23, %24, %var_7554)
}

def @func_8537() -> (Tensor[(2, 13, 5), float64],) {
  %25 = @func_4635() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %26 = %25.0;
  (%26,)
}

def @func_4596(%var_4541: Tensor[(189), int64]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) {
  %27 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %28 = cast(%var_4541, dtype="int64") /* ty=Tensor[(189), int64] */;
  %29 = reshape(%28, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %30 = @func_3221(%29) /* ty=(Tensor[(13, 3, 13), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(234), uint16], Tensor[(16, 14, 14), float32], Tensor[(640), float32], Tensor[(16, 14, 14), bool]) */;
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %32 = reshape(%31, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), float64] */;
  %33 = @func_4085(%32) /* ty=(Tensor[(9, 16, 14), float64],) */;
  %34 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %35 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %38 = cast(%var_4541, dtype="int64") /* ty=Tensor[(189), int64] */;
  %39 = reshape(%38, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %40 = %27.0;
  %41 = %30.1;
  %42 = %33.0;
  %43 = %34.1;
  %44 = asin(%37) /* ty=Tensor[(2, 13, 5), float64] */;
  %45 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %46 = @func_1047(%39) /* ty=Tensor[(9, 3, 7), int64] */;
  (%40, %41, %var_4541, %42, meta[relay.Constant][0] /* ty=Tensor[(2016), float64] */, %43, %44, %45, %46)
}

def @func_6798(%var_6776: Tensor[(5, 189), uint16]) -> (Tensor[(2, 13, 5), float32], Tensor[(5, 189), int8]) {
  %47 = cast(%var_6776, dtype="float64") /* ty=Tensor[(5, 189), float64] */;
  %48 = acosh(%47) /* ty=Tensor[(5, 189), float64] */;
  %49 = cast(%var_6776, dtype="uint16") /* ty=Tensor[(5, 189), uint16] */;
  %50 = cast(%var_6776, dtype="uint16") /* ty=Tensor[(5, 189), uint16] */;
  %51 = reshape(%49, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %52 = reshape(%50, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %53 = @func_1798(%51, %52) /* ty=Tensor[(7, 9, 15), uint16] */;
  %54 = cast(%53, dtype="int8") /* ty=Tensor[(7, 9, 15), int8] */;
  %55 = shape_of(%48, dtype="int32") /* ty=Tensor[(2), int32] */;
  %56 = cast(%48, dtype="int8") /* ty=Tensor[(5, 189), int8] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %58 = @func_5981() /* ty=Tensor[(2, 13, 5), float32] */;
  %59 = maximum(%56, %57) /* ty=Tensor[(5, 189), int8] */;
  (%58, %59)
}

def @func_4635() -> (Tensor[(2, 13, 5), float64],) {
  %60 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  (%60,)
}

def @func_5333() -> (Tensor[(2, 13, 5), float32],) {
  %61 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %62 = %61.0;
  (%62,)
}

def @func_7472(%var_7465: Tensor[(126), bool], %var_7468: Tensor[(1, 1155), float64]) -> (Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) {
  %63 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %64 = cast(%var_7465, dtype="bool") /* ty=Tensor[(126), bool] */;
  %65 = reshape(%64, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), bool] */;
  %66 = cast(%var_7468, dtype="float64") /* ty=Tensor[(1, 1155), float64] */;
  %67 = reshape(%66, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %68 = @func_4068(%67) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
  %69 = %63.2;
  %70 = @func_6332(%65) /* ty=Tensor[(7, 2, 9), bool] */;
  %71 = %68.2;
  (%69, %70, %var_7465, %71, %var_7468)
}

def @func_3982(%var_3977: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) {
  %72 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %73 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %74 = cast(%var_3977, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %75 = reshape(%73, newshape=[]) /* ty=uint8 */;
  %76 = reshape(%74, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %77 = @func_2276(%75, %76) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
  %78 = %72.0;
  %79 = %77.1;
  (%78, %79, meta[relay.Constant][1] /* ty=uint8 */, %var_3977)
}

def @func_8157() -> (Tensor[(2, 13, 5), float64],) {
  %80 = @func_6768() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %81 = %80.0;
  (%81,)
}

def @func_2276(%var_2260: uint8, %var_2261: Tensor[(9, 9, 15), uint8]) -> (Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) {
  %82 = cast(%var_2260, dtype="uint8") /* ty=uint8 */;
  %83 = cast(%var_2261, dtype="uint8") /* ty=Tensor[(9, 9, 15), uint8] */;
  %84 = cast(%var_2261, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %85 = cast(%var_2260, dtype="bool") /* ty=bool */;
  %86 = right_shift(%82, %83) /* ty=Tensor[(9, 9, 15), uint8] */;
  %87 = less(%84, %85) /* ty=Tensor[(9, 9, 15), bool] */;
  (%86, %87)
}

def @func_6185() -> (Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) {
  %88 = @func_5333() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %89 = %88.0;
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %95 = logical_or(%92, %93) /* ty=Tensor[(2, 13, 5), bool] */;
  %96 = %94.0;
  (%95, %96)
}

def @func_5782() -> (Tensor[(2, 13, 5), float64],) {
  %97 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  (%97,)
}

def @func_7772() -> (Tensor[(16, 14, 14), int64],) {
  %98 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %99 = %98.0;
  (%99,)
}

def @func_3895(%var_3869: Tensor[(234), uint16]) -> (Tensor[(2, 13, 9), uint16], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) {
  %100 = cast(%var_3869, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %101 = reshape(%100, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
  %102 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %103 = %102.0;
  %104 = cast(%103, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %105 = cast(meta[relay.Constant][3] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
  %106 = reshape(%105, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %107 = @func_108(%101) /* ty=Tensor[(2, 13, 9), uint16] */;
  %108 = cos(%104) /* ty=Tensor[(2, 13, 5), float64] */;
  %109 = @func_1047(%106) /* ty=Tensor[(9, 3, 7), int64] */;
  (%107, %var_3869, %108, %109, meta[relay.Constant][3] /* ty=Tensor[(189), int64] */)
}

def @func_904(%var_894: Tensor[(2, 7, 13), float64]) -> (Tensor[(2, 7, 13), float64],) {
  %110 = cast(%var_894, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %111 = acos(%110) /* ty=Tensor[(2, 7, 13), float64] */;
  (%111,)
}

def @func_3623(%var_3613: Tensor[(182), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) {
  %112 = cast(%var_3613, dtype="float64") /* ty=Tensor[(182), float64] */;
  %113 = reshape(%112, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
  %114 = @func_904(%113) /* ty=(Tensor[(2, 7, 13), float64],) */;
  %115 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %116 = %114.0;
  (%115, %116, %var_3613)
}

def @func_4771(%var_4768: uint8) -> (Tensor[(1215), uint8], Tensor[(81, 15), uint8], Tensor[(520), float64], uint8, Tensor[(234), uint16]) {
  %117 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %119 = cast(%var_4768, dtype="uint8") /* ty=uint8 */;
  %120 = %117.4;
  %121 = cast(%120, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %123 = reshape(%118, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %124 = reshape(%119, newshape=[]) /* ty=uint8 */;
  %125 = reshape(%121, newshape=[81, 15]) /* ty=Tensor[(81, 15), uint8] */;
  %126 = reshape(%122, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %127 = @func_2535(%123, %124, %125, %126) /* ty=(Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %128 = %127.3;
  (%120, %128, meta[relay.Constant][4] /* ty=Tensor[(520), float64] */, %var_4768, meta[relay.Constant][5] /* ty=Tensor[(234), uint16] */)
}

def @func_5060(%var_5055: Tensor[(2, 13, 5), float64]) -> (Tensor[(2, 13, 5), float64],) {
  %129 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  %130 = cast(%var_5055, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %134 = divide(%132, %133) /* ty=Tensor[(2, 13, 5), float64] */;
  (%134,)
}

def @func_8058(%var_8051: Tensor[(13, 6, 1), bool]) -> Tensor[(13, 6, 14), bool] {
  %135 = cast(%var_8051, dtype="bool") /* ty=Tensor[(13, 6, 1), bool] */;
  %136 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 6, 14), bool] */, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  logical_or(%135, %136) /* ty=Tensor[(13, 6, 14), bool] */
}

def @func_6808() -> (Tensor[(2, 13, 5), float64],) {
  %137 = @func_5663() /* ty=Tensor[(2, 13, 5), float64] */;
  (%137,)
}

def @func_5938(%var_5899: Tensor[(6, 8, 12), float32], %var_5920: uint8) -> (Tensor[(2, 13, 5), int64], Tensor[(6, 8, 12), bool], uint8, uint8, Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64]) {
  %138 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %139 = cast(%var_5899, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
  %140 = sinh(%139) /* ty=Tensor[(6, 8, 12), float32] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
  %142 = rsqrt(%141) /* ty=Tensor[(6, 8, 12), float32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = cast(%var_5920, dtype="uint8") /* ty=uint8 */;
  %148 = reshape(%147, newshape=[]) /* ty=uint8 */;
  %149 = @func_4771(%148) /* ty=(Tensor[(1215), uint8], Tensor[(81, 15), uint8], Tensor[(520), float64], uint8, Tensor[(234), uint16]) */;
  %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %152 = reshape(%150, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %153 = reshape(%151, newshape=[88]) /* ty=Tensor[(88), float64] */;
  %154 = @func_5017(%152, %153) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) */;
  %155 = %138.2;
  %156 = greater_equal(%145, %146) /* ty=Tensor[(6, 8, 12), bool] */;
  %157 = %149.3;
  %158 = %154.4;
  (%155, %156, %157, %var_5920, %158, meta[relay.Constant][7] /* ty=Tensor[(234), float32] */, meta[relay.Constant][8] /* ty=Tensor[(88), float64] */)
}

def @func_2535(%var_2508: Tensor[(8, 13, 5), float64], %var_2521: uint8, %var_2522: Tensor[(81, 15), uint8], %var_2526: Tensor[(234), uint16]) -> (Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) {
  %159 = cast(%var_2508, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %160 = atan(%159) /* ty=Tensor[(8, 13, 5), float64] */;
  %161 = cast(%var_2508, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %165 = cast(%var_2521, dtype="uint8") /* ty=uint8 */;
  %166 = cast(%var_2522, dtype="uint8") /* ty=Tensor[(81, 15), uint8] */;
  %167 = reshape(%165, newshape=[]) /* ty=uint8 */;
  %168 = reshape(%166, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %169 = @func_2276(%167, %168) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
  %170 = cast(%var_2526, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %171 = reshape(%170, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
  %172 = floor_mod(%163, %164) /* ty=Tensor[(8, 13, 5), float32] */;
  %173 = %169.1;
  %174 = @func_108(%171) /* ty=Tensor[(2, 13, 9), uint16] */;
  (%172, %173, %var_2521, %var_2522, %174, %var_2526)
}

def @func_5663() -> Tensor[(2, 13, 5), float64] {
  @func_3947() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_6540() -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
  %175 = @func_5782() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %176 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %177 = %175.0;
  %178 = %176.0;
  %179 = @func_4206() /* ty=Tensor[(2, 13, 5), float64] */;
  (%177, %178, %179)
}

def @func_4118(%var_4098: uint8, %var_4099: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) {
  %180 = cast(%var_4098, dtype="uint8") /* ty=uint8 */;
  %181 = cast(%var_4099, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %182 = reshape(%180, newshape=[]) /* ty=uint8 */;
  %183 = reshape(%181, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %184 = @func_2276(%182, %183) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4), float64] */;
  %186 = reshape(%185, newshape=[4, 4, 1]) /* ty=Tensor[(4, 4, 1), float64] */;
  %187 = @func_3641(%186) /* ty=(Tensor[(4, 4, 1), float64],) */;
  %188 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  %189 = %184.0;
  %190 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %191 = %187.0;
  (%188, %189, %var_4098, %var_4099, %190, %191, meta[relay.Constant][9] /* ty=Tensor[(4, 4), float64] */)
}

def @func_7418() -> (Tensor[(2, 13, 5), float64],) {
  %192 = @func_5042() /* ty=Tensor[(2, 13, 5), float64] */;
  (%192,)
}

def @func_5625(%var_5570: Tensor[(2, 13, 5), float64]) -> Tensor[(2, 13, 5), bool] {
  %193 = @func_4635() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %194 = %193.0;
  %195 = cast(%var_5570, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%197, %198) /* ty=Tensor[(2, 13, 5), bool] */
}

def @func_7043(%var_7008: Tensor[(6, 9, 16), bool]) -> (Tensor[(2, 13, 5), float32], Tensor[(864), float32], Tensor[(2, 7, 13), float64], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(3, 63), float64], Tensor[(6, 9, 16), float32]) {
  %199 = @func_5333() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 63), int64] */, dtype="int64") /* ty=Tensor[(3, 63), int64] */;
  %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %202 = reshape(%200, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %203 = reshape(%201, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %204 = @func_1618(%202, %203) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %205 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 63), int64] */, dtype="float64") /* ty=Tensor[(3, 63), float64] */;
  %209 = cast(meta[relay.Constant][10] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %210 = reshape(%209, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %211 = @func_4041(%210) /* ty=(Tensor[(6, 9, 16), bool],) */;
  %212 = %211.0;
  %213 = cast(%var_7008, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = less(%215, %216) /* ty=Tensor[(6, 9, 16), bool] */;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %219 = %199.0;
  %220 = %204.3;
  %221 = log(%207) /* ty=Tensor[(2, 13, 5), float64] */;
  %222 = log2(%208) /* ty=Tensor[(3, 63), float64] */;
  %223 = cos(%218) /* ty=Tensor[(6, 9, 16), float32] */;
  (%219, meta[relay.Constant][10] /* ty=Tensor[(864), float32] */, %220, meta[relay.Constant][12] /* ty=Tensor[(234), uint16] */, %221, %222, %223)
}

def @func_6633(%var_6595: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int8], Tensor[(2016), float64], Tensor[(2, 13, 5), float64], Tensor[(189), int64]) {
  %224 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %225 = %224.1;
  %226 = cast(%225, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %227 = cast(%var_6595, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %228 = reshape(%226, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %229 = reshape(%227, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float64] */;
  %230 = @func_4953(%228, %229) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) */;
  %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
  %232 = reshape(%231, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %233 = @func_4596(%232) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) */;
  %234 = %230.0;
  %235 = %233.0;
  (%225, %234, %var_6595, %235, meta[relay.Constant][13] /* ty=Tensor[(189), int64] */)
}

def @func_3380(%var_3375: Tensor[(5, 7, 15), float32], %var_3376: Tensor[(5, 7, 15), float32]) -> (Tensor[(5, 7, 15), float32],) {
  %236 = cast(%var_3376, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %237 = shape_of(%var_3375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%var_3375, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %240 = floor_mod(%238, %239) /* ty=Tensor[(5, 7, 15), float32] */;
  (%240,)
}

def @func_5365(%var_5340: Tensor[(13, 3, 3), float32], %var_5341: Tensor[(13, 3, 3), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(13, 3, 3), float64]) {
  %241 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %242 = cast(%var_5341, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %243 = shape_of(%var_5340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%var_5340, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %246 = floor_divide(%244, %245) /* ty=Tensor[(13, 3, 3), float32] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %248 = %241.0;
  %249 = asin(%247) /* ty=Tensor[(13, 3, 3), float64] */;
  (%248, %249)
}

def @func_1618(%var_1581: Tensor[(189), int64], %var_1588: Tensor[(234), uint16]) -> (Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) {
  %250 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 4), float64] */;
  %251 = cast(%var_1581, dtype="int64") /* ty=Tensor[(189), int64] */;
  %252 = reshape(%251, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %253 = cast(meta[relay.Constant][15] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %254 = reshape(%253, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
  %255 = @func_904(%254) /* ty=(Tensor[(2, 7, 13), float64],) */;
  %256 = cast(%var_1588, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %257 = reshape(%256, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
  %258 = sqrt(%250) /* ty=Tensor[(12, 15, 4), float64] */;
  %259 = @func_1047(%252) /* ty=Tensor[(9, 3, 7), int64] */;
  %260 = %255.0;
  %261 = @func_108(%257) /* ty=Tensor[(2, 13, 9), uint16] */;
  (%258, %259, %var_1581, %260, meta[relay.Constant][15] /* ty=Tensor[(182), float64] */, %261, %var_1588)
}

def @func_6365() -> (Tensor[(2, 13, 5), float32],) {
  %262 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
  %263 = %262.0;
  (%263,)
}

def @func_3580() -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
  %264 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %266 = cast(%264, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %267 = asinh(%265) /* ty=Tensor[(2, 13, 5), float64] */;
  %268 = erf(%266) /* ty=Tensor[(2, 13, 5), float64] */;
  (%267, %268)
}

def @func_8487(%var_8482: Tensor[(1215, 1), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(9, 9, 15), float32], Tensor[(15, 63), uint16], Tensor[(1215, 1), uint8]) {
  %269 = @func_4825() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %270 = @func_4825() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %271 = cast(meta[relay.Constant][16] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %272 = cast(meta[relay.Constant][16] /* ty=Tensor[(90), float32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %273 = reshape(%271, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
  %274 = reshape(%272, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
  %275 = @func_5211(%273, %274) /* ty=(Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) */;
  %276 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 63), uint16] */, dtype="uint16") /* ty=Tensor[(15, 63), uint16] */;
  %277 = cast(%var_8482, dtype="uint8") /* ty=Tensor[(1215, 1), uint8] */;
  %278 = reshape(%276, newshape=[945]) /* ty=Tensor[(945), uint16] */;
  %279 = reshape(%277, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %280 = @func_6071(%278, %279) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16], Tensor[(9, 9, 15), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), float32], Tensor[(2, 13, 5), int64]) */;
  %281 = %269.0;
  %282 = %270.0;
  %283 = %275.1;
  %284 = %280.5;
  (%281, %282, %283, meta[relay.Constant][16] /* ty=Tensor[(90), float32] */, %284, meta[relay.Constant][17] /* ty=Tensor[(15, 63), uint16] */, %var_8482)
}

def @func_4206() -> Tensor[(2, 13, 5), float64] {
  %285 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %285.0
}

def @func_4276(%var_4232: Tensor[(2, 4, 11), float64], %var_4251: Tensor[(1155), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) {
  %286 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %287 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 4, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %288 = atan(%287) /* ty=Tensor[(2, 4, 11), float64] */;
  %289 = cast(%var_4232, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = logical_and(%291, %292) /* ty=Tensor[(2, 4, 11), bool] */;
  %294 = cast(%288, dtype="uint8") /* ty=Tensor[(2, 4, 11), uint8] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="uint8") /* ty=Tensor[(2, 4, 11), uint8] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %298 = cast(%var_4251, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %299 = reshape(%298, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %300 = @func_4068(%299) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
  %301 = %286.0;
  %302 = minimum(%296, %297) /* ty=Tensor[(2, 4, 11), uint8] */;
  %303 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  %304 = %300.3;
  (%301, %302, %303, %304, %var_4251)
}

def @func_3833() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) {
  %305 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %306 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %307 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %308 = cast(meta[relay.Constant][20] /* ty=Tensor[(1215), uint8] */, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %309 = reshape(%307, newshape=[]) /* ty=uint8 */;
  %310 = reshape(%308, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %311 = @func_2276(%309, %310) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
  %312 = %305.0;
  %313 = %306.1;
  %314 = %311.0;
  (%312, %313, %314, meta[relay.Constant][19] /* ty=uint8 */, meta[relay.Constant][20] /* ty=Tensor[(1215), uint8] */)
}

def @func_4902(%var_4891: Tensor[(1, 234), float32]) -> (Tensor[(2, 13, 5), uint64], Tensor[(1155), float64], Tensor[(182), float64], Tensor[(2, 7, 13), float64], Tensor[(?, 234), int8]) {
  %315 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %316 = %315.0;
  %317 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 13, 5), float32] */, dtype="uint64") /* ty=Tensor[(2, 13, 5), uint64] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="uint64") /* ty=Tensor[(2, 13, 5), uint64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %321 = cast(meta[relay.Constant][22] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %322 = reshape(%321, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %323 = @func_4068(%322) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
  %324 = %323.1;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(182), float64] */;
  %326 = reshape(%325, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
  %327 = @func_904(%326) /* ty=(Tensor[(2, 7, 13), float64],) */;
  %328 = cast(meta[relay.Constant][22] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %329 = reshape(%328, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %330 = @func_4068(%329) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
  %331 = %330.3;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(1, 234), float32] */;
  %333 = cosh(%332) /* ty=Tensor[(1, 234), float32] */;
  %334 = cast(%var_4891, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%333, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %338 = right_shift(%319, %320) /* ty=Tensor[(2, 13, 5), uint64] */;
  %339 = %327.0;
  %340 = bitwise_and(%336, %337) /* ty=Tensor[(?, 234), int8] */;
  (%338, meta[relay.Constant][22] /* ty=Tensor[(1155), float64] */, %324, %339, %340)
}

def @func_6071(%var_6033: Tensor[(945), uint16], %var_6043: Tensor[(9, 9, 15), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16], Tensor[(9, 9, 15), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), float32], Tensor[(2, 13, 5), int64]) {
  %341 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %342 = cast(%var_6033, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %343 = cast(%var_6033, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %344 = reshape(%342, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %345 = reshape(%343, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %346 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
  %347 = %346.2;
  %348 = cast(%var_6043, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %352 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %353 = cast(%347, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %354 = @func_5638() /* ty=(Tensor[(2, 13, 5), int64],) */;
  %355 = %341.0;
  %356 = @func_1798(%344, %345) /* ty=Tensor[(7, 9, 15), uint16] */;
  %357 = less_equal(%350, %351) /* ty=Tensor[(9, 9, 15), bool] */;
  %358 = %352.0;
  %359 = rsqrt(%353) /* ty=Tensor[(9, 9, 15), float32] */;
  %360 = %354.0;
  (%355, %356, %var_6033, %357, %358, %359, %360)
}

def @func_5872(%var_5864: Tensor[(16, 14, 14), float32]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32]) {
  %361 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %362 = %361.1;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %364 = reshape(%363, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float64] */;
  %365 = @func_5060(%364) /* ty=(Tensor[(2, 13, 5), float64],) */;
  %366 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %367 = %366.0;
  %368 = cast(%367, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %369 = log(%368) /* ty=Tensor[(16, 14, 14), float32] */;
  %370 = cast(%var_5864, dtype="uint32") /* ty=Tensor[(16, 14, 14), uint32] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="uint32") /* ty=Tensor[(16, 14, 14), uint32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %374 = %365.0;
  %375 = bitwise_and(%372, %373) /* ty=Tensor[(16, 14, 14), uint32] */;
  (%362, %374, %375)
}

def @func_4517() -> (Tensor[(2, 13, 5), float64],) {
  %376 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  (%376,)
}

def @func_5211(%var_5185: Tensor[(5, 3, 6), float32], %var_5194: Tensor[(5, 3, 6), float64]) -> (Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) {
  %377 = cast(%var_5185, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %378 = sin(%377) /* ty=Tensor[(5, 3, 6), float32] */;
  %379 = cast(%var_5185, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %383 = mod(%381, %382) /* ty=Tensor[(5, 3, 6), float64] */;
  %384 = cast(%var_5194, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %388 = cast(meta[relay.Constant][23] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %389 = reshape(%388, newshape=[4, 4, 1]) /* ty=Tensor[(4, 4, 1), float64] */;
  %390 = @func_3641(%389) /* ty=(Tensor[(4, 4, 1), float64],) */;
  %391 = logical_xor(%386, %387) /* ty=Tensor[(5, 3, 6), int64] */;
  %392 = %390.0;
  (%391, %392, meta[relay.Constant][23] /* ty=Tensor[(16), float64] */)
}

def @func_7507(%var_7484: Tensor[(2016), float64], %var_7503: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) {
  %393 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %394 = %393.2;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %396 = cast(%var_7484, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %397 = reshape(%395, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %398 = reshape(%396, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float64] */;
  %399 = @func_4953(%397, %398) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) */;
  %400 = cast(%var_7503, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %401 = shape_of(%var_7484, dtype="int32") /* ty=Tensor[(1), int32] */;
  %402 = cast(%var_7484, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?), float64] */;
  %404 = %399.2;
  %405 = floor_divide(%402, %403) /* ty=Tensor[(2016), float64] */;
  (%394, %404, %405)
}

def @func_3641(%var_3634: Tensor[(4, 4, 1), float64]) -> (Tensor[(4, 4, 1), float64],) {
  %406 = cast(%var_3634, dtype="float64") /* ty=Tensor[(4, 4, 1), float64] */;
  %407 = acosh(%406) /* ty=Tensor[(4, 4, 1), float64] */;
  (%407,)
}

def @func_1798(%var_1789: Tensor[(7, 9, 15), uint16], %var_1790: Tensor[(7, 9, 15), uint16]) -> Tensor[(7, 9, 15), uint16] {
  %408 = cast(%var_1790, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %409 = shape_of(%var_1789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%var_1789, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%410, %411) /* ty=Tensor[(7, 9, 15), uint16] */
}

def @func_8203() -> Tensor[(2, 13, 5), float32] {
  @func_6119() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_4068(%var_4046: Tensor[(7, 11, 15), float64]) -> (Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) {
  %412 = cast(%var_4046, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %413 = cast(meta[relay.Constant][24] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
  %414 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 234), uint16] */, dtype="uint16") /* ty=Tensor[(1, 234), uint16] */;
  %415 = reshape(%413, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %416 = reshape(%414, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %417 = @func_1618(%415, %416) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %418 = log10(%412) /* ty=Tensor[(7, 11, 15), float64] */;
  %419 = %417.4;
  (%418, %419, meta[relay.Constant][24] /* ty=Tensor[(189), int64] */, meta[relay.Constant][25] /* ty=Tensor[(1, 234), uint16] */)
}

def @main(%var_8555: Tensor[(117, 1), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(16, 14, 14), int64], Tensor[(189), int64], Tensor[(126), bool], Tensor[(117, 1155), uint64]) {
  %420 = cast(%var_8555, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %421 = cast(%var_8555, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %422 = reshape(%420, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %423 = reshape(%421, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %424 = @func_5365(%422, %423) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(13, 3, 3), float64]) */;
  %425 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %426 = cast(meta[relay.Constant][26] /* ty=Tensor[(126), bool] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %427 = cast(meta[relay.Constant][27] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %428 = reshape(%426, newshape=[126]) /* ty=Tensor[(126), bool] */;
  %429 = reshape(%427, newshape=[1, 1155]) /* ty=Tensor[(1, 1155), float64] */;
  %430 = @func_7472(%428, %429) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) */;
  %431 = cast(meta[relay.Constant][27] /* ty=Tensor[(1155), float64] */, dtype="uint64") /* ty=Tensor[(1155), uint64] */;
  %432 = cast(%var_8555, dtype="uint64") /* ty=Tensor[(117, 1), uint64] */;
  %433 = @func_6119() /* ty=Tensor[(2, 13, 5), float32] */;
  %434 = %424.0;
  %435 = %425.0;
  %436 = %430.3;
  %437 = bitwise_xor(%431, %432) /* ty=Tensor[(117, 1155), uint64] */;
  (%433, %434, %435, %436, meta[relay.Constant][26] /* ty=Tensor[(126), bool] */, %437)
}

def @func_8116(%var_8084: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], uint8, Tensor[(2, 13, 5), bool], Tensor[(2016, 1), float64], Tensor[(1215), uint32]) {
  %438 = @func_6730() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64]) */;
  %439 = cast(meta[relay.Constant][28] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %440 = cast(%var_8084, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %441 = reshape(%439, newshape=[]) /* ty=uint8 */;
  %442 = reshape(%440, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %443 = @func_4118(%441, %442) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) */;
  %444 = %438.1;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %446 = cast(meta[relay.Constant][29] /* ty=Tensor[(2016, 1), float64] */, dtype="float64") /* ty=Tensor[(2016, 1), float64] */;
  %447 = reshape(%445, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %448 = reshape(%446, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float64] */;
  %449 = @func_4953(%447, %448) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) */;
  %450 = cast(%var_8084, dtype="float64") /* ty=Tensor[(1215), float64] */;
  %451 = atanh(%450) /* ty=Tensor[(1215), float64] */;
  %452 = cast(%var_8084, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
  %454 = cast(%451, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %456 = %443.5;
  %457 = %449.1;
  %458 = logical_xor(%454, %455) /* ty=Tensor[(1215), uint32] */;
  (%444, %456, meta[relay.Constant][28] /* ty=uint8 */, %457, meta[relay.Constant][29] /* ty=Tensor[(2016, 1), float64] */, %458)
}

def @func_1047(%var_1036: Tensor[(9, 3, 7), int64]) -> Tensor[(9, 3, 7), int64] {
  %459 = cast(%var_1036, dtype="int64") /* ty=Tensor[(9, 3, 7), int64] */;
  %460 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(9, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 3, 7), int64] */, dtype="int64") /* ty=Tensor[(9, 3, 7), int64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%461, %462) /* ty=Tensor[(9, 3, 7), int64] */
}

def @func_3786() -> (Tensor[(2, 13, 5), float32],) {
  %463 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  (%463,)
}

def @func_7100() -> (Tensor[(2, 13, 5), float32],) {
  %464 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
  %465 = %464.0;
  (%465,)
}

def @func_3534() -> (Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) {
  %466 = cast(meta[relay.Constant][31] /* ty=Tensor[(3136), bool] */, dtype="bool") /* ty=Tensor[(3136), bool] */;
  %467 = reshape(%466, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %468 = @func_499(%467) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %469 = %468.0;
  %470 = cast(meta[relay.Constant][31] /* ty=Tensor[(3136), bool] */, dtype="int64") /* ty=Tensor[(3136), int64] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="int64") /* ty=Tensor[(16, 14, 14), int64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %474 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %476 = acos(%475) /* ty=Tensor[(2, 13, 5), float32] */;
  %477 = cast(%474, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %481 = multiply(%479, %480) /* ty=Tensor[(2, 13, 5), uint16] */;
  %482 = cast(%481, dtype="int8") /* ty=Tensor[(2, 13, 5), int8] */;
  %483 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%476, dtype="int8") /* ty=Tensor[(2, 13, 5), int8] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %486 = cast(%474, dtype="int64") /* ty=Tensor[(2, 13, 5), int64] */;
  %487 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%481, dtype="int64") /* ty=Tensor[(2, 13, 5), int64] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %490 = add(%472, %473) /* ty=Tensor[(16, 14, 14), int64] */;
  %491 = bitwise_xor(%484, %485) /* ty=Tensor[(2, 13, 5), int8] */;
  %492 = maximum(%488, %489) /* ty=Tensor[(2, 13, 5), int64] */;
  (%490, %491, %492)
}

def @func_6310(%var_6281: Tensor[(864), float32]) -> (Tensor[(2, 13, 5), float64], Tensor[(6, 9, 16), bool]) {
  %493 = @func_5782() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %494 = cast(%var_6281, dtype="float32") /* ty=Tensor[(864), float32] */;
  %495 = reshape(%494, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %496 = @func_4041(%495) /* ty=(Tensor[(6, 9, 16), bool],) */;
  %497 = %496.0;
  %498 = cast(%var_6281, dtype="bool") /* ty=Tensor[(864), bool] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = %493.0;
  %503 = not_equal(%500, %501) /* ty=Tensor[(6, 9, 16), bool] */;
  (%502, %503)
}

def @func_5017(%var_4975: Tensor[(234), float32], %var_4978: Tensor[(88), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) {
  %504 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %505 = cast(%var_4975, dtype="float32") /* ty=Tensor[(234), float32] */;
  %506 = reshape(%505, newshape=[1, 234]) /* ty=Tensor[(1, 234), float32] */;
  %507 = @func_4902(%506) /* ty=(Tensor[(2, 13, 5), uint64], Tensor[(1155), float64], Tensor[(182), float64], Tensor[(2, 7, 13), float64], Tensor[(?, 234), int8]) */;
  %508 = cast(%var_4978, dtype="float64") /* ty=Tensor[(88), float64] */;
  %509 = cast(meta[relay.Constant][32] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %510 = reshape(%508, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float64] */;
  %511 = reshape(%509, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %512 = @func_4276(%510, %511) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) */;
  %513 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 405), uint8] */, dtype="uint8") /* ty=Tensor[(3, 405), uint8] */;
  %514 = reshape(%513, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %515 = @func_3982(%514) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
  %516 = %504.1;
  %517 = %507.4;
  %518 = %512.0;
  %519 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  %520 = %515.2;
  (%516, %517, %var_4975, %518, %var_4978, meta[relay.Constant][32] /* ty=Tensor[(1155), float64] */, %519, %520, meta[relay.Constant][33] /* ty=Tensor[(3, 405), uint8] */)
}

def @func_4454(%var_4398: Tensor[(6, 7, 13), float64], %var_4401: Tensor[(6, 7, 13), float64], %var_4426: uint8) -> (Tensor[(6, 7, 13), int32], Tensor[(9, 9, 15), bool], uint8, Tensor[(405, 3), uint8], Tensor[(6, 9, 16), bool], Tensor[(216, 4), float32], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), bool]) {
  %521 = cast(%var_4398, dtype="float64") /* ty=Tensor[(6, 7, 13), float64] */;
  %522 = cos(%521) /* ty=Tensor[(6, 7, 13), float64] */;
  %523 = cast(%var_4401, dtype="float64") /* ty=Tensor[(6, 7, 13), float64] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="float64") /* ty=Tensor[(6, 7, 13), float64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %527 = subtract(%525, %526) /* ty=Tensor[(6, 7, 13), float64] */;
  %528 = cast(%522, dtype="int32") /* ty=Tensor[(6, 7, 13), int32] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="int32") /* ty=Tensor[(6, 7, 13), int32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %532 = cast(%var_4426, dtype="uint8") /* ty=uint8 */;
  %533 = cast(meta[relay.Constant][34] /* ty=Tensor[(405, 3), uint8] */, dtype="uint8") /* ty=Tensor[(405, 3), uint8] */;
  %534 = reshape(%532, newshape=[]) /* ty=uint8 */;
  %535 = reshape(%533, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %536 = @func_2276(%534, %535) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
  %537 = cast(meta[relay.Constant][35] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %538 = reshape(%537, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %539 = @func_4041(%538) /* ty=(Tensor[(6, 9, 16), bool],) */;
  %540 = cast(meta[relay.Constant][34] /* ty=Tensor[(405, 3), uint8] */, dtype="uint8") /* ty=Tensor[(405, 3), uint8] */;
  %541 = reshape(%540, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %542 = @func_3982(%541) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
  %543 = right_shift(%530, %531) /* ty=Tensor[(6, 7, 13), int32] */;
  %544 = %536.1;
  %545 = %539.0;
  %546 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %547 = %542.1;
  (%543, %544, %var_4426, meta[relay.Constant][34] /* ty=Tensor[(405, 3), uint8] */, %545, meta[relay.Constant][35] /* ty=Tensor[(216, 4), float32] */, %546, %547)
}

def @func_3221(%var_3194: Tensor[(189), int64]) -> (Tensor[(13, 3, 13), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(234), uint16], Tensor[(16, 14, 14), float32], Tensor[(640), float32], Tensor[(16, 14, 14), bool]) {
  %548 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 13), float64] */;
  %549 = cast(%var_3194, dtype="int64") /* ty=Tensor[(189), int64] */;
  %550 = cast(meta[relay.Constant][37] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %551 = reshape(%549, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %552 = reshape(%550, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %553 = @func_1618(%551, %552) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %554 = cast(meta[relay.Constant][38] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %555 = reshape(%554, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float32] */;
  %556 = @func_629(%555) /* ty=(Tensor[(10, 4, 16), float32], Tensor[(1568, 2), int32], Tensor[(16, 14, 14), float32], Tensor[(16, 14, 14), bool], Tensor[(16, 14, 14), bool], Tensor[(2, 13, 9), bool]) */;
  %557 = %556.2;
  %558 = cast(%557, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %559 = reshape(%558, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %560 = @func_499(%559) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %561 = erf(%548) /* ty=Tensor[(13, 3, 13), float64] */;
  %562 = %553.3;
  %563 = %560.0;
  (%561, %562, %var_3194, meta[relay.Constant][37] /* ty=Tensor[(234), uint16] */, %557, meta[relay.Constant][38] /* ty=Tensor[(640), float32] */, %563)
}

def @func_4041(%var_4028: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), bool],) {
  %564 = cast(%var_4028, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %565 = sinh(%564) /* ty=Tensor[(6, 9, 16), float32] */;
  %566 = cast(%var_4028, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = greater_equal(%568, %569) /* ty=Tensor[(6, 9, 16), bool] */;
  (%570,)
}

def @func_6221() -> (Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32], Tensor[(3136), float32], Tensor[(2, 13, 5), bool]) {
  %571 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %572 = cast(meta[relay.Constant][39] /* ty=Tensor[(3136), float32] */, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %573 = reshape(%572, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float32] */;
  %574 = @func_5872(%573) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32]) */;
  %575 = @func_6195() /* ty=(Tensor[(2, 13, 5), bool],) */;
  %576 = %571.0;
  %577 = %574.2;
  %578 = %575.0;
  (%576, %577, meta[relay.Constant][39] /* ty=Tensor[(3136), float32] */, %578)
}

def @func_3351() -> Tensor[(2, 13, 5), float32] {
  %579 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
  %580 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %583 = minimum(%581, %582) /* ty=Tensor[(2, 13, 5), uint16] */;
  %584 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%586, %587) /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_7348(%var_7331: Tensor[(234), uint16]) -> (uint8, Tensor[(234), uint16], Tensor[(9, 3, 7), float64], Tensor[(945), uint16], Tensor[(945), uint16], Tensor[(189), float32]) {
  %588 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
  %589 = cast(meta[relay.Constant][42] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
  %590 = cast(%var_7331, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %591 = reshape(%589, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %592 = reshape(%590, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %593 = @func_1618(%591, %592) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %594 = %593.1;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
  %596 = cast(meta[relay.Constant][43] /* ty=Tensor[(945), uint16] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %597 = reshape(%596, newshape=[945]) /* ty=Tensor[(945), uint16] */;
  %598 = @func_5714(%597) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16]) */;
  %599 = cast(meta[relay.Constant][42] /* ty=Tensor[(189), int64] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %600 = %588.3;
  %601 = cos(%595) /* ty=Tensor[(9, 3, 7), float64] */;
  %602 = %598.2;
  %603 = rsqrt(%599) /* ty=Tensor[(189), float32] */;
  (%600, %var_7331, %601, %602, meta[relay.Constant][43] /* ty=Tensor[(945), uint16] */, %603)
}

def @func_7859() -> (Tensor[(2, 13, 5), float32],) {
  %604 = @func_5521() /* ty=Tensor[(2, 13, 5), float32] */;
  (%604,)
}

def @func_629(%var_548: Tensor[(10, 4, 16), float32]) -> (Tensor[(10, 4, 16), float32], Tensor[(1568, 2), int32], Tensor[(16, 14, 14), float32], Tensor[(16, 14, 14), bool], Tensor[(16, 14, 14), bool], Tensor[(2, 13, 9), bool]) {
  %605 = cast(%var_548, dtype="float32") /* ty=Tensor[(10, 4, 16), float32] */;
  %606 = cast(meta[relay.Constant][44] /* ty=Tensor[(1568, 2), bool] */, dtype="bool") /* ty=Tensor[(1568, 2), bool] */;
  %607 = reshape(%606, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %608 = @func_499(%607) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="int32") /* ty=Tensor[(16, 14, 14), int32] */;
  %611 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(1568, 2), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %612 = cast(meta[relay.Constant][44] /* ty=Tensor[(1568, 2), bool] */, dtype="int32") /* ty=Tensor[(1568, 2), int32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %614 = cast(%609, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %615 = reshape(%614, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %616 = @func_499(%615) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %619 = cast(%617, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %620 = reshape(%619, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %621 = @func_499(%620) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %622 = log2(%618) /* ty=Tensor[(16, 14, 14), float32] */;
  %623 = cast(%622, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %624 = reshape(%623, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %625 = @func_499(%624) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %626 = cast(meta[relay.Constant][45] /* ty=Tensor[(39, 6), uint16] */, dtype="uint16") /* ty=Tensor[(39, 6), uint16] */;
  %627 = reshape(%626, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
  %628 = @func_108(%627) /* ty=Tensor[(2, 13, 9), uint16] */;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(2, 13, 9), float32] */;
  %630 = log10(%629) /* ty=Tensor[(2, 13, 9), float32] */;
  %631 = cast(meta[relay.Constant][45] /* ty=Tensor[(39, 6), uint16] */, dtype="bool") /* ty=Tensor[(39, 6), bool] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="bool") /* ty=Tensor[(2, 13, 9), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = acos(%605) /* ty=Tensor[(10, 4, 16), float32] */;
  %636 = multiply(%612, %613) /* ty=Tensor[(1568, 2), int32] */;
  %637 = %621.0;
  %638 = %625.0;
  %639 = equal(%633, %634) /* ty=Tensor[(2, 13, 9), bool] */;
  (%635, %636, %622, %637, %638, %639)
}

def @func_6857() -> (Tensor[(2, 13, 5), float32],) {
  %640 = @func_5663() /* ty=Tensor[(2, 13, 5), float64] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %642 = sqrt(%641) /* ty=Tensor[(2, 13, 5), float32] */;
  (%642,)
}

def @func_7369(%var_7355: Tensor[(14, 3, 7), uint8], %var_7356: Tensor[(14, 3, 7), uint8], %var_7360: Tensor[(14, 3, 7), uint8]) -> Tensor[(14, 3, 7), bool] {
  %643 = cast(%var_7356, dtype="uint8") /* ty=Tensor[(14, 3, 7), uint8] */;
  %644 = shape_of(%var_7355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%var_7355, dtype="uint8") /* ty=Tensor[(14, 3, 7), uint8] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %647 = right_shift(%645, %646) /* ty=Tensor[(14, 3, 7), uint8] */;
  %648 = cast(%var_7360, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %652 = floor_divide(%650, %651) /* ty=Tensor[(14, 3, 7), float64] */;
  %653 = cast(%647, dtype="bool") /* ty=Tensor[(14, 3, 7), bool] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="bool") /* ty=Tensor[(14, 3, 7), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%655, %656) /* ty=Tensor[(14, 3, 7), bool] */
}

def @func_5638() -> (Tensor[(2, 13, 5), int64],) {
  %657 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %658 = %657.2;
  (%658,)
}

def @func_7258(%var_7242: Tensor[(1215), uint8], %var_7254: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(1215), uint8], uint8, Tensor[(864), float64], Tensor[(1215), float32]) {
  %659 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %660 = cast(meta[relay.Constant][46] /* ty=Tensor[(864), bool] */, dtype="bool") /* ty=Tensor[(864), bool] */;
  %661 = reshape(%660, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), bool] */;
  %662 = @func_7043(%661) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(864), float32], Tensor[(2, 7, 13), float64], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(3, 63), float64], Tensor[(6, 9, 16), float32]) */;
  %663 = cast(meta[relay.Constant][47] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %664 = cast(%var_7242, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %665 = reshape(%663, newshape=[]) /* ty=uint8 */;
  %666 = reshape(%664, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %667 = @func_4118(%665, %666) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) */;
  %668 = cast(meta[relay.Constant][46] /* ty=Tensor[(864), bool] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %669 = cast(%var_7254, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %670 = shape_of(%var_7242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %671 = cast(%var_7242, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?), float32] */;
  %673 = %659.0;
  %674 = %662.0;
  %675 = %667.3;
  %676 = exp(%668) /* ty=Tensor[(864), float64] */;
  %677 = power(%671, %672) /* ty=Tensor[(1215), float32] */;
  (%673, %674, %675, meta[relay.Constant][47] /* ty=uint8 */, %676, %677)
}

def @func_7182(%var_7122: Tensor[(13, 8, 1), uint16], %var_7123: Tensor[(13, 8, 10), uint16], %var_7171: Tensor[(182, 1), float64]) -> (Tensor[(2016), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(13, 8, 2016), uint16], Tensor[(13, 8, 10), int16], Tensor[(2, 7, 13), float64], Tensor[(182, 1), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) {
  %678 = cast(meta[relay.Constant][48] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %679 = reshape(%678, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %680 = @func_6633(%679) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int8], Tensor[(2016), float64], Tensor[(2, 13, 5), float64], Tensor[(189), int64]) */;
  %681 = @func_6857() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %682 = cast(meta[relay.Constant][49] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %683 = cast(meta[relay.Constant][49] /* ty=Tensor[(90), float32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %684 = reshape(%682, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
  %685 = reshape(%683, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
  %686 = @func_5211(%684, %685) /* ty=(Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) */;
  %687 = cast(meta[relay.Constant][48] /* ty=Tensor[(2016), float64] */, dtype="uint16") /* ty=Tensor[(2016), uint16] */;
  %688 = cast(%var_7122, dtype="uint16") /* ty=Tensor[(13, 8, 1), uint16] */;
  %689 = cast(%var_7122, dtype="bool") /* ty=Tensor[(13, 8, 1), bool] */;
  %690 = cast(%var_7123, dtype="bool") /* ty=Tensor[(13, 8, 10), bool] */;
  %691 = less_equal(%689, %690) /* ty=Tensor[(13, 8, 10), bool] */;
  %692 = cast(%691, dtype="int16") /* ty=Tensor[(13, 8, 10), int16] */;
  %693 = cast(%var_7122, dtype="int16") /* ty=Tensor[(13, 8, 1), int16] */;
  %694 = cast(%var_7171, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
  %695 = reshape(%694, newshape=[26, 7]) /* ty=Tensor[(26, 7), float64] */;
  %696 = @func_4478(%695) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(26, 7), uint8]) */;
  %697 = cast(meta[relay.Constant][50] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
  %698 = reshape(%697, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %699 = %680.2;
  %700 = %681.0;
  %701 = %686.1;
  %702 = bitwise_xor(%687, %688) /* ty=Tensor[(13, 8, 2016), uint16] */;
  %703 = bitwise_or(%692, %693) /* ty=Tensor[(13, 8, 10), int16] */;
  %704 = %696.1;
  %705 = @func_1047(%698) /* ty=Tensor[(9, 3, 7), int64] */;
  (%699, %700, %701, meta[relay.Constant][49] /* ty=Tensor[(90), float32] */, %702, %703, %704, %var_7171, %705, meta[relay.Constant][50] /* ty=Tensor[(189), int64] */)
}

def @func_3947() -> Tensor[(2, 13, 5), float64] {
  @func_3862() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_6768() -> (Tensor[(2, 13, 5), float64],) {
  %706 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %707 = %706.0;
  (%707,)
}

def @func_5714(%var_5710: Tensor[(945), uint16]) -> (Tensor[(5, 12, 8), float32], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16]) {
  %708 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %709 = cast(%var_5710, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %710 = cast(%var_5710, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %711 = reshape(%709, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %712 = reshape(%710, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %713 = cos(%708) /* ty=Tensor[(5, 12, 8), float32] */;
  %714 = @func_1798(%711, %712) /* ty=Tensor[(7, 9, 15), uint16] */;
  (%713, %714, %var_5710)
}

def @func_6095(%var_6083: Tensor[(13, 5, 6), uint64], %var_6084: Tensor[(13, 5, 6), uint64]) -> (Tensor[(13, 5, 6), uint64],) {
  %715 = cast(%var_6084, dtype="uint64") /* ty=Tensor[(13, 5, 6), uint64] */;
  %716 = shape_of(%var_6083, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_6083, dtype="uint64") /* ty=Tensor[(13, 5, 6), uint64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %719 = logical_xor(%717, %718) /* ty=Tensor[(13, 5, 6), uint64] */;
  (%719,)
}

def @func_5521() -> Tensor[(2, 13, 5), float32] {
  @func_3351() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_8007(%var_7910: Tensor[(16, 14, 14), int64], %var_7932: Tensor[(234), float32], %var_7943: Tensor[(126), bool], %var_7944: Tensor[(7, 165), float64], %var_7971: Tensor[(63, 3), int64], %var_7990: Tensor[(1, 104), uint16]) -> (Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64], Tensor[(126), bool], Tensor[(126), bool], Tensor[(7, 165), float64], Tensor[(2, 7, 13), float64], Tensor[(63, 3), int64], Tensor[(6, 9, 16), bool], Tensor[(864), float32], Tensor[(2, 13, 5), float32], Tensor[(2016), float64], Tensor[(1, 104), uint16], Tensor[(1040), uint16], Tensor[(2, 13, 5), float32], Tensor[(16, 14, 14), float64]) {
  %720 = cast(%var_7932, dtype="float32") /* ty=Tensor[(234), float32] */;
  %721 = cast(meta[relay.Constant][52] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %722 = reshape(%720, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %723 = reshape(%721, newshape=[88]) /* ty=Tensor[(88), float64] */;
  %724 = @func_5017(%722, %723) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) */;
  %725 = cast(%var_7943, dtype="bool") /* ty=Tensor[(126), bool] */;
  %726 = cast(%var_7944, dtype="float64") /* ty=Tensor[(7, 165), float64] */;
  %727 = reshape(%725, newshape=[126]) /* ty=Tensor[(126), bool] */;
  %728 = reshape(%726, newshape=[1, 1155]) /* ty=Tensor[(1, 1155), float64] */;
  %729 = @func_7472(%727, %728) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) */;
  %730 = cast(%var_7971, dtype="int64") /* ty=Tensor[(63, 3), int64] */;
  %731 = reshape(%730, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %732 = @func_4596(%731) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) */;
  %733 = cast(meta[relay.Constant][53] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %734 = reshape(%733, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %735 = @func_6310(%734) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(6, 9, 16), bool]) */;
  %736 = @func_6857() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %737 = cast(%var_7990, dtype="uint16") /* ty=Tensor[(1, 104), uint16] */;
  %738 = cast(meta[relay.Constant][54] /* ty=Tensor[(1040), uint16] */, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
  %739 = %732.1;
  %740 = cast(%739, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %741 = reshape(%737, newshape=[13, 8, 1]) /* ty=Tensor[(13, 8, 1), uint16] */;
  %742 = reshape(%738, newshape=[13, 8, 10]) /* ty=Tensor[(13, 8, 10), uint16] */;
  %743 = reshape(%740, newshape=[182, 1]) /* ty=Tensor[(182, 1), float64] */;
  %744 = @func_7182(%741, %742, %743) /* ty=(Tensor[(2016), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(13, 8, 2016), uint16], Tensor[(13, 8, 10), int16], Tensor[(2, 7, 13), float64], Tensor[(182, 1), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) */;
  %745 = @func_6857() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %746 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %747 = %746.0;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
  %749 = shape_of(%var_7910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_7910, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %752 = divide(%750, %751) /* ty=Tensor[(16, 14, 14), float64] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %754 = cosh(%753) /* ty=Tensor[(16, 14, 14), float32] */;
  %755 = cast(%var_7910, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
  %756 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%747, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %759 = maximum(%757, %758) /* ty=Tensor[(16, 14, 14), uint64] */;
  %760 = cast(%759, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %761 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%754, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %764 = minimum(%762, %763) /* ty=Tensor[(16, 14, 14), float32] */;
  %765 = cast(%764, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
  %766 = %724.4;
  %767 = %729.2;
  %768 = %735.1;
  %769 = %736.0;
  %770 = %744.0;
  %771 = %745.0;
  %772 = acos(%765) /* ty=Tensor[(16, 14, 14), float64] */;
  (%766, %var_7932, meta[relay.Constant][52] /* ty=Tensor[(88), float64] */, %767, %var_7943, %var_7944, %739, %var_7971, %768, meta[relay.Constant][53] /* ty=Tensor[(864), float32] */, %769, %770, %var_7990, meta[relay.Constant][54] /* ty=Tensor[(1040), uint16] */, %771, %772)
}

def @func_8305() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), bool]) {
  %773 = @func_5333() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %774 = @func_6768() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %775 = @func_8028() /* ty=Tensor[(2, 13, 5), bool] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %777 = reshape(%776, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float64] */;
  %778 = %773.0;
  %779 = %774.0;
  %780 = @func_5625(%777) /* ty=Tensor[(2, 13, 5), bool] */;
  (%778, %775, %779, %780)
}

def @func_108(%var_103: Tensor[(2, 13, 9), uint16]) -> Tensor[(2, 13, 9), uint16] {
  %781 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 13, 9), uint16] */, dtype="uint16") /* ty=Tensor[(2, 13, 9), uint16] */;
  %782 = shape_of(%var_103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%var_103, dtype="uint16") /* ty=Tensor[(2, 13, 9), uint16] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%783, %784) /* ty=Tensor[(2, 13, 9), uint16] */
}

def @func_8269() -> Tensor[(2, 13, 5), bool] {
  %785 = @func_6195() /* ty=(Tensor[(2, 13, 5), bool],) */;
  %785.0
}

def @func_6730() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64]) {
  %786 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %787 = cast(%786, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %788 = log2(%787) /* ty=Tensor[(2, 13, 5), float32] */;
  %789 = @func_5042() /* ty=Tensor[(2, 13, 5), float64] */;
  (%788, %789)
}

def @func_5307(%var_5237: Tensor[(4, 14, 1), uint32], %var_5238: Tensor[(4, 14, 15), uint32], %var_5257: Tensor[(7, 165), float64], %var_5261: Tensor[(4, 14, 15), float64], %var_5276: Tensor[(4, 14, 15), int8], %var_5289: Tensor[(1215), uint8], %var_5301: Tensor[(520, 1), float64]) -> (Tensor[(2, 13, 5), float64], Tensor[(88), float64], Tensor[(7, 165), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 14, 15), int64], Tensor[(1215), uint8], Tensor[(1215), uint8], Tensor[(234), uint16], Tensor[(520, 1), float64], uint8, Tensor[(234), uint16]) {
  %790 = cast(meta[relay.Constant][56] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %791 = cast(%var_5257, dtype="float64") /* ty=Tensor[(7, 165), float64] */;
  %792 = reshape(%790, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float64] */;
  %793 = reshape(%791, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %794 = @func_4276(%792, %793) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) */;
  %795 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %796 = cast(%var_5237, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %797 = cast(%var_5238, dtype="bool") /* ty=Tensor[(4, 14, 15), bool] */;
  %798 = less(%796, %797) /* ty=Tensor[(4, 14, 15), bool] */;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %800 = atan(%799) /* ty=Tensor[(4, 14, 15), float64] */;
  %801 = cast(%var_5261, dtype="int8") /* ty=Tensor[(4, 14, 15), int8] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="int8") /* ty=Tensor[(4, 14, 15), int8] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %805 = bitwise_or(%803, %804) /* ty=Tensor[(4, 14, 15), int8] */;
  %806 = cast(%var_5276, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %810 = bitwise_xor(%808, %809) /* ty=Tensor[(4, 14, 15), int64] */;
  %811 = cast(%var_5238, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%810, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %815 = cast(%var_5289, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %816 = reshape(%815, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %817 = @func_3982(%816) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
  %818 = cast(%var_5301, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %819 = cast(meta[relay.Constant][57] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %820 = cast(%var_5289, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %821 = cast(meta[relay.Constant][58] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %822 = reshape(%818, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %823 = reshape(%819, newshape=[]) /* ty=uint8 */;
  %824 = reshape(%820, newshape=[81, 15]) /* ty=Tensor[(81, 15), uint8] */;
  %825 = reshape(%821, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %826 = @func_2535(%822, %823, %824, %825) /* ty=(Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %827 = %794.2;
  %828 = %795.0;
  %829 = add(%813, %814) /* ty=Tensor[(4, 14, 15), int64] */;
  %830 = %817.3;
  %831 = %826.5;
  (%827, meta[relay.Constant][56] /* ty=Tensor[(88), float64] */, %var_5257, %828, %829, %830, %var_5289, %831, %var_5301, meta[relay.Constant][57] /* ty=uint8 */, meta[relay.Constant][58] /* ty=Tensor[(234), uint16] */)
}

def @func_4478(%var_4464: Tensor[(26, 7), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(26, 7), uint8]) {
  %832 = cast(%var_4464, dtype="float64") /* ty=Tensor[(26, 7), float64] */;
  %833 = reshape(%832, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %834 = @func_3623(%833) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) */;
  %835 = %834.1;
  %836 = cast(%835, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %837 = cast(%835, dtype="uint8") /* ty=Tensor[(2, 7, 13), uint8] */;
  %838 = shape_of(%var_4464, dtype="int32") /* ty=Tensor[(2), int32] */;
  %839 = cast(%var_4464, dtype="uint8") /* ty=Tensor[(26, 7), uint8] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %841 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %842 = tan(%836) /* ty=Tensor[(2, 7, 13), float64] */;
  %843 = bitwise_xor(%839, %840) /* ty=Tensor[(26, 7), uint8] */;
  (%841, %842, %843)
}

def @func_5981() -> Tensor[(2, 13, 5), float32] {
  @func_3351() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_7077() -> (Tensor[(2, 13, 5), float64], uint8, Tensor[(81, 15), uint8]) {
  %844 = cast(meta[relay.Constant][59] /* ty=Tensor[(81, 15), uint8] */, dtype="uint8") /* ty=Tensor[(81, 15), uint8] */;
  %845 = reshape(%844, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %846 = @func_3982(%845) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
  %847 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  %848 = %846.2;
  (%847, %848, meta[relay.Constant][59] /* ty=Tensor[(81, 15), uint8] */)
}

def @func_4378() -> (Tensor[(2, 13, 5), float32],) {
  %849 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  (%849,)
}

def @func_8364() -> Tensor[(2, 13, 5), int64] {
  %850 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %850.2
}

def @func_8028() -> Tensor[(2, 13, 5), bool] {
  %851 = @func_6185() /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) */;
  %851.0
}

def @func_8332(%var_8321: Tensor[(9, 11, 11), float64], %var_8327: Tensor[(3136), bool]) -> (Tensor[(9, 11, 11), float64], Tensor[(16, 14, 14), bool], Tensor[(3136), bool], Tensor[(2, 13, 5), float32]) {
  %852 = cast(%var_8321, dtype="float64") /* ty=Tensor[(9, 11, 11), float64] */;
  %853 = cast(%var_8327, dtype="bool") /* ty=Tensor[(3136), bool] */;
  %854 = reshape(%853, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %855 = @func_499(%854) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %856 = sigmoid(%852) /* ty=Tensor[(9, 11, 11), float64] */;
  %857 = %855.0;
  %858 = @func_5981() /* ty=Tensor[(2, 13, 5), float32] */;
  (%856, %857, %var_8327, %858)
}

def @func_3862() -> Tensor[(2, 13, 5), float64] {
  %859 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %859.0
}

def @func_6332(%var_6323: Tensor[(7, 2, 9), bool]) -> Tensor[(7, 2, 9), bool] {
  %860 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %861 = cast(%var_6323, dtype="bool") /* ty=Tensor[(7, 2, 9), bool] */;
  logical_or(%860, %861) /* ty=Tensor[(7, 2, 9), bool] */
}

def @func_6442(%var_6429: Tensor[(1155), float64], %var_6434: Tensor[(182), float64]) -> (Tensor[(2, 13, 5), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) {
  %862 = @func_4825() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %863 = cast(%var_6429, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %864 = reshape(%863, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %865 = @func_4068(%864) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
  %866 = cast(%var_6434, dtype="float64") /* ty=Tensor[(182), float64] */;
  %867 = reshape(%866, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
  %868 = @func_904(%867) /* ty=(Tensor[(2, 7, 13), float64],) */;
  %869 = %862.1;
  %870 = %865.0;
  %871 = %868.0;
  (%869, %870, %var_6429, %871, %var_6434)
}

def @func_7690() -> (Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), float32]) {
  %872 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %873 = @func_6365() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %874 = %872.0;
  %875 = %873.0;
  (%874, %875)
}

def @func_4953(%var_4934: Tensor[(2, 13, 5), float32], %var_4940: Tensor[(2016, 1), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) {
  %876 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %877 = @func_4159() /* ty=Tensor[(2, 13, 5), float32] */;
  %878 = cast(%var_4934, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %879 = shape_of(%877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(%877, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %882 = cast(%var_4940, dtype="float64") /* ty=Tensor[(2016, 1), float64] */;
  %883 = reshape(%882, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), float64] */;
  %884 = @func_4085(%883) /* ty=(Tensor[(9, 16, 14), float64],) */;
  %885 = %876.1;
  %886 = not_equal(%880, %881) /* ty=Tensor[(2, 13, 5), bool] */;
  %887 = %884.0;
  (%885, %886, %887, %var_4940)
}

def @func_4159() -> Tensor[(2, 13, 5), float32] {
  %888 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %888.0
}

def @func_6119() -> Tensor[(2, 13, 5), float32] {
  @func_5521() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_4085(%var_4080: Tensor[(9, 16, 14), float64]) -> (Tensor[(9, 16, 14), float64],) {
  %889 = cast(%var_4080, dtype="float64") /* ty=Tensor[(9, 16, 14), float64] */;
  %890 = acos(%889) /* ty=Tensor[(9, 16, 14), float64] */;
  (%890,)
}

def @func_499(%var_491: Tensor[(16, 14, 14), bool]) -> (Tensor[(16, 14, 14), bool],) {
  %891 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 14, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %892 = shape_of(%var_491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%var_491, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %895 = logical_or(%893, %894) /* ty=Tensor[(16, 14, 14), bool] */;
  (%895,)
}

def @func_5401(%var_5394: Tensor[(12, 8), float64]) -> Tensor[(12, 8), float64] {
  %896 = cast(%var_5394, dtype="float64") /* ty=Tensor[(12, 8), float64] */;
  log2(%896) /* ty=Tensor[(12, 8), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7511(%var_7509: Tensor[(2016), float64], %var_7510: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) {
  @func_7507(%var_7509, %var_7510) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) */
}

def @func_5316(%var_5309: Tensor[(4, 14, 1), uint32], %var_5310: Tensor[(4, 14, 15), uint32], %var_5311: Tensor[(7, 165), float64], %var_5312: Tensor[(4, 14, 15), float64], %var_5313: Tensor[(4, 14, 15), int8], %var_5314: Tensor[(1215), uint8], %var_5315: Tensor[(520, 1), float64]) -> (Tensor[(2, 13, 5), float64], Tensor[(88), float64], Tensor[(7, 165), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 14, 15), int64], Tensor[(1215), uint8], Tensor[(1215), uint8], Tensor[(234), uint16], Tensor[(520, 1), float64], uint8, Tensor[(234), uint16]) {
  @func_5307(%var_5309, %var_5310, %var_5311, %var_5312, %var_5313, %var_5314, %var_5315) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(88), float64], Tensor[(7, 165), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 14, 15), int64], Tensor[(1215), uint8], Tensor[(1215), uint8], Tensor[(234), uint16], Tensor[(520, 1), float64], uint8, Tensor[(234), uint16]) */
}

def @func_3581() -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
  %5 = fn () -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
    %0 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
    %1 = cast(%0, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %2 = cast(%0, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %3 = asinh(%1) /* ty=Tensor[(2, 13, 5), float64] */;
    %4 = erf(%2) /* ty=Tensor[(2, 13, 5), float64] */;
    (%3, %4)
  };
  %5() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */
}

def @func_8336(%var_8334: Tensor[(9, 11, 11), float64], %var_8335: Tensor[(3136), bool]) -> (Tensor[(9, 11, 11), float64], Tensor[(16, 14, 14), bool], Tensor[(3136), bool], Tensor[(2, 13, 5), float32]) {
  @func_8332(%var_8334, %var_8335) /* ty=(Tensor[(9, 11, 11), float64], Tensor[(16, 14, 14), bool], Tensor[(3136), bool], Tensor[(2, 13, 5), float32]) */
}

def @func_6187() -> (Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) {
  @func_6185() /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) */
}

def @func_5784() -> (Tensor[(2, 13, 5), float64],) {
  @func_5782() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_4279(%var_4277: Tensor[(2, 4, 11), float64], %var_4278: Tensor[(1155), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) {
  %25 = fn (%var_4232: Tensor[(2, 4, 11), float64], %var_4251: Tensor[(1155), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) {
    %6 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
    %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 4, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
    %8 = atan(%7) /* ty=Tensor[(2, 4, 11), float64] */;
    %9 = cast(%var_4232, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
    %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%8, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %13 = logical_and(%11, %12) /* ty=Tensor[(2, 4, 11), bool] */;
    %14 = cast(%8, dtype="uint8") /* ty=Tensor[(2, 4, 11), uint8] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="uint8") /* ty=Tensor[(2, 4, 11), uint8] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %18 = cast(%var_4251, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %19 = reshape(%18, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
    %20 = @func_4068(%19) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
    %21 = %6.0;
    %22 = minimum(%16, %17) /* ty=Tensor[(2, 4, 11), uint8] */;
    %23 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
    %24 = %20.3;
    (%21, %22, %23, %24, %var_4251)
  };
  %25(%var_4277, %var_4278) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) */
}

def @func_5369(%var_5367: Tensor[(13, 3, 3), float32], %var_5368: Tensor[(13, 3, 3), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(13, 3, 3), float64]) {
  @func_5365(%var_5367, %var_5368) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(13, 3, 3), float64]) */
}

def @func_5062(%var_5061: Tensor[(2, 13, 5), float64]) -> (Tensor[(2, 13, 5), float64],) {
  %32 = fn (%var_5055: Tensor[(2, 13, 5), float64]) -> (Tensor[(2, 13, 5), float64],) {
    %26 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
    %27 = cast(%var_5055, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %29 = cast(%26, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %31 = divide(%29, %30) /* ty=Tensor[(2, 13, 5), float64] */;
    (%31,)
  };
  %32(%var_5061) /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_8014(%var_8008: Tensor[(16, 14, 14), int64], %var_8009: Tensor[(234), float32], %var_8010: Tensor[(126), bool], %var_8011: Tensor[(7, 165), float64], %var_8012: Tensor[(63, 3), int64], %var_8013: Tensor[(1, 104), uint16]) -> (Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64], Tensor[(126), bool], Tensor[(126), bool], Tensor[(7, 165), float64], Tensor[(2, 7, 13), float64], Tensor[(63, 3), int64], Tensor[(6, 9, 16), bool], Tensor[(864), float32], Tensor[(2, 13, 5), float32], Tensor[(2016), float64], Tensor[(1, 104), uint16], Tensor[(1040), uint16], Tensor[(2, 13, 5), float32], Tensor[(16, 14, 14), float64]) {
  %86 = fn (%var_7910: Tensor[(16, 14, 14), int64], %var_7932: Tensor[(234), float32], %var_7943: Tensor[(126), bool], %var_7944: Tensor[(7, 165), float64], %var_7971: Tensor[(63, 3), int64], %var_7990: Tensor[(1, 104), uint16]) -> (Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64], Tensor[(126), bool], Tensor[(126), bool], Tensor[(7, 165), float64], Tensor[(2, 7, 13), float64], Tensor[(63, 3), int64], Tensor[(6, 9, 16), bool], Tensor[(864), float32], Tensor[(2, 13, 5), float32], Tensor[(2016), float64], Tensor[(1, 104), uint16], Tensor[(1040), uint16], Tensor[(2, 13, 5), float32], Tensor[(16, 14, 14), float64]) {
    %33 = cast(%var_7932, dtype="float32") /* ty=Tensor[(234), float32] */;
    %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
    %35 = reshape(%33, newshape=[234]) /* ty=Tensor[(234), float32] */;
    %36 = reshape(%34, newshape=[88]) /* ty=Tensor[(88), float64] */;
    %37 = @func_5017(%35, %36) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) */;
    %38 = cast(%var_7943, dtype="bool") /* ty=Tensor[(126), bool] */;
    %39 = cast(%var_7944, dtype="float64") /* ty=Tensor[(7, 165), float64] */;
    %40 = reshape(%38, newshape=[126]) /* ty=Tensor[(126), bool] */;
    %41 = reshape(%39, newshape=[1, 1155]) /* ty=Tensor[(1, 1155), float64] */;
    %42 = @func_7472(%40, %41) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) */;
    %43 = cast(%var_7971, dtype="int64") /* ty=Tensor[(63, 3), int64] */;
    %44 = reshape(%43, newshape=[189]) /* ty=Tensor[(189), int64] */;
    %45 = @func_4596(%44) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) */;
    %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %47 = reshape(%46, newshape=[864]) /* ty=Tensor[(864), float32] */;
    %48 = @func_6310(%47) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(6, 9, 16), bool]) */;
    %49 = @func_6857() /* ty=(Tensor[(2, 13, 5), float32],) */;
    %50 = cast(%var_7990, dtype="uint16") /* ty=Tensor[(1, 104), uint16] */;
    %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(1040), uint16] */, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
    %52 = %45.1;
    %53 = cast(%52, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %54 = reshape(%50, newshape=[13, 8, 1]) /* ty=Tensor[(13, 8, 1), uint16] */;
    %55 = reshape(%51, newshape=[13, 8, 10]) /* ty=Tensor[(13, 8, 10), uint16] */;
    %56 = reshape(%53, newshape=[182, 1]) /* ty=Tensor[(182, 1), float64] */;
    %57 = @func_7182(%54, %55, %56) /* ty=(Tensor[(2016), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(13, 8, 2016), uint16], Tensor[(13, 8, 10), int16], Tensor[(2, 7, 13), float64], Tensor[(182, 1), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) */;
    %58 = @func_6857() /* ty=(Tensor[(2, 13, 5), float32],) */;
    %59 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
    %60 = %59.0;
    %61 = cast(%60, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
    %62 = shape_of(%var_7910, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%var_7910, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %65 = divide(%63, %64) /* ty=Tensor[(16, 14, 14), float64] */;
    %66 = cast(%65, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
    %67 = cosh(%66) /* ty=Tensor[(16, 14, 14), float32] */;
    %68 = cast(%var_7910, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
    %69 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
    %70 = cast(%60, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %72 = maximum(%70, %71) /* ty=Tensor[(16, 14, 14), uint64] */;
    %73 = cast(%72, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
    %74 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%67, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %77 = minimum(%75, %76) /* ty=Tensor[(16, 14, 14), float32] */;
    %78 = cast(%77, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
    %79 = %37.4;
    %80 = %42.2;
    %81 = %48.1;
    %82 = %49.0;
    %83 = %57.0;
    %84 = %58.0;
    %85 = acos(%78) /* ty=Tensor[(16, 14, 14), float64] */;
    (%79, %var_7932, meta[relay.Constant][1] /* ty=Tensor[(88), float64] */, %80, %var_7943, %var_7944, %52, %var_7971, %81, meta[relay.Constant][2] /* ty=Tensor[(864), float32] */, %82, %83, %var_7990, meta[relay.Constant][3] /* ty=Tensor[(1040), uint16] */, %84, %85)
  };
  %86(%var_8008, %var_8009, %var_8010, %var_8011, %var_8012, %var_8013) /* ty=(Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64], Tensor[(126), bool], Tensor[(126), bool], Tensor[(7, 165), float64], Tensor[(2, 7, 13), float64], Tensor[(63, 3), int64], Tensor[(6, 9, 16), bool], Tensor[(864), float32], Tensor[(2, 13, 5), float32], Tensor[(2016), float64], Tensor[(1, 104), uint16], Tensor[(1040), uint16], Tensor[(2, 13, 5), float32], Tensor[(16, 14, 14), float64]) */
}

def @func_7078() -> (Tensor[(2, 13, 5), float64], uint8, Tensor[(81, 15), uint8]) {
  %92 = fn () -> (Tensor[(2, 13, 5), float64], uint8, Tensor[(81, 15), uint8]) {
    %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(81, 15), uint8] */, dtype="uint8") /* ty=Tensor[(81, 15), uint8] */;
    %88 = reshape(%87, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
    %89 = @func_3982(%88) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
    %90 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
    %91 = %89.2;
    (%90, %91, meta[relay.Constant][4] /* ty=Tensor[(81, 15), uint8] */)
  };
  %92() /* ty=(Tensor[(2, 13, 5), float64], uint8, Tensor[(81, 15), uint8]) */
}

def @func_8364() -> Tensor[(2, 13, 5), int64] {
  %93 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %93.2
}

def @func_3786() -> (Tensor[(2, 13, 5), float32],) {
  %94 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  (%94,)
}

def @func_5044() -> Tensor[(2, 13, 5), float64] {
  @func_5042() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_6075(%var_6073: Tensor[(945), uint16], %var_6074: Tensor[(9, 9, 15), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16], Tensor[(9, 9, 15), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), float32], Tensor[(2, 13, 5), int64]) {
  @func_6071(%var_6073, %var_6074) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16], Tensor[(9, 9, 15), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), float32], Tensor[(2, 13, 5), int64]) */
}

def @func_6121() -> Tensor[(2, 13, 5), float32] {
  @func_6119() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_5625(%var_5570: Tensor[(2, 13, 5), float64]) -> Tensor[(2, 13, 5), bool] {
  %95 = @func_4635() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %96 = %95.0;
  %97 = cast(%var_5570, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%99, %100) /* ty=Tensor[(2, 13, 5), bool] */
}

def @func_7692() -> (Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), float32]) {
  @func_7690() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), float32]) */
}

def @func_6223() -> (Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32], Tensor[(3136), float32], Tensor[(2, 13, 5), bool]) {
  @func_6221() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32], Tensor[(3136), float32], Tensor[(2, 13, 5), bool]) */
}

def @func_7569(%var_7554: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) {
  %101 = cast(%var_7554, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %102 = cast(%var_7554, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %103 = reshape(%101, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %104 = reshape(%102, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %105 = @func_7507(%103, %104) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) */;
  %106 = @func_5521() /* ty=Tensor[(2, 13, 5), float32] */;
  %107 = %105.1;
  (%106, %107, %var_7554)
}

def @func_6334(%var_6333: Tensor[(7, 2, 9), bool]) -> Tensor[(7, 2, 9), bool] {
  %110 = fn (%var_6323: Tensor[(7, 2, 9), bool]) -> Tensor[(7, 2, 9), bool] {
    %108 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %109 = cast(%var_6323, dtype="bool") /* ty=Tensor[(7, 2, 9), bool] */;
    logical_or(%108, %109) /* ty=Tensor[(7, 2, 9), bool] */
  };
  %110(%var_6333) /* ty=Tensor[(7, 2, 9), bool] */
}

def @func_7419() -> (Tensor[(2, 13, 5), float64],) {
  %112 = fn () -> (Tensor[(2, 13, 5), float64],) {
    %111 = @func_5042() /* ty=Tensor[(2, 13, 5), float64] */;
    (%111,)
  };
  %112() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_5716(%var_5715: Tensor[(945), uint16]) -> (Tensor[(5, 12, 8), float32], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16]) {
  %120 = fn (%var_5710: Tensor[(945), uint16]) -> (Tensor[(5, 12, 8), float32], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16]) {
    %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
    %114 = cast(%var_5710, dtype="uint16") /* ty=Tensor[(945), uint16] */;
    %115 = cast(%var_5710, dtype="uint16") /* ty=Tensor[(945), uint16] */;
    %116 = reshape(%114, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
    %117 = reshape(%115, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
    %118 = cos(%113) /* ty=Tensor[(5, 12, 8), float32] */;
    %119 = @func_1798(%116, %117) /* ty=Tensor[(7, 9, 15), uint16] */;
    (%118, %119, %var_5710)
  };
  %120(%var_5715) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16]) */
}

def @func_7043(%var_7008: Tensor[(6, 9, 16), bool]) -> (Tensor[(2, 13, 5), float32], Tensor[(864), float32], Tensor[(2, 7, 13), float64], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(3, 63), float64], Tensor[(6, 9, 16), float32]) {
  %121 = @func_5333() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 63), int64] */, dtype="int64") /* ty=Tensor[(3, 63), int64] */;
  %123 = cast(meta[relay.Constant][8] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %124 = reshape(%122, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %125 = reshape(%123, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %126 = @func_1618(%124, %125) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %127 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %128 = %127.0;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 63), int64] */, dtype="float64") /* ty=Tensor[(3, 63), float64] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %132 = reshape(%131, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %133 = @func_4041(%132) /* ty=(Tensor[(6, 9, 16), bool],) */;
  %134 = %133.0;
  %135 = cast(%var_7008, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = less(%137, %138) /* ty=Tensor[(6, 9, 16), bool] */;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %141 = %121.0;
  %142 = %126.3;
  %143 = log(%129) /* ty=Tensor[(2, 13, 5), float64] */;
  %144 = log2(%130) /* ty=Tensor[(3, 63), float64] */;
  %145 = cos(%140) /* ty=Tensor[(6, 9, 16), float32] */;
  (%141, meta[relay.Constant][6] /* ty=Tensor[(864), float32] */, %142, meta[relay.Constant][8] /* ty=Tensor[(234), uint16] */, %143, %144, %145)
}

def @func_4159() -> Tensor[(2, 13, 5), float32] {
  %146 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %146.0
}

def @func_8269() -> Tensor[(2, 13, 5), bool] {
  %147 = @func_6195() /* ty=(Tensor[(2, 13, 5), bool],) */;
  %147.0
}

def @func_6808() -> (Tensor[(2, 13, 5), float64],) {
  %148 = @func_5663() /* ty=Tensor[(2, 13, 5), float64] */;
  (%148,)
}

def @func_7182(%var_7122: Tensor[(13, 8, 1), uint16], %var_7123: Tensor[(13, 8, 10), uint16], %var_7171: Tensor[(182, 1), float64]) -> (Tensor[(2016), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(13, 8, 2016), uint16], Tensor[(13, 8, 10), int16], Tensor[(2, 7, 13), float64], Tensor[(182, 1), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) {
  %149 = cast(meta[relay.Constant][9] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %150 = reshape(%149, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %151 = @func_6633(%150) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int8], Tensor[(2016), float64], Tensor[(2, 13, 5), float64], Tensor[(189), int64]) */;
  %152 = @func_6857() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(90), float32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %155 = reshape(%153, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
  %156 = reshape(%154, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
  %157 = @func_5211(%155, %156) /* ty=(Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) */;
  %158 = cast(meta[relay.Constant][9] /* ty=Tensor[(2016), float64] */, dtype="uint16") /* ty=Tensor[(2016), uint16] */;
  %159 = cast(%var_7122, dtype="uint16") /* ty=Tensor[(13, 8, 1), uint16] */;
  %160 = cast(%var_7122, dtype="bool") /* ty=Tensor[(13, 8, 1), bool] */;
  %161 = cast(%var_7123, dtype="bool") /* ty=Tensor[(13, 8, 10), bool] */;
  %162 = less_equal(%160, %161) /* ty=Tensor[(13, 8, 10), bool] */;
  %163 = cast(%162, dtype="int16") /* ty=Tensor[(13, 8, 10), int16] */;
  %164 = cast(%var_7122, dtype="int16") /* ty=Tensor[(13, 8, 1), int16] */;
  %165 = cast(%var_7171, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
  %166 = reshape(%165, newshape=[26, 7]) /* ty=Tensor[(26, 7), float64] */;
  %167 = @func_4478(%166) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(26, 7), uint8]) */;
  %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
  %169 = reshape(%168, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %170 = %151.2;
  %171 = %152.0;
  %172 = %157.1;
  %173 = bitwise_xor(%158, %159) /* ty=Tensor[(13, 8, 2016), uint16] */;
  %174 = bitwise_or(%163, %164) /* ty=Tensor[(13, 8, 10), int16] */;
  %175 = %167.1;
  %176 = @func_1047(%169) /* ty=Tensor[(9, 3, 7), int64] */;
  (%170, %171, %172, meta[relay.Constant][10] /* ty=Tensor[(90), float32] */, %173, %174, %175, %var_7171, %176, meta[relay.Constant][11] /* ty=Tensor[(189), int64] */)
}

def @func_7861() -> (Tensor[(2, 13, 5), float32],) {
  @func_7859() /* ty=(Tensor[(2, 13, 5), float32],) */
}

def @func_5333() -> (Tensor[(2, 13, 5), float32],) {
  %177 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %178 = %177.0;
  (%178,)
}

def @func_5214(%var_5212: Tensor[(5, 3, 6), float32], %var_5213: Tensor[(5, 3, 6), float64]) -> (Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) {
  %195 = fn (%var_5185: Tensor[(5, 3, 6), float32], %var_5194: Tensor[(5, 3, 6), float64]) -> (Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) {
    %179 = cast(%var_5185, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
    %180 = sin(%179) /* ty=Tensor[(5, 3, 6), float32] */;
    %181 = cast(%var_5185, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
    %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%180, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %185 = mod(%183, %184) /* ty=Tensor[(5, 3, 6), float64] */;
    %186 = cast(%var_5194, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
    %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
    %188 = cast(%185, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %190 = cast(meta[relay.Constant][12] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %191 = reshape(%190, newshape=[4, 4, 1]) /* ty=Tensor[(4, 4, 1), float64] */;
    %192 = @func_3641(%191) /* ty=(Tensor[(4, 4, 1), float64],) */;
    %193 = logical_xor(%188, %189) /* ty=Tensor[(5, 3, 6), int64] */;
    %194 = %192.0;
    (%193, %194, meta[relay.Constant][12] /* ty=Tensor[(16), float64] */)
  };
  %195(%var_5212, %var_5213) /* ty=(Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) */
}

def @func_7475(%var_7473: Tensor[(126), bool], %var_7474: Tensor[(1, 1155), float64]) -> (Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) {
  %205 = fn (%var_7465: Tensor[(126), bool], %var_7468: Tensor[(1, 1155), float64]) -> (Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) {
    %196 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
    %197 = cast(%var_7465, dtype="bool") /* ty=Tensor[(126), bool] */;
    %198 = reshape(%197, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), bool] */;
    %199 = cast(%var_7468, dtype="float64") /* ty=Tensor[(1, 1155), float64] */;
    %200 = reshape(%199, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
    %201 = @func_4068(%200) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
    %202 = %196.2;
    %203 = @func_6332(%198) /* ty=Tensor[(7, 2, 9), bool] */;
    %204 = %201.2;
    (%202, %203, %var_7465, %204, %var_7468)
  };
  %205(%var_7473, %var_7474) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) */
}

def @func_6542() -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
  @func_6540() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */
}

def @func_4041(%var_4028: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), bool],) {
  %206 = cast(%var_4028, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %207 = sinh(%206) /* ty=Tensor[(6, 9, 16), float32] */;
  %208 = cast(%var_4028, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = greater_equal(%210, %211) /* ty=Tensor[(6, 9, 16), bool] */;
  (%212,)
}

def @func_8118(%var_8117: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], uint8, Tensor[(2, 13, 5), bool], Tensor[(2016, 1), float64], Tensor[(1215), uint32]) {
  %234 = fn (%var_8084: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], uint8, Tensor[(2, 13, 5), bool], Tensor[(2016, 1), float64], Tensor[(1215), uint32]) {
    %213 = @func_6730() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64]) */;
    %214 = cast(meta[relay.Constant][13] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %215 = cast(%var_8084, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
    %216 = reshape(%214, newshape=[]) /* ty=uint8 */;
    %217 = reshape(%215, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
    %218 = @func_4118(%216, %217) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) */;
    %219 = %213.1;
    %220 = cast(%219, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(2016, 1), float64] */, dtype="float64") /* ty=Tensor[(2016, 1), float64] */;
    %222 = reshape(%220, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %223 = reshape(%221, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float64] */;
    %224 = @func_4953(%222, %223) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) */;
    %225 = cast(%var_8084, dtype="float64") /* ty=Tensor[(1215), float64] */;
    %226 = atanh(%225) /* ty=Tensor[(1215), float64] */;
    %227 = cast(%var_8084, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
    %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(1), int32] */;
    %229 = cast(%226, dtype="uint32") /* ty=Tensor[(1215), uint32] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %231 = %218.5;
    %232 = %224.1;
    %233 = logical_xor(%229, %230) /* ty=Tensor[(1215), uint32] */;
    (%219, %231, meta[relay.Constant][13] /* ty=uint8 */, %232, meta[relay.Constant][14] /* ty=Tensor[(2016, 1), float64] */, %233)
  };
  %234(%var_8117) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], uint8, Tensor[(2, 13, 5), bool], Tensor[(2016, 1), float64], Tensor[(1215), uint32]) */
}

def @main(%var_8555: Tensor[(117, 1), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(16, 14, 14), int64], Tensor[(189), int64], Tensor[(126), bool], Tensor[(117, 1155), uint64]) {
  %235 = cast(%var_8555, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %236 = cast(%var_8555, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %237 = reshape(%235, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %238 = reshape(%236, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), float32] */;
  %239 = @func_5369(%237, %238) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(13, 3, 3), float64]) */;
  %240 = @func_3536() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(126), bool] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %243 = reshape(%241, newshape=[126]) /* ty=Tensor[(126), bool] */;
  %244 = reshape(%242, newshape=[1, 1155]) /* ty=Tensor[(1, 1155), float64] */;
  %245 = @func_7475(%243, %244) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(7, 2, 9), bool], Tensor[(126), bool], Tensor[(189), int64], Tensor[(1, 1155), float64]) */;
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(1155), float64] */, dtype="uint64") /* ty=Tensor[(1155), uint64] */;
  %247 = cast(%var_8555, dtype="uint64") /* ty=Tensor[(117, 1), uint64] */;
  %248 = @func_6119() /* ty=Tensor[(2, 13, 5), float32] */;
  %249 = %239.0;
  %250 = %240.0;
  %251 = %245.3;
  %252 = bitwise_xor(%246, %247) /* ty=Tensor[(117, 1155), uint64] */;
  (%248, %249, %250, %251, meta[relay.Constant][15] /* ty=Tensor[(126), bool] */, %252)
}

def @func_4478(%var_4464: Tensor[(26, 7), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(26, 7), uint8]) {
  %253 = cast(%var_4464, dtype="float64") /* ty=Tensor[(26, 7), float64] */;
  %254 = reshape(%253, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %255 = @func_3623(%254) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) */;
  %256 = %255.1;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %258 = cast(%256, dtype="uint8") /* ty=Tensor[(2, 7, 13), uint8] */;
  %259 = shape_of(%var_4464, dtype="int32") /* ty=Tensor[(2), int32] */;
  %260 = cast(%var_4464, dtype="uint8") /* ty=Tensor[(26, 7), uint8] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %262 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %263 = tan(%257) /* ty=Tensor[(2, 7, 13), float64] */;
  %264 = bitwise_xor(%260, %261) /* ty=Tensor[(26, 7), uint8] */;
  (%262, %263, %264)
}

def @func_6858() -> (Tensor[(2, 13, 5), float32],) {
  %268 = fn () -> (Tensor[(2, 13, 5), float32],) {
    %265 = @func_5663() /* ty=Tensor[(2, 13, 5), float64] */;
    %266 = cast(%265, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %267 = sqrt(%266) /* ty=Tensor[(2, 13, 5), float32] */;
    (%267,)
  };
  %268() /* ty=(Tensor[(2, 13, 5), float32],) */
}

def @func_3895(%var_3869: Tensor[(234), uint16]) -> (Tensor[(2, 13, 9), uint16], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) {
  %269 = cast(%var_3869, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %270 = reshape(%269, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
  %271 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %272 = %271.0;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %274 = cast(meta[relay.Constant][17] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
  %275 = reshape(%274, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %276 = @func_108(%270) /* ty=Tensor[(2, 13, 9), uint16] */;
  %277 = cos(%273) /* ty=Tensor[(2, 13, 5), float64] */;
  %278 = @func_1047(%275) /* ty=Tensor[(9, 3, 7), int64] */;
  (%276, %var_3869, %277, %278, meta[relay.Constant][17] /* ty=Tensor[(189), int64] */)
}

def @func_4637() -> (Tensor[(2, 13, 5), float64],) {
  @func_4635() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_6768() -> (Tensor[(2, 13, 5), float64],) {
  %279 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %280 = %279.0;
  (%280,)
}

def @func_6098(%var_6096: Tensor[(13, 5, 6), uint64], %var_6097: Tensor[(13, 5, 6), uint64]) -> (Tensor[(13, 5, 6), uint64],) {
  %286 = fn (%var_6083: Tensor[(13, 5, 6), uint64], %var_6084: Tensor[(13, 5, 6), uint64]) -> (Tensor[(13, 5, 6), uint64],) {
    %281 = cast(%var_6084, dtype="uint64") /* ty=Tensor[(13, 5, 6), uint64] */;
    %282 = shape_of(%var_6083, dtype="int32") /* ty=Tensor[(3), int32] */;
    %283 = cast(%var_6083, dtype="uint64") /* ty=Tensor[(13, 5, 6), uint64] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %285 = logical_xor(%283, %284) /* ty=Tensor[(13, 5, 6), uint64] */;
    (%285,)
  };
  %286(%var_6096, %var_6097) /* ty=(Tensor[(13, 5, 6), uint64],) */
}

def @func_6445(%var_6443: Tensor[(1155), float64], %var_6444: Tensor[(182), float64]) -> (Tensor[(2, 13, 5), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) {
  %297 = fn (%var_6429: Tensor[(1155), float64], %var_6434: Tensor[(182), float64]) -> (Tensor[(2, 13, 5), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) {
    %287 = @func_4825() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %288 = cast(%var_6429, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %289 = reshape(%288, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
    %290 = @func_4068(%289) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
    %291 = cast(%var_6434, dtype="float64") /* ty=Tensor[(182), float64] */;
    %292 = reshape(%291, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
    %293 = @func_904(%292) /* ty=(Tensor[(2, 7, 13), float64],) */;
    %294 = %287.1;
    %295 = %290.0;
    %296 = %293.0;
    (%294, %295, %var_6429, %296, %var_6434)
  };
  %297(%var_6443, %var_6444) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(7, 11, 15), float64], Tensor[(1155), float64], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) */
}

def @func_5982() -> Tensor[(2, 13, 5), float32] {
  %298 = fn () -> Tensor[(2, 13, 5), float32] {
    @func_3351() /* ty=Tensor[(2, 13, 5), float32] */
  };
  %298() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_7507(%var_7484: Tensor[(2016), float64], %var_7503: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) {
  %299 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %300 = %299.2;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %302 = cast(%var_7484, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %303 = reshape(%301, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %304 = reshape(%302, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float64] */;
  %305 = @func_4953(%303, %304) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) */;
  %306 = cast(%var_7503, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %307 = shape_of(%var_7484, dtype="int32") /* ty=Tensor[(1), int32] */;
  %308 = cast(%var_7484, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?), float64] */;
  %310 = %305.2;
  %311 = floor_divide(%308, %309) /* ty=Tensor[(2016), float64] */;
  (%300, %310, %311)
}

def @func_3383(%var_3381: Tensor[(5, 7, 15), float32], %var_3382: Tensor[(5, 7, 15), float32]) -> (Tensor[(5, 7, 15), float32],) {
  %317 = fn (%var_3375: Tensor[(5, 7, 15), float32], %var_3376: Tensor[(5, 7, 15), float32]) -> (Tensor[(5, 7, 15), float32],) {
    %312 = cast(%var_3376, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
    %313 = shape_of(%var_3375, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%var_3375, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %316 = floor_mod(%314, %315) /* ty=Tensor[(5, 7, 15), float32] */;
    (%316,)
  };
  %317(%var_3381, %var_3382) /* ty=(Tensor[(5, 7, 15), float32],) */
}

def @func_2540(%var_2536: Tensor[(8, 13, 5), float64], %var_2537: uint8, %var_2538: Tensor[(81, 15), uint8], %var_2539: Tensor[(234), uint16]) -> (Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) {
  %334 = fn (%var_2508: Tensor[(8, 13, 5), float64], %var_2521: uint8, %var_2522: Tensor[(81, 15), uint8], %var_2526: Tensor[(234), uint16]) -> (Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) {
    %318 = cast(%var_2508, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
    %319 = atan(%318) /* ty=Tensor[(8, 13, 5), float64] */;
    %320 = cast(%var_2508, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
    %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%319, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %324 = cast(%var_2521, dtype="uint8") /* ty=uint8 */;
    %325 = cast(%var_2522, dtype="uint8") /* ty=Tensor[(81, 15), uint8] */;
    %326 = reshape(%324, newshape=[]) /* ty=uint8 */;
    %327 = reshape(%325, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
    %328 = @func_2276(%326, %327) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
    %329 = cast(%var_2526, dtype="uint16") /* ty=Tensor[(234), uint16] */;
    %330 = reshape(%329, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
    %331 = floor_mod(%322, %323) /* ty=Tensor[(8, 13, 5), float32] */;
    %332 = %328.1;
    %333 = @func_108(%330) /* ty=Tensor[(2, 13, 9), uint16] */;
    (%331, %332, %var_2521, %var_2522, %333, %var_2526)
  };
  %334(%var_2536, %var_2537, %var_2538, %var_2539) /* ty=(Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */
}

def @func_5782() -> (Tensor[(2, 13, 5), float64],) {
  %335 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  (%335,)
}

def @func_2280(%var_2278: uint8, %var_2279: Tensor[(9, 9, 15), uint8]) -> (Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) {
  @func_2276(%var_2278, %var_2279) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */
}

def @func_4121(%var_4119: uint8, %var_4120: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) {
  %348 = fn (%var_4098: uint8, %var_4099: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) {
    %336 = cast(%var_4098, dtype="uint8") /* ty=uint8 */;
    %337 = cast(%var_4099, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
    %338 = reshape(%336, newshape=[]) /* ty=uint8 */;
    %339 = reshape(%337, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
    %340 = @func_2276(%338, %339) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
    %341 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4), float64] */;
    %342 = reshape(%341, newshape=[4, 4, 1]) /* ty=Tensor[(4, 4, 1), float64] */;
    %343 = @func_3641(%342) /* ty=(Tensor[(4, 4, 1), float64],) */;
    %344 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
    %345 = %340.0;
    %346 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
    %347 = %343.0;
    (%344, %345, %var_4098, %var_4099, %346, %347, meta[relay.Constant][18] /* ty=Tensor[(4, 4), float64] */)
  };
  %348(%var_4119, %var_4120) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) */
}

def @func_4904(%var_4903: Tensor[(1, 234), float32]) -> (Tensor[(2, 13, 5), uint64], Tensor[(1155), float64], Tensor[(182), float64], Tensor[(2, 7, 13), float64], Tensor[(?, 234), int8]) {
  %375 = fn (%var_4891: Tensor[(1, 234), float32]) -> (Tensor[(2, 13, 5), uint64], Tensor[(1155), float64], Tensor[(182), float64], Tensor[(2, 7, 13), float64], Tensor[(?, 234), int8]) {
    %349 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
    %350 = %349.0;
    %351 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 13, 5), float32] */, dtype="uint64") /* ty=Tensor[(2, 13, 5), uint64] */;
    %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %353 = cast(%350, dtype="uint64") /* ty=Tensor[(2, 13, 5), uint64] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %355 = cast(meta[relay.Constant][20] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %356 = reshape(%355, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
    %357 = @func_4068(%356) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
    %358 = %357.1;
    %359 = cast(%358, dtype="float64") /* ty=Tensor[(182), float64] */;
    %360 = reshape(%359, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
    %361 = @func_904(%360) /* ty=(Tensor[(2, 7, 13), float64],) */;
    %362 = cast(meta[relay.Constant][20] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %363 = reshape(%362, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
    %364 = @func_4068(%363) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */;
    %365 = %364.3;
    %366 = cast(%365, dtype="float32") /* ty=Tensor[(1, 234), float32] */;
    %367 = cosh(%366) /* ty=Tensor[(1, 234), float32] */;
    %368 = cast(%var_4891, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
    %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(2), int32] */;
    %370 = cast(%367, dtype="int8") /* ty=Tensor[(1, 234), int8] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %372 = right_shift(%353, %354) /* ty=Tensor[(2, 13, 5), uint64] */;
    %373 = %361.0;
    %374 = bitwise_and(%370, %371) /* ty=Tensor[(?, 234), int8] */;
    (%372, meta[relay.Constant][20] /* ty=Tensor[(1155), float64] */, %358, %373, %374)
  };
  %375(%var_4903) /* ty=(Tensor[(2, 13, 5), uint64], Tensor[(1155), float64], Tensor[(182), float64], Tensor[(2, 7, 13), float64], Tensor[(?, 234), int8]) */
}

def @func_5942(%var_5940: Tensor[(6, 8, 12), float32], %var_5941: uint8) -> (Tensor[(2, 13, 5), int64], Tensor[(6, 8, 12), bool], uint8, uint8, Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64]) {
  @func_5938(%var_5940, %var_5941) /* ty=(Tensor[(2, 13, 5), int64], Tensor[(6, 8, 12), bool], uint8, uint8, Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64]) */
}

def @func_629(%var_548: Tensor[(10, 4, 16), float32]) -> (Tensor[(10, 4, 16), float32], Tensor[(1568, 2), int32], Tensor[(16, 14, 14), float32], Tensor[(16, 14, 14), bool], Tensor[(16, 14, 14), bool], Tensor[(2, 13, 9), bool]) {
  %376 = cast(%var_548, dtype="float32") /* ty=Tensor[(10, 4, 16), float32] */;
  %377 = cast(meta[relay.Constant][21] /* ty=Tensor[(1568, 2), bool] */, dtype="bool") /* ty=Tensor[(1568, 2), bool] */;
  %378 = reshape(%377, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %379 = @func_499(%378) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %380 = %379.0;
  %381 = cast(%380, dtype="int32") /* ty=Tensor[(16, 14, 14), int32] */;
  %382 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(1568, 2), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %383 = cast(meta[relay.Constant][21] /* ty=Tensor[(1568, 2), bool] */, dtype="int32") /* ty=Tensor[(1568, 2), int32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %385 = cast(%380, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %386 = reshape(%385, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %387 = @func_499(%386) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %390 = cast(%388, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %391 = reshape(%390, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %392 = @func_499(%391) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %393 = log2(%389) /* ty=Tensor[(16, 14, 14), float32] */;
  %394 = cast(%393, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %395 = reshape(%394, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %396 = @func_499(%395) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %397 = cast(meta[relay.Constant][22] /* ty=Tensor[(39, 6), uint16] */, dtype="uint16") /* ty=Tensor[(39, 6), uint16] */;
  %398 = reshape(%397, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
  %399 = @func_108(%398) /* ty=Tensor[(2, 13, 9), uint16] */;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(2, 13, 9), float32] */;
  %401 = log10(%400) /* ty=Tensor[(2, 13, 9), float32] */;
  %402 = cast(meta[relay.Constant][22] /* ty=Tensor[(39, 6), uint16] */, dtype="bool") /* ty=Tensor[(39, 6), bool] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="bool") /* ty=Tensor[(2, 13, 9), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = acos(%376) /* ty=Tensor[(10, 4, 16), float32] */;
  %407 = multiply(%383, %384) /* ty=Tensor[(1568, 2), int32] */;
  %408 = %392.0;
  %409 = %396.0;
  %410 = equal(%404, %405) /* ty=Tensor[(2, 13, 9), bool] */;
  (%406, %407, %393, %408, %409, %410)
}

def @func_6732() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64]) {
  @func_6730() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64]) */
}

def @func_5522() -> Tensor[(2, 13, 5), float32] {
  %411 = fn () -> Tensor[(2, 13, 5), float32] {
    @func_3351() /* ty=Tensor[(2, 13, 5), float32] */
  };
  %411() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_3949() -> Tensor[(2, 13, 5), float64] {
  @func_3947() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_5180(%var_5179: Tensor[(525), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(525), float32], Tensor[(5, 7, 15), float32], Tensor[(2, 13, 5), float64]) {
  %424 = fn (%var_5135: Tensor[(525), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(525), float32], Tensor[(5, 7, 15), float32], Tensor[(2, 13, 5), float64]) {
    %412 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
    %413 = cast(%var_5135, dtype="float32") /* ty=Tensor[(525), float32] */;
    %414 = cast(%var_5135, dtype="float32") /* ty=Tensor[(525), float32] */;
    %415 = reshape(%413, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), float32] */;
    %416 = reshape(%414, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), float32] */;
    %417 = @func_3380(%415, %416) /* ty=(Tensor[(5, 7, 15), float32],) */;
    %418 = %417.0;
    %419 = cast(%418, dtype="float32") /* ty=Tensor[(5, 7, 15), float32] */;
    %420 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
    %421 = %412.0;
    %422 = acos(%419) /* ty=Tensor[(5, 7, 15), float32] */;
    %423 = %420.0;
    (%421, %var_5135, %422, %423)
  };
  %424(%var_5179) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(525), float32], Tensor[(5, 7, 15), float32], Tensor[(2, 13, 5), float64]) */
}

def @func_8271() -> Tensor[(2, 13, 5), bool] {
  @func_8269() /* ty=Tensor[(2, 13, 5), bool] */
}

def @func_6185() -> (Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) {
  %425 = @func_5333() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %426 = %425.0;
  %427 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %432 = logical_or(%429, %430) /* ty=Tensor[(2, 13, 5), bool] */;
  %433 = %431.0;
  (%432, %433)
}

def @func_4459(%var_4456: Tensor[(6, 7, 13), float64], %var_4457: Tensor[(6, 7, 13), float64], %var_4458: uint8) -> (Tensor[(6, 7, 13), int32], Tensor[(9, 9, 15), bool], uint8, Tensor[(405, 3), uint8], Tensor[(6, 9, 16), bool], Tensor[(216, 4), float32], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), bool]) {
  @func_4454(%var_4456, %var_4457, %var_4458) /* ty=(Tensor[(6, 7, 13), int32], Tensor[(9, 9, 15), bool], uint8, Tensor[(405, 3), uint8], Tensor[(6, 9, 16), bool], Tensor[(216, 4), float32], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), bool]) */
}

def @func_6540() -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
  %434 = @func_5782() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %435 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %436 = %434.0;
  %437 = %435.0;
  %438 = @func_4206() /* ty=Tensor[(2, 13, 5), float64] */;
  (%436, %437, %438)
}

def @func_5404(%var_5402: Tensor[(12, 8), float64]) -> Tensor[(12, 8), float64] {
  @func_5401(%var_5402) /* ty=Tensor[(12, 8), float64] */
}

def @func_7187(%var_7184: Tensor[(13, 8, 1), uint16], %var_7185: Tensor[(13, 8, 10), uint16], %var_7186: Tensor[(182, 1), float64]) -> (Tensor[(2016), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(13, 8, 2016), uint16], Tensor[(13, 8, 10), int16], Tensor[(2, 7, 13), float64], Tensor[(182, 1), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) {
  @func_7182(%var_7184, %var_7185, %var_7186) /* ty=(Tensor[(2016), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(13, 8, 2016), uint16], Tensor[(13, 8, 10), int16], Tensor[(2, 7, 13), float64], Tensor[(182, 1), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) */
}

def @func_6770() -> (Tensor[(2, 13, 5), float64],) {
  @func_6768() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_7859() -> (Tensor[(2, 13, 5), float32],) {
  %439 = @func_5521() /* ty=Tensor[(2, 13, 5), float32] */;
  (%439,)
}

def @func_5020(%var_5018: Tensor[(234), float32], %var_5019: Tensor[(88), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) {
  %457 = fn (%var_4975: Tensor[(234), float32], %var_4978: Tensor[(88), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) {
    %440 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
    %441 = cast(%var_4975, dtype="float32") /* ty=Tensor[(234), float32] */;
    %442 = reshape(%441, newshape=[1, 234]) /* ty=Tensor[(1, 234), float32] */;
    %443 = @func_4902(%442) /* ty=(Tensor[(2, 13, 5), uint64], Tensor[(1155), float64], Tensor[(182), float64], Tensor[(2, 7, 13), float64], Tensor[(?, 234), int8]) */;
    %444 = cast(%var_4978, dtype="float64") /* ty=Tensor[(88), float64] */;
    %445 = cast(meta[relay.Constant][24] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %446 = reshape(%444, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float64] */;
    %447 = reshape(%445, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
    %448 = @func_4276(%446, %447) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) */;
    %449 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 405), uint8] */, dtype="uint8") /* ty=Tensor[(3, 405), uint8] */;
    %450 = reshape(%449, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
    %451 = @func_3982(%450) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
    %452 = %440.1;
    %453 = %443.4;
    %454 = %448.0;
    %455 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
    %456 = %451.2;
    (%452, %453, %var_4975, %454, %var_4978, meta[relay.Constant][24] /* ty=Tensor[(1155), float64] */, %455, %456, meta[relay.Constant][25] /* ty=Tensor[(3, 405), uint8] */)
  };
  %457(%var_5018, %var_5019) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) */
}

def @func_4161() -> Tensor[(2, 13, 5), float32] {
  @func_4159() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_5628(%var_5626: Tensor[(2, 13, 5), float64]) -> Tensor[(2, 13, 5), bool] {
  @func_5625(%var_5626) /* ty=Tensor[(2, 13, 5), bool] */
}

def @func_4044(%var_4042: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), bool],) {
  @func_4041(%var_4042) /* ty=(Tensor[(6, 9, 16), bool],) */
}

def @func_8058(%var_8051: Tensor[(13, 6, 1), bool]) -> Tensor[(13, 6, 14), bool] {
  %458 = cast(%var_8051, dtype="bool") /* ty=Tensor[(13, 6, 1), bool] */;
  %459 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 6, 14), bool] */, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  logical_or(%458, %459) /* ty=Tensor[(13, 6, 14), bool] */
}

def @func_6313(%var_6311: Tensor[(864), float32]) -> (Tensor[(2, 13, 5), float64], Tensor[(6, 9, 16), bool]) {
  @func_6310(%var_6311) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(6, 9, 16), bool]) */
}

def @func_907(%var_905: Tensor[(2, 7, 13), float64]) -> (Tensor[(2, 7, 13), float64],) {
  @func_904(%var_905) /* ty=(Tensor[(2, 7, 13), float64],) */
}

def @func_3534() -> (Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) {
  %460 = cast(meta[relay.Constant][27] /* ty=Tensor[(3136), bool] */, dtype="bool") /* ty=Tensor[(3136), bool] */;
  %461 = reshape(%460, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %462 = @func_499(%461) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %463 = %462.0;
  %464 = cast(meta[relay.Constant][27] /* ty=Tensor[(3136), bool] */, dtype="int64") /* ty=Tensor[(3136), int64] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="int64") /* ty=Tensor[(16, 14, 14), int64] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %468 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %470 = acos(%469) /* ty=Tensor[(2, 13, 5), float32] */;
  %471 = cast(%468, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %475 = multiply(%473, %474) /* ty=Tensor[(2, 13, 5), uint16] */;
  %476 = cast(%475, dtype="int8") /* ty=Tensor[(2, 13, 5), int8] */;
  %477 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%470, dtype="int8") /* ty=Tensor[(2, 13, 5), int8] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %480 = cast(%468, dtype="int64") /* ty=Tensor[(2, 13, 5), int64] */;
  %481 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%475, dtype="int64") /* ty=Tensor[(2, 13, 5), int64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %484 = add(%466, %467) /* ty=Tensor[(16, 14, 14), int64] */;
  %485 = bitwise_xor(%478, %479) /* ty=Tensor[(2, 13, 5), int8] */;
  %486 = maximum(%482, %483) /* ty=Tensor[(2, 13, 5), int64] */;
  (%484, %485, %486)
}

def @func_3835() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) {
  @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */
}

def @func_4599(%var_4597: Tensor[(189), int64]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) {
  @func_4596(%var_4597) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) */
}

def @func_5640() -> (Tensor[(2, 13, 5), int64],) {
  @func_5638() /* ty=(Tensor[(2, 13, 5), int64],) */
}

def @func_1618(%var_1581: Tensor[(189), int64], %var_1588: Tensor[(234), uint16]) -> (Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) {
  %487 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 4), float64] */;
  %488 = cast(%var_1581, dtype="int64") /* ty=Tensor[(189), int64] */;
  %489 = reshape(%488, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %490 = cast(meta[relay.Constant][29] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %491 = reshape(%490, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
  %492 = @func_904(%491) /* ty=(Tensor[(2, 7, 13), float64],) */;
  %493 = cast(%var_1588, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %494 = reshape(%493, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), uint16] */;
  %495 = sqrt(%487) /* ty=Tensor[(12, 15, 4), float64] */;
  %496 = @func_1047(%489) /* ty=Tensor[(9, 3, 7), int64] */;
  %497 = %492.0;
  %498 = @func_108(%494) /* ty=Tensor[(2, 13, 9), uint16] */;
  (%495, %496, %var_1581, %497, meta[relay.Constant][29] /* ty=Tensor[(182), float64] */, %498, %var_1588)
}

def @func_4826() -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
  %502 = fn () -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) {
    %499 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
    %500 = %499.0;
    %501 = @func_3947() /* ty=Tensor[(2, 13, 5), float64] */;
    (%500, %501)
  };
  %502() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */
}

def @func_6800(%var_6799: Tensor[(5, 189), uint16]) -> (Tensor[(2, 13, 5), float32], Tensor[(5, 189), int8]) {
  %516 = fn (%var_6776: Tensor[(5, 189), uint16]) -> (Tensor[(2, 13, 5), float32], Tensor[(5, 189), int8]) {
    %503 = cast(%var_6776, dtype="float64") /* ty=Tensor[(5, 189), float64] */;
    %504 = acosh(%503) /* ty=Tensor[(5, 189), float64] */;
    %505 = cast(%var_6776, dtype="uint16") /* ty=Tensor[(5, 189), uint16] */;
    %506 = cast(%var_6776, dtype="uint16") /* ty=Tensor[(5, 189), uint16] */;
    %507 = reshape(%505, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
    %508 = reshape(%506, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
    %509 = @func_1798(%507, %508) /* ty=Tensor[(7, 9, 15), uint16] */;
    %510 = cast(%509, dtype="int8") /* ty=Tensor[(7, 9, 15), int8] */;
    %511 = shape_of(%504, dtype="int32") /* ty=Tensor[(2), int32] */;
    %512 = cast(%504, dtype="int8") /* ty=Tensor[(5, 189), int8] */;
    %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %514 = @func_5981() /* ty=Tensor[(2, 13, 5), float32] */;
    %515 = maximum(%512, %513) /* ty=Tensor[(5, 189), int8] */;
    (%514, %515)
  };
  %516(%var_6799) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(5, 189), int8]) */
}

def @func_3863() -> Tensor[(2, 13, 5), float64] {
  %518 = fn () -> Tensor[(2, 13, 5), float64] {
    %517 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %517.0
  };
  %518() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_6366() -> (Tensor[(2, 13, 5), float32],) {
  %521 = fn () -> (Tensor[(2, 13, 5), float32],) {
    %519 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
    %520 = %519.0;
    (%520,)
  };
  %521() /* ty=(Tensor[(2, 13, 5), float32],) */
}

def @func_8306() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), bool]) {
  %530 = fn () -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), bool]) {
    %522 = @func_5333() /* ty=(Tensor[(2, 13, 5), float32],) */;
    %523 = @func_6768() /* ty=(Tensor[(2, 13, 5), float64],) */;
    %524 = @func_8028() /* ty=Tensor[(2, 13, 5), bool] */;
    %525 = cast(%524, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %526 = reshape(%525, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float64] */;
    %527 = %522.0;
    %528 = %523.0;
    %529 = @func_5625(%526) /* ty=Tensor[(2, 13, 5), bool] */;
    (%527, %524, %528, %529)
  };
  %530() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), bool]) */
}

def @func_5401(%var_5394: Tensor[(12, 8), float64]) -> Tensor[(12, 8), float64] {
  %531 = cast(%var_5394, dtype="float64") /* ty=Tensor[(12, 8), float64] */;
  log2(%531) /* ty=Tensor[(12, 8), float64] */
}

def @func_5938(%var_5899: Tensor[(6, 8, 12), float32], %var_5920: uint8) -> (Tensor[(2, 13, 5), int64], Tensor[(6, 8, 12), bool], uint8, uint8, Tensor[(88), float64], Tensor[(234), float32], Tensor[(88), float64]) {
  %532 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %533 = cast(%var_5899, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
  %534 = sinh(%533) /* ty=Tensor[(6, 8, 12), float32] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
  %536 = rsqrt(%535) /* ty=Tensor[(6, 8, 12), float32] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%536, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = cast(%var_5920, dtype="uint8") /* ty=uint8 */;
  %542 = reshape(%541, newshape=[]) /* ty=uint8 */;
  %543 = @func_4771(%542) /* ty=(Tensor[(1215), uint8], Tensor[(81, 15), uint8], Tensor[(520), float64], uint8, Tensor[(234), uint16]) */;
  %544 = cast(meta[relay.Constant][30] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %545 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %546 = reshape(%544, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %547 = reshape(%545, newshape=[88]) /* ty=Tensor[(88), float64] */;
  %548 = @func_5017(%546, %547) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(?, 234), int8], Tensor[(234), float32], Tensor[(2, 13, 5), float32], Tensor[(88), float64], Tensor[(1155), float64], Tensor[(2, 13, 5), float64], uint8, Tensor[(3, 405), uint8]) */;
  %549 = %532.2;
  %550 = greater_equal(%539, %540) /* ty=Tensor[(6, 8, 12), bool] */;
  %551 = %543.3;
  %552 = %548.4;
  (%549, %550, %551, %var_5920, %552, meta[relay.Constant][30] /* ty=Tensor[(234), float32] */, meta[relay.Constant][31] /* ty=Tensor[(88), float64] */)
}

def @func_8159() -> (Tensor[(2, 13, 5), float64],) {
  @func_8157() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_3623(%var_3613: Tensor[(182), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) {
  %553 = cast(%var_3613, dtype="float64") /* ty=Tensor[(182), float64] */;
  %554 = reshape(%553, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float64] */;
  %555 = @func_904(%554) /* ty=(Tensor[(2, 7, 13), float64],) */;
  %556 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %557 = %555.0;
  (%556, %557, %var_3613)
}

def @func_4379() -> (Tensor[(2, 13, 5), float32],) {
  %559 = fn () -> (Tensor[(2, 13, 5), float32],) {
    %558 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
    (%558,)
  };
  %559() /* ty=(Tensor[(2, 13, 5), float32],) */
}

def @func_8157() -> (Tensor[(2, 13, 5), float64],) {
  %560 = @func_6768() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %561 = %560.0;
  (%561,)
}

def @func_4518() -> (Tensor[(2, 13, 5), float64],) {
  %563 = fn () -> (Tensor[(2, 13, 5), float64],) {
    %562 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
    (%562,)
  };
  %563() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_501(%var_500: Tensor[(16, 14, 14), bool]) -> (Tensor[(16, 14, 14), bool],) {
  %569 = fn (%var_491: Tensor[(16, 14, 14), bool]) -> (Tensor[(16, 14, 14), bool],) {
    %564 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 14, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
    %565 = shape_of(%var_491, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%var_491, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %568 = logical_or(%566, %567) /* ty=Tensor[(16, 14, 14), bool] */;
    (%568,)
  };
  %569(%var_500) /* ty=(Tensor[(16, 14, 14), bool],) */
}

def @func_3984(%var_3983: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) {
  %578 = fn (%var_3977: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) {
    %570 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %571 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %572 = cast(%var_3977, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
    %573 = reshape(%571, newshape=[]) /* ty=uint8 */;
    %574 = reshape(%572, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
    %575 = @func_2276(%573, %574) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
    %576 = %570.0;
    %577 = %575.1;
    (%576, %577, meta[relay.Constant][33] /* ty=uint8 */, %var_3977)
  };
  %578(%var_3983) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */
}

def @func_3833() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) {
  %579 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %580 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %581 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %582 = cast(meta[relay.Constant][35] /* ty=Tensor[(1215), uint8] */, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %583 = reshape(%581, newshape=[]) /* ty=uint8 */;
  %584 = reshape(%582, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %585 = @func_2276(%583, %584) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
  %586 = %579.0;
  %587 = %580.1;
  %588 = %585.0;
  (%586, %587, %588, meta[relay.Constant][34] /* ty=uint8 */, meta[relay.Constant][35] /* ty=Tensor[(1215), uint8] */)
}

def @func_7046(%var_7044: Tensor[(6, 9, 16), bool]) -> (Tensor[(2, 13, 5), float32], Tensor[(864), float32], Tensor[(2, 7, 13), float64], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(3, 63), float64], Tensor[(6, 9, 16), float32]) {
  @func_7043(%var_7044) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(864), float32], Tensor[(2, 7, 13), float64], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(3, 63), float64], Tensor[(6, 9, 16), float32]) */
}

def @func_6119() -> Tensor[(2, 13, 5), float32] {
  @func_5521() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_108(%var_103: Tensor[(2, 13, 9), uint16]) -> Tensor[(2, 13, 9), uint16] {
  %589 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 13, 9), uint16] */, dtype="uint16") /* ty=Tensor[(2, 13, 9), uint16] */;
  %590 = shape_of(%var_103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_103, dtype="uint16") /* ty=Tensor[(2, 13, 9), uint16] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%591, %592) /* ty=Tensor[(2, 13, 9), uint16] */
}

def @func_8538() -> (Tensor[(2, 13, 5), float64],) {
  %595 = fn () -> (Tensor[(2, 13, 5), float64],) {
    %593 = @func_4635() /* ty=(Tensor[(2, 13, 5), float64],) */;
    %594 = %593.0;
    (%594,)
  };
  %595() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_7101() -> (Tensor[(2, 13, 5), float32],) {
  %598 = fn () -> (Tensor[(2, 13, 5), float32],) {
    %596 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
    %597 = %596.0;
    (%597,)
  };
  %598() /* ty=(Tensor[(2, 13, 5), float32],) */
}

def @func_6071(%var_6033: Tensor[(945), uint16], %var_6043: Tensor[(9, 9, 15), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16], Tensor[(9, 9, 15), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), float32], Tensor[(2, 13, 5), int64]) {
  %599 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
  %600 = cast(%var_6033, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %601 = cast(%var_6033, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %602 = reshape(%600, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %603 = reshape(%601, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint16] */;
  %604 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
  %605 = %604.2;
  %606 = cast(%var_6043, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %611 = cast(%605, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %612 = @func_5638() /* ty=(Tensor[(2, 13, 5), int64],) */;
  %613 = %599.0;
  %614 = @func_1798(%602, %603) /* ty=Tensor[(7, 9, 15), uint16] */;
  %615 = less_equal(%608, %609) /* ty=Tensor[(9, 9, 15), bool] */;
  %616 = %610.0;
  %617 = rsqrt(%611) /* ty=Tensor[(9, 9, 15), float32] */;
  %618 = %612.0;
  (%613, %614, %var_6033, %615, %616, %617, %618)
}

def @func_5365(%var_5340: Tensor[(13, 3, 3), float32], %var_5341: Tensor[(13, 3, 3), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(13, 3, 3), float64]) {
  %619 = @func_4378() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %620 = cast(%var_5341, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %621 = shape_of(%var_5340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_5340, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %624 = floor_divide(%622, %623) /* ty=Tensor[(13, 3, 3), float32] */;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %626 = %619.0;
  %627 = asin(%625) /* ty=Tensor[(13, 3, 3), float64] */;
  (%626, %627)
}

def @func_3352() -> Tensor[(2, 13, 5), float32] {
  %637 = fn () -> Tensor[(2, 13, 5), float32] {
    %628 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
    %629 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %630 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="uint16") /* ty=Tensor[(2, 13, 5), uint16] */;
    %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %632 = minimum(%630, %631) /* ty=Tensor[(2, 13, 5), uint16] */;
    %633 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 13, 5), uint16] */, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%635, %636) /* ty=Tensor[(2, 13, 5), float32] */
  };
  %637() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_7261(%var_7259: Tensor[(1215), uint8], %var_7260: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(1215), uint8], uint8, Tensor[(864), float64], Tensor[(1215), float32]) {
  %657 = fn (%var_7242: Tensor[(1215), uint8], %var_7254: Tensor[(1215), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(1215), uint8], uint8, Tensor[(864), float64], Tensor[(1215), float32]) {
    %638 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %639 = cast(meta[relay.Constant][39] /* ty=Tensor[(864), bool] */, dtype="bool") /* ty=Tensor[(864), bool] */;
    %640 = reshape(%639, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), bool] */;
    %641 = @func_7043(%640) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(864), float32], Tensor[(2, 7, 13), float64], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(3, 63), float64], Tensor[(6, 9, 16), float32]) */;
    %642 = cast(meta[relay.Constant][40] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %643 = cast(%var_7242, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
    %644 = reshape(%642, newshape=[]) /* ty=uint8 */;
    %645 = reshape(%643, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
    %646 = @func_4118(%644, %645) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8], Tensor[(2, 13, 5), float32], Tensor[(4, 4, 1), float64], Tensor[(4, 4), float64]) */;
    %647 = cast(meta[relay.Constant][39] /* ty=Tensor[(864), bool] */, dtype="float64") /* ty=Tensor[(864), float64] */;
    %648 = cast(%var_7254, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %649 = shape_of(%var_7242, dtype="int32") /* ty=Tensor[(1), int32] */;
    %650 = cast(%var_7242, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?), float32] */;
    %652 = %638.0;
    %653 = %641.0;
    %654 = %646.3;
    %655 = exp(%647) /* ty=Tensor[(864), float64] */;
    %656 = power(%650, %651) /* ty=Tensor[(1215), float32] */;
    (%652, %653, %654, meta[relay.Constant][40] /* ty=uint8 */, %655, %656)
  };
  %657(%var_7259, %var_7260) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(1215), uint8], uint8, Tensor[(864), float64], Tensor[(1215), float32]) */
}

def @func_1802(%var_1800: Tensor[(7, 9, 15), uint16], %var_1801: Tensor[(7, 9, 15), uint16]) -> Tensor[(7, 9, 15), uint16] {
  @func_1798(%var_1800, %var_1801) /* ty=Tensor[(7, 9, 15), uint16] */
}

def @func_7373(%var_7370: Tensor[(14, 3, 7), uint8], %var_7371: Tensor[(14, 3, 7), uint8], %var_7372: Tensor[(14, 3, 7), uint8]) -> Tensor[(14, 3, 7), bool] {
  %672 = fn (%var_7355: Tensor[(14, 3, 7), uint8], %var_7356: Tensor[(14, 3, 7), uint8], %var_7360: Tensor[(14, 3, 7), uint8]) -> Tensor[(14, 3, 7), bool] {
    %658 = cast(%var_7356, dtype="uint8") /* ty=Tensor[(14, 3, 7), uint8] */;
    %659 = shape_of(%var_7355, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%var_7355, dtype="uint8") /* ty=Tensor[(14, 3, 7), uint8] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %662 = right_shift(%660, %661) /* ty=Tensor[(14, 3, 7), uint8] */;
    %663 = cast(%var_7360, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
    %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%662, dtype="float64") /* ty=Tensor[(14, 3, 7), float64] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %667 = floor_divide(%665, %666) /* ty=Tensor[(14, 3, 7), float64] */;
    %668 = cast(%662, dtype="bool") /* ty=Tensor[(14, 3, 7), bool] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="bool") /* ty=Tensor[(14, 3, 7), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%670, %671) /* ty=Tensor[(14, 3, 7), bool] */
  };
  %672(%var_7370, %var_7371, %var_7372) /* ty=Tensor[(14, 3, 7), bool] */
}

def @func_4773(%var_4772: uint8) -> (Tensor[(1215), uint8], Tensor[(81, 15), uint8], Tensor[(520), float64], uint8, Tensor[(234), uint16]) {
  %685 = fn (%var_4768: uint8) -> (Tensor[(1215), uint8], Tensor[(81, 15), uint8], Tensor[(520), float64], uint8, Tensor[(234), uint16]) {
    %673 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
    %674 = cast(meta[relay.Constant][41] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
    %675 = cast(%var_4768, dtype="uint8") /* ty=uint8 */;
    %676 = %673.4;
    %677 = cast(%676, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
    %678 = cast(meta[relay.Constant][42] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
    %679 = reshape(%674, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
    %680 = reshape(%675, newshape=[]) /* ty=uint8 */;
    %681 = reshape(%677, newshape=[81, 15]) /* ty=Tensor[(81, 15), uint8] */;
    %682 = reshape(%678, newshape=[234]) /* ty=Tensor[(234), uint16] */;
    %683 = @func_2535(%679, %680, %681, %682) /* ty=(Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
    %684 = %683.3;
    (%676, %684, meta[relay.Constant][41] /* ty=Tensor[(520), float64] */, %var_4768, meta[relay.Constant][42] /* ty=Tensor[(234), uint16] */)
  };
  %685(%var_4772) /* ty=(Tensor[(1215), uint8], Tensor[(81, 15), uint8], Tensor[(520), float64], uint8, Tensor[(234), uint16]) */
}

def @func_5042() -> Tensor[(2, 13, 5), float64] {
  %686 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %686.0
}

def @func_4070(%var_4069: Tensor[(7, 11, 15), float64]) -> (Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) {
  %695 = fn (%var_4046: Tensor[(7, 11, 15), float64]) -> (Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) {
    %687 = cast(%var_4046, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
    %688 = cast(meta[relay.Constant][43] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
    %689 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 234), uint16] */, dtype="uint16") /* ty=Tensor[(1, 234), uint16] */;
    %690 = reshape(%688, newshape=[189]) /* ty=Tensor[(189), int64] */;
    %691 = reshape(%689, newshape=[234]) /* ty=Tensor[(234), uint16] */;
    %692 = @func_1618(%690, %691) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
    %693 = log10(%687) /* ty=Tensor[(7, 11, 15), float64] */;
    %694 = %692.4;
    (%693, %694, meta[relay.Constant][43] /* ty=Tensor[(189), int64] */, meta[relay.Constant][44] /* ty=Tensor[(1, 234), uint16] */)
  };
  %695(%var_4069) /* ty=(Tensor[(7, 11, 15), float64], Tensor[(182), float64], Tensor[(189), int64], Tensor[(1, 234), uint16]) */
}

def @func_1798(%var_1789: Tensor[(7, 9, 15), uint16], %var_1790: Tensor[(7, 9, 15), uint16]) -> Tensor[(7, 9, 15), uint16] {
  %696 = cast(%var_1790, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %697 = shape_of(%var_1789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_1789, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%698, %699) /* ty=Tensor[(7, 9, 15), uint16] */
}

def @func_4085(%var_4080: Tensor[(9, 16, 14), float64]) -> (Tensor[(9, 16, 14), float64],) {
  %700 = cast(%var_4080, dtype="float64") /* ty=Tensor[(9, 16, 14), float64] */;
  %701 = acos(%700) /* ty=Tensor[(9, 16, 14), float64] */;
  (%701,)
}

def @func_8332(%var_8321: Tensor[(9, 11, 11), float64], %var_8327: Tensor[(3136), bool]) -> (Tensor[(9, 11, 11), float64], Tensor[(16, 14, 14), bool], Tensor[(3136), bool], Tensor[(2, 13, 5), float32]) {
  %702 = cast(%var_8321, dtype="float64") /* ty=Tensor[(9, 11, 11), float64] */;
  %703 = cast(%var_8327, dtype="bool") /* ty=Tensor[(3136), bool] */;
  %704 = reshape(%703, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %705 = @func_499(%704) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %706 = sigmoid(%702) /* ty=Tensor[(9, 11, 11), float64] */;
  %707 = %705.0;
  %708 = @func_5981() /* ty=Tensor[(2, 13, 5), float32] */;
  (%706, %707, %var_8327, %708)
}

def @func_3788() -> (Tensor[(2, 13, 5), float32],) {
  @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */
}

def @func_4635() -> (Tensor[(2, 13, 5), float64],) {
  %709 = @func_3862() /* ty=Tensor[(2, 13, 5), float64] */;
  (%709,)
}

def @func_7350(%var_7349: Tensor[(234), uint16]) -> (uint8, Tensor[(234), uint16], Tensor[(9, 3, 7), float64], Tensor[(945), uint16], Tensor[(945), uint16], Tensor[(189), float32]) {
  %726 = fn (%var_7331: Tensor[(234), uint16]) -> (uint8, Tensor[(234), uint16], Tensor[(9, 3, 7), float64], Tensor[(945), uint16], Tensor[(945), uint16], Tensor[(189), float32]) {
    %710 = @func_3833() /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), uint8], uint8, Tensor[(1215), uint8]) */;
    %711 = cast(meta[relay.Constant][45] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
    %712 = cast(%var_7331, dtype="uint16") /* ty=Tensor[(234), uint16] */;
    %713 = reshape(%711, newshape=[189]) /* ty=Tensor[(189), int64] */;
    %714 = reshape(%712, newshape=[234]) /* ty=Tensor[(234), uint16] */;
    %715 = @func_1618(%713, %714) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
    %716 = %715.1;
    %717 = cast(%716, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
    %718 = cast(meta[relay.Constant][46] /* ty=Tensor[(945), uint16] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
    %719 = reshape(%718, newshape=[945]) /* ty=Tensor[(945), uint16] */;
    %720 = @func_5714(%719) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16]) */;
    %721 = cast(meta[relay.Constant][45] /* ty=Tensor[(189), int64] */, dtype="float32") /* ty=Tensor[(189), float32] */;
    %722 = %710.3;
    %723 = cos(%717) /* ty=Tensor[(9, 3, 7), float64] */;
    %724 = %720.2;
    %725 = rsqrt(%721) /* ty=Tensor[(189), float32] */;
    (%722, %var_7331, %723, %724, meta[relay.Constant][46] /* ty=Tensor[(945), uint16] */, %725)
  };
  %726(%var_7349) /* ty=(uint8, Tensor[(234), uint16], Tensor[(9, 3, 7), float64], Tensor[(945), uint16], Tensor[(945), uint16], Tensor[(189), float32]) */
}

def @func_3224(%var_3222: Tensor[(189), int64]) -> (Tensor[(13, 3, 13), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(234), uint16], Tensor[(16, 14, 14), float32], Tensor[(640), float32], Tensor[(16, 14, 14), bool]) {
  @func_3221(%var_3222) /* ty=(Tensor[(13, 3, 13), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(234), uint16], Tensor[(16, 14, 14), float32], Tensor[(640), float32], Tensor[(16, 14, 14), bool]) */
}

def @func_4596(%var_4541: Tensor[(189), int64]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) {
  %727 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %728 = cast(%var_4541, dtype="int64") /* ty=Tensor[(189), int64] */;
  %729 = reshape(%728, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %730 = @func_3221(%729) /* ty=(Tensor[(13, 3, 13), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(234), uint16], Tensor[(16, 14, 14), float32], Tensor[(640), float32], Tensor[(16, 14, 14), bool]) */;
  %731 = cast(meta[relay.Constant][47] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %732 = reshape(%731, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), float64] */;
  %733 = @func_4085(%732) /* ty=(Tensor[(9, 16, 14), float64],) */;
  %734 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %735 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %736 = %735.0;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %738 = cast(%var_4541, dtype="int64") /* ty=Tensor[(189), int64] */;
  %739 = reshape(%738, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int64] */;
  %740 = %727.0;
  %741 = %730.1;
  %742 = %733.0;
  %743 = %734.1;
  %744 = asin(%737) /* ty=Tensor[(2, 13, 5), float64] */;
  %745 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %746 = @func_1047(%739) /* ty=Tensor[(9, 3, 7), int64] */;
  (%740, %741, %var_4541, %742, meta[relay.Constant][47] /* ty=Tensor[(2016), float64] */, %743, %744, %745, %746)
}

def @func_904(%var_894: Tensor[(2, 7, 13), float64]) -> (Tensor[(2, 7, 13), float64],) {
  %747 = cast(%var_894, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %748 = acos(%747) /* ty=Tensor[(2, 7, 13), float64] */;
  (%748,)
}

def @func_4956(%var_4954: Tensor[(2, 13, 5), float32], %var_4955: Tensor[(2016, 1), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) {
  %761 = fn (%var_4934: Tensor[(2, 13, 5), float32], %var_4940: Tensor[(2016, 1), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) {
    %749 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
    %750 = @func_4159() /* ty=Tensor[(2, 13, 5), float32] */;
    %751 = cast(%var_4934, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
    %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
    %753 = cast(%750, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %755 = cast(%var_4940, dtype="float64") /* ty=Tensor[(2016, 1), float64] */;
    %756 = reshape(%755, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), float64] */;
    %757 = @func_4085(%756) /* ty=(Tensor[(9, 16, 14), float64],) */;
    %758 = %749.1;
    %759 = not_equal(%753, %754) /* ty=Tensor[(2, 13, 5), bool] */;
    %760 = %757.0;
    (%758, %759, %760, %var_4940)
  };
  %761(%var_4954, %var_4955) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) */
}

def @func_3898(%var_3896: Tensor[(234), uint16]) -> (Tensor[(2, 13, 9), uint16], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) {
  @func_3895(%var_3896) /* ty=(Tensor[(2, 13, 9), uint16], Tensor[(234), uint16], Tensor[(2, 13, 5), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64]) */
}

def @func_5307(%var_5237: Tensor[(4, 14, 1), uint32], %var_5238: Tensor[(4, 14, 15), uint32], %var_5257: Tensor[(7, 165), float64], %var_5261: Tensor[(4, 14, 15), float64], %var_5276: Tensor[(4, 14, 15), int8], %var_5289: Tensor[(1215), uint8], %var_5301: Tensor[(520, 1), float64]) -> (Tensor[(2, 13, 5), float64], Tensor[(88), float64], Tensor[(7, 165), float64], Tensor[(2, 13, 5), float32], Tensor[(4, 14, 15), int64], Tensor[(1215), uint8], Tensor[(1215), uint8], Tensor[(234), uint16], Tensor[(520, 1), float64], uint8, Tensor[(234), uint16]) {
  %762 = cast(meta[relay.Constant][48] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %763 = cast(%var_5257, dtype="float64") /* ty=Tensor[(7, 165), float64] */;
  %764 = reshape(%762, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float64] */;
  %765 = reshape(%763, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %766 = @func_4276(%764, %765) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 4, 11), uint8], Tensor[(2, 13, 5), float64], Tensor[(1, 234), uint16], Tensor[(1155), float64]) */;
  %767 = @func_3786() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %768 = cast(%var_5237, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %769 = cast(%var_5238, dtype="bool") /* ty=Tensor[(4, 14, 15), bool] */;
  %770 = less(%768, %769) /* ty=Tensor[(4, 14, 15), bool] */;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %772 = atan(%771) /* ty=Tensor[(4, 14, 15), float64] */;
  %773 = cast(%var_5261, dtype="int8") /* ty=Tensor[(4, 14, 15), int8] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="int8") /* ty=Tensor[(4, 14, 15), int8] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %777 = bitwise_or(%775, %776) /* ty=Tensor[(4, 14, 15), int8] */;
  %778 = cast(%var_5276, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %782 = bitwise_xor(%780, %781) /* ty=Tensor[(4, 14, 15), int64] */;
  %783 = cast(%var_5238, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %787 = cast(%var_5289, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %788 = reshape(%787, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %789 = @func_3982(%788) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
  %790 = cast(%var_5301, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %791 = cast(meta[relay.Constant][49] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %792 = cast(%var_5289, dtype="uint8") /* ty=Tensor[(1215), uint8] */;
  %793 = cast(meta[relay.Constant][50] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %794 = reshape(%790, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %795 = reshape(%791, newshape=[]) /* ty=uint8 */;
  %796 = reshape(%792, newshape=[81, 15]) /* ty=Tensor[(81, 15), uint8] */;
  %797 = reshape(%793, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %798 = @func_2535(%794, %795, %796, %797) /* ty=(Tensor[(8, 13, 5), float32], Tensor[(9, 9, 15), bool], uint8, Tensor[(81, 15), uint8], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %799 = %766.2;
  %800 = %767.0;
  %801 = add(%785, %786) /* ty=Tensor[(4, 14, 15), int64] */;
  %802 = %789.3;
  %803 = %798.5;
  (%799, meta[relay.Constant][48] /* ty=Tensor[(88), float64] */, %var_5257, %800, %801, %802, %var_5289, %803, %var_5301, meta[relay.Constant][49] /* ty=uint8 */, meta[relay.Constant][50] /* ty=Tensor[(234), uint16] */)
}

def @func_8028() -> Tensor[(2, 13, 5), bool] {
  %804 = @func_6185() /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) */;
  %804.0
}

def @func_5638() -> (Tensor[(2, 13, 5), int64],) {
  %805 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %806 = %805.2;
  (%806,)
}

def @func_3626(%var_3624: Tensor[(182), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) {
  @func_3623(%var_3624) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(182), float64]) */
}

def @func_5874(%var_5873: Tensor[(16, 14, 14), float32]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32]) {
  %822 = fn (%var_5864: Tensor[(16, 14, 14), float32]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32]) {
    %807 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %808 = %807.1;
    %809 = cast(%808, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
    %810 = reshape(%809, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float64] */;
    %811 = @func_5060(%810) /* ty=(Tensor[(2, 13, 5), float64],) */;
    %812 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
    %813 = %812.0;
    %814 = cast(%813, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
    %815 = log(%814) /* ty=Tensor[(16, 14, 14), float32] */;
    %816 = cast(%var_5864, dtype="uint32") /* ty=Tensor[(16, 14, 14), uint32] */;
    %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
    %818 = cast(%815, dtype="uint32") /* ty=Tensor[(16, 14, 14), uint32] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %820 = %811.0;
    %821 = bitwise_and(%818, %819) /* ty=Tensor[(16, 14, 14), uint32] */;
    (%808, %820, %821)
  };
  %822(%var_5873) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32]) */
}

def @func_5663() -> Tensor[(2, 13, 5), float64] {
  @func_3947() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_6221() -> (Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32], Tensor[(3136), float32], Tensor[(2, 13, 5), bool]) {
  %823 = @func_4517() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %824 = cast(meta[relay.Constant][51] /* ty=Tensor[(3136), float32] */, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %825 = reshape(%824, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float32] */;
  %826 = @func_5872(%825) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(16, 14, 14), uint32]) */;
  %827 = @func_6195() /* ty=(Tensor[(2, 13, 5), bool],) */;
  %828 = %823.0;
  %829 = %826.2;
  %830 = %827.0;
  (%828, %829, meta[relay.Constant][51] /* ty=Tensor[(3136), float32] */, %830)
}

def @func_8366() -> Tensor[(2, 13, 5), int64] {
  @func_8364() /* ty=Tensor[(2, 13, 5), int64] */
}

def @func_2276(%var_2260: uint8, %var_2261: Tensor[(9, 9, 15), uint8]) -> (Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) {
  %831 = cast(%var_2260, dtype="uint8") /* ty=uint8 */;
  %832 = cast(%var_2261, dtype="uint8") /* ty=Tensor[(9, 9, 15), uint8] */;
  %833 = cast(%var_2261, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %834 = cast(%var_2260, dtype="bool") /* ty=bool */;
  %835 = right_shift(%831, %832) /* ty=Tensor[(9, 9, 15), uint8] */;
  %836 = less(%833, %834) /* ty=Tensor[(9, 9, 15), bool] */;
  (%835, %836)
}

def @func_3221(%var_3194: Tensor[(189), int64]) -> (Tensor[(13, 3, 13), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(234), uint16], Tensor[(16, 14, 14), float32], Tensor[(640), float32], Tensor[(16, 14, 14), bool]) {
  %837 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 13), float64] */;
  %838 = cast(%var_3194, dtype="int64") /* ty=Tensor[(189), int64] */;
  %839 = cast(meta[relay.Constant][53] /* ty=Tensor[(234), uint16] */, dtype="uint16") /* ty=Tensor[(234), uint16] */;
  %840 = reshape(%838, newshape=[189]) /* ty=Tensor[(189), int64] */;
  %841 = reshape(%839, newshape=[234]) /* ty=Tensor[(234), uint16] */;
  %842 = @func_1618(%840, %841) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */;
  %843 = cast(meta[relay.Constant][54] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %844 = reshape(%843, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float32] */;
  %845 = @func_629(%844) /* ty=(Tensor[(10, 4, 16), float32], Tensor[(1568, 2), int32], Tensor[(16, 14, 14), float32], Tensor[(16, 14, 14), bool], Tensor[(16, 14, 14), bool], Tensor[(2, 13, 9), bool]) */;
  %846 = %845.2;
  %847 = cast(%846, dtype="bool") /* ty=Tensor[(16, 14, 14), bool] */;
  %848 = reshape(%847, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), bool] */;
  %849 = @func_499(%848) /* ty=(Tensor[(16, 14, 14), bool],) */;
  %850 = erf(%837) /* ty=Tensor[(13, 3, 13), float64] */;
  %851 = %842.3;
  %852 = %849.0;
  (%850, %851, %var_3194, meta[relay.Constant][53] /* ty=Tensor[(234), uint16] */, %846, meta[relay.Constant][54] /* ty=Tensor[(640), float32] */, %852)
}

def @func_8030() -> Tensor[(2, 13, 5), bool] {
  @func_8028() /* ty=Tensor[(2, 13, 5), bool] */
}

def @func_3643(%var_3642: Tensor[(4, 4, 1), float64]) -> (Tensor[(4, 4, 1), float64],) {
  %855 = fn (%var_3634: Tensor[(4, 4, 1), float64]) -> (Tensor[(4, 4, 1), float64],) {
    %853 = cast(%var_3634, dtype="float64") /* ty=Tensor[(4, 4, 1), float64] */;
    %854 = acosh(%853) /* ty=Tensor[(4, 4, 1), float64] */;
    (%854,)
  };
  %855(%var_3642) /* ty=(Tensor[(4, 4, 1), float64],) */
}

def @func_4207() -> Tensor[(2, 13, 5), float64] {
  %857 = fn () -> Tensor[(2, 13, 5), float64] {
    %856 = @func_3580() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %856.0
  };
  %857() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_632(%var_630: Tensor[(10, 4, 16), float32]) -> (Tensor[(10, 4, 16), float32], Tensor[(1568, 2), int32], Tensor[(16, 14, 14), float32], Tensor[(16, 14, 14), bool], Tensor[(16, 14, 14), bool], Tensor[(2, 13, 9), bool]) {
  @func_629(%var_630) /* ty=(Tensor[(10, 4, 16), float32], Tensor[(1568, 2), int32], Tensor[(16, 14, 14), float32], Tensor[(16, 14, 14), bool], Tensor[(16, 14, 14), bool], Tensor[(2, 13, 9), bool]) */
}

def @func_1049(%var_1048: Tensor[(9, 3, 7), int64]) -> Tensor[(9, 3, 7), int64] {
  %862 = fn (%var_1036: Tensor[(9, 3, 7), int64]) -> Tensor[(9, 3, 7), int64] {
    %858 = cast(%var_1036, dtype="int64") /* ty=Tensor[(9, 3, 7), int64] */;
    %859 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(9, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %860 = cast(meta[relay.Constant][55] /* ty=Tensor[(9, 3, 7), int64] */, dtype="int64") /* ty=Tensor[(9, 3, 7), int64] */;
    %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    multiply(%860, %861) /* ty=Tensor[(9, 3, 7), int64] */
  };
  %862(%var_1048) /* ty=Tensor[(9, 3, 7), int64] */
}

def @func_7690() -> (Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), float32]) {
  %863 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
  %864 = @func_6365() /* ty=(Tensor[(2, 13, 5), float32],) */;
  %865 = %863.0;
  %866 = %864.0;
  (%865, %866)
}

def @func_4088(%var_4086: Tensor[(9, 16, 14), float64]) -> (Tensor[(9, 16, 14), float64],) {
  @func_4085(%var_4086) /* ty=(Tensor[(9, 16, 14), float64],) */
}

def @func_111(%var_109: Tensor[(2, 13, 9), uint16]) -> Tensor[(2, 13, 9), uint16] {
  @func_108(%var_109) /* ty=Tensor[(2, 13, 9), uint16] */
}

def @func_4481(%var_4479: Tensor[(26, 7), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(26, 7), uint8]) {
  @func_4478(%var_4479) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 7, 13), float64], Tensor[(26, 7), uint8]) */
}

def @func_5335() -> (Tensor[(2, 13, 5), float32],) {
  @func_5333() /* ty=(Tensor[(2, 13, 5), float32],) */
}

def @func_7773() -> (Tensor[(16, 14, 14), int64],) {
  %869 = fn () -> (Tensor[(16, 14, 14), int64],) {
    %867 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
    %868 = %867.0;
    (%868,)
  };
  %869() /* ty=(Tensor[(16, 14, 14), int64],) */
}

def @func_6730() -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float64]) {
  %870 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %872 = log2(%871) /* ty=Tensor[(2, 13, 5), float32] */;
  %873 = @func_5042() /* ty=Tensor[(2, 13, 5), float64] */;
  (%872, %873)
}

def @func_1622(%var_1620: Tensor[(189), int64], %var_1621: Tensor[(234), uint16]) -> (Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) {
  @func_1618(%var_1620, %var_1621) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(9, 3, 7), int64], Tensor[(189), int64], Tensor[(2, 7, 13), float64], Tensor[(182), float64], Tensor[(2, 13, 9), uint16], Tensor[(234), uint16]) */
}

def @func_6310(%var_6281: Tensor[(864), float32]) -> (Tensor[(2, 13, 5), float64], Tensor[(6, 9, 16), bool]) {
  %874 = @func_5782() /* ty=(Tensor[(2, 13, 5), float64],) */;
  %875 = cast(%var_6281, dtype="float32") /* ty=Tensor[(864), float32] */;
  %876 = reshape(%875, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %877 = @func_4041(%876) /* ty=(Tensor[(6, 9, 16), bool],) */;
  %878 = %877.0;
  %879 = cast(%var_6281, dtype="bool") /* ty=Tensor[(864), bool] */;
  %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%878, dtype="bool") /* ty=Tensor[(6, 9, 16), bool] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %883 = %874.0;
  %884 = not_equal(%881, %882) /* ty=Tensor[(6, 9, 16), bool] */;
  (%883, %884)
}

def @func_3947() -> Tensor[(2, 13, 5), float64] {
  @func_3862() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_6810() -> (Tensor[(2, 13, 5), float64],) {
  @func_6808() /* ty=(Tensor[(2, 13, 5), float64],) */
}

def @func_7572(%var_7570: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), float32], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) {
  @func_7569(%var_7570) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(9, 16, 14), float64], Tensor[(2016), float64]) */
}

def @func_6196() -> (Tensor[(2, 13, 5), bool],) {
  %887 = fn () -> (Tensor[(2, 13, 5), bool],) {
    %885 = @func_6185() /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32]) */;
    %886 = %885.0;
    (%886,)
  };
  %887() /* ty=(Tensor[(2, 13, 5), bool],) */
}

def @func_3536() -> (Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) {
  @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */
}

def @func_4454(%var_4398: Tensor[(6, 7, 13), float64], %var_4401: Tensor[(6, 7, 13), float64], %var_4426: uint8) -> (Tensor[(6, 7, 13), int32], Tensor[(9, 9, 15), bool], uint8, Tensor[(405, 3), uint8], Tensor[(6, 9, 16), bool], Tensor[(216, 4), float32], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), bool]) {
  %888 = cast(%var_4398, dtype="float64") /* ty=Tensor[(6, 7, 13), float64] */;
  %889 = cos(%888) /* ty=Tensor[(6, 7, 13), float64] */;
  %890 = cast(%var_4401, dtype="float64") /* ty=Tensor[(6, 7, 13), float64] */;
  %891 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%889, dtype="float64") /* ty=Tensor[(6, 7, 13), float64] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %894 = subtract(%892, %893) /* ty=Tensor[(6, 7, 13), float64] */;
  %895 = cast(%889, dtype="int32") /* ty=Tensor[(6, 7, 13), int32] */;
  %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%894, dtype="int32") /* ty=Tensor[(6, 7, 13), int32] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %899 = cast(%var_4426, dtype="uint8") /* ty=uint8 */;
  %900 = cast(meta[relay.Constant][56] /* ty=Tensor[(405, 3), uint8] */, dtype="uint8") /* ty=Tensor[(405, 3), uint8] */;
  %901 = reshape(%899, newshape=[]) /* ty=uint8 */;
  %902 = reshape(%900, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
  %903 = @func_2276(%901, %902) /* ty=(Tensor[(9, 9, 15), uint8], Tensor[(9, 9, 15), bool]) */;
  %904 = cast(meta[relay.Constant][57] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %905 = reshape(%904, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %906 = @func_4041(%905) /* ty=(Tensor[(6, 9, 16), bool],) */;
  %907 = cast(meta[relay.Constant][56] /* ty=Tensor[(405, 3), uint8] */, dtype="uint8") /* ty=Tensor[(405, 3), uint8] */;
  %908 = reshape(%907, newshape=[1215]) /* ty=Tensor[(1215), uint8] */;
  %909 = @func_3982(%908) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(9, 9, 15), bool], uint8, Tensor[(1215), uint8]) */;
  %910 = right_shift(%897, %898) /* ty=Tensor[(6, 7, 13), int32] */;
  %911 = %903.1;
  %912 = %906.0;
  %913 = @func_3351() /* ty=Tensor[(2, 13, 5), float32] */;
  %914 = %909.1;
  (%910, %911, %var_4426, meta[relay.Constant][56] /* ty=Tensor[(405, 3), uint8] */, %912, meta[relay.Constant][57] /* ty=Tensor[(216, 4), float32] */, %913, %914)
}

def @func_8204() -> Tensor[(2, 13, 5), float32] {
  %915 = fn () -> Tensor[(2, 13, 5), float32] {
    @func_6119() /* ty=Tensor[(2, 13, 5), float32] */
  };
  %915() /* ty=Tensor[(2, 13, 5), float32] */
}

def @func_5665() -> Tensor[(2, 13, 5), float64] {
  @func_5663() /* ty=Tensor[(2, 13, 5), float64] */
}

def @func_6635(%var_6634: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int8], Tensor[(2016), float64], Tensor[(2, 13, 5), float64], Tensor[(189), int64]) {
  %928 = fn (%var_6595: Tensor[(2016), float64]) -> (Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int8], Tensor[(2016), float64], Tensor[(2, 13, 5), float64], Tensor[(189), int64]) {
    %916 = @func_3534() /* ty=(Tensor[(16, 14, 14), int64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int64]) */;
    %917 = %916.1;
    %918 = cast(%917, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %919 = cast(%var_6595, dtype="float64") /* ty=Tensor[(2016), float64] */;
    %920 = reshape(%918, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %921 = reshape(%919, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float64] */;
    %922 = @func_4953(%920, %921) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), bool], Tensor[(9, 16, 14), float64], Tensor[(2016, 1), float64]) */;
    %923 = cast(meta[relay.Constant][58] /* ty=Tensor[(189), int64] */, dtype="int64") /* ty=Tensor[(189), int64] */;
    %924 = reshape(%923, newshape=[189]) /* ty=Tensor[(189), int64] */;
    %925 = @func_4596(%924) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 7, 13), float64], Tensor[(189), int64], Tensor[(9, 16, 14), float64], Tensor[(2016), float64], Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float32], Tensor[(9, 3, 7), int64]) */;
    %926 = %922.0;
    %927 = %925.0;
    (%917, %926, %var_6595, %927, meta[relay.Constant][58] /* ty=Tensor[(189), int64] */)
  };
  %928(%var_6634) /* ty=(Tensor[(2, 13, 5), int8], Tensor[(2, 13, 5), int8], Tensor[(2016), float64], Tensor[(2, 13, 5), float64], Tensor[(189), int64]) */
}

def @func_8061(%var_8059: Tensor[(13, 6, 1), bool]) -> Tensor[(13, 6, 14), bool] {
  @func_8058(%var_8059) /* ty=Tensor[(13, 6, 14), bool] */
}

def @func_8489(%var_8488: Tensor[(1215, 1), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(9, 9, 15), float32], Tensor[(15, 63), uint16], Tensor[(1215, 1), uint8]) {
  %945 = fn (%var_8482: Tensor[(1215, 1), uint8]) -> (Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(9, 9, 15), float32], Tensor[(15, 63), uint16], Tensor[(1215, 1), uint8]) {
    %929 = @func_4825() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %930 = @func_4825() /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64]) */;
    %931 = cast(meta[relay.Constant][59] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %932 = cast(meta[relay.Constant][59] /* ty=Tensor[(90), float32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %933 = reshape(%931, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
    %934 = reshape(%932, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
    %935 = @func_5211(%933, %934) /* ty=(Tensor[(5, 3, 6), int64], Tensor[(4, 4, 1), float64], Tensor[(16), float64]) */;
    %936 = cast(meta[relay.Constant][60] /* ty=Tensor[(15, 63), uint16] */, dtype="uint16") /* ty=Tensor[(15, 63), uint16] */;
    %937 = cast(%var_8482, dtype="uint8") /* ty=Tensor[(1215, 1), uint8] */;
    %938 = reshape(%936, newshape=[945]) /* ty=Tensor[(945), uint16] */;
    %939 = reshape(%937, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), uint8] */;
    %940 = @func_6071(%938, %939) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(7, 9, 15), uint16], Tensor[(945), uint16], Tensor[(9, 9, 15), bool], Tensor[(2, 13, 5), float32], Tensor[(9, 9, 15), float32], Tensor[(2, 13, 5), int64]) */;
    %941 = %929.0;
    %942 = %930.0;
    %943 = %935.1;
    %944 = %940.5;
    (%941, %942, %943, meta[relay.Constant][59] /* ty=Tensor[(90), float32] */, %944, meta[relay.Constant][60] /* ty=Tensor[(15, 63), uint16] */, %var_8482)
  };
  %945(%var_8488) /* ty=(Tensor[(2, 13, 5), float64], Tensor[(2, 13, 5), float64], Tensor[(4, 4, 1), float64], Tensor[(90), float32], Tensor[(9, 9, 15), float32], Tensor[(15, 63), uint16], Tensor[(1215, 1), uint8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen287/build/output.py", line 2271, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:03:50] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

