==========mod==========
#[version = "0.0.5"]
def @func_2104(%var_2085: Tensor[(720), int32]) -> (Tensor[(16, 4, 13), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(12, 4, 15), int32], Tensor[(720), int32], Tensor[(?, 1521), float64]) {
  %0 = cast(-8.72897f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %3 = reshape(%2, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %4 = cast(-8.72897f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %5 = cast(%var_2085, dtype="int32") /* ty=Tensor[(720), int32] */;
  %6 = reshape(%4, newshape=[]) /* ty=int32 */;
  %7 = reshape(%5, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), int32] */;
  %8 = floor_mod(%0, %1) /* ty=Tensor[(16, 4, 13), float64] */;
  %9 = @func_690(%3) /* ty=Tensor[(3, 14, 10), float64] */;
  %10 = @func_1376(%6, %7) /* ty=Tensor[(12, 4, 15), int32] */;
  %11 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  (%8, %9, meta[relay.Constant][1] /* ty=Tensor[(420), float64] */, %10, %var_2085, %11)
}

def @func_1641() -> Tensor[(?, 1521), float64] {
  %12 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
  %12.2
}

def @func_3841(%var_3811: Tensor[(14, 15, 6), uint8], %var_3820: Tensor[(1650), uint64]) -> (Tensor[(14, 15, 6), bool], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) {
  %13 = cast(%var_3811, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %14 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(14, 15, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 15, 6), uint8] */, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %17 = cast(%var_3820, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
  %18 = cast(%var_3820, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
  %19 = reshape(%17, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
  %20 = reshape(%18, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
  %21 = @func_396(%19, %20) /* ty=(Tensor[(10, 15, 11), uint64],) */;
  %22 = equal(%15, %16) /* ty=Tensor[(14, 15, 6), bool] */;
  %23 = %21.0;
  (%22, %23, %var_3820)
}

def @func_3745(%var_3729: Tensor[(1521), float64]) -> (Tensor[(16, 2, ?), float32], Tensor[(1650), float32], Tensor[(420), float64], Tensor[(64), float64], Tensor[(1521), float64]) {
  %24 = @func_3623() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) */;
  %25 = %24.0;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(16, 2, ?), float32] */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %28 = cast(%var_3729, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %29 = reshape(%26, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
  %30 = reshape(%27, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float64] */;
  %31 = reshape(%28, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float64] */;
  %32 = @func_1739(%29, %30, %31) /* ty=(Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
  %33 = @func_2538() /* ty=Tensor[(1650), float32] */;
  %34 = %32.4;
  (%25, %33, %34, meta[relay.Constant][3] /* ty=Tensor[(64), float64] */, %var_3729)
}

def @func_3030(%var_3002: Tensor[(3, 16, 1), float64], %var_3021: Tensor[(1008), float64], %var_3023: Tensor[(3360), float32]) -> (Tensor[(3, 16, ?), bool], Tensor[(3, 16, ?), bool], Tensor[(195), int16], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32]) {
  %35 = cast(%var_3002, dtype="float64") /* ty=Tensor[(3, 16, 1), float64] */;
  %36 = rsqrt(%35) /* ty=Tensor[(3, 16, 1), float64] */;
  %37 = cast(%var_3002, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %41 = cast(%var_3002, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
  %42 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%36, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%var_3021, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %46 = cast(%var_3021, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %47 = cast(meta[relay.Constant][4] /* ty=Tensor[(1755), int16] */, dtype="int16") /* ty=Tensor[(1755), int16] */;
  %48 = cast(%var_3023, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %49 = reshape(%45, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
  %50 = reshape(%46, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
  %51 = reshape(%47, newshape=[1755]) /* ty=Tensor[(1755), int16] */;
  %52 = reshape(%48, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %53 = @func_1444(%49, %50, %51, %52) /* ty=(Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) */;
  %54 = logical_or(%39, %40) /* ty=Tensor[(3, 16, ?), bool] */;
  %55 = less(%43, %44) /* ty=Tensor[(3, 16, ?), bool] */;
  %56 = %53.4;
  (%54, %55, %56, %var_3021, meta[relay.Constant][4] /* ty=Tensor[(1755), int16] */, %var_3023)
}

def @func_2428(%var_2425: Tensor[(1521), float64]) -> (Tensor[(16, 2, 1), float32], Tensor[(?, 1521), int16], Tensor[(64), float64], Tensor[(1521), float64]) {
  %57 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %59 = log2(%58) /* ty=Tensor[(16, 2, 1), float32] */;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %62 = cast(%var_2425, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %63 = reshape(%60, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
  %64 = reshape(%61, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float64] */;
  %65 = reshape(%62, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float64] */;
  %66 = @func_1739(%63, %64, %65) /* ty=(Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
  %67 = %66.1;
  (%59, %67, meta[relay.Constant][5] /* ty=Tensor[(64), float64] */, %var_2425)
}

def @func_4614(%var_4595: Tensor[(768), uint8]) -> (Tensor[(16, 2, 1), float32], Tensor[(13, 1521), float64], Tensor[(4, 16), float64], Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(13, 9, 13), float64], Tensor[(1, 1521), uint32], Tensor[(10, 13, 7), float32]) {
  %68 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %70 = reshape(%69, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %71 = @func_3574(%70) /* ty=(Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) */;
  %72 = cast(%var_4595, dtype="uint8") /* ty=Tensor[(768), uint8] */;
  %73 = %68.0;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %75 = reshape(%72, newshape=[192, 4]) /* ty=Tensor[(192, 4), uint8] */;
  %76 = reshape(%74, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
  %77 = @func_2711(%75, %76) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) */;
  %78 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %81 = reshape(%78, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %82 = reshape(%79, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %83 = reshape(%80, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %84 = @func_1552(%81, %82, %83) /* ty=(Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) */;
  %85 = @func_4062() /* ty=(Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) */;
  %86 = %71.1;
  %87 = %77.0;
  %88 = %84.1;
  %89 = %85.2;
  (%73, %86, meta[relay.Constant][6] /* ty=Tensor[(4, 16), float64] */, %87, %var_4595, %88, meta[relay.Constant][7] /* ty=Tensor[(1, 1521), uint32] */, %89)
}

def @func_4327() -> (Tensor[(1, 11, 11), float32], Tensor[(16, 2, 121), uint64], Tensor[(16, 2, 1), float32]) {
  %90 = cast(meta[relay.Constant][8] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %91 = reshape(%90, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
  %92 = @func_1525(%91) /* ty=(Tensor[(1, 11, 11), float32],) */;
  %93 = @func_2003() /* ty=Tensor[(16, 2, 1), float32] */;
  %94 = cast(%93, dtype="uint64") /* ty=Tensor[(16, 2, 1), uint64] */;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(121), float32] */, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %96 = @func_4279() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %97 = %92.0;
  %98 = bitwise_and(%94, %95) /* ty=Tensor[(16, 2, 121), uint64] */;
  %99 = %96.0;
  (%97, %98, %99)
}

def @func_1956() -> Tensor[(16, 2, 1), float32] {
  %100 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %100.1
}

def @func_2525(%var_2485: Tensor[(16, 2, 6), int32]) -> (Tensor[(16, 2, 6), float64], Tensor[(16, 2, 6), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) {
  %101 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
  %102 = %101.0;
  %103 = cast(%102, dtype="bool") /* ty=Tensor[(16, 2, ?), bool] */;
  %104 = cast(%var_2485, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
  %105 = not_equal(%103, %104) /* ty=Tensor[(16, 2, 6), bool] */;
  %106 = cast(%105, dtype="int64") /* ty=Tensor[(16, 2, 6), int64] */;
  %107 = shape_of(%var_2485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%var_2485, dtype="int64") /* ty=Tensor[(16, 2, 6), int64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %110 = maximum(%108, %109) /* ty=Tensor[(16, 2, 6), int64] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  %112 = sigmoid(%111) /* ty=Tensor[(16, 2, 6), float32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
  %114 = cast(%112, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  %115 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %116 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %117 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %118 = log2(%113) /* ty=Tensor[(16, 2, 6), float64] */;
  %119 = acos(%114) /* ty=Tensor[(16, 2, 6), float32] */;
  %120 = %115.0;
  %121 = %116.1;
  %122 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
  %123 = %117.0;
  (%118, %119, %120, %121, %122, %123)
}

def @func_3526() -> (Tensor[(13, 9, 15), int16], Tensor[(3, 3), float32], Tensor[(288), float32], Tensor[(16, 2, 195), int32]) {
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 3), float32] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(195), int16] */, dtype="int16") /* ty=Tensor[(195), int16] */;
  %127 = reshape(%124, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), float32] */;
  %128 = reshape(%125, newshape=[2, 9, 16]) /* ty=Tensor[(2, 9, 16), float32] */;
  %129 = reshape(%126, newshape=[195]) /* ty=Tensor[(195), int16] */;
  %130 = @func_1203(%127, %128, %129) /* ty=(Tensor[(2, 9, 16), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(1755), float64]) */;
  %131 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
  %132 = cast(meta[relay.Constant][11] /* ty=Tensor[(195), int16] */, dtype="bool") /* ty=Tensor[(195), bool] */;
  %133 = cast(%131, dtype="bool") /* ty=Tensor[(16, 2, 1), bool] */;
  %134 = logical_or(%132, %133) /* ty=Tensor[(16, 2, 195), bool] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(16, 2, 195), float32] */;
  %136 = sin(%135) /* ty=Tensor[(16, 2, 195), float32] */;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(16, 2, 195), float32] */;
  %138 = atan(%137) /* ty=Tensor[(16, 2, 195), float32] */;
  %139 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 2, 195), float32] */, dtype="int32") /* ty=Tensor[(16, 2, 195), int32] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="int32") /* ty=Tensor[(16, 2, 195), int32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %143 = %130.1;
  %144 = maximum(%141, %142) /* ty=Tensor[(16, 2, 195), int32] */;
  (%143, meta[relay.Constant][9] /* ty=Tensor[(3, 3), float32] */, meta[relay.Constant][10] /* ty=Tensor[(288), float32] */, %144)
}

def @func_4249(%var_4215: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(15, 6, 16), bool], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), bool]) {
  %145 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %147 = cast(%var_4215, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(16, 2, 1), bool] */;
  %149 = cast(%var_4215, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %150 = cast(%var_4215, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %151 = sqrt(%150) /* ty=Tensor[(16, 2, 14), float32] */;
  %152 = cast(%151, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %153 = cast(%145, dtype="bool") /* ty=Tensor[(16, 2, 1), bool] */;
  %154 = power(%146, %147) /* ty=Tensor[(16, 2, 14), float32] */;
  %155 = @func_3802() /* ty=Tensor[(15, 6, 16), bool] */;
  %156 = greater(%148, %149) /* ty=Tensor[(16, 2, 14), bool] */;
  %157 = greater_equal(%152, %153) /* ty=Tensor[(16, 2, 14), bool] */;
  (%154, %155, %156, %157)
}

def @func_4014(%var_3952: Tensor[(16, 2, 16), int32], %var_3969: Tensor[(840), bool]) -> (Tensor[(16, 2, 16), float64], Tensor[(?, 1521), float64], Tensor[(10, 15, 11), uint64], Tensor[(16, 2, 840), int64], Tensor[(15, 16, 14), float32]) {
  %158 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(16, 2, ?), float64] */;
  %161 = cast(%var_3952, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %162 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
  %163 = cast(%var_3969, dtype="bool") /* ty=Tensor[(840), bool] */;
  %164 = cast(%var_3969, dtype="bool") /* ty=Tensor[(840), bool] */;
  %165 = reshape(%163, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
  %166 = reshape(%164, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
  %167 = @func_422(%165, %166) /* ty=(Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) */;
  %168 = cast(%var_3969, dtype="float32") /* ty=Tensor[(840), float32] */;
  %169 = cast(%159, dtype="float32") /* ty=Tensor[(16, 2, ?), float32] */;
  %170 = maximum(%168, %169) /* ty=Tensor[(16, 2, 840), float32] */;
  %171 = cast(%var_3969, dtype="int64") /* ty=Tensor[(840), int64] */;
  %172 = cast(%170, dtype="int64") /* ty=Tensor[(16, 2, 840), int64] */;
  %173 = @func_2763() /* ty=(Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
  %174 = mod(%160, %161) /* ty=Tensor[(16, 2, 16), float64] */;
  %175 = %162.2;
  %176 = %167.1;
  %177 = left_shift(%171, %172) /* ty=Tensor[(16, 2, 840), int64] */;
  %178 = %173.1;
  (%174, %175, %176, %177, %178)
}

def @func_4087(%var_4075: Tensor[(1650), int16]) -> (Tensor[(1650), uint32], Tensor[(1650), float32]) {
  %179 = @func_1486() /* ty=Tensor[(1650), int16] */;
  %180 = cast(%var_4075, dtype="uint32") /* ty=Tensor[(1650), uint32] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(1), int32] */;
  %182 = cast(%179, dtype="uint32") /* ty=Tensor[(1650), uint32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %184 = cast(%var_4075, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %185 = left_shift(%182, %183) /* ty=Tensor[(1650), uint32] */;
  %186 = sqrt(%184) /* ty=Tensor[(1650), float32] */;
  (%185, %186)
}

def @func_840(%var_820: Tensor[(13, 1, 15), int16], %var_821: Tensor[(13, 9, 15), int16]) -> (Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) {
  %187 = cast(%var_820, dtype="int16") /* ty=Tensor[(13, 1, 15), int16] */;
  %188 = cast(%var_821, dtype="int16") /* ty=Tensor[(13, 9, 15), int16] */;
  %189 = cast(%var_820, dtype="float64") /* ty=Tensor[(13, 1, 15), float64] */;
  %190 = subtract(%187, %188) /* ty=Tensor[(13, 9, 15), int16] */;
  %191 = asinh(%189) /* ty=Tensor[(13, 1, 15), float64] */;
  (%190, %191)
}

def @func_4062() -> (Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) {
  %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %193 = reshape(%192, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
  %194 = @func_1525(%193) /* ty=(Tensor[(1, 11, 11), float32],) */;
  %195 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %196 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %197 = divide(%195, %196) /* ty=Tensor[(10, 13, 7), float64] */;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
  %199 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 13, 1), float64] */, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
  %200 = %194.0;
  %201 = mod(%198, %199) /* ty=Tensor[(10, 13, 7), float32] */;
  (%200, meta[relay.Constant][13] /* ty=Tensor[(121), float32] */, %201)
}

def @func_293(%var_279: Tensor[(4, 2, 2), float32], %var_285: Tensor[(2, 1680), float32]) -> (Tensor[(4, 2, 2), float32], Tensor[(15, 16, 14), float32], Tensor[(2, 1680), float32]) {
  %202 = cast(%var_279, dtype="float32") /* ty=Tensor[(4, 2, 2), float32] */;
  %203 = cast(%var_285, dtype="float32") /* ty=Tensor[(2, 1680), float32] */;
  %204 = reshape(%203, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
  %205 = @func_187(%204) /* ty=(Tensor[(15, 16, 14), float32],) */;
  %206 = sin(%202) /* ty=Tensor[(4, 2, 2), float32] */;
  %207 = %205.0;
  (%206, %207, %var_285)
}

def @func_2952() -> (Tensor[(16, 2, 1), float32],) {
  %208 = @func_2003() /* ty=Tensor[(16, 2, 1), float32] */;
  (%208,)
}

def @func_1991(%var_1985: Tensor[(6, 15, 14), int32]) -> (Tensor[(6, 15, 14), int32],) {
  %209 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 15, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 15, 14), int32] */;
  %210 = shape_of(%var_1985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_1985, dtype="int32") /* ty=Tensor[(6, 15, 14), int32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %213 = add(%211, %212) /* ty=Tensor[(6, 15, 14), int32] */;
  (%213,)
}

def @func_1344() -> (Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) {
  %214 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  %216 = sin(%215) /* ty=Tensor[(16, 2, 1), float64] */;
  %217 = cast(%214, dtype="int32") /* ty=Tensor[(16, 2, 1), int32] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="int32") /* ty=Tensor[(16, 2, 1), int32] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %221 = cast(meta[relay.Constant][17] /* ty=Tensor[(840, 1), bool] */, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %222 = cast(meta[relay.Constant][17] /* ty=Tensor[(840, 1), bool] */, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %223 = reshape(%221, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
  %224 = reshape(%222, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
  %225 = @func_422(%223, %224) /* ty=(Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) */;
  %226 = subtract(%219, %220) /* ty=Tensor[(16, 2, ?), int32] */;
  %227 = %225.2;
  %228 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  (%226, %227, meta[relay.Constant][17] /* ty=Tensor[(840, 1), bool] */, %228)
}

def @func_2318() -> Tensor[(?, 1521), float64] {
  %229 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
  %229.2
}

def @func_4193() -> (Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) {
  %230 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  %231 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
  %232 = @func_1956() /* ty=Tensor[(16, 2, 1), float32] */;
  (%230, %231, %232)
}

def @func_3767(%var_3751: Tensor[(4, 192), uint8], %var_3756: Tensor[(4, 192), uint8], %var_3764: Tensor[(1, 420), float64]) -> (Tensor[(4, 192), int16], Tensor[(4, 192), bool], Tensor[(3, 14, 10), float64], Tensor[(1, 420), float64]) {
  %233 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
  %234 = %233.1;
  %235 = cast(%var_3751, dtype="int16") /* ty=Tensor[(4, 192), int16] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(2), int32] */;
  %237 = cast(%234, dtype="int16") /* ty=Tensor[(4, 192), int16] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %239 = cast(%var_3756, dtype="bool") /* ty=Tensor[(4, 192), bool] */;
  %240 = shape_of(%var_3751, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(%var_3751, dtype="bool") /* ty=Tensor[(4, 192), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %243 = cast(%var_3764, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %244 = reshape(%243, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %245 = logical_xor(%237, %238) /* ty=Tensor[(4, 192), int16] */;
  %246 = greater(%241, %242) /* ty=Tensor[(4, 192), bool] */;
  %247 = @func_690(%244) /* ty=Tensor[(3, 14, 10), float64] */;
  (%245, %246, %247, %var_3764)
}

def @func_1525(%var_1509: Tensor[(1, 11, 11), float32]) -> (Tensor[(1, 11, 11), float32],) {
  %248 = cast(%var_1509, dtype="float32") /* ty=Tensor[(1, 11, 11), float32] */;
  %249 = exp(%248) /* ty=Tensor[(1, 11, 11), float32] */;
  (%249,)
}

def @func_4507() -> (Tensor[(1650), float32],) {
  %250 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
  %251 = %250.3;
  (%251,)
}

def @func_1552(%var_1534: Tensor[(13, 9, 13), uint32], %var_1535: Tensor[(13, 9, 13), uint32], %var_1544: Tensor[(13, 9, 13), uint32]) -> (Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) {
  %252 = cast(%var_1535, dtype="uint32") /* ty=Tensor[(13, 9, 13), uint32] */;
  %253 = shape_of(%var_1534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_1534, dtype="uint32") /* ty=Tensor[(13, 9, 13), uint32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %256 = cast(%var_1544, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %257 = shape_of(%var_1534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%var_1534, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %260 = bitwise_xor(%254, %255) /* ty=Tensor[(13, 9, 13), uint32] */;
  %261 = mod(%258, %259) /* ty=Tensor[(13, 9, 13), float64] */;
  (%260, %261)
}

def @func_3623() -> (Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) {
  %262 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
  %263 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %264 = %263.1;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %266 = atan(%265) /* ty=Tensor[(16, 2, 1), float32] */;
  %267 = cast(%266, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
  %268 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%264, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %271 = @func_2814() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) */;
  %272 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %273 = %262.0;
  %274 = logical_xor(%269, %270) /* ty=Tensor[(16, 2, ?), uint8] */;
  %275 = %271.3;
  %276 = %272.0;
  (%273, %274, %275, %276)
}

def @func_4279() -> (Tensor[(16, 2, 1), float32],) {
  %277 = @func_2952() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %278 = %277.0;
  (%278,)
}

def @func_1266() -> (Tensor[(16, 2, 1), float32],) {
  %279 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  (%279,)
}

def @func_3115(%var_3110: Tensor[(840, 16), bool]) -> (Tensor[(16, 2, ?), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(840, 16), bool]) {
  %280 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
  %281 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %282 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %283 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
  %284 = %283.2;
  %285 = cast(%284, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %286 = cast(%var_3110, dtype="bool") /* ty=Tensor[(840, 16), bool] */;
  %287 = %280.0;
  %288 = %281.0;
  %289 = %282.0;
  %290 = greater_equal(%285, %286) /* ty=Tensor[(840, 16), bool] */;
  (%287, %288, %289, %290)
}

def @func_2763() -> (Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) {
  %291 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %292 = cast(meta[relay.Constant][18] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %293 = reshape(%292, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
  %294 = @func_187(%293) /* ty=(Tensor[(15, 16, 14), float32],) */;
  %295 = %291.0;
  %296 = %294.0;
  (%295, %296, meta[relay.Constant][18] /* ty=Tensor[(3360), float32] */)
}

def @func_2029() -> Tensor[(16, 2, 1), float32] {
  %297 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %297.1
}

def @func_1203(%var_1188: Tensor[(1, 9, 1), float32], %var_1189: Tensor[(2, 9, 16), float32], %var_1194: Tensor[(195), int16]) -> (Tensor[(2, 9, 16), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(1755), float64]) {
  %298 = cast(%var_1188, dtype="float32") /* ty=Tensor[(1, 9, 1), float32] */;
  %299 = cast(%var_1189, dtype="float32") /* ty=Tensor[(2, 9, 16), float32] */;
  %300 = cast(%var_1194, dtype="int16") /* ty=Tensor[(195), int16] */;
  %301 = cast(meta[relay.Constant][19] /* ty=Tensor[(1755), int16] */, dtype="int16") /* ty=Tensor[(1755), int16] */;
  %302 = reshape(%300, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int16] */;
  %303 = reshape(%301, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int16] */;
  %304 = @func_840(%302, %303) /* ty=(Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) */;
  %305 = cast(meta[relay.Constant][20] /* ty=Tensor[(1755), int16] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %306 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(1755), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %307 = cast(meta[relay.Constant][19] /* ty=Tensor[(1755), int16] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?), float64] */;
  %309 = floor_mod(%298, %299) /* ty=Tensor[(2, 9, 16), float32] */;
  %310 = %304.0;
  %311 = mod(%307, %308) /* ty=Tensor[(1755), float64] */;
  (%309, %310, %var_1194, %311)
}

def @func_690(%var_685: Tensor[(3, 14, 10), float64]) -> Tensor[(3, 14, 10), float64] {
  %312 = cast(%var_685, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  %313 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(3, 14, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%314, %315) /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_1606() -> (Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) {
  %316 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
  %317 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %318 = %316.0;
  %319 = %317.0;
  (%318, %319)
}

def @func_1675(%var_1643: Tensor[(8, 16, 6), uint8], %var_1664: Tensor[(420), float64]) -> (Tensor[(8, 16, 6), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) {
  %320 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 16, 6), uint8] */, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
  %321 = shape_of(%var_1643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_1643, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %324 = cast(%var_1664, dtype="float64") /* ty=Tensor[(420), float64] */;
  %325 = reshape(%324, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %326 = multiply(%322, %323) /* ty=Tensor[(8, 16, 6), uint8] */;
  %327 = @func_690(%325) /* ty=Tensor[(3, 14, 10), float64] */;
  (%326, %327, %var_1664)
}

def @func_3919() -> (Tensor[(16, 2, 1), float32],) {
  %328 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
  (%328,)
}

def @func_2847() -> (Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) {
  %329 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 192), uint8] */, dtype="uint8") /* ty=Tensor[(4, 192), uint8] */;
  %330 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
  %331 = reshape(%329, newshape=[192, 4]) /* ty=Tensor[(192, 4), uint8] */;
  %332 = reshape(%330, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
  %333 = @func_2711(%331, %332) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) */;
  %334 = @func_1486() /* ty=Tensor[(1650), int16] */;
  %335 = cast(meta[relay.Constant][25] /* ty=Tensor[(1650), int16] */, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(1), int32] */;
  %337 = cast(%334, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?), float32] */;
  %339 = @func_2763() /* ty=(Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
  %340 = %333.4;
  %341 = floor_divide(%337, %338) /* ty=Tensor[(1650), float32] */;
  %342 = %339.2;
  (%340, meta[relay.Constant][23] /* ty=Tensor[(4, 192), uint8] */, meta[relay.Constant][24] /* ty=Tensor[(2, 16), float32] */, %341, %342)
}

def @func_2814() -> (Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) {
  %343 = @func_1956() /* ty=Tensor[(16, 2, 1), float32] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  %345 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %346 = cast(meta[relay.Constant][27] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %347 = reshape(%346, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %348 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %349 = floor_mod(%344, %345) /* ty=Tensor[(16, 2, 14), float64] */;
  %350 = @func_690(%347) /* ty=Tensor[(3, 14, 10), float64] */;
  %351 = log2(%348) /* ty=Tensor[(16, 2, 14), float32] */;
  (%349, %350, meta[relay.Constant][27] /* ty=Tensor[(420), float64] */, %351)
}

def @func_1833() -> (Tensor[(?, 1521), float64],) {
  %352 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  (%352,)
}

def @func_1444(%var_1407: Tensor[(6, 14, 12), float64], %var_1408: Tensor[(6, 14, 12), float64], %var_1421: Tensor[(1755), int16], %var_1434: Tensor[(3360), float32]) -> (Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) {
  %353 = cast(%var_1408, dtype="float64") /* ty=Tensor[(6, 14, 12), float64] */;
  %354 = shape_of(%var_1407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%var_1407, dtype="float64") /* ty=Tensor[(6, 14, 12), float64] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %357 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 728), float32] */, dtype="float32") /* ty=Tensor[(2, 728), float32] */;
  %358 = reshape(%357, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), float32] */;
  %359 = cast(meta[relay.Constant][29] /* ty=Tensor[(195), int16] */, dtype="int16") /* ty=Tensor[(195), int16] */;
  %360 = cast(%var_1421, dtype="int16") /* ty=Tensor[(1755), int16] */;
  %361 = reshape(%359, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int16] */;
  %362 = reshape(%360, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int16] */;
  %363 = @func_840(%361, %362) /* ty=(Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) */;
  %364 = cast(meta[relay.Constant][30] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %365 = reshape(%364, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %366 = cast(%var_1434, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %367 = reshape(%366, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
  %368 = @func_187(%367) /* ty=(Tensor[(15, 16, 14), float32],) */;
  %369 = cast(%var_1421, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %370 = floor_mod(%355, %356) /* ty=Tensor[(6, 14, 12), float64] */;
  %371 = @func_889(%358) /* ty=Tensor[(8, 14, 13), float32] */;
  %372 = %363.0;
  %373 = @func_690(%365) /* ty=Tensor[(3, 14, 10), float64] */;
  %374 = %368.0;
  %375 = cosh(%369) /* ty=Tensor[(1755), float64] */;
  (%370, %371, meta[relay.Constant][28] /* ty=Tensor[(2, 728), float32] */, %372, meta[relay.Constant][29] /* ty=Tensor[(195), int16] */, %373, meta[relay.Constant][30] /* ty=Tensor[(420), float64] */, %374, %var_1434, %375)
}

def @func_2300(%var_2269: Tensor[(12, 14, 4), uint8], %var_2270: Tensor[(12, 14, 4), uint8]) -> (Tensor[(12, 14, 4), uint8],) {
  %376 = cast(%var_2270, dtype="uint8") /* ty=Tensor[(12, 14, 4), uint8] */;
  %377 = shape_of(%var_2269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%var_2269, dtype="uint8") /* ty=Tensor[(12, 14, 4), uint8] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %380 = right_shift(%378, %379) /* ty=Tensor[(12, 14, 4), uint8] */;
  (%380,)
}

def @func_1486() -> Tensor[(1650), int16] {
  %381 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
  %382 = %381.1;
  %383 = cast(meta[relay.Constant][31] /* ty=Tensor[(1650), uint64] */, dtype="int16") /* ty=Tensor[(1650), int16] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(1), int32] */;
  %385 = cast(%382, dtype="int16") /* ty=Tensor[(1650), int16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?), int16] */;
  minimum(%385, %386) /* ty=Tensor[(1650), int16] */
}

def @func_4041() -> (Tensor[(?, 1521), float64],) {
  %387 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  (%387,)
}

def @func_3574(%var_3570: Tensor[(4, 16), float64]) -> (Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) {
  %388 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
  %389 = %388.2;
  %390 = cast(%389, dtype="int8") /* ty=Tensor[(?, 1521), int8] */;
  %391 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 1521), float64] */, dtype="int8") /* ty=Tensor[(13, 1521), int8] */;
  %392 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 1521), float64] */, dtype="float64") /* ty=Tensor[(13, 1521), float64] */;
  %393 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %394 = %393.1;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %396 = cast(%389, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
  %397 = cast(meta[relay.Constant][33] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %398 = reshape(%397, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
  %399 = @func_1525(%398) /* ty=(Tensor[(1, 11, 11), float32],) */;
  %400 = cast(%394, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %401 = cast(%var_3570, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %402 = cast(%389, dtype="float64") /* ty=Tensor[(?, 1521), float64] */;
  %403 = reshape(%400, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
  %404 = reshape(%401, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float64] */;
  %405 = reshape(%402, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float64] */;
  %406 = @func_1739(%403, %404, %405) /* ty=(Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
  %407 = left_shift(%390, %391) /* ty=Tensor[(13, 1521), int8] */;
  %408 = exp(%392) /* ty=Tensor[(13, 1521), float64] */;
  %409 = power(%395, %396) /* ty=Tensor[(16, 2, 1521), float32] */;
  %410 = %399.0;
  %411 = %406.2;
  (%407, %408, %409, %410, meta[relay.Constant][33] /* ty=Tensor[(121), float32] */, %411, %var_3570)
}

def @func_889(%var_884: Tensor[(8, 14, 13), float32]) -> Tensor[(8, 14, 13), float32] {
  %412 = cast(%var_884, dtype="float32") /* ty=Tensor[(8, 14, 13), float32] */;
  cos(%412) /* ty=Tensor[(8, 14, 13), float32] */
}

def @func_2711(%var_2655: Tensor[(192, 4), uint8], %var_2688: Tensor[(16, 2, 1), float32]) -> (Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) {
  %413 = @func_1956() /* ty=Tensor[(16, 2, 1), float32] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %415 = sqrt(%414) /* ty=Tensor[(16, 2, 1), float32] */;
  %416 = cast(%var_2655, dtype="uint8") /* ty=Tensor[(192, 4), uint8] */;
  %417 = cast(meta[relay.Constant][34] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %418 = reshape(%416, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), uint8] */;
  %419 = reshape(%417, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %420 = @func_1675(%418, %419) /* ty=(Tensor[(8, 16, 6), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
  %421 = %420.2;
  %422 = cast(%415, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
  %423 = cast(%421, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %424 = cast(%var_2688, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %425 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%415, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %428 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
  %429 = bitwise_xor(%422, %423) /* ty=Tensor[(16, 2, 420), uint8] */;
  %430 = floor_divide(%426, %427) /* ty=Tensor[(16, 2, ?), float32] */;
  (%428, %var_2655, meta[relay.Constant][34] /* ty=Tensor[(420), float64] */, %429, %430)
}

def @func_4146(%var_4120: Tensor[(768), uint8], %var_4138: Tensor[(1, 11, 11), float32]) -> (Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(16, 2, 420), uint16], Tensor[(?, 11, 11), bool]) {
  %431 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %432 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %433 = %432.0;
  %434 = cast(%var_4120, dtype="uint8") /* ty=Tensor[(768), uint8] */;
  %435 = %431.0;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %437 = reshape(%434, newshape=[192, 4]) /* ty=Tensor[(192, 4), uint8] */;
  %438 = reshape(%436, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
  %439 = @func_2711(%437, %438) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) */;
  %440 = %439.3;
  %441 = cast(%433, dtype="uint16") /* ty=Tensor[(16, 2, 1), uint16] */;
  %442 = cast(%440, dtype="uint16") /* ty=Tensor[(16, 2, 420), uint16] */;
  %443 = @func_4062() /* ty=(Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) */;
  %444 = %443.0;
  %445 = cast(%var_4138, dtype="bool") /* ty=Tensor[(1, 11, 11), bool] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="bool") /* ty=Tensor[(1, 11, 11), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = left_shift(%441, %442) /* ty=Tensor[(16, 2, 420), uint16] */;
  %450 = greater_equal(%447, %448) /* ty=Tensor[(?, 11, 11), bool] */;
  (%435, %var_4120, %449, %450)
}

def @func_1597() -> (Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) {
  %451 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %452 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %453 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %454 = reshape(%451, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %455 = reshape(%452, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %456 = reshape(%453, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %457 = @func_1552(%454, %455, %456) /* ty=(Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) */;
  %458 = %457.0;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %460 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(1, 1521), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %461 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1521), uint32] */, dtype="float64") /* ty=Tensor[(1, 1521), float64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %463 = cast(%458, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %464 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(1, 1521), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %465 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1521), uint32] */, dtype="float64") /* ty=Tensor[(1, 1521), float64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %467 = @func_1486() /* ty=Tensor[(1650), int16] */;
  %468 = divide(%461, %462) /* ty=Tensor[(?, 1521), float64] */;
  %469 = floor_mod(%465, %466) /* ty=Tensor[(?, 1521), float64] */;
  (%467, %468, %469)
}

def @func_2249(%var_2162: Tensor[(12, 14, 9), int8], %var_2163: Tensor[(12, 14, 9), int8], %var_2173: Tensor[(3360), float32], %var_2176: Tensor[(12, 14, 9), int8], %var_2193: Tensor[(121), float32]) -> (Tensor[(12, 14, 9), bool], Tensor[(3360), float32], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32], Tensor[(12, 14, 9), int32], Tensor[(121), int16], Tensor[(6, 15, 14), int32], Tensor[(1260, 1), int32], Tensor[(?, 1521), float64], Tensor[(121), float32]) {
  %470 = cast(%var_2163, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %471 = shape_of(%var_2162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%var_2162, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = cast(meta[relay.Constant][36] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %475 = cast(meta[relay.Constant][36] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %476 = cast(meta[relay.Constant][37] /* ty=Tensor[(1755), int16] */, dtype="int16") /* ty=Tensor[(1755), int16] */;
  %477 = cast(%var_2173, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %478 = reshape(%474, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
  %479 = reshape(%475, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
  %480 = reshape(%476, newshape=[1755]) /* ty=Tensor[(1755), int16] */;
  %481 = reshape(%477, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %482 = @func_1444(%478, %479, %480, %481) /* ty=(Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) */;
  %483 = cast(%var_2176, dtype="int32") /* ty=Tensor[(12, 14, 9), int32] */;
  %484 = shape_of(%var_2163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_2163, dtype="int32") /* ty=Tensor[(12, 14, 9), int32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %487 = cast(%var_2193, dtype="float32") /* ty=Tensor[(121), float32] */;
  %488 = tan(%487) /* ty=Tensor[(121), float32] */;
  %489 = cast(%var_2193, dtype="float32") /* ty=Tensor[(121), float32] */;
  %490 = reshape(%489, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
  %491 = @func_1525(%490) /* ty=(Tensor[(1, 11, 11), float32],) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="int16") /* ty=Tensor[(1, 11, 11), int16] */;
  %494 = shape_of(%488, dtype="int32") /* ty=Tensor[(1), int32] */;
  %495 = cast(%488, dtype="int16") /* ty=Tensor[(121), int16] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), int16] */;
  %497 = cast(meta[relay.Constant][38] /* ty=Tensor[(1260, 1), int32] */, dtype="int32") /* ty=Tensor[(1260, 1), int32] */;
  %498 = reshape(%497, newshape=[6, 15, 14]) /* ty=Tensor[(6, 15, 14), int32] */;
  %499 = @func_1991(%498) /* ty=(Tensor[(6, 15, 14), int32],) */;
  %500 = cast(%492, dtype="uint16") /* ty=Tensor[(1, 11, 11), uint16] */;
  %501 = shape_of(%488, dtype="int32") /* ty=Tensor[(1), int32] */;
  %502 = cast(%488, dtype="uint16") /* ty=Tensor[(121), uint16] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %504 = left_shift(%502, %503) /* ty=Tensor[(121), uint16] */;
  %505 = cast(%504, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %506 = shape_of(%488, dtype="int32") /* ty=Tensor[(1), int32] */;
  %507 = cast(%488, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %509 = bitwise_and(%507, %508) /* ty=Tensor[(121), uint64] */;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(121), float32] */;
  %511 = not_equal(%472, %473) /* ty=Tensor[(12, 14, 9), bool] */;
  %512 = %482.8;
  %513 = bitwise_xor(%485, %486) /* ty=Tensor[(12, 14, 9), int32] */;
  %514 = maximum(%495, %496) /* ty=Tensor[(121), int16] */;
  %515 = %499.0;
  %516 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  %517 = cosh(%510) /* ty=Tensor[(121), float32] */;
  (%511, %512, meta[relay.Constant][36] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][37] /* ty=Tensor[(1755), int16] */, %var_2173, %513, %514, %515, meta[relay.Constant][38] /* ty=Tensor[(1260, 1), int32] */, %516, %517)
}

def @func_3802() -> Tensor[(15, 6, 16), bool] {
  %518 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 6, 16), bool] */, dtype="bool") /* ty=Tensor[(1, 6, 16), bool] */;
  %519 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 6, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 6, 16), bool] */;
  logical_or(%518, %519) /* ty=Tensor[(15, 6, 16), bool] */
}

def @func_396(%var_366: Tensor[(10, 15, 11), uint64], %var_367: Tensor[(10, 15, 11), uint64]) -> (Tensor[(10, 15, 11), uint64],) {
  %520 = cast(%var_367, dtype="uint64") /* ty=Tensor[(10, 15, 11), uint64] */;
  %521 = shape_of(%var_366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_366, dtype="uint64") /* ty=Tensor[(10, 15, 11), uint64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %524 = right_shift(%522, %523) /* ty=Tensor[(10, 15, 11), uint64] */;
  (%524,)
}

def @func_3220() -> Tensor[(16, 2, 1), float32] {
  %525 = @func_2763() /* ty=(Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
  %525.0
}

def @func_2980() -> (Tensor[(16, 2, 1), float32],) {
  %526 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  (%526,)
}

def @main() -> (Tensor[(1650), bool],) {
  %527 = @func_2538() /* ty=Tensor[(1650), float32] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %529 = rsqrt(%528) /* ty=Tensor[(1650), float64] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(1650), bool] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(1), int32] */;
  %532 = cast(%529, dtype="bool") /* ty=Tensor[(1650), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?), bool] */;
  %534 = less_equal(%532, %533) /* ty=Tensor[(1650), bool] */;
  (%534,)
}

def @func_422(%var_404: Tensor[(4, 15, 14), bool], %var_405: Tensor[(4, 15, 14), bool]) -> (Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) {
  %535 = cast(%var_405, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
  %536 = shape_of(%var_404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_404, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = logical_and(%537, %538) /* ty=Tensor[(4, 15, 14), bool] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
  %541 = cast(meta[relay.Constant][41] /* ty=Tensor[(1650), uint64] */, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
  %542 = cast(meta[relay.Constant][41] /* ty=Tensor[(1650), uint64] */, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
  %543 = reshape(%541, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
  %544 = reshape(%542, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
  %545 = @func_396(%543, %544) /* ty=(Tensor[(10, 15, 11), uint64],) */;
  %546 = asinh(%540) /* ty=Tensor[(4, 15, 14), float64] */;
  %547 = %545.0;
  (%546, %547, meta[relay.Constant][41] /* ty=Tensor[(1650), uint64] */)
}

def @func_2390(%var_2367: Tensor[(6, 9, 8), float64]) -> Tensor[(6, 9, 8), float64] {
  %548 = cast(%var_2367, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
  exp(%548) /* ty=Tensor[(6, 9, 8), float64] */
}

def @func_2616(%var_2594: float64, %var_2595: Tensor[(13, 7, 4), float64]) -> (Tensor[(13, 7, 4), float32], Tensor[(13, 7, 4), bool]) {
  %549 = cast(%var_2594, dtype="float64") /* ty=float64 */;
  %550 = cast(%var_2595, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
  %551 = power(%549, %550) /* ty=Tensor[(13, 7, 4), float64] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
  %553 = cast(%var_2595, dtype="bool") /* ty=Tensor[(13, 7, 4), bool] */;
  %554 = cast(%var_2594, dtype="bool") /* ty=bool */;
  %555 = log2(%552) /* ty=Tensor[(13, 7, 4), float32] */;
  %556 = less(%553, %554) /* ty=Tensor[(13, 7, 4), bool] */;
  (%555, %556)
}

def @func_1826() -> (Tensor[(16, 2, 1), float32],) {
  %557 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  (%557,)
}

def @func_1150(%var_1142: Tensor[(11, 11, 1), uint64], %var_1143: Tensor[(11, 11, 3), uint64]) -> (Tensor[(11, 11, 3), uint64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) {
  %558 = cast(%var_1142, dtype="uint64") /* ty=Tensor[(11, 11, 1), uint64] */;
  %559 = cast(%var_1143, dtype="uint64") /* ty=Tensor[(11, 11, 3), uint64] */;
  %560 = cast(meta[relay.Constant][42] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %561 = reshape(%560, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
  %562 = @func_187(%561) /* ty=(Tensor[(15, 16, 14), float32],) */;
  %563 = logical_xor(%558, %559) /* ty=Tensor[(11, 11, 3), uint64] */;
  %564 = %562.0;
  (%563, %564, meta[relay.Constant][42] /* ty=Tensor[(3360), float32] */)
}

def @func_2538() -> Tensor[(1650), float32] {
  %565 = @func_1486() /* ty=Tensor[(1650), int16] */;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(1650), float32] */;
  asinh(%566) /* ty=Tensor[(1650), float32] */
}

def @func_187(%var_179: Tensor[(15, 16, 14), float32]) -> (Tensor[(15, 16, 14), float32],) {
  %567 = cast(%var_179, dtype="float32") /* ty=Tensor[(15, 16, 14), float32] */;
  %568 = log2(%567) /* ty=Tensor[(15, 16, 14), float32] */;
  (%568,)
}

def @func_1895(%var_1870: Tensor[(15, 13, 6), int16], %var_1871: Tensor[(15, 13, 6), int16]) -> (Tensor[(15, 13, 6), int16],) {
  %569 = cast(%var_1871, dtype="int16") /* ty=Tensor[(15, 13, 6), int16] */;
  %570 = shape_of(%var_1870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%var_1870, dtype="int16") /* ty=Tensor[(15, 13, 6), int16] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %573 = minimum(%571, %572) /* ty=Tensor[(15, 13, 6), int16] */;
  (%573,)
}

def @func_1376(%var_1359: int32, %var_1360: Tensor[(12, 4, 15), int32]) -> Tensor[(12, 4, 15), int32] {
  %574 = cast(%var_1359, dtype="int32") /* ty=int32 */;
  %575 = cast(%var_1360, dtype="int32") /* ty=Tensor[(12, 4, 15), int32] */;
  bitwise_xor(%574, %575) /* ty=Tensor[(12, 4, 15), int32] */
}

def @func_2003() -> Tensor[(16, 2, 1), float32] {
  %576 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %576.0
}

def @func_1235() -> Tensor[(16, 2, 1), float32] {
  %577 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  %578 = tan(%577) /* ty=Tensor[(16, 2, 1), float64] */;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  cosh(%579) /* ty=Tensor[(16, 2, 1), float32] */
}

def @func_3641(%var_3638: Tensor[(3360, 1), float32]) -> (Tensor[(15, 3, 14), float64], Tensor[(12, 14, 9), int32], Tensor[(1512), int8], Tensor[(3360, 1), float32], Tensor[(121), float32]) {
  %580 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 14), float64] */;
  %581 = cast(meta[relay.Constant][45] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %582 = cast(meta[relay.Constant][45] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %583 = cast(%var_3638, dtype="float32") /* ty=Tensor[(3360, 1), float32] */;
  %584 = cast(meta[relay.Constant][45] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %585 = cast(meta[relay.Constant][46] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %586 = reshape(%581, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), int8] */;
  %587 = reshape(%582, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), int8] */;
  %588 = reshape(%583, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %589 = reshape(%584, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), int8] */;
  %590 = reshape(%585, newshape=[121]) /* ty=Tensor[(121), float32] */;
  %591 = @func_2249(%586, %587, %588, %589, %590) /* ty=(Tensor[(12, 14, 9), bool], Tensor[(3360), float32], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32], Tensor[(12, 14, 9), int32], Tensor[(121), int16], Tensor[(6, 15, 14), int32], Tensor[(1260, 1), int32], Tensor[(?, 1521), float64], Tensor[(121), float32]) */;
  %592 = log10(%580) /* ty=Tensor[(15, 3, 14), float64] */;
  %593 = %591.5;
  (%592, %593, meta[relay.Constant][45] /* ty=Tensor[(1512), int8] */, %var_3638, meta[relay.Constant][46] /* ty=Tensor[(121), float32] */)
}

def @func_3409(%var_3339: Tensor[(7, 6, 11), int64], %var_3340: Tensor[(7, 6, 11), int64], %var_3398: Tensor[(16, 2, 14), float64]) -> (Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(1650), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 14), uint64], Tensor[(7, 6, 11), int8]) {
  %594 = cast(meta[relay.Constant][47] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %595 = reshape(%594, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
  %596 = @func_1525(%595) /* ty=(Tensor[(1, 11, 11), float32],) */;
  %597 = @func_2814() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) */;
  %598 = %597.0;
  %599 = cast(%var_3398, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %603 = cast(%var_3339, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %604 = cos(%603) /* ty=Tensor[(7, 6, 11), float32] */;
  %605 = cast(%var_3340, dtype="int64") /* ty=Tensor[(7, 6, 11), int64] */;
  %606 = shape_of(%var_3339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%var_3339, dtype="int64") /* ty=Tensor[(7, 6, 11), int64] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %609 = right_shift(%607, %608) /* ty=Tensor[(7, 6, 11), int64] */;
  %610 = cast(%604, dtype="int16") /* ty=Tensor[(7, 6, 11), int16] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="int16") /* ty=Tensor[(7, 6, 11), int16] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %614 = maximum(%612, %613) /* ty=Tensor[(7, 6, 11), int16] */;
  %615 = cast(%614, dtype="int8") /* ty=Tensor[(7, 6, 11), int8] */;
  %616 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%604, dtype="int8") /* ty=Tensor[(7, 6, 11), int8] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %619 = %596.0;
  %620 = @func_2538() /* ty=Tensor[(1650), float32] */;
  %621 = @func_3220() /* ty=Tensor[(16, 2, 1), float32] */;
  %622 = add(%601, %602) /* ty=Tensor[(16, 2, 14), uint64] */;
  %623 = add(%617, %618) /* ty=Tensor[(7, 6, 11), int8] */;
  (%619, meta[relay.Constant][47] /* ty=Tensor[(121), float32] */, %620, %621, %622, %623)
}

def @func_2592() -> (Tensor[(16, 2, 1), float64], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float64]) {
  %624 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
  %625 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  %626 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  %627 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
  (%624, %625, %626, %627)
}

def @func_4400(%var_4362: Tensor[(2, 728), float32], %var_4370: Tensor[(121), uint64]) -> (Tensor[(16, 2, 1), float32], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(3360), float32], Tensor[(121), uint64], Tensor[(363), uint64], Tensor[(16, 2, 1), float64], Tensor[(1, 11, 11), float32], Tensor[(64), float64]) {
  %628 = @func_4279() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %629 = cast(%var_4362, dtype="float32") /* ty=Tensor[(2, 728), float32] */;
  %630 = reshape(%629, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), float32] */;
  %631 = cast(%var_4370, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %632 = cast(meta[relay.Constant][48] /* ty=Tensor[(363), uint64] */, dtype="uint64") /* ty=Tensor[(363), uint64] */;
  %633 = reshape(%631, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), uint64] */;
  %634 = reshape(%632, newshape=[11, 11, 3]) /* ty=Tensor[(11, 11, 3), uint64] */;
  %635 = @func_1150(%633, %634) /* ty=(Tensor[(11, 11, 3), uint64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
  %636 = @func_3623() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) */;
  %637 = %636.3;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  %639 = cast(meta[relay.Constant][49] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %640 = reshape(%639, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %641 = @func_3574(%640) /* ty=(Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) */;
  %642 = %628.0;
  %643 = @func_889(%630) /* ty=Tensor[(8, 14, 13), float32] */;
  %644 = %635.2;
  %645 = cos(%638) /* ty=Tensor[(16, 2, 1), float64] */;
  %646 = %641.3;
  (%642, %643, %var_4362, %644, %var_4370, meta[relay.Constant][48] /* ty=Tensor[(363), uint64] */, %645, %646, meta[relay.Constant][49] /* ty=Tensor[(64), float64] */)
}

def @func_2130() -> Tensor[(16, 2, 1), float64] {
  %647 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %648 = %647.0;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  asinh(%649) /* ty=Tensor[(16, 2, 1), float64] */
}

def @func_1739(%var_1687: Tensor[(16, 2, 1), float32], %var_1702: Tensor[(16, 2, 2), float64], %var_1715: Tensor[(1, 1521), float64]) -> (Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) {
  %650 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %651 = %650.1;
  %652 = cast(%var_1687, dtype="uint32") /* ty=Tensor[(16, 2, 1), uint32] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="uint32") /* ty=Tensor[(16, 2, 1), uint32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %656 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
  %657 = %656.1;
  %658 = cast(%var_1715, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(2), int32] */;
  %660 = cast(%657, dtype="int16") /* ty=Tensor[(?, 1521), int16] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %662 = cast(%var_1687, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  %663 = exp(%662) /* ty=Tensor[(16, 2, 1), float64] */;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  %665 = cast(%var_1702, dtype="float64") /* ty=Tensor[(16, 2, 2), float64] */;
  %666 = floor_mod(%664, %665) /* ty=Tensor[(16, 2, 2), float64] */;
  %667 = cast(%666, dtype="uint8") /* ty=Tensor[(16, 2, 2), uint8] */;
  %668 = cast(%651, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
  %669 = cast(meta[relay.Constant][50] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %670 = reshape(%669, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %671 = bitwise_or(%654, %655) /* ty=Tensor[(16, 2, ?), uint32] */;
  %672 = bitwise_or(%660, %661) /* ty=Tensor[(?, 1521), int16] */;
  %673 = bitwise_xor(%667, %668) /* ty=Tensor[(16, 2, 2), uint8] */;
  %674 = @func_690(%670) /* ty=Tensor[(3, 14, 10), float64] */;
  (%671, %672, %673, %674, meta[relay.Constant][50] /* ty=Tensor[(420), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1678(%var_1676: Tensor[(8, 16, 6), uint8], %var_1677: Tensor[(420), float64]) -> (Tensor[(8, 16, 6), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) {
  %8 = fn (%var_1643: Tensor[(8, 16, 6), uint8], %var_1664: Tensor[(420), float64]) -> (Tensor[(8, 16, 6), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 16, 6), uint8] */, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
    %1 = shape_of(%var_1643, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_1643, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %4 = cast(%var_1664, dtype="float64") /* ty=Tensor[(420), float64] */;
    %5 = reshape(%4, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
    %6 = multiply(%2, %3) /* ty=Tensor[(8, 16, 6), uint8] */;
    %7 = @func_690(%5) /* ty=Tensor[(3, 14, 10), float64] */;
    (%6, %7, %var_1664)
  };
  %8(%var_1676, %var_1677) /* ty=(Tensor[(8, 16, 6), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */
}

def @func_425(%var_423: Tensor[(4, 15, 14), bool], %var_424: Tensor[(4, 15, 14), bool]) -> (Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) {
  %22 = fn (%var_404: Tensor[(4, 15, 14), bool], %var_405: Tensor[(4, 15, 14), bool]) -> (Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) {
    %9 = cast(%var_405, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
    %10 = shape_of(%var_404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%var_404, dtype="bool") /* ty=Tensor[(4, 15, 14), bool] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %13 = logical_and(%11, %12) /* ty=Tensor[(4, 15, 14), bool] */;
    %14 = cast(%13, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(1650), uint64] */, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
    %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(1650), uint64] */, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
    %17 = reshape(%15, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
    %18 = reshape(%16, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
    %19 = @func_396(%17, %18) /* ty=(Tensor[(10, 15, 11), uint64],) */;
    %20 = asinh(%14) /* ty=Tensor[(4, 15, 14), float64] */;
    %21 = %19.0;
    (%20, %21, meta[relay.Constant][1] /* ty=Tensor[(1650), uint64] */)
  };
  %22(%var_423, %var_424) /* ty=(Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) */
}

def @func_1203(%var_1188: Tensor[(1, 9, 1), float32], %var_1189: Tensor[(2, 9, 16), float32], %var_1194: Tensor[(195), int16]) -> (Tensor[(2, 9, 16), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(1755), float64]) {
  %23 = cast(%var_1188, dtype="float32") /* ty=Tensor[(1, 9, 1), float32] */;
  %24 = cast(%var_1189, dtype="float32") /* ty=Tensor[(2, 9, 16), float32] */;
  %25 = cast(%var_1194, dtype="int16") /* ty=Tensor[(195), int16] */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(1755), int16] */, dtype="int16") /* ty=Tensor[(1755), int16] */;
  %27 = reshape(%25, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int16] */;
  %28 = reshape(%26, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int16] */;
  %29 = @func_840(%27, %28) /* ty=(Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(1755), int16] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %31 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(1755), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(1755), int16] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?), float64] */;
  %34 = floor_mod(%23, %24) /* ty=Tensor[(2, 9, 16), float32] */;
  %35 = %29.0;
  %36 = mod(%32, %33) /* ty=Tensor[(1755), float64] */;
  (%34, %35, %var_1194, %36)
}

def @func_1557(%var_1554: Tensor[(13, 9, 13), uint32], %var_1555: Tensor[(13, 9, 13), uint32], %var_1556: Tensor[(13, 9, 13), uint32]) -> (Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) {
  @func_1552(%var_1554, %var_1555, %var_1556) /* ty=(Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) */
}

def @func_4087(%var_4075: Tensor[(1650), int16]) -> (Tensor[(1650), uint32], Tensor[(1650), float32]) {
  %37 = @func_1486() /* ty=Tensor[(1650), int16] */;
  %38 = cast(%var_4075, dtype="uint32") /* ty=Tensor[(1650), uint32] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(1), int32] */;
  %40 = cast(%37, dtype="uint32") /* ty=Tensor[(1650), uint32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %42 = cast(%var_4075, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %43 = left_shift(%40, %41) /* ty=Tensor[(1650), uint32] */;
  %44 = sqrt(%42) /* ty=Tensor[(1650), float32] */;
  (%43, %44)
}

def @func_4617(%var_4615: Tensor[(768), uint8]) -> (Tensor[(16, 2, 1), float32], Tensor[(13, 1521), float64], Tensor[(4, 16), float64], Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(13, 9, 13), float64], Tensor[(1, 1521), uint32], Tensor[(10, 13, 7), float32]) {
  @func_4614(%var_4615) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(13, 1521), float64], Tensor[(4, 16), float64], Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(13, 9, 13), float64], Tensor[(1, 1521), uint32], Tensor[(10, 13, 7), float32]) */
}

def @func_1266() -> (Tensor[(16, 2, 1), float32],) {
  %45 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  (%45,)
}

def @func_1552(%var_1534: Tensor[(13, 9, 13), uint32], %var_1535: Tensor[(13, 9, 13), uint32], %var_1544: Tensor[(13, 9, 13), uint32]) -> (Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) {
  %46 = cast(%var_1535, dtype="uint32") /* ty=Tensor[(13, 9, 13), uint32] */;
  %47 = shape_of(%var_1534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_1534, dtype="uint32") /* ty=Tensor[(13, 9, 13), uint32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %50 = cast(%var_1544, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %51 = shape_of(%var_1534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%var_1534, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %54 = bitwise_xor(%48, %49) /* ty=Tensor[(13, 9, 13), uint32] */;
  %55 = mod(%52, %53) /* ty=Tensor[(13, 9, 13), float64] */;
  (%54, %55)
}

def @func_3844(%var_3842: Tensor[(14, 15, 6), uint8], %var_3843: Tensor[(1650), uint64]) -> (Tensor[(14, 15, 6), bool], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) {
  %67 = fn (%var_3811: Tensor[(14, 15, 6), uint8], %var_3820: Tensor[(1650), uint64]) -> (Tensor[(14, 15, 6), bool], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) {
    %56 = cast(%var_3811, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
    %57 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 15, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 15, 6), uint8] */, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %60 = cast(%var_3820, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
    %61 = cast(%var_3820, dtype="uint64") /* ty=Tensor[(1650), uint64] */;
    %62 = reshape(%60, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
    %63 = reshape(%61, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), uint64] */;
    %64 = @func_396(%62, %63) /* ty=(Tensor[(10, 15, 11), uint64],) */;
    %65 = equal(%58, %59) /* ty=Tensor[(14, 15, 6), bool] */;
    %66 = %64.0;
    (%65, %66, %var_3820)
  };
  %67(%var_3842, %var_3843) /* ty=(Tensor[(14, 15, 6), bool], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) */
}

def @func_2003() -> Tensor[(16, 2, 1), float32] {
  %68 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %68.0
}

def @func_4194() -> (Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) {
  %72 = fn () -> (Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) {
    %69 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
    %70 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
    %71 = @func_1956() /* ty=Tensor[(16, 2, 1), float32] */;
    (%69, %70, %71)
  };
  %72() /* ty=(Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) */
}

def @func_3747(%var_3746: Tensor[(1521), float64]) -> (Tensor[(16, 2, ?), float32], Tensor[(1650), float32], Tensor[(420), float64], Tensor[(64), float64], Tensor[(1521), float64]) {
  %84 = fn (%var_3729: Tensor[(1521), float64]) -> (Tensor[(16, 2, ?), float32], Tensor[(1650), float32], Tensor[(420), float64], Tensor[(64), float64], Tensor[(1521), float64]) {
    %73 = @func_3623() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) */;
    %74 = %73.0;
    %75 = cast(%74, dtype="float32") /* ty=Tensor[(16, 2, ?), float32] */;
    %76 = cast(meta[relay.Constant][5] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %77 = cast(%var_3729, dtype="float64") /* ty=Tensor[(1521), float64] */;
    %78 = reshape(%75, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
    %79 = reshape(%76, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float64] */;
    %80 = reshape(%77, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float64] */;
    %81 = @func_1739(%78, %79, %80) /* ty=(Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
    %82 = @func_2538() /* ty=Tensor[(1650), float32] */;
    %83 = %81.4;
    (%74, %82, %83, meta[relay.Constant][5] /* ty=Tensor[(64), float64] */, %var_3729)
  };
  %84(%var_3746) /* ty=(Tensor[(16, 2, ?), float32], Tensor[(1650), float32], Tensor[(420), float64], Tensor[(64), float64], Tensor[(1521), float64]) */
}

def @func_4063() -> (Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) {
  %95 = fn () -> (Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) {
    %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
    %86 = reshape(%85, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
    %87 = @func_1525(%86) /* ty=(Tensor[(1, 11, 11), float32],) */;
    %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
    %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
    %90 = divide(%88, %89) /* ty=Tensor[(10, 13, 7), float64] */;
    %91 = cast(%90, dtype="float32") /* ty=Tensor[(10, 13, 7), float32] */;
    %92 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 13, 1), float64] */, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
    %93 = %87.0;
    %94 = mod(%91, %92) /* ty=Tensor[(10, 13, 7), float32] */;
    (%93, meta[relay.Constant][6] /* ty=Tensor[(121), float32] */, %94)
  };
  %95() /* ty=(Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) */
}

def @func_4149(%var_4147: Tensor[(768), uint8], %var_4148: Tensor[(1, 11, 11), float32]) -> (Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(16, 2, 420), uint16], Tensor[(?, 11, 11), bool]) {
  %116 = fn (%var_4120: Tensor[(768), uint8], %var_4138: Tensor[(1, 11, 11), float32]) -> (Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(16, 2, 420), uint16], Tensor[(?, 11, 11), bool]) {
    %96 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %97 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %98 = %97.0;
    %99 = cast(%var_4120, dtype="uint8") /* ty=Tensor[(768), uint8] */;
    %100 = %96.0;
    %101 = cast(%100, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
    %102 = reshape(%99, newshape=[192, 4]) /* ty=Tensor[(192, 4), uint8] */;
    %103 = reshape(%101, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
    %104 = @func_2711(%102, %103) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) */;
    %105 = %104.3;
    %106 = cast(%98, dtype="uint16") /* ty=Tensor[(16, 2, 1), uint16] */;
    %107 = cast(%105, dtype="uint16") /* ty=Tensor[(16, 2, 420), uint16] */;
    %108 = @func_4062() /* ty=(Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) */;
    %109 = %108.0;
    %110 = cast(%var_4138, dtype="bool") /* ty=Tensor[(1, 11, 11), bool] */;
    %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(%109, dtype="bool") /* ty=Tensor[(1, 11, 11), bool] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %114 = left_shift(%106, %107) /* ty=Tensor[(16, 2, 420), uint16] */;
    %115 = greater_equal(%112, %113) /* ty=Tensor[(?, 11, 11), bool] */;
    (%100, %var_4120, %114, %115)
  };
  %116(%var_4147, %var_4148) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(16, 2, 420), uint16], Tensor[(?, 11, 11), bool]) */
}

def @func_1379(%var_1377: int32, %var_1378: Tensor[(12, 4, 15), int32]) -> Tensor[(12, 4, 15), int32] {
  %119 = fn (%var_1359: int32, %var_1360: Tensor[(12, 4, 15), int32]) -> Tensor[(12, 4, 15), int32] {
    %117 = cast(%var_1359, dtype="int32") /* ty=int32 */;
    %118 = cast(%var_1360, dtype="int32") /* ty=Tensor[(12, 4, 15), int32] */;
    bitwise_xor(%117, %118) /* ty=Tensor[(12, 4, 15), int32] */
  };
  %119(%var_1377, %var_1378) /* ty=Tensor[(12, 4, 15), int32] */
}

def @func_1606() -> (Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) {
  %120 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
  %121 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %122 = %120.0;
  %123 = %121.0;
  (%122, %123)
}

def @func_2430(%var_2429: Tensor[(1521), float64]) -> (Tensor[(16, 2, 1), float32], Tensor[(?, 1521), int16], Tensor[(64), float64], Tensor[(1521), float64]) {
  %135 = fn (%var_2425: Tensor[(1521), float64]) -> (Tensor[(16, 2, 1), float32], Tensor[(?, 1521), int16], Tensor[(64), float64], Tensor[(1521), float64]) {
    %124 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
    %125 = cast(%124, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
    %126 = log2(%125) /* ty=Tensor[(16, 2, 1), float32] */;
    %127 = cast(%126, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
    %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %129 = cast(%var_2425, dtype="float64") /* ty=Tensor[(1521), float64] */;
    %130 = reshape(%127, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
    %131 = reshape(%128, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float64] */;
    %132 = reshape(%129, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float64] */;
    %133 = @func_1739(%130, %131, %132) /* ty=(Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
    %134 = %133.1;
    (%126, %134, meta[relay.Constant][9] /* ty=Tensor[(64), float64] */, %var_2425)
  };
  %135(%var_2429) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(?, 1521), int16], Tensor[(64), float64], Tensor[(1521), float64]) */
}

def @func_4249(%var_4215: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(15, 6, 16), bool], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), bool]) {
  %136 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %138 = cast(%var_4215, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(16, 2, 1), bool] */;
  %140 = cast(%var_4215, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %141 = cast(%var_4215, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %142 = sqrt(%141) /* ty=Tensor[(16, 2, 14), float32] */;
  %143 = cast(%142, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %144 = cast(%136, dtype="bool") /* ty=Tensor[(16, 2, 1), bool] */;
  %145 = power(%137, %138) /* ty=Tensor[(16, 2, 14), float32] */;
  %146 = @func_3802() /* ty=Tensor[(15, 6, 16), bool] */;
  %147 = greater(%139, %140) /* ty=Tensor[(16, 2, 14), bool] */;
  %148 = greater_equal(%143, %144) /* ty=Tensor[(16, 2, 14), bool] */;
  (%145, %146, %147, %148)
}

def @func_1642() -> Tensor[(?, 1521), float64] {
  %150 = fn () -> Tensor[(?, 1521), float64] {
    %149 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
    %149.2
  };
  %150() /* ty=Tensor[(?, 1521), float64] */
}

def @func_2130() -> Tensor[(16, 2, 1), float64] {
  %151 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  asinh(%153) /* ty=Tensor[(16, 2, 1), float64] */
}

def @func_2256(%var_2251: Tensor[(12, 14, 9), int8], %var_2252: Tensor[(12, 14, 9), int8], %var_2253: Tensor[(3360), float32], %var_2254: Tensor[(12, 14, 9), int8], %var_2255: Tensor[(121), float32]) -> (Tensor[(12, 14, 9), bool], Tensor[(3360), float32], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32], Tensor[(12, 14, 9), int32], Tensor[(121), int16], Tensor[(6, 15, 14), int32], Tensor[(1260, 1), int32], Tensor[(?, 1521), float64], Tensor[(121), float32]) {
  @func_2249(%var_2251, %var_2252, %var_2253, %var_2254, %var_2255) /* ty=(Tensor[(12, 14, 9), bool], Tensor[(3360), float32], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32], Tensor[(12, 14, 9), int32], Tensor[(121), int16], Tensor[(6, 15, 14), int32], Tensor[(1260, 1), int32], Tensor[(?, 1521), float64], Tensor[(121), float32]) */
}

def @func_3222() -> Tensor[(16, 2, 1), float32] {
  @func_3220() /* ty=Tensor[(16, 2, 1), float32] */
}

def @func_2300(%var_2269: Tensor[(12, 14, 4), uint8], %var_2270: Tensor[(12, 14, 4), uint8]) -> (Tensor[(12, 14, 4), uint8],) {
  %154 = cast(%var_2270, dtype="uint8") /* ty=Tensor[(12, 14, 4), uint8] */;
  %155 = shape_of(%var_2269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_2269, dtype="uint8") /* ty=Tensor[(12, 14, 4), uint8] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %158 = right_shift(%156, %157) /* ty=Tensor[(12, 14, 4), uint8] */;
  (%158,)
}

def @main() -> (Tensor[(1650), bool],) {
  %159 = @func_2538() /* ty=Tensor[(1650), float32] */;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(1650), float64] */;
  %161 = rsqrt(%160) /* ty=Tensor[(1650), float64] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(1650), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(1), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(1650), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?), bool] */;
  %166 = less_equal(%164, %165) /* ty=Tensor[(1650), bool] */;
  (%166,)
}

def @func_2132() -> Tensor[(16, 2, 1), float64] {
  @func_2130() /* ty=Tensor[(16, 2, 1), float64] */
}

def @func_3414(%var_3411: Tensor[(7, 6, 11), int64], %var_3412: Tensor[(7, 6, 11), int64], %var_3413: Tensor[(16, 2, 14), float64]) -> (Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(1650), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 14), uint64], Tensor[(7, 6, 11), int8]) {
  @func_3409(%var_3411, %var_3412, %var_3413) /* ty=(Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(1650), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 14), uint64], Tensor[(7, 6, 11), int8]) */
}

def @func_1899(%var_1897: Tensor[(15, 13, 6), int16], %var_1898: Tensor[(15, 13, 6), int16]) -> (Tensor[(15, 13, 6), int16],) {
  @func_1895(%var_1897, %var_1898) /* ty=(Tensor[(15, 13, 6), int16],) */
}

def @func_3641(%var_3638: Tensor[(3360, 1), float32]) -> (Tensor[(15, 3, 14), float64], Tensor[(12, 14, 9), int32], Tensor[(1512), int8], Tensor[(3360, 1), float32], Tensor[(121), float32]) {
  %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 14), float64] */;
  %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %170 = cast(%var_3638, dtype="float32") /* ty=Tensor[(3360, 1), float32] */;
  %171 = cast(meta[relay.Constant][11] /* ty=Tensor[(1512), int8] */, dtype="int8") /* ty=Tensor[(1512), int8] */;
  %172 = cast(meta[relay.Constant][12] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %173 = reshape(%168, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), int8] */;
  %174 = reshape(%169, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), int8] */;
  %175 = reshape(%170, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %176 = reshape(%171, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), int8] */;
  %177 = reshape(%172, newshape=[121]) /* ty=Tensor[(121), float32] */;
  %178 = @func_2249(%173, %174, %175, %176, %177) /* ty=(Tensor[(12, 14, 9), bool], Tensor[(3360), float32], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32], Tensor[(12, 14, 9), int32], Tensor[(121), int16], Tensor[(6, 15, 14), int32], Tensor[(1260, 1), int32], Tensor[(?, 1521), float64], Tensor[(121), float32]) */;
  %179 = log10(%167) /* ty=Tensor[(15, 3, 14), float64] */;
  %180 = %178.5;
  (%179, %180, meta[relay.Constant][11] /* ty=Tensor[(1512), int8] */, %var_3638, meta[relay.Constant][12] /* ty=Tensor[(121), float32] */)
}

def @func_1527(%var_1526: Tensor[(1, 11, 11), float32]) -> (Tensor[(1, 11, 11), float32],) {
  %183 = fn (%var_1509: Tensor[(1, 11, 11), float32]) -> (Tensor[(1, 11, 11), float32],) {
    %181 = cast(%var_1509, dtype="float32") /* ty=Tensor[(1, 11, 11), float32] */;
    %182 = exp(%181) /* ty=Tensor[(1, 11, 11), float32] */;
    (%182,)
  };
  %183(%var_1526) /* ty=(Tensor[(1, 11, 11), float32],) */
}

def @func_4252(%var_4250: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(15, 6, 16), bool], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), bool]) {
  @func_4249(%var_4250) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(15, 6, 16), bool], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), bool]) */
}

def @func_2953() -> (Tensor[(16, 2, 1), float32],) {
  %185 = fn () -> (Tensor[(16, 2, 1), float32],) {
    %184 = @func_2003() /* ty=Tensor[(16, 2, 1), float32] */;
    (%184,)
  };
  %185() /* ty=(Tensor[(16, 2, 1), float32],) */
}

def @func_1208(%var_1205: Tensor[(1, 9, 1), float32], %var_1206: Tensor[(2, 9, 16), float32], %var_1207: Tensor[(195), int16]) -> (Tensor[(2, 9, 16), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(1755), float64]) {
  @func_1203(%var_1205, %var_1206, %var_1207) /* ty=(Tensor[(2, 9, 16), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(1755), float64]) */
}

def @func_396(%var_366: Tensor[(10, 15, 11), uint64], %var_367: Tensor[(10, 15, 11), uint64]) -> (Tensor[(10, 15, 11), uint64],) {
  %186 = cast(%var_367, dtype="uint64") /* ty=Tensor[(10, 15, 11), uint64] */;
  %187 = shape_of(%var_366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%var_366, dtype="uint64") /* ty=Tensor[(10, 15, 11), uint64] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %190 = right_shift(%188, %189) /* ty=Tensor[(10, 15, 11), uint64] */;
  (%190,)
}

def @func_1958() -> Tensor[(16, 2, 1), float32] {
  @func_1956() /* ty=Tensor[(16, 2, 1), float32] */
}

def @func_2392(%var_2391: Tensor[(6, 9, 8), float64]) -> Tensor[(6, 9, 8), float64] {
  %192 = fn (%var_2367: Tensor[(6, 9, 8), float64]) -> Tensor[(6, 9, 8), float64] {
    %191 = cast(%var_2367, dtype="float64") /* ty=Tensor[(6, 9, 8), float64] */;
    exp(%191) /* ty=Tensor[(6, 9, 8), float64] */
  };
  %192(%var_2391) /* ty=Tensor[(6, 9, 8), float64] */
}

def @func_1236() -> Tensor[(16, 2, 1), float32] {
  %196 = fn () -> Tensor[(16, 2, 1), float32] {
    %193 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
    %194 = tan(%193) /* ty=Tensor[(16, 2, 1), float64] */;
    %195 = cast(%194, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
    cosh(%195) /* ty=Tensor[(16, 2, 1), float32] */
  };
  %196() /* ty=Tensor[(16, 2, 1), float32] */
}

def @func_2104(%var_2085: Tensor[(720), int32]) -> (Tensor[(16, 4, 13), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(12, 4, 15), int32], Tensor[(720), int32], Tensor[(?, 1521), float64]) {
  %197 = cast(-8.72897f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %198 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  %199 = cast(meta[relay.Constant][15] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %200 = reshape(%199, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %201 = cast(-8.72897f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %202 = cast(%var_2085, dtype="int32") /* ty=Tensor[(720), int32] */;
  %203 = reshape(%201, newshape=[]) /* ty=int32 */;
  %204 = reshape(%202, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), int32] */;
  %205 = floor_mod(%197, %198) /* ty=Tensor[(16, 4, 13), float64] */;
  %206 = @func_690(%200) /* ty=Tensor[(3, 14, 10), float64] */;
  %207 = @func_1376(%203, %204) /* ty=Tensor[(12, 4, 15), int32] */;
  %208 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  (%205, %206, meta[relay.Constant][15] /* ty=Tensor[(420), float64] */, %207, %var_2085, %208)
}

def @func_2982() -> (Tensor[(16, 2, 1), float32],) {
  @func_2980() /* ty=(Tensor[(16, 2, 1), float32],) */
}

def @func_3802() -> Tensor[(15, 6, 16), bool] {
  %209 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 6, 16), bool] */, dtype="bool") /* ty=Tensor[(1, 6, 16), bool] */;
  %210 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 6, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 6, 16), bool] */;
  logical_or(%209, %210) /* ty=Tensor[(15, 6, 16), bool] */
}

def @func_3220() -> Tensor[(16, 2, 1), float32] {
  %211 = @func_2763() /* ty=(Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
  %211.0
}

def @func_2005() -> Tensor[(16, 2, 1), float32] {
  @func_2003() /* ty=Tensor[(16, 2, 1), float32] */
}

def @func_3409(%var_3339: Tensor[(7, 6, 11), int64], %var_3340: Tensor[(7, 6, 11), int64], %var_3398: Tensor[(16, 2, 14), float64]) -> (Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(1650), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 14), uint64], Tensor[(7, 6, 11), int8]) {
  %212 = cast(meta[relay.Constant][18] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %213 = reshape(%212, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
  %214 = @func_1525(%213) /* ty=(Tensor[(1, 11, 11), float32],) */;
  %215 = @func_2814() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) */;
  %216 = %215.0;
  %217 = cast(%var_3398, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %221 = cast(%var_3339, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %222 = cos(%221) /* ty=Tensor[(7, 6, 11), float32] */;
  %223 = cast(%var_3340, dtype="int64") /* ty=Tensor[(7, 6, 11), int64] */;
  %224 = shape_of(%var_3339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%var_3339, dtype="int64") /* ty=Tensor[(7, 6, 11), int64] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %227 = right_shift(%225, %226) /* ty=Tensor[(7, 6, 11), int64] */;
  %228 = cast(%222, dtype="int16") /* ty=Tensor[(7, 6, 11), int16] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="int16") /* ty=Tensor[(7, 6, 11), int16] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %232 = maximum(%230, %231) /* ty=Tensor[(7, 6, 11), int16] */;
  %233 = cast(%232, dtype="int8") /* ty=Tensor[(7, 6, 11), int8] */;
  %234 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%222, dtype="int8") /* ty=Tensor[(7, 6, 11), int8] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %237 = %214.0;
  %238 = @func_2538() /* ty=Tensor[(1650), float32] */;
  %239 = @func_3220() /* ty=Tensor[(16, 2, 1), float32] */;
  %240 = add(%219, %220) /* ty=Tensor[(16, 2, 14), uint64] */;
  %241 = add(%235, %236) /* ty=Tensor[(7, 6, 11), int8] */;
  (%237, meta[relay.Constant][18] /* ty=Tensor[(121), float32] */, %238, %239, %240, %241)
}

def @func_4507() -> (Tensor[(1650), float32],) {
  %242 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
  %243 = %242.3;
  (%243,)
}

def @func_1488() -> Tensor[(1650), int16] {
  @func_1486() /* ty=Tensor[(1650), int16] */
}

def @func_1450(%var_1446: Tensor[(6, 14, 12), float64], %var_1447: Tensor[(6, 14, 12), float64], %var_1448: Tensor[(1755), int16], %var_1449: Tensor[(3360), float32]) -> (Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) {
  @func_1444(%var_1446, %var_1447, %var_1448, %var_1449) /* ty=(Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) */
}

def @func_891(%var_890: Tensor[(8, 14, 13), float32]) -> Tensor[(8, 14, 13), float32] {
  %245 = fn (%var_884: Tensor[(8, 14, 13), float32]) -> Tensor[(8, 14, 13), float32] {
    %244 = cast(%var_884, dtype="float32") /* ty=Tensor[(8, 14, 13), float32] */;
    cos(%244) /* ty=Tensor[(8, 14, 13), float32] */
  };
  %245(%var_890) /* ty=Tensor[(8, 14, 13), float32] */
}

def @func_1150(%var_1142: Tensor[(11, 11, 1), uint64], %var_1143: Tensor[(11, 11, 3), uint64]) -> (Tensor[(11, 11, 3), uint64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) {
  %246 = cast(%var_1142, dtype="uint64") /* ty=Tensor[(11, 11, 1), uint64] */;
  %247 = cast(%var_1143, dtype="uint64") /* ty=Tensor[(11, 11, 3), uint64] */;
  %248 = cast(meta[relay.Constant][19] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %249 = reshape(%248, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
  %250 = @func_187(%249) /* ty=(Tensor[(15, 16, 14), float32],) */;
  %251 = logical_xor(%246, %247) /* ty=Tensor[(11, 11, 3), uint64] */;
  %252 = %250.0;
  (%251, %252, meta[relay.Constant][19] /* ty=Tensor[(3360), float32] */)
}

def @func_1827() -> (Tensor[(16, 2, 1), float32],) {
  %254 = fn () -> (Tensor[(16, 2, 1), float32],) {
    %253 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
    (%253,)
  };
  %254() /* ty=(Tensor[(16, 2, 1), float32],) */
}

def @func_400(%var_398: Tensor[(10, 15, 11), uint64], %var_399: Tensor[(10, 15, 11), uint64]) -> (Tensor[(10, 15, 11), uint64],) {
  @func_396(%var_398, %var_399) /* ty=(Tensor[(10, 15, 11), uint64],) */
}

def @func_2540() -> Tensor[(1650), float32] {
  @func_2538() /* ty=Tensor[(1650), float32] */
}

def @func_2249(%var_2162: Tensor[(12, 14, 9), int8], %var_2163: Tensor[(12, 14, 9), int8], %var_2173: Tensor[(3360), float32], %var_2176: Tensor[(12, 14, 9), int8], %var_2193: Tensor[(121), float32]) -> (Tensor[(12, 14, 9), bool], Tensor[(3360), float32], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32], Tensor[(12, 14, 9), int32], Tensor[(121), int16], Tensor[(6, 15, 14), int32], Tensor[(1260, 1), int32], Tensor[(?, 1521), float64], Tensor[(121), float32]) {
  %255 = cast(%var_2163, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %256 = shape_of(%var_2162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_2162, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %260 = cast(meta[relay.Constant][20] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %261 = cast(meta[relay.Constant][21] /* ty=Tensor[(1755), int16] */, dtype="int16") /* ty=Tensor[(1755), int16] */;
  %262 = cast(%var_2173, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %263 = reshape(%259, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
  %264 = reshape(%260, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
  %265 = reshape(%261, newshape=[1755]) /* ty=Tensor[(1755), int16] */;
  %266 = reshape(%262, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %267 = @func_1444(%263, %264, %265, %266) /* ty=(Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) */;
  %268 = cast(%var_2176, dtype="int32") /* ty=Tensor[(12, 14, 9), int32] */;
  %269 = shape_of(%var_2163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_2163, dtype="int32") /* ty=Tensor[(12, 14, 9), int32] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %272 = cast(%var_2193, dtype="float32") /* ty=Tensor[(121), float32] */;
  %273 = tan(%272) /* ty=Tensor[(121), float32] */;
  %274 = cast(%var_2193, dtype="float32") /* ty=Tensor[(121), float32] */;
  %275 = reshape(%274, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
  %276 = @func_1525(%275) /* ty=(Tensor[(1, 11, 11), float32],) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="int16") /* ty=Tensor[(1, 11, 11), int16] */;
  %279 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
  %280 = cast(%273, dtype="int16") /* ty=Tensor[(121), int16] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?), int16] */;
  %282 = cast(meta[relay.Constant][22] /* ty=Tensor[(1260, 1), int32] */, dtype="int32") /* ty=Tensor[(1260, 1), int32] */;
  %283 = reshape(%282, newshape=[6, 15, 14]) /* ty=Tensor[(6, 15, 14), int32] */;
  %284 = @func_1991(%283) /* ty=(Tensor[(6, 15, 14), int32],) */;
  %285 = cast(%277, dtype="uint16") /* ty=Tensor[(1, 11, 11), uint16] */;
  %286 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
  %287 = cast(%273, dtype="uint16") /* ty=Tensor[(121), uint16] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %289 = left_shift(%287, %288) /* ty=Tensor[(121), uint16] */;
  %290 = cast(%289, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %291 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
  %292 = cast(%273, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %294 = bitwise_and(%292, %293) /* ty=Tensor[(121), uint64] */;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(121), float32] */;
  %296 = not_equal(%257, %258) /* ty=Tensor[(12, 14, 9), bool] */;
  %297 = %267.8;
  %298 = bitwise_xor(%270, %271) /* ty=Tensor[(12, 14, 9), int32] */;
  %299 = maximum(%280, %281) /* ty=Tensor[(121), int16] */;
  %300 = %284.0;
  %301 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
  %302 = cosh(%295) /* ty=Tensor[(121), float32] */;
  (%296, %297, meta[relay.Constant][20] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][21] /* ty=Tensor[(1755), int16] */, %var_2173, %298, %299, %300, meta[relay.Constant][22] /* ty=Tensor[(1260, 1), int32] */, %301, %302)
}

def @func_1895(%var_1870: Tensor[(15, 13, 6), int16], %var_1871: Tensor[(15, 13, 6), int16]) -> (Tensor[(15, 13, 6), int16],) {
  %303 = cast(%var_1871, dtype="int16") /* ty=Tensor[(15, 13, 6), int16] */;
  %304 = shape_of(%var_1870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_1870, dtype="int16") /* ty=Tensor[(15, 13, 6), int16] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %307 = minimum(%305, %306) /* ty=Tensor[(15, 13, 6), int16] */;
  (%307,)
}

def @func_3117(%var_3116: Tensor[(840, 16), bool]) -> (Tensor[(16, 2, ?), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(840, 16), bool]) {
  %319 = fn (%var_3110: Tensor[(840, 16), bool]) -> (Tensor[(16, 2, ?), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(840, 16), bool]) {
    %308 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
    %309 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %310 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %311 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
    %312 = %311.2;
    %313 = cast(%312, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %314 = cast(%var_3110, dtype="bool") /* ty=Tensor[(840, 16), bool] */;
    %315 = %308.0;
    %316 = %309.0;
    %317 = %310.0;
    %318 = greater_equal(%313, %314) /* ty=Tensor[(840, 16), bool] */;
    (%315, %316, %317, %318)
  };
  %319(%var_3116) /* ty=(Tensor[(16, 2, ?), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(840, 16), bool]) */
}

def @func_2319() -> Tensor[(?, 1521), float64] {
  %321 = fn () -> Tensor[(?, 1521), float64] {
    %320 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
    %320.2
  };
  %321() /* ty=Tensor[(?, 1521), float64] */
}

def @func_1834() -> (Tensor[(?, 1521), float64],) {
  %323 = fn () -> (Tensor[(?, 1521), float64],) {
    %322 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
    (%322,)
  };
  %323() /* ty=(Tensor[(?, 1521), float64],) */
}

def @func_2527(%var_2526: Tensor[(16, 2, 6), int32]) -> (Tensor[(16, 2, 6), float64], Tensor[(16, 2, 6), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) {
  %347 = fn (%var_2485: Tensor[(16, 2, 6), int32]) -> (Tensor[(16, 2, 6), float64], Tensor[(16, 2, 6), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) {
    %324 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
    %325 = %324.0;
    %326 = cast(%325, dtype="bool") /* ty=Tensor[(16, 2, ?), bool] */;
    %327 = cast(%var_2485, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
    %328 = not_equal(%326, %327) /* ty=Tensor[(16, 2, 6), bool] */;
    %329 = cast(%328, dtype="int64") /* ty=Tensor[(16, 2, 6), int64] */;
    %330 = shape_of(%var_2485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %331 = cast(%var_2485, dtype="int64") /* ty=Tensor[(16, 2, 6), int64] */;
    %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %333 = maximum(%331, %332) /* ty=Tensor[(16, 2, 6), int64] */;
    %334 = cast(%333, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
    %335 = sigmoid(%334) /* ty=Tensor[(16, 2, 6), float32] */;
    %336 = cast(%335, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
    %337 = cast(%335, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
    %338 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %339 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
    %340 = @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %341 = log2(%336) /* ty=Tensor[(16, 2, 6), float64] */;
    %342 = acos(%337) /* ty=Tensor[(16, 2, 6), float32] */;
    %343 = %338.0;
    %344 = %339.1;
    %345 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
    %346 = %340.0;
    (%341, %342, %343, %344, %345, %346)
  };
  %347(%var_2526) /* ty=(Tensor[(16, 2, 6), float64], Tensor[(16, 2, 6), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32], Tensor[(16, 2, 1), float32]) */
}

def @func_1444(%var_1407: Tensor[(6, 14, 12), float64], %var_1408: Tensor[(6, 14, 12), float64], %var_1421: Tensor[(1755), int16], %var_1434: Tensor[(3360), float32]) -> (Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) {
  %348 = cast(%var_1408, dtype="float64") /* ty=Tensor[(6, 14, 12), float64] */;
  %349 = shape_of(%var_1407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_1407, dtype="float64") /* ty=Tensor[(6, 14, 12), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %352 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 728), float32] */, dtype="float32") /* ty=Tensor[(2, 728), float32] */;
  %353 = reshape(%352, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), float32] */;
  %354 = cast(meta[relay.Constant][24] /* ty=Tensor[(195), int16] */, dtype="int16") /* ty=Tensor[(195), int16] */;
  %355 = cast(%var_1421, dtype="int16") /* ty=Tensor[(1755), int16] */;
  %356 = reshape(%354, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int16] */;
  %357 = reshape(%355, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int16] */;
  %358 = @func_840(%356, %357) /* ty=(Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) */;
  %359 = cast(meta[relay.Constant][25] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %360 = reshape(%359, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %361 = cast(%var_1434, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %362 = reshape(%361, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
  %363 = @func_187(%362) /* ty=(Tensor[(15, 16, 14), float32],) */;
  %364 = cast(%var_1421, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %365 = floor_mod(%350, %351) /* ty=Tensor[(6, 14, 12), float64] */;
  %366 = @func_889(%353) /* ty=Tensor[(8, 14, 13), float32] */;
  %367 = %358.0;
  %368 = @func_690(%360) /* ty=Tensor[(3, 14, 10), float64] */;
  %369 = %363.0;
  %370 = cosh(%364) /* ty=Tensor[(1755), float64] */;
  (%365, %366, meta[relay.Constant][23] /* ty=Tensor[(2, 728), float32] */, %367, meta[relay.Constant][24] /* ty=Tensor[(195), int16] */, %368, meta[relay.Constant][25] /* ty=Tensor[(420), float64] */, %369, %var_1434, %370)
}

def @func_1599() -> (Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) {
  @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */
}

def @func_1154(%var_1152: Tensor[(11, 11, 1), uint64], %var_1153: Tensor[(11, 11, 3), uint64]) -> (Tensor[(11, 11, 3), uint64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) {
  @func_1150(%var_1152, %var_1153) /* ty=(Tensor[(11, 11, 3), uint64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */
}

def @func_690(%var_685: Tensor[(3, 14, 10), float64]) -> Tensor[(3, 14, 10), float64] {
  %371 = cast(%var_685, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  %372 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(3, 14, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%373, %374) /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_2764() -> (Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) {
  %381 = fn () -> (Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) {
    %375 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %376 = cast(meta[relay.Constant][27] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %377 = reshape(%376, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
    %378 = @func_187(%377) /* ty=(Tensor[(15, 16, 14), float32],) */;
    %379 = %375.0;
    %380 = %378.0;
    (%379, %380, meta[relay.Constant][27] /* ty=Tensor[(3360), float32] */)
  };
  %381() /* ty=(Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */
}

def @func_2980() -> (Tensor[(16, 2, 1), float32],) {
  %382 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
  (%382,)
}

def @func_3625() -> (Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) {
  @func_3623() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) */
}

def @func_4017(%var_4015: Tensor[(16, 2, 16), int32], %var_4016: Tensor[(840), bool]) -> (Tensor[(16, 2, 16), float64], Tensor[(?, 1521), float64], Tensor[(10, 15, 11), uint64], Tensor[(16, 2, 840), int64], Tensor[(15, 16, 14), float32]) {
  %404 = fn (%var_3952: Tensor[(16, 2, 16), int32], %var_3969: Tensor[(840), bool]) -> (Tensor[(16, 2, 16), float64], Tensor[(?, 1521), float64], Tensor[(10, 15, 11), uint64], Tensor[(16, 2, 840), int64], Tensor[(15, 16, 14), float32]) {
    %383 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
    %384 = %383.0;
    %385 = cast(%384, dtype="float64") /* ty=Tensor[(16, 2, ?), float64] */;
    %386 = cast(%var_3952, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
    %387 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
    %388 = cast(%var_3969, dtype="bool") /* ty=Tensor[(840), bool] */;
    %389 = cast(%var_3969, dtype="bool") /* ty=Tensor[(840), bool] */;
    %390 = reshape(%388, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
    %391 = reshape(%389, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
    %392 = @func_422(%390, %391) /* ty=(Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) */;
    %393 = cast(%var_3969, dtype="float32") /* ty=Tensor[(840), float32] */;
    %394 = cast(%384, dtype="float32") /* ty=Tensor[(16, 2, ?), float32] */;
    %395 = maximum(%393, %394) /* ty=Tensor[(16, 2, 840), float32] */;
    %396 = cast(%var_3969, dtype="int64") /* ty=Tensor[(840), int64] */;
    %397 = cast(%395, dtype="int64") /* ty=Tensor[(16, 2, 840), int64] */;
    %398 = @func_2763() /* ty=(Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
    %399 = mod(%385, %386) /* ty=Tensor[(16, 2, 16), float64] */;
    %400 = %387.2;
    %401 = %392.1;
    %402 = left_shift(%396, %397) /* ty=Tensor[(16, 2, 840), int64] */;
    %403 = %398.1;
    (%399, %400, %401, %402, %403)
  };
  %404(%var_4015, %var_4016) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(?, 1521), float64], Tensor[(10, 15, 11), uint64], Tensor[(16, 2, 840), int64], Tensor[(15, 16, 14), float32]) */
}

def @func_3804() -> Tensor[(15, 6, 16), bool] {
  @func_3802() /* ty=Tensor[(15, 6, 16), bool] */
}

def @func_4614(%var_4595: Tensor[(768), uint8]) -> (Tensor[(16, 2, 1), float32], Tensor[(13, 1521), float64], Tensor[(4, 16), float64], Tensor[(16, 2, 1), float32], Tensor[(768), uint8], Tensor[(13, 9, 13), float64], Tensor[(1, 1521), uint32], Tensor[(10, 13, 7), float32]) {
  %405 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %406 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %407 = reshape(%406, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %408 = @func_3574(%407) /* ty=(Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) */;
  %409 = cast(%var_4595, dtype="uint8") /* ty=Tensor[(768), uint8] */;
  %410 = %405.0;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %412 = reshape(%409, newshape=[192, 4]) /* ty=Tensor[(192, 4), uint8] */;
  %413 = reshape(%411, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
  %414 = @func_2711(%412, %413) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) */;
  %415 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %416 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %417 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %418 = reshape(%415, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %419 = reshape(%416, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %420 = reshape(%417, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %421 = @func_1552(%418, %419, %420) /* ty=(Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) */;
  %422 = @func_4062() /* ty=(Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(10, 13, 7), float32]) */;
  %423 = %408.1;
  %424 = %414.0;
  %425 = %421.1;
  %426 = %422.2;
  (%410, %423, meta[relay.Constant][28] /* ty=Tensor[(4, 16), float64] */, %424, %var_4595, %425, meta[relay.Constant][29] /* ty=Tensor[(1, 1521), uint32] */, %426)
}

def @func_189(%var_188: Tensor[(15, 16, 14), float32]) -> (Tensor[(15, 16, 14), float32],) {
  %429 = fn (%var_179: Tensor[(15, 16, 14), float32]) -> (Tensor[(15, 16, 14), float32],) {
    %427 = cast(%var_179, dtype="float32") /* ty=Tensor[(15, 16, 14), float32] */;
    %428 = log2(%427) /* ty=Tensor[(15, 16, 14), float32] */;
    (%428,)
  };
  %429(%var_188) /* ty=(Tensor[(15, 16, 14), float32],) */
}

def @func_1743(%var_1740: Tensor[(16, 2, 1), float32], %var_1741: Tensor[(16, 2, 2), float64], %var_1742: Tensor[(1, 1521), float64]) -> (Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) {
  %455 = fn (%var_1687: Tensor[(16, 2, 1), float32], %var_1702: Tensor[(16, 2, 2), float64], %var_1715: Tensor[(1, 1521), float64]) -> (Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) {
    %430 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
    %431 = %430.1;
    %432 = cast(%var_1687, dtype="uint32") /* ty=Tensor[(16, 2, 1), uint32] */;
    %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(%431, dtype="uint32") /* ty=Tensor[(16, 2, 1), uint32] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %436 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
    %437 = %436.1;
    %438 = cast(%var_1715, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
    %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(2), int32] */;
    %440 = cast(%437, dtype="int16") /* ty=Tensor[(?, 1521), int16] */;
    %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %442 = cast(%var_1687, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
    %443 = exp(%442) /* ty=Tensor[(16, 2, 1), float64] */;
    %444 = cast(%443, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
    %445 = cast(%var_1702, dtype="float64") /* ty=Tensor[(16, 2, 2), float64] */;
    %446 = floor_mod(%444, %445) /* ty=Tensor[(16, 2, 2), float64] */;
    %447 = cast(%446, dtype="uint8") /* ty=Tensor[(16, 2, 2), uint8] */;
    %448 = cast(%431, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
    %449 = cast(meta[relay.Constant][30] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %450 = reshape(%449, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
    %451 = bitwise_or(%434, %435) /* ty=Tensor[(16, 2, ?), uint32] */;
    %452 = bitwise_or(%440, %441) /* ty=Tensor[(?, 1521), int16] */;
    %453 = bitwise_xor(%447, %448) /* ty=Tensor[(16, 2, 2), uint8] */;
    %454 = @func_690(%450) /* ty=Tensor[(3, 14, 10), float64] */;
    (%451, %452, %453, %454, meta[relay.Constant][30] /* ty=Tensor[(420), float64] */)
  };
  %455(%var_1740, %var_1741, %var_1742) /* ty=(Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */
}

def @func_1345() -> (Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) {
  %471 = fn () -> (Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) {
    %456 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
    %457 = cast(%456, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
    %458 = sin(%457) /* ty=Tensor[(16, 2, 1), float64] */;
    %459 = cast(%456, dtype="int32") /* ty=Tensor[(16, 2, 1), int32] */;
    %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%458, dtype="int32") /* ty=Tensor[(16, 2, 1), int32] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %463 = cast(meta[relay.Constant][31] /* ty=Tensor[(840, 1), bool] */, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %464 = cast(meta[relay.Constant][31] /* ty=Tensor[(840, 1), bool] */, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %465 = reshape(%463, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
    %466 = reshape(%464, newshape=[4, 15, 14]) /* ty=Tensor[(4, 15, 14), bool] */;
    %467 = @func_422(%465, %466) /* ty=(Tensor[(4, 15, 14), float64], Tensor[(10, 15, 11), uint64], Tensor[(1650), uint64]) */;
    %468 = subtract(%461, %462) /* ty=Tensor[(16, 2, ?), int32] */;
    %469 = %467.2;
    %470 = @func_1235() /* ty=Tensor[(16, 2, 1), float32] */;
    (%468, %469, meta[relay.Constant][31] /* ty=Tensor[(840, 1), bool] */, %470)
  };
  %471() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */
}

def @func_2848() -> (Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) {
  %486 = fn () -> (Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) {
    %472 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 192), uint8] */, dtype="uint8") /* ty=Tensor[(4, 192), uint8] */;
    %473 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 16), float32] */;
    %474 = reshape(%472, newshape=[192, 4]) /* ty=Tensor[(192, 4), uint8] */;
    %475 = reshape(%473, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
    %476 = @func_2711(%474, %475) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) */;
    %477 = @func_1486() /* ty=Tensor[(1650), int16] */;
    %478 = cast(meta[relay.Constant][34] /* ty=Tensor[(1650), int16] */, dtype="float32") /* ty=Tensor[(1650), float32] */;
    %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(1), int32] */;
    %480 = cast(%477, dtype="float32") /* ty=Tensor[(1650), float32] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?), float32] */;
    %482 = @func_2763() /* ty=(Tensor[(16, 2, 1), float32], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
    %483 = %476.4;
    %484 = floor_divide(%480, %481) /* ty=Tensor[(1650), float32] */;
    %485 = %482.2;
    (%483, meta[relay.Constant][32] /* ty=Tensor[(4, 192), uint8] */, meta[relay.Constant][33] /* ty=Tensor[(2, 16), float32] */, %484, %485)
  };
  %486() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */
}

def @func_1486() -> Tensor[(1650), int16] {
  %487 = @func_1344() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(1650), uint64], Tensor[(840, 1), bool], Tensor[(16, 2, 1), float32]) */;
  %488 = %487.1;
  %489 = cast(meta[relay.Constant][35] /* ty=Tensor[(1650), uint64] */, dtype="int16") /* ty=Tensor[(1650), int16] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(1), int32] */;
  %491 = cast(%488, dtype="int16") /* ty=Tensor[(1650), int16] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?), int16] */;
  minimum(%491, %492) /* ty=Tensor[(1650), int16] */
}

def @func_2304(%var_2302: Tensor[(12, 14, 4), uint8], %var_2303: Tensor[(12, 14, 4), uint8]) -> (Tensor[(12, 14, 4), uint8],) {
  @func_2300(%var_2302, %var_2303) /* ty=(Tensor[(12, 14, 4), uint8],) */
}

def @func_4281() -> (Tensor[(16, 2, 1), float32],) {
  @func_4279() /* ty=(Tensor[(16, 2, 1), float32],) */
}

def @func_4403(%var_4401: Tensor[(2, 728), float32], %var_4402: Tensor[(121), uint64]) -> (Tensor[(16, 2, 1), float32], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(3360), float32], Tensor[(121), uint64], Tensor[(363), uint64], Tensor[(16, 2, 1), float64], Tensor[(1, 11, 11), float32], Tensor[(64), float64]) {
  %512 = fn (%var_4362: Tensor[(2, 728), float32], %var_4370: Tensor[(121), uint64]) -> (Tensor[(16, 2, 1), float32], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(3360), float32], Tensor[(121), uint64], Tensor[(363), uint64], Tensor[(16, 2, 1), float64], Tensor[(1, 11, 11), float32], Tensor[(64), float64]) {
    %493 = @func_4279() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %494 = cast(%var_4362, dtype="float32") /* ty=Tensor[(2, 728), float32] */;
    %495 = reshape(%494, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), float32] */;
    %496 = cast(%var_4370, dtype="uint64") /* ty=Tensor[(121), uint64] */;
    %497 = cast(meta[relay.Constant][36] /* ty=Tensor[(363), uint64] */, dtype="uint64") /* ty=Tensor[(363), uint64] */;
    %498 = reshape(%496, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), uint64] */;
    %499 = reshape(%497, newshape=[11, 11, 3]) /* ty=Tensor[(11, 11, 3), uint64] */;
    %500 = @func_1150(%498, %499) /* ty=(Tensor[(11, 11, 3), uint64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32]) */;
    %501 = @func_3623() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) */;
    %502 = %501.3;
    %503 = cast(%502, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
    %504 = cast(meta[relay.Constant][37] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %505 = reshape(%504, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
    %506 = @func_3574(%505) /* ty=(Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) */;
    %507 = %493.0;
    %508 = @func_889(%495) /* ty=Tensor[(8, 14, 13), float32] */;
    %509 = %500.2;
    %510 = cos(%503) /* ty=Tensor[(16, 2, 1), float64] */;
    %511 = %506.3;
    (%507, %508, %var_4362, %509, %var_4370, meta[relay.Constant][36] /* ty=Tensor[(363), uint64] */, %510, %511, meta[relay.Constant][37] /* ty=Tensor[(64), float64] */)
  };
  %512(%var_4401, %var_4402) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(3360), float32], Tensor[(121), uint64], Tensor[(363), uint64], Tensor[(16, 2, 1), float64], Tensor[(1, 11, 11), float32], Tensor[(64), float64]) */
}

def @func_3527() -> (Tensor[(13, 9, 15), int16], Tensor[(3, 3), float32], Tensor[(288), float32], Tensor[(16, 2, 195), int32]) {
  %534 = fn () -> (Tensor[(13, 9, 15), int16], Tensor[(3, 3), float32], Tensor[(288), float32], Tensor[(16, 2, 195), int32]) {
    %513 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 3), float32] */;
    %514 = cast(meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %515 = cast(meta[relay.Constant][40] /* ty=Tensor[(195), int16] */, dtype="int16") /* ty=Tensor[(195), int16] */;
    %516 = reshape(%513, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), float32] */;
    %517 = reshape(%514, newshape=[2, 9, 16]) /* ty=Tensor[(2, 9, 16), float32] */;
    %518 = reshape(%515, newshape=[195]) /* ty=Tensor[(195), int16] */;
    %519 = @func_1203(%516, %517, %518) /* ty=(Tensor[(2, 9, 16), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(1755), float64]) */;
    %520 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
    %521 = cast(meta[relay.Constant][40] /* ty=Tensor[(195), int16] */, dtype="bool") /* ty=Tensor[(195), bool] */;
    %522 = cast(%520, dtype="bool") /* ty=Tensor[(16, 2, 1), bool] */;
    %523 = logical_or(%521, %522) /* ty=Tensor[(16, 2, 195), bool] */;
    %524 = cast(%523, dtype="float32") /* ty=Tensor[(16, 2, 195), float32] */;
    %525 = sin(%524) /* ty=Tensor[(16, 2, 195), float32] */;
    %526 = cast(%525, dtype="float32") /* ty=Tensor[(16, 2, 195), float32] */;
    %527 = atan(%526) /* ty=Tensor[(16, 2, 195), float32] */;
    %528 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 2, 195), float32] */, dtype="int32") /* ty=Tensor[(16, 2, 195), int32] */;
    %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
    %530 = cast(%527, dtype="int32") /* ty=Tensor[(16, 2, 195), int32] */;
    %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %532 = %519.1;
    %533 = maximum(%530, %531) /* ty=Tensor[(16, 2, 195), int32] */;
    (%532, meta[relay.Constant][38] /* ty=Tensor[(3, 3), float32] */, meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, %533)
  };
  %534() /* ty=(Tensor[(13, 9, 15), int16], Tensor[(3, 3), float32], Tensor[(288), float32], Tensor[(16, 2, 195), int32]) */
}

def @func_4509() -> (Tensor[(1650), float32],) {
  @func_4507() /* ty=(Tensor[(1650), float32],) */
}

def @func_296(%var_294: Tensor[(4, 2, 2), float32], %var_295: Tensor[(2, 1680), float32]) -> (Tensor[(4, 2, 2), float32], Tensor[(15, 16, 14), float32], Tensor[(2, 1680), float32]) {
  %541 = fn (%var_279: Tensor[(4, 2, 2), float32], %var_285: Tensor[(2, 1680), float32]) -> (Tensor[(4, 2, 2), float32], Tensor[(15, 16, 14), float32], Tensor[(2, 1680), float32]) {
    %535 = cast(%var_279, dtype="float32") /* ty=Tensor[(4, 2, 2), float32] */;
    %536 = cast(%var_285, dtype="float32") /* ty=Tensor[(2, 1680), float32] */;
    %537 = reshape(%536, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float32] */;
    %538 = @func_187(%537) /* ty=(Tensor[(15, 16, 14), float32],) */;
    %539 = sin(%535) /* ty=Tensor[(4, 2, 2), float32] */;
    %540 = %538.0;
    (%539, %540, %var_285)
  };
  %541(%var_294, %var_295) /* ty=(Tensor[(4, 2, 2), float32], Tensor[(15, 16, 14), float32], Tensor[(2, 1680), float32]) */
}

def @func_1991(%var_1985: Tensor[(6, 15, 14), int32]) -> (Tensor[(6, 15, 14), int32],) {
  %542 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 15, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 15, 14), int32] */;
  %543 = shape_of(%var_1985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_1985, dtype="int32") /* ty=Tensor[(6, 15, 14), int32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %546 = add(%544, %545) /* ty=Tensor[(6, 15, 14), int32] */;
  (%546,)
}

def @func_3623() -> (Tensor[(16, 2, ?), float32], Tensor[(16, 2, ?), uint8], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 1), float32]) {
  %547 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
  %548 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %549 = %548.1;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %551 = atan(%550) /* ty=Tensor[(16, 2, 1), float32] */;
  %552 = cast(%551, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
  %553 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%549, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %556 = @func_2814() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) */;
  %557 = @func_1826() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %558 = %547.0;
  %559 = logical_xor(%554, %555) /* ty=Tensor[(16, 2, ?), uint8] */;
  %560 = %556.3;
  %561 = %557.0;
  (%558, %559, %560, %561)
}

def @func_1956() -> Tensor[(16, 2, 1), float32] {
  %562 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
  %562.1
}

def @func_2538() -> Tensor[(1650), float32] {
  %563 = @func_1486() /* ty=Tensor[(1650), int16] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(1650), float32] */;
  asinh(%564) /* ty=Tensor[(1650), float32] */
}

def @func_2816() -> (Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) {
  @func_2814() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) */
}

def @func_3919() -> (Tensor[(16, 2, 1), float32],) {
  %565 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
  (%565,)
}

def @func_2619(%var_2617: float64, %var_2618: Tensor[(13, 7, 4), float64]) -> (Tensor[(13, 7, 4), float32], Tensor[(13, 7, 4), bool]) {
  %574 = fn (%var_2594: float64, %var_2595: Tensor[(13, 7, 4), float64]) -> (Tensor[(13, 7, 4), float32], Tensor[(13, 7, 4), bool]) {
    %566 = cast(%var_2594, dtype="float64") /* ty=float64 */;
    %567 = cast(%var_2595, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
    %568 = power(%566, %567) /* ty=Tensor[(13, 7, 4), float64] */;
    %569 = cast(%568, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
    %570 = cast(%var_2595, dtype="bool") /* ty=Tensor[(13, 7, 4), bool] */;
    %571 = cast(%var_2594, dtype="bool") /* ty=bool */;
    %572 = log2(%569) /* ty=Tensor[(13, 7, 4), float32] */;
    %573 = less(%570, %571) /* ty=Tensor[(13, 7, 4), bool] */;
    (%572, %573)
  };
  %574(%var_2617, %var_2618) /* ty=(Tensor[(13, 7, 4), float32], Tensor[(13, 7, 4), bool]) */
}

def @func_2593() -> (Tensor[(16, 2, 1), float64], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float64]) {
  %579 = fn () -> (Tensor[(16, 2, 1), float64], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float64]) {
    %575 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
    %576 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
    %577 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
    %578 = @func_2130() /* ty=Tensor[(16, 2, 1), float64] */;
    (%575, %576, %577, %578)
  };
  %579() /* ty=(Tensor[(16, 2, 1), float64], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64], Tensor[(16, 2, 1), float64]) */
}

def @func_3644(%var_3642: Tensor[(3360, 1), float32]) -> (Tensor[(15, 3, 14), float64], Tensor[(12, 14, 9), int32], Tensor[(1512), int8], Tensor[(3360, 1), float32], Tensor[(121), float32]) {
  @func_3641(%var_3642) /* ty=(Tensor[(15, 3, 14), float64], Tensor[(12, 14, 9), int32], Tensor[(1512), int8], Tensor[(3360, 1), float32], Tensor[(121), float32]) */
}

def @func_843(%var_841: Tensor[(13, 1, 15), int16], %var_842: Tensor[(13, 9, 15), int16]) -> (Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) {
  %585 = fn (%var_820: Tensor[(13, 1, 15), int16], %var_821: Tensor[(13, 9, 15), int16]) -> (Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) {
    %580 = cast(%var_820, dtype="int16") /* ty=Tensor[(13, 1, 15), int16] */;
    %581 = cast(%var_821, dtype="int16") /* ty=Tensor[(13, 9, 15), int16] */;
    %582 = cast(%var_820, dtype="float64") /* ty=Tensor[(13, 1, 15), float64] */;
    %583 = subtract(%580, %581) /* ty=Tensor[(13, 9, 15), int16] */;
    %584 = asinh(%582) /* ty=Tensor[(13, 1, 15), float64] */;
    (%583, %584)
  };
  %585(%var_841, %var_842) /* ty=(Tensor[(13, 9, 15), int16], Tensor[(13, 1, 15), float64]) */
}

def @func_2107(%var_2105: Tensor[(720), int32]) -> (Tensor[(16, 4, 13), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(12, 4, 15), int32], Tensor[(720), int32], Tensor[(?, 1521), float64]) {
  @func_2104(%var_2105) /* ty=(Tensor[(16, 4, 13), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(12, 4, 15), int32], Tensor[(720), int32], Tensor[(?, 1521), float64]) */
}

def @func_1597() -> (Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) {
  %586 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %587 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %588 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 1521), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1521), uint32] */;
  %589 = reshape(%586, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %590 = reshape(%587, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %591 = reshape(%588, newshape=[13, 9, 13]) /* ty=Tensor[(13, 9, 13), uint32] */;
  %592 = @func_1552(%589, %590, %591) /* ty=(Tensor[(13, 9, 13), uint32], Tensor[(13, 9, 13), float64]) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %595 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(1, 1521), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %596 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 1521), uint32] */, dtype="float64") /* ty=Tensor[(1, 1521), float64] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %598 = cast(%593, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %599 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(1, 1521), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %600 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 1521), uint32] */, dtype="float64") /* ty=Tensor[(1, 1521), float64] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %602 = @func_1486() /* ty=Tensor[(1650), int16] */;
  %603 = divide(%596, %597) /* ty=Tensor[(?, 1521), float64] */;
  %604 = floor_mod(%600, %601) /* ty=Tensor[(?, 1521), float64] */;
  (%602, %603, %604)
}

def @func_2711(%var_2655: Tensor[(192, 4), uint8], %var_2688: Tensor[(16, 2, 1), float32]) -> (Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) {
  %605 = @func_1956() /* ty=Tensor[(16, 2, 1), float32] */;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %607 = sqrt(%606) /* ty=Tensor[(16, 2, 1), float32] */;
  %608 = cast(%var_2655, dtype="uint8") /* ty=Tensor[(192, 4), uint8] */;
  %609 = cast(meta[relay.Constant][44] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %610 = reshape(%608, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), uint8] */;
  %611 = reshape(%609, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %612 = @func_1675(%610, %611) /* ty=(Tensor[(8, 16, 6), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
  %613 = %612.2;
  %614 = cast(%607, dtype="uint8") /* ty=Tensor[(16, 2, 1), uint8] */;
  %615 = cast(%613, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %616 = cast(%var_2688, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %617 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%607, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %620 = @func_2029() /* ty=Tensor[(16, 2, 1), float32] */;
  %621 = bitwise_xor(%614, %615) /* ty=Tensor[(16, 2, 420), uint8] */;
  %622 = floor_divide(%618, %619) /* ty=Tensor[(16, 2, ?), float32] */;
  (%620, %var_2655, meta[relay.Constant][44] /* ty=Tensor[(420), float64] */, %621, %622)
}

def @func_2715(%var_2713: Tensor[(192, 4), uint8], %var_2714: Tensor[(16, 2, 1), float32]) -> (Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) {
  @func_2711(%var_2713, %var_2714) /* ty=(Tensor[(16, 2, 1), float32], Tensor[(192, 4), uint8], Tensor[(420), float64], Tensor[(16, 2, 420), uint8], Tensor[(16, 2, ?), float32]) */
}

def @func_1268() -> (Tensor[(16, 2, 1), float32],) {
  @func_1266() /* ty=(Tensor[(16, 2, 1), float32],) */
}

def @func_1608() -> (Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) {
  @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */
}

def @func_3034(%var_3031: Tensor[(3, 16, 1), float64], %var_3032: Tensor[(1008), float64], %var_3033: Tensor[(3360), float32]) -> (Tensor[(3, 16, ?), bool], Tensor[(3, 16, ?), bool], Tensor[(195), int16], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32]) {
  %645 = fn (%var_3002: Tensor[(3, 16, 1), float64], %var_3021: Tensor[(1008), float64], %var_3023: Tensor[(3360), float32]) -> (Tensor[(3, 16, ?), bool], Tensor[(3, 16, ?), bool], Tensor[(195), int16], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32]) {
    %623 = cast(%var_3002, dtype="float64") /* ty=Tensor[(3, 16, 1), float64] */;
    %624 = rsqrt(%623) /* ty=Tensor[(3, 16, 1), float64] */;
    %625 = cast(%var_3002, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
    %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%624, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = cast(%var_3002, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
    %630 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%624, dtype="bool") /* ty=Tensor[(3, 16, 1), bool] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %633 = cast(%var_3021, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %634 = cast(%var_3021, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %635 = cast(meta[relay.Constant][45] /* ty=Tensor[(1755), int16] */, dtype="int16") /* ty=Tensor[(1755), int16] */;
    %636 = cast(%var_3023, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %637 = reshape(%633, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
    %638 = reshape(%634, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float64] */;
    %639 = reshape(%635, newshape=[1755]) /* ty=Tensor[(1755), int16] */;
    %640 = reshape(%636, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
    %641 = @func_1444(%637, %638, %639, %640) /* ty=(Tensor[(6, 14, 12), float64], Tensor[(8, 14, 13), float32], Tensor[(2, 728), float32], Tensor[(13, 9, 15), int16], Tensor[(195), int16], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(15, 16, 14), float32], Tensor[(3360), float32], Tensor[(1755), float64]) */;
    %642 = logical_or(%627, %628) /* ty=Tensor[(3, 16, ?), bool] */;
    %643 = less(%631, %632) /* ty=Tensor[(3, 16, ?), bool] */;
    %644 = %641.4;
    (%642, %643, %644, %var_3021, meta[relay.Constant][45] /* ty=Tensor[(1755), int16] */, %var_3023)
  };
  %645(%var_3031, %var_3032, %var_3033) /* ty=(Tensor[(3, 16, ?), bool], Tensor[(3, 16, ?), bool], Tensor[(195), int16], Tensor[(1008), float64], Tensor[(1755), int16], Tensor[(3360), float32]) */
}

def @func_3921() -> (Tensor[(16, 2, 1), float32],) {
  @func_3919() /* ty=(Tensor[(16, 2, 1), float32],) */
}

def @func_4090(%var_4088: Tensor[(1650), int16]) -> (Tensor[(1650), uint32], Tensor[(1650), float32]) {
  @func_4087(%var_4088) /* ty=(Tensor[(1650), uint32], Tensor[(1650), float32]) */
}

def @func_4279() -> (Tensor[(16, 2, 1), float32],) {
  %646 = @func_2952() /* ty=(Tensor[(16, 2, 1), float32],) */;
  %647 = %646.0;
  (%647,)
}

def @func_1994(%var_1992: Tensor[(6, 15, 14), int32]) -> (Tensor[(6, 15, 14), int32],) {
  @func_1991(%var_1992) /* ty=(Tensor[(6, 15, 14), int32],) */
}

def @func_3576(%var_3575: Tensor[(4, 16), float64]) -> (Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) {
  %672 = fn (%var_3570: Tensor[(4, 16), float64]) -> (Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) {
    %648 = @func_1597() /* ty=(Tensor[(1650), int16], Tensor[(?, 1521), float64], Tensor[(?, 1521), float64]) */;
    %649 = %648.2;
    %650 = cast(%649, dtype="int8") /* ty=Tensor[(?, 1521), int8] */;
    %651 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 1521), float64] */, dtype="int8") /* ty=Tensor[(13, 1521), int8] */;
    %652 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 1521), float64] */, dtype="float64") /* ty=Tensor[(13, 1521), float64] */;
    %653 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
    %654 = %653.1;
    %655 = cast(%654, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
    %656 = cast(%649, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
    %657 = cast(meta[relay.Constant][47] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
    %658 = reshape(%657, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
    %659 = @func_1525(%658) /* ty=(Tensor[(1, 11, 11), float32],) */;
    %660 = cast(%654, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
    %661 = cast(%var_3570, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
    %662 = cast(%649, dtype="float64") /* ty=Tensor[(?, 1521), float64] */;
    %663 = reshape(%660, newshape=[16, 2, 1]) /* ty=Tensor[(16, 2, 1), float32] */;
    %664 = reshape(%661, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float64] */;
    %665 = reshape(%662, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), float64] */;
    %666 = @func_1739(%663, %664, %665) /* ty=(Tensor[(16, 2, ?), uint32], Tensor[(?, 1521), int16], Tensor[(16, 2, 2), uint8], Tensor[(3, 14, 10), float64], Tensor[(420), float64]) */;
    %667 = left_shift(%650, %651) /* ty=Tensor[(13, 1521), int8] */;
    %668 = exp(%652) /* ty=Tensor[(13, 1521), float64] */;
    %669 = power(%655, %656) /* ty=Tensor[(16, 2, 1521), float32] */;
    %670 = %659.0;
    %671 = %666.2;
    (%667, %668, %669, %670, meta[relay.Constant][47] /* ty=Tensor[(121), float32] */, %671, %var_3570)
  };
  %672(%var_3575) /* ty=(Tensor[(13, 1521), int8], Tensor[(13, 1521), float64], Tensor[(16, 2, 1521), float32], Tensor[(1, 11, 11), float32], Tensor[(121), float32], Tensor[(16, 2, 2), uint8], Tensor[(4, 16), float64]) */
}

def @func_2814() -> (Tensor[(16, 2, 14), float64], Tensor[(3, 14, 10), float64], Tensor[(420), float64], Tensor[(16, 2, 14), float32]) {
  %673 = @func_1956() /* ty=Tensor[(16, 2, 1), float32] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(16, 2, 1), float64] */;
  %675 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %676 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %677 = reshape(%676, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %678 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %679 = floor_mod(%674, %675) /* ty=Tensor[(16, 2, 14), float64] */;
  %680 = @func_690(%677) /* ty=Tensor[(3, 14, 10), float64] */;
  %681 = log2(%678) /* ty=Tensor[(16, 2, 14), float32] */;
  (%679, %680, meta[relay.Constant][49] /* ty=Tensor[(420), float64] */, %681)
}

def @func_2030() -> Tensor[(16, 2, 1), float32] {
  %683 = fn () -> Tensor[(16, 2, 1), float32] {
    %682 = @func_1606() /* ty=(Tensor[(16, 2, ?), int32], Tensor[(16, 2, 1), float32]) */;
    %682.1
  };
  %683() /* ty=Tensor[(16, 2, 1), float32] */
}

def @func_4328() -> (Tensor[(1, 11, 11), float32], Tensor[(16, 2, 121), uint64], Tensor[(16, 2, 1), float32]) {
  %694 = fn () -> (Tensor[(1, 11, 11), float32], Tensor[(16, 2, 121), uint64], Tensor[(16, 2, 1), float32]) {
    %684 = cast(meta[relay.Constant][50] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
    %685 = reshape(%684, newshape=[1, 11, 11]) /* ty=Tensor[(1, 11, 11), float32] */;
    %686 = @func_1525(%685) /* ty=(Tensor[(1, 11, 11), float32],) */;
    %687 = @func_2003() /* ty=Tensor[(16, 2, 1), float32] */;
    %688 = cast(%687, dtype="uint64") /* ty=Tensor[(16, 2, 1), uint64] */;
    %689 = cast(meta[relay.Constant][50] /* ty=Tensor[(121), float32] */, dtype="uint64") /* ty=Tensor[(121), uint64] */;
    %690 = @func_4279() /* ty=(Tensor[(16, 2, 1), float32],) */;
    %691 = %686.0;
    %692 = bitwise_and(%688, %689) /* ty=Tensor[(16, 2, 121), uint64] */;
    %693 = %690.0;
    (%691, %692, %693)
  };
  %694() /* ty=(Tensor[(1, 11, 11), float32], Tensor[(16, 2, 121), uint64], Tensor[(16, 2, 1), float32]) */
}

def @func_3771(%var_3768: Tensor[(4, 192), uint8], %var_3769: Tensor[(4, 192), uint8], %var_3770: Tensor[(1, 420), float64]) -> (Tensor[(4, 192), int16], Tensor[(4, 192), bool], Tensor[(3, 14, 10), float64], Tensor[(1, 420), float64]) {
  %710 = fn (%var_3751: Tensor[(4, 192), uint8], %var_3756: Tensor[(4, 192), uint8], %var_3764: Tensor[(1, 420), float64]) -> (Tensor[(4, 192), int16], Tensor[(4, 192), bool], Tensor[(3, 14, 10), float64], Tensor[(1, 420), float64]) {
    %695 = @func_2847() /* ty=(Tensor[(16, 2, ?), float32], Tensor[(4, 192), uint8], Tensor[(2, 16), float32], Tensor[(1650), float32], Tensor[(3360), float32]) */;
    %696 = %695.1;
    %697 = cast(%var_3751, dtype="int16") /* ty=Tensor[(4, 192), int16] */;
    %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(2), int32] */;
    %699 = cast(%696, dtype="int16") /* ty=Tensor[(4, 192), int16] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %701 = cast(%var_3756, dtype="bool") /* ty=Tensor[(4, 192), bool] */;
    %702 = shape_of(%var_3751, dtype="int32") /* ty=Tensor[(2), int32] */;
    %703 = cast(%var_3751, dtype="bool") /* ty=Tensor[(4, 192), bool] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %705 = cast(%var_3764, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
    %706 = reshape(%705, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
    %707 = logical_xor(%699, %700) /* ty=Tensor[(4, 192), int16] */;
    %708 = greater(%703, %704) /* ty=Tensor[(4, 192), bool] */;
    %709 = @func_690(%706) /* ty=Tensor[(3, 14, 10), float64] */;
    (%707, %708, %709, %var_3764)
  };
  %710(%var_3768, %var_3769, %var_3770) /* ty=(Tensor[(4, 192), int16], Tensor[(4, 192), bool], Tensor[(3, 14, 10), float64], Tensor[(1, 420), float64]) */
}

def @func_4042() -> (Tensor[(?, 1521), float64],) {
  %712 = fn () -> (Tensor[(?, 1521), float64],) {
    %711 = @func_1641() /* ty=Tensor[(?, 1521), float64] */;
    (%711,)
  };
  %712() /* ty=(Tensor[(?, 1521), float64],) */
}

def @func_693(%var_691: Tensor[(3, 14, 10), float64]) -> Tensor[(3, 14, 10), float64] {
  @func_690(%var_691) /* ty=Tensor[(3, 14, 10), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen38/build/output.py", line 1620, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:38] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

