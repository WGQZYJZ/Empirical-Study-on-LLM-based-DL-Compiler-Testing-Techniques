==========mod==========
#[version = "0.0.5"]
def @func_7506() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %0 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %1 = %0.0;
  %2 = @func_6528() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1, %2)
}

def @func_6926(%var_6904: Tensor[(13, 3, 16), uint64], %var_6905: Tensor[(13, 3, 16), uint64], %var_6918: Tensor[(13, 3, 16), uint64]) -> (Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) {
  %3 = cast(%var_6905, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
  %4 = shape_of(%var_6904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_6904, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %7 = cast(%var_6918, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
  %8 = shape_of(%var_6904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_6904, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = maximum(%5, %6) /* ty=Tensor[(13, 3, 16), uint64] */;
  %12 = equal(%9, %10) /* ty=Tensor[(13, 3, 16), bool] */;
  (%11, %12)
}

def @func_16831() -> (Tensor[(13, 16, 8), float32],) {
  %13 = @func_14124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %14 = %13.1;
  (%14,)
}

def @func_12605() -> (Tensor[(9, 10, 2), float64],) {
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 10, 2), float64] */;
  %16 = acosh(%15) /* ty=Tensor[(9, 10, 2), float64] */;
  (%16,)
}

def @func_1830() -> Tensor[(13, 16, 8), bool] {
  %17 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %18 = %17.0;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %20 = sqrt(%19) /* ty=Tensor[(13, 16, 8), float32] */;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %22 = sinh(%21) /* ty=Tensor[(13, 16, 8), float32] */;
  %23 = cast(%20, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%25, %26) /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_10043() -> (Tensor[(13, 16, 8), float32],) {
  %27 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %28 = %27.0;
  (%28,)
}

def @func_6513(%var_6498: bool, %var_6499: Tensor[(11, 6, 3), bool]) -> (Tensor[(11, 6, 3), bool], Tensor[(1620), float64], Tensor[(64), float32]) {
  %29 = cast(%var_6498, dtype="bool") /* ty=bool */;
  %30 = cast(%var_6499, dtype="bool") /* ty=Tensor[(11, 6, 3), bool] */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %32 = reshape(%31, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %33 = @func_1462(%32) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
  %34 = logical_and(%29, %30) /* ty=Tensor[(11, 6, 3), bool] */;
  %35 = %33.5;
  (%34, %35, meta[relay.Constant][1] /* ty=Tensor[(64), float32] */)
}

def @func_11741() -> (Tensor[(64), float32],) {
  %36 = @func_8275() /* ty=(Tensor[(64), float32],) */;
  %37 = %36.0;
  (%37,)
}

def @func_10376(%var_10363: Tensor[(3, 11, 8), int16], %var_10364: Tensor[(3, 11, 8), int16]) -> Tensor[(3, 11, 8), int16] {
  %38 = cast(%var_10364, dtype="int16") /* ty=Tensor[(3, 11, 8), int16] */;
  %39 = shape_of(%var_10363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%var_10363, dtype="int16") /* ty=Tensor[(3, 11, 8), int16] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%40, %41) /* ty=Tensor[(3, 11, 8), int16] */
}

def @func_10216() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  %42 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %43 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %44 = %42.0;
  %45 = %43.1;
  (%44, %45)
}

def @func_13213() -> (Tensor[(13, 16, 8), float32],) {
  %46 = @func_12802() /* ty=Tensor[(13, 16, 8), float32] */;
  (%46,)
}

def @func_6528() -> Tensor[(13, 16, 8), float32] {
  %47 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %47.0
}

def @func_9104() -> Tensor[(13, 16, 8), float32] {
  %48 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %48.0
}

def @func_5051() -> (Tensor[(64), float32],) {
  %49 = @func_2154() /* ty=(Tensor[(64), float32],) */;
  %50 = %49.0;
  (%50,)
}

def @func_15229() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %51 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %52 = @func_13015() /* ty=Tensor[(13, 16, 8), float32] */;
  %53 = @func_14156() /* ty=Tensor[(13, 16, 8), float32] */;
  %54 = %51.0;
  (%52, %53, %54)
}

def @func_17972() -> (Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool]) {
  %55 = @func_15746() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %56 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %57 = @func_13080() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %58 = %55.1;
  %59 = %56.2;
  %60 = %57.3;
  (%58, %59, %60)
}

def @func_18332() -> (Tensor[(64), float32],) {
  %61 = @func_13756() /* ty=Tensor[(64), float32] */;
  (%61,)
}

def @func_5063() -> (Tensor[(13, 16, 8), bool],) {
  %62 = @func_3498() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %63 = %62.0;
  (%63,)
}

def @func_18315(%var_18272: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 3, 13), float32]) {
  %64 = @func_14391() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32], Tensor[(13, 16, 8), float32]) */;
  %65 = @func_5446() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %66 = cast(%var_18272, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %67 = reshape(%66, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %68 = @func_8186(%67) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) */;
  %69 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %70 = @func_9770() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %71 = @func_15229() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %72 = @func_17666() /* ty=(Tensor[(270), bool], Tensor[(13, 16, 8), float32]) */;
  %73 = @func_11559() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) */;
  %74 = @func_6528() /* ty=Tensor[(13, 16, 8), float32] */;
  %75 = %64.2;
  %76 = %65.0;
  %77 = %68.0;
  %78 = %69.0;
  %79 = %70.1;
  %80 = %71.1;
  %81 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %82 = %72.1;
  %83 = %73.0;
  (%74, %75, %76, %77, %var_18272, %78, %79, %80, %81, %82, %83)
}

def @func_12344() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %84 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %85 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %86 = %84.0;
  %87 = %85.1;
  (%86, %87)
}

def @func_15860() -> Tensor[(8, 8, ?), uint16] {
  %88 = @func_14298() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %88.0
}

def @func_12409() -> Tensor[(13, 16, 8), float32] {
  @func_9515() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_12748() -> Tensor[(13, 16, 8), bool] {
  %89 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %89.0
}

def @func_2824() -> (Tensor[(13, 16, 8), bool],) {
  %90 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %91 = %90.5;
  (%91,)
}

def @func_14554() -> Tensor[(13, 16, 8), float32] {
  %92 = @func_14235() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %92.0
}

def @func_9830() -> (Tensor[(64), float32],) {
  %93 = @func_3669() /* ty=(Tensor[(64), float32],) */;
  %94 = %93.0;
  (%94,)
}

def @func_3498() -> (Tensor[(13, 16, 8), bool],) {
  %95 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  (%95,)
}

def @func_9245() -> Tensor[(8, 8, ?), uint16] {
  %96 = @func_4828() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) */;
  %97 = %96.7;
  %98 = cast(%97, dtype="float64") /* ty=Tensor[(8, 8, ?), float64] */;
  %99 = exp(%98) /* ty=Tensor[(8, 8, ?), float64] */;
  %100 = @func_8275() /* ty=(Tensor[(64), float32],) */;
  %101 = %100.0;
  %102 = cast(%101, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %103 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%99, dtype="uint16") /* ty=Tensor[(8, 8, ?), uint16] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%104, %105) /* ty=Tensor[(8, 8, ?), uint16] */
}

def @func_13484(%var_13481: Tensor[(11, 2, 3), float32]) -> (Tensor[(11, 2, 3), float32],) {
  %106 = cast(%var_13481, dtype="float32") /* ty=Tensor[(11, 2, 3), float32] */;
  %107 = atan(%106) /* ty=Tensor[(11, 2, 3), float32] */;
  (%107,)
}

def @func_3570() -> Tensor[(64), float32] {
  %108 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %108.3
}

def @func_15810() -> (Tensor[(13, 16, 8), float32],) {
  %109 = @func_13309() /* ty=Tensor[(13, 16, 8), float32] */;
  (%109,)
}

def @func_16004(%var_16002: Tensor[(264), int16]) -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(264), int16], Tensor[(264), int16]) {
  %110 = cast(%var_16002, dtype="int16") /* ty=Tensor[(264), int16] */;
  %111 = reshape(%110, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %112 = @func_15660(%111) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(3, 11, 8), int16], Tensor[(264), int16]) */;
  %113 = @func_15868() /* ty=Tensor[(13, 16, 8), bool] */;
  %114 = @func_8588() /* ty=Tensor[(64), float32] */;
  %115 = %112.2;
  (%113, %114, %115, %var_16002)
}

def @func_2154() -> (Tensor[(64), float32],) {
  %116 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %117 = %116.2;
  (%117,)
}

def @func_15183(%var_15163: Tensor[(1, 98), bool]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(7, 7, 2), bool], Tensor[(1, 98), bool], Tensor[(64), float32]) {
  %118 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %119 = @func_7836() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %120 = cast(%var_15163, dtype="bool") /* ty=Tensor[(1, 98), bool] */;
  %121 = cast(%var_15163, dtype="bool") /* ty=Tensor[(1, 98), bool] */;
  %122 = reshape(%120, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), bool] */;
  %123 = reshape(%121, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), bool] */;
  %124 = @func_11434(%122, %123) /* ty=(Tensor[(7, 7, 2), bool], Tensor[(7, 7, 2), uint16]) */;
  %125 = @func_3243() /* ty=(Tensor[(64), float32],) */;
  %126 = %118.0;
  %127 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
  %128 = %119.2;
  %129 = %124.0;
  %130 = %125.0;
  (%126, %127, %128, %129, %var_15163, %130)
}

def @func_6961(%var_6952: Tensor[(12, 12, 13), float64], %var_6953: Tensor[(12, 12, 13), float64]) -> (Tensor[(12, 12, 13), float64],) {
  %131 = cast(%var_6953, dtype="float64") /* ty=Tensor[(12, 12, 13), float64] */;
  %132 = shape_of(%var_6952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%var_6952, dtype="float64") /* ty=Tensor[(12, 12, 13), float64] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %135 = mod(%133, %134) /* ty=Tensor[(12, 12, 13), float64] */;
  (%135,)
}

def @func_14825() -> (Tensor[(64), float32],) {
  %136 = @func_9830() /* ty=(Tensor[(64), float32],) */;
  %137 = %136.0;
  (%137,)
}

def @func_3394() -> Tensor[(13, 16, 8), bool] {
  %138 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %138.0
}

def @func_3318() -> (Tensor[(13, 16, 8), float32],) {
  %139 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %140 = %139.0;
  (%140,)
}

def @func_1545(%var_1537: Tensor[(6, 3, 15), bool]) -> (Tensor[(6, 3, 15), bool],) {
  %141 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 3, 15), bool] */, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %142 = cast(%var_1537, dtype="bool") /* ty=Tensor[(6, 3, 15), bool] */;
  %143 = logical_or(%141, %142) /* ty=Tensor[(6, 3, 15), bool] */;
  (%143,)
}

def @func_8748() -> (Tensor[(13, 16, 8), float32],) {
  %144 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %145 = %144.0;
  (%145,)
}

def @func_9901() -> (Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) {
  %146 = @func_8652() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %147 = @func_4828() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) */;
  %148 = %146.0;
  %149 = %147.8;
  (%148, %149)
}

def @func_12565() -> (Tensor[(13, 16, 8), float32],) {
  %150 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %151 = %150.0;
  (%151,)
}

def @func_15746() -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %152 = @func_9189() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %153 = @func_7252() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %154 = %152.3;
  %155 = %153.0;
  (%154, %155)
}

def @func_18786() -> (Tensor[(13, 16, 8), float32],) {
  %156 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %157 = %156.1;
  (%157,)
}

def @func_16720() -> (Tensor[(13, 16, 8), bool],) {
  %158 = @func_8069() /* ty=Tensor[(13, 16, 8), bool] */;
  (%158,)
}

def @func_16738() -> Tensor[(12, 15, ?), uint8] {
  %159 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 15, 1), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 1), uint8] */;
  %160 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(12, 15, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 15, 1), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 1), uint8] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%161, %162) /* ty=Tensor[(12, 15, ?), uint8] */
}

def @func_14731(%var_14714: Tensor[(15, 1, 4), float32], %var_14715: Tensor[(15, 13, 4), float32]) -> (Tensor[(15, 13, 4), bool],) {
  %163 = cast(%var_14714, dtype="bool") /* ty=Tensor[(15, 1, 4), bool] */;
  %164 = cast(%var_14715, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
  %165 = less_equal(%163, %164) /* ty=Tensor[(15, 13, 4), bool] */;
  (%165,)
}

def @func_11559() -> (Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) {
  %166 = cast(meta[relay.Constant][5] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %167 = reshape(%166, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %168 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 6), float64] */;
  %169 = acos(%168) /* ty=Tensor[(13, 6, 6), float64] */;
  %170 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 6, 6), float64] */, dtype="float32") /* ty=Tensor[(13, 6, 6), float32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="float32") /* ty=Tensor[(13, 6, 6), float32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %174 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %175 = @func_2313(%167) /* ty=Tensor[(3, 3, 13), float32] */;
  %176 = floor_mod(%172, %173) /* ty=Tensor[(13, 6, 6), float32] */;
  %177 = %174.0;
  (%175, meta[relay.Constant][5] /* ty=Tensor[(117), float32] */, %176, %177)
}

def @func_3020() -> (Tensor[(13, 16, 8), bool],) {
  %178 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %179 = %178.0;
  (%179,)
}

def @func_18021() -> (Tensor[(13, 16, 8), float32],) {
  %180 = @func_4828() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) */;
  %181 = %180.5;
  (%181,)
}

def @func_13629() -> Tensor[(13, 16, 8), uint64] {
  %182 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %182.1
}

def @func_1113() -> Tensor[(13, 16, 8), float32] {
  %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  atan(%183) /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_1960() -> (Tensor[(13, 16, 8), float32],) {
  %184 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %185 = %184.0;
  (%185,)
}

def @func_4713() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %186 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %187 = @func_4672() /* ty=Tensor[(13, 16, 8), bool] */;
  %188 = %186.0;
  (%187, %188)
}

def @func_4828() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) {
  %189 = @func_4319() /* ty=(Tensor[(64), float32],) */;
  %190 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %191 = reshape(%190, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %192 = @func_3657(%191) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %193 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %194 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %195 = cast(meta[relay.Constant][9] /* ty=Tensor[(78, 1), float32] */, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %196 = %189.0;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(64), float32] */;
  %198 = reshape(%195, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %199 = reshape(%197, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %200 = @func_938(%198, %199) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
  %201 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  %202 = %192.1;
  %203 = %193.0;
  %204 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  %205 = %194.0;
  %206 = %200.4;
  (%201, %196, %202, meta[relay.Constant][8] /* ty=Tensor[(3, 45), float32] */, %203, %204, %205, %206, meta[relay.Constant][9] /* ty=Tensor[(78, 1), float32] */)
}

def @func_2663() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %207 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %208 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %209 = %207.0;
  (%208, %209)
}

def @func_13282() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %210 = @func_10272() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %211 = @func_8542() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %212 = %210.1;
  %213 = %211.0;
  %214 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
  %215 = @func_12297() /* ty=Tensor[(13, 16, 8), float32] */;
  (%212, %213, %214, %215)
}

def @func_4319() -> (Tensor[(64), float32],) {
  %216 = @func_3243() /* ty=(Tensor[(64), float32],) */;
  %217 = %216.0;
  (%217,)
}

def @func_7982() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %218 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %219 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %220 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %221 = %218.0;
  %222 = @func_4920() /* ty=Tensor[(64), float32] */;
  %223 = %219.0;
  %224 = %220.0;
  (%221, %222, %223, %224)
}

def @func_16451(%var_16440: Tensor[(13, 7, 12), uint16]) -> (Tensor[(13, 7, 12), uint16], Tensor[(64), float32]) {
  %225 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 7, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 7, 12), uint16] */;
  %226 = shape_of(%var_16440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_16440, dtype="uint16") /* ty=Tensor[(13, 7, 12), uint16] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %229 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %230 = right_shift(%227, %228) /* ty=Tensor[(13, 7, 12), uint16] */;
  %231 = %229.0;
  (%230, %231)
}

def @func_15322() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %232 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %233 = @func_13213() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %234 = %232.0;
  %235 = %233.0;
  (%234, %235)
}

def @func_16373(%var_16320: Tensor[(1, 16, 6), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), bool], Tensor[(13, 16, 8), bool], Tensor[(9, 10, 2), float64]) {
  %236 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %237 = cast(%var_16320, dtype="float32") /* ty=Tensor[(1, 16, 6), float32] */;
  %238 = exp(%237) /* ty=Tensor[(1, 16, 6), float32] */;
  %239 = cast(%238, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %240 = shape_of(%var_16320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%var_16320, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = cast(%var_16320, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %244 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%238, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %248 = @func_12605() /* ty=(Tensor[(9, 10, 2), float64],) */;
  %249 = %236.3;
  %250 = greater_equal(%241, %242) /* ty=Tensor[(?, 16, 6), bool] */;
  %251 = logical_and(%245, %246) /* ty=Tensor[(?, 16, 6), bool] */;
  %252 = %247.0;
  %253 = %248.0;
  (%249, %250, %251, %252, %253)
}

def @func_14464() -> (Tensor[(13, 16, 8), float32],) {
  %254 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %255 = %254.0;
  (%255,)
}

def @func_7460(%var_7455: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %256 = cast(%var_7455, dtype="float32") /* ty=Tensor[(64), float32] */;
  %257 = reshape(%256, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %258 = @func_1462(%257) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
  %259 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %260 = %258.0;
  (%259, %260, %var_7455)
}

def @func_18094() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %261 = @func_15810() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %262 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  %263 = %261.0;
  %264 = @func_13714() /* ty=Tensor[(13, 16, 8), float32] */;
  (%262, %263, %264)
}

def @func_18011() -> (Tensor[(64), float32],) {
  %265 = @func_11741() /* ty=(Tensor[(64), float32],) */;
  %266 = %265.0;
  (%266,)
}

def @func_15504() -> (Tensor[(13, 16, 8), float32],) {
  %267 = @func_14124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %268 = %267.1;
  (%268,)
}

def @func_8542() -> (Tensor[(13, 16, 8), float32],) {
  %269 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %270 = %269.1;
  (%270,)
}

def @func_2204() -> (Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) {
  %271 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %272 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 13, 1), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 1), uint32] */;
  %273 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %274 = logical_xor(%271, %272) /* ty=Tensor[(3, 13, 1), uint32] */;
  %275 = %273.0;
  (%274, %275)
}

def @func_4920() -> Tensor[(64), float32] {
  %276 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %276.0
}

def @func_6769() -> Tensor[(13, 16, 8), float32] {
  %277 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %277.0
}

def @func_3243() -> (Tensor[(64), float32],) {
  %278 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %279 = %278.0;
  (%279,)
}

def @func_17382() -> Tensor[(13, 16, 8), bool] {
  %280 = @func_7730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %280.0
}

def @func_5283() -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %281 = @func_4367() /* ty=(Tensor[(64), float32],) */;
  %282 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %283 = %281.0;
  %284 = %282.0;
  (%283, %284)
}

def @func_5912() -> Tensor[(13, 16, 8), float32] {
  %285 = @func_2204() /* ty=(Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) */;
  %285.1
}

def @func_3657(%var_3641: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %286 = cast(%var_3641, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %287 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %288 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %289 = sigmoid(%286) /* ty=Tensor[(15, 3, 3), float32] */;
  %290 = %287.1;
  %291 = %288.3;
  (%289, %290, %291)
}

def @func_8128(%var_8104: Tensor[(2, 9, 2), float64], %var_8114: Tensor[(624), uint64]) -> (Tensor[(13, 3, 16), bool], Tensor[(624), uint64], Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float32]) {
  %292 = cast(%var_8114, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %293 = cast(%var_8114, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %294 = cast(%var_8114, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %295 = reshape(%292, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %296 = reshape(%293, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %297 = reshape(%294, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %298 = @func_6926(%295, %296, %297) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
  %299 = cast(%var_8104, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %300 = sinh(%299) /* ty=Tensor[(2, 9, 2), float64] */;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %302 = cast(%300, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %303 = log(%302) /* ty=Tensor[(2, 9, 2), float64] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(2, 9, 2), float32] */;
  %305 = %298.1;
  %306 = sin(%301) /* ty=Tensor[(2, 9, 2), float64] */;
  %307 = log2(%304) /* ty=Tensor[(2, 9, 2), float32] */;
  (%305, %var_8114, %306, %307)
}

def @func_1890(%var_1878: Tensor[(1, 1620), float64]) -> (Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) {
  %308 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
  %310 = erf(%309) /* ty=Tensor[(13, 16, 8), float64] */;
  %311 = cast(%308, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %315 = cast(%var_1878, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %316 = reshape(%315, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %317 = @func_1288(%316) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %318 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %319 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %320 = bitwise_and(%313, %314) /* ty=Tensor[(13, 16, 8), int16] */;
  %321 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %322 = %317.0;
  %323 = %318.0;
  %324 = %319.4;
  (%320, %321, %322, %var_1878, %323, %324)
}

def @func_7653() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %325 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %326 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %327 = %325.0;
  %328 = %326.0;
  (%327, %328)
}

def @func_13832() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %329 = @func_8748() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %330 = @func_8652() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %331 = @func_3847() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %332 = %329.0;
  %333 = %330.0;
  %334 = @func_12137() /* ty=Tensor[(13, 16, 8), bool] */;
  %335 = %331.2;
  (%332, %333, %334, %335)
}

def @func_3113(%var_3072: Tensor[(9, 7, 12), uint64]) -> (Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  %336 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 7, 12), uint64] */, dtype="uint64") /* ty=Tensor[(9, 7, 12), uint64] */;
  %337 = shape_of(%var_3072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_3072, dtype="uint64") /* ty=Tensor[(9, 7, 12), uint64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %340 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %341 = left_shift(%338, %339) /* ty=Tensor[(9, 7, 12), uint64] */;
  %342 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %343 = %340.0;
  (%341, %342, %343)
}

def @func_11246() -> Tensor[(64), float32] {
  %344 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %344.0
}

def @func_13003() -> (Tensor[(14, 15, 13), float64],) {
  %345 = @func_4985() /* ty=(Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) */;
  %346 = %345.1;
  (%346,)
}

def @func_11151() -> Tensor[(13, 16, 8), bool] {
  %347 = @func_7252() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %347.0
}

def @func_6074() -> (Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) {
  %348 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %349 = @func_3570() /* ty=Tensor[(64), float32] */;
  %350 = %348.0;
  (%349, %350)
}

def @func_10124() -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  %351 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %352 = @func_7542() /* ty=Tensor[(13, 16, 8), bool] */;
  %353 = %351.0;
  (%352, %353)
}

def @func_12802() -> Tensor[(13, 16, 8), float32] {
  @func_12409() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_6164(%var_6151: Tensor[(1, 12, 4), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(1, 12, 4), float64]) {
  %354 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %355 = cast(%var_6151, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  %356 = sin(%355) /* ty=Tensor[(1, 12, 4), float32] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  %358 = acosh(%357) /* ty=Tensor[(1, 12, 4), float32] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
  %360 = %354.0;
  %361 = tan(%359) /* ty=Tensor[(1, 12, 4), float64] */;
  (%360, %361)
}

def @func_6888() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %362 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %363 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %364 = %362.0;
  %365 = %363.0;
  (%364, %365)
}

def @func_4034() -> Tensor[(13, 16, 8), float32] {
  %366 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %366.0
}

def @func_7082() -> (Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) {
  %367 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %368 = @func_4985() /* ty=(Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) */;
  %369 = %368.1;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %371 = rsqrt(%370) /* ty=Tensor[(14, 15, 13), float64] */;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %373 = @func_5673() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %374 = %367.0;
  %375 = sinh(%372) /* ty=Tensor[(14, 15, 13), float64] */;
  %376 = %373.0;
  (%374, %375, %376)
}

def @func_9573() -> Tensor[(64), float32] {
  @func_8680() /* ty=Tensor[(64), float32] */
}

def @main(%var_18812: Tensor[(10, 12, 3), int8], %var_18813: Tensor[(10, 12, 3), int8], %var_18820: Tensor[(10, 12, 3), int8]) -> (Tensor[(10, 12, 3), int8], Tensor[(10, 12, 3), float64]) {
  %377 = cast(%var_18813, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %378 = shape_of(%var_18812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%var_18812, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %381 = cast(%var_18820, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
  %382 = shape_of(%var_18812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_18812, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %385 = bitwise_and(%379, %380) /* ty=Tensor[(10, 12, 3), int8] */;
  %386 = mod(%383, %384) /* ty=Tensor[(10, 12, 3), float64] */;
  (%385, %386)
}

def @func_12896() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64]) {
  %387 = @func_5446() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %388 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %389 = %387.0;
  %390 = %388.1;
  (%389, %390)
}

def @func_13198() -> Tensor[(13, 16, 8), bool] {
  @func_8926() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_6779() -> Tensor[(13, 16, 8), float32] {
  %391 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %391.0
}

def @func_4055() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %392 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %393 = %392.0;
  %394 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%393, %394)
}

def @func_11204() -> Tensor[(78, 1), float32] {
  %395 = @func_9901() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) */;
  %395.1
}

def @func_14312() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %396 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %397 = @func_12802() /* ty=Tensor[(13, 16, 8), float32] */;
  %398 = %396.0;
  (%397, %398)
}

def @func_1151() -> (Tensor[(13, 16, 8), float32],) {
  %399 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%399,)
}

def @func_6212() -> (Tensor[(13, 16, 8), float32],) {
  %400 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %401 = %400.0;
  (%401,)
}

def @func_7252() -> (Tensor[(13, 16, 8), bool],) {
  %402 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %403 = %402.0;
  %404 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 16, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = greater_equal(%406, %407) /* ty=Tensor[(13, 16, 8), bool] */;
  (%408,)
}

def @func_13031() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %409 = @func_5801() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %410 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %411 = %409.0;
  (%410, %411)
}

def @func_17707() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %412 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %413 = @func_14298() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %414 = @func_8542() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %415 = %412.0;
  %416 = %413.1;
  %417 = %414.0;
  (%415, %416, %417)
}

def @func_6265() -> (Tensor[(13, 16, 8), float32],) {
  %418 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  (%418,)
}

def @func_18184() -> Tensor[(13, 16, 8), bool] {
  @func_3394() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_1360() -> (Tensor[(13, 16, 8), float32],) {
  %419 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%419,)
}

def @func_15520() -> Tensor[(13, 16, 8), float32] {
  %420 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %420.0
}

def @func_18214() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), bool], Tensor[(24, 26), uint64]) {
  %421 = @func_17158() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %422 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %423 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %424 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %425 = reshape(%422, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %426 = reshape(%423, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %427 = reshape(%424, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %428 = @func_6926(%425, %426, %427) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
  %429 = %421.1;
  %430 = %428.1;
  (%429, %430, meta[relay.Constant][15] /* ty=Tensor[(24, 26), uint64] */)
}

def @func_1626() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) {
  %431 = cast(meta[relay.Constant][16] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %432 = cast(meta[relay.Constant][17] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %433 = reshape(%431, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %434 = reshape(%432, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %435 = @func_938(%433, %434) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
  %436 = %435.0;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(8, 8, ?), float32] */;
  %438 = reshape(%437, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %439 = @func_558(%438) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %440 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %441 = %439.0;
  (%440, %436, meta[relay.Constant][16] /* ty=Tensor[(78), float32] */, meta[relay.Constant][17] /* ty=Tensor[(64), float32] */, %441)
}

def @func_13992() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %442 = @func_9189() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %443 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %444 = %442.0;
  %445 = %443.1;
  (%444, %445)
}

def @func_4456() -> (Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) {
  %446 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %447 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %448 = %446.0;
  %449 = %447.2;
  (%448, %449)
}

def @func_12046(%var_12034: uint32, %var_12035: Tensor[(7, 5, 11), uint32]) -> (Tensor[(7, 5, 11), uint32],) {
  %450 = cast(%var_12034, dtype="uint32") /* ty=uint32 */;
  %451 = cast(%var_12035, dtype="uint32") /* ty=Tensor[(7, 5, 11), uint32] */;
  %452 = minimum(%450, %451) /* ty=Tensor[(7, 5, 11), uint32] */;
  (%452,)
}

def @func_17158() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %453 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %454 = @func_4319() /* ty=(Tensor[(64), float32],) */;
  %455 = @func_7542() /* ty=Tensor[(13, 16, 8), bool] */;
  %456 = %453.0;
  %457 = %454.0;
  (%455, %456, %457)
}

def @func_11829(%var_11826: Tensor[(11, 7, 8), float64]) -> (Tensor[(11, 7, 8), float64],) {
  %458 = cast(%var_11826, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
  %459 = exp(%458) /* ty=Tensor[(11, 7, 8), float64] */;
  (%459,)
}

def @func_17492(%var_17403: Tensor[(14, 16, 4), float64]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(14, 16, 4), float32], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  %460 = @func_8915() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %461 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %462 = cast(%var_17403, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
  %463 = cos(%462) /* ty=Tensor[(14, 16, 4), float64] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
  %465 = log(%464) /* ty=Tensor[(14, 16, 4), float64] */;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(14, 16, 4), float32] */;
  %467 = cast(meta[relay.Constant][18] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %468 = reshape(%467, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %469 = @func_1288(%468) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %470 = @func_9573() /* ty=Tensor[(64), float32] */;
  %471 = @func_7542() /* ty=Tensor[(13, 16, 8), bool] */;
  %472 = %460.0;
  %473 = %461.0;
  %474 = exp(%466) /* ty=Tensor[(14, 16, 4), float32] */;
  %475 = %469.0;
  (%470, %471, %472, %473, %474, %475, meta[relay.Constant][18] /* ty=Tensor[(1620), float64] */)
}

def @func_1848() -> (Tensor[(13, 16, 8), float32],) {
  %476 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  (%476,)
}

def @func_5673() -> (Tensor[(13, 16, 8), uint64],) {
  %477 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %478 = %477.0;
  (%478,)
}

def @func_4367() -> (Tensor[(64), float32],) {
  %479 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %480 = %479.3;
  (%480,)
}

def @func_4672() -> Tensor[(13, 16, 8), bool] {
  @func_1912() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_15584() -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), int16], Tensor[(1620), float64], Tensor[(117), float32], Tensor[(78), float32]) {
  %481 = @func_3669() /* ty=(Tensor[(64), float32],) */;
  %482 = @func_10216() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
  %483 = cast(meta[relay.Constant][19] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %484 = reshape(%483, newshape=[1, 1620]) /* ty=Tensor[(1, 1620), float64] */;
  %485 = @func_1890(%484) /* ty=(Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) */;
  %486 = cast(meta[relay.Constant][20] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %487 = reshape(%486, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
  %488 = @func_9944(%487) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(78, 1), float32], Tensor[(8, 8), float32], Tensor[(3, 3, 13), float32], Tensor[(117), float32]) */;
  %489 = @func_13418() /* ty=Tensor[(64), float32] */;
  %490 = %481.0;
  %491 = %482.1;
  %492 = %485.0;
  %493 = %488.5;
  (%489, %490, %491, %492, meta[relay.Constant][19] /* ty=Tensor[(1620), float64] */, %493, meta[relay.Constant][20] /* ty=Tensor[(78), float32] */)
}

def @func_4909() -> (Tensor[(13, 16, 8), float32],) {
  %494 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %495 = %494.3;
  (%495,)
}

def @func_9189() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %496 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %497 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %498 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %499 = %496.0;
  %500 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
  %501 = %497.3;
  %502 = @func_3570() /* ty=Tensor[(64), float32] */;
  %503 = %498.0;
  %504 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%499, %500, %501, %502, %503, %504)
}

def @func_8263(%var_8254: Tensor[(11, 16, 14), float32]) -> (Tensor[(11, 16, 14), float32],) {
  %505 = cast(%var_8254, dtype="float32") /* ty=Tensor[(11, 16, 14), float32] */;
  %506 = sinh(%505) /* ty=Tensor[(11, 16, 14), float32] */;
  (%506,)
}

def @func_2680(%var_2672: Tensor[(14, 15, 13), int32], %var_2673: Tensor[(14, 15, 13), int32]) -> Tensor[(14, 15, 13), float64] {
  %507 = cast(%var_2673, dtype="bool") /* ty=Tensor[(14, 15, 13), bool] */;
  %508 = shape_of(%var_2672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_2672, dtype="bool") /* ty=Tensor[(14, 15, 13), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = greater(%509, %510) /* ty=Tensor[(14, 15, 13), bool] */;
  %512 = cast(%var_2673, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%514, %515) /* ty=Tensor[(14, 15, 13), float64] */
}

def @func_4985() -> (Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) {
  %516 = @func_3243() /* ty=(Tensor[(64), float32],) */;
  %517 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 2730), int32] */, dtype="int32") /* ty=Tensor[(1, 2730), int32] */;
  %518 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 2730), int32] */, dtype="int32") /* ty=Tensor[(1, 2730), int32] */;
  %519 = reshape(%517, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %520 = reshape(%518, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %521 = %516.0;
  %522 = @func_2680(%519, %520) /* ty=Tensor[(14, 15, 13), float64] */;
  (%521, %522, meta[relay.Constant][21] /* ty=Tensor[(1, 2730), int32] */)
}

def @func_6423() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %523 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %524 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %525 = @func_3847() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %526 = %523.0;
  %527 = %524.0;
  %528 = %525.0;
  (%526, %527, %528)
}

def @func_14663() -> Tensor[(64), float32] {
  %529 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %529.0
}

def @func_9403() -> Tensor[(13, 16, 8), float32] {
  %530 = @func_8915() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %530.1
}

def @func_14935() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), uint64], Tensor[(624), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool]) {
  %531 = cast(meta[relay.Constant][22] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %532 = cast(meta[relay.Constant][22] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %533 = cast(meta[relay.Constant][22] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %534 = reshape(%531, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %535 = reshape(%532, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %536 = reshape(%533, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %537 = @func_6926(%534, %535, %536) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
  %538 = cast(meta[relay.Constant][23] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %539 = reshape(%538, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %540 = @func_7460(%539) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %541 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %542 = @func_13992() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %543 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
  %544 = %537.0;
  %545 = %540.0;
  %546 = %541.0;
  %547 = %542.0;
  (%543, %544, meta[relay.Constant][22] /* ty=Tensor[(624), uint64] */, %545, meta[relay.Constant][23] /* ty=Tensor[(64), float32] */, %546, %547)
}

def @func_3212() -> (Tensor[(64), float32],) {
  %548 = @func_2265() /* ty=Tensor[(64), float32] */;
  (%548,)
}

def @func_10458() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %549 = @func_7982() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %550 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %551 = %549.2;
  %552 = %550.0;
  (%551, %552)
}

def @func_13714() -> Tensor[(13, 16, 8), float32] {
  %553 = @func_10844() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %553.0
}

def @func_10519(%var_10476: Tensor[(8, 15, 1), float64]) -> (Tensor[(8, 15, 1), float64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %554 = cast(%var_10476, dtype="float64") /* ty=Tensor[(8, 15, 1), float64] */;
  %555 = @func_6074() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %556 = cosh(%554) /* ty=Tensor[(8, 15, 1), float64] */;
  %557 = @func_8680() /* ty=Tensor[(64), float32] */;
  %558 = %555.0;
  %559 = @func_8926() /* ty=Tensor[(13, 16, 8), bool] */;
  (%556, %557, %558, %559)
}

def @func_15197() -> (Tensor[(13, 16, 8), float32],) {
  %560 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %561 = %560.1;
  (%561,)
}

def @func_15868() -> Tensor[(13, 16, 8), bool] {
  @func_8926() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_11108() -> Tensor[(13, 16, 8), float32] {
  %562 = @func_4749() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %562.0
}

def @func_9644() -> (Tensor[(13, 16, 8), float32],) {
  %563 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
  (%563,)
}

def @func_14452() -> Tensor[(13, 16, 8), bool] {
  @func_3394() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_10689(%var_10672: Tensor[(18, 135), bool], %var_10675: Tensor[(1620), float64]) -> (Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(18, 135), bool], Tensor[(13, 16, 8), float32], Tensor[(1620), float64]) {
  %564 = @func_3669() /* ty=(Tensor[(64), float32],) */;
  %565 = cast(%var_10672, dtype="bool") /* ty=Tensor[(18, 135), bool] */;
  %566 = reshape(%565, newshape=[9, 270]) /* ty=Tensor[(9, 270), bool] */;
  %567 = @func_7589(%566) /* ty=(Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(9, 270), float64]) */;
  %568 = cast(%var_10675, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %569 = reshape(%568, newshape=[1, 1620]) /* ty=Tensor[(1, 1620), float64] */;
  %570 = @func_1890(%569) /* ty=(Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) */;
  %571 = %564.0;
  %572 = %567.0;
  %573 = %570.4;
  (%571, %572, %var_10672, %573, %var_10675)
}

def @func_16062() -> Tensor[(64), float32] {
  @func_13756() /* ty=Tensor[(64), float32] */
}

def @func_7714(%var_7680: Tensor[(13, 16, 8), float32], %var_7694: Tensor[(270), bool]) -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(270), bool]) {
  %574 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %575 = %574.0;
  %576 = cast(%var_7680, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %580 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %581 = cast(%var_7694, dtype="bool") /* ty=Tensor[(270), bool] */;
  %582 = reshape(%581, newshape=[270, 1]) /* ty=Tensor[(270, 1), bool] */;
  %583 = @func_3727(%582) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) */;
  %584 = subtract(%578, %579) /* ty=Tensor[(13, 16, 8), uint64] */;
  %585 = %580.0;
  %586 = %583.0;
  (%584, %585, %586, %var_7694)
}

def @func_17096() -> Tensor[(13, 16, 8), float32] {
  @func_16959() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_4950() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, 15), bool], Tensor[(960), float32]) {
  %587 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %588 = cast(meta[relay.Constant][24] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %589 = reshape(%588, newshape=[8, 8, 15]) /* ty=Tensor[(8, 8, 15), float32] */;
  %590 = @func_4513(%589) /* ty=(Tensor[(8, 8, 15), bool],) */;
  %591 = %587.0;
  %592 = %590.0;
  (%591, %592, meta[relay.Constant][24] /* ty=Tensor[(960), float32] */)
}

def @func_14768(%var_14755: Tensor[(7, 3, 11), uint32], %var_14756: Tensor[(7, 3, 11), uint32]) -> (Tensor[(7, 3, 11), bool],) {
  %593 = cast(%var_14756, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %594 = shape_of(%var_14755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_14755, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = greater(%595, %596) /* ty=Tensor[(7, 3, 11), bool] */;
  (%597,)
}

def @func_17666() -> (Tensor[(270), bool], Tensor[(13, 16, 8), float32]) {
  %598 = @func_14621() /* ty=(Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) */;
  %599 = %598.3;
  %600 = @func_13714() /* ty=Tensor[(13, 16, 8), float32] */;
  (%599, %600)
}

def @func_8939() -> (Tensor[(13, 16, 8), float32],) {
  %601 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
  (%601,)
}

def @func_11629() -> Tensor[(13, 16, 8), float32] {
  %602 = @func_10844() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %602.0
}

def @func_10400() -> Tensor[(13, 16, 8), bool] {
  %603 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %603.0
}

def @func_1912() -> Tensor[(13, 16, 8), bool] {
  @func_1830() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_9770() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %604 = @func_6674() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
  %605 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %606 = %604.4;
  %607 = @func_9403() /* ty=Tensor[(13, 16, 8), float32] */;
  %608 = %605.0;
  (%606, %607, %608)
}

def @func_13906() -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64]) {
  %609 = @func_11559() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) */;
  %610 = @func_5525() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %611 = @func_13003() /* ty=(Tensor[(14, 15, 13), float64],) */;
  %612 = %609.3;
  %613 = %610.0;
  %614 = %611.0;
  (%612, %613, %614)
}

def @func_10050() -> (Tensor[(64), float32],) {
  %615 = @func_3669() /* ty=(Tensor[(64), float32],) */;
  %616 = %615.0;
  (%616,)
}

def @func_1462(%var_1429: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  %617 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %618 = cast(%var_1429, dtype="float32") /* ty=Tensor[(64), float32] */;
  %619 = reshape(%618, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %620 = @func_558(%619) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %621 = %620.0;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(8, 8, ?), float32] */;
  %623 = reshape(%622, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %624 = @func_558(%623) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %625 = cast(meta[relay.Constant][25] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %626 = reshape(%625, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %627 = @func_1288(%626) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %628 = %617.0;
  %629 = %624.0;
  %630 = %627.0;
  (%628, %621, %var_1429, %629, %630, meta[relay.Constant][25] /* ty=Tensor[(1620), float64] */)
}

def @func_12137() -> Tensor[(13, 16, 8), bool] {
  @func_1912() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_10726() -> Tensor[(13, 16, 8), uint64] {
  %631 = @func_5673() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %631.0
}

def @func_8275() -> (Tensor[(64), float32],) {
  %632 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %633 = %632.0;
  (%633,)
}

def @func_15475() -> (Tensor[(8, 8, ?), float64], Tensor[(13, 16, 8), float32]) {
  %634 = @func_10891() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) */;
  %635 = @func_9644() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %636 = %634.1;
  %637 = %635.0;
  (%636, %637)
}

def @func_5994() -> (Tensor[(13, 16, 8), float32],) {
  %638 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %639 = %638.0;
  (%639,)
}

def @func_5495() -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %640 = @func_5051() /* ty=(Tensor[(64), float32],) */;
  %641 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %642 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %643 = %640.0;
  %644 = %641.0;
  %645 = %642.0;
  (%643, %644, %645)
}

def @func_5870() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  %646 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %647 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %648 = @func_4319() /* ty=(Tensor[(64), float32],) */;
  %649 = %646.3;
  %650 = %647.0;
  %651 = %648.0;
  (%649, %650, %651)
}

def @func_7542() -> Tensor[(13, 16, 8), bool] {
  @func_1830() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_10324() -> Tensor[(13, 16, 8), float32] {
  %652 = @func_9644() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %652.0
}

def @func_1703(%var_1666: Tensor[(30, 9), bool], %var_1701: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(6, 3, 15), bool], Tensor[(30, 9), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64], Tensor[(8, 8, ?), bool], Tensor[(64), float32]) {
  %653 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %654 = cast(%var_1666, dtype="bool") /* ty=Tensor[(30, 9), bool] */;
  %655 = reshape(%654, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), bool] */;
  %656 = @func_1545(%655) /* ty=(Tensor[(6, 3, 15), bool],) */;
  %657 = cast(meta[relay.Constant][26] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %658 = reshape(%657, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %659 = @func_1288(%658) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %660 = cast(%var_1701, dtype="float32") /* ty=Tensor[(64), float32] */;
  %661 = reshape(%660, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %662 = @func_558(%661) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %663 = %653.0;
  %664 = %656.0;
  %665 = %659.0;
  %666 = %662.0;
  (%663, %664, %var_1666, %665, meta[relay.Constant][26] /* ty=Tensor[(1620), float64] */, %666, %var_1701)
}

def @func_12937() -> (Tensor[(3, 3, 13), float32], Tensor[(64), float32], Tensor[(64), float32]) {
  %667 = @func_11559() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) */;
  %668 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %669 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %670 = %667.0;
  %671 = %668.2;
  %672 = %669.0;
  (%670, %671, %672)
}

def @func_17544() -> Tensor[(13, 16, 8), float32] {
  %673 = @func_16569() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %673.0
}

def @func_11899(%var_11833: Tensor[(2, 4, 13), float32], %var_11853: bool) -> (Tensor[(2, 4, 13), float32], Tensor[(2, 4, 13), float32], Tensor[(11, 6, 3), bool], Tensor[(198), bool], Tensor[(64), float32], Tensor[(11, 7, 8), float64], Tensor[(13, 16, 8), float32], Tensor[(308, 2), bool], Tensor[(64), float32]) {
  %674 = cast(%var_11833, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
  %675 = cast(%var_11833, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
  %676 = cast(%var_11853, dtype="bool") /* ty=bool */;
  %677 = cast(meta[relay.Constant][27] /* ty=Tensor[(198), bool] */, dtype="bool") /* ty=Tensor[(198), bool] */;
  %678 = reshape(%676, newshape=[]) /* ty=bool */;
  %679 = reshape(%677, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), bool] */;
  %680 = @func_6513(%678, %679) /* ty=(Tensor[(11, 6, 3), bool], Tensor[(1620), float64], Tensor[(64), float32]) */;
  %681 = cast(meta[relay.Constant][28] /* ty=Tensor[(308, 2), float64] */, dtype="float64") /* ty=Tensor[(308, 2), float64] */;
  %682 = reshape(%681, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
  %683 = @func_11829(%682) /* ty=(Tensor[(11, 7, 8), float64],) */;
  %684 = cast(meta[relay.Constant][28] /* ty=Tensor[(308, 2), float64] */, dtype="bool") /* ty=Tensor[(308, 2), bool] */;
  %685 = cast(%var_11853, dtype="bool") /* ty=bool */;
  %686 = log(%674) /* ty=Tensor[(2, 4, 13), float32] */;
  %687 = sinh(%675) /* ty=Tensor[(2, 4, 13), float32] */;
  %688 = %680.0;
  %689 = @func_8588() /* ty=Tensor[(64), float32] */;
  %690 = %683.0;
  %691 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %692 = less(%684, %685) /* ty=Tensor[(308, 2), bool] */;
  %693 = @func_2265() /* ty=Tensor[(64), float32] */;
  (%686, %687, %688, meta[relay.Constant][27] /* ty=Tensor[(198), bool] */, %689, %690, %691, %692, %693)
}

def @func_16939() -> (Tensor[(64), float32],) {
  %694 = @func_14663() /* ty=Tensor[(64), float32] */;
  (%694,)
}

def @func_18553() -> (Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %695 = @func_13992() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %696 = @func_11092() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78), float32]) */;
  %697 = @func_13352() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %698 = @func_9644() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %699 = %695.0;
  %700 = %696.1;
  %701 = %697.0;
  %702 = %698.0;
  (%699, %700, %701, %702)
}

def @func_16294(%var_16258: Tensor[(60), float32], %var_16259: Tensor[(780), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(15, 13, 4), bool], Tensor[(60), float32], Tensor[(780), float32], Tensor[(13, 16, 8), float32]) {
  %703 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %704 = cast(%var_16258, dtype="float32") /* ty=Tensor[(60), float32] */;
  %705 = cast(%var_16259, dtype="float32") /* ty=Tensor[(780), float32] */;
  %706 = reshape(%704, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %707 = reshape(%705, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), float32] */;
  %708 = @func_14731(%706, %707) /* ty=(Tensor[(15, 13, 4), bool],) */;
  %709 = %703.0;
  %710 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  %711 = %708.0;
  %712 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  (%709, %710, %711, %var_16258, %var_16259, %712)
}

def @func_5326() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  %713 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %714 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %715 = %713.0;
  (%714, %715)
}

def @func_16213() -> Tensor[(13, 16, 8), float32] {
  %716 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %716.0
}

def @func_7836() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %717 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %718 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %719 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %720 = @func_2154() /* ty=(Tensor[(64), float32],) */;
  %721 = %717.1;
  %722 = %718.0;
  %723 = %719.1;
  %724 = %720.0;
  (%721, %722, %723, %724)
}

def @func_10616(%var_10554: Tensor[(1, 1, 7), float64]) -> (Tensor[(?, ?, 7), float32], Tensor[(64), float32], Tensor[(?, ?, 7), bool], Tensor[(13, 3, 16), uint64], Tensor[(4, 156), uint64], Tensor[(64), float32], Tensor[(1, 1, 7), float64], Tensor[(14, 15, 13), float64]) {
  %725 = cast(%var_10554, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
  %726 = log10(%725) /* ty=Tensor[(1, 1, 7), float64] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
  %728 = cos(%727) /* ty=Tensor[(1, 1, 7), float32] */;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
  %730 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%726, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %733 = @func_5393() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %734 = cast(%var_10554, dtype="int32") /* ty=Tensor[(1, 1, 7), int32] */;
  %735 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%728, dtype="int32") /* ty=Tensor[(1, 1, 7), int32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %738 = multiply(%736, %737) /* ty=Tensor[(?, ?, 7), int32] */;
  %739 = cast(%726, dtype="bool") /* ty=Tensor[(1, 1, 7), bool] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="bool") /* ty=Tensor[(?, ?, 7), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %743 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 156), uint64] */, dtype="uint64") /* ty=Tensor[(4, 156), uint64] */;
  %744 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 156), uint64] */, dtype="uint64") /* ty=Tensor[(4, 156), uint64] */;
  %745 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 156), uint64] */, dtype="uint64") /* ty=Tensor[(4, 156), uint64] */;
  %746 = reshape(%743, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %747 = reshape(%744, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %748 = reshape(%745, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %749 = @func_6926(%746, %747, %748) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
  %750 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %751 = cast(%728, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
  %752 = @func_7082() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) */;
  %753 = floor_divide(%731, %732) /* ty=Tensor[(?, ?, 7), float32] */;
  %754 = %733.0;
  %755 = not_equal(%741, %742) /* ty=Tensor[(?, ?, 7), bool] */;
  %756 = %749.0;
  %757 = %750.2;
  %758 = log(%751) /* ty=Tensor[(1, 1, 7), float64] */;
  %759 = %752.1;
  (%753, %754, %755, %756, meta[relay.Constant][29] /* ty=Tensor[(4, 156), uint64] */, %757, %758, %759)
}

def @func_2960() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %760 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %761 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %762 = %761.3;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %764 = cast(meta[relay.Constant][30] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %765 = reshape(%764, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %766 = @func_1462(%765) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
  %767 = %760.0;
  %768 = rsqrt(%763) /* ty=Tensor[(13, 16, 8), float32] */;
  %769 = %766.2;
  %770 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%767, %768, %769, meta[relay.Constant][30] /* ty=Tensor[(64), float32] */, %770)
}

def @func_8652() -> (Tensor[(13, 16, 8), float32],) {
  %771 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %772 = %771.0;
  (%772,)
}

def @func_13585() -> (Tensor[(13, 16, 8), float32],) {
  %773 = @func_13282() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %774 = %773.2;
  (%774,)
}

def @func_8680() -> Tensor[(64), float32] {
  %775 = @func_5051() /* ty=(Tensor[(64), float32],) */;
  %775.0
}

def @func_8843() -> Tensor[(13, 16, 8), float32] {
  %776 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %776.0
}

def @func_12540() -> (Tensor[(64), float32], Tensor[(7, 5, 11), uint32], uint32, Tensor[(385), uint32]) {
  %777 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %778 = cast(meta[relay.Constant][32] /* ty=Tensor[(385), uint32] */, dtype="uint32") /* ty=Tensor[(385), uint32] */;
  %779 = reshape(%777, newshape=[]) /* ty=uint32 */;
  %780 = reshape(%778, newshape=[7, 5, 11]) /* ty=Tensor[(7, 5, 11), uint32] */;
  %781 = @func_12046(%779, %780) /* ty=(Tensor[(7, 5, 11), uint32],) */;
  %782 = @func_9573() /* ty=Tensor[(64), float32] */;
  %783 = %781.0;
  (%782, %783, meta[relay.Constant][31] /* ty=uint32 */, meta[relay.Constant][32] /* ty=Tensor[(385), uint32] */)
}

def @func_8186(%var_8167: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) {
  %784 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %785 = @func_6674() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
  %786 = cast(%var_8167, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %787 = reshape(%786, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), uint64] */;
  %788 = @func_3113(%787) /* ty=(Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
  %789 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  %790 = %784.1;
  %791 = %785.0;
  %792 = %788.1;
  (%789, %790, %791, %792, %var_8167)
}

def @func_2284() -> (Tensor[(13, 16, 8), float32],) {
  %793 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %794 = %793.0;
  (%794,)
}

def @func_16154(%var_16130: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) {
  %795 = cast(%var_16130, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %796 = reshape(%795, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), uint64] */;
  %797 = @func_3113(%796) /* ty=(Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
  %798 = @func_11371() /* ty=Tensor[(13, 16, 8), float32] */;
  %799 = %797.2;
  (%798, %799, %var_16130)
}

def @func_18462() -> (Tensor[(13, 16, 8), float32],) {
  %800 = @func_17825() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %801 = %800.2;
  (%801,)
}

def @func_7589(%var_7585: Tensor[(9, 270), bool]) -> (Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(9, 270), float64]) {
  %802 = @func_7082() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) */;
  %803 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 270), bool] */, dtype="bool") /* ty=Tensor[(1, 270), bool] */;
  %804 = reshape(%803, newshape=[270, 1]) /* ty=Tensor[(270, 1), bool] */;
  %805 = @func_3727(%804) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) */;
  %806 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 270), bool] */, dtype="float64") /* ty=Tensor[(1, 270), float64] */;
  %807 = cast(%var_7585, dtype="float64") /* ty=Tensor[(9, 270), float64] */;
  %808 = %802.1;
  %809 = %805.2;
  %810 = floor_mod(%806, %807) /* ty=Tensor[(9, 270), float64] */;
  (%808, %809, %810)
}

def @func_14298() -> (Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %811 = @func_9418() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32]) */;
  %812 = %811.0;
  %813 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
  %814 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%812, %813, %814)
}

def @func_14222(%var_14208: Tensor[(135), float32]) -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(135), float32], Tensor[(135), float32]) {
  %815 = @func_5673() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %816 = @func_10272() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %817 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %818 = cast(%var_14208, dtype="float32") /* ty=Tensor[(135), float32] */;
  %819 = reshape(%818, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %820 = @func_8495(%819) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(64), float32]) */;
  %821 = %815.0;
  %822 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  %823 = %816.2;
  %824 = %817.1;
  %825 = %820.2;
  (%821, %822, %823, %824, %825, %var_14208)
}

def @func_5133() -> (Tensor[(13, 16, 8), float32],) {
  %826 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %827 = %826.0;
  (%827,)
}

def @func_18441() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %828 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %829 = @func_15015() /* ty=Tensor[(13, 16, 8), float32] */;
  %830 = %828.0;
  (%829, %830)
}

def @func_9628(%var_9606: Tensor[(270), bool]) -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(270), float32]) {
  %831 = cast(%var_9606, dtype="bool") /* ty=Tensor[(270), bool] */;
  %832 = reshape(%831, newshape=[270, 1]) /* ty=Tensor[(270, 1), bool] */;
  %833 = @func_3727(%832) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) */;
  %834 = cast(%var_9606, dtype="float32") /* ty=Tensor[(270), float32] */;
  %835 = @func_2265() /* ty=Tensor[(64), float32] */;
  %836 = %833.0;
  %837 = log(%834) /* ty=Tensor[(270), float32] */;
  (%835, %836, %837)
}

def @func_11092() -> (Tensor[(13, 16, 8), float32], Tensor[(78), float32]) {
  %838 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %839 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
  %840 = %838.3;
  (%839, %840)
}

def @func_14621() -> (Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) {
  %841 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 4), float64] */;
  %842 = cast(meta[relay.Constant][35] /* ty=Tensor[(1664), float32] */, dtype="float32") /* ty=Tensor[(1664), float32] */;
  %843 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %844 = reshape(%842, newshape=[13, 16, 8]) /* ty=Tensor[(13, 16, 8), float32] */;
  %845 = reshape(%843, newshape=[270]) /* ty=Tensor[(270), bool] */;
  %846 = @func_7714(%844, %845) /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(270), bool]) */;
  %847 = asinh(%841) /* ty=Tensor[(10, 12, 4), float64] */;
  %848 = %846.3;
  (%847, %848, meta[relay.Constant][35] /* ty=Tensor[(1664), float32] */, meta[relay.Constant][36] /* ty=Tensor[(270), bool] */)
}

def @func_2730() -> (Tensor[(13, 16, 8), bool],) {
  %849 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%849,)
}

def @func_938(%var_887: Tensor[(1, 6, 13), float32], %var_907: Tensor[(64), float32]) -> (Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) {
  %850 = cast(%var_907, dtype="float32") /* ty=Tensor[(64), float32] */;
  %851 = reshape(%850, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %852 = @func_558(%851) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %853 = cast(%var_907, dtype="float32") /* ty=Tensor[(64), float32] */;
  %854 = reshape(%853, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %855 = @func_558(%854) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %856 = cast(%var_887, dtype="float32") /* ty=Tensor[(1, 6, 13), float32] */;
  %857 = sqrt(%856) /* ty=Tensor[(1, 6, 13), float32] */;
  %858 = cast(%var_887, dtype="int64") /* ty=Tensor[(1, 6, 13), int64] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="int64") /* ty=Tensor[(1, 6, 13), int64] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %862 = bitwise_and(%860, %861) /* ty=Tensor[(?, 6, 13), int64] */;
  %863 = cast(%862, dtype="bool") /* ty=Tensor[(?, 6, 13), bool] */;
  %864 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%857, dtype="bool") /* ty=Tensor[(1, 6, 13), bool] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %867 = cast(%var_907, dtype="float32") /* ty=Tensor[(64), float32] */;
  %868 = reshape(%867, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %869 = @func_558(%868) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %870 = %852.0;
  %871 = %855.0;
  %872 = less_equal(%865, %866) /* ty=Tensor[(?, 6, 13), bool] */;
  %873 = %869.0;
  (%870, %var_907, %871, %872, %873)
}

def @func_8926() -> Tensor[(13, 16, 8), bool] {
  %874 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %874.0
}

def @func_11797(%var_11780: Tensor[(14, 6, 8), float32]) -> (Tensor[(14, 6, 8), float64], Tensor[(13, 16, 8), float32]) {
  %875 = cast(%var_11780, dtype="float32") /* ty=Tensor[(14, 6, 8), float32] */;
  %876 = asinh(%875) /* ty=Tensor[(14, 6, 8), float32] */;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %878 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %879 = asin(%877) /* ty=Tensor[(14, 6, 8), float64] */;
  %880 = %878.1;
  (%879, %880)
}

def @func_5393() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %881 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %882 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %883 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %884 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %885 = %881.0;
  %886 = %882.0;
  %887 = %883.3;
  %888 = %884.0;
  (%885, %886, %887, %888)
}

def @func_9684() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %889 = @func_8275() /* ty=(Tensor[(64), float32],) */;
  %890 = @func_5912() /* ty=Tensor[(13, 16, 8), float32] */;
  %891 = %889.0;
  (%890, %891)
}

def @func_10272() -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %892 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %893 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %894 = %892.1;
  %895 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %896 = %893.4;
  (%894, %895, %896)
}

def @func_1220() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %897 = cast(meta[relay.Constant][37] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %898 = reshape(%897, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %899 = @func_558(%898) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %900 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %901 = %899.0;
  %902 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%900, %901, meta[relay.Constant][37] /* ty=Tensor[(64), float32] */, %902)
}

def @func_2768() -> (Tensor[(64), float32],) {
  %903 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %904 = %903.3;
  (%904,)
}

def @func_15927() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) {
  %905 = @func_15810() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %906 = @func_6779() /* ty=Tensor[(13, 16, 8), float32] */;
  %907 = @func_13629() /* ty=Tensor[(13, 16, 8), uint64] */;
  %908 = %905.0;
  (%906, %907, %908)
}

def @func_17900() -> Tensor[(13, 16, 8), float32] {
  @func_17096() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_9418() -> (Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32]) {
  %909 = @func_7836() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %910 = @func_9245() /* ty=Tensor[(8, 8, ?), uint16] */;
  %911 = %909.2;
  (%910, %911)
}

def @func_8495(%var_8485: Tensor[(135), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(64), float32]) {
  %912 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %913 = cast(%var_8485, dtype="float32") /* ty=Tensor[(135), float32] */;
  %914 = reshape(%913, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %915 = @func_3657(%914) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %916 = %912.0;
  %917 = %915.0;
  %918 = @func_3570() /* ty=Tensor[(64), float32] */;
  (%916, %917, %var_8485, %918)
}

def @func_6475() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %919 = @func_5525() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %920 = %919.0;
  %921 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%920, %921)
}

def @func_16581() -> (Tensor[(64), float32],) {
  %922 = @func_8680() /* ty=Tensor[(64), float32] */;
  (%922,)
}

def @func_12261() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %923 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %924 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
  %925 = %923.0;
  (%924, %925)
}

def @func_18412() -> (Tensor[(1664), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %926 = @func_14621() /* ty=(Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) */;
  %927 = @func_15624() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %928 = @func_13213() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %929 = @func_16831() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %930 = %926.2;
  %931 = %927.1;
  %932 = %928.0;
  %933 = %929.0;
  (%930, %931, %932, %933)
}

def @func_11434(%var_11422: Tensor[(7, 7, 2), bool], %var_11427: Tensor[(7, 7, 2), bool]) -> (Tensor[(7, 7, 2), bool], Tensor[(7, 7, 2), uint16]) {
  %934 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 2), bool] */, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
  %935 = shape_of(%var_11422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%var_11422, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %938 = cast(%var_11427, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
  %939 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %940 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 2), bool] */, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
  %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %942 = logical_or(%936, %937) /* ty=Tensor[(7, 7, 2), bool] */;
  %943 = minimum(%940, %941) /* ty=Tensor[(7, 7, 2), uint16] */;
  (%942, %943)
}

def @func_13080() -> (Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %944 = @func_10458() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %945 = @func_12540() /* ty=(Tensor[(64), float32], Tensor[(7, 5, 11), uint32], uint32, Tensor[(385), uint32]) */;
  %946 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %947 = @func_10458() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %948 = %944.1;
  %949 = %945.1;
  %950 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  %951 = %946.5;
  %952 = %947.0;
  (%948, %949, %950, %951, %952)
}

def @func_3727(%var_3721: Tensor[(270, 1), bool]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) {
  %953 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %954 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %955 = cast(%var_3721, dtype="bool") /* ty=Tensor[(270, 1), bool] */;
  %956 = %953.3;
  %957 = cast(%956, dtype="float32") /* ty=Tensor[(64), float32] */;
  %958 = reshape(%955, newshape=[270]) /* ty=Tensor[(270), bool] */;
  %959 = reshape(%957, newshape=[16, 4]) /* ty=Tensor[(16, 4), float32] */;
  %960 = @func_2628(%958, %959) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) */;
  %961 = %954.0;
  %962 = %960.4;
  (%956, %961, %962, %var_3721)
}

def @func_16982() -> (Tensor[(13, 16, 8), float32],) {
  %963 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  (%963,)
}

def @func_11419() -> (Tensor[(13, 16, 8), float32],) {
  %964 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %965 = %964.1;
  (%965,)
}

def @func_2628(%var_2585: Tensor[(270), bool], %var_2586: Tensor[(16, 4), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) {
  %966 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %967 = cast(%var_2585, dtype="bool") /* ty=Tensor[(270), bool] */;
  %968 = cast(%var_2586, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
  %969 = reshape(%967, newshape=[30, 9]) /* ty=Tensor[(30, 9), bool] */;
  %970 = reshape(%968, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %971 = @func_1703(%969, %970) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(6, 3, 15), bool], Tensor[(30, 9), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64], Tensor[(8, 8, ?), bool], Tensor[(64), float32]) */;
  %972 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %973 = %966.3;
  %974 = %971.2;
  %975 = %972.0;
  (%973, %974, %var_2585, %var_2586, %975)
}

def @func_14391() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32], Tensor[(13, 16, 8), float32]) {
  %976 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %977 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %978 = @func_14298() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %979 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %980 = @func_6528() /* ty=Tensor[(13, 16, 8), float32] */;
  %981 = @func_13595() /* ty=Tensor[(13, 16, 8), bool] */;
  %982 = %976.0;
  %983 = %977.1;
  %984 = %978.1;
  %985 = @func_11204() /* ty=Tensor[(78, 1), float32] */;
  %986 = %979.0;
  (%980, %981, %982, %983, %984, %985, %986)
}

def @func_3470(%var_3419: Tensor[(2730), int32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(6, 3, 15), bool], Tensor[(270), bool], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(64), float32]) {
  %987 = cast(meta[relay.Constant][39] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %988 = reshape(%987, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), bool] */;
  %989 = @func_1545(%988) /* ty=(Tensor[(6, 3, 15), bool],) */;
  %990 = cast(%var_3419, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %991 = cast(%var_3419, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %992 = reshape(%990, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %993 = reshape(%991, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %994 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %995 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %996 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %997 = %989.0;
  %998 = @func_2680(%992, %993) /* ty=Tensor[(14, 15, 13), float64] */;
  %999 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  %1000 = @func_2265() /* ty=Tensor[(64), float32] */;
  %1001 = %994.2;
  (%995, %996, %997, meta[relay.Constant][39] /* ty=Tensor[(270), bool] */, %998, %var_3419, %999, %1000, %1001)
}

def @func_13595() -> Tensor[(13, 16, 8), bool] {
  %1002 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1002.0
}

def @func_16959() -> Tensor[(13, 16, 8), float32] {
  %1003 = @func_11339() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1003.0
}

def @func_13015() -> Tensor[(13, 16, 8), float32] {
  %1004 = @func_9901() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) */;
  %1004.0
}

def @func_15058() -> (Tensor[(13, 16, 8), float32],) {
  %1005 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1006 = %1005.0;
  (%1006,)
}

def @func_1288(%var_1282: Tensor[(12, 9, 15), float64]) -> (Tensor[(12, 9, 15), float64],) {
  %1007 = cast(%var_1282, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %1008 = sqrt(%1007) /* ty=Tensor[(12, 9, 15), float64] */;
  (%1008,)
}

def @func_10891() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) {
  %1009 = @func_6674() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
  %1010 = @func_9245() /* ty=Tensor[(8, 8, ?), uint16] */;
  %1011 = cast(%1010, dtype="float64") /* ty=Tensor[(8, 8, ?), float64] */;
  %1012 = %1009.4;
  %1013 = acosh(%1011) /* ty=Tensor[(8, 8, ?), float64] */;
  (%1012, %1013)
}

def @func_13309() -> Tensor[(13, 16, 8), float32] {
  %1014 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1014.0
}

def @func_12716() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), float32], Tensor[(117, 1), float32], Tensor[(13, 16, 8), float32]) {
  %1015 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1016 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %1017 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %1018 = cast(meta[relay.Constant][40] /* ty=Tensor[(117, 1), float32] */, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
  %1019 = reshape(%1018, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %1020 = @func_10458() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1021 = %1015.0;
  %1022 = %1016.0;
  %1023 = @func_4672() /* ty=Tensor[(13, 16, 8), bool] */;
  %1024 = %1017.0;
  %1025 = @func_2313(%1019) /* ty=Tensor[(3, 3, 13), float32] */;
  %1026 = %1020.0;
  (%1021, %1022, %1023, %1024, %1025, meta[relay.Constant][40] /* ty=Tensor[(117, 1), float32] */, %1026)
}

def @func_12021(%var_12007: Tensor[(3, 11, 8), int16]) -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), uint32], Tensor[(264), int16], Tensor[(3, 11, 8), uint32]) {
  %1027 = @func_8652() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1028 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %1029 = %1028.1;
  %1030 = @func_10050() /* ty=(Tensor[(64), float32],) */;
  %1031 = %1030.0;
  %1032 = cast(%1031, dtype="uint32") /* ty=Tensor[(64), uint32] */;
  %1033 = shape_of(%1029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(%1029, dtype="uint32") /* ty=Tensor[(8, 8, ?), uint32] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1036 = cast(meta[relay.Constant][41] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
  %1037 = cast(meta[relay.Constant][41] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
  %1038 = reshape(%1036, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
  %1039 = reshape(%1037, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
  %1040 = @func_10376(%1038, %1039) /* ty=Tensor[(3, 11, 8), int16] */;
  %1041 = cast(%var_12007, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
  %1042 = shape_of(%1040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1043 = cast(%1040, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
  %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1045 = %1027.0;
  %1046 = left_shift(%1034, %1035) /* ty=Tensor[(8, 8, ?), uint32] */;
  %1047 = bitwise_and(%1043, %1044) /* ty=Tensor[(3, 11, 8), uint32] */;
  (%1045, %1046, meta[relay.Constant][41] /* ty=Tensor[(264), int16] */, %1047)
}

def @func_8915() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1048 = @func_8542() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1049 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1050 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1051 = %1048.0;
  %1052 = %1049.0;
  %1053 = %1050.0;
  (%1051, %1052, %1053)
}

def @func_11776() -> (Tensor[(13, 16, 8), bool],) {
  %1054 = @func_11151() /* ty=Tensor[(13, 16, 8), bool] */;
  (%1054,)
}

def @func_12190() -> (Tensor[(64), float32], Tensor[(12, 12, 13), float64], Tensor[(1872), float64]) {
  %1055 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1056 = cast(meta[relay.Constant][42] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %1057 = cast(meta[relay.Constant][42] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %1058 = reshape(%1056, newshape=[12, 12, 13]) /* ty=Tensor[(12, 12, 13), float64] */;
  %1059 = reshape(%1057, newshape=[12, 12, 13]) /* ty=Tensor[(12, 12, 13), float64] */;
  %1060 = @func_6961(%1058, %1059) /* ty=(Tensor[(12, 12, 13), float64],) */;
  %1061 = %1055.2;
  %1062 = %1060.0;
  (%1061, %1062, meta[relay.Constant][42] /* ty=Tensor[(1872), float64] */)
}

def @func_4513(%var_4498: Tensor[(8, 8, 15), float32]) -> (Tensor[(8, 8, 15), bool],) {
  %1063 = cast(%var_4498, dtype="float32") /* ty=Tensor[(8, 8, 15), float32] */;
  %1064 = asinh(%1063) /* ty=Tensor[(8, 8, 15), float32] */;
  %1065 = cast(%1064, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %1066 = shape_of(%var_4498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1067 = cast(%var_4498, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %1068 = dyn.reshape(%1065, %1066, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1069 = less_equal(%1067, %1068) /* ty=Tensor[(8, 8, 15), bool] */;
  (%1069,)
}

def @func_1313() -> Tensor[(13, 16, 8), float32] {
  %1070 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1070.0
}

def @func_11339() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1071 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1072 = @func_9830() /* ty=(Tensor[(64), float32],) */;
  %1073 = @func_8424() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1074 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1075 = %1071.0;
  %1076 = %1072.0;
  %1077 = %1073.0;
  %1078 = %1074.0;
  (%1075, %1076, %1077, %1078)
}

def @func_12297() -> Tensor[(13, 16, 8), float32] {
  %1079 = @func_9886() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1079.0
}

def @func_15624() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %1080 = @func_10124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
  %1081 = @func_9770() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1082 = %1080.1;
  %1083 = %1081.0;
  (%1082, %1083)
}

def @func_5092() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1084 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1085 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1086 = %1084.0;
  %1087 = %1085.0;
  (%1086, %1087)
}

def @func_2141() -> (Tensor[(13, 16, 8), float32],) {
  %1088 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %1089 = cast(%1088, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %1090 = tan(%1089) /* ty=Tensor[(13, 16, 8), float32] */;
  %1091 = cast(%1090, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %1092 = asinh(%1091) /* ty=Tensor[(13, 16, 8), float32] */;
  (%1092,)
}

def @func_13228(%var_13221: Tensor[(16, 13, 1), uint32], %var_13222: Tensor[(16, 13, 16), uint32]) -> Tensor[(16, 13, 16), uint32] {
  %1093 = cast(%var_13221, dtype="uint32") /* ty=Tensor[(16, 13, 1), uint32] */;
  %1094 = cast(%var_13222, dtype="uint32") /* ty=Tensor[(16, 13, 16), uint32] */;
  add(%1093, %1094) /* ty=Tensor[(16, 13, 16), uint32] */
}

def @func_7001() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1095 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1096 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1097 = %1095.0;
  %1098 = %1096.0;
  (%1097, %1098)
}

def @func_15660(%var_15651: Tensor[(264), int16]) -> (Tensor[(13, 16, 8), float32], Tensor[(3, 11, 8), int16], Tensor[(264), int16]) {
  %1099 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1100 = cast(%var_15651, dtype="int16") /* ty=Tensor[(264), int16] */;
  %1101 = cast(%var_15651, dtype="int16") /* ty=Tensor[(264), int16] */;
  %1102 = reshape(%1100, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
  %1103 = reshape(%1101, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
  %1104 = %1099.0;
  %1105 = @func_10376(%1102, %1103) /* ty=Tensor[(3, 11, 8), int16] */;
  (%1104, %1105, %var_15651)
}

def @func_9944(%var_9912: Tensor[(78, 1), float32]) -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(78, 1), float32], Tensor[(8, 8), float32], Tensor[(3, 3, 13), float32], Tensor[(117), float32]) {
  %1106 = cast(%var_9912, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %1107 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 8), float32] */;
  %1108 = reshape(%1106, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %1109 = reshape(%1107, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1110 = @func_938(%1108, %1109) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
  %1111 = cast(meta[relay.Constant][44] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %1112 = reshape(%1111, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %1113 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %1114 = %1110.1;
  %1115 = @func_2313(%1112) /* ty=Tensor[(3, 3, 13), float32] */;
  (%1113, %1114, %var_9912, meta[relay.Constant][43] /* ty=Tensor[(8, 8), float32] */, %1115, meta[relay.Constant][44] /* ty=Tensor[(117), float32] */)
}

def @func_7730() -> (Tensor[(13, 16, 8), bool],) {
  %1116 = @func_5326() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
  %1117 = %1116.1;
  (%1117,)
}

def @func_12456() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1118 = @func_6779() /* ty=Tensor[(13, 16, 8), float32] */;
  %1119 = @func_8588() /* ty=Tensor[(64), float32] */;
  (%1118, %1119)
}

def @func_2492() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %1120 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1121 = %1120.0;
  %1122 = cast(%1121, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %1123 = log10(%1122) /* ty=Tensor[(13, 16, 8), float32] */;
  %1124 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %1125 = shape_of(%1123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1126 = cast(%1123, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1128 = @func_2154() /* ty=(Tensor[(64), float32],) */;
  %1129 = cast(meta[relay.Constant][46] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %1130 = %1128.0;
  %1131 = cast(%1130, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1132 = reshape(%1129, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %1133 = reshape(%1131, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1134 = @func_938(%1132, %1133) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
  %1135 = floor_mod(%1126, %1127) /* ty=Tensor[(13, 16, 8), float32] */;
  %1136 = %1134.1;
  %1137 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %1138 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  (%1135, %1130, %1136, meta[relay.Constant][46] /* ty=Tensor[(78), float32] */, %1137, %1138)
}

def @func_4279(%var_4142: Tensor[(270), bool]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), int32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(30, 9), uint8], Tensor[(6, 3, 15), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  %1139 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %1140 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1141 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %1142 = cast(meta[relay.Constant][47] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %1143 = reshape(%1142, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %1144 = @func_2313(%1143) /* ty=Tensor[(3, 3, 13), float32] */;
  %1145 = cast(meta[relay.Constant][47] /* ty=Tensor[(117), float32] */, dtype="int32") /* ty=Tensor[(117), int32] */;
  %1146 = shape_of(%1144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1147 = cast(%1144, dtype="int32") /* ty=Tensor[(3, 3, 13), int32] */;
  %1148 = dyn.reshape(%1145, %1146, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1149 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1150 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %1151 = cast(%var_4142, dtype="bool") /* ty=Tensor[(270), bool] */;
  %1152 = %1139.0;
  %1153 = cast(%1152, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1154 = reshape(%1151, newshape=[270]) /* ty=Tensor[(270), bool] */;
  %1155 = reshape(%1153, newshape=[16, 4]) /* ty=Tensor[(16, 4), float32] */;
  %1156 = @func_2628(%1154, %1155) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) */;
  %1157 = %1156.1;
  %1158 = cast(%var_4142, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %1159 = shape_of(%1157, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1160 = cast(%1157, dtype="uint8") /* ty=Tensor[(30, 9), uint8] */;
  %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1162 = cast(%1157, dtype="bool") /* ty=Tensor[(30, 9), bool] */;
  %1163 = reshape(%1162, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), bool] */;
  %1164 = @func_1545(%1163) /* ty=(Tensor[(6, 3, 15), bool],) */;
  %1165 = cast(meta[relay.Constant][48] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %1166 = cast(meta[relay.Constant][48] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %1167 = reshape(%1165, newshape=[270, 6]) /* ty=Tensor[(270, 6), float64] */;
  %1168 = reshape(%1166, newshape=[270, 6]) /* ty=Tensor[(270, 6), float64] */;
  %1169 = @func_2237(%1167, %1168) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(270, 6), uint8]) */;
  %1170 = %1140.0;
  %1171 = %1141.2;
  %1172 = subtract(%1147, %1148) /* ty=Tensor[(3, 3, 13), int32] */;
  %1173 = %1149.0;
  %1174 = %1150.0;
  %1175 = logical_xor(%1160, %1161) /* ty=Tensor[(30, 9), uint8] */;
  %1176 = %1164.0;
  %1177 = %1169.1;
  (%1152, %1170, %1171, %1172, %1173, %1174, %1175, %1176, %1177, meta[relay.Constant][48] /* ty=Tensor[(1620), float64] */)
}

def @func_9886() -> (Tensor[(13, 16, 8), float32],) {
  %1178 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1179 = %1178.1;
  (%1179,)
}

def @func_14156() -> Tensor[(13, 16, 8), float32] {
  %1180 = @func_13080() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1180.2
}

def @func_4749() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1181 = @func_2204() /* ty=(Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) */;
  %1182 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %1183 = %1181.1;
  %1184 = %1182.0;
  (%1183, %1184)
}

def @func_17825() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1185 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1186 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  %1187 = @func_7262() /* ty=Tensor[(13, 16, 8), bool] */;
  %1188 = %1185.1;
  (%1186, %1187, %1188)
}

def @func_3847() -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %1189 = @func_3243() /* ty=(Tensor[(64), float32],) */;
  %1190 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1191 = %1189.0;
  %1192 = @func_3570() /* ty=Tensor[(64), float32] */;
  %1193 = %1190.0;
  (%1191, %1192, %1193)
}

def @func_14124() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1194 = @func_12716() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), float32], Tensor[(117, 1), float32], Tensor[(13, 16, 8), float32]) */;
  %1195 = @func_11419() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1196 = %1194.2;
  %1197 = %1195.0;
  (%1196, %1197)
}

def @func_2265() -> Tensor[(64), float32] {
  %1198 = @func_2154() /* ty=(Tensor[(64), float32],) */;
  %1198.0
}

def @func_16569() -> (Tensor[(13, 16, 8), float32],) {
  %1199 = @func_10324() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1199,)
}

def @func_6674() -> (Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  %1200 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %1201 = @func_3243() /* ty=(Tensor[(64), float32],) */;
  %1202 = @func_5495() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1203 = @func_4367() /* ty=(Tensor[(64), float32],) */;
  %1204 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1205 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1206 = @func_5051() /* ty=(Tensor[(64), float32],) */;
  %1207 = %1200.0;
  %1208 = %1201.0;
  %1209 = %1202.0;
  %1210 = %1203.0;
  %1211 = %1204.0;
  %1212 = %1205.0;
  %1213 = %1206.0;
  (%1207, %1208, %1209, %1210, %1211, %1212, %1213)
}

def @func_11371() -> Tensor[(13, 16, 8), float32] {
  %1214 = @func_4950() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, 15), bool], Tensor[(960), float32]) */;
  %1214.0
}

def @func_13756() -> Tensor[(64), float32] {
  %1215 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1215.0
}

def @func_5801() -> (Tensor[(13, 16, 8), bool],) {
  %1216 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1217 = %1216.0;
  (%1217,)
}

def @func_558(%var_530: Tensor[(8, 8, 1), float32]) -> (Tensor[(8, 8, ?), bool],) {
  %1218 = cast(%var_530, dtype="float32") /* ty=Tensor[(8, 8, 1), float32] */;
  %1219 = erf(%1218) /* ty=Tensor[(8, 8, 1), float32] */;
  %1220 = cast(%var_530, dtype="bool") /* ty=Tensor[(8, 8, 1), bool] */;
  %1221 = shape_of(%1219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1222 = cast(%1219, dtype="bool") /* ty=Tensor[(8, 8, 1), bool] */;
  %1223 = dyn.reshape(%1220, %1221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1224 = greater(%1222, %1223) /* ty=Tensor[(8, 8, ?), bool] */;
  (%1224,)
}

def @func_4086() -> (Tensor[(13, 16, 8), uint64], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool]) {
  %1225 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %1226 = cast(meta[relay.Constant][49] /* ty=Tensor[(2730), int32] */, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %1227 = cast(meta[relay.Constant][49] /* ty=Tensor[(2730), int32] */, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %1228 = reshape(%1226, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %1229 = reshape(%1227, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %1230 = %1225.0;
  %1231 = @func_2680(%1228, %1229) /* ty=Tensor[(14, 15, 13), float64] */;
  %1232 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%1230, %1231, meta[relay.Constant][49] /* ty=Tensor[(2730), int32] */, %1232)
}

def @func_13352() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1233 = @func_11776() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1234 = @func_8748() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1235 = @func_10891() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) */;
  %1236 = %1233.0;
  %1237 = %1234.0;
  %1238 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  %1239 = %1235.0;
  (%1236, %1237, %1238, %1239)
}

def @func_17048() -> Tensor[(13, 16, 8), float32] {
  %1240 = @func_13554() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1240.0
}

def @func_13114() -> (Tensor[(13, 16, 8), float32],) {
  %1241 = @func_8843() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1241,)
}

def @func_7793() -> (Tensor[(13, 16, 8), float32],) {
  %1242 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1243 = %1242.0;
  (%1243,)
}

def @func_8424() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1244 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1245 = @func_6074() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %1246 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %1247 = %1244.1;
  %1248 = %1245.1;
  %1249 = @func_6769() /* ty=Tensor[(13, 16, 8), float32] */;
  %1250 = %1246.0;
  (%1247, %1248, %1249, %1250)
}

def @func_3669() -> (Tensor[(64), float32],) {
  %1251 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %1252 = %1251.0;
  (%1252,)
}

def @func_9338() -> (Tensor[(13, 16, 8), bool],) {
  %1253 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1254 = %1253.0;
  (%1254,)
}

def @func_8588() -> Tensor[(64), float32] {
  %1255 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1255.0
}

def @func_16100(%var_16092: Tensor[(15, 2, 1), float32]) -> Tensor[(15, 2, 16), float32] {
  %1256 = cast(%var_16092, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %1257 = cast(meta[relay.Constant][50] /* ty=Tensor[(15, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  floor_mod(%1256, %1257) /* ty=Tensor[(15, 2, 16), float32] */
}

def @func_13554() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1258 = @func_10844() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1259 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1260 = %1258.0;
  %1261 = %1259.0;
  (%1260, %1261)
}

def @func_6789() -> (Tensor[(13, 16, 8), float32],) {
  %1262 = @func_5446() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1263 = %1262.0;
  (%1263,)
}

def @func_10844() -> (Tensor[(13, 16, 8), float32],) {
  %1264 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1265 = %1264.0;
  (%1265,)
}

def @func_7262() -> Tensor[(13, 16, 8), bool] {
  %1266 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1266.1
}

def @func_2237(%var_2223: Tensor[(270, 6), float64], %var_2231: Tensor[(270, 6), float64]) -> (Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(270, 6), uint8]) {
  %1267 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1268 = cast(%var_2223, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
  %1269 = reshape(%1268, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %1270 = @func_1288(%1269) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %1271 = cast(%var_2231, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
  %1272 = shape_of(%var_2223, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1273 = cast(%var_2223, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
  %1274 = dyn.reshape(%1271, %1272, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1275 = %1267.0;
  %1276 = %1270.0;
  %1277 = minimum(%1273, %1274) /* ty=Tensor[(270, 6), uint8] */;
  (%1275, %1276, %1277)
}

def @func_11006() -> (Tensor[(13, 16, 8), float32], Tensor[(36), float64], Tensor[(24, 26), float32]) {
  %1278 = @func_5393() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1279 = cast(meta[relay.Constant][51] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %1280 = cast(meta[relay.Constant][52] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %1281 = reshape(%1279, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %1282 = reshape(%1280, newshape=[624]) /* ty=Tensor[(624), uint64] */;
  %1283 = @func_8128(%1281, %1282) /* ty=(Tensor[(13, 3, 16), bool], Tensor[(624), uint64], Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float32]) */;
  %1284 = %1283.1;
  %1285 = cast(%1284, dtype="float32") /* ty=Tensor[(624), float32] */;
  %1286 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(24, 26), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1287 = cast(meta[relay.Constant][52] /* ty=Tensor[(24, 26), uint64] */, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %1288 = dyn.reshape(%1285, %1286, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1289 = %1278.1;
  %1290 = power(%1287, %1288) /* ty=Tensor[(24, 26), float32] */;
  (%1289, meta[relay.Constant][51] /* ty=Tensor[(36), float64] */, %1290)
}

def @func_17222() -> (Tensor[(3, 3, 13), float32],) {
  %1291 = @func_12937() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %1292 = %1291.0;
  (%1292,)
}

def @func_2037() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) {
  %1293 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1294 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1295 = %1294.0;
  %1296 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 16, 8), float32] */, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
  %1297 = shape_of(%1295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1298 = cast(%1295, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
  %1299 = dyn.reshape(%1296, %1297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1300 = %1293.0;
  %1301 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  %1302 = add(%1298, %1299) /* ty=Tensor[(13, 16, 8), uint64] */;
  %1303 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1300, %1301, %1302, %1303)
}

def @func_14517(%var_14495: Tensor[(15, 13, 7), float64], %var_14496: Tensor[(15, 13, 7), float64]) -> (Tensor[(15, 13, 7), float64], Tensor[(13, 16, 8), uint64]) {
  %1304 = cast(%var_14496, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
  %1305 = shape_of(%var_14495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1306 = cast(%var_14495, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
  %1307 = dyn.reshape(%1304, %1305, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1308 = @func_13906() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64]) */;
  %1309 = divide(%1306, %1307) /* ty=Tensor[(15, 13, 7), float64] */;
  %1310 = %1308.0;
  (%1309, %1310)
}

def @func_14709() -> Tensor[(13, 16, 8), float32] {
  @func_1113() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_12219(%var_12202: Tensor[(117), float32]) -> (Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(78), float32], Tensor[(8, 8, ?), float32]) {
  %1311 = cast(%var_12202, dtype="float32") /* ty=Tensor[(117), float32] */;
  %1312 = reshape(%1311, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %1313 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1314 = @func_10891() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) */;
  %1315 = %1314.1;
  %1316 = cast(%1315, dtype="float32") /* ty=Tensor[(8, 8, ?), float32] */;
  %1317 = @func_2313(%1312) /* ty=Tensor[(3, 3, 13), float32] */;
  %1318 = %1313.3;
  %1319 = asinh(%1316) /* ty=Tensor[(8, 8, ?), float32] */;
  (%1317, %var_12202, %1318, %1319)
}

def @func_15979() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %1320 = @func_9770() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1321 = @func_11776() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1322 = %1320.2;
  %1323 = %1321.0;
  (%1322, %1323)
}

def @func_15015() -> Tensor[(13, 16, 8), float32] {
  @func_8843() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_5222() -> Tensor[(13, 16, 8), float32] {
  %1324 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1324.0
}

def @func_9969() -> (Tensor[(13, 16, 8), float32],) {
  %1325 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1325,)
}

def @func_2693() -> (Tensor[(13, 16, 8), uint64],) {
  %1326 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %1327 = %1326.2;
  (%1327,)
}

def @func_5446() -> (Tensor[(13, 16, 8), float32],) {
  %1328 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1329 = %1328.0;
  (%1329,)
}

def @func_9515() -> Tensor[(13, 16, 8), float32] {
  @func_6769() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_5525() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1330 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1331 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1332 = %1330.0;
  %1333 = %1331.0;
  (%1332, %1333)
}

def @func_8069() -> Tensor[(13, 16, 8), bool] {
  %1334 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1334.0
}

def @func_13418() -> Tensor[(64), float32] {
  %1335 = @func_9684() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1335.1
}

def @func_18753(%var_18725: Tensor[(78, 9), float32]) -> (Tensor[(78, 9), uint16], Tensor[(78, 1), float32]) {
  %1336 = @func_9901() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) */;
  %1337 = %1336.1;
  %1338 = cast(%1337, dtype="uint16") /* ty=Tensor[(78, 1), uint16] */;
  %1339 = cast(%var_18725, dtype="uint16") /* ty=Tensor[(78, 9), uint16] */;
  %1340 = cast(%1337, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %1341 = minimum(%1338, %1339) /* ty=Tensor[(78, 9), uint16] */;
  %1342 = log2(%1340) /* ty=Tensor[(78, 1), float32] */;
  (%1341, %1342)
}

def @func_15098() -> Tensor[(64), float32] {
  %1343 = @func_8275() /* ty=(Tensor[(64), float32],) */;
  %1343.0
}

def @func_16310() -> Tensor[(13, 16, 8), float32] {
  %1344 = @func_13585() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1344.0
}

def @func_2313(%var_2294: Tensor[(3, 3, 13), float32]) -> Tensor[(3, 3, 13), float32] {
  %1345 = cast(%var_2294, dtype="float32") /* ty=Tensor[(3, 3, 13), float32] */;
  log2(%1345) /* ty=Tensor[(3, 3, 13), float32] */
}

def @func_5714() -> (Tensor[(13, 16, 8), float32],) {
  %1346 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1347 = %1346.1;
  (%1347,)
}

def @func_14235() -> (Tensor[(13, 16, 8), float32],) {
  %1348 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1349 = %1348.0;
  (%1349,)
}

def @func_18693(%var_18624: Tensor[(2, 2, 2), float64], %var_18625: Tensor[(2, 2, 2), float64]) -> (Tensor[(13, 16, 8), float32], Tensor[(2, 2, 2), bool]) {
  %1350 = @func_18094() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1351 = cast(%var_18625, dtype="float64") /* ty=Tensor[(2, 2, 2), float64] */;
  %1352 = shape_of(%var_18624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1353 = cast(%var_18624, dtype="float64") /* ty=Tensor[(2, 2, 2), float64] */;
  %1354 = dyn.reshape(%1351, %1352, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1355 = floor_mod(%1353, %1354) /* ty=Tensor[(2, 2, 2), float64] */;
  %1356 = cast(%1355, dtype="bool") /* ty=Tensor[(2, 2, 2), bool] */;
  %1357 = shape_of(%var_18625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1358 = cast(%var_18625, dtype="bool") /* ty=Tensor[(2, 2, 2), bool] */;
  %1359 = dyn.reshape(%1356, %1357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1360 = %1350.2;
  %1361 = less_equal(%1358, %1359) /* ty=Tensor[(2, 2, 2), bool] */;
  (%1360, %1361)
}

def @func_7385(%var_7331: Tensor[(2730), int32]) -> (Tensor[(13, 16, 8), bool], Tensor[(2730), int32], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(270), bool], Tensor[(13, 16, 8), bool]) {
  %1362 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1363 = cast(%var_7331, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %1364 = cast(%var_7331, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %1365 = reshape(%1363, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %1366 = reshape(%1364, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %1367 = @func_2680(%1365, %1366) /* ty=Tensor[(14, 15, 13), float64] */;
  %1368 = cast(%1367, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %1369 = acos(%1368) /* ty=Tensor[(14, 15, 13), float64] */;
  %1370 = cast(%1369, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %1371 = cast(meta[relay.Constant][54] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %1372 = reshape(%1371, newshape=[270]) /* ty=Tensor[(270), bool] */;
  %1373 = @func_4279(%1372) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), int32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(30, 9), uint8], Tensor[(6, 3, 15), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
  %1374 = %1362.1;
  %1375 = exp(%1370) /* ty=Tensor[(14, 15, 13), float64] */;
  %1376 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  %1377 = %1373.2;
  %1378 = @func_3394() /* ty=Tensor[(13, 16, 8), bool] */;
  (%1374, %var_7331, %1375, %1376, %1377, meta[relay.Constant][54] /* ty=Tensor[(270), bool] */, %1378)
}

def @func_16698(%var_16689: Tensor[(5, 12, 2), float32]) -> (Tensor[(5, 12, 2), float32], Tensor[(13, 16, 8), float32]) {
  %1379 = cast(%var_16689, dtype="float32") /* ty=Tensor[(5, 12, 2), float32] */;
  %1380 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1381 = acosh(%1379) /* ty=Tensor[(5, 12, 2), float32] */;
  %1382 = %1380.1;
  (%1381, %1382)
}

def @func_8778(%var_8773: Tensor[(3, 15, 8), uint64]) -> Tensor[(3, 15, 8), uint64] {
  %1383 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 15, 8), uint64] */, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %1384 = shape_of(%var_8773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1385 = cast(%var_8773, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %1386 = dyn.reshape(%1383, %1384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%1385, %1386) /* ty=Tensor[(3, 15, 8), uint64] */
}

def @func_17566() -> Tensor[(13, 16, 8), float32] {
  %1387 = @func_16569() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1387.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5133() -> (Tensor[(13, 16, 8), float32],) {
  %0 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_1890(%var_1878: Tensor[(1, 1620), float64]) -> (Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) {
  %2 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
  %4 = erf(%3) /* ty=Tensor[(13, 16, 8), float64] */;
  %5 = cast(%2, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="int16") /* ty=Tensor[(13, 16, 8), int16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %9 = cast(%var_1878, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %10 = reshape(%9, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %11 = @func_1288(%10) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %12 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %13 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %14 = bitwise_and(%7, %8) /* ty=Tensor[(13, 16, 8), int16] */;
  %15 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %16 = %11.0;
  %17 = %12.0;
  %18 = %13.4;
  (%14, %15, %16, %var_1878, %17, %18)
}

def @func_11797(%var_11780: Tensor[(14, 6, 8), float32]) -> (Tensor[(14, 6, 8), float64], Tensor[(13, 16, 8), float32]) {
  %19 = cast(%var_11780, dtype="float32") /* ty=Tensor[(14, 6, 8), float32] */;
  %20 = asinh(%19) /* ty=Tensor[(14, 6, 8), float32] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %22 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %23 = asin(%21) /* ty=Tensor[(14, 6, 8), float64] */;
  %24 = %22.1;
  (%23, %24)
}

def @func_2155() -> (Tensor[(64), float32],) {
  %27 = fn () -> (Tensor[(64), float32],) {
    %25 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
    %26 = %25.2;
    (%26,)
  };
  %27() /* ty=(Tensor[(64), float32],) */
}

def @func_12222(%var_12220: Tensor[(117), float32]) -> (Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(78), float32], Tensor[(8, 8, ?), float32]) {
  @func_12219(%var_12220) /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(78), float32], Tensor[(8, 8, ?), float32]) */
}

def @func_7462(%var_7461: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %33 = fn (%var_7455: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %28 = cast(%var_7455, dtype="float32") /* ty=Tensor[(64), float32] */;
    %29 = reshape(%28, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %30 = @func_1462(%29) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
    %31 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
    %32 = %30.0;
    (%31, %32, %var_7455)
  };
  %33(%var_7461) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_8188(%var_8187: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) {
  %43 = fn (%var_8167: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) {
    %34 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %35 = @func_6674() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
    %36 = cast(%var_8167, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %37 = reshape(%36, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), uint64] */;
    %38 = @func_3113(%37) /* ty=(Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
    %39 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
    %40 = %34.1;
    %41 = %35.0;
    %42 = %38.1;
    (%39, %40, %41, %42, %var_8167)
  };
  %43(%var_8187) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) */
}

def @func_5995() -> (Tensor[(13, 16, 8), float32],) {
  %46 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %44 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %45 = %44.0;
    (%45,)
  };
  %46() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_12937() -> (Tensor[(3, 3, 13), float32], Tensor[(64), float32], Tensor[(64), float32]) {
  %47 = @func_11559() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) */;
  %48 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %49 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %50 = %47.0;
  %51 = %48.2;
  %52 = %49.0;
  (%50, %51, %52)
}

def @func_13993() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %57 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
    %53 = @func_9189() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %54 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %55 = %53.0;
    %56 = %54.1;
    (%55, %56)
  };
  %57() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_16941() -> (Tensor[(64), float32],) {
  @func_16939() /* ty=(Tensor[(64), float32],) */
}

def @func_1850() -> (Tensor[(13, 16, 8), float32],) {
  @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_15476() -> (Tensor[(8, 8, ?), float64], Tensor[(13, 16, 8), float32]) {
  %62 = fn () -> (Tensor[(8, 8, ?), float64], Tensor[(13, 16, 8), float32]) {
    %58 = @func_10891() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) */;
    %59 = @func_9644() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %60 = %58.1;
    %61 = %59.0;
    (%60, %61)
  };
  %62() /* ty=(Tensor[(8, 8, ?), float64], Tensor[(13, 16, 8), float32]) */
}

def @func_15520() -> Tensor[(13, 16, 8), float32] {
  %63 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %63.0
}

def @func_9631(%var_9629: Tensor[(270), bool]) -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(270), float32]) {
  @func_9628(%var_9629) /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(270), float32]) */
}

def @func_11419() -> (Tensor[(13, 16, 8), float32],) {
  %64 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %65 = %64.1;
  (%65,)
}

def @func_15585() -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), int16], Tensor[(1620), float64], Tensor[(117), float32], Tensor[(78), float32]) {
  %79 = fn () -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), int16], Tensor[(1620), float64], Tensor[(117), float32], Tensor[(78), float32]) {
    %66 = @func_3669() /* ty=(Tensor[(64), float32],) */;
    %67 = @func_10216() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
    %68 = cast(meta[relay.Constant][0] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %69 = reshape(%68, newshape=[1, 1620]) /* ty=Tensor[(1, 1620), float64] */;
    %70 = @func_1890(%69) /* ty=(Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) */;
    %71 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %72 = reshape(%71, newshape=[78, 1]) /* ty=Tensor[(78, 1), float32] */;
    %73 = @func_9944(%72) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(78, 1), float32], Tensor[(8, 8), float32], Tensor[(3, 3, 13), float32], Tensor[(117), float32]) */;
    %74 = @func_13418() /* ty=Tensor[(64), float32] */;
    %75 = %66.0;
    %76 = %67.1;
    %77 = %70.0;
    %78 = %73.5;
    (%74, %75, %76, %77, meta[relay.Constant][0] /* ty=Tensor[(1620), float64] */, %78, meta[relay.Constant][1] /* ty=Tensor[(78), float32] */)
  };
  %79() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), int16], Tensor[(1620), float64], Tensor[(117), float32], Tensor[(78), float32]) */
}

def @func_15979() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %80 = @func_9770() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %81 = @func_11776() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %82 = %80.2;
  %83 = %81.0;
  (%82, %83)
}

def @func_14664() -> Tensor[(64), float32] {
  %85 = fn () -> Tensor[(64), float32] {
    %84 = @func_2768() /* ty=(Tensor[(64), float32],) */;
    %84.0
  };
  %85() /* ty=Tensor[(64), float32] */
}

def @func_5328() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  @func_5326() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */
}

def @func_11092() -> (Tensor[(13, 16, 8), float32], Tensor[(78), float32]) {
  %86 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %87 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
  %88 = %86.3;
  (%87, %88)
}

def @func_13906() -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64]) {
  %89 = @func_11559() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) */;
  %90 = @func_5525() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %91 = @func_13003() /* ty=(Tensor[(14, 15, 13), float64],) */;
  %92 = %89.3;
  %93 = %90.0;
  %94 = %91.0;
  (%92, %93, %94)
}

def @func_15981() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  @func_15979() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_6477() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_18185() -> Tensor[(13, 16, 8), bool] {
  %95 = fn () -> Tensor[(13, 16, 8), bool] {
    @func_3394() /* ty=Tensor[(13, 16, 8), bool] */
  };
  %95() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_13199() -> Tensor[(13, 16, 8), bool] {
  %96 = fn () -> Tensor[(13, 16, 8), bool] {
    @func_8926() /* ty=Tensor[(13, 16, 8), bool] */
  };
  %96() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_9190() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %106 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
    %97 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %98 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
    %99 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %100 = %97.0;
    %101 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
    %102 = %98.3;
    %103 = @func_3570() /* ty=Tensor[(64), float32] */;
    %104 = %99.0;
    %105 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
    (%100, %101, %102, %103, %104, %105)
  };
  %106() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_12541() -> (Tensor[(64), float32], Tensor[(7, 5, 11), uint32], uint32, Tensor[(385), uint32]) {
  %114 = fn () -> (Tensor[(64), float32], Tensor[(7, 5, 11), uint32], uint32, Tensor[(385), uint32]) {
    %107 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %108 = cast(meta[relay.Constant][3] /* ty=Tensor[(385), uint32] */, dtype="uint32") /* ty=Tensor[(385), uint32] */;
    %109 = reshape(%107, newshape=[]) /* ty=uint32 */;
    %110 = reshape(%108, newshape=[7, 5, 11]) /* ty=Tensor[(7, 5, 11), uint32] */;
    %111 = @func_12046(%109, %110) /* ty=(Tensor[(7, 5, 11), uint32],) */;
    %112 = @func_9573() /* ty=Tensor[(64), float32] */;
    %113 = %111.0;
    (%112, %113, meta[relay.Constant][2] /* ty=uint32 */, meta[relay.Constant][3] /* ty=Tensor[(385), uint32] */)
  };
  %114() /* ty=(Tensor[(64), float32], Tensor[(7, 5, 11), uint32], uint32, Tensor[(385), uint32]) */
}

def @func_5870() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  %115 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %116 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %117 = @func_4319() /* ty=(Tensor[(64), float32],) */;
  %118 = %115.3;
  %119 = %116.0;
  %120 = %117.0;
  (%118, %119, %120)
}

def @func_3213() -> (Tensor[(64), float32],) {
  %122 = fn () -> (Tensor[(64), float32],) {
    %121 = @func_2265() /* ty=Tensor[(64), float32] */;
    (%121,)
  };
  %122() /* ty=(Tensor[(64), float32],) */
}

def @func_14225(%var_14223: Tensor[(135), float32]) -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(135), float32], Tensor[(135), float32]) {
  @func_14222(%var_14223) /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(135), float32], Tensor[(135), float32]) */
}

def @func_1314() -> Tensor[(13, 16, 8), float32] {
  %124 = fn () -> Tensor[(13, 16, 8), float32] {
    %123 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %123.0
  };
  %124() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_2493() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %144 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
    %125 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %126 = %125.0;
    %127 = cast(%126, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    %128 = log10(%127) /* ty=Tensor[(13, 16, 8), float32] */;
    %129 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%128, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %133 = @func_2154() /* ty=(Tensor[(64), float32],) */;
    %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %135 = %133.0;
    %136 = cast(%135, dtype="float32") /* ty=Tensor[(64), float32] */;
    %137 = reshape(%134, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
    %138 = reshape(%136, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %139 = @func_938(%137, %138) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
    %140 = floor_mod(%131, %132) /* ty=Tensor[(13, 16, 8), float32] */;
    %141 = %139.1;
    %142 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
    %143 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
    (%140, %135, %141, meta[relay.Constant][5] /* ty=Tensor[(78), float32] */, %142, %143)
  };
  %144() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_15230() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %149 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
    %145 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %146 = @func_13015() /* ty=Tensor[(13, 16, 8), float32] */;
    %147 = @func_14156() /* ty=Tensor[(13, 16, 8), float32] */;
    %148 = %145.0;
    (%146, %147, %148)
  };
  %149() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_15186(%var_15184: Tensor[(1, 98), bool]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(7, 7, 2), bool], Tensor[(1, 98), bool], Tensor[(64), float32]) {
  @func_15183(%var_15184) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(7, 7, 2), bool], Tensor[(1, 98), bool], Tensor[(64), float32]) */
}

def @func_13629() -> Tensor[(13, 16, 8), uint64] {
  %150 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %150.1
}

def @func_18022() -> (Tensor[(13, 16, 8), float32],) {
  %153 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %151 = @func_4828() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) */;
    %152 = %151.5;
    (%152,)
  };
  %153() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_12749() -> Tensor[(13, 16, 8), bool] {
  %155 = fn () -> Tensor[(13, 16, 8), bool] {
    %154 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
    %154.0
  };
  %155() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_16375(%var_16374: Tensor[(1, 16, 6), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), bool], Tensor[(13, 16, 8), bool], Tensor[(9, 10, 2), float64]) {
  %174 = fn (%var_16320: Tensor[(1, 16, 6), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), bool], Tensor[(13, 16, 8), bool], Tensor[(9, 10, 2), float64]) {
    %156 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
    %157 = cast(%var_16320, dtype="float32") /* ty=Tensor[(1, 16, 6), float32] */;
    %158 = exp(%157) /* ty=Tensor[(1, 16, 6), float32] */;
    %159 = cast(%158, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
    %160 = shape_of(%var_16320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %161 = cast(%var_16320, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %163 = cast(%var_16320, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
    %164 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%158, dtype="bool") /* ty=Tensor[(1, 16, 6), bool] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %167 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %168 = @func_12605() /* ty=(Tensor[(9, 10, 2), float64],) */;
    %169 = %156.3;
    %170 = greater_equal(%161, %162) /* ty=Tensor[(?, 16, 6), bool] */;
    %171 = logical_and(%165, %166) /* ty=Tensor[(?, 16, 6), bool] */;
    %172 = %167.0;
    %173 = %168.0;
    (%169, %170, %171, %172, %173)
  };
  %174(%var_16374) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(?, 16, 6), bool], Tensor[(?, 16, 6), bool], Tensor[(13, 16, 8), bool], Tensor[(9, 10, 2), float64]) */
}

def @func_4458() -> (Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) {
  @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */
}

def @func_17827() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  @func_17825() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_15811() -> (Tensor[(13, 16, 8), float32],) {
  %176 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %175 = @func_13309() /* ty=Tensor[(13, 16, 8), float32] */;
    (%175,)
  };
  %176() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_1703(%var_1666: Tensor[(30, 9), bool], %var_1701: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(6, 3, 15), bool], Tensor[(30, 9), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64], Tensor[(8, 8, ?), bool], Tensor[(64), float32]) {
  %177 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %178 = cast(%var_1666, dtype="bool") /* ty=Tensor[(30, 9), bool] */;
  %179 = reshape(%178, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), bool] */;
  %180 = @func_1545(%179) /* ty=(Tensor[(6, 3, 15), bool],) */;
  %181 = cast(meta[relay.Constant][6] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %182 = reshape(%181, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %183 = @func_1288(%182) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %184 = cast(%var_1701, dtype="float32") /* ty=Tensor[(64), float32] */;
  %185 = reshape(%184, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %186 = @func_558(%185) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %187 = %177.0;
  %188 = %180.0;
  %189 = %183.0;
  %190 = %186.0;
  (%187, %188, %var_1666, %189, meta[relay.Constant][6] /* ty=Tensor[(1620), float64] */, %190, %var_1701)
}

def @func_12192() -> (Tensor[(64), float32], Tensor[(12, 12, 13), float64], Tensor[(1872), float64]) {
  @func_12190() /* ty=(Tensor[(64), float32], Tensor[(12, 12, 13), float64], Tensor[(1872), float64]) */
}

def @func_16214() -> Tensor[(13, 16, 8), float32] {
  %192 = fn () -> Tensor[(13, 16, 8), float32] {
    %191 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %191.0
  };
  %192() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_13015() -> Tensor[(13, 16, 8), float32] {
  %193 = @func_9901() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) */;
  %193.0
}

def @func_5285() -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_3570() -> Tensor[(64), float32] {
  %194 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %194.3
}

def @func_12263() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  @func_12261() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_8844() -> Tensor[(13, 16, 8), float32] {
  %196 = fn () -> Tensor[(13, 16, 8), float32] {
    %195 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %195.0
  };
  %196() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_5094() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_13486(%var_13485: Tensor[(11, 2, 3), float32]) -> (Tensor[(11, 2, 3), float32],) {
  %199 = fn (%var_13481: Tensor[(11, 2, 3), float32]) -> (Tensor[(11, 2, 3), float32],) {
    %197 = cast(%var_13481, dtype="float32") /* ty=Tensor[(11, 2, 3), float32] */;
    %198 = atan(%197) /* ty=Tensor[(11, 2, 3), float32] */;
    (%198,)
  };
  %199(%var_13485) /* ty=(Tensor[(11, 2, 3), float32],) */
}

def @func_17224() -> (Tensor[(3, 3, 13), float32],) {
  @func_17222() /* ty=(Tensor[(3, 3, 13), float32],) */
}

def @func_4714() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %203 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
    %200 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %201 = @func_4672() /* ty=Tensor[(13, 16, 8), bool] */;
    %202 = %200.0;
    (%201, %202)
  };
  %203() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_18463() -> (Tensor[(13, 16, 8), float32],) {
  %206 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %204 = @func_17825() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %205 = %204.2;
    (%205,)
  };
  %206() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_14392() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32], Tensor[(13, 16, 8), float32]) {
  %218 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32], Tensor[(13, 16, 8), float32]) {
    %207 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %208 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
    %209 = @func_14298() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %210 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %211 = @func_6528() /* ty=Tensor[(13, 16, 8), float32] */;
    %212 = @func_13595() /* ty=Tensor[(13, 16, 8), bool] */;
    %213 = %207.0;
    %214 = %208.1;
    %215 = %209.1;
    %216 = @func_11204() /* ty=Tensor[(78, 1), float32] */;
    %217 = %210.0;
    (%211, %212, %213, %214, %215, %216, %217)
  };
  %218() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_9830() -> (Tensor[(64), float32],) {
  %219 = @func_3669() /* ty=(Tensor[(64), float32],) */;
  %220 = %219.0;
  (%220,)
}

def @func_7731() -> (Tensor[(13, 16, 8), bool],) {
  %223 = fn () -> (Tensor[(13, 16, 8), bool],) {
    %221 = @func_5326() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
    %222 = %221.1;
    (%222,)
  };
  %223() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_1545(%var_1537: Tensor[(6, 3, 15), bool]) -> (Tensor[(6, 3, 15), bool],) {
  %224 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 3, 15), bool] */, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %225 = cast(%var_1537, dtype="bool") /* ty=Tensor[(6, 3, 15), bool] */;
  %226 = logical_or(%224, %225) /* ty=Tensor[(6, 3, 15), bool] */;
  (%226,)
}

def @func_9516() -> Tensor[(13, 16, 8), float32] {
  %227 = fn () -> Tensor[(13, 16, 8), float32] {
    @func_6769() /* ty=Tensor[(13, 16, 8), float32] */
  };
  %227() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_5872() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  @func_5870() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */
}

def @func_13005() -> (Tensor[(14, 15, 13), float64],) {
  @func_13003() /* ty=(Tensor[(14, 15, 13), float64],) */
}

def @func_4456() -> (Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) {
  %228 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %229 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %230 = %228.0;
  %231 = %229.2;
  (%230, %231)
}

def @func_14556() -> Tensor[(13, 16, 8), float32] {
  @func_14554() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_10522(%var_10520: Tensor[(8, 15, 1), float64]) -> (Tensor[(8, 15, 1), float64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  @func_10519(%var_10520) /* ty=(Tensor[(8, 15, 1), float64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_7388(%var_7386: Tensor[(2730), int32]) -> (Tensor[(13, 16, 8), bool], Tensor[(2730), int32], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(270), bool], Tensor[(13, 16, 8), bool]) {
  @func_7385(%var_7386) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(2730), int32], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(270), bool], Tensor[(13, 16, 8), bool]) */
}

def @func_15868() -> Tensor[(13, 16, 8), bool] {
  @func_8926() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_8069() -> Tensor[(13, 16, 8), bool] {
  %232 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %232.0
}

def @func_10376(%var_10363: Tensor[(3, 11, 8), int16], %var_10364: Tensor[(3, 11, 8), int16]) -> Tensor[(3, 11, 8), int16] {
  %233 = cast(%var_10364, dtype="int16") /* ty=Tensor[(3, 11, 8), int16] */;
  %234 = shape_of(%var_10363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_10363, dtype="int16") /* ty=Tensor[(3, 11, 8), int16] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%235, %236) /* ty=Tensor[(3, 11, 8), int16] */
}

def @func_6076() -> (Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) {
  @func_6074() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */
}

def @func_10324() -> Tensor[(13, 16, 8), float32] {
  %237 = @func_9644() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %237.0
}

def @func_560(%var_559: Tensor[(8, 8, 1), float32]) -> (Tensor[(8, 8, ?), bool],) {
  %245 = fn (%var_530: Tensor[(8, 8, 1), float32]) -> (Tensor[(8, 8, ?), bool],) {
    %238 = cast(%var_530, dtype="float32") /* ty=Tensor[(8, 8, 1), float32] */;
    %239 = erf(%238) /* ty=Tensor[(8, 8, 1), float32] */;
    %240 = cast(%var_530, dtype="bool") /* ty=Tensor[(8, 8, 1), bool] */;
    %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%239, dtype="bool") /* ty=Tensor[(8, 8, 1), bool] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %244 = greater(%242, %243) /* ty=Tensor[(8, 8, ?), bool] */;
    (%244,)
  };
  %245(%var_559) /* ty=(Tensor[(8, 8, ?), bool],) */
}

def @func_13214() -> (Tensor[(13, 16, 8), float32],) {
  %247 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %246 = @func_12802() /* ty=Tensor[(13, 16, 8), float32] */;
    (%246,)
  };
  %247() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_6475() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %248 = @func_5525() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %249 = %248.0;
  %250 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%249, %250)
}

def @func_16959() -> Tensor[(13, 16, 8), float32] {
  %251 = @func_11339() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %251.0
}

def @func_9104() -> Tensor[(13, 16, 8), float32] {
  %252 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %252.0
}

def @func_13908() -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64]) {
  @func_13906() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64]) */
}

def @func_12190() -> (Tensor[(64), float32], Tensor[(12, 12, 13), float64], Tensor[(1872), float64]) {
  %253 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %254 = cast(meta[relay.Constant][8] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %255 = cast(meta[relay.Constant][8] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %256 = reshape(%254, newshape=[12, 12, 13]) /* ty=Tensor[(12, 12, 13), float64] */;
  %257 = reshape(%255, newshape=[12, 12, 13]) /* ty=Tensor[(12, 12, 13), float64] */;
  %258 = @func_6961(%256, %257) /* ty=(Tensor[(12, 12, 13), float64],) */;
  %259 = %253.2;
  %260 = %258.0;
  (%259, %260, meta[relay.Constant][8] /* ty=Tensor[(1872), float64] */)
}

def @func_8939() -> (Tensor[(13, 16, 8), float32],) {
  %261 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
  (%261,)
}

def @func_2205() -> (Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) {
  %267 = fn () -> (Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) {
    %262 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %263 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 13, 1), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 1), uint32] */;
    %264 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %265 = logical_xor(%262, %263) /* ty=Tensor[(3, 13, 1), uint32] */;
    %266 = %264.0;
    (%265, %266)
  };
  %267() /* ty=(Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) */
}

def @func_6212() -> (Tensor[(13, 16, 8), float32],) {
  %268 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %269 = %268.0;
  (%269,)
}

def @func_2680(%var_2672: Tensor[(14, 15, 13), int32], %var_2673: Tensor[(14, 15, 13), int32]) -> Tensor[(14, 15, 13), float64] {
  %270 = cast(%var_2673, dtype="bool") /* ty=Tensor[(14, 15, 13), bool] */;
  %271 = shape_of(%var_2672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_2672, dtype="bool") /* ty=Tensor[(14, 15, 13), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = greater(%272, %273) /* ty=Tensor[(14, 15, 13), bool] */;
  %275 = cast(%var_2673, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%277, %278) /* ty=Tensor[(14, 15, 13), float64] */
}

def @func_3319() -> (Tensor[(13, 16, 8), float32],) {
  %281 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %279 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %280 = %279.0;
    (%280,)
  };
  %281() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_12219(%var_12202: Tensor[(117), float32]) -> (Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(78), float32], Tensor[(8, 8, ?), float32]) {
  %282 = cast(%var_12202, dtype="float32") /* ty=Tensor[(117), float32] */;
  %283 = reshape(%282, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %284 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %285 = @func_10891() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) */;
  %286 = %285.1;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(8, 8, ?), float32] */;
  %288 = @func_2313(%283) /* ty=Tensor[(3, 3, 13), float32] */;
  %289 = %284.3;
  %290 = asinh(%287) /* ty=Tensor[(8, 8, ?), float32] */;
  (%288, %var_12202, %289, %290)
}

def @func_5912() -> Tensor[(13, 16, 8), float32] {
  %291 = @func_2204() /* ty=(Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) */;
  %291.1
}

def @func_12897() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64]) {
  %296 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64]) {
    %292 = @func_5446() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %293 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
    %294 = %292.0;
    %295 = %293.1;
    (%294, %295)
  };
  %296() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64]) */
}

def @func_11372() -> Tensor[(13, 16, 8), float32] {
  %298 = fn () -> Tensor[(13, 16, 8), float32] {
    %297 = @func_4950() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, 15), bool], Tensor[(960), float32]) */;
    %297.0
  };
  %298() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_1707(%var_1705: Tensor[(30, 9), bool], %var_1706: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(6, 3, 15), bool], Tensor[(30, 9), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64], Tensor[(8, 8, ?), bool], Tensor[(64), float32]) {
  @func_1703(%var_1705, %var_1706) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(6, 3, 15), bool], Tensor[(30, 9), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64], Tensor[(8, 8, ?), bool], Tensor[(64), float32]) */
}

def @func_4828() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) {
  %299 = @func_4319() /* ty=(Tensor[(64), float32],) */;
  %300 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %301 = reshape(%300, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %302 = @func_3657(%301) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %303 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %304 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %305 = cast(meta[relay.Constant][12] /* ty=Tensor[(78, 1), float32] */, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %306 = %299.0;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(64), float32] */;
  %308 = reshape(%305, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %309 = reshape(%307, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %310 = @func_938(%308, %309) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
  %311 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  %312 = %302.1;
  %313 = %303.0;
  %314 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  %315 = %304.0;
  %316 = %310.4;
  (%311, %306, %312, meta[relay.Constant][11] /* ty=Tensor[(3, 45), float32] */, %313, %314, %315, %316, meta[relay.Constant][12] /* ty=Tensor[(78, 1), float32] */)
}

def @func_12939() -> (Tensor[(3, 3, 13), float32], Tensor[(64), float32], Tensor[(64), float32]) {
  @func_12937() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(64), float32], Tensor[(64), float32]) */
}

def @func_14452() -> Tensor[(13, 16, 8), bool] {
  @func_3394() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_1114() -> Tensor[(13, 16, 8), float32] {
  %318 = fn () -> Tensor[(13, 16, 8), float32] {
    %317 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    atan(%317) /* ty=Tensor[(13, 16, 8), float32] */
  };
  %318() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_11421() -> (Tensor[(13, 16, 8), float32],) {
  @func_11419() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_4987() -> (Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) {
  @func_4985() /* ty=(Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) */
}

def @func_12024(%var_12022: Tensor[(3, 11, 8), int16]) -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), uint32], Tensor[(264), int16], Tensor[(3, 11, 8), uint32]) {
  @func_12021(%var_12022) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), uint32], Tensor[(264), int16], Tensor[(3, 11, 8), uint32]) */
}

def @func_14772(%var_14770: Tensor[(7, 3, 11), uint32], %var_14771: Tensor[(7, 3, 11), uint32]) -> (Tensor[(7, 3, 11), bool],) {
  @func_14768(%var_14770, %var_14771) /* ty=(Tensor[(7, 3, 11), bool],) */
}

def @func_14124() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %319 = @func_12716() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), float32], Tensor[(117, 1), float32], Tensor[(13, 16, 8), float32]) */;
  %320 = @func_11419() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %321 = %319.2;
  %322 = %320.0;
  (%321, %322)
}

def @func_17544() -> Tensor[(13, 16, 8), float32] {
  %323 = @func_16569() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %323.0
}

def @func_8917() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_8915() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_6074() -> (Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) {
  %324 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %325 = @func_3570() /* ty=Tensor[(64), float32] */;
  %326 = %324.0;
  (%325, %326)
}

def @func_11741() -> (Tensor[(64), float32],) {
  %327 = @func_8275() /* ty=(Tensor[(64), float32],) */;
  %328 = %327.0;
  (%328,)
}

def @func_15183(%var_15163: Tensor[(1, 98), bool]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(7, 7, 2), bool], Tensor[(1, 98), bool], Tensor[(64), float32]) {
  %329 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %330 = @func_7836() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %331 = cast(%var_15163, dtype="bool") /* ty=Tensor[(1, 98), bool] */;
  %332 = cast(%var_15163, dtype="bool") /* ty=Tensor[(1, 98), bool] */;
  %333 = reshape(%331, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), bool] */;
  %334 = reshape(%332, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), bool] */;
  %335 = @func_11434(%333, %334) /* ty=(Tensor[(7, 7, 2), bool], Tensor[(7, 7, 2), uint16]) */;
  %336 = @func_3243() /* ty=(Tensor[(64), float32],) */;
  %337 = %329.0;
  %338 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
  %339 = %330.2;
  %340 = %335.0;
  %341 = %336.0;
  (%337, %338, %339, %340, %var_15163, %341)
}

def @func_5447() -> (Tensor[(13, 16, 8), float32],) {
  %344 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %342 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %343 = %342.0;
    (%343,)
  };
  %344() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_17566() -> Tensor[(13, 16, 8), float32] {
  %345 = @func_16569() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %345.0
}

def @func_7794() -> (Tensor[(13, 16, 8), float32],) {
  %348 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %346 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %347 = %346.0;
    (%347,)
  };
  %348() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_9106() -> Tensor[(13, 16, 8), float32] {
  @func_9104() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_7385(%var_7331: Tensor[(2730), int32]) -> (Tensor[(13, 16, 8), bool], Tensor[(2730), int32], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(270), bool], Tensor[(13, 16, 8), bool]) {
  %349 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %350 = cast(%var_7331, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %351 = cast(%var_7331, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %352 = reshape(%350, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %353 = reshape(%351, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %354 = @func_2680(%352, %353) /* ty=Tensor[(14, 15, 13), float64] */;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %356 = acos(%355) /* ty=Tensor[(14, 15, 13), float64] */;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %358 = cast(meta[relay.Constant][14] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %359 = reshape(%358, newshape=[270]) /* ty=Tensor[(270), bool] */;
  %360 = @func_4279(%359) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), int32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(30, 9), uint8], Tensor[(6, 3, 15), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
  %361 = %349.1;
  %362 = exp(%357) /* ty=Tensor[(14, 15, 13), float64] */;
  %363 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  %364 = %360.2;
  %365 = @func_3394() /* ty=Tensor[(13, 16, 8), bool] */;
  (%361, %var_7331, %362, %363, %364, meta[relay.Constant][14] /* ty=Tensor[(270), bool] */, %365)
}

def @func_4367() -> (Tensor[(64), float32],) {
  %366 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %367 = %366.3;
  (%367,)
}

def @func_14236() -> (Tensor[(13, 16, 8), float32],) {
  %370 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %368 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %369 = %368.0;
    (%369,)
  };
  %370() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_14520(%var_14518: Tensor[(15, 13, 7), float64], %var_14519: Tensor[(15, 13, 7), float64]) -> (Tensor[(15, 13, 7), float64], Tensor[(13, 16, 8), uint64]) {
  %378 = fn (%var_14495: Tensor[(15, 13, 7), float64], %var_14496: Tensor[(15, 13, 7), float64]) -> (Tensor[(15, 13, 7), float64], Tensor[(13, 16, 8), uint64]) {
    %371 = cast(%var_14496, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
    %372 = shape_of(%var_14495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %373 = cast(%var_14495, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %375 = @func_13906() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64]) */;
    %376 = divide(%373, %374) /* ty=Tensor[(15, 13, 7), float64] */;
    %377 = %375.0;
    (%376, %377)
  };
  %378(%var_14518, %var_14519) /* ty=(Tensor[(15, 13, 7), float64], Tensor[(13, 16, 8), uint64]) */
}

def @func_8544() -> (Tensor[(13, 16, 8), float32],) {
  @func_8542() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_1831() -> Tensor[(13, 16, 8), bool] {
  %389 = fn () -> Tensor[(13, 16, 8), bool] {
    %379 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %380 = %379.0;
    %381 = cast(%380, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    %382 = sqrt(%381) /* ty=Tensor[(13, 16, 8), float32] */;
    %383 = cast(%382, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    %384 = sinh(%383) /* ty=Tensor[(13, 16, 8), float32] */;
    %385 = cast(%382, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
    %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%384, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%387, %388) /* ty=Tensor[(13, 16, 8), bool] */
  };
  %389() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_10692(%var_10690: Tensor[(18, 135), bool], %var_10691: Tensor[(1620), float64]) -> (Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(18, 135), bool], Tensor[(13, 16, 8), float32], Tensor[(1620), float64]) {
  %400 = fn (%var_10672: Tensor[(18, 135), bool], %var_10675: Tensor[(1620), float64]) -> (Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(18, 135), bool], Tensor[(13, 16, 8), float32], Tensor[(1620), float64]) {
    %390 = @func_3669() /* ty=(Tensor[(64), float32],) */;
    %391 = cast(%var_10672, dtype="bool") /* ty=Tensor[(18, 135), bool] */;
    %392 = reshape(%391, newshape=[9, 270]) /* ty=Tensor[(9, 270), bool] */;
    %393 = @func_7589(%392) /* ty=(Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(9, 270), float64]) */;
    %394 = cast(%var_10675, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %395 = reshape(%394, newshape=[1, 1620]) /* ty=Tensor[(1, 1620), float64] */;
    %396 = @func_1890(%395) /* ty=(Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) */;
    %397 = %390.0;
    %398 = %393.0;
    %399 = %396.4;
    (%397, %398, %var_10672, %399, %var_10675)
  };
  %400(%var_10690, %var_10691) /* ty=(Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(18, 135), bool], Tensor[(13, 16, 8), float32], Tensor[(1620), float64]) */
}

def @func_6214() -> (Tensor[(13, 16, 8), float32],) {
  @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_4088() -> (Tensor[(13, 16, 8), uint64], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool]) {
  @func_4086() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool]) */
}

def @func_13283() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %407 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
    %401 = @func_10272() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %402 = @func_8542() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %403 = %401.1;
    %404 = %402.0;
    %405 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
    %406 = @func_12297() /* ty=Tensor[(13, 16, 8), float32] */;
    (%403, %404, %405, %406)
  };
  %407() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_17050() -> Tensor[(13, 16, 8), float32] {
  @func_17048() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_1548(%var_1546: Tensor[(6, 3, 15), bool]) -> (Tensor[(6, 3, 15), bool],) {
  @func_1545(%var_1546) /* ty=(Tensor[(6, 3, 15), bool],) */
}

def @func_9902() -> (Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) {
  %412 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) {
    %408 = @func_8652() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %409 = @func_4828() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) */;
    %410 = %408.0;
    %411 = %409.8;
    (%410, %411)
  };
  %412() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) */
}

def @func_4920() -> Tensor[(64), float32] {
  %413 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %413.0
}

def @func_3670() -> (Tensor[(64), float32],) {
  %416 = fn () -> (Tensor[(64), float32],) {
    %414 = @func_3212() /* ty=(Tensor[(64), float32],) */;
    %415 = %414.0;
    (%415,)
  };
  %416() /* ty=(Tensor[(64), float32],) */
}

def @func_6167(%var_6165: Tensor[(1, 12, 4), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(1, 12, 4), float64]) {
  @func_6164(%var_6165) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(1, 12, 4), float64]) */
}

def @func_5802() -> (Tensor[(13, 16, 8), bool],) {
  %419 = fn () -> (Tensor[(13, 16, 8), bool],) {
    %417 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %418 = %417.0;
    (%418,)
  };
  %419() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_11743() -> (Tensor[(64), float32],) {
  @func_11741() /* ty=(Tensor[(64), float32],) */
}

def @func_9339() -> (Tensor[(13, 16, 8), bool],) {
  %422 = fn () -> (Tensor[(13, 16, 8), bool],) {
    %420 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %421 = %420.0;
    (%421,)
  };
  %422() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_14731(%var_14714: Tensor[(15, 1, 4), float32], %var_14715: Tensor[(15, 13, 4), float32]) -> (Tensor[(15, 13, 4), bool],) {
  %423 = cast(%var_14714, dtype="bool") /* ty=Tensor[(15, 1, 4), bool] */;
  %424 = cast(%var_14715, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
  %425 = less_equal(%423, %424) /* ty=Tensor[(15, 13, 4), bool] */;
  (%425,)
}

def @func_14126() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  @func_14124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_3020() -> (Tensor[(13, 16, 8), bool],) {
  %426 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %427 = %426.0;
  (%427,)
}

def @func_18697(%var_18695: Tensor[(2, 2, 2), float64], %var_18696: Tensor[(2, 2, 2), float64]) -> (Tensor[(13, 16, 8), float32], Tensor[(2, 2, 2), bool]) {
  @func_18693(%var_18695, %var_18696) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(2, 2, 2), bool]) */
}

def @func_5394() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %436 = fn () -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
    %428 = @func_2768() /* ty=(Tensor[(64), float32],) */;
    %429 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %430 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
    %431 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %432 = %428.0;
    %433 = %429.0;
    %434 = %430.3;
    %435 = %431.0;
    (%432, %433, %434, %435)
  };
  %436() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_16311() -> Tensor[(13, 16, 8), float32] {
  %438 = fn () -> Tensor[(13, 16, 8), float32] {
    %437 = @func_13585() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %437.0
  };
  %438() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_1288(%var_1282: Tensor[(12, 9, 15), float64]) -> (Tensor[(12, 9, 15), float64],) {
  %439 = cast(%var_1282, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %440 = sqrt(%439) /* ty=Tensor[(12, 9, 15), float64] */;
  (%440,)
}

def @func_9646() -> (Tensor[(13, 16, 8), float32],) {
  @func_9644() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_15747() -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %445 = fn () -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
    %441 = @func_9189() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %442 = @func_7252() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %443 = %441.3;
    %444 = %442.0;
    (%443, %444)
  };
  %445() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_5496() -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %452 = fn () -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
    %446 = @func_5051() /* ty=(Tensor[(64), float32],) */;
    %447 = @func_3212() /* ty=(Tensor[(64), float32],) */;
    %448 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %449 = %446.0;
    %450 = %447.0;
    %451 = %448.0;
    (%449, %450, %451)
  };
  %452() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_9947(%var_9945: Tensor[(78, 1), float32]) -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(78, 1), float32], Tensor[(8, 8), float32], Tensor[(3, 3, 13), float32], Tensor[(117), float32]) {
  @func_9944(%var_9945) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(78, 1), float32], Tensor[(8, 8), float32], Tensor[(3, 3, 13), float32], Tensor[(117), float32]) */
}

def @func_6790() -> (Tensor[(13, 16, 8), float32],) {
  %455 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %453 = @func_5446() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %454 = %453.0;
    (%454,)
  };
  %455() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_11902(%var_11900: Tensor[(2, 4, 13), float32], %var_11901: bool) -> (Tensor[(2, 4, 13), float32], Tensor[(2, 4, 13), float32], Tensor[(11, 6, 3), bool], Tensor[(198), bool], Tensor[(64), float32], Tensor[(11, 7, 8), float64], Tensor[(13, 16, 8), float32], Tensor[(308, 2), bool], Tensor[(64), float32]) {
  %476 = fn (%var_11833: Tensor[(2, 4, 13), float32], %var_11853: bool) -> (Tensor[(2, 4, 13), float32], Tensor[(2, 4, 13), float32], Tensor[(11, 6, 3), bool], Tensor[(198), bool], Tensor[(64), float32], Tensor[(11, 7, 8), float64], Tensor[(13, 16, 8), float32], Tensor[(308, 2), bool], Tensor[(64), float32]) {
    %456 = cast(%var_11833, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
    %457 = cast(%var_11833, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
    %458 = cast(%var_11853, dtype="bool") /* ty=bool */;
    %459 = cast(meta[relay.Constant][15] /* ty=Tensor[(198), bool] */, dtype="bool") /* ty=Tensor[(198), bool] */;
    %460 = reshape(%458, newshape=[]) /* ty=bool */;
    %461 = reshape(%459, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), bool] */;
    %462 = @func_6513(%460, %461) /* ty=(Tensor[(11, 6, 3), bool], Tensor[(1620), float64], Tensor[(64), float32]) */;
    %463 = cast(meta[relay.Constant][16] /* ty=Tensor[(308, 2), float64] */, dtype="float64") /* ty=Tensor[(308, 2), float64] */;
    %464 = reshape(%463, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
    %465 = @func_11829(%464) /* ty=(Tensor[(11, 7, 8), float64],) */;
    %466 = cast(meta[relay.Constant][16] /* ty=Tensor[(308, 2), float64] */, dtype="bool") /* ty=Tensor[(308, 2), bool] */;
    %467 = cast(%var_11853, dtype="bool") /* ty=bool */;
    %468 = log(%456) /* ty=Tensor[(2, 4, 13), float32] */;
    %469 = sinh(%457) /* ty=Tensor[(2, 4, 13), float32] */;
    %470 = %462.0;
    %471 = @func_8588() /* ty=Tensor[(64), float32] */;
    %472 = %465.0;
    %473 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
    %474 = less(%466, %467) /* ty=Tensor[(308, 2), bool] */;
    %475 = @func_2265() /* ty=Tensor[(64), float32] */;
    (%468, %469, %470, meta[relay.Constant][15] /* ty=Tensor[(198), bool] */, %471, %472, %473, %474, %475)
  };
  %476(%var_11900, %var_11901) /* ty=(Tensor[(2, 4, 13), float32], Tensor[(2, 4, 13), float32], Tensor[(11, 6, 3), bool], Tensor[(198), bool], Tensor[(64), float32], Tensor[(11, 7, 8), float64], Tensor[(13, 16, 8), float32], Tensor[(308, 2), bool], Tensor[(64), float32]) */
}

def @func_3243() -> (Tensor[(64), float32],) {
  %477 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %478 = %477.0;
  (%478,)
}

def @func_16700(%var_16699: Tensor[(5, 12, 2), float32]) -> (Tensor[(5, 12, 2), float32], Tensor[(13, 16, 8), float32]) {
  %483 = fn (%var_16689: Tensor[(5, 12, 2), float32]) -> (Tensor[(5, 12, 2), float32], Tensor[(13, 16, 8), float32]) {
    %479 = cast(%var_16689, dtype="float32") /* ty=Tensor[(5, 12, 2), float32] */;
    %480 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %481 = acosh(%479) /* ty=Tensor[(5, 12, 2), float32] */;
    %482 = %480.1;
    (%481, %482)
  };
  %483(%var_16699) /* ty=(Tensor[(5, 12, 2), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_15870() -> Tensor[(13, 16, 8), bool] {
  @func_15868() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_15662(%var_15661: Tensor[(264), int16]) -> (Tensor[(13, 16, 8), float32], Tensor[(3, 11, 8), int16], Tensor[(264), int16]) {
  %491 = fn (%var_15651: Tensor[(264), int16]) -> (Tensor[(13, 16, 8), float32], Tensor[(3, 11, 8), int16], Tensor[(264), int16]) {
    %484 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %485 = cast(%var_15651, dtype="int16") /* ty=Tensor[(264), int16] */;
    %486 = cast(%var_15651, dtype="int16") /* ty=Tensor[(264), int16] */;
    %487 = reshape(%485, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
    %488 = reshape(%486, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
    %489 = %484.0;
    %490 = @func_10376(%487, %488) /* ty=Tensor[(3, 11, 8), int16] */;
    (%489, %490, %var_15651)
  };
  %491(%var_15661) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(3, 11, 8), int16], Tensor[(264), int16]) */
}

def @func_16004(%var_16002: Tensor[(264), int16]) -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(264), int16], Tensor[(264), int16]) {
  %492 = cast(%var_16002, dtype="int16") /* ty=Tensor[(264), int16] */;
  %493 = reshape(%492, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %494 = @func_15660(%493) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(3, 11, 8), int16], Tensor[(264), int16]) */;
  %495 = @func_15868() /* ty=Tensor[(13, 16, 8), bool] */;
  %496 = @func_8588() /* ty=Tensor[(64), float32] */;
  %497 = %494.2;
  (%495, %496, %497, %var_16002)
}

def @func_3730(%var_3728: Tensor[(270, 1), bool]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) {
  @func_3727(%var_3728) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) */
}

def @func_2730() -> (Tensor[(13, 16, 8), bool],) {
  %498 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%498,)
}

def @func_12021(%var_12007: Tensor[(3, 11, 8), int16]) -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), uint32], Tensor[(264), int16], Tensor[(3, 11, 8), uint32]) {
  %499 = @func_8652() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %500 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %501 = %500.1;
  %502 = @func_10050() /* ty=(Tensor[(64), float32],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="uint32") /* ty=Tensor[(64), uint32] */;
  %505 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%501, dtype="uint32") /* ty=Tensor[(8, 8, ?), uint32] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %508 = cast(meta[relay.Constant][17] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
  %509 = cast(meta[relay.Constant][17] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
  %510 = reshape(%508, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
  %511 = reshape(%509, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), int16] */;
  %512 = @func_10376(%510, %511) /* ty=Tensor[(3, 11, 8), int16] */;
  %513 = cast(%var_12007, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %517 = %499.0;
  %518 = left_shift(%506, %507) /* ty=Tensor[(8, 8, ?), uint32] */;
  %519 = bitwise_and(%515, %516) /* ty=Tensor[(3, 11, 8), uint32] */;
  (%517, %518, meta[relay.Constant][17] /* ty=Tensor[(264), int16] */, %519)
}

def @func_16832() -> (Tensor[(13, 16, 8), float32],) {
  %522 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %520 = @func_14124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %521 = %520.1;
    (%521,)
  };
  %522() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_17902() -> Tensor[(13, 16, 8), float32] {
  @func_17900() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_8749() -> (Tensor[(13, 16, 8), float32],) {
  %525 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %523 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %524 = %523.0;
    (%524,)
  };
  %525() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_10218() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  @func_10216() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */
}

def @func_2962() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_6267() -> (Tensor[(13, 16, 8), float32],) {
  @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_6265() -> (Tensor[(13, 16, 8), float32],) {
  %526 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  (%526,)
}

def @func_11110() -> Tensor[(13, 16, 8), float32] {
  @func_11108() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_16939() -> (Tensor[(64), float32],) {
  %527 = @func_14663() /* ty=Tensor[(64), float32] */;
  (%527,)
}

def @func_16156(%var_16155: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) {
  %533 = fn (%var_16130: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) {
    %528 = cast(%var_16130, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %529 = reshape(%528, newshape=[9, 7, 12]) /* ty=Tensor[(9, 7, 12), uint64] */;
    %530 = @func_3113(%529) /* ty=(Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */;
    %531 = @func_11371() /* ty=Tensor[(13, 16, 8), float32] */;
    %532 = %530.2;
    (%531, %532, %var_16130)
  };
  %533(%var_16155) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) */
}

def @func_11831(%var_11830: Tensor[(11, 7, 8), float64]) -> (Tensor[(11, 7, 8), float64],) {
  %536 = fn (%var_11826: Tensor[(11, 7, 8), float64]) -> (Tensor[(11, 7, 8), float64],) {
    %534 = cast(%var_11826, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
    %535 = exp(%534) /* ty=Tensor[(11, 7, 8), float64] */;
    (%535,)
  };
  %536(%var_11830) /* ty=(Tensor[(11, 7, 8), float64],) */
}

def @func_18442() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %540 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
    %537 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %538 = @func_15015() /* ty=Tensor[(13, 16, 8), float32] */;
    %539 = %537.0;
    (%538, %539)
  };
  %540() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_18412() -> (Tensor[(1664), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %541 = @func_14621() /* ty=(Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) */;
  %542 = @func_15624() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %543 = @func_13213() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %544 = @func_16831() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %545 = %541.2;
  %546 = %542.1;
  %547 = %543.0;
  %548 = %544.0;
  (%545, %546, %547, %548)
}

def @func_15323() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %553 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
    %549 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %550 = @func_13213() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %551 = %549.0;
    %552 = %550.0;
    (%551, %552)
  };
  %553() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_11008() -> (Tensor[(13, 16, 8), float32], Tensor[(36), float64], Tensor[(24, 26), float32]) {
  @func_11006() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(36), float64], Tensor[(24, 26), float32]) */
}

def @func_10458() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %554 = @func_7982() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %555 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %556 = %554.2;
  %557 = %555.0;
  (%556, %557)
}

def @func_13631() -> Tensor[(13, 16, 8), uint64] {
  @func_13629() /* ty=Tensor[(13, 16, 8), uint64] */
}

def @func_16569() -> (Tensor[(13, 16, 8), float32],) {
  %558 = @func_10324() /* ty=Tensor[(13, 16, 8), float32] */;
  (%558,)
}

def @func_1913() -> Tensor[(13, 16, 8), bool] {
  %559 = fn () -> Tensor[(13, 16, 8), bool] {
    @func_1830() /* ty=Tensor[(13, 16, 8), bool] */
  };
  %559() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_3660(%var_3658: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_3657(%var_3658) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_13353() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %567 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
    %560 = @func_11776() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %561 = @func_8748() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %562 = @func_10891() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) */;
    %563 = %560.0;
    %564 = %561.0;
    %565 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
    %566 = %562.0;
    (%563, %564, %565, %566)
  };
  %567() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_18553() -> (Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %568 = @func_13992() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %569 = @func_11092() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78), float32]) */;
  %570 = @func_13352() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %571 = @func_9644() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %572 = %568.0;
  %573 = %569.1;
  %574 = %570.0;
  %575 = %571.0;
  (%572, %573, %574, %575)
}

def @func_3472(%var_3471: Tensor[(2730), int32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(6, 3, 15), bool], Tensor[(270), bool], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(64), float32]) {
  %591 = fn (%var_3419: Tensor[(2730), int32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(6, 3, 15), bool], Tensor[(270), bool], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(64), float32]) {
    %576 = cast(meta[relay.Constant][18] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
    %577 = reshape(%576, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), bool] */;
    %578 = @func_1545(%577) /* ty=(Tensor[(6, 3, 15), bool],) */;
    %579 = cast(%var_3419, dtype="int32") /* ty=Tensor[(2730), int32] */;
    %580 = cast(%var_3419, dtype="int32") /* ty=Tensor[(2730), int32] */;
    %581 = reshape(%579, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
    %582 = reshape(%580, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
    %583 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
    %584 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
    %585 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
    %586 = %578.0;
    %587 = @func_2680(%581, %582) /* ty=Tensor[(14, 15, 13), float64] */;
    %588 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
    %589 = @func_2265() /* ty=Tensor[(64), float32] */;
    %590 = %583.2;
    (%584, %585, %586, meta[relay.Constant][18] /* ty=Tensor[(270), bool] */, %587, %var_3419, %588, %589, %590)
  };
  %591(%var_3471) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(6, 3, 15), bool], Tensor[(270), bool], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(64), float32]) */
}

def @func_14768(%var_14755: Tensor[(7, 3, 11), uint32], %var_14756: Tensor[(7, 3, 11), uint32]) -> (Tensor[(7, 3, 11), bool],) {
  %592 = cast(%var_14756, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %593 = shape_of(%var_14755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_14755, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = greater(%594, %595) /* ty=Tensor[(7, 3, 11), bool] */;
  (%596,)
}

def @func_8589() -> Tensor[(64), float32] {
  %598 = fn () -> Tensor[(64), float32] {
    %597 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
    %597.0
  };
  %598() /* ty=Tensor[(64), float32] */
}

def @func_17973() -> (Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool]) {
  %605 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool]) {
    %599 = @func_15746() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
    %600 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
    %601 = @func_13080() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %602 = %599.1;
    %603 = %600.2;
    %604 = %601.3;
    (%602, %603, %604)
  };
  %605() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_5135() -> (Tensor[(13, 16, 8), float32],) {
  @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_13017() -> Tensor[(13, 16, 8), float32] {
  @func_13015() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_4086() -> (Tensor[(13, 16, 8), uint64], Tensor[(14, 15, 13), float64], Tensor[(2730), int32], Tensor[(13, 16, 8), bool]) {
  %606 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %607 = cast(meta[relay.Constant][19] /* ty=Tensor[(2730), int32] */, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %608 = cast(meta[relay.Constant][19] /* ty=Tensor[(2730), int32] */, dtype="int32") /* ty=Tensor[(2730), int32] */;
  %609 = reshape(%607, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %610 = reshape(%608, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %611 = %606.0;
  %612 = @func_2680(%609, %610) /* ty=Tensor[(14, 15, 13), float64] */;
  %613 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%611, %612, meta[relay.Constant][19] /* ty=Tensor[(2730), int32] */, %613)
}

def @func_14709() -> Tensor[(13, 16, 8), float32] {
  @func_1113() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_9888() -> (Tensor[(13, 16, 8), float32],) {
  @func_9886() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_17384() -> Tensor[(13, 16, 8), bool] {
  @func_17382() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_11152() -> Tensor[(13, 16, 8), bool] {
  %615 = fn () -> Tensor[(13, 16, 8), bool] {
    %614 = @func_7252() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %614.0
  };
  %615() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_5053() -> (Tensor[(64), float32],) {
  @func_5051() /* ty=(Tensor[(64), float32],) */
}

def @func_13114() -> (Tensor[(13, 16, 8), float32],) {
  %616 = @func_8843() /* ty=Tensor[(13, 16, 8), float32] */;
  (%616,)
}

def @func_4279(%var_4142: Tensor[(270), bool]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), int32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(30, 9), uint8], Tensor[(6, 3, 15), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  %617 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %618 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %619 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %620 = cast(meta[relay.Constant][20] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %621 = reshape(%620, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %622 = @func_2313(%621) /* ty=Tensor[(3, 3, 13), float32] */;
  %623 = cast(meta[relay.Constant][20] /* ty=Tensor[(117), float32] */, dtype="int32") /* ty=Tensor[(117), int32] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="int32") /* ty=Tensor[(3, 3, 13), int32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %627 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %628 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %629 = cast(%var_4142, dtype="bool") /* ty=Tensor[(270), bool] */;
  %630 = %617.0;
  %631 = cast(%630, dtype="float32") /* ty=Tensor[(64), float32] */;
  %632 = reshape(%629, newshape=[270]) /* ty=Tensor[(270), bool] */;
  %633 = reshape(%631, newshape=[16, 4]) /* ty=Tensor[(16, 4), float32] */;
  %634 = @func_2628(%632, %633) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) */;
  %635 = %634.1;
  %636 = cast(%var_4142, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(2), int32] */;
  %638 = cast(%635, dtype="uint8") /* ty=Tensor[(30, 9), uint8] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %640 = cast(%635, dtype="bool") /* ty=Tensor[(30, 9), bool] */;
  %641 = reshape(%640, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), bool] */;
  %642 = @func_1545(%641) /* ty=(Tensor[(6, 3, 15), bool],) */;
  %643 = cast(meta[relay.Constant][21] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %644 = cast(meta[relay.Constant][21] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %645 = reshape(%643, newshape=[270, 6]) /* ty=Tensor[(270, 6), float64] */;
  %646 = reshape(%644, newshape=[270, 6]) /* ty=Tensor[(270, 6), float64] */;
  %647 = @func_2237(%645, %646) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(270, 6), uint8]) */;
  %648 = %618.0;
  %649 = %619.2;
  %650 = subtract(%625, %626) /* ty=Tensor[(3, 3, 13), int32] */;
  %651 = %627.0;
  %652 = %628.0;
  %653 = logical_xor(%638, %639) /* ty=Tensor[(30, 9), uint8] */;
  %654 = %642.0;
  %655 = %647.1;
  (%630, %648, %649, %650, %651, %652, %653, %654, %655, meta[relay.Constant][21] /* ty=Tensor[(1620), float64] */)
}

def @func_7717(%var_7715: Tensor[(13, 16, 8), float32], %var_7716: Tensor[(270), bool]) -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(270), bool]) {
  %669 = fn (%var_7680: Tensor[(13, 16, 8), float32], %var_7694: Tensor[(270), bool]) -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(270), bool]) {
    %656 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %657 = %656.0;
    %658 = cast(%var_7680, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%657, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %662 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %663 = cast(%var_7694, dtype="bool") /* ty=Tensor[(270), bool] */;
    %664 = reshape(%663, newshape=[270, 1]) /* ty=Tensor[(270, 1), bool] */;
    %665 = @func_3727(%664) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) */;
    %666 = subtract(%660, %661) /* ty=Tensor[(13, 16, 8), uint64] */;
    %667 = %662.0;
    %668 = %665.0;
    (%666, %667, %668, %var_7694)
  };
  %669(%var_7715, %var_7716) /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(270), bool]) */
}

def @func_4830() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) {
  @func_4828() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) */
}

def @func_1627() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) {
  %681 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) {
    %670 = cast(meta[relay.Constant][22] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %671 = cast(meta[relay.Constant][23] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %672 = reshape(%670, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
    %673 = reshape(%671, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %674 = @func_938(%672, %673) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
    %675 = %674.0;
    %676 = cast(%675, dtype="float32") /* ty=Tensor[(8, 8, ?), float32] */;
    %677 = reshape(%676, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
    %678 = @func_558(%677) /* ty=(Tensor[(8, 8, ?), bool],) */;
    %679 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
    %680 = %678.0;
    (%679, %675, meta[relay.Constant][22] /* ty=Tensor[(78), float32] */, meta[relay.Constant][23] /* ty=Tensor[(64), float32] */, %680)
  };
  %681() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */
}

def @func_1462(%var_1429: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  %682 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %683 = cast(%var_1429, dtype="float32") /* ty=Tensor[(64), float32] */;
  %684 = reshape(%683, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %685 = @func_558(%684) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %686 = %685.0;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(8, 8, ?), float32] */;
  %688 = reshape(%687, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %689 = @func_558(%688) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %690 = cast(meta[relay.Constant][24] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %691 = reshape(%690, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
  %692 = @func_1288(%691) /* ty=(Tensor[(12, 9, 15), float64],) */;
  %693 = %682.0;
  %694 = %689.0;
  %695 = %692.0;
  (%693, %686, %var_1429, %694, %695, meta[relay.Constant][24] /* ty=Tensor[(1620), float64] */)
}

def @func_16451(%var_16440: Tensor[(13, 7, 12), uint16]) -> (Tensor[(13, 7, 12), uint16], Tensor[(64), float32]) {
  %696 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 7, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 7, 12), uint16] */;
  %697 = shape_of(%var_16440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_16440, dtype="uint16") /* ty=Tensor[(13, 7, 12), uint16] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %700 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %701 = right_shift(%698, %699) /* ty=Tensor[(13, 7, 12), uint16] */;
  %702 = %700.0;
  (%701, %702)
}

def @func_5283() -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %703 = @func_4367() /* ty=(Tensor[(64), float32],) */;
  %704 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %705 = %703.0;
  %706 = %704.0;
  (%705, %706)
}

def @func_5051() -> (Tensor[(64), float32],) {
  %707 = @func_2154() /* ty=(Tensor[(64), float32],) */;
  %708 = %707.0;
  (%708,)
}

def @func_10044() -> (Tensor[(13, 16, 8), float32],) {
  %711 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %709 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %710 = %709.0;
    (%710,)
  };
  %711() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_17494(%var_17493: Tensor[(14, 16, 4), float64]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(14, 16, 4), float32], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  %728 = fn (%var_17403: Tensor[(14, 16, 4), float64]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(14, 16, 4), float32], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
    %712 = @func_8915() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %713 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %714 = cast(%var_17403, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
    %715 = cos(%714) /* ty=Tensor[(14, 16, 4), float64] */;
    %716 = cast(%715, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
    %717 = log(%716) /* ty=Tensor[(14, 16, 4), float64] */;
    %718 = cast(%717, dtype="float32") /* ty=Tensor[(14, 16, 4), float32] */;
    %719 = cast(meta[relay.Constant][26] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %720 = reshape(%719, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
    %721 = @func_1288(%720) /* ty=(Tensor[(12, 9, 15), float64],) */;
    %722 = @func_9573() /* ty=Tensor[(64), float32] */;
    %723 = @func_7542() /* ty=Tensor[(13, 16, 8), bool] */;
    %724 = %712.0;
    %725 = %713.0;
    %726 = exp(%718) /* ty=Tensor[(14, 16, 4), float32] */;
    %727 = %721.0;
    (%722, %723, %724, %725, %726, %727, meta[relay.Constant][26] /* ty=Tensor[(1620), float64] */)
  };
  %728(%var_17493) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(14, 16, 4), float32], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */
}

def @func_13419() -> Tensor[(64), float32] {
  %730 = fn () -> Tensor[(64), float32] {
    %729 = @func_9684() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
    %729.1
  };
  %730() /* ty=Tensor[(64), float32] */
}

def @func_12298() -> Tensor[(13, 16, 8), float32] {
  %732 = fn () -> Tensor[(13, 16, 8), float32] {
    %731 = @func_9886() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %731.0
  };
  %732() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_17708() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %739 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
    %733 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %734 = @func_14298() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %735 = @func_8542() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %736 = %733.0;
    %737 = %734.1;
    %738 = %735.0;
    (%736, %737, %738)
  };
  %739() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_4513(%var_4498: Tensor[(8, 8, 15), float32]) -> (Tensor[(8, 8, 15), bool],) {
  %740 = cast(%var_4498, dtype="float32") /* ty=Tensor[(8, 8, 15), float32] */;
  %741 = asinh(%740) /* ty=Tensor[(8, 8, 15), float32] */;
  %742 = cast(%741, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %743 = shape_of(%var_4498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_4498, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %746 = less_equal(%744, %745) /* ty=Tensor[(8, 8, 15), bool] */;
  (%746,)
}

def @func_9971() -> (Tensor[(13, 16, 8), float32],) {
  @func_9969() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_8653() -> (Tensor[(13, 16, 8), float32],) {
  %749 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %747 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %748 = %747.0;
    (%748,)
  };
  %749() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_2037() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) {
  %750 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %751 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %752 = %751.0;
  %753 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 16, 8), float32] */, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="uint64") /* ty=Tensor[(13, 16, 8), uint64] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %757 = %750.0;
  %758 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  %759 = add(%755, %756) /* ty=Tensor[(13, 16, 8), uint64] */;
  %760 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%757, %758, %759, %760)
}

def @func_18753(%var_18725: Tensor[(78, 9), float32]) -> (Tensor[(78, 9), uint16], Tensor[(78, 1), float32]) {
  %761 = @func_9901() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) */;
  %762 = %761.1;
  %763 = cast(%762, dtype="uint16") /* ty=Tensor[(78, 1), uint16] */;
  %764 = cast(%var_18725, dtype="uint16") /* ty=Tensor[(78, 9), uint16] */;
  %765 = cast(%762, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %766 = minimum(%763, %764) /* ty=Tensor[(78, 9), uint16] */;
  %767 = log2(%765) /* ty=Tensor[(78, 1), float32] */;
  (%766, %767)
}

def @func_2665() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_18555() -> (Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  @func_18553() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(78), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_14314() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_14312() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_18214() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), bool], Tensor[(24, 26), uint64]) {
  %768 = @func_17158() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %769 = cast(meta[relay.Constant][28] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %770 = cast(meta[relay.Constant][28] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %771 = cast(meta[relay.Constant][28] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %772 = reshape(%769, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %773 = reshape(%770, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %774 = reshape(%771, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %775 = @func_6926(%772, %773, %774) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
  %776 = %768.1;
  %777 = %775.1;
  (%776, %777, meta[relay.Constant][28] /* ty=Tensor[(24, 26), uint64] */)
}

def @func_10460() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_10458() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_3498() -> (Tensor[(13, 16, 8), bool],) {
  %778 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  (%778,)
}

def @func_12566() -> (Tensor[(13, 16, 8), float32],) {
  %781 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %779 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %780 = %779.0;
    (%780,)
  };
  %781() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_12346() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  @func_12344() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_2732() -> (Tensor[(13, 16, 8), bool],) {
  @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_14156() -> Tensor[(13, 16, 8), float32] {
  %782 = @func_13080() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %782.2
}

def @func_9246() -> Tensor[(8, 8, ?), uint16] {
  %793 = fn () -> Tensor[(8, 8, ?), uint16] {
    %783 = @func_4828() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 45), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78, 1), float32]) */;
    %784 = %783.7;
    %785 = cast(%784, dtype="float64") /* ty=Tensor[(8, 8, ?), float64] */;
    %786 = exp(%785) /* ty=Tensor[(8, 8, ?), float64] */;
    %787 = @func_8275() /* ty=(Tensor[(64), float32],) */;
    %788 = %787.0;
    %789 = cast(%788, dtype="uint16") /* ty=Tensor[(64), uint16] */;
    %790 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
    %791 = cast(%786, dtype="uint16") /* ty=Tensor[(8, 8, ?), uint16] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    maximum(%791, %792) /* ty=Tensor[(8, 8, ?), uint16] */
  };
  %793() /* ty=Tensor[(8, 8, ?), uint16] */
}

def @func_6424() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %800 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %794 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %795 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %796 = @func_3847() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
    %797 = %794.0;
    %798 = %795.0;
    %799 = %796.0;
    (%797, %798, %799)
  };
  %800() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_8781(%var_8779: Tensor[(3, 15, 8), uint64]) -> Tensor[(3, 15, 8), uint64] {
  @func_8778(%var_8779) /* ty=Tensor[(3, 15, 8), uint64] */
}

def @func_13031() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %801 = @func_5801() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %802 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %803 = %801.0;
  (%802, %803)
}

def @func_11206() -> Tensor[(78, 1), float32] {
  @func_11204() /* ty=Tensor[(78, 1), float32] */
}

def @func_11631() -> Tensor[(13, 16, 8), float32] {
  @func_11629() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_2285() -> (Tensor[(13, 16, 8), float32],) {
  %806 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %804 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %805 = %804.0;
    (%805,)
  };
  %806() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_9418() -> (Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32]) {
  %807 = @func_7836() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %808 = @func_9245() /* ty=Tensor[(8, 8, ?), uint16] */;
  %809 = %807.2;
  (%808, %809)
}

def @func_7654() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %814 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
    %810 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %811 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %812 = %810.0;
    %813 = %811.0;
    (%812, %813)
  };
  %814() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_5326() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  %815 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %816 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %817 = %815.0;
  (%816, %817)
}

def @func_14622() -> (Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) {
  %826 = fn () -> (Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) {
    %818 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 4), float64] */;
    %819 = cast(meta[relay.Constant][30] /* ty=Tensor[(1664), float32] */, dtype="float32") /* ty=Tensor[(1664), float32] */;
    %820 = cast(meta[relay.Constant][31] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
    %821 = reshape(%819, newshape=[13, 16, 8]) /* ty=Tensor[(13, 16, 8), float32] */;
    %822 = reshape(%820, newshape=[270]) /* ty=Tensor[(270), bool] */;
    %823 = @func_7714(%821, %822) /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(270), bool]) */;
    %824 = asinh(%818) /* ty=Tensor[(10, 12, 4), float64] */;
    %825 = %823.3;
    (%824, %825, meta[relay.Constant][30] /* ty=Tensor[(1664), float32] */, meta[relay.Constant][31] /* ty=Tensor[(270), bool] */)
  };
  %826() /* ty=(Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) */
}

def @func_7507() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %830 = fn () -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
    %827 = @func_3212() /* ty=(Tensor[(64), float32],) */;
    %828 = %827.0;
    %829 = @func_6528() /* ty=Tensor[(13, 16, 8), float32] */;
    (%828, %829)
  };
  %830() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_4035() -> Tensor[(13, 16, 8), float32] {
  %832 = fn () -> Tensor[(13, 16, 8), float32] {
    %831 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %831.0
  };
  %832() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_13003() -> (Tensor[(14, 15, 13), float64],) {
  %833 = @func_4985() /* ty=(Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) */;
  %834 = %833.1;
  (%834,)
}

def @func_10618(%var_10617: Tensor[(1, 1, 7), float64]) -> (Tensor[(?, ?, 7), float32], Tensor[(64), float32], Tensor[(?, ?, 7), bool], Tensor[(13, 3, 16), uint64], Tensor[(4, 156), uint64], Tensor[(64), float32], Tensor[(1, 1, 7), float64], Tensor[(14, 15, 13), float64]) {
  %870 = fn (%var_10554: Tensor[(1, 1, 7), float64]) -> (Tensor[(?, ?, 7), float32], Tensor[(64), float32], Tensor[(?, ?, 7), bool], Tensor[(13, 3, 16), uint64], Tensor[(4, 156), uint64], Tensor[(64), float32], Tensor[(1, 1, 7), float64], Tensor[(14, 15, 13), float64]) {
    %835 = cast(%var_10554, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
    %836 = log10(%835) /* ty=Tensor[(1, 1, 7), float64] */;
    %837 = cast(%836, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
    %838 = cos(%837) /* ty=Tensor[(1, 1, 7), float32] */;
    %839 = cast(%838, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
    %840 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
    %841 = cast(%836, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
    %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %843 = @func_5393() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
    %844 = cast(%var_10554, dtype="int32") /* ty=Tensor[(1, 1, 7), int32] */;
    %845 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
    %846 = cast(%838, dtype="int32") /* ty=Tensor[(1, 1, 7), int32] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %848 = multiply(%846, %847) /* ty=Tensor[(?, ?, 7), int32] */;
    %849 = cast(%836, dtype="bool") /* ty=Tensor[(1, 1, 7), bool] */;
    %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%848, dtype="bool") /* ty=Tensor[(?, ?, 7), bool] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %853 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 156), uint64] */, dtype="uint64") /* ty=Tensor[(4, 156), uint64] */;
    %854 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 156), uint64] */, dtype="uint64") /* ty=Tensor[(4, 156), uint64] */;
    %855 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 156), uint64] */, dtype="uint64") /* ty=Tensor[(4, 156), uint64] */;
    %856 = reshape(%853, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
    %857 = reshape(%854, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
    %858 = reshape(%855, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
    %859 = @func_6926(%856, %857, %858) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
    %860 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
    %861 = cast(%838, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
    %862 = @func_7082() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) */;
    %863 = floor_divide(%841, %842) /* ty=Tensor[(?, ?, 7), float32] */;
    %864 = %843.0;
    %865 = not_equal(%851, %852) /* ty=Tensor[(?, ?, 7), bool] */;
    %866 = %859.0;
    %867 = %860.2;
    %868 = log(%861) /* ty=Tensor[(1, 1, 7), float64] */;
    %869 = %862.1;
    (%863, %864, %865, %866, meta[relay.Constant][32] /* ty=Tensor[(4, 156), uint64] */, %867, %868, %869)
  };
  %870(%var_10617) /* ty=(Tensor[(?, ?, 7), float32], Tensor[(64), float32], Tensor[(?, ?, 7), bool], Tensor[(13, 3, 16), uint64], Tensor[(4, 156), uint64], Tensor[(64), float32], Tensor[(1, 1, 7), float64], Tensor[(14, 15, 13), float64]) */
}

def @func_941(%var_939: Tensor[(1, 6, 13), float32], %var_940: Tensor[(64), float32]) -> (Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) {
  %895 = fn (%var_887: Tensor[(1, 6, 13), float32], %var_907: Tensor[(64), float32]) -> (Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) {
    %871 = cast(%var_907, dtype="float32") /* ty=Tensor[(64), float32] */;
    %872 = reshape(%871, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
    %873 = @func_558(%872) /* ty=(Tensor[(8, 8, ?), bool],) */;
    %874 = cast(%var_907, dtype="float32") /* ty=Tensor[(64), float32] */;
    %875 = reshape(%874, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
    %876 = @func_558(%875) /* ty=(Tensor[(8, 8, ?), bool],) */;
    %877 = cast(%var_887, dtype="float32") /* ty=Tensor[(1, 6, 13), float32] */;
    %878 = sqrt(%877) /* ty=Tensor[(1, 6, 13), float32] */;
    %879 = cast(%var_887, dtype="int64") /* ty=Tensor[(1, 6, 13), int64] */;
    %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %881 = cast(%878, dtype="int64") /* ty=Tensor[(1, 6, 13), int64] */;
    %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %883 = bitwise_and(%881, %882) /* ty=Tensor[(?, 6, 13), int64] */;
    %884 = cast(%883, dtype="bool") /* ty=Tensor[(?, 6, 13), bool] */;
    %885 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %886 = cast(%878, dtype="bool") /* ty=Tensor[(1, 6, 13), bool] */;
    %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %888 = cast(%var_907, dtype="float32") /* ty=Tensor[(64), float32] */;
    %889 = reshape(%888, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
    %890 = @func_558(%889) /* ty=(Tensor[(8, 8, ?), bool],) */;
    %891 = %873.0;
    %892 = %876.0;
    %893 = less_equal(%886, %887) /* ty=Tensor[(?, 6, 13), bool] */;
    %894 = %890.0;
    (%891, %var_907, %892, %893, %894)
  };
  %895(%var_939, %var_940) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */
}

def @func_12803() -> Tensor[(13, 16, 8), float32] {
  %896 = fn () -> Tensor[(13, 16, 8), float32] {
    @func_12409() /* ty=Tensor[(13, 16, 8), float32] */
  };
  %896() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_4516(%var_4514: Tensor[(8, 8, 15), float32]) -> (Tensor[(8, 8, 15), bool],) {
  @func_4513(%var_4514) /* ty=(Tensor[(8, 8, 15), bool],) */
}

def @func_8681() -> Tensor[(64), float32] {
  %898 = fn () -> Tensor[(64), float32] {
    %897 = @func_5051() /* ty=(Tensor[(64), float32],) */;
    %897.0
  };
  %898() /* ty=Tensor[(64), float32] */
}

def @func_15625() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %903 = fn () -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
    %899 = @func_10124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
    %900 = @func_9770() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %901 = %899.1;
    %902 = %900.0;
    (%901, %902)
  };
  %903() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_16064() -> Tensor[(64), float32] {
  @func_16062() /* ty=Tensor[(64), float32] */
}

def @func_18095() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %908 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
    %904 = @func_15810() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %905 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
    %906 = %904.0;
    %907 = @func_13714() /* ty=Tensor[(13, 16, 8), float32] */;
    (%905, %906, %907)
  };
  %908() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_6964(%var_6962: Tensor[(12, 12, 13), float64], %var_6963: Tensor[(12, 12, 13), float64]) -> (Tensor[(12, 12, 13), float64],) {
  %914 = fn (%var_6952: Tensor[(12, 12, 13), float64], %var_6953: Tensor[(12, 12, 13), float64]) -> (Tensor[(12, 12, 13), float64],) {
    %909 = cast(%var_6953, dtype="float64") /* ty=Tensor[(12, 12, 13), float64] */;
    %910 = shape_of(%var_6952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %911 = cast(%var_6952, dtype="float64") /* ty=Tensor[(12, 12, 13), float64] */;
    %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %913 = mod(%911, %912) /* ty=Tensor[(12, 12, 13), float64] */;
    (%913,)
  };
  %914(%var_6962, %var_6963) /* ty=(Tensor[(12, 12, 13), float64],) */
}

def @func_18332() -> (Tensor[(64), float32],) {
  %915 = @func_13756() /* ty=Tensor[(64), float32] */;
  (%915,)
}

def @func_8928() -> Tensor[(13, 16, 8), bool] {
  @func_8926() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_2240(%var_2238: Tensor[(270, 6), float64], %var_2239: Tensor[(270, 6), float64]) -> (Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(270, 6), uint8]) {
  %927 = fn (%var_2223: Tensor[(270, 6), float64], %var_2231: Tensor[(270, 6), float64]) -> (Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(270, 6), uint8]) {
    %916 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %917 = cast(%var_2223, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
    %918 = reshape(%917, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), float64] */;
    %919 = @func_1288(%918) /* ty=(Tensor[(12, 9, 15), float64],) */;
    %920 = cast(%var_2231, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
    %921 = shape_of(%var_2223, dtype="int32") /* ty=Tensor[(2), int32] */;
    %922 = cast(%var_2223, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
    %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %924 = %916.0;
    %925 = %919.0;
    %926 = minimum(%922, %923) /* ty=Tensor[(270, 6), uint8] */;
    (%924, %925, %926)
  };
  %927(%var_2238, %var_2239) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(270, 6), uint8]) */
}

def @func_1960() -> (Tensor[(13, 16, 8), float32],) {
  %928 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %929 = %928.0;
  (%929,)
}

def @func_14936() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), uint64], Tensor[(624), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool]) {
  %947 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), uint64], Tensor[(624), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool]) {
    %930 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
    %931 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
    %932 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
    %933 = reshape(%930, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
    %934 = reshape(%931, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
    %935 = reshape(%932, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
    %936 = @func_6926(%933, %934, %935) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
    %937 = cast(meta[relay.Constant][34] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %938 = reshape(%937, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %939 = @func_7460(%938) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
    %940 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
    %941 = @func_13992() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %942 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
    %943 = %936.0;
    %944 = %939.0;
    %945 = %940.0;
    %946 = %941.0;
    (%942, %943, meta[relay.Constant][33] /* ty=Tensor[(624), uint64] */, %944, meta[relay.Constant][34] /* ty=Tensor[(64), float32] */, %945, %946)
  };
  %947() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), uint64], Tensor[(624), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool]) */
}

def @func_17098() -> Tensor[(13, 16, 8), float32] {
  @func_17096() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_12606() -> (Tensor[(9, 10, 2), float64],) {
  %950 = fn () -> (Tensor[(9, 10, 2), float64],) {
    %948 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 10, 2), float64] */;
    %949 = acosh(%948) /* ty=Tensor[(9, 10, 2), float64] */;
    (%949,)
  };
  %950() /* ty=(Tensor[(9, 10, 2), float64],) */
}

def @func_10126() -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  @func_10124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */
}

def @func_1152() -> (Tensor[(13, 16, 8), float32],) {
  %952 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %951 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
    (%951,)
  };
  %952() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_6779() -> Tensor[(13, 16, 8), float32] {
  %953 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %953.0
}

def @func_16298(%var_16296: Tensor[(60), float32], %var_16297: Tensor[(780), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(15, 13, 4), bool], Tensor[(60), float32], Tensor[(780), float32], Tensor[(13, 16, 8), float32]) {
  @func_16294(%var_16296, %var_16297) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(15, 13, 4), bool], Tensor[(60), float32], Tensor[(780), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_6675() -> (Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  %968 = fn () -> (Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
    %954 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
    %955 = @func_3243() /* ty=(Tensor[(64), float32],) */;
    %956 = @func_5495() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
    %957 = @func_4367() /* ty=(Tensor[(64), float32],) */;
    %958 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %959 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %960 = @func_5051() /* ty=(Tensor[(64), float32],) */;
    %961 = %954.0;
    %962 = %955.0;
    %963 = %956.0;
    %964 = %957.0;
    %965 = %958.0;
    %966 = %959.0;
    %967 = %960.0;
    (%961, %962, %963, %964, %965, %966, %967)
  };
  %968() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */
}

def @func_2769() -> (Tensor[(64), float32],) {
  %971 = fn () -> (Tensor[(64), float32],) {
    %969 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
    %970 = %969.3;
    (%970,)
  };
  %971() /* ty=(Tensor[(64), float32],) */
}

def @func_3572() -> Tensor[(64), float32] {
  @func_3570() /* ty=Tensor[(64), float32] */
}

def @func_10216() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  %972 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %973 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %974 = %972.0;
  %975 = %973.1;
  (%974, %975)
}

def @func_3396() -> Tensor[(13, 16, 8), bool] {
  @func_3394() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_6890() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_2632(%var_2630: Tensor[(270), bool], %var_2631: Tensor[(16, 4), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) {
  @func_2628(%var_2630, %var_2631) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_16571() -> (Tensor[(13, 16, 8), float32],) {
  @func_16569() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_15059() -> (Tensor[(13, 16, 8), float32],) {
  %978 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %976 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %977 = %976.0;
    (%977,)
  };
  %978() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_9886() -> (Tensor[(13, 16, 8), float32],) {
  %979 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %980 = %979.1;
  (%980,)
}

def @func_15861() -> Tensor[(8, 8, ?), uint16] {
  %982 = fn () -> Tensor[(8, 8, ?), uint16] {
    %981 = @func_14298() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %981.0
  };
  %982() /* ty=Tensor[(8, 8, ?), uint16] */
}

def @func_14735(%var_14733: Tensor[(15, 1, 4), float32], %var_14734: Tensor[(15, 13, 4), float32]) -> (Tensor[(15, 13, 4), bool],) {
  @func_14731(%var_14733, %var_14734) /* ty=(Tensor[(15, 13, 4), bool],) */
}

def @func_8495(%var_8485: Tensor[(135), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(64), float32]) {
  %983 = @func_2663() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %984 = cast(%var_8485, dtype="float32") /* ty=Tensor[(135), float32] */;
  %985 = reshape(%984, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %986 = @func_3657(%985) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %987 = %983.0;
  %988 = %986.0;
  %989 = @func_3570() /* ty=Tensor[(64), float32] */;
  (%987, %988, %var_8485, %989)
}

def @func_10401() -> Tensor[(13, 16, 8), bool] {
  %991 = fn () -> Tensor[(13, 16, 8), bool] {
    %990 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
    %990.0
  };
  %991() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_18334() -> (Tensor[(64), float32],) {
  @func_18332() /* ty=(Tensor[(64), float32],) */
}

def @func_13033() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  @func_13031() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_11341() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_11339() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_12717() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), float32], Tensor[(117, 1), float32], Tensor[(13, 16, 8), float32]) {
  %1004 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), float32], Tensor[(117, 1), float32], Tensor[(13, 16, 8), float32]) {
    %992 = @func_6789() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %993 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
    %994 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
    %995 = cast(meta[relay.Constant][36] /* ty=Tensor[(117, 1), float32] */, dtype="float32") /* ty=Tensor[(117, 1), float32] */;
    %996 = reshape(%995, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
    %997 = @func_10458() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %998 = %992.0;
    %999 = %993.0;
    %1000 = @func_4672() /* ty=Tensor[(13, 16, 8), bool] */;
    %1001 = %994.0;
    %1002 = @func_2313(%996) /* ty=Tensor[(3, 3, 13), float32] */;
    %1003 = %997.0;
    (%998, %999, %1000, %1001, %1002, meta[relay.Constant][36] /* ty=Tensor[(117, 1), float32] */, %1003)
  };
  %1004() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), float32], Tensor[(117, 1), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_18693(%var_18624: Tensor[(2, 2, 2), float64], %var_18625: Tensor[(2, 2, 2), float64]) -> (Tensor[(13, 16, 8), float32], Tensor[(2, 2, 2), bool]) {
  %1005 = @func_18094() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1006 = cast(%var_18625, dtype="float64") /* ty=Tensor[(2, 2, 2), float64] */;
  %1007 = shape_of(%var_18624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(%var_18624, dtype="float64") /* ty=Tensor[(2, 2, 2), float64] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1010 = floor_mod(%1008, %1009) /* ty=Tensor[(2, 2, 2), float64] */;
  %1011 = cast(%1010, dtype="bool") /* ty=Tensor[(2, 2, 2), bool] */;
  %1012 = shape_of(%var_18625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%var_18625, dtype="bool") /* ty=Tensor[(2, 2, 2), bool] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1015 = %1005.2;
  %1016 = less_equal(%1013, %1014) /* ty=Tensor[(2, 2, 2), bool] */;
  (%1015, %1016)
}

def @func_16062() -> Tensor[(64), float32] {
  @func_13756() /* ty=Tensor[(64), float32] */
}

def @func_12456() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1017 = @func_6779() /* ty=Tensor[(13, 16, 8), float32] */;
  %1018 = @func_8588() /* ty=Tensor[(64), float32] */;
  (%1017, %1018)
}

def @func_16102(%var_16101: Tensor[(15, 2, 1), float32]) -> Tensor[(15, 2, 16), float32] {
  %1021 = fn (%var_16092: Tensor[(15, 2, 1), float32]) -> Tensor[(15, 2, 16), float32] {
    %1019 = cast(%var_16092, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
    %1020 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
    floor_mod(%1019, %1020) /* ty=Tensor[(15, 2, 16), float32] */
  };
  %1021(%var_16101) /* ty=Tensor[(15, 2, 16), float32] */
}

def @func_13311() -> Tensor[(13, 16, 8), float32] {
  @func_13309() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_10845() -> (Tensor[(13, 16, 8), float32],) {
  %1024 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %1022 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1023 = %1022.0;
    (%1023,)
  };
  %1024() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_11800(%var_11798: Tensor[(14, 6, 8), float32]) -> (Tensor[(14, 6, 8), float64], Tensor[(13, 16, 8), float32]) {
  @func_11797(%var_11798) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(13, 16, 8), float32]) */
}

def @func_2628(%var_2585: Tensor[(270), bool], %var_2586: Tensor[(16, 4), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) {
  %1025 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %1026 = cast(%var_2585, dtype="bool") /* ty=Tensor[(270), bool] */;
  %1027 = cast(%var_2586, dtype="float32") /* ty=Tensor[(16, 4), float32] */;
  %1028 = reshape(%1026, newshape=[30, 9]) /* ty=Tensor[(30, 9), bool] */;
  %1029 = reshape(%1027, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1030 = @func_1703(%1028, %1029) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(6, 3, 15), bool], Tensor[(30, 9), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64], Tensor[(8, 8, ?), bool], Tensor[(64), float32]) */;
  %1031 = @func_1151() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1032 = %1025.3;
  %1033 = %1030.2;
  %1034 = %1031.0;
  (%1032, %1033, %var_2585, %var_2586, %1034)
}

def @func_17568() -> Tensor[(13, 16, 8), float32] {
  @func_17566() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_12410() -> Tensor[(13, 16, 8), float32] {
  %1035 = fn () -> Tensor[(13, 16, 8), float32] {
    @func_9515() /* ty=Tensor[(13, 16, 8), float32] */
  };
  %1035() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_18012() -> (Tensor[(64), float32],) {
  %1038 = fn () -> (Tensor[(64), float32],) {
    %1036 = @func_11741() /* ty=(Tensor[(64), float32],) */;
    %1037 = %1036.0;
    (%1037,)
  };
  %1038() /* ty=(Tensor[(64), float32],) */
}

def @func_11629() -> Tensor[(13, 16, 8), float32] {
  %1039 = @func_10844() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1039.0
}

def @func_10892() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) {
  %1045 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) {
    %1040 = @func_6674() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
    %1041 = @func_9245() /* ty=Tensor[(8, 8, ?), uint16] */;
    %1042 = cast(%1041, dtype="float64") /* ty=Tensor[(8, 8, ?), float64] */;
    %1043 = %1040.4;
    %1044 = acosh(%1042) /* ty=Tensor[(8, 8, ?), float64] */;
    (%1043, %1044)
  };
  %1045() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), float64]) */
}

def @func_13587() -> (Tensor[(13, 16, 8), float32],) {
  @func_13585() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_9944(%var_9912: Tensor[(78, 1), float32]) -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(78, 1), float32], Tensor[(8, 8), float32], Tensor[(3, 3, 13), float32], Tensor[(117), float32]) {
  %1046 = cast(%var_9912, dtype="float32") /* ty=Tensor[(78, 1), float32] */;
  %1047 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 8), float32] */;
  %1048 = reshape(%1046, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %1049 = reshape(%1047, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1050 = @func_938(%1048, %1049) /* ty=(Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(?, 6, 13), bool], Tensor[(8, 8, ?), bool]) */;
  %1051 = cast(meta[relay.Constant][39] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
  %1052 = reshape(%1051, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
  %1053 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %1054 = %1050.1;
  %1055 = @func_2313(%1052) /* ty=Tensor[(3, 3, 13), float32] */;
  (%1053, %1054, %var_9912, meta[relay.Constant][38] /* ty=Tensor[(8, 8), float32] */, %1055, meta[relay.Constant][39] /* ty=Tensor[(117), float32] */)
}

def @func_1291(%var_1289: Tensor[(12, 9, 15), float64]) -> (Tensor[(12, 9, 15), float64],) {
  @func_1288(%var_1289) /* ty=(Tensor[(12, 9, 15), float64],) */
}

def @func_3727(%var_3721: Tensor[(270, 1), bool]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) {
  %1056 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1057 = @func_2824() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1058 = cast(%var_3721, dtype="bool") /* ty=Tensor[(270, 1), bool] */;
  %1059 = %1056.3;
  %1060 = cast(%1059, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1061 = reshape(%1058, newshape=[270]) /* ty=Tensor[(270), bool] */;
  %1062 = reshape(%1060, newshape=[16, 4]) /* ty=Tensor[(16, 4), float32] */;
  %1063 = @func_2628(%1061, %1062) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(30, 9), bool], Tensor[(270), bool], Tensor[(16, 4), float32], Tensor[(13, 16, 8), float32]) */;
  %1064 = %1057.0;
  %1065 = %1063.4;
  (%1059, %1064, %1065, %var_3721)
}

def @func_7837() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1074 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %1066 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %1067 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %1068 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
    %1069 = @func_2154() /* ty=(Tensor[(64), float32],) */;
    %1070 = %1066.1;
    %1071 = %1067.0;
    %1072 = %1068.1;
    %1073 = %1069.0;
    (%1070, %1071, %1072, %1073)
  };
  %1074() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_8542() -> (Tensor[(13, 16, 8), float32],) {
  %1075 = @func_6423() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1076 = %1075.1;
  (%1076,)
}

def @func_12458() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  @func_12456() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_14454() -> Tensor[(13, 16, 8), bool] {
  @func_14452() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_7543() -> Tensor[(13, 16, 8), bool] {
  %1077 = fn () -> Tensor[(13, 16, 8), bool] {
    @func_1830() /* ty=Tensor[(13, 16, 8), bool] */
  };
  %1077() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_12261() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1078 = @func_2768() /* ty=(Tensor[(64), float32],) */;
  %1079 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
  %1080 = %1078.0;
  (%1079, %1080)
}

def @func_18756(%var_18754: Tensor[(78, 9), float32]) -> (Tensor[(78, 9), uint16], Tensor[(78, 1), float32]) {
  @func_18753(%var_18754) /* ty=(Tensor[(78, 9), uint16], Tensor[(78, 1), float32]) */
}

def @func_5914() -> Tensor[(13, 16, 8), float32] {
  @func_5912() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_18786() -> (Tensor[(13, 16, 8), float32],) {
  %1081 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %1082 = %1081.1;
  (%1082,)
}

def @func_4674() -> Tensor[(13, 16, 8), bool] {
  @func_4672() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_13081() -> (Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1092 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
    %1083 = @func_10458() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %1084 = @func_12540() /* ty=(Tensor[(64), float32], Tensor[(7, 5, 11), uint32], uint32, Tensor[(385), uint32]) */;
    %1085 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %1086 = @func_10458() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %1087 = %1083.1;
    %1088 = %1084.1;
    %1089 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
    %1090 = %1085.5;
    %1091 = %1086.0;
    (%1087, %1088, %1089, %1090, %1091)
  };
  %1092() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(7, 5, 11), uint32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_2663() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1093 = @func_1626() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(78), float32], Tensor[(64), float32], Tensor[(8, 8, ?), bool]) */;
  %1094 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %1095 = %1093.0;
  (%1094, %1095)
}

def @func_1465(%var_1463: Tensor[(64), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  @func_1462(%var_1463) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */
}

def @func_7253() -> (Tensor[(13, 16, 8), bool],) {
  %1103 = fn () -> (Tensor[(13, 16, 8), bool],) {
    %1096 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1097 = %1096.0;
    %1098 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 16, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
    %1099 = shape_of(%1097, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1100 = cast(%1097, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
    %1101 = dyn.reshape(%1098, %1099, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1102 = greater_equal(%1100, %1101) /* ty=Tensor[(13, 16, 8), bool] */;
    (%1102,)
  };
  %1103() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_1360() -> (Tensor[(13, 16, 8), float32],) {
  %1104 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1104,)
}

def @func_2039() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) {
  @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */
}

def @func_17546() -> Tensor[(13, 16, 8), float32] {
  @func_17544() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_12344() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %1105 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1106 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1107 = %1105.0;
  %1108 = %1106.1;
  (%1107, %1108)
}

def @func_14825() -> (Tensor[(64), float32],) {
  %1109 = @func_9830() /* ty=(Tensor[(64), float32],) */;
  %1110 = %1109.0;
  (%1110,)
}

def @func_8425() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1118 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %1111 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %1112 = @func_6074() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
    %1113 = @func_3212() /* ty=(Tensor[(64), float32],) */;
    %1114 = %1111.1;
    %1115 = %1112.1;
    %1116 = @func_6769() /* ty=Tensor[(13, 16, 8), float32] */;
    %1117 = %1113.0;
    (%1114, %1115, %1116, %1117)
  };
  %1118() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_16739() -> Tensor[(12, 15, ?), uint8] {
  %1123 = fn () -> Tensor[(12, 15, ?), uint8] {
    %1119 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 15, 1), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 1), uint8] */;
    %1120 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(12, 15, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1121 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 15, 1), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 1), uint8] */;
    %1122 = dyn.reshape(%1119, %1120, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%1121, %1122) /* ty=Tensor[(12, 15, ?), uint8] */
  };
  %1123() /* ty=Tensor[(12, 15, ?), uint8] */
}

def @func_8778(%var_8773: Tensor[(3, 15, 8), uint64]) -> Tensor[(3, 15, 8), uint64] {
  %1124 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 15, 8), uint64] */, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %1125 = shape_of(%var_8773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1126 = cast(%var_8773, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%1126, %1127) /* ty=Tensor[(3, 15, 8), uint64] */
}

def @func_1848() -> (Tensor[(13, 16, 8), float32],) {
  %1128 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1128,)
}

def @func_3500() -> (Tensor[(13, 16, 8), bool],) {
  @func_3498() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_12046(%var_12034: uint32, %var_12035: Tensor[(7, 5, 11), uint32]) -> (Tensor[(7, 5, 11), uint32],) {
  %1129 = cast(%var_12034, dtype="uint32") /* ty=uint32 */;
  %1130 = cast(%var_12035, dtype="uint32") /* ty=Tensor[(7, 5, 11), uint32] */;
  %1131 = minimum(%1129, %1130) /* ty=Tensor[(7, 5, 11), uint32] */;
  (%1131,)
}

def @func_4910() -> (Tensor[(13, 16, 8), float32],) {
  %1134 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %1132 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
    %1133 = %1132.3;
    (%1133,)
  };
  %1134() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_11006() -> (Tensor[(13, 16, 8), float32], Tensor[(36), float64], Tensor[(24, 26), float32]) {
  %1135 = @func_5393() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1136 = cast(meta[relay.Constant][44] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %1137 = cast(meta[relay.Constant][45] /* ty=Tensor[(24, 26), uint64] */, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %1138 = reshape(%1136, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %1139 = reshape(%1137, newshape=[624]) /* ty=Tensor[(624), uint64] */;
  %1140 = @func_8128(%1138, %1139) /* ty=(Tensor[(13, 3, 16), bool], Tensor[(624), uint64], Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float32]) */;
  %1141 = %1140.1;
  %1142 = cast(%1141, dtype="float32") /* ty=Tensor[(624), float32] */;
  %1143 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(24, 26), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1144 = cast(meta[relay.Constant][45] /* ty=Tensor[(24, 26), uint64] */, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %1145 = dyn.reshape(%1142, %1143, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1146 = %1135.1;
  %1147 = power(%1144, %1145) /* ty=Tensor[(24, 26), float32] */;
  (%1146, meta[relay.Constant][44] /* ty=Tensor[(36), float64] */, %1147)
}

def @func_15100() -> Tensor[(64), float32] {
  @func_15098() /* ty=Tensor[(64), float32] */
}

def @func_8276() -> (Tensor[(64), float32],) {
  %1150 = fn () -> (Tensor[(64), float32],) {
    %1148 = @func_2768() /* ty=(Tensor[(64), float32],) */;
    %1149 = %1148.0;
    (%1149,)
  };
  %1150() /* ty=(Tensor[(64), float32],) */
}

def @func_17900() -> Tensor[(13, 16, 8), float32] {
  @func_17096() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_4922() -> Tensor[(64), float32] {
  @func_4920() /* ty=Tensor[(64), float32] */
}

def @func_12138() -> Tensor[(13, 16, 8), bool] {
  %1151 = fn () -> Tensor[(13, 16, 8), bool] {
    @func_1912() /* ty=Tensor[(13, 16, 8), bool] */
  };
  %1151() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_8941() -> (Tensor[(13, 16, 8), float32],) {
  @func_8939() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_7263() -> Tensor[(13, 16, 8), bool] {
  %1153 = fn () -> Tensor[(13, 16, 8), bool] {
    %1152 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %1152.1
  };
  %1153() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_13231(%var_13229: Tensor[(16, 13, 1), uint32], %var_13230: Tensor[(16, 13, 16), uint32]) -> Tensor[(16, 13, 16), uint32] {
  %1156 = fn (%var_13221: Tensor[(16, 13, 1), uint32], %var_13222: Tensor[(16, 13, 16), uint32]) -> Tensor[(16, 13, 16), uint32] {
    %1154 = cast(%var_13221, dtype="uint32") /* ty=Tensor[(16, 13, 1), uint32] */;
    %1155 = cast(%var_13222, dtype="uint32") /* ty=Tensor[(16, 13, 16), uint32] */;
    add(%1154, %1155) /* ty=Tensor[(16, 13, 16), uint32] */
  };
  %1156(%var_13229, %var_13230) /* ty=Tensor[(16, 13, 16), uint32] */
}

def @func_13309() -> Tensor[(13, 16, 8), float32] {
  %1157 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1157.0
}

def @func_4057() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_10380(%var_10378: Tensor[(3, 11, 8), int16], %var_10379: Tensor[(3, 11, 8), int16]) -> Tensor[(3, 11, 8), int16] {
  @func_10376(%var_10378, %var_10379) /* ty=Tensor[(3, 11, 8), int16] */
}

def @func_5065() -> (Tensor[(13, 16, 8), bool],) {
  @func_5063() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_13714() -> Tensor[(13, 16, 8), float32] {
  %1158 = @func_10844() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1158.0
}

def @func_4750() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1163 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %1159 = @func_2204() /* ty=(Tensor[(3, 13, 1), uint32], Tensor[(13, 16, 8), float32]) */;
    %1160 = @func_3212() /* ty=(Tensor[(64), float32],) */;
    %1161 = %1159.1;
    %1162 = %1160.0;
    (%1161, %1162)
  };
  %1163() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_15016() -> Tensor[(13, 16, 8), float32] {
  %1164 = fn () -> Tensor[(13, 16, 8), float32] {
    @func_8843() /* ty=Tensor[(13, 16, 8), float32] */
  };
  %1164() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_18216() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), bool], Tensor[(24, 26), uint64]) {
  @func_18214() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 3, 16), bool], Tensor[(24, 26), uint64]) */
}

def @func_16721() -> (Tensor[(13, 16, 8), bool],) {
  %1166 = fn () -> (Tensor[(13, 16, 8), bool],) {
    %1165 = @func_8069() /* ty=Tensor[(13, 16, 8), bool] */;
    (%1165,)
  };
  %1166() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_2315(%var_2314: Tensor[(3, 3, 13), float32]) -> Tensor[(3, 3, 13), float32] {
  %1168 = fn (%var_2294: Tensor[(3, 3, 13), float32]) -> Tensor[(3, 3, 13), float32] {
    %1167 = cast(%var_2294, dtype="float32") /* ty=Tensor[(3, 3, 13), float32] */;
    log2(%1167) /* ty=Tensor[(3, 3, 13), float32] */
  };
  %1168(%var_2314) /* ty=Tensor[(3, 3, 13), float32] */
}

def @func_5526() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1173 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
    %1169 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %1170 = @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1171 = %1169.0;
    %1172 = %1170.0;
    (%1171, %1172)
  };
  %1173() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_3022() -> (Tensor[(13, 16, 8), bool],) {
  @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_6930(%var_6927: Tensor[(13, 3, 16), uint64], %var_6928: Tensor[(13, 3, 16), uint64], %var_6929: Tensor[(13, 3, 16), uint64]) -> (Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) {
  %1184 = fn (%var_6904: Tensor[(13, 3, 16), uint64], %var_6905: Tensor[(13, 3, 16), uint64], %var_6918: Tensor[(13, 3, 16), uint64]) -> (Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) {
    %1174 = cast(%var_6905, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
    %1175 = shape_of(%var_6904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1176 = cast(%var_6904, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
    %1177 = dyn.reshape(%1174, %1175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1178 = cast(%var_6918, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
    %1179 = shape_of(%var_6904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1180 = cast(%var_6904, dtype="bool") /* ty=Tensor[(13, 3, 16), bool] */;
    %1181 = dyn.reshape(%1178, %1179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1182 = maximum(%1176, %1177) /* ty=Tensor[(13, 3, 16), uint64] */;
    %1183 = equal(%1180, %1181) /* ty=Tensor[(13, 3, 16), bool] */;
    (%1182, %1183)
  };
  %1184(%var_6927, %var_6928, %var_6929) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */
}

def @func_15506() -> (Tensor[(13, 16, 8), float32],) {
  @func_15504() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_3245() -> (Tensor[(64), float32],) {
  @func_3243() /* ty=(Tensor[(64), float32],) */
}

def @func_4672() -> Tensor[(13, 16, 8), bool] {
  @func_1912() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_1222() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_15928() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) {
  %1189 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) {
    %1185 = @func_15810() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1186 = @func_6779() /* ty=Tensor[(13, 16, 8), float32] */;
    %1187 = @func_13629() /* ty=Tensor[(13, 16, 8), uint64] */;
    %1188 = %1185.0;
    (%1186, %1187, %1188)
  };
  %1189() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */
}

def @func_8265(%var_8264: Tensor[(11, 16, 14), float32]) -> (Tensor[(11, 16, 14), float32],) {
  %1192 = fn (%var_8254: Tensor[(11, 16, 14), float32]) -> (Tensor[(11, 16, 14), float32],) {
    %1190 = cast(%var_8254, dtype="float32") /* ty=Tensor[(11, 16, 14), float32] */;
    %1191 = sinh(%1190) /* ty=Tensor[(11, 16, 14), float32] */;
    (%1191,)
  };
  %1192(%var_8264) /* ty=(Tensor[(11, 16, 14), float32],) */
}

def @func_14465() -> (Tensor[(13, 16, 8), float32],) {
  %1195 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %1193 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1194 = %1193.0;
    (%1194,)
  };
  %1195() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_11339() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1196 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1197 = @func_9830() /* ty=(Tensor[(64), float32],) */;
  %1198 = @func_8424() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1199 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1200 = %1196.0;
  %1201 = %1197.0;
  %1202 = %1198.0;
  %1203 = %1199.0;
  (%1200, %1201, %1202, %1203)
}

def @func_3848() -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %1209 = fn () -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
    %1204 = @func_3243() /* ty=(Tensor[(64), float32],) */;
    %1205 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1206 = %1204.0;
    %1207 = @func_3570() /* ty=Tensor[(64), float32] */;
    %1208 = %1205.0;
    (%1206, %1207, %1208)
  };
  %1209() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_13596() -> Tensor[(13, 16, 8), bool] {
  %1211 = fn () -> Tensor[(13, 16, 8), bool] {
    %1210 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %1210.0
  };
  %1211() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_15504() -> (Tensor[(13, 16, 8), float32],) {
  %1212 = @func_14124() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1213 = %1212.1;
  (%1213,)
}

def @func_5063() -> (Tensor[(13, 16, 8), bool],) {
  %1214 = @func_3498() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1215 = %1214.0;
  (%1215,)
}

def @func_14711() -> Tensor[(13, 16, 8), float32] {
  @func_14709() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_5675() -> (Tensor[(13, 16, 8), uint64],) {
  @func_5673() /* ty=(Tensor[(13, 16, 8), uint64],) */
}

def @func_3394() -> Tensor[(13, 16, 8), bool] {
  %1216 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1216.0
}

def @func_9772() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_9770() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_8132(%var_8130: Tensor[(2, 9, 2), float64], %var_8131: Tensor[(624), uint64]) -> (Tensor[(13, 3, 16), bool], Tensor[(624), uint64], Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float32]) {
  @func_8128(%var_8130, %var_8131) /* ty=(Tensor[(13, 3, 16), bool], Tensor[(624), uint64], Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float32]) */
}

def @func_4055() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %1217 = @func_2141() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1218 = %1217.0;
  %1219 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%1218, %1219)
}

def @func_13555() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1224 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %1220 = @func_10844() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1221 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
    %1222 = %1220.0;
    %1223 = %1221.0;
    (%1222, %1223)
  };
  %1224() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_17096() -> Tensor[(13, 16, 8), float32] {
  @func_16959() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_7084() -> (Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) {
  @func_7082() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) */
}

def @func_16454(%var_16452: Tensor[(13, 7, 12), uint16]) -> (Tensor[(13, 7, 12), uint16], Tensor[(64), float32]) {
  @func_16451(%var_16452) /* ty=(Tensor[(13, 7, 12), uint16], Tensor[(64), float32]) */
}

def @func_10124() -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32]) {
  %1225 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %1226 = @func_7542() /* ty=Tensor[(13, 16, 8), bool] */;
  %1227 = %1225.0;
  (%1226, %1227)
}

def @func_14312() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1228 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1229 = @func_12802() /* ty=Tensor[(13, 16, 8), float32] */;
  %1230 = %1228.0;
  (%1229, %1230)
}

def @func_1962() -> (Tensor[(13, 16, 8), float32],) {
  @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_9574() -> Tensor[(64), float32] {
  %1231 = fn () -> Tensor[(64), float32] {
    @func_8680() /* ty=Tensor[(64), float32] */
  };
  %1231() /* ty=Tensor[(64), float32] */
}

def @func_11108() -> Tensor[(13, 16, 8), float32] {
  %1232 = @func_4749() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1232.0
}

def @func_16961() -> Tensor[(13, 16, 8), float32] {
  @func_16959() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_9628(%var_9606: Tensor[(270), bool]) -> (Tensor[(64), float32], Tensor[(64), float32], Tensor[(270), float32]) {
  %1233 = cast(%var_9606, dtype="bool") /* ty=Tensor[(270), bool] */;
  %1234 = reshape(%1233, newshape=[270, 1]) /* ty=Tensor[(270, 1), bool] */;
  %1235 = @func_3727(%1234) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) */;
  %1236 = cast(%var_9606, dtype="float32") /* ty=Tensor[(270), float32] */;
  %1237 = @func_2265() /* ty=Tensor[(64), float32] */;
  %1238 = %1235.0;
  %1239 = log(%1236) /* ty=Tensor[(270), float32] */;
  (%1237, %1238, %1239)
}

def @func_10272() -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1240 = @func_4456() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %1241 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1242 = %1240.1;
  %1243 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
  %1244 = %1241.4;
  (%1242, %1243, %1244)
}

def @func_6888() -> (Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %1245 = @func_3212() /* ty=(Tensor[(64), float32],) */;
  %1246 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1247 = %1245.0;
  %1248 = %1246.0;
  (%1247, %1248)
}

def @func_17667() -> (Tensor[(270), bool], Tensor[(13, 16, 8), float32]) {
  %1252 = fn () -> (Tensor[(270), bool], Tensor[(13, 16, 8), float32]) {
    %1249 = @func_14621() /* ty=(Tensor[(10, 12, 4), float64], Tensor[(270), bool], Tensor[(1664), float32], Tensor[(270), bool]) */;
    %1250 = %1249.3;
    %1251 = @func_13714() /* ty=Tensor[(13, 16, 8), float32] */;
    (%1250, %1251)
  };
  %1252() /* ty=(Tensor[(270), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_1362() -> (Tensor[(13, 16, 8), float32],) {
  @func_1360() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_18414() -> (Tensor[(1664), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  @func_18412() /* ty=(Tensor[(1664), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */
}

def @func_2142() -> (Tensor[(13, 16, 8), float32],) {
  %1258 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %1253 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
    %1254 = cast(%1253, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    %1255 = tan(%1254) /* ty=Tensor[(13, 16, 8), float32] */;
    %1256 = cast(%1255, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
    %1257 = asinh(%1256) /* ty=Tensor[(13, 16, 8), float32] */;
    (%1257,)
  };
  %1258() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_4320() -> (Tensor[(64), float32],) {
  %1261 = fn () -> (Tensor[(64), float32],) {
    %1259 = @func_3243() /* ty=(Tensor[(64), float32],) */;
    %1260 = %1259.0;
    (%1260,)
  };
  %1261() /* ty=(Tensor[(64), float32],) */
}

def @func_7002() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1266 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
    %1262 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %1263 = @func_6212() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1264 = %1262.0;
    %1265 = %1263.0;
    (%1264, %1265)
  };
  %1266() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_17048() -> Tensor[(13, 16, 8), float32] {
  %1267 = @func_13554() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */;
  %1267.0
}

def @func_9685() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1271 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %1268 = @func_8275() /* ty=(Tensor[(64), float32],) */;
    %1269 = @func_5912() /* ty=Tensor[(13, 16, 8), float32] */;
    %1270 = %1268.0;
    (%1269, %1270)
  };
  %1271() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_6781() -> Tensor[(13, 16, 8), float32] {
  @func_6779() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_17159() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
  %1277 = fn () -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) {
    %1272 = @func_4909() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1273 = @func_4319() /* ty=(Tensor[(64), float32],) */;
    %1274 = @func_7542() /* ty=Tensor[(13, 16, 8), bool] */;
    %1275 = %1272.0;
    %1276 = %1273.0;
    (%1274, %1275, %1276)
  };
  %1277() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32]) */
}

def @func_18318(%var_18316: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 3, 13), float32]) {
  @func_18315(%var_18316) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 3, 13), float32]) */
}

def @func_18315(%var_18272: Tensor[(756), uint64]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(756), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(3, 3, 13), float32]) {
  %1278 = @func_14391() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32], Tensor[(13, 16, 8), float32]) */;
  %1279 = @func_5446() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1280 = cast(%var_18272, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %1281 = reshape(%1280, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %1282 = @func_8186(%1281) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(756), uint64]) */;
  %1283 = @func_5994() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1284 = @func_9770() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1285 = @func_15229() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1286 = @func_17666() /* ty=(Tensor[(270), bool], Tensor[(13, 16, 8), float32]) */;
  %1287 = @func_11559() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) */;
  %1288 = @func_6528() /* ty=Tensor[(13, 16, 8), float32] */;
  %1289 = %1278.2;
  %1290 = %1279.0;
  %1291 = %1282.0;
  %1292 = %1283.0;
  %1293 = %1284.1;
  %1294 = %1285.1;
  %1295 = @func_1313() /* ty=Tensor[(13, 16, 8), float32] */;
  %1296 = %1286.1;
  %1297 = %1287.0;
  (%1288, %1289, %1290, %1291, %var_18272, %1292, %1293, %1294, %1295, %1296, %1297)
}

def @func_9969() -> (Tensor[(13, 16, 8), float32],) {
  %1298 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1298,)
}

def @func_17825() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1299 = @func_6475() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1300 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  %1301 = @func_7262() /* ty=Tensor[(13, 16, 8), bool] */;
  %1302 = %1299.1;
  (%1300, %1301, %1302)
}

def @func_14222(%var_14208: Tensor[(135), float32]) -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(135), float32], Tensor[(135), float32]) {
  %1303 = @func_5673() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %1304 = @func_10272() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1305 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %1306 = cast(%var_14208, dtype="float32") /* ty=Tensor[(135), float32] */;
  %1307 = reshape(%1306, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %1308 = @func_8495(%1307) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(64), float32]) */;
  %1309 = %1303.0;
  %1310 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  %1311 = %1304.2;
  %1312 = %1305.1;
  %1313 = %1308.2;
  (%1309, %1310, %1311, %1312, %1313, %var_14208)
}

def @func_15198() -> (Tensor[(13, 16, 8), float32],) {
  %1316 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %1314 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %1315 = %1314.1;
    (%1315,)
  };
  %1316() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_16982() -> (Tensor[(13, 16, 8), float32],) {
  %1317 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1317,)
}

def @func_13585() -> (Tensor[(13, 16, 8), float32],) {
  %1318 = @func_13282() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
  %1319 = %1318.2;
  (%1319,)
}

def @func_10726() -> Tensor[(13, 16, 8), uint64] {
  %1320 = @func_5673() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %1320.0
}

def @func_14827() -> (Tensor[(64), float32],) {
  @func_14825() /* ty=(Tensor[(64), float32],) */
}

def @func_9832() -> (Tensor[(64), float32],) {
  @func_9830() /* ty=(Tensor[(64), float32],) */
}

def @func_9420() -> (Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32]) {
  @func_9418() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32]) */
}

def @func_2695() -> (Tensor[(13, 16, 8), uint64],) {
  @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */
}

def @func_5092() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1321 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1322 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1323 = %1321.0;
  %1324 = %1322.0;
  (%1323, %1324)
}

def @func_11204() -> Tensor[(78, 1), float32] {
  %1325 = @func_9901() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78, 1), float32]) */;
  %1325.1
}

def @func_9644() -> (Tensor[(13, 16, 8), float32],) {
  %1326 = @func_5222() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1326,)
}

def @func_4985() -> (Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) {
  %1327 = @func_3243() /* ty=(Tensor[(64), float32],) */;
  %1328 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 2730), int32] */, dtype="int32") /* ty=Tensor[(1, 2730), int32] */;
  %1329 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 2730), int32] */, dtype="int32") /* ty=Tensor[(1, 2730), int32] */;
  %1330 = reshape(%1328, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %1331 = reshape(%1329, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), int32] */;
  %1332 = %1327.0;
  %1333 = @func_2680(%1330, %1331) /* ty=Tensor[(14, 15, 13), float64] */;
  (%1332, %1333, meta[relay.Constant][46] /* ty=Tensor[(1, 2730), int32] */)
}

def @func_14299() -> (Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %1338 = fn () -> (Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
    %1334 = @func_9418() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32]) */;
    %1335 = %1334.0;
    %1336 = @func_9104() /* ty=Tensor[(13, 16, 8), float32] */;
    %1337 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
    (%1335, %1336, %1337)
  };
  %1338() /* ty=(Tensor[(8, 8, ?), uint16], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_14554() -> Tensor[(13, 16, 8), float32] {
  %1339 = @func_14235() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1339.0
}

def @func_5223() -> Tensor[(13, 16, 8), float32] {
  %1341 = fn () -> Tensor[(13, 16, 8), float32] {
    %1340 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1340.0
  };
  %1341() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_8498(%var_8496: Tensor[(135), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(64), float32]) {
  @func_8495(%var_8496) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(64), float32]) */
}

def @func_16294(%var_16258: Tensor[(60), float32], %var_16259: Tensor[(780), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(15, 13, 4), bool], Tensor[(60), float32], Tensor[(780), float32], Tensor[(13, 16, 8), float32]) {
  %1342 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1343 = cast(%var_16258, dtype="float32") /* ty=Tensor[(60), float32] */;
  %1344 = cast(%var_16259, dtype="float32") /* ty=Tensor[(780), float32] */;
  %1345 = reshape(%1343, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %1346 = reshape(%1344, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), float32] */;
  %1347 = @func_14731(%1345, %1346) /* ty=(Tensor[(15, 13, 4), bool],) */;
  %1348 = %1342.0;
  %1349 = @func_9515() /* ty=Tensor[(13, 16, 8), float32] */;
  %1350 = %1347.0;
  %1351 = @func_4034() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1348, %1349, %1350, %var_16258, %var_16259, %1351)
}

def @func_6529() -> Tensor[(13, 16, 8), float32] {
  %1353 = fn () -> Tensor[(13, 16, 8), float32] {
    %1352 = @func_3318() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1352.0
  };
  %1353() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_4369() -> (Tensor[(64), float32],) {
  @func_4367() /* ty=(Tensor[(64), float32],) */
}

def @func_1893(%var_1891: Tensor[(1, 1620), float64]) -> (Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) {
  @func_1890(%var_1891) /* ty=(Tensor[(13, 16, 8), int16], Tensor[(13, 16, 8), float32], Tensor[(12, 9, 15), float64], Tensor[(1, 1620), float64], Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool]) */
}

def @func_16984() -> (Tensor[(13, 16, 8), float32],) {
  @func_16982() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_11437(%var_11435: Tensor[(7, 7, 2), bool], %var_11436: Tensor[(7, 7, 2), bool]) -> (Tensor[(7, 7, 2), bool], Tensor[(7, 7, 2), uint16]) {
  %1364 = fn (%var_11422: Tensor[(7, 7, 2), bool], %var_11427: Tensor[(7, 7, 2), bool]) -> (Tensor[(7, 7, 2), bool], Tensor[(7, 7, 2), uint16]) {
    %1354 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 7, 2), bool] */, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
    %1355 = shape_of(%var_11422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1356 = cast(%var_11422, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
    %1357 = dyn.reshape(%1354, %1355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1358 = cast(%var_11427, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
    %1359 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(7, 7, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1360 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 7, 2), bool] */, dtype="uint16") /* ty=Tensor[(7, 7, 2), uint16] */;
    %1361 = dyn.reshape(%1358, %1359, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1362 = logical_or(%1356, %1357) /* ty=Tensor[(7, 7, 2), bool] */;
    %1363 = minimum(%1360, %1361) /* ty=Tensor[(7, 7, 2), uint16] */;
    (%1362, %1363)
  };
  %1364(%var_11435, %var_11436) /* ty=(Tensor[(7, 7, 2), bool], Tensor[(7, 7, 2), uint16]) */
}

def @func_10051() -> (Tensor[(64), float32],) {
  %1367 = fn () -> (Tensor[(64), float32],) {
    %1365 = @func_3669() /* ty=(Tensor[(64), float32],) */;
    %1366 = %1365.0;
    (%1366,)
  };
  %1367() /* ty=(Tensor[(64), float32],) */
}

def @func_3115(%var_3114: Tensor[(9, 7, 12), uint64]) -> (Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
  %1376 = fn (%var_3072: Tensor[(9, 7, 12), uint64]) -> (Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) {
    %1368 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 7, 12), uint64] */, dtype="uint64") /* ty=Tensor[(9, 7, 12), uint64] */;
    %1369 = shape_of(%var_3072, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1370 = cast(%var_3072, dtype="uint64") /* ty=Tensor[(9, 7, 12), uint64] */;
    %1371 = dyn.reshape(%1368, %1369, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1372 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
    %1373 = left_shift(%1370, %1371) /* ty=Tensor[(9, 7, 12), uint64] */;
    %1374 = @func_1830() /* ty=Tensor[(13, 16, 8), bool] */;
    %1375 = %1372.0;
    (%1373, %1374, %1375)
  };
  %1376(%var_3114) /* ty=(Tensor[(9, 7, 12), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), bool]) */
}

def @func_2693() -> (Tensor[(13, 16, 8), uint64],) {
  %1377 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %1378 = %1377.2;
  (%1378,)
}

def @func_8128(%var_8104: Tensor[(2, 9, 2), float64], %var_8114: Tensor[(624), uint64]) -> (Tensor[(13, 3, 16), bool], Tensor[(624), uint64], Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float32]) {
  %1379 = cast(%var_8114, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %1380 = cast(%var_8114, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %1381 = cast(%var_8114, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %1382 = reshape(%1379, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %1383 = reshape(%1380, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %1384 = reshape(%1381, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), uint64] */;
  %1385 = @func_6926(%1382, %1383, %1384) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(13, 3, 16), bool]) */;
  %1386 = cast(%var_8104, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %1387 = sinh(%1386) /* ty=Tensor[(2, 9, 2), float64] */;
  %1388 = cast(%1387, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %1389 = cast(%1387, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %1390 = log(%1389) /* ty=Tensor[(2, 9, 2), float64] */;
  %1391 = cast(%1390, dtype="float32") /* ty=Tensor[(2, 9, 2), float32] */;
  %1392 = %1385.1;
  %1393 = sin(%1388) /* ty=Tensor[(2, 9, 2), float64] */;
  %1394 = log2(%1391) /* ty=Tensor[(2, 9, 2), float32] */;
  (%1392, %var_8114, %1393, %1394)
}

def @func_6770() -> Tensor[(13, 16, 8), float32] {
  %1396 = fn () -> Tensor[(13, 16, 8), float32] {
    %1395 = @func_1960() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1395.0
  };
  %1396() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_10728() -> Tensor[(13, 16, 8), uint64] {
  @func_10726() /* ty=Tensor[(13, 16, 8), uint64] */
}

def @func_13832() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  %1397 = @func_8748() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1398 = @func_8652() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1399 = @func_3847() /* ty=(Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %1400 = %1397.0;
  %1401 = %1398.0;
  %1402 = @func_12137() /* ty=Tensor[(13, 16, 8), bool] */;
  %1403 = %1399.2;
  (%1400, %1401, %1402, %1403)
}

def @func_6164(%var_6151: Tensor[(1, 12, 4), float32]) -> (Tensor[(13, 16, 8), float32], Tensor[(1, 12, 4), float64]) {
  %1404 = @func_5133() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1405 = cast(%var_6151, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  %1406 = sin(%1405) /* ty=Tensor[(1, 12, 4), float32] */;
  %1407 = cast(%1406, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  %1408 = acosh(%1407) /* ty=Tensor[(1, 12, 4), float32] */;
  %1409 = cast(%1408, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
  %1410 = %1404.0;
  %1411 = tan(%1409) /* ty=Tensor[(1, 12, 4), float64] */;
  (%1410, %1411)
}

def @func_4282(%var_4280: Tensor[(270), bool]) -> (Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), int32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(30, 9), uint8], Tensor[(6, 3, 15), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) {
  @func_4279(%var_4280) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(3, 3, 13), int32], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(30, 9), uint8], Tensor[(6, 3, 15), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */
}

def @func_14158() -> Tensor[(13, 16, 8), float32] {
  @func_14156() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_2960() -> (Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %1412 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1413 = @func_2037() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), float32]) */;
  %1414 = %1413.3;
  %1415 = cast(%1414, dtype="float32") /* ty=Tensor[(13, 16, 8), float32] */;
  %1416 = cast(meta[relay.Constant][49] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1417 = reshape(%1416, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %1418 = @func_1462(%1417) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
  %1419 = %1412.0;
  %1420 = rsqrt(%1415) /* ty=Tensor[(13, 16, 8), float32] */;
  %1421 = %1418.2;
  %1422 = @func_1912() /* ty=Tensor[(13, 16, 8), bool] */;
  (%1419, %1420, %1421, meta[relay.Constant][49] /* ty=Tensor[(64), float32] */, %1422)
}

def @func_13834() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  @func_13832() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_13716() -> Tensor[(13, 16, 8), float32] {
  @func_13714() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_12050(%var_12048: uint32, %var_12049: Tensor[(7, 5, 11), uint32]) -> (Tensor[(7, 5, 11), uint32],) {
  @func_12046(%var_12048, %var_12049) /* ty=(Tensor[(7, 5, 11), uint32],) */
}

def @func_16007(%var_16005: Tensor[(264), int16]) -> (Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(264), int16], Tensor[(264), int16]) {
  @func_16004(%var_16005) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(64), float32], Tensor[(264), int16], Tensor[(264), int16]) */
}

def @func_2684(%var_2682: Tensor[(14, 15, 13), int32], %var_2683: Tensor[(14, 15, 13), int32]) -> Tensor[(14, 15, 13), float64] {
  @func_2680(%var_2682, %var_2683) /* ty=Tensor[(14, 15, 13), float64] */
}

def @func_15522() -> Tensor[(13, 16, 8), float32] {
  @func_15520() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_10274() -> (Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) {
  @func_10272() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */
}

def @func_16582() -> (Tensor[(64), float32],) {
  %1424 = fn () -> (Tensor[(64), float32],) {
    %1423 = @func_8680() /* ty=Tensor[(64), float32] */;
    (%1423,)
  };
  %1424() /* ty=(Tensor[(64), float32],) */
}

def @func_6516(%var_6514: bool, %var_6515: Tensor[(11, 6, 3), bool]) -> (Tensor[(11, 6, 3), bool], Tensor[(1620), float64], Tensor[(64), float32]) {
  %1432 = fn (%var_6498: bool, %var_6499: Tensor[(11, 6, 3), bool]) -> (Tensor[(11, 6, 3), bool], Tensor[(1620), float64], Tensor[(64), float32]) {
    %1425 = cast(%var_6498, dtype="bool") /* ty=bool */;
    %1426 = cast(%var_6499, dtype="bool") /* ty=Tensor[(11, 6, 3), bool] */;
    %1427 = cast(meta[relay.Constant][50] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %1428 = reshape(%1427, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %1429 = @func_1462(%1428) /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(8, 8, ?), bool], Tensor[(12, 9, 15), float64], Tensor[(1620), float64]) */;
    %1430 = logical_and(%1425, %1426) /* ty=Tensor[(11, 6, 3), bool] */;
    %1431 = %1429.5;
    (%1430, %1431, meta[relay.Constant][50] /* ty=Tensor[(64), float32] */)
  };
  %1432(%var_6514, %var_6515) /* ty=(Tensor[(11, 6, 3), bool], Tensor[(1620), float64], Tensor[(64), float32]) */
}

def @func_11560() -> (Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) {
  %1445 = fn () -> (Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) {
    %1433 = cast(meta[relay.Constant][51] /* ty=Tensor[(117), float32] */, dtype="float32") /* ty=Tensor[(117), float32] */;
    %1434 = reshape(%1433, newshape=[3, 3, 13]) /* ty=Tensor[(3, 3, 13), float32] */;
    %1435 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 6), float64] */;
    %1436 = acos(%1435) /* ty=Tensor[(13, 6, 6), float64] */;
    %1437 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 6, 6), float64] */, dtype="float32") /* ty=Tensor[(13, 6, 6), float32] */;
    %1438 = shape_of(%1436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1439 = cast(%1436, dtype="float32") /* ty=Tensor[(13, 6, 6), float32] */;
    %1440 = dyn.reshape(%1437, %1438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1441 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
    %1442 = @func_2313(%1434) /* ty=Tensor[(3, 3, 13), float32] */;
    %1443 = floor_mod(%1439, %1440) /* ty=Tensor[(13, 6, 6), float32] */;
    %1444 = %1441.0;
    (%1442, meta[relay.Constant][51] /* ty=Tensor[(117), float32] */, %1443, %1444)
  };
  %1445() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(117), float32], Tensor[(13, 6, 6), float32], Tensor[(13, 16, 8), uint64]) */
}

def @func_9770() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1446 = @func_6674() /* ty=(Tensor[(13, 16, 8), uint64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool], Tensor[(64), float32]) */;
  %1447 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1448 = %1446.4;
  %1449 = @func_9403() /* ty=Tensor[(13, 16, 8), float32] */;
  %1450 = %1447.0;
  (%1448, %1449, %1450)
}

def @func_9404() -> Tensor[(13, 16, 8), float32] {
  %1452 = fn () -> Tensor[(13, 16, 8), float32] {
    %1451 = @func_8915() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) */;
    %1451.1
  };
  %1452() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_7591(%var_7590: Tensor[(9, 270), bool]) -> (Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(9, 270), float64]) {
  %1462 = fn (%var_7585: Tensor[(9, 270), bool]) -> (Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(9, 270), float64]) {
    %1453 = @func_7082() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) */;
    %1454 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 270), bool] */, dtype="bool") /* ty=Tensor[(1, 270), bool] */;
    %1455 = reshape(%1454, newshape=[270, 1]) /* ty=Tensor[(270, 1), bool] */;
    %1456 = @func_3727(%1455) /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(270, 1), bool]) */;
    %1457 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 270), bool] */, dtype="float64") /* ty=Tensor[(1, 270), float64] */;
    %1458 = cast(%var_7585, dtype="float64") /* ty=Tensor[(9, 270), float64] */;
    %1459 = %1453.1;
    %1460 = %1456.2;
    %1461 = floor_mod(%1457, %1458) /* ty=Tensor[(9, 270), float64] */;
    (%1459, %1460, %1461)
  };
  %1462(%var_7590) /* ty=(Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), float32], Tensor[(9, 270), float64]) */
}

def @func_2267() -> Tensor[(64), float32] {
  @func_2265() /* ty=Tensor[(64), float32] */
}

def @func_13757() -> Tensor[(64), float32] {
  %1464 = fn () -> Tensor[(64), float32] {
    %1463 = @func_5283() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
    %1463.0
  };
  %1464() /* ty=Tensor[(64), float32] */
}

def @func_17222() -> (Tensor[(3, 3, 13), float32],) {
  %1465 = @func_12937() /* ty=(Tensor[(3, 3, 13), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %1466 = %1465.0;
  (%1466,)
}

def @func_5715() -> (Tensor[(13, 16, 8), float32],) {
  %1469 = fn () -> (Tensor[(13, 16, 8), float32],) {
    %1467 = @func_5092() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
    %1468 = %1467.1;
    (%1468,)
  };
  %1469() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_11247() -> Tensor[(64), float32] {
  %1471 = fn () -> Tensor[(64), float32] {
    %1470 = @func_6888() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
    %1470.0
  };
  %1471() /* ty=Tensor[(64), float32] */
}

def @func_5673() -> (Tensor[(13, 16, 8), uint64],) {
  %1472 = @func_2693() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %1473 = %1472.0;
  (%1473,)
}

def @func_10326() -> Tensor[(13, 16, 8), float32] {
  @func_10324() /* ty=Tensor[(13, 16, 8), float32] */
}

def @func_7982() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  %1474 = @func_2284() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1475 = @func_6265() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1476 = @func_3020() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1477 = %1474.0;
  %1478 = @func_4920() /* ty=Tensor[(64), float32] */;
  %1479 = %1475.0;
  %1480 = %1476.0;
  (%1477, %1478, %1479, %1480)
}

def @func_10519(%var_10476: Tensor[(8, 15, 1), float64]) -> (Tensor[(8, 15, 1), float64], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) {
  %1481 = cast(%var_10476, dtype="float64") /* ty=Tensor[(8, 15, 1), float64] */;
  %1482 = @func_6074() /* ty=(Tensor[(64), float32], Tensor[(13, 16, 8), uint64]) */;
  %1483 = cosh(%1481) /* ty=Tensor[(8, 15, 1), float64] */;
  %1484 = @func_8680() /* ty=Tensor[(64), float32] */;
  %1485 = %1482.0;
  %1486 = @func_8926() /* ty=Tensor[(13, 16, 8), bool] */;
  (%1483, %1484, %1485, %1486)
}

def @func_4951() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, 15), bool], Tensor[(960), float32]) {
  %1493 = fn () -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, 15), bool], Tensor[(960), float32]) {
    %1487 = @func_1848() /* ty=(Tensor[(13, 16, 8), float32],) */;
    %1488 = cast(meta[relay.Constant][54] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %1489 = reshape(%1488, newshape=[8, 8, 15]) /* ty=Tensor[(8, 8, 15), float32] */;
    %1490 = @func_4513(%1489) /* ty=(Tensor[(8, 8, 15), bool],) */;
    %1491 = %1487.0;
    %1492 = %1490.0;
    (%1491, %1492, meta[relay.Constant][54] /* ty=Tensor[(960), float32] */)
  };
  %1493() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, 15), bool], Tensor[(960), float32]) */
}

def @func_13116() -> (Tensor[(13, 16, 8), float32],) {
  @func_13114() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @func_8915() -> (Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1494 = @func_8542() /* ty=(Tensor[(13, 16, 8), float32],) */;
  %1495 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1496 = @func_4055() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
  %1497 = %1494.0;
  %1498 = %1495.0;
  %1499 = %1496.0;
  (%1497, %1498, %1499)
}

def @func_7082() -> (Tensor[(13, 16, 8), bool], Tensor[(14, 15, 13), float64], Tensor[(13, 16, 8), uint64]) {
  %1500 = @func_2730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1501 = @func_4985() /* ty=(Tensor[(64), float32], Tensor[(14, 15, 13), float64], Tensor[(1, 2730), int32]) */;
  %1502 = %1501.1;
  %1503 = cast(%1502, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %1504 = rsqrt(%1503) /* ty=Tensor[(14, 15, 13), float64] */;
  %1505 = cast(%1504, dtype="float64") /* ty=Tensor[(14, 15, 13), float64] */;
  %1506 = @func_5673() /* ty=(Tensor[(13, 16, 8), uint64],) */;
  %1507 = %1500.0;
  %1508 = sinh(%1505) /* ty=Tensor[(14, 15, 13), float64] */;
  %1509 = %1506.0;
  (%1507, %1508, %1509)
}

def @func_2825() -> (Tensor[(13, 16, 8), bool],) {
  %1512 = fn () -> (Tensor[(13, 16, 8), bool],) {
    %1510 = @func_2492() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(78), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */;
    %1511 = %1510.5;
    (%1511,)
  };
  %1512() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_11777() -> (Tensor[(13, 16, 8), bool],) {
  %1514 = fn () -> (Tensor[(13, 16, 8), bool],) {
    %1513 = @func_11151() /* ty=Tensor[(13, 16, 8), bool] */;
    (%1513,)
  };
  %1514() /* ty=(Tensor[(13, 16, 8), bool],) */
}

def @func_15098() -> Tensor[(64), float32] {
  %1515 = @func_8275() /* ty=(Tensor[(64), float32],) */;
  %1515.0
}

def @func_3657(%var_3641: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), float32]) {
  %1516 = cast(%var_3641, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %1517 = @func_2960() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(13, 16, 8), bool]) */;
  %1518 = @func_1220() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) */;
  %1519 = sigmoid(%1516) /* ty=Tensor[(15, 3, 3), float32] */;
  %1520 = %1517.1;
  %1521 = %1518.3;
  (%1519, %1520, %1521)
}

def @func_2265() -> Tensor[(64), float32] {
  %1522 = @func_2154() /* ty=(Tensor[(64), float32],) */;
  %1522.0
}

def @func_1220() -> (Tensor[(13, 16, 8), float32], Tensor[(8, 8, ?), bool], Tensor[(64), float32], Tensor[(13, 16, 8), float32]) {
  %1523 = cast(meta[relay.Constant][55] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %1524 = reshape(%1523, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float32] */;
  %1525 = @func_558(%1524) /* ty=(Tensor[(8, 8, ?), bool],) */;
  %1526 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  %1527 = %1525.0;
  %1528 = @func_1113() /* ty=Tensor[(13, 16, 8), float32] */;
  (%1526, %1527, meta[relay.Constant][55] /* ty=Tensor[(64), float32] */, %1528)
}

def @func_7984() -> (Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) {
  @func_7982() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(64), float32], Tensor[(13, 16, 8), float32], Tensor[(13, 16, 8), bool]) */
}

def @func_8926() -> Tensor[(13, 16, 8), bool] {
  %1529 = @func_4713() /* ty=(Tensor[(13, 16, 8), bool], Tensor[(13, 16, 8), float32]) */;
  %1529.0
}

def @func_17382() -> Tensor[(13, 16, 8), bool] {
  %1530 = @func_7730() /* ty=(Tensor[(13, 16, 8), bool],) */;
  %1530.0
}

def @func_8071() -> Tensor[(13, 16, 8), bool] {
  @func_8069() /* ty=Tensor[(13, 16, 8), bool] */
}

def @func_18788() -> (Tensor[(13, 16, 8), float32],) {
  @func_18786() /* ty=(Tensor[(13, 16, 8), float32],) */
}

def @main(%var_18812: Tensor[(10, 12, 3), int8], %var_18813: Tensor[(10, 12, 3), int8], %var_18820: Tensor[(10, 12, 3), int8]) -> (Tensor[(10, 12, 3), int8], Tensor[(10, 12, 3), float64]) {
  %1531 = cast(%var_18813, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %1532 = shape_of(%var_18812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1533 = cast(%var_18812, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %1534 = dyn.reshape(%1531, %1532, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1535 = cast(%var_18820, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
  %1536 = shape_of(%var_18812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1537 = cast(%var_18812, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
  %1538 = dyn.reshape(%1535, %1536, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1539 = bitwise_and(%1533, %1534) /* ty=Tensor[(10, 12, 3), int8] */;
  %1540 = mod(%1537, %1538) /* ty=Tensor[(10, 12, 3), float64] */;
  (%1539, %1540)
}

def @func_11094() -> (Tensor[(13, 16, 8), float32], Tensor[(78), float32]) {
  @func_11092() /* ty=(Tensor[(13, 16, 8), float32], Tensor[(78), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen707/build/output.py:5799: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen707/build/output.py", line 5804, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(360) tvmgen_default_fused_reshape_bitwise_and_kernel0(signed char* __restrict__ T_bitwise_and, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_bitwise_and[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] & placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(360) tvmgen_default_fused_cast_cast_reshape_mod_kernel0(double* __restrict__ T_mod, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_mod[(((int)threadIdx.x))] = fmod(((double)placeholder[(((int)threadIdx.x))]), ((double)placeholder1[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

