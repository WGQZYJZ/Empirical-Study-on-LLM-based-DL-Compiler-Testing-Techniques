==========mod==========
#[version = "0.0.5"]
def @func_1895() -> (Tensor[(?, 10, 10), float32], Tensor[(32), float64]) {
  %0 = @func_1170() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) */;
  %1 = @func_1545() /* ty=(Tensor[(32), float64],) */;
  %2 = %0.1;
  %3 = %1.0;
  (%2, %3)
}

def @func_6548(%var_6543: Tensor[(8, 11, 3), uint32]) -> (Tensor[(8, 11, 3), uint32],) {
  %4 = cast(%var_6543, dtype="uint32") /* ty=Tensor[(8, 11, 3), uint32] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(8, 11, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 11, 3), uint32] */, dtype="uint32") /* ty=Tensor[(8, 11, 3), uint32] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %8 = bitwise_xor(%6, %7) /* ty=Tensor[(8, 11, 3), uint32] */;
  (%8,)
}

def @func_2109(%var_2097: Tensor[(1568), float64]) -> (Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) {
  %9 = @func_2052() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %10 = @func_1895() /* ty=(Tensor[(?, 10, 10), float32], Tensor[(32), float64]) */;
  %11 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %12 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(128), int32] */, dtype="int32") /* ty=Tensor[(128), int32] */;
  %14 = cast(%var_2097, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %15 = %10.1;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(32), float64] */;
  %17 = reshape(%12, newshape=[]) /* ty=int32 */;
  %18 = reshape(%13, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int32] */;
  %19 = reshape(%14, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %20 = reshape(%16, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %21 = @func_1442(%17, %18, %19, %20) /* ty=(Tensor[(8, 1, 16), bool], Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(32), float64]) */;
  %22 = cast(-4 /* ty=int32 */, dtype="float64") /* ty=float64 */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %24 = reshape(%22, newshape=[]) /* ty=float64 */;
  %25 = reshape(%23, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float64] */;
  %26 = @func_697(%24, %25) /* ty=(Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) */;
  %27 = %9.2;
  %28 = %11.3;
  %29 = @func_1815() /* ty=Tensor[(4, 4, 16), bool] */;
  %30 = %21.3;
  %31 = %26.0;
  (%27, %15, %28, %29, %30, -4 /* ty=int32 */, meta[relay.Constant][1] /* ty=Tensor[(128), int32] */, %var_2097, %31, meta[relay.Constant][2] /* ty=Tensor[(3360), float64] */)
}

def @func_4558(%var_4539: Tensor[(16, 1, 13), float32], %var_4540: Tensor[(16, 3, 13), float32]) -> (Tensor[(3, 2, 16), bool], Tensor[(96, 1), float32], Tensor[(16, 3, 13), int32], Tensor[(1, 2, 16), bool]) {
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(96, 1), float32] */, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %33 = reshape(%32, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float32] */;
  %34 = @func_3969(%33) /* ty=(Tensor[(3, 2, 16), bool],) */;
  %35 = cast(%var_4539, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %36 = cast(%var_4540, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
  %37 = power(%35, %36) /* ty=Tensor[(16, 3, 13), float32] */;
  %38 = cast(%37, dtype="int32") /* ty=Tensor[(16, 3, 13), int32] */;
  %39 = cast(%var_4539, dtype="int32") /* ty=Tensor[(16, 1, 13), int32] */;
  %40 = @func_3003() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %41 = %34.0;
  %42 = right_shift(%38, %39) /* ty=Tensor[(16, 3, 13), int32] */;
  %43 = %40.0;
  (%41, meta[relay.Constant][3] /* ty=Tensor[(96, 1), float32] */, %42, %43)
}

def @func_2147(%var_2130: Tensor[(1568), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8]) {
  %44 = cast(%var_2130, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %45 = reshape(%44, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %46 = @func_2109(%45) /* ty=(Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) */;
  %47 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %48 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %49 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %50 = %46.2;
  %51 = %47.0;
  %52 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
  (%48, %49, %50, %var_2130, %51, %52)
}

def @func_3051(%var_3041: Tensor[(2, 2, 14), float64]) -> (Tensor[(2, 2, 14), float32],) {
  %53 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %54 = cast(%var_3041, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = mod(%56, %57) /* ty=Tensor[(2, 2, 14), float32] */;
  (%58,)
}

def @func_4429(%var_4421: Tensor[(4, 4, 16), float64]) -> (Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), float32]) {
  %59 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %60 = %59.2;
  %61 = cast(%var_4421, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %65 = floor_mod(%63, %64) /* ty=Tensor[(4, 4, 16), float64] */;
  %66 = @func_4223() /* ty=Tensor[(4, 4, 16), float32] */;
  (%65, %66)
}

def @func_2686() -> (Tensor[(2, 2, 14), float64],) {
  %67 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  (%67,)
}

def @func_312() -> (Tensor[(4, 4, 16), int8],) {
  %68 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %69 = %68.0;
  (%69,)
}

def @func_5122(%var_5117: Tensor[(6, 7, 12), int64]) -> Tensor[(6, 7, 12), bool] {
  %70 = cast(9 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %71 = cast(%var_5117, dtype="bool") /* ty=Tensor[(6, 7, 12), bool] */;
  greater_equal(%70, %71) /* ty=Tensor[(6, 7, 12), bool] */
}

def @func_6684() -> (Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), int8], Tensor[(84), float32], Tensor[(32), float64]) {
  %72 = @func_4223() /* ty=Tensor[(4, 4, 16), float32] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %75 = reshape(%74, newshape=[2, 7, 6]) /* ty=Tensor[(2, 7, 6), float32] */;
  %76 = @func_5825(%75) /* ty=(Tensor[(2, 7, 6), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), int8]) */;
  %77 = @func_1545() /* ty=(Tensor[(32), float64],) */;
  %78 = log2(%73) /* ty=Tensor[(4, 4, 16), float32] */;
  %79 = %76.2;
  %80 = %77.0;
  (%78, %79, meta[relay.Constant][4] /* ty=Tensor[(84), float32] */, %80)
}

def @func_1915() -> (Tensor[(4, 4, 16), bool],) {
  %81 = @func_1815() /* ty=Tensor[(4, 4, 16), bool] */;
  (%81,)
}

def @func_4679(%var_4624: Tensor[(160), float32]) -> (Tensor[(1, 2, 16), bool], Tensor[(256), int8], Tensor[(160), float32], Tensor[(4, 4, 16), float32]) {
  %82 = cast(%var_4624, dtype="float32") /* ty=Tensor[(160), float32] */;
  %83 = reshape(%82, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), float32] */;
  %84 = @func_3570(%83) /* ty=(Tensor[(4, 5, 8), float32], Tensor[(4, 4, 16), bool], Tensor[(256), int8]) */;
  %85 = %84.2;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(256), float64] */;
  %87 = reshape(%86, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), float64] */;
  %88 = @func_4429(%87) /* ty=(Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), float32]) */;
  %89 = @func_2792() /* ty=Tensor[(1, 2, 16), bool] */;
  %90 = %88.1;
  (%89, %85, %var_4624, %90)
}

def @func_3798() -> (Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) {
  %91 = @func_1915() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %92 = @func_3003() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %93 = %92.0;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %95 = @func_2638() /* ty=Tensor[(4, 4, 16), bool] */;
  %96 = %91.0;
  %97 = acosh(%94) /* ty=Tensor[(1, 2, 16), float64] */;
  (%95, %96, %97)
}

def @func_7484(%var_7464: Tensor[(5, 15, 16), int32], %var_7465: Tensor[(5, 15, 16), int32]) -> (Tensor[(5, 15, 16), int32], Tensor[(10, 2, 16), bool]) {
  %98 = cast(%var_7465, dtype="int32") /* ty=Tensor[(5, 15, 16), int32] */;
  %99 = shape_of(%var_7464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%var_7464, dtype="int32") /* ty=Tensor[(5, 15, 16), int32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %102 = @func_7314() /* ty=(Tensor[(10, 2, 16), bool], Tensor[(4, 4, 16), int8]) */;
  %103 = maximum(%100, %101) /* ty=Tensor[(5, 15, 16), int32] */;
  %104 = %102.0;
  (%103, %104)
}

def @func_7581(%var_7534: Tensor[(1, 7, 2), float32], %var_7539: Tensor[(1568), float64]) -> (Tensor[(1, 7, 2), float32], Tensor[(14, 7, 16), float64], Tensor[(1568), float64], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), float32]) {
  %105 = cast(%var_7534, dtype="float32") /* ty=Tensor[(1, 7, 2), float32] */;
  %106 = cast(%var_7539, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %107 = reshape(%106, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %108 = @func_556(%107) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) */;
  %109 = @func_2686() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %110 = @func_5590() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %111 = exp(%105) /* ty=Tensor[(1, 7, 2), float32] */;
  %112 = %108.2;
  %113 = %109.0;
  %114 = %110.0;
  %115 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
  (%111, %112, %var_7539, %113, %114, %115)
}

def @func_3732(%var_3684: Tensor[(16, 2, 16), float64]) -> (Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) {
  %116 = @func_3395() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float64]) */;
  %117 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %120 = rsqrt(%119) /* ty=Tensor[(1, 2, 16), float64] */;
  %121 = cast(%120, dtype="int16") /* ty=Tensor[(1, 2, 16), int16] */;
  %122 = cast(%var_3684, dtype="int16") /* ty=Tensor[(16, 2, 16), int16] */;
  %123 = maximum(%121, %122) /* ty=Tensor[(16, 2, 16), int16] */;
  %124 = cast(%118, dtype="int8") /* ty=Tensor[(1, 2, 16), int8] */;
  %125 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%120, dtype="int8") /* ty=Tensor[(1, 2, 16), int8] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %128 = maximum(%126, %127) /* ty=Tensor[(?, 2, 16), int8] */;
  %129 = cast(%123, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %130 = cast(%128, dtype="float64") /* ty=Tensor[(?, 2, 16), float64] */;
  %131 = cast(%123, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %132 = %116.0;
  %133 = multiply(%129, %130) /* ty=Tensor[(16, 2, 16), float64] */;
  %134 = tan(%131) /* ty=Tensor[(16, 2, 16), float32] */;
  (%132, %133, %134)
}

def @func_7841(%var_7783: Tensor[(16, 7, 10), uint8], %var_7784: Tensor[(16, 7, 10), uint8], %var_7814: Tensor[(504), int64], %var_7828: Tensor[(8, 9, 7), bool]) -> (Tensor[(16, 7, 10), uint8], Tensor[(10, 2, 16), bool], Tensor[(504), int64], Tensor[(8, 9, 7), float32]) {
  %135 = cast(%var_7784, dtype="uint8") /* ty=Tensor[(16, 7, 10), uint8] */;
  %136 = shape_of(%var_7783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_7783, dtype="uint8") /* ty=Tensor[(16, 7, 10), uint8] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %139 = @func_7693() /* ty=(Tensor[(10, 2, 16), bool],) */;
  %140 = cast(%var_7814, dtype="int64") /* ty=Tensor[(504), int64] */;
  %141 = cast(%var_7814, dtype="int64") /* ty=Tensor[(504), int64] */;
  %142 = reshape(%140, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
  %143 = reshape(%141, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
  %144 = @func_4859(%142, %143) /* ty=(Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) */;
  %145 = %144.1;
  %146 = cast(%var_7828, dtype="float32") /* ty=Tensor[(8, 9, 7), float32] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="float32") /* ty=Tensor[(8, 9, 7), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %150 = bitwise_xor(%137, %138) /* ty=Tensor[(16, 7, 10), uint8] */;
  %151 = %139.0;
  %152 = mod(%148, %149) /* ty=Tensor[(8, 9, 7), float32] */;
  (%150, %151, %var_7814, %152)
}

def @func_3923(%var_3910: Tensor[(3, 10, 16), int16]) -> (Tensor[(3, 10, 16), int16],) {
  %153 = cast(%var_3910, dtype="int16") /* ty=Tensor[(3, 10, 16), int16] */;
  %154 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(3, 10, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 10, 16), int16] */, dtype="int16") /* ty=Tensor[(3, 10, 16), int16] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %157 = add(%155, %156) /* ty=Tensor[(3, 10, 16), int16] */;
  (%157,)
}

def @func_3504(%var_3488: float32) -> (Tensor[(4, 4, 2), bool], Tensor[(4, 4, 2), float32]) {
  %158 = cast(%var_3488, dtype="bool") /* ty=bool */;
  %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 4, 2), float32] */, dtype="bool") /* ty=Tensor[(4, 4, 2), bool] */;
  %160 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 2), float32] */;
  %161 = greater_equal(%158, %159) /* ty=Tensor[(4, 4, 2), bool] */;
  %162 = sin(%160) /* ty=Tensor[(4, 4, 2), float32] */;
  (%161, %162)
}

def @func_4595() -> Tensor[(10, 2, 16), bool] {
  %163 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %164 = %163.0;
  %165 = cast(%164, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
  %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 2, 16), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
  less_equal(%165, %166) /* ty=Tensor[(10, 2, 16), bool] */
}

def @func_7009() -> (Tensor[(1, 2, 16), bool],) {
  %167 = @func_3003() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %168 = %167.0;
  (%168,)
}

def @main() -> Tensor[(3, 2, 7), float64] {
  %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 7), float64] */;
  atanh(%169) /* ty=Tensor[(3, 2, 7), float64] */
}

def @func_4816(%var_4802: Tensor[(1568), float64], %var_4805: Tensor[(8, 4), float64]) -> (Tensor[(2, 2, 14), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(32), float64], Tensor[(8, 4), float64], Tensor[(1568), float64]) {
  %170 = @func_4149() /* ty=(Tensor[(2, 2, 14), float32],) */;
  %171 = cast(%var_4802, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %172 = reshape(%171, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %173 = @func_1680(%172) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64]) */;
  %174 = cast(%var_4805, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %175 = cast(%var_4805, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %176 = reshape(%174, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %177 = reshape(%175, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %178 = @func_4502(%176, %177) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) */;
  %179 = cast(%var_4805, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %180 = reshape(%179, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %181 = @func_794(%180) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) */;
  %182 = %170.0;
  %183 = %173.2;
  %184 = %178.2;
  %185 = %181.2;
  (%182, %183, %var_4802, %184, %var_4805, %185)
}

def @func_3003() -> (Tensor[(1, 2, 16), bool],) {
  %186 = @func_2792() /* ty=Tensor[(1, 2, 16), bool] */;
  (%186,)
}

def @func_1819() -> (Tensor[(4, 4, 16), int8],) {
  %187 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  (%187,)
}

def @func_5492() -> Tensor[(4, 4, 16), int16] {
  %188 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %189 = %188.1;
  %190 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 4, 16), float32] */, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%192, %193) /* ty=Tensor[(4, 4, 16), int16] */
}

def @func_5516() -> (Tensor[(32), float64], Tensor[(10, 2, 16), bool]) {
  %194 = @func_3120() /* ty=(Tensor[(32), float64],) */;
  %195 = %194.0;
  %196 = @func_4595() /* ty=Tensor[(10, 2, 16), bool] */;
  (%195, %196)
}

def @func_1792() -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  %197 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %198 = %197.0;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %200 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %201 = asinh(%199) /* ty=Tensor[(1, 2, 16), float64] */;
  %202 = %200.0;
  (%201, %202)
}

def @func_1545() -> (Tensor[(32), float64],) {
  %203 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %204 = %203.0;
  (%204,)
}

def @func_5590() -> (Tensor[(4, 4, 16), int8],) {
  %205 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
  (%205,)
}

def @func_2284(%var_2267: Tensor[(10, 15, 11), float64]) -> (Tensor[(10, 15, 11), float64], Tensor[(2, 2, 14), float64]) {
  %206 = cast(%var_2267, dtype="float64") /* ty=Tensor[(10, 15, 11), float64] */;
  %207 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %208 = atanh(%206) /* ty=Tensor[(10, 15, 11), float64] */;
  %209 = %207.0;
  (%208, %209)
}

def @func_513() -> (Tensor[(4, 4, 16), bool],) {
  %210 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %213 = sinh(%212) /* ty=Tensor[(4, 4, 16), float32] */;
  %214 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %218 = logical_and(%216, %217) /* ty=Tensor[(4, 4, 16), bool] */;
  (%218,)
}

def @func_7165(%var_7160: Tensor[(504), int64]) -> (Tensor[(2, 2, 14), float64], Tensor[(8, 9, 7), float64], Tensor[(504), int64]) {
  %219 = @func_2686() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %220 = cast(%var_7160, dtype="int64") /* ty=Tensor[(504), int64] */;
  %221 = cast(%var_7160, dtype="int64") /* ty=Tensor[(504), int64] */;
  %222 = reshape(%220, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
  %223 = reshape(%221, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
  %224 = @func_4859(%222, %223) /* ty=(Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) */;
  %225 = %219.0;
  %226 = %224.0;
  (%225, %226, %var_7160)
}

def @func_6124() -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  %227 = @func_3798() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) */;
  %228 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %229 = %227.2;
  %230 = %228.0;
  (%229, %230)
}

def @func_7363() -> (Tensor[(1, 2, 16), float64],) {
  %231 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %233 = cos(%232) /* ty=Tensor[(1, 2, 16), float64] */;
  (%233,)
}

def @func_3033(%var_3028: Tensor[(4, 4, 16), int8]) -> (Tensor[(32), float64], Tensor[(4, 4, 16), bool]) {
  %234 = @func_1545() /* ty=(Tensor[(32), float64],) */;
  %235 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
  %236 = cast(%var_3028, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = %234.0;
  %241 = greater(%238, %239) /* ty=Tensor[(4, 4, 16), bool] */;
  (%240, %241)
}

def @func_742() -> Tensor[(4, 4, 16), int8] {
  @func_720() /* ty=Tensor[(4, 4, 16), int8] */
}

def @func_556(%var_554: Tensor[(1568), float64]) -> (Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) {
  %242 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %243 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %244 = cast(%var_554, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %245 = %242.0;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(32), float64] */;
  %247 = reshape(%244, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %248 = reshape(%246, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %249 = @func_256(%247, %248) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
  %250 = %243.0;
  %251 = %249.0;
  (%245, %250, %251, %var_554)
}

def @func_6978() -> (Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(6, 7, 12), bool], Tensor[(36, 14), int64]) {
  %252 = cast(meta[relay.Constant][11] /* ty=Tensor[(36, 14), int64] */, dtype="int64") /* ty=Tensor[(36, 14), int64] */;
  %253 = reshape(%252, newshape=[6, 7, 12]) /* ty=Tensor[(6, 7, 12), int64] */;
  %254 = @func_3358() /* ty=Tensor[(32), float64] */;
  %255 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
  %256 = @func_5122(%253) /* ty=Tensor[(6, 7, 12), bool] */;
  (%254, %255, %256, meta[relay.Constant][11] /* ty=Tensor[(36, 14), int64] */)
}

def @func_2924() -> (Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) {
  %257 = @func_2792() /* ty=Tensor[(1, 2, 16), bool] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %259 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
  %260 = acos(%258) /* ty=Tensor[(1, 2, 16), float32] */;
  %261 = @func_1815() /* ty=Tensor[(4, 4, 16), bool] */;
  %262 = %259.0;
  (%260, %261, %262)
}

def @func_8364(%var_8332: Tensor[(8, 2, 16), float32], %var_8355: Tensor[(8, 2, 16), float32]) -> (Tensor[(8, 2, 16), int16], Tensor[(8, 2, 16), float32]) {
  %263 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="int16") /* ty=Tensor[(1, 2, 16), int16] */;
  %266 = cast(%var_8332, dtype="int16") /* ty=Tensor[(8, 2, 16), int16] */;
  %267 = cast(%var_8355, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %268 = shape_of(%var_8332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%var_8332, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %271 = maximum(%265, %266) /* ty=Tensor[(8, 2, 16), int16] */;
  %272 = power(%269, %270) /* ty=Tensor[(8, 2, 16), float32] */;
  (%271, %272)
}

def @func_3395() -> (Tensor[(32), float64], Tensor[(4, 4, 16), float64]) {
  %273 = @func_2259() /* ty=(Tensor[(32), float64],) */;
  %274 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %275 = %274.1;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  %277 = %273.0;
  %278 = acos(%276) /* ty=Tensor[(4, 4, 16), float64] */;
  (%277, %278)
}

def @func_5807() -> Tensor[(1, 2, 16), float32] {
  %279 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %279.0
}

def @func_989() -> Tensor[(4, 4, 16), float64] {
  %280 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  exp(%282) /* ty=Tensor[(4, 4, 16), float64] */
}

def @func_2702() -> (Tensor[(2, 2, 14), float64],) {
  %283 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %284 = %283.1;
  (%284,)
}

def @func_794(%var_791: Tensor[(32), float64]) -> (Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) {
  %285 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %287 = asinh(%286) /* ty=Tensor[(4, 4, 16), float32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = cast(meta[relay.Constant][12] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %293 = cast(%var_791, dtype="float64") /* ty=Tensor[(32), float64] */;
  %294 = reshape(%292, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %295 = reshape(%293, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %296 = @func_256(%294, %295) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
  %297 = logical_or(%290, %291) /* ty=Tensor[(4, 4, 16), bool] */;
  %298 = %296.1;
  (%297, %298, meta[relay.Constant][12] /* ty=Tensor[(1568), float64] */, %var_791)
}

def @func_1442(%var_1404: int32, %var_1405: Tensor[(8, 1, 16), int32], %var_1423: Tensor[(1568), float64], %var_1424: Tensor[(32), float64]) -> (Tensor[(8, 1, 16), bool], Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(32), float64]) {
  %299 = cast(%var_1404, dtype="bool") /* ty=bool */;
  %300 = cast(%var_1405, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
  %301 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %302 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %303 = cast(%var_1424, dtype="float64") /* ty=Tensor[(32), float64] */;
  %304 = reshape(%302, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %305 = reshape(%303, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %306 = @func_256(%304, %305) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
  %307 = equal(%299, %300) /* ty=Tensor[(8, 1, 16), bool] */;
  %308 = %301.3;
  %309 = %306.2;
  (%307, %308, %309, %var_1423, %var_1424)
}

def @func_1058(%var_1013: Tensor[(1568), float64], %var_1014: Tensor[(16, 2), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(16, 2), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64], float64, Tensor[(840, 4), float64], Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), bool]) {
  %310 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %311 = cast(%var_1013, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %312 = cast(%var_1014, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  %313 = reshape(%311, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %314 = reshape(%312, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %315 = @func_256(%313, %314) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
  %316 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %317 = cast(-5.46812f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %318 = cast(meta[relay.Constant][13] /* ty=Tensor[(840, 4), float64] */, dtype="float64") /* ty=Tensor[(840, 4), float64] */;
  %319 = reshape(%317, newshape=[]) /* ty=float64 */;
  %320 = reshape(%318, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float64] */;
  %321 = @func_697(%319, %320) /* ty=(Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) */;
  %322 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %323 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %324 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %325 = %310.3;
  %326 = %315.2;
  %327 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %328 = %316.0;
  %329 = %321.2;
  %330 = %322.0;
  %331 = %323.3;
  %332 = %324.0;
  (%325, %326, %var_1013, %var_1014, %327, %328, %329, -5.46812f64 /* ty=float64 */, meta[relay.Constant][13] /* ty=Tensor[(840, 4), float64] */, %330, %331, %332)
}

def @func_3120() -> (Tensor[(32), float64],) {
  %333 = @func_2259() /* ty=(Tensor[(32), float64],) */;
  %334 = %333.0;
  (%334,)
}

def @func_4149() -> (Tensor[(2, 2, 14), float32],) {
  %335 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %338 = tan(%337) /* ty=Tensor[(2, 2, 14), float32] */;
  (%338,)
}

def @func_1815() -> Tensor[(4, 4, 16), bool] {
  @func_575() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_720() -> Tensor[(4, 4, 16), int8] {
  %339 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %339.0
}

def @func_4062() -> (Tensor[(32), float64],) {
  %340 = @func_3120() /* ty=(Tensor[(32), float64],) */;
  %341 = %340.0;
  (%341,)
}

def @func_7314() -> (Tensor[(10, 2, 16), bool], Tensor[(4, 4, 16), int8]) {
  %342 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %343 = @func_4595() /* ty=Tensor[(10, 2, 16), bool] */;
  %344 = %342.1;
  (%343, %344)
}

def @func_8186(%var_8142: Tensor[(3, 15, 5), float64], %var_8182: Tensor[(512), float64]) -> (Tensor[(3, 15, 5), bool], Tensor[(4, 4, 16), float64], Tensor[(160), float32], Tensor[(160), float32], Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 16), float32]) {
  %345 = cast(%var_8142, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %346 = rsqrt(%345) /* ty=Tensor[(3, 15, 5), float64] */;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %348 = asinh(%347) /* ty=Tensor[(3, 15, 5), float64] */;
  %349 = cast(%346, dtype="bool") /* ty=Tensor[(3, 15, 5), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(3, 15, 5), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %353 = cast(meta[relay.Constant][14] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %354 = reshape(%353, newshape=[160]) /* ty=Tensor[(160), float32] */;
  %355 = @func_4679(%354) /* ty=(Tensor[(1, 2, 16), bool], Tensor[(256), int8], Tensor[(160), float32], Tensor[(4, 4, 16), float32]) */;
  %356 = @func_1545() /* ty=(Tensor[(32), float64],) */;
  %357 = cast(%var_8182, dtype="float64") /* ty=Tensor[(512), float64] */;
  %358 = reshape(%357, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
  %359 = @func_3732(%358) /* ty=(Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) */;
  %360 = equal(%351, %352) /* ty=Tensor[(3, 15, 5), bool] */;
  %361 = @func_5928() /* ty=Tensor[(4, 4, 16), float64] */;
  %362 = %355.2;
  %363 = %356.0;
  %364 = %359.1;
  %365 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
  (%360, %361, %362, meta[relay.Constant][14] /* ty=Tensor[(160), float32] */, %363, %364, %var_8182, %365)
}

def @func_8073(%var_8053: Tensor[(10, 2, 16), bool], %var_8059: Tensor[(1200), int32]) -> (Tensor[(32), float64], Tensor[(10, 2, 16), int64], Tensor[(10, 2, 16), bool], Tensor[(1200), int32]) {
  %366 = @func_4062() /* ty=(Tensor[(32), float64],) */;
  %367 = @func_6791() /* ty=Tensor[(10, 2, 16), bool] */;
  %368 = cast(%var_8053, dtype="int64") /* ty=Tensor[(10, 2, 16), int64] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="int64") /* ty=Tensor[(10, 2, 16), int64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %372 = cast(%var_8059, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %373 = cast(%var_8059, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %374 = reshape(%372, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), int32] */;
  %375 = reshape(%373, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), int32] */;
  %376 = @func_7484(%374, %375) /* ty=(Tensor[(5, 15, 16), int32], Tensor[(10, 2, 16), bool]) */;
  %377 = %366.0;
  %378 = minimum(%370, %371) /* ty=Tensor[(10, 2, 16), int64] */;
  %379 = %376.1;
  (%377, %378, %379, %var_8059)
}

def @func_3969(%var_3953: Tensor[(3, 2, 16), float32]) -> (Tensor[(3, 2, 16), bool],) {
  %380 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
  %383 = cast(%var_3953, dtype="bool") /* ty=Tensor[(3, 2, 16), bool] */;
  %384 = logical_or(%382, %383) /* ty=Tensor[(3, 2, 16), bool] */;
  (%384,)
}

def @func_8284() -> Tensor[(4, 4, 16), bool] {
  %385 = @func_3798() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) */;
  %385.0
}

def @func_6615(%var_6611: Tensor[(2, 2, 14), float64]) -> (Tensor[(2, 2, 14), bool], Tensor[(2, 2, 14), float32]) {
  %386 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %387 = %386.0;
  %388 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 2, 14), float64] */, dtype="bool") /* ty=Tensor[(2, 2, 14), bool] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="bool") /* ty=Tensor[(2, 2, 14), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = cast(%var_6611, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %393 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(2, 2, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 2, 14), float64] */, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %396 = not_equal(%390, %391) /* ty=Tensor[(2, 2, 14), bool] */;
  %397 = floor_divide(%394, %395) /* ty=Tensor[(2, 2, 14), float32] */;
  (%396, %397)
}

def @func_1466() -> (Tensor[(2, 2, 14), float64],) {
  %398 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %399 = %398.0;
  (%399,)
}

def @func_5386(%var_5370: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), int16], Tensor[(4, 4, 16), bool]) {
  %400 = @func_1170() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) */;
  %401 = %400.0;
  %402 = cast(%var_5370, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %406 = cast(%401, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %407 = reshape(%406, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %408 = @func_3033(%407) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), bool]) */;
  %409 = multiply(%404, %405) /* ty=Tensor[(4, 4, 16), int16] */;
  %410 = %408.1;
  (%409, %410)
}

def @func_322() -> Tensor[(2, 2, 14), float64] {
  %411 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 2, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
  log10(%411) /* ty=Tensor[(2, 2, 14), float64] */
}

def @func_3483(%var_3456: uint8) -> (Tensor[(4, 4, 16), bool], Tensor[(13, 16, 11), float32]) {
  %412 = cast(%var_3456, dtype="uint8") /* ty=uint8 */;
  %413 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 16, 11), uint8] */, dtype="uint8") /* ty=Tensor[(13, 16, 11), uint8] */;
  %414 = bitwise_and(%412, %413) /* ty=Tensor[(13, 16, 11), uint8] */;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(13, 16, 11), float32] */;
  %416 = @func_1843() /* ty=Tensor[(4, 4, 16), bool] */;
  %417 = rsqrt(%415) /* ty=Tensor[(13, 16, 11), float32] */;
  (%416, %417)
}

def @func_2792() -> Tensor[(1, 2, 16), bool] {
  %418 = @func_1483() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(32), float64]) */;
  %418.0
}

def @func_697(%var_661: float64, %var_662: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) {
  %419 = cast(%var_661, dtype="bool") /* ty=bool */;
  %420 = cast(%var_662, dtype="bool") /* ty=Tensor[(16, 15, 14), bool] */;
  %421 = less(%419, %420) /* ty=Tensor[(16, 15, 14), bool] */;
  %422 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 15, 14), bool] */, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %426 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %427 = cast(%421, dtype="int64") /* ty=Tensor[(16, 15, 14), int64] */;
  %428 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(16, 15, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 15, 14), bool] */, dtype="int64") /* ty=Tensor[(16, 15, 14), int64] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %431 = minimum(%424, %425) /* ty=Tensor[(16, 15, 14), int32] */;
  %432 = %426.0;
  %433 = logical_xor(%429, %430) /* ty=Tensor[(16, 15, 14), int64] */;
  (%431, %432, %433)
}

def @func_5772(%var_5760: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), float32],) {
  %434 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %435 = %434.0;
  %436 = cast(%var_5760, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %440 = divide(%438, %439) /* ty=Tensor[(4, 4, 16), float32] */;
  (%440,)
}

def @func_7693() -> (Tensor[(10, 2, 16), bool],) {
  %441 = @func_4595() /* ty=Tensor[(10, 2, 16), bool] */;
  (%441,)
}

def @func_5656() -> (Tensor[(4, 4, 16), float64], Tensor[(32), float64], Tensor[(4, 4, 16), bool], uint8, Tensor[(4, 4, 16), bool]) {
  %442 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %443 = %442.0;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  %445 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %446 = reshape(%445, newshape=[]) /* ty=uint8 */;
  %447 = @func_3483(%446) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(13, 16, 11), float32]) */;
  %448 = atanh(%444) /* ty=Tensor[(4, 4, 16), float64] */;
  %449 = @func_3358() /* ty=Tensor[(32), float64] */;
  %450 = %447.0;
  %451 = @func_2638() /* ty=Tensor[(4, 4, 16), bool] */;
  (%448, %449, %450, meta[relay.Constant][19] /* ty=uint8 */, %451)
}

def @func_1939(%var_1917: Tensor[(9, 15, 14), float32]) -> (Tensor[(9, 15, 14), float32], Tensor[(9, 15, 14), float32]) {
  %452 = cast(%var_1917, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %453 = cast(%var_1917, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %454 = atanh(%452) /* ty=Tensor[(9, 15, 14), float32] */;
  %455 = asin(%453) /* ty=Tensor[(9, 15, 14), float32] */;
  (%454, %455)
}

def @func_3620() -> (Tensor[(4, 4, 16), int8],) {
  %456 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %457 = %456.0;
  (%457,)
}

def @func_5018(%var_5011: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(4, 4, 16), float32]) {
  %458 = @func_1895() /* ty=(Tensor[(?, 10, 10), float32], Tensor[(32), float64]) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(?, 10, 10), float32] */;
  %461 = cast(%var_5011, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %462 = maximum(%460, %461) /* ty=Tensor[(9, 10, 10), float32] */;
  %463 = @func_4223() /* ty=Tensor[(4, 4, 16), float32] */;
  (%462, %463)
}

def @func_7951(%var_7904: Tensor[(1568), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(32), float64], Tensor[(1568), float32]) {
  %464 = cast(meta[relay.Constant][20] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %465 = reshape(%464, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %466 = @func_794(%465) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) */;
  %467 = %466.2;
  %468 = cast(%var_7904, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(1), int32] */;
  %470 = cast(%467, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?), float64] */;
  %472 = floor_divide(%470, %471) /* ty=Tensor[(1568), float64] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %474 = sin(%473) /* ty=Tensor[(1568), float32] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %476 = asin(%475) /* ty=Tensor[(1568), float64] */;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %478 = shape_of(%474, dtype="int32") /* ty=Tensor[(1), int32] */;
  %479 = cast(%474, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?), float32] */;
  %481 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %482 = power(%479, %480) /* ty=Tensor[(1568), float32] */;
  (%481, meta[relay.Constant][20] /* ty=Tensor[(32), float64] */, %482)
}

def @func_4223() -> Tensor[(4, 4, 16), float32] {
  %483 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %483.1
}

def @func_6340() -> (Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(32), float64], Tensor[(3, 10, 16), int16], Tensor[(480), int16]) {
  %484 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %485 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %486 = reshape(%484, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %487 = reshape(%485, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %488 = @func_4502(%486, %487) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) */;
  %489 = cast(meta[relay.Constant][22] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %490 = reshape(%489, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), int16] */;
  %491 = @func_3923(%490) /* ty=(Tensor[(3, 10, 16), int16],) */;
  %492 = @func_5429() /* ty=Tensor[(4, 4, 16), bool] */;
  %493 = %488.2;
  %494 = %491.0;
  (%492, %493, meta[relay.Constant][21] /* ty=Tensor[(32), float64] */, %494, meta[relay.Constant][22] /* ty=Tensor[(480), int16] */)
}

def @func_7761(%var_7734: Tensor[(1568), float64]) -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(4, 4, 16), float64]) {
  %495 = @func_5033() /* ty=(Tensor[(1, 2, 16), float64],) */;
  %496 = @func_5590() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %497 = cast(%var_7734, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %498 = reshape(%497, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %499 = @func_556(%498) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) */;
  %500 = %499.1;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  %502 = %495.0;
  %503 = %496.0;
  %504 = log10(%501) /* ty=Tensor[(4, 4, 16), float64] */;
  (%502, %503, %var_7734, %504)
}

def @func_7672(%var_7634: int16) -> (Tensor[(1, 2, 10), float64], Tensor[(4, 4, 16), int64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 16), bool]) {
  %505 = cast(%var_7634, dtype="bool") /* ty=bool */;
  %506 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 2, 10), int16] */, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
  %507 = greater_equal(%505, %506) /* ty=Tensor[(1, 2, 10), bool] */;
  %508 = cast(%var_7634, dtype="float64") /* ty=float64 */;
  %509 = cast(%507, dtype="float64") /* ty=Tensor[(1, 2, 10), float64] */;
  %510 = @func_7088() /* ty=(Tensor[(4, 4, 16), int64], Tensor[(2, 2, 14), float32], Tensor[(56, 1), float64]) */;
  %511 = cast(meta[relay.Constant][24] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %512 = reshape(%511, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
  %513 = @func_3732(%512) /* ty=(Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) */;
  %514 = cast(%507, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
  %515 = mod(%508, %509) /* ty=Tensor[(1, 2, 10), float64] */;
  %516 = %510.0;
  %517 = %513.1;
  %518 = log2(%514) /* ty=Tensor[(1, 2, 10), float32] */;
  %519 = @func_4917() /* ty=Tensor[(1, 2, 16), bool] */;
  (%515, %516, %517, meta[relay.Constant][24] /* ty=Tensor[(512), float64] */, %518, %519)
}

def @func_7624(%var_7595: Tensor[(12, 6, 11), float64]) -> (Tensor[(12, 6, 11), float64], Tensor[(4, 4, 16), float64], Tensor[(12, 6, 11), float32]) {
  %520 = cast(%var_7595, dtype="float64") /* ty=Tensor[(12, 6, 11), float64] */;
  %521 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
  %522 = cast(%var_7595, dtype="float32") /* ty=Tensor[(12, 6, 11), float32] */;
  %523 = log2(%520) /* ty=Tensor[(12, 6, 11), float64] */;
  %524 = %521.0;
  %525 = log(%522) /* ty=Tensor[(12, 6, 11), float32] */;
  (%523, %524, %525)
}

def @func_8138() -> (Tensor[(2, 2, 14), float64],) {
  %526 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %527 = %526.0;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
  %529 = sqrt(%528) /* ty=Tensor[(2, 2, 14), float64] */;
  (%529,)
}

def @func_6791() -> Tensor[(10, 2, 16), bool] {
  %530 = @func_5516() /* ty=(Tensor[(32), float64], Tensor[(10, 2, 16), bool]) */;
  %530.1
}

def @func_6448() -> Tensor[(4, 4, 16), float64] {
  %531 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
  %531.0
}

def @func_3897(%var_3825: Tensor[(12, 10, 13), float64], %var_3879: Tensor[(2, 2, 14), float64], %var_3895: Tensor[(1568), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64]) {
  %532 = cast(%var_3825, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %533 = sigmoid(%532) /* ty=Tensor[(12, 10, 13), float64] */;
  %534 = cast(%533, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %535 = atanh(%534) /* ty=Tensor[(12, 10, 13), float64] */;
  %536 = cast(%533, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %540 = @func_2702() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %541 = %540.0;
  %542 = cast(%var_3879, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %546 = cast(%var_3895, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %547 = reshape(%546, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %548 = @func_2109(%547) /* ty=(Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) */;
  %549 = logical_or(%538, %539) /* ty=Tensor[(12, 10, 13), bool] */;
  %550 = add(%544, %545) /* ty=Tensor[(2, 2, 14), float64] */;
  %551 = %548.2;
  (%549, %550, %551, %var_3895)
}

def @func_7134() -> (Tensor[(15, 5, 16), int32],) {
  %552 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %553 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 5, 16), int32] */, dtype="int32") /* ty=Tensor[(15, 5, 16), int32] */;
  %554 = left_shift(%552, %553) /* ty=Tensor[(15, 5, 16), int32] */;
  (%554,)
}

def @func_8400() -> (Tensor[(84), float32],) {
  %555 = @func_6684() /* ty=(Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), int8], Tensor[(84), float32], Tensor[(32), float64]) */;
  %556 = %555.2;
  (%556,)
}

def @func_3358() -> Tensor[(32), float64] {
  %557 = @func_2259() /* ty=(Tensor[(32), float64],) */;
  %557.0
}

def @func_6002() -> Tensor[(1, 2, 16), bool] {
  @func_4917() /* ty=Tensor[(1, 2, 16), bool] */
}

def @func_1503() -> Tensor[(2, 2, 14), float64] {
  %558 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %558.0
}

def @func_3611(%var_3597: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32]) {
  %559 = cast(%var_3597, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %560 = cast(%var_3597, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %561 = atanh(%559) /* ty=Tensor[(15, 5, 9), float64] */;
  %562 = sigmoid(%560) /* ty=Tensor[(15, 5, 9), float32] */;
  (%561, %562)
}

def @func_3324() -> (Tensor[(32), float64],) {
  %563 = @func_1483() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(32), float64]) */;
  %564 = %563.1;
  (%564,)
}

def @func_5928() -> Tensor[(4, 4, 16), float64] {
  %565 = @func_5656() /* ty=(Tensor[(4, 4, 16), float64], Tensor[(32), float64], Tensor[(4, 4, 16), bool], uint8, Tensor[(4, 4, 16), bool]) */;
  %565.0
}

def @func_1663(%var_1655: Tensor[(9, 15, 2), float32]) -> Tensor[(9, 15, 2), float32] {
  %566 = cast(%var_1655, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  atan(%566) /* ty=Tensor[(9, 15, 2), float32] */
}

def @func_4280(%var_4251: Tensor[(3, 13, 2), float32], %var_4252: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), float32], Tensor[(32), float64]) {
  %567 = cast(%var_4252, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %568 = shape_of(%var_4251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%var_4251, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %571 = @func_3120() /* ty=(Tensor[(32), float64],) */;
  %572 = floor_divide(%569, %570) /* ty=Tensor[(3, 13, 2), float32] */;
  %573 = %571.0;
  (%572, %573)
}

def @func_6864() -> Tensor[(32), float64] {
  @func_3936() /* ty=Tensor[(32), float64] */
}

def @func_5147() -> Tensor[(4, 4, 16), bool] {
  @func_1843() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_4705() -> (Tensor[(2, 2, 14), float64], Tensor[(?, 10, 10), float32]) {
  %574 = @func_2702() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %575 = @func_1170() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) */;
  %576 = %574.0;
  %577 = %575.1;
  (%576, %577)
}

def @func_284() -> (Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) {
  %578 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %579 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %582 = cast(meta[relay.Constant][28] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %583 = reshape(%582, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), float64] */;
  %584 = @func_57(%583) /* ty=(Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) */;
  %585 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 4, 16), int8] */, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %586 = maximum(%580, %581) /* ty=Tensor[(4, 4, 16), int8] */;
  %587 = %584.1;
  %588 = acosh(%585) /* ty=Tensor[(4, 4, 16), float32] */;
  (%586, %587, meta[relay.Constant][28] /* ty=Tensor[(32), float64] */, %588)
}

def @func_7333() -> (Tensor[(32), float64],) {
  %589 = @func_3936() /* ty=Tensor[(32), float64] */;
  (%589,)
}

def @func_1222() -> (Tensor[(2, 2, 14), float64],) {
  %590 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %591 = %590.1;
  (%591,)
}

def @func_3262() -> (Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), int8]) {
  %592 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %593 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
  %594 = %592.0;
  %595 = %593.0;
  %596 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  (%594, %595, %596)
}

def @func_8009() -> (Tensor[(1, 2, 16), float32], Tensor[(32), float64], Tensor[(10, 2, 16), float64]) {
  %597 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %598 = @func_6791() /* ty=Tensor[(10, 2, 16), bool] */;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %600 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
  %601 = %597.0;
  %602 = sqrt(%599) /* ty=Tensor[(10, 2, 16), float64] */;
  (%600, %601, %602)
}

def @func_4502(%var_4479: Tensor[(32), float64], %var_4481: Tensor[(32), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) {
  %603 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %604 = cast(%var_4479, dtype="float64") /* ty=Tensor[(32), float64] */;
  %605 = reshape(%604, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %606 = @func_794(%605) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) */;
  %607 = %606.3;
  %608 = cast(%var_4481, dtype="bool") /* ty=Tensor[(32), bool] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(1), int32] */;
  %610 = cast(%607, dtype="bool") /* ty=Tensor[(32), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?), bool] */;
  %612 = cast(%var_4479, dtype="float64") /* ty=Tensor[(32), float64] */;
  %613 = %603.0;
  %614 = greater_equal(%610, %611) /* ty=Tensor[(32), bool] */;
  %615 = cos(%612) /* ty=Tensor[(32), float64] */;
  (%613, %614, %615)
}

def @func_2638() -> Tensor[(4, 4, 16), bool] {
  %616 = @func_1915() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %616.0
}

def @func_2458(%var_2415: Tensor[(256), int8]) -> (Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(256), int8], Tensor[(16, 15, 14), int32], Tensor[(1568), float64]) {
  %617 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %618 = cast(%var_2415, dtype="int8") /* ty=Tensor[(256), int8] */;
  %619 = reshape(%618, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %620 = @func_2000(%619) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) */;
  %621 = cast(meta[relay.Constant][29] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %622 = reshape(%621, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %623 = @func_2109(%622) /* ty=(Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) */;
  %624 = %617.0;
  %625 = %620.1;
  %626 = %623.8;
  (%624, %625, %var_2415, %626, meta[relay.Constant][29] /* ty=Tensor[(1568), float64] */)
}

def @func_4917() -> Tensor[(1, 2, 16), bool] {
  %627 = @func_1483() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(32), float64]) */;
  %627.0
}

def @func_4859(%var_4830: Tensor[(8, 9, 7), int64], %var_4831: Tensor[(8, 9, 7), int64]) -> (Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) {
  %628 = cast(%var_4830, dtype="float64") /* ty=Tensor[(8, 9, 7), float64] */;
  %629 = cast(%var_4831, dtype="int64") /* ty=Tensor[(8, 9, 7), int64] */;
  %630 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_4830, dtype="int64") /* ty=Tensor[(8, 9, 7), int64] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %633 = minimum(%631, %632) /* ty=Tensor[(8, 9, 7), int64] */;
  %634 = cast(%var_4830, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = asinh(%628) /* ty=Tensor[(8, 9, 7), float64] */;
  %639 = greater(%636, %637) /* ty=Tensor[(8, 9, 7), bool] */;
  (%638, %639)
}

def @func_4317() -> (Tensor[(2, 2, 14), float32],) {
  %640 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %641 = %640.0;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %643 = log2(%642) /* ty=Tensor[(2, 2, 14), float32] */;
  (%643,)
}

def @func_1611() -> (Tensor[(1, 2, 16), bool],) {
  %644 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %645 = %644.1;
  (%645,)
}

def @func_575() -> Tensor[(4, 4, 16), bool] {
  %646 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %646.0
}

def @func_7088() -> (Tensor[(4, 4, 16), int64], Tensor[(2, 2, 14), float32], Tensor[(56, 1), float64]) {
  %647 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %648 = %647.1;
  %649 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int64") /* ty=Tensor[(4, 4, 16), int64] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="int64") /* ty=Tensor[(4, 4, 16), int64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %653 = cast(meta[relay.Constant][31] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
  %654 = reshape(%653, newshape=[2, 2, 14]) /* ty=Tensor[(2, 2, 14), float64] */;
  %655 = @func_3051(%654) /* ty=(Tensor[(2, 2, 14), float32],) */;
  %656 = right_shift(%651, %652) /* ty=Tensor[(4, 4, 16), int64] */;
  %657 = %655.0;
  (%656, %657, meta[relay.Constant][31] /* ty=Tensor[(56, 1), float64] */)
}

def @func_5429() -> Tensor[(4, 4, 16), bool] {
  %658 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %658.1
}

def @func_5825(%var_5813: Tensor[(2, 7, 6), float32]) -> (Tensor[(2, 7, 6), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), int8]) {
  %659 = cast(%var_5813, dtype="float32") /* ty=Tensor[(2, 7, 6), float32] */;
  %660 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %661 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %662 = sigmoid(%659) /* ty=Tensor[(2, 7, 6), float32] */;
  %663 = %660.0;
  %664 = %661.1;
  (%662, %663, %664)
}

def @func_256(%var_235: Tensor[(14, 7, 16), float64], %var_239: Tensor[(32), float64]) -> (Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) {
  %665 = cast(%var_235, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
  %666 = cast(%var_239, dtype="float64") /* ty=Tensor[(32), float64] */;
  %667 = reshape(%666, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), float64] */;
  %668 = @func_57(%667) /* ty=(Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) */;
  %669 = sin(%665) /* ty=Tensor[(14, 7, 16), float64] */;
  %670 = %668.0;
  (%669, %670, %var_239)
}

def @func_5332() -> (Tensor[(2, 2, 14), float64],) {
  %671 = @func_2702() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %672 = %671.0;
  (%672,)
}

def @func_1170() -> (Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) {
  %673 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %674 = sinh(%673) /* ty=Tensor[(1, 10, 10), float32] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %676 = log10(%675) /* ty=Tensor[(1, 10, 10), float32] */;
  %677 = cast(%676, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %678 = cosh(%677) /* ty=Tensor[(1, 10, 10), float64] */;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %680 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%676, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %683 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %684 = floor_divide(%681, %682) /* ty=Tensor[(?, 10, 10), float32] */;
  (%683, %684)
}

def @func_1680(%var_1678: Tensor[(1568), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64]) {
  %685 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %686 = cast(%var_1678, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %687 = reshape(%686, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %688 = @func_556(%687) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) */;
  %689 = %685.0;
  %690 = %688.1;
  (%689, %690, %var_1678)
}

def @func_1483() -> (Tensor[(1, 2, 16), bool], Tensor[(32), float64]) {
  %691 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %692 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %693 = %691.1;
  %694 = %692.0;
  (%693, %694)
}

def @func_6277() -> (Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool]) {
  %695 = @func_5147() /* ty=Tensor[(4, 4, 16), bool] */;
  %696 = cast(%695, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %697 = reshape(%696, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %698 = @func_3033(%697) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), bool]) */;
  %699 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %700 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %701 = @func_575() /* ty=Tensor[(4, 4, 16), bool] */;
  %702 = %698.0;
  %703 = %699.1;
  %704 = %700.0;
  (%701, %695, %702, %703, %704)
}

def @func_3936() -> Tensor[(32), float64] {
  %705 = @func_2259() /* ty=(Tensor[(32), float64],) */;
  %705.0
}

def @func_2000(%var_1961: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) {
  %706 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %707 = cast(%var_1961, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %712 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %713 = less_equal(%709, %710) /* ty=Tensor[(4, 4, 16), bool] */;
  %714 = %711.0;
  %715 = %712.0;
  (%713, %714, %715)
}

def @func_3570(%var_3559: Tensor[(4, 5, 8), float32]) -> (Tensor[(4, 5, 8), float32], Tensor[(4, 4, 16), bool], Tensor[(256), int8]) {
  %716 = cast(%var_3559, dtype="float32") /* ty=Tensor[(4, 5, 8), float32] */;
  %717 = cast(meta[relay.Constant][33] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %718 = reshape(%717, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %719 = @func_2000(%718) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) */;
  %720 = sinh(%716) /* ty=Tensor[(4, 5, 8), float32] */;
  %721 = %719.0;
  (%720, %721, meta[relay.Constant][33] /* ty=Tensor[(256), int8] */)
}

def @func_8249(%var_8210: Tensor[(3360), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64], Tensor[(4, 4, 16), int8], Tensor[(32), bool]) {
  %722 = @func_8138() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %723 = cast(3.4914f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %724 = cast(%var_8210, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %725 = reshape(%723, newshape=[]) /* ty=float64 */;
  %726 = reshape(%724, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float64] */;
  %727 = @func_697(%725, %726) /* ty=(Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) */;
  %728 = cast(meta[relay.Constant][34] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %729 = cast(meta[relay.Constant][34] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %730 = reshape(%728, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %731 = reshape(%729, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %732 = @func_4502(%730, %731) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) */;
  %733 = cast(meta[relay.Constant][34] /* ty=Tensor[(32), float64] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %734 = cast(3.4914f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %735 = %722.0;
  %736 = %727.0;
  %737 = %732.0;
  %738 = logical_and(%733, %734) /* ty=Tensor[(32), bool] */;
  (%735, %736, %var_8210, %737, %738)
}

def @func_2497() -> (Tensor[(4, 4, 16), float64],) {
  %739 = @func_989() /* ty=Tensor[(4, 4, 16), float64] */;
  (%739,)
}

def @func_5612() -> (Tensor[(4, 4, 16), bool],) {
  %740 = @func_5429() /* ty=Tensor[(4, 4, 16), bool] */;
  (%740,)
}

def @func_1401() -> (Tensor[(32), float64], Tensor[(4, 4, 16), float32]) {
  %741 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %742 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %743 = %741.0;
  %744 = %742.3;
  (%743, %744)
}

def @func_5033() -> (Tensor[(1, 2, 16), float64],) {
  %745 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %746 = %745.0;
  (%746,)
}

def @func_57(%var_4: Tensor[(1, 2, 16), float64]) -> (Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) {
  %747 = cast(1.93483f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %748 = cast(%var_4, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %749 = divide(%747, %748) /* ty=Tensor[(1, 2, 16), float64] */;
  %750 = cast(%749, dtype="uint8") /* ty=Tensor[(1, 2, 16), uint8] */;
  %751 = cast(1.93483f64 /* ty=float64 */, dtype="uint8") /* ty=uint8 */;
  %752 = cast(1.93483f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %753 = cast(%var_4, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
  %754 = bitwise_and(%750, %751) /* ty=Tensor[(1, 2, 16), uint8] */;
  %755 = equal(%752, %753) /* ty=Tensor[(1, 2, 16), bool] */;
  (%754, %755)
}

def @func_482() -> (Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) {
  %756 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %757 = %756.2;
  %758 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %759 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %760 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  (%757, %758, %759, %760)
}

def @func_2052() -> (Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  %761 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %762 = cast(meta[relay.Constant][35] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %763 = reshape(%762, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float32] */;
  %764 = cast(meta[relay.Constant][36] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %765 = %761.0;
  %766 = cast(%765, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %767 = reshape(%764, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %768 = reshape(%766, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %769 = @func_1058(%767, %768) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(16, 2), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64], float64, Tensor[(840, 4), float64], Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), bool]) */;
  %770 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %771 = %769.5;
  %772 = cast(%771, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %773 = reshape(%772, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %774 = @func_2000(%773) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) */;
  %775 = @func_1663(%763) /* ty=Tensor[(9, 15, 2), float32] */;
  %776 = %770.0;
  %777 = %774.2;
  (%765, %775, meta[relay.Constant][35] /* ty=Tensor[(270), float32] */, %771, meta[relay.Constant][36] /* ty=Tensor[(1568), float64] */, %776, %777)
}

def @func_1843() -> Tensor[(4, 4, 16), bool] {
  %778 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %778.0
}

def @func_8505() -> (Tensor[(2, 2, 16), int64],) {
  %779 = @func_2052() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %780 = %779.0;
  %781 = cast(%780, dtype="int64") /* ty=Tensor[(1, 2, 16), int64] */;
  %782 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 2, 16), bool] */, dtype="int64") /* ty=Tensor[(2, 2, 16), int64] */;
  %783 = right_shift(%781, %782) /* ty=Tensor[(2, 2, 16), int64] */;
  (%783,)
}

def @func_4013() -> (Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), bool]) {
  %784 = @func_3620() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %785 = @func_3798() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) */;
  %786 = %784.0;
  %787 = %785.0;
  (%786, %787)
}

def @func_2259() -> (Tensor[(32), float64],) {
  %788 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %789 = %788.0;
  (%789,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5020(%var_5019: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(4, 4, 16), float32]) {
  %6 = fn (%var_5011: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(4, 4, 16), float32]) {
    %0 = @func_1895() /* ty=(Tensor[(?, 10, 10), float32], Tensor[(32), float64]) */;
    %1 = %0.0;
    %2 = cast(%1, dtype="float32") /* ty=Tensor[(?, 10, 10), float32] */;
    %3 = cast(%var_5011, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
    %4 = maximum(%2, %3) /* ty=Tensor[(9, 10, 10), float32] */;
    %5 = @func_4223() /* ty=Tensor[(4, 4, 16), float32] */;
    (%4, %5)
  };
  %6(%var_5019) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(4, 4, 16), float32]) */
}

def @func_6449() -> Tensor[(4, 4, 16), float64] {
  %8 = fn () -> Tensor[(4, 4, 16), float64] {
    %7 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
    %7.0
  };
  %8() /* ty=Tensor[(4, 4, 16), float64] */
}

def @func_3611(%var_3597: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32]) {
  %9 = cast(%var_3597, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %10 = cast(%var_3597, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %11 = atanh(%9) /* ty=Tensor[(15, 5, 9), float64] */;
  %12 = sigmoid(%10) /* ty=Tensor[(15, 5, 9), float32] */;
  (%11, %12)
}

def @func_59(%var_58: Tensor[(1, 2, 16), float64]) -> (Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) {
  %22 = fn (%var_4: Tensor[(1, 2, 16), float64]) -> (Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) {
    %13 = cast(1.93483f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %14 = cast(%var_4, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
    %15 = divide(%13, %14) /* ty=Tensor[(1, 2, 16), float64] */;
    %16 = cast(%15, dtype="uint8") /* ty=Tensor[(1, 2, 16), uint8] */;
    %17 = cast(1.93483f64 /* ty=float64 */, dtype="uint8") /* ty=uint8 */;
    %18 = cast(1.93483f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %19 = cast(%var_4, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
    %20 = bitwise_and(%16, %17) /* ty=Tensor[(1, 2, 16), uint8] */;
    %21 = equal(%18, %19) /* ty=Tensor[(1, 2, 16), bool] */;
    (%20, %21)
  };
  %22(%var_58) /* ty=(Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) */
}

def @func_4506(%var_4504: Tensor[(32), float64], %var_4505: Tensor[(32), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) {
  @func_4502(%var_4504, %var_4505) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) */
}

def @func_7136() -> (Tensor[(15, 5, 16), int32],) {
  @func_7134() /* ty=(Tensor[(15, 5, 16), int32],) */
}

def @func_5772(%var_5760: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), float32],) {
  %23 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %24 = %23.0;
  %25 = cast(%var_5760, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %29 = divide(%27, %28) /* ty=Tensor[(4, 4, 16), float32] */;
  (%29,)
}

def @func_1546() -> (Tensor[(32), float64],) {
  %32 = fn () -> (Tensor[(32), float64],) {
    %30 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
    %31 = %30.0;
    (%31,)
  };
  %32() /* ty=(Tensor[(32), float64],) */
}

def @func_3923(%var_3910: Tensor[(3, 10, 16), int16]) -> (Tensor[(3, 10, 16), int16],) {
  %33 = cast(%var_3910, dtype="int16") /* ty=Tensor[(3, 10, 16), int16] */;
  %34 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 10, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 10, 16), int16] */, dtype="int16") /* ty=Tensor[(3, 10, 16), int16] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %37 = add(%35, %36) /* ty=Tensor[(3, 10, 16), int16] */;
  (%37,)
}

def @func_4597() -> Tensor[(10, 2, 16), bool] {
  @func_4595() /* ty=Tensor[(10, 2, 16), bool] */
}

def @func_5386(%var_5370: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), int16], Tensor[(4, 4, 16), bool]) {
  %38 = @func_1170() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) */;
  %39 = %38.0;
  %40 = cast(%var_5370, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %44 = cast(%39, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %45 = reshape(%44, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %46 = @func_3033(%45) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), bool]) */;
  %47 = multiply(%42, %43) /* ty=Tensor[(4, 4, 16), int16] */;
  %48 = %46.1;
  (%47, %48)
}

def @func_2793() -> Tensor[(1, 2, 16), bool] {
  %50 = fn () -> Tensor[(1, 2, 16), bool] {
    %49 = @func_1483() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(32), float64]) */;
    %49.0
  };
  %50() /* ty=Tensor[(1, 2, 16), bool] */
}

def @func_3570(%var_3559: Tensor[(4, 5, 8), float32]) -> (Tensor[(4, 5, 8), float32], Tensor[(4, 4, 16), bool], Tensor[(256), int8]) {
  %51 = cast(%var_3559, dtype="float32") /* ty=Tensor[(4, 5, 8), float32] */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(256), int8] */, dtype="int8") /* ty=Tensor[(256), int8] */;
  %53 = reshape(%52, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %54 = @func_2000(%53) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) */;
  %55 = sinh(%51) /* ty=Tensor[(4, 5, 8), float32] */;
  %56 = %54.0;
  (%55, %56, meta[relay.Constant][1] /* ty=Tensor[(256), int8] */)
}

def @func_5658() -> (Tensor[(4, 4, 16), float64], Tensor[(32), float64], Tensor[(4, 4, 16), bool], uint8, Tensor[(4, 4, 16), bool]) {
  @func_5656() /* ty=(Tensor[(4, 4, 16), float64], Tensor[(32), float64], Tensor[(4, 4, 16), bool], uint8, Tensor[(4, 4, 16), bool]) */
}

def @func_8073(%var_8053: Tensor[(10, 2, 16), bool], %var_8059: Tensor[(1200), int32]) -> (Tensor[(32), float64], Tensor[(10, 2, 16), int64], Tensor[(10, 2, 16), bool], Tensor[(1200), int32]) {
  %57 = @func_4062() /* ty=(Tensor[(32), float64],) */;
  %58 = @func_6791() /* ty=Tensor[(10, 2, 16), bool] */;
  %59 = cast(%var_8053, dtype="int64") /* ty=Tensor[(10, 2, 16), int64] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="int64") /* ty=Tensor[(10, 2, 16), int64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %63 = cast(%var_8059, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %64 = cast(%var_8059, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %65 = reshape(%63, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), int32] */;
  %66 = reshape(%64, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), int32] */;
  %67 = @func_7484(%65, %66) /* ty=(Tensor[(5, 15, 16), int32], Tensor[(10, 2, 16), bool]) */;
  %68 = %57.0;
  %69 = minimum(%61, %62) /* ty=Tensor[(10, 2, 16), int64] */;
  %70 = %67.1;
  (%68, %69, %70, %var_8059)
}

def @func_4063() -> (Tensor[(32), float64],) {
  %73 = fn () -> (Tensor[(32), float64],) {
    %71 = @func_3120() /* ty=(Tensor[(32), float64],) */;
    %72 = %71.0;
    (%72,)
  };
  %73() /* ty=(Tensor[(32), float64],) */
}

def @func_286() -> (Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) {
  @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */
}

def @func_484() -> (Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) {
  @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */
}

def @func_1172() -> (Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) {
  @func_1170() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) */
}

def @func_2002(%var_2001: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) {
  %84 = fn (%var_1961: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) {
    %74 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
    %75 = cast(%var_1961, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %79 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
    %80 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %81 = less_equal(%77, %78) /* ty=Tensor[(4, 4, 16), bool] */;
    %82 = %79.0;
    %83 = %80.0;
    (%81, %82, %83)
  };
  %84(%var_2001) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) */
}

def @func_559(%var_557: Tensor[(1568), float64]) -> (Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) {
  @func_556(%var_557) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) */
}

def @func_284() -> (Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) {
  %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %86 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %90 = reshape(%89, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), float64] */;
  %91 = @func_57(%90) /* ty=(Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) */;
  %92 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 4, 16), int8] */, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %93 = maximum(%87, %88) /* ty=Tensor[(4, 4, 16), int8] */;
  %94 = %91.1;
  %95 = acosh(%92) /* ty=Tensor[(4, 4, 16), float32] */;
  (%93, %94, meta[relay.Constant][4] /* ty=Tensor[(32), float64] */, %95)
}

def @func_4319() -> (Tensor[(2, 2, 14), float32],) {
  @func_4317() /* ty=(Tensor[(2, 2, 14), float32],) */
}

def @func_6125() -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  %100 = fn () -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
    %96 = @func_3798() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) */;
    %97 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %98 = %96.2;
    %99 = %97.0;
    (%98, %99)
  };
  %100() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */
}

def @func_260(%var_258: Tensor[(14, 7, 16), float64], %var_259: Tensor[(32), float64]) -> (Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) {
  @func_256(%var_258, %var_259) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */
}

def @func_3504(%var_3488: float32) -> (Tensor[(4, 4, 2), bool], Tensor[(4, 4, 2), float32]) {
  %101 = cast(%var_3488, dtype="bool") /* ty=bool */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 4, 2), float32] */, dtype="bool") /* ty=Tensor[(4, 4, 2), bool] */;
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 2), float32] */;
  %104 = greater_equal(%101, %102) /* ty=Tensor[(4, 4, 2), bool] */;
  %105 = sin(%103) /* ty=Tensor[(4, 4, 2), float32] */;
  (%104, %105)
}

def @func_6002() -> Tensor[(1, 2, 16), bool] {
  @func_4917() /* ty=Tensor[(1, 2, 16), bool] */
}

def @func_3054(%var_3052: Tensor[(2, 2, 14), float64]) -> (Tensor[(2, 2, 14), float32],) {
  @func_3051(%var_3052) /* ty=(Tensor[(2, 2, 14), float32],) */
}

def @main() -> Tensor[(3, 2, 7), float64] {
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 7), float64] */;
  atanh(%106) /* ty=Tensor[(3, 2, 7), float64] */
}

def @func_7335() -> (Tensor[(32), float64],) {
  @func_7333() /* ty=(Tensor[(32), float64],) */
}

def @func_2460(%var_2459: Tensor[(256), int8]) -> (Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(256), int8], Tensor[(16, 15, 14), int32], Tensor[(1568), float64]) {
  %117 = fn (%var_2415: Tensor[(256), int8]) -> (Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(256), int8], Tensor[(16, 15, 14), int32], Tensor[(1568), float64]) {
    %107 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %108 = cast(%var_2415, dtype="int8") /* ty=Tensor[(256), int8] */;
    %109 = reshape(%108, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
    %110 = @func_2000(%109) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) */;
    %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %112 = reshape(%111, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %113 = @func_2109(%112) /* ty=(Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) */;
    %114 = %107.0;
    %115 = %110.1;
    %116 = %113.8;
    (%114, %115, %var_2415, %116, meta[relay.Constant][7] /* ty=Tensor[(1568), float64] */)
  };
  %117(%var_2459) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(256), int8], Tensor[(16, 15, 14), int32], Tensor[(1568), float64]) */
}

def @func_1447(%var_1443: int32, %var_1444: Tensor[(8, 1, 16), int32], %var_1445: Tensor[(1568), float64], %var_1446: Tensor[(32), float64]) -> (Tensor[(8, 1, 16), bool], Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(32), float64]) {
  %129 = fn (%var_1404: int32, %var_1405: Tensor[(8, 1, 16), int32], %var_1423: Tensor[(1568), float64], %var_1424: Tensor[(32), float64]) -> (Tensor[(8, 1, 16), bool], Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(32), float64]) {
    %118 = cast(%var_1404, dtype="bool") /* ty=bool */;
    %119 = cast(%var_1405, dtype="bool") /* ty=Tensor[(8, 1, 16), bool] */;
    %120 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
    %121 = cast(%var_1423, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %122 = cast(%var_1424, dtype="float64") /* ty=Tensor[(32), float64] */;
    %123 = reshape(%121, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
    %124 = reshape(%122, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %125 = @func_256(%123, %124) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
    %126 = equal(%118, %119) /* ty=Tensor[(8, 1, 16), bool] */;
    %127 = %120.3;
    %128 = %125.2;
    (%126, %127, %128, %var_1423, %var_1424)
  };
  %129(%var_1443, %var_1444, %var_1445, %var_1446) /* ty=(Tensor[(8, 1, 16), bool], Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(32), float64]) */
}

def @func_5613() -> (Tensor[(4, 4, 16), bool],) {
  %131 = fn () -> (Tensor[(4, 4, 16), bool],) {
    %130 = @func_5429() /* ty=Tensor[(4, 4, 16), bool] */;
    (%130,)
  };
  %131() /* ty=(Tensor[(4, 4, 16), bool],) */
}

def @func_8139() -> (Tensor[(2, 2, 14), float64],) {
  %136 = fn () -> (Tensor[(2, 2, 14), float64],) {
    %132 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %133 = %132.0;
    %134 = cast(%133, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
    %135 = sqrt(%134) /* ty=Tensor[(2, 2, 14), float64] */;
    (%135,)
  };
  %136() /* ty=(Tensor[(2, 2, 14), float64],) */
}

def @func_1896() -> (Tensor[(?, 10, 10), float32], Tensor[(32), float64]) {
  %141 = fn () -> (Tensor[(?, 10, 10), float32], Tensor[(32), float64]) {
    %137 = @func_1170() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) */;
    %138 = @func_1545() /* ty=(Tensor[(32), float64],) */;
    %139 = %137.1;
    %140 = %138.0;
    (%139, %140)
  };
  %141() /* ty=(Tensor[(?, 10, 10), float32], Tensor[(32), float64]) */
}

def @func_5389(%var_5387: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), int16], Tensor[(4, 4, 16), bool]) {
  @func_5386(%var_5387) /* ty=(Tensor[(4, 4, 16), int16], Tensor[(4, 4, 16), bool]) */
}

def @func_4317() -> (Tensor[(2, 2, 14), float32],) {
  %142 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %143 = %142.0;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %145 = log2(%144) /* ty=Tensor[(2, 2, 14), float32] */;
  (%145,)
}

def @func_7763(%var_7762: Tensor[(1568), float64]) -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(4, 4, 16), float64]) {
  %156 = fn (%var_7734: Tensor[(1568), float64]) -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(4, 4, 16), float64]) {
    %146 = @func_5033() /* ty=(Tensor[(1, 2, 16), float64],) */;
    %147 = @func_5590() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %148 = cast(%var_7734, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %149 = reshape(%148, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %150 = @func_556(%149) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) */;
    %151 = %150.1;
    %152 = cast(%151, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
    %153 = %146.0;
    %154 = %147.0;
    %155 = log10(%152) /* ty=Tensor[(4, 4, 16), float64] */;
    (%153, %154, %var_7734, %155)
  };
  %156(%var_7762) /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(4, 4, 16), float64]) */
}

def @func_990() -> Tensor[(4, 4, 16), float64] {
  %160 = fn () -> Tensor[(4, 4, 16), float64] {
    %157 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %158 = %157.0;
    %159 = cast(%158, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
    exp(%159) /* ty=Tensor[(4, 4, 16), float64] */
  };
  %160() /* ty=Tensor[(4, 4, 16), float64] */
}

def @func_2147(%var_2130: Tensor[(1568), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8]) {
  %161 = cast(%var_2130, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %162 = reshape(%161, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %163 = @func_2109(%162) /* ty=(Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) */;
  %164 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %165 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %166 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %167 = %163.2;
  %168 = %164.0;
  %169 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
  (%165, %166, %167, %var_2130, %168, %169)
}

def @func_5429() -> Tensor[(4, 4, 16), bool] {
  %170 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %170.1
}

def @func_3395() -> (Tensor[(32), float64], Tensor[(4, 4, 16), float64]) {
  %171 = @func_2259() /* ty=(Tensor[(32), float64],) */;
  %172 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %173 = %172.1;
  %174 = cast(%173, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  %175 = %171.0;
  %176 = acos(%174) /* ty=Tensor[(4, 4, 16), float64] */;
  (%175, %176)
}

def @func_7951(%var_7904: Tensor[(1568), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(32), float64], Tensor[(1568), float32]) {
  %177 = cast(meta[relay.Constant][8] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %178 = reshape(%177, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %179 = @func_794(%178) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) */;
  %180 = %179.2;
  %181 = cast(%var_7904, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(1), int32] */;
  %183 = cast(%180, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), float64] */;
  %185 = floor_divide(%183, %184) /* ty=Tensor[(1568), float64] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %187 = sin(%186) /* ty=Tensor[(1568), float32] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %189 = asin(%188) /* ty=Tensor[(1568), float64] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %191 = shape_of(%187, dtype="int32") /* ty=Tensor[(1), int32] */;
  %192 = cast(%187, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?), float32] */;
  %194 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %195 = power(%192, %193) /* ty=Tensor[(1568), float32] */;
  (%194, meta[relay.Constant][8] /* ty=Tensor[(32), float64] */, %195)
}

def @func_4820(%var_4818: Tensor[(1568), float64], %var_4819: Tensor[(8, 4), float64]) -> (Tensor[(2, 2, 14), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(32), float64], Tensor[(8, 4), float64], Tensor[(1568), float64]) {
  @func_4816(%var_4818, %var_4819) /* ty=(Tensor[(2, 2, 14), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(32), float64], Tensor[(8, 4), float64], Tensor[(1568), float64]) */
}

def @func_3800() -> (Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) {
  @func_3798() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) */
}

def @func_4816(%var_4802: Tensor[(1568), float64], %var_4805: Tensor[(8, 4), float64]) -> (Tensor[(2, 2, 14), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(32), float64], Tensor[(8, 4), float64], Tensor[(1568), float64]) {
  %196 = @func_4149() /* ty=(Tensor[(2, 2, 14), float32],) */;
  %197 = cast(%var_4802, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %198 = reshape(%197, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %199 = @func_1680(%198) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64]) */;
  %200 = cast(%var_4805, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %201 = cast(%var_4805, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %202 = reshape(%200, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %203 = reshape(%201, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %204 = @func_4502(%202, %203) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) */;
  %205 = cast(%var_4805, dtype="float64") /* ty=Tensor[(8, 4), float64] */;
  %206 = reshape(%205, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %207 = @func_794(%206) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) */;
  %208 = %196.0;
  %209 = %199.2;
  %210 = %204.2;
  %211 = %207.2;
  (%208, %209, %var_4802, %210, %var_4805, %211)
}

def @func_7009() -> (Tensor[(1, 2, 16), bool],) {
  %212 = @func_3003() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %213 = %212.0;
  (%213,)
}

def @func_6980() -> (Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(6, 7, 12), bool], Tensor[(36, 14), int64]) {
  @func_6978() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(6, 7, 12), bool], Tensor[(36, 14), int64]) */
}

def @func_7626(%var_7625: Tensor[(12, 6, 11), float64]) -> (Tensor[(12, 6, 11), float64], Tensor[(4, 4, 16), float64], Tensor[(12, 6, 11), float32]) {
  %220 = fn (%var_7595: Tensor[(12, 6, 11), float64]) -> (Tensor[(12, 6, 11), float64], Tensor[(4, 4, 16), float64], Tensor[(12, 6, 11), float32]) {
    %214 = cast(%var_7595, dtype="float64") /* ty=Tensor[(12, 6, 11), float64] */;
    %215 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
    %216 = cast(%var_7595, dtype="float32") /* ty=Tensor[(12, 6, 11), float32] */;
    %217 = log2(%214) /* ty=Tensor[(12, 6, 11), float64] */;
    %218 = %215.0;
    %219 = log(%216) /* ty=Tensor[(12, 6, 11), float32] */;
    (%217, %218, %219)
  };
  %220(%var_7625) /* ty=(Tensor[(12, 6, 11), float64], Tensor[(4, 4, 16), float64], Tensor[(12, 6, 11), float32]) */
}

def @func_7846(%var_7842: Tensor[(16, 7, 10), uint8], %var_7843: Tensor[(16, 7, 10), uint8], %var_7844: Tensor[(504), int64], %var_7845: Tensor[(8, 9, 7), bool]) -> (Tensor[(16, 7, 10), uint8], Tensor[(10, 2, 16), bool], Tensor[(504), int64], Tensor[(8, 9, 7), float32]) {
  %239 = fn (%var_7783: Tensor[(16, 7, 10), uint8], %var_7784: Tensor[(16, 7, 10), uint8], %var_7814: Tensor[(504), int64], %var_7828: Tensor[(8, 9, 7), bool]) -> (Tensor[(16, 7, 10), uint8], Tensor[(10, 2, 16), bool], Tensor[(504), int64], Tensor[(8, 9, 7), float32]) {
    %221 = cast(%var_7784, dtype="uint8") /* ty=Tensor[(16, 7, 10), uint8] */;
    %222 = shape_of(%var_7783, dtype="int32") /* ty=Tensor[(3), int32] */;
    %223 = cast(%var_7783, dtype="uint8") /* ty=Tensor[(16, 7, 10), uint8] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %225 = @func_7693() /* ty=(Tensor[(10, 2, 16), bool],) */;
    %226 = cast(%var_7814, dtype="int64") /* ty=Tensor[(504), int64] */;
    %227 = cast(%var_7814, dtype="int64") /* ty=Tensor[(504), int64] */;
    %228 = reshape(%226, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
    %229 = reshape(%227, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
    %230 = @func_4859(%228, %229) /* ty=(Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) */;
    %231 = %230.1;
    %232 = cast(%var_7828, dtype="float32") /* ty=Tensor[(8, 9, 7), float32] */;
    %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(%231, dtype="float32") /* ty=Tensor[(8, 9, 7), float32] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %236 = bitwise_xor(%223, %224) /* ty=Tensor[(16, 7, 10), uint8] */;
    %237 = %225.0;
    %238 = mod(%234, %235) /* ty=Tensor[(8, 9, 7), float32] */;
    (%236, %237, %var_7814, %238)
  };
  %239(%var_7842, %var_7843, %var_7844, %var_7845) /* ty=(Tensor[(16, 7, 10), uint8], Tensor[(10, 2, 16), bool], Tensor[(504), int64], Tensor[(8, 9, 7), float32]) */
}

def @func_5775(%var_5773: Tensor[(4, 4, 16), int8]) -> (Tensor[(4, 4, 16), float32],) {
  @func_5772(%var_5773) /* ty=(Tensor[(4, 4, 16), float32],) */
}

def @func_3573(%var_3571: Tensor[(4, 5, 8), float32]) -> (Tensor[(4, 5, 8), float32], Tensor[(4, 4, 16), bool], Tensor[(256), int8]) {
  @func_3570(%var_3571) /* ty=(Tensor[(4, 5, 8), float32], Tensor[(4, 4, 16), bool], Tensor[(256), int8]) */
}

def @func_701(%var_699: float64, %var_700: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) {
  @func_697(%var_699, %var_700) /* ty=(Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) */
}

def @func_5807() -> Tensor[(1, 2, 16), float32] {
  %240 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %240.0
}

def @func_1663(%var_1655: Tensor[(9, 15, 2), float32]) -> Tensor[(9, 15, 2), float32] {
  %241 = cast(%var_1655, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  atan(%241) /* ty=Tensor[(9, 15, 2), float32] */
}

def @func_1816() -> Tensor[(4, 4, 16), bool] {
  %242 = fn () -> Tensor[(4, 4, 16), bool] {
    @func_575() /* ty=Tensor[(4, 4, 16), bool] */
  };
  %242() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_1844() -> Tensor[(4, 4, 16), bool] {
  %244 = fn () -> Tensor[(4, 4, 16), bool] {
    %243 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
    %243.0
  };
  %244() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_4151() -> (Tensor[(2, 2, 14), float32],) {
  @func_4149() /* ty=(Tensor[(2, 2, 14), float32],) */
}

def @func_796(%var_795: Tensor[(32), float64]) -> (Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) {
  %259 = fn (%var_791: Tensor[(32), float64]) -> (Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) {
    %245 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
    %246 = cast(%245, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
    %247 = asinh(%246) /* ty=Tensor[(4, 4, 16), float32] */;
    %248 = cast(%245, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(%247, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %252 = cast(meta[relay.Constant][9] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %253 = cast(%var_791, dtype="float64") /* ty=Tensor[(32), float64] */;
    %254 = reshape(%252, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
    %255 = reshape(%253, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %256 = @func_256(%254, %255) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
    %257 = logical_or(%250, %251) /* ty=Tensor[(4, 4, 16), bool] */;
    %258 = %256.1;
    (%257, %258, meta[relay.Constant][9] /* ty=Tensor[(1568), float64] */, %var_791)
  };
  %259(%var_795) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) */
}

def @func_5518() -> (Tensor[(32), float64], Tensor[(10, 2, 16), bool]) {
  @func_5516() /* ty=(Tensor[(32), float64], Tensor[(10, 2, 16), bool]) */
}

def @func_7333() -> (Tensor[(32), float64],) {
  %260 = @func_3936() /* ty=Tensor[(32), float64] */;
  (%260,)
}

def @func_1916() -> (Tensor[(4, 4, 16), bool],) {
  %262 = fn () -> (Tensor[(4, 4, 16), bool],) {
    %261 = @func_1815() /* ty=Tensor[(4, 4, 16), bool] */;
    (%261,)
  };
  %262() /* ty=(Tensor[(4, 4, 16), bool],) */
}

def @func_3483(%var_3456: uint8) -> (Tensor[(4, 4, 16), bool], Tensor[(13, 16, 11), float32]) {
  %263 = cast(%var_3456, dtype="uint8") /* ty=uint8 */;
  %264 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 16, 11), uint8] */, dtype="uint8") /* ty=Tensor[(13, 16, 11), uint8] */;
  %265 = bitwise_and(%263, %264) /* ty=Tensor[(13, 16, 11), uint8] */;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(13, 16, 11), float32] */;
  %267 = @func_1843() /* ty=Tensor[(4, 4, 16), bool] */;
  %268 = rsqrt(%266) /* ty=Tensor[(13, 16, 11), float32] */;
  (%267, %268)
}

def @func_1611() -> (Tensor[(1, 2, 16), bool],) {
  %269 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %270 = %269.1;
  (%270,)
}

def @func_5333() -> (Tensor[(2, 2, 14), float64],) {
  %273 = fn () -> (Tensor[(2, 2, 14), float64],) {
    %271 = @func_2702() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %272 = %271.0;
    (%272,)
  };
  %273() /* ty=(Tensor[(2, 2, 14), float64],) */
}

def @func_3621() -> (Tensor[(4, 4, 16), int8],) {
  %276 = fn () -> (Tensor[(4, 4, 16), int8],) {
    %274 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
    %275 = %274.0;
    (%275,)
  };
  %276() /* ty=(Tensor[(4, 4, 16), int8],) */
}

def @func_1794() -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */
}

def @func_2499() -> (Tensor[(4, 4, 16), float64],) {
  @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */
}

def @func_6341() -> (Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(32), float64], Tensor[(3, 10, 16), int16], Tensor[(480), int16]) {
  %288 = fn () -> (Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(32), float64], Tensor[(3, 10, 16), int16], Tensor[(480), int16]) {
    %277 = cast(meta[relay.Constant][11] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %278 = cast(meta[relay.Constant][11] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %279 = reshape(%277, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %280 = reshape(%278, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %281 = @func_4502(%279, %280) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) */;
    %282 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
    %283 = reshape(%282, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), int16] */;
    %284 = @func_3923(%283) /* ty=(Tensor[(3, 10, 16), int16],) */;
    %285 = @func_5429() /* ty=Tensor[(4, 4, 16), bool] */;
    %286 = %281.2;
    %287 = %284.0;
    (%285, %286, meta[relay.Constant][11] /* ty=Tensor[(32), float64] */, %287, meta[relay.Constant][12] /* ty=Tensor[(480), int16] */)
  };
  %288() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(32), float64], Tensor[(3, 10, 16), int16], Tensor[(480), int16]) */
}

def @func_4681(%var_4680: Tensor[(160), float32]) -> (Tensor[(1, 2, 16), bool], Tensor[(256), int8], Tensor[(160), float32], Tensor[(4, 4, 16), float32]) {
  %298 = fn (%var_4624: Tensor[(160), float32]) -> (Tensor[(1, 2, 16), bool], Tensor[(256), int8], Tensor[(160), float32], Tensor[(4, 4, 16), float32]) {
    %289 = cast(%var_4624, dtype="float32") /* ty=Tensor[(160), float32] */;
    %290 = reshape(%289, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), float32] */;
    %291 = @func_3570(%290) /* ty=(Tensor[(4, 5, 8), float32], Tensor[(4, 4, 16), bool], Tensor[(256), int8]) */;
    %292 = %291.2;
    %293 = cast(%292, dtype="float64") /* ty=Tensor[(256), float64] */;
    %294 = reshape(%293, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), float64] */;
    %295 = @func_4429(%294) /* ty=(Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), float32]) */;
    %296 = @func_2792() /* ty=Tensor[(1, 2, 16), bool] */;
    %297 = %295.1;
    (%296, %292, %var_4624, %297)
  };
  %298(%var_4680) /* ty=(Tensor[(1, 2, 16), bool], Tensor[(256), int8], Tensor[(160), float32], Tensor[(4, 4, 16), float32]) */
}

def @func_2111(%var_2110: Tensor[(1568), float64]) -> (Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) {
  %322 = fn (%var_2097: Tensor[(1568), float64]) -> (Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) {
    %299 = @func_2052() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
    %300 = @func_1895() /* ty=(Tensor[(?, 10, 10), float32], Tensor[(32), float64]) */;
    %301 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
    %302 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %303 = cast(meta[relay.Constant][13] /* ty=Tensor[(128), int32] */, dtype="int32") /* ty=Tensor[(128), int32] */;
    %304 = cast(%var_2097, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %305 = %300.1;
    %306 = cast(%305, dtype="float64") /* ty=Tensor[(32), float64] */;
    %307 = reshape(%302, newshape=[]) /* ty=int32 */;
    %308 = reshape(%303, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int32] */;
    %309 = reshape(%304, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %310 = reshape(%306, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %311 = @func_1442(%307, %308, %309, %310) /* ty=(Tensor[(8, 1, 16), bool], Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(32), float64]) */;
    %312 = cast(-4 /* ty=int32 */, dtype="float64") /* ty=float64 */;
    %313 = cast(meta[relay.Constant][14] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %314 = reshape(%312, newshape=[]) /* ty=float64 */;
    %315 = reshape(%313, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float64] */;
    %316 = @func_697(%314, %315) /* ty=(Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) */;
    %317 = %299.2;
    %318 = %301.3;
    %319 = @func_1815() /* ty=Tensor[(4, 4, 16), bool] */;
    %320 = %311.3;
    %321 = %316.0;
    (%317, %305, %318, %319, %320, -4 /* ty=int32 */, meta[relay.Constant][13] /* ty=Tensor[(128), int32] */, %var_2097, %321, meta[relay.Constant][14] /* ty=Tensor[(3360), float64] */)
  };
  %322(%var_2110) /* ty=(Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) */
}

def @func_6866() -> Tensor[(32), float64] {
  @func_6864() /* ty=Tensor[(32), float64] */
}

def @func_5494() -> Tensor[(4, 4, 16), int16] {
  @func_5492() /* ty=Tensor[(4, 4, 16), int16] */
}

def @func_6864() -> Tensor[(32), float64] {
  @func_3936() /* ty=Tensor[(32), float64] */
}

def @func_7315() -> (Tensor[(10, 2, 16), bool], Tensor[(4, 4, 16), int8]) {
  %326 = fn () -> (Tensor[(10, 2, 16), bool], Tensor[(4, 4, 16), int8]) {
    %323 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
    %324 = @func_4595() /* ty=Tensor[(10, 2, 16), bool] */;
    %325 = %323.1;
    (%324, %325)
  };
  %326() /* ty=(Tensor[(10, 2, 16), bool], Tensor[(4, 4, 16), int8]) */
}

def @func_5149() -> Tensor[(4, 4, 16), bool] {
  @func_5147() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_4859(%var_4830: Tensor[(8, 9, 7), int64], %var_4831: Tensor[(8, 9, 7), int64]) -> (Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) {
  %327 = cast(%var_4830, dtype="float64") /* ty=Tensor[(8, 9, 7), float64] */;
  %328 = cast(%var_4831, dtype="int64") /* ty=Tensor[(8, 9, 7), int64] */;
  %329 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%var_4830, dtype="int64") /* ty=Tensor[(8, 9, 7), int64] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %332 = minimum(%330, %331) /* ty=Tensor[(8, 9, 7), int64] */;
  %333 = cast(%var_4830, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="bool") /* ty=Tensor[(8, 9, 7), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %337 = asinh(%327) /* ty=Tensor[(8, 9, 7), float64] */;
  %338 = greater(%335, %336) /* ty=Tensor[(8, 9, 7), bool] */;
  (%337, %338)
}

def @func_3263() -> (Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), int8]) {
  %344 = fn () -> (Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), int8]) {
    %339 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %340 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
    %341 = %339.0;
    %342 = %340.0;
    %343 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
    (%341, %342, %343)
  };
  %344() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), int8]) */
}

def @func_6550(%var_6549: Tensor[(8, 11, 3), uint32]) -> (Tensor[(8, 11, 3), uint32],) {
  %350 = fn (%var_6543: Tensor[(8, 11, 3), uint32]) -> (Tensor[(8, 11, 3), uint32],) {
    %345 = cast(%var_6543, dtype="uint32") /* ty=Tensor[(8, 11, 3), uint32] */;
    %346 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(8, 11, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 11, 3), uint32] */, dtype="uint32") /* ty=Tensor[(8, 11, 3), uint32] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %349 = bitwise_xor(%347, %348) /* ty=Tensor[(8, 11, 3), uint32] */;
    (%349,)
  };
  %350(%var_6549) /* ty=(Tensor[(8, 11, 3), uint32],) */
}

def @func_3926(%var_3924: Tensor[(3, 10, 16), int16]) -> (Tensor[(3, 10, 16), int16],) {
  @func_3923(%var_3924) /* ty=(Tensor[(3, 10, 16), int16],) */
}

def @func_5656() -> (Tensor[(4, 4, 16), float64], Tensor[(32), float64], Tensor[(4, 4, 16), bool], uint8, Tensor[(4, 4, 16), bool]) {
  %351 = @func_1819() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %352 = %351.0;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  %354 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %355 = reshape(%354, newshape=[]) /* ty=uint8 */;
  %356 = @func_3483(%355) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(13, 16, 11), float32]) */;
  %357 = atanh(%353) /* ty=Tensor[(4, 4, 16), float64] */;
  %358 = @func_3358() /* ty=Tensor[(32), float64] */;
  %359 = %356.0;
  %360 = @func_2638() /* ty=Tensor[(4, 4, 16), bool] */;
  (%357, %358, %359, meta[relay.Constant][16] /* ty=uint8 */, %360)
}

def @func_6686() -> (Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), int8], Tensor[(84), float32], Tensor[(32), float64]) {
  @func_6684() /* ty=(Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), int8], Tensor[(84), float32], Tensor[(32), float64]) */
}

def @func_4284(%var_4282: Tensor[(3, 13, 2), float32], %var_4283: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), float32], Tensor[(32), float64]) {
  @func_4280(%var_4282, %var_4283) /* ty=(Tensor[(3, 13, 2), float32], Tensor[(32), float64]) */
}

def @func_1467() -> (Tensor[(2, 2, 14), float64],) {
  %363 = fn () -> (Tensor[(2, 2, 14), float64],) {
    %361 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %362 = %361.0;
    (%362,)
  };
  %363() /* ty=(Tensor[(2, 2, 14), float64],) */
}

def @func_4013() -> (Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), bool]) {
  %364 = @func_3620() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %365 = @func_3798() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) */;
  %366 = %364.0;
  %367 = %365.0;
  (%366, %367)
}

def @func_7089() -> (Tensor[(4, 4, 16), int64], Tensor[(2, 2, 14), float32], Tensor[(56, 1), float64]) {
  %379 = fn () -> (Tensor[(4, 4, 16), int64], Tensor[(2, 2, 14), float32], Tensor[(56, 1), float64]) {
    %368 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
    %369 = %368.1;
    %370 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 4, 16), int8] */, dtype="int64") /* ty=Tensor[(4, 4, 16), int64] */;
    %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%369, dtype="int64") /* ty=Tensor[(4, 4, 16), int64] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %374 = cast(meta[relay.Constant][18] /* ty=Tensor[(56, 1), float64] */, dtype="float64") /* ty=Tensor[(56, 1), float64] */;
    %375 = reshape(%374, newshape=[2, 2, 14]) /* ty=Tensor[(2, 2, 14), float64] */;
    %376 = @func_3051(%375) /* ty=(Tensor[(2, 2, 14), float32],) */;
    %377 = right_shift(%372, %373) /* ty=Tensor[(4, 4, 16), int64] */;
    %378 = %376.0;
    (%377, %378, meta[relay.Constant][18] /* ty=Tensor[(56, 1), float64] */)
  };
  %379() /* ty=(Tensor[(4, 4, 16), int64], Tensor[(2, 2, 14), float32], Tensor[(56, 1), float64]) */
}

def @func_5809() -> Tensor[(1, 2, 16), float32] {
  @func_5807() /* ty=Tensor[(1, 2, 16), float32] */
}

def @func_4705() -> (Tensor[(2, 2, 14), float64], Tensor[(?, 10, 10), float32]) {
  %380 = @func_2702() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %381 = @func_1170() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) */;
  %382 = %380.0;
  %383 = %381.1;
  (%382, %383)
}

def @func_256(%var_235: Tensor[(14, 7, 16), float64], %var_239: Tensor[(32), float64]) -> (Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) {
  %384 = cast(%var_235, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
  %385 = cast(%var_239, dtype="float64") /* ty=Tensor[(32), float64] */;
  %386 = reshape(%385, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), float64] */;
  %387 = @func_57(%386) /* ty=(Tensor[(1, 2, 16), uint8], Tensor[(1, 2, 16), bool]) */;
  %388 = sin(%384) /* ty=Tensor[(14, 7, 16), float64] */;
  %389 = %387.0;
  (%388, %389, %var_239)
}

def @func_8189(%var_8187: Tensor[(3, 15, 5), float64], %var_8188: Tensor[(512), float64]) -> (Tensor[(3, 15, 5), bool], Tensor[(4, 4, 16), float64], Tensor[(160), float32], Tensor[(160), float32], Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 16), float32]) {
  %411 = fn (%var_8142: Tensor[(3, 15, 5), float64], %var_8182: Tensor[(512), float64]) -> (Tensor[(3, 15, 5), bool], Tensor[(4, 4, 16), float64], Tensor[(160), float32], Tensor[(160), float32], Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 16), float32]) {
    %390 = cast(%var_8142, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %391 = rsqrt(%390) /* ty=Tensor[(3, 15, 5), float64] */;
    %392 = cast(%391, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %393 = asinh(%392) /* ty=Tensor[(3, 15, 5), float64] */;
    %394 = cast(%391, dtype="bool") /* ty=Tensor[(3, 15, 5), bool] */;
    %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%393, dtype="bool") /* ty=Tensor[(3, 15, 5), bool] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %398 = cast(meta[relay.Constant][19] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %399 = reshape(%398, newshape=[160]) /* ty=Tensor[(160), float32] */;
    %400 = @func_4679(%399) /* ty=(Tensor[(1, 2, 16), bool], Tensor[(256), int8], Tensor[(160), float32], Tensor[(4, 4, 16), float32]) */;
    %401 = @func_1545() /* ty=(Tensor[(32), float64],) */;
    %402 = cast(%var_8182, dtype="float64") /* ty=Tensor[(512), float64] */;
    %403 = reshape(%402, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
    %404 = @func_3732(%403) /* ty=(Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) */;
    %405 = equal(%396, %397) /* ty=Tensor[(3, 15, 5), bool] */;
    %406 = @func_5928() /* ty=Tensor[(4, 4, 16), float64] */;
    %407 = %400.2;
    %408 = %401.0;
    %409 = %404.1;
    %410 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
    (%405, %406, %407, meta[relay.Constant][19] /* ty=Tensor[(160), float32] */, %408, %409, %var_8182, %410)
  };
  %411(%var_8187, %var_8188) /* ty=(Tensor[(3, 15, 5), bool], Tensor[(4, 4, 16), float64], Tensor[(160), float32], Tensor[(160), float32], Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 16), float32]) */
}

def @func_3897(%var_3825: Tensor[(12, 10, 13), float64], %var_3879: Tensor[(2, 2, 14), float64], %var_3895: Tensor[(1568), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64]) {
  %412 = cast(%var_3825, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %413 = sigmoid(%412) /* ty=Tensor[(12, 10, 13), float64] */;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %415 = atanh(%414) /* ty=Tensor[(12, 10, 13), float64] */;
  %416 = cast(%413, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = @func_2702() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %421 = %420.0;
  %422 = cast(%var_3879, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %426 = cast(%var_3895, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %427 = reshape(%426, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %428 = @func_2109(%427) /* ty=(Tensor[(270), float32], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(1568), float64], int32, Tensor[(128), int32], Tensor[(1568), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64]) */;
  %429 = logical_or(%418, %419) /* ty=Tensor[(12, 10, 13), bool] */;
  %430 = add(%424, %425) /* ty=Tensor[(2, 2, 14), float64] */;
  %431 = %428.2;
  (%429, %430, %431, %var_3895)
}

def @func_5034() -> (Tensor[(1, 2, 16), float64],) {
  %434 = fn () -> (Tensor[(1, 2, 16), float64],) {
    %432 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
    %433 = %432.0;
    (%433,)
  };
  %434() /* ty=(Tensor[(1, 2, 16), float64],) */
}

def @func_3614(%var_3612: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32]) {
  @func_3611(%var_3612) /* ty=(Tensor[(15, 5, 9), float64], Tensor[(15, 5, 9), float32]) */
}

def @func_3798() -> (Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) {
  %435 = @func_1915() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %436 = @func_3003() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %437 = %436.0;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %439 = @func_2638() /* ty=Tensor[(4, 4, 16), bool] */;
  %440 = %435.0;
  %441 = acosh(%438) /* ty=Tensor[(1, 2, 16), float64] */;
  (%439, %440, %441)
}

def @func_5590() -> (Tensor[(4, 4, 16), int8],) {
  %442 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
  (%442,)
}

def @func_1666(%var_1664: Tensor[(9, 15, 2), float32]) -> Tensor[(9, 15, 2), float32] {
  @func_1663(%var_1664) /* ty=Tensor[(9, 15, 2), float32] */
}

def @func_8400() -> (Tensor[(84), float32],) {
  %443 = @func_6684() /* ty=(Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), int8], Tensor[(84), float32], Tensor[(32), float64]) */;
  %444 = %443.2;
  (%444,)
}

def @func_2924() -> (Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) {
  %445 = @func_2792() /* ty=Tensor[(1, 2, 16), bool] */;
  %446 = cast(%445, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %447 = @func_2497() /* ty=(Tensor[(4, 4, 16), float64],) */;
  %448 = acos(%446) /* ty=Tensor[(1, 2, 16), float32] */;
  %449 = @func_1815() /* ty=Tensor[(4, 4, 16), bool] */;
  %450 = %447.0;
  (%448, %449, %450)
}

def @func_5827(%var_5826: Tensor[(2, 7, 6), float32]) -> (Tensor[(2, 7, 6), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), int8]) {
  %457 = fn (%var_5813: Tensor[(2, 7, 6), float32]) -> (Tensor[(2, 7, 6), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), int8]) {
    %451 = cast(%var_5813, dtype="float32") /* ty=Tensor[(2, 7, 6), float32] */;
    %452 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
    %453 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
    %454 = sigmoid(%451) /* ty=Tensor[(2, 7, 6), float32] */;
    %455 = %452.0;
    %456 = %453.1;
    (%454, %455, %456)
  };
  %457(%var_5826) /* ty=(Tensor[(2, 7, 6), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), int8]) */
}

def @func_5147() -> Tensor[(4, 4, 16), bool] {
  @func_1843() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_6792() -> Tensor[(10, 2, 16), bool] {
  %459 = fn () -> Tensor[(10, 2, 16), bool] {
    %458 = @func_5516() /* ty=(Tensor[(32), float64], Tensor[(10, 2, 16), bool]) */;
    %458.1
  };
  %459() /* ty=Tensor[(10, 2, 16), bool] */
}

def @func_7011() -> (Tensor[(1, 2, 16), bool],) {
  @func_7009() /* ty=(Tensor[(1, 2, 16), bool],) */
}

def @func_2259() -> (Tensor[(32), float64],) {
  %460 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %461 = %460.0;
  (%461,)
}

def @func_7694() -> (Tensor[(10, 2, 16), bool],) {
  %463 = fn () -> (Tensor[(10, 2, 16), bool],) {
    %462 = @func_4595() /* ty=Tensor[(10, 2, 16), bool] */;
    (%462,)
  };
  %463() /* ty=(Tensor[(10, 2, 16), bool],) */
}

def @func_2052() -> (Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  %464 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %465 = cast(meta[relay.Constant][20] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %466 = reshape(%465, newshape=[9, 15, 2]) /* ty=Tensor[(9, 15, 2), float32] */;
  %467 = cast(meta[relay.Constant][21] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %468 = %464.0;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %470 = reshape(%467, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %471 = reshape(%469, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %472 = @func_1058(%470, %471) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(16, 2), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64], float64, Tensor[(840, 4), float64], Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), bool]) */;
  %473 = @func_1792() /* ty=(Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %474 = %472.5;
  %475 = cast(%474, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
  %476 = reshape(%475, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
  %477 = @func_2000(%476) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), int8]) */;
  %478 = @func_1663(%466) /* ty=Tensor[(9, 15, 2), float32] */;
  %479 = %473.0;
  %480 = %477.2;
  (%468, %478, meta[relay.Constant][20] /* ty=Tensor[(270), float32] */, %474, meta[relay.Constant][21] /* ty=Tensor[(1568), float64] */, %479, %480)
}

def @func_8251(%var_8250: Tensor[(3360), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64], Tensor[(4, 4, 16), int8], Tensor[(32), bool]) {
  %498 = fn (%var_8210: Tensor[(3360), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64], Tensor[(4, 4, 16), int8], Tensor[(32), bool]) {
    %481 = @func_8138() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %482 = cast(3.4914f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %483 = cast(%var_8210, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %484 = reshape(%482, newshape=[]) /* ty=float64 */;
    %485 = reshape(%483, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float64] */;
    %486 = @func_697(%484, %485) /* ty=(Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) */;
    %487 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %488 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %489 = reshape(%487, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %490 = reshape(%488, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %491 = @func_4502(%489, %490) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) */;
    %492 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, dtype="bool") /* ty=Tensor[(32), bool] */;
    %493 = cast(3.4914f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %494 = %481.0;
    %495 = %486.0;
    %496 = %491.0;
    %497 = logical_and(%492, %493) /* ty=Tensor[(32), bool] */;
    (%494, %495, %var_8210, %496, %497)
  };
  %498(%var_8250) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(16, 15, 14), int32], Tensor[(3360), float64], Tensor[(4, 4, 16), int8], Tensor[(32), bool]) */
}

def @func_5930() -> Tensor[(4, 4, 16), float64] {
  @func_5928() /* ty=Tensor[(4, 4, 16), float64] */
}

def @func_4595() -> Tensor[(10, 2, 16), bool] {
  %499 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %500 = %499.0;
  %501 = cast(%500, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
  %502 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 2, 16), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
  less_equal(%501, %502) /* ty=Tensor[(10, 2, 16), bool] */
}

def @func_2639() -> Tensor[(4, 4, 16), bool] {
  %504 = fn () -> Tensor[(4, 4, 16), bool] {
    %503 = @func_1915() /* ty=(Tensor[(4, 4, 16), bool],) */;
    %503.0
  };
  %504() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_2926() -> (Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) {
  @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */
}

def @func_5516() -> (Tensor[(32), float64], Tensor[(10, 2, 16), bool]) {
  %505 = @func_3120() /* ty=(Tensor[(32), float64],) */;
  %506 = %505.0;
  %507 = @func_4595() /* ty=Tensor[(10, 2, 16), bool] */;
  (%506, %507)
}

def @func_4280(%var_4251: Tensor[(3, 13, 2), float32], %var_4252: Tensor[(3, 13, 2), float32]) -> (Tensor[(3, 13, 2), float32], Tensor[(32), float64]) {
  %508 = cast(%var_4252, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %509 = shape_of(%var_4251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%var_4251, dtype="float32") /* ty=Tensor[(3, 13, 2), float32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %512 = @func_3120() /* ty=(Tensor[(32), float64],) */;
  %513 = floor_divide(%510, %511) /* ty=Tensor[(3, 13, 2), float32] */;
  %514 = %512.0;
  (%513, %514)
}

def @func_2261() -> (Tensor[(32), float64],) {
  @func_2259() /* ty=(Tensor[(32), float64],) */
}

def @func_1504() -> Tensor[(2, 2, 14), float64] {
  %516 = fn () -> Tensor[(2, 2, 14), float64] {
    %515 = @func_1222() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %515.0
  };
  %516() /* ty=Tensor[(2, 2, 14), float64] */
}

def @func_1401() -> (Tensor[(32), float64], Tensor[(4, 4, 16), float32]) {
  %517 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %518 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %519 = %517.0;
  %520 = %518.3;
  (%519, %520)
}

def @func_514() -> (Tensor[(4, 4, 16), bool],) {
  %530 = fn () -> (Tensor[(4, 4, 16), bool],) {
    %521 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %522 = %521.0;
    %523 = cast(%522, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
    %524 = sinh(%523) /* ty=Tensor[(4, 4, 16), float32] */;
    %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(%524, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %529 = logical_and(%527, %528) /* ty=Tensor[(4, 4, 16), bool] */;
    (%529,)
  };
  %530() /* ty=(Tensor[(4, 4, 16), bool],) */
}

def @func_4224() -> Tensor[(4, 4, 16), float32] {
  %532 = fn () -> Tensor[(4, 4, 16), float32] {
    %531 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
    %531.1
  };
  %532() /* ty=Tensor[(4, 4, 16), float32] */
}

def @func_743() -> Tensor[(4, 4, 16), int8] {
  %533 = fn () -> Tensor[(4, 4, 16), int8] {
    @func_720() /* ty=Tensor[(4, 4, 16), int8] */
  };
  %533() /* ty=Tensor[(4, 4, 16), int8] */
}

def @func_5122(%var_5117: Tensor[(6, 7, 12), int64]) -> Tensor[(6, 7, 12), bool] {
  %534 = cast(9 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %535 = cast(%var_5117, dtype="bool") /* ty=Tensor[(6, 7, 12), bool] */;
  greater_equal(%534, %535) /* ty=Tensor[(6, 7, 12), bool] */
}

def @func_3969(%var_3953: Tensor[(3, 2, 16), float32]) -> (Tensor[(3, 2, 16), bool],) {
  %536 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
  %539 = cast(%var_3953, dtype="bool") /* ty=Tensor[(3, 2, 16), bool] */;
  %540 = logical_or(%538, %539) /* ty=Tensor[(3, 2, 16), bool] */;
  (%540,)
}

def @func_4707() -> (Tensor[(2, 2, 14), float64], Tensor[(?, 10, 10), float32]) {
  @func_4705() /* ty=(Tensor[(2, 2, 14), float64], Tensor[(?, 10, 10), float32]) */
}

def @func_7364() -> (Tensor[(1, 2, 16), float64],) {
  %544 = fn () -> (Tensor[(1, 2, 16), float64],) {
    %541 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
    %542 = cast(%541, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
    %543 = cos(%542) /* ty=Tensor[(1, 2, 16), float64] */;
    (%543,)
  };
  %544() /* ty=(Tensor[(1, 2, 16), float64],) */
}

def @func_1939(%var_1917: Tensor[(9, 15, 14), float32]) -> (Tensor[(9, 15, 14), float32], Tensor[(9, 15, 14), float32]) {
  %545 = cast(%var_1917, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %546 = cast(%var_1917, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %547 = atanh(%545) /* ty=Tensor[(9, 15, 14), float32] */;
  %548 = asin(%546) /* ty=Tensor[(9, 15, 14), float32] */;
  (%547, %548)
}

def @func_1613() -> (Tensor[(1, 2, 16), bool],) {
  @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */
}

def @func_3358() -> Tensor[(32), float64] {
  %549 = @func_2259() /* ty=(Tensor[(32), float64],) */;
  %549.0
}

def @func_3972(%var_3970: Tensor[(3, 2, 16), float32]) -> (Tensor[(3, 2, 16), bool],) {
  @func_3969(%var_3970) /* ty=(Tensor[(3, 2, 16), bool],) */
}

def @func_1942(%var_1940: Tensor[(9, 15, 14), float32]) -> (Tensor[(9, 15, 14), float32], Tensor[(9, 15, 14), float32]) {
  @func_1939(%var_1940) /* ty=(Tensor[(9, 15, 14), float32], Tensor[(9, 15, 14), float32]) */
}

def @func_2497() -> (Tensor[(4, 4, 16), float64],) {
  %550 = @func_989() /* ty=Tensor[(4, 4, 16), float64] */;
  (%550,)
}

def @func_3902(%var_3899: Tensor[(12, 10, 13), float64], %var_3900: Tensor[(2, 2, 14), float64], %var_3901: Tensor[(1568), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64]) {
  @func_3897(%var_3899, %var_3900, %var_3901) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64]) */
}

def @func_8009() -> (Tensor[(1, 2, 16), float32], Tensor[(32), float64], Tensor[(10, 2, 16), float64]) {
  %551 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %552 = @func_6791() /* ty=Tensor[(10, 2, 16), bool] */;
  %553 = cast(%552, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %554 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
  %555 = %551.0;
  %556 = sqrt(%553) /* ty=Tensor[(10, 2, 16), float64] */;
  (%554, %555, %556)
}

def @func_4863(%var_4861: Tensor[(8, 9, 7), int64], %var_4862: Tensor[(8, 9, 7), int64]) -> (Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) {
  @func_4859(%var_4861, %var_4862) /* ty=(Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) */
}

def @func_1683(%var_1681: Tensor[(1568), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64]) {
  @func_1680(%var_1681) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64]) */
}

def @func_7584(%var_7582: Tensor[(1, 7, 2), float32], %var_7583: Tensor[(1568), float64]) -> (Tensor[(1, 7, 2), float32], Tensor[(14, 7, 16), float64], Tensor[(1568), float64], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), float32]) {
  %568 = fn (%var_7534: Tensor[(1, 7, 2), float32], %var_7539: Tensor[(1568), float64]) -> (Tensor[(1, 7, 2), float32], Tensor[(14, 7, 16), float64], Tensor[(1568), float64], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), float32]) {
    %557 = cast(%var_7534, dtype="float32") /* ty=Tensor[(1, 7, 2), float32] */;
    %558 = cast(%var_7539, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %559 = reshape(%558, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %560 = @func_556(%559) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) */;
    %561 = @func_2686() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %562 = @func_5590() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %563 = exp(%557) /* ty=Tensor[(1, 7, 2), float32] */;
    %564 = %560.2;
    %565 = %561.0;
    %566 = %562.0;
    %567 = @func_5807() /* ty=Tensor[(1, 2, 16), float32] */;
    (%563, %564, %var_7539, %565, %566, %567)
  };
  %568(%var_7582, %var_7583) /* ty=(Tensor[(1, 7, 2), float32], Tensor[(14, 7, 16), float64], Tensor[(1568), float64], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), float32]) */
}

def @func_4558(%var_4539: Tensor[(16, 1, 13), float32], %var_4540: Tensor[(16, 3, 13), float32]) -> (Tensor[(3, 2, 16), bool], Tensor[(96, 1), float32], Tensor[(16, 3, 13), int32], Tensor[(1, 2, 16), bool]) {
  %569 = cast(meta[relay.Constant][25] /* ty=Tensor[(96, 1), float32] */, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %570 = reshape(%569, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float32] */;
  %571 = @func_3969(%570) /* ty=(Tensor[(3, 2, 16), bool],) */;
  %572 = cast(%var_4539, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %573 = cast(%var_4540, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
  %574 = power(%572, %573) /* ty=Tensor[(16, 3, 13), float32] */;
  %575 = cast(%574, dtype="int32") /* ty=Tensor[(16, 3, 13), int32] */;
  %576 = cast(%var_4539, dtype="int32") /* ty=Tensor[(16, 1, 13), int32] */;
  %577 = @func_3003() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %578 = %571.0;
  %579 = right_shift(%575, %576) /* ty=Tensor[(16, 3, 13), int32] */;
  %580 = %577.0;
  (%578, meta[relay.Constant][25] /* ty=Tensor[(96, 1), float32] */, %579, %580)
}

def @func_1058(%var_1013: Tensor[(1568), float64], %var_1014: Tensor[(16, 2), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(16, 2), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64], float64, Tensor[(840, 4), float64], Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), bool]) {
  %581 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %582 = cast(%var_1013, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %583 = cast(%var_1014, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  %584 = reshape(%582, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %585 = reshape(%583, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %586 = @func_256(%584, %585) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
  %587 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %588 = cast(-5.46812f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %589 = cast(meta[relay.Constant][26] /* ty=Tensor[(840, 4), float64] */, dtype="float64") /* ty=Tensor[(840, 4), float64] */;
  %590 = reshape(%588, newshape=[]) /* ty=float64 */;
  %591 = reshape(%589, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float64] */;
  %592 = @func_697(%590, %591) /* ty=(Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) */;
  %593 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %594 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %595 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
  %596 = %581.3;
  %597 = %586.2;
  %598 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %599 = %587.0;
  %600 = %592.2;
  %601 = %593.0;
  %602 = %594.3;
  %603 = %595.0;
  (%596, %597, %var_1013, %var_1014, %598, %599, %600, -5.46812f64 /* ty=float64 */, meta[relay.Constant][26] /* ty=Tensor[(840, 4), float64] */, %601, %602, %603)
}

def @func_3005() -> (Tensor[(1, 2, 16), bool],) {
  @func_3003() /* ty=(Tensor[(1, 2, 16), bool],) */
}

def @func_4918() -> Tensor[(1, 2, 16), bool] {
  %605 = fn () -> Tensor[(1, 2, 16), bool] {
    %604 = @func_1483() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(32), float64]) */;
    %604.0
  };
  %605() /* ty=Tensor[(1, 2, 16), bool] */
}

def @func_8364(%var_8332: Tensor[(8, 2, 16), float32], %var_8355: Tensor[(8, 2, 16), float32]) -> (Tensor[(8, 2, 16), int16], Tensor[(8, 2, 16), float32]) {
  %606 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
  %607 = %606.0;
  %608 = cast(%607, dtype="int16") /* ty=Tensor[(1, 2, 16), int16] */;
  %609 = cast(%var_8332, dtype="int16") /* ty=Tensor[(8, 2, 16), int16] */;
  %610 = cast(%var_8355, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %611 = shape_of(%var_8332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_8332, dtype="float32") /* ty=Tensor[(8, 2, 16), float32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %614 = maximum(%608, %609) /* ty=Tensor[(8, 2, 16), int16] */;
  %615 = power(%612, %613) /* ty=Tensor[(8, 2, 16), float32] */;
  (%614, %615)
}

def @func_1485() -> (Tensor[(1, 2, 16), bool], Tensor[(32), float64]) {
  @func_1483() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(32), float64]) */
}

def @func_8402() -> (Tensor[(84), float32],) {
  @func_8400() /* ty=(Tensor[(84), float32],) */
}

def @func_1820() -> (Tensor[(4, 4, 16), int8],) {
  %617 = fn () -> (Tensor[(4, 4, 16), int8],) {
    %616 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
    (%616,)
  };
  %617() /* ty=(Tensor[(4, 4, 16), int8],) */
}

def @func_2704() -> (Tensor[(2, 2, 14), float64],) {
  @func_2702() /* ty=(Tensor[(2, 2, 14), float64],) */
}

def @func_7134() -> (Tensor[(15, 5, 16), int32],) {
  %618 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %619 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 5, 16), int32] */, dtype="int32") /* ty=Tensor[(15, 5, 16), int32] */;
  %620 = left_shift(%618, %619) /* ty=Tensor[(15, 5, 16), int32] */;
  (%620,)
}

def @func_3397() -> (Tensor[(32), float64], Tensor[(4, 4, 16), float64]) {
  @func_3395() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float64]) */
}

def @func_1792() -> (Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  %621 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
  %622 = %621.0;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
  %624 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %625 = asinh(%623) /* ty=Tensor[(1, 2, 16), float64] */;
  %626 = %624.0;
  (%625, %626)
}

def @func_3360() -> Tensor[(32), float64] {
  @func_3358() /* ty=Tensor[(32), float64] */
}

def @func_2702() -> (Tensor[(2, 2, 14), float64],) {
  %627 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %628 = %627.1;
  (%628,)
}

def @func_3003() -> (Tensor[(1, 2, 16), bool],) {
  %629 = @func_2792() /* ty=Tensor[(1, 2, 16), bool] */;
  (%629,)
}

def @func_1062(%var_1060: Tensor[(1568), float64], %var_1061: Tensor[(16, 2), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(16, 2), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64], float64, Tensor[(840, 4), float64], Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), bool]) {
  @func_1058(%var_1060, %var_1061) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(32), float64], Tensor[(1568), float64], Tensor[(16, 2), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64], float64, Tensor[(840, 4), float64], Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), bool]) */
}

def @func_5928() -> Tensor[(4, 4, 16), float64] {
  %630 = @func_5656() /* ty=(Tensor[(4, 4, 16), float64], Tensor[(32), float64], Tensor[(4, 4, 16), bool], uint8, Tensor[(4, 4, 16), bool]) */;
  %630.0
}

def @func_2284(%var_2267: Tensor[(10, 15, 11), float64]) -> (Tensor[(10, 15, 11), float64], Tensor[(2, 2, 14), float64]) {
  %631 = cast(%var_2267, dtype="float64") /* ty=Tensor[(10, 15, 11), float64] */;
  %632 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %633 = atanh(%631) /* ty=Tensor[(10, 15, 11), float64] */;
  %634 = %632.0;
  (%633, %634)
}

def @func_1483() -> (Tensor[(1, 2, 16), bool], Tensor[(32), float64]) {
  %635 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %636 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %637 = %635.1;
  %638 = %636.0;
  (%637, %638)
}

def @func_721() -> Tensor[(4, 4, 16), int8] {
  %640 = fn () -> Tensor[(4, 4, 16), int8] {
    %639 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
    %639.0
  };
  %640() /* ty=Tensor[(4, 4, 16), int8] */
}

def @func_4431(%var_4430: Tensor[(4, 4, 16), float64]) -> (Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), float32]) {
  %649 = fn (%var_4421: Tensor[(4, 4, 16), float64]) -> (Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), float32]) {
    %641 = @func_2924() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), float64]) */;
    %642 = %641.2;
    %643 = cast(%var_4421, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
    %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%642, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %647 = floor_mod(%645, %646) /* ty=Tensor[(4, 4, 16), float64] */;
    %648 = @func_4223() /* ty=Tensor[(4, 4, 16), float32] */;
    (%647, %648)
  };
  %649(%var_4430) /* ty=(Tensor[(4, 4, 16), float64], Tensor[(4, 4, 16), float32]) */
}

def @func_6278() -> (Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool]) {
  %660 = fn () -> (Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool]) {
    %650 = @func_5147() /* ty=Tensor[(4, 4, 16), bool] */;
    %651 = cast(%650, dtype="int8") /* ty=Tensor[(4, 4, 16), int8] */;
    %652 = reshape(%651, newshape=[4, 4, 16]) /* ty=Tensor[(4, 4, 16), int8] */;
    %653 = @func_3033(%652) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), bool]) */;
    %654 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
    %655 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
    %656 = @func_575() /* ty=Tensor[(4, 4, 16), bool] */;
    %657 = %653.0;
    %658 = %654.1;
    %659 = %655.0;
    (%656, %650, %657, %658, %659)
  };
  %660() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), bool]) */
}

def @func_5125(%var_5123: Tensor[(6, 7, 12), int64]) -> Tensor[(6, 7, 12), bool] {
  @func_5122(%var_5123) /* ty=Tensor[(6, 7, 12), bool] */
}

def @func_556(%var_554: Tensor[(1568), float64]) -> (Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) {
  %661 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
  %662 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %663 = cast(%var_554, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %664 = %661.0;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(32), float64] */;
  %666 = reshape(%663, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %667 = reshape(%665, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %668 = @func_256(%666, %667) /* ty=(Tensor[(14, 7, 16), float64], Tensor[(1, 2, 16), uint8], Tensor[(32), float64]) */;
  %669 = %662.0;
  %670 = %668.0;
  (%664, %669, %670, %var_554)
}

def @func_2054() -> (Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) {
  @func_2052() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */
}

def @func_4149() -> (Tensor[(2, 2, 14), float32],) {
  %671 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %672 = %671.0;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %674 = tan(%673) /* ty=Tensor[(2, 2, 14), float32] */;
  (%674,)
}

def @func_3486(%var_3484: uint8) -> (Tensor[(4, 4, 16), bool], Tensor[(13, 16, 11), float32]) {
  @func_3483(%var_3484) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(13, 16, 11), float32]) */
}

def @func_8368(%var_8366: Tensor[(8, 2, 16), float32], %var_8367: Tensor[(8, 2, 16), float32]) -> (Tensor[(8, 2, 16), int16], Tensor[(8, 2, 16), float32]) {
  @func_8364(%var_8366, %var_8367) /* ty=(Tensor[(8, 2, 16), int16], Tensor[(8, 2, 16), float32]) */
}

def @func_5592() -> (Tensor[(4, 4, 16), int8],) {
  @func_5590() /* ty=(Tensor[(4, 4, 16), int8],) */
}

def @func_323() -> Tensor[(2, 2, 14), float64] {
  %676 = fn () -> Tensor[(2, 2, 14), float64] {
    %675 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 2, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 14), float64] */;
    log10(%675) /* ty=Tensor[(2, 2, 14), float64] */
  };
  %676() /* ty=Tensor[(2, 2, 14), float64] */
}

def @func_6618(%var_6616: Tensor[(2, 2, 14), float64]) -> (Tensor[(2, 2, 14), bool], Tensor[(2, 2, 14), float32]) {
  @func_6615(%var_6616) /* ty=(Tensor[(2, 2, 14), bool], Tensor[(2, 2, 14), float32]) */
}

def @func_6684() -> (Tensor[(4, 4, 16), float32], Tensor[(4, 4, 16), int8], Tensor[(84), float32], Tensor[(32), float64]) {
  %677 = @func_4223() /* ty=Tensor[(4, 4, 16), float32] */;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(4, 4, 16), float32] */;
  %679 = cast(meta[relay.Constant][29] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %680 = reshape(%679, newshape=[2, 7, 6]) /* ty=Tensor[(2, 7, 6), float32] */;
  %681 = @func_5825(%680) /* ty=(Tensor[(2, 7, 6), float32], Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), int8]) */;
  %682 = @func_1545() /* ty=(Tensor[(32), float64],) */;
  %683 = log2(%678) /* ty=Tensor[(4, 4, 16), float32] */;
  %684 = %681.2;
  %685 = %682.0;
  (%683, %684, meta[relay.Constant][29] /* ty=Tensor[(84), float32] */, %685)
}

def @func_2287(%var_2285: Tensor[(10, 15, 11), float64]) -> (Tensor[(10, 15, 11), float64], Tensor[(2, 2, 14), float64]) {
  @func_2284(%var_2285) /* ty=(Tensor[(10, 15, 11), float64], Tensor[(2, 2, 14), float64]) */
}

def @func_482() -> (Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) {
  %686 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %687 = %686.2;
  %688 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %689 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %690 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  (%687, %688, %689, %690)
}

def @func_3121() -> (Tensor[(32), float64],) {
  %693 = fn () -> (Tensor[(32), float64],) {
    %691 = @func_2259() /* ty=(Tensor[(32), float64],) */;
    %692 = %691.0;
    (%692,)
  };
  %693() /* ty=(Tensor[(32), float64],) */
}

def @func_8284() -> Tensor[(4, 4, 16), bool] {
  %694 = @func_3798() /* ty=(Tensor[(4, 4, 16), bool], Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), float64]) */;
  %694.0
}

def @func_313() -> (Tensor[(4, 4, 16), int8],) {
  %697 = fn () -> (Tensor[(4, 4, 16), int8],) {
    %695 = @func_284() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(1, 2, 16), bool], Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
    %696 = %695.0;
    (%696,)
  };
  %697() /* ty=(Tensor[(4, 4, 16), int8],) */
}

def @func_3035(%var_3034: Tensor[(4, 4, 16), int8]) -> (Tensor[(32), float64], Tensor[(4, 4, 16), bool]) {
  %706 = fn (%var_3028: Tensor[(4, 4, 16), int8]) -> (Tensor[(32), float64], Tensor[(4, 4, 16), bool]) {
    %698 = @func_1545() /* ty=(Tensor[(32), float64],) */;
    %699 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
    %700 = cast(%var_3028, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %702 = cast(%699, dtype="bool") /* ty=Tensor[(4, 4, 16), bool] */;
    %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %704 = %698.0;
    %705 = greater(%702, %703) /* ty=Tensor[(4, 4, 16), bool] */;
    (%704, %705)
  };
  %706(%var_3034) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), bool]) */
}

def @func_576() -> Tensor[(4, 4, 16), bool] {
  %708 = fn () -> Tensor[(4, 4, 16), bool] {
    %707 = @func_513() /* ty=(Tensor[(4, 4, 16), bool],) */;
    %707.0
  };
  %708() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_5431() -> Tensor[(4, 4, 16), bool] {
  @func_5429() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_7954(%var_7952: Tensor[(1568), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(32), float64], Tensor[(1568), float32]) {
  @func_7951(%var_7952) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(32), float64], Tensor[(1568), float32]) */
}

def @func_6004() -> Tensor[(1, 2, 16), bool] {
  @func_6002() /* ty=Tensor[(1, 2, 16), bool] */
}

def @func_3325() -> (Tensor[(32), float64],) {
  %711 = fn () -> (Tensor[(32), float64],) {
    %709 = @func_1483() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(32), float64]) */;
    %710 = %709.1;
    (%710,)
  };
  %711() /* ty=(Tensor[(32), float64],) */
}

def @func_1223() -> (Tensor[(2, 2, 14), float64],) {
  %714 = fn () -> (Tensor[(2, 2, 14), float64],) {
    %712 = @func_482() /* ty=(Tensor[(32), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64], Tensor[(2, 2, 14), float64]) */;
    %713 = %712.1;
    (%713,)
  };
  %714() /* ty=(Tensor[(2, 2, 14), float64],) */
}

def @func_3937() -> Tensor[(32), float64] {
  %716 = fn () -> Tensor[(32), float64] {
    %715 = @func_2259() /* ty=(Tensor[(32), float64],) */;
    %715.0
  };
  %716() /* ty=Tensor[(32), float64] */
}

def @func_3051(%var_3041: Tensor[(2, 2, 14), float64]) -> (Tensor[(2, 2, 14), float32],) {
  %717 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
  %718 = cast(%var_3041, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %722 = mod(%720, %721) /* ty=Tensor[(2, 2, 14), float32] */;
  (%722,)
}

def @func_5492() -> Tensor[(4, 4, 16), int16] {
  %723 = @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */;
  %724 = %723.1;
  %725 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 4, 16), float32] */, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="int16") /* ty=Tensor[(4, 4, 16), int16] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%727, %728) /* ty=Tensor[(4, 4, 16), int16] */
}

def @func_8286() -> Tensor[(4, 4, 16), bool] {
  @func_8284() /* ty=Tensor[(4, 4, 16), bool] */
}

def @func_2687() -> (Tensor[(2, 2, 14), float64],) {
  %730 = fn () -> (Tensor[(2, 2, 14), float64],) {
    %729 = @func_322() /* ty=Tensor[(2, 2, 14), float64] */;
    (%729,)
  };
  %730() /* ty=(Tensor[(2, 2, 14), float64],) */
}

def @func_3507(%var_3505: float32) -> (Tensor[(4, 4, 2), bool], Tensor[(4, 4, 2), float32]) {
  @func_3504(%var_3505) /* ty=(Tensor[(4, 4, 2), bool], Tensor[(4, 4, 2), float32]) */
}

def @func_8507() -> (Tensor[(2, 2, 16), int64],) {
  @func_8505() /* ty=(Tensor[(2, 2, 16), int64],) */
}

def @func_4015() -> (Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), bool]) {
  @func_4013() /* ty=(Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), bool]) */
}

def @func_3734(%var_3733: Tensor[(16, 2, 16), float64]) -> (Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) {
  %750 = fn (%var_3684: Tensor[(16, 2, 16), float64]) -> (Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) {
    %731 = @func_3395() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float64]) */;
    %732 = @func_1611() /* ty=(Tensor[(1, 2, 16), bool],) */;
    %733 = %732.0;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(1, 2, 16), float64] */;
    %735 = rsqrt(%734) /* ty=Tensor[(1, 2, 16), float64] */;
    %736 = cast(%735, dtype="int16") /* ty=Tensor[(1, 2, 16), int16] */;
    %737 = cast(%var_3684, dtype="int16") /* ty=Tensor[(16, 2, 16), int16] */;
    %738 = maximum(%736, %737) /* ty=Tensor[(16, 2, 16), int16] */;
    %739 = cast(%733, dtype="int8") /* ty=Tensor[(1, 2, 16), int8] */;
    %740 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%735, dtype="int8") /* ty=Tensor[(1, 2, 16), int8] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %743 = maximum(%741, %742) /* ty=Tensor[(?, 2, 16), int8] */;
    %744 = cast(%738, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
    %745 = cast(%743, dtype="float64") /* ty=Tensor[(?, 2, 16), float64] */;
    %746 = cast(%738, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
    %747 = %731.0;
    %748 = multiply(%744, %745) /* ty=Tensor[(16, 2, 16), float64] */;
    %749 = tan(%746) /* ty=Tensor[(16, 2, 16), float32] */;
    (%747, %748, %749)
  };
  %750(%var_3733) /* ty=(Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) */
}

def @func_8505() -> (Tensor[(2, 2, 16), int64],) {
  %751 = @func_2052() /* ty=(Tensor[(1, 2, 16), bool], Tensor[(9, 15, 2), float32], Tensor[(270), float32], Tensor[(4, 4, 16), int8], Tensor[(1568), float64], Tensor[(1, 2, 16), float64], Tensor[(4, 4, 16), int8]) */;
  %752 = %751.0;
  %753 = cast(%752, dtype="int64") /* ty=Tensor[(1, 2, 16), int64] */;
  %754 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 2, 16), bool] */, dtype="int64") /* ty=Tensor[(2, 2, 16), int64] */;
  %755 = right_shift(%753, %754) /* ty=Tensor[(2, 2, 16), int64] */;
  (%755,)
}

def @func_697(%var_661: float64, %var_662: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), int32], Tensor[(4, 4, 16), int8], Tensor[(16, 15, 14), int64]) {
  %756 = cast(%var_661, dtype="bool") /* ty=bool */;
  %757 = cast(%var_662, dtype="bool") /* ty=Tensor[(16, 15, 14), bool] */;
  %758 = less(%756, %757) /* ty=Tensor[(16, 15, 14), bool] */;
  %759 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 15, 14), bool] */, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %763 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %764 = cast(%758, dtype="int64") /* ty=Tensor[(16, 15, 14), int64] */;
  %765 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(16, 15, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 15, 14), bool] */, dtype="int64") /* ty=Tensor[(16, 15, 14), int64] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %768 = minimum(%761, %762) /* ty=Tensor[(16, 15, 14), int32] */;
  %769 = %763.0;
  %770 = logical_xor(%766, %767) /* ty=Tensor[(16, 15, 14), int64] */;
  (%768, %769, %770)
}

def @func_1403() -> (Tensor[(32), float64], Tensor[(4, 4, 16), float32]) {
  @func_1401() /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), float32]) */
}

def @func_4502(%var_4479: Tensor[(32), float64], %var_4481: Tensor[(32), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(32), bool], Tensor[(32), float64]) {
  %771 = @func_312() /* ty=(Tensor[(4, 4, 16), int8],) */;
  %772 = cast(%var_4479, dtype="float64") /* ty=Tensor[(32), float64] */;
  %773 = reshape(%772, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %774 = @func_794(%773) /* ty=(Tensor[(4, 4, 16), bool], Tensor[(1, 2, 16), uint8], Tensor[(1568), float64], Tensor[(32), float64]) */;
  %775 = %774.3;
  %776 = cast(%var_4481, dtype="bool") /* ty=Tensor[(32), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(1), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(32), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?), bool] */;
  %780 = cast(%var_4479, dtype="float64") /* ty=Tensor[(32), float64] */;
  %781 = %771.0;
  %782 = greater_equal(%778, %779) /* ty=Tensor[(32), bool] */;
  %783 = cos(%780) /* ty=Tensor[(32), float64] */;
  (%781, %782, %783)
}

def @func_4562(%var_4560: Tensor[(16, 1, 13), float32], %var_4561: Tensor[(16, 3, 13), float32]) -> (Tensor[(3, 2, 16), bool], Tensor[(96, 1), float32], Tensor[(16, 3, 13), int32], Tensor[(1, 2, 16), bool]) {
  @func_4558(%var_4560, %var_4561) /* ty=(Tensor[(3, 2, 16), bool], Tensor[(96, 1), float32], Tensor[(16, 3, 13), int32], Tensor[(1, 2, 16), bool]) */
}

def @func_7167(%var_7166: Tensor[(504), int64]) -> (Tensor[(2, 2, 14), float64], Tensor[(8, 9, 7), float64], Tensor[(504), int64]) {
  %792 = fn (%var_7160: Tensor[(504), int64]) -> (Tensor[(2, 2, 14), float64], Tensor[(8, 9, 7), float64], Tensor[(504), int64]) {
    %784 = @func_2686() /* ty=(Tensor[(2, 2, 14), float64],) */;
    %785 = cast(%var_7160, dtype="int64") /* ty=Tensor[(504), int64] */;
    %786 = cast(%var_7160, dtype="int64") /* ty=Tensor[(504), int64] */;
    %787 = reshape(%785, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
    %788 = reshape(%786, newshape=[8, 9, 7]) /* ty=Tensor[(8, 9, 7), int64] */;
    %789 = @func_4859(%787, %788) /* ty=(Tensor[(8, 9, 7), float64], Tensor[(8, 9, 7), bool]) */;
    %790 = %784.0;
    %791 = %789.0;
    (%790, %791, %var_7160)
  };
  %792(%var_7166) /* ty=(Tensor[(2, 2, 14), float64], Tensor[(8, 9, 7), float64], Tensor[(504), int64]) */
}

def @func_1680(%var_1678: Tensor[(1568), float64]) -> (Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), int8], Tensor[(1568), float64]) {
  %793 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %794 = cast(%var_1678, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %795 = reshape(%794, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %796 = @func_556(%795) /* ty=(Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(14, 7, 16), float64], Tensor[(1568), float64]) */;
  %797 = %793.0;
  %798 = %796.1;
  (%797, %798, %var_1678)
}

def @func_6978() -> (Tensor[(32), float64], Tensor[(4, 4, 16), int8], Tensor[(6, 7, 12), bool], Tensor[(36, 14), int64]) {
  %799 = cast(meta[relay.Constant][33] /* ty=Tensor[(36, 14), int64] */, dtype="int64") /* ty=Tensor[(36, 14), int64] */;
  %800 = reshape(%799, newshape=[6, 7, 12]) /* ty=Tensor[(6, 7, 12), int64] */;
  %801 = @func_3358() /* ty=Tensor[(32), float64] */;
  %802 = @func_742() /* ty=Tensor[(4, 4, 16), int8] */;
  %803 = @func_5122(%800) /* ty=Tensor[(6, 7, 12), bool] */;
  (%801, %802, %803, meta[relay.Constant][33] /* ty=Tensor[(36, 14), int64] */)
}

def @func_2150(%var_2148: Tensor[(1568), float64]) -> (Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8]) {
  @func_2147(%var_2148) /* ty=(Tensor[(4, 4, 16), int8], Tensor[(2, 2, 14), float64], Tensor[(4, 4, 16), float32], Tensor[(1568), float64], Tensor[(4, 4, 16), int8], Tensor[(4, 4, 16), int8]) */
}

def @func_8011() -> (Tensor[(1, 2, 16), float32], Tensor[(32), float64], Tensor[(10, 2, 16), float64]) {
  @func_8009() /* ty=(Tensor[(1, 2, 16), float32], Tensor[(32), float64], Tensor[(10, 2, 16), float64]) */
}

def @func_7487(%var_7485: Tensor[(5, 15, 16), int32], %var_7486: Tensor[(5, 15, 16), int32]) -> (Tensor[(5, 15, 16), int32], Tensor[(10, 2, 16), bool]) {
  %811 = fn (%var_7464: Tensor[(5, 15, 16), int32], %var_7465: Tensor[(5, 15, 16), int32]) -> (Tensor[(5, 15, 16), int32], Tensor[(10, 2, 16), bool]) {
    %804 = cast(%var_7465, dtype="int32") /* ty=Tensor[(5, 15, 16), int32] */;
    %805 = shape_of(%var_7464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(%var_7464, dtype="int32") /* ty=Tensor[(5, 15, 16), int32] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %808 = @func_7314() /* ty=(Tensor[(10, 2, 16), bool], Tensor[(4, 4, 16), int8]) */;
    %809 = maximum(%806, %807) /* ty=Tensor[(5, 15, 16), int32] */;
    %810 = %808.0;
    (%809, %810)
  };
  %811(%var_7485, %var_7486) /* ty=(Tensor[(5, 15, 16), int32], Tensor[(10, 2, 16), bool]) */
}

def @func_7674(%var_7673: int16) -> (Tensor[(1, 2, 10), float64], Tensor[(4, 4, 16), int64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 16), bool]) {
  %827 = fn (%var_7634: int16) -> (Tensor[(1, 2, 10), float64], Tensor[(4, 4, 16), int64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 16), bool]) {
    %812 = cast(%var_7634, dtype="bool") /* ty=bool */;
    %813 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 2, 10), int16] */, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
    %814 = greater_equal(%812, %813) /* ty=Tensor[(1, 2, 10), bool] */;
    %815 = cast(%var_7634, dtype="float64") /* ty=float64 */;
    %816 = cast(%814, dtype="float64") /* ty=Tensor[(1, 2, 10), float64] */;
    %817 = @func_7088() /* ty=(Tensor[(4, 4, 16), int64], Tensor[(2, 2, 14), float32], Tensor[(56, 1), float64]) */;
    %818 = cast(meta[relay.Constant][35] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
    %819 = reshape(%818, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
    %820 = @func_3732(%819) /* ty=(Tensor[(32), float64], Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32]) */;
    %821 = cast(%814, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
    %822 = mod(%815, %816) /* ty=Tensor[(1, 2, 10), float64] */;
    %823 = %817.0;
    %824 = %820.1;
    %825 = log2(%821) /* ty=Tensor[(1, 2, 10), float32] */;
    %826 = @func_4917() /* ty=Tensor[(1, 2, 16), bool] */;
    (%822, %823, %824, meta[relay.Constant][35] /* ty=Tensor[(512), float64] */, %825, %826)
  };
  %827(%var_7673) /* ty=(Tensor[(1, 2, 10), float64], Tensor[(4, 4, 16), int64], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 16), bool]) */
}

def @func_8077(%var_8075: Tensor[(10, 2, 16), bool], %var_8076: Tensor[(1200), int32]) -> (Tensor[(32), float64], Tensor[(10, 2, 16), int64], Tensor[(10, 2, 16), bool], Tensor[(1200), int32]) {
  @func_8073(%var_8075, %var_8076) /* ty=(Tensor[(32), float64], Tensor[(10, 2, 16), int64], Tensor[(10, 2, 16), bool], Tensor[(1200), int32]) */
}

def @func_6615(%var_6611: Tensor[(2, 2, 14), float64]) -> (Tensor[(2, 2, 14), bool], Tensor[(2, 2, 14), float32]) {
  %828 = @func_1466() /* ty=(Tensor[(2, 2, 14), float64],) */;
  %829 = %828.0;
  %830 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 2, 14), float64] */, dtype="bool") /* ty=Tensor[(2, 2, 14), bool] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%829, dtype="bool") /* ty=Tensor[(2, 2, 14), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = cast(%var_6611, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %835 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(2, 2, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 2, 14), float64] */, dtype="float32") /* ty=Tensor[(2, 2, 14), float32] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %838 = not_equal(%832, %833) /* ty=Tensor[(2, 2, 14), bool] */;
  %839 = floor_divide(%836, %837) /* ty=Tensor[(2, 2, 14), float32] */;
  (%838, %839)
}

def @func_1170() -> (Tensor[(4, 4, 16), int8], Tensor[(?, 10, 10), float32]) {
  %840 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %841 = sinh(%840) /* ty=Tensor[(1, 10, 10), float32] */;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %843 = log10(%842) /* ty=Tensor[(1, 10, 10), float32] */;
  %844 = cast(%843, dtype="float64") /* ty=Tensor[(1, 10, 10), float64] */;
  %845 = cosh(%844) /* ty=Tensor[(1, 10, 10), float64] */;
  %846 = cast(%845, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %847 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%843, dtype="float32") /* ty=Tensor[(1, 10, 10), float32] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %850 = @func_720() /* ty=Tensor[(4, 4, 16), int8] */;
  %851 = floor_divide(%848, %849) /* ty=Tensor[(?, 10, 10), float32] */;
  (%850, %851)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen147/build/output.py:2673: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen147/build/output.py:2678: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen147/build/output.py:2708: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen147/build/output.py:2713: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen147/build/output.py:2718: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen147/build/output.py:2723: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %0 = (%l, %r);
  match (%0) {
    (Zero(_), _) => {
      %r
    },
    (_, Zero(_)) => {
      %l
    },
    _ => {
      %1 = match (%l) {
        Raw(%x: T) => {
          %x
        },
        One(%x1: fn () -> T) => {
          %x1()
        },
        Zero(%x2: fn () -> T) => {
          %x2()
        },
      };
      %2 = match (%r) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4()
        },
        Zero(%x5: fn () -> T) => {
          %x5()
        },
      };
      %3 = %add(%1, %2);
      Raw(%3)
    },
  }
}

def @main() -> (Tensor[(3, 2, 7), float64], ()) {
  %4 = ();
  (meta[relay.Constant][0] /* ty=Tensor[(3, 2, 7), float64] */, %4)
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x6: T) => {
      %x6
    },
    One(%x7: fn () -> T) => {
      %x7()
    },
    Zero(%x8: fn () -> T) => {
      %x8()
    },
  }
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %5 = (%l1, %r1);
  match (%5) {
    (Zero(_), _) => {
      %l1
    },
    (_, Zero(_)) => {
      %r1
    },
    (One(_), _) => {
      %r1
    },
    (_, One(_)) => {
      %l1
    },
    _ => {
      %6 = match (%l1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10()
        },
        Zero(%x11: fn () -> T) => {
          %x11()
        },
      };
      %7 = match (%r1) {
        Raw(%x12: T) => {
          %x12
        },
        One(%x13: fn () -> T) => {
          %x13()
        },
        Zero(%x14: fn () -> T) => {
          %x14()
        },
      };
      %8 = %multiply(%6, %7);
      Raw(%8)
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
