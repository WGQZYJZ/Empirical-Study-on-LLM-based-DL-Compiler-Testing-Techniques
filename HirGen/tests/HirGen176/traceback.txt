==========mod==========
#[version = "0.0.5"]
def @func_6502() -> Tensor[(63), float32] {
  %0 = @func_5500() /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(336), float64]) */;
  %0.0
}

def @func_1049(%var_1040: Tensor[(11, 16, 2), float32]) -> Tensor[(11, 16, 2), float32] {
  %1 = cast(%var_1040, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  asinh(%1) /* ty=Tensor[(11, 16, 2), float32] */
}

def @func_2788(%var_2783: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), float64],) {
  %2 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %3 = %2.0;
  %4 = cast(%var_2783, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%3, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %8 = floor_divide(%6, %7) /* ty=Tensor[(6, 8, 5), float64] */;
  (%8,)
}

def @func_4663(%var_4629: Tensor[(11, 7, 9), float64], %var_4643: Tensor[(210), int8], %var_4647: Tensor[(672), float64]) -> (Tensor[(11, 7, 9), float64], Tensor[(728), float32], Tensor[(210), int8], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(5, 6, 7), bool]) {
  %9 = cast(%var_4629, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
  %10 = cast(%var_4643, dtype="int8") /* ty=Tensor[(210), int8] */;
  %11 = reshape(%10, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
  %12 = @func_1403(%11) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
  %13 = cast(%var_4647, dtype="float64") /* ty=Tensor[(672), float64] */;
  %14 = reshape(%13, newshape=[4, 14, 12]) /* ty=Tensor[(4, 14, 12), float64] */;
  %15 = cast(%var_4643, dtype="int8") /* ty=Tensor[(210), int8] */;
  %16 = reshape(%15, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
  %17 = @func_1403(%16) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
  %18 = sigmoid(%9) /* ty=Tensor[(11, 7, 9), float64] */;
  %19 = %12.1;
  %20 = @func_767(%14) /* ty=Tensor[(4, 14, 12), float64] */;
  %21 = %17.3;
  (%18, %19, %var_4643, %20, %var_4647, %21)
}

def @func_3848() -> (Tensor[(63), float32],) {
  %22 = @func_3600() /* ty=(Tensor[(63), float32],) */;
  %23 = %22.0;
  (%23,)
}

def @func_4608(%var_4560: Tensor[(6, 5, 11), float32], %var_4580: Tensor[(6, 5, 11), float32], %var_4584: Tensor[(6, 5, 11), bool], %var_4589: Tensor[(52), float64]) -> (Tensor[(?, 4, 13), bool], Tensor[(52), float64], Tensor[(6, 5, 11), int16]) {
  %24 = cast(%var_4589, dtype="float64") /* ty=Tensor[(52), float64] */;
  %25 = reshape(%24, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %26 = cast(%var_4560, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %27 = sigmoid(%26) /* ty=Tensor[(6, 5, 11), float32] */;
  %28 = cast(%var_4580, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = less_equal(%30, %31) /* ty=Tensor[(6, 5, 11), bool] */;
  %33 = cast(%var_4584, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = equal(%35, %36) /* ty=Tensor[(6, 5, 11), bool] */;
  %38 = cast(%37, dtype="int16") /* ty=Tensor[(6, 5, 11), int16] */;
  %39 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%32, dtype="int16") /* ty=Tensor[(6, 5, 11), int16] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %42 = @func_1197(%25) /* ty=Tensor[(?, 4, 13), bool] */;
  %43 = multiply(%40, %41) /* ty=Tensor[(6, 5, 11), int16] */;
  (%42, %var_4589, %43)
}

def @func_4885() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  %44 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(63), float32] */;
  %47 = sqrt(%46) /* ty=Tensor[(63), float32] */;
  %48 = @func_4446() /* ty=Tensor[(6, 8, 5), float32] */;
  (%47, %48)
}

def @func_2205(%var_2182: Tensor[(13, 7, 13), float32], %var_2183: Tensor[(13, 7, 13), float32]) -> (Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) {
  %49 = cast(%var_2183, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %50 = shape_of(%var_2182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_2182, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %53 = cast(meta[relay.Constant][0] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %54 = reshape(%53, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %55 = floor_mod(%51, %52) /* ty=Tensor[(13, 7, 13), float32] */;
  %56 = @func_1197(%54) /* ty=Tensor[(?, 4, 13), bool] */;
  (%55, %56, meta[relay.Constant][0] /* ty=Tensor[(52), float64] */)
}

def @func_3966(%var_3906: Tensor[(11, 14, 13), float32]) -> (Tensor[(11, 14, 13), bool], Tensor[(11, 14, 13), float64], Tensor[(6, 8, 5), float32]) {
  %57 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 14, 13), float32] */, dtype="bool") /* ty=Tensor[(11, 14, 13), bool] */;
  %58 = shape_of(%var_3906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%var_3906, dtype="bool") /* ty=Tensor[(11, 14, 13), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = cast(%var_3906, dtype="float64") /* ty=Tensor[(11, 14, 13), float64] */;
  %62 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %63 = less(%59, %60) /* ty=Tensor[(11, 14, 13), bool] */;
  %64 = log2(%61) /* ty=Tensor[(11, 14, 13), float64] */;
  %65 = %62.0;
  (%63, %64, %65)
}

def @func_2245(%var_2229: Tensor[(11, 16, 5), int32]) -> (Tensor[(11, 16, 5), int32],) {
  %66 = cast(%var_2229, dtype="int32") /* ty=Tensor[(11, 16, 5), int32] */;
  %67 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(11, 16, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 16, 5), int32] */, dtype="int32") /* ty=Tensor[(11, 16, 5), int32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %70 = maximum(%68, %69) /* ty=Tensor[(11, 16, 5), int32] */;
  (%70,)
}

def @func_3652() -> Tensor[(13, 7, 13), float32] {
  %71 = @func_3359() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) */;
  %71.1
}

def @func_5617(%var_5603: Tensor[(780), int64], %var_5604: Tensor[(480), uint64], %var_5609: Tensor[(5, 11, 11), bool]) -> (Tensor[(2, 240), uint64], Tensor[(780), int64], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) {
  %72 = cast(%var_5603, dtype="int64") /* ty=Tensor[(780), int64] */;
  %73 = cast(%var_5604, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %74 = reshape(%72, newshape=[15, 4, 13]) /* ty=Tensor[(15, 4, 13), int64] */;
  %75 = reshape(%73, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint64] */;
  %76 = @func_2481(%74, %75) /* ty=(Tensor[(15, 4, 13), int64], Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(16, 10, 3), uint64], Tensor[(2, 240), uint64], Tensor[(11, 16, 2), float32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(352), float32]) */;
  %77 = @func_5319() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %78 = %77.0;
  %79 = cast(%var_5609, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %83 = %76.4;
  %84 = floor_divide(%81, %82) /* ty=Tensor[(5, 11, 11), float64] */;
  (%83, %var_5603, %var_5604, %84)
}

def @func_6338() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  %85 = @func_2936() /* ty=Tensor[(63), float32] */;
  %86 = @func_4446() /* ty=Tensor[(6, 8, 5), float32] */;
  (%85, %86)
}

def @func_6058(%var_6020: Tensor[(420), int32]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(10, 6, 7), int32], Tensor[(420), int32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(6, 8, 5), float64], Tensor[(240), float32]) {
  %87 = @func_3600() /* ty=(Tensor[(63), float32],) */;
  %88 = @func_3006() /* ty=Tensor[(63), float32] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(63), float32] */;
  %90 = cast(%var_6020, dtype="int32") /* ty=Tensor[(420), int32] */;
  %91 = reshape(%90, newshape=[10, 6, 7]) /* ty=Tensor[(10, 6, 7), int32] */;
  %92 = @func_3803(%91) /* ty=(Tensor[(10, 6, 7), int32], Tensor[(6, 8, 5), float32]) */;
  %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %95 = reshape(%93, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %96 = reshape(%94, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %97 = @func_2205(%95, %96) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %100 = reshape(%98, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %101 = reshape(%99, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %102 = @func_3142(%100, %101) /* ty=(Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) */;
  %103 = @func_3317() /* ty=Tensor[(63), float32] */;
  %104 = %87.0;
  %105 = asinh(%89) /* ty=Tensor[(63), float32] */;
  %106 = %92.0;
  %107 = %97.0;
  %108 = %102.0;
  (%103, %104, %105, %106, %var_6020, %107, meta[relay.Constant][3] /* ty=Tensor[(1183), float32] */, %108, meta[relay.Constant][4] /* ty=Tensor[(240), float32] */)
}

def @func_4679() -> Tensor[(63), float32] {
  @func_3317() /* ty=Tensor[(63), float32] */
}

def @func_5727() -> (Tensor[(63), float32],) {
  %109 = @func_3419() /* ty=(Tensor[(63), float32],) */;
  %110 = %109.0;
  (%110,)
}

def @func_733(%var_718: Tensor[(15, 15, 10), int32], %var_719: Tensor[(15, 15, 10), int32], %var_724: Tensor[(480), uint64]) -> (Tensor[(15, 15, 10), int32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(15, 15, 10), uint64]) {
  %111 = cast(%var_719, dtype="int32") /* ty=Tensor[(15, 15, 10), int32] */;
  %112 = shape_of(%var_718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_718, dtype="int32") /* ty=Tensor[(15, 15, 10), int32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %115 = cast(%var_724, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %116 = cast(%var_724, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %117 = reshape(%115, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %118 = reshape(%116, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %119 = cast(%var_718, dtype="uint64") /* ty=Tensor[(15, 15, 10), uint64] */;
  %120 = shape_of(%var_719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_719, dtype="uint64") /* ty=Tensor[(15, 15, 10), uint64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %123 = logical_xor(%113, %114) /* ty=Tensor[(15, 15, 10), int32] */;
  %124 = @func_98(%117, %118) /* ty=Tensor[(16, 10, 3), uint64] */;
  %125 = right_shift(%121, %122) /* ty=Tensor[(15, 15, 10), uint64] */;
  (%123, %124, %var_724, %125)
}

def @func_2011(%var_1943: Tensor[(1, 4, 9), int16], %var_1944: Tensor[(8, 4, 9), int16], %var_1998: Tensor[(13, 4), float64], %var_2006: Tensor[(352), float32]) -> (Tensor[(8, 4, 9), float32], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(?, 4, 13), bool], Tensor[(13, 4), float64], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) {
  %126 = cast(%var_1943, dtype="bool") /* ty=Tensor[(1, 4, 9), bool] */;
  %127 = cast(%var_1944, dtype="bool") /* ty=Tensor[(8, 4, 9), bool] */;
  %128 = less_equal(%126, %127) /* ty=Tensor[(8, 4, 9), bool] */;
  %129 = cast(%128, dtype="float32") /* ty=Tensor[(8, 4, 9), float32] */;
  %130 = cast(%var_1943, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
  %131 = cast(meta[relay.Constant][5] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %132 = reshape(%131, newshape=[4, 14, 12]) /* ty=Tensor[(4, 14, 12), float64] */;
  %133 = cast(%var_1998, dtype="float64") /* ty=Tensor[(13, 4), float64] */;
  %134 = reshape(%133, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %135 = cast(%var_2006, dtype="float32") /* ty=Tensor[(352), float32] */;
  %136 = reshape(%135, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %137 = divide(%129, %130) /* ty=Tensor[(8, 4, 9), float32] */;
  %138 = @func_767(%132) /* ty=Tensor[(4, 14, 12), float64] */;
  %139 = @func_1197(%134) /* ty=Tensor[(?, 4, 13), bool] */;
  %140 = @func_1049(%136) /* ty=Tensor[(11, 16, 2), float32] */;
  (%137, %138, meta[relay.Constant][5] /* ty=Tensor[(672), float64] */, %139, %var_1998, %140, %var_2006)
}

def @func_5148(%var_5131: Tensor[(210, 1), int8]) -> (Tensor[(4, 14, 13), float32], Tensor[(210, 63), int64]) {
  %141 = cast(%var_5131, dtype="int8") /* ty=Tensor[(210, 1), int8] */;
  %142 = reshape(%141, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
  %143 = @func_1403(%142) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
  %144 = @func_4004() /* ty=(Tensor[(63), float32],) */;
  %145 = %144.0;
  %146 = cast(%145, dtype="int64") /* ty=Tensor[(63), int64] */;
  %147 = cast(%var_5131, dtype="int64") /* ty=Tensor[(210, 1), int64] */;
  %148 = %143.0;
  %149 = bitwise_xor(%146, %147) /* ty=Tensor[(210, 63), int64] */;
  (%148, %149)
}

def @func_5500() -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(336), float64]) {
  %150 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %151 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %152 = reshape(%150, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %153 = reshape(%151, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %154 = @func_3736(%152, %153) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
  %155 = @func_5203() /* ty=Tensor[(63), float32] */;
  %156 = %154.0;
  (%155, %156, meta[relay.Constant][6] /* ty=Tensor[(336), float64] */)
}

def @func_98(%var_82: Tensor[(16, 10, 3), uint64], %var_83: Tensor[(16, 10, 3), uint64]) -> Tensor[(16, 10, 3), uint64] {
  %157 = cast(%var_83, dtype="uint64") /* ty=Tensor[(16, 10, 3), uint64] */;
  %158 = shape_of(%var_82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%var_82, dtype="uint64") /* ty=Tensor[(16, 10, 3), uint64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%159, %160) /* ty=Tensor[(16, 10, 3), uint64] */
}

def @func_3359() -> (Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) {
  %161 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
  %162 = cast(meta[relay.Constant][7] /* ty=Tensor[(1183, 1), float32] */, dtype="float32") /* ty=Tensor[(1183, 1), float32] */;
  %163 = cast(meta[relay.Constant][7] /* ty=Tensor[(1183, 1), float32] */, dtype="float32") /* ty=Tensor[(1183, 1), float32] */;
  %164 = reshape(%162, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %165 = reshape(%163, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %166 = @func_2205(%164, %165) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %167 = %161.0;
  %168 = %166.0;
  %169 = @func_3317() /* ty=Tensor[(63), float32] */;
  %170 = @func_2936() /* ty=Tensor[(63), float32] */;
  (%167, %168, meta[relay.Constant][7] /* ty=Tensor[(1183, 1), float32] */, %169, %170)
}

def @func_3646(%var_3631: Tensor[(210), int8]) -> (Tensor[(63), float32], Tensor[(5, 6, 7), int64], Tensor[(210), int8]) {
  %171 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %172 = cast(%var_3631, dtype="int8") /* ty=Tensor[(210), int8] */;
  %173 = reshape(%172, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
  %174 = @func_1403(%173) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
  %175 = %171.0;
  %176 = %174.2;
  (%175, %176, %var_3631)
}

def @func_5361() -> Tensor[(6, 8, 5), float32] {
  %177 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %177.0
}

def @func_3087(%var_3019: Tensor[(13, 3, 9), float64]) -> (Tensor[(13, 3, 9), float64],) {
  %178 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %179 = shape_of(%var_3019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_3019, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %182 = mod(%180, %181) /* ty=Tensor[(13, 3, 9), float64] */;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %184 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %187 = floor_divide(%185, %186) /* ty=Tensor[(13, 3, 9), float64] */;
  (%187,)
}

def @func_4408() -> (Tensor[(63), float32], Tensor[(?, 240), uint64], Tensor[(7, 16, 3), float32], Tensor[(336), float64]) {
  %188 = @func_3848() /* ty=(Tensor[(63), float32],) */;
  %189 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
  %190 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
  %191 = reshape(%189, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %192 = reshape(%190, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %193 = @func_3142(%191, %192) /* ty=(Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) */;
  %194 = %193.1;
  %195 = cast(%194, dtype="uint64") /* ty=Tensor[(6, 8, 5), uint64] */;
  %196 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(1, 240), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 240), float32] */, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %199 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %200 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %201 = reshape(%199, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %202 = reshape(%200, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %203 = @func_3736(%201, %202) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
  %204 = %188.0;
  %205 = logical_xor(%197, %198) /* ty=Tensor[(?, 240), uint64] */;
  %206 = %203.1;
  (%204, %205, %206, meta[relay.Constant][10] /* ty=Tensor[(336), float64] */)
}

def @func_5282(%var_5269: Tensor[(880), int32], %var_5274: Tensor[(336), float64]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(5, 6, 7), bool], Tensor[(210), int8], Tensor[(11, 16, 5), int32], Tensor[(880), int32], Tensor[(7, 16, 3), float32], Tensor[(336), float64], Tensor[(6, 8, 5), float32]) {
  %207 = @func_3600() /* ty=(Tensor[(63), float32],) */;
  %208 = %207.0;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(63), float32] */;
  %210 = reshape(%209, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %211 = @func_4105(%210) /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32]) */;
  %212 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %213 = cast(meta[relay.Constant][11] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
  %214 = reshape(%213, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
  %215 = @func_1403(%214) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
  %216 = cast(%var_5269, dtype="int32") /* ty=Tensor[(880), int32] */;
  %217 = reshape(%216, newshape=[11, 16, 5]) /* ty=Tensor[(11, 16, 5), int32] */;
  %218 = @func_2245(%217) /* ty=(Tensor[(11, 16, 5), int32],) */;
  %219 = cast(%var_5274, dtype="float64") /* ty=Tensor[(336), float64] */;
  %220 = cast(%var_5274, dtype="float64") /* ty=Tensor[(336), float64] */;
  %221 = reshape(%219, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %222 = reshape(%220, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %223 = @func_3736(%221, %222) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
  %224 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
  %225 = %211.2;
  %226 = %212.0;
  %227 = %215.3;
  %228 = %218.0;
  %229 = %223.1;
  %230 = %224.1;
  (%208, %225, %226, %227, meta[relay.Constant][11] /* ty=Tensor[(210), int8] */, %228, %var_5269, %229, %var_5274, %230)
}

def @func_5092(%var_5059: Tensor[(8, 6, 12), int16], %var_5060: Tensor[(8, 6, 12), int16]) -> (Tensor[(8, 6, 12), float64], Tensor[(63), float32]) {
  %231 = cast(%var_5060, dtype="int16") /* ty=Tensor[(8, 6, 12), int16] */;
  %232 = shape_of(%var_5059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_5059, dtype="int16") /* ty=Tensor[(8, 6, 12), int16] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %235 = logical_xor(%233, %234) /* ty=Tensor[(8, 6, 12), int16] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(8, 6, 12), float64] */;
  %237 = sqrt(%236) /* ty=Tensor[(8, 6, 12), float64] */;
  %238 = @func_4679() /* ty=Tensor[(63), float32] */;
  (%237, %238)
}

def @func_3444() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  %239 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %240 = @func_2936() /* ty=Tensor[(63), float32] */;
  %241 = %239.0;
  (%240, %241)
}

def @func_1173(%var_1166: Tensor[(2, 2, 6), uint32]) -> (Tensor[(2, 2, 6), uint32],) {
  %242 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 2, 6), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2, 6), uint32] */;
  %243 = shape_of(%var_1166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%var_1166, dtype="uint32") /* ty=Tensor[(2, 2, 6), uint32] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %246 = minimum(%244, %245) /* ty=Tensor[(2, 2, 6), uint32] */;
  (%246,)
}

def @func_3803(%var_3779: Tensor[(10, 6, 7), int32]) -> (Tensor[(10, 6, 7), int32], Tensor[(6, 8, 5), float32]) {
  %247 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 6, 7), int32] */, dtype="int32") /* ty=Tensor[(10, 6, 7), int32] */;
  %248 = shape_of(%var_3779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_3779, dtype="int32") /* ty=Tensor[(10, 6, 7), int32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %251 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
  %252 = multiply(%249, %250) /* ty=Tensor[(10, 6, 7), int32] */;
  %253 = %251.1;
  (%252, %253)
}

def @func_5009(%var_4977: Tensor[(9, 6, 12), int64], %var_4991: Tensor[(9, 6, 12), int64]) -> (Tensor[(63), float32], Tensor[(9, 6, 12), float64], Tensor[(9, 6, 12), uint16]) {
  %254 = @func_3306() /* ty=(Tensor[(63), float32],) */;
  %255 = cast(%var_4991, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %256 = shape_of(%var_4977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_4977, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = logical_and(%257, %258) /* ty=Tensor[(9, 6, 12), bool] */;
  %260 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %261 = shape_of(%var_4977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%var_4977, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %264 = greater_equal(%262, %263) /* ty=Tensor[(9, 6, 12), bool] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %266 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%259, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %269 = cast(%259, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %270 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(9, 6, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 6, 12), int64] */, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %273 = %254.0;
  %274 = floor_mod(%267, %268) /* ty=Tensor[(9, 6, 12), float64] */;
  %275 = subtract(%271, %272) /* ty=Tensor[(9, 6, 12), uint16] */;
  (%273, %274, %275)
}

def @func_1197(%var_1182: Tensor[(1, 4, 13), float64]) -> Tensor[(?, 4, 13), bool] {
  %276 = cast(%var_1182, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
  %277 = acos(%276) /* ty=Tensor[(1, 4, 13), float64] */;
  %278 = cast(%277, dtype="bool") /* ty=Tensor[(1, 4, 13), bool] */;
  %279 = shape_of(%var_1182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_1182, dtype="bool") /* ty=Tensor[(1, 4, 13), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%280, %281) /* ty=Tensor[(?, 4, 13), bool] */
}

def @func_230(%var_187: Tensor[(4, 10, 8), float64], %var_188: Tensor[(4, 10, 8), float64], %var_194: Tensor[(480), uint64]) -> (Tensor[(4, 10, 8), float64], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(16, 10, 3), float64]) {
  %282 = cast(%var_188, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %283 = shape_of(%var_187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_187, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %286 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %287 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %288 = reshape(%286, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %289 = reshape(%287, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %290 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %291 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %292 = reshape(%290, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %293 = reshape(%291, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %294 = @func_98(%292, %293) /* ty=Tensor[(16, 10, 3), uint64] */;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %296 = floor_divide(%284, %285) /* ty=Tensor[(4, 10, 8), float64] */;
  %297 = @func_98(%288, %289) /* ty=Tensor[(16, 10, 3), uint64] */;
  %298 = asin(%295) /* ty=Tensor[(16, 10, 3), float64] */;
  (%296, %297, %var_194, %298)
}

def @func_342(%var_326: Tensor[(6, 11, 1), uint32], %var_327: Tensor[(6, 11, 16), uint32]) -> (Tensor[(6, 11, 16), uint32],) {
  %299 = cast(%var_326, dtype="uint32") /* ty=Tensor[(6, 11, 1), uint32] */;
  %300 = cast(%var_327, dtype="uint32") /* ty=Tensor[(6, 11, 16), uint32] */;
  %301 = minimum(%299, %300) /* ty=Tensor[(6, 11, 16), uint32] */;
  (%301,)
}

def @func_5967() -> (Tensor[(63), float32], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(6, 8, 5), float32]) {
  %302 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(520), int64] */, dtype="int64") /* ty=Tensor[(520), int64] */;
  %304 = reshape(%303, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), int64] */;
  %305 = @func_5449(%304) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(13, 10, 4), float32]) */;
  %306 = cast(meta[relay.Constant][15] /* ty=Tensor[(520), int64] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %307 = %302.0;
  %308 = %305.0;
  %309 = cosh(%306) /* ty=Tensor[(520), float32] */;
  %310 = @func_4446() /* ty=Tensor[(6, 8, 5), float32] */;
  (%307, %308, %309, %310)
}

def @func_3471() -> (Tensor[(63), float32], Tensor[(7, 9, 352), float64]) {
  %311 = @func_3317() /* ty=Tensor[(63), float32] */;
  %312 = cast(%311, dtype="float32") /* ty=Tensor[(63), float32] */;
  %313 = cast(meta[relay.Constant][16] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %314 = reshape(%312, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float32] */;
  %315 = reshape(%313, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %316 = @func_2364(%314, %315) /* ty=(Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */;
  %317 = %316.0;
  %318 = cast(meta[relay.Constant][16] /* ty=Tensor[(352), float32] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %319 = cast(%317, dtype="float64") /* ty=Tensor[(7, 9, ?), float64] */;
  %320 = floor_mod(%318, %319) /* ty=Tensor[(7, 9, 352), float64] */;
  (%311, %320)
}

def @func_5449(%var_5436: Tensor[(13, 10, 4), int64]) -> (Tensor[(13, 10, 4), bool], Tensor[(13, 10, 4), float32]) {
  %321 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 10, 4), int64] */, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %322 = shape_of(%var_5436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_5436, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(%var_5436, dtype="float32") /* ty=Tensor[(13, 10, 4), float32] */;
  %326 = greater_equal(%323, %324) /* ty=Tensor[(13, 10, 4), bool] */;
  %327 = atan(%325) /* ty=Tensor[(13, 10, 4), float32] */;
  (%326, %327)
}

def @func_4197() -> (Tensor[(6, 8, 5), float32], Tensor[(63), int32]) {
  %328 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %329 = @func_3600() /* ty=(Tensor[(63), float32],) */;
  %330 = %329.0;
  %331 = cast(meta[relay.Constant][18] /* ty=Tensor[(63), float32] */, dtype="int32") /* ty=Tensor[(63), int32] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(1), int32] */;
  %333 = cast(%330, dtype="int32") /* ty=Tensor[(63), int32] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?), int32] */;
  %335 = %328.0;
  %336 = bitwise_or(%333, %334) /* ty=Tensor[(63), int32] */;
  (%335, %336)
}

def @func_4105(%var_4057: Tensor[(63), float32]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32]) {
  %337 = @func_3006() /* ty=Tensor[(63), float32] */;
  %338 = cast(%var_4057, dtype="bool") /* ty=Tensor[(63), bool] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(1), int32] */;
  %340 = cast(%337, dtype="bool") /* ty=Tensor[(63), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?), bool] */;
  %342 = less(%340, %341) /* ty=Tensor[(63), bool] */;
  %343 = cast(%var_4057, dtype="float32") /* ty=Tensor[(63), float32] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(1), int32] */;
  %345 = cast(%342, dtype="float32") /* ty=Tensor[(63), float32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?), float32] */;
  %347 = @func_3006() /* ty=Tensor[(63), float32] */;
  %348 = @func_3285() /* ty=Tensor[(63), float32] */;
  %349 = floor_divide(%345, %346) /* ty=Tensor[(63), float32] */;
  (%347, %348, %349)
}

def @func_2884(%var_2860: Tensor[(2, 240), uint64]) -> (Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) {
  %350 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %352 = cast(meta[relay.Constant][20] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %353 = reshape(%351, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %354 = reshape(%352, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %355 = @func_2205(%353, %354) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %356 = cast(meta[relay.Constant][19] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %357 = cast(meta[relay.Constant][19] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %358 = cast(%var_2860, dtype="uint64") /* ty=Tensor[(2, 240), uint64] */;
  %359 = reshape(%356, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
  %360 = reshape(%357, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
  %361 = reshape(%358, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %362 = @func_230(%359, %360, %361) /* ty=(Tensor[(4, 10, 8), float64], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(16, 10, 3), float64]) */;
  %363 = %362.1;
  %364 = cast(%var_2860, dtype="int16") /* ty=Tensor[(2, 240), int16] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="int16") /* ty=Tensor[(16, 10, 3), int16] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %368 = %350.0;
  %369 = %355.0;
  %370 = subtract(%366, %367) /* ty=Tensor[(16, 10, 3), int16] */;
  (%368, meta[relay.Constant][19] /* ty=Tensor[(320), float64] */, %369, meta[relay.Constant][20] /* ty=Tensor[(1183), float32] */, %370)
}

def @func_6556(%var_6520: Tensor[(210), int8]) -> (Tensor[(7, 9, 352), float64], Tensor[(5, 6, 7), float64]) {
  %371 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %372 = cast(%var_6520, dtype="int8") /* ty=Tensor[(210), int8] */;
  %373 = reshape(%372, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
  %374 = @func_1403(%373) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
  %375 = %374.3;
  %376 = cast(%var_6520, dtype="bool") /* ty=Tensor[(210), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = logical_or(%378, %379) /* ty=Tensor[(5, 6, 7), bool] */;
  %381 = cast(%375, dtype="int32") /* ty=Tensor[(5, 6, 7), int32] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="int32") /* ty=Tensor[(5, 6, 7), int32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %385 = subtract(%383, %384) /* ty=Tensor[(5, 6, 7), int32] */;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(5, 6, 7), float64] */;
  %387 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%380, dtype="float64") /* ty=Tensor[(5, 6, 7), float64] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %390 = %371.1;
  %391 = mod(%388, %389) /* ty=Tensor[(5, 6, 7), float64] */;
  (%390, %391)
}

def @func_5203() -> Tensor[(63), float32] {
  @func_4679() /* ty=Tensor[(63), float32] */
}

def @func_2481(%var_2441: Tensor[(15, 4, 13), int64], %var_2456: Tensor[(2, 240), uint64]) -> (Tensor[(15, 4, 13), int64], Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(16, 10, 3), uint64], Tensor[(2, 240), uint64], Tensor[(11, 16, 2), float32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(352), float32]) {
  %392 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
  %393 = shape_of(%var_2441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_2441, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %396 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %397 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %398 = reshape(%396, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
  %399 = reshape(%397, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
  %400 = @func_468(%398, %399) /* ty=(Tensor[(4, 14, 13), float32],) */;
  %401 = cast(%var_2456, dtype="uint64") /* ty=Tensor[(2, 240), uint64] */;
  %402 = cast(%var_2456, dtype="uint64") /* ty=Tensor[(2, 240), uint64] */;
  %403 = reshape(%401, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %404 = reshape(%402, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %405 = cast(meta[relay.Constant][23] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %406 = reshape(%405, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %407 = cast(meta[relay.Constant][24] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %408 = cast(meta[relay.Constant][24] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %409 = reshape(%407, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %410 = reshape(%408, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %411 = @func_2205(%409, %410) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %412 = cast(meta[relay.Constant][23] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %413 = minimum(%394, %395) /* ty=Tensor[(15, 4, 13), int64] */;
  %414 = %400.0;
  %415 = @func_98(%403, %404) /* ty=Tensor[(16, 10, 3), uint64] */;
  %416 = @func_1049(%406) /* ty=Tensor[(11, 16, 2), float32] */;
  %417 = %411.0;
  %418 = erf(%412) /* ty=Tensor[(352), float32] */;
  (%413, %414, meta[relay.Constant][22] /* ty=Tensor[(728), float32] */, %415, %var_2456, %416, %417, meta[relay.Constant][24] /* ty=Tensor[(1183), float32] */, %418)
}

def @func_3285() -> Tensor[(63), float32] {
  @func_3006() /* ty=Tensor[(63), float32] */
}

def @func_5406(%var_5378: Tensor[(12, 2), uint32], %var_5381: Tensor[(480), uint64]) -> (Tensor[(2, 2, 6), uint32], Tensor[(12, 2), uint32], Tensor[(1183), float32], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) {
  %419 = cast(%var_5378, dtype="uint32") /* ty=Tensor[(12, 2), uint32] */;
  %420 = reshape(%419, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), uint32] */;
  %421 = @func_1173(%420) /* ty=(Tensor[(2, 2, 6), uint32],) */;
  %422 = cast(%var_5381, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %423 = reshape(%422, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint64] */;
  %424 = @func_2884(%423) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) */;
  %425 = @func_5335() /* ty=Tensor[(5, 11, 11), bool] */;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %427 = %421.0;
  %428 = %424.3;
  %429 = log2(%426) /* ty=Tensor[(5, 11, 11), float64] */;
  (%427, %var_5378, %428, %var_5381, %429)
}

def @func_4478(%var_4455: Tensor[(6, 8, 5), float32], %var_4467: Tensor[(352), float32]) -> (Tensor[(4, 120), uint64], Tensor[(480), uint64], Tensor[(6, 8, 5), uint32], Tensor[(6, 8, 5), float64], Tensor[(352), uint16], Tensor[(352), float32], Tensor[(182), float32]) {
  %430 = cast(meta[relay.Constant][25] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %431 = reshape(%430, newshape=[4, 120]) /* ty=Tensor[(4, 120), uint64] */;
  %432 = @func_2740(%431) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(15, 15, 10), uint64], Tensor[(4, 120), uint64], Tensor[(16, 10, 3), uint64], Tensor[(2250), float64]) */;
  %433 = @func_4197() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(63), int32]) */;
  %434 = %433.0;
  %435 = cast(%var_4455, dtype="uint32") /* ty=Tensor[(6, 8, 5), uint32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="uint32") /* ty=Tensor[(6, 8, 5), uint32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %439 = cast(%var_4455, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %440 = reshape(%439, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %441 = @func_2788(%440) /* ty=(Tensor[(6, 8, 5), float64],) */;
  %442 = cast(%var_4467, dtype="float32") /* ty=Tensor[(352), float32] */;
  %443 = cast(meta[relay.Constant][26] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %444 = reshape(%442, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %445 = reshape(%443, newshape=[182]) /* ty=Tensor[(182), float32] */;
  %446 = @func_3230(%444, %445) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(352), uint16], Tensor[(52), float64], Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(1183), int16], Tensor[(1183), float32]) */;
  %447 = %432.2;
  %448 = bitwise_or(%437, %438) /* ty=Tensor[(6, 8, 5), uint32] */;
  %449 = %441.0;
  %450 = %446.1;
  (%447, meta[relay.Constant][25] /* ty=Tensor[(480), uint64] */, %448, %449, %450, %var_4467, meta[relay.Constant][26] /* ty=Tensor[(182), float32] */)
}

def @func_4550(%var_4544: Tensor[(63), float32]) -> Tensor[(63), uint8] {
  %451 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
  %452 = %451.2;
  %453 = cast(%var_4544, dtype="uint8") /* ty=Tensor[(63), uint8] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(1), int32] */;
  %455 = cast(%452, dtype="uint8") /* ty=Tensor[(63), uint8] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?), uint8] */;
  add(%455, %456) /* ty=Tensor[(63), uint8] */
}

def @func_3006() -> Tensor[(63), float32] {
  @func_2936() /* ty=Tensor[(63), float32] */
}

def @func_2364(%var_2326: Tensor[(7, 9, 1), float32], %var_2354: Tensor[(352), float32]) -> (Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) {
  %457 = cast(%var_2326, dtype="float32") /* ty=Tensor[(7, 9, 1), float32] */;
  %458 = cosh(%457) /* ty=Tensor[(7, 9, 1), float32] */;
  %459 = cast(%var_2326, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = cast(%var_2326, dtype="float32") /* ty=Tensor[(7, 9, 1), float32] */;
  %464 = cast(%var_2354, dtype="float32") /* ty=Tensor[(352), float32] */;
  %465 = reshape(%464, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %466 = logical_or(%461, %462) /* ty=Tensor[(7, 9, ?), bool] */;
  %467 = log(%463) /* ty=Tensor[(7, 9, 1), float32] */;
  %468 = @func_1049(%465) /* ty=Tensor[(11, 16, 2), float32] */;
  (%466, %467, %468, %var_2354)
}

def @func_4760(%var_4690: Tensor[(12, 3, 14), int16], %var_4710: Tensor[(36), int16], %var_4711: Tensor[(1, 288), int16], %var_4713: Tensor[(352), float32], %var_4718: Tensor[(12, 3, 14), float32], %var_4750: Tensor[(12, 3, 14), float32]) -> (Tensor[(?, 4, 13), bool], Tensor[(36), int16], Tensor[(1, 288), int16], Tensor[(52), float64], Tensor[(352), float32], Tensor[(12, 3, 14), int64], Tensor[(6, 8, 5), float32], Tensor[(12, 3, 14), int32], Tensor[(63), uint8], Tensor[(63), float32]) {
  %469 = cast(%var_4710, dtype="int16") /* ty=Tensor[(36), int16] */;
  %470 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1, 288), int16] */;
  %471 = cast(meta[relay.Constant][27] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %472 = cast(%var_4713, dtype="float32") /* ty=Tensor[(352), float32] */;
  %473 = reshape(%469, newshape=[1, 4, 9]) /* ty=Tensor[(1, 4, 9), int16] */;
  %474 = reshape(%470, newshape=[8, 4, 9]) /* ty=Tensor[(8, 4, 9), int16] */;
  %475 = reshape(%471, newshape=[13, 4]) /* ty=Tensor[(13, 4), float64] */;
  %476 = reshape(%472, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %477 = @func_2011(%473, %474, %475, %476) /* ty=(Tensor[(8, 4, 9), float32], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(?, 4, 13), bool], Tensor[(13, 4), float64], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */;
  %478 = cast(meta[relay.Constant][28] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %479 = cast(%var_4690, dtype="int16") /* ty=Tensor[(12, 3, 14), int16] */;
  %480 = maximum(%478, %479) /* ty=Tensor[(12, 3, 14), int16] */;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %482 = exp(%481) /* ty=Tensor[(12, 3, 14), float32] */;
  %483 = cast(%var_4718, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = not_equal(%485, %486) /* ty=Tensor[(12, 3, 14), bool] */;
  %488 = cast(%487, dtype="int64") /* ty=Tensor[(12, 3, 14), int64] */;
  %489 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%480, dtype="int64") /* ty=Tensor[(12, 3, 14), int64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %492 = @func_4197() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(63), int32]) */;
  %493 = cast(%482, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %494 = tan(%493) /* ty=Tensor[(12, 3, 14), float32] */;
  %495 = cast(%var_4750, dtype="int32") /* ty=Tensor[(12, 3, 14), int32] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="int32") /* ty=Tensor[(12, 3, 14), int32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %500 = reshape(%499, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %501 = %477.3;
  %502 = multiply(%490, %491) /* ty=Tensor[(12, 3, 14), int64] */;
  %503 = %492.0;
  %504 = minimum(%497, %498) /* ty=Tensor[(12, 3, 14), int32] */;
  %505 = @func_4550(%500) /* ty=Tensor[(63), uint8] */;
  (%501, %var_4710, %var_4711, meta[relay.Constant][27] /* ty=Tensor[(52), float64] */, %var_4713, %502, %503, %504, %505, meta[relay.Constant][29] /* ty=Tensor[(63), float32] */)
}

def @func_6247(%var_6242: Tensor[(63), float32]) -> Tensor[(63), float32] {
  %506 = @func_3766() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %507 = %506.0;
  %508 = cast(%var_6242, dtype="float32") /* ty=Tensor[(63), float32] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(1), int32] */;
  %510 = cast(%507, dtype="float32") /* ty=Tensor[(63), float32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?), float32] */;
  mod(%510, %511) /* ty=Tensor[(63), float32] */
}

def @func_4511(%var_4488: Tensor[(7, 10, 3), float64]) -> (Tensor[(7, 10, 3), float64], Tensor[(63), float32]) {
  %512 = cast(%var_4488, dtype="float64") /* ty=Tensor[(7, 10, 3), float64] */;
  %513 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(7, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 3), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %516 = @func_3317() /* ty=Tensor[(63), float32] */;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(63), float32] */;
  %518 = mod(%514, %515) /* ty=Tensor[(7, 10, 3), float64] */;
  %519 = cosh(%517) /* ty=Tensor[(63), float32] */;
  (%518, %519)
}

def @func_6295() -> (Tensor[(63), float32], Tensor[(352), float32], Tensor[(11, 16, 2), float64], Tensor[(63), float32]) {
  %520 = @func_3419() /* ty=(Tensor[(63), float32],) */;
  %521 = cast(meta[relay.Constant][31] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %522 = reshape(%521, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %523 = @func_1049(%522) /* ty=Tensor[(11, 16, 2), float32] */;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(11, 16, 2), float64] */;
  %525 = %520.0;
  %526 = acosh(%524) /* ty=Tensor[(11, 16, 2), float64] */;
  %527 = @func_2936() /* ty=Tensor[(63), float32] */;
  (%525, meta[relay.Constant][31] /* ty=Tensor[(352), float32] */, %526, %527)
}

def @func_2906() -> (Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) {
  %528 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %529 = cast(meta[relay.Constant][32] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %530 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 88), float32] */, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
  %531 = reshape(%529, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float32] */;
  %532 = reshape(%530, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %533 = @func_2364(%531, %532) /* ty=(Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */;
  %534 = %528.0;
  %535 = %533.1;
  (%534, %535, meta[relay.Constant][32] /* ty=Tensor[(63), float32] */, meta[relay.Constant][33] /* ty=Tensor[(4, 88), float32] */)
}

def @func_767(%var_758: Tensor[(4, 14, 12), float64]) -> Tensor[(4, 14, 12), float64] {
  %536 = cast(-3.35835f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %537 = cast(%var_758, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  divide(%536, %537) /* ty=Tensor[(4, 14, 12), float64] */
}

def @func_5785(%var_5768: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), bool],) {
  %538 = @func_5361() /* ty=Tensor[(6, 8, 5), float32] */;
  %539 = cast(%var_5768, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = not_equal(%541, %542) /* ty=Tensor[(6, 8, 5), bool] */;
  (%543,)
}

def @func_3419() -> (Tensor[(63), float32],) {
  %544 = @func_3306() /* ty=(Tensor[(63), float32],) */;
  %545 = %544.0;
  (%545,)
}

def @func_5335() -> Tensor[(5, 11, 11), bool] {
  %546 = @func_5319() /* ty=(Tensor[(5, 11, 11), bool],) */;
  %546.0
}

def @func_2740(%var_2681: Tensor[(4, 120), uint64]) -> (Tensor[(6, 8, 5), float32], Tensor[(15, 15, 10), uint64], Tensor[(4, 120), uint64], Tensor[(16, 10, 3), uint64], Tensor[(2250), float64]) {
  %547 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %548 = cast(meta[relay.Constant][34] /* ty=Tensor[(2250), int32] */, dtype="int32") /* ty=Tensor[(2250), int32] */;
  %549 = cast(meta[relay.Constant][34] /* ty=Tensor[(2250), int32] */, dtype="int32") /* ty=Tensor[(2250), int32] */;
  %550 = cast(%var_2681, dtype="uint64") /* ty=Tensor[(4, 120), uint64] */;
  %551 = reshape(%548, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), int32] */;
  %552 = reshape(%549, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), int32] */;
  %553 = reshape(%550, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %554 = @func_733(%551, %552, %553) /* ty=(Tensor[(15, 15, 10), int32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(15, 15, 10), uint64]) */;
  %555 = cast(%var_2681, dtype="uint64") /* ty=Tensor[(4, 120), uint64] */;
  %556 = cast(%var_2681, dtype="uint64") /* ty=Tensor[(4, 120), uint64] */;
  %557 = reshape(%555, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %558 = reshape(%556, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %559 = cast(meta[relay.Constant][34] /* ty=Tensor[(2250), int32] */, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %560 = %547.0;
  %561 = %554.3;
  %562 = @func_98(%557, %558) /* ty=Tensor[(16, 10, 3), uint64] */;
  %563 = acos(%559) /* ty=Tensor[(2250), float64] */;
  (%560, %561, %var_2681, %562, %563)
}

def @func_5713(%var_5664: Tensor[(36), int16], %var_5666: Tensor[(352), float32]) -> (Tensor[(1, 288), int16], Tensor[(504), int16], Tensor[(36), int16], Tensor[(352), float32], Tensor[(63), float32], Tensor[(63), uint8], Tensor[(63), uint8], Tensor[(288), int16], Tensor[(6, 8, 5), bool]) {
  %564 = cast(meta[relay.Constant][35] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %565 = cast(%var_5664, dtype="int16") /* ty=Tensor[(36), int16] */;
  %566 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %567 = cast(%var_5666, dtype="float32") /* ty=Tensor[(352), float32] */;
  %568 = cast(meta[relay.Constant][35] /* ty=Tensor[(504), int16] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %569 = cast(meta[relay.Constant][35] /* ty=Tensor[(504), int16] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %570 = reshape(%564, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), int16] */;
  %571 = reshape(%565, newshape=[36]) /* ty=Tensor[(36), int16] */;
  %572 = reshape(%566, newshape=[1, 288]) /* ty=Tensor[(1, 288), int16] */;
  %573 = reshape(%567, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %574 = reshape(%568, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %575 = reshape(%569, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %576 = @func_4760(%570, %571, %572, %573, %574, %575) /* ty=(Tensor[(?, 4, 13), bool], Tensor[(36), int16], Tensor[(1, 288), int16], Tensor[(52), float64], Tensor[(352), float32], Tensor[(12, 3, 14), int64], Tensor[(6, 8, 5), float32], Tensor[(12, 3, 14), int32], Tensor[(63), uint8], Tensor[(63), float32]) */;
  %577 = @func_4408() /* ty=(Tensor[(63), float32], Tensor[(?, 240), uint64], Tensor[(7, 16, 3), float32], Tensor[(336), float64]) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(63), float32] */;
  %580 = reshape(%579, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %581 = @func_4550(%580) /* ty=Tensor[(63), uint8] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(63), float32] */;
  %583 = reshape(%582, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %584 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %585 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(288), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %586 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?), int16] */;
  %588 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
  %589 = %588.1;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
  %591 = tan(%590) /* ty=Tensor[(6, 8, 5), float64] */;
  %592 = cast(%589, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = %576.2;
  %597 = @func_4550(%583) /* ty=Tensor[(63), uint8] */;
  %598 = bitwise_xor(%586, %587) /* ty=Tensor[(288), int16] */;
  %599 = logical_or(%594, %595) /* ty=Tensor[(6, 8, 5), bool] */;
  (%596, meta[relay.Constant][35] /* ty=Tensor[(504), int16] */, %var_5664, %var_5666, %578, %581, %597, %598, %599)
}

def @func_468(%var_455: Tensor[(4, 14, 13), float32], %var_456: Tensor[(4, 14, 13), float32]) -> (Tensor[(4, 14, 13), float32],) {
  %600 = cast(%var_456, dtype="float32") /* ty=Tensor[(4, 14, 13), float32] */;
  %601 = shape_of(%var_455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_455, dtype="float32") /* ty=Tensor[(4, 14, 13), float32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %604 = floor_divide(%602, %603) /* ty=Tensor[(4, 14, 13), float32] */;
  (%604,)
}

def @func_2936() -> Tensor[(63), float32] {
  %605 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
  %605.2
}

def @func_3230(%var_3182: Tensor[(352), float32], %var_3203: Tensor[(182), float32]) -> (Tensor[(6, 8, 5), float32], Tensor[(352), uint16], Tensor[(52), float64], Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(1183), int16], Tensor[(1183), float32]) {
  %606 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %607 = cast(%var_3182, dtype="float32") /* ty=Tensor[(352), float32] */;
  %608 = reshape(%607, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %609 = @func_1049(%608) /* ty=Tensor[(11, 16, 2), float32] */;
  %610 = cast(%609, dtype="uint16") /* ty=Tensor[(11, 16, 2), uint16] */;
  %611 = shape_of(%var_3182, dtype="int32") /* ty=Tensor[(1), int32] */;
  %612 = cast(%var_3182, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %614 = cast(meta[relay.Constant][38] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %615 = cast(meta[relay.Constant][38] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %616 = reshape(%614, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %617 = reshape(%615, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %618 = @func_2205(%616, %617) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %619 = cast(%var_3203, dtype="float32") /* ty=Tensor[(182), float32] */;
  %620 = reshape(%619, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %621 = @func_2073(%620) /* ty=(Tensor[(14, 1, 13), float32], Tensor[(14, 1, 13), float32]) */;
  %622 = cast(meta[relay.Constant][39] /* ty=Tensor[(1183), float32] */, dtype="int16") /* ty=Tensor[(1183), int16] */;
  %623 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(1183), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %624 = cast(meta[relay.Constant][38] /* ty=Tensor[(1183), float32] */, dtype="int16") /* ty=Tensor[(1183), int16] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?), int16] */;
  %626 = cast(meta[relay.Constant][39] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %627 = %606.0;
  %628 = maximum(%612, %613) /* ty=Tensor[(352), uint16] */;
  %629 = %618.2;
  %630 = %621.0;
  %631 = maximum(%624, %625) /* ty=Tensor[(1183), int16] */;
  %632 = rsqrt(%626) /* ty=Tensor[(1183), float32] */;
  (%627, %628, %629, %630, %var_3203, %631, %632)
}

def @func_5319() -> (Tensor[(5, 11, 11), bool],) {
  %633 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 11, 11), uint32] */, dtype="bool") /* ty=Tensor[(1, 11, 11), bool] */;
  %634 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 11, 11), uint32] */, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %635 = greater(%633, %634) /* ty=Tensor[(5, 11, 11), bool] */;
  (%635,)
}

def @func_3306() -> (Tensor[(63), float32],) {
  %636 = @func_3285() /* ty=Tensor[(63), float32] */;
  (%636,)
}

def @func_3736(%var_3692: Tensor[(7, 16, 3), float64], %var_3693: Tensor[(7, 16, 3), float64]) -> (Tensor[(63), float32], Tensor[(7, 16, 3), float32]) {
  %637 = @func_3600() /* ty=(Tensor[(63), float32],) */;
  %638 = cast(%var_3693, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %639 = asin(%638) /* ty=Tensor[(7, 16, 3), float64] */;
  %640 = cast(%var_3693, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %641 = shape_of(%var_3692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_3692, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %644 = divide(%642, %643) /* ty=Tensor[(7, 16, 3), float64] */;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(7, 16, 3), float32] */;
  %646 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%639, dtype="float32") /* ty=Tensor[(7, 16, 3), float32] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %649 = %637.0;
  %650 = power(%647, %648) /* ty=Tensor[(7, 16, 3), float32] */;
  (%649, %650)
}

def @func_2073(%var_2059: Tensor[(14, 1, 13), float32]) -> (Tensor[(14, 1, 13), float32], Tensor[(14, 1, 13), float32]) {
  %651 = cast(%var_2059, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
  %652 = cast(%var_2059, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
  %653 = exp(%651) /* ty=Tensor[(14, 1, 13), float32] */;
  %654 = asinh(%652) /* ty=Tensor[(14, 1, 13), float32] */;
  (%653, %654)
}

def @func_1403(%var_1348: Tensor[(5, 6, 7), int8]) -> (Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) {
  %655 = cast(meta[relay.Constant][42] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %656 = cast(meta[relay.Constant][42] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %657 = reshape(%655, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
  %658 = reshape(%656, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
  %659 = @func_468(%657, %658) /* ty=(Tensor[(4, 14, 13), float32],) */;
  %660 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 7), int8] */, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
  %661 = shape_of(%var_1348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_1348, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %664 = less_equal(%662, %663) /* ty=Tensor[(5, 6, 7), bool] */;
  %665 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 6, 7), int8] */, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
  %666 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 7), int8] */, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %669 = right_shift(%667, %668) /* ty=Tensor[(5, 6, 7), int64] */;
  %670 = cast(%669, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
  %671 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%664, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %674 = cast(%669, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
  %675 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%664, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = cast(%664, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
  %679 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%669, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %682 = %659.0;
  %683 = left_shift(%672, %673) /* ty=Tensor[(5, 6, 7), int64] */;
  %684 = not_equal(%676, %677) /* ty=Tensor[(5, 6, 7), bool] */;
  %685 = add(%680, %681) /* ty=Tensor[(5, 6, 7), int64] */;
  (%682, meta[relay.Constant][42] /* ty=Tensor[(728), float32] */, %683, %684, %685)
}

def @func_2557(%var_2543: Tensor[(6, 1, 12), float64]) -> (Tensor[(6, 1, 12), float64],) {
  %686 = cast(%var_2543, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
  %687 = log10(%686) /* ty=Tensor[(6, 1, 12), float64] */;
  (%687,)
}

def @func_6469(%var_6440: Tensor[(605), bool], %var_6447: Tensor[(240), float32]) -> (Tensor[(63), float32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(780), int64], Tensor[(780), int64], Tensor[(605), bool], Tensor[(7, 10, 3), float64], Tensor[(210), float64], Tensor[(6, 8, 5), float32], Tensor[(240), float32], Tensor[(1183, 1), float32]) {
  %688 = @func_3306() /* ty=(Tensor[(63), float32],) */;
  %689 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %690 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %691 = reshape(%689, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %692 = reshape(%690, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %693 = cast(meta[relay.Constant][46] /* ty=Tensor[(780), int64] */, dtype="int64") /* ty=Tensor[(780), int64] */;
  %694 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %695 = cast(%var_6440, dtype="bool") /* ty=Tensor[(605), bool] */;
  %696 = reshape(%693, newshape=[780]) /* ty=Tensor[(780), int64] */;
  %697 = reshape(%694, newshape=[480]) /* ty=Tensor[(480), uint64] */;
  %698 = reshape(%695, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), bool] */;
  %699 = @func_5617(%696, %697, %698) /* ty=(Tensor[(2, 240), uint64], Tensor[(780), int64], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) */;
  %700 = cast(meta[relay.Constant][47] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %701 = reshape(%700, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %702 = @func_4511(%701) /* ty=(Tensor[(7, 10, 3), float64], Tensor[(63), float32]) */;
  %703 = cast(%var_6447, dtype="float32") /* ty=Tensor[(240), float32] */;
  %704 = cast(%var_6447, dtype="float32") /* ty=Tensor[(240), float32] */;
  %705 = reshape(%703, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %706 = reshape(%704, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %707 = @func_3142(%705, %706) /* ty=(Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) */;
  %708 = @func_5566() /* ty=(Tensor[(1183, 1), float32], Tensor[(1183), float32], Tensor[(480), uint64]) */;
  %709 = %688.0;
  %710 = @func_98(%691, %692) /* ty=Tensor[(16, 10, 3), uint64] */;
  %711 = %699.1;
  %712 = %702.0;
  %713 = %707.1;
  %714 = %708.0;
  (%709, %710, meta[relay.Constant][45] /* ty=Tensor[(480), uint64] */, %711, meta[relay.Constant][46] /* ty=Tensor[(780), int64] */, %var_6440, %712, meta[relay.Constant][47] /* ty=Tensor[(210), float64] */, %713, %var_6447, %714)
}

def @func_3600() -> (Tensor[(63), float32],) {
  %715 = @func_2936() /* ty=Tensor[(63), float32] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(63), float32] */;
  %717 = sin(%716) /* ty=Tensor[(63), float32] */;
  (%717,)
}

def @func_6603() -> Tensor[(63), float32] {
  @func_3006() /* ty=Tensor[(63), float32] */
}

def @func_6162() -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(168, 2), bool]) {
  %718 = @func_5727() /* ty=(Tensor[(63), float32],) */;
  %719 = cast(meta[relay.Constant][48] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %720 = cast(meta[relay.Constant][48] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %721 = reshape(%719, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %722 = reshape(%720, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %723 = @func_3736(%721, %722) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
  %724 = cast(meta[relay.Constant][49] /* ty=Tensor[(168, 2), float64] */, dtype="bool") /* ty=Tensor[(168, 2), bool] */;
  %725 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(168, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %726 = cast(meta[relay.Constant][48] /* ty=Tensor[(168, 2), float64] */, dtype="bool") /* ty=Tensor[(168, 2), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %728 = %718.0;
  %729 = %723.0;
  %730 = @func_4679() /* ty=Tensor[(63), float32] */;
  %731 = @func_2936() /* ty=Tensor[(63), float32] */;
  %732 = less_equal(%726, %727) /* ty=Tensor[(168, 2), bool] */;
  (%728, %729, %730, %731, %732)
}

def @func_6372() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32], Tensor[(4, 220), int32], Tensor[(336), float64]) {
  %733 = @func_5727() /* ty=(Tensor[(63), float32],) */;
  %734 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 220), int32] */, dtype="int32") /* ty=Tensor[(4, 220), int32] */;
  %735 = cast(meta[relay.Constant][51] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %736 = reshape(%734, newshape=[880]) /* ty=Tensor[(880), int32] */;
  %737 = reshape(%735, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %738 = @func_5282(%736, %737) /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(5, 6, 7), bool], Tensor[(210), int8], Tensor[(11, 16, 5), int32], Tensor[(880), int32], Tensor[(7, 16, 3), float32], Tensor[(336), float64], Tensor[(6, 8, 5), float32]) */;
  %739 = %733.0;
  %740 = %738.9;
  (%739, %740, meta[relay.Constant][50] /* ty=Tensor[(4, 220), int32] */, meta[relay.Constant][51] /* ty=Tensor[(336), float64] */)
}

def @func_3142(%var_3126: Tensor[(6, 8, 5), float32], %var_3134: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) {
  %741 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %742 = %741.0;
  %743 = cast(%var_3126, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %747 = cast(%var_3134, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %748 = shape_of(%var_3126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_3126, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %751 = floor_mod(%745, %746) /* ty=Tensor[(6, 8, 5), float64] */;
  %752 = divide(%749, %750) /* ty=Tensor[(6, 8, 5), float32] */;
  (%751, %752)
}

def @func_3485() -> (Tensor[(6, 8, 5), float32],) {
  %753 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
  %754 = %753.0;
  (%754,)
}

def @func_4932(%var_4922: Tensor[(14, 2, 16), float64]) -> Tensor[(14, 2, 16), float64] {
  %755 = cast(%var_4922, dtype="float64") /* ty=Tensor[(14, 2, 16), float64] */;
  acosh(%755) /* ty=Tensor[(14, 2, 16), float64] */
}

def @func_5893() -> (Tensor[(63), float32], Tensor[(63), float32]) {
  %756 = @func_3419() /* ty=(Tensor[(63), float32],) */;
  %757 = %756.0;
  %758 = @func_3317() /* ty=Tensor[(63), float32] */;
  (%757, %758)
}

def @func_3766() -> (Tensor[(63), float32], Tensor[(7, 9, 352), float64]) {
  %759 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %760 = %759.1;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(7, 9, 352), float64] */;
  %762 = @func_3285() /* ty=Tensor[(63), float32] */;
  %763 = erf(%761) /* ty=Tensor[(7, 9, 352), float64] */;
  (%762, %763)
}

def @main(%var_6639: Tensor[(210), int8], %var_6670: Tensor[(7, 9, 352), uint8]) -> (Tensor[(210), int8], Tensor[(7, 9, 352), int16], Tensor[(4, 220), uint16]) {
  %764 = cast(%var_6639, dtype="int8") /* ty=Tensor[(210), int8] */;
  %765 = reshape(%764, newshape=[210]) /* ty=Tensor[(210), int8] */;
  %766 = @func_6556(%765) /* ty=(Tensor[(7, 9, 352), float64], Tensor[(5, 6, 7), float64]) */;
  %767 = %766.0;
  %768 = cast(meta[relay.Constant][52] /* ty=Tensor[(7, 9, 352), float64] */, dtype="uint8") /* ty=Tensor[(7, 9, 352), uint8] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="uint8") /* ty=Tensor[(7, 9, 352), uint8] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %772 = bitwise_xor(%770, %771) /* ty=Tensor[(7, 9, 352), uint8] */;
  %773 = cast(%var_6670, dtype="int16") /* ty=Tensor[(7, 9, 352), int16] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="int16") /* ty=Tensor[(7, 9, 352), int16] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %777 = @func_6372() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32], Tensor[(4, 220), int32], Tensor[(336), float64]) */;
  %778 = %777.2;
  %779 = cast(meta[relay.Constant][53] /* ty=Tensor[(4, 220), int32] */, dtype="float32") /* ty=Tensor[(4, 220), float32] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(2), int32] */;
  %781 = cast(%778, dtype="float32") /* ty=Tensor[(4, 220), float32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %783 = divide(%781, %782) /* ty=Tensor[(4, 220), float32] */;
  %784 = cast(meta[relay.Constant][53] /* ty=Tensor[(4, 220), int32] */, dtype="bool") /* ty=Tensor[(4, 220), bool] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(2), int32] */;
  %786 = cast(%783, dtype="bool") /* ty=Tensor[(4, 220), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %788 = less_equal(%786, %787) /* ty=Tensor[(4, 220), bool] */;
  %789 = cast(%788, dtype="uint16") /* ty=Tensor[(4, 220), uint16] */;
  %790 = shape_of(%783, dtype="int32") /* ty=Tensor[(2), int32] */;
  %791 = cast(%783, dtype="uint16") /* ty=Tensor[(4, 220), uint16] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %793 = left_shift(%775, %776) /* ty=Tensor[(7, 9, 352), int16] */;
  %794 = minimum(%791, %792) /* ty=Tensor[(4, 220), uint16] */;
  (%var_6639, %793, %794)
}

def @func_3317() -> Tensor[(63), float32] {
  @func_2936() /* ty=Tensor[(63), float32] */
}

def @func_2640() -> (Tensor[(6, 8, 5), float32],) {
  %795 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %796 = acosh(%795) /* ty=Tensor[(6, 8, 5), float32] */;
  (%796,)
}

def @func_4004() -> (Tensor[(63), float32],) {
  %797 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %798 = %797.0;
  (%798,)
}

def @func_4446() -> Tensor[(6, 8, 5), float32] {
  %799 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
  %800 = %799.1;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  cos(%801) /* ty=Tensor[(6, 8, 5), float32] */
}

def @func_5566() -> (Tensor[(1183, 1), float32], Tensor[(1183), float32], Tensor[(480), uint64]) {
  %802 = @func_3359() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) */;
  %803 = cast(meta[relay.Constant][55] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %804 = reshape(%803, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint64] */;
  %805 = @func_2884(%804) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) */;
  %806 = %802.2;
  %807 = %805.3;
  (%806, %807, meta[relay.Constant][55] /* ty=Tensor[(480), uint64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6503() -> Tensor[(63), float32] {
  %1 = fn () -> Tensor[(63), float32] {
    %0 = @func_5500() /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(336), float64]) */;
    %0.0
  };
  %1() /* ty=Tensor[(63), float32] */
}

def @func_4448() -> Tensor[(6, 8, 5), float32] {
  @func_4446() /* ty=Tensor[(6, 8, 5), float32] */
}

def @func_4108(%var_4106: Tensor[(63), float32]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32]) {
  @func_4105(%var_4106) /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32]) */
}

def @func_5729() -> (Tensor[(63), float32],) {
  @func_5727() /* ty=(Tensor[(63), float32],) */
}

def @func_3473() -> (Tensor[(63), float32], Tensor[(7, 9, 352), float64]) {
  @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */
}

def @func_4887() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  @func_4885() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */
}

def @func_6164() -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(168, 2), bool]) {
  @func_6162() /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(168, 2), bool]) */
}

def @func_5009(%var_4977: Tensor[(9, 6, 12), int64], %var_4991: Tensor[(9, 6, 12), int64]) -> (Tensor[(63), float32], Tensor[(9, 6, 12), float64], Tensor[(9, 6, 12), uint16]) {
  %2 = @func_3306() /* ty=(Tensor[(63), float32],) */;
  %3 = cast(%var_4991, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %4 = shape_of(%var_4977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_4977, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = logical_and(%5, %6) /* ty=Tensor[(9, 6, 12), bool] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %9 = shape_of(%var_4977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_4977, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = greater_equal(%10, %11) /* ty=Tensor[(9, 6, 12), bool] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %14 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%7, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %17 = cast(%7, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %18 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(9, 6, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 6, 12), int64] */, dtype="uint16") /* ty=Tensor[(9, 6, 12), uint16] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %21 = %2.0;
  %22 = floor_mod(%15, %16) /* ty=Tensor[(9, 6, 12), float64] */;
  %23 = subtract(%19, %20) /* ty=Tensor[(9, 6, 12), uint16] */;
  (%21, %22, %23)
}

def @func_2073(%var_2059: Tensor[(14, 1, 13), float32]) -> (Tensor[(14, 1, 13), float32], Tensor[(14, 1, 13), float32]) {
  %24 = cast(%var_2059, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
  %25 = cast(%var_2059, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
  %26 = exp(%24) /* ty=Tensor[(14, 1, 13), float32] */;
  %27 = asinh(%25) /* ty=Tensor[(14, 1, 13), float32] */;
  (%26, %27)
}

def @func_5893() -> (Tensor[(63), float32], Tensor[(63), float32]) {
  %28 = @func_3419() /* ty=(Tensor[(63), float32],) */;
  %29 = %28.0;
  %30 = @func_3317() /* ty=Tensor[(63), float32] */;
  (%29, %30)
}

def @func_4614(%var_4610: Tensor[(6, 5, 11), float32], %var_4611: Tensor[(6, 5, 11), float32], %var_4612: Tensor[(6, 5, 11), bool], %var_4613: Tensor[(52), float64]) -> (Tensor[(?, 4, 13), bool], Tensor[(52), float64], Tensor[(6, 5, 11), int16]) {
  @func_4608(%var_4610, %var_4611, %var_4612, %var_4613) /* ty=(Tensor[(?, 4, 13), bool], Tensor[(52), float64], Tensor[(6, 5, 11), int16]) */
}

def @func_3471() -> (Tensor[(63), float32], Tensor[(7, 9, 352), float64]) {
  %31 = @func_3317() /* ty=Tensor[(63), float32] */;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(63), float32] */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %34 = reshape(%32, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float32] */;
  %35 = reshape(%33, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %36 = @func_2364(%34, %35) /* ty=(Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */;
  %37 = %36.0;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(352), float32] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %39 = cast(%37, dtype="float64") /* ty=Tensor[(7, 9, ?), float64] */;
  %40 = floor_mod(%38, %39) /* ty=Tensor[(7, 9, 352), float64] */;
  (%31, %40)
}

def @func_3966(%var_3906: Tensor[(11, 14, 13), float32]) -> (Tensor[(11, 14, 13), bool], Tensor[(11, 14, 13), float64], Tensor[(6, 8, 5), float32]) {
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 14, 13), float32] */, dtype="bool") /* ty=Tensor[(11, 14, 13), bool] */;
  %42 = shape_of(%var_3906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_3906, dtype="bool") /* ty=Tensor[(11, 14, 13), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%var_3906, dtype="float64") /* ty=Tensor[(11, 14, 13), float64] */;
  %46 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %47 = less(%43, %44) /* ty=Tensor[(11, 14, 13), bool] */;
  %48 = log2(%45) /* ty=Tensor[(11, 14, 13), float64] */;
  %49 = %46.0;
  (%47, %48, %49)
}

def @func_6372() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32], Tensor[(4, 220), int32], Tensor[(336), float64]) {
  %50 = @func_5727() /* ty=(Tensor[(63), float32],) */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 220), int32] */, dtype="int32") /* ty=Tensor[(4, 220), int32] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %53 = reshape(%51, newshape=[880]) /* ty=Tensor[(880), int32] */;
  %54 = reshape(%52, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %55 = @func_5282(%53, %54) /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(5, 6, 7), bool], Tensor[(210), int8], Tensor[(11, 16, 5), int32], Tensor[(880), int32], Tensor[(7, 16, 3), float32], Tensor[(336), float64], Tensor[(6, 8, 5), float32]) */;
  %56 = %50.0;
  %57 = %55.9;
  (%56, %57, meta[relay.Constant][3] /* ty=Tensor[(4, 220), int32] */, meta[relay.Constant][4] /* ty=Tensor[(336), float64] */)
}

def @func_3306() -> (Tensor[(63), float32],) {
  %58 = @func_3285() /* ty=Tensor[(63), float32] */;
  (%58,)
}

def @func_3008() -> Tensor[(63), float32] {
  @func_3006() /* ty=Tensor[(63), float32] */
}

def @func_1052(%var_1050: Tensor[(11, 16, 2), float32]) -> Tensor[(11, 16, 2), float32] {
  @func_1049(%var_1050) /* ty=Tensor[(11, 16, 2), float32] */
}

def @func_5336() -> Tensor[(5, 11, 11), bool] {
  %60 = fn () -> Tensor[(5, 11, 11), bool] {
    %59 = @func_5319() /* ty=(Tensor[(5, 11, 11), bool],) */;
    %59.0
  };
  %60() /* ty=Tensor[(5, 11, 11), bool] */
}

def @func_4198() -> (Tensor[(6, 8, 5), float32], Tensor[(63), int32]) {
  %70 = fn () -> (Tensor[(6, 8, 5), float32], Tensor[(63), int32]) {
    %61 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
    %62 = @func_3600() /* ty=(Tensor[(63), float32],) */;
    %63 = %62.0;
    %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(63), float32] */, dtype="int32") /* ty=Tensor[(63), int32] */;
    %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(1), int32] */;
    %66 = cast(%63, dtype="int32") /* ty=Tensor[(63), int32] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?), int32] */;
    %68 = %61.0;
    %69 = bitwise_or(%66, %67) /* ty=Tensor[(63), int32] */;
    (%68, %69)
  };
  %70() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(63), int32]) */
}

def @func_5361() -> Tensor[(6, 8, 5), float32] {
  %71 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %71.0
}

def @func_3230(%var_3182: Tensor[(352), float32], %var_3203: Tensor[(182), float32]) -> (Tensor[(6, 8, 5), float32], Tensor[(352), uint16], Tensor[(52), float64], Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(1183), int16], Tensor[(1183), float32]) {
  %72 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %73 = cast(%var_3182, dtype="float32") /* ty=Tensor[(352), float32] */;
  %74 = reshape(%73, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %75 = @func_1049(%74) /* ty=Tensor[(11, 16, 2), float32] */;
  %76 = cast(%75, dtype="uint16") /* ty=Tensor[(11, 16, 2), uint16] */;
  %77 = shape_of(%var_3182, dtype="int32") /* ty=Tensor[(1), int32] */;
  %78 = cast(%var_3182, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %82 = reshape(%80, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %83 = reshape(%81, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %84 = @func_2205(%82, %83) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %85 = cast(%var_3203, dtype="float32") /* ty=Tensor[(182), float32] */;
  %86 = reshape(%85, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %87 = @func_2073(%86) /* ty=(Tensor[(14, 1, 13), float32], Tensor[(14, 1, 13), float32]) */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(1183), float32] */, dtype="int16") /* ty=Tensor[(1183), int16] */;
  %89 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1183), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(1183), float32] */, dtype="int16") /* ty=Tensor[(1183), int16] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?), int16] */;
  %92 = cast(meta[relay.Constant][7] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %93 = %72.0;
  %94 = maximum(%78, %79) /* ty=Tensor[(352), uint16] */;
  %95 = %84.2;
  %96 = %87.0;
  %97 = maximum(%90, %91) /* ty=Tensor[(1183), int16] */;
  %98 = rsqrt(%92) /* ty=Tensor[(1183), float32] */;
  (%93, %94, %95, %96, %var_3203, %97, %98)
}

def @func_6250(%var_6248: Tensor[(63), float32]) -> Tensor[(63), float32] {
  @func_6247(%var_6248) /* ty=Tensor[(63), float32] */
}

def @func_5452(%var_5450: Tensor[(13, 10, 4), int64]) -> (Tensor[(13, 10, 4), bool], Tensor[(13, 10, 4), float32]) {
  @func_5449(%var_5450) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(13, 10, 4), float32]) */
}

def @func_5968() -> (Tensor[(63), float32], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(6, 8, 5), float32]) {
  %108 = fn () -> (Tensor[(63), float32], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(6, 8, 5), float32]) {
    %99 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
    %100 = cast(meta[relay.Constant][8] /* ty=Tensor[(520), int64] */, dtype="int64") /* ty=Tensor[(520), int64] */;
    %101 = reshape(%100, newshape=[13, 10, 4]) /* ty=Tensor[(13, 10, 4), int64] */;
    %102 = @func_5449(%101) /* ty=(Tensor[(13, 10, 4), bool], Tensor[(13, 10, 4), float32]) */;
    %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(520), int64] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %104 = %99.0;
    %105 = %102.0;
    %106 = cosh(%103) /* ty=Tensor[(520), float32] */;
    %107 = @func_4446() /* ty=Tensor[(6, 8, 5), float32] */;
    (%104, %105, %106, %107)
  };
  %108() /* ty=(Tensor[(63), float32], Tensor[(13, 10, 4), bool], Tensor[(520), float32], Tensor[(6, 8, 5), float32]) */
}

def @func_3487() -> (Tensor[(6, 8, 5), float32],) {
  @func_3485() /* ty=(Tensor[(6, 8, 5), float32],) */
}

def @func_5148(%var_5131: Tensor[(210, 1), int8]) -> (Tensor[(4, 14, 13), float32], Tensor[(210, 63), int64]) {
  %109 = cast(%var_5131, dtype="int8") /* ty=Tensor[(210, 1), int8] */;
  %110 = reshape(%109, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
  %111 = @func_1403(%110) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
  %112 = @func_4004() /* ty=(Tensor[(63), float32],) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="int64") /* ty=Tensor[(63), int64] */;
  %115 = cast(%var_5131, dtype="int64") /* ty=Tensor[(210, 1), int64] */;
  %116 = %111.0;
  %117 = bitwise_xor(%114, %115) /* ty=Tensor[(210, 63), int64] */;
  (%116, %117)
}

def @func_5727() -> (Tensor[(63), float32],) {
  %118 = @func_3419() /* ty=(Tensor[(63), float32],) */;
  %119 = %118.0;
  (%119,)
}

def @func_6058(%var_6020: Tensor[(420), int32]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(10, 6, 7), int32], Tensor[(420), int32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(6, 8, 5), float64], Tensor[(240), float32]) {
  %120 = @func_3600() /* ty=(Tensor[(63), float32],) */;
  %121 = @func_3006() /* ty=Tensor[(63), float32] */;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(63), float32] */;
  %123 = cast(%var_6020, dtype="int32") /* ty=Tensor[(420), int32] */;
  %124 = reshape(%123, newshape=[10, 6, 7]) /* ty=Tensor[(10, 6, 7), int32] */;
  %125 = @func_3803(%124) /* ty=(Tensor[(10, 6, 7), int32], Tensor[(6, 8, 5), float32]) */;
  %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %128 = reshape(%126, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %129 = reshape(%127, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %130 = @func_2205(%128, %129) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %131 = cast(meta[relay.Constant][10] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %132 = cast(meta[relay.Constant][10] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %133 = reshape(%131, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %134 = reshape(%132, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %135 = @func_3142(%133, %134) /* ty=(Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) */;
  %136 = @func_3317() /* ty=Tensor[(63), float32] */;
  %137 = %120.0;
  %138 = asinh(%122) /* ty=Tensor[(63), float32] */;
  %139 = %125.0;
  %140 = %130.0;
  %141 = %135.0;
  (%136, %137, %138, %139, %var_6020, %140, meta[relay.Constant][9] /* ty=Tensor[(1183), float32] */, %141, meta[relay.Constant][10] /* ty=Tensor[(240), float32] */)
}

def @func_5500() -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(336), float64]) {
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %143 = cast(meta[relay.Constant][11] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %144 = reshape(%142, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %145 = reshape(%143, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %146 = @func_3736(%144, %145) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
  %147 = @func_5203() /* ty=Tensor[(63), float32] */;
  %148 = %146.0;
  (%147, %148, meta[relay.Constant][11] /* ty=Tensor[(336), float64] */)
}

def @func_4767(%var_4761: Tensor[(12, 3, 14), int16], %var_4762: Tensor[(36), int16], %var_4763: Tensor[(1, 288), int16], %var_4764: Tensor[(352), float32], %var_4765: Tensor[(12, 3, 14), float32], %var_4766: Tensor[(12, 3, 14), float32]) -> (Tensor[(?, 4, 13), bool], Tensor[(36), int16], Tensor[(1, 288), int16], Tensor[(52), float64], Tensor[(352), float32], Tensor[(12, 3, 14), int64], Tensor[(6, 8, 5), float32], Tensor[(12, 3, 14), int32], Tensor[(63), uint8], Tensor[(63), float32]) {
  %186 = fn (%var_4690: Tensor[(12, 3, 14), int16], %var_4710: Tensor[(36), int16], %var_4711: Tensor[(1, 288), int16], %var_4713: Tensor[(352), float32], %var_4718: Tensor[(12, 3, 14), float32], %var_4750: Tensor[(12, 3, 14), float32]) -> (Tensor[(?, 4, 13), bool], Tensor[(36), int16], Tensor[(1, 288), int16], Tensor[(52), float64], Tensor[(352), float32], Tensor[(12, 3, 14), int64], Tensor[(6, 8, 5), float32], Tensor[(12, 3, 14), int32], Tensor[(63), uint8], Tensor[(63), float32]) {
    %149 = cast(%var_4710, dtype="int16") /* ty=Tensor[(36), int16] */;
    %150 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1, 288), int16] */;
    %151 = cast(meta[relay.Constant][12] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %152 = cast(%var_4713, dtype="float32") /* ty=Tensor[(352), float32] */;
    %153 = reshape(%149, newshape=[1, 4, 9]) /* ty=Tensor[(1, 4, 9), int16] */;
    %154 = reshape(%150, newshape=[8, 4, 9]) /* ty=Tensor[(8, 4, 9), int16] */;
    %155 = reshape(%151, newshape=[13, 4]) /* ty=Tensor[(13, 4), float64] */;
    %156 = reshape(%152, newshape=[352]) /* ty=Tensor[(352), float32] */;
    %157 = @func_2011(%153, %154, %155, %156) /* ty=(Tensor[(8, 4, 9), float32], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(?, 4, 13), bool], Tensor[(13, 4), float64], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */;
    %158 = cast(meta[relay.Constant][13] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %159 = cast(%var_4690, dtype="int16") /* ty=Tensor[(12, 3, 14), int16] */;
    %160 = maximum(%158, %159) /* ty=Tensor[(12, 3, 14), int16] */;
    %161 = cast(%160, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
    %162 = exp(%161) /* ty=Tensor[(12, 3, 14), float32] */;
    %163 = cast(%var_4718, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
    %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%162, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %167 = not_equal(%165, %166) /* ty=Tensor[(12, 3, 14), bool] */;
    %168 = cast(%167, dtype="int64") /* ty=Tensor[(12, 3, 14), int64] */;
    %169 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
    %170 = cast(%160, dtype="int64") /* ty=Tensor[(12, 3, 14), int64] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %172 = @func_4197() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(63), int32]) */;
    %173 = cast(%162, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
    %174 = tan(%173) /* ty=Tensor[(12, 3, 14), float32] */;
    %175 = cast(%var_4750, dtype="int32") /* ty=Tensor[(12, 3, 14), int32] */;
    %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %177 = cast(%174, dtype="int32") /* ty=Tensor[(12, 3, 14), int32] */;
    %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %179 = cast(meta[relay.Constant][14] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
    %180 = reshape(%179, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %181 = %157.3;
    %182 = multiply(%170, %171) /* ty=Tensor[(12, 3, 14), int64] */;
    %183 = %172.0;
    %184 = minimum(%177, %178) /* ty=Tensor[(12, 3, 14), int32] */;
    %185 = @func_4550(%180) /* ty=Tensor[(63), uint8] */;
    (%181, %var_4710, %var_4711, meta[relay.Constant][12] /* ty=Tensor[(52), float64] */, %var_4713, %182, %183, %184, %185, meta[relay.Constant][14] /* ty=Tensor[(63), float32] */)
  };
  %186(%var_4761, %var_4762, %var_4763, %var_4764, %var_4765, %var_4766) /* ty=(Tensor[(?, 4, 13), bool], Tensor[(36), int16], Tensor[(1, 288), int16], Tensor[(52), float64], Tensor[(352), float32], Tensor[(12, 3, 14), int64], Tensor[(6, 8, 5), float32], Tensor[(12, 3, 14), int32], Tensor[(63), uint8], Tensor[(63), float32]) */
}

def @func_5205() -> Tensor[(63), float32] {
  @func_5203() /* ty=Tensor[(63), float32] */
}

def @func_472(%var_470: Tensor[(4, 14, 13), float32], %var_471: Tensor[(4, 14, 13), float32]) -> (Tensor[(4, 14, 13), float32],) {
  @func_468(%var_470, %var_471) /* ty=(Tensor[(4, 14, 13), float32],) */
}

def @func_3654() -> Tensor[(13, 7, 13), float32] {
  @func_3652() /* ty=Tensor[(13, 7, 13), float32] */
}

def @func_5409(%var_5407: Tensor[(12, 2), uint32], %var_5408: Tensor[(480), uint64]) -> (Tensor[(2, 2, 6), uint32], Tensor[(12, 2), uint32], Tensor[(1183), float32], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) {
  %198 = fn (%var_5378: Tensor[(12, 2), uint32], %var_5381: Tensor[(480), uint64]) -> (Tensor[(2, 2, 6), uint32], Tensor[(12, 2), uint32], Tensor[(1183), float32], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) {
    %187 = cast(%var_5378, dtype="uint32") /* ty=Tensor[(12, 2), uint32] */;
    %188 = reshape(%187, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), uint32] */;
    %189 = @func_1173(%188) /* ty=(Tensor[(2, 2, 6), uint32],) */;
    %190 = cast(%var_5381, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %191 = reshape(%190, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint64] */;
    %192 = @func_2884(%191) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) */;
    %193 = @func_5335() /* ty=Tensor[(5, 11, 11), bool] */;
    %194 = cast(%193, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
    %195 = %189.0;
    %196 = %192.3;
    %197 = log2(%194) /* ty=Tensor[(5, 11, 11), float64] */;
    (%195, %var_5378, %196, %var_5381, %197)
  };
  %198(%var_5407, %var_5408) /* ty=(Tensor[(2, 2, 6), uint32], Tensor[(12, 2), uint32], Tensor[(1183), float32], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) */
}

def @func_3419() -> (Tensor[(63), float32],) {
  %199 = @func_3306() /* ty=(Tensor[(63), float32],) */;
  %200 = %199.0;
  (%200,)
}

def @func_6061(%var_6059: Tensor[(420), int32]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(10, 6, 7), int32], Tensor[(420), int32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(6, 8, 5), float64], Tensor[(240), float32]) {
  @func_6058(%var_6059) /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(10, 6, 7), int32], Tensor[(420), int32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(6, 8, 5), float64], Tensor[(240), float32]) */
}

def @func_4553(%var_4551: Tensor[(63), float32]) -> Tensor[(63), uint8] {
  @func_4550(%var_4551) /* ty=Tensor[(63), uint8] */
}

def @func_5785(%var_5768: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), bool],) {
  %201 = @func_5361() /* ty=Tensor[(6, 8, 5), float32] */;
  %202 = cast(%var_5768, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = not_equal(%204, %205) /* ty=Tensor[(6, 8, 5), bool] */;
  (%206,)
}

def @func_3444() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  %207 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %208 = @func_2936() /* ty=Tensor[(63), float32] */;
  %209 = %207.0;
  (%208, %209)
}

def @func_2886(%var_2885: Tensor[(2, 240), uint64]) -> (Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) {
  %231 = fn (%var_2860: Tensor[(2, 240), uint64]) -> (Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) {
    %210 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
    %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
    %212 = cast(meta[relay.Constant][16] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
    %213 = reshape(%211, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
    %214 = reshape(%212, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
    %215 = @func_2205(%213, %214) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
    %216 = cast(meta[relay.Constant][15] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %217 = cast(meta[relay.Constant][15] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %218 = cast(%var_2860, dtype="uint64") /* ty=Tensor[(2, 240), uint64] */;
    %219 = reshape(%216, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
    %220 = reshape(%217, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), float64] */;
    %221 = reshape(%218, newshape=[480]) /* ty=Tensor[(480), uint64] */;
    %222 = @func_230(%219, %220, %221) /* ty=(Tensor[(4, 10, 8), float64], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(16, 10, 3), float64]) */;
    %223 = %222.1;
    %224 = cast(%var_2860, dtype="int16") /* ty=Tensor[(2, 240), int16] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%223, dtype="int16") /* ty=Tensor[(16, 10, 3), int16] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %228 = %210.0;
    %229 = %215.0;
    %230 = subtract(%226, %227) /* ty=Tensor[(16, 10, 3), int16] */;
    (%228, meta[relay.Constant][15] /* ty=Tensor[(320), float64] */, %229, meta[relay.Constant][16] /* ty=Tensor[(1183), float32] */, %230)
  };
  %231(%var_2885) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) */
}

def @func_2742(%var_2741: Tensor[(4, 120), uint64]) -> (Tensor[(6, 8, 5), float32], Tensor[(15, 15, 10), uint64], Tensor[(4, 120), uint64], Tensor[(16, 10, 3), uint64], Tensor[(2250), float64]) {
  %249 = fn (%var_2681: Tensor[(4, 120), uint64]) -> (Tensor[(6, 8, 5), float32], Tensor[(15, 15, 10), uint64], Tensor[(4, 120), uint64], Tensor[(16, 10, 3), uint64], Tensor[(2250), float64]) {
    %232 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
    %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(2250), int32] */, dtype="int32") /* ty=Tensor[(2250), int32] */;
    %234 = cast(meta[relay.Constant][17] /* ty=Tensor[(2250), int32] */, dtype="int32") /* ty=Tensor[(2250), int32] */;
    %235 = cast(%var_2681, dtype="uint64") /* ty=Tensor[(4, 120), uint64] */;
    %236 = reshape(%233, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), int32] */;
    %237 = reshape(%234, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), int32] */;
    %238 = reshape(%235, newshape=[480]) /* ty=Tensor[(480), uint64] */;
    %239 = @func_733(%236, %237, %238) /* ty=(Tensor[(15, 15, 10), int32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(15, 15, 10), uint64]) */;
    %240 = cast(%var_2681, dtype="uint64") /* ty=Tensor[(4, 120), uint64] */;
    %241 = cast(%var_2681, dtype="uint64") /* ty=Tensor[(4, 120), uint64] */;
    %242 = reshape(%240, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
    %243 = reshape(%241, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
    %244 = cast(meta[relay.Constant][17] /* ty=Tensor[(2250), int32] */, dtype="float64") /* ty=Tensor[(2250), float64] */;
    %245 = %232.0;
    %246 = %239.3;
    %247 = @func_98(%242, %243) /* ty=Tensor[(16, 10, 3), uint64] */;
    %248 = acos(%244) /* ty=Tensor[(2250), float64] */;
    (%245, %246, %var_2681, %247, %248)
  };
  %249(%var_2741) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(15, 15, 10), uint64], Tensor[(4, 120), uint64], Tensor[(16, 10, 3), uint64], Tensor[(2250), float64]) */
}

def @func_3146(%var_3144: Tensor[(6, 8, 5), float32], %var_3145: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) {
  @func_3142(%var_3144, %var_3145) /* ty=(Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) */
}

def @func_2076(%var_2074: Tensor[(14, 1, 13), float32]) -> (Tensor[(14, 1, 13), float32], Tensor[(14, 1, 13), float32]) {
  @func_2073(%var_2074) /* ty=(Tensor[(14, 1, 13), float32], Tensor[(14, 1, 13), float32]) */
}

def @func_4105(%var_4057: Tensor[(63), float32]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32]) {
  %250 = @func_3006() /* ty=Tensor[(63), float32] */;
  %251 = cast(%var_4057, dtype="bool") /* ty=Tensor[(63), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(1), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(63), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?), bool] */;
  %255 = less(%253, %254) /* ty=Tensor[(63), bool] */;
  %256 = cast(%var_4057, dtype="float32") /* ty=Tensor[(63), float32] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(1), int32] */;
  %258 = cast(%255, dtype="float32") /* ty=Tensor[(63), float32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?), float32] */;
  %260 = @func_3006() /* ty=Tensor[(63), float32] */;
  %261 = @func_3285() /* ty=Tensor[(63), float32] */;
  %262 = floor_divide(%258, %259) /* ty=Tensor[(63), float32] */;
  (%260, %261, %262)
}

def @func_3767() -> (Tensor[(63), float32], Tensor[(7, 9, 352), float64]) {
  %268 = fn () -> (Tensor[(63), float32], Tensor[(7, 9, 352), float64]) {
    %263 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
    %264 = %263.1;
    %265 = cast(%264, dtype="float64") /* ty=Tensor[(7, 9, 352), float64] */;
    %266 = @func_3285() /* ty=Tensor[(63), float32] */;
    %267 = erf(%265) /* ty=Tensor[(7, 9, 352), float64] */;
    (%266, %267)
  };
  %268() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */
}

def @func_5895() -> (Tensor[(63), float32], Tensor[(63), float32]) {
  @func_5893() /* ty=(Tensor[(63), float32], Tensor[(63), float32]) */
}

def @func_4446() -> Tensor[(6, 8, 5), float32] {
  %269 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
  %270 = %269.1;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  cos(%271) /* ty=Tensor[(6, 8, 5), float32] */
}

def @func_5151(%var_5149: Tensor[(210, 1), int8]) -> (Tensor[(4, 14, 13), float32], Tensor[(210, 63), int64]) {
  @func_5148(%var_5149) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(210, 63), int64]) */
}

def @func_1049(%var_1040: Tensor[(11, 16, 2), float32]) -> Tensor[(11, 16, 2), float32] {
  %272 = cast(%var_1040, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  asinh(%272) /* ty=Tensor[(11, 16, 2), float32] */
}

def @func_3652() -> Tensor[(13, 7, 13), float32] {
  %273 = @func_3359() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) */;
  %273.1
}

def @func_4004() -> (Tensor[(63), float32],) {
  %274 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %275 = %274.0;
  (%275,)
}

def @func_4513(%var_4512: Tensor[(7, 10, 3), float64]) -> (Tensor[(7, 10, 3), float64], Tensor[(63), float32]) {
  %284 = fn (%var_4488: Tensor[(7, 10, 3), float64]) -> (Tensor[(7, 10, 3), float64], Tensor[(63), float32]) {
    %276 = cast(%var_4488, dtype="float64") /* ty=Tensor[(7, 10, 3), float64] */;
    %277 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(7, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 3), float64] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %280 = @func_3317() /* ty=Tensor[(63), float32] */;
    %281 = cast(%280, dtype="float32") /* ty=Tensor[(63), float32] */;
    %282 = mod(%278, %279) /* ty=Tensor[(7, 10, 3), float64] */;
    %283 = cosh(%281) /* ty=Tensor[(63), float32] */;
    (%282, %283)
  };
  %284(%var_4512) /* ty=(Tensor[(7, 10, 3), float64], Tensor[(63), float32]) */
}

def @func_4608(%var_4560: Tensor[(6, 5, 11), float32], %var_4580: Tensor[(6, 5, 11), float32], %var_4584: Tensor[(6, 5, 11), bool], %var_4589: Tensor[(52), float64]) -> (Tensor[(?, 4, 13), bool], Tensor[(52), float64], Tensor[(6, 5, 11), int16]) {
  %285 = cast(%var_4589, dtype="float64") /* ty=Tensor[(52), float64] */;
  %286 = reshape(%285, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %287 = cast(%var_4560, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %288 = sigmoid(%287) /* ty=Tensor[(6, 5, 11), float32] */;
  %289 = cast(%var_4580, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = less_equal(%291, %292) /* ty=Tensor[(6, 5, 11), bool] */;
  %294 = cast(%var_4584, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = equal(%296, %297) /* ty=Tensor[(6, 5, 11), bool] */;
  %299 = cast(%298, dtype="int16") /* ty=Tensor[(6, 5, 11), int16] */;
  %300 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%293, dtype="int16") /* ty=Tensor[(6, 5, 11), int16] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %303 = @func_1197(%286) /* ty=Tensor[(?, 4, 13), bool] */;
  %304 = multiply(%301, %302) /* ty=Tensor[(6, 5, 11), int16] */;
  (%303, %var_4589, %304)
}

def @func_6472(%var_6470: Tensor[(605), bool], %var_6471: Tensor[(240), float32]) -> (Tensor[(63), float32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(780), int64], Tensor[(780), int64], Tensor[(605), bool], Tensor[(7, 10, 3), float64], Tensor[(210), float64], Tensor[(6, 8, 5), float32], Tensor[(240), float32], Tensor[(1183, 1), float32]) {
  %332 = fn (%var_6440: Tensor[(605), bool], %var_6447: Tensor[(240), float32]) -> (Tensor[(63), float32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(780), int64], Tensor[(780), int64], Tensor[(605), bool], Tensor[(7, 10, 3), float64], Tensor[(210), float64], Tensor[(6, 8, 5), float32], Tensor[(240), float32], Tensor[(1183, 1), float32]) {
    %305 = @func_3306() /* ty=(Tensor[(63), float32],) */;
    %306 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %307 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %308 = reshape(%306, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
    %309 = reshape(%307, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
    %310 = cast(meta[relay.Constant][20] /* ty=Tensor[(780), int64] */, dtype="int64") /* ty=Tensor[(780), int64] */;
    %311 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %312 = cast(%var_6440, dtype="bool") /* ty=Tensor[(605), bool] */;
    %313 = reshape(%310, newshape=[780]) /* ty=Tensor[(780), int64] */;
    %314 = reshape(%311, newshape=[480]) /* ty=Tensor[(480), uint64] */;
    %315 = reshape(%312, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), bool] */;
    %316 = @func_5617(%313, %314, %315) /* ty=(Tensor[(2, 240), uint64], Tensor[(780), int64], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) */;
    %317 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %318 = reshape(%317, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
    %319 = @func_4511(%318) /* ty=(Tensor[(7, 10, 3), float64], Tensor[(63), float32]) */;
    %320 = cast(%var_6447, dtype="float32") /* ty=Tensor[(240), float32] */;
    %321 = cast(%var_6447, dtype="float32") /* ty=Tensor[(240), float32] */;
    %322 = reshape(%320, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
    %323 = reshape(%321, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
    %324 = @func_3142(%322, %323) /* ty=(Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) */;
    %325 = @func_5566() /* ty=(Tensor[(1183, 1), float32], Tensor[(1183), float32], Tensor[(480), uint64]) */;
    %326 = %305.0;
    %327 = @func_98(%308, %309) /* ty=Tensor[(16, 10, 3), uint64] */;
    %328 = %316.1;
    %329 = %319.0;
    %330 = %324.1;
    %331 = %325.0;
    (%326, %327, meta[relay.Constant][19] /* ty=Tensor[(480), uint64] */, %328, meta[relay.Constant][20] /* ty=Tensor[(780), int64] */, %var_6440, %329, meta[relay.Constant][21] /* ty=Tensor[(210), float64] */, %330, %var_6447, %331)
  };
  %332(%var_6470, %var_6471) /* ty=(Tensor[(63), float32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(780), int64], Tensor[(780), int64], Tensor[(605), bool], Tensor[(7, 10, 3), float64], Tensor[(210), float64], Tensor[(6, 8, 5), float32], Tensor[(240), float32], Tensor[(1183, 1), float32]) */
}

def @func_235(%var_232: Tensor[(4, 10, 8), float64], %var_233: Tensor[(4, 10, 8), float64], %var_234: Tensor[(480), uint64]) -> (Tensor[(4, 10, 8), float64], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(16, 10, 3), float64]) {
  @func_230(%var_232, %var_233, %var_234) /* ty=(Tensor[(4, 10, 8), float64], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(16, 10, 3), float64]) */
}

def @func_101(%var_99: Tensor[(16, 10, 3), uint64], %var_100: Tensor[(16, 10, 3), uint64]) -> Tensor[(16, 10, 3), uint64] {
  %337 = fn (%var_82: Tensor[(16, 10, 3), uint64], %var_83: Tensor[(16, 10, 3), uint64]) -> Tensor[(16, 10, 3), uint64] {
    %333 = cast(%var_83, dtype="uint64") /* ty=Tensor[(16, 10, 3), uint64] */;
    %334 = shape_of(%var_82, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%var_82, dtype="uint64") /* ty=Tensor[(16, 10, 3), uint64] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%335, %336) /* ty=Tensor[(16, 10, 3), uint64] */
  };
  %337(%var_99, %var_100) /* ty=Tensor[(16, 10, 3), uint64] */
}

def @func_3969(%var_3967: Tensor[(11, 14, 13), float32]) -> (Tensor[(11, 14, 13), bool], Tensor[(11, 14, 13), float64], Tensor[(6, 8, 5), float32]) {
  @func_3966(%var_3967) /* ty=(Tensor[(11, 14, 13), bool], Tensor[(11, 14, 13), float64], Tensor[(6, 8, 5), float32]) */
}

def @func_769(%var_768: Tensor[(4, 14, 12), float64]) -> Tensor[(4, 14, 12), float64] {
  %340 = fn (%var_758: Tensor[(4, 14, 12), float64]) -> Tensor[(4, 14, 12), float64] {
    %338 = cast(-3.35835f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %339 = cast(%var_758, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
    divide(%338, %339) /* ty=Tensor[(4, 14, 12), float64] */
  };
  %340(%var_768) /* ty=Tensor[(4, 14, 12), float64] */
}

def @func_5716(%var_5714: Tensor[(36), int16], %var_5715: Tensor[(352), float32]) -> (Tensor[(1, 288), int16], Tensor[(504), int16], Tensor[(36), int16], Tensor[(352), float32], Tensor[(63), float32], Tensor[(63), uint8], Tensor[(63), uint8], Tensor[(288), int16], Tensor[(6, 8, 5), bool]) {
  %377 = fn (%var_5664: Tensor[(36), int16], %var_5666: Tensor[(352), float32]) -> (Tensor[(1, 288), int16], Tensor[(504), int16], Tensor[(36), int16], Tensor[(352), float32], Tensor[(63), float32], Tensor[(63), uint8], Tensor[(63), uint8], Tensor[(288), int16], Tensor[(6, 8, 5), bool]) {
    %341 = cast(meta[relay.Constant][22] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
    %342 = cast(%var_5664, dtype="int16") /* ty=Tensor[(36), int16] */;
    %343 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
    %344 = cast(%var_5666, dtype="float32") /* ty=Tensor[(352), float32] */;
    %345 = cast(meta[relay.Constant][22] /* ty=Tensor[(504), int16] */, dtype="float32") /* ty=Tensor[(504), float32] */;
    %346 = cast(meta[relay.Constant][22] /* ty=Tensor[(504), int16] */, dtype="float32") /* ty=Tensor[(504), float32] */;
    %347 = reshape(%341, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), int16] */;
    %348 = reshape(%342, newshape=[36]) /* ty=Tensor[(36), int16] */;
    %349 = reshape(%343, newshape=[1, 288]) /* ty=Tensor[(1, 288), int16] */;
    %350 = reshape(%344, newshape=[352]) /* ty=Tensor[(352), float32] */;
    %351 = reshape(%345, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
    %352 = reshape(%346, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
    %353 = @func_4760(%347, %348, %349, %350, %351, %352) /* ty=(Tensor[(?, 4, 13), bool], Tensor[(36), int16], Tensor[(1, 288), int16], Tensor[(52), float64], Tensor[(352), float32], Tensor[(12, 3, 14), int64], Tensor[(6, 8, 5), float32], Tensor[(12, 3, 14), int32], Tensor[(63), uint8], Tensor[(63), float32]) */;
    %354 = @func_4408() /* ty=(Tensor[(63), float32], Tensor[(?, 240), uint64], Tensor[(7, 16, 3), float32], Tensor[(336), float64]) */;
    %355 = %354.0;
    %356 = cast(%355, dtype="float32") /* ty=Tensor[(63), float32] */;
    %357 = reshape(%356, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %358 = @func_4550(%357) /* ty=Tensor[(63), uint8] */;
    %359 = cast(%358, dtype="float32") /* ty=Tensor[(63), float32] */;
    %360 = reshape(%359, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %361 = cast(meta[relay.Constant][24] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
    %362 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(288), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?), int16] */;
    %365 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
    %366 = %365.1;
    %367 = cast(%366, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
    %368 = tan(%367) /* ty=Tensor[(6, 8, 5), float64] */;
    %369 = cast(%366, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
    %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(%368, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %373 = %353.2;
    %374 = @func_4550(%360) /* ty=Tensor[(63), uint8] */;
    %375 = bitwise_xor(%363, %364) /* ty=Tensor[(288), int16] */;
    %376 = logical_or(%371, %372) /* ty=Tensor[(6, 8, 5), bool] */;
    (%373, meta[relay.Constant][22] /* ty=Tensor[(504), int16] */, %var_5664, %var_5666, %355, %358, %374, %375, %376)
  };
  %377(%var_5714, %var_5715) /* ty=(Tensor[(1, 288), int16], Tensor[(504), int16], Tensor[(36), int16], Tensor[(352), float32], Tensor[(63), float32], Tensor[(63), uint8], Tensor[(63), uint8], Tensor[(288), int16], Tensor[(6, 8, 5), bool]) */
}

def @func_3318() -> Tensor[(63), float32] {
  %378 = fn () -> Tensor[(63), float32] {
    @func_2936() /* ty=Tensor[(63), float32] */
  };
  %378() /* ty=Tensor[(63), float32] */
}

def @func_230(%var_187: Tensor[(4, 10, 8), float64], %var_188: Tensor[(4, 10, 8), float64], %var_194: Tensor[(480), uint64]) -> (Tensor[(4, 10, 8), float64], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(16, 10, 3), float64]) {
  %379 = cast(%var_188, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %380 = shape_of(%var_187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_187, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %383 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %384 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %385 = reshape(%383, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %386 = reshape(%384, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %387 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %388 = cast(%var_194, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %389 = reshape(%387, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %390 = reshape(%388, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %391 = @func_98(%389, %390) /* ty=Tensor[(16, 10, 3), uint64] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %393 = floor_divide(%381, %382) /* ty=Tensor[(4, 10, 8), float64] */;
  %394 = @func_98(%385, %386) /* ty=Tensor[(16, 10, 3), uint64] */;
  %395 = asin(%392) /* ty=Tensor[(16, 10, 3), float64] */;
  (%393, %394, %var_194, %395)
}

def @func_3087(%var_3019: Tensor[(13, 3, 9), float64]) -> (Tensor[(13, 3, 9), float64],) {
  %396 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %397 = shape_of(%var_3019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_3019, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %400 = mod(%398, %399) /* ty=Tensor[(13, 3, 9), float64] */;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %402 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(13, 3, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 9), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %405 = floor_divide(%403, %404) /* ty=Tensor[(13, 3, 9), float64] */;
  (%405,)
}

def @func_5363() -> Tensor[(6, 8, 5), float32] {
  @func_5361() /* ty=Tensor[(6, 8, 5), float32] */
}

def @func_6297() -> (Tensor[(63), float32], Tensor[(352), float32], Tensor[(11, 16, 2), float64], Tensor[(63), float32]) {
  @func_6295() /* ty=(Tensor[(63), float32], Tensor[(352), float32], Tensor[(11, 16, 2), float64], Tensor[(63), float32]) */
}

def @func_2481(%var_2441: Tensor[(15, 4, 13), int64], %var_2456: Tensor[(2, 240), uint64]) -> (Tensor[(15, 4, 13), int64], Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(16, 10, 3), uint64], Tensor[(2, 240), uint64], Tensor[(11, 16, 2), float32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(352), float32]) {
  %406 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
  %407 = shape_of(%var_2441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_2441, dtype="int64") /* ty=Tensor[(15, 4, 13), int64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %410 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %411 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %412 = reshape(%410, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
  %413 = reshape(%411, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
  %414 = @func_468(%412, %413) /* ty=(Tensor[(4, 14, 13), float32],) */;
  %415 = cast(%var_2456, dtype="uint64") /* ty=Tensor[(2, 240), uint64] */;
  %416 = cast(%var_2456, dtype="uint64") /* ty=Tensor[(2, 240), uint64] */;
  %417 = reshape(%415, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %418 = reshape(%416, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
  %419 = cast(meta[relay.Constant][28] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %420 = reshape(%419, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %421 = cast(meta[relay.Constant][29] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %422 = cast(meta[relay.Constant][29] /* ty=Tensor[(1183), float32] */, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %423 = reshape(%421, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %424 = reshape(%422, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
  %425 = @func_2205(%423, %424) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
  %426 = cast(meta[relay.Constant][28] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %427 = minimum(%408, %409) /* ty=Tensor[(15, 4, 13), int64] */;
  %428 = %414.0;
  %429 = @func_98(%417, %418) /* ty=Tensor[(16, 10, 3), uint64] */;
  %430 = @func_1049(%420) /* ty=Tensor[(11, 16, 2), float32] */;
  %431 = %425.0;
  %432 = erf(%426) /* ty=Tensor[(352), float32] */;
  (%427, %428, meta[relay.Constant][27] /* ty=Tensor[(728), float32] */, %429, %var_2456, %430, %431, meta[relay.Constant][29] /* ty=Tensor[(1183), float32] */, %432)
}

def @func_2485(%var_2483: Tensor[(15, 4, 13), int64], %var_2484: Tensor[(2, 240), uint64]) -> (Tensor[(15, 4, 13), int64], Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(16, 10, 3), uint64], Tensor[(2, 240), uint64], Tensor[(11, 16, 2), float32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(352), float32]) {
  @func_2481(%var_2483, %var_2484) /* ty=(Tensor[(15, 4, 13), int64], Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(16, 10, 3), uint64], Tensor[(2, 240), uint64], Tensor[(11, 16, 2), float32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(352), float32]) */
}

def @func_4934(%var_4933: Tensor[(14, 2, 16), float64]) -> Tensor[(14, 2, 16), float64] {
  %434 = fn (%var_4922: Tensor[(14, 2, 16), float64]) -> Tensor[(14, 2, 16), float64] {
    %433 = cast(%var_4922, dtype="float64") /* ty=Tensor[(14, 2, 16), float64] */;
    acosh(%433) /* ty=Tensor[(14, 2, 16), float64] */
  };
  %434(%var_4933) /* ty=Tensor[(14, 2, 16), float64] */
}

def @func_3485() -> (Tensor[(6, 8, 5), float32],) {
  %435 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
  %436 = %435.0;
  (%436,)
}

def @func_3308() -> (Tensor[(63), float32],) {
  @func_3306() /* ty=(Tensor[(63), float32],) */
}

def @func_468(%var_455: Tensor[(4, 14, 13), float32], %var_456: Tensor[(4, 14, 13), float32]) -> (Tensor[(4, 14, 13), float32],) {
  %437 = cast(%var_456, dtype="float32") /* ty=Tensor[(4, 14, 13), float32] */;
  %438 = shape_of(%var_455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_455, dtype="float32") /* ty=Tensor[(4, 14, 13), float32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %441 = floor_divide(%439, %440) /* ty=Tensor[(4, 14, 13), float32] */;
  (%441,)
}

def @func_6603() -> Tensor[(63), float32] {
  @func_3006() /* ty=Tensor[(63), float32] */
}

def @func_2016(%var_2012: Tensor[(1, 4, 9), int16], %var_2013: Tensor[(8, 4, 9), int16], %var_2014: Tensor[(13, 4), float64], %var_2015: Tensor[(352), float32]) -> (Tensor[(8, 4, 9), float32], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(?, 4, 13), bool], Tensor[(13, 4), float64], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) {
  %457 = fn (%var_1943: Tensor[(1, 4, 9), int16], %var_1944: Tensor[(8, 4, 9), int16], %var_1998: Tensor[(13, 4), float64], %var_2006: Tensor[(352), float32]) -> (Tensor[(8, 4, 9), float32], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(?, 4, 13), bool], Tensor[(13, 4), float64], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) {
    %442 = cast(%var_1943, dtype="bool") /* ty=Tensor[(1, 4, 9), bool] */;
    %443 = cast(%var_1944, dtype="bool") /* ty=Tensor[(8, 4, 9), bool] */;
    %444 = less_equal(%442, %443) /* ty=Tensor[(8, 4, 9), bool] */;
    %445 = cast(%444, dtype="float32") /* ty=Tensor[(8, 4, 9), float32] */;
    %446 = cast(%var_1943, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
    %447 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %448 = reshape(%447, newshape=[4, 14, 12]) /* ty=Tensor[(4, 14, 12), float64] */;
    %449 = cast(%var_1998, dtype="float64") /* ty=Tensor[(13, 4), float64] */;
    %450 = reshape(%449, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
    %451 = cast(%var_2006, dtype="float32") /* ty=Tensor[(352), float32] */;
    %452 = reshape(%451, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
    %453 = divide(%445, %446) /* ty=Tensor[(8, 4, 9), float32] */;
    %454 = @func_767(%448) /* ty=Tensor[(4, 14, 12), float64] */;
    %455 = @func_1197(%450) /* ty=Tensor[(?, 4, 13), bool] */;
    %456 = @func_1049(%452) /* ty=Tensor[(11, 16, 2), float32] */;
    (%453, %454, meta[relay.Constant][30] /* ty=Tensor[(672), float64] */, %455, %var_1998, %456, %var_2006)
  };
  %457(%var_2012, %var_2013, %var_2014, %var_2015) /* ty=(Tensor[(8, 4, 9), float32], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(?, 4, 13), bool], Tensor[(13, 4), float64], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */
}

def @func_2640() -> (Tensor[(6, 8, 5), float32],) {
  %458 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %459 = acosh(%458) /* ty=Tensor[(6, 8, 5), float32] */;
  (%459,)
}

def @func_2559(%var_2558: Tensor[(6, 1, 12), float64]) -> (Tensor[(6, 1, 12), float64],) {
  %462 = fn (%var_2543: Tensor[(6, 1, 12), float64]) -> (Tensor[(6, 1, 12), float64],) {
    %460 = cast(%var_2543, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
    %461 = log10(%460) /* ty=Tensor[(6, 1, 12), float64] */;
    (%461,)
  };
  %462(%var_2558) /* ty=(Tensor[(6, 1, 12), float64],) */
}

def @func_6374() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32], Tensor[(4, 220), int32], Tensor[(336), float64]) {
  @func_6372() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32], Tensor[(4, 220), int32], Tensor[(336), float64]) */
}

def @func_5449(%var_5436: Tensor[(13, 10, 4), int64]) -> (Tensor[(13, 10, 4), bool], Tensor[(13, 10, 4), float32]) {
  %463 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 10, 4), int64] */, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %464 = shape_of(%var_5436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_5436, dtype="bool") /* ty=Tensor[(13, 10, 4), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = cast(%var_5436, dtype="float32") /* ty=Tensor[(13, 10, 4), float32] */;
  %468 = greater_equal(%465, %466) /* ty=Tensor[(13, 10, 4), bool] */;
  %469 = atan(%467) /* ty=Tensor[(13, 10, 4), float32] */;
  (%468, %469)
}

def @func_5013(%var_5011: Tensor[(9, 6, 12), int64], %var_5012: Tensor[(9, 6, 12), int64]) -> (Tensor[(63), float32], Tensor[(9, 6, 12), float64], Tensor[(9, 6, 12), uint16]) {
  @func_5009(%var_5011, %var_5012) /* ty=(Tensor[(63), float32], Tensor[(9, 6, 12), float64], Tensor[(9, 6, 12), uint16]) */
}

def @func_5568() -> (Tensor[(1183, 1), float32], Tensor[(1183), float32], Tensor[(480), uint64]) {
  @func_5566() /* ty=(Tensor[(1183, 1), float32], Tensor[(1183), float32], Tensor[(480), uint64]) */
}

def @func_2247(%var_2246: Tensor[(11, 16, 5), int32]) -> (Tensor[(11, 16, 5), int32],) {
  %475 = fn (%var_2229: Tensor[(11, 16, 5), int32]) -> (Tensor[(11, 16, 5), int32],) {
    %470 = cast(%var_2229, dtype="int32") /* ty=Tensor[(11, 16, 5), int32] */;
    %471 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), int32] */, dtype="int32") /* ty=Tensor[(11, 16, 5), int32] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %474 = maximum(%472, %473) /* ty=Tensor[(11, 16, 5), int32] */;
    (%474,)
  };
  %475(%var_2246) /* ty=(Tensor[(11, 16, 5), int32],) */
}

def @func_3234(%var_3232: Tensor[(352), float32], %var_3233: Tensor[(182), float32]) -> (Tensor[(6, 8, 5), float32], Tensor[(352), uint16], Tensor[(52), float64], Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(1183), int16], Tensor[(1183), float32]) {
  @func_3230(%var_3232, %var_3233) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(352), uint16], Tensor[(52), float64], Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(1183), int16], Tensor[(1183), float32]) */
}

def @func_4006() -> (Tensor[(63), float32],) {
  @func_4004() /* ty=(Tensor[(63), float32],) */
}

def @func_6338() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  %476 = @func_2936() /* ty=Tensor[(63), float32] */;
  %477 = @func_4446() /* ty=Tensor[(6, 8, 5), float32] */;
  (%476, %477)
}

def @func_5320() -> (Tensor[(5, 11, 11), bool],) {
  %481 = fn () -> (Tensor[(5, 11, 11), bool],) {
    %478 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 11, 11), uint32] */, dtype="bool") /* ty=Tensor[(1, 11, 11), bool] */;
    %479 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 11, 11), uint32] */, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
    %480 = greater(%478, %479) /* ty=Tensor[(5, 11, 11), bool] */;
    (%480,)
  };
  %481() /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_4409() -> (Tensor[(63), float32], Tensor[(?, 240), uint64], Tensor[(7, 16, 3), float32], Tensor[(336), float64]) {
  %501 = fn () -> (Tensor[(63), float32], Tensor[(?, 240), uint64], Tensor[(7, 16, 3), float32], Tensor[(336), float64]) {
    %482 = @func_3848() /* ty=(Tensor[(63), float32],) */;
    %483 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
    %484 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
    %485 = reshape(%483, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
    %486 = reshape(%484, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
    %487 = @func_3142(%485, %486) /* ty=(Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) */;
    %488 = %487.1;
    %489 = cast(%488, dtype="uint64") /* ty=Tensor[(6, 8, 5), uint64] */;
    %490 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(1, 240), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %491 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 240), float32] */, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
    %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %493 = cast(meta[relay.Constant][37] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %494 = cast(meta[relay.Constant][37] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %495 = reshape(%493, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
    %496 = reshape(%494, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
    %497 = @func_3736(%495, %496) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
    %498 = %482.0;
    %499 = logical_xor(%491, %492) /* ty=Tensor[(?, 240), uint64] */;
    %500 = %497.1;
    (%498, %499, %500, meta[relay.Constant][37] /* ty=Tensor[(336), float64] */)
  };
  %501() /* ty=(Tensor[(63), float32], Tensor[(?, 240), uint64], Tensor[(7, 16, 3), float32], Tensor[(336), float64]) */
}

def @func_6605() -> Tensor[(63), float32] {
  @func_6603() /* ty=Tensor[(63), float32] */
}

def @func_3286() -> Tensor[(63), float32] {
  %502 = fn () -> Tensor[(63), float32] {
    @func_3006() /* ty=Tensor[(63), float32] */
  };
  %502() /* ty=Tensor[(63), float32] */
}

def @func_4550(%var_4544: Tensor[(63), float32]) -> Tensor[(63), uint8] {
  %503 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
  %504 = %503.2;
  %505 = cast(%var_4544, dtype="uint8") /* ty=Tensor[(63), uint8] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(1), int32] */;
  %507 = cast(%504, dtype="uint8") /* ty=Tensor[(63), uint8] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?), uint8] */;
  add(%507, %508) /* ty=Tensor[(63), uint8] */
}

def @func_3648(%var_3647: Tensor[(210), int8]) -> (Tensor[(63), float32], Tensor[(5, 6, 7), int64], Tensor[(210), int8]) {
  %515 = fn (%var_3631: Tensor[(210), int8]) -> (Tensor[(63), float32], Tensor[(5, 6, 7), int64], Tensor[(210), int8]) {
    %509 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
    %510 = cast(%var_3631, dtype="int8") /* ty=Tensor[(210), int8] */;
    %511 = reshape(%510, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
    %512 = @func_1403(%511) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
    %513 = %509.0;
    %514 = %512.2;
    (%513, %514, %var_3631)
  };
  %515(%var_3647) /* ty=(Tensor[(63), float32], Tensor[(5, 6, 7), int64], Tensor[(210), int8]) */
}

def @func_5502() -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(336), float64]) {
  @func_5500() /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(336), float64]) */
}

def @func_2205(%var_2182: Tensor[(13, 7, 13), float32], %var_2183: Tensor[(13, 7, 13), float32]) -> (Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) {
  %516 = cast(%var_2183, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %517 = shape_of(%var_2182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%var_2182, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %520 = cast(meta[relay.Constant][38] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %521 = reshape(%520, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %522 = floor_mod(%518, %519) /* ty=Tensor[(13, 7, 13), float32] */;
  %523 = @func_1197(%521) /* ty=Tensor[(?, 4, 13), bool] */;
  (%522, %523, meta[relay.Constant][38] /* ty=Tensor[(52), float64] */)
}

def @func_3602() -> (Tensor[(63), float32],) {
  @func_3600() /* ty=(Tensor[(63), float32],) */
}

def @func_5285(%var_5283: Tensor[(880), int32], %var_5284: Tensor[(336), float64]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(5, 6, 7), bool], Tensor[(210), int8], Tensor[(11, 16, 5), int32], Tensor[(880), int32], Tensor[(7, 16, 3), float32], Tensor[(336), float64], Tensor[(6, 8, 5), float32]) {
  %548 = fn (%var_5269: Tensor[(880), int32], %var_5274: Tensor[(336), float64]) -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(5, 6, 7), bool], Tensor[(210), int8], Tensor[(11, 16, 5), int32], Tensor[(880), int32], Tensor[(7, 16, 3), float32], Tensor[(336), float64], Tensor[(6, 8, 5), float32]) {
    %524 = @func_3600() /* ty=(Tensor[(63), float32],) */;
    %525 = %524.0;
    %526 = cast(%525, dtype="float32") /* ty=Tensor[(63), float32] */;
    %527 = reshape(%526, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %528 = @func_4105(%527) /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32]) */;
    %529 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
    %530 = cast(meta[relay.Constant][39] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
    %531 = reshape(%530, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
    %532 = @func_1403(%531) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
    %533 = cast(%var_5269, dtype="int32") /* ty=Tensor[(880), int32] */;
    %534 = reshape(%533, newshape=[11, 16, 5]) /* ty=Tensor[(11, 16, 5), int32] */;
    %535 = @func_2245(%534) /* ty=(Tensor[(11, 16, 5), int32],) */;
    %536 = cast(%var_5274, dtype="float64") /* ty=Tensor[(336), float64] */;
    %537 = cast(%var_5274, dtype="float64") /* ty=Tensor[(336), float64] */;
    %538 = reshape(%536, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
    %539 = reshape(%537, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
    %540 = @func_3736(%538, %539) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
    %541 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
    %542 = %528.2;
    %543 = %529.0;
    %544 = %532.3;
    %545 = %535.0;
    %546 = %540.1;
    %547 = %541.1;
    (%525, %542, %543, %544, meta[relay.Constant][39] /* ty=Tensor[(210), int8] */, %545, %var_5269, %546, %var_5274, %547)
  };
  %548(%var_5283, %var_5284) /* ty=(Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(5, 6, 7), bool], Tensor[(210), int8], Tensor[(11, 16, 5), int32], Tensor[(880), int32], Tensor[(7, 16, 3), float32], Tensor[(336), float64], Tensor[(6, 8, 5), float32]) */
}

def @func_2907() -> (Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) {
  %557 = fn () -> (Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) {
    %549 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
    %550 = cast(meta[relay.Constant][40] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
    %551 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 88), float32] */, dtype="float32") /* ty=Tensor[(4, 88), float32] */;
    %552 = reshape(%550, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float32] */;
    %553 = reshape(%551, newshape=[352]) /* ty=Tensor[(352), float32] */;
    %554 = @func_2364(%552, %553) /* ty=(Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */;
    %555 = %549.0;
    %556 = %554.1;
    (%555, %556, meta[relay.Constant][40] /* ty=Tensor[(63), float32] */, meta[relay.Constant][41] /* ty=Tensor[(4, 88), float32] */)
  };
  %557() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */
}

def @func_3421() -> (Tensor[(63), float32],) {
  @func_3419() /* ty=(Tensor[(63), float32],) */
}

def @func_2367(%var_2365: Tensor[(7, 9, 1), float32], %var_2366: Tensor[(352), float32]) -> (Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) {
  %570 = fn (%var_2326: Tensor[(7, 9, 1), float32], %var_2354: Tensor[(352), float32]) -> (Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) {
    %558 = cast(%var_2326, dtype="float32") /* ty=Tensor[(7, 9, 1), float32] */;
    %559 = cosh(%558) /* ty=Tensor[(7, 9, 1), float32] */;
    %560 = cast(%var_2326, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
    %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%559, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %564 = cast(%var_2326, dtype="float32") /* ty=Tensor[(7, 9, 1), float32] */;
    %565 = cast(%var_2354, dtype="float32") /* ty=Tensor[(352), float32] */;
    %566 = reshape(%565, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
    %567 = logical_or(%562, %563) /* ty=Tensor[(7, 9, ?), bool] */;
    %568 = log(%564) /* ty=Tensor[(7, 9, 1), float32] */;
    %569 = @func_1049(%566) /* ty=Tensor[(11, 16, 2), float32] */;
    (%567, %568, %569, %var_2354)
  };
  %570(%var_2365, %var_2366) /* ty=(Tensor[(7, 9, ?), bool], Tensor[(7, 9, 1), float32], Tensor[(11, 16, 2), float32], Tensor[(352), float32]) */
}

def @func_737(%var_734: Tensor[(15, 15, 10), int32], %var_735: Tensor[(15, 15, 10), int32], %var_736: Tensor[(480), uint64]) -> (Tensor[(15, 15, 10), int32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(15, 15, 10), uint64]) {
  %586 = fn (%var_718: Tensor[(15, 15, 10), int32], %var_719: Tensor[(15, 15, 10), int32], %var_724: Tensor[(480), uint64]) -> (Tensor[(15, 15, 10), int32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(15, 15, 10), uint64]) {
    %571 = cast(%var_719, dtype="int32") /* ty=Tensor[(15, 15, 10), int32] */;
    %572 = shape_of(%var_718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(%var_718, dtype="int32") /* ty=Tensor[(15, 15, 10), int32] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %575 = cast(%var_724, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %576 = cast(%var_724, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %577 = reshape(%575, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
    %578 = reshape(%576, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), uint64] */;
    %579 = cast(%var_718, dtype="uint64") /* ty=Tensor[(15, 15, 10), uint64] */;
    %580 = shape_of(%var_719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%var_719, dtype="uint64") /* ty=Tensor[(15, 15, 10), uint64] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %583 = logical_xor(%573, %574) /* ty=Tensor[(15, 15, 10), int32] */;
    %584 = @func_98(%577, %578) /* ty=Tensor[(16, 10, 3), uint64] */;
    %585 = right_shift(%581, %582) /* ty=Tensor[(15, 15, 10), uint64] */;
    (%583, %584, %var_724, %585)
  };
  %586(%var_734, %var_735, %var_736) /* ty=(Tensor[(15, 15, 10), int32], Tensor[(16, 10, 3), uint64], Tensor[(480), uint64], Tensor[(15, 15, 10), uint64]) */
}

def @func_2937() -> Tensor[(63), float32] {
  %588 = fn () -> Tensor[(63), float32] {
    %587 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
    %587.2
  };
  %588() /* ty=Tensor[(63), float32] */
}

def @func_1405(%var_1404: Tensor[(5, 6, 7), int8]) -> (Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) {
  %620 = fn (%var_1348: Tensor[(5, 6, 7), int8]) -> (Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) {
    %589 = cast(meta[relay.Constant][42] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %590 = cast(meta[relay.Constant][42] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %591 = reshape(%589, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
    %592 = reshape(%590, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float32] */;
    %593 = @func_468(%591, %592) /* ty=(Tensor[(4, 14, 13), float32],) */;
    %594 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 7), int8] */, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
    %595 = shape_of(%var_1348, dtype="int32") /* ty=Tensor[(3), int32] */;
    %596 = cast(%var_1348, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %598 = less_equal(%596, %597) /* ty=Tensor[(5, 6, 7), bool] */;
    %599 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 6, 7), int8] */, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
    %600 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 6, 7), int8] */, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %603 = right_shift(%601, %602) /* ty=Tensor[(5, 6, 7), int64] */;
    %604 = cast(%603, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
    %605 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%598, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %608 = cast(%603, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
    %609 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%598, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %612 = cast(%598, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
    %613 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(%603, dtype="int64") /* ty=Tensor[(5, 6, 7), int64] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %616 = %593.0;
    %617 = left_shift(%606, %607) /* ty=Tensor[(5, 6, 7), int64] */;
    %618 = not_equal(%610, %611) /* ty=Tensor[(5, 6, 7), bool] */;
    %619 = add(%614, %615) /* ty=Tensor[(5, 6, 7), int64] */;
    (%616, meta[relay.Constant][42] /* ty=Tensor[(728), float32] */, %617, %618, %619)
  };
  %620(%var_1404) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */
}

def @func_3600() -> (Tensor[(63), float32],) {
  %621 = @func_2936() /* ty=Tensor[(63), float32] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(63), float32] */;
  %623 = sin(%622) /* ty=Tensor[(63), float32] */;
  (%623,)
}

def @func_3142(%var_3126: Tensor[(6, 8, 5), float32], %var_3134: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), float64], Tensor[(6, 8, 5), float32]) {
  %624 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
  %625 = %624.0;
  %626 = cast(%var_3126, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %630 = cast(%var_3134, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %631 = shape_of(%var_3126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_3126, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %634 = floor_mod(%628, %629) /* ty=Tensor[(6, 8, 5), float64] */;
  %635 = divide(%632, %633) /* ty=Tensor[(6, 8, 5), float32] */;
  (%634, %635)
}

def @func_4885() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  %636 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(63), float32] */;
  %639 = sqrt(%638) /* ty=Tensor[(63), float32] */;
  %640 = @func_4446() /* ty=Tensor[(6, 8, 5), float32] */;
  (%639, %640)
}

def @func_6558(%var_6557: Tensor[(210), int8]) -> (Tensor[(7, 9, 352), float64], Tensor[(5, 6, 7), float64]) {
  %662 = fn (%var_6520: Tensor[(210), int8]) -> (Tensor[(7, 9, 352), float64], Tensor[(5, 6, 7), float64]) {
    %641 = @func_3471() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
    %642 = cast(%var_6520, dtype="int8") /* ty=Tensor[(210), int8] */;
    %643 = reshape(%642, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
    %644 = @func_1403(%643) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
    %645 = %644.3;
    %646 = cast(%var_6520, dtype="bool") /* ty=Tensor[(210), bool] */;
    %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
    %648 = cast(%645, dtype="bool") /* ty=Tensor[(5, 6, 7), bool] */;
    %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %650 = logical_or(%648, %649) /* ty=Tensor[(5, 6, 7), bool] */;
    %651 = cast(%645, dtype="int32") /* ty=Tensor[(5, 6, 7), int32] */;
    %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%650, dtype="int32") /* ty=Tensor[(5, 6, 7), int32] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %655 = subtract(%653, %654) /* ty=Tensor[(5, 6, 7), int32] */;
    %656 = cast(%655, dtype="float64") /* ty=Tensor[(5, 6, 7), float64] */;
    %657 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%650, dtype="float64") /* ty=Tensor[(5, 6, 7), float64] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %660 = %641.1;
    %661 = mod(%658, %659) /* ty=Tensor[(5, 6, 7), float64] */;
    (%660, %661)
  };
  %662(%var_6557) /* ty=(Tensor[(7, 9, 352), float64], Tensor[(5, 6, 7), float64]) */
}

def @func_6247(%var_6242: Tensor[(63), float32]) -> Tensor[(63), float32] {
  %663 = @func_3766() /* ty=(Tensor[(63), float32], Tensor[(7, 9, 352), float64]) */;
  %664 = %663.0;
  %665 = cast(%var_6242, dtype="float32") /* ty=Tensor[(63), float32] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(1), int32] */;
  %667 = cast(%664, dtype="float32") /* ty=Tensor[(63), float32] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?), float32] */;
  mod(%667, %668) /* ty=Tensor[(63), float32] */
}

def @func_6295() -> (Tensor[(63), float32], Tensor[(352), float32], Tensor[(11, 16, 2), float64], Tensor[(63), float32]) {
  %669 = @func_3419() /* ty=(Tensor[(63), float32],) */;
  %670 = cast(meta[relay.Constant][45] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %671 = reshape(%670, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %672 = @func_1049(%671) /* ty=Tensor[(11, 16, 2), float32] */;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(11, 16, 2), float64] */;
  %674 = %669.0;
  %675 = acosh(%673) /* ty=Tensor[(11, 16, 2), float64] */;
  %676 = @func_2936() /* ty=Tensor[(63), float32] */;
  (%674, meta[relay.Constant][45] /* ty=Tensor[(352), float32] */, %675, %676)
}

def @func_6340() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  @func_6338() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */
}

def @func_2209(%var_2207: Tensor[(13, 7, 13), float32], %var_2208: Tensor[(13, 7, 13), float32]) -> (Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) {
  @func_2205(%var_2207, %var_2208) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */
}

def @func_6162() -> (Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(63), float32], Tensor[(168, 2), bool]) {
  %677 = @func_5727() /* ty=(Tensor[(63), float32],) */;
  %678 = cast(meta[relay.Constant][46] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %679 = cast(meta[relay.Constant][46] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %680 = reshape(%678, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %681 = reshape(%679, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %682 = @func_3736(%680, %681) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */;
  %683 = cast(meta[relay.Constant][47] /* ty=Tensor[(168, 2), float64] */, dtype="bool") /* ty=Tensor[(168, 2), bool] */;
  %684 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(168, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %685 = cast(meta[relay.Constant][46] /* ty=Tensor[(168, 2), float64] */, dtype="bool") /* ty=Tensor[(168, 2), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %687 = %677.0;
  %688 = %682.0;
  %689 = @func_4679() /* ty=Tensor[(63), float32] */;
  %690 = @func_2936() /* ty=Tensor[(63), float32] */;
  %691 = less_equal(%685, %686) /* ty=Tensor[(168, 2), bool] */;
  (%687, %688, %689, %690, %691)
}

def @func_4478(%var_4455: Tensor[(6, 8, 5), float32], %var_4467: Tensor[(352), float32]) -> (Tensor[(4, 120), uint64], Tensor[(480), uint64], Tensor[(6, 8, 5), uint32], Tensor[(6, 8, 5), float64], Tensor[(352), uint16], Tensor[(352), float32], Tensor[(182), float32]) {
  %692 = cast(meta[relay.Constant][48] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %693 = reshape(%692, newshape=[4, 120]) /* ty=Tensor[(4, 120), uint64] */;
  %694 = @func_2740(%693) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(15, 15, 10), uint64], Tensor[(4, 120), uint64], Tensor[(16, 10, 3), uint64], Tensor[(2250), float64]) */;
  %695 = @func_4197() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(63), int32]) */;
  %696 = %695.0;
  %697 = cast(%var_4455, dtype="uint32") /* ty=Tensor[(6, 8, 5), uint32] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="uint32") /* ty=Tensor[(6, 8, 5), uint32] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %701 = cast(%var_4455, dtype="float32") /* ty=Tensor[(6, 8, 5), float32] */;
  %702 = reshape(%701, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), float32] */;
  %703 = @func_2788(%702) /* ty=(Tensor[(6, 8, 5), float64],) */;
  %704 = cast(%var_4467, dtype="float32") /* ty=Tensor[(352), float32] */;
  %705 = cast(meta[relay.Constant][49] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %706 = reshape(%704, newshape=[352]) /* ty=Tensor[(352), float32] */;
  %707 = reshape(%705, newshape=[182]) /* ty=Tensor[(182), float32] */;
  %708 = @func_3230(%706, %707) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(352), uint16], Tensor[(52), float64], Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(1183), int16], Tensor[(1183), float32]) */;
  %709 = %694.2;
  %710 = bitwise_or(%699, %700) /* ty=Tensor[(6, 8, 5), uint32] */;
  %711 = %703.0;
  %712 = %708.1;
  (%709, meta[relay.Constant][48] /* ty=Tensor[(480), uint64] */, %710, %711, %712, %var_4467, meta[relay.Constant][49] /* ty=Tensor[(182), float32] */)
}

def @func_3805(%var_3804: Tensor[(10, 6, 7), int32]) -> (Tensor[(10, 6, 7), int32], Tensor[(6, 8, 5), float32]) {
  %720 = fn (%var_3779: Tensor[(10, 6, 7), int32]) -> (Tensor[(10, 6, 7), int32], Tensor[(6, 8, 5), float32]) {
    %713 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 6, 7), int32] */, dtype="int32") /* ty=Tensor[(10, 6, 7), int32] */;
    %714 = shape_of(%var_3779, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%var_3779, dtype="int32") /* ty=Tensor[(10, 6, 7), int32] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %717 = @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */;
    %718 = multiply(%715, %716) /* ty=Tensor[(10, 6, 7), int32] */;
    %719 = %717.1;
    (%718, %719)
  };
  %720(%var_3804) /* ty=(Tensor[(10, 6, 7), int32], Tensor[(6, 8, 5), float32]) */
}

def @main(%var_6639: Tensor[(210), int8], %var_6670: Tensor[(7, 9, 352), uint8]) -> (Tensor[(210), int8], Tensor[(7, 9, 352), int16], Tensor[(4, 220), uint16]) {
  %721 = cast(%var_6639, dtype="int8") /* ty=Tensor[(210), int8] */;
  %722 = reshape(%721, newshape=[210]) /* ty=Tensor[(210), int8] */;
  %723 = @func_6558(%722) /* ty=(Tensor[(7, 9, 352), float64], Tensor[(5, 6, 7), float64]) */;
  %724 = %723.0;
  %725 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 9, 352), float64] */, dtype="uint8") /* ty=Tensor[(7, 9, 352), uint8] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="uint8") /* ty=Tensor[(7, 9, 352), uint8] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %729 = bitwise_xor(%727, %728) /* ty=Tensor[(7, 9, 352), uint8] */;
  %730 = cast(%var_6670, dtype="int16") /* ty=Tensor[(7, 9, 352), int16] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="int16") /* ty=Tensor[(7, 9, 352), int16] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %734 = @func_6374() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32], Tensor[(4, 220), int32], Tensor[(336), float64]) */;
  %735 = %734.2;
  %736 = cast(meta[relay.Constant][52] /* ty=Tensor[(4, 220), int32] */, dtype="float32") /* ty=Tensor[(4, 220), float32] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(2), int32] */;
  %738 = cast(%735, dtype="float32") /* ty=Tensor[(4, 220), float32] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %740 = divide(%738, %739) /* ty=Tensor[(4, 220), float32] */;
  %741 = cast(meta[relay.Constant][52] /* ty=Tensor[(4, 220), int32] */, dtype="bool") /* ty=Tensor[(4, 220), bool] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(2), int32] */;
  %743 = cast(%740, dtype="bool") /* ty=Tensor[(4, 220), bool] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %745 = less_equal(%743, %744) /* ty=Tensor[(4, 220), bool] */;
  %746 = cast(%745, dtype="uint16") /* ty=Tensor[(4, 220), uint16] */;
  %747 = shape_of(%740, dtype="int32") /* ty=Tensor[(2), int32] */;
  %748 = cast(%740, dtype="uint16") /* ty=Tensor[(4, 220), uint16] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %750 = left_shift(%732, %733) /* ty=Tensor[(7, 9, 352), int16] */;
  %751 = minimum(%748, %749) /* ty=Tensor[(4, 220), uint16] */;
  (%var_6639, %750, %751)
}

def @func_5095(%var_5093: Tensor[(8, 6, 12), int16], %var_5094: Tensor[(8, 6, 12), int16]) -> (Tensor[(8, 6, 12), float64], Tensor[(63), float32]) {
  %760 = fn (%var_5059: Tensor[(8, 6, 12), int16], %var_5060: Tensor[(8, 6, 12), int16]) -> (Tensor[(8, 6, 12), float64], Tensor[(63), float32]) {
    %752 = cast(%var_5060, dtype="int16") /* ty=Tensor[(8, 6, 12), int16] */;
    %753 = shape_of(%var_5059, dtype="int32") /* ty=Tensor[(3), int32] */;
    %754 = cast(%var_5059, dtype="int16") /* ty=Tensor[(8, 6, 12), int16] */;
    %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %756 = logical_xor(%754, %755) /* ty=Tensor[(8, 6, 12), int16] */;
    %757 = cast(%756, dtype="float64") /* ty=Tensor[(8, 6, 12), float64] */;
    %758 = sqrt(%757) /* ty=Tensor[(8, 6, 12), float64] */;
    %759 = @func_4679() /* ty=Tensor[(63), float32] */;
    (%758, %759)
  };
  %760(%var_5093, %var_5094) /* ty=(Tensor[(8, 6, 12), float64], Tensor[(63), float32]) */
}

def @func_5788(%var_5786: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), bool],) {
  @func_5785(%var_5786) /* ty=(Tensor[(6, 8, 5), bool],) */
}

def @func_4667(%var_4664: Tensor[(11, 7, 9), float64], %var_4665: Tensor[(210), int8], %var_4666: Tensor[(672), float64]) -> (Tensor[(11, 7, 9), float64], Tensor[(728), float32], Tensor[(210), int8], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(5, 6, 7), bool]) {
  %774 = fn (%var_4629: Tensor[(11, 7, 9), float64], %var_4643: Tensor[(210), int8], %var_4647: Tensor[(672), float64]) -> (Tensor[(11, 7, 9), float64], Tensor[(728), float32], Tensor[(210), int8], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(5, 6, 7), bool]) {
    %761 = cast(%var_4629, dtype="float64") /* ty=Tensor[(11, 7, 9), float64] */;
    %762 = cast(%var_4643, dtype="int8") /* ty=Tensor[(210), int8] */;
    %763 = reshape(%762, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
    %764 = @func_1403(%763) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
    %765 = cast(%var_4647, dtype="float64") /* ty=Tensor[(672), float64] */;
    %766 = reshape(%765, newshape=[4, 14, 12]) /* ty=Tensor[(4, 14, 12), float64] */;
    %767 = cast(%var_4643, dtype="int8") /* ty=Tensor[(210), int8] */;
    %768 = reshape(%767, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), int8] */;
    %769 = @func_1403(%768) /* ty=(Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(5, 6, 7), int64], Tensor[(5, 6, 7), bool], Tensor[(5, 6, 7), int64]) */;
    %770 = sigmoid(%761) /* ty=Tensor[(11, 7, 9), float64] */;
    %771 = %764.1;
    %772 = @func_767(%766) /* ty=Tensor[(4, 14, 12), float64] */;
    %773 = %769.3;
    (%770, %771, %var_4643, %772, %var_4647, %773)
  };
  %774(%var_4664, %var_4665, %var_4666) /* ty=(Tensor[(11, 7, 9), float64], Tensor[(728), float32], Tensor[(210), int8], Tensor[(4, 14, 12), float64], Tensor[(672), float64], Tensor[(5, 6, 7), bool]) */
}

def @func_1175(%var_1174: Tensor[(2, 2, 6), uint32]) -> (Tensor[(2, 2, 6), uint32],) {
  %780 = fn (%var_1166: Tensor[(2, 2, 6), uint32]) -> (Tensor[(2, 2, 6), uint32],) {
    %775 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 2, 6), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2, 6), uint32] */;
    %776 = shape_of(%var_1166, dtype="int32") /* ty=Tensor[(3), int32] */;
    %777 = cast(%var_1166, dtype="uint32") /* ty=Tensor[(2, 2, 6), uint32] */;
    %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %779 = minimum(%777, %778) /* ty=Tensor[(2, 2, 6), uint32] */;
    (%779,)
  };
  %780(%var_1174) /* ty=(Tensor[(2, 2, 6), uint32],) */
}

def @func_345(%var_343: Tensor[(6, 11, 1), uint32], %var_344: Tensor[(6, 11, 16), uint32]) -> (Tensor[(6, 11, 16), uint32],) {
  %784 = fn (%var_326: Tensor[(6, 11, 1), uint32], %var_327: Tensor[(6, 11, 16), uint32]) -> (Tensor[(6, 11, 16), uint32],) {
    %781 = cast(%var_326, dtype="uint32") /* ty=Tensor[(6, 11, 1), uint32] */;
    %782 = cast(%var_327, dtype="uint32") /* ty=Tensor[(6, 11, 16), uint32] */;
    %783 = minimum(%781, %782) /* ty=Tensor[(6, 11, 16), uint32] */;
    (%783,)
  };
  %784(%var_343, %var_344) /* ty=(Tensor[(6, 11, 16), uint32],) */
}

def @func_2790(%var_2789: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), float64],) {
  %792 = fn (%var_2783: Tensor[(6, 8, 5), float32]) -> (Tensor[(6, 8, 5), float64],) {
    %785 = @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */;
    %786 = %785.0;
    %787 = cast(%var_2783, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
    %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%786, dtype="float64") /* ty=Tensor[(6, 8, 5), float64] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %791 = floor_divide(%789, %790) /* ty=Tensor[(6, 8, 5), float64] */;
    (%791,)
  };
  %792(%var_2789) /* ty=(Tensor[(6, 8, 5), float64],) */
}

def @func_3006() -> Tensor[(63), float32] {
  @func_2936() /* ty=Tensor[(63), float32] */
}

def @func_5621(%var_5618: Tensor[(780), int64], %var_5619: Tensor[(480), uint64], %var_5620: Tensor[(5, 11, 11), bool]) -> (Tensor[(2, 240), uint64], Tensor[(780), int64], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) {
  %806 = fn (%var_5603: Tensor[(780), int64], %var_5604: Tensor[(480), uint64], %var_5609: Tensor[(5, 11, 11), bool]) -> (Tensor[(2, 240), uint64], Tensor[(780), int64], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) {
    %793 = cast(%var_5603, dtype="int64") /* ty=Tensor[(780), int64] */;
    %794 = cast(%var_5604, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %795 = reshape(%793, newshape=[15, 4, 13]) /* ty=Tensor[(15, 4, 13), int64] */;
    %796 = reshape(%794, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint64] */;
    %797 = @func_2481(%795, %796) /* ty=(Tensor[(15, 4, 13), int64], Tensor[(4, 14, 13), float32], Tensor[(728), float32], Tensor[(16, 10, 3), uint64], Tensor[(2, 240), uint64], Tensor[(11, 16, 2), float32], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(352), float32]) */;
    %798 = @func_5319() /* ty=(Tensor[(5, 11, 11), bool],) */;
    %799 = %798.0;
    %800 = cast(%var_5609, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
    %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%799, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %804 = %797.4;
    %805 = floor_divide(%802, %803) /* ty=Tensor[(5, 11, 11), float64] */;
    (%804, %var_5603, %var_5604, %805)
  };
  %806(%var_5618, %var_5619, %var_5620) /* ty=(Tensor[(2, 240), uint64], Tensor[(780), int64], Tensor[(480), uint64], Tensor[(5, 11, 11), float64]) */
}

def @func_3739(%var_3737: Tensor[(7, 16, 3), float64], %var_3738: Tensor[(7, 16, 3), float64]) -> (Tensor[(63), float32], Tensor[(7, 16, 3), float32]) {
  %821 = fn (%var_3692: Tensor[(7, 16, 3), float64], %var_3693: Tensor[(7, 16, 3), float64]) -> (Tensor[(63), float32], Tensor[(7, 16, 3), float32]) {
    %807 = @func_3600() /* ty=(Tensor[(63), float32],) */;
    %808 = cast(%var_3693, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
    %809 = asin(%808) /* ty=Tensor[(7, 16, 3), float64] */;
    %810 = cast(%var_3693, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
    %811 = shape_of(%var_3692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%var_3692, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %814 = divide(%812, %813) /* ty=Tensor[(7, 16, 3), float64] */;
    %815 = cast(%814, dtype="float32") /* ty=Tensor[(7, 16, 3), float32] */;
    %816 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
    %817 = cast(%809, dtype="float32") /* ty=Tensor[(7, 16, 3), float32] */;
    %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %819 = %807.0;
    %820 = power(%817, %818) /* ty=Tensor[(7, 16, 3), float32] */;
    (%819, %820)
  };
  %821(%var_3737, %var_3738) /* ty=(Tensor[(63), float32], Tensor[(7, 16, 3), float32]) */
}

def @func_1199(%var_1198: Tensor[(1, 4, 13), float64]) -> Tensor[(?, 4, 13), bool] {
  %828 = fn (%var_1182: Tensor[(1, 4, 13), float64]) -> Tensor[(?, 4, 13), bool] {
    %822 = cast(%var_1182, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
    %823 = acos(%822) /* ty=Tensor[(1, 4, 13), float64] */;
    %824 = cast(%823, dtype="bool") /* ty=Tensor[(1, 4, 13), bool] */;
    %825 = shape_of(%var_1182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(%var_1182, dtype="bool") /* ty=Tensor[(1, 4, 13), bool] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%826, %827) /* ty=Tensor[(?, 4, 13), bool] */
  };
  %828(%var_1198) /* ty=Tensor[(?, 4, 13), bool] */
}

def @func_3849() -> (Tensor[(63), float32],) {
  %831 = fn () -> (Tensor[(63), float32],) {
    %829 = @func_3600() /* ty=(Tensor[(63), float32],) */;
    %830 = %829.0;
    (%830,)
  };
  %831() /* ty=(Tensor[(63), float32],) */
}

def @func_4482(%var_4480: Tensor[(6, 8, 5), float32], %var_4481: Tensor[(352), float32]) -> (Tensor[(4, 120), uint64], Tensor[(480), uint64], Tensor[(6, 8, 5), uint32], Tensor[(6, 8, 5), float64], Tensor[(352), uint16], Tensor[(352), float32], Tensor[(182), float32]) {
  @func_4478(%var_4480, %var_4481) /* ty=(Tensor[(4, 120), uint64], Tensor[(480), uint64], Tensor[(6, 8, 5), uint32], Tensor[(6, 8, 5), float64], Tensor[(352), uint16], Tensor[(352), float32], Tensor[(182), float32]) */
}

def @func_3360() -> (Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) {
  %842 = fn () -> (Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) {
    %832 = @func_2906() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(7, 9, 1), float32], Tensor[(63), float32], Tensor[(4, 88), float32]) */;
    %833 = cast(meta[relay.Constant][54] /* ty=Tensor[(1183, 1), float32] */, dtype="float32") /* ty=Tensor[(1183, 1), float32] */;
    %834 = cast(meta[relay.Constant][54] /* ty=Tensor[(1183, 1), float32] */, dtype="float32") /* ty=Tensor[(1183, 1), float32] */;
    %835 = reshape(%833, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
    %836 = reshape(%834, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float32] */;
    %837 = @func_2205(%835, %836) /* ty=(Tensor[(13, 7, 13), float32], Tensor[(?, 4, 13), bool], Tensor[(52), float64]) */;
    %838 = %832.0;
    %839 = %837.0;
    %840 = @func_3317() /* ty=Tensor[(63), float32] */;
    %841 = @func_2936() /* ty=Tensor[(63), float32] */;
    (%838, %839, meta[relay.Constant][54] /* ty=Tensor[(1183, 1), float32] */, %840, %841)
  };
  %842() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) */
}

def @func_5203() -> Tensor[(63), float32] {
  @func_4679() /* ty=Tensor[(63), float32] */
}

def @func_2642() -> (Tensor[(6, 8, 5), float32],) {
  @func_2640() /* ty=(Tensor[(6, 8, 5), float32],) */
}

def @func_5566() -> (Tensor[(1183, 1), float32], Tensor[(1183), float32], Tensor[(480), uint64]) {
  %843 = @func_3359() /* ty=(Tensor[(6, 8, 5), float32], Tensor[(13, 7, 13), float32], Tensor[(1183, 1), float32], Tensor[(63), float32], Tensor[(63), float32]) */;
  %844 = cast(meta[relay.Constant][55] /* ty=Tensor[(480), uint64] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %845 = reshape(%844, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint64] */;
  %846 = @func_2884(%845) /* ty=(Tensor[(6, 8, 5), float32], Tensor[(320), float64], Tensor[(13, 7, 13), float32], Tensor[(1183), float32], Tensor[(16, 10, 3), int16]) */;
  %847 = %843.2;
  %848 = %846.3;
  (%847, %848, meta[relay.Constant][55] /* ty=Tensor[(480), uint64] */)
}

def @func_3446() -> (Tensor[(63), float32], Tensor[(6, 8, 5), float32]) {
  @func_3444() /* ty=(Tensor[(63), float32], Tensor[(6, 8, 5), float32]) */
}

def @func_4680() -> Tensor[(63), float32] {
  %849 = fn () -> Tensor[(63), float32] {
    @func_3317() /* ty=Tensor[(63), float32] */
  };
  %849() /* ty=Tensor[(63), float32] */
}

def @func_3090(%var_3088: Tensor[(13, 3, 9), float64]) -> (Tensor[(13, 3, 9), float64],) {
  @func_3087(%var_3088) /* ty=(Tensor[(13, 3, 9), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen176/build/output.py", line 1890, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:55:04] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

