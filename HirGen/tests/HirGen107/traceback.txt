==========mod==========
#[version = "0.0.5"]
def @func_1844() -> Tensor[(11, 15, 12), float64] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  cosh(%0) /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_5142() -> Tensor[(11, 15, 12), float64] {
  %1 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %1.0
}

def @func_3602() -> (Tensor[(11, 15, 12), uint64], Tensor[(11, 15, 12), float64]) {
  %2 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
  %3 = %2.0;
  %4 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
  (%3, %4)
}

def @func_1817(%var_1794: Tensor[(10, 5, 2), uint16], %var_1795: Tensor[(10, 5, 2), uint16]) -> Tensor[(10, 5, 2), uint16] {
  %5 = cast(%var_1795, dtype="uint16") /* ty=Tensor[(10, 5, 2), uint16] */;
  %6 = shape_of(%var_1794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_1794, dtype="uint16") /* ty=Tensor[(10, 5, 2), uint16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%7, %8) /* ty=Tensor[(10, 5, 2), uint16] */
}

def @func_2998() -> (Tensor[(16, 112), float64],) {
  %9 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %10 = %9.0;
  (%10,)
}

def @func_4838() -> (Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) {
  %11 = @func_3796() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) */;
  %12 = %11.1;
  %13 = cast(%12, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %14 = reshape(%13, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), bool] */;
  %15 = @func_961(%14) /* ty=(Tensor[(8, 16, 14), bool],) */;
  %16 = cast(%12, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %17 = %15.0;
  %18 = log2(%16) /* ty=Tensor[(16, 112), float64] */;
  (%17, %18)
}

def @func_3892() -> Tensor[(16, 112), float64] {
  %19 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %20 = %19.0;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %22 = sqrt(%21) /* ty=Tensor[(16, 112), float32] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 112), float32] */, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(2), int32] */;
  %25 = cast(%22, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  power(%25, %26) /* ty=Tensor[(16, 112), float64] */
}

def @func_3083() -> (Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %29 = reshape(%27, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %30 = reshape(%28, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %31 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
  %32 = @func_1817(%29, %30) /* ty=Tensor[(10, 5, 2), uint16] */;
  (%31, %32, meta[relay.Constant][2] /* ty=Tensor[(100), uint16] */)
}

def @func_6151() -> (Tensor[(16, 112), float64], Tensor[(16, 112), float64]) {
  %33 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %34 = %33.0;
  %35 = @func_4541() /* ty=Tensor[(16, 112), float64] */;
  (%34, %35)
}

def @func_4008(%var_4004: Tensor[(390), uint8]) -> (Tensor[(11, 15, 12), float64], Tensor[(10, 3, 13), bool], float32, Tensor[(825, 1), float32], Tensor[(195), int32], Tensor[(390), uint8]) {
  %36 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %37 = cast(8.37047f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(825, 1), float32] */, dtype="float32") /* ty=Tensor[(825, 1), float32] */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
  %40 = cast(%var_4004, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %41 = reshape(%37, newshape=[]) /* ty=float32 */;
  %42 = reshape(%38, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
  %43 = reshape(%39, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %44 = reshape(%40, newshape=[5, 78]) /* ty=Tensor[(5, 78), uint8] */;
  %45 = @func_1505(%41, %42, %43, %44) /* ty=(Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) */;
  %46 = %36.0;
  %47 = %45.6;
  (%46, %47, 8.37047f /* ty=float32 */, meta[relay.Constant][3] /* ty=Tensor[(825, 1), float32] */, meta[relay.Constant][4] /* ty=Tensor[(195), int32] */, %var_4004)
}

def @func_114(%var_98: Tensor[(3, 1, 13), float32], %var_102: Tensor[(3, 16, 13), float32]) -> (Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) {
  %48 = cast(%var_98, dtype="float32") /* ty=Tensor[(3, 1, 13), float32] */;
  %49 = tan(%48) /* ty=Tensor[(3, 1, 13), float32] */;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(3, 1, 13), float32] */;
  %51 = cast(%var_102, dtype="float32") /* ty=Tensor[(3, 16, 13), float32] */;
  %52 = cast(%49, dtype="bool") /* ty=Tensor[(3, 1, 13), bool] */;
  %53 = shape_of(%var_98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%var_98, dtype="bool") /* ty=Tensor[(3, 1, 13), bool] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %56 = power(%50, %51) /* ty=Tensor[(3, 16, 13), float32] */;
  %57 = greater_equal(%54, %55) /* ty=Tensor[(3, ?, 13), bool] */;
  (%56, %57)
}

def @func_2190(%var_2171: Tensor[(1, 14, 11), float64]) -> (Tensor[(1, 14, 11), float64], Tensor[(825), float32], Tensor[(1, 825), float32]) {
  %58 = cast(%var_2171, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
  %59 = sigmoid(%58) /* ty=Tensor[(1, 14, 11), float64] */;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 825), float32] */, dtype="float32") /* ty=Tensor[(1, 825), float32] */;
  %62 = reshape(%61, newshape=[825]) /* ty=Tensor[(825), float32] */;
  %63 = @func_1951(%62) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
  %64 = cosh(%60) /* ty=Tensor[(1, 14, 11), float64] */;
  %65 = %63.3;
  (%64, %65, meta[relay.Constant][5] /* ty=Tensor[(1, 825), float32] */)
}

def @func_5116() -> Tensor[(16, 112), float64] {
  %66 = @func_3796() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) */;
  %67 = %66.1;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  atan(%68) /* ty=Tensor[(16, 112), float64] */
}

def @func_5108() -> Tensor[(10, 5, 2), float32] {
  %69 = @func_3083() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %70 = %69.1;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(10, 5, 2), float32] */;
  exp(%71) /* ty=Tensor[(10, 5, 2), float32] */
}

def @func_4301(%var_4296: Tensor[(6, 5, 10), float32]) -> Tensor[(6, 5, 10), float32] {
  %72 = cast(-5.49824f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %73 = cast(%var_4296, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  floor_divide(%72, %73) /* ty=Tensor[(6, 5, 10), float32] */
}

def @func_4420(%var_4404: Tensor[(16, 112), float64], %var_4415: Tensor[(84), uint64], %var_4417: Tensor[(825), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), int16], Tensor[(390), uint8], Tensor[(84), uint64], Tensor[(390), uint8], Tensor[(825), float32]) {
  %74 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %75 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
  %76 = cast(%var_4404, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(2), int32] */;
  %78 = cast(%75, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %80 = add(%78, %79) /* ty=Tensor[(16, 112), int64] */;
  %81 = cast(%var_4404, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(2), int32] */;
  %83 = cast(%80, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %85 = cast(%var_4415, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(390), uint8] */, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %87 = cast(%var_4417, dtype="float32") /* ty=Tensor[(825), float32] */;
  %88 = reshape(%85, newshape=[84, 1]) /* ty=Tensor[(84, 1), uint64] */;
  %89 = reshape(%86, newshape=[390]) /* ty=Tensor[(390), uint8] */;
  %90 = reshape(%87, newshape=[825, 1]) /* ty=Tensor[(825, 1), float32] */;
  %91 = @func_3512(%88, %89, %90) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(390), uint8], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(825, 1), float32], Tensor[(84, 1), float32]) */;
  %92 = %74.0;
  %93 = right_shift(%83, %84) /* ty=Tensor[(16, 112), int16] */;
  %94 = %91.1;
  (%92, %93, %94, %var_4415, meta[relay.Constant][6] /* ty=Tensor[(390), uint8] */, %var_4417)
}

def @func_6515(%var_6502: Tensor[(11, 15, 12), float32]) -> Tensor[(11, 15, 12), int32] {
  %95 = @func_5394() /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), float32], Tensor[(11, 15, 12), float64]) */;
  %96 = %95.0;
  %97 = cast(%var_6502, dtype="int32") /* ty=Tensor[(11, 15, 12), int32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="int32") /* ty=Tensor[(11, 15, 12), int32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%99, %100) /* ty=Tensor[(11, 15, 12), int32] */
}

def @func_3290(%var_3218: Tensor[(16, 112), float64], %var_3253: Tensor[(1, 512), float32], %var_3255: Tensor[(100), uint16]) -> (Tensor[(16, 112), int8], Tensor[(16, 112), float32], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(195), int32], Tensor[(13, 3), float32], Tensor[(1, 512), float32], Tensor[(1, 39), float32], Tensor[(100), uint16], Tensor[(11, 15, 12), float64]) {
  %101 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
  %102 = cast(%var_3218, dtype="int8") /* ty=Tensor[(16, 112), int8] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(2), int32] */;
  %104 = cast(%101, dtype="int8") /* ty=Tensor[(16, 112), int8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %106 = cast(%101, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %107 = cast(meta[relay.Constant][7] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
  %109 = reshape(%107, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float64] */;
  %110 = reshape(%108, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %111 = @func_2941(%109, %110) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) */;
  %112 = cast(%var_3253, dtype="float32") /* ty=Tensor[(1, 512), float32] */;
  %113 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 39), float32] */, dtype="float32") /* ty=Tensor[(1, 39), float32] */;
  %114 = cast(%var_3255, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %115 = reshape(%112, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), float32] */;
  %116 = reshape(%113, newshape=[13, 3]) /* ty=Tensor[(13, 3), float32] */;
  %117 = reshape(%114, newshape=[25, 4]) /* ty=Tensor[(25, 4), uint16] */;
  %118 = @func_2162(%115, %116, %117) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) */;
  %119 = subtract(%104, %105) /* ty=Tensor[(16, 112), int8] */;
  %120 = cos(%106) /* ty=Tensor[(16, 112), float32] */;
  %121 = %111.0;
  %122 = %118.1;
  %123 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  (%119, %120, %121, meta[relay.Constant][7] /* ty=Tensor[(1760), float64] */, meta[relay.Constant][8] /* ty=Tensor[(195), int32] */, %122, %var_3253, meta[relay.Constant][9] /* ty=Tensor[(1, 39), float32] */, %var_3255, %123)
}

def @func_3512(%var_3490: Tensor[(84, 1), uint64], %var_3491: Tensor[(390), uint8], %var_3493: Tensor[(825, 1), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(390), uint8], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(825, 1), float32], Tensor[(84, 1), float32]) {
  %124 = cast(%var_3490, dtype="uint64") /* ty=Tensor[(84, 1), uint64] */;
  %125 = cast(%var_3491, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %126 = cast(meta[relay.Constant][10] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %127 = cast(%var_3493, dtype="float32") /* ty=Tensor[(825, 1), float32] */;
  %128 = reshape(%124, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %129 = reshape(%125, newshape=[390]) /* ty=Tensor[(390), uint8] */;
  %130 = reshape(%126, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %131 = reshape(%127, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
  %132 = @func_2589(%128, %129, %130, %131) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(84), uint64], Tensor[(100), uint16], Tensor[(512), float32], Tensor[(39), float32], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(1080), float32], Tensor[(10, 5, 2), bool], Tensor[(3, 11, 8), float64], Tensor[(66, 4), bool], Tensor[(5, 165), float32]) */;
  %133 = cast(%var_3490, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %134 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
  %135 = %132.7;
  %136 = exp(%133) /* ty=Tensor[(84, 1), float32] */;
  (%134, %135, %var_3491, meta[relay.Constant][10] /* ty=Tensor[(100), uint16] */, %var_3493, %136)
}

def @func_4977(%var_4949: Tensor[(126), float32], %var_4950: Tensor[(1792), bool]) -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(126), float32], Tensor[(8, 16, 14), bool], Tensor[(13, 11, 11), bool], Tensor[(143, 11), int16]) {
  %137 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %138 = cast(%var_4949, dtype="float32") /* ty=Tensor[(126), float32] */;
  %139 = cast(%var_4950, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %140 = reshape(%138, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), float32] */;
  %141 = reshape(%139, newshape=[64, 28]) /* ty=Tensor[(64, 28), bool] */;
  %142 = @func_1757(%140, %141) /* ty=(Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) */;
  %143 = %142.1;
  %144 = cast(%var_4950, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = cast(meta[relay.Constant][11] /* ty=Tensor[(143, 11), int16] */, dtype="int16") /* ty=Tensor[(143, 11), int16] */;
  %149 = cast(meta[relay.Constant][11] /* ty=Tensor[(143, 11), int16] */, dtype="int16") /* ty=Tensor[(143, 11), int16] */;
  %150 = reshape(%148, newshape=[13, 11, 11]) /* ty=Tensor[(13, 11, 11), int16] */;
  %151 = reshape(%149, newshape=[13, 11, 11]) /* ty=Tensor[(13, 11, 11), int16] */;
  %152 = %137.0;
  %153 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
  %154 = logical_or(%146, %147) /* ty=Tensor[(8, 16, 14), bool] */;
  %155 = @func_4790(%150, %151) /* ty=Tensor[(13, 11, 11), bool] */;
  (%152, %153, %var_4949, %154, %155, meta[relay.Constant][11] /* ty=Tensor[(143, 11), int16] */)
}

def @func_4162(%var_4110: Tensor[(11, 15, 12), uint64], %var_4140: Tensor[(126), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(11, 15, 12), bool]) {
  %156 = @func_3328() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %157 = cast(%var_4140, dtype="float32") /* ty=Tensor[(126), float32] */;
  %158 = reshape(%157, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %159 = @func_3575(%158) /* ty=(Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) */;
  %160 = cast(%var_4110, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %161 = tan(%160) /* ty=Tensor[(11, 15, 12), float64] */;
  %162 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
  %163 = %162.0;
  %164 = cast(%var_4110, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %168 = minimum(%166, %167) /* ty=Tensor[(11, 15, 12), uint64] */;
  %169 = cast(%168, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
  %170 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%161, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = %156.0;
  %174 = %159.1;
  %175 = less_equal(%171, %172) /* ty=Tensor[(11, 15, 12), bool] */;
  (%173, %174, %var_4140, %175)
}

def @func_5454() -> Tensor[(11, 15, 12), float64] {
  %176 = @func_3984() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), uint64]) */;
  %176.0
}

def @func_5824() -> (Tensor[(11, 15, 12), float32],) {
  %177 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %178 = %177.0;
  %179 = cast(%178, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
  %180 = asin(%179) /* ty=Tensor[(11, 15, 12), float32] */;
  (%180,)
}

def @func_3311() -> (Tensor[(11, 15, 12), float64],) {
  %181 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
  (%181,)
}

def @func_2598() -> Tensor[(11, 15, 12), float64] {
  @func_1844() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_6113(%var_6077: Tensor[(18, 1), float32], %var_6078: Tensor[(100), uint16]) -> (Tensor[(16, 112), float64], Tensor[(11, 15, 12), float32], float32, Tensor[(18, 1), float32], Tensor[(100), uint16]) {
  %182 = cast(-8.49451f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %183 = cast(%var_6077, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %184 = cast(%var_6078, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %185 = reshape(%182, newshape=[]) /* ty=float32 */;
  %186 = reshape(%183, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), float32] */;
  %187 = reshape(%184, newshape=[1, 100]) /* ty=Tensor[(1, 100), uint16] */;
  %188 = @func_5957(%185, %186, %187) /* ty=(Tensor[(2, 1, 9), float32], Tensor[(11, 15, 12), float32], Tensor[(1, 100), uint16]) */;
  %189 = @func_3892() /* ty=Tensor[(16, 112), float64] */;
  %190 = %188.1;
  (%189, %190, -8.49451f /* ty=float32 */, %var_6077, %var_6078)
}

def @func_5176(%var_5162: Tensor[(2, 15, 6), float64], %var_5170: Tensor[(39), float32], %var_5171: Tensor[(624), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(16, 112), float64], Tensor[(1, 390), uint8], Tensor[(3, 16, 13), float32], Tensor[(39), float32], Tensor[(624), float32]) {
  %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 15, 6), float64] */, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %192 = cast(%var_5162, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %193 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 390), uint8] */, dtype="uint8") /* ty=Tensor[(1, 390), uint8] */;
  %194 = reshape(%193, newshape=[195, 2]) /* ty=Tensor[(195, 2), uint8] */;
  %195 = @func_3697(%194) /* ty=(Tensor[(16, 112), float64], Tensor[(15, 8, 11), float32], uint16, Tensor[(1320), uint16], Tensor[(10, 3, 13), bool], Tensor[(195, 2), uint8]) */;
  %196 = cast(%var_5170, dtype="float32") /* ty=Tensor[(39), float32] */;
  %197 = cast(%var_5171, dtype="float32") /* ty=Tensor[(624), float32] */;
  %198 = reshape(%196, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
  %199 = reshape(%197, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
  %200 = @func_114(%198, %199) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
  %201 = greater_equal(%191, %192) /* ty=Tensor[(2, 15, 6), bool] */;
  %202 = %195.0;
  %203 = %200.0;
  (%201, %202, meta[relay.Constant][13] /* ty=Tensor[(1, 390), uint8] */, %203, %var_5170, %var_5171)
}

def @func_1938() -> (Tensor[(11, 15, 12), uint64],) {
  %204 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %205 = %204.0;
  %206 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 15, 12), float64] */, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %210 = bitwise_and(%208, %209) /* ty=Tensor[(11, 15, 12), uint64] */;
  (%210,)
}

def @func_3191() -> Tensor[(16, 112), float64] {
  %211 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %211.0
}

def @func_2589(%var_2528: Tensor[(84), uint64], %var_2542: Tensor[(390), uint8], %var_2553: Tensor[(10, 5, 2), uint16], %var_2586: Tensor[(5, 165), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(84), uint64], Tensor[(100), uint16], Tensor[(512), float32], Tensor[(39), float32], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(1080), float32], Tensor[(10, 5, 2), bool], Tensor[(3, 11, 8), float64], Tensor[(66, 4), bool], Tensor[(5, 165), float32]) {
  %212 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %213 = cast(%var_2528, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %214 = cast(%var_2528, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %215 = cast(meta[relay.Constant][15] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %216 = reshape(%213, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), uint64] */;
  %217 = reshape(%214, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), uint64] */;
  %218 = reshape(%215, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %219 = @func_1988(%216, %217, %218) /* ty=(Tensor[(3, 4, 7), uint64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %220 = cast(%var_2542, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %221 = cast(%var_2542, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %222 = reshape(%220, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %223 = reshape(%221, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %224 = cast(meta[relay.Constant][18] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %225 = reshape(%224, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
  %226 = @func_2240(%225) /* ty=(Tensor[(15, 8, 9), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %227 = cast(meta[relay.Constant][16] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %228 = cast(meta[relay.Constant][17] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %229 = cast(meta[relay.Constant][15] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %230 = reshape(%227, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), float32] */;
  %231 = reshape(%228, newshape=[13, 3]) /* ty=Tensor[(13, 3), float32] */;
  %232 = reshape(%229, newshape=[25, 4]) /* ty=Tensor[(25, 4), uint16] */;
  %233 = @func_2162(%230, %231, %232) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) */;
  %234 = %233.4;
  %235 = cast(%var_2553, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%234, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %239 = cast(meta[relay.Constant][19] /* ty=Tensor[(66, 4), bool] */, dtype="bool") /* ty=Tensor[(66, 4), bool] */;
  %240 = cast(meta[relay.Constant][19] /* ty=Tensor[(66, 4), bool] */, dtype="bool") /* ty=Tensor[(66, 4), bool] */;
  %241 = cast(%var_2542, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %242 = cast(%var_2586, dtype="float32") /* ty=Tensor[(5, 165), float32] */;
  %243 = reshape(%239, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
  %244 = reshape(%240, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
  %245 = reshape(%241, newshape=[390]) /* ty=Tensor[(390), uint8] */;
  %246 = reshape(%242, newshape=[825]) /* ty=Tensor[(825), float32] */;
  %247 = @func_1176(%243, %244, %245, %246) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
  %248 = %212.0;
  %249 = %219.2;
  %250 = @func_1033(%222, %223) /* ty=Tensor[(10, 3, 13), bool] */;
  %251 = %226.2;
  %252 = not_equal(%237, %238) /* ty=Tensor[(10, 5, 2), bool] */;
  %253 = %247.4;
  (%248, %249, %var_2528, meta[relay.Constant][15] /* ty=Tensor[(100), uint16] */, meta[relay.Constant][16] /* ty=Tensor[(512), float32] */, meta[relay.Constant][17] /* ty=Tensor[(39), float32] */, %250, %var_2542, %251, meta[relay.Constant][18] /* ty=Tensor[(1080), float32] */, %252, %253, meta[relay.Constant][19] /* ty=Tensor[(66, 4), bool] */, %var_2586)
}

def @func_4051() -> Tensor[(16, 112), float32] {
  %254 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  log10(%255) /* ty=Tensor[(16, 112), float32] */
}

def @func_6242(%var_6224: Tensor[(16, 112), float32]) -> (Tensor[(16, 112), float32], Tensor[(16, 112), uint64]) {
  %256 = @func_5030() /* ty=(Tensor[(16, 112), float32], Tensor[(16, 112), float64]) */;
  %257 = @func_4051() /* ty=Tensor[(16, 112), float32] */;
  %258 = cast(%var_6224, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(2), int32] */;
  %260 = cast(%257, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %262 = less(%260, %261) /* ty=Tensor[(16, 112), bool] */;
  %263 = cast(%262, dtype="uint64") /* ty=Tensor[(16, 112), uint64] */;
  %264 = shape_of(%var_6224, dtype="int32") /* ty=Tensor[(2), int32] */;
  %265 = cast(%var_6224, dtype="uint64") /* ty=Tensor[(16, 112), uint64] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %267 = %256.0;
  %268 = logical_xor(%265, %266) /* ty=Tensor[(16, 112), uint64] */;
  (%267, %268)
}

def @main(%var_6620: Tensor[(12, 5, 6), float32]) -> Tensor[(12, 5, 6), float32] {
  %269 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 6), float32] */;
  %270 = shape_of(%var_6620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_6620, dtype="float32") /* ty=Tensor[(12, 5, 6), float32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%271, %272) /* ty=Tensor[(12, 5, 6), float32] */
}

def @func_2846(%var_2835: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) {
  %273 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %274 = cast(%var_2835, dtype="int32") /* ty=Tensor[(195), int32] */;
  %275 = cast(%var_2835, dtype="int32") /* ty=Tensor[(195), int32] */;
  %276 = reshape(%274, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %277 = reshape(%275, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %278 = @func_723(%276, %277) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) */;
  %279 = cast(0.785548f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %280 = cast(meta[relay.Constant][21] /* ty=Tensor[(825, 1), float32] */, dtype="float32") /* ty=Tensor[(825, 1), float32] */;
  %281 = cast(%var_2835, dtype="int32") /* ty=Tensor[(195), int32] */;
  %282 = cast(meta[relay.Constant][22] /* ty=Tensor[(390), uint8] */, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %283 = reshape(%279, newshape=[]) /* ty=float32 */;
  %284 = reshape(%280, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
  %285 = reshape(%281, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %286 = reshape(%282, newshape=[5, 78]) /* ty=Tensor[(5, 78), uint8] */;
  %287 = @func_1505(%283, %284, %285, %286) /* ty=(Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) */;
  %288 = %273.0;
  %289 = %278.2;
  %290 = %287.5;
  (%288, %289, %var_2835, %290, 0.785548f /* ty=float32 */, meta[relay.Constant][21] /* ty=Tensor[(825, 1), float32] */, meta[relay.Constant][22] /* ty=Tensor[(390), uint8] */)
}

def @func_5394() -> (Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), float32], Tensor[(11, 15, 12), float64]) {
  %291 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
  %293 = cast(%291, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %294 = atan(%292) /* ty=Tensor[(11, 15, 12), float32] */;
  %295 = @func_5108() /* ty=Tensor[(10, 5, 2), float32] */;
  %296 = sinh(%293) /* ty=Tensor[(11, 15, 12), float64] */;
  (%294, %295, %296)
}

def @func_5430(%var_5418: Tensor[(12, 3, 9), uint64], %var_5419: Tensor[(12, 3, 9), uint64]) -> (Tensor[(12, 3, 9), uint64], Tensor[(12, 3, 9), float32]) {
  %297 = cast(%var_5419, dtype="uint64") /* ty=Tensor[(12, 3, 9), uint64] */;
  %298 = shape_of(%var_5418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%var_5418, dtype="uint64") /* ty=Tensor[(12, 3, 9), uint64] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %301 = cast(%var_5418, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
  %302 = logical_xor(%299, %300) /* ty=Tensor[(12, 3, 9), uint64] */;
  %303 = cosh(%301) /* ty=Tensor[(12, 3, 9), float32] */;
  (%302, %303)
}

def @func_5989() -> Tensor[(16, 112), float64] {
  %304 = @func_5081() /* ty=(Tensor[(16, 112), float64], Tensor[(16, 112), float64]) */;
  %304.0
}

def @func_6124() -> Tensor[(11, 15, 12), float64] {
  @func_2261() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_3575(%var_3563: Tensor[(126), float32]) -> (Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) {
  %305 = @func_2998() /* ty=(Tensor[(16, 112), float64],) */;
  %306 = cast(%var_3563, dtype="float32") /* ty=Tensor[(126), float32] */;
  %307 = %305.0;
  %308 = cast(%307, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %309 = reshape(%306, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), float32] */;
  %310 = reshape(%308, newshape=[64, 28]) /* ty=Tensor[(64, 28), bool] */;
  %311 = @func_1757(%309, %310) /* ty=(Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) */;
  %312 = %311.2;
  (%307, %312, %var_3563)
}

def @func_4470() -> Tensor[(16, 112), bool] {
  %313 = @func_3547() /* ty=(Tensor[(16, 112), bool],) */;
  %313.0
}

def @func_6301(%var_6273: Tensor[(18), float32]) -> (Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64], Tensor[(18), float32], Tensor[(100), uint16]) {
  %314 = @func_5338() /* ty=(Tensor[(16, 112), float32],) */;
  %315 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %316 = cast(%var_6273, dtype="float32") /* ty=Tensor[(18), float32] */;
  %317 = cast(meta[relay.Constant][23] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %318 = reshape(%316, newshape=[18, 1]) /* ty=Tensor[(18, 1), float32] */;
  %319 = reshape(%317, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %320 = @func_6113(%318, %319) /* ty=(Tensor[(16, 112), float64], Tensor[(11, 15, 12), float32], float32, Tensor[(18, 1), float32], Tensor[(100), uint16]) */;
  %321 = %314.0;
  %322 = %315.0;
  %323 = %320.0;
  (%321, %322, %323, %var_6273, meta[relay.Constant][23] /* ty=Tensor[(100), uint16] */)
}

def @func_3132() -> Tensor[(16, 112), float64] {
  %324 = @func_2998() /* ty=(Tensor[(16, 112), float64],) */;
  %324.0
}

def @func_3697(%var_3690: Tensor[(195, 2), uint8]) -> (Tensor[(16, 112), float64], Tensor[(15, 8, 11), float32], uint16, Tensor[(1320), uint16], Tensor[(10, 3, 13), bool], Tensor[(195, 2), uint8]) {
  %325 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %327 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %328 = cast(meta[relay.Constant][25] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
  %329 = reshape(%327, newshape=[]) /* ty=uint16 */;
  %330 = reshape(%328, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), uint16] */;
  %331 = @func_2114(%329, %330) /* ty=(Tensor[(15, 8, 11), float32],) */;
  %332 = cast(%var_3690, dtype="uint8") /* ty=Tensor[(195, 2), uint8] */;
  %333 = cast(%var_3690, dtype="uint8") /* ty=Tensor[(195, 2), uint8] */;
  %334 = reshape(%332, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %335 = reshape(%333, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %336 = asin(%326) /* ty=Tensor[(16, 112), float64] */;
  %337 = %331.0;
  %338 = @func_1033(%334, %335) /* ty=Tensor[(10, 3, 13), bool] */;
  (%336, %337, meta[relay.Constant][24] /* ty=uint16 */, meta[relay.Constant][25] /* ty=Tensor[(1320), uint16] */, %338, %var_3690)
}

def @func_4706(%var_4680: Tensor[(16, 112), float64], %var_4703: Tensor[(1760), float64], %var_4704: Tensor[(13, 15), int32]) -> (Tensor[(16, 112), float32], Tensor[(64, 28), bool], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(13, 15), int32]) {
  %339 = @func_4541() /* ty=Tensor[(16, 112), float64] */;
  %340 = cast(%var_4680, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(2), int32] */;
  %342 = cast(%339, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %344 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %345 = cast(%var_4703, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %346 = cast(%var_4704, dtype="int32") /* ty=Tensor[(13, 15), int32] */;
  %347 = reshape(%345, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float64] */;
  %348 = reshape(%346, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %349 = @func_2941(%347, %348) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) */;
  %350 = mod(%342, %343) /* ty=Tensor[(16, 112), float32] */;
  %351 = %344.1;
  %352 = %349.0;
  (%350, %351, %352, %var_4703, %var_4704)
}

def @func_1176(%var_1103: Tensor[(3, 11, 8), bool], %var_1104: Tensor[(3, 11, 8), bool], %var_1149: Tensor[(390), uint8], %var_1161: Tensor[(825), float32]) -> (Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) {
  %353 = cast(%var_1104, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %354 = shape_of(%var_1103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%var_1103, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = logical_or(%355, %356) /* ty=Tensor[(3, 11, 8), bool] */;
  %358 = cast(%var_1104, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = cast(%var_1103, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
  %363 = cast(%var_1149, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %364 = cast(%var_1149, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %365 = reshape(%363, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %366 = reshape(%364, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %367 = cast(%357, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
  %368 = cast(-2.75035f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %369 = cast(%var_1161, dtype="float32") /* ty=Tensor[(825), float32] */;
  %370 = reshape(%368, newshape=[]) /* ty=float32 */;
  %371 = reshape(%369, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
  %372 = not_equal(%360, %361) /* ty=Tensor[(3, 11, 8), bool] */;
  %373 = acos(%362) /* ty=Tensor[(3, 11, 8), float64] */;
  %374 = @func_1033(%365, %366) /* ty=Tensor[(10, 3, 13), bool] */;
  %375 = cos(%367) /* ty=Tensor[(3, 11, 8), float64] */;
  %376 = @func_946(%370, %371) /* ty=Tensor[(5, 11, 15), float32] */;
  (%372, %373, %374, %var_1149, %375, %376, -2.75035f /* ty=float32 */, %var_1161)
}

def @func_3625(%var_3623: Tensor[(21, 6), float32]) -> (Tensor[(16, 112), float64], Tensor[(126), float32], Tensor[(21, 6), float32]) {
  %377 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %378 = %377.0;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %380 = cast(%var_3623, dtype="float32") /* ty=Tensor[(21, 6), float32] */;
  %381 = reshape(%380, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %382 = @func_3575(%381) /* ty=(Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) */;
  %383 = erf(%379) /* ty=Tensor[(16, 112), float64] */;
  %384 = %382.2;
  (%383, %384, %var_3623)
}

def @func_4232() -> Tensor[(11, 15, 12), float64] {
  %385 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %385.0
}

def @func_4790(%var_4784: Tensor[(13, 11, 11), int16], %var_4785: Tensor[(13, 11, 11), int16]) -> Tensor[(13, 11, 11), bool] {
  %386 = cast(%var_4785, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %387 = shape_of(%var_4784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_4784, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%388, %389) /* ty=Tensor[(13, 11, 11), bool] */
}

def @func_5662(%var_5639: Tensor[(22, 7), float64]) -> (Tensor[(16, 112), float64], Tensor[(16, 112), float32], Tensor[(1, 825), float32], Tensor[(11, 15, 12), float64], Tensor[(22, 7), int32], Tensor[(11, 15, 12), float64]) {
  %390 = @func_4838() /* ty=(Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) */;
  %391 = cast(meta[relay.Constant][26] /* ty=Tensor[(22, 7), float64] */, dtype="float64") /* ty=Tensor[(22, 7), float64] */;
  %392 = reshape(%391, newshape=[1, 14, 11]) /* ty=Tensor[(1, 14, 11), float64] */;
  %393 = @func_2190(%392) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(825), float32], Tensor[(1, 825), float32]) */;
  %394 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %395 = cast(%var_5639, dtype="int32") /* ty=Tensor[(22, 7), int32] */;
  %396 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(22, 7), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %397 = cast(meta[relay.Constant][26] /* ty=Tensor[(22, 7), float64] */, dtype="int32") /* ty=Tensor[(22, 7), int32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %399 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %400 = %390.1;
  %401 = @func_4051() /* ty=Tensor[(16, 112), float32] */;
  %402 = %393.2;
  %403 = %394.0;
  %404 = maximum(%397, %398) /* ty=Tensor[(22, 7), int32] */;
  %405 = %399.0;
  (%400, %401, %402, %403, %404, %405)
}

def @func_2162(%var_2121: Tensor[(16, 4, 8), float32], %var_2143: Tensor[(13, 3), float32], %var_2155: Tensor[(25, 4), uint16]) -> (Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) {
  %406 = cast(%var_2143, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
  %407 = cast(meta[relay.Constant][27] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %408 = reshape(%406, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
  %409 = reshape(%407, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
  %410 = @func_114(%408, %409) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
  %411 = cast(%var_2121, dtype="float32") /* ty=Tensor[(16, 4, 8), float32] */;
  %412 = log10(%411) /* ty=Tensor[(16, 4, 8), float32] */;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(16, 4, 8), float64] */;
  %414 = asinh(%413) /* ty=Tensor[(16, 4, 8), float64] */;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(16, 4, 8), float32] */;
  %416 = sin(%415) /* ty=Tensor[(16, 4, 8), float32] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(16, 4, 8), float64] */;
  %418 = cast(%var_2155, dtype="uint16") /* ty=Tensor[(25, 4), uint16] */;
  %419 = cast(%var_2155, dtype="uint16") /* ty=Tensor[(25, 4), uint16] */;
  %420 = reshape(%418, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %421 = reshape(%419, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %422 = cast(%var_2121, dtype="int64") /* ty=Tensor[(16, 4, 8), int64] */;
  %423 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%416, dtype="int64") /* ty=Tensor[(16, 4, 8), int64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %426 = %410.0;
  %427 = acosh(%417) /* ty=Tensor[(16, 4, 8), float64] */;
  %428 = @func_1817(%420, %421) /* ty=Tensor[(10, 5, 2), uint16] */;
  %429 = add(%424, %425) /* ty=Tensor[(16, 4, 8), int64] */;
  (%426, %var_2143, meta[relay.Constant][27] /* ty=Tensor[(624), float32] */, %427, %428, %var_2155, %429)
}

def @func_946(%var_934: float32, %var_935: Tensor[(5, 11, 15), float32]) -> Tensor[(5, 11, 15), float32] {
  %430 = cast(%var_934, dtype="float32") /* ty=float32 */;
  %431 = cast(%var_935, dtype="float32") /* ty=Tensor[(5, 11, 15), float32] */;
  divide(%430, %431) /* ty=Tensor[(5, 11, 15), float32] */
}

def @func_2240(%var_2228: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %432 = cast(%var_2228, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %433 = cast(meta[relay.Constant][28] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %434 = cast(meta[relay.Constant][28] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %435 = reshape(%433, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %436 = reshape(%434, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %437 = atan(%432) /* ty=Tensor[(15, 8, 9), float32] */;
  %438 = @func_1817(%435, %436) /* ty=Tensor[(10, 5, 2), uint16] */;
  (%437, %438, meta[relay.Constant][28] /* ty=Tensor[(100), uint16] */)
}

def @func_4358(%var_4343: Tensor[(1, 126), float32]) -> (Tensor[(16, 112), float64], Tensor[(16, 112), int64], Tensor[(1, 126), float32], Tensor[(16, 112), float64]) {
  %439 = cast(%var_4343, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %440 = reshape(%439, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %441 = @func_4321(%440) /* ty=(Tensor[(126), float32], Tensor[(16, 112), int64]) */;
  %442 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %443 = %441.1;
  %444 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
  (%442, %443, %var_4343, %444)
}

def @func_5133() -> Tensor[(11, 15, 12), float64] {
  %445 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %445.0
}

def @func_6406() -> (Tensor[(8, 16, 14), bool],) {
  %446 = @func_4838() /* ty=(Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) */;
  %447 = %446.0;
  (%447,)
}

def @func_4182() -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64]) {
  %448 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  %449 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
  (%448, %449)
}

def @func_2725() -> (Tensor[(16, 112), float64],) {
  %450 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %451 = %450.3;
  %452 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 112), bool] */, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(2), int32] */;
  %454 = cast(%451, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %456 = bitwise_xor(%454, %455) /* ty=Tensor[(16, 112), int16] */;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %458 = acos(%457) /* ty=Tensor[(16, 112), float64] */;
  (%458,)
}

def @func_4577() -> (Tensor[(11, 15, 12), float64],) {
  %459 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %460 = %459.0;
  (%460,)
}

def @func_2261() -> Tensor[(11, 15, 12), float64] {
  %461 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %461.0
}

def @func_5241(%var_5214: Tensor[(195), int32], %var_5227: Tensor[(32, 56), float64]) -> (Tensor[(11, 15, 12), float64], Tensor[(5, 13, 3), int16], Tensor[(1760), float64], Tensor[(2, 880), float64], Tensor[(32, 56), int16]) {
  %462 = cast(%var_5214, dtype="int32") /* ty=Tensor[(195), int32] */;
  %463 = cast(%var_5214, dtype="int32") /* ty=Tensor[(195), int32] */;
  %464 = reshape(%462, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %465 = reshape(%463, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %466 = @func_723(%464, %465) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) */;
  %467 = %466.1;
  %468 = cast(%var_5214, dtype="int16") /* ty=Tensor[(195), int16] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="int16") /* ty=Tensor[(5, 13, 3), int16] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %472 = cast(%var_5227, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
  %473 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 880), float64] */, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %474 = cast(%var_5214, dtype="int32") /* ty=Tensor[(195), int32] */;
  %475 = reshape(%472, newshape=[16, 112]) /* ty=Tensor[(16, 112), float64] */;
  %476 = reshape(%473, newshape=[1760]) /* ty=Tensor[(1760), float64] */;
  %477 = reshape(%474, newshape=[13, 15]) /* ty=Tensor[(13, 15), int32] */;
  %478 = @func_4706(%475, %476, %477) /* ty=(Tensor[(16, 112), float32], Tensor[(64, 28), bool], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(13, 15), int32]) */;
  %479 = cast(meta[relay.Constant][31] /* ty=Tensor[(32, 56), float64] */, dtype="int16") /* ty=Tensor[(32, 56), int16] */;
  %480 = shape_of(%var_5227, dtype="int32") /* ty=Tensor[(2), int32] */;
  %481 = cast(%var_5227, dtype="int16") /* ty=Tensor[(32, 56), int16] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %483 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
  %484 = subtract(%470, %471) /* ty=Tensor[(5, 13, 3), int16] */;
  %485 = %478.3;
  %486 = multiply(%481, %482) /* ty=Tensor[(32, 56), int16] */;
  (%483, %484, %485, meta[relay.Constant][30] /* ty=Tensor[(2, 880), float64] */, %486)
}

def @func_3984() -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), uint64]) {
  %487 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %488 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
  %489 = %487.0;
  %490 = %488.0;
  (%489, %490)
}

def @func_4770(%var_4764: Tensor[(11, 15, 12), float64]) -> (Tensor[(11, 15, 12), float64],) {
  %491 = @func_3328() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %492 = %491.0;
  %493 = cast(%var_4764, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %497 = power(%495, %496) /* ty=Tensor[(11, 15, 12), float64] */;
  (%497,)
}

def @func_2114(%var_2101: uint16, %var_2102: Tensor[(15, 8, 11), uint16]) -> (Tensor[(15, 8, 11), float32],) {
  %498 = cast(%var_2101, dtype="bool") /* ty=bool */;
  %499 = cast(%var_2102, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %500 = equal(%498, %499) /* ty=Tensor[(15, 8, 11), bool] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(15, 8, 11), float32] */;
  %502 = acos(%501) /* ty=Tensor[(15, 8, 11), float32] */;
  (%502,)
}

def @func_2044() -> (Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) {
  %503 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %506 = cast(meta[relay.Constant][32] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %507 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 112), bool] */, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %508 = reshape(%506, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), float32] */;
  %509 = reshape(%507, newshape=[64, 28]) /* ty=Tensor[(64, 28), bool] */;
  %510 = @func_1757(%508, %509) /* ty=(Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) */;
  %511 = log2(%505) /* ty=Tensor[(11, 15, 12), float64] */;
  %512 = %510.2;
  (%511, %512, meta[relay.Constant][32] /* ty=Tensor[(126), float32] */, meta[relay.Constant][33] /* ty=Tensor[(16, 112), bool] */)
}

def @func_1505(%var_1413: float32, %var_1414: Tensor[(5, 165), float32], %var_1425: Tensor[(195), int32], %var_1472: Tensor[(5, 78), uint8]) -> (Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) {
  %513 = cast(%var_1413, dtype="float32") /* ty=float32 */;
  %514 = cast(%var_1414, dtype="float32") /* ty=Tensor[(5, 165), float32] */;
  %515 = reshape(%513, newshape=[]) /* ty=float32 */;
  %516 = reshape(%514, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
  %517 = cast(%var_1425, dtype="int32") /* ty=Tensor[(195), int32] */;
  %518 = cast(%var_1425, dtype="int32") /* ty=Tensor[(195), int32] */;
  %519 = reshape(%517, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %520 = reshape(%518, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %521 = @func_723(%519, %520) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) */;
  %522 = %521.1;
  %523 = cast(%522, dtype="int32") /* ty=Tensor[(5, 13, 3), int32] */;
  %524 = reshape(%523, newshape=[5, 13, 3]) /* ty=Tensor[(5, 13, 3), int32] */;
  %525 = cast(%var_1413, dtype="float32") /* ty=float32 */;
  %526 = @func_946(%515, %516) /* ty=Tensor[(5, 11, 15), float32] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(5, 11, 15), float32] */;
  %528 = reshape(%525, newshape=[]) /* ty=float32 */;
  %529 = reshape(%527, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
  %530 = cast(%var_1472, dtype="uint8") /* ty=Tensor[(5, 78), uint8] */;
  %531 = cast(%var_1472, dtype="uint8") /* ty=Tensor[(5, 78), uint8] */;
  %532 = reshape(%530, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %533 = reshape(%531, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %534 = cast(meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %535 = cast(meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %536 = @func_1033(%532, %533) /* ty=Tensor[(10, 3, 13), bool] */;
  %537 = cast(%536, dtype="uint8") /* ty=Tensor[(10, 3, 13), uint8] */;
  %538 = cast(%526, dtype="float32") /* ty=Tensor[(5, 11, 15), float32] */;
  %539 = reshape(%534, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
  %540 = reshape(%535, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
  %541 = reshape(%537, newshape=[390]) /* ty=Tensor[(390), uint8] */;
  %542 = reshape(%538, newshape=[825]) /* ty=Tensor[(825), float32] */;
  %543 = @func_1176(%539, %540, %541, %542) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
  %544 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
  %545 = erf(%544) /* ty=Tensor[(10, 12, 7), float32] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
  %547 = sigmoid(%546) /* ty=Tensor[(10, 12, 7), float64] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
  %549 = log(%548) /* ty=Tensor[(10, 12, 7), float32] */;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
  %551 = sqrt(%550) /* ty=Tensor[(10, 12, 7), float64] */;
  %552 = cast(%551, dtype="uint8") /* ty=Tensor[(10, 12, 7), uint8] */;
  %553 = cast(%var_1413, dtype="uint8") /* ty=uint8 */;
  %554 = left_shift(%552, %553) /* ty=Tensor[(10, 12, 7), uint8] */;
  %555 = cast(%547, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
  %556 = cast(%var_1413, dtype="float64") /* ty=float64 */;
  %557 = floor_divide(%555, %556) /* ty=Tensor[(10, 12, 7), float64] */;
  %558 = cast(%557, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
  %559 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%554, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(%554, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
  %563 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%545, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %566 = @func_585(%524) /* ty=Tensor[(5, 13, 3), int32] */;
  %567 = @func_946(%528, %529) /* ty=Tensor[(5, 11, 15), float32] */;
  %568 = %543.7;
  %569 = greater(%560, %561) /* ty=Tensor[(10, 12, 7), bool] */;
  %570 = power(%564, %565) /* ty=Tensor[(10, 12, 7), float32] */;
  (%526, %var_1414, %522, %var_1425, %566, %567, %536, %var_1472, %568, meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, %569, %570)
}

def @func_1857() -> (Tensor[(11, 15, 12), float64],) {
  %571 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  (%571,)
}

def @func_5064(%var_5053: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(825, 1), float32], Tensor[(195), int32]) {
  %572 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %573 = %572.0;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %575 = cast(%var_5053, dtype="int32") /* ty=Tensor[(195), int32] */;
  %576 = reshape(%575, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %577 = @func_2846(%576) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) */;
  %578 = erf(%574) /* ty=Tensor[(11, 15, 12), float64] */;
  %579 = %577.5;
  (%578, %579, %var_5053)
}

def @func_3547() -> (Tensor[(16, 112), bool],) {
  %580 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %582 = atanh(%581) /* ty=Tensor[(16, 112), float32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %585 = cast(%582, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %587 = greater_equal(%585, %586) /* ty=Tensor[(16, 112), bool] */;
  (%587,)
}

def @func_3828() -> (Tensor[(11, 15, 12), float64],) {
  %588 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %589 = %588.0;
  (%589,)
}

def @func_5733() -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64]) {
  %590 = @func_5338() /* ty=(Tensor[(16, 112), float32],) */;
  %591 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %592 = @func_5142() /* ty=Tensor[(11, 15, 12), float64] */;
  %593 = %590.0;
  %594 = %591.0;
  (%592, %593, %594)
}

def @func_4285(%var_4280: Tensor[(195), int32]) -> (Tensor[(12, 15, 6), float32], Tensor[(195), int32], Tensor[(1760), float64], Tensor[(195), int32]) {
  %595 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 15, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
  %596 = cast(meta[relay.Constant][37] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %597 = cast(%var_4280, dtype="int32") /* ty=Tensor[(195), int32] */;
  %598 = reshape(%596, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float64] */;
  %599 = reshape(%597, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %600 = @func_2941(%598, %599) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) */;
  %601 = cosh(%595) /* ty=Tensor[(12, 15, 6), float32] */;
  %602 = %600.2;
  (%601, %602, meta[relay.Constant][37] /* ty=Tensor[(1760), float64] */, %var_4280)
}

def @func_5758() -> (Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(100), uint16]) {
  %603 = cast(meta[relay.Constant][38] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %604 = reshape(%603, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %605 = @func_2402(%604) /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %606 = @func_5142() /* ty=Tensor[(11, 15, 12), float64] */;
  %607 = %605.2;
  (%606, %607, meta[relay.Constant][38] /* ty=Tensor[(100), uint16] */)
}

def @func_6201() -> (Tensor[(6, 13, ?), int32],) {
  %608 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 1), float64] */;
  %609 = asinh(%608) /* ty=Tensor[(6, 13, 1), float64] */;
  %610 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 13, 1), float64] */, dtype="int32") /* ty=Tensor[(6, 13, 1), int32] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="int32") /* ty=Tensor[(6, 13, 1), int32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %614 = add(%612, %613) /* ty=Tensor[(6, 13, ?), int32] */;
  (%614,)
}

def @func_3906(%var_3904: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(195), int32]) {
  %615 = cast(%var_3904, dtype="int32") /* ty=Tensor[(195), int32] */;
  %616 = reshape(%615, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %617 = @func_2846(%616) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) */;
  %618 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  %619 = %617.0;
  (%618, %619, %var_3904)
}

def @func_3796() -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) {
  %620 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %621 = %620.0;
  %622 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  (%621, %622)
}

def @func_5081() -> (Tensor[(16, 112), float64], Tensor[(16, 112), float64]) {
  %623 = @func_4838() /* ty=(Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) */;
  %624 = %623.1;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %626 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %627 = rsqrt(%625) /* ty=Tensor[(16, 112), float64] */;
  (%626, %627)
}

def @func_5415() -> Tensor[(16, 112), float64] {
  %628 = @func_5030() /* ty=(Tensor[(16, 112), float32], Tensor[(16, 112), float64]) */;
  %628.1
}

def @func_5806(%var_5779: Tensor[(11, 11, 14), float64]) -> (Tensor[(11, 11, 14), int16],) {
  %629 = cast(%var_5779, dtype="float64") /* ty=Tensor[(11, 11, 14), float64] */;
  %630 = atan(%629) /* ty=Tensor[(11, 11, 14), float64] */;
  %631 = cast(%var_5779, dtype="int16") /* ty=Tensor[(11, 11, 14), int16] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="int16") /* ty=Tensor[(11, 11, 14), int16] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %635 = add(%633, %634) /* ty=Tensor[(11, 11, 14), int16] */;
  (%635,)
}

def @func_6578(%var_6561: Tensor[(624), float32], %var_6571: Tensor[(1792), float64]) -> (Tensor[(11, 15, 12), float64], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32], Tensor[(1792), float64], Tensor[(624), float64]) {
  %636 = cast(meta[relay.Constant][40] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %637 = cast(%var_6561, dtype="float32") /* ty=Tensor[(624), float32] */;
  %638 = reshape(%636, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
  %639 = reshape(%637, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
  %640 = @func_114(%638, %639) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
  %641 = cast(%var_6571, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %642 = %640.1;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(3, ?, 13), float32] */;
  %644 = reshape(%641, newshape=[16, 112]) /* ty=Tensor[(16, 112), float64] */;
  %645 = reshape(%643, newshape=[39]) /* ty=Tensor[(39), float32] */;
  %646 = @func_5557(%644, %645) /* ty=(Tensor[(16, 112), uint16], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32]) */;
  %647 = %646.3;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(624), float64] */;
  %649 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
  %650 = log(%648) /* ty=Tensor[(624), float64] */;
  (%649, %642, meta[relay.Constant][40] /* ty=Tensor[(39), float32] */, %var_6561, %var_6571, %650)
}

def @func_3328() -> (Tensor[(11, 15, 12), float64],) {
  %651 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  (%651,)
}

def @func_4321(%var_4311: Tensor[(126), float32]) -> (Tensor[(126), float32], Tensor[(16, 112), int64]) {
  %652 = @func_3547() /* ty=(Tensor[(16, 112), bool],) */;
  %653 = %652.0;
  %654 = cast(%var_4311, dtype="float32") /* ty=Tensor[(126), float32] */;
  %655 = reshape(%654, newshape=[21, 6]) /* ty=Tensor[(21, 6), float32] */;
  %656 = @func_3625(%655) /* ty=(Tensor[(16, 112), float64], Tensor[(126), float32], Tensor[(21, 6), float32]) */;
  %657 = %656.0;
  %658 = cast(%657, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
  %659 = shape_of(%653, dtype="int32") /* ty=Tensor[(2), int32] */;
  %660 = cast(%653, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %662 = bitwise_and(%660, %661) /* ty=Tensor[(16, 112), int64] */;
  (%var_4311, %662)
}

def @func_1951(%var_1947: Tensor[(825), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) {
  %663 = cast(2.72239f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %664 = cast(%var_1947, dtype="float32") /* ty=Tensor[(825), float32] */;
  %665 = reshape(%663, newshape=[]) /* ty=float32 */;
  %666 = reshape(%664, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
  %667 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  %668 = @func_946(%665, %666) /* ty=Tensor[(5, 11, 15), float32] */;
  (%667, %668, 2.72239f /* ty=float32 */, %var_1947)
}

def @func_723(%var_716: Tensor[(195), int32], %var_718: Tensor[(195), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) {
  %669 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %670 = cast(%var_716, dtype="int32") /* ty=Tensor[(195), int32] */;
  %671 = reshape(%670, newshape=[5, 13, 3]) /* ty=Tensor[(5, 13, 3), int32] */;
  %672 = cast(%var_718, dtype="bool") /* ty=Tensor[(195), bool] */;
  %673 = shape_of(%var_716, dtype="int32") /* ty=Tensor[(1), int32] */;
  %674 = cast(%var_716, dtype="bool") /* ty=Tensor[(195), bool] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?), bool] */;
  %676 = sqrt(%669) /* ty=Tensor[(3, 9, 7), float32] */;
  %677 = @func_585(%671) /* ty=Tensor[(5, 13, 3), int32] */;
  %678 = logical_or(%674, %675) /* ty=Tensor[(195), bool] */;
  (%676, %677, %678)
}

def @func_961(%var_957: Tensor[(8, 16, 14), bool]) -> (Tensor[(8, 16, 14), bool],) {
  %679 = cast(%var_957, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %680 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(8, 16, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 16, 14), bool] */, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %683 = logical_and(%681, %682) /* ty=Tensor[(8, 16, 14), bool] */;
  (%683,)
}

def @func_2803(%var_2801: Tensor[(390), uint8]) -> (Tensor[(11, 15, 12), float64], Tensor[(195), int32], float32, Tensor[(55, 15), float32], Tensor[(195), int32], Tensor[(390), uint8]) {
  %684 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %685 = cast(9.21583f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %686 = cast(meta[relay.Constant][43] /* ty=Tensor[(55, 15), float32] */, dtype="float32") /* ty=Tensor[(55, 15), float32] */;
  %687 = cast(meta[relay.Constant][44] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
  %688 = cast(%var_2801, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %689 = reshape(%685, newshape=[]) /* ty=float32 */;
  %690 = reshape(%686, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
  %691 = reshape(%687, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %692 = reshape(%688, newshape=[5, 78]) /* ty=Tensor[(5, 78), uint8] */;
  %693 = @func_1505(%689, %690, %691, %692) /* ty=(Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) */;
  %694 = %684.0;
  %695 = %693.3;
  (%694, %695, 9.21583f /* ty=float32 */, meta[relay.Constant][43] /* ty=Tensor[(55, 15), float32] */, meta[relay.Constant][44] /* ty=Tensor[(195), int32] */, %var_2801)
}

def @func_1033(%var_1020: Tensor[(10, 3, 13), uint8], %var_1021: Tensor[(10, 3, 13), uint8]) -> Tensor[(10, 3, 13), bool] {
  %696 = cast(%var_1021, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
  %697 = shape_of(%var_1020, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_1020, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%698, %699) /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_4885(%var_4874: Tensor[(11, 15, 12), float64]) -> (Tensor[(11, 15, 12), uint64],) {
  %700 = @func_3083() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %701 = %700.0;
  %702 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %706 = add(%704, %705) /* ty=Tensor[(11, 15, 12), uint64] */;
  (%706,)
}

def @func_5509(%var_5475: Tensor[(16, 112), float64], %var_5496: Tensor[(390), uint8], %var_5497: Tensor[(1, 825), float32]) -> (Tensor[(16, 112), bool], Tensor[(3, 11, 8), float64], Tensor[(264), bool], Tensor[(390), uint8], Tensor[(12, 825), bool]) {
  %707 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %708 = cast(%var_5475, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(2), int32] */;
  %710 = cast(%707, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %712 = cast(meta[relay.Constant][45] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %713 = cast(meta[relay.Constant][45] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %714 = cast(%var_5496, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %715 = cast(%var_5497, dtype="float32") /* ty=Tensor[(1, 825), float32] */;
  %716 = reshape(%712, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
  %717 = reshape(%713, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
  %718 = reshape(%714, newshape=[390]) /* ty=Tensor[(390), uint8] */;
  %719 = reshape(%715, newshape=[825]) /* ty=Tensor[(825), float32] */;
  %720 = @func_1176(%716, %717, %718, %719) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
  %721 = cast(%var_5497, dtype="bool") /* ty=Tensor[(1, 825), bool] */;
  %722 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 825), float32] */, dtype="bool") /* ty=Tensor[(12, 825), bool] */;
  %723 = greater(%710, %711) /* ty=Tensor[(16, 112), bool] */;
  %724 = %720.4;
  %725 = logical_and(%721, %722) /* ty=Tensor[(12, 825), bool] */;
  (%723, %724, meta[relay.Constant][45] /* ty=Tensor[(264), bool] */, %var_5496, %725)
}

def @func_2402(%var_2399: Tensor[(100), uint16]) -> (Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %726 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
  %728 = cast(%var_2399, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %729 = cast(%var_2399, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %730 = reshape(%728, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %731 = reshape(%729, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %732 = acos(%727) /* ty=Tensor[(11, 15, 12), float32] */;
  %733 = @func_1817(%730, %731) /* ty=Tensor[(10, 5, 2), uint16] */;
  (%732, %733, %var_2399)
}

def @func_4541() -> Tensor[(16, 112), float64] {
  @func_3132() /* ty=Tensor[(16, 112), float64] */
}

def @func_5338() -> (Tensor[(16, 112), float32],) {
  %734 = @func_4051() /* ty=Tensor[(16, 112), float32] */;
  (%734,)
}

def @func_2780() -> (Tensor[(11, 15, 12), float64],) {
  %735 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  (%735,)
}

def @func_2941(%var_2926: Tensor[(10, 16, 11), float64], %var_2935: Tensor[(195), int32]) -> (Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) {
  %736 = cast(%var_2926, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %737 = cast(%var_2935, dtype="int32") /* ty=Tensor[(195), int32] */;
  %738 = reshape(%737, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %739 = @func_2846(%738) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) */;
  %740 = tan(%736) /* ty=Tensor[(10, 16, 11), float64] */;
  %741 = %739.6;
  (%740, %741, %var_2935)
}

def @func_1757(%var_1748: Tensor[(9, 1, 14), float32], %var_1753: Tensor[(64, 28), bool]) -> (Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) {
  %742 = cast(%var_1748, dtype="float32") /* ty=Tensor[(9, 1, 14), float32] */;
  %743 = cast(%var_1753, dtype="bool") /* ty=Tensor[(64, 28), bool] */;
  %744 = reshape(%743, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), bool] */;
  %745 = @func_961(%744) /* ty=(Tensor[(8, 16, 14), bool],) */;
  %746 = sin(%742) /* ty=Tensor[(9, 1, 14), float32] */;
  %747 = %745.0;
  (%746, %747, %var_1753)
}

def @func_5557(%var_5541: Tensor[(16, 112), float64], %var_5548: Tensor[(39), float32]) -> (Tensor[(16, 112), uint16], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32]) {
  %748 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %749 = cast(%var_5541, dtype="uint16") /* ty=Tensor[(16, 112), uint16] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(2), int32] */;
  %751 = cast(%748, dtype="uint16") /* ty=Tensor[(16, 112), uint16] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %753 = cast(%var_5548, dtype="float32") /* ty=Tensor[(39), float32] */;
  %754 = cast(meta[relay.Constant][47] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %755 = reshape(%753, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
  %756 = reshape(%754, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
  %757 = @func_114(%755, %756) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
  %758 = multiply(%751, %752) /* ty=Tensor[(16, 112), uint16] */;
  %759 = %757.1;
  (%758, %759, %var_5548, meta[relay.Constant][47] /* ty=Tensor[(624), float32] */)
}

def @func_5957(%var_5910: float32, %var_5911: Tensor[(2, 1, 9), float32], %var_5938: Tensor[(1, 100), uint16]) -> (Tensor[(2, 1, 9), float32], Tensor[(11, 15, 12), float32], Tensor[(1, 100), uint16]) {
  %760 = cast(%var_5910, dtype="float32") /* ty=float32 */;
  %761 = cast(%var_5911, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %762 = mod(%760, %761) /* ty=Tensor[(2, 1, 9), float32] */;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(2, 1, 9), float64] */;
  %764 = acos(%763) /* ty=Tensor[(2, 1, 9), float64] */;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %766 = cast(%var_5938, dtype="uint16") /* ty=Tensor[(1, 100), uint16] */;
  %767 = reshape(%766, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %768 = @func_2402(%767) /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %769 = cosh(%765) /* ty=Tensor[(2, 1, 9), float32] */;
  %770 = %768.0;
  (%769, %770, %var_5938)
}

def @func_1988(%var_1971: Tensor[(3, 4, 7), uint64], %var_1972: Tensor[(3, 4, 7), uint64], %var_1979: Tensor[(100), uint16]) -> (Tensor[(3, 4, 7), uint64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %771 = cast(%var_1972, dtype="uint64") /* ty=Tensor[(3, 4, 7), uint64] */;
  %772 = shape_of(%var_1971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%var_1971, dtype="uint64") /* ty=Tensor[(3, 4, 7), uint64] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %775 = cast(%var_1979, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %776 = cast(%var_1979, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %777 = reshape(%775, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %778 = reshape(%776, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %779 = logical_xor(%773, %774) /* ty=Tensor[(3, 4, 7), uint64] */;
  %780 = @func_1817(%777, %778) /* ty=Tensor[(10, 5, 2), uint16] */;
  (%779, %780, %var_1979)
}

def @func_6020() -> (Tensor[(16, 112), float64],) {
  %781 = @func_5268() /* ty=Tensor[(16, 112), float64] */;
  (%781,)
}

def @func_4665(%var_4640: Tensor[(11, 15, 12), float64]) -> Tensor[(11, 15, 12), int64] {
  %782 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %783 = %782.0;
  %784 = cast(%var_4640, dtype="int64") /* ty=Tensor[(11, 15, 12), int64] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="int64") /* ty=Tensor[(11, 15, 12), int64] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%786, %787) /* ty=Tensor[(11, 15, 12), int64] */
}

def @func_6059(%var_6050: Tensor[(16, 1, 12), int64]) -> (Tensor[(16, 5, 12), int64], Tensor[(11, 15, 12), float64]) {
  %788 = cast(%var_6050, dtype="int64") /* ty=Tensor[(16, 1, 12), int64] */;
  %789 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 5, 12), int64] */, dtype="int64") /* ty=Tensor[(16, 5, 12), int64] */;
  %790 = maximum(%788, %789) /* ty=Tensor[(16, 5, 12), int64] */;
  %791 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  (%790, %791)
}

def @func_5597() -> (Tensor[(11, 15, 12), float32],) {
  %792 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %793 = %792.0;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
  %795 = atanh(%794) /* ty=Tensor[(11, 15, 12), float32] */;
  (%795,)
}

def @func_5030() -> (Tensor[(16, 112), float32], Tensor[(16, 112), float64]) {
  %796 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %797 = %796.3;
  %798 = cast(%797, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %799 = sigmoid(%798) /* ty=Tensor[(16, 112), float32] */;
  %800 = @func_4541() /* ty=Tensor[(16, 112), float64] */;
  (%799, %800)
}

def @func_6391(%var_6358: Tensor[(825), float32], %var_6380: Tensor[(1694), float64]) -> (Tensor[(100), uint16], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32], Tensor[(11, 15, 12), float64], Tensor[(1694), bool]) {
  %801 = @func_5758() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(100), uint16]) */;
  %802 = cast(-5.65934f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %803 = cast(%var_6358, dtype="float32") /* ty=Tensor[(825), float32] */;
  %804 = reshape(%802, newshape=[]) /* ty=float32 */;
  %805 = reshape(%803, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
  %806 = cast(%var_6380, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %807 = reshape(%806, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float64] */;
  %808 = @func_5806(%807) /* ty=(Tensor[(11, 11, 14), int16],) */;
  %809 = %808.0;
  %810 = cast(%809, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
  %811 = shape_of(%var_6380, dtype="int32") /* ty=Tensor[(1), int32] */;
  %812 = cast(%var_6380, dtype="bool") /* ty=Tensor[(1694), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?), bool] */;
  %814 = %801.2;
  %815 = @func_946(%804, %805) /* ty=Tensor[(5, 11, 15), float32] */;
  %816 = @func_4232() /* ty=Tensor[(11, 15, 12), float64] */;
  %817 = logical_or(%812, %813) /* ty=Tensor[(1694), bool] */;
  (%814, %815, -5.65934f /* ty=float32 */, %var_6358, %816, %817)
}

def @func_585(%var_580: Tensor[(5, 13, 3), int32]) -> Tensor[(5, 13, 3), int32] {
  %818 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 13, 3), int32] */, dtype="int32") /* ty=Tensor[(1, 13, 3), int32] */;
  %819 = cast(%var_580, dtype="int32") /* ty=Tensor[(5, 13, 3), int32] */;
  right_shift(%818, %819) /* ty=Tensor[(5, 13, 3), int32] */
}

def @func_5268() -> Tensor[(16, 112), float64] {
  @func_4541() /* ty=Tensor[(16, 112), float64] */
}

def @func_4465() -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), bool]) {
  %820 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %821 = @func_3602() /* ty=(Tensor[(11, 15, 12), uint64], Tensor[(11, 15, 12), float64]) */;
  %822 = %821.0;
  %823 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 15, 12), uint64] */, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = %820.0;
  %828 = logical_or(%825, %826) /* ty=Tensor[(11, 15, 12), bool] */;
  (%827, %828)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3699(%var_3698: Tensor[(195, 2), uint8]) -> (Tensor[(16, 112), float64], Tensor[(15, 8, 11), float32], uint16, Tensor[(1320), uint16], Tensor[(10, 3, 13), bool], Tensor[(195, 2), uint8]) {
  %14 = fn (%var_3690: Tensor[(195, 2), uint8]) -> (Tensor[(16, 112), float64], Tensor[(15, 8, 11), float32], uint16, Tensor[(1320), uint16], Tensor[(10, 3, 13), bool], Tensor[(195, 2), uint8]) {
    %0 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
    %1 = cast(%0, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
    %2 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(1320), uint16] */, dtype="uint16") /* ty=Tensor[(1320), uint16] */;
    %4 = reshape(%2, newshape=[]) /* ty=uint16 */;
    %5 = reshape(%3, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), uint16] */;
    %6 = @func_2114(%4, %5) /* ty=(Tensor[(15, 8, 11), float32],) */;
    %7 = cast(%var_3690, dtype="uint8") /* ty=Tensor[(195, 2), uint8] */;
    %8 = cast(%var_3690, dtype="uint8") /* ty=Tensor[(195, 2), uint8] */;
    %9 = reshape(%7, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
    %10 = reshape(%8, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
    %11 = asin(%1) /* ty=Tensor[(16, 112), float64] */;
    %12 = %6.0;
    %13 = @func_1033(%9, %10) /* ty=Tensor[(10, 3, 13), bool] */;
    (%11, %12, meta[relay.Constant][0] /* ty=uint16 */, meta[relay.Constant][1] /* ty=Tensor[(1320), uint16] */, %13, %var_3690)
  };
  %14(%var_3698) /* ty=(Tensor[(16, 112), float64], Tensor[(15, 8, 11), float32], uint16, Tensor[(1320), uint16], Tensor[(10, 3, 13), bool], Tensor[(195, 2), uint8]) */
}

def @func_4360(%var_4359: Tensor[(1, 126), float32]) -> (Tensor[(16, 112), float64], Tensor[(16, 112), int64], Tensor[(1, 126), float32], Tensor[(16, 112), float64]) {
  %21 = fn (%var_4343: Tensor[(1, 126), float32]) -> (Tensor[(16, 112), float64], Tensor[(16, 112), int64], Tensor[(1, 126), float32], Tensor[(16, 112), float64]) {
    %15 = cast(%var_4343, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %16 = reshape(%15, newshape=[126]) /* ty=Tensor[(126), float32] */;
    %17 = @func_4321(%16) /* ty=(Tensor[(126), float32], Tensor[(16, 112), int64]) */;
    %18 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
    %19 = %17.1;
    %20 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
    (%18, %19, %var_4343, %20)
  };
  %21(%var_4359) /* ty=(Tensor[(16, 112), float64], Tensor[(16, 112), int64], Tensor[(1, 126), float32], Tensor[(16, 112), float64]) */
}

def @func_3547() -> (Tensor[(16, 112), bool],) {
  %22 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %24 = atanh(%23) /* ty=Tensor[(16, 112), float32] */;
  %25 = cast(%22, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(2), int32] */;
  %27 = cast(%24, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %29 = greater_equal(%27, %28) /* ty=Tensor[(16, 112), bool] */;
  (%29,)
}

def @func_5394() -> (Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), float32], Tensor[(11, 15, 12), float64]) {
  %30 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
  %32 = cast(%30, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %33 = atan(%31) /* ty=Tensor[(11, 15, 12), float32] */;
  %34 = @func_5108() /* ty=Tensor[(10, 5, 2), float32] */;
  %35 = sinh(%32) /* ty=Tensor[(11, 15, 12), float64] */;
  (%33, %34, %35)
}

def @func_4165(%var_4163: Tensor[(11, 15, 12), uint64], %var_4164: Tensor[(126), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(11, 15, 12), bool]) {
  %56 = fn (%var_4110: Tensor[(11, 15, 12), uint64], %var_4140: Tensor[(126), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(11, 15, 12), bool]) {
    %36 = @func_3328() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %37 = cast(%var_4140, dtype="float32") /* ty=Tensor[(126), float32] */;
    %38 = reshape(%37, newshape=[126]) /* ty=Tensor[(126), float32] */;
    %39 = @func_3575(%38) /* ty=(Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) */;
    %40 = cast(%var_4110, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
    %41 = tan(%40) /* ty=Tensor[(11, 15, 12), float64] */;
    %42 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
    %43 = %42.0;
    %44 = cast(%var_4110, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
    %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%43, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %48 = minimum(%46, %47) /* ty=Tensor[(11, 15, 12), uint64] */;
    %49 = cast(%48, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
    %50 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(%41, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %53 = %36.0;
    %54 = %39.1;
    %55 = less_equal(%51, %52) /* ty=Tensor[(11, 15, 12), bool] */;
    (%53, %54, %var_4140, %55)
  };
  %56(%var_4163, %var_4164) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(11, 15, 12), bool]) */
}

def @func_1844() -> Tensor[(11, 15, 12), float64] {
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  cosh(%57) /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_6061(%var_6060: Tensor[(16, 1, 12), int64]) -> (Tensor[(16, 5, 12), int64], Tensor[(11, 15, 12), float64]) {
  %62 = fn (%var_6050: Tensor[(16, 1, 12), int64]) -> (Tensor[(16, 5, 12), int64], Tensor[(11, 15, 12), float64]) {
    %58 = cast(%var_6050, dtype="int64") /* ty=Tensor[(16, 1, 12), int64] */;
    %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 5, 12), int64] */, dtype="int64") /* ty=Tensor[(16, 5, 12), int64] */;
    %60 = maximum(%58, %59) /* ty=Tensor[(16, 5, 12), int64] */;
    %61 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
    (%60, %61)
  };
  %62(%var_6060) /* ty=(Tensor[(16, 5, 12), int64], Tensor[(11, 15, 12), float64]) */
}

def @func_5066(%var_5065: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(825, 1), float32], Tensor[(195), int32]) {
  %71 = fn (%var_5053: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(825, 1), float32], Tensor[(195), int32]) {
    %63 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %64 = %63.0;
    %65 = cast(%64, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
    %66 = cast(%var_5053, dtype="int32") /* ty=Tensor[(195), int32] */;
    %67 = reshape(%66, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %68 = @func_2846(%67) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) */;
    %69 = erf(%65) /* ty=Tensor[(11, 15, 12), float64] */;
    %70 = %68.5;
    (%69, %70, %var_5053)
  };
  %71(%var_5065) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(825, 1), float32], Tensor[(195), int32]) */
}

def @func_1940() -> (Tensor[(11, 15, 12), uint64],) {
  @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */
}

def @func_949(%var_947: float32, %var_948: Tensor[(5, 11, 15), float32]) -> Tensor[(5, 11, 15), float32] {
  %74 = fn (%var_934: float32, %var_935: Tensor[(5, 11, 15), float32]) -> Tensor[(5, 11, 15), float32] {
    %72 = cast(%var_934, dtype="float32") /* ty=float32 */;
    %73 = cast(%var_935, dtype="float32") /* ty=Tensor[(5, 11, 15), float32] */;
    divide(%72, %73) /* ty=Tensor[(5, 11, 15), float32] */
  };
  %74(%var_947, %var_948) /* ty=Tensor[(5, 11, 15), float32] */
}

def @func_2998() -> (Tensor[(16, 112), float64],) {
  %75 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %76 = %75.0;
  (%76,)
}

def @func_4321(%var_4311: Tensor[(126), float32]) -> (Tensor[(126), float32], Tensor[(16, 112), int64]) {
  %77 = @func_3547() /* ty=(Tensor[(16, 112), bool],) */;
  %78 = %77.0;
  %79 = cast(%var_4311, dtype="float32") /* ty=Tensor[(126), float32] */;
  %80 = reshape(%79, newshape=[21, 6]) /* ty=Tensor[(21, 6), float32] */;
  %81 = @func_3625(%80) /* ty=(Tensor[(16, 112), float64], Tensor[(126), float32], Tensor[(21, 6), float32]) */;
  %82 = %81.0;
  %83 = cast(%82, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
  %84 = shape_of(%78, dtype="int32") /* ty=Tensor[(2), int32] */;
  %85 = cast(%78, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %87 = bitwise_and(%85, %86) /* ty=Tensor[(16, 112), int64] */;
  (%var_4311, %87)
}

def @func_5759() -> (Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(100), uint16]) {
  %93 = fn () -> (Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(100), uint16]) {
    %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %89 = reshape(%88, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %90 = @func_2402(%89) /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
    %91 = @func_5142() /* ty=Tensor[(11, 15, 12), float64] */;
    %92 = %90.2;
    (%91, %92, meta[relay.Constant][4] /* ty=Tensor[(100), uint16] */)
  };
  %93() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(100), uint16]) */
}

def @func_3829() -> (Tensor[(11, 15, 12), float64],) {
  %96 = fn () -> (Tensor[(11, 15, 12), float64],) {
    %94 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %95 = %94.0;
    (%95,)
  };
  %96() /* ty=(Tensor[(11, 15, 12), float64],) */
}

def @func_5826() -> (Tensor[(11, 15, 12), float32],) {
  @func_5824() /* ty=(Tensor[(11, 15, 12), float32],) */
}

def @func_3516(%var_3513: Tensor[(84, 1), uint64], %var_3514: Tensor[(390), uint8], %var_3515: Tensor[(825, 1), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(390), uint8], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(825, 1), float32], Tensor[(84, 1), float32]) {
  %110 = fn (%var_3490: Tensor[(84, 1), uint64], %var_3491: Tensor[(390), uint8], %var_3493: Tensor[(825, 1), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(390), uint8], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(825, 1), float32], Tensor[(84, 1), float32]) {
    %97 = cast(%var_3490, dtype="uint64") /* ty=Tensor[(84, 1), uint64] */;
    %98 = cast(%var_3491, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %99 = cast(meta[relay.Constant][5] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %100 = cast(%var_3493, dtype="float32") /* ty=Tensor[(825, 1), float32] */;
    %101 = reshape(%97, newshape=[84]) /* ty=Tensor[(84), uint64] */;
    %102 = reshape(%98, newshape=[390]) /* ty=Tensor[(390), uint8] */;
    %103 = reshape(%99, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
    %104 = reshape(%100, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
    %105 = @func_2589(%101, %102, %103, %104) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(84), uint64], Tensor[(100), uint16], Tensor[(512), float32], Tensor[(39), float32], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(1080), float32], Tensor[(10, 5, 2), bool], Tensor[(3, 11, 8), float64], Tensor[(66, 4), bool], Tensor[(5, 165), float32]) */;
    %106 = cast(%var_3490, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
    %107 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
    %108 = %105.7;
    %109 = exp(%106) /* ty=Tensor[(84, 1), float32] */;
    (%107, %108, %var_3491, meta[relay.Constant][5] /* ty=Tensor[(100), uint16] */, %var_3493, %109)
  };
  %110(%var_3513, %var_3514, %var_3515) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(390), uint8], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(825, 1), float32], Tensor[(84, 1), float32]) */
}

def @func_118(%var_116: Tensor[(3, 1, 13), float32], %var_117: Tensor[(3, 16, 13), float32]) -> (Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) {
  @func_114(%var_116, %var_117) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */
}

def @func_2045() -> (Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) {
  %121 = fn () -> (Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) {
    %111 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
    %112 = %111.0;
    %113 = cast(%112, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
    %114 = cast(meta[relay.Constant][6] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
    %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 112), bool] */, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
    %116 = reshape(%114, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), float32] */;
    %117 = reshape(%115, newshape=[64, 28]) /* ty=Tensor[(64, 28), bool] */;
    %118 = @func_1757(%116, %117) /* ty=(Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) */;
    %119 = log2(%113) /* ty=Tensor[(11, 15, 12), float64] */;
    %120 = %118.2;
    (%119, %120, meta[relay.Constant][6] /* ty=Tensor[(126), float32] */, meta[relay.Constant][7] /* ty=Tensor[(16, 112), bool] */)
  };
  %121() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */
}

def @func_3330() -> (Tensor[(11, 15, 12), float64],) {
  @func_3328() /* ty=(Tensor[(11, 15, 12), float64],) */
}

def @func_5735() -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64]) {
  @func_5733() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64]) */
}

def @func_5455() -> Tensor[(11, 15, 12), float64] {
  %123 = fn () -> Tensor[(11, 15, 12), float64] {
    %122 = @func_3984() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), uint64]) */;
    %122.0
  };
  %123() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_3604() -> (Tensor[(11, 15, 12), uint64], Tensor[(11, 15, 12), float64]) {
  @func_3602() /* ty=(Tensor[(11, 15, 12), uint64], Tensor[(11, 15, 12), float64]) */
}

def @func_5557(%var_5541: Tensor[(16, 112), float64], %var_5548: Tensor[(39), float32]) -> (Tensor[(16, 112), uint16], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32]) {
  %124 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %125 = cast(%var_5541, dtype="uint16") /* ty=Tensor[(16, 112), uint16] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(2), int32] */;
  %127 = cast(%124, dtype="uint16") /* ty=Tensor[(16, 112), uint16] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %129 = cast(%var_5548, dtype="float32") /* ty=Tensor[(39), float32] */;
  %130 = cast(meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %131 = reshape(%129, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
  %132 = reshape(%130, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
  %133 = @func_114(%131, %132) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
  %134 = multiply(%127, %128) /* ty=Tensor[(16, 112), uint16] */;
  %135 = %133.1;
  (%134, %135, %var_5548, meta[relay.Constant][8] /* ty=Tensor[(624), float32] */)
}

def @func_5244(%var_5242: Tensor[(195), int32], %var_5243: Tensor[(32, 56), float64]) -> (Tensor[(11, 15, 12), float64], Tensor[(5, 13, 3), int16], Tensor[(1760), float64], Tensor[(2, 880), float64], Tensor[(32, 56), int16]) {
  %161 = fn (%var_5214: Tensor[(195), int32], %var_5227: Tensor[(32, 56), float64]) -> (Tensor[(11, 15, 12), float64], Tensor[(5, 13, 3), int16], Tensor[(1760), float64], Tensor[(2, 880), float64], Tensor[(32, 56), int16]) {
    %136 = cast(%var_5214, dtype="int32") /* ty=Tensor[(195), int32] */;
    %137 = cast(%var_5214, dtype="int32") /* ty=Tensor[(195), int32] */;
    %138 = reshape(%136, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %139 = reshape(%137, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %140 = @func_723(%138, %139) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) */;
    %141 = %140.1;
    %142 = cast(%var_5214, dtype="int16") /* ty=Tensor[(195), int16] */;
    %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%141, dtype="int16") /* ty=Tensor[(5, 13, 3), int16] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %146 = cast(%var_5227, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
    %147 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 880), float64] */, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
    %148 = cast(%var_5214, dtype="int32") /* ty=Tensor[(195), int32] */;
    %149 = reshape(%146, newshape=[16, 112]) /* ty=Tensor[(16, 112), float64] */;
    %150 = reshape(%147, newshape=[1760]) /* ty=Tensor[(1760), float64] */;
    %151 = reshape(%148, newshape=[13, 15]) /* ty=Tensor[(13, 15), int32] */;
    %152 = @func_4706(%149, %150, %151) /* ty=(Tensor[(16, 112), float32], Tensor[(64, 28), bool], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(13, 15), int32]) */;
    %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(32, 56), float64] */, dtype="int16") /* ty=Tensor[(32, 56), int16] */;
    %154 = shape_of(%var_5227, dtype="int32") /* ty=Tensor[(2), int32] */;
    %155 = cast(%var_5227, dtype="int16") /* ty=Tensor[(32, 56), int16] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %157 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
    %158 = subtract(%144, %145) /* ty=Tensor[(5, 13, 3), int16] */;
    %159 = %152.3;
    %160 = multiply(%155, %156) /* ty=Tensor[(32, 56), int16] */;
    (%157, %158, %159, meta[relay.Constant][9] /* ty=Tensor[(2, 880), float64] */, %160)
  };
  %161(%var_5242, %var_5243) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(5, 13, 3), int16], Tensor[(1760), float64], Tensor[(2, 880), float64], Tensor[(32, 56), int16]) */
}

def @func_961(%var_957: Tensor[(8, 16, 14), bool]) -> (Tensor[(8, 16, 14), bool],) {
  %162 = cast(%var_957, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %163 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(8, 16, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 16, 14), bool] */, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = logical_and(%164, %165) /* ty=Tensor[(8, 16, 14), bool] */;
  (%166,)
}

def @func_4577() -> (Tensor[(11, 15, 12), float64],) {
  %167 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %168 = %167.0;
  (%168,)
}

def @func_6113(%var_6077: Tensor[(18, 1), float32], %var_6078: Tensor[(100), uint16]) -> (Tensor[(16, 112), float64], Tensor[(11, 15, 12), float32], float32, Tensor[(18, 1), float32], Tensor[(100), uint16]) {
  %169 = cast(-8.49451f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %170 = cast(%var_6077, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %171 = cast(%var_6078, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %172 = reshape(%169, newshape=[]) /* ty=float32 */;
  %173 = reshape(%170, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), float32] */;
  %174 = reshape(%171, newshape=[1, 100]) /* ty=Tensor[(1, 100), uint16] */;
  %175 = @func_5957(%172, %173, %174) /* ty=(Tensor[(2, 1, 9), float32], Tensor[(11, 15, 12), float32], Tensor[(1, 100), uint16]) */;
  %176 = @func_3892() /* ty=Tensor[(16, 112), float64] */;
  %177 = %175.1;
  (%176, %177, -8.49451f /* ty=float32 */, %var_6077, %var_6078)
}

def @func_5991() -> Tensor[(16, 112), float64] {
  @func_5989() /* ty=Tensor[(16, 112), float64] */
}

def @func_2192(%var_2191: Tensor[(1, 14, 11), float64]) -> (Tensor[(1, 14, 11), float64], Tensor[(825), float32], Tensor[(1, 825), float32]) {
  %186 = fn (%var_2171: Tensor[(1, 14, 11), float64]) -> (Tensor[(1, 14, 11), float64], Tensor[(825), float32], Tensor[(1, 825), float32]) {
    %178 = cast(%var_2171, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
    %179 = sigmoid(%178) /* ty=Tensor[(1, 14, 11), float64] */;
    %180 = cast(%179, dtype="float64") /* ty=Tensor[(1, 14, 11), float64] */;
    %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 825), float32] */, dtype="float32") /* ty=Tensor[(1, 825), float32] */;
    %182 = reshape(%181, newshape=[825]) /* ty=Tensor[(825), float32] */;
    %183 = @func_1951(%182) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
    %184 = cosh(%180) /* ty=Tensor[(1, 14, 11), float64] */;
    %185 = %183.3;
    (%184, %185, meta[relay.Constant][12] /* ty=Tensor[(1, 825), float32] */)
  };
  %186(%var_2191) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(825), float32], Tensor[(1, 825), float32]) */
}

def @func_6202() -> (Tensor[(6, 13, ?), int32],) {
  %194 = fn () -> (Tensor[(6, 13, ?), int32],) {
    %187 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 1), float64] */;
    %188 = asinh(%187) /* ty=Tensor[(6, 13, 1), float64] */;
    %189 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 13, 1), float64] */, dtype="int32") /* ty=Tensor[(6, 13, 1), int32] */;
    %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%188, dtype="int32") /* ty=Tensor[(6, 13, 1), int32] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %193 = add(%191, %192) /* ty=Tensor[(6, 13, ?), int32] */;
    (%193,)
  };
  %194() /* ty=(Tensor[(6, 13, ?), int32],) */
}

def @func_4888(%var_4886: Tensor[(11, 15, 12), float64]) -> (Tensor[(11, 15, 12), uint64],) {
  @func_4885(%var_4886) /* ty=(Tensor[(11, 15, 12), uint64],) */
}

def @func_2594(%var_2590: Tensor[(84), uint64], %var_2591: Tensor[(390), uint8], %var_2592: Tensor[(10, 5, 2), uint16], %var_2593: Tensor[(5, 165), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(84), uint64], Tensor[(100), uint16], Tensor[(512), float32], Tensor[(39), float32], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(1080), float32], Tensor[(10, 5, 2), bool], Tensor[(3, 11, 8), float64], Tensor[(66, 4), bool], Tensor[(5, 165), float32]) {
  %237 = fn (%var_2528: Tensor[(84), uint64], %var_2542: Tensor[(390), uint8], %var_2553: Tensor[(10, 5, 2), uint16], %var_2586: Tensor[(5, 165), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(84), uint64], Tensor[(100), uint16], Tensor[(512), float32], Tensor[(39), float32], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(1080), float32], Tensor[(10, 5, 2), bool], Tensor[(3, 11, 8), float64], Tensor[(66, 4), bool], Tensor[(5, 165), float32]) {
    %195 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %196 = cast(%var_2528, dtype="uint64") /* ty=Tensor[(84), uint64] */;
    %197 = cast(%var_2528, dtype="uint64") /* ty=Tensor[(84), uint64] */;
    %198 = cast(meta[relay.Constant][14] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %199 = reshape(%196, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), uint64] */;
    %200 = reshape(%197, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), uint64] */;
    %201 = reshape(%198, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %202 = @func_1988(%199, %200, %201) /* ty=(Tensor[(3, 4, 7), uint64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
    %203 = cast(%var_2542, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %204 = cast(%var_2542, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %205 = reshape(%203, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
    %206 = reshape(%204, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
    %207 = cast(meta[relay.Constant][17] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %208 = reshape(%207, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
    %209 = @func_2240(%208) /* ty=(Tensor[(15, 8, 9), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
    %210 = cast(meta[relay.Constant][15] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
    %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %212 = cast(meta[relay.Constant][14] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %213 = reshape(%210, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), float32] */;
    %214 = reshape(%211, newshape=[13, 3]) /* ty=Tensor[(13, 3), float32] */;
    %215 = reshape(%212, newshape=[25, 4]) /* ty=Tensor[(25, 4), uint16] */;
    %216 = @func_2162(%213, %214, %215) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) */;
    %217 = %216.4;
    %218 = cast(%var_2553, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %222 = cast(meta[relay.Constant][18] /* ty=Tensor[(66, 4), bool] */, dtype="bool") /* ty=Tensor[(66, 4), bool] */;
    %223 = cast(meta[relay.Constant][18] /* ty=Tensor[(66, 4), bool] */, dtype="bool") /* ty=Tensor[(66, 4), bool] */;
    %224 = cast(%var_2542, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %225 = cast(%var_2586, dtype="float32") /* ty=Tensor[(5, 165), float32] */;
    %226 = reshape(%222, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
    %227 = reshape(%223, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
    %228 = reshape(%224, newshape=[390]) /* ty=Tensor[(390), uint8] */;
    %229 = reshape(%225, newshape=[825]) /* ty=Tensor[(825), float32] */;
    %230 = @func_1176(%226, %227, %228, %229) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
    %231 = %195.0;
    %232 = %202.2;
    %233 = @func_1033(%205, %206) /* ty=Tensor[(10, 3, 13), bool] */;
    %234 = %209.2;
    %235 = not_equal(%220, %221) /* ty=Tensor[(10, 5, 2), bool] */;
    %236 = %230.4;
    (%231, %232, %var_2528, meta[relay.Constant][14] /* ty=Tensor[(100), uint16] */, meta[relay.Constant][15] /* ty=Tensor[(512), float32] */, meta[relay.Constant][16] /* ty=Tensor[(39), float32] */, %233, %var_2542, %234, meta[relay.Constant][17] /* ty=Tensor[(1080), float32] */, %235, %236, meta[relay.Constant][18] /* ty=Tensor[(66, 4), bool] */, %var_2586)
  };
  %237(%var_2590, %var_2591, %var_2592, %var_2593) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(84), uint64], Tensor[(100), uint16], Tensor[(512), float32], Tensor[(39), float32], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(1080), float32], Tensor[(10, 5, 2), bool], Tensor[(3, 11, 8), float64], Tensor[(66, 4), bool], Tensor[(5, 165), float32]) */
}

def @func_2598() -> Tensor[(11, 15, 12), float64] {
  @func_1844() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_2600() -> Tensor[(11, 15, 12), float64] {
  @func_2598() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_4471() -> Tensor[(16, 112), bool] {
  %239 = fn () -> Tensor[(16, 112), bool] {
    %238 = @func_3547() /* ty=(Tensor[(16, 112), bool],) */;
    %238.0
  };
  %239() /* ty=Tensor[(16, 112), bool] */
}

def @func_5662(%var_5639: Tensor[(22, 7), float64]) -> (Tensor[(16, 112), float64], Tensor[(16, 112), float32], Tensor[(1, 825), float32], Tensor[(11, 15, 12), float64], Tensor[(22, 7), int32], Tensor[(11, 15, 12), float64]) {
  %240 = @func_4838() /* ty=(Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) */;
  %241 = cast(meta[relay.Constant][19] /* ty=Tensor[(22, 7), float64] */, dtype="float64") /* ty=Tensor[(22, 7), float64] */;
  %242 = reshape(%241, newshape=[1, 14, 11]) /* ty=Tensor[(1, 14, 11), float64] */;
  %243 = @func_2190(%242) /* ty=(Tensor[(1, 14, 11), float64], Tensor[(825), float32], Tensor[(1, 825), float32]) */;
  %244 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %245 = cast(%var_5639, dtype="int32") /* ty=Tensor[(22, 7), int32] */;
  %246 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(22, 7), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %247 = cast(meta[relay.Constant][19] /* ty=Tensor[(22, 7), float64] */, dtype="int32") /* ty=Tensor[(22, 7), int32] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %249 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %250 = %240.1;
  %251 = @func_4051() /* ty=Tensor[(16, 112), float32] */;
  %252 = %243.2;
  %253 = %244.0;
  %254 = maximum(%247, %248) /* ty=Tensor[(22, 7), int32] */;
  %255 = %249.0;
  (%250, %251, %252, %253, %254, %255)
}

def @func_4667(%var_4666: Tensor[(11, 15, 12), float64]) -> Tensor[(11, 15, 12), int64] {
  %262 = fn (%var_4640: Tensor[(11, 15, 12), float64]) -> Tensor[(11, 15, 12), int64] {
    %256 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %257 = %256.0;
    %258 = cast(%var_4640, dtype="int64") /* ty=Tensor[(11, 15, 12), int64] */;
    %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
    %260 = cast(%257, dtype="int64") /* ty=Tensor[(11, 15, 12), int64] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    right_shift(%260, %261) /* ty=Tensor[(11, 15, 12), int64] */
  };
  %262(%var_4666) /* ty=Tensor[(11, 15, 12), int64] */
}

def @func_3000() -> (Tensor[(16, 112), float64],) {
  @func_2998() /* ty=(Tensor[(16, 112), float64],) */
}

def @func_3577(%var_3576: Tensor[(126), float32]) -> (Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) {
  %271 = fn (%var_3563: Tensor[(126), float32]) -> (Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) {
    %263 = @func_2998() /* ty=(Tensor[(16, 112), float64],) */;
    %264 = cast(%var_3563, dtype="float32") /* ty=Tensor[(126), float32] */;
    %265 = %263.0;
    %266 = cast(%265, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
    %267 = reshape(%264, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), float32] */;
    %268 = reshape(%266, newshape=[64, 28]) /* ty=Tensor[(64, 28), bool] */;
    %269 = @func_1757(%267, %268) /* ty=(Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) */;
    %270 = %269.2;
    (%265, %270, %var_3563)
  };
  %271(%var_3576) /* ty=(Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) */
}

def @func_2727() -> (Tensor[(16, 112), float64],) {
  @func_2725() /* ty=(Tensor[(16, 112), float64],) */
}

def @func_3894() -> Tensor[(16, 112), float64] {
  @func_3892() /* ty=Tensor[(16, 112), float64] */
}

def @func_5809(%var_5807: Tensor[(11, 11, 14), float64]) -> (Tensor[(11, 11, 14), int16],) {
  @func_5806(%var_5807) /* ty=(Tensor[(11, 11, 14), int16],) */
}

def @func_6406() -> (Tensor[(8, 16, 14), bool],) {
  %272 = @func_4838() /* ty=(Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) */;
  %273 = %272.0;
  (%273,)
}

def @func_4981(%var_4979: Tensor[(126), float32], %var_4980: Tensor[(1792), bool]) -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(126), float32], Tensor[(8, 16, 14), bool], Tensor[(13, 11, 11), bool], Tensor[(143, 11), int16]) {
  @func_4977(%var_4979, %var_4980) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(126), float32], Tensor[(8, 16, 14), bool], Tensor[(13, 11, 11), bool], Tensor[(143, 11), int16]) */
}

def @func_588(%var_586: Tensor[(5, 13, 3), int32]) -> Tensor[(5, 13, 3), int32] {
  @func_585(%var_586) /* ty=Tensor[(5, 13, 3), int32] */
}

def @func_3602() -> (Tensor[(11, 15, 12), uint64], Tensor[(11, 15, 12), float64]) {
  %274 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
  %275 = %274.0;
  %276 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
  (%275, %276)
}

def @func_2945(%var_2943: Tensor[(10, 16, 11), float64], %var_2944: Tensor[(195), int32]) -> (Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) {
  @func_2941(%var_2943, %var_2944) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) */
}

def @func_2262() -> Tensor[(11, 15, 12), float64] {
  %278 = fn () -> Tensor[(11, 15, 12), float64] {
    %277 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
    %277.0
  };
  %278() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_6581(%var_6579: Tensor[(624), float32], %var_6580: Tensor[(1792), float64]) -> (Tensor[(11, 15, 12), float64], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32], Tensor[(1792), float64], Tensor[(624), float64]) {
  %294 = fn (%var_6561: Tensor[(624), float32], %var_6571: Tensor[(1792), float64]) -> (Tensor[(11, 15, 12), float64], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32], Tensor[(1792), float64], Tensor[(624), float64]) {
    %279 = cast(meta[relay.Constant][20] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %280 = cast(%var_6561, dtype="float32") /* ty=Tensor[(624), float32] */;
    %281 = reshape(%279, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
    %282 = reshape(%280, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
    %283 = @func_114(%281, %282) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
    %284 = cast(%var_6571, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %285 = %283.1;
    %286 = cast(%285, dtype="float32") /* ty=Tensor[(3, ?, 13), float32] */;
    %287 = reshape(%284, newshape=[16, 112]) /* ty=Tensor[(16, 112), float64] */;
    %288 = reshape(%286, newshape=[39]) /* ty=Tensor[(39), float32] */;
    %289 = @func_5557(%287, %288) /* ty=(Tensor[(16, 112), uint16], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32]) */;
    %290 = %289.3;
    %291 = cast(%290, dtype="float64") /* ty=Tensor[(624), float64] */;
    %292 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
    %293 = log(%291) /* ty=Tensor[(624), float64] */;
    (%292, %285, meta[relay.Constant][20] /* ty=Tensor[(39), float32] */, %var_6561, %var_6571, %293)
  };
  %294(%var_6579, %var_6580) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32], Tensor[(1792), float64], Tensor[(624), float64]) */
}

def @func_5081() -> (Tensor[(16, 112), float64], Tensor[(16, 112), float64]) {
  %295 = @func_4838() /* ty=(Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) */;
  %296 = %295.1;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %298 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %299 = rsqrt(%297) /* ty=Tensor[(16, 112), float64] */;
  (%298, %299)
}

def @func_1510(%var_1506: float32, %var_1507: Tensor[(5, 165), float32], %var_1508: Tensor[(195), int32], %var_1509: Tensor[(5, 78), uint8]) -> (Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) {
  %358 = fn (%var_1413: float32, %var_1414: Tensor[(5, 165), float32], %var_1425: Tensor[(195), int32], %var_1472: Tensor[(5, 78), uint8]) -> (Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) {
    %300 = cast(%var_1413, dtype="float32") /* ty=float32 */;
    %301 = cast(%var_1414, dtype="float32") /* ty=Tensor[(5, 165), float32] */;
    %302 = reshape(%300, newshape=[]) /* ty=float32 */;
    %303 = reshape(%301, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
    %304 = cast(%var_1425, dtype="int32") /* ty=Tensor[(195), int32] */;
    %305 = cast(%var_1425, dtype="int32") /* ty=Tensor[(195), int32] */;
    %306 = reshape(%304, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %307 = reshape(%305, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %308 = @func_723(%306, %307) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) */;
    %309 = %308.1;
    %310 = cast(%309, dtype="int32") /* ty=Tensor[(5, 13, 3), int32] */;
    %311 = reshape(%310, newshape=[5, 13, 3]) /* ty=Tensor[(5, 13, 3), int32] */;
    %312 = cast(%var_1413, dtype="float32") /* ty=float32 */;
    %313 = @func_946(%302, %303) /* ty=Tensor[(5, 11, 15), float32] */;
    %314 = cast(%313, dtype="float32") /* ty=Tensor[(5, 11, 15), float32] */;
    %315 = reshape(%312, newshape=[]) /* ty=float32 */;
    %316 = reshape(%314, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
    %317 = cast(%var_1472, dtype="uint8") /* ty=Tensor[(5, 78), uint8] */;
    %318 = cast(%var_1472, dtype="uint8") /* ty=Tensor[(5, 78), uint8] */;
    %319 = reshape(%317, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
    %320 = reshape(%318, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
    %321 = cast(meta[relay.Constant][21] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %322 = cast(meta[relay.Constant][21] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %323 = @func_1033(%319, %320) /* ty=Tensor[(10, 3, 13), bool] */;
    %324 = cast(%323, dtype="uint8") /* ty=Tensor[(10, 3, 13), uint8] */;
    %325 = cast(%313, dtype="float32") /* ty=Tensor[(5, 11, 15), float32] */;
    %326 = reshape(%321, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
    %327 = reshape(%322, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
    %328 = reshape(%324, newshape=[390]) /* ty=Tensor[(390), uint8] */;
    %329 = reshape(%325, newshape=[825]) /* ty=Tensor[(825), float32] */;
    %330 = @func_1176(%326, %327, %328, %329) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
    %331 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
    %332 = erf(%331) /* ty=Tensor[(10, 12, 7), float32] */;
    %333 = cast(%332, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
    %334 = sigmoid(%333) /* ty=Tensor[(10, 12, 7), float64] */;
    %335 = cast(%334, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
    %336 = log(%335) /* ty=Tensor[(10, 12, 7), float32] */;
    %337 = cast(%336, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
    %338 = sqrt(%337) /* ty=Tensor[(10, 12, 7), float64] */;
    %339 = cast(%338, dtype="uint8") /* ty=Tensor[(10, 12, 7), uint8] */;
    %340 = cast(%var_1413, dtype="uint8") /* ty=uint8 */;
    %341 = left_shift(%339, %340) /* ty=Tensor[(10, 12, 7), uint8] */;
    %342 = cast(%334, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
    %343 = cast(%var_1413, dtype="float64") /* ty=float64 */;
    %344 = floor_divide(%342, %343) /* ty=Tensor[(10, 12, 7), float64] */;
    %345 = cast(%344, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
    %346 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%341, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %349 = cast(%341, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
    %350 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%332, dtype="float32") /* ty=Tensor[(10, 12, 7), float32] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %353 = @func_585(%311) /* ty=Tensor[(5, 13, 3), int32] */;
    %354 = @func_946(%315, %316) /* ty=Tensor[(5, 11, 15), float32] */;
    %355 = %330.7;
    %356 = greater(%347, %348) /* ty=Tensor[(10, 12, 7), bool] */;
    %357 = power(%351, %352) /* ty=Tensor[(10, 12, 7), float32] */;
    (%313, %var_1414, %309, %var_1425, %353, %354, %323, %var_1472, %355, meta[relay.Constant][21] /* ty=Tensor[(264), bool] */, %356, %357)
  };
  %358(%var_1506, %var_1507, %var_1508, %var_1509) /* ty=(Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) */
}

def @func_5396() -> (Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), float32], Tensor[(11, 15, 12), float64]) {
  @func_5394() /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), float32], Tensor[(11, 15, 12), float64]) */
}

def @func_5433(%var_5431: Tensor[(12, 3, 9), uint64], %var_5432: Tensor[(12, 3, 9), uint64]) -> (Tensor[(12, 3, 9), uint64], Tensor[(12, 3, 9), float32]) {
  %366 = fn (%var_5418: Tensor[(12, 3, 9), uint64], %var_5419: Tensor[(12, 3, 9), uint64]) -> (Tensor[(12, 3, 9), uint64], Tensor[(12, 3, 9), float32]) {
    %359 = cast(%var_5419, dtype="uint64") /* ty=Tensor[(12, 3, 9), uint64] */;
    %360 = shape_of(%var_5418, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%var_5418, dtype="uint64") /* ty=Tensor[(12, 3, 9), uint64] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %363 = cast(%var_5418, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
    %364 = logical_xor(%361, %362) /* ty=Tensor[(12, 3, 9), uint64] */;
    %365 = cosh(%363) /* ty=Tensor[(12, 3, 9), float32] */;
    (%364, %365)
  };
  %366(%var_5431, %var_5432) /* ty=(Tensor[(12, 3, 9), uint64], Tensor[(12, 3, 9), float32]) */
}

def @func_2166(%var_2163: Tensor[(16, 4, 8), float32], %var_2164: Tensor[(13, 3), float32], %var_2165: Tensor[(25, 4), uint16]) -> (Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) {
  %391 = fn (%var_2121: Tensor[(16, 4, 8), float32], %var_2143: Tensor[(13, 3), float32], %var_2155: Tensor[(25, 4), uint16]) -> (Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) {
    %367 = cast(%var_2143, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
    %368 = cast(meta[relay.Constant][23] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %369 = reshape(%367, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
    %370 = reshape(%368, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
    %371 = @func_114(%369, %370) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
    %372 = cast(%var_2121, dtype="float32") /* ty=Tensor[(16, 4, 8), float32] */;
    %373 = log10(%372) /* ty=Tensor[(16, 4, 8), float32] */;
    %374 = cast(%373, dtype="float64") /* ty=Tensor[(16, 4, 8), float64] */;
    %375 = asinh(%374) /* ty=Tensor[(16, 4, 8), float64] */;
    %376 = cast(%375, dtype="float32") /* ty=Tensor[(16, 4, 8), float32] */;
    %377 = sin(%376) /* ty=Tensor[(16, 4, 8), float32] */;
    %378 = cast(%377, dtype="float64") /* ty=Tensor[(16, 4, 8), float64] */;
    %379 = cast(%var_2155, dtype="uint16") /* ty=Tensor[(25, 4), uint16] */;
    %380 = cast(%var_2155, dtype="uint16") /* ty=Tensor[(25, 4), uint16] */;
    %381 = reshape(%379, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
    %382 = reshape(%380, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
    %383 = cast(%var_2121, dtype="int64") /* ty=Tensor[(16, 4, 8), int64] */;
    %384 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%377, dtype="int64") /* ty=Tensor[(16, 4, 8), int64] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %387 = %371.0;
    %388 = acosh(%378) /* ty=Tensor[(16, 4, 8), float64] */;
    %389 = @func_1817(%381, %382) /* ty=Tensor[(10, 5, 2), uint16] */;
    %390 = add(%385, %386) /* ty=Tensor[(16, 4, 8), int64] */;
    (%387, %var_2143, meta[relay.Constant][23] /* ty=Tensor[(624), float32] */, %388, %389, %var_2155, %390)
  };
  %391(%var_2163, %var_2164, %var_2165) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) */
}

def @func_3892() -> Tensor[(16, 112), float64] {
  %392 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %393 = %392.0;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %395 = sqrt(%394) /* ty=Tensor[(16, 112), float32] */;
  %396 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 112), float32] */, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(2), int32] */;
  %398 = cast(%395, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  power(%398, %399) /* ty=Tensor[(16, 112), float64] */
}

def @func_4303(%var_4302: Tensor[(6, 5, 10), float32]) -> Tensor[(6, 5, 10), float32] {
  %402 = fn (%var_4296: Tensor[(6, 5, 10), float32]) -> Tensor[(6, 5, 10), float32] {
    %400 = cast(-5.49824f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %401 = cast(%var_4296, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
    floor_divide(%400, %401) /* ty=Tensor[(6, 5, 10), float32] */
  };
  %402(%var_4302) /* ty=Tensor[(6, 5, 10), float32] */
}

def @func_4793(%var_4791: Tensor[(13, 11, 11), int16], %var_4792: Tensor[(13, 11, 11), int16]) -> Tensor[(13, 11, 11), bool] {
  %407 = fn (%var_4784: Tensor[(13, 11, 11), int16], %var_4785: Tensor[(13, 11, 11), int16]) -> Tensor[(13, 11, 11), bool] {
    %403 = cast(%var_4785, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
    %404 = shape_of(%var_4784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(%var_4784, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%405, %406) /* ty=Tensor[(13, 11, 11), bool] */
  };
  %407(%var_4791, %var_4792) /* ty=Tensor[(13, 11, 11), bool] */
}

def @func_1988(%var_1971: Tensor[(3, 4, 7), uint64], %var_1972: Tensor[(3, 4, 7), uint64], %var_1979: Tensor[(100), uint16]) -> (Tensor[(3, 4, 7), uint64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %408 = cast(%var_1972, dtype="uint64") /* ty=Tensor[(3, 4, 7), uint64] */;
  %409 = shape_of(%var_1971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%var_1971, dtype="uint64") /* ty=Tensor[(3, 4, 7), uint64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %412 = cast(%var_1979, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %413 = cast(%var_1979, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %414 = reshape(%412, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %415 = reshape(%413, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %416 = logical_xor(%410, %411) /* ty=Tensor[(3, 4, 7), uint64] */;
  %417 = @func_1817(%414, %415) /* ty=Tensor[(10, 5, 2), uint16] */;
  (%416, %417, %var_1979)
}

def @func_1817(%var_1794: Tensor[(10, 5, 2), uint16], %var_1795: Tensor[(10, 5, 2), uint16]) -> Tensor[(10, 5, 2), uint16] {
  %418 = cast(%var_1795, dtype="uint16") /* ty=Tensor[(10, 5, 2), uint16] */;
  %419 = shape_of(%var_1794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_1794, dtype="uint16") /* ty=Tensor[(10, 5, 2), uint16] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%420, %421) /* ty=Tensor[(10, 5, 2), uint16] */
}

def @func_6408() -> (Tensor[(8, 16, 14), bool],) {
  @func_6406() /* ty=(Tensor[(8, 16, 14), bool],) */
}

def @func_964(%var_962: Tensor[(8, 16, 14), bool]) -> (Tensor[(8, 16, 14), bool],) {
  @func_961(%var_962) /* ty=(Tensor[(8, 16, 14), bool],) */
}

def @func_5415() -> Tensor[(16, 112), float64] {
  %422 = @func_5030() /* ty=(Tensor[(16, 112), float32], Tensor[(16, 112), float64]) */;
  %422.1
}

def @func_6117(%var_6115: Tensor[(18, 1), float32], %var_6116: Tensor[(100), uint16]) -> (Tensor[(16, 112), float64], Tensor[(11, 15, 12), float32], float32, Tensor[(18, 1), float32], Tensor[(100), uint16]) {
  @func_6113(%var_6115, %var_6116) /* ty=(Tensor[(16, 112), float64], Tensor[(11, 15, 12), float32], float32, Tensor[(18, 1), float32], Tensor[(100), uint16]) */
}

def @func_4541() -> Tensor[(16, 112), float64] {
  @func_3132() /* ty=Tensor[(16, 112), float64] */
}

def @func_3192() -> Tensor[(16, 112), float64] {
  %424 = fn () -> Tensor[(16, 112), float64] {
    %423 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
    %423.0
  };
  %424() /* ty=Tensor[(16, 112), float64] */
}

def @func_6021() -> (Tensor[(16, 112), float64],) {
  %426 = fn () -> (Tensor[(16, 112), float64],) {
    %425 = @func_5268() /* ty=Tensor[(16, 112), float64] */;
    (%425,)
  };
  %426() /* ty=(Tensor[(16, 112), float64],) */
}

def @func_4010(%var_4009: Tensor[(390), uint8]) -> (Tensor[(11, 15, 12), float64], Tensor[(10, 3, 13), bool], float32, Tensor[(825, 1), float32], Tensor[(195), int32], Tensor[(390), uint8]) {
  %439 = fn (%var_4004: Tensor[(390), uint8]) -> (Tensor[(11, 15, 12), float64], Tensor[(10, 3, 13), bool], float32, Tensor[(825, 1), float32], Tensor[(195), int32], Tensor[(390), uint8]) {
    %427 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %428 = cast(8.37047f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %429 = cast(meta[relay.Constant][25] /* ty=Tensor[(825, 1), float32] */, dtype="float32") /* ty=Tensor[(825, 1), float32] */;
    %430 = cast(meta[relay.Constant][26] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
    %431 = cast(%var_4004, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %432 = reshape(%428, newshape=[]) /* ty=float32 */;
    %433 = reshape(%429, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
    %434 = reshape(%430, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %435 = reshape(%431, newshape=[5, 78]) /* ty=Tensor[(5, 78), uint8] */;
    %436 = @func_1505(%432, %433, %434, %435) /* ty=(Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) */;
    %437 = %427.0;
    %438 = %436.6;
    (%437, %438, 8.37047f /* ty=float32 */, meta[relay.Constant][25] /* ty=Tensor[(825, 1), float32] */, meta[relay.Constant][26] /* ty=Tensor[(195), int32] */, %var_4004)
  };
  %439(%var_4009) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(10, 3, 13), bool], float32, Tensor[(825, 1), float32], Tensor[(195), int32], Tensor[(390), uint8]) */
}

def @func_5032() -> (Tensor[(16, 112), float32], Tensor[(16, 112), float64]) {
  @func_5030() /* ty=(Tensor[(16, 112), float32], Tensor[(16, 112), float64]) */
}

def @func_1036(%var_1034: Tensor[(10, 3, 13), uint8], %var_1035: Tensor[(10, 3, 13), uint8]) -> Tensor[(10, 3, 13), bool] {
  %444 = fn (%var_1020: Tensor[(10, 3, 13), uint8], %var_1021: Tensor[(10, 3, 13), uint8]) -> Tensor[(10, 3, 13), bool] {
    %440 = cast(%var_1021, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
    %441 = shape_of(%var_1020, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%var_1020, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%442, %443) /* ty=Tensor[(10, 3, 13), bool] */
  };
  %444(%var_1034, %var_1035) /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_3625(%var_3623: Tensor[(21, 6), float32]) -> (Tensor[(16, 112), float64], Tensor[(126), float32], Tensor[(21, 6), float32]) {
  %445 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
  %446 = %445.0;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %448 = cast(%var_3623, dtype="float32") /* ty=Tensor[(21, 6), float32] */;
  %449 = reshape(%448, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %450 = @func_3575(%449) /* ty=(Tensor[(16, 112), float64], Tensor[(64, 28), bool], Tensor[(126), float32]) */;
  %451 = erf(%447) /* ty=Tensor[(16, 112), float64] */;
  %452 = %450.2;
  (%451, %452, %var_3623)
}

def @func_1859() -> (Tensor[(11, 15, 12), float64],) {
  @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */
}

def @func_4424(%var_4421: Tensor[(16, 112), float64], %var_4422: Tensor[(84), uint64], %var_4423: Tensor[(825), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), int16], Tensor[(390), uint8], Tensor[(84), uint64], Tensor[(390), uint8], Tensor[(825), float32]) {
  %474 = fn (%var_4404: Tensor[(16, 112), float64], %var_4415: Tensor[(84), uint64], %var_4417: Tensor[(825), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), int16], Tensor[(390), uint8], Tensor[(84), uint64], Tensor[(390), uint8], Tensor[(825), float32]) {
    %453 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %454 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
    %455 = cast(%var_4404, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
    %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(2), int32] */;
    %457 = cast(%454, dtype="int64") /* ty=Tensor[(16, 112), int64] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %459 = add(%457, %458) /* ty=Tensor[(16, 112), int64] */;
    %460 = cast(%var_4404, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
    %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(2), int32] */;
    %462 = cast(%459, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %464 = cast(%var_4415, dtype="uint64") /* ty=Tensor[(84), uint64] */;
    %465 = cast(meta[relay.Constant][27] /* ty=Tensor[(390), uint8] */, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %466 = cast(%var_4417, dtype="float32") /* ty=Tensor[(825), float32] */;
    %467 = reshape(%464, newshape=[84, 1]) /* ty=Tensor[(84, 1), uint64] */;
    %468 = reshape(%465, newshape=[390]) /* ty=Tensor[(390), uint8] */;
    %469 = reshape(%466, newshape=[825, 1]) /* ty=Tensor[(825, 1), float32] */;
    %470 = @func_3512(%467, %468, %469) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(390), uint8], Tensor[(390), uint8], Tensor[(100), uint16], Tensor[(825, 1), float32], Tensor[(84, 1), float32]) */;
    %471 = %453.0;
    %472 = right_shift(%462, %463) /* ty=Tensor[(16, 112), int16] */;
    %473 = %470.1;
    (%471, %472, %473, %var_4415, meta[relay.Constant][27] /* ty=Tensor[(390), uint8] */, %var_4417)
  };
  %474(%var_4421, %var_4422, %var_4423) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(16, 112), int16], Tensor[(390), uint8], Tensor[(84), uint64], Tensor[(390), uint8], Tensor[(825), float32]) */
}

def @func_5340() -> (Tensor[(16, 112), float32],) {
  @func_5338() /* ty=(Tensor[(16, 112), float32],) */
}

def @func_4770(%var_4764: Tensor[(11, 15, 12), float64]) -> (Tensor[(11, 15, 12), float64],) {
  %475 = @func_3328() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %476 = %475.0;
  %477 = cast(%var_4764, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="float64") /* ty=Tensor[(11, 15, 12), float64] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %481 = power(%479, %480) /* ty=Tensor[(11, 15, 12), float64] */;
  (%481,)
}

def @func_3133() -> Tensor[(16, 112), float64] {
  %483 = fn () -> Tensor[(16, 112), float64] {
    %482 = @func_2998() /* ty=(Tensor[(16, 112), float64],) */;
    %482.0
  };
  %483() /* ty=Tensor[(16, 112), float64] */
}

def @func_4053() -> Tensor[(16, 112), float32] {
  @func_4051() /* ty=Tensor[(16, 112), float32] */
}

def @func_6301(%var_6273: Tensor[(18), float32]) -> (Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64], Tensor[(18), float32], Tensor[(100), uint16]) {
  %484 = @func_5338() /* ty=(Tensor[(16, 112), float32],) */;
  %485 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %486 = cast(%var_6273, dtype="float32") /* ty=Tensor[(18), float32] */;
  %487 = cast(meta[relay.Constant][28] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %488 = reshape(%486, newshape=[18, 1]) /* ty=Tensor[(18, 1), float32] */;
  %489 = reshape(%487, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %490 = @func_6113(%488, %489) /* ty=(Tensor[(16, 112), float64], Tensor[(11, 15, 12), float32], float32, Tensor[(18, 1), float32], Tensor[(100), uint16]) */;
  %491 = %484.0;
  %492 = %485.0;
  %493 = %490.0;
  (%491, %492, %493, %var_6273, meta[relay.Constant][28] /* ty=Tensor[(100), uint16] */)
}

def @func_4232() -> Tensor[(11, 15, 12), float64] {
  %494 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %494.0
}

def @func_5598() -> (Tensor[(11, 15, 12), float32],) {
  %499 = fn () -> (Tensor[(11, 15, 12), float32],) {
    %495 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %496 = %495.0;
    %497 = cast(%496, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
    %498 = atanh(%497) /* ty=Tensor[(11, 15, 12), float32] */;
    (%498,)
  };
  %499() /* ty=(Tensor[(11, 15, 12), float32],) */
}

def @func_5268() -> Tensor[(16, 112), float64] {
  @func_4541() /* ty=Tensor[(16, 112), float64] */
}

def @func_2402(%var_2399: Tensor[(100), uint16]) -> (Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %500 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
  %502 = cast(%var_2399, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %503 = cast(%var_2399, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %504 = reshape(%502, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %505 = reshape(%503, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
  %506 = acos(%501) /* ty=Tensor[(11, 15, 12), float32] */;
  %507 = @func_1817(%504, %505) /* ty=Tensor[(10, 5, 2), uint16] */;
  (%506, %507, %var_2399)
}

def @func_2805(%var_2804: Tensor[(390), uint8]) -> (Tensor[(11, 15, 12), float64], Tensor[(195), int32], float32, Tensor[(55, 15), float32], Tensor[(195), int32], Tensor[(390), uint8]) {
  %520 = fn (%var_2801: Tensor[(390), uint8]) -> (Tensor[(11, 15, 12), float64], Tensor[(195), int32], float32, Tensor[(55, 15), float32], Tensor[(195), int32], Tensor[(390), uint8]) {
    %508 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %509 = cast(9.21583f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %510 = cast(meta[relay.Constant][29] /* ty=Tensor[(55, 15), float32] */, dtype="float32") /* ty=Tensor[(55, 15), float32] */;
    %511 = cast(meta[relay.Constant][30] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
    %512 = cast(%var_2801, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %513 = reshape(%509, newshape=[]) /* ty=float32 */;
    %514 = reshape(%510, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
    %515 = reshape(%511, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %516 = reshape(%512, newshape=[5, 78]) /* ty=Tensor[(5, 78), uint8] */;
    %517 = @func_1505(%513, %514, %515, %516) /* ty=(Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) */;
    %518 = %508.0;
    %519 = %517.3;
    (%518, %519, 9.21583f /* ty=float32 */, meta[relay.Constant][29] /* ty=Tensor[(55, 15), float32] */, meta[relay.Constant][30] /* ty=Tensor[(195), int32] */, %var_2801)
  };
  %520(%var_2804) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), int32], float32, Tensor[(55, 15), float32], Tensor[(195), int32], Tensor[(390), uint8]) */
}

def @func_4838() -> (Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) {
  %521 = @func_3796() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) */;
  %522 = %521.1;
  %523 = cast(%522, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
  %524 = reshape(%523, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), bool] */;
  %525 = @func_961(%524) /* ty=(Tensor[(8, 16, 14), bool],) */;
  %526 = cast(%522, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %527 = %525.0;
  %528 = log2(%526) /* ty=Tensor[(16, 112), float64] */;
  (%527, %528)
}

def @func_5083() -> (Tensor[(16, 112), float64], Tensor[(16, 112), float64]) {
  @func_5081() /* ty=(Tensor[(16, 112), float64], Tensor[(16, 112), float64]) */
}

def @func_4183() -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64]) {
  %531 = fn () -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64]) {
    %529 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
    %530 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
    (%529, %530)
  };
  %531() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64]) */
}

def @func_4977(%var_4949: Tensor[(126), float32], %var_4950: Tensor[(1792), bool]) -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(126), float32], Tensor[(8, 16, 14), bool], Tensor[(13, 11, 11), bool], Tensor[(143, 11), int16]) {
  %532 = @func_3311() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %533 = cast(%var_4949, dtype="float32") /* ty=Tensor[(126), float32] */;
  %534 = cast(%var_4950, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %535 = reshape(%533, newshape=[9, 1, 14]) /* ty=Tensor[(9, 1, 14), float32] */;
  %536 = reshape(%534, newshape=[64, 28]) /* ty=Tensor[(64, 28), bool] */;
  %537 = @func_1757(%535, %536) /* ty=(Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) */;
  %538 = %537.1;
  %539 = cast(%var_4950, dtype="bool") /* ty=Tensor[(1792), bool] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = cast(meta[relay.Constant][31] /* ty=Tensor[(143, 11), int16] */, dtype="int16") /* ty=Tensor[(143, 11), int16] */;
  %544 = cast(meta[relay.Constant][31] /* ty=Tensor[(143, 11), int16] */, dtype="int16") /* ty=Tensor[(143, 11), int16] */;
  %545 = reshape(%543, newshape=[13, 11, 11]) /* ty=Tensor[(13, 11, 11), int16] */;
  %546 = reshape(%544, newshape=[13, 11, 11]) /* ty=Tensor[(13, 11, 11), int16] */;
  %547 = %532.0;
  %548 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
  %549 = logical_or(%541, %542) /* ty=Tensor[(8, 16, 14), bool] */;
  %550 = @func_4790(%545, %546) /* ty=Tensor[(13, 11, 11), bool] */;
  (%547, %548, %var_4949, %549, %550, meta[relay.Constant][31] /* ty=Tensor[(143, 11), int16] */)
}

def @func_4465() -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), bool]) {
  %551 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %552 = @func_3602() /* ty=(Tensor[(11, 15, 12), uint64], Tensor[(11, 15, 12), float64]) */;
  %553 = %552.0;
  %554 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 15, 12), uint64] */, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="bool") /* ty=Tensor[(11, 15, 12), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = %551.0;
  %559 = logical_or(%556, %557) /* ty=Tensor[(11, 15, 12), bool] */;
  (%558, %559)
}

def @func_5962(%var_5959: float32, %var_5960: Tensor[(2, 1, 9), float32], %var_5961: Tensor[(1, 100), uint16]) -> (Tensor[(2, 1, 9), float32], Tensor[(11, 15, 12), float32], Tensor[(1, 100), uint16]) {
  @func_5957(%var_5959, %var_5960, %var_5961) /* ty=(Tensor[(2, 1, 9), float32], Tensor[(11, 15, 12), float32], Tensor[(1, 100), uint16]) */
}

def @func_6124() -> Tensor[(11, 15, 12), float64] {
  @func_2261() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_2781() -> (Tensor[(11, 15, 12), float64],) {
  %561 = fn () -> (Tensor[(11, 15, 12), float64],) {
    %560 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
    (%560,)
  };
  %561() /* ty=(Tensor[(11, 15, 12), float64],) */
}

def @func_1938() -> (Tensor[(11, 15, 12), uint64],) {
  %562 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %563 = %562.0;
  %564 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 15, 12), float64] */, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %568 = bitwise_and(%566, %567) /* ty=Tensor[(11, 15, 12), uint64] */;
  (%568,)
}

def @func_585(%var_580: Tensor[(5, 13, 3), int32]) -> Tensor[(5, 13, 3), int32] {
  %569 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 13, 3), int32] */, dtype="int32") /* ty=Tensor[(1, 13, 3), int32] */;
  %570 = cast(%var_580, dtype="int32") /* ty=Tensor[(5, 13, 3), int32] */;
  right_shift(%569, %570) /* ty=Tensor[(5, 13, 3), int32] */
}

def @func_3328() -> (Tensor[(11, 15, 12), float64],) {
  %571 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  (%571,)
}

def @func_3985() -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), uint64]) {
  %576 = fn () -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), uint64]) {
    %572 = @func_1857() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %573 = @func_1938() /* ty=(Tensor[(11, 15, 12), uint64],) */;
    %574 = %572.0;
    %575 = %573.0;
    (%574, %575)
  };
  %576() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), uint64]) */
}

def @func_5957(%var_5910: float32, %var_5911: Tensor[(2, 1, 9), float32], %var_5938: Tensor[(1, 100), uint16]) -> (Tensor[(2, 1, 9), float32], Tensor[(11, 15, 12), float32], Tensor[(1, 100), uint16]) {
  %577 = cast(%var_5910, dtype="float32") /* ty=float32 */;
  %578 = cast(%var_5911, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %579 = mod(%577, %578) /* ty=Tensor[(2, 1, 9), float32] */;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(2, 1, 9), float64] */;
  %581 = acos(%580) /* ty=Tensor[(2, 1, 9), float64] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %583 = cast(%var_5938, dtype="uint16") /* ty=Tensor[(1, 100), uint16] */;
  %584 = reshape(%583, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %585 = @func_2402(%584) /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %586 = cosh(%582) /* ty=Tensor[(2, 1, 9), float32] */;
  %587 = %585.0;
  (%586, %587, %var_5938)
}

def @func_5109() -> Tensor[(10, 5, 2), float32] {
  %591 = fn () -> Tensor[(10, 5, 2), float32] {
    %588 = @func_3083() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
    %589 = %588.1;
    %590 = cast(%589, dtype="float32") /* ty=Tensor[(10, 5, 2), float32] */;
    exp(%590) /* ty=Tensor[(10, 5, 2), float32] */
  };
  %591() /* ty=Tensor[(10, 5, 2), float32] */
}

def @func_5270() -> Tensor[(16, 112), float64] {
  @func_5268() /* ty=Tensor[(16, 112), float64] */
}

def @func_3797() -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) {
  %595 = fn () -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) {
    %592 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
    %593 = %592.0;
    %594 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
    (%593, %594)
  };
  %595() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) */
}

def @func_5030() -> (Tensor[(16, 112), float32], Tensor[(16, 112), float64]) {
  %596 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %597 = %596.3;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %599 = sigmoid(%598) /* ty=Tensor[(16, 112), float32] */;
  %600 = @func_4541() /* ty=Tensor[(16, 112), float64] */;
  (%599, %600)
}

def @func_4711(%var_4708: Tensor[(16, 112), float64], %var_4709: Tensor[(1760), float64], %var_4710: Tensor[(13, 15), int32]) -> (Tensor[(16, 112), float32], Tensor[(64, 28), bool], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(13, 15), int32]) {
  @func_4706(%var_4708, %var_4709, %var_4710) /* ty=(Tensor[(16, 112), float32], Tensor[(64, 28), bool], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(13, 15), int32]) */
}

def @func_1176(%var_1103: Tensor[(3, 11, 8), bool], %var_1104: Tensor[(3, 11, 8), bool], %var_1149: Tensor[(390), uint8], %var_1161: Tensor[(825), float32]) -> (Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) {
  %601 = cast(%var_1104, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %602 = shape_of(%var_1103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_1103, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = logical_or(%603, %604) /* ty=Tensor[(3, 11, 8), bool] */;
  %606 = cast(%var_1104, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = cast(%var_1103, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
  %611 = cast(%var_1149, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %612 = cast(%var_1149, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %613 = reshape(%611, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %614 = reshape(%612, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), uint8] */;
  %615 = cast(%605, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
  %616 = cast(-2.75035f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %617 = cast(%var_1161, dtype="float32") /* ty=Tensor[(825), float32] */;
  %618 = reshape(%616, newshape=[]) /* ty=float32 */;
  %619 = reshape(%617, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
  %620 = not_equal(%608, %609) /* ty=Tensor[(3, 11, 8), bool] */;
  %621 = acos(%610) /* ty=Tensor[(3, 11, 8), float64] */;
  %622 = @func_1033(%613, %614) /* ty=Tensor[(10, 3, 13), bool] */;
  %623 = cos(%615) /* ty=Tensor[(3, 11, 8), float64] */;
  %624 = @func_946(%618, %619) /* ty=Tensor[(5, 11, 15), float32] */;
  (%620, %621, %622, %var_1149, %623, %624, -2.75035f /* ty=float32 */, %var_1161)
}

def @func_2405(%var_2403: Tensor[(100), uint16]) -> (Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  @func_2402(%var_2403) /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */
}

def @func_5561(%var_5559: Tensor[(16, 112), float64], %var_5560: Tensor[(39), float32]) -> (Tensor[(16, 112), uint16], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32]) {
  @func_5557(%var_5559, %var_5560) /* ty=(Tensor[(16, 112), uint16], Tensor[(3, ?, 13), bool], Tensor[(39), float32], Tensor[(624), float32]) */
}

def @func_1846() -> Tensor[(11, 15, 12), float64] {
  @func_1844() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_4840() -> (Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) {
  @func_4838() /* ty=(Tensor[(8, 16, 14), bool], Tensor[(16, 112), float64]) */
}

def @func_1760(%var_1758: Tensor[(9, 1, 14), float32], %var_1759: Tensor[(64, 28), bool]) -> (Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) {
  %631 = fn (%var_1748: Tensor[(9, 1, 14), float32], %var_1753: Tensor[(64, 28), bool]) -> (Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) {
    %625 = cast(%var_1748, dtype="float32") /* ty=Tensor[(9, 1, 14), float32] */;
    %626 = cast(%var_1753, dtype="bool") /* ty=Tensor[(64, 28), bool] */;
    %627 = reshape(%626, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), bool] */;
    %628 = @func_961(%627) /* ty=(Tensor[(8, 16, 14), bool],) */;
    %629 = sin(%625) /* ty=Tensor[(9, 1, 14), float32] */;
    %630 = %628.0;
    (%629, %630, %var_1753)
  };
  %631(%var_1758, %var_1759) /* ty=(Tensor[(9, 1, 14), float32], Tensor[(8, 16, 14), bool], Tensor[(64, 28), bool]) */
}

def @func_1953(%var_1952: Tensor[(825), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) {
  %638 = fn (%var_1947: Tensor[(825), float32]) -> (Tensor[(11, 15, 12), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) {
    %632 = cast(2.72239f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %633 = cast(%var_1947, dtype="float32") /* ty=Tensor[(825), float32] */;
    %634 = reshape(%632, newshape=[]) /* ty=float32 */;
    %635 = reshape(%633, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
    %636 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
    %637 = @func_946(%634, %635) /* ty=Tensor[(5, 11, 15), float32] */;
    (%636, %637, 2.72239f /* ty=float32 */, %var_1947)
  };
  %638(%var_1952) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */
}

def @func_5180(%var_5177: Tensor[(2, 15, 6), float64], %var_5178: Tensor[(39), float32], %var_5179: Tensor[(624), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(16, 112), float64], Tensor[(1, 390), uint8], Tensor[(3, 16, 13), float32], Tensor[(39), float32], Tensor[(624), float32]) {
  %652 = fn (%var_5162: Tensor[(2, 15, 6), float64], %var_5170: Tensor[(39), float32], %var_5171: Tensor[(624), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(16, 112), float64], Tensor[(1, 390), uint8], Tensor[(3, 16, 13), float32], Tensor[(39), float32], Tensor[(624), float32]) {
    %639 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 15, 6), float64] */, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
    %640 = cast(%var_5162, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
    %641 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 390), uint8] */, dtype="uint8") /* ty=Tensor[(1, 390), uint8] */;
    %642 = reshape(%641, newshape=[195, 2]) /* ty=Tensor[(195, 2), uint8] */;
    %643 = @func_3697(%642) /* ty=(Tensor[(16, 112), float64], Tensor[(15, 8, 11), float32], uint16, Tensor[(1320), uint16], Tensor[(10, 3, 13), bool], Tensor[(195, 2), uint8]) */;
    %644 = cast(%var_5170, dtype="float32") /* ty=Tensor[(39), float32] */;
    %645 = cast(%var_5171, dtype="float32") /* ty=Tensor[(624), float32] */;
    %646 = reshape(%644, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float32] */;
    %647 = reshape(%645, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), float32] */;
    %648 = @func_114(%646, %647) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) */;
    %649 = greater_equal(%639, %640) /* ty=Tensor[(2, 15, 6), bool] */;
    %650 = %643.0;
    %651 = %648.0;
    (%649, %650, meta[relay.Constant][36] /* ty=Tensor[(1, 390), uint8] */, %651, %var_5170, %var_5171)
  };
  %652(%var_5177, %var_5178, %var_5179) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(16, 112), float64], Tensor[(1, 390), uint8], Tensor[(3, 16, 13), float32], Tensor[(39), float32], Tensor[(624), float32]) */
}

def @func_5824() -> (Tensor[(11, 15, 12), float32],) {
  %653 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %654 = %653.0;
  %655 = cast(%654, dtype="float32") /* ty=Tensor[(11, 15, 12), float32] */;
  %656 = asin(%655) /* ty=Tensor[(11, 15, 12), float32] */;
  (%656,)
}

def @func_2846(%var_2835: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) {
  %657 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %658 = cast(%var_2835, dtype="int32") /* ty=Tensor[(195), int32] */;
  %659 = cast(%var_2835, dtype="int32") /* ty=Tensor[(195), int32] */;
  %660 = reshape(%658, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %661 = reshape(%659, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %662 = @func_723(%660, %661) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) */;
  %663 = cast(0.785548f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %664 = cast(meta[relay.Constant][37] /* ty=Tensor[(825, 1), float32] */, dtype="float32") /* ty=Tensor[(825, 1), float32] */;
  %665 = cast(%var_2835, dtype="int32") /* ty=Tensor[(195), int32] */;
  %666 = cast(meta[relay.Constant][38] /* ty=Tensor[(390), uint8] */, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %667 = reshape(%663, newshape=[]) /* ty=float32 */;
  %668 = reshape(%664, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
  %669 = reshape(%665, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %670 = reshape(%666, newshape=[5, 78]) /* ty=Tensor[(5, 78), uint8] */;
  %671 = @func_1505(%667, %668, %669, %670) /* ty=(Tensor[(5, 11, 15), float32], Tensor[(5, 165), float32], Tensor[(5, 13, 3), int32], Tensor[(195), int32], Tensor[(5, 13, 3), int32], Tensor[(5, 11, 15), float32], Tensor[(10, 3, 13), bool], Tensor[(5, 78), uint8], Tensor[(825), float32], Tensor[(264), bool], Tensor[(10, 12, 7), bool], Tensor[(10, 12, 7), float32]) */;
  %672 = %657.0;
  %673 = %662.2;
  %674 = %671.5;
  (%672, %673, %var_2835, %674, 0.785548f /* ty=float32 */, meta[relay.Constant][37] /* ty=Tensor[(825, 1), float32] */, meta[relay.Constant][38] /* ty=Tensor[(390), uint8] */)
}

def @func_5118() -> Tensor[(16, 112), float64] {
  @func_5116() /* ty=Tensor[(16, 112), float64] */
}

def @func_1821(%var_1819: Tensor[(10, 5, 2), uint16], %var_1820: Tensor[(10, 5, 2), uint16]) -> Tensor[(10, 5, 2), uint16] {
  @func_1817(%var_1819, %var_1820) /* ty=Tensor[(10, 5, 2), uint16] */
}

def @func_6394(%var_6392: Tensor[(825), float32], %var_6393: Tensor[(1694), float64]) -> (Tensor[(100), uint16], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32], Tensor[(11, 15, 12), float64], Tensor[(1694), bool]) {
  %692 = fn (%var_6358: Tensor[(825), float32], %var_6380: Tensor[(1694), float64]) -> (Tensor[(100), uint16], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32], Tensor[(11, 15, 12), float64], Tensor[(1694), bool]) {
    %675 = @func_5758() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(100), uint16], Tensor[(100), uint16]) */;
    %676 = cast(-5.65934f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %677 = cast(%var_6358, dtype="float32") /* ty=Tensor[(825), float32] */;
    %678 = reshape(%676, newshape=[]) /* ty=float32 */;
    %679 = reshape(%677, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), float32] */;
    %680 = cast(%var_6380, dtype="float64") /* ty=Tensor[(1694), float64] */;
    %681 = reshape(%680, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), float64] */;
    %682 = @func_5806(%681) /* ty=(Tensor[(11, 11, 14), int16],) */;
    %683 = %682.0;
    %684 = cast(%683, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
    %685 = shape_of(%var_6380, dtype="int32") /* ty=Tensor[(1), int32] */;
    %686 = cast(%var_6380, dtype="bool") /* ty=Tensor[(1694), bool] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?), bool] */;
    %688 = %675.2;
    %689 = @func_946(%678, %679) /* ty=Tensor[(5, 11, 15), float32] */;
    %690 = @func_4232() /* ty=Tensor[(11, 15, 12), float64] */;
    %691 = logical_or(%686, %687) /* ty=Tensor[(1694), bool] */;
    (%688, %689, -5.65934f /* ty=float32 */, %var_6358, %690, %691)
  };
  %692(%var_6392, %var_6393) /* ty=(Tensor[(100), uint16], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32], Tensor[(11, 15, 12), float64], Tensor[(1694), bool]) */
}

def @func_5116() -> Tensor[(16, 112), float64] {
  %693 = @func_3796() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64]) */;
  %694 = %693.1;
  %695 = cast(%694, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  atan(%695) /* ty=Tensor[(16, 112), float64] */
}

def @func_5989() -> Tensor[(16, 112), float64] {
  %696 = @func_5081() /* ty=(Tensor[(16, 112), float64], Tensor[(16, 112), float64]) */;
  %696.0
}

def @func_5134() -> Tensor[(11, 15, 12), float64] {
  %698 = fn () -> Tensor[(11, 15, 12), float64] {
    %697 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
    %697.0
  };
  %698() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_5733() -> (Tensor[(11, 15, 12), float64], Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64]) {
  %699 = @func_5338() /* ty=(Tensor[(16, 112), float32],) */;
  %700 = @func_3828() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %701 = @func_5142() /* ty=Tensor[(11, 15, 12), float64] */;
  %702 = %699.0;
  %703 = %700.0;
  (%701, %702, %703)
}

def @func_114(%var_98: Tensor[(3, 1, 13), float32], %var_102: Tensor[(3, 16, 13), float32]) -> (Tensor[(3, 16, 13), float32], Tensor[(3, ?, 13), bool]) {
  %704 = cast(%var_98, dtype="float32") /* ty=Tensor[(3, 1, 13), float32] */;
  %705 = tan(%704) /* ty=Tensor[(3, 1, 13), float32] */;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(3, 1, 13), float32] */;
  %707 = cast(%var_102, dtype="float32") /* ty=Tensor[(3, 16, 13), float32] */;
  %708 = cast(%705, dtype="bool") /* ty=Tensor[(3, 1, 13), bool] */;
  %709 = shape_of(%var_98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_98, dtype="bool") /* ty=Tensor[(3, 1, 13), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = power(%706, %707) /* ty=Tensor[(3, 16, 13), float32] */;
  %713 = greater_equal(%710, %711) /* ty=Tensor[(3, ?, 13), bool] */;
  (%712, %713)
}

def @func_3906(%var_3904: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(195), int32]) {
  %714 = cast(%var_3904, dtype="int32") /* ty=Tensor[(195), int32] */;
  %715 = reshape(%714, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %716 = @func_2846(%715) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) */;
  %717 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  %718 = %716.0;
  (%717, %718, %var_3904)
}

def @func_4579() -> (Tensor[(11, 15, 12), float64],) {
  @func_4577() /* ty=(Tensor[(11, 15, 12), float64],) */
}

def @func_2849(%var_2847: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) {
  @func_2846(%var_2847) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) */
}

def @func_4051() -> Tensor[(16, 112), float32] {
  %719 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  log10(%720) /* ty=Tensor[(16, 112), float32] */
}

def @func_2725() -> (Tensor[(16, 112), float64],) {
  %721 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %722 = %721.3;
  %723 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 112), bool] */, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(2), int32] */;
  %725 = cast(%722, dtype="int16") /* ty=Tensor[(16, 112), int16] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %727 = bitwise_xor(%725, %726) /* ty=Tensor[(16, 112), int16] */;
  %728 = cast(%727, dtype="float64") /* ty=Tensor[(16, 112), float64] */;
  %729 = acos(%728) /* ty=Tensor[(16, 112), float64] */;
  (%729,)
}

def @func_5144() -> Tensor[(11, 15, 12), float64] {
  @func_5142() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_6152() -> (Tensor[(16, 112), float64], Tensor[(16, 112), float64]) {
  %733 = fn () -> (Tensor[(16, 112), float64], Tensor[(16, 112), float64]) {
    %730 = @func_2725() /* ty=(Tensor[(16, 112), float64],) */;
    %731 = %730.0;
    %732 = @func_4541() /* ty=Tensor[(16, 112), float64] */;
    (%731, %732)
  };
  %733() /* ty=(Tensor[(16, 112), float64], Tensor[(16, 112), float64]) */
}

def @func_6126() -> Tensor[(11, 15, 12), float64] {
  @func_6124() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_5806(%var_5779: Tensor[(11, 11, 14), float64]) -> (Tensor[(11, 11, 14), int16],) {
  %734 = cast(%var_5779, dtype="float64") /* ty=Tensor[(11, 11, 14), float64] */;
  %735 = atan(%734) /* ty=Tensor[(11, 11, 14), float64] */;
  %736 = cast(%var_5779, dtype="int16") /* ty=Tensor[(11, 11, 14), int16] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="int16") /* ty=Tensor[(11, 11, 14), int16] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %740 = add(%738, %739) /* ty=Tensor[(11, 11, 14), int16] */;
  (%740,)
}

def @func_3312() -> (Tensor[(11, 15, 12), float64],) {
  %742 = fn () -> (Tensor[(11, 15, 12), float64],) {
    %741 = @func_2598() /* ty=Tensor[(11, 15, 12), float64] */;
    (%741,)
  };
  %742() /* ty=(Tensor[(11, 15, 12), float64],) */
}

def @func_726(%var_724: Tensor[(195), int32], %var_725: Tensor[(195), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) {
  %753 = fn (%var_716: Tensor[(195), int32], %var_718: Tensor[(195), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) {
    %743 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %744 = cast(%var_716, dtype="int32") /* ty=Tensor[(195), int32] */;
    %745 = reshape(%744, newshape=[5, 13, 3]) /* ty=Tensor[(5, 13, 3), int32] */;
    %746 = cast(%var_718, dtype="bool") /* ty=Tensor[(195), bool] */;
    %747 = shape_of(%var_716, dtype="int32") /* ty=Tensor[(1), int32] */;
    %748 = cast(%var_716, dtype="bool") /* ty=Tensor[(195), bool] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?), bool] */;
    %750 = sqrt(%743) /* ty=Tensor[(3, 9, 7), float32] */;
    %751 = @func_585(%745) /* ty=Tensor[(5, 13, 3), int32] */;
    %752 = logical_or(%748, %749) /* ty=Tensor[(195), bool] */;
    (%750, %751, %752)
  };
  %753(%var_724, %var_725) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(5, 13, 3), int32], Tensor[(195), bool]) */
}

def @func_3084() -> (Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %760 = fn () -> (Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
    %754 = cast(meta[relay.Constant][41] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %755 = cast(meta[relay.Constant][41] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %756 = reshape(%754, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
    %757 = reshape(%755, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
    %758 = @func_2261() /* ty=Tensor[(11, 15, 12), float64] */;
    %759 = @func_1817(%756, %757) /* ty=Tensor[(10, 5, 2), uint16] */;
    (%758, %759, meta[relay.Constant][41] /* ty=Tensor[(100), uint16] */)
  };
  %760() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */
}

def @func_2117(%var_2115: uint16, %var_2116: Tensor[(15, 8, 11), uint16]) -> (Tensor[(15, 8, 11), float32],) {
  %766 = fn (%var_2101: uint16, %var_2102: Tensor[(15, 8, 11), uint16]) -> (Tensor[(15, 8, 11), float32],) {
    %761 = cast(%var_2101, dtype="bool") /* ty=bool */;
    %762 = cast(%var_2102, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
    %763 = equal(%761, %762) /* ty=Tensor[(15, 8, 11), bool] */;
    %764 = cast(%763, dtype="float32") /* ty=Tensor[(15, 8, 11), float32] */;
    %765 = acos(%764) /* ty=Tensor[(15, 8, 11), float32] */;
    (%765,)
  };
  %766(%var_2115, %var_2116) /* ty=(Tensor[(15, 8, 11), float32],) */
}

def @func_5338() -> (Tensor[(16, 112), float32],) {
  %767 = @func_4051() /* ty=Tensor[(16, 112), float32] */;
  (%767,)
}

def @func_5513(%var_5510: Tensor[(16, 112), float64], %var_5511: Tensor[(390), uint8], %var_5512: Tensor[(1, 825), float32]) -> (Tensor[(16, 112), bool], Tensor[(3, 11, 8), float64], Tensor[(264), bool], Tensor[(390), uint8], Tensor[(12, 825), bool]) {
  %787 = fn (%var_5475: Tensor[(16, 112), float64], %var_5496: Tensor[(390), uint8], %var_5497: Tensor[(1, 825), float32]) -> (Tensor[(16, 112), bool], Tensor[(3, 11, 8), float64], Tensor[(264), bool], Tensor[(390), uint8], Tensor[(12, 825), bool]) {
    %768 = @func_3132() /* ty=Tensor[(16, 112), float64] */;
    %769 = cast(%var_5475, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
    %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(2), int32] */;
    %771 = cast(%768, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %773 = cast(meta[relay.Constant][42] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %774 = cast(meta[relay.Constant][42] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %775 = cast(%var_5496, dtype="uint8") /* ty=Tensor[(390), uint8] */;
    %776 = cast(%var_5497, dtype="float32") /* ty=Tensor[(1, 825), float32] */;
    %777 = reshape(%773, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
    %778 = reshape(%774, newshape=[3, 11, 8]) /* ty=Tensor[(3, 11, 8), bool] */;
    %779 = reshape(%775, newshape=[390]) /* ty=Tensor[(390), uint8] */;
    %780 = reshape(%776, newshape=[825]) /* ty=Tensor[(825), float32] */;
    %781 = @func_1176(%777, %778, %779, %780) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */;
    %782 = cast(%var_5497, dtype="bool") /* ty=Tensor[(1, 825), bool] */;
    %783 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 825), float32] */, dtype="bool") /* ty=Tensor[(12, 825), bool] */;
    %784 = greater(%771, %772) /* ty=Tensor[(16, 112), bool] */;
    %785 = %781.4;
    %786 = logical_and(%782, %783) /* ty=Tensor[(12, 825), bool] */;
    (%784, %785, meta[relay.Constant][42] /* ty=Tensor[(264), bool] */, %var_5496, %786)
  };
  %787(%var_5510, %var_5511, %var_5512) /* ty=(Tensor[(16, 112), bool], Tensor[(3, 11, 8), float64], Tensor[(264), bool], Tensor[(390), uint8], Tensor[(12, 825), bool]) */
}

def @func_4288(%var_4286: Tensor[(195), int32]) -> (Tensor[(12, 15, 6), float32], Tensor[(195), int32], Tensor[(1760), float64], Tensor[(195), int32]) {
  @func_4285(%var_4286) /* ty=(Tensor[(12, 15, 6), float32], Tensor[(195), int32], Tensor[(1760), float64], Tensor[(195), int32]) */
}

def @func_4543() -> Tensor[(16, 112), float64] {
  @func_4541() /* ty=Tensor[(16, 112), float64] */
}

def @func_1182(%var_1178: Tensor[(3, 11, 8), bool], %var_1179: Tensor[(3, 11, 8), bool], %var_1180: Tensor[(390), uint8], %var_1181: Tensor[(825), float32]) -> (Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) {
  @func_1176(%var_1178, %var_1179, %var_1180, %var_1181) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float64], Tensor[(10, 3, 13), bool], Tensor[(390), uint8], Tensor[(3, 11, 8), float64], Tensor[(5, 11, 15), float32], float32, Tensor[(825), float32]) */
}

def @func_3628(%var_3626: Tensor[(21, 6), float32]) -> (Tensor[(16, 112), float64], Tensor[(126), float32], Tensor[(21, 6), float32]) {
  @func_3625(%var_3626) /* ty=(Tensor[(16, 112), float64], Tensor[(126), float32], Tensor[(21, 6), float32]) */
}

def @func_4467() -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), bool]) {
  @func_4465() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), bool]) */
}

def @func_2941(%var_2926: Tensor[(10, 16, 11), float64], %var_2935: Tensor[(195), int32]) -> (Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) {
  %788 = cast(%var_2926, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %789 = cast(%var_2935, dtype="int32") /* ty=Tensor[(195), int32] */;
  %790 = reshape(%789, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %791 = @func_2846(%790) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(195), bool], Tensor[(195), int32], Tensor[(5, 11, 15), float32], float32, Tensor[(825, 1), float32], Tensor[(390), uint8]) */;
  %792 = tan(%788) /* ty=Tensor[(10, 16, 11), float64] */;
  %793 = %791.6;
  (%792, %793, %var_2935)
}

def @func_5417() -> Tensor[(16, 112), float64] {
  @func_5415() /* ty=Tensor[(16, 112), float64] */
}

def @func_3909(%var_3907: Tensor[(195), int32]) -> (Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(195), int32]) {
  @func_3906(%var_3907) /* ty=(Tensor[(11, 15, 12), float64], Tensor[(11, 15, 12), float64], Tensor[(195), int32]) */
}

def @func_6517(%var_6516: Tensor[(11, 15, 12), float32]) -> Tensor[(11, 15, 12), int32] {
  %800 = fn (%var_6502: Tensor[(11, 15, 12), float32]) -> Tensor[(11, 15, 12), int32] {
    %794 = @func_5394() /* ty=(Tensor[(11, 15, 12), float32], Tensor[(10, 5, 2), float32], Tensor[(11, 15, 12), float64]) */;
    %795 = %794.0;
    %796 = cast(%var_6502, dtype="int32") /* ty=Tensor[(11, 15, 12), int32] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%795, dtype="int32") /* ty=Tensor[(11, 15, 12), int32] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    left_shift(%798, %799) /* ty=Tensor[(11, 15, 12), int32] */
  };
  %800(%var_6516) /* ty=Tensor[(11, 15, 12), int32] */
}

def @func_4706(%var_4680: Tensor[(16, 112), float64], %var_4703: Tensor[(1760), float64], %var_4704: Tensor[(13, 15), int32]) -> (Tensor[(16, 112), float32], Tensor[(64, 28), bool], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(13, 15), int32]) {
  %801 = @func_4541() /* ty=Tensor[(16, 112), float64] */;
  %802 = cast(%var_4680, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(2), int32] */;
  %804 = cast(%801, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %806 = @func_2044() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(64, 28), bool], Tensor[(126), float32], Tensor[(16, 112), bool]) */;
  %807 = cast(%var_4703, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %808 = cast(%var_4704, dtype="int32") /* ty=Tensor[(13, 15), int32] */;
  %809 = reshape(%807, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float64] */;
  %810 = reshape(%808, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %811 = @func_2941(%809, %810) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) */;
  %812 = mod(%804, %805) /* ty=Tensor[(16, 112), float32] */;
  %813 = %806.1;
  %814 = %811.0;
  (%812, %813, %814, %var_4703, %var_4704)
}

def @func_4885(%var_4874: Tensor[(11, 15, 12), float64]) -> (Tensor[(11, 15, 12), uint64],) {
  %815 = @func_3083() /* ty=(Tensor[(11, 15, 12), float64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */;
  %816 = %815.0;
  %817 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%816, dtype="uint64") /* ty=Tensor[(11, 15, 12), uint64] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %821 = add(%819, %820) /* ty=Tensor[(11, 15, 12), uint64] */;
  (%821,)
}

def @func_1993(%var_1990: Tensor[(3, 4, 7), uint64], %var_1991: Tensor[(3, 4, 7), uint64], %var_1992: Tensor[(100), uint16]) -> (Tensor[(3, 4, 7), uint64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  @func_1988(%var_1990, %var_1991, %var_1992) /* ty=(Tensor[(3, 4, 7), uint64], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */
}

def @func_3549() -> (Tensor[(16, 112), bool],) {
  @func_3547() /* ty=(Tensor[(16, 112), bool],) */
}

def @func_4324(%var_4322: Tensor[(126), float32]) -> (Tensor[(126), float32], Tensor[(16, 112), int64]) {
  @func_4321(%var_4322) /* ty=(Tensor[(126), float32], Tensor[(16, 112), int64]) */
}

def @func_6244(%var_6243: Tensor[(16, 112), float32]) -> (Tensor[(16, 112), float32], Tensor[(16, 112), uint64]) {
  %835 = fn (%var_6224: Tensor[(16, 112), float32]) -> (Tensor[(16, 112), float32], Tensor[(16, 112), uint64]) {
    %822 = @func_5030() /* ty=(Tensor[(16, 112), float32], Tensor[(16, 112), float64]) */;
    %823 = @func_4051() /* ty=Tensor[(16, 112), float32] */;
    %824 = cast(%var_6224, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
    %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(2), int32] */;
    %826 = cast(%823, dtype="bool") /* ty=Tensor[(16, 112), bool] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %828 = less(%826, %827) /* ty=Tensor[(16, 112), bool] */;
    %829 = cast(%828, dtype="uint64") /* ty=Tensor[(16, 112), uint64] */;
    %830 = shape_of(%var_6224, dtype="int32") /* ty=Tensor[(2), int32] */;
    %831 = cast(%var_6224, dtype="uint64") /* ty=Tensor[(16, 112), uint64] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %833 = %822.0;
    %834 = logical_xor(%831, %832) /* ty=Tensor[(16, 112), uint64] */;
    (%833, %834)
  };
  %835(%var_6243) /* ty=(Tensor[(16, 112), float32], Tensor[(16, 112), uint64]) */
}

def @func_4285(%var_4280: Tensor[(195), int32]) -> (Tensor[(12, 15, 6), float32], Tensor[(195), int32], Tensor[(1760), float64], Tensor[(195), int32]) {
  %836 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 15, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
  %837 = cast(meta[relay.Constant][45] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %838 = cast(%var_4280, dtype="int32") /* ty=Tensor[(195), int32] */;
  %839 = reshape(%837, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float64] */;
  %840 = reshape(%838, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %841 = @func_2941(%839, %840) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) */;
  %842 = cosh(%836) /* ty=Tensor[(12, 15, 6), float32] */;
  %843 = %841.2;
  (%842, %843, meta[relay.Constant][45] /* ty=Tensor[(1760), float64] */, %var_4280)
}

def @func_5142() -> Tensor[(11, 15, 12), float64] {
  %844 = @func_2780() /* ty=(Tensor[(11, 15, 12), float64],) */;
  %844.0
}

def @func_4773(%var_4771: Tensor[(11, 15, 12), float64]) -> (Tensor[(11, 15, 12), float64],) {
  @func_4770(%var_4771) /* ty=(Tensor[(11, 15, 12), float64],) */
}

def @func_5665(%var_5663: Tensor[(22, 7), float64]) -> (Tensor[(16, 112), float64], Tensor[(16, 112), float32], Tensor[(1, 825), float32], Tensor[(11, 15, 12), float64], Tensor[(22, 7), int32], Tensor[(11, 15, 12), float64]) {
  @func_5662(%var_5663) /* ty=(Tensor[(16, 112), float64], Tensor[(16, 112), float32], Tensor[(1, 825), float32], Tensor[(11, 15, 12), float64], Tensor[(22, 7), int32], Tensor[(11, 15, 12), float64]) */
}

def @func_1857() -> (Tensor[(11, 15, 12), float64],) {
  %845 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
  (%845,)
}

def @func_4234() -> Tensor[(11, 15, 12), float64] {
  @func_4232() /* ty=Tensor[(11, 15, 12), float64] */
}

def @func_6304(%var_6302: Tensor[(18), float32]) -> (Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64], Tensor[(18), float32], Tensor[(100), uint16]) {
  @func_6301(%var_6302) /* ty=(Tensor[(16, 112), float32], Tensor[(11, 15, 12), float64], Tensor[(16, 112), float64], Tensor[(18), float32], Tensor[(100), uint16]) */
}

def @main(%var_6620: Tensor[(12, 5, 6), float32]) -> Tensor[(12, 5, 6), float32] {
  %846 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 6), float32] */;
  %847 = shape_of(%var_6620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%var_6620, dtype="float32") /* ty=Tensor[(12, 5, 6), float32] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%848, %849) /* ty=Tensor[(12, 5, 6), float32] */
}

def @func_2242(%var_2241: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
  %857 = fn (%var_2228: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) {
    %850 = cast(%var_2228, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
    %851 = cast(meta[relay.Constant][47] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %852 = cast(meta[relay.Constant][47] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %853 = reshape(%851, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
    %854 = reshape(%852, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), uint16] */;
    %855 = atan(%850) /* ty=Tensor[(15, 8, 9), float32] */;
    %856 = @func_1817(%853, %854) /* ty=Tensor[(10, 5, 2), uint16] */;
    (%855, %856, meta[relay.Constant][47] /* ty=Tensor[(100), uint16] */)
  };
  %857(%var_2241) /* ty=(Tensor[(15, 8, 9), float32], Tensor[(10, 5, 2), uint16], Tensor[(100), uint16]) */
}

def @func_3294(%var_3291: Tensor[(16, 112), float64], %var_3292: Tensor[(1, 512), float32], %var_3293: Tensor[(100), uint16]) -> (Tensor[(16, 112), int8], Tensor[(16, 112), float32], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(195), int32], Tensor[(13, 3), float32], Tensor[(1, 512), float32], Tensor[(1, 39), float32], Tensor[(100), uint16], Tensor[(11, 15, 12), float64]) {
  %881 = fn (%var_3218: Tensor[(16, 112), float64], %var_3253: Tensor[(1, 512), float32], %var_3255: Tensor[(100), uint16]) -> (Tensor[(16, 112), int8], Tensor[(16, 112), float32], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(195), int32], Tensor[(13, 3), float32], Tensor[(1, 512), float32], Tensor[(1, 39), float32], Tensor[(100), uint16], Tensor[(11, 15, 12), float64]) {
    %858 = @func_3191() /* ty=Tensor[(16, 112), float64] */;
    %859 = cast(%var_3218, dtype="int8") /* ty=Tensor[(16, 112), int8] */;
    %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(2), int32] */;
    %861 = cast(%858, dtype="int8") /* ty=Tensor[(16, 112), int8] */;
    %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %863 = cast(%858, dtype="float32") /* ty=Tensor[(16, 112), float32] */;
    %864 = cast(meta[relay.Constant][48] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
    %865 = cast(meta[relay.Constant][49] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
    %866 = reshape(%864, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float64] */;
    %867 = reshape(%865, newshape=[195]) /* ty=Tensor[(195), int32] */;
    %868 = @func_2941(%866, %867) /* ty=(Tensor[(10, 16, 11), float64], Tensor[(390), uint8], Tensor[(195), int32]) */;
    %869 = cast(%var_3253, dtype="float32") /* ty=Tensor[(1, 512), float32] */;
    %870 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 39), float32] */, dtype="float32") /* ty=Tensor[(1, 39), float32] */;
    %871 = cast(%var_3255, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %872 = reshape(%869, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), float32] */;
    %873 = reshape(%870, newshape=[13, 3]) /* ty=Tensor[(13, 3), float32] */;
    %874 = reshape(%871, newshape=[25, 4]) /* ty=Tensor[(25, 4), uint16] */;
    %875 = @func_2162(%872, %873, %874) /* ty=(Tensor[(3, 16, 13), float32], Tensor[(13, 3), float32], Tensor[(624), float32], Tensor[(16, 4, 8), float64], Tensor[(10, 5, 2), uint16], Tensor[(25, 4), uint16], Tensor[(16, 4, 8), int64]) */;
    %876 = subtract(%861, %862) /* ty=Tensor[(16, 112), int8] */;
    %877 = cos(%863) /* ty=Tensor[(16, 112), float32] */;
    %878 = %868.0;
    %879 = %875.1;
    %880 = @func_1844() /* ty=Tensor[(11, 15, 12), float64] */;
    (%876, %877, %878, meta[relay.Constant][48] /* ty=Tensor[(1760), float64] */, meta[relay.Constant][49] /* ty=Tensor[(195), int32] */, %879, %var_3253, meta[relay.Constant][50] /* ty=Tensor[(1, 39), float32] */, %var_3255, %880)
  };
  %881(%var_3291, %var_3292, %var_3293) /* ty=(Tensor[(16, 112), int8], Tensor[(16, 112), float32], Tensor[(10, 16, 11), float64], Tensor[(1760), float64], Tensor[(195), int32], Tensor[(13, 3), float32], Tensor[(1, 512), float32], Tensor[(1, 39), float32], Tensor[(100), uint16], Tensor[(11, 15, 12), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen107/build/output.py:2239: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen107/build/output.py", line 2244, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(360) tvmgen_default_fused_power_kernel0(float* __restrict__ T_power, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_power[(((int)threadIdx.x))] = powf(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

