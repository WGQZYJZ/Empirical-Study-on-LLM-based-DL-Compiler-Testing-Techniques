==========mod==========
#[version = "0.0.5"]
def @func_5495(%var_5485: Tensor[(15, 15, 11), uint64]) -> (Tensor[(15, 15, 11), bool], Tensor[(7, 7, 5), uint32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 15, 11), uint64] */, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
  %1 = shape_of(%var_5485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_5485, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %5 = less_equal(%2, %3) /* ty=Tensor[(15, 15, 11), bool] */;
  %6 = %4.1;
  (%5, %6)
}

def @func_9254() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %7 = @func_8221() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %8 = @func_8419() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %9 = %7.0;
  %10 = %8.0;
  (%9, %10)
}

def @func_7899() -> (Tensor[(7, 7, 5), bool],) {
  %11 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %12 = %11.0;
  (%12,)
}

def @func_286(%var_271: Tensor[(7, 7, 5), uint32]) -> (Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) {
  %13 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %14 = %13.0;
  %15 = cast(%var_271, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %19 = cast(%var_271, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %20 = logical_and(%17, %18) /* ty=Tensor[(7, 7, 5), bool] */;
  %21 = atan(%19) /* ty=Tensor[(7, 7, 5), float64] */;
  (%20, %21)
}

def @func_2392() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %22 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %23 = %22.0;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %25 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %26 = @func_1836() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %27 = sqrt(%24) /* ty=Tensor[(7, 7, 5), float64] */;
  %28 = %25.0;
  %29 = %26.0;
  (%27, %28, %29)
}

def @func_6171(%var_6110: Tensor[(8, 11, 3), float64], %var_6165: Tensor[(132), int64]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(8, 11, 3), bool], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), bool], Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), float32], Tensor[(132), int64], Tensor[(7, 7, 5), bool], bool) {
  %30 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
  %31 = @func_4007() /* ty=(Tensor[(7, 7, 5), bool],) */;
  %32 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %33 = %32.0;
  %34 = cast(%var_6110, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %38 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %39 = cast(%33, dtype="float32") /* ty=Tensor[(8, 11, 3), float32] */;
  %40 = asin(%39) /* ty=Tensor[(8, 11, 3), float32] */;
  %41 = cast(%var_6110, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%33, dtype="float32") /* ty=Tensor[(8, 11, 3), float32] */;
  %46 = cast(%var_6165, dtype="int64") /* ty=Tensor[(132), int64] */;
  %47 = cast(%var_6165, dtype="int64") /* ty=Tensor[(132), int64] */;
  %48 = reshape(%46, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int64] */;
  %49 = reshape(%47, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int64] */;
  %50 = @func_4625(%48, %49) /* ty=(Tensor[(7, 7, 5), float32], Tensor[(11, 12, ?), float64], Tensor[(11, 12, ?), float32]) */;
  %51 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %52 = reshape(%51, newshape=[]) /* ty=bool */;
  %53 = @func_5114(%52) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
  %54 = %30.0;
  %55 = %31.0;
  %56 = logical_or(%36, %37) /* ty=Tensor[(8, 11, 3), bool] */;
  %57 = %38.1;
  %58 = less_equal(%43, %44) /* ty=Tensor[(8, 11, 3), bool] */;
  %59 = cosh(%45) /* ty=Tensor[(8, 11, 3), float32] */;
  %60 = %50.0;
  %61 = %53.2;
  (%54, %55, %56, %57, %58, %59, %60, %var_6165, %61, True /* ty=bool */)
}

def @func_5908() -> (Tensor[(7, 7, 5), float32],) {
  %62 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  (%62,)
}

def @func_5335() -> Tensor[(2, 4, 7), float64] {
  %63 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 7), float64] */;
  log2(%63) /* ty=Tensor[(2, 4, 7), float64] */
}

def @func_5019() -> (Tensor[(7, 7, 5), uint32],) {
  %64 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %65 = %64.1;
  (%65,)
}

def @func_6041() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) {
  %66 = @func_4733() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %67 = cast(-7.10545f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %68 = %66.0;
  %69 = cast(%68, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %70 = cast(meta[relay.Constant][2] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %71 = reshape(%67, newshape=[]) /* ty=float32 */;
  %72 = reshape(%69, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
  %73 = reshape(%70, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
  %74 = @func_1246(%71, %72, %73) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
  %75 = %74.7;
  (%68, %75, -7.10545f /* ty=float32 */, meta[relay.Constant][2] /* ty=Tensor[(200), float32] */)
}

def @func_8012() -> Tensor[(7, 7, 5), uint32] {
  @func_2198() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_2180() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %76 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %77 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  %78 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %79 = %76.1;
  (%77, %78, %79)
}

def @func_7631() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %80 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %81 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %82 = @func_5019() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %83 = @func_5069() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %84 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
  %85 = %80.0;
  %86 = %81.0;
  %87 = %82.0;
  %88 = %83.0;
  %89 = %84.0;
  (%85, %86, %87, %88, %89)
}

def @func_9585() -> (bool, Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float64]) {
  %90 = @func_4718() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
  %91 = @func_9314() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %92 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
  %93 = %91.0;
  %94 = cast(%93, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %95 = reshape(%94, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %96 = @func_286(%95) /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %97 = %90.2;
  %98 = %92.2;
  %99 = %96.1;
  (%97, %93, %98, %99)
}

def @func_3327() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
  %100 = @func_1983() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) */;
  %101 = %100.0;
  %102 = @func_2582() /* ty=Tensor[(7, 7, 5), bool] */;
  (%101, %102)
}

def @func_687() -> (Tensor[(7, 7, 5), uint32],) {
  %103 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%103,)
}

def @func_1279() -> (Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %104 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %105 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %106 = %104.0;
  %107 = %105.0;
  (%106, %107)
}

def @func_1581() -> Tensor[(7, 7, 5), uint32] {
  %108 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %108.1
}

def @func_5069() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %109 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %110 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %111 = %109.0;
  %112 = %110.0;
  (%111, %112)
}

def @func_6737() -> (Tensor[(7, 7, 5), uint32],) {
  %113 = @func_5758() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %114 = %113.0;
  (%114,)
}

def @func_5669() -> (Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) {
  %115 = @func_4111() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %116 = %115.0;
  %117 = @func_1983() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) */;
  %118 = %117.1;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %120 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%116, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %123 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %124 = reshape(%123, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %125 = @func_3618(%124) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
  %126 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %127 = @func_4007() /* ty=(Tensor[(7, 7, 5), bool],) */;
  %128 = multiply(%121, %122) /* ty=Tensor[(7, 7, 5), float64] */;
  %129 = %125.1;
  %130 = atanh(%126) /* ty=Tensor[(336), float64] */;
  %131 = %127.0;
  (%128, %129, %130, %131)
}

def @func_5814() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(56), float32], Tensor[(7, 7, 5), uint32]) {
  %132 = @func_3471() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) */;
  %133 = cast(meta[relay.Constant][4] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %134 = reshape(%133, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float32] */;
  %135 = @func_4681(%134) /* ty=(Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %136 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %137 = %132.1;
  %138 = %135.1;
  %139 = %136.0;
  (%137, %138, meta[relay.Constant][4] /* ty=Tensor[(56), float32] */, %139)
}

def @func_3655() -> Tensor[(7, 7, 5), uint64] {
  %140 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %140.1
}

def @func_1983() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) {
  %141 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %144 = reshape(%143, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %145 = @func_629(%144) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %146 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %147 = %146.0;
  %148 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %149 = %148.0;
  %150 = cast(%149, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %151 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%147, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = less(%152, %153) /* ty=Tensor[(8, 11, 3), bool] */;
  %155 = cast(%147, dtype="uint64") /* ty=Tensor[(8, 11, 3), uint64] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="uint64") /* ty=Tensor[(8, 11, 3), uint64] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %159 = %145.0;
  %160 = bitwise_or(%157, %158) /* ty=Tensor[(8, 11, 3), uint64] */;
  (%142, %159, %160)
}

def @func_3677() -> Tensor[(7, 7, 5), uint32] {
  %161 = @func_3471() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) */;
  %161.1
}

def @func_9026() -> (Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(168, 2), float64], Tensor[(7, 7, 5), uint32]) {
  %162 = @func_2705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) */;
  %163 = cast(meta[relay.Constant][5] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %164 = reshape(%163, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %165 = @func_3618(%164) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
  %166 = @func_6041() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) */;
  %167 = %162.2;
  %168 = %165.1;
  %169 = %166.1;
  (%167, %168, meta[relay.Constant][5] /* ty=Tensor[(168, 2), float64] */, %169)
}

def @func_3882() -> Tensor[(7, 7, 5), uint32] {
  %170 = @func_2813() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %170.0
}

def @func_6810() -> (Tensor[(7, 7, 5), uint32],) {
  %171 = @func_3783() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %172 = %171.1;
  (%172,)
}

def @func_3947() -> Tensor[(7, 7, 5), uint32] {
  %173 = @func_3327() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
  %173.0
}

def @func_7140(%var_7132: int32, %var_7133: Tensor[(11, 1, 5), int32]) -> Tensor[(11, 1, 5), int32] {
  %174 = cast(%var_7132, dtype="int32") /* ty=int32 */;
  %175 = cast(%var_7133, dtype="int32") /* ty=Tensor[(11, 1, 5), int32] */;
  right_shift(%174, %175) /* ty=Tensor[(11, 1, 5), int32] */
}

def @func_6495() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(18, 6), uint64], Tensor[(7, 7, 5), uint32]) {
  %176 = @func_2705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) */;
  %177 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %178 = @func_2432() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %179 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %180 = cast(meta[relay.Constant][6] /* ty=Tensor[(18, 6), uint64] */, dtype="uint64") /* ty=Tensor[(18, 6), uint64] */;
  %181 = cast(meta[relay.Constant][6] /* ty=Tensor[(18, 6), uint64] */, dtype="uint64") /* ty=Tensor[(18, 6), uint64] */;
  %182 = reshape(%180, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %183 = reshape(%181, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %184 = @func_4416(%182, %183) /* ty=(Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %185 = @func_4718() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
  %186 = %176.1;
  %187 = %177.1;
  %188 = %178.0;
  %189 = %179.2;
  %190 = %184.3;
  %191 = %185.0;
  (%186, %187, %188, %189, %190, meta[relay.Constant][6] /* ty=Tensor[(18, 6), uint64] */, %191)
}

def @func_1102() -> (Tensor[(7, 7, 5), uint32],) {
  %192 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %193 = %192.0;
  (%193,)
}

def @func_4186(%var_4183: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), bool], float32, Tensor[(14, 2, 12), uint8], Tensor[(336), float64]) {
  %194 = @func_4111() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %195 = cast(-5.2615f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %196 = reshape(%195, newshape=[]) /* ty=float32 */;
  %197 = @func_2553(%196) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
  %198 = cast(%var_4183, dtype="float64") /* ty=Tensor[(336), float64] */;
  %199 = reshape(%198, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %200 = @func_3618(%199) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
  %201 = %194.0;
  %202 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  %203 = %197.6;
  %204 = %200.0;
  (%201, %202, %203, -5.2615f /* ty=float32 */, %204, %var_4183)
}

def @func_8878() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %205 = @func_1836() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %206 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %207 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %208 = %205.0;
  %209 = %206.1;
  %210 = %207.0;
  (%208, %209, %210)
}

def @func_6598(%var_6583: Tensor[(1078), int64], %var_6584: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(16, 3, 13), bool], Tensor[(624), bool], Tensor[(168, 2), float32], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), uint32]) {
  %211 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %212 = cast(meta[relay.Constant][7] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
  %213 = reshape(%212, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), bool] */;
  %214 = @func_5551(%213) /* ty=(Tensor[(16, 3, 13), bool], Tensor[(16, 3, 13), int16], Tensor[(16, 3, 13), float64], Tensor[(7, 7, 5), uint32]) */;
  %215 = cast(%var_6583, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %216 = cast(%var_6583, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %217 = cast(%var_6584, dtype="float64") /* ty=Tensor[(336), float64] */;
  %218 = reshape(%215, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
  %219 = reshape(%216, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
  %220 = reshape(%217, newshape=[168, 2]) /* ty=Tensor[(168, 2), float64] */;
  %221 = @func_6371(%218, %219, %220) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) */;
  %222 = @func_6287() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) */;
  %223 = @func_4291() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %224 = %211.0;
  %225 = %214.0;
  %226 = %221.6;
  %227 = %222.1;
  %228 = %223.1;
  (%224, %225, meta[relay.Constant][7] /* ty=Tensor[(624), bool] */, %226, %var_6583, %var_6584, %227, %228)
}

def @func_8958() -> (Tensor[(12, 16, 13), float64],) {
  %229 = @func_5692() /* ty=(Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) */;
  %230 = %229.0;
  %231 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 13), float64] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="float64") /* ty=Tensor[(12, 16, 13), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %235 = floor_divide(%233, %234) /* ty=Tensor[(12, 16, 13), float64] */;
  (%235,)
}

def @func_8991() -> Tensor[(7, 7, 5), uint32] {
  @func_7228() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_201() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %236 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %238 = acosh(%237) /* ty=Tensor[(7, 7, 5), float64] */;
  %239 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%238, %239)
}

def @func_7840() -> (Tensor[(336), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(7, 7, 5), uint32]) {
  %240 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
  %241 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %242 = %240.2;
  %243 = cast(%242, dtype="float64") /* ty=Tensor[(336), float64] */;
  %244 = reshape(%243, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %245 = @func_4186(%244) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), bool], float32, Tensor[(14, 2, 12), uint8], Tensor[(336), float64]) */;
  %246 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %247 = %241.0;
  %248 = @func_7723() /* ty=Tensor[(7, 7, 5), uint32] */;
  %249 = %245.3;
  %250 = %246.2;
  (%242, %247, %248, %249, %250)
}

def @func_3394(%var_3361: bool) -> (Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) {
  %251 = cast(%var_3361, dtype="bool") /* ty=bool */;
  %252 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 2, 11), bool] */, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %253 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 2, 11), bool] */, dtype="uint32") /* ty=Tensor[(2, 2, 11), uint32] */;
  %254 = cast(%var_3361, dtype="uint32") /* ty=uint32 */;
  %255 = logical_or(%251, %252) /* ty=Tensor[(2, 2, 11), bool] */;
  %256 = left_shift(%253, %254) /* ty=Tensor[(2, 2, 11), uint32] */;
  %257 = @func_2582() /* ty=Tensor[(7, 7, 5), bool] */;
  (%255, %256, %257)
}

def @func_1756() -> Tensor[(7, 7, 5), float32] {
  %258 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %259 = %258.0;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  atanh(%260) /* ty=Tensor[(7, 7, 5), float32] */
}

def @main(%var_9933: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), bool],) {
  %261 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 14, 14), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 14), bool] */;
  %262 = shape_of(%var_9933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_9933, dtype="bool") /* ty=Tensor[(3, 14, 14), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = less(%263, %264) /* ty=Tensor[(3, 14, 14), bool] */;
  (%265,)
}

def @func_5777() -> (Tensor[(12, 16, 13), float64],) {
  %266 = @func_5692() /* ty=(Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) */;
  %267 = %266.0;
  (%267,)
}

def @func_4416(%var_4329: Tensor[(2, 6, 9), uint64], %var_4330: Tensor[(2, 6, 9), uint64]) -> (Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %268 = cast(%var_4330, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
  %269 = shape_of(%var_4329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_4329, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %272 = cast(%var_4329, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %273 = @func_2813() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %274 = @func_3837() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %275 = left_shift(%270, %271) /* ty=Tensor[(2, 6, 9), uint64] */;
  %276 = acos(%272) /* ty=Tensor[(2, 6, 9), float32] */;
  %277 = %273.0;
  %278 = %274.1;
  (%275, %276, %277, %278)
}

def @func_2943() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %279 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
  %280 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %281 = %279.0;
  %282 = %280.0;
  (%281, %282)
}

def @func_9144() -> Tensor[(7, 7, 5), uint32] {
  %283 = @func_2635() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %283.0
}

def @func_395() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) {
  %284 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %287 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %288 = %287.0;
  %289 = cast(%285, dtype="uint64") /* ty=Tensor[(7, 7, 5), uint64] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint64") /* ty=Tensor[(7, 7, 5), uint64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %293 = cos(%286) /* ty=Tensor[(7, 7, 5), float64] */;
  %294 = bitwise_and(%291, %292) /* ty=Tensor[(7, 7, 5), uint64] */;
  (%293, %294)
}

def @func_4437() -> (Tensor[(7, 7, 5), uint32],) {
  %295 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %296 = %295.2;
  (%296,)
}

def @func_4550() -> Tensor[(7, 7, 5), bool] {
  %297 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
  %297.1
}

def @func_1646() -> Tensor[(7, 7, 5), float32] {
  %298 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  %299 = cast(%298, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  log10(%299) /* ty=Tensor[(7, 7, 5), float32] */
}

def @func_3049() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %300 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %301 = @func_1742() /* ty=Tensor[(7, 7, 5), uint32] */;
  %302 = %300.0;
  %303 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%301, %302, %303)
}

def @func_7040() -> (Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(8, 11, 3), float64]) {
  %304 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  %305 = cast(%304, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %306 = reshape(%305, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %307 = @func_629(%306) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %308 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %309 = %307.4;
  %310 = %308.0;
  (%304, %309, %310)
}

def @func_2055() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) {
  %311 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %312 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %313 = %311.0;
  %314 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
  %315 = %312.0;
  (%313, %314, %315)
}

def @func_2450() -> Tensor[(7, 7, 5), uint32] {
  %316 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %316.0
}

def @func_3471() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) {
  %317 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %318 = cast(8.04858f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %319 = reshape(%318, newshape=[]) /* ty=float32 */;
  %320 = @func_2553(%319) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
  %321 = %317.0;
  %322 = %320.1;
  (%321, %322, 8.04858f /* ty=float32 */)
}

def @func_2635() -> (Tensor[(7, 7, 5), uint32],) {
  %323 = @func_2055() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */;
  %324 = %323.0;
  (%324,)
}

def @func_7564() -> (Tensor[(7, 7, 5), uint32],) {
  %325 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %326 = %325.0;
  (%326,)
}

def @func_244(%var_239: float32) -> (Tensor[(5, 10, 4), float32],) {
  %327 = cast(%var_239, dtype="float32") /* ty=float32 */;
  %328 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 4), float32] */;
  %329 = floor_mod(%327, %328) /* ty=Tensor[(5, 10, 4), float32] */;
  (%329,)
}

def @func_4733() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %330 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %331 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
  %332 = %330.0;
  (%331, %332)
}

def @func_750() -> (Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) {
  %333 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %334 = %333.0;
  %335 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %336 = %335.1;
  %337 = cast(%336, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %338 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%334, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %341 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %342 = logical_or(%339, %340) /* ty=Tensor[(7, 7, 5), bool] */;
  %343 = %341.0;
  (%342, %343)
}

def @func_6998() -> Tensor[(7, 7, 5), uint32] {
  @func_6798() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_1424() -> (Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %344 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %345 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %346 = %344.0;
  %347 = %345.0;
  (%346, %347)
}

def @func_6798() -> Tensor[(7, 7, 5), uint32] {
  %348 = @func_4201() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %348.0
}

def @func_629(%var_571: Tensor[(7, 7, 5), uint32]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %349 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %350 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %351 = cast(%var_571, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  %356 = cast(%350, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %360 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %361 = %360.0;
  %362 = cast(%355, dtype="uint16") /* ty=Tensor[(7, 7, 5), uint16] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="uint16") /* ty=Tensor[(7, 7, 5), uint16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %366 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %367 = %349.0;
  %368 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %369 = less_equal(%353, %354) /* ty=Tensor[(7, 7, 5), bool] */;
  %370 = divide(%358, %359) /* ty=Tensor[(7, 7, 5), float32] */;
  %371 = left_shift(%364, %365) /* ty=Tensor[(7, 7, 5), uint16] */;
  %372 = %366.0;
  %373 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%367, %368, %369, %370, %371, %372, %373)
}

def @func_9718(%var_9594: Tensor[(5, 7, 13), float64], %var_9674: Tensor[(1078), int64], %var_9675: Tensor[(336), float64], %var_9710: Tensor[(5, 7, 13), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(5, 7, 13), float64], Tensor[(8, 11, 3), bool], Tensor[(264), float64], Tensor[(132), int64], Tensor[(5, 7, 13), float64], Tensor[(5, 7, 13), uint64], Tensor[(7, 7, 5), uint32]) {
  %374 = @func_3252() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %375 = @func_8958() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %376 = @func_5992() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %377 = cast(%var_9674, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %378 = cast(%var_9675, dtype="float64") /* ty=Tensor[(336), float64] */;
  %379 = reshape(%377, newshape=[1078]) /* ty=Tensor[(1078), int64] */;
  %380 = reshape(%378, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %381 = @func_6598(%379, %380) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(16, 3, 13), bool], Tensor[(624), bool], Tensor[(168, 2), float32], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), uint32]) */;
  %382 = cast(%var_9594, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %383 = cos(%382) /* ty=Tensor[(5, 7, 13), float64] */;
  %384 = cast(%var_9594, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %388 = minimum(%386, %387) /* ty=Tensor[(5, 7, 13), float32] */;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %390 = atanh(%389) /* ty=Tensor[(5, 7, 13), float64] */;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %392 = cast(meta[relay.Constant][12] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %393 = cast(meta[relay.Constant][13] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
  %394 = reshape(%392, newshape=[8, 11, 3]) /* ty=Tensor[(8, 11, 3), float64] */;
  %395 = reshape(%393, newshape=[132]) /* ty=Tensor[(132), int64] */;
  %396 = @func_6171(%394, %395) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(8, 11, 3), bool], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), bool], Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), float32], Tensor[(132), int64], Tensor[(7, 7, 5), bool], bool) */;
  %397 = cast(%390, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %398 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%383, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %401 = cast(%390, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %402 = log(%401) /* ty=Tensor[(5, 7, 13), float64] */;
  %403 = cast(%var_9710, dtype="uint64") /* ty=Tensor[(5, 7, 13), uint64] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="uint64") /* ty=Tensor[(5, 7, 13), uint64] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %407 = @func_4291() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %408 = %374.1;
  %409 = %375.0;
  %410 = %376.1;
  %411 = %381.0;
  %412 = log2(%391) /* ty=Tensor[(5, 7, 13), float64] */;
  %413 = %396.2;
  %414 = divide(%399, %400) /* ty=Tensor[(5, 7, 13), float64] */;
  %415 = bitwise_xor(%405, %406) /* ty=Tensor[(5, 7, 13), uint64] */;
  %416 = %407.1;
  (%408, %409, %410, %411, %var_9674, %var_9675, %412, %413, meta[relay.Constant][12] /* ty=Tensor[(264), float64] */, meta[relay.Constant][13] /* ty=Tensor[(132), int64] */, %414, %415, %416)
}

def @func_6014(%var_6006: Tensor[(10, 10, 8), int16], %var_6007: Tensor[(10, 10, 8), int16], %var_6012: Tensor[(630), float64]) -> (Tensor[(10, 10, 8), int16], Tensor[(7, 7, 5), uint32], Tensor[(630), float64]) {
  %417 = cast(%var_6007, dtype="int16") /* ty=Tensor[(10, 10, 8), int16] */;
  %418 = shape_of(%var_6006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_6006, dtype="int16") /* ty=Tensor[(10, 10, 8), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %421 = cast(%var_6012, dtype="float64") /* ty=Tensor[(630), float64] */;
  %422 = reshape(%421, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), float64] */;
  %423 = @func_4776(%422) /* ty=(Tensor[(9, 7, 10), bool], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %424 = add(%419, %420) /* ty=Tensor[(10, 10, 8), int16] */;
  %425 = %423.1;
  (%424, %425, %var_6012)
}

def @func_7441() -> (Tensor[(7, 7, 5), uint32],) {
  %426 = @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%426,)
}

def @func_8330() -> Tensor[(7, 7, 5), uint32] {
  @func_3677() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9495() -> Tensor[(8, 11, 3), float64] {
  %427 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %427.0
}

def @func_8755() -> (Tensor[(7, 7, 5), uint32],) {
  %428 = @func_8551() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %429 = %428.0;
  (%429,)
}

def @func_9819(%var_9761: Tensor[(14, 10, 15), float32]) -> (Tensor[(4, 13, 2), float32], Tensor[(104), float64], Tensor[(14, 10, 15), uint8], Tensor[(14, 10, 15), float64]) {
  %430 = cast(meta[relay.Constant][14] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %431 = reshape(%430, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float64] */;
  %432 = @func_5275(%431) /* ty=(Tensor[(4, 13, 2), float32], Tensor[(4, 13, 2), float32]) */;
  %433 = cast(%var_9761, dtype="float32") /* ty=Tensor[(14, 10, 15), float32] */;
  %434 = rsqrt(%433) /* ty=Tensor[(14, 10, 15), float32] */;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(14, 10, 15), float32] */;
  %436 = cosh(%435) /* ty=Tensor[(14, 10, 15), float32] */;
  %437 = cast(%var_9761, dtype="uint8") /* ty=Tensor[(14, 10, 15), uint8] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="uint8") /* ty=Tensor[(14, 10, 15), uint8] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %441 = cast(%436, dtype="float64") /* ty=Tensor[(14, 10, 15), float64] */;
  %442 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%434, dtype="float64") /* ty=Tensor[(14, 10, 15), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %445 = %432.0;
  %446 = subtract(%439, %440) /* ty=Tensor[(14, 10, 15), uint8] */;
  %447 = mod(%443, %444) /* ty=Tensor[(14, 10, 15), float64] */;
  (%445, meta[relay.Constant][14] /* ty=Tensor[(104), float64] */, %446, %447)
}

def @func_870() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) {
  %448 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %449 = %448.0;
  %450 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %453 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%449, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %456 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %457 = %456.1;
  %458 = cast(%457, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %459 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%449, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = floor_mod(%454, %455) /* ty=Tensor[(7, 7, 5), float64] */;
  %463 = greater(%460, %461) /* ty=Tensor[(7, 7, 5), bool] */;
  (%462, %463)
}

def @func_6566(%var_6526: Tensor[(7, 14, 13), float32], %var_6549: Tensor[(245), bool]) -> (Tensor[(7, 14, 13), int64], Tensor[(7, 7, 5), uint32], float32, Tensor[(245), bool], Tensor[(200), float32], float32) {
  %464 = cast(%var_6526, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %465 = asinh(%464) /* ty=Tensor[(7, 14, 13), float32] */;
  %466 = cast(%var_6526, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %467 = sin(%466) /* ty=Tensor[(7, 14, 13), float32] */;
  %468 = cast(%467, dtype="int64") /* ty=Tensor[(7, 14, 13), int64] */;
  %469 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%465, dtype="int64") /* ty=Tensor[(7, 14, 13), int64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %472 = cast(-0.91519f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %473 = cast(%var_6549, dtype="bool") /* ty=Tensor[(245), bool] */;
  %474 = cast(meta[relay.Constant][15] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %475 = reshape(%472, newshape=[]) /* ty=float32 */;
  %476 = reshape(%473, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
  %477 = reshape(%474, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
  %478 = @func_1246(%475, %476, %477) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
  %479 = @func_6041() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) */;
  %480 = bitwise_xor(%470, %471) /* ty=Tensor[(7, 14, 13), int64] */;
  %481 = %478.5;
  %482 = %479.2;
  (%480, %481, -0.91519f /* ty=float32 */, %var_6549, meta[relay.Constant][15] /* ty=Tensor[(200), float32] */, %482)
}

def @func_7550() -> (Tensor[(12, 16, 13), bool], Tensor[(7, 7, 5), uint32]) {
  %483 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %484 = %483.0;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %486 = log2(%485) /* ty=Tensor[(12, 16, 13), float32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %492 = greater(%489, %490) /* ty=Tensor[(12, 16, 13), bool] */;
  %493 = %491.1;
  (%492, %493)
}

def @func_2432() -> (Tensor[(7, 7, 5), uint32],) {
  %494 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %495 = %494.1;
  (%495,)
}

def @func_3618(%var_3588: Tensor[(14, 2, 12), float64]) -> (Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) {
  %496 = cast(%var_3588, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  %497 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 2, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %500 = power(%498, %499) /* ty=Tensor[(14, 2, 12), float64] */;
  %501 = cast(%500, dtype="uint8") /* ty=Tensor[(14, 2, 12), uint8] */;
  %502 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 2, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 2, 12), float64] */, dtype="uint8") /* ty=Tensor[(14, 2, 12), uint8] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %505 = cast(%500, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  %506 = multiply(%503, %504) /* ty=Tensor[(14, 2, 12), uint8] */;
  %507 = sinh(%505) /* ty=Tensor[(14, 2, 12), float64] */;
  (%506, %507)
}

def @func_5692() -> (Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) {
  %508 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 13), float64] */;
  %509 = @func_2705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) */;
  %510 = exp(%508) /* ty=Tensor[(12, 16, 13), float64] */;
  %511 = %509.0;
  (%510, %511)
}

def @func_9211() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %512 = @func_8728() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %513 = %512.1;
  %514 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%513, %514)
}

def @func_5896(%var_5831: Tensor[(14, 13, 10), bool], %var_5832: Tensor[(14, 13, 10), bool]) -> (Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
  %515 = cast(%var_5832, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %516 = shape_of(%var_5831, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_5831, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %520 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %521 = cast(%var_5831, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %522 = log2(%521) /* ty=Tensor[(14, 13, 10), float64] */;
  %523 = cast(%var_5832, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %527 = cast(%522, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %528 = cast(meta[relay.Constant][18] /* ty=Tensor[(2475), uint64] */, dtype="uint64") /* ty=Tensor[(2475), uint64] */;
  %529 = reshape(%528, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), uint64] */;
  %530 = @func_5495(%529) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(7, 7, 5), uint32]) */;
  %531 = @func_5814() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(56), float32], Tensor[(7, 7, 5), uint32]) */;
  %532 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %533 = reshape(%532, newshape=[]) /* ty=bool */;
  %534 = @func_3394(%533) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
  %535 = logical_and(%517, %518) /* ty=Tensor[(14, 13, 10), bool] */;
  %536 = %519.0;
  %537 = %520.0;
  %538 = greater(%525, %526) /* ty=Tensor[(14, 13, 10), bool] */;
  %539 = atan(%527) /* ty=Tensor[(14, 13, 10), float64] */;
  %540 = %530.0;
  %541 = %531.0;
  %542 = %534.2;
  (%535, %536, %537, %538, %539, %540, meta[relay.Constant][18] /* ty=Tensor[(2475), uint64] */, %541, %542, False /* ty=bool */)
}

def @func_2813() -> (Tensor[(7, 7, 5), uint32],) {
  %543 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %544 = %543.0;
  (%544,)
}

def @func_2658() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %545 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %546 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %547 = %545.0;
  %548 = %546.0;
  %549 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%547, %548, %549)
}

def @func_2125() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %550 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %551 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %552 = %550.2;
  %553 = %551.0;
  (%552, %553)
}

def @func_2760() -> (Tensor[(7, 7, 5), uint32],) {
  %554 = @func_2432() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %555 = %554.0;
  (%555,)
}

def @func_6962() -> (Tensor[(7, 7, 5), uint32],) {
  %556 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %557 = %556.1;
  (%557,)
}

def @func_9314() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %558 = @func_8221() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %559 = @func_4201() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %560 = %558.6;
  %561 = %559.0;
  (%560, %561)
}

def @func_1246(%var_1118: float32, %var_1176: Tensor[(7, 7, 5), bool], %var_1209: Tensor[(5, 10, 4), float32]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) {
  %562 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %563 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %564 = %563.1;
  %565 = cast(%564, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %566 = reshape(%565, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %567 = @func_286(%566) /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %568 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
  %569 = %568.1;
  %570 = cast(%var_1176, dtype="int8") /* ty=Tensor[(7, 7, 5), int8] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="int8") /* ty=Tensor[(7, 7, 5), int8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %574 = cast(%var_1118, dtype="float32") /* ty=float32 */;
  %575 = reshape(%574, newshape=[]) /* ty=float32 */;
  %576 = @func_244(%575) /* ty=(Tensor[(5, 10, 4), float32],) */;
  %577 = %576.0;
  %578 = cast(%var_1209, dtype="int32") /* ty=Tensor[(5, 10, 4), int32] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="int32") /* ty=Tensor[(5, 10, 4), int32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %582 = cast(%577, dtype="uint8") /* ty=Tensor[(5, 10, 4), uint8] */;
  %583 = cast(%var_1118, dtype="uint8") /* ty=uint8 */;
  %584 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %585 = cast(%var_1118, dtype="float32") /* ty=float32 */;
  %586 = reshape(%585, newshape=[]) /* ty=float32 */;
  %587 = @func_244(%586) /* ty=(Tensor[(5, 10, 4), float32],) */;
  %588 = %562.0;
  %589 = %567.1;
  %590 = add(%572, %573) /* ty=Tensor[(7, 7, 5), int8] */;
  %591 = bitwise_or(%580, %581) /* ty=Tensor[(5, 10, 4), int32] */;
  %592 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  %593 = left_shift(%582, %583) /* ty=Tensor[(5, 10, 4), uint8] */;
  %594 = %584.0;
  %595 = %587.0;
  (%588, %564, %589, %590, %591, %592, %593, %594, %595)
}

def @func_4069() -> Tensor[(7, 7, 5), float64] {
  %596 = @func_3837() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %596.0
}

def @func_8255(%var_8246: Tensor[(16, 9, 10), float64]) -> Tensor[(16, 9, 10), float64] {
  %597 = cast(%var_8246, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  acos(%597) /* ty=Tensor[(16, 9, 10), float64] */
}

def @func_7453(%var_7450: float32) -> (Tensor[(7, 7, 5), float32], Tensor[(10, 20), float32], Tensor[(56), float32], float32) {
  %598 = cast(meta[relay.Constant][19] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %599 = cast(%var_7450, dtype="float32") /* ty=float32 */;
  %600 = reshape(%598, newshape=[28, 2]) /* ty=Tensor[(28, 2), float32] */;
  %601 = reshape(%599, newshape=[]) /* ty=float32 */;
  %602 = @func_4849(%600, %601) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(28, 2), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], float32, Tensor[(10, 20), float32]) */;
  %603 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  %604 = %602.6;
  (%603, %604, meta[relay.Constant][19] /* ty=Tensor[(56), float32] */, %var_7450)
}

def @func_6287() -> (Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) {
  %605 = @func_5424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %606 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %607 = %606.0;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %609 = %605.1;
  %610 = @func_5335() /* ty=Tensor[(2, 4, 7), float64] */;
  %611 = tan(%608) /* ty=Tensor[(12, 16, 13), float32] */;
  (%609, %610, %611)
}

def @func_7340() -> Tensor[(7, 7, 5), uint32] {
  @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9910() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(1820), float64]) {
  %612 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %613 = cast(meta[relay.Constant][20] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %614 = cast(meta[relay.Constant][20] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %615 = reshape(%613, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
  %616 = reshape(%614, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
  %617 = @func_5896(%615, %616) /* ty=(Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
  %618 = cast(meta[relay.Constant][20] /* ty=Tensor[(1820), bool] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %619 = %612.3;
  %620 = %617.8;
  %621 = atan(%618) /* ty=Tensor[(1820), float64] */;
  (%619, %620, %621)
}

def @func_1370() -> (Tensor[(7, 7, 5), uint32],) {
  %622 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_5992() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %624 = @func_3195() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %625 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %626 = @func_3020() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */;
  %627 = %624.0;
  %628 = %625.1;
  %629 = %626.0;
  (%627, %628, %629)
}

def @func_8163() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64]) {
  %630 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %631 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %632 = %630.1;
  %633 = @func_7340() /* ty=Tensor[(7, 7, 5), uint32] */;
  %634 = %631.0;
  (%632, %633, %634)
}

def @func_6901(%var_6895: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1078), int64], Tensor[(336), float64]) {
  %635 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %636 = cast(meta[relay.Constant][21] /* ty=Tensor[(1078), int64] */, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %637 = cast(meta[relay.Constant][21] /* ty=Tensor[(1078), int64] */, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %638 = cast(%var_6895, dtype="float64") /* ty=Tensor[(336), float64] */;
  %639 = reshape(%636, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
  %640 = reshape(%637, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
  %641 = reshape(%638, newshape=[168, 2]) /* ty=Tensor[(168, 2), float64] */;
  %642 = @func_6371(%639, %640, %641) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) */;
  %643 = %635.2;
  %644 = @func_3293() /* ty=Tensor[(7, 7, 5), uint32] */;
  %645 = %642.3;
  (%643, %644, %645, meta[relay.Constant][21] /* ty=Tensor[(1078), int64] */, %var_6895)
}

def @func_7998() -> Tensor[(7, 7, 5), uint32] {
  %646 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %646.0
}

def @func_9872() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float32]) {
  %647 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %648 = reshape(%647, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %649 = @func_9113(%648) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64]) */;
  %650 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %651 = %650.1;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  %653 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %654 = %649.0;
  %655 = exp(%652) /* ty=Tensor[(7, 7, 5), float32] */;
  (%653, %654, meta[relay.Constant][22] /* ty=Tensor[(336), float64] */, %655)
}

def @func_4625(%var_4601: Tensor[(11, 12, 1), int64], %var_4602: Tensor[(11, 12, 1), int64]) -> (Tensor[(7, 7, 5), float32], Tensor[(11, 12, ?), float64], Tensor[(11, 12, ?), float32]) {
  %656 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
  %657 = cast(%var_4602, dtype="int64") /* ty=Tensor[(11, 12, 1), int64] */;
  %658 = shape_of(%var_4601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_4601, dtype="int64") /* ty=Tensor[(11, 12, 1), int64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %661 = subtract(%659, %660) /* ty=Tensor[(11, 12, ?), int64] */;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(11, 12, ?), float64] */;
  %663 = cast(%var_4602, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  %664 = shape_of(%var_4601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%var_4601, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %667 = %656.2;
  %668 = asin(%662) /* ty=Tensor[(11, 12, ?), float64] */;
  %669 = mod(%665, %666) /* ty=Tensor[(11, 12, ?), float32] */;
  (%667, %668, %669)
}

def @func_5725(%var_5718: int8, %var_5719: Tensor[(9, 14, 15), int8]) -> (Tensor[(9, 14, 15), int8],) {
  %670 = cast(%var_5718, dtype="int8") /* ty=int8 */;
  %671 = cast(%var_5719, dtype="int8") /* ty=Tensor[(9, 14, 15), int8] */;
  %672 = right_shift(%670, %671) /* ty=Tensor[(9, 14, 15), int8] */;
  (%672,)
}

def @func_134() -> Tensor[(7, 7, 5), uint32] {
  %673 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %674 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(7, 7, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%675, %676) /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_4111() -> (Tensor[(7, 7, 5), uint32],) {
  %677 = @func_3783() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %678 = %677.0;
  (%678,)
}

def @func_3574() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %679 = @func_2813() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %680 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %681 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %682 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %683 = %679.0;
  %684 = %680.1;
  %685 = %681.0;
  (%682, %683, %684, %685)
}

def @func_7228() -> Tensor[(7, 7, 5), uint32] {
  %686 = @func_6059() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %686.0
}

def @func_5551(%var_5500: Tensor[(16, 3, 13), bool]) -> (Tensor[(16, 3, 13), bool], Tensor[(16, 3, 13), int16], Tensor[(16, 3, 13), float64], Tensor[(7, 7, 5), uint32]) {
  %687 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 3, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 3, 13), bool] */;
  %688 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%var_5500, dtype="bool") /* ty=Tensor[(16, 3, 13), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 3, 13), bool] */, dtype="int16") /* ty=Tensor[(16, 3, 13), int16] */;
  %692 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%var_5500, dtype="int16") /* ty=Tensor[(16, 3, 13), int16] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %695 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 3, 13), bool] */, dtype="float64") /* ty=Tensor[(16, 3, 13), float64] */;
  %696 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %697 = logical_and(%689, %690) /* ty=Tensor[(16, 3, 13), bool] */;
  %698 = left_shift(%693, %694) /* ty=Tensor[(16, 3, 13), int16] */;
  %699 = cos(%695) /* ty=Tensor[(16, 3, 13), float64] */;
  %700 = %696.1;
  (%697, %698, %699, %700)
}

def @func_8667() -> (Tensor[(7, 7, 5), bool], Tensor[(336), float64]) {
  %701 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %702 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
  %703 = %701.0;
  %704 = %702.2;
  (%703, %704)
}

def @func_1836() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %705 = @func_1424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %706 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %707 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %708 = %705.0;
  %709 = %706.0;
  (%707, %708, %709)
}

def @func_9385() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %710 = @func_7998() /* ty=Tensor[(7, 7, 5), uint32] */;
  %711 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%710, %711)
}

def @func_7309(%var_7273: float32, %var_7274: Tensor[(100, 2), float32]) -> (Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(100, 2), float32], Tensor[(7, 7, 5), uint64], Tensor[(2, 4, 7), float32]) {
  %712 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %713 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %714 = cast(%var_7273, dtype="float32") /* ty=float32 */;
  %715 = %713.0;
  %716 = cast(%715, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %717 = cast(%var_7274, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %718 = reshape(%714, newshape=[]) /* ty=float32 */;
  %719 = reshape(%716, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
  %720 = reshape(%717, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
  %721 = @func_1246(%718, %719, %720) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
  %722 = @func_5335() /* ty=Tensor[(2, 4, 7), float64] */;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(2, 4, 7), float32] */;
  %724 = %712.0;
  %725 = %721.8;
  %726 = @func_3655() /* ty=Tensor[(7, 7, 5), uint64] */;
  %727 = erf(%723) /* ty=Tensor[(2, 4, 7), float32] */;
  (%724, %715, %725, %var_7273, %var_7274, %726, %727)
}

def @func_3293() -> Tensor[(7, 7, 5), uint32] {
  %728 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %728.0
}

def @func_6371(%var_6306: Tensor[(7, 14, 11), int64], %var_6307: Tensor[(7, 14, 11), int64], %var_6314: Tensor[(168, 2), float64]) -> (Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) {
  %729 = cast(%var_6307, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
  %730 = shape_of(%var_6306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_6306, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %733 = cast(%var_6314, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %734 = reshape(%733, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %735 = @func_3618(%734) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
  %736 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %737 = cast(meta[relay.Constant][26] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %738 = cast(meta[relay.Constant][26] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %739 = reshape(%737, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
  %740 = reshape(%738, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
  %741 = @func_5896(%739, %740) /* ty=(Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
  %742 = cast(%var_6314, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %743 = atan(%742) /* ty=Tensor[(168, 2), float32] */;
  %744 = cast(%743, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %745 = greater(%731, %732) /* ty=Tensor[(7, 14, 11), bool] */;
  %746 = %735.1;
  %747 = %736.0;
  %748 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
  %749 = %741.7;
  %750 = sigmoid(%744) /* ty=Tensor[(168, 2), float32] */;
  (%745, %746, %747, %748, %749, meta[relay.Constant][26] /* ty=Tensor[(1820), bool] */, %750)
}

def @func_8090(%var_8033: Tensor[(12, 11, 16), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(12, 11, 16), bool]) {
  %751 = cast(%var_8033, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
  %752 = atanh(%751) /* ty=Tensor[(12, 11, 16), float64] */;
  %753 = cast(%752, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %754 = shape_of(%var_8033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_8033, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %757 = @func_4069() /* ty=Tensor[(7, 7, 5), float64] */;
  %758 = less(%755, %756) /* ty=Tensor[(12, 11, 16), bool] */;
  (%757, %758)
}

def @func_2843() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) {
  %759 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %760 = @func_2198() /* ty=Tensor[(7, 7, 5), uint32] */;
  %761 = %759.1;
  %762 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  (%760, %761, %762)
}

def @func_8221() -> (Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %763 = @func_3783() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %764 = cast(meta[relay.Constant][27] /* ty=Tensor[(108), uint64] */, dtype="uint64") /* ty=Tensor[(108), uint64] */;
  %765 = cast(meta[relay.Constant][27] /* ty=Tensor[(108), uint64] */, dtype="uint64") /* ty=Tensor[(108), uint64] */;
  %766 = reshape(%764, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %767 = reshape(%765, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %768 = @func_4416(%766, %767) /* ty=(Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %769 = @func_6287() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) */;
  %770 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %771 = %763.0;
  %772 = %768.0;
  %773 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
  %774 = %769.1;
  %775 = %770.0;
  %776 = @func_2198() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%771, %772, meta[relay.Constant][27] /* ty=Tensor[(108), uint64] */, %773, %774, %775, %776)
}

def @func_6059() -> (Tensor[(7, 7, 5), uint32],) {
  %777 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %778 = %777.0;
  (%778,)
}

def @func_3837() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %779 = @func_2877() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %780 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %781 = %779.0;
  %782 = %780.0;
  %783 = @func_3293() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%781, %782, %783)
}

def @func_305() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) {
  %784 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %785 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %786 = %784.0;
  %787 = %785.0;
  (%786, %787)
}

def @func_8923(%var_8914: Tensor[(12, 14), uint64], %var_8915: Tensor[(12, 14), uint64]) -> (Tensor[(12, 14), uint64],) {
  %788 = cast(%var_8915, dtype="uint64") /* ty=Tensor[(12, 14), uint64] */;
  %789 = shape_of(%var_8914, dtype="int32") /* ty=Tensor[(2), int32] */;
  %790 = cast(%var_8914, dtype="uint64") /* ty=Tensor[(12, 14), uint64] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %792 = add(%790, %791) /* ty=Tensor[(12, 14), uint64] */;
  (%792,)
}

def @func_4870() -> Tensor[(7, 7, 5), uint32] {
  @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9113(%var_9088: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64]) {
  %793 = @func_8586() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
  %794 = cast(%var_9088, dtype="float64") /* ty=Tensor[(336), float64] */;
  %795 = reshape(%794, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %796 = @func_6901(%795) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1078), int64], Tensor[(336), float64]) */;
  %797 = %793.0;
  %798 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
  %799 = %796.1;
  (%797, %798, %799, %var_9088)
}

def @func_463() -> Tensor[(7, 7, 5), uint32] {
  %800 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %800.0
}

def @func_3516() -> (Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) {
  %801 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %802 = %801.2;
  %803 = cast(%802, dtype="float32") /* ty=Tensor[(8, 11, 3), float32] */;
  %804 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 245), uint32] */, dtype="uint32") /* ty=Tensor[(1, 245), uint32] */;
  %805 = reshape(%804, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %806 = @func_286(%805) /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %807 = acos(%803) /* ty=Tensor[(8, 11, 3), float32] */;
  %808 = %806.0;
  (%807, %808, meta[relay.Constant][28] /* ty=Tensor[(1, 245), uint32] */)
}

def @func_2705() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) {
  %809 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %810 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %811 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %812 = %809.1;
  %813 = %810.0;
  %814 = %811.0;
  (%812, %813, %814)
}

def @func_2877() -> (Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) {
  %815 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %816 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %817 = @func_1424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %818 = %815.0;
  %819 = %816.1;
  %820 = %817.1;
  (%818, %819, %820)
}

def @func_4493(%var_4485: Tensor[(8, 11, 3), float32]) -> Tensor[(8, 11, 3), float64] {
  %821 = @func_3516() /* ty=(Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) */;
  %822 = %821.0;
  %823 = cast(%var_4485, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%825, %826) /* ty=Tensor[(8, 11, 3), float64] */
}

def @func_1726() -> (Tensor[(7, 7, 5), uint32],) {
  %827 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%827,)
}

def @func_7875() -> Tensor[(7, 7, 5), uint32] {
  %828 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %828.1
}

def @func_3153() -> Tensor[(7, 7, 5), uint32] {
  %829 = @func_2432() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %829.0
}

def @func_8932() -> Tensor[(8, 11, 3), float64] {
  %830 = @func_1279() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %830.1
}

def @func_8313() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %831 = @func_5424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %832 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %833 = @func_7631() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %834 = @func_7564() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %835 = %831.1;
  %836 = %832.1;
  %837 = %833.2;
  %838 = %834.0;
  (%835, %836, %837, %838)
}

def @func_8419() -> (Tensor[(7, 7, 5), uint32],) {
  %839 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %840 = %839.1;
  (%840,)
}

def @func_4007() -> (Tensor[(7, 7, 5), bool],) {
  %841 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %842 = %841.1;
  (%842,)
}

def @func_7118(%var_7058: Tensor[(12, 5, 16), float32], %var_7059: Tensor[(12, 5, 16), float32]) -> (Tensor[(7, 7, 5), float32], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float32], Tensor[(12, 5, 16), bool]) {
  %843 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %844 = @func_3516() /* ty=(Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) */;
  %845 = cast(%var_7059, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %846 = shape_of(%var_7058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%var_7058, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %849 = greater_equal(%847, %848) /* ty=Tensor[(12, 5, 16), bool] */;
  %850 = cast(%849, dtype="float64") /* ty=Tensor[(12, 5, 16), float64] */;
  %851 = sigmoid(%850) /* ty=Tensor[(12, 5, 16), float64] */;
  %852 = cast(%851, dtype="float64") /* ty=Tensor[(12, 5, 16), float64] */;
  %853 = acos(%852) /* ty=Tensor[(12, 5, 16), float64] */;
  %854 = cast(%849, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
  %859 = %843.2;
  %860 = %844.0;
  %861 = less(%856, %857) /* ty=Tensor[(12, 5, 16), bool] */;
  (%858, %859, %860, %861)
}

def @func_5424() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) {
  %862 = @func_1726() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %863 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %864 = %862.0;
  %865 = %863.1;
  (%864, %865)
}

def @func_2582() -> Tensor[(7, 7, 5), bool] {
  %866 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %866.1
}

def @func_2198() -> Tensor[(7, 7, 5), uint32] {
  %867 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %867.0
}

def @func_1704() -> (Tensor[(7, 7, 5), uint32],) {
  %868 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%868,)
}

def @func_4681(%var_4655: Tensor[(1, 4, 14), float32]) -> (Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %869 = cast(%var_4655, dtype="float32") /* ty=Tensor[(1, 4, 14), float32] */;
  %870 = asinh(%869) /* ty=Tensor[(1, 4, 14), float32] */;
  %871 = cast(%var_4655, dtype="int32") /* ty=Tensor[(1, 4, 14), int32] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="int32") /* ty=Tensor[(1, 4, 14), int32] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %875 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %876 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %877 = maximum(%873, %874) /* ty=Tensor[(?, 4, 14), int32] */;
  %878 = %875.0;
  %879 = %876.0;
  (%877, %878, %879)
}

def @func_9425(%var_9400: Tensor[(13, 10, 4), int8], %var_9401: Tensor[(13, 10, 4), int8]) -> (Tensor[(13, 10, 4), int8], Tensor[(14, 2, 12), float64]) {
  %880 = cast(%var_9401, dtype="int8") /* ty=Tensor[(13, 10, 4), int8] */;
  %881 = shape_of(%var_9400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%var_9400, dtype="int8") /* ty=Tensor[(13, 10, 4), int8] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %884 = @func_9026() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(168, 2), float64], Tensor[(7, 7, 5), uint32]) */;
  %885 = left_shift(%882, %883) /* ty=Tensor[(13, 10, 4), int8] */;
  %886 = %884.1;
  (%885, %886)
}

def @func_5275(%var_5265: Tensor[(4, 13, 2), float64]) -> (Tensor[(4, 13, 2), float32], Tensor[(4, 13, 2), float32]) {
  %887 = cast(%var_5265, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %888 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(4, 13, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 13, 2), float64] */, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = greater_equal(%889, %890) /* ty=Tensor[(4, 13, 2), bool] */;
  %892 = cast(%var_5265, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%891, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %896 = cast(%var_5265, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %897 = mod(%894, %895) /* ty=Tensor[(4, 13, 2), float32] */;
  %898 = acosh(%896) /* ty=Tensor[(4, 13, 2), float32] */;
  (%897, %898)
}

def @func_9519() -> (Tensor[(7, 7, 5), uint32],) {
  %899 = @func_6197() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %900 = %899.0;
  (%900,)
}

def @func_4201() -> (Tensor[(7, 7, 5), uint32],) {
  %901 = @func_3195() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %902 = %901.0;
  (%902,)
}

def @func_4849(%var_4834: Tensor[(28, 2), float32], %var_4844: float32) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(28, 2), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], float32, Tensor[(10, 20), float32]) {
  %903 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
  %904 = cast(%var_4834, dtype="float32") /* ty=Tensor[(28, 2), float32] */;
  %905 = reshape(%904, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float32] */;
  %906 = @func_4681(%905) /* ty=(Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %907 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %908 = cast(%var_4844, dtype="float32") /* ty=float32 */;
  %909 = %907.0;
  %910 = cast(%909, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %911 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 20), float32] */, dtype="float32") /* ty=Tensor[(10, 20), float32] */;
  %912 = reshape(%908, newshape=[]) /* ty=float32 */;
  %913 = reshape(%910, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
  %914 = reshape(%911, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
  %915 = @func_1246(%912, %913, %914) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
  %916 = %903.0;
  %917 = %906.1;
  %918 = %915.5;
  (%916, %917, %var_4834, %909, %918, %var_4844, meta[relay.Constant][30] /* ty=Tensor[(10, 20), float32] */)
}

def @func_1022() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) {
  %919 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %920 = %919.0;
  %921 = cast(%920, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %922 = reshape(%921, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %923 = @func_629(%922) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %924 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %925 = %924.1;
  %926 = cast(%925, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %927 = %923.2;
  %928 = sin(%926) /* ty=Tensor[(7, 7, 5), float64] */;
  (%920, %927, %928)
}

def @func_4145() -> Tensor[(7, 7, 5), uint32] {
  @func_3293() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_1360() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %929 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %930 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %931 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  %932 = %929.1;
  %933 = %930.0;
  (%931, %932, %933)
}

def @func_488() -> (Tensor[(7, 7, 5), uint32],) {
  %934 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %935 = %934.0;
  (%935,)
}

def @func_801() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %936 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %937 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %938 = %936.0;
  %939 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %940 = %937.0;
  (%938, %939, %940)
}

def @func_1558() -> (Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %941 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %942 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %943 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %944 = %941.0;
  %945 = %942.1;
  %946 = %943.1;
  (%944, %945, %946)
}

def @func_3252() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %947 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %948 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %949 = %947.0;
  %950 = %948.0;
  (%949, %950)
}

def @func_1742() -> Tensor[(7, 7, 5), uint32] {
  @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9507() -> Tensor[(7, 7, 5), uint32] {
  %951 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
  %951.1
}

def @func_8551() -> (Tensor[(7, 7, 5), uint32],) {
  %952 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %953 = %952.0;
  (%953,)
}

def @func_3195() -> (Tensor[(7, 7, 5), uint32],) {
  %954 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %955 = %954.0;
  (%955,)
}

def @func_255() -> (Tensor[(7, 7, 5), uint32],) {
  %956 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%956,)
}

def @func_3783() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %957 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %958 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %959 = %957.2;
  %960 = %958.2;
  (%959, %960)
}

def @func_2553(%var_2519: float32) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
  %961 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %962 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %963 = @func_1726() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %964 = cast(%var_2519, dtype="float32") /* ty=float32 */;
  %965 = reshape(%964, newshape=[]) /* ty=float32 */;
  %966 = @func_244(%965) /* ty=(Tensor[(5, 10, 4), float32],) */;
  %967 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %968 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
  %969 = %961.0;
  %970 = %962.0;
  %971 = %963.0;
  %972 = %966.0;
  %973 = %967.0;
  %974 = %968.1;
  (%969, %970, %971, %972, %var_2519, %973, %974)
}

def @func_5004(%var_4947: Tensor[(3, 1, 12), float32], %var_4961: bool) -> (Tensor[(3, 1, 12), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], Tensor[(2, 2, 11), uint32], bool, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) {
  %975 = cast(%var_4947, dtype="float32") /* ty=Tensor[(3, 1, 12), float32] */;
  %976 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
  %977 = cast(%var_4961, dtype="bool") /* ty=bool */;
  %978 = reshape(%977, newshape=[]) /* ty=bool */;
  %979 = @func_3394(%978) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
  %980 = @func_3020() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */;
  %981 = @func_4007() /* ty=(Tensor[(7, 7, 5), bool],) */;
  %982 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %983 = sinh(%975) /* ty=Tensor[(3, 1, 12), float32] */;
  %984 = %976.1;
  %985 = @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */;
  %986 = %979.1;
  %987 = %980.2;
  %988 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  %989 = %981.0;
  %990 = %982.2;
  (%983, %984, %985, %986, %var_4961, %987, %988, %989, %990)
}

def @func_5758() -> (Tensor[(7, 7, 5), uint32],) {
  %991 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%991,)
}

def @func_4776(%var_4747: Tensor[(9, 7, 10), float64]) -> (Tensor[(9, 7, 10), bool], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %992 = cast(%var_4747, dtype="float64") /* ty=Tensor[(9, 7, 10), float64] */;
  %993 = log2(%992) /* ty=Tensor[(9, 7, 10), float64] */;
  %994 = cast(%var_4747, dtype="bool") /* ty=Tensor[(9, 7, 10), bool] */;
  %995 = shape_of(%993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %996 = cast(%993, dtype="bool") /* ty=Tensor[(9, 7, 10), bool] */;
  %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %998 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %999 = @func_4291() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %1000 = logical_and(%996, %997) /* ty=Tensor[(9, 7, 10), bool] */;
  %1001 = %998.0;
  %1002 = %999.1;
  (%1000, %1001, %1002)
}

def @func_7376() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %1003 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
  %1004 = @func_4870() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%1003, %1004)
}

def @func_8586() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
  %1005 = @func_1726() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1006 = @func_7899() /* ty=(Tensor[(7, 7, 5), bool],) */;
  %1007 = %1005.0;
  %1008 = %1006.0;
  (%1007, %1008)
}

def @func_9175(%var_9168: Tensor[(1, 14), float64]) -> Tensor[(1, 14), float64] {
  %1009 = cast(%var_9168, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  rsqrt(%1009) /* ty=Tensor[(1, 14), float64] */
}

def @func_6197() -> (Tensor[(7, 7, 5), uint32],) {
  %1010 = @func_3252() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1011 = %1010.1;
  (%1011,)
}

def @func_8408() -> Tensor[(7, 7, 5), uint32] {
  %1012 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1012.2
}

def @func_5462(%var_5436: Tensor[(12, 5, 14), bool], %var_5437: Tensor[(12, 5, 14), bool]) -> (Tensor[(12, 5, 14), float32], Tensor[(12, 5, 14), uint32]) {
  %1013 = cast(%var_5437, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %1014 = shape_of(%var_5436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1015 = cast(%var_5436, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1017 = logical_or(%1015, %1016) /* ty=Tensor[(12, 5, 14), bool] */;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
  %1019 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 5, 14), bool] */, dtype="uint32") /* ty=Tensor[(12, 5, 14), uint32] */;
  %1020 = shape_of(%1017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1021 = cast(%1017, dtype="uint32") /* ty=Tensor[(12, 5, 14), uint32] */;
  %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1023 = cos(%1018) /* ty=Tensor[(12, 5, 14), float32] */;
  %1024 = add(%1021, %1022) /* ty=Tensor[(12, 5, 14), uint32] */;
  (%1023, %1024)
}

def @func_5114(%var_5112: bool) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
  %1025 = cast(%var_5112, dtype="bool") /* ty=bool */;
  %1026 = reshape(%1025, newshape=[]) /* ty=bool */;
  %1027 = @func_3394(%1026) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
  %1028 = @func_3153() /* ty=Tensor[(7, 7, 5), uint32] */;
  %1029 = @func_3947() /* ty=Tensor[(7, 7, 5), uint32] */;
  %1030 = %1027.2;
  (%1028, %1029, %1030, %var_5112)
}

def @func_4291() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %1031 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %1032 = @func_2943() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %1033 = %1031.0;
  %1034 = %1032.1;
  (%1033, %1034)
}

def @func_4718() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
  %1035 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1036 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1037 = reshape(%1036, newshape=[]) /* ty=bool */;
  %1038 = @func_3394(%1037) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
  %1039 = %1035.1;
  %1040 = %1038.2;
  (%1039, %1040, True /* ty=bool */)
}

def @func_3020() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) {
  %1041 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1042 = @func_1983() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) */;
  %1043 = %1041.0;
  %1044 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
  %1045 = %1042.0;
  (%1043, %1044, %1045)
}

def @func_935() -> (Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) {
  %1046 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %1047 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %1048 = %1046.0;
  %1049 = %1047.0;
  (%1048, %1049)
}

def @func_6833() -> (Tensor[(12, 16, 13), float64],) {
  %1050 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %1051 = %1050.0;
  (%1051,)
}

def @func_523() -> (Tensor[(8, 11, 3), float64],) {
  %1052 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 11, 3), float64] */, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
  %1053 = exp(%1052) /* ty=Tensor[(8, 11, 3), float64] */;
  (%1053,)
}

def @func_8728() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %1054 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
  %1055 = @func_7723() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%1054, %1055)
}

def @func_7723() -> Tensor[(7, 7, 5), uint32] {
  %1056 = @func_3252() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1056.0
}

def @func_9469(%var_9451: Tensor[(168), uint64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(12, 14), uint64], Tensor[(168), uint64], Tensor[(7, 7, 5), float64]) {
  %1057 = @func_6041() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) */;
  %1058 = @func_8586() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
  %1059 = cast(%var_9451, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %1060 = cast(%var_9451, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %1061 = reshape(%1059, newshape=[12, 14]) /* ty=Tensor[(12, 14), uint64] */;
  %1062 = reshape(%1060, newshape=[12, 14]) /* ty=Tensor[(12, 14), uint64] */;
  %1063 = @func_8923(%1061, %1062) /* ty=(Tensor[(12, 14), uint64],) */;
  %1064 = %1057.1;
  %1065 = cast(%1064, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %1066 = reshape(%1065, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %1067 = @func_629(%1066) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %1068 = %1058.1;
  %1069 = %1063.0;
  %1070 = %1067.0;
  (%1064, %1068, %1069, %var_9451, %1070)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3621(%var_3619: Tensor[(14, 2, 12), float64]) -> (Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) {
  @func_3618(%var_3619) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */
}

def @func_3948() -> Tensor[(7, 7, 5), uint32] {
  %1 = fn () -> Tensor[(7, 7, 5), uint32] {
    %0 = @func_3327() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
    %0.0
  };
  %1() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_2815() -> (Tensor[(7, 7, 5), uint32],) {
  @func_2813() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_7441() -> (Tensor[(7, 7, 5), uint32],) {
  %2 = @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%2,)
}

def @func_1425() -> (Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %7 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
    %3 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %4 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
    %5 = %3.0;
    %6 = %4.0;
    (%5, %6)
  };
  %7() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */
}

def @func_7633() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_7631() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_9213() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_9211() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_9910() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(1820), float64]) {
  %8 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %11 = reshape(%9, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
  %12 = reshape(%10, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
  %13 = @func_5896(%11, %12) /* ty=(Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1820), bool] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %15 = %8.3;
  %16 = %13.8;
  %17 = atan(%14) /* ty=Tensor[(1820), float64] */;
  (%15, %16, %17)
}

def @func_9178(%var_9176: Tensor[(1, 14), float64]) -> Tensor[(1, 14), float64] {
  @func_9175(%var_9176) /* ty=Tensor[(1, 14), float64] */
}

def @func_4853(%var_4851: Tensor[(28, 2), float32], %var_4852: float32) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(28, 2), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], float32, Tensor[(10, 20), float32]) {
  @func_4849(%var_4851, %var_4852) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(28, 2), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], float32, Tensor[(10, 20), float32]) */
}

def @func_3655() -> Tensor[(7, 7, 5), uint64] {
  %18 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %18.1
}

def @func_8959() -> (Tensor[(12, 16, 13), float64],) {
  %26 = fn () -> (Tensor[(12, 16, 13), float64],) {
    %19 = @func_5692() /* ty=(Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) */;
    %20 = %19.0;
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 13), float64] */;
    %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%20, dtype="float64") /* ty=Tensor[(12, 16, 13), float64] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %25 = floor_divide(%23, %24) /* ty=Tensor[(12, 16, 13), float64] */;
    (%25,)
  };
  %26() /* ty=(Tensor[(12, 16, 13), float64],) */
}

def @func_5004(%var_4947: Tensor[(3, 1, 12), float32], %var_4961: bool) -> (Tensor[(3, 1, 12), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], Tensor[(2, 2, 11), uint32], bool, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) {
  %27 = cast(%var_4947, dtype="float32") /* ty=Tensor[(3, 1, 12), float32] */;
  %28 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
  %29 = cast(%var_4961, dtype="bool") /* ty=bool */;
  %30 = reshape(%29, newshape=[]) /* ty=bool */;
  %31 = @func_3394(%30) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
  %32 = @func_3020() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */;
  %33 = @func_4007() /* ty=(Tensor[(7, 7, 5), bool],) */;
  %34 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %35 = sinh(%27) /* ty=Tensor[(3, 1, 12), float32] */;
  %36 = %28.1;
  %37 = @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */;
  %38 = %31.1;
  %39 = %32.2;
  %40 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  %41 = %33.0;
  %42 = %34.2;
  (%35, %36, %37, %38, %var_4961, %39, %40, %41, %42)
}

def @func_5498(%var_5496: Tensor[(15, 15, 11), uint64]) -> (Tensor[(15, 15, 11), bool], Tensor[(7, 7, 5), uint32]) {
  @func_5495(%var_5496) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(7, 7, 5), uint32]) */
}

def @func_9028() -> (Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(168, 2), float64], Tensor[(7, 7, 5), uint32]) {
  @func_9026() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(168, 2), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_4438() -> (Tensor[(7, 7, 5), uint32],) {
  %45 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %43 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %44 = %43.2;
    (%44,)
  };
  %45() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_9822(%var_9820: Tensor[(14, 10, 15), float32]) -> (Tensor[(4, 13, 2), float32], Tensor[(104), float64], Tensor[(14, 10, 15), uint8], Tensor[(14, 10, 15), float64]) {
  @func_9819(%var_9820) /* ty=(Tensor[(4, 13, 2), float32], Tensor[(104), float64], Tensor[(14, 10, 15), uint8], Tensor[(14, 10, 15), float64]) */
}

def @func_2705() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) {
  %46 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %47 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %48 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %49 = %46.1;
  %50 = %47.0;
  %51 = %48.0;
  (%49, %50, %51)
}

def @func_1758() -> Tensor[(7, 7, 5), float32] {
  @func_1756() /* ty=Tensor[(7, 7, 5), float32] */
}

def @func_1837() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %57 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %52 = @func_1424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
    %53 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
    %54 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
    %55 = %52.0;
    %56 = %53.0;
    (%54, %55, %56)
  };
  %57() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_8756() -> (Tensor[(7, 7, 5), uint32],) {
  %60 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %58 = @func_8551() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %59 = %58.0;
    (%59,)
  };
  %60() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_2845() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) {
  @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */
}

def @func_7550() -> (Tensor[(12, 16, 13), bool], Tensor[(7, 7, 5), uint32]) {
  %61 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %62 = %61.0;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
  %64 = log2(%63) /* ty=Tensor[(12, 16, 13), float32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(12, 16, 13), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %70 = greater(%67, %68) /* ty=Tensor[(12, 16, 13), bool] */;
  %71 = %69.1;
  (%70, %71)
}

def @func_7841() -> (Tensor[(336), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(7, 7, 5), uint32]) {
  %83 = fn () -> (Tensor[(336), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(7, 7, 5), uint32]) {
    %72 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
    %73 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %74 = %72.2;
    %75 = cast(%74, dtype="float64") /* ty=Tensor[(336), float64] */;
    %76 = reshape(%75, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %77 = @func_4186(%76) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), bool], float32, Tensor[(14, 2, 12), uint8], Tensor[(336), float64]) */;
    %78 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %79 = %73.0;
    %80 = @func_7723() /* ty=Tensor[(7, 7, 5), uint32] */;
    %81 = %77.3;
    %82 = %78.2;
    (%74, %79, %80, %81, %82)
  };
  %83() /* ty=(Tensor[(336), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(7, 7, 5), uint32]) */
}

def @main(%var_9933: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), bool],) {
  %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 14, 14), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 14), bool] */;
  %85 = shape_of(%var_9933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_9933, dtype="bool") /* ty=Tensor[(3, 14, 14), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %88 = less(%86, %87) /* ty=Tensor[(3, 14, 14), bool] */;
  (%88,)
}

def @func_4496(%var_4494: Tensor[(8, 11, 3), float32]) -> Tensor[(8, 11, 3), float64] {
  @func_4493(%var_4494) /* ty=Tensor[(8, 11, 3), float64] */
}

def @func_489() -> (Tensor[(7, 7, 5), uint32],) {
  %91 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %89 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %90 = %89.0;
    (%90,)
  };
  %91() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_6811() -> (Tensor[(7, 7, 5), uint32],) {
  %94 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %92 = @func_3783() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %93 = %92.1;
    (%93,)
  };
  %94() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_8012() -> Tensor[(7, 7, 5), uint32] {
  @func_2198() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9819(%var_9761: Tensor[(14, 10, 15), float32]) -> (Tensor[(4, 13, 2), float32], Tensor[(104), float64], Tensor[(14, 10, 15), uint8], Tensor[(14, 10, 15), float64]) {
  %95 = cast(meta[relay.Constant][3] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %96 = reshape(%95, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float64] */;
  %97 = @func_5275(%96) /* ty=(Tensor[(4, 13, 2), float32], Tensor[(4, 13, 2), float32]) */;
  %98 = cast(%var_9761, dtype="float32") /* ty=Tensor[(14, 10, 15), float32] */;
  %99 = rsqrt(%98) /* ty=Tensor[(14, 10, 15), float32] */;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(14, 10, 15), float32] */;
  %101 = cosh(%100) /* ty=Tensor[(14, 10, 15), float32] */;
  %102 = cast(%var_9761, dtype="uint8") /* ty=Tensor[(14, 10, 15), uint8] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="uint8") /* ty=Tensor[(14, 10, 15), uint8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %106 = cast(%101, dtype="float64") /* ty=Tensor[(14, 10, 15), float64] */;
  %107 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%99, dtype="float64") /* ty=Tensor[(14, 10, 15), float64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %110 = %97.0;
  %111 = subtract(%104, %105) /* ty=Tensor[(14, 10, 15), uint8] */;
  %112 = mod(%108, %109) /* ty=Tensor[(14, 10, 15), float64] */;
  (%110, meta[relay.Constant][3] /* ty=Tensor[(104), float64] */, %111, %112)
}

def @func_5424() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) {
  %113 = @func_1726() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %114 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %115 = %113.0;
  %116 = %114.1;
  (%115, %116)
}

def @func_4112() -> (Tensor[(7, 7, 5), uint32],) {
  %119 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %117 = @func_3783() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %118 = %117.0;
    (%118,)
  };
  %119() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_7230() -> Tensor[(7, 7, 5), uint32] {
  @func_7228() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9254() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %120 = @func_8221() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %121 = @func_8419() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %122 = %120.0;
  %123 = %121.0;
  (%122, %123)
}

def @func_1742() -> Tensor[(7, 7, 5), uint32] {
  @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_7998() -> Tensor[(7, 7, 5), uint32] {
  %124 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %124.0
}

def @func_5019() -> (Tensor[(7, 7, 5), uint32],) {
  %125 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %126 = %125.1;
  (%126,)
}

def @func_9175(%var_9168: Tensor[(1, 14), float64]) -> Tensor[(1, 14), float64] {
  %127 = cast(%var_9168, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  rsqrt(%127) /* ty=Tensor[(1, 14), float64] */
}

def @func_6198() -> (Tensor[(7, 7, 5), uint32],) {
  %130 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %128 = @func_3252() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %129 = %128.1;
    (%129,)
  };
  %130() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_8588() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
  @func_8586() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */
}

def @func_5554(%var_5552: Tensor[(16, 3, 13), bool]) -> (Tensor[(16, 3, 13), bool], Tensor[(16, 3, 13), int16], Tensor[(16, 3, 13), float64], Tensor[(7, 7, 5), uint32]) {
  @func_5551(%var_5552) /* ty=(Tensor[(16, 3, 13), bool], Tensor[(16, 3, 13), int16], Tensor[(16, 3, 13), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_1024() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) {
  @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */
}

def @func_463() -> Tensor[(7, 7, 5), uint32] {
  %131 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %131.0
}

def @func_246(%var_245: float32) -> (Tensor[(5, 10, 4), float32],) {
  %135 = fn (%var_239: float32) -> (Tensor[(5, 10, 4), float32],) {
    %132 = cast(%var_239, dtype="float32") /* ty=float32 */;
    %133 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 4), float32] */;
    %134 = floor_mod(%132, %133) /* ty=Tensor[(5, 10, 4), float32] */;
    (%134,)
  };
  %135(%var_245) /* ty=(Tensor[(5, 10, 4), float32],) */
}

def @func_4070() -> Tensor[(7, 7, 5), float64] {
  %137 = fn () -> Tensor[(7, 7, 5), float64] {
    %136 = @func_3837() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %136.0
  };
  %137() /* ty=Tensor[(7, 7, 5), float64] */
}

def @func_8315() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_8313() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_8878() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %138 = @func_1836() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %139 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %140 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %141 = %138.0;
  %142 = %139.1;
  %143 = %140.0;
  (%141, %142, %143)
}

def @func_4145() -> Tensor[(7, 7, 5), uint32] {
  @func_3293() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_3154() -> Tensor[(7, 7, 5), uint32] {
  %145 = fn () -> Tensor[(7, 7, 5), uint32] {
    %144 = @func_2432() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %144.0
  };
  %145() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_4629(%var_4627: Tensor[(11, 12, 1), int64], %var_4628: Tensor[(11, 12, 1), int64]) -> (Tensor[(7, 7, 5), float32], Tensor[(11, 12, ?), float64], Tensor[(11, 12, ?), float32]) {
  @func_4625(%var_4627, %var_4628) /* ty=(Tensor[(7, 7, 5), float32], Tensor[(11, 12, ?), float64], Tensor[(11, 12, ?), float32]) */
}

def @func_6963() -> (Tensor[(7, 7, 5), uint32],) {
  %148 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %146 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %147 = %146.1;
    (%147,)
  };
  %148() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_6798() -> Tensor[(7, 7, 5), uint32] {
  %149 = @func_4201() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %149.0
}

def @func_8165() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64]) {
  @func_8163() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64]) */
}

def @func_9428(%var_9426: Tensor[(13, 10, 4), int8], %var_9427: Tensor[(13, 10, 4), int8]) -> (Tensor[(13, 10, 4), int8], Tensor[(14, 2, 12), float64]) {
  %157 = fn (%var_9400: Tensor[(13, 10, 4), int8], %var_9401: Tensor[(13, 10, 4), int8]) -> (Tensor[(13, 10, 4), int8], Tensor[(14, 2, 12), float64]) {
    %150 = cast(%var_9401, dtype="int8") /* ty=Tensor[(13, 10, 4), int8] */;
    %151 = shape_of(%var_9400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%var_9400, dtype="int8") /* ty=Tensor[(13, 10, 4), int8] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %154 = @func_9026() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(168, 2), float64], Tensor[(7, 7, 5), uint32]) */;
    %155 = left_shift(%152, %153) /* ty=Tensor[(13, 10, 4), int8] */;
    %156 = %154.1;
    (%155, %156)
  };
  %157(%var_9426, %var_9427) /* ty=(Tensor[(13, 10, 4), int8], Tensor[(14, 2, 12), float64]) */
}

def @func_5275(%var_5265: Tensor[(4, 13, 2), float64]) -> (Tensor[(4, 13, 2), float32], Tensor[(4, 13, 2), float32]) {
  %158 = cast(%var_5265, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %159 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(4, 13, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 13, 2), float64] */, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %162 = greater_equal(%160, %161) /* ty=Tensor[(4, 13, 2), bool] */;
  %163 = cast(%var_5265, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %167 = cast(%var_5265, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %168 = mod(%165, %166) /* ty=Tensor[(4, 13, 2), float32] */;
  %169 = acosh(%167) /* ty=Tensor[(4, 13, 2), float32] */;
  (%168, %169)
}

def @func_8933() -> Tensor[(8, 11, 3), float64] {
  %171 = fn () -> Tensor[(8, 11, 3), float64] {
    %170 = @func_1279() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
    %170.1
  };
  %171() /* ty=Tensor[(8, 11, 3), float64] */
}

def @func_6598(%var_6583: Tensor[(1078), int64], %var_6584: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(16, 3, 13), bool], Tensor[(624), bool], Tensor[(168, 2), float32], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), uint32]) {
  %172 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %173 = cast(meta[relay.Constant][6] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
  %174 = reshape(%173, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), bool] */;
  %175 = @func_5551(%174) /* ty=(Tensor[(16, 3, 13), bool], Tensor[(16, 3, 13), int16], Tensor[(16, 3, 13), float64], Tensor[(7, 7, 5), uint32]) */;
  %176 = cast(%var_6583, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %177 = cast(%var_6583, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %178 = cast(%var_6584, dtype="float64") /* ty=Tensor[(336), float64] */;
  %179 = reshape(%176, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
  %180 = reshape(%177, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
  %181 = reshape(%178, newshape=[168, 2]) /* ty=Tensor[(168, 2), float64] */;
  %182 = @func_6371(%179, %180, %181) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) */;
  %183 = @func_6287() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) */;
  %184 = @func_4291() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %185 = %172.0;
  %186 = %175.0;
  %187 = %182.6;
  %188 = %183.1;
  %189 = %184.1;
  (%185, %186, meta[relay.Constant][6] /* ty=Tensor[(624), bool] */, %187, %var_6583, %var_6584, %188, %189)
}

def @func_257() -> (Tensor[(7, 7, 5), uint32],) {
  @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_7900() -> (Tensor[(7, 7, 5), bool],) {
  %192 = fn () -> (Tensor[(7, 7, 5), bool],) {
    %190 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
    %191 = %190.0;
    (%191,)
  };
  %192() /* ty=(Tensor[(7, 7, 5), bool],) */
}

def @func_3576() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_6060() -> (Tensor[(7, 7, 5), uint32],) {
  %195 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %193 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %194 = %193.0;
    (%194,)
  };
  %195() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_2813() -> (Tensor[(7, 7, 5), uint32],) {
  %196 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %197 = %196.0;
  (%197,)
}

def @func_7875() -> Tensor[(7, 7, 5), uint32] {
  %198 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %198.1
}

def @func_4292() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %203 = fn () -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
    %199 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
    %200 = @func_2943() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %201 = %199.0;
    %202 = %200.1;
    (%201, %202)
  };
  %203() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_4186(%var_4183: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), bool], float32, Tensor[(14, 2, 12), uint8], Tensor[(336), float64]) {
  %204 = @func_4111() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %205 = cast(-5.2615f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %206 = reshape(%205, newshape=[]) /* ty=float32 */;
  %207 = @func_2553(%206) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
  %208 = cast(%var_4183, dtype="float64") /* ty=Tensor[(336), float64] */;
  %209 = reshape(%208, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %210 = @func_3618(%209) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
  %211 = %204.0;
  %212 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  %213 = %207.6;
  %214 = %210.0;
  (%211, %212, %213, -5.2615f /* ty=float32 */, %214, %var_4183)
}

def @func_687() -> (Tensor[(7, 7, 5), uint32],) {
  %215 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%215,)
}

def @func_7041() -> (Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(8, 11, 3), float64]) {
  %223 = fn () -> (Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(8, 11, 3), float64]) {
    %216 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
    %217 = cast(%216, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
    %218 = reshape(%217, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
    %219 = @func_629(%218) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %220 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
    %221 = %219.4;
    %222 = %220.0;
    (%216, %221, %222)
  };
  %223() /* ty=(Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(8, 11, 3), float64]) */
}

def @func_7552() -> (Tensor[(12, 16, 13), bool], Tensor[(7, 7, 5), uint32]) {
  @func_7550() /* ty=(Tensor[(12, 16, 13), bool], Tensor[(7, 7, 5), uint32]) */
}

def @func_1250(%var_1247: float32, %var_1248: Tensor[(7, 7, 5), bool], %var_1249: Tensor[(5, 10, 4), float32]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) {
  %258 = fn (%var_1118: float32, %var_1176: Tensor[(7, 7, 5), bool], %var_1209: Tensor[(5, 10, 4), float32]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) {
    %224 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %225 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
    %226 = %225.1;
    %227 = cast(%226, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
    %228 = reshape(%227, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
    %229 = @func_286(%228) /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
    %230 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
    %231 = %230.1;
    %232 = cast(%var_1176, dtype="int8") /* ty=Tensor[(7, 7, 5), int8] */;
    %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(%231, dtype="int8") /* ty=Tensor[(7, 7, 5), int8] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %236 = cast(%var_1118, dtype="float32") /* ty=float32 */;
    %237 = reshape(%236, newshape=[]) /* ty=float32 */;
    %238 = @func_244(%237) /* ty=(Tensor[(5, 10, 4), float32],) */;
    %239 = %238.0;
    %240 = cast(%var_1209, dtype="int32") /* ty=Tensor[(5, 10, 4), int32] */;
    %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%239, dtype="int32") /* ty=Tensor[(5, 10, 4), int32] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %244 = cast(%239, dtype="uint8") /* ty=Tensor[(5, 10, 4), uint8] */;
    %245 = cast(%var_1118, dtype="uint8") /* ty=uint8 */;
    %246 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %247 = cast(%var_1118, dtype="float32") /* ty=float32 */;
    %248 = reshape(%247, newshape=[]) /* ty=float32 */;
    %249 = @func_244(%248) /* ty=(Tensor[(5, 10, 4), float32],) */;
    %250 = %224.0;
    %251 = %229.1;
    %252 = add(%234, %235) /* ty=Tensor[(7, 7, 5), int8] */;
    %253 = bitwise_or(%242, %243) /* ty=Tensor[(5, 10, 4), int32] */;
    %254 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
    %255 = left_shift(%244, %245) /* ty=Tensor[(5, 10, 4), uint8] */;
    %256 = %246.0;
    %257 = %249.0;
    (%250, %226, %251, %252, %253, %254, %255, %256, %257)
  };
  %258(%var_1247, %var_1248, %var_1249) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */
}

def @func_5725(%var_5718: int8, %var_5719: Tensor[(9, 14, 15), int8]) -> (Tensor[(9, 14, 15), int8],) {
  %259 = cast(%var_5718, dtype="int8") /* ty=int8 */;
  %260 = cast(%var_5719, dtype="int8") /* ty=Tensor[(9, 14, 15), int8] */;
  %261 = right_shift(%259, %260) /* ty=Tensor[(9, 14, 15), int8] */;
  (%261,)
}

def @func_7725() -> Tensor[(7, 7, 5), uint32] {
  @func_7723() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_8258(%var_8256: Tensor[(16, 9, 10), float64]) -> Tensor[(16, 9, 10), float64] {
  @func_8255(%var_8256) /* ty=Tensor[(16, 9, 10), float64] */
}

def @func_1726() -> (Tensor[(7, 7, 5), uint32],) {
  %262 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%262,)
}

def @func_8223() -> (Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  @func_8221() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_3328() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
  %266 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
    %263 = @func_1983() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) */;
    %264 = %263.0;
    %265 = @func_2582() /* ty=Tensor[(7, 7, 5), bool] */;
    (%264, %265)
  };
  %266() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */
}

def @func_5021() -> (Tensor[(7, 7, 5), uint32],) {
  @func_5019() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_5670() -> (Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) {
  %284 = fn () -> (Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) {
    %267 = @func_4111() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %268 = %267.0;
    %269 = @func_1983() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) */;
    %270 = %269.1;
    %271 = cast(%270, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
    %272 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%268, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %275 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %276 = reshape(%275, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
    %277 = @func_3618(%276) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
    %278 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %279 = @func_4007() /* ty=(Tensor[(7, 7, 5), bool],) */;
    %280 = multiply(%273, %274) /* ty=Tensor[(7, 7, 5), float64] */;
    %281 = %277.1;
    %282 = atanh(%278) /* ty=Tensor[(336), float64] */;
    %283 = %279.0;
    (%280, %281, %282, %283)
  };
  %284() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */
}

def @func_5336() -> Tensor[(2, 4, 7), float64] {
  %286 = fn () -> Tensor[(2, 4, 7), float64] {
    %285 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 7), float64] */;
    log2(%285) /* ty=Tensor[(2, 4, 7), float64] */
  };
  %286() /* ty=Tensor[(2, 4, 7), float64] */
}

def @func_307() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) {
  @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */
}

def @func_7341() -> Tensor[(7, 7, 5), uint32] {
  %287 = fn () -> Tensor[(7, 7, 5), uint32] {
    @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */
  };
  %287() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_8420() -> (Tensor[(7, 7, 5), uint32],) {
  %290 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %288 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %289 = %288.1;
    (%289,)
  };
  %290() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_6800() -> Tensor[(7, 7, 5), uint32] {
  @func_6798() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_1985() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) {
  @func_1983() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) */
}

def @func_3252() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %291 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %292 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %293 = %291.0;
  %294 = %292.0;
  (%293, %294)
}

def @func_9912() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(1820), float64]) {
  @func_9910() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(1820), float64]) */
}

def @func_9495() -> Tensor[(8, 11, 3), float64] {
  %295 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %295.0
}

def @func_3837() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %296 = @func_2877() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %297 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %298 = %296.0;
  %299 = %297.0;
  %300 = @func_3293() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%298, %299, %300)
}

def @func_8163() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64]) {
  %301 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %302 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %303 = %301.1;
  %304 = @func_7340() /* ty=Tensor[(7, 7, 5), uint32] */;
  %305 = %302.0;
  (%303, %304, %305)
}

def @func_4872() -> Tensor[(7, 7, 5), uint32] {
  @func_4870() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_7723() -> Tensor[(7, 7, 5), uint32] {
  %306 = @func_3252() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %306.0
}

def @func_2943() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %307 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
  %308 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %309 = %307.0;
  %310 = %308.0;
  (%309, %310)
}

def @func_2878() -> (Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) {
  %317 = fn () -> (Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) {
    %311 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
    %312 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
    %313 = @func_1424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
    %314 = %311.0;
    %315 = %312.1;
    %316 = %313.1;
    (%314, %315, %316)
  };
  %317() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */
}

def @func_1728() -> (Tensor[(7, 7, 5), uint32],) {
  @func_1726() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_4551() -> Tensor[(7, 7, 5), bool] {
  %319 = fn () -> Tensor[(7, 7, 5), bool] {
    %318 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
    %318.1
  };
  %319() /* ty=Tensor[(7, 7, 5), bool] */
}

def @func_5910() -> (Tensor[(7, 7, 5), float32],) {
  @func_5908() /* ty=(Tensor[(7, 7, 5), float32],) */
}

def @func_6903(%var_6902: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1078), int64], Tensor[(336), float64]) {
  %331 = fn (%var_6895: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1078), int64], Tensor[(336), float64]) {
    %320 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
    %321 = cast(meta[relay.Constant][9] /* ty=Tensor[(1078), int64] */, dtype="int64") /* ty=Tensor[(1078), int64] */;
    %322 = cast(meta[relay.Constant][9] /* ty=Tensor[(1078), int64] */, dtype="int64") /* ty=Tensor[(1078), int64] */;
    %323 = cast(%var_6895, dtype="float64") /* ty=Tensor[(336), float64] */;
    %324 = reshape(%321, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
    %325 = reshape(%322, newshape=[7, 14, 11]) /* ty=Tensor[(7, 14, 11), int64] */;
    %326 = reshape(%323, newshape=[168, 2]) /* ty=Tensor[(168, 2), float64] */;
    %327 = @func_6371(%324, %325, %326) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) */;
    %328 = %320.2;
    %329 = @func_3293() /* ty=Tensor[(7, 7, 5), uint32] */;
    %330 = %327.3;
    (%328, %329, %330, meta[relay.Constant][9] /* ty=Tensor[(1078), int64] */, %var_6895)
  };
  %331(%var_6902) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1078), int64], Tensor[(336), float64]) */
}

def @func_5908() -> (Tensor[(7, 7, 5), float32],) {
  %332 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  (%332,)
}

def @func_8553() -> (Tensor[(7, 7, 5), uint32],) {
  @func_8551() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_4719() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
  %339 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
    %333 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %334 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %335 = reshape(%334, newshape=[]) /* ty=bool */;
    %336 = @func_3394(%335) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
    %337 = %333.1;
    %338 = %336.2;
    (%337, %338, True /* ty=bool */)
  };
  %339() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */
}

def @func_3657() -> Tensor[(7, 7, 5), uint64] {
  @func_3655() /* ty=Tensor[(7, 7, 5), uint64] */
}

def @func_871() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) {
  %356 = fn () -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) {
    %340 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
    %341 = %340.0;
    %342 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
    %343 = %342.0;
    %344 = cast(%343, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
    %345 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%341, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %348 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %349 = %348.1;
    %350 = cast(%349, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
    %351 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%341, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %354 = floor_mod(%346, %347) /* ty=Tensor[(7, 7, 5), float64] */;
    %355 = greater(%352, %353) /* ty=Tensor[(7, 7, 5), bool] */;
    (%354, %355)
  };
  %356() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */
}

def @func_9314() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %357 = @func_8221() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %358 = @func_4201() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %359 = %357.6;
  %360 = %358.0;
  (%359, %360)
}

def @func_2432() -> (Tensor[(7, 7, 5), uint32],) {
  %361 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %362 = %361.1;
  (%362,)
}

def @func_2451() -> Tensor[(7, 7, 5), uint32] {
  %364 = fn () -> Tensor[(7, 7, 5), uint32] {
    %363 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %363.0
  };
  %364() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_8313() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %365 = @func_5424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %366 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %367 = @func_7631() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %368 = @func_7564() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %369 = %365.1;
  %370 = %366.1;
  %371 = %367.2;
  %372 = %368.0;
  (%369, %370, %371, %372)
}

def @func_465() -> Tensor[(7, 7, 5), uint32] {
  @func_463() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_6375(%var_6372: Tensor[(7, 14, 11), int64], %var_6373: Tensor[(7, 14, 11), int64], %var_6374: Tensor[(168, 2), float64]) -> (Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) {
  %395 = fn (%var_6306: Tensor[(7, 14, 11), int64], %var_6307: Tensor[(7, 14, 11), int64], %var_6314: Tensor[(168, 2), float64]) -> (Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) {
    %373 = cast(%var_6307, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
    %374 = shape_of(%var_6306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%var_6306, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %377 = cast(%var_6314, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
    %378 = reshape(%377, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
    %379 = @func_3618(%378) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
    %380 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %381 = cast(meta[relay.Constant][10] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
    %382 = cast(meta[relay.Constant][10] /* ty=Tensor[(1820), bool] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
    %383 = reshape(%381, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
    %384 = reshape(%382, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), bool] */;
    %385 = @func_5896(%383, %384) /* ty=(Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
    %386 = cast(%var_6314, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
    %387 = atan(%386) /* ty=Tensor[(168, 2), float32] */;
    %388 = cast(%387, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
    %389 = greater(%375, %376) /* ty=Tensor[(7, 14, 11), bool] */;
    %390 = %379.1;
    %391 = %380.0;
    %392 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
    %393 = %385.7;
    %394 = sigmoid(%388) /* ty=Tensor[(168, 2), float32] */;
    (%389, %390, %391, %392, %393, meta[relay.Constant][10] /* ty=Tensor[(1820), bool] */, %394)
  };
  %395(%var_6372, %var_6373, %var_6374) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(14, 2, 12), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1820), bool], Tensor[(168, 2), float32]) */
}

def @func_8669() -> (Tensor[(7, 7, 5), bool], Tensor[(336), float64]) {
  @func_8667() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(336), float64]) */
}

def @func_6566(%var_6526: Tensor[(7, 14, 13), float32], %var_6549: Tensor[(245), bool]) -> (Tensor[(7, 14, 13), int64], Tensor[(7, 7, 5), uint32], float32, Tensor[(245), bool], Tensor[(200), float32], float32) {
  %396 = cast(%var_6526, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %397 = asinh(%396) /* ty=Tensor[(7, 14, 13), float32] */;
  %398 = cast(%var_6526, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %399 = sin(%398) /* ty=Tensor[(7, 14, 13), float32] */;
  %400 = cast(%399, dtype="int64") /* ty=Tensor[(7, 14, 13), int64] */;
  %401 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%397, dtype="int64") /* ty=Tensor[(7, 14, 13), int64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %404 = cast(-0.91519f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %405 = cast(%var_6549, dtype="bool") /* ty=Tensor[(245), bool] */;
  %406 = cast(meta[relay.Constant][11] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %407 = reshape(%404, newshape=[]) /* ty=float32 */;
  %408 = reshape(%405, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
  %409 = reshape(%406, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
  %410 = @func_1246(%407, %408, %409) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
  %411 = @func_6041() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) */;
  %412 = bitwise_xor(%402, %403) /* ty=Tensor[(7, 14, 13), int64] */;
  %413 = %410.5;
  %414 = %411.2;
  (%412, %413, -0.91519f /* ty=float32 */, %var_6549, meta[relay.Constant][11] /* ty=Tensor[(200), float32] */, %414)
}

def @func_9387() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_9385() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_1280() -> (Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %419 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
    %415 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
    %416 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
    %417 = %415.0;
    %418 = %416.0;
    (%417, %418)
  };
  %419() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */
}

def @func_5008(%var_5006: Tensor[(3, 1, 12), float32], %var_5007: bool) -> (Tensor[(3, 1, 12), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], Tensor[(2, 2, 11), uint32], bool, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) {
  @func_5004(%var_5006, %var_5007) /* ty=(Tensor[(3, 1, 12), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], Tensor[(2, 2, 11), uint32], bool, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */
}

def @func_4202() -> (Tensor[(7, 7, 5), uint32],) {
  %422 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %420 = @func_3195() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %421 = %420.0;
    (%421,)
  };
  %422() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_6043() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) {
  @func_6041() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) */
}

def @func_3517() -> (Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) {
  %431 = fn () -> (Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) {
    %423 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
    %424 = %423.2;
    %425 = cast(%424, dtype="float32") /* ty=Tensor[(8, 11, 3), float32] */;
    %426 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 245), uint32] */, dtype="uint32") /* ty=Tensor[(1, 245), uint32] */;
    %427 = reshape(%426, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
    %428 = @func_286(%427) /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
    %429 = acos(%425) /* ty=Tensor[(8, 11, 3), float32] */;
    %430 = %428.0;
    (%429, %430, meta[relay.Constant][12] /* ty=Tensor[(1, 245), uint32] */)
  };
  %431() /* ty=(Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) */
}

def @func_1744() -> Tensor[(7, 7, 5), uint32] {
  @func_1742() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_201() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %432 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %434 = acosh(%433) /* ty=Tensor[(7, 7, 5), float64] */;
  %435 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%434, %435)
}

def @func_2180() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %436 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %437 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  %438 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %439 = %436.1;
  (%437, %438, %439)
}

def @func_3839() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_3837() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_2199() -> Tensor[(7, 7, 5), uint32] {
  %441 = fn () -> Tensor[(7, 7, 5), uint32] {
    %440 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %440.0
  };
  %441() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9586() -> (bool, Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float64]) {
  %452 = fn () -> (bool, Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float64]) {
    %442 = @func_4718() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
    %443 = @func_9314() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %444 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
    %445 = %443.0;
    %446 = cast(%445, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
    %447 = reshape(%446, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
    %448 = @func_286(%447) /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
    %449 = %442.2;
    %450 = %444.2;
    %451 = %448.1;
    (%449, %445, %450, %451)
  };
  %452() /* ty=(bool, Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float64]) */
}

def @func_9385() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %453 = @func_7998() /* ty=Tensor[(7, 7, 5), uint32] */;
  %454 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%453, %454)
}

def @func_5778() -> (Tensor[(12, 16, 13), float64],) {
  %457 = fn () -> (Tensor[(12, 16, 13), float64],) {
    %455 = @func_5692() /* ty=(Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) */;
    %456 = %455.0;
    (%456,)
  };
  %457() /* ty=(Tensor[(12, 16, 13), float64],) */
}

def @func_5116(%var_5115: bool) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
  %464 = fn (%var_5112: bool) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
    %458 = cast(%var_5112, dtype="bool") /* ty=bool */;
    %459 = reshape(%458, newshape=[]) /* ty=bool */;
    %460 = @func_3394(%459) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
    %461 = @func_3153() /* ty=Tensor[(7, 7, 5), uint32] */;
    %462 = @func_3947() /* ty=Tensor[(7, 7, 5), uint32] */;
    %463 = %460.2;
    (%461, %462, %463, %var_5112)
  };
  %464(%var_5115) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */
}

def @func_7443() -> (Tensor[(7, 7, 5), uint32],) {
  @func_7441() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_3677() -> Tensor[(7, 7, 5), uint32] {
  %465 = @func_3471() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) */;
  %465.1
}

def @func_8332() -> Tensor[(7, 7, 5), uint32] {
  @func_8330() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9316() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_9314() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_3195() -> (Tensor[(7, 7, 5), uint32],) {
  %466 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %467 = %466.0;
  (%467,)
}

def @func_3396(%var_3395: bool) -> (Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) {
  %475 = fn (%var_3361: bool) -> (Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) {
    %468 = cast(%var_3361, dtype="bool") /* ty=bool */;
    %469 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 2, 11), bool] */, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
    %470 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 2, 11), bool] */, dtype="uint32") /* ty=Tensor[(2, 2, 11), uint32] */;
    %471 = cast(%var_3361, dtype="uint32") /* ty=uint32 */;
    %472 = logical_or(%468, %469) /* ty=Tensor[(2, 2, 11), bool] */;
    %473 = left_shift(%470, %471) /* ty=Tensor[(2, 2, 11), uint32] */;
    %474 = @func_2582() /* ty=Tensor[(7, 7, 5), bool] */;
    (%472, %473, %474)
  };
  %475(%var_3395) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */
}

def @func_7312(%var_7310: float32, %var_7311: Tensor[(100, 2), float32]) -> (Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(100, 2), float32], Tensor[(7, 7, 5), uint64], Tensor[(2, 4, 7), float32]) {
  %492 = fn (%var_7273: float32, %var_7274: Tensor[(100, 2), float32]) -> (Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(100, 2), float32], Tensor[(7, 7, 5), uint64], Tensor[(2, 4, 7), float32]) {
    %476 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
    %477 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %478 = cast(%var_7273, dtype="float32") /* ty=float32 */;
    %479 = %477.0;
    %480 = cast(%479, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
    %481 = cast(%var_7274, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %482 = reshape(%478, newshape=[]) /* ty=float32 */;
    %483 = reshape(%480, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
    %484 = reshape(%481, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
    %485 = @func_1246(%482, %483, %484) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
    %486 = @func_5335() /* ty=Tensor[(2, 4, 7), float64] */;
    %487 = cast(%486, dtype="float32") /* ty=Tensor[(2, 4, 7), float32] */;
    %488 = %476.0;
    %489 = %485.8;
    %490 = @func_3655() /* ty=Tensor[(7, 7, 5), uint64] */;
    %491 = erf(%487) /* ty=Tensor[(2, 4, 7), float32] */;
    (%488, %479, %489, %var_7273, %var_7274, %490, %491)
  };
  %492(%var_7310, %var_7311) /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(100, 2), float32], Tensor[(7, 7, 5), uint64], Tensor[(2, 4, 7), float32]) */
}

def @func_9874() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float32]) {
  @func_9872() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float32]) */
}

def @func_936() -> (Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) {
  %497 = fn () -> (Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) {
    %493 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
    %494 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
    %495 = %493.0;
    %496 = %494.0;
    (%495, %496)
  };
  %497() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */
}

def @func_8221() -> (Tensor[(7, 7, 5), uint32], Tensor[(2, 6, 9), uint64], Tensor[(108), uint64], Tensor[(7, 7, 5), float32], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %498 = @func_3783() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %499 = cast(meta[relay.Constant][14] /* ty=Tensor[(108), uint64] */, dtype="uint64") /* ty=Tensor[(108), uint64] */;
  %500 = cast(meta[relay.Constant][14] /* ty=Tensor[(108), uint64] */, dtype="uint64") /* ty=Tensor[(108), uint64] */;
  %501 = reshape(%499, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %502 = reshape(%500, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %503 = @func_4416(%501, %502) /* ty=(Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %504 = @func_6287() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) */;
  %505 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %506 = %498.0;
  %507 = %503.0;
  %508 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
  %509 = %504.1;
  %510 = %505.0;
  %511 = @func_2198() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%506, %507, meta[relay.Constant][14] /* ty=Tensor[(108), uint64] */, %508, %509, %510, %511)
}

def @func_3472() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) {
  %518 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) {
    %512 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %513 = cast(8.04858f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %514 = reshape(%513, newshape=[]) /* ty=float32 */;
    %515 = @func_2553(%514) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
    %516 = %512.0;
    %517 = %515.1;
    (%516, %517, 8.04858f /* ty=float32 */)
  };
  %518() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) */
}

def @func_801() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %519 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
  %520 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %521 = %519.0;
  %522 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %523 = %520.0;
  (%521, %522, %523)
}

def @func_1706() -> (Tensor[(7, 7, 5), uint32],) {
  @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_9211() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %524 = @func_8728() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %525 = %524.1;
  %526 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%525, %526)
}

def @func_9113(%var_9088: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64]) {
  %527 = @func_8586() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
  %528 = cast(%var_9088, dtype="float64") /* ty=Tensor[(336), float64] */;
  %529 = reshape(%528, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %530 = @func_6901(%529) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(1078), int64], Tensor[(336), float64]) */;
  %531 = %527.0;
  %532 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
  %533 = %530.1;
  (%531, %532, %533, %var_9088)
}

def @func_9508() -> Tensor[(7, 7, 5), uint32] {
  %535 = fn () -> Tensor[(7, 7, 5), uint32] {
    %534 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
    %534.1
  };
  %535() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_203() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_9872() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64], Tensor[(7, 7, 5), float32]) {
  %536 = cast(meta[relay.Constant][15] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %537 = reshape(%536, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %538 = @func_9113(%537) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64]) */;
  %539 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %540 = %539.1;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  %542 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %543 = %538.0;
  %544 = exp(%541) /* ty=Tensor[(7, 7, 5), float32] */;
  (%542, %543, meta[relay.Constant][15] /* ty=Tensor[(336), float64] */, %544)
}

def @func_6014(%var_6006: Tensor[(10, 10, 8), int16], %var_6007: Tensor[(10, 10, 8), int16], %var_6012: Tensor[(630), float64]) -> (Tensor[(10, 10, 8), int16], Tensor[(7, 7, 5), uint32], Tensor[(630), float64]) {
  %545 = cast(%var_6007, dtype="int16") /* ty=Tensor[(10, 10, 8), int16] */;
  %546 = shape_of(%var_6006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_6006, dtype="int16") /* ty=Tensor[(10, 10, 8), int16] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %549 = cast(%var_6012, dtype="float64") /* ty=Tensor[(630), float64] */;
  %550 = reshape(%549, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), float64] */;
  %551 = @func_4776(%550) /* ty=(Tensor[(9, 7, 10), bool], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %552 = add(%547, %548) /* ty=Tensor[(10, 10, 8), int16] */;
  %553 = %551.1;
  (%552, %553, %var_6012)
}

def @func_7228() -> Tensor[(7, 7, 5), uint32] {
  %554 = @func_6059() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %554.0
}

def @func_8551() -> (Tensor[(7, 7, 5), uint32],) {
  %555 = @func_1360() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %556 = %555.0;
  (%556,)
}

def @func_751() -> (Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) {
  %568 = fn () -> (Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) {
    %557 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %558 = %557.0;
    %559 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %560 = %559.1;
    %561 = cast(%560, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
    %562 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%558, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %565 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %566 = logical_or(%563, %564) /* ty=Tensor[(7, 7, 5), bool] */;
    %567 = %565.0;
    (%566, %567)
  };
  %568() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */
}

def @func_9145() -> Tensor[(7, 7, 5), uint32] {
  %570 = fn () -> Tensor[(7, 7, 5), uint32] {
    %569 = @func_2635() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %569.0
  };
  %570() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_4625(%var_4601: Tensor[(11, 12, 1), int64], %var_4602: Tensor[(11, 12, 1), int64]) -> (Tensor[(7, 7, 5), float32], Tensor[(11, 12, ?), float64], Tensor[(11, 12, ?), float32]) {
  %571 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
  %572 = cast(%var_4602, dtype="int64") /* ty=Tensor[(11, 12, 1), int64] */;
  %573 = shape_of(%var_4601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_4601, dtype="int64") /* ty=Tensor[(11, 12, 1), int64] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %576 = subtract(%574, %575) /* ty=Tensor[(11, 12, ?), int64] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(11, 12, ?), float64] */;
  %578 = cast(%var_4602, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  %579 = shape_of(%var_4601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_4601, dtype="float32") /* ty=Tensor[(11, 12, 1), float32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %582 = %571.2;
  %583 = asin(%577) /* ty=Tensor[(11, 12, ?), float64] */;
  %584 = mod(%580, %581) /* ty=Tensor[(11, 12, ?), float32] */;
  (%582, %583, %584)
}

def @func_3574() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %585 = @func_2813() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %586 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %587 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %588 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
  %589 = %585.0;
  %590 = %586.1;
  %591 = %587.0;
  (%588, %589, %590, %591)
}

def @func_8992() -> Tensor[(7, 7, 5), uint32] {
  %592 = fn () -> Tensor[(7, 7, 5), uint32] {
    @func_7228() /* ty=Tensor[(7, 7, 5), uint32] */
  };
  %592() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_6288() -> (Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) {
  %600 = fn () -> (Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) {
    %593 = @func_5424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
    %594 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
    %595 = %594.0;
    %596 = cast(%595, dtype="float32") /* ty=Tensor[(12, 16, 13), float32] */;
    %597 = %593.1;
    %598 = @func_5335() /* ty=Tensor[(2, 4, 7), float64] */;
    %599 = tan(%596) /* ty=Tensor[(12, 16, 13), float32] */;
    (%597, %598, %599)
  };
  %600() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(2, 4, 7), float64], Tensor[(12, 16, 13), float32]) */
}

def @func_2434() -> (Tensor[(7, 7, 5), uint32],) {
  @func_2432() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_8729() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %603 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %601 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
    %602 = @func_7723() /* ty=Tensor[(7, 7, 5), uint32] */;
    (%601, %602)
  };
  %603() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_6174(%var_6172: Tensor[(8, 11, 3), float64], %var_6173: Tensor[(132), int64]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(8, 11, 3), bool], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), bool], Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), float32], Tensor[(132), int64], Tensor[(7, 7, 5), bool], bool) {
  %636 = fn (%var_6110: Tensor[(8, 11, 3), float64], %var_6165: Tensor[(132), int64]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(8, 11, 3), bool], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), bool], Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), float32], Tensor[(132), int64], Tensor[(7, 7, 5), bool], bool) {
    %604 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
    %605 = @func_4007() /* ty=(Tensor[(7, 7, 5), bool],) */;
    %606 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
    %607 = %606.0;
    %608 = cast(%var_6110, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%607, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %612 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %613 = cast(%607, dtype="float32") /* ty=Tensor[(8, 11, 3), float32] */;
    %614 = asin(%613) /* ty=Tensor[(8, 11, 3), float32] */;
    %615 = cast(%var_6110, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
    %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(%614, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %619 = cast(%607, dtype="float32") /* ty=Tensor[(8, 11, 3), float32] */;
    %620 = cast(%var_6165, dtype="int64") /* ty=Tensor[(132), int64] */;
    %621 = cast(%var_6165, dtype="int64") /* ty=Tensor[(132), int64] */;
    %622 = reshape(%620, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int64] */;
    %623 = reshape(%621, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), int64] */;
    %624 = @func_4625(%622, %623) /* ty=(Tensor[(7, 7, 5), float32], Tensor[(11, 12, ?), float64], Tensor[(11, 12, ?), float32]) */;
    %625 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %626 = reshape(%625, newshape=[]) /* ty=bool */;
    %627 = @func_5114(%626) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
    %628 = %604.0;
    %629 = %605.0;
    %630 = logical_or(%610, %611) /* ty=Tensor[(8, 11, 3), bool] */;
    %631 = %612.1;
    %632 = less_equal(%617, %618) /* ty=Tensor[(8, 11, 3), bool] */;
    %633 = cosh(%619) /* ty=Tensor[(8, 11, 3), float32] */;
    %634 = %624.0;
    %635 = %627.2;
    (%628, %629, %630, %631, %632, %633, %634, %var_6165, %635, True /* ty=bool */)
  };
  %636(%var_6172, %var_6173) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(8, 11, 3), bool], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), bool], Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), float32], Tensor[(132), int64], Tensor[(7, 7, 5), bool], bool) */
}

def @func_1756() -> Tensor[(7, 7, 5), float32] {
  %637 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %638 = %637.0;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  atanh(%639) /* ty=Tensor[(7, 7, 5), float32] */
}

def @func_5426() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) {
  @func_5424() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */
}

def @func_3883() -> Tensor[(7, 7, 5), uint32] {
  %641 = fn () -> Tensor[(7, 7, 5), uint32] {
    %640 = @func_2813() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %640.0
  };
  %641() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_7140(%var_7132: int32, %var_7133: Tensor[(11, 1, 5), int32]) -> Tensor[(11, 1, 5), int32] {
  %642 = cast(%var_7132, dtype="int32") /* ty=int32 */;
  %643 = cast(%var_7133, dtype="int32") /* ty=Tensor[(11, 1, 5), int32] */;
  right_shift(%642, %643) /* ty=Tensor[(11, 1, 5), int32] */
}

def @func_1022() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) {
  %644 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %647 = reshape(%646, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %648 = @func_629(%647) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %649 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %650 = %649.1;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %652 = %648.2;
  %653 = sin(%651) /* ty=Tensor[(7, 7, 5), float64] */;
  (%645, %652, %653)
}

def @func_5551(%var_5500: Tensor[(16, 3, 13), bool]) -> (Tensor[(16, 3, 13), bool], Tensor[(16, 3, 13), int16], Tensor[(16, 3, 13), float64], Tensor[(7, 7, 5), uint32]) {
  %654 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 3, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 3, 13), bool] */;
  %655 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_5500, dtype="bool") /* ty=Tensor[(16, 3, 13), bool] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %658 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 3, 13), bool] */, dtype="int16") /* ty=Tensor[(16, 3, 13), int16] */;
  %659 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_5500, dtype="int16") /* ty=Tensor[(16, 3, 13), int16] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %662 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 3, 13), bool] */, dtype="float64") /* ty=Tensor[(16, 3, 13), float64] */;
  %663 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %664 = logical_and(%656, %657) /* ty=Tensor[(16, 3, 13), bool] */;
  %665 = left_shift(%660, %661) /* ty=Tensor[(16, 3, 13), int16] */;
  %666 = cos(%662) /* ty=Tensor[(16, 3, 13), float64] */;
  %667 = %663.1;
  (%664, %665, %666, %667)
}

def @func_4493(%var_4485: Tensor[(8, 11, 3), float32]) -> Tensor[(8, 11, 3), float64] {
  %668 = @func_3516() /* ty=(Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) */;
  %669 = %668.0;
  %670 = cast(%var_4485, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%672, %673) /* ty=Tensor[(8, 11, 3), float64] */
}

def @func_5692() -> (Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) {
  %674 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 13), float64] */;
  %675 = @func_2705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) */;
  %676 = exp(%674) /* ty=Tensor[(12, 16, 13), float64] */;
  %677 = %675.0;
  (%676, %677)
}

def @func_4849(%var_4834: Tensor[(28, 2), float32], %var_4844: float32) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(28, 2), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], float32, Tensor[(10, 20), float32]) {
  %678 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
  %679 = cast(%var_4834, dtype="float32") /* ty=Tensor[(28, 2), float32] */;
  %680 = reshape(%679, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float32] */;
  %681 = @func_4681(%680) /* ty=(Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %682 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %683 = cast(%var_4844, dtype="float32") /* ty=float32 */;
  %684 = %682.0;
  %685 = cast(%684, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %686 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 20), float32] */, dtype="float32") /* ty=Tensor[(10, 20), float32] */;
  %687 = reshape(%683, newshape=[]) /* ty=float32 */;
  %688 = reshape(%685, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
  %689 = reshape(%686, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
  %690 = @func_1246(%687, %688, %689) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
  %691 = %678.0;
  %692 = %681.1;
  %693 = %690.5;
  (%691, %692, %var_4834, %684, %693, %var_4844, meta[relay.Constant][18] /* ty=Tensor[(10, 20), float32] */)
}

def @func_4189(%var_4187: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), bool], float32, Tensor[(14, 2, 12), uint8], Tensor[(336), float64]) {
  @func_4186(%var_4187) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), bool], float32, Tensor[(14, 2, 12), uint8], Tensor[(336), float64]) */
}

def @func_5729(%var_5727: int8, %var_5728: Tensor[(9, 14, 15), int8]) -> (Tensor[(9, 14, 15), int8],) {
  @func_5725(%var_5727, %var_5728) /* ty=(Tensor[(9, 14, 15), int8],) */
}

def @func_2636() -> (Tensor[(7, 7, 5), uint32],) {
  %696 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %694 = @func_2055() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */;
    %695 = %694.0;
    (%695,)
  };
  %696() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_9520() -> (Tensor[(7, 7, 5), uint32],) {
  %699 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %697 = @func_6197() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %698 = %697.0;
    (%698,)
  };
  %699() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_6602(%var_6600: Tensor[(1078), int64], %var_6601: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(16, 3, 13), bool], Tensor[(624), bool], Tensor[(168, 2), float32], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), uint32]) {
  @func_6598(%var_6600, %var_6601) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(16, 3, 13), bool], Tensor[(624), bool], Tensor[(168, 2), float32], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_2659() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %705 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %700 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %701 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %702 = %700.0;
    %703 = %701.0;
    %704 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
    (%702, %703, %704)
  };
  %705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_6999() -> Tensor[(7, 7, 5), uint32] {
  %706 = fn () -> Tensor[(7, 7, 5), uint32] {
    @func_6798() /* ty=Tensor[(7, 7, 5), uint32] */
  };
  %706() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_7377() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %709 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %707 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
    %708 = @func_4870() /* ty=Tensor[(7, 7, 5), uint32] */;
    (%707, %708)
  };
  %709() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_8000() -> Tensor[(7, 7, 5), uint32] {
  @func_7998() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_135() -> Tensor[(7, 7, 5), uint32] {
  %714 = fn () -> Tensor[(7, 7, 5), uint32] {
    %710 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
    %711 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(7, 7, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    subtract(%712, %713) /* ty=Tensor[(7, 7, 5), uint32] */
  };
  %714() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_524() -> (Tensor[(8, 11, 3), float64],) {
  %717 = fn () -> (Tensor[(8, 11, 3), float64],) {
    %715 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 11, 3), float64] */, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
    %716 = exp(%715) /* ty=Tensor[(8, 11, 3), float64] */;
    (%716,)
  };
  %717() /* ty=(Tensor[(8, 11, 3), float64],) */
}

def @func_3049() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %718 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %719 = @func_1742() /* ty=Tensor[(7, 7, 5), uint32] */;
  %720 = %718.0;
  %721 = @func_2450() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%719, %720, %721)
}

def @func_5759() -> (Tensor[(7, 7, 5), uint32],) {
  %723 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %722 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
    (%722,)
  };
  %723() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_9718(%var_9594: Tensor[(5, 7, 13), float64], %var_9674: Tensor[(1078), int64], %var_9675: Tensor[(336), float64], %var_9710: Tensor[(5, 7, 13), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(5, 7, 13), float64], Tensor[(8, 11, 3), bool], Tensor[(264), float64], Tensor[(132), int64], Tensor[(5, 7, 13), float64], Tensor[(5, 7, 13), uint64], Tensor[(7, 7, 5), uint32]) {
  %724 = @func_3252() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %725 = @func_8958() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %726 = @func_5992() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %727 = cast(%var_9674, dtype="int64") /* ty=Tensor[(1078), int64] */;
  %728 = cast(%var_9675, dtype="float64") /* ty=Tensor[(336), float64] */;
  %729 = reshape(%727, newshape=[1078]) /* ty=Tensor[(1078), int64] */;
  %730 = reshape(%728, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %731 = @func_6598(%729, %730) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(16, 3, 13), bool], Tensor[(624), bool], Tensor[(168, 2), float32], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(2, 4, 7), float64], Tensor[(7, 7, 5), uint32]) */;
  %732 = cast(%var_9594, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %733 = cos(%732) /* ty=Tensor[(5, 7, 13), float64] */;
  %734 = cast(%var_9594, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %738 = minimum(%736, %737) /* ty=Tensor[(5, 7, 13), float32] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %740 = atanh(%739) /* ty=Tensor[(5, 7, 13), float64] */;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %742 = cast(meta[relay.Constant][22] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %743 = cast(meta[relay.Constant][23] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
  %744 = reshape(%742, newshape=[8, 11, 3]) /* ty=Tensor[(8, 11, 3), float64] */;
  %745 = reshape(%743, newshape=[132]) /* ty=Tensor[(132), int64] */;
  %746 = @func_6171(%744, %745) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(8, 11, 3), bool], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), bool], Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), float32], Tensor[(132), int64], Tensor[(7, 7, 5), bool], bool) */;
  %747 = cast(%740, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %748 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%733, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = cast(%740, dtype="float64") /* ty=Tensor[(5, 7, 13), float64] */;
  %752 = log(%751) /* ty=Tensor[(5, 7, 13), float64] */;
  %753 = cast(%var_9710, dtype="uint64") /* ty=Tensor[(5, 7, 13), uint64] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="uint64") /* ty=Tensor[(5, 7, 13), uint64] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %757 = @func_4291() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %758 = %724.1;
  %759 = %725.0;
  %760 = %726.1;
  %761 = %731.0;
  %762 = log2(%741) /* ty=Tensor[(5, 7, 13), float64] */;
  %763 = %746.2;
  %764 = divide(%749, %750) /* ty=Tensor[(5, 7, 13), float64] */;
  %765 = bitwise_xor(%755, %756) /* ty=Tensor[(5, 7, 13), uint64] */;
  %766 = %757.1;
  (%758, %759, %760, %761, %var_9674, %var_9675, %762, %763, meta[relay.Constant][22] /* ty=Tensor[(264), float64] */, meta[relay.Constant][23] /* ty=Tensor[(132), int64] */, %764, %765, %766)
}

def @func_3021() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) {
  %772 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) {
    %767 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %768 = @func_1983() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) */;
    %769 = %767.0;
    %770 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
    %771 = %768.0;
    (%769, %770, %771)
  };
  %772() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */
}

def @func_4870() -> Tensor[(7, 7, 5), uint32] {
  @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_1361() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %778 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
    %773 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
    %774 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %775 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
    %776 = %773.1;
    %777 = %774.0;
    (%775, %776, %777)
  };
  %778() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_2843() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) {
  %779 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %780 = @func_2198() /* ty=Tensor[(7, 7, 5), uint32] */;
  %781 = %779.1;
  %782 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
  (%780, %781, %782)
}

def @func_8014() -> Tensor[(7, 7, 5), uint32] {
  @func_8012() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_5495(%var_5485: Tensor[(15, 15, 11), uint64]) -> (Tensor[(15, 15, 11), bool], Tensor[(7, 7, 5), uint32]) {
  %783 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 15, 11), uint64] */, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
  %784 = shape_of(%var_5485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%var_5485, dtype="bool") /* ty=Tensor[(15, 15, 11), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %787 = @func_2392() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %788 = less_equal(%785, %786) /* ty=Tensor[(15, 15, 11), bool] */;
  %789 = %787.1;
  (%788, %789)
}

def @func_8409() -> Tensor[(7, 7, 5), uint32] {
  %791 = fn () -> Tensor[(7, 7, 5), uint32] {
    %790 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %790.2
  };
  %791() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_1648() -> Tensor[(7, 7, 5), float32] {
  @func_1646() /* ty=Tensor[(7, 7, 5), float32] */
}

def @func_7455(%var_7454: float32) -> (Tensor[(7, 7, 5), float32], Tensor[(10, 20), float32], Tensor[(56), float32], float32) {
  %799 = fn (%var_7450: float32) -> (Tensor[(7, 7, 5), float32], Tensor[(10, 20), float32], Tensor[(56), float32], float32) {
    %792 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
    %793 = cast(%var_7450, dtype="float32") /* ty=float32 */;
    %794 = reshape(%792, newshape=[28, 2]) /* ty=Tensor[(28, 2), float32] */;
    %795 = reshape(%793, newshape=[]) /* ty=float32 */;
    %796 = @func_4849(%794, %795) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(28, 2), float32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32], float32, Tensor[(10, 20), float32]) */;
    %797 = @func_1756() /* ty=Tensor[(7, 7, 5), float32] */;
    %798 = %796.6;
    (%797, %798, meta[relay.Constant][25] /* ty=Tensor[(56), float32] */, %var_7450)
  };
  %799(%var_7454) /* ty=(Tensor[(7, 7, 5), float32], Tensor[(10, 20), float32], Tensor[(56), float32], float32) */
}

def @func_6570(%var_6568: Tensor[(7, 14, 13), float32], %var_6569: Tensor[(245), bool]) -> (Tensor[(7, 14, 13), int64], Tensor[(7, 7, 5), uint32], float32, Tensor[(245), bool], Tensor[(200), float32], float32) {
  @func_6566(%var_6568, %var_6569) /* ty=(Tensor[(7, 14, 13), int64], Tensor[(7, 7, 5), uint32], float32, Tensor[(245), bool], Tensor[(200), float32], float32) */
}

def @func_3295() -> Tensor[(7, 7, 5), uint32] {
  @func_3293() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_9256() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_9254() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_9471(%var_9470: Tensor[(168), uint64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(12, 14), uint64], Tensor[(168), uint64], Tensor[(7, 7, 5), float64]) {
  %814 = fn (%var_9451: Tensor[(168), uint64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(12, 14), uint64], Tensor[(168), uint64], Tensor[(7, 7, 5), float64]) {
    %800 = @func_6041() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) */;
    %801 = @func_8586() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */;
    %802 = cast(%var_9451, dtype="uint64") /* ty=Tensor[(168), uint64] */;
    %803 = cast(%var_9451, dtype="uint64") /* ty=Tensor[(168), uint64] */;
    %804 = reshape(%802, newshape=[12, 14]) /* ty=Tensor[(12, 14), uint64] */;
    %805 = reshape(%803, newshape=[12, 14]) /* ty=Tensor[(12, 14), uint64] */;
    %806 = @func_8923(%804, %805) /* ty=(Tensor[(12, 14), uint64],) */;
    %807 = %800.1;
    %808 = cast(%807, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
    %809 = reshape(%808, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
    %810 = @func_629(%809) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %811 = %801.1;
    %812 = %806.0;
    %813 = %810.0;
    (%807, %811, %812, %var_9451, %813)
  };
  %814(%var_9470) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(12, 14), uint64], Tensor[(168), uint64], Tensor[(7, 7, 5), float64]) */
}

def @func_3618(%var_3588: Tensor[(14, 2, 12), float64]) -> (Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) {
  %815 = cast(%var_3588, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  %816 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(14, 2, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %819 = power(%817, %818) /* ty=Tensor[(14, 2, 12), float64] */;
  %820 = cast(%819, dtype="uint8") /* ty=Tensor[(14, 2, 12), uint8] */;
  %821 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(14, 2, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 2, 12), float64] */, dtype="uint8") /* ty=Tensor[(14, 2, 12), uint8] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %824 = cast(%819, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  %825 = multiply(%822, %823) /* ty=Tensor[(14, 2, 12), uint8] */;
  %826 = sinh(%824) /* ty=Tensor[(14, 2, 12), float64] */;
  (%825, %826)
}

def @func_9116(%var_9114: Tensor[(336), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64]) {
  @func_9113(%var_9114) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(336), float64]) */
}

def @func_6833() -> (Tensor[(12, 16, 13), float64],) {
  %827 = @func_5777() /* ty=(Tensor[(12, 16, 13), float64],) */;
  %828 = %827.0;
  (%828,)
}

def @func_2393() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %837 = fn () -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %829 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %830 = %829.0;
    %831 = cast(%830, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
    %832 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %833 = @func_1836() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %834 = sqrt(%831) /* ty=Tensor[(7, 7, 5), float64] */;
    %835 = %832.0;
    %836 = %833.0;
    (%834, %835, %836)
  };
  %837() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_5815() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(56), float32], Tensor[(7, 7, 5), uint32]) {
  %846 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(56), float32], Tensor[(7, 7, 5), uint32]) {
    %838 = @func_3471() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32) */;
    %839 = cast(meta[relay.Constant][27] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
    %840 = reshape(%839, newshape=[1, 4, 14]) /* ty=Tensor[(1, 4, 14), float32] */;
    %841 = @func_4681(%840) /* ty=(Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %842 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %843 = %838.1;
    %844 = %841.1;
    %845 = %842.0;
    (%843, %844, meta[relay.Constant][27] /* ty=Tensor[(56), float32] */, %845)
  };
  %846() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(56), float32], Tensor[(7, 7, 5), uint32]) */
}

def @func_3679() -> Tensor[(7, 7, 5), uint32] {
  @func_3677() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_803() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_4419(%var_4417: Tensor[(2, 6, 9), uint64], %var_4418: Tensor[(2, 6, 9), uint64]) -> (Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %858 = fn (%var_4329: Tensor[(2, 6, 9), uint64], %var_4330: Tensor[(2, 6, 9), uint64]) -> (Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %847 = cast(%var_4330, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
    %848 = shape_of(%var_4329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %849 = cast(%var_4329, dtype="uint64") /* ty=Tensor[(2, 6, 9), uint64] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %851 = cast(%var_4329, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
    %852 = @func_2813() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %853 = @func_3837() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %854 = left_shift(%849, %850) /* ty=Tensor[(2, 6, 9), uint64] */;
    %855 = acos(%851) /* ty=Tensor[(2, 6, 9), float32] */;
    %856 = %852.0;
    %857 = %853.1;
    (%854, %855, %856, %857)
  };
  %858(%var_4417, %var_4418) /* ty=(Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_7121(%var_7119: Tensor[(12, 5, 16), float32], %var_7120: Tensor[(12, 5, 16), float32]) -> (Tensor[(7, 7, 5), float32], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float32], Tensor[(12, 5, 16), bool]) {
  %878 = fn (%var_7058: Tensor[(12, 5, 16), float32], %var_7059: Tensor[(12, 5, 16), float32]) -> (Tensor[(7, 7, 5), float32], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float32], Tensor[(12, 5, 16), bool]) {
    %859 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
    %860 = @func_3516() /* ty=(Tensor[(8, 11, 3), float32], Tensor[(7, 7, 5), bool], Tensor[(1, 245), uint32]) */;
    %861 = cast(%var_7059, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
    %862 = shape_of(%var_7058, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(%var_7058, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %865 = greater_equal(%863, %864) /* ty=Tensor[(12, 5, 16), bool] */;
    %866 = cast(%865, dtype="float64") /* ty=Tensor[(12, 5, 16), float64] */;
    %867 = sigmoid(%866) /* ty=Tensor[(12, 5, 16), float64] */;
    %868 = cast(%867, dtype="float64") /* ty=Tensor[(12, 5, 16), float64] */;
    %869 = acos(%868) /* ty=Tensor[(12, 5, 16), float64] */;
    %870 = cast(%865, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
    %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
    %872 = cast(%869, dtype="bool") /* ty=Tensor[(12, 5, 16), bool] */;
    %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %874 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
    %875 = %859.2;
    %876 = %860.0;
    %877 = less(%872, %873) /* ty=Tensor[(12, 5, 16), bool] */;
    (%874, %875, %876, %877)
  };
  %878(%var_7119, %var_7120) /* ty=(Tensor[(7, 7, 5), float32], Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float32], Tensor[(12, 5, 16), bool]) */
}

def @func_631(%var_630: Tensor[(7, 7, 5), uint32]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  %904 = fn (%var_571: Tensor[(7, 7, 5), uint32]) -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
    %879 = @func_395() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */;
    %880 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
    %881 = cast(%var_571, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
    %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
    %883 = cast(%880, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
    %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %885 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
    %886 = cast(%880, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
    %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
    %888 = cast(%885, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
    %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %890 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
    %891 = %890.0;
    %892 = cast(%885, dtype="uint16") /* ty=Tensor[(7, 7, 5), uint16] */;
    %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
    %894 = cast(%891, dtype="uint16") /* ty=Tensor[(7, 7, 5), uint16] */;
    %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %896 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %897 = %879.0;
    %898 = @func_463() /* ty=Tensor[(7, 7, 5), uint32] */;
    %899 = less_equal(%883, %884) /* ty=Tensor[(7, 7, 5), bool] */;
    %900 = divide(%888, %889) /* ty=Tensor[(7, 7, 5), float32] */;
    %901 = left_shift(%894, %895) /* ty=Tensor[(7, 7, 5), uint16] */;
    %902 = %896.0;
    %903 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
    (%897, %898, %899, %900, %901, %902, %903)
  };
  %904(%var_630) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_1102() -> (Tensor[(7, 7, 5), uint32],) {
  %905 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %906 = %905.0;
  (%906,)
}

def @func_2555(%var_2554: float32) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
  %921 = fn (%var_2519: float32) -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
    %907 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %908 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %909 = @func_1726() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %910 = cast(%var_2519, dtype="float32") /* ty=float32 */;
    %911 = reshape(%910, newshape=[]) /* ty=float32 */;
    %912 = @func_244(%911) /* ty=(Tensor[(5, 10, 4), float32],) */;
    %913 = @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %914 = @func_870() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool]) */;
    %915 = %907.0;
    %916 = %908.0;
    %917 = %909.0;
    %918 = %912.0;
    %919 = %913.0;
    %920 = %914.1;
    (%915, %916, %917, %918, %var_2519, %919, %920)
  };
  %921(%var_2554) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32], float32, Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) */
}

def @func_2582() -> Tensor[(7, 7, 5), bool] {
  %922 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %922.1
}

def @func_5278(%var_5276: Tensor[(4, 13, 2), float64]) -> (Tensor[(4, 13, 2), float32], Tensor[(4, 13, 2), float32]) {
  @func_5275(%var_5276) /* ty=(Tensor[(4, 13, 2), float32], Tensor[(4, 13, 2), float32]) */
}

def @func_6497() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(18, 6), uint64], Tensor[(7, 7, 5), uint32]) {
  @func_6495() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(18, 6), uint64], Tensor[(7, 7, 5), uint32]) */
}

def @func_6835() -> (Tensor[(12, 16, 13), float64],) {
  @func_6833() /* ty=(Tensor[(12, 16, 13), float64],) */
}

def @func_3197() -> (Tensor[(7, 7, 5), uint32],) {
  @func_3195() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_3293() -> Tensor[(7, 7, 5), uint32] {
  %923 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %923.0
}

def @func_5896(%var_5831: Tensor[(14, 13, 10), bool], %var_5832: Tensor[(14, 13, 10), bool]) -> (Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
  %924 = cast(%var_5832, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %925 = shape_of(%var_5831, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%var_5831, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %928 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
  %929 = @func_1558() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %930 = cast(%var_5831, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %931 = log2(%930) /* ty=Tensor[(14, 13, 10), float64] */;
  %932 = cast(%var_5832, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %933 = shape_of(%931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %934 = cast(%931, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %936 = cast(%931, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %937 = cast(meta[relay.Constant][28] /* ty=Tensor[(2475), uint64] */, dtype="uint64") /* ty=Tensor[(2475), uint64] */;
  %938 = reshape(%937, newshape=[15, 15, 11]) /* ty=Tensor[(15, 15, 11), uint64] */;
  %939 = @func_5495(%938) /* ty=(Tensor[(15, 15, 11), bool], Tensor[(7, 7, 5), uint32]) */;
  %940 = @func_5814() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(56), float32], Tensor[(7, 7, 5), uint32]) */;
  %941 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %942 = reshape(%941, newshape=[]) /* ty=bool */;
  %943 = @func_3394(%942) /* ty=(Tensor[(2, 2, 11), bool], Tensor[(2, 2, 11), uint32], Tensor[(7, 7, 5), bool]) */;
  %944 = logical_and(%926, %927) /* ty=Tensor[(14, 13, 10), bool] */;
  %945 = %928.0;
  %946 = %929.0;
  %947 = greater(%934, %935) /* ty=Tensor[(14, 13, 10), bool] */;
  %948 = atan(%936) /* ty=Tensor[(14, 13, 10), float64] */;
  %949 = %939.0;
  %950 = %940.0;
  %951 = %943.2;
  (%944, %945, %946, %947, %948, %949, meta[relay.Constant][28] /* ty=Tensor[(2475), uint64] */, %950, %951, False /* ty=bool */)
}

def @func_4683(%var_4682: Tensor[(1, 4, 14), float32]) -> (Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %963 = fn (%var_4655: Tensor[(1, 4, 14), float32]) -> (Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %952 = cast(%var_4655, dtype="float32") /* ty=Tensor[(1, 4, 14), float32] */;
    %953 = asinh(%952) /* ty=Tensor[(1, 4, 14), float32] */;
    %954 = cast(%var_4655, dtype="int32") /* ty=Tensor[(1, 4, 14), int32] */;
    %955 = shape_of(%953, dtype="int32") /* ty=Tensor[(3), int32] */;
    %956 = cast(%953, dtype="int32") /* ty=Tensor[(1, 4, 14), int32] */;
    %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %958 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %959 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %960 = maximum(%956, %957) /* ty=Tensor[(?, 4, 14), int32] */;
    %961 = %958.0;
    %962 = %959.0;
    (%960, %961, %962)
  };
  %963(%var_4682) /* ty=(Tensor[(?, 4, 14), int32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_7144(%var_7142: int32, %var_7143: Tensor[(11, 1, 5), int32]) -> Tensor[(11, 1, 5), int32] {
  @func_7140(%var_7142, %var_7143) /* ty=Tensor[(11, 1, 5), int32] */
}

def @func_5069() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %964 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %965 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %966 = %964.0;
  %967 = %965.0;
  (%966, %967)
}

def @func_2584() -> Tensor[(7, 7, 5), bool] {
  @func_2582() /* ty=Tensor[(7, 7, 5), bool] */
}

def @func_1582() -> Tensor[(7, 7, 5), uint32] {
  %969 = fn () -> Tensor[(7, 7, 5), uint32] {
    %968 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %968.1
  };
  %969() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_6019(%var_6016: Tensor[(10, 10, 8), int16], %var_6017: Tensor[(10, 10, 8), int16], %var_6018: Tensor[(630), float64]) -> (Tensor[(10, 10, 8), int16], Tensor[(7, 7, 5), uint32], Tensor[(630), float64]) {
  @func_6014(%var_6016, %var_6017, %var_6018) /* ty=(Tensor[(10, 10, 8), int16], Tensor[(7, 7, 5), uint32], Tensor[(630), float64]) */
}

def @func_5992() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %970 = @func_3195() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %971 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %972 = @func_3020() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */;
  %973 = %970.0;
  %974 = %971.1;
  %975 = %972.0;
  (%973, %974, %975)
}

def @func_1559() -> (Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  %982 = fn () -> (Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
    %976 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
    %977 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
    %978 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
    %979 = %976.0;
    %980 = %977.1;
    %981 = %978.1;
    (%979, %980, %981)
  };
  %982() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */
}

def @func_2761() -> (Tensor[(7, 7, 5), uint32],) {
  %985 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %983 = @func_2432() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %984 = %983.0;
    (%984,)
  };
  %985() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_4147() -> Tensor[(7, 7, 5), uint32] {
  @func_4145() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_396() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) {
  %997 = fn () -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) {
    %986 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
    %987 = %986.0;
    %988 = cast(%987, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
    %989 = @func_305() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) */;
    %990 = %989.0;
    %991 = cast(%987, dtype="uint64") /* ty=Tensor[(7, 7, 5), uint64] */;
    %992 = shape_of(%990, dtype="int32") /* ty=Tensor[(3), int32] */;
    %993 = cast(%990, dtype="uint64") /* ty=Tensor[(7, 7, 5), uint64] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %995 = cos(%988) /* ty=Tensor[(7, 7, 5), float64] */;
    %996 = bitwise_and(%993, %994) /* ty=Tensor[(7, 7, 5), uint64] */;
    (%995, %996)
  };
  %997() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint64]) */
}

def @func_7565() -> (Tensor[(7, 7, 5), uint32],) {
  %1000 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %998 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %999 = %998.0;
    (%999,)
  };
  %1000() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_6495() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(18, 6), uint64], Tensor[(7, 7, 5), uint32]) {
  %1001 = @func_2705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) */;
  %1002 = @func_2125() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1003 = @func_2432() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1004 = @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1005 = cast(meta[relay.Constant][29] /* ty=Tensor[(18, 6), uint64] */, dtype="uint64") /* ty=Tensor[(18, 6), uint64] */;
  %1006 = cast(meta[relay.Constant][29] /* ty=Tensor[(18, 6), uint64] */, dtype="uint64") /* ty=Tensor[(18, 6), uint64] */;
  %1007 = reshape(%1005, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %1008 = reshape(%1006, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), uint64] */;
  %1009 = @func_4416(%1007, %1008) /* ty=(Tensor[(2, 6, 9), uint64], Tensor[(2, 6, 9), float32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1010 = @func_4718() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */;
  %1011 = %1001.1;
  %1012 = %1002.1;
  %1013 = %1003.0;
  %1014 = %1004.2;
  %1015 = %1009.3;
  %1016 = %1010.0;
  (%1011, %1012, %1013, %1014, %1015, meta[relay.Constant][29] /* ty=Tensor[(18, 6), uint64] */, %1016)
}

def @func_5465(%var_5463: Tensor[(12, 5, 14), bool], %var_5464: Tensor[(12, 5, 14), bool]) -> (Tensor[(12, 5, 14), float32], Tensor[(12, 5, 14), uint32]) {
  %1029 = fn (%var_5436: Tensor[(12, 5, 14), bool], %var_5437: Tensor[(12, 5, 14), bool]) -> (Tensor[(12, 5, 14), float32], Tensor[(12, 5, 14), uint32]) {
    %1017 = cast(%var_5437, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
    %1018 = shape_of(%var_5436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1019 = cast(%var_5436, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
    %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1021 = logical_or(%1019, %1020) /* ty=Tensor[(12, 5, 14), bool] */;
    %1022 = cast(%1021, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
    %1023 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 5, 14), bool] */, dtype="uint32") /* ty=Tensor[(12, 5, 14), uint32] */;
    %1024 = shape_of(%1021, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1025 = cast(%1021, dtype="uint32") /* ty=Tensor[(12, 5, 14), uint32] */;
    %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1027 = cos(%1022) /* ty=Tensor[(12, 5, 14), float32] */;
    %1028 = add(%1025, %1026) /* ty=Tensor[(12, 5, 14), uint32] */;
    (%1027, %1028)
  };
  %1029(%var_5463, %var_5464) /* ty=(Tensor[(12, 5, 14), float32], Tensor[(12, 5, 14), uint32]) */
}

def @func_1370() -> (Tensor[(7, 7, 5), uint32],) {
  %1030 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1031 = %1030.0;
  (%1031,)
}

def @func_2055() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) {
  %1032 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1033 = @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1034 = %1032.0;
  %1035 = @func_1646() /* ty=Tensor[(7, 7, 5), float32] */;
  %1036 = %1033.0;
  (%1034, %1035, %1036)
}

def @func_8667() -> (Tensor[(7, 7, 5), bool], Tensor[(336), float64]) {
  %1037 = @func_750() /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), uint32]) */;
  %1038 = @func_5669() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(7, 7, 5), bool]) */;
  %1039 = %1037.0;
  %1040 = %1038.2;
  (%1039, %1040)
}

def @func_1372() -> (Tensor[(7, 7, 5), uint32],) {
  @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_6041() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) {
  %1041 = @func_4733() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1042 = cast(-7.10545f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1043 = %1041.0;
  %1044 = cast(%1043, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %1045 = cast(meta[relay.Constant][31] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %1046 = reshape(%1042, newshape=[]) /* ty=float32 */;
  %1047 = reshape(%1044, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), bool] */;
  %1048 = reshape(%1045, newshape=[5, 10, 4]) /* ty=Tensor[(5, 10, 4), float32] */;
  %1049 = @func_1246(%1046, %1047, %1048) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), int8], Tensor[(5, 10, 4), int32], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), uint8], Tensor[(7, 7, 5), uint32], Tensor[(5, 10, 4), float32]) */;
  %1050 = %1049.7;
  (%1043, %1050, -7.10545f /* ty=float32 */, meta[relay.Constant][31] /* ty=Tensor[(200), float32] */)
}

def @func_255() -> (Tensor[(7, 7, 5), uint32],) {
  %1051 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%1051,)
}

def @func_1704() -> (Tensor[(7, 7, 5), uint32],) {
  %1052 = @func_1581() /* ty=Tensor[(7, 7, 5), uint32] */;
  (%1052,)
}

def @func_9026() -> (Tensor[(7, 7, 5), float64], Tensor[(14, 2, 12), float64], Tensor[(168, 2), float64], Tensor[(7, 7, 5), uint32]) {
  %1053 = @func_2705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) */;
  %1054 = cast(meta[relay.Constant][32] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %1055 = reshape(%1054, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %1056 = @func_3618(%1055) /* ty=(Tensor[(14, 2, 12), uint8], Tensor[(14, 2, 12), float64]) */;
  %1057 = @func_6041() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], float32, Tensor[(200), float32]) */;
  %1058 = %1053.2;
  %1059 = %1056.1;
  %1060 = %1057.1;
  (%1058, %1059, meta[relay.Constant][32] /* ty=Tensor[(168, 2), float64] */, %1060)
}

def @func_4734() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %1064 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %1061 = @func_488() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %1062 = @func_3882() /* ty=Tensor[(7, 7, 5), uint32] */;
    %1063 = %1061.0;
    (%1062, %1063)
  };
  %1064() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_5900(%var_5898: Tensor[(14, 13, 10), bool], %var_5899: Tensor[(14, 13, 10), bool]) -> (Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) {
  @func_5896(%var_5898, %var_5899) /* ty=(Tensor[(14, 13, 10), bool], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), float64], Tensor[(14, 13, 10), bool], Tensor[(14, 13, 10), float64], Tensor[(15, 15, 11), bool], Tensor[(2475), uint64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], bool) */
}

def @func_5994() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_5992() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_5071() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_5069() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_7877() -> Tensor[(7, 7, 5), uint32] {
  @func_7875() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_689() -> (Tensor[(7, 7, 5), uint32],) {
  @func_687() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_3254() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_3252() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_7631() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %1065 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1066 = @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */;
  %1067 = @func_5019() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1068 = @func_5069() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
  %1069 = @func_2843() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32]) */;
  %1070 = %1065.0;
  %1071 = %1066.0;
  %1072 = %1067.0;
  %1073 = %1068.0;
  %1074 = %1069.0;
  (%1070, %1071, %1072, %1073, %1074)
}

def @func_289(%var_287: Tensor[(7, 7, 5), uint32]) -> (Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) {
  @func_286(%var_287) /* ty=(Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */
}

def @func_8880() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  @func_8878() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */
}

def @func_8092(%var_8091: Tensor[(12, 11, 16), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(12, 11, 16), bool]) {
  %1083 = fn (%var_8033: Tensor[(12, 11, 16), float64]) -> (Tensor[(7, 7, 5), float64], Tensor[(12, 11, 16), bool]) {
    %1075 = cast(%var_8033, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
    %1076 = atanh(%1075) /* ty=Tensor[(12, 11, 16), float64] */;
    %1077 = cast(%1076, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
    %1078 = shape_of(%var_8033, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1079 = cast(%var_8033, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
    %1080 = dyn.reshape(%1077, %1078, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1081 = @func_4069() /* ty=Tensor[(7, 7, 5), float64] */;
    %1082 = less(%1079, %1080) /* ty=Tensor[(12, 11, 16), bool] */;
    (%1081, %1082)
  };
  %1083(%var_8091) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(12, 11, 16), bool]) */
}

def @func_8330() -> Tensor[(7, 7, 5), uint32] {
  @func_3677() /* ty=Tensor[(7, 7, 5), uint32] */
}

def @func_3784() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %1088 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %1084 = @func_3574() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %1085 = @func_2658() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %1086 = %1084.2;
    %1087 = %1085.2;
    (%1086, %1087)
  };
  %1088() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_2182() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) {
  @func_2180() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(8, 11, 3), float64]) */
}

def @func_286(%var_271: Tensor[(7, 7, 5), uint32]) -> (Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) {
  %1089 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1090 = %1089.0;
  %1091 = cast(%var_271, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %1092 = shape_of(%1090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1093 = cast(%1090, dtype="bool") /* ty=Tensor[(7, 7, 5), bool] */;
  %1094 = dyn.reshape(%1091, %1092, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1095 = cast(%var_271, dtype="float64") /* ty=Tensor[(7, 7, 5), float64] */;
  %1096 = logical_and(%1093, %1094) /* ty=Tensor[(7, 7, 5), bool] */;
  %1097 = atan(%1095) /* ty=Tensor[(7, 7, 5), float64] */;
  (%1096, %1097)
}

def @func_5694() -> (Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) {
  @func_5692() /* ty=(Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_9724(%var_9720: Tensor[(5, 7, 13), float64], %var_9721: Tensor[(1078), int64], %var_9722: Tensor[(336), float64], %var_9723: Tensor[(5, 7, 13), float64]) -> (Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(5, 7, 13), float64], Tensor[(8, 11, 3), bool], Tensor[(264), float64], Tensor[(132), int64], Tensor[(5, 7, 13), float64], Tensor[(5, 7, 13), uint64], Tensor[(7, 7, 5), uint32]) {
  @func_9718(%var_9720, %var_9721, %var_9722, %var_9723) /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(12, 16, 13), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(1078), int64], Tensor[(336), float64], Tensor[(5, 7, 13), float64], Tensor[(8, 11, 3), bool], Tensor[(264), float64], Tensor[(132), int64], Tensor[(5, 7, 13), float64], Tensor[(5, 7, 13), uint64], Tensor[(7, 7, 5), uint32]) */
}

def @func_4779(%var_4777: Tensor[(9, 7, 10), float64]) -> (Tensor[(9, 7, 10), bool], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_4776(%var_4777) /* ty=(Tensor[(9, 7, 10), bool], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_8586() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool]) {
  %1098 = @func_1726() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1099 = @func_7899() /* ty=(Tensor[(7, 7, 5), bool],) */;
  %1100 = %1098.0;
  %1101 = %1099.0;
  (%1100, %1101)
}

def @func_2945() -> (Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) {
  @func_2943() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */
}

def @func_8255(%var_8246: Tensor[(16, 9, 10), float64]) -> Tensor[(16, 9, 10), float64] {
  %1102 = cast(%var_8246, dtype="float64") /* ty=Tensor[(16, 9, 10), float64] */;
  acos(%1102) /* ty=Tensor[(16, 9, 10), float64] */
}

def @func_8926(%var_8924: Tensor[(12, 14), uint64], %var_8925: Tensor[(12, 14), uint64]) -> (Tensor[(12, 14), uint64],) {
  %1108 = fn (%var_8914: Tensor[(12, 14), uint64], %var_8915: Tensor[(12, 14), uint64]) -> (Tensor[(12, 14), uint64],) {
    %1103 = cast(%var_8915, dtype="uint64") /* ty=Tensor[(12, 14), uint64] */;
    %1104 = shape_of(%var_8914, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1105 = cast(%var_8914, dtype="uint64") /* ty=Tensor[(12, 14), uint64] */;
    %1106 = dyn.reshape(%1103, %1104, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %1107 = add(%1105, %1106) /* ty=Tensor[(12, 14), uint64] */;
    (%1107,)
  };
  %1108(%var_8924, %var_8925) /* ty=(Tensor[(12, 14), uint64],) */
}

def @func_2057() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) {
  @func_2055() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint32]) */
}

def @func_4776(%var_4747: Tensor[(9, 7, 10), float64]) -> (Tensor[(9, 7, 10), bool], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %1109 = cast(%var_4747, dtype="float64") /* ty=Tensor[(9, 7, 10), float64] */;
  %1110 = log2(%1109) /* ty=Tensor[(9, 7, 10), float64] */;
  %1111 = cast(%var_4747, dtype="bool") /* ty=Tensor[(9, 7, 10), bool] */;
  %1112 = shape_of(%1110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1113 = cast(%1110, dtype="bool") /* ty=Tensor[(9, 7, 10), bool] */;
  %1114 = dyn.reshape(%1111, %1112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1115 = @func_1370() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1116 = @func_4291() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %1117 = logical_and(%1113, %1114) /* ty=Tensor[(9, 7, 10), bool] */;
  %1118 = %1115.0;
  %1119 = %1116.1;
  (%1117, %1118, %1119)
}

def @func_305() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64]) {
  %1120 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1121 = @func_201() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %1122 = %1120.0;
  %1123 = %1121.0;
  (%1122, %1123)
}

def @func_6738() -> (Tensor[(7, 7, 5), uint32],) {
  %1126 = fn () -> (Tensor[(7, 7, 5), uint32],) {
    %1124 = @func_5758() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %1125 = %1124.0;
    (%1125,)
  };
  %1126() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_3051() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  @func_3049() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_1646() -> Tensor[(7, 7, 5), float32] {
  %1127 = @func_134() /* ty=Tensor[(7, 7, 5), uint32] */;
  %1128 = cast(%1127, dtype="float32") /* ty=Tensor[(7, 7, 5), float32] */;
  log10(%1128) /* ty=Tensor[(7, 7, 5), float32] */
}

def @func_1104() -> (Tensor[(7, 7, 5), uint32],) {
  @func_1102() /* ty=(Tensor[(7, 7, 5), uint32],) */
}

def @func_4008() -> (Tensor[(7, 7, 5), bool],) {
  %1131 = fn () -> (Tensor[(7, 7, 5), bool],) {
    %1129 = @func_1022() /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float64]) */;
    %1130 = %1129.1;
    (%1130,)
  };
  %1131() /* ty=(Tensor[(7, 7, 5), bool],) */
}

def @func_2126() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
  %1136 = fn () -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) {
    %1132 = @func_801() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */;
    %1133 = @func_255() /* ty=(Tensor[(7, 7, 5), uint32],) */;
    %1134 = %1132.2;
    %1135 = %1133.0;
    (%1134, %1135)
  };
  %1136() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), uint32]) */
}

def @func_2707() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) {
  @func_2705() /* ty=(Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), float64]) */
}

def @func_1983() -> (Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), float64], Tensor[(8, 11, 3), uint64]) {
  %1137 = @func_1704() /* ty=(Tensor[(7, 7, 5), uint32],) */;
  %1138 = %1137.0;
  %1139 = cast(%1138, dtype="uint32") /* ty=Tensor[(7, 7, 5), uint32] */;
  %1140 = reshape(%1139, newshape=[7, 7, 5]) /* ty=Tensor[(7, 7, 5), uint32] */;
  %1141 = @func_629(%1140) /* ty=(Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32], Tensor[(7, 7, 5), bool], Tensor[(7, 7, 5), float32], Tensor[(7, 7, 5), uint16], Tensor[(7, 7, 5), float64], Tensor[(7, 7, 5), uint32]) */;
  %1142 = @func_523() /* ty=(Tensor[(8, 11, 3), float64],) */;
  %1143 = %1142.0;
  %1144 = @func_935() /* ty=(Tensor[(8, 11, 3), float64], Tensor[(8, 11, 3), float64]) */;
  %1145 = %1144.0;
  %1146 = cast(%1145, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %1147 = shape_of(%1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1148 = cast(%1143, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  %1149 = dyn.reshape(%1146, %1147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1150 = less(%1148, %1149) /* ty=Tensor[(8, 11, 3), bool] */;
  %1151 = cast(%1143, dtype="uint64") /* ty=Tensor[(8, 11, 3), uint64] */;
  %1152 = shape_of(%1150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1153 = cast(%1150, dtype="uint64") /* ty=Tensor[(8, 11, 3), uint64] */;
  %1154 = dyn.reshape(%1151, %1152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1155 = %1141.0;
  %1156 = bitwise_or(%1153, %1154) /* ty=Tensor[(8, 11, 3), uint64] */;
  (%1138, %1155, %1156)
}

def @func_9497() -> Tensor[(8, 11, 3), float64] {
  @func_9495() /* ty=Tensor[(8, 11, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen138/build/output.py:3640: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen138/build/output.py", line 3645, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(588) tvmgen_default_fused_cast_less_kernel0(signed char* __restrict__ T_less, float* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_less[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) < ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

