==========mod==========
#[version = "0.0.5"]
def @func_2862(%var_2848: Tensor[(648), float64], %var_2851: Tensor[(1755), int8]) -> (Tensor[(6, 3, 12), float64], Tensor[(24, 10), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8], Tensor[(6, 3, 12), float64]) {
  %0 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %2 = cast(%var_2848, dtype="float64") /* ty=Tensor[(648), float64] */;
  %3 = reshape(%1, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
  %4 = reshape(%2, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %5 = @func_1212(%3, %4) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
  %6 = cast(%var_2851, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %7 = reshape(%6, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %8 = @func_513(%7) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %9 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %10 = %0.0;
  %11 = %5.2;
  %12 = %8.0;
  %13 = %9.0;
  (%10, %11, meta[relay.Constant][0] /* ty=Tensor[(240), float64] */, %var_2848, %12, %var_2851, %13)
}

def @func_4657(%var_4651: Tensor[(12, 10, 6), uint32]) -> (Tensor[(12, 10, 6), uint32],) {
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 10, 6), uint32] */, dtype="uint32") /* ty=Tensor[(12, 10, 6), uint32] */;
  %15 = shape_of(%var_4651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_4651, dtype="uint32") /* ty=Tensor[(12, 10, 6), uint32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %18 = bitwise_and(%16, %17) /* ty=Tensor[(12, 10, 6), uint32] */;
  (%18,)
}

def @func_5388(%var_5352: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), uint64],) {
  %19 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %20 = cast(%var_5352, dtype="uint64") /* ty=Tensor[(6, 3, 12), uint64] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="uint64") /* ty=Tensor[(6, 3, 12), uint64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %24 = bitwise_or(%22, %23) /* ty=Tensor[(6, 3, 12), uint64] */;
  (%24,)
}

def @func_4434(%var_4432: Tensor[(495), uint16]) -> (Tensor[(2535), float64], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16]) {
  %25 = cast(%var_4432, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %26 = reshape(%25, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), uint16] */;
  %27 = @func_3791(%26) /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %28 = @func_3411() /* ty=Tensor[(2535), float64] */;
  %29 = %27.0;
  (%28, %29, %var_4432)
}

def @func_4986() -> (Tensor[(156, 12), uint32],) {
  %30 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %31 = %30.3;
  (%31,)
}

def @func_6666(%var_6629: Tensor[(11, 15, 16), float64], %var_6630: Tensor[(11, 15, 16), float64], %var_6638: Tensor[(1755), int8]) -> (Tensor[(11, 15, 16), float64], Tensor[(6, 3, 12), float64], Tensor[(1755), int8]) {
  %32 = cast(%var_6630, dtype="float64") /* ty=Tensor[(11, 15, 16), float64] */;
  %33 = shape_of(%var_6629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%var_6629, dtype="float64") /* ty=Tensor[(11, 15, 16), float64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %36 = cast(%var_6638, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %37 = reshape(%36, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
  %38 = @func_4954(%37) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) */;
  %39 = floor_divide(%34, %35) /* ty=Tensor[(11, 15, 16), float64] */;
  %40 = %38.0;
  (%39, %40, %var_6638)
}

def @func_2385() -> (Tensor[(6, 3, 12), float64],) {
  %41 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %42 = %41.0;
  (%42,)
}

def @func_2487() -> Tensor[(6, 3, 12), float64] {
  %43 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %43.0
}

def @func_2919(%var_2895: Tensor[(16, 5, 9), float32], %var_2896: Tensor[(16, 5, 9), float32]) -> (Tensor[(16, 5, 9), float32], Tensor[(16, 5, 9), uint8], Tensor[(1872), bool]) {
  %44 = cast(%var_2896, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %45 = shape_of(%var_2895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_2895, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %48 = cast(%var_2896, dtype="uint8") /* ty=Tensor[(16, 5, 9), uint8] */;
  %49 = shape_of(%var_2895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_2895, dtype="uint8") /* ty=Tensor[(16, 5, 9), uint8] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %52 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
  %53 = %52.1;
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(1872), int64] */, dtype="bool") /* ty=Tensor[(1872), bool] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(1), int32] */;
  %56 = cast(%53, dtype="bool") /* ty=Tensor[(1872), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?), bool] */;
  %58 = power(%46, %47) /* ty=Tensor[(16, 5, 9), float32] */;
  %59 = subtract(%50, %51) /* ty=Tensor[(16, 5, 9), uint8] */;
  %60 = equal(%56, %57) /* ty=Tensor[(1872), bool] */;
  (%58, %59, %60)
}

def @func_3791(%var_3787: Tensor[(9, 5, 11), uint16]) -> (Tensor[(9, 5, 11), uint16],) {
  %61 = cast(meta[relay.Constant][3] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %62 = cast(%var_3787, dtype="uint16") /* ty=Tensor[(9, 5, 11), uint16] */;
  %63 = left_shift(%61, %62) /* ty=Tensor[(9, 5, 11), uint16] */;
  (%63,)
}

def @func_1138(%var_1111: uint8, %var_1112: Tensor[(9, 5, 2), uint8]) -> (Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) {
  %64 = cast(%var_1111, dtype="uint8") /* ty=uint8 */;
  %65 = cast(%var_1112, dtype="uint8") /* ty=Tensor[(9, 5, 2), uint8] */;
  %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(195, 9), int8] */, dtype="int8") /* ty=Tensor[(195, 9), int8] */;
  %67 = reshape(%66, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %68 = @func_513(%67) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %69 = bitwise_or(%64, %65) /* ty=Tensor[(9, 5, 2), uint8] */;
  %70 = %68.0;
  (%69, %70, meta[relay.Constant][4] /* ty=Tensor[(195, 9), int8] */)
}

def @func_3232(%var_3225: Tensor[(6, 3, 12), float64]) -> Tensor[(6, 3, 12), int8] {
  %71 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
  %72 = cast(%var_3225, dtype="int8") /* ty=Tensor[(6, 3, 12), int8] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="int8") /* ty=Tensor[(6, 3, 12), int8] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%74, %75) /* ty=Tensor[(6, 3, 12), int8] */
}

def @func_4262(%var_4232: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), bool], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(7, 2, 4), bool]) {
  %76 = cast(%var_4232, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %77 = atanh(%76) /* ty=Tensor[(7, 2, 4), float64] */;
  %78 = cast(%77, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %79 = tan(%78) /* ty=Tensor[(7, 2, 4), float64] */;
  %80 = cast(%77, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(2730), uint8] */, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %85 = reshape(%84, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %86 = cast(%var_4232, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %87 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%77, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = greater(%82, %83) /* ty=Tensor[(7, 2, 4), bool] */;
  %91 = @func_1982(%85) /* ty=Tensor[(14, 15, 13), uint8] */;
  %92 = logical_or(%88, %89) /* ty=Tensor[(7, 2, 4), bool] */;
  (%90, %91, meta[relay.Constant][5] /* ty=Tensor[(2730), uint8] */, %92)
}

def @func_5834(%var_5811: Tensor[(1, 60), float32], %var_5812: Tensor[(1, 648), float64], %var_5819: Tensor[(13, 60), float32]) -> (Tensor[(2535), float64], Tensor[(648), float64], Tensor[(1, 648), float64], Tensor[(13, 60), bool], Tensor[(2535), float64], Tensor[(900), uint8]) {
  %93 = cast(%var_5811, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
  %94 = cast(%var_5812, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
  %95 = reshape(%93, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %96 = reshape(%94, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %97 = @func_909(%95, %96) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
  %98 = cast(%var_5811, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %99 = cast(%var_5819, dtype="bool") /* ty=Tensor[(13, 60), bool] */;
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %101 = reshape(%100, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint8] */;
  %102 = @func_3084(%101) /* ty=(Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) */;
  %103 = @func_3411() /* ty=Tensor[(2535), float64] */;
  %104 = %97.2;
  %105 = equal(%98, %99) /* ty=Tensor[(13, 60), bool] */;
  %106 = %102.0;
  (%103, %104, %var_5812, %105, %106, meta[relay.Constant][6] /* ty=Tensor[(900), uint8] */)
}

def @func_5975() -> (Tensor[(2535), float64], Tensor[(6, 3, 12), float64]) {
  %107 = @func_5414() /* ty=(Tensor[(2535), float64],) */;
  %108 = %107.0;
  %109 = @func_2572() /* ty=Tensor[(6, 3, 12), float64] */;
  (%108, %109)
}

def @func_6153(%var_6101: Tensor[(648), float64], %var_6104: Tensor[(648), float64], %var_6130: uint8, %var_6147: Tensor[(12, 3, 6), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), uint32], Tensor[(240), float64], Tensor[(648), float64], Tensor[(648), bool], Tensor[(648), float64], Tensor[(495), uint16], Tensor[(840), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], uint8, Tensor[(90), uint8], Tensor[(6, 3, 12), float64], Tensor[(12, 3, 6), bool]) {
  %110 = @func_5658() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %111 = @func_4645() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %112 = @func_5493() /* ty=(Tensor[(1872), uint32],) */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %114 = cast(%var_6101, dtype="float64") /* ty=Tensor[(648), float64] */;
  %115 = reshape(%113, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
  %116 = reshape(%114, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %117 = @func_1212(%115, %116) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
  %118 = %117.3;
  %119 = cast(%var_6104, dtype="bool") /* ty=Tensor[(648), bool] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(1), int32] */;
  %121 = cast(%118, dtype="bool") /* ty=Tensor[(648), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), bool] */;
  %123 = cast(%var_6104, dtype="float64") /* ty=Tensor[(648), float64] */;
  %124 = shape_of(%118, dtype="int32") /* ty=Tensor[(1), int32] */;
  %125 = cast(%118, dtype="float64") /* ty=Tensor[(648), float64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?), float64] */;
  %127 = cast(meta[relay.Constant][8] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %128 = cast(meta[relay.Constant][8] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %130 = reshape(%127, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %131 = reshape(%128, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %132 = reshape(%129, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %133 = @func_4418(%130, %131, %132) /* ty=(Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) */;
  %134 = @func_2819() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) */;
  %135 = cast(%var_6130, dtype="uint8") /* ty=uint8 */;
  %136 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), uint8] */, dtype="uint8") /* ty=Tensor[(90), uint8] */;
  %137 = reshape(%135, newshape=[]) /* ty=uint8 */;
  %138 = reshape(%136, newshape=[15, 6]) /* ty=Tensor[(15, 6), uint8] */;
  %139 = @func_5577(%137, %138) /* ty=(Tensor[(2535), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), float64], Tensor[(156, 12), float64], Tensor[(13, 15, 9), int8], uint8, Tensor[(15, 6), uint8]) */;
  %140 = @func_5771() /* ty=Tensor[(6, 3, 12), float64] */;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %142 = reshape(%141, newshape=[12, 3, 6]) /* ty=Tensor[(12, 3, 6), float64] */;
  %143 = @func_1388(%142) /* ty=(Tensor[(12, 3, 6), float64],) */;
  %144 = %143.0;
  %145 = cast(%var_6147, dtype="bool") /* ty=Tensor[(12, 3, 6), bool] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="bool") /* ty=Tensor[(12, 3, 6), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = @func_2487() /* ty=Tensor[(6, 3, 12), float64] */;
  %150 = %110.0;
  %151 = %111.1;
  %152 = %112.0;
  %153 = greater(%121, %122) /* ty=Tensor[(648), bool] */;
  %154 = mod(%125, %126) /* ty=Tensor[(648), float64] */;
  %155 = %133.2;
  %156 = %134.0;
  %157 = %139.1;
  %158 = greater_equal(%147, %148) /* ty=Tensor[(12, 3, 6), bool] */;
  (%149, %150, %151, %152, meta[relay.Constant][7] /* ty=Tensor[(240), float64] */, %var_6101, %153, %154, %155, meta[relay.Constant][8] /* ty=Tensor[(840), float64] */, %156, %157, %var_6130, meta[relay.Constant][9] /* ty=Tensor[(90), uint8] */, %140, %158)
}

def @func_4705(%var_4692: Tensor[(2535), float64], %var_4698: Tensor[(840), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(14, 6, 10), float64], Tensor[(840), float64]) {
  %159 = @func_4062() /* ty=Tensor[(2535), float64] */;
  %160 = cast(%var_4692, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(1), int32] */;
  %162 = cast(%159, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?), float64] */;
  %164 = cast(%var_4698, dtype="float64") /* ty=Tensor[(840), float64] */;
  %165 = cast(%var_4698, dtype="float64") /* ty=Tensor[(840), float64] */;
  %166 = cast(%var_4698, dtype="float64") /* ty=Tensor[(840), float64] */;
  %167 = reshape(%164, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %168 = reshape(%165, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %169 = reshape(%166, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %170 = @func_4418(%167, %168, %169) /* ty=(Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) */;
  %171 = @func_2572() /* ty=Tensor[(6, 3, 12), float64] */;
  %172 = divide(%162, %163) /* ty=Tensor[(2535), float64] */;
  %173 = %170.5;
  (%171, %172, %173, %var_4698)
}

def @func_1055(%var_1009: uint16, %var_1010: Tensor[(1, 14, 14), uint16], %var_1035: Tensor[(60), float32]) -> (Tensor[(1, 14, 14), bool], Tensor[(6, 12, 9), bool], Tensor[(60), float32], Tensor[(648), float64]) {
  %174 = cast(%var_1009, dtype="bool") /* ty=bool */;
  %175 = cast(%var_1010, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
  %176 = cast(%var_1035, dtype="float32") /* ty=Tensor[(60), float32] */;
  %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %178 = reshape(%176, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %179 = reshape(%177, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %180 = @func_909(%178, %179) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
  %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %182 = cast(%var_1009, dtype="float64") /* ty=float64 */;
  %183 = equal(%174, %175) /* ty=Tensor[(1, 14, 14), bool] */;
  %184 = %180.1;
  %185 = floor_divide(%181, %182) /* ty=Tensor[(648), float64] */;
  (%183, %184, %var_1035, %185)
}

def @func_2622() -> Tensor[(6, 3, 12), float64] {
  %186 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %186.0
}

def @func_5493() -> (Tensor[(1872), uint32],) {
  %187 = @func_3360() /* ty=(Tensor[(1872), uint32], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) */;
  %188 = %187.4;
  (%188,)
}

def @func_5134(%var_5112: Tensor[(3, 14, 2), float32]) -> (Tensor[(3, 14, 2), int64], Tensor[(6, 3, 12), float64], Tensor[(3, 14, 2), float64]) {
  %189 = cast(%var_5112, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
  %190 = acosh(%189) /* ty=Tensor[(3, 14, 2), float32] */;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %192 = log(%191) /* ty=Tensor[(3, 14, 2), float64] */;
  %193 = cast(%var_5112, dtype="int64") /* ty=Tensor[(3, 14, 2), int64] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%192, dtype="int64") /* ty=Tensor[(3, 14, 2), int64] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %197 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %198 = cast(%190, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %199 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%192, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %202 = right_shift(%195, %196) /* ty=Tensor[(3, 14, 2), int64] */;
  %203 = %197.0;
  %204 = power(%200, %201) /* ty=Tensor[(3, 14, 2), float64] */;
  (%202, %203, %204)
}

def @func_2318(%var_2272: int16, %var_2273: Tensor[(9, 14, 4), int16], %var_2284: Tensor[(1872), uint32]) -> (Tensor[(9, 14, 4), int16], Tensor[(1872), float32]) {
  %205 = cast(%var_2272, dtype="int16") /* ty=int16 */;
  %206 = cast(%var_2273, dtype="int16") /* ty=Tensor[(9, 14, 4), int16] */;
  %207 = cast(%var_2284, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %208 = reshape(%207, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %209 = @func_996(%208) /* ty=Tensor[(13, 16, 9), uint32] */;
  %210 = cast(%var_2284, dtype="uint8") /* ty=Tensor[(1872), uint8] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="uint8") /* ty=Tensor[(13, 16, 9), uint8] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %214 = left_shift(%212, %213) /* ty=Tensor[(13, 16, 9), uint8] */;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(13, 16, 9), float32] */;
  %216 = shape_of(%var_2284, dtype="int32") /* ty=Tensor[(1), int32] */;
  %217 = cast(%var_2284, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?), float32] */;
  %219 = bitwise_or(%205, %206) /* ty=Tensor[(9, 14, 4), int16] */;
  %220 = divide(%217, %218) /* ty=Tensor[(1872), float32] */;
  (%219, %220)
}

def @func_3889(%var_3886: Tensor[(12, 156), uint32]) -> (Tensor[(6, 3, 12), float64], Tensor[(156, 12), uint32], Tensor[(12, 156), uint32]) {
  %221 = cast(%var_3886, dtype="uint32") /* ty=Tensor[(12, 156), uint32] */;
  %222 = reshape(%221, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %223 = @func_3211(%222) /* ty=(Tensor[(156, 12), uint32], Tensor[(1872), uint32]) */;
  %224 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %225 = %223.0;
  (%224, %225, %var_3886)
}

def @func_3211(%var_3206: Tensor[(1872), uint32]) -> (Tensor[(156, 12), uint32], Tensor[(1872), uint32]) {
  %226 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %227 = %226.3;
  %228 = cast(%227, dtype="uint32") /* ty=Tensor[(156, 12), uint32] */;
  %229 = reshape(%228, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %230 = @func_2207(%229) /* ty=(Tensor[(6, 3, 12), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) */;
  %231 = %230.2;
  %232 = cast(%var_3206, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(1), int32] */;
  %234 = cast(%231, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %236 = minimum(%234, %235) /* ty=Tensor[(1872), uint32] */;
  (%227, %236)
}

def @func_6260() -> Tensor[(6, 3, 12), float32] {
  @func_4767() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_5577(%var_5571: uint8, %var_5572: Tensor[(15, 6), uint8]) -> (Tensor[(2535), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), float64], Tensor[(156, 12), float64], Tensor[(13, 15, 9), int8], uint8, Tensor[(15, 6), uint8]) {
  %237 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %240 = reshape(%239, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %241 = @func_3211(%240) /* ty=(Tensor[(156, 12), uint32], Tensor[(1872), uint32]) */;
  %242 = %241.0;
  %243 = cast(%242, dtype="float64") /* ty=Tensor[(156, 12), float64] */;
  %244 = cast(%var_5571, dtype="uint8") /* ty=uint8 */;
  %245 = cast(%var_5572, dtype="uint8") /* ty=Tensor[(15, 6), uint8] */;
  %246 = reshape(%244, newshape=[]) /* ty=uint8 */;
  %247 = reshape(%245, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint8] */;
  %248 = @func_1138(%246, %247) /* ty=(Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) */;
  %249 = @func_3056() /* ty=Tensor[(2535), float64] */;
  %250 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
  %251 = sin(%243) /* ty=Tensor[(156, 12), float64] */;
  %252 = %248.1;
  (%249, %250, %238, %251, %252, %var_5571, %var_5572)
}

def @func_6284() -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64]) {
  %253 = @func_4649() /* ty=(Tensor[(2535), float64],) */;
  %254 = @func_2487() /* ty=Tensor[(6, 3, 12), float64] */;
  %255 = %253.0;
  (%254, %255)
}

def @func_2819() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) {
  %256 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %257 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %258 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
  %259 = %258.0;
  %260 = cast(%259, dtype="uint8") /* ty=Tensor[(6, 3, 12), uint8] */;
  %261 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%257, dtype="uint8") /* ty=Tensor[(6, 3, 12), uint8] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %264 = %256.0;
  %265 = logical_xor(%262, %263) /* ty=Tensor[(6, 3, 12), uint8] */;
  (%264, %265)
}

def @func_4062() -> Tensor[(2535), float64] {
  @func_3411() /* ty=Tensor[(2535), float64] */
}

def @func_2207(%var_2185: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 12), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) {
  %266 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
  %269 = cast(%var_2185, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %270 = reshape(%269, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %271 = atan(%268) /* ty=Tensor[(6, 3, 12), float32] */;
  %272 = @func_996(%270) /* ty=Tensor[(13, 16, 9), uint32] */;
  (%271, %272, %var_2185)
}

def @func_2869() -> (Tensor[(2535), float64],) {
  %273 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
  %274 = %273.2;
  (%274,)
}

def @func_3411() -> Tensor[(2535), float64] {
  %275 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %276 = %275.4;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(2535), float64] */;
  sin(%277) /* ty=Tensor[(2535), float64] */
}

def @func_4794(%var_4773: Tensor[(13, 11, 2), float32]) -> Tensor[(13, 11, 2), float32] {
  %278 = cast(%var_4773, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  sqrt(%278) /* ty=Tensor[(13, 11, 2), float32] */
}

def @func_4490(%var_4484: Tensor[(1872), float64]) -> (Tensor[(6, 3, 12), float32], Tensor[(1872), float64]) {
  %279 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
  %280 = %279.0;
  %281 = cast(%var_4484, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(1), int32] */;
  %283 = cast(%280, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?), float64] */;
  %285 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
  %286 = mod(%283, %284) /* ty=Tensor[(1872), float64] */;
  (%285, %286)
}

def @func_4898() -> (Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) {
  %287 = @func_2819() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) */;
  %288 = cast(meta[relay.Constant][11] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %289 = cast(meta[relay.Constant][12] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %290 = cast(meta[relay.Constant][13] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %291 = reshape(%288, newshape=[]) /* ty=int16 */;
  %292 = reshape(%289, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), int16] */;
  %293 = reshape(%290, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %294 = @func_2318(%291, %292, %293) /* ty=(Tensor[(9, 14, 4), int16], Tensor[(1872), float32]) */;
  %295 = %287.0;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %297 = reshape(%296, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %298 = @func_3584(%297) /* ty=(Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %299 = %294.0;
  %300 = %298.0;
  (%295, %299, meta[relay.Constant][11] /* ty=int16 */, meta[relay.Constant][12] /* ty=Tensor[(504), int16] */, meta[relay.Constant][13] /* ty=Tensor[(1872), uint32] */, %300)
}

def @func_5061(%var_5014: uint16) -> (Tensor[(6, 3, 12), float64], Tensor[(1, 14, 14), bool], uint16, Tensor[(196), uint16], Tensor[(60), float32], Tensor[(2730), uint8], Tensor[(56), float64]) {
  %301 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %302 = cast(%var_5014, dtype="uint16") /* ty=uint16 */;
  %303 = cast(meta[relay.Constant][14] /* ty=Tensor[(196), uint16] */, dtype="uint16") /* ty=Tensor[(196), uint16] */;
  %304 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %305 = reshape(%302, newshape=[]) /* ty=uint16 */;
  %306 = reshape(%303, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), uint16] */;
  %307 = reshape(%304, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %308 = @func_1055(%305, %306, %307) /* ty=(Tensor[(1, 14, 14), bool], Tensor[(6, 12, 9), bool], Tensor[(60), float32], Tensor[(648), float64]) */;
  %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %310 = reshape(%309, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float64] */;
  %311 = @func_4262(%310) /* ty=(Tensor[(7, 2, 4), bool], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(7, 2, 4), bool]) */;
  %312 = %301.0;
  %313 = %308.0;
  %314 = %311.2;
  (%312, %313, %var_5014, meta[relay.Constant][14] /* ty=Tensor[(196), uint16] */, meta[relay.Constant][15] /* ty=Tensor[(60), float32] */, %314, meta[relay.Constant][16] /* ty=Tensor[(56), float64] */)
}

def @func_3179() -> (Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) {
  %315 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
  %316 = cast(meta[relay.Constant][17] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %317 = cast(meta[relay.Constant][17] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %318 = %315.0;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(156, 12), uint32] */, dtype="uint32") /* ty=Tensor[(156, 12), uint32] */;
  %321 = reshape(%316, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), uint32] */;
  %322 = reshape(%317, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), uint32] */;
  %323 = reshape(%319, newshape=[12, 18]) /* ty=Tensor[(12, 18), float64] */;
  %324 = reshape(%320, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %325 = @func_2161(%321, %322, %323, %324) /* ty=(Tensor[(6, 3, 15), uint32], Tensor[(6, 3, 15), int32], Tensor[(12, 3, 6), float64], Tensor[(12, 18), float64], Tensor[(1872), int64], Tensor[(2535, 1), float64], Tensor[(1872), uint32]) */;
  %326 = @func_2869() /* ty=(Tensor[(2535), float64],) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(2535), float32] */;
  %329 = sigmoid(%328) /* ty=Tensor[(2535), float32] */;
  %330 = cast(%327, dtype="uint64") /* ty=Tensor[(2535), uint64] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(1), int32] */;
  %332 = cast(%329, dtype="uint64") /* ty=Tensor[(2535), uint64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %334 = add(%332, %333) /* ty=Tensor[(2535), uint64] */;
  %335 = cast(%334, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %336 = shape_of(%329, dtype="int32") /* ty=Tensor[(1), int32] */;
  %337 = cast(%329, dtype="int64") /* ty=Tensor[(2535), int64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?), int64] */;
  %339 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %340 = %325.6;
  %341 = bitwise_and(%337, %338) /* ty=Tensor[(2535), int64] */;
  %342 = %339.0;
  (%318, %340, meta[relay.Constant][17] /* ty=Tensor[(270), uint32] */, meta[relay.Constant][18] /* ty=Tensor[(156, 12), uint32] */, %341, %342)
}

def @func_6186() -> (Tensor[(6, 3, 12), float32],) {
  %343 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
  (%343,)
}

def @func_3778() -> (Tensor[(1872), int64], Tensor[(1872), float64]) {
  %344 = @func_3501() /* ty=(Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) */;
  %345 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
  %346 = %344.0;
  %347 = %345.0;
  (%346, %347)
}

def @func_4096(%var_4085: Tensor[(240), float64], %var_4086: Tensor[(648), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(15, 117), int8], Tensor[(240), float64], Tensor[(648), float64], Tensor[(6, 3, 12), float64]) {
  %348 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
  %350 = cast(%var_4085, dtype="float64") /* ty=Tensor[(240), float64] */;
  %351 = cast(%var_4086, dtype="float64") /* ty=Tensor[(648), float64] */;
  %352 = reshape(%350, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
  %353 = reshape(%351, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %354 = @func_1212(%352, %353) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
  %355 = @func_3501() /* ty=(Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) */;
  %356 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %357 = exp(%349) /* ty=Tensor[(6, 3, 12), float32] */;
  %358 = %354.5;
  %359 = %355.1;
  (%356, %357, %358, %var_4085, %var_4086, %359)
}

def @func_4767() -> Tensor[(6, 3, 12), float32] {
  @func_4018() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_5700() -> Tensor[(2535), bool] {
  %360 = @func_3411() /* ty=Tensor[(2535), float64] */;
  %361 = cast(meta[relay.Constant][19] /* ty=Tensor[(2535), float64] */, dtype="bool") /* ty=Tensor[(2535), bool] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(1), int32] */;
  %363 = cast(%360, dtype="bool") /* ty=Tensor[(2535), bool] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%363, %364) /* ty=Tensor[(2535), bool] */
}

def @func_1730(%var_1672: Tensor[(4, 14), float64], %var_1689: Tensor[(30, 2), float32], %var_1727: Tensor[(1755), int8]) -> (Tensor[(4, 14), float64], Tensor[(1, 648), float64], Tensor[(6, 12, 9), bool], Tensor[(30, 2), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32], Tensor[(6, 12, 9), float32], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) {
  %365 = cast(%var_1672, dtype="float64") /* ty=Tensor[(4, 14), float64] */;
  %366 = cast(%var_1689, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %367 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 648), float64] */, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
  %368 = reshape(%366, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %369 = reshape(%367, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %370 = @func_909(%368, %369) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
  %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %372 = reshape(%371, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 648), float64] */, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
  %374 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 648), float64] */, dtype="int16") /* ty=Tensor[(1, 648), int16] */;
  %375 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 648), float64] */, dtype="float32") /* ty=Tensor[(1, 648), float32] */;
  %376 = reshape(%373, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float64] */;
  %377 = reshape(%374, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), int16] */;
  %378 = reshape(%375, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float32] */;
  %379 = @func_306(%376, %377, %378) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) */;
  %380 = %379.2;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
  %382 = cast(%var_1727, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %383 = reshape(%382, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %384 = @func_513(%383) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %385 = exp(%365) /* ty=Tensor[(4, 14), float64] */;
  %386 = %370.1;
  %387 = @func_996(%372) /* ty=Tensor[(13, 16, 9), uint32] */;
  %388 = sigmoid(%381) /* ty=Tensor[(6, 12, 9), float32] */;
  %389 = %384.0;
  (%385, meta[relay.Constant][20] /* ty=Tensor[(1, 648), float64] */, %386, %var_1689, %387, meta[relay.Constant][21] /* ty=Tensor[(1872), uint32] */, %388, %389, %var_1727)
}

def @main(%var_6915: Tensor[(495), uint16]) -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(9, 5, 11), bool]) {
  %390 = cast(%var_6915, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %391 = reshape(%390, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), uint16] */;
  %392 = @func_3791(%391) /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %393 = %392.0;
  %394 = cast(%var_6915, dtype="bool") /* ty=Tensor[(495), bool] */;
  %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%393, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = @func_6493() /* ty=Tensor[(6, 3, 12), float64] */;
  %399 = @func_4062() /* ty=Tensor[(2535), float64] */;
  %400 = greater(%396, %397) /* ty=Tensor[(9, 5, 11), bool] */;
  (%398, %399, %400)
}

def @func_3056() -> Tensor[(2535), float64] {
  %401 = @func_2869() /* ty=(Tensor[(2535), float64],) */;
  %401.0
}

def @func_2161(%var_2091: Tensor[(6, 3, 15), uint32], %var_2106: Tensor[(6, 3, 15), uint32], %var_2128: Tensor[(12, 18), float64], %var_2137: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 15), uint32], Tensor[(6, 3, 15), int32], Tensor[(12, 3, 6), float64], Tensor[(12, 18), float64], Tensor[(1872), int64], Tensor[(2535, 1), float64], Tensor[(1872), uint32]) {
  %402 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %403 = cast(%var_2091, dtype="uint32") /* ty=Tensor[(6, 3, 15), uint32] */;
  %404 = cast(%var_2106, dtype="int32") /* ty=Tensor[(6, 3, 15), int32] */;
  %405 = shape_of(%var_2091, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_2091, dtype="int32") /* ty=Tensor[(6, 3, 15), int32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %408 = cast(%var_2128, dtype="float64") /* ty=Tensor[(12, 18), float64] */;
  %409 = reshape(%408, newshape=[12, 3, 6]) /* ty=Tensor[(12, 3, 6), float64] */;
  %410 = @func_1388(%409) /* ty=(Tensor[(12, 3, 6), float64],) */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(2535, 1), float64] */, dtype="float64") /* ty=Tensor[(2535, 1), float64] */;
  %412 = cast(meta[relay.Constant][23] /* ty=Tensor[(2535, 1), float64] */, dtype="float64") /* ty=Tensor[(2535, 1), float64] */;
  %413 = cast(%var_2137, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %414 = reshape(%411, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
  %415 = reshape(%412, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
  %416 = reshape(%413, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %417 = @func_2050(%414, %415, %416) /* ty=(Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) */;
  %418 = add(%402, %403) /* ty=Tensor[(6, 3, 15), uint32] */;
  %419 = left_shift(%406, %407) /* ty=Tensor[(6, 3, 15), int32] */;
  %420 = %410.0;
  %421 = %417.1;
  (%418, %419, %420, %var_2128, %421, meta[relay.Constant][23] /* ty=Tensor[(2535, 1), float64] */, %var_2137)
}

def @func_6587() -> (Tensor[(2535), bool], Tensor[(1872), float64]) {
  %422 = @func_6016() /* ty=(Tensor[(1872), float64],) */;
  %423 = @func_5700() /* ty=Tensor[(2535), bool] */;
  %424 = %422.0;
  (%423, %424)
}

def @func_5328(%var_5324: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  %425 = cast(%var_5324, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  rsqrt(%425) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_5877() -> (Tensor[(6, 3, 12), float32],) {
  %426 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
  (%426,)
}

def @func_5930() -> (Tensor[(6, 3, 12), float64], Tensor[(270), uint32]) {
  %427 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %428 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %429 = %427.0;
  %430 = %428.2;
  (%429, %430)
}

def @func_3084(%var_3074: Tensor[(90, 10), uint8]) -> (Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) {
  %431 = cast(meta[relay.Constant][24] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %432 = reshape(%431, newshape=[]) /* ty=uint8 */;
  %433 = @func_2424(%432) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(195, 9), int8], uint8, Tensor[(90, 1), uint8]) */;
  %434 = %433.3;
  %435 = cast(%434, dtype="uint16") /* ty=Tensor[(90, 1), uint16] */;
  %436 = cast(%var_3074, dtype="uint16") /* ty=Tensor[(90, 10), uint16] */;
  %437 = cast(%var_3074, dtype="bool") /* ty=Tensor[(90, 10), bool] */;
  %438 = cast(meta[relay.Constant][24] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %439 = @func_3056() /* ty=Tensor[(2535), float64] */;
  %440 = bitwise_and(%435, %436) /* ty=Tensor[(90, 10), uint16] */;
  %441 = greater_equal(%437, %438) /* ty=Tensor[(90, 10), bool] */;
  (%439, %440, %441)
}

def @func_6443(%var_6409: Tensor[(21, 4), float32]) -> (Tensor[(6, 3, 12), float32], Tensor[(3, 14, 2), float64]) {
  %442 = cast(%var_6409, dtype="float32") /* ty=Tensor[(21, 4), float32] */;
  %443 = reshape(%442, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float32] */;
  %444 = @func_5134(%443) /* ty=(Tensor[(3, 14, 2), int64], Tensor[(6, 3, 12), float64], Tensor[(3, 14, 2), float64]) */;
  %445 = %444.0;
  %446 = cast(%var_6409, dtype="uint16") /* ty=Tensor[(21, 4), uint16] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="uint16") /* ty=Tensor[(3, 14, 2), uint16] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %450 = logical_xor(%448, %449) /* ty=Tensor[(3, 14, 2), uint16] */;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %452 = @func_6260() /* ty=Tensor[(6, 3, 12), float32] */;
  %453 = rsqrt(%451) /* ty=Tensor[(3, 14, 2), float64] */;
  (%452, %453)
}

def @func_2682() -> Tensor[(6, 3, 12), float64] {
  @func_2487() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_3703(%var_3698: Tensor[(14, 16, 4), uint16], %var_3699: Tensor[(14, 16, 4), uint16]) -> (Tensor[(14, 16, 4), bool],) {
  %454 = cast(%var_3699, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
  %455 = shape_of(%var_3698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_3698, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %458 = greater_equal(%456, %457) /* ty=Tensor[(14, 16, 4), bool] */;
  (%458,)
}

def @func_4620(%var_4556: Tensor[(10, 6, 7), float64], %var_4586: Tensor[(10, 6, 7), float64]) -> (Tensor[(1872), float64], Tensor[(15, 13, 13), float64], Tensor[(2535), float64], Tensor[(10, 6, 7), bool], Tensor[(2535), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) {
  %459 = @func_3778() /* ty=(Tensor[(1872), int64], Tensor[(1872), float64]) */;
  %460 = cast(meta[relay.Constant][25] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %461 = cast(meta[relay.Constant][25] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %462 = %459.1;
  %463 = cast(%462, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %464 = reshape(%460, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
  %465 = reshape(%461, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
  %466 = reshape(%463, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %467 = @func_2050(%464, %465, %466) /* ty=(Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) */;
  %468 = cast(%var_4556, dtype="float64") /* ty=Tensor[(10, 6, 7), float64] */;
  %469 = log(%468) /* ty=Tensor[(10, 6, 7), float64] */;
  %470 = cast(%var_4586, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = cast(meta[relay.Constant][26] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %475 = reshape(%474, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %476 = @func_513(%475) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %477 = %467.0;
  %478 = less(%472, %473) /* ty=Tensor[(10, 6, 7), bool] */;
  %479 = @func_3056() /* ty=Tensor[(2535), float64] */;
  %480 = %476.0;
  (%462, %477, meta[relay.Constant][25] /* ty=Tensor[(2535), float64] */, %478, %479, %480, meta[relay.Constant][26] /* ty=Tensor[(1755), int8] */)
}

def @func_4418(%var_4355: Tensor[(14, 6, 10), float64], %var_4379: Tensor[(14, 6, 10), float64], %var_4383: Tensor[(14, 6, 10), float64]) -> (Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) {
  %481 = cast(%var_4355, dtype="float64") /* ty=Tensor[(14, 6, 10), float64] */;
  %482 = log(%481) /* ty=Tensor[(14, 6, 10), float64] */;
  %483 = cast(%var_4355, dtype="uint8") /* ty=Tensor[(14, 6, 10), uint8] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="uint8") /* ty=Tensor[(14, 6, 10), uint8] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %487 = bitwise_xor(%485, %486) /* ty=Tensor[(14, 6, 10), uint8] */;
  %488 = cast(%487, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
  %489 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%482, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %492 = cast(meta[relay.Constant][27] /* ty=Tensor[(495), uint16] */, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %493 = reshape(%492, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), uint16] */;
  %494 = @func_3791(%493) /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %495 = cast(%487, dtype="float32") /* ty=Tensor[(14, 6, 10), float32] */;
  %496 = cast(%var_4379, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
  %497 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%482, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %500 = cast(%var_4383, dtype="float64") /* ty=Tensor[(14, 6, 10), float64] */;
  %501 = shape_of(%var_4355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%var_4355, dtype="float64") /* ty=Tensor[(14, 6, 10), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %504 = cast(meta[relay.Constant][28] /* ty=Tensor[(108, 2), float64] */, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
  %505 = reshape(%504, newshape=[12, 3, 6]) /* ty=Tensor[(12, 3, 6), float64] */;
  %506 = @func_1388(%505) /* ty=(Tensor[(12, 3, 6), float64],) */;
  %507 = multiply(%490, %491) /* ty=Tensor[(14, 6, 10), int16] */;
  %508 = %494.0;
  %509 = cos(%495) /* ty=Tensor[(14, 6, 10), float32] */;
  %510 = subtract(%498, %499) /* ty=Tensor[(14, 6, 10), int16] */;
  %511 = divide(%502, %503) /* ty=Tensor[(14, 6, 10), float64] */;
  %512 = %506.0;
  (%507, %508, meta[relay.Constant][27] /* ty=Tensor[(495), uint16] */, %509, %510, %511, %512, meta[relay.Constant][28] /* ty=Tensor[(108, 2), float64] */)
}

def @func_6478() -> Tensor[(6, 3, 12), float32] {
  @func_6260() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_5771() -> Tensor[(6, 3, 12), float64] {
  @func_2572() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_513(%var_505: Tensor[(13, 15, 9), int8]) -> (Tensor[(13, 15, 9), int8],) {
  %513 = cast(%var_505, dtype="int8") /* ty=Tensor[(13, 15, 9), int8] */;
  %514 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 15, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 15, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 15, 9), int8] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %517 = left_shift(%515, %516) /* ty=Tensor[(13, 15, 9), int8] */;
  (%517,)
}

def @func_3948(%var_3902: Tensor[(240), float64], %var_3938: Tensor[(216), float64], %var_3941: Tensor[(2730), uint8]) -> (Tensor[(1872), float64], Tensor[(13, 15, 9), int8], Tensor[(648), float64], Tensor[(240), uint8], Tensor[(6, 3, 12), int8], Tensor[(216), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) {
  %518 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
  %519 = cast(%var_3902, dtype="float64") /* ty=Tensor[(240), float64] */;
  %520 = cast(meta[relay.Constant][30] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %521 = reshape(%519, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
  %522 = reshape(%520, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %523 = @func_1212(%521, %522) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
  %524 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float64] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %525 = shape_of(%var_3902, dtype="int32") /* ty=Tensor[(1), int32] */;
  %526 = cast(%var_3902, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %528 = cast(%var_3938, dtype="float64") /* ty=Tensor[(216), float64] */;
  %529 = reshape(%528, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %530 = @func_3232(%529) /* ty=Tensor[(6, 3, 12), int8] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %532 = cast(%var_3941, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %533 = reshape(%531, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %534 = reshape(%532, newshape=[2730]) /* ty=Tensor[(2730), uint8] */;
  %535 = @func_2987(%533, %534) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) */;
  %536 = %518.0;
  %537 = %523.4;
  %538 = bitwise_and(%526, %527) /* ty=Tensor[(240), uint8] */;
  %539 = %535.1;
  (%536, %537, meta[relay.Constant][30] /* ty=Tensor[(648), float64] */, %538, %530, %var_3938, %539, %var_3941)
}

def @func_2601() -> (Tensor[(6, 3, 12), uint16],) {
  %540 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %541 = %540.0;
  %542 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 3, 12), float64] */, dtype="uint16") /* ty=Tensor[(6, 3, 12), uint16] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="uint16") /* ty=Tensor[(6, 3, 12), uint16] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %546 = minimum(%544, %545) /* ty=Tensor[(6, 3, 12), uint16] */;
  (%546,)
}

def @func_6522() -> Tensor[(2535), bool] {
  @func_5700() /* ty=Tensor[(2535), bool] */
}

def @func_4018() -> Tensor[(6, 3, 12), float32] {
  %547 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %548 = %547.0;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
  cosh(%549) /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_2572() -> Tensor[(6, 3, 12), float64] {
  %550 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %550.0
}

def @func_5414() -> (Tensor[(2535), float64],) {
  %551 = @func_3056() /* ty=Tensor[(2535), float64] */;
  (%551,)
}

def @func_5658() -> (Tensor[(6, 3, 12), float64],) {
  %552 = @func_4745() /* ty=Tensor[(6, 3, 12), float64] */;
  (%552,)
}

def @func_3501() -> (Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) {
  %553 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
  %554 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %555 = %553.1;
  %556 = %554.5;
  (%555, %556)
}

def @func_996(%var_990: Tensor[(13, 16, 9), uint32]) -> Tensor[(13, 16, 9), uint32] {
  %557 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 16, 9), uint32] */, dtype="uint32") /* ty=Tensor[(13, 16, 9), uint32] */;
  %558 = shape_of(%var_990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%var_990, dtype="uint32") /* ty=Tensor[(13, 16, 9), uint32] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%559, %560) /* ty=Tensor[(13, 16, 9), uint32] */
}

def @func_2258(%var_2253: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool],) {
  %561 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %562 = %561.0;
  %563 = cast(%var_2253, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %567 = less_equal(%565, %566) /* ty=Tensor[(6, 3, 12), bool] */;
  (%567,)
}

def @func_2639() -> (Tensor[(6, 3, 12), float64],) {
  %568 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %569 = %568.0;
  %570 = cast(%569, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %571 = sinh(%570) /* ty=Tensor[(6, 3, 12), float64] */;
  (%571,)
}

def @func_6204(%var_6190: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  %572 = cast(%var_6190, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  asinh(%572) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_4645() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
  %573 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %575 = cast(%573, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %576 = log10(%574) /* ty=Tensor[(6, 3, 12), float64] */;
  %577 = log2(%575) /* ty=Tensor[(6, 3, 12), float64] */;
  (%576, %577)
}

def @func_4649() -> (Tensor[(2535), float64],) {
  %578 = @func_3411() /* ty=Tensor[(2535), float64] */;
  (%578,)
}

def @func_4548(%var_4522: Tensor[(15, 7, 11), float32], %var_4538: Tensor[(15, 7, 11), float32]) -> (Tensor[(15, 7, 11), float64], Tensor[(15, 7, 11), bool]) {
  %579 = cast(%var_4538, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
  %580 = shape_of(%var_4522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_4522, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %583 = cast(%var_4522, dtype="float32") /* ty=Tensor[(15, 7, 11), float32] */;
  %584 = cos(%583) /* ty=Tensor[(15, 7, 11), float32] */;
  %585 = cast(%var_4522, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = mod(%581, %582) /* ty=Tensor[(15, 7, 11), float64] */;
  %590 = logical_or(%587, %588) /* ty=Tensor[(15, 7, 11), bool] */;
  (%589, %590)
}

def @func_975(%var_923: Tensor[(5, 6, 8), float64], %var_944: Tensor[(324, 2), float64]) -> (Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) {
  %591 = cast(%var_923, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %592 = sinh(%591) /* ty=Tensor[(5, 6, 8), float64] */;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %594 = cast(%var_944, dtype="float64") /* ty=Tensor[(324, 2), float64] */;
  %595 = cast(%var_944, dtype="int16") /* ty=Tensor[(324, 2), int16] */;
  %596 = cast(%var_944, dtype="float32") /* ty=Tensor[(324, 2), float32] */;
  %597 = reshape(%594, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float64] */;
  %598 = reshape(%595, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), int16] */;
  %599 = reshape(%596, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float32] */;
  %600 = @func_306(%597, %598, %599) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) */;
  %601 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 117), int8] */, dtype="int8") /* ty=Tensor[(15, 117), int8] */;
  %602 = reshape(%601, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %603 = @func_513(%602) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %604 = cast(meta[relay.Constant][35] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %605 = %600.0;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
  %607 = reshape(%604, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
  %608 = reshape(%606, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %609 = @func_909(%607, %608) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
  %610 = sin(%593) /* ty=Tensor[(5, 6, 8), float32] */;
  %611 = %603.0;
  %612 = %609.1;
  (%610, %605, %var_944, %611, meta[relay.Constant][34] /* ty=Tensor[(15, 117), int8] */, %612, meta[relay.Constant][35] /* ty=Tensor[(60), float32] */)
}

def @func_4745() -> Tensor[(6, 3, 12), float64] {
  %613 = @func_4645() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %614 = %613.0;
  %615 = cast(%614, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  tan(%615) /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_909(%var_893: Tensor[(15, 1, 4), float32], %var_905: Tensor[(648), float64]) -> (Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) {
  %616 = cast(%var_893, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
  %617 = asinh(%616) /* ty=Tensor[(15, 1, 4), float32] */;
  %618 = cast(%var_893, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %622 = cast(%var_905, dtype="float64") /* ty=Tensor[(648), float64] */;
  %623 = cast(%var_905, dtype="int16") /* ty=Tensor[(648), int16] */;
  %624 = cast(%var_905, dtype="float32") /* ty=Tensor[(648), float32] */;
  %625 = reshape(%622, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float64] */;
  %626 = reshape(%623, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), int16] */;
  %627 = reshape(%624, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float32] */;
  %628 = @func_306(%625, %626, %627) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) */;
  %629 = floor_mod(%620, %621) /* ty=Tensor[(15, ?, 4), float32] */;
  %630 = %628.2;
  (%629, %630, %var_905)
}

def @func_2987(%var_2936: Tensor[(6, 3, 12), float64], %var_2963: Tensor[(2730), uint8]) -> (Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) {
  %631 = @func_2487() /* ty=Tensor[(6, 3, 12), float64] */;
  %632 = cast(%var_2936, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %636 = cast(%var_2963, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %637 = reshape(%636, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %638 = divide(%634, %635) /* ty=Tensor[(6, 3, 12), float64] */;
  %639 = @func_1982(%637) /* ty=Tensor[(14, 15, 13), uint8] */;
  (%638, %639, %var_2963)
}

def @func_5268(%var_5265: Tensor[(11, 16, 6), float32]) -> (Tensor[(11, 16, 6), float32],) {
  %640 = cast(%var_5265, dtype="float32") /* ty=Tensor[(11, 16, 6), float32] */;
  %641 = acosh(%640) /* ty=Tensor[(11, 16, 6), float32] */;
  (%641,)
}

def @func_3360() -> (Tensor[(1872), uint32], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) {
  %642 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %643 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %644 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
  %645 = %642.1;
  %646 = cast(%645, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %647 = reshape(%646, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %648 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %649 = %643.0;
  %650 = %644.0;
  %651 = @func_996(%647) /* ty=Tensor[(13, 16, 9), uint32] */;
  %652 = %648.1;
  (%645, %649, %650, %651, %652)
}

def @func_3584(%var_3568: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
  %653 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %654 = %653.0;
  %655 = cast(%var_3568, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %660 = less(%657, %658) /* ty=Tensor[(6, 3, 12), bool] */;
  %661 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %662 = %659.0;
  (%660, %661, %662)
}

def @func_6016() -> (Tensor[(1872), float64],) {
  %663 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
  %664 = %663.0;
  (%664,)
}

def @func_5188() -> Tensor[(6, 3, 12), float64] {
  %665 = @func_2880() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %665.1
}

def @func_4323(%var_4293: Tensor[(2730), uint8], %var_4298: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(156, 12), uint32], Tensor[(1872), uint32], Tensor[(13, 16, 9), uint32], Tensor[(13, 15, 9), int8], Tensor[(240), float64], Tensor[(6, 3, 12), int8]) {
  %666 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %667 = cast(%var_4293, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %668 = reshape(%667, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %669 = cast(%var_4298, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %670 = reshape(%669, newshape=[12, 156]) /* ty=Tensor[(12, 156), uint32] */;
  %671 = @func_3889(%670) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(156, 12), uint32], Tensor[(12, 156), uint32]) */;
  %672 = cast(%var_4298, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %673 = reshape(%672, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %674 = cast(meta[relay.Constant][36] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %675 = %666.0;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %677 = cast(%var_4293, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %678 = reshape(%674, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %679 = reshape(%676, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %680 = reshape(%677, newshape=[2730]) /* ty=Tensor[(2730), uint8] */;
  %681 = @func_3948(%678, %679, %680) /* ty=(Tensor[(1872), float64], Tensor[(13, 15, 9), int8], Tensor[(648), float64], Tensor[(240), uint8], Tensor[(6, 3, 12), int8], Tensor[(216), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) */;
  %682 = cast(%675, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %683 = reshape(%682, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %684 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
  %685 = @func_1982(%668) /* ty=Tensor[(14, 15, 13), uint8] */;
  %686 = %671.1;
  %687 = @func_996(%673) /* ty=Tensor[(13, 16, 9), uint32] */;
  %688 = %681.1;
  %689 = @func_3232(%683) /* ty=Tensor[(6, 3, 12), int8] */;
  (%684, %675, %685, %var_4293, %686, %var_4298, %687, %688, meta[relay.Constant][36] /* ty=Tensor[(240), float64] */, %689)
}

def @func_1212(%var_1193: Tensor[(24, 10), float64], %var_1194: Tensor[(648), float64]) -> (Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) {
  %690 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
  %691 = cast(%var_1193, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %692 = cast(%var_1194, dtype="float64") /* ty=Tensor[(648), float64] */;
  %693 = reshape(%691, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), float64] */;
  %694 = reshape(%692, newshape=[324, 2]) /* ty=Tensor[(324, 2), float64] */;
  %695 = @func_975(%693, %694) /* ty=(Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) */;
  %696 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 117), int8] */, dtype="int8") /* ty=Tensor[(15, 117), int8] */;
  %697 = reshape(%696, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %698 = @func_513(%697) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %699 = cosh(%690) /* ty=Tensor[(10, 12, 7), float64] */;
  %700 = %695.1;
  %701 = %698.0;
  (%699, %700, %var_1193, %var_1194, %701, meta[relay.Constant][38] /* ty=Tensor[(15, 117), int8] */)
}

def @func_1911() -> (Tensor[(6, 3, 12), float64],) {
  %702 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 3, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %703 = log(%702) /* ty=Tensor[(6, 3, 12), float64] */;
  (%703,)
}

def @func_3649(%var_3620: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), int8]) {
  %704 = @func_2880() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %705 = %704.1;
  %706 = cast(%var_3620, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %710 = cast(%705, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %711 = reshape(%710, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %712 = logical_and(%708, %709) /* ty=Tensor[(6, 3, 12), bool] */;
  %713 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %714 = @func_3232(%711) /* ty=Tensor[(6, 3, 12), int8] */;
  (%712, %713, %714)
}

def @func_1388(%var_1383: Tensor[(12, 3, 6), float64]) -> (Tensor[(12, 3, 6), float64],) {
  %715 = cast(%var_1383, dtype="float64") /* ty=Tensor[(12, 3, 6), float64] */;
  %716 = cosh(%715) /* ty=Tensor[(12, 3, 6), float64] */;
  (%716,)
}

def @func_1982(%var_1977: Tensor[(14, 15, 13), uint8]) -> Tensor[(14, 15, 13), uint8] {
  %717 = cast(%var_1977, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
  %718 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(14, 15, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 15, 13), uint8] */, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%719, %720) /* ty=Tensor[(14, 15, 13), uint8] */
}

def @func_2050(%var_1989: Tensor[(15, 13, 13), float64], %var_1990: Tensor[(15, 13, 13), float64], %var_1997: Tensor[(1872), uint32]) -> (Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) {
  %721 = cast(%var_1990, dtype="float64") /* ty=Tensor[(15, 13, 13), float64] */;
  %722 = shape_of(%var_1989, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_1989, dtype="float64") /* ty=Tensor[(15, 13, 13), float64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %725 = cast(%var_1997, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %726 = reshape(%725, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %727 = @func_996(%726) /* ty=Tensor[(13, 16, 9), uint32] */;
  %728 = cast(%727, dtype="int64") /* ty=Tensor[(13, 16, 9), int64] */;
  %729 = shape_of(%var_1997, dtype="int32") /* ty=Tensor[(1), int32] */;
  %730 = cast(%var_1997, dtype="int64") /* ty=Tensor[(1872), int64] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?), int64] */;
  %732 = cast(%var_1997, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %733 = reshape(%732, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %734 = cast(%var_1997, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %735 = reshape(%734, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %736 = @func_996(%735) /* ty=Tensor[(13, 16, 9), uint32] */;
  %737 = cast(%736, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %738 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%727, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %741 = floor_mod(%723, %724) /* ty=Tensor[(15, 13, 13), float64] */;
  %742 = right_shift(%730, %731) /* ty=Tensor[(1872), int64] */;
  %743 = @func_996(%733) /* ty=Tensor[(13, 16, 9), uint32] */;
  %744 = greater(%739, %740) /* ty=Tensor[(13, 16, 9), bool] */;
  (%741, %742, %743, %744)
}

def @func_4821(%var_4799: Tensor[(11, 10, 11), float64], %var_4806: Tensor[(2730), uint8], %var_4817: Tensor[(240), float64], %var_4818: Tensor[(648), float64]) -> (Tensor[(11, 10, 11), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(2535), float64], Tensor[(6, 12, 9), bool], Tensor[(240), float64], Tensor[(648), float64]) {
  %745 = cast(%var_4799, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
  %746 = cast(%var_4806, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %747 = reshape(%746, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %748 = cast(%var_4817, dtype="float64") /* ty=Tensor[(240), float64] */;
  %749 = cast(%var_4818, dtype="float64") /* ty=Tensor[(648), float64] */;
  %750 = reshape(%748, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), float64] */;
  %751 = reshape(%749, newshape=[324, 2]) /* ty=Tensor[(324, 2), float64] */;
  %752 = @func_975(%750, %751) /* ty=(Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) */;
  %753 = erf(%745) /* ty=Tensor[(11, 10, 11), float64] */;
  %754 = @func_1982(%747) /* ty=Tensor[(14, 15, 13), uint8] */;
  %755 = @func_4062() /* ty=Tensor[(2535), float64] */;
  %756 = %752.5;
  (%753, %754, %var_4806, %755, %756, %var_4817, %var_4818)
}

def @func_2880() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
  %757 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %758 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %759 = %757.0;
  %760 = %758.0;
  (%759, %760)
}

def @func_2424(%var_2417: uint8) -> (Tensor[(6, 3, 12), float64], Tensor[(195, 9), int8], uint8, Tensor[(90, 1), uint8]) {
  %761 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %762 = cast(%var_2417, dtype="uint8") /* ty=uint8 */;
  %763 = cast(meta[relay.Constant][41] /* ty=Tensor[(90, 1), uint8] */, dtype="uint8") /* ty=Tensor[(90, 1), uint8] */;
  %764 = reshape(%762, newshape=[]) /* ty=uint8 */;
  %765 = reshape(%763, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint8] */;
  %766 = @func_1138(%764, %765) /* ty=(Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) */;
  %767 = %761.0;
  %768 = %766.2;
  (%767, %768, %var_2417, meta[relay.Constant][41] /* ty=Tensor[(90, 1), uint8] */)
}

def @func_5443() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(1755), int8], Tensor[(5, 351), int8]) {
  %769 = @func_2880() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %770 = @func_4898() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) */;
  %771 = %770.0;
  %772 = cast(%771, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
  %773 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 351), int8] */, dtype="int8") /* ty=Tensor[(5, 351), int8] */;
  %774 = reshape(%773, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
  %775 = @func_4954(%774) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) */;
  %776 = %769.0;
  %777 = cos(%772) /* ty=Tensor[(6, 3, 12), float32] */;
  %778 = %775.3;
  (%776, %777, %778, meta[relay.Constant][42] /* ty=Tensor[(5, 351), int8] */)
}

def @func_5897() -> (int16,) {
  %779 = @func_4898() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) */;
  %780 = %779.2;
  (%780,)
}

def @func_6329() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(2535), float64]) {
  %781 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
  %782 = @func_2572() /* ty=Tensor[(6, 3, 12), float64] */;
  %783 = %781.0;
  %784 = @func_3056() /* ty=Tensor[(2535), float64] */;
  (%782, %783, %784)
}

def @func_6493() -> Tensor[(6, 3, 12), float64] {
  @func_5771() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_3682() -> (Tensor[(1872), float64],) {
  %785 = @func_3501() /* ty=(Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) */;
  %786 = %785.0;
  %787 = cast(%786, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %788 = sqrt(%787) /* ty=Tensor[(1872), float64] */;
  (%788,)
}

def @func_306(%var_226: Tensor[(6, 12, 9), float64], %var_286: Tensor[(6, 12, 9), int16], %var_292: Tensor[(6, 12, 9), float32]) -> (Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) {
  %789 = cast(%var_226, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %790 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 12, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %793 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
  %794 = shape_of(%var_226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%var_226, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %797 = floor_mod(%795, %796) /* ty=Tensor[(6, 12, 9), float64] */;
  %798 = cast(%797, dtype="int16") /* ty=Tensor[(6, 12, 9), int16] */;
  %799 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int16") /* ty=Tensor[(6, 12, 9), int16] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %802 = bitwise_xor(%800, %801) /* ty=Tensor[(6, 12, 9), int16] */;
  %803 = cast(%var_286, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
  %804 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%802, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %807 = cast(%var_226, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
  %808 = log(%807) /* ty=Tensor[(6, 12, 9), float32] */;
  %809 = cast(%var_292, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %813 = less_equal(%791, %792) /* ty=Tensor[(6, 12, 9), bool] */;
  %814 = mod(%805, %806) /* ty=Tensor[(6, 12, 9), float32] */;
  %815 = logical_and(%811, %812) /* ty=Tensor[(6, 12, 9), bool] */;
  (%813, %814, %815)
}

def @func_5861() -> Tensor[(2535), float32] {
  %816 = @func_3056() /* ty=Tensor[(2535), float64] */;
  %817 = cast(%816, dtype="float32") /* ty=Tensor[(2535), float32] */;
  sqrt(%817) /* ty=Tensor[(2535), float32] */
}

def @func_6386() -> (Tensor[(6, 3, 12), float32],) {
  %818 = @func_4767() /* ty=Tensor[(6, 3, 12), float32] */;
  (%818,)
}

def @func_2750() -> (Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) {
  %819 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
  %820 = cast(meta[relay.Constant][44] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %821 = cast(meta[relay.Constant][44] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %822 = cast(meta[relay.Constant][45] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %823 = reshape(%820, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
  %824 = reshape(%821, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
  %825 = reshape(%822, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %826 = @func_2050(%823, %824, %825) /* ty=(Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) */;
  %827 = %819.0;
  %828 = %826.1;
  (%827, %828, meta[relay.Constant][44] /* ty=Tensor[(2535), float64] */, meta[relay.Constant][45] /* ty=Tensor[(1872), uint32] */)
}

def @func_2342() -> (Tensor[(6, 3, 12), float64],) {
  %829 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %830 = %829.0;
  (%830,)
}

def @func_4954(%var_4928: Tensor[(1755), int8]) -> (Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) {
  %831 = cast(meta[relay.Constant][46] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %832 = cast(%var_4928, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %833 = reshape(%831, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %834 = reshape(%832, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
  %835 = @func_2862(%833, %834) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(24, 10), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8], Tensor[(6, 3, 12), float64]) */;
  %836 = cast(meta[relay.Constant][47] /* ty=Tensor[(896), uint16] */, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %837 = cast(meta[relay.Constant][47] /* ty=Tensor[(896), uint16] */, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %838 = reshape(%836, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint16] */;
  %839 = reshape(%837, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint16] */;
  %840 = @func_3703(%838, %839) /* ty=(Tensor[(14, 16, 4), bool],) */;
  %841 = @func_4745() /* ty=Tensor[(6, 3, 12), float64] */;
  %842 = %835.2;
  %843 = %840.0;
  (%841, %842, meta[relay.Constant][46] /* ty=Tensor[(648), float64] */, %var_4928, %843, meta[relay.Constant][47] /* ty=Tensor[(896), uint16] */)
}

def @func_5798() -> Tensor[(2535), float64] {
  @func_4062() /* ty=Tensor[(2535), float64] */
}

def @func_6761() -> (Tensor[(6, 3, 12), float64], Tensor[(900), uint8], Tensor[(270), uint32], Tensor[(840), float64], Tensor[(2535), float64], Tensor[(12, 70), float64], Tensor[(90, 10), float32]) {
  %844 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %845 = @func_5930() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(270), uint32]) */;
  %846 = cast(meta[relay.Constant][49] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %847 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 70), float64] */, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
  %848 = reshape(%846, newshape=[2535]) /* ty=Tensor[(2535), float64] */;
  %849 = reshape(%847, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %850 = @func_4705(%848, %849) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(14, 6, 10), float64], Tensor[(840), float64]) */;
  %851 = cast(meta[relay.Constant][48] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %852 = reshape(%851, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint8] */;
  %853 = @func_3084(%852) /* ty=(Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) */;
  %854 = %853.1;
  %855 = cast(%854, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %856 = atan(%855) /* ty=Tensor[(90, 10), float32] */;
  %857 = cast(%856, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %858 = erf(%857) /* ty=Tensor[(90, 10), float32] */;
  %859 = cast(%858, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %860 = %844.0;
  %861 = %845.1;
  %862 = %850.3;
  %863 = tan(%859) /* ty=Tensor[(90, 10), float32] */;
  (%860, meta[relay.Constant][48] /* ty=Tensor[(900), uint8] */, %861, %862, meta[relay.Constant][49] /* ty=Tensor[(2535), float64] */, meta[relay.Constant][50] /* ty=Tensor[(12, 70), float64] */, %863)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2342() -> (Tensor[(6, 3, 12), float64],) {
  %0 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_1216(%var_1214: Tensor[(24, 10), float64], %var_1215: Tensor[(648), float64]) -> (Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) {
  @func_1212(%var_1214, %var_1215) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */
}

def @func_5799() -> Tensor[(2535), float64] {
  %2 = fn () -> Tensor[(2535), float64] {
    @func_4062() /* ty=Tensor[(2535), float64] */
  };
  %2() /* ty=Tensor[(2535), float64] */
}

def @func_5861() -> Tensor[(2535), float32] {
  %3 = @func_3056() /* ty=Tensor[(2535), float64] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(2535), float32] */;
  sqrt(%4) /* ty=Tensor[(2535), float32] */
}

def @func_6330() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(2535), float64]) {
  %9 = fn () -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(2535), float64]) {
    %5 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
    %6 = @func_2572() /* ty=Tensor[(6, 3, 12), float64] */;
    %7 = %5.0;
    %8 = @func_3056() /* ty=Tensor[(2535), float64] */;
    (%6, %7, %8)
  };
  %9() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(2535), float64]) */
}

def @func_310(%var_307: Tensor[(6, 12, 9), float64], %var_308: Tensor[(6, 12, 9), int16], %var_309: Tensor[(6, 12, 9), float32]) -> (Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) {
  %37 = fn (%var_226: Tensor[(6, 12, 9), float64], %var_286: Tensor[(6, 12, 9), int16], %var_292: Tensor[(6, 12, 9), float32]) -> (Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) {
    %10 = cast(%var_226, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
    %11 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
    %15 = shape_of(%var_226, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%var_226, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %18 = floor_mod(%16, %17) /* ty=Tensor[(6, 12, 9), float64] */;
    %19 = cast(%18, dtype="int16") /* ty=Tensor[(6, 12, 9), int16] */;
    %20 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int16") /* ty=Tensor[(6, 12, 9), int16] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %23 = bitwise_xor(%21, %22) /* ty=Tensor[(6, 12, 9), int16] */;
    %24 = cast(%var_286, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
    %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(%23, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %28 = cast(%var_226, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
    %29 = log(%28) /* ty=Tensor[(6, 12, 9), float32] */;
    %30 = cast(%var_292, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
    %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
    %32 = cast(%29, dtype="bool") /* ty=Tensor[(6, 12, 9), bool] */;
    %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %34 = less_equal(%12, %13) /* ty=Tensor[(6, 12, 9), bool] */;
    %35 = mod(%26, %27) /* ty=Tensor[(6, 12, 9), float32] */;
    %36 = logical_and(%32, %33) /* ty=Tensor[(6, 12, 9), bool] */;
    (%34, %35, %36)
  };
  %37(%var_307, %var_308, %var_309) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) */
}

def @func_4660(%var_4658: Tensor[(12, 10, 6), uint32]) -> (Tensor[(12, 10, 6), uint32],) {
  @func_4657(%var_4658) /* ty=(Tensor[(12, 10, 6), uint32],) */
}

def @func_1142(%var_1140: uint8, %var_1141: Tensor[(9, 5, 2), uint8]) -> (Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) {
  @func_1138(%var_1140, %var_1141) /* ty=(Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) */
}

def @main(%var_6915: Tensor[(495), uint16]) -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(9, 5, 11), bool]) {
  %38 = cast(%var_6915, dtype="uint16") /* ty=Tensor[(495), uint16] */;
  %39 = reshape(%38, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), uint16] */;
  %40 = @func_3794(%39) /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %41 = %40.0;
  %42 = cast(%var_6915, dtype="bool") /* ty=Tensor[(495), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %46 = @func_6493() /* ty=Tensor[(6, 3, 12), float64] */;
  %47 = @func_4062() /* ty=Tensor[(2535), float64] */;
  %48 = greater(%44, %45) /* ty=Tensor[(9, 5, 11), bool] */;
  (%46, %47, %48)
}

def @func_2055(%var_2052: Tensor[(15, 13, 13), float64], %var_2053: Tensor[(15, 13, 13), float64], %var_2054: Tensor[(1872), uint32]) -> (Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) {
  @func_2050(%var_2052, %var_2053, %var_2054) /* ty=(Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) */
}

def @func_5877() -> (Tensor[(6, 3, 12), float32],) {
  %49 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
  (%49,)
}

def @func_6670(%var_6667: Tensor[(11, 15, 16), float64], %var_6668: Tensor[(11, 15, 16), float64], %var_6669: Tensor[(1755), int8]) -> (Tensor[(11, 15, 16), float64], Tensor[(6, 3, 12), float64], Tensor[(1755), int8]) {
  %59 = fn (%var_6629: Tensor[(11, 15, 16), float64], %var_6630: Tensor[(11, 15, 16), float64], %var_6638: Tensor[(1755), int8]) -> (Tensor[(11, 15, 16), float64], Tensor[(6, 3, 12), float64], Tensor[(1755), int8]) {
    %50 = cast(%var_6630, dtype="float64") /* ty=Tensor[(11, 15, 16), float64] */;
    %51 = shape_of(%var_6629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(%var_6629, dtype="float64") /* ty=Tensor[(11, 15, 16), float64] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %54 = cast(%var_6638, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %55 = reshape(%54, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
    %56 = @func_4954(%55) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) */;
    %57 = floor_divide(%52, %53) /* ty=Tensor[(11, 15, 16), float64] */;
    %58 = %56.0;
    (%57, %58, %var_6638)
  };
  %59(%var_6667, %var_6668, %var_6669) /* ty=(Tensor[(11, 15, 16), float64], Tensor[(6, 3, 12), float64], Tensor[(1755), int8]) */
}

def @func_6187() -> (Tensor[(6, 3, 12), float32],) {
  %61 = fn () -> (Tensor[(6, 3, 12), float32],) {
    %60 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
    (%60,)
  };
  %61() /* ty=(Tensor[(6, 3, 12), float32],) */
}

def @func_2991(%var_2989: Tensor[(6, 3, 12), float64], %var_2990: Tensor[(2730), uint8]) -> (Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) {
  @func_2987(%var_2989, %var_2990) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) */
}

def @func_4745() -> Tensor[(6, 3, 12), float64] {
  %62 = @func_4645() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  tan(%64) /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_5188() -> Tensor[(6, 3, 12), float64] {
  %65 = @func_2880() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %65.1
}

def @func_5899() -> (int16,) {
  @func_5897() /* ty=(int16,) */
}

def @func_5580(%var_5578: uint8, %var_5579: Tensor[(15, 6), uint8]) -> (Tensor[(2535), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), float64], Tensor[(156, 12), float64], Tensor[(13, 15, 9), int8], uint8, Tensor[(15, 6), uint8]) {
  %82 = fn (%var_5571: uint8, %var_5572: Tensor[(15, 6), uint8]) -> (Tensor[(2535), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), float64], Tensor[(156, 12), float64], Tensor[(13, 15, 9), int8], uint8, Tensor[(15, 6), uint8]) {
    %66 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
    %67 = %66.0;
    %68 = cast(%67, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %69 = reshape(%68, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
    %70 = @func_3211(%69) /* ty=(Tensor[(156, 12), uint32], Tensor[(1872), uint32]) */;
    %71 = %70.0;
    %72 = cast(%71, dtype="float64") /* ty=Tensor[(156, 12), float64] */;
    %73 = cast(%var_5571, dtype="uint8") /* ty=uint8 */;
    %74 = cast(%var_5572, dtype="uint8") /* ty=Tensor[(15, 6), uint8] */;
    %75 = reshape(%73, newshape=[]) /* ty=uint8 */;
    %76 = reshape(%74, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint8] */;
    %77 = @func_1138(%75, %76) /* ty=(Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) */;
    %78 = @func_3056() /* ty=Tensor[(2535), float64] */;
    %79 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
    %80 = sin(%72) /* ty=Tensor[(156, 12), float64] */;
    %81 = %77.1;
    (%78, %79, %67, %80, %81, %var_5571, %var_5572)
  };
  %82(%var_5578, %var_5579) /* ty=(Tensor[(2535), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), float64], Tensor[(156, 12), float64], Tensor[(13, 15, 9), int8], uint8, Tensor[(15, 6), uint8]) */
}

def @func_6443(%var_6409: Tensor[(21, 4), float32]) -> (Tensor[(6, 3, 12), float32], Tensor[(3, 14, 2), float64]) {
  %83 = cast(%var_6409, dtype="float32") /* ty=Tensor[(21, 4), float32] */;
  %84 = reshape(%83, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float32] */;
  %85 = @func_5134(%84) /* ty=(Tensor[(3, 14, 2), int64], Tensor[(6, 3, 12), float64], Tensor[(3, 14, 2), float64]) */;
  %86 = %85.0;
  %87 = cast(%var_6409, dtype="uint16") /* ty=Tensor[(21, 4), uint16] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="uint16") /* ty=Tensor[(3, 14, 2), uint16] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %91 = logical_xor(%89, %90) /* ty=Tensor[(3, 14, 2), uint16] */;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %93 = @func_6260() /* ty=Tensor[(6, 3, 12), float32] */;
  %94 = rsqrt(%92) /* ty=Tensor[(3, 14, 2), float64] */;
  (%93, %94)
}

def @func_2322(%var_2319: int16, %var_2320: Tensor[(9, 14, 4), int16], %var_2321: Tensor[(1872), uint32]) -> (Tensor[(9, 14, 4), int16], Tensor[(1872), float32]) {
  %111 = fn (%var_2272: int16, %var_2273: Tensor[(9, 14, 4), int16], %var_2284: Tensor[(1872), uint32]) -> (Tensor[(9, 14, 4), int16], Tensor[(1872), float32]) {
    %95 = cast(%var_2272, dtype="int16") /* ty=int16 */;
    %96 = cast(%var_2273, dtype="int16") /* ty=Tensor[(9, 14, 4), int16] */;
    %97 = cast(%var_2284, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %98 = reshape(%97, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
    %99 = @func_996(%98) /* ty=Tensor[(13, 16, 9), uint32] */;
    %100 = cast(%var_2284, dtype="uint8") /* ty=Tensor[(1872), uint8] */;
    %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
    %102 = cast(%99, dtype="uint8") /* ty=Tensor[(13, 16, 9), uint8] */;
    %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %104 = left_shift(%102, %103) /* ty=Tensor[(13, 16, 9), uint8] */;
    %105 = cast(%104, dtype="float32") /* ty=Tensor[(13, 16, 9), float32] */;
    %106 = shape_of(%var_2284, dtype="int32") /* ty=Tensor[(1), int32] */;
    %107 = cast(%var_2284, dtype="float32") /* ty=Tensor[(1872), float32] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?), float32] */;
    %109 = bitwise_or(%95, %96) /* ty=Tensor[(9, 14, 4), int16] */;
    %110 = divide(%107, %108) /* ty=Tensor[(1872), float32] */;
    (%109, %110)
  };
  %111(%var_2319, %var_2320, %var_2321) /* ty=(Tensor[(9, 14, 4), int16], Tensor[(1872), float32]) */
}

def @func_2344() -> (Tensor[(6, 3, 12), float64],) {
  @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */
}

def @func_6761() -> (Tensor[(6, 3, 12), float64], Tensor[(900), uint8], Tensor[(270), uint32], Tensor[(840), float64], Tensor[(2535), float64], Tensor[(12, 70), float64], Tensor[(90, 10), float32]) {
  %112 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %113 = @func_5930() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(270), uint32]) */;
  %114 = cast(meta[relay.Constant][2] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %115 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 70), float64] */, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
  %116 = reshape(%114, newshape=[2535]) /* ty=Tensor[(2535), float64] */;
  %117 = reshape(%115, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %118 = @func_4705(%116, %117) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(14, 6, 10), float64], Tensor[(840), float64]) */;
  %119 = cast(meta[relay.Constant][1] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %120 = reshape(%119, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint8] */;
  %121 = @func_3084(%120) /* ty=(Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) */;
  %122 = %121.1;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %124 = atan(%123) /* ty=Tensor[(90, 10), float32] */;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %126 = erf(%125) /* ty=Tensor[(90, 10), float32] */;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %128 = %112.0;
  %129 = %113.1;
  %130 = %118.3;
  %131 = tan(%127) /* ty=Tensor[(90, 10), float32] */;
  (%128, meta[relay.Constant][1] /* ty=Tensor[(900), uint8] */, %129, %130, meta[relay.Constant][2] /* ty=Tensor[(2535), float64] */, meta[relay.Constant][3] /* ty=Tensor[(12, 70), float64] */, %131)
}

def @func_4099(%var_4097: Tensor[(240), float64], %var_4098: Tensor[(648), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(15, 117), int8], Tensor[(240), float64], Tensor[(648), float64], Tensor[(6, 3, 12), float64]) {
  %144 = fn (%var_4085: Tensor[(240), float64], %var_4086: Tensor[(648), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(15, 117), int8], Tensor[(240), float64], Tensor[(648), float64], Tensor[(6, 3, 12), float64]) {
    %132 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
    %133 = cast(%132, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
    %134 = cast(%var_4085, dtype="float64") /* ty=Tensor[(240), float64] */;
    %135 = cast(%var_4086, dtype="float64") /* ty=Tensor[(648), float64] */;
    %136 = reshape(%134, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
    %137 = reshape(%135, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %138 = @func_1212(%136, %137) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
    %139 = @func_3501() /* ty=(Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) */;
    %140 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
    %141 = exp(%133) /* ty=Tensor[(6, 3, 12), float32] */;
    %142 = %138.5;
    %143 = %139.1;
    (%140, %141, %142, %var_4085, %var_4086, %143)
  };
  %144(%var_4097, %var_4098) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(15, 117), int8], Tensor[(240), float64], Tensor[(648), float64], Tensor[(6, 3, 12), float64]) */
}

def @func_6286() -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64]) {
  @func_6284() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(2535), float64]) */
}

def @func_4436(%var_4435: Tensor[(495), uint16]) -> (Tensor[(2535), float64], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16]) {
  %150 = fn (%var_4432: Tensor[(495), uint16]) -> (Tensor[(2535), float64], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16]) {
    %145 = cast(%var_4432, dtype="uint16") /* ty=Tensor[(495), uint16] */;
    %146 = reshape(%145, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), uint16] */;
    %147 = @func_3791(%146) /* ty=(Tensor[(9, 5, 11), uint16],) */;
    %148 = @func_3411() /* ty=Tensor[(2535), float64] */;
    %149 = %147.0;
    (%148, %149, %var_4432)
  };
  %150(%var_4435) /* ty=(Tensor[(2535), float64], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16]) */
}

def @func_5414() -> (Tensor[(2535), float64],) {
  %151 = @func_3056() /* ty=Tensor[(2535), float64] */;
  (%151,)
}

def @func_4323(%var_4293: Tensor[(2730), uint8], %var_4298: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(156, 12), uint32], Tensor[(1872), uint32], Tensor[(13, 16, 9), uint32], Tensor[(13, 15, 9), int8], Tensor[(240), float64], Tensor[(6, 3, 12), int8]) {
  %152 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %153 = cast(%var_4293, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %154 = reshape(%153, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %155 = cast(%var_4298, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %156 = reshape(%155, newshape=[12, 156]) /* ty=Tensor[(12, 156), uint32] */;
  %157 = @func_3889(%156) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(156, 12), uint32], Tensor[(12, 156), uint32]) */;
  %158 = cast(%var_4298, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %159 = reshape(%158, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %160 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %161 = %152.0;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %163 = cast(%var_4293, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %164 = reshape(%160, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %165 = reshape(%162, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %166 = reshape(%163, newshape=[2730]) /* ty=Tensor[(2730), uint8] */;
  %167 = @func_3948(%164, %165, %166) /* ty=(Tensor[(1872), float64], Tensor[(13, 15, 9), int8], Tensor[(648), float64], Tensor[(240), uint8], Tensor[(6, 3, 12), int8], Tensor[(216), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) */;
  %168 = cast(%161, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %169 = reshape(%168, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %170 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
  %171 = @func_1982(%154) /* ty=Tensor[(14, 15, 13), uint8] */;
  %172 = %157.1;
  %173 = @func_996(%159) /* ty=Tensor[(13, 16, 9), uint32] */;
  %174 = %167.1;
  %175 = @func_3232(%169) /* ty=Tensor[(6, 3, 12), int8] */;
  (%170, %161, %171, %var_4293, %172, %var_4298, %173, %174, meta[relay.Constant][4] /* ty=Tensor[(240), float64] */, %175)
}

def @func_2880() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
  %176 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %177 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %178 = %176.0;
  %179 = %177.0;
  (%178, %179)
}

def @func_4988() -> (Tensor[(156, 12), uint32],) {
  @func_4986() /* ty=(Tensor[(156, 12), uint32],) */
}

def @func_6153(%var_6101: Tensor[(648), float64], %var_6104: Tensor[(648), float64], %var_6130: uint8, %var_6147: Tensor[(12, 3, 6), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), uint32], Tensor[(240), float64], Tensor[(648), float64], Tensor[(648), bool], Tensor[(648), float64], Tensor[(495), uint16], Tensor[(840), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], uint8, Tensor[(90), uint8], Tensor[(6, 3, 12), float64], Tensor[(12, 3, 6), bool]) {
  %180 = @func_5658() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %181 = @func_4645() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %182 = @func_5493() /* ty=(Tensor[(1872), uint32],) */;
  %183 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %184 = cast(%var_6101, dtype="float64") /* ty=Tensor[(648), float64] */;
  %185 = reshape(%183, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
  %186 = reshape(%184, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %187 = @func_1212(%185, %186) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
  %188 = %187.3;
  %189 = cast(%var_6104, dtype="bool") /* ty=Tensor[(648), bool] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(1), int32] */;
  %191 = cast(%188, dtype="bool") /* ty=Tensor[(648), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?), bool] */;
  %193 = cast(%var_6104, dtype="float64") /* ty=Tensor[(648), float64] */;
  %194 = shape_of(%188, dtype="int32") /* ty=Tensor[(1), int32] */;
  %195 = cast(%188, dtype="float64") /* ty=Tensor[(648), float64] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?), float64] */;
  %197 = cast(meta[relay.Constant][6] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %198 = cast(meta[relay.Constant][6] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %199 = cast(meta[relay.Constant][6] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %200 = reshape(%197, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %201 = reshape(%198, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %202 = reshape(%199, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %203 = @func_4418(%200, %201, %202) /* ty=(Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) */;
  %204 = @func_2819() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) */;
  %205 = cast(%var_6130, dtype="uint8") /* ty=uint8 */;
  %206 = cast(meta[relay.Constant][7] /* ty=Tensor[(90), uint8] */, dtype="uint8") /* ty=Tensor[(90), uint8] */;
  %207 = reshape(%205, newshape=[]) /* ty=uint8 */;
  %208 = reshape(%206, newshape=[15, 6]) /* ty=Tensor[(15, 6), uint8] */;
  %209 = @func_5577(%207, %208) /* ty=(Tensor[(2535), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), float64], Tensor[(156, 12), float64], Tensor[(13, 15, 9), int8], uint8, Tensor[(15, 6), uint8]) */;
  %210 = @func_5771() /* ty=Tensor[(6, 3, 12), float64] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %212 = reshape(%211, newshape=[12, 3, 6]) /* ty=Tensor[(12, 3, 6), float64] */;
  %213 = @func_1388(%212) /* ty=(Tensor[(12, 3, 6), float64],) */;
  %214 = %213.0;
  %215 = cast(%var_6147, dtype="bool") /* ty=Tensor[(12, 3, 6), bool] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="bool") /* ty=Tensor[(12, 3, 6), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = @func_2487() /* ty=Tensor[(6, 3, 12), float64] */;
  %220 = %180.0;
  %221 = %181.1;
  %222 = %182.0;
  %223 = greater(%191, %192) /* ty=Tensor[(648), bool] */;
  %224 = mod(%195, %196) /* ty=Tensor[(648), float64] */;
  %225 = %203.2;
  %226 = %204.0;
  %227 = %209.1;
  %228 = greater_equal(%217, %218) /* ty=Tensor[(12, 3, 6), bool] */;
  (%219, %220, %221, %222, meta[relay.Constant][5] /* ty=Tensor[(240), float64] */, %var_6101, %223, %224, %225, meta[relay.Constant][6] /* ty=Tensor[(840), float64] */, %226, %227, %var_6130, meta[relay.Constant][7] /* ty=Tensor[(90), uint8] */, %210, %228)
}

def @func_4062() -> Tensor[(2535), float64] {
  @func_3411() /* ty=Tensor[(2535), float64] */
}

def @func_3683() -> (Tensor[(1872), float64],) {
  %233 = fn () -> (Tensor[(1872), float64],) {
    %229 = @func_3501() /* ty=(Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) */;
    %230 = %229.0;
    %231 = cast(%230, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %232 = sqrt(%231) /* ty=Tensor[(1872), float64] */;
    (%232,)
  };
  %233() /* ty=(Tensor[(1872), float64],) */
}

def @func_909(%var_893: Tensor[(15, 1, 4), float32], %var_905: Tensor[(648), float64]) -> (Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) {
  %234 = cast(%var_893, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
  %235 = asinh(%234) /* ty=Tensor[(15, 1, 4), float32] */;
  %236 = cast(%var_893, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="float32") /* ty=Tensor[(15, 1, 4), float32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %240 = cast(%var_905, dtype="float64") /* ty=Tensor[(648), float64] */;
  %241 = cast(%var_905, dtype="int16") /* ty=Tensor[(648), int16] */;
  %242 = cast(%var_905, dtype="float32") /* ty=Tensor[(648), float32] */;
  %243 = reshape(%240, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float64] */;
  %244 = reshape(%241, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), int16] */;
  %245 = reshape(%242, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float32] */;
  %246 = @func_306(%243, %244, %245) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) */;
  %247 = floor_mod(%238, %239) /* ty=Tensor[(15, ?, 4), float32] */;
  %248 = %246.2;
  (%247, %248, %var_905)
}

def @func_5772() -> Tensor[(6, 3, 12), float64] {
  %249 = fn () -> Tensor[(6, 3, 12), float64] {
    @func_2572() /* ty=Tensor[(6, 3, 12), float64] */
  };
  %249() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_2751() -> (Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) {
  %260 = fn () -> (Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) {
    %250 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
    %251 = cast(meta[relay.Constant][8] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %252 = cast(meta[relay.Constant][8] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %253 = cast(meta[relay.Constant][9] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %254 = reshape(%251, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
    %255 = reshape(%252, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
    %256 = reshape(%253, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
    %257 = @func_2050(%254, %255, %256) /* ty=(Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) */;
    %258 = %250.0;
    %259 = %257.1;
    (%258, %259, meta[relay.Constant][8] /* ty=Tensor[(2535), float64] */, meta[relay.Constant][9] /* ty=Tensor[(1872), uint32] */)
  };
  %260() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */
}

def @func_6495() -> Tensor[(6, 3, 12), float64] {
  @func_6493() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_2601() -> (Tensor[(6, 3, 12), uint16],) {
  %261 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %262 = %261.0;
  %263 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 3, 12), float64] */, dtype="uint16") /* ty=Tensor[(6, 3, 12), uint16] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="uint16") /* ty=Tensor[(6, 3, 12), uint16] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %267 = minimum(%265, %266) /* ty=Tensor[(6, 3, 12), uint16] */;
  (%267,)
}

def @func_1059(%var_1056: uint16, %var_1057: Tensor[(1, 14, 14), uint16], %var_1058: Tensor[(60), float32]) -> (Tensor[(1, 14, 14), bool], Tensor[(6, 12, 9), bool], Tensor[(60), float32], Tensor[(648), float64]) {
  %280 = fn (%var_1009: uint16, %var_1010: Tensor[(1, 14, 14), uint16], %var_1035: Tensor[(60), float32]) -> (Tensor[(1, 14, 14), bool], Tensor[(6, 12, 9), bool], Tensor[(60), float32], Tensor[(648), float64]) {
    %268 = cast(%var_1009, dtype="bool") /* ty=bool */;
    %269 = cast(%var_1010, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
    %270 = cast(%var_1035, dtype="float32") /* ty=Tensor[(60), float32] */;
    %271 = cast(meta[relay.Constant][11] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
    %272 = reshape(%270, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
    %273 = reshape(%271, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %274 = @func_909(%272, %273) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
    %275 = cast(meta[relay.Constant][11] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
    %276 = cast(%var_1009, dtype="float64") /* ty=float64 */;
    %277 = equal(%268, %269) /* ty=Tensor[(1, 14, 14), bool] */;
    %278 = %274.1;
    %279 = floor_divide(%275, %276) /* ty=Tensor[(648), float64] */;
    (%277, %278, %var_1035, %279)
  };
  %280(%var_1056, %var_1057, %var_1058) /* ty=(Tensor[(1, 14, 14), bool], Tensor[(6, 12, 9), bool], Tensor[(60), float32], Tensor[(648), float64]) */
}

def @func_6480() -> Tensor[(6, 3, 12), float32] {
  @func_6478() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_913(%var_911: Tensor[(15, 1, 4), float32], %var_912: Tensor[(648), float64]) -> (Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) {
  @func_909(%var_911, %var_912) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */
}

def @func_3953(%var_3950: Tensor[(240), float64], %var_3951: Tensor[(216), float64], %var_3952: Tensor[(2730), uint8]) -> (Tensor[(1872), float64], Tensor[(13, 15, 9), int8], Tensor[(648), float64], Tensor[(240), uint8], Tensor[(6, 3, 12), int8], Tensor[(216), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) {
  @func_3948(%var_3950, %var_3951, %var_3952) /* ty=(Tensor[(1872), float64], Tensor[(13, 15, 9), int8], Tensor[(648), float64], Tensor[(240), uint8], Tensor[(6, 3, 12), int8], Tensor[(216), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) */
}

def @func_2050(%var_1989: Tensor[(15, 13, 13), float64], %var_1990: Tensor[(15, 13, 13), float64], %var_1997: Tensor[(1872), uint32]) -> (Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) {
  %281 = cast(%var_1990, dtype="float64") /* ty=Tensor[(15, 13, 13), float64] */;
  %282 = shape_of(%var_1989, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_1989, dtype="float64") /* ty=Tensor[(15, 13, 13), float64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %285 = cast(%var_1997, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %286 = reshape(%285, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %287 = @func_996(%286) /* ty=Tensor[(13, 16, 9), uint32] */;
  %288 = cast(%287, dtype="int64") /* ty=Tensor[(13, 16, 9), int64] */;
  %289 = shape_of(%var_1997, dtype="int32") /* ty=Tensor[(1), int32] */;
  %290 = cast(%var_1997, dtype="int64") /* ty=Tensor[(1872), int64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?), int64] */;
  %292 = cast(%var_1997, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %293 = reshape(%292, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %294 = cast(%var_1997, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %295 = reshape(%294, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
  %296 = @func_996(%295) /* ty=Tensor[(13, 16, 9), uint32] */;
  %297 = cast(%296, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %298 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%287, dtype="bool") /* ty=Tensor[(13, 16, 9), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %301 = floor_mod(%283, %284) /* ty=Tensor[(15, 13, 13), float64] */;
  %302 = right_shift(%290, %291) /* ty=Tensor[(1872), int64] */;
  %303 = @func_996(%293) /* ty=Tensor[(13, 16, 9), uint32] */;
  %304 = greater(%299, %300) /* ty=Tensor[(13, 16, 9), bool] */;
  (%301, %302, %303, %304)
}

def @func_4794(%var_4773: Tensor[(13, 11, 2), float32]) -> Tensor[(13, 11, 2), float32] {
  %305 = cast(%var_4773, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  sqrt(%305) /* ty=Tensor[(13, 11, 2), float32] */
}

def @func_5975() -> (Tensor[(2535), float64], Tensor[(6, 3, 12), float64]) {
  %306 = @func_5414() /* ty=(Tensor[(2535), float64],) */;
  %307 = %306.0;
  %308 = @func_2572() /* ty=Tensor[(6, 3, 12), float64] */;
  (%307, %308)
}

def @func_3086(%var_3085: Tensor[(90, 10), uint8]) -> (Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) {
  %320 = fn (%var_3074: Tensor[(90, 10), uint8]) -> (Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) {
    %309 = cast(meta[relay.Constant][12] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %310 = reshape(%309, newshape=[]) /* ty=uint8 */;
    %311 = @func_2424(%310) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(195, 9), int8], uint8, Tensor[(90, 1), uint8]) */;
    %312 = %311.3;
    %313 = cast(%312, dtype="uint16") /* ty=Tensor[(90, 1), uint16] */;
    %314 = cast(%var_3074, dtype="uint16") /* ty=Tensor[(90, 10), uint16] */;
    %315 = cast(%var_3074, dtype="bool") /* ty=Tensor[(90, 10), bool] */;
    %316 = cast(meta[relay.Constant][12] /* ty=uint8 */, dtype="bool") /* ty=bool */;
    %317 = @func_3056() /* ty=Tensor[(2535), float64] */;
    %318 = bitwise_and(%313, %314) /* ty=Tensor[(90, 10), uint16] */;
    %319 = greater_equal(%315, %316) /* ty=Tensor[(90, 10), bool] */;
    (%317, %318, %319)
  };
  %320(%var_3085) /* ty=(Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) */
}

def @func_1982(%var_1977: Tensor[(14, 15, 13), uint8]) -> Tensor[(14, 15, 13), uint8] {
  %321 = cast(%var_1977, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
  %322 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(14, 15, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 15, 13), uint8] */, dtype="uint8") /* ty=Tensor[(14, 15, 13), uint8] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%323, %324) /* ty=Tensor[(14, 15, 13), uint8] */
}

def @func_3502() -> (Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) {
  %329 = fn () -> (Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) {
    %325 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
    %326 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
    %327 = %325.1;
    %328 = %326.5;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) */
}

def @func_996(%var_990: Tensor[(13, 16, 9), uint32]) -> Tensor[(13, 16, 9), uint32] {
  %330 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 16, 9), uint32] */, dtype="uint32") /* ty=Tensor[(13, 16, 9), uint32] */;
  %331 = shape_of(%var_990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_990, dtype="uint32") /* ty=Tensor[(13, 16, 9), uint32] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%332, %333) /* ty=Tensor[(13, 16, 9), uint32] */
}

def @func_3706(%var_3704: Tensor[(14, 16, 4), uint16], %var_3705: Tensor[(14, 16, 4), uint16]) -> (Tensor[(14, 16, 4), bool],) {
  %339 = fn (%var_3698: Tensor[(14, 16, 4), uint16], %var_3699: Tensor[(14, 16, 4), uint16]) -> (Tensor[(14, 16, 4), bool],) {
    %334 = cast(%var_3699, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
    %335 = shape_of(%var_3698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%var_3698, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %338 = greater_equal(%336, %337) /* ty=Tensor[(14, 16, 4), bool] */;
    (%338,)
  };
  %339(%var_3704, %var_3705) /* ty=(Tensor[(14, 16, 4), bool],) */
}

def @func_4657(%var_4651: Tensor[(12, 10, 6), uint32]) -> (Tensor[(12, 10, 6), uint32],) {
  %340 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 6), uint32] */, dtype="uint32") /* ty=Tensor[(12, 10, 6), uint32] */;
  %341 = shape_of(%var_4651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_4651, dtype="uint32") /* ty=Tensor[(12, 10, 6), uint32] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %344 = bitwise_and(%342, %343) /* ty=Tensor[(12, 10, 6), uint32] */;
  (%344,)
}

def @func_3057() -> Tensor[(2535), float64] {
  %346 = fn () -> Tensor[(2535), float64] {
    %345 = @func_2869() /* ty=(Tensor[(2535), float64],) */;
    %345.0
  };
  %346() /* ty=Tensor[(2535), float64] */
}

def @func_4064() -> Tensor[(2535), float64] {
  @func_4062() /* ty=Tensor[(2535), float64] */
}

def @func_6763() -> (Tensor[(6, 3, 12), float64], Tensor[(900), uint8], Tensor[(270), uint32], Tensor[(840), float64], Tensor[(2535), float64], Tensor[(12, 70), float64], Tensor[(90, 10), float32]) {
  @func_6761() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(900), uint8], Tensor[(270), uint32], Tensor[(840), float64], Tensor[(2535), float64], Tensor[(12, 70), float64], Tensor[(90, 10), float32]) */
}

def @func_6207(%var_6205: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  @func_6204(%var_6205) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_4265(%var_4263: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), bool], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(7, 2, 4), bool]) {
  @func_4262(%var_4263) /* ty=(Tensor[(7, 2, 4), bool], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(7, 2, 4), bool]) */
}

def @func_516(%var_514: Tensor[(13, 15, 9), int8]) -> (Tensor[(13, 15, 9), int8],) {
  @func_513(%var_514) /* ty=(Tensor[(13, 15, 9), int8],) */
}

def @func_6386() -> (Tensor[(6, 3, 12), float32],) {
  %347 = @func_4767() /* ty=Tensor[(6, 3, 12), float32] */;
  (%347,)
}

def @func_4490(%var_4484: Tensor[(1872), float64]) -> (Tensor[(6, 3, 12), float32], Tensor[(1872), float64]) {
  %348 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
  %349 = %348.0;
  %350 = cast(%var_4484, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(1), int32] */;
  %352 = cast(%349, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?), float64] */;
  %354 = @func_4018() /* ty=Tensor[(6, 3, 12), float32] */;
  %355 = mod(%352, %353) /* ty=Tensor[(1872), float64] */;
  (%354, %355)
}

def @func_6478() -> Tensor[(6, 3, 12), float32] {
  @func_6260() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_2427(%var_2425: uint8) -> (Tensor[(6, 3, 12), float64], Tensor[(195, 9), int8], uint8, Tensor[(90, 1), uint8]) {
  @func_2424(%var_2425) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(195, 9), int8], uint8, Tensor[(90, 1), uint8]) */
}

def @func_3791(%var_3787: Tensor[(9, 5, 11), uint16]) -> (Tensor[(9, 5, 11), uint16],) {
  %356 = cast(meta[relay.Constant][16] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %357 = cast(%var_3787, dtype="uint16") /* ty=Tensor[(9, 5, 11), uint16] */;
  %358 = left_shift(%356, %357) /* ty=Tensor[(9, 5, 11), uint16] */;
  (%358,)
}

def @func_1912() -> (Tensor[(6, 3, 12), float64],) {
  %361 = fn () -> (Tensor[(6, 3, 12), float64],) {
    %359 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 3, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
    %360 = log(%359) /* ty=Tensor[(6, 3, 12), float64] */;
    (%360,)
  };
  %361() /* ty=(Tensor[(6, 3, 12), float64],) */
}

def @func_4709(%var_4707: Tensor[(2535), float64], %var_4708: Tensor[(840), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(14, 6, 10), float64], Tensor[(840), float64]) {
  @func_4705(%var_4707, %var_4708) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(14, 6, 10), float64], Tensor[(840), float64]) */
}

def @func_2987(%var_2936: Tensor[(6, 3, 12), float64], %var_2963: Tensor[(2730), uint8]) -> (Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) {
  %362 = @func_2487() /* ty=Tensor[(6, 3, 12), float64] */;
  %363 = cast(%var_2936, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %367 = cast(%var_2963, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %368 = reshape(%367, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %369 = divide(%365, %366) /* ty=Tensor[(6, 3, 12), float64] */;
  %370 = @func_1982(%368) /* ty=Tensor[(14, 15, 13), uint8] */;
  (%369, %370, %var_2963)
}

def @func_2603() -> (Tensor[(6, 3, 12), uint16],) {
  @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */
}

def @func_5931() -> (Tensor[(6, 3, 12), float64], Tensor[(270), uint32]) {
  %375 = fn () -> (Tensor[(6, 3, 12), float64], Tensor[(270), uint32]) {
    %371 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %372 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
    %373 = %371.0;
    %374 = %372.2;
    (%373, %374)
  };
  %375() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(270), uint32]) */
}

def @func_2385() -> (Tensor[(6, 3, 12), float64],) {
  %376 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %377 = %376.0;
  (%377,)
}

def @func_2260(%var_2259: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool],) {
  %385 = fn (%var_2253: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool],) {
    %378 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %379 = %378.0;
    %380 = cast(%var_2253, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
    %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%379, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %384 = less_equal(%382, %383) /* ty=Tensor[(6, 3, 12), bool] */;
    (%384,)
  };
  %385(%var_2259) /* ty=(Tensor[(6, 3, 12), bool],) */
}

def @func_2424(%var_2417: uint8) -> (Tensor[(6, 3, 12), float64], Tensor[(195, 9), int8], uint8, Tensor[(90, 1), uint8]) {
  %386 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %387 = cast(%var_2417, dtype="uint8") /* ty=uint8 */;
  %388 = cast(meta[relay.Constant][18] /* ty=Tensor[(90, 1), uint8] */, dtype="uint8") /* ty=Tensor[(90, 1), uint8] */;
  %389 = reshape(%387, newshape=[]) /* ty=uint8 */;
  %390 = reshape(%388, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint8] */;
  %391 = @func_1138(%389, %390) /* ty=(Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) */;
  %392 = %386.0;
  %393 = %391.2;
  (%392, %393, %var_2417, meta[relay.Constant][18] /* ty=Tensor[(90, 1), uint8] */)
}

def @func_4019() -> Tensor[(6, 3, 12), float32] {
  %397 = fn () -> Tensor[(6, 3, 12), float32] {
    %394 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %395 = %394.0;
    %396 = cast(%395, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
    cosh(%396) /* ty=Tensor[(6, 3, 12), float32] */
  };
  %397() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_4957(%var_4955: Tensor[(1755), int8]) -> (Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) {
  @func_4954(%var_4955) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) */
}

def @func_5494() -> (Tensor[(1872), uint32],) {
  %400 = fn () -> (Tensor[(1872), uint32],) {
    %398 = @func_3360() /* ty=(Tensor[(1872), uint32], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) */;
    %399 = %398.4;
    (%399,)
  };
  %400() /* ty=(Tensor[(1872), uint32],) */
}

def @func_5863() -> Tensor[(2535), float32] {
  @func_5861() /* ty=Tensor[(2535), float32] */
}

def @func_1985(%var_1983: Tensor[(14, 15, 13), uint8]) -> Tensor[(14, 15, 13), uint8] {
  @func_1982(%var_1983) /* ty=Tensor[(14, 15, 13), uint8] */
}

def @func_1390(%var_1389: Tensor[(12, 3, 6), float64]) -> (Tensor[(12, 3, 6), float64],) {
  %403 = fn (%var_1383: Tensor[(12, 3, 6), float64]) -> (Tensor[(12, 3, 6), float64],) {
    %401 = cast(%var_1383, dtype="float64") /* ty=Tensor[(12, 3, 6), float64] */;
    %402 = cosh(%401) /* ty=Tensor[(12, 3, 6), float64] */;
    (%402,)
  };
  %403(%var_1389) /* ty=(Tensor[(12, 3, 6), float64],) */
}

def @func_2882() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
  @func_2880() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */
}

def @func_3649(%var_3620: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), int8]) {
  %404 = @func_2880() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %405 = %404.1;
  %406 = cast(%var_3620, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = cast(%405, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %411 = reshape(%410, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %412 = logical_and(%408, %409) /* ty=Tensor[(6, 3, 12), bool] */;
  %413 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %414 = @func_3232(%411) /* ty=Tensor[(6, 3, 12), int8] */;
  (%412, %413, %414)
}

def @func_3214(%var_3212: Tensor[(1872), uint32]) -> (Tensor[(156, 12), uint32], Tensor[(1872), uint32]) {
  @func_3211(%var_3212) /* ty=(Tensor[(156, 12), uint32], Tensor[(1872), uint32]) */
}

def @func_1212(%var_1193: Tensor[(24, 10), float64], %var_1194: Tensor[(648), float64]) -> (Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) {
  %415 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 12, 7), float64] */;
  %416 = cast(%var_1193, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %417 = cast(%var_1194, dtype="float64") /* ty=Tensor[(648), float64] */;
  %418 = reshape(%416, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), float64] */;
  %419 = reshape(%417, newshape=[324, 2]) /* ty=Tensor[(324, 2), float64] */;
  %420 = @func_975(%418, %419) /* ty=(Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) */;
  %421 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 117), int8] */, dtype="int8") /* ty=Tensor[(15, 117), int8] */;
  %422 = reshape(%421, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %423 = @func_513(%422) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %424 = cosh(%415) /* ty=Tensor[(10, 12, 7), float64] */;
  %425 = %420.1;
  %426 = %423.0;
  (%424, %425, %var_1193, %var_1194, %426, meta[relay.Constant][20] /* ty=Tensor[(15, 117), int8] */)
}

def @func_3586(%var_3585: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
  %437 = fn (%var_3568: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
    %427 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %428 = %427.0;
    %429 = cast(%var_3568, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
    %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(%428, dtype="bool") /* ty=Tensor[(6, 3, 12), bool] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %433 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %434 = less(%431, %432) /* ty=Tensor[(6, 3, 12), bool] */;
    %435 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
    %436 = %433.0;
    (%434, %435, %436)
  };
  %437(%var_3585) /* ty=(Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */
}

def @func_2387() -> (Tensor[(6, 3, 12), float64],) {
  @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */
}

def @func_6588() -> (Tensor[(2535), bool], Tensor[(1872), float64]) {
  %441 = fn () -> (Tensor[(2535), bool], Tensor[(1872), float64]) {
    %438 = @func_6016() /* ty=(Tensor[(1872), float64],) */;
    %439 = @func_5700() /* ty=Tensor[(2535), bool] */;
    %440 = %438.0;
    (%439, %440)
  };
  %441() /* ty=(Tensor[(2535), bool], Tensor[(1872), float64]) */
}

def @func_2922(%var_2920: Tensor[(16, 5, 9), float32], %var_2921: Tensor[(16, 5, 9), float32]) -> (Tensor[(16, 5, 9), float32], Tensor[(16, 5, 9), uint8], Tensor[(1872), bool]) {
  %459 = fn (%var_2895: Tensor[(16, 5, 9), float32], %var_2896: Tensor[(16, 5, 9), float32]) -> (Tensor[(16, 5, 9), float32], Tensor[(16, 5, 9), uint8], Tensor[(1872), bool]) {
    %442 = cast(%var_2896, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
    %443 = shape_of(%var_2895, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%var_2895, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %446 = cast(%var_2896, dtype="uint8") /* ty=Tensor[(16, 5, 9), uint8] */;
    %447 = shape_of(%var_2895, dtype="int32") /* ty=Tensor[(3), int32] */;
    %448 = cast(%var_2895, dtype="uint8") /* ty=Tensor[(16, 5, 9), uint8] */;
    %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %450 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
    %451 = %450.1;
    %452 = cast(meta[relay.Constant][21] /* ty=Tensor[(1872), int64] */, dtype="bool") /* ty=Tensor[(1872), bool] */;
    %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
    %454 = cast(%451, dtype="bool") /* ty=Tensor[(1872), bool] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), bool] */;
    %456 = power(%444, %445) /* ty=Tensor[(16, 5, 9), float32] */;
    %457 = subtract(%448, %449) /* ty=Tensor[(16, 5, 9), uint8] */;
    %458 = equal(%454, %455) /* ty=Tensor[(1872), bool] */;
    (%456, %457, %458)
  };
  %459(%var_2920, %var_2921) /* ty=(Tensor[(16, 5, 9), float32], Tensor[(16, 5, 9), uint8], Tensor[(1872), bool]) */
}

def @func_4705(%var_4692: Tensor[(2535), float64], %var_4698: Tensor[(840), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64], Tensor[(14, 6, 10), float64], Tensor[(840), float64]) {
  %460 = @func_4062() /* ty=Tensor[(2535), float64] */;
  %461 = cast(%var_4692, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(1), int32] */;
  %463 = cast(%460, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?), float64] */;
  %465 = cast(%var_4698, dtype="float64") /* ty=Tensor[(840), float64] */;
  %466 = cast(%var_4698, dtype="float64") /* ty=Tensor[(840), float64] */;
  %467 = cast(%var_4698, dtype="float64") /* ty=Tensor[(840), float64] */;
  %468 = reshape(%465, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %469 = reshape(%466, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %470 = reshape(%467, newshape=[14, 6, 10]) /* ty=Tensor[(14, 6, 10), float64] */;
  %471 = @func_4418(%468, %469, %470) /* ty=(Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) */;
  %472 = @func_2572() /* ty=Tensor[(6, 3, 12), float64] */;
  %473 = divide(%463, %464) /* ty=Tensor[(2535), float64] */;
  %474 = %471.5;
  (%472, %473, %474, %var_4698)
}

def @func_5391(%var_5389: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), uint64],) {
  @func_5388(%var_5389) /* ty=(Tensor[(6, 3, 12), uint64],) */
}

def @func_2683() -> Tensor[(6, 3, 12), float64] {
  %475 = fn () -> Tensor[(6, 3, 12), float64] {
    @func_2487() /* ty=Tensor[(6, 3, 12), float64] */
  };
  %475() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_3948(%var_3902: Tensor[(240), float64], %var_3938: Tensor[(216), float64], %var_3941: Tensor[(2730), uint8]) -> (Tensor[(1872), float64], Tensor[(13, 15, 9), int8], Tensor[(648), float64], Tensor[(240), uint8], Tensor[(6, 3, 12), int8], Tensor[(216), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) {
  %476 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
  %477 = cast(%var_3902, dtype="float64") /* ty=Tensor[(240), float64] */;
  %478 = cast(meta[relay.Constant][22] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %479 = reshape(%477, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
  %480 = reshape(%478, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %481 = @func_1212(%479, %480) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
  %482 = cast(meta[relay.Constant][23] /* ty=Tensor[(240), float64] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %483 = shape_of(%var_3902, dtype="int32") /* ty=Tensor[(1), int32] */;
  %484 = cast(%var_3902, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %486 = cast(%var_3938, dtype="float64") /* ty=Tensor[(216), float64] */;
  %487 = reshape(%486, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %488 = @func_3232(%487) /* ty=Tensor[(6, 3, 12), int8] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
  %490 = cast(%var_3941, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %491 = reshape(%489, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
  %492 = reshape(%490, newshape=[2730]) /* ty=Tensor[(2730), uint8] */;
  %493 = @func_2987(%491, %492) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8]) */;
  %494 = %476.0;
  %495 = %481.4;
  %496 = bitwise_and(%484, %485) /* ty=Tensor[(240), uint8] */;
  %497 = %493.1;
  (%494, %495, meta[relay.Constant][22] /* ty=Tensor[(648), float64] */, %496, %488, %var_3938, %497, %var_3941)
}

def @func_5190() -> Tensor[(6, 3, 12), float64] {
  @func_5188() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_4954(%var_4928: Tensor[(1755), int8]) -> (Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) {
  %498 = cast(meta[relay.Constant][24] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %499 = cast(%var_4928, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %500 = reshape(%498, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %501 = reshape(%499, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
  %502 = @func_2862(%500, %501) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(24, 10), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8], Tensor[(6, 3, 12), float64]) */;
  %503 = cast(meta[relay.Constant][25] /* ty=Tensor[(896), uint16] */, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %504 = cast(meta[relay.Constant][25] /* ty=Tensor[(896), uint16] */, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %505 = reshape(%503, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint16] */;
  %506 = reshape(%504, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), uint16] */;
  %507 = @func_3703(%505, %506) /* ty=(Tensor[(14, 16, 4), bool],) */;
  %508 = @func_4745() /* ty=Tensor[(6, 3, 12), float64] */;
  %509 = %502.2;
  %510 = %507.0;
  (%508, %509, meta[relay.Constant][24] /* ty=Tensor[(648), float64] */, %var_4928, %510, meta[relay.Constant][25] /* ty=Tensor[(896), uint16] */)
}

def @func_999(%var_997: Tensor[(13, 16, 9), uint32]) -> Tensor[(13, 16, 9), uint32] {
  @func_996(%var_997) /* ty=Tensor[(13, 16, 9), uint32] */
}

def @func_4986() -> (Tensor[(156, 12), uint32],) {
  %511 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %512 = %511.3;
  (%512,)
}

def @func_5270(%var_5269: Tensor[(11, 16, 6), float32]) -> (Tensor[(11, 16, 6), float32],) {
  %515 = fn (%var_5265: Tensor[(11, 16, 6), float32]) -> (Tensor[(11, 16, 6), float32],) {
    %513 = cast(%var_5265, dtype="float32") /* ty=Tensor[(11, 16, 6), float32] */;
    %514 = acosh(%513) /* ty=Tensor[(11, 16, 6), float32] */;
    (%514,)
  };
  %515(%var_5269) /* ty=(Tensor[(11, 16, 6), float32],) */
}

def @func_1138(%var_1111: uint8, %var_1112: Tensor[(9, 5, 2), uint8]) -> (Tensor[(9, 5, 2), uint8], Tensor[(13, 15, 9), int8], Tensor[(195, 9), int8]) {
  %516 = cast(%var_1111, dtype="uint8") /* ty=uint8 */;
  %517 = cast(%var_1112, dtype="uint8") /* ty=Tensor[(9, 5, 2), uint8] */;
  %518 = cast(meta[relay.Constant][26] /* ty=Tensor[(195, 9), int8] */, dtype="int8") /* ty=Tensor[(195, 9), int8] */;
  %519 = reshape(%518, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
  %520 = @func_513(%519) /* ty=(Tensor[(13, 15, 9), int8],) */;
  %521 = bitwise_or(%516, %517) /* ty=Tensor[(9, 5, 2), uint8] */;
  %522 = %520.0;
  (%521, %522, meta[relay.Constant][26] /* ty=Tensor[(195, 9), int8] */)
}

def @func_4747() -> Tensor[(6, 3, 12), float64] {
  @func_4745() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_2870() -> (Tensor[(2535), float64],) {
  %525 = fn () -> (Tensor[(2535), float64],) {
    %523 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
    %524 = %523.2;
    (%524,)
  };
  %525() /* ty=(Tensor[(2535), float64],) */
}

def @func_2623() -> Tensor[(6, 3, 12), float64] {
  %527 = fn () -> Tensor[(6, 3, 12), float64] {
    %526 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %526.0
  };
  %527() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_4650() -> (Tensor[(2535), float64],) {
  %529 = fn () -> (Tensor[(2535), float64],) {
    %528 = @func_3411() /* ty=Tensor[(2535), float64] */;
    (%528,)
  };
  %529() /* ty=(Tensor[(2535), float64],) */
}

def @func_2640() -> (Tensor[(6, 3, 12), float64],) {
  %534 = fn () -> (Tensor[(6, 3, 12), float64],) {
    %530 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %531 = %530.0;
    %532 = cast(%531, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
    %533 = sinh(%532) /* ty=Tensor[(6, 3, 12), float64] */;
    (%533,)
  };
  %534() /* ty=(Tensor[(6, 3, 12), float64],) */
}

def @func_5443() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(1755), int8], Tensor[(5, 351), int8]) {
  %535 = @func_2880() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
  %536 = @func_4898() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
  %539 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 351), int8] */, dtype="int8") /* ty=Tensor[(5, 351), int8] */;
  %540 = reshape(%539, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
  %541 = @func_4954(%540) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(1755), int8], Tensor[(14, 16, 4), bool], Tensor[(896), uint16]) */;
  %542 = %535.0;
  %543 = cos(%538) /* ty=Tensor[(6, 3, 12), float32] */;
  %544 = %541.3;
  (%542, %543, %544, meta[relay.Constant][27] /* ty=Tensor[(5, 351), int8] */)
}

def @func_3779() -> (Tensor[(1872), int64], Tensor[(1872), float64]) {
  %549 = fn () -> (Tensor[(1872), int64], Tensor[(1872), float64]) {
    %545 = @func_3501() /* ty=(Tensor[(1872), int64], Tensor[(6, 3, 12), float64]) */;
    %546 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
    %547 = %545.0;
    %548 = %546.0;
    (%547, %548)
  };
  %549() /* ty=(Tensor[(1872), int64], Tensor[(1872), float64]) */
}

def @func_3232(%var_3225: Tensor[(6, 3, 12), float64]) -> Tensor[(6, 3, 12), int8] {
  %550 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
  %551 = cast(%var_3225, dtype="int8") /* ty=Tensor[(6, 3, 12), int8] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="int8") /* ty=Tensor[(6, 3, 12), int8] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%553, %554) /* ty=Tensor[(6, 3, 12), int8] */
}

def @func_1734(%var_1731: Tensor[(4, 14), float64], %var_1732: Tensor[(30, 2), float32], %var_1733: Tensor[(1755), int8]) -> (Tensor[(4, 14), float64], Tensor[(1, 648), float64], Tensor[(6, 12, 9), bool], Tensor[(30, 2), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32], Tensor[(6, 12, 9), float32], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) {
  %580 = fn (%var_1672: Tensor[(4, 14), float64], %var_1689: Tensor[(30, 2), float32], %var_1727: Tensor[(1755), int8]) -> (Tensor[(4, 14), float64], Tensor[(1, 648), float64], Tensor[(6, 12, 9), bool], Tensor[(30, 2), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32], Tensor[(6, 12, 9), float32], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) {
    %555 = cast(%var_1672, dtype="float64") /* ty=Tensor[(4, 14), float64] */;
    %556 = cast(%var_1689, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %557 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 648), float64] */, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
    %558 = reshape(%556, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
    %559 = reshape(%557, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %560 = @func_909(%558, %559) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
    %561 = cast(meta[relay.Constant][29] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %562 = reshape(%561, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
    %563 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 648), float64] */, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
    %564 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 648), float64] */, dtype="int16") /* ty=Tensor[(1, 648), int16] */;
    %565 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 648), float64] */, dtype="float32") /* ty=Tensor[(1, 648), float32] */;
    %566 = reshape(%563, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float64] */;
    %567 = reshape(%564, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), int16] */;
    %568 = reshape(%565, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float32] */;
    %569 = @func_306(%566, %567, %568) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) */;
    %570 = %569.2;
    %571 = cast(%570, dtype="float32") /* ty=Tensor[(6, 12, 9), float32] */;
    %572 = cast(%var_1727, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %573 = reshape(%572, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
    %574 = @func_513(%573) /* ty=(Tensor[(13, 15, 9), int8],) */;
    %575 = exp(%555) /* ty=Tensor[(4, 14), float64] */;
    %576 = %560.1;
    %577 = @func_996(%562) /* ty=Tensor[(13, 16, 9), uint32] */;
    %578 = sigmoid(%571) /* ty=Tensor[(6, 12, 9), float32] */;
    %579 = %574.0;
    (%575, meta[relay.Constant][28] /* ty=Tensor[(1, 648), float64] */, %576, %var_1689, %577, meta[relay.Constant][29] /* ty=Tensor[(1872), uint32] */, %578, %579, %var_1727)
  };
  %580(%var_1731, %var_1732, %var_1733) /* ty=(Tensor[(4, 14), float64], Tensor[(1, 648), float64], Tensor[(6, 12, 9), bool], Tensor[(30, 2), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32], Tensor[(6, 12, 9), float32], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) */
}

def @func_978(%var_976: Tensor[(5, 6, 8), float64], %var_977: Tensor[(324, 2), float64]) -> (Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) {
  %603 = fn (%var_923: Tensor[(5, 6, 8), float64], %var_944: Tensor[(324, 2), float64]) -> (Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) {
    %581 = cast(%var_923, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
    %582 = sinh(%581) /* ty=Tensor[(5, 6, 8), float64] */;
    %583 = cast(%582, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
    %584 = cast(%var_944, dtype="float64") /* ty=Tensor[(324, 2), float64] */;
    %585 = cast(%var_944, dtype="int16") /* ty=Tensor[(324, 2), int16] */;
    %586 = cast(%var_944, dtype="float32") /* ty=Tensor[(324, 2), float32] */;
    %587 = reshape(%584, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float64] */;
    %588 = reshape(%585, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), int16] */;
    %589 = reshape(%586, newshape=[6, 12, 9]) /* ty=Tensor[(6, 12, 9), float32] */;
    %590 = @func_306(%587, %588, %589) /* ty=(Tensor[(6, 12, 9), bool], Tensor[(6, 12, 9), float32], Tensor[(6, 12, 9), bool]) */;
    %591 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 117), int8] */, dtype="int8") /* ty=Tensor[(15, 117), int8] */;
    %592 = reshape(%591, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
    %593 = @func_513(%592) /* ty=(Tensor[(13, 15, 9), int8],) */;
    %594 = cast(meta[relay.Constant][31] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %595 = %590.0;
    %596 = cast(%595, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
    %597 = reshape(%594, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
    %598 = reshape(%596, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %599 = @func_909(%597, %598) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
    %600 = sin(%583) /* ty=Tensor[(5, 6, 8), float32] */;
    %601 = %593.0;
    %602 = %599.1;
    (%600, %595, %var_944, %601, meta[relay.Constant][30] /* ty=Tensor[(15, 117), int8] */, %602, meta[relay.Constant][31] /* ty=Tensor[(60), float32] */)
  };
  %603(%var_976, %var_977) /* ty=(Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) */
}

def @func_5063(%var_5062: uint16) -> (Tensor[(6, 3, 12), float64], Tensor[(1, 14, 14), bool], uint16, Tensor[(196), uint16], Tensor[(60), float32], Tensor[(2730), uint8], Tensor[(56), float64]) {
  %618 = fn (%var_5014: uint16) -> (Tensor[(6, 3, 12), float64], Tensor[(1, 14, 14), bool], uint16, Tensor[(196), uint16], Tensor[(60), float32], Tensor[(2730), uint8], Tensor[(56), float64]) {
    %604 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %605 = cast(%var_5014, dtype="uint16") /* ty=uint16 */;
    %606 = cast(meta[relay.Constant][32] /* ty=Tensor[(196), uint16] */, dtype="uint16") /* ty=Tensor[(196), uint16] */;
    %607 = cast(meta[relay.Constant][33] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %608 = reshape(%605, newshape=[]) /* ty=uint16 */;
    %609 = reshape(%606, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), uint16] */;
    %610 = reshape(%607, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %611 = @func_1055(%608, %609, %610) /* ty=(Tensor[(1, 14, 14), bool], Tensor[(6, 12, 9), bool], Tensor[(60), float32], Tensor[(648), float64]) */;
    %612 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %613 = reshape(%612, newshape=[7, 2, 4]) /* ty=Tensor[(7, 2, 4), float64] */;
    %614 = @func_4262(%613) /* ty=(Tensor[(7, 2, 4), bool], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(7, 2, 4), bool]) */;
    %615 = %604.0;
    %616 = %611.0;
    %617 = %614.2;
    (%615, %616, %var_5014, meta[relay.Constant][32] /* ty=Tensor[(196), uint16] */, meta[relay.Constant][33] /* ty=Tensor[(60), float32] */, %617, meta[relay.Constant][34] /* ty=Tensor[(56), float64] */)
  };
  %618(%var_5062) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(1, 14, 14), bool], uint16, Tensor[(196), uint16], Tensor[(60), float32], Tensor[(2730), uint8], Tensor[(56), float64]) */
}

def @func_3361() -> (Tensor[(1872), uint32], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) {
  %630 = fn () -> (Tensor[(1872), uint32], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) {
    %619 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
    %620 = @func_2385() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %621 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
    %622 = %619.1;
    %623 = cast(%622, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %624 = reshape(%623, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
    %625 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
    %626 = %620.0;
    %627 = %621.0;
    %628 = @func_996(%624) /* ty=Tensor[(13, 16, 9), uint32] */;
    %629 = %625.1;
    (%622, %626, %627, %628, %629)
  };
  %630() /* ty=(Tensor[(1872), uint32], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint16], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) */
}

def @func_5838(%var_5835: Tensor[(1, 60), float32], %var_5836: Tensor[(1, 648), float64], %var_5837: Tensor[(13, 60), float32]) -> (Tensor[(2535), float64], Tensor[(648), float64], Tensor[(1, 648), float64], Tensor[(13, 60), bool], Tensor[(2535), float64], Tensor[(900), uint8]) {
  %645 = fn (%var_5811: Tensor[(1, 60), float32], %var_5812: Tensor[(1, 648), float64], %var_5819: Tensor[(13, 60), float32]) -> (Tensor[(2535), float64], Tensor[(648), float64], Tensor[(1, 648), float64], Tensor[(13, 60), bool], Tensor[(2535), float64], Tensor[(900), uint8]) {
    %631 = cast(%var_5811, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
    %632 = cast(%var_5812, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
    %633 = reshape(%631, newshape=[15, 1, 4]) /* ty=Tensor[(15, 1, 4), float32] */;
    %634 = reshape(%632, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %635 = @func_909(%633, %634) /* ty=(Tensor[(15, ?, 4), float32], Tensor[(6, 12, 9), bool], Tensor[(648), float64]) */;
    %636 = cast(%var_5811, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
    %637 = cast(%var_5819, dtype="bool") /* ty=Tensor[(13, 60), bool] */;
    %638 = cast(meta[relay.Constant][35] /* ty=Tensor[(900), uint8] */, dtype="uint8") /* ty=Tensor[(900), uint8] */;
    %639 = reshape(%638, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint8] */;
    %640 = @func_3084(%639) /* ty=(Tensor[(2535), float64], Tensor[(90, 10), uint16], Tensor[(90, 10), bool]) */;
    %641 = @func_3411() /* ty=Tensor[(2535), float64] */;
    %642 = %635.2;
    %643 = equal(%636, %637) /* ty=Tensor[(13, 60), bool] */;
    %644 = %640.0;
    (%641, %642, %var_5812, %643, %644, meta[relay.Constant][35] /* ty=Tensor[(900), uint8] */)
  };
  %645(%var_5835, %var_5836, %var_5837) /* ty=(Tensor[(2535), float64], Tensor[(648), float64], Tensor[(1, 648), float64], Tensor[(13, 60), bool], Tensor[(2535), float64], Tensor[(900), uint8]) */
}

def @func_2572() -> Tensor[(6, 3, 12), float64] {
  %646 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
  %646.0
}

def @func_4821(%var_4799: Tensor[(11, 10, 11), float64], %var_4806: Tensor[(2730), uint8], %var_4817: Tensor[(240), float64], %var_4818: Tensor[(648), float64]) -> (Tensor[(11, 10, 11), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(2535), float64], Tensor[(6, 12, 9), bool], Tensor[(240), float64], Tensor[(648), float64]) {
  %647 = cast(%var_4799, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
  %648 = cast(%var_4806, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %649 = reshape(%648, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %650 = cast(%var_4817, dtype="float64") /* ty=Tensor[(240), float64] */;
  %651 = cast(%var_4818, dtype="float64") /* ty=Tensor[(648), float64] */;
  %652 = reshape(%650, newshape=[5, 6, 8]) /* ty=Tensor[(5, 6, 8), float64] */;
  %653 = reshape(%651, newshape=[324, 2]) /* ty=Tensor[(324, 2), float64] */;
  %654 = @func_975(%652, %653) /* ty=(Tensor[(5, 6, 8), float32], Tensor[(6, 12, 9), bool], Tensor[(324, 2), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8], Tensor[(6, 12, 9), bool], Tensor[(60), float32]) */;
  %655 = erf(%647) /* ty=Tensor[(11, 10, 11), float64] */;
  %656 = @func_1982(%649) /* ty=Tensor[(14, 15, 13), uint8] */;
  %657 = @func_4062() /* ty=Tensor[(2535), float64] */;
  %658 = %654.5;
  (%655, %656, %var_4806, %657, %658, %var_4817, %var_4818)
}

def @func_6017() -> (Tensor[(1872), float64],) {
  %661 = fn () -> (Tensor[(1872), float64],) {
    %659 = @func_3682() /* ty=(Tensor[(1872), float64],) */;
    %660 = %659.0;
    (%660,)
  };
  %661() /* ty=(Tensor[(1872), float64],) */
}

def @func_3412() -> Tensor[(2535), float64] {
  %665 = fn () -> Tensor[(2535), float64] {
    %662 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
    %663 = %662.4;
    %664 = cast(%663, dtype="float64") /* ty=Tensor[(2535), float64] */;
    sin(%664) /* ty=Tensor[(2535), float64] */
  };
  %665() /* ty=Tensor[(2535), float64] */
}

def @func_4422(%var_4419: Tensor[(14, 6, 10), float64], %var_4420: Tensor[(14, 6, 10), float64], %var_4421: Tensor[(14, 6, 10), float64]) -> (Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) {
  %698 = fn (%var_4355: Tensor[(14, 6, 10), float64], %var_4379: Tensor[(14, 6, 10), float64], %var_4383: Tensor[(14, 6, 10), float64]) -> (Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) {
    %666 = cast(%var_4355, dtype="float64") /* ty=Tensor[(14, 6, 10), float64] */;
    %667 = log(%666) /* ty=Tensor[(14, 6, 10), float64] */;
    %668 = cast(%var_4355, dtype="uint8") /* ty=Tensor[(14, 6, 10), uint8] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="uint8") /* ty=Tensor[(14, 6, 10), uint8] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %672 = bitwise_xor(%670, %671) /* ty=Tensor[(14, 6, 10), uint8] */;
    %673 = cast(%672, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
    %674 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%667, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %677 = cast(meta[relay.Constant][36] /* ty=Tensor[(495), uint16] */, dtype="uint16") /* ty=Tensor[(495), uint16] */;
    %678 = reshape(%677, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), uint16] */;
    %679 = @func_3791(%678) /* ty=(Tensor[(9, 5, 11), uint16],) */;
    %680 = cast(%672, dtype="float32") /* ty=Tensor[(14, 6, 10), float32] */;
    %681 = cast(%var_4379, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
    %682 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(%667, dtype="int16") /* ty=Tensor[(14, 6, 10), int16] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %685 = cast(%var_4383, dtype="float64") /* ty=Tensor[(14, 6, 10), float64] */;
    %686 = shape_of(%var_4355, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%var_4355, dtype="float64") /* ty=Tensor[(14, 6, 10), float64] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %689 = cast(meta[relay.Constant][37] /* ty=Tensor[(108, 2), float64] */, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
    %690 = reshape(%689, newshape=[12, 3, 6]) /* ty=Tensor[(12, 3, 6), float64] */;
    %691 = @func_1388(%690) /* ty=(Tensor[(12, 3, 6), float64],) */;
    %692 = multiply(%675, %676) /* ty=Tensor[(14, 6, 10), int16] */;
    %693 = %679.0;
    %694 = cos(%680) /* ty=Tensor[(14, 6, 10), float32] */;
    %695 = subtract(%683, %684) /* ty=Tensor[(14, 6, 10), int16] */;
    %696 = divide(%687, %688) /* ty=Tensor[(14, 6, 10), float64] */;
    %697 = %691.0;
    (%692, %693, meta[relay.Constant][36] /* ty=Tensor[(495), uint16] */, %694, %695, %696, %697, meta[relay.Constant][37] /* ty=Tensor[(108, 2), float64] */)
  };
  %698(%var_4419, %var_4420, %var_4421) /* ty=(Tensor[(14, 6, 10), int16], Tensor[(9, 5, 11), uint16], Tensor[(495), uint16], Tensor[(14, 6, 10), float32], Tensor[(14, 6, 10), int16], Tensor[(14, 6, 10), float64], Tensor[(12, 3, 6), float64], Tensor[(108, 2), float64]) */
}

def @func_6261() -> Tensor[(6, 3, 12), float32] {
  %699 = fn () -> Tensor[(6, 3, 12), float32] {
    @func_4767() /* ty=Tensor[(6, 3, 12), float32] */
  };
  %699() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_6388() -> (Tensor[(6, 3, 12), float32],) {
  @func_6386() /* ty=(Tensor[(6, 3, 12), float32],) */
}

def @func_4493(%var_4491: Tensor[(1872), float64]) -> (Tensor[(6, 3, 12), float32], Tensor[(1872), float64]) {
  @func_4490(%var_4491) /* ty=(Tensor[(6, 3, 12), float32], Tensor[(1872), float64]) */
}

def @func_4262(%var_4232: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), bool], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(7, 2, 4), bool]) {
  %700 = cast(%var_4232, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %701 = atanh(%700) /* ty=Tensor[(7, 2, 4), float64] */;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %703 = tan(%702) /* ty=Tensor[(7, 2, 4), float64] */;
  %704 = cast(%701, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %708 = cast(meta[relay.Constant][38] /* ty=Tensor[(2730), uint8] */, dtype="uint8") /* ty=Tensor[(2730), uint8] */;
  %709 = reshape(%708, newshape=[14, 15, 13]) /* ty=Tensor[(14, 15, 13), uint8] */;
  %710 = cast(%var_4232, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %711 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%701, dtype="bool") /* ty=Tensor[(7, 2, 4), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %714 = greater(%706, %707) /* ty=Tensor[(7, 2, 4), bool] */;
  %715 = @func_1982(%709) /* ty=Tensor[(14, 15, 13), uint8] */;
  %716 = logical_or(%712, %713) /* ty=Tensor[(7, 2, 4), bool] */;
  (%714, %715, meta[relay.Constant][38] /* ty=Tensor[(2730), uint8] */, %716)
}

def @func_5879() -> (Tensor[(6, 3, 12), float32],) {
  @func_5877() /* ty=(Tensor[(6, 3, 12), float32],) */
}

def @func_4797(%var_4795: Tensor[(13, 11, 2), float32]) -> Tensor[(13, 11, 2), float32] {
  @func_4794(%var_4795) /* ty=Tensor[(13, 11, 2), float32] */
}

def @func_2488() -> Tensor[(6, 3, 12), float64] {
  %718 = fn () -> Tensor[(6, 3, 12), float64] {
    %717 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %717.0
  };
  %718() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_5388(%var_5352: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), uint64],) {
  %719 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
  %720 = cast(%var_5352, dtype="uint64") /* ty=Tensor[(6, 3, 12), uint64] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="uint64") /* ty=Tensor[(6, 3, 12), uint64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %724 = bitwise_or(%722, %723) /* ty=Tensor[(6, 3, 12), uint64] */;
  (%724,)
}

def @func_4327(%var_4325: Tensor[(2730), uint8], %var_4326: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(156, 12), uint32], Tensor[(1872), uint32], Tensor[(13, 16, 9), uint32], Tensor[(13, 15, 9), int8], Tensor[(240), float64], Tensor[(6, 3, 12), int8]) {
  @func_4323(%var_4325, %var_4326) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(156, 12), uint32], Tensor[(1872), uint32], Tensor[(13, 16, 9), uint32], Tensor[(13, 15, 9), int8], Tensor[(240), float64], Tensor[(6, 3, 12), int8]) */
}

def @func_6159(%var_6155: Tensor[(648), float64], %var_6156: Tensor[(648), float64], %var_6157: uint8, %var_6158: Tensor[(12, 3, 6), float64]) -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), uint32], Tensor[(240), float64], Tensor[(648), float64], Tensor[(648), bool], Tensor[(648), float64], Tensor[(495), uint16], Tensor[(840), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], uint8, Tensor[(90), uint8], Tensor[(6, 3, 12), float64], Tensor[(12, 3, 6), bool]) {
  @func_6153(%var_6155, %var_6156, %var_6157, %var_6158) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], Tensor[(1872), uint32], Tensor[(240), float64], Tensor[(648), float64], Tensor[(648), bool], Tensor[(648), float64], Tensor[(495), uint16], Tensor[(840), float64], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64], uint8, Tensor[(90), uint8], Tensor[(6, 3, 12), float64], Tensor[(12, 3, 6), bool]) */
}

def @func_3211(%var_3206: Tensor[(1872), uint32]) -> (Tensor[(156, 12), uint32], Tensor[(1872), uint32]) {
  %725 = @func_3179() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */;
  %726 = %725.3;
  %727 = cast(%726, dtype="uint32") /* ty=Tensor[(156, 12), uint32] */;
  %728 = reshape(%727, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
  %729 = @func_2207(%728) /* ty=(Tensor[(6, 3, 12), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) */;
  %730 = %729.2;
  %731 = cast(%var_3206, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(1), int32] */;
  %733 = cast(%730, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %735 = minimum(%733, %734) /* ty=Tensor[(1872), uint32] */;
  (%726, %735)
}

def @func_2865(%var_2863: Tensor[(648), float64], %var_2864: Tensor[(1755), int8]) -> (Tensor[(6, 3, 12), float64], Tensor[(24, 10), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8], Tensor[(6, 3, 12), float64]) {
  %750 = fn (%var_2848: Tensor[(648), float64], %var_2851: Tensor[(1755), int8]) -> (Tensor[(6, 3, 12), float64], Tensor[(24, 10), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8], Tensor[(6, 3, 12), float64]) {
    %736 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %737 = cast(meta[relay.Constant][39] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %738 = cast(%var_2848, dtype="float64") /* ty=Tensor[(648), float64] */;
    %739 = reshape(%737, newshape=[24, 10]) /* ty=Tensor[(24, 10), float64] */;
    %740 = reshape(%738, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %741 = @func_1212(%739, %740) /* ty=(Tensor[(10, 12, 7), float64], Tensor[(6, 12, 9), bool], Tensor[(24, 10), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(15, 117), int8]) */;
    %742 = cast(%var_2851, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %743 = reshape(%742, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
    %744 = @func_513(%743) /* ty=(Tensor[(13, 15, 9), int8],) */;
    %745 = @func_2639() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %746 = %736.0;
    %747 = %741.2;
    %748 = %744.0;
    %749 = %745.0;
    (%746, %747, meta[relay.Constant][39] /* ty=Tensor[(240), float64] */, %var_2848, %748, %var_2851, %749)
  };
  %750(%var_2863, %var_2864) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(24, 10), float64], Tensor[(240), float64], Tensor[(648), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8], Tensor[(6, 3, 12), float64]) */
}

def @func_5659() -> (Tensor[(6, 3, 12), float64],) {
  %752 = fn () -> (Tensor[(6, 3, 12), float64],) {
    %751 = @func_4745() /* ty=Tensor[(6, 3, 12), float64] */;
    (%751,)
  };
  %752() /* ty=(Tensor[(6, 3, 12), float64],) */
}

def @func_6284() -> (Tensor[(6, 3, 12), float64], Tensor[(2535), float64]) {
  %753 = @func_4649() /* ty=(Tensor[(2535), float64],) */;
  %754 = @func_2487() /* ty=Tensor[(6, 3, 12), float64] */;
  %755 = %753.0;
  (%754, %755)
}

def @func_5330(%var_5329: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  %757 = fn (%var_5324: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
    %756 = cast(%var_5324, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
    rsqrt(%756) /* ty=Tensor[(7, 12, 8), float64] */
  };
  %757(%var_5329) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_3235(%var_3233: Tensor[(6, 3, 12), float64]) -> Tensor[(6, 3, 12), int8] {
  @func_3232(%var_3233) /* ty=Tensor[(6, 3, 12), int8] */
}

def @func_6493() -> Tensor[(6, 3, 12), float64] {
  @func_5771() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_4623(%var_4621: Tensor[(10, 6, 7), float64], %var_4622: Tensor[(10, 6, 7), float64]) -> (Tensor[(1872), float64], Tensor[(15, 13, 13), float64], Tensor[(2535), float64], Tensor[(10, 6, 7), bool], Tensor[(2535), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) {
  %780 = fn (%var_4556: Tensor[(10, 6, 7), float64], %var_4586: Tensor[(10, 6, 7), float64]) -> (Tensor[(1872), float64], Tensor[(15, 13, 13), float64], Tensor[(2535), float64], Tensor[(10, 6, 7), bool], Tensor[(2535), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) {
    %758 = @func_3778() /* ty=(Tensor[(1872), int64], Tensor[(1872), float64]) */;
    %759 = cast(meta[relay.Constant][40] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %760 = cast(meta[relay.Constant][40] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %761 = %758.1;
    %762 = cast(%761, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %763 = reshape(%759, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
    %764 = reshape(%760, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
    %765 = reshape(%762, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
    %766 = @func_2050(%763, %764, %765) /* ty=(Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) */;
    %767 = cast(%var_4556, dtype="float64") /* ty=Tensor[(10, 6, 7), float64] */;
    %768 = log(%767) /* ty=Tensor[(10, 6, 7), float64] */;
    %769 = cast(%var_4586, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
    %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
    %771 = cast(%768, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %773 = cast(meta[relay.Constant][41] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %774 = reshape(%773, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), int8] */;
    %775 = @func_513(%774) /* ty=(Tensor[(13, 15, 9), int8],) */;
    %776 = %766.0;
    %777 = less(%771, %772) /* ty=Tensor[(10, 6, 7), bool] */;
    %778 = @func_3056() /* ty=Tensor[(2535), float64] */;
    %779 = %775.0;
    (%761, %776, meta[relay.Constant][40] /* ty=Tensor[(2535), float64] */, %777, %778, %779, meta[relay.Constant][41] /* ty=Tensor[(1755), int8] */)
  };
  %780(%var_4621, %var_4622) /* ty=(Tensor[(1872), float64], Tensor[(15, 13, 13), float64], Tensor[(2535), float64], Tensor[(10, 6, 7), bool], Tensor[(2535), float64], Tensor[(13, 15, 9), int8], Tensor[(1755), int8]) */
}

def @func_3652(%var_3650: Tensor[(6, 3, 12), float64]) -> (Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), int8]) {
  @func_3649(%var_3650) /* ty=(Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), int8]) */
}

def @func_3180() -> (Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) {
  %809 = fn () -> (Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) {
    %781 = @func_2750() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), int64], Tensor[(2535), float64], Tensor[(1872), uint32]) */;
    %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
    %783 = cast(meta[relay.Constant][42] /* ty=Tensor[(270), uint32] */, dtype="uint32") /* ty=Tensor[(270), uint32] */;
    %784 = %781.0;
    %785 = cast(%784, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
    %786 = cast(meta[relay.Constant][43] /* ty=Tensor[(156, 12), uint32] */, dtype="uint32") /* ty=Tensor[(156, 12), uint32] */;
    %787 = reshape(%782, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), uint32] */;
    %788 = reshape(%783, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), uint32] */;
    %789 = reshape(%785, newshape=[12, 18]) /* ty=Tensor[(12, 18), float64] */;
    %790 = reshape(%786, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
    %791 = @func_2161(%787, %788, %789, %790) /* ty=(Tensor[(6, 3, 15), uint32], Tensor[(6, 3, 15), int32], Tensor[(12, 3, 6), float64], Tensor[(12, 18), float64], Tensor[(1872), int64], Tensor[(2535, 1), float64], Tensor[(1872), uint32]) */;
    %792 = @func_2869() /* ty=(Tensor[(2535), float64],) */;
    %793 = %792.0;
    %794 = cast(%793, dtype="float32") /* ty=Tensor[(2535), float32] */;
    %795 = sigmoid(%794) /* ty=Tensor[(2535), float32] */;
    %796 = cast(%793, dtype="uint64") /* ty=Tensor[(2535), uint64] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(1), int32] */;
    %798 = cast(%795, dtype="uint64") /* ty=Tensor[(2535), uint64] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %800 = add(%798, %799) /* ty=Tensor[(2535), uint64] */;
    %801 = cast(%800, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %802 = shape_of(%795, dtype="int32") /* ty=Tensor[(1), int32] */;
    %803 = cast(%795, dtype="int64") /* ty=Tensor[(2535), int64] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?), int64] */;
    %805 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %806 = %791.6;
    %807 = bitwise_and(%803, %804) /* ty=Tensor[(2535), int64] */;
    %808 = %805.0;
    (%784, %806, meta[relay.Constant][42] /* ty=Tensor[(270), uint32] */, meta[relay.Constant][43] /* ty=Tensor[(156, 12), uint32] */, %807, %808)
  };
  %809() /* ty=(Tensor[(6, 3, 12), uint16], Tensor[(1872), uint32], Tensor[(270), uint32], Tensor[(156, 12), uint32], Tensor[(2535), int64], Tensor[(6, 3, 12), float64]) */
}

def @func_3891(%var_3890: Tensor[(12, 156), uint32]) -> (Tensor[(6, 3, 12), float64], Tensor[(156, 12), uint32], Tensor[(12, 156), uint32]) {
  %815 = fn (%var_3886: Tensor[(12, 156), uint32]) -> (Tensor[(6, 3, 12), float64], Tensor[(156, 12), uint32], Tensor[(12, 156), uint32]) {
    %810 = cast(%var_3886, dtype="uint32") /* ty=Tensor[(12, 156), uint32] */;
    %811 = reshape(%810, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
    %812 = @func_3211(%811) /* ty=(Tensor[(156, 12), uint32], Tensor[(1872), uint32]) */;
    %813 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
    %814 = %812.0;
    (%813, %814, %var_3886)
  };
  %815(%var_3890) /* ty=(Tensor[(6, 3, 12), float64], Tensor[(156, 12), uint32], Tensor[(12, 156), uint32]) */
}

def @func_2820() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) {
  %826 = fn () -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) {
    %816 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %817 = @func_2622() /* ty=Tensor[(6, 3, 12), float64] */;
    %818 = @func_2601() /* ty=(Tensor[(6, 3, 12), uint16],) */;
    %819 = %818.0;
    %820 = cast(%819, dtype="uint8") /* ty=Tensor[(6, 3, 12), uint8] */;
    %821 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(%817, dtype="uint8") /* ty=Tensor[(6, 3, 12), uint8] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %824 = %816.0;
    %825 = logical_xor(%822, %823) /* ty=Tensor[(6, 3, 12), uint8] */;
    (%824, %825)
  };
  %826() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) */
}

def @func_2209(%var_2208: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 12), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) {
  %834 = fn (%var_2185: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 12), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) {
    %827 = @func_1911() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %828 = %827.0;
    %829 = cast(%828, dtype="float32") /* ty=Tensor[(6, 3, 12), float32] */;
    %830 = cast(%var_2185, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %831 = reshape(%830, newshape=[13, 16, 9]) /* ty=Tensor[(13, 16, 9), uint32] */;
    %832 = atan(%829) /* ty=Tensor[(6, 3, 12), float32] */;
    %833 = @func_996(%831) /* ty=Tensor[(13, 16, 9), uint32] */;
    (%832, %833, %var_2185)
  };
  %834(%var_2208) /* ty=(Tensor[(6, 3, 12), float32], Tensor[(13, 16, 9), uint32], Tensor[(1872), uint32]) */
}

def @func_6204(%var_6190: Tensor[(7, 12, 8), float64]) -> Tensor[(7, 12, 8), float64] {
  %835 = cast(%var_6190, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  asinh(%835) /* ty=Tensor[(7, 12, 8), float64] */
}

def @func_6524() -> Tensor[(2535), bool] {
  @func_6522() /* ty=Tensor[(2535), bool] */
}

def @func_5977() -> (Tensor[(2535), float64], Tensor[(6, 3, 12), float64]) {
  @func_5975() /* ty=(Tensor[(2535), float64], Tensor[(6, 3, 12), float64]) */
}

def @func_2166(%var_2162: Tensor[(6, 3, 15), uint32], %var_2163: Tensor[(6, 3, 15), uint32], %var_2164: Tensor[(12, 18), float64], %var_2165: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 15), uint32], Tensor[(6, 3, 15), int32], Tensor[(12, 3, 6), float64], Tensor[(12, 18), float64], Tensor[(1872), int64], Tensor[(2535, 1), float64], Tensor[(1872), uint32]) {
  %856 = fn (%var_2091: Tensor[(6, 3, 15), uint32], %var_2106: Tensor[(6, 3, 15), uint32], %var_2128: Tensor[(12, 18), float64], %var_2137: Tensor[(1872), uint32]) -> (Tensor[(6, 3, 15), uint32], Tensor[(6, 3, 15), int32], Tensor[(12, 3, 6), float64], Tensor[(12, 18), float64], Tensor[(1872), int64], Tensor[(2535, 1), float64], Tensor[(1872), uint32]) {
    %836 = cast(meta[relay.Constant][44] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %837 = cast(%var_2091, dtype="uint32") /* ty=Tensor[(6, 3, 15), uint32] */;
    %838 = cast(%var_2106, dtype="int32") /* ty=Tensor[(6, 3, 15), int32] */;
    %839 = shape_of(%var_2091, dtype="int32") /* ty=Tensor[(3), int32] */;
    %840 = cast(%var_2091, dtype="int32") /* ty=Tensor[(6, 3, 15), int32] */;
    %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %842 = cast(%var_2128, dtype="float64") /* ty=Tensor[(12, 18), float64] */;
    %843 = reshape(%842, newshape=[12, 3, 6]) /* ty=Tensor[(12, 3, 6), float64] */;
    %844 = @func_1388(%843) /* ty=(Tensor[(12, 3, 6), float64],) */;
    %845 = cast(meta[relay.Constant][45] /* ty=Tensor[(2535, 1), float64] */, dtype="float64") /* ty=Tensor[(2535, 1), float64] */;
    %846 = cast(meta[relay.Constant][45] /* ty=Tensor[(2535, 1), float64] */, dtype="float64") /* ty=Tensor[(2535, 1), float64] */;
    %847 = cast(%var_2137, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %848 = reshape(%845, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
    %849 = reshape(%846, newshape=[15, 13, 13]) /* ty=Tensor[(15, 13, 13), float64] */;
    %850 = reshape(%847, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
    %851 = @func_2050(%848, %849, %850) /* ty=(Tensor[(15, 13, 13), float64], Tensor[(1872), int64], Tensor[(13, 16, 9), uint32], Tensor[(13, 16, 9), bool]) */;
    %852 = add(%836, %837) /* ty=Tensor[(6, 3, 15), uint32] */;
    %853 = left_shift(%840, %841) /* ty=Tensor[(6, 3, 15), int32] */;
    %854 = %844.0;
    %855 = %851.1;
    (%852, %853, %854, %var_2128, %855, meta[relay.Constant][45] /* ty=Tensor[(2535, 1), float64] */, %var_2137)
  };
  %856(%var_2162, %var_2163, %var_2164, %var_2165) /* ty=(Tensor[(6, 3, 15), uint32], Tensor[(6, 3, 15), int32], Tensor[(12, 3, 6), float64], Tensor[(12, 18), float64], Tensor[(1872), int64], Tensor[(2535, 1), float64], Tensor[(1872), uint32]) */
}

def @func_513(%var_505: Tensor[(13, 15, 9), int8]) -> (Tensor[(13, 15, 9), int8],) {
  %857 = cast(%var_505, dtype="int8") /* ty=Tensor[(13, 15, 9), int8] */;
  %858 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(13, 15, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 15, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 15, 9), int8] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %861 = left_shift(%859, %860) /* ty=Tensor[(13, 15, 9), int8] */;
  (%861,)
}

def @func_2574() -> Tensor[(6, 3, 12), float64] {
  @func_2572() /* ty=Tensor[(6, 3, 12), float64] */
}

def @func_4551(%var_4549: Tensor[(15, 7, 11), float32], %var_4550: Tensor[(15, 7, 11), float32]) -> (Tensor[(15, 7, 11), float64], Tensor[(15, 7, 11), bool]) {
  %874 = fn (%var_4522: Tensor[(15, 7, 11), float32], %var_4538: Tensor[(15, 7, 11), float32]) -> (Tensor[(15, 7, 11), float64], Tensor[(15, 7, 11), bool]) {
    %862 = cast(%var_4538, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
    %863 = shape_of(%var_4522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %864 = cast(%var_4522, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
    %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %866 = cast(%var_4522, dtype="float32") /* ty=Tensor[(15, 7, 11), float32] */;
    %867 = cos(%866) /* ty=Tensor[(15, 7, 11), float32] */;
    %868 = cast(%var_4522, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
    %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%867, dtype="bool") /* ty=Tensor[(15, 7, 11), bool] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %872 = mod(%864, %865) /* ty=Tensor[(15, 7, 11), float64] */;
    %873 = logical_or(%870, %871) /* ty=Tensor[(15, 7, 11), bool] */;
    (%872, %873)
  };
  %874(%var_4549, %var_4550) /* ty=(Tensor[(15, 7, 11), float64], Tensor[(15, 7, 11), bool]) */
}

def @func_5136(%var_5135: Tensor[(3, 14, 2), float32]) -> (Tensor[(3, 14, 2), int64], Tensor[(6, 3, 12), float64], Tensor[(3, 14, 2), float64]) {
  %891 = fn (%var_5112: Tensor[(3, 14, 2), float32]) -> (Tensor[(3, 14, 2), int64], Tensor[(6, 3, 12), float64], Tensor[(3, 14, 2), float64]) {
    %875 = cast(%var_5112, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
    %876 = acosh(%875) /* ty=Tensor[(3, 14, 2), float32] */;
    %877 = cast(%876, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
    %878 = log(%877) /* ty=Tensor[(3, 14, 2), float64] */;
    %879 = cast(%var_5112, dtype="int64") /* ty=Tensor[(3, 14, 2), int64] */;
    %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %881 = cast(%878, dtype="int64") /* ty=Tensor[(3, 14, 2), int64] */;
    %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %883 = @func_2342() /* ty=(Tensor[(6, 3, 12), float64],) */;
    %884 = cast(%876, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
    %885 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %886 = cast(%878, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
    %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %888 = right_shift(%881, %882) /* ty=Tensor[(3, 14, 2), int64] */;
    %889 = %883.0;
    %890 = power(%886, %887) /* ty=Tensor[(3, 14, 2), float64] */;
    (%888, %889, %890)
  };
  %891(%var_5135) /* ty=(Tensor[(3, 14, 2), int64], Tensor[(6, 3, 12), float64], Tensor[(3, 14, 2), float64]) */
}

def @func_6446(%var_6444: Tensor[(21, 4), float32]) -> (Tensor[(6, 3, 12), float32], Tensor[(3, 14, 2), float64]) {
  @func_6443(%var_6444) /* ty=(Tensor[(6, 3, 12), float32], Tensor[(3, 14, 2), float64]) */
}

def @func_5445() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(1755), int8], Tensor[(5, 351), int8]) {
  @func_5443() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float32], Tensor[(1755), int8], Tensor[(5, 351), int8]) */
}

def @func_5897() -> (int16,) {
  %892 = @func_4898() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) */;
  %893 = %892.2;
  (%893,)
}

def @func_4646() -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
  %899 = fn () -> (Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) {
    %894 = @func_2682() /* ty=Tensor[(6, 3, 12), float64] */;
    %895 = cast(%894, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
    %896 = cast(%894, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
    %897 = log10(%895) /* ty=Tensor[(6, 3, 12), float64] */;
    %898 = log2(%896) /* ty=Tensor[(6, 3, 12), float64] */;
    (%897, %898)
  };
  %899() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */
}

def @func_6522() -> Tensor[(2535), bool] {
  @func_5700() /* ty=Tensor[(2535), bool] */
}

def @func_5701() -> Tensor[(2535), bool] {
  %905 = fn () -> Tensor[(2535), bool] {
    %900 = @func_3411() /* ty=Tensor[(2535), float64] */;
    %901 = cast(meta[relay.Constant][47] /* ty=Tensor[(2535), float64] */, dtype="bool") /* ty=Tensor[(2535), bool] */;
    %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(1), int32] */;
    %903 = cast(%900, dtype="bool") /* ty=Tensor[(2535), bool] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?), bool] */;
    less_equal(%903, %904) /* ty=Tensor[(2535), bool] */
  };
  %905() /* ty=Tensor[(2535), bool] */
}

def @func_4899() -> (Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) {
  %920 = fn () -> (Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) {
    %906 = @func_2819() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), uint8]) */;
    %907 = cast(meta[relay.Constant][48] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %908 = cast(meta[relay.Constant][49] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
    %909 = cast(meta[relay.Constant][50] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %910 = reshape(%907, newshape=[]) /* ty=int16 */;
    %911 = reshape(%908, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), int16] */;
    %912 = reshape(%909, newshape=[1872]) /* ty=Tensor[(1872), uint32] */;
    %913 = @func_2318(%910, %911, %912) /* ty=(Tensor[(9, 14, 4), int16], Tensor[(1872), float32]) */;
    %914 = %906.0;
    %915 = cast(%914, dtype="float64") /* ty=Tensor[(6, 3, 12), float64] */;
    %916 = reshape(%915, newshape=[6, 3, 12]) /* ty=Tensor[(6, 3, 12), float64] */;
    %917 = @func_3584(%916) /* ty=(Tensor[(6, 3, 12), bool], Tensor[(6, 3, 12), float64], Tensor[(6, 3, 12), float64]) */;
    %918 = %913.0;
    %919 = %917.0;
    (%914, %918, meta[relay.Constant][48] /* ty=int16 */, meta[relay.Constant][49] /* ty=Tensor[(504), int16] */, meta[relay.Constant][50] /* ty=Tensor[(1872), uint32] */, %919)
  };
  %920() /* ty=(Tensor[(6, 3, 12), float64], Tensor[(9, 14, 4), int16], int16, Tensor[(504), int16], Tensor[(1872), uint32], Tensor[(6, 3, 12), bool]) */
}

def @func_4827(%var_4823: Tensor[(11, 10, 11), float64], %var_4824: Tensor[(2730), uint8], %var_4825: Tensor[(240), float64], %var_4826: Tensor[(648), float64]) -> (Tensor[(11, 10, 11), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(2535), float64], Tensor[(6, 12, 9), bool], Tensor[(240), float64], Tensor[(648), float64]) {
  @func_4821(%var_4823, %var_4824, %var_4825, %var_4826) /* ty=(Tensor[(11, 10, 11), float64], Tensor[(14, 15, 13), uint8], Tensor[(2730), uint8], Tensor[(2535), float64], Tensor[(6, 12, 9), bool], Tensor[(240), float64], Tensor[(648), float64]) */
}

def @func_5416() -> (Tensor[(2535), float64],) {
  @func_5414() /* ty=(Tensor[(2535), float64],) */
}

def @func_4769() -> Tensor[(6, 3, 12), float32] {
  @func_4767() /* ty=Tensor[(6, 3, 12), float32] */
}

def @func_3794(%var_3792: Tensor[(9, 5, 11), uint16]) -> (Tensor[(9, 5, 11), uint16],) {
  @func_3791(%var_3792) /* ty=(Tensor[(9, 5, 11), uint16],) */
}

def @func_4767() -> Tensor[(6, 3, 12), float32] {
  @func_4018() /* ty=Tensor[(6, 3, 12), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen109/build/output.py", line 2278, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:21] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

