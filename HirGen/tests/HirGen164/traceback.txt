==========mod==========
#[version = "0.0.5"]
def @func_5512(%var_5508: Tensor[(105, 2), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(15, 1, 10), float32], Tensor[(105, 2), int32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(105, 2), uint32] */, dtype="uint32") /* ty=Tensor[(105, 2), uint32] */;
  %1 = reshape(%0, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %2 = @func_4947(%1) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) */;
  %3 = @func_1523() /* ty=(Tensor[(15, 1, 10), float32],) */;
  %4 = cast(%var_5508, dtype="int32") /* ty=Tensor[(105, 2), int32] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(105, 2), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(105, 2), uint32] */, dtype="int32") /* ty=Tensor[(105, 2), int32] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %8 = @func_2968() /* ty=Tensor[(7, 5, 14), uint64] */;
  %9 = %2.0;
  %10 = %3.0;
  %11 = subtract(%6, %7) /* ty=Tensor[(105, 2), int32] */;
  (%8, %9, %10, %11)
}

def @func_1205() -> (Tensor[(7, 5, 14), uint64],) {
  %12 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%12,)
}

def @func_3361(%var_3300: Tensor[(5, 6, 5), uint16], %var_3355: Tensor[(5, 6, 5), int64]) -> (Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) {
  %13 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %16 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %17 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %18 = cast(%var_3300, dtype="bool") /* ty=Tensor[(5, 6, 5), bool] */;
  %19 = not_equal(%17, %18) /* ty=Tensor[(5, 6, 5), bool] */;
  %20 = cast(%var_3300, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %24 = bitwise_or(%22, %23) /* ty=Tensor[(5, 6, 5), int64] */;
  %25 = cast(%var_3355, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %29 = maximum(%15, %16) /* ty=Tensor[(7, 5, 14), uint16] */;
  %30 = bitwise_xor(%27, %28) /* ty=Tensor[(5, 6, 5), int64] */;
  (%29, %30)
}

def @func_6345(%var_6328: Tensor[(150), uint8], %var_6334: Tensor[(7, 11, 2), uint64]) -> (Tensor[(15, 5, 2), uint8], Tensor[(150), uint8], Tensor[(7, 11, 2), int32]) {
  %31 = cast(%var_6328, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %32 = reshape(%31, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), uint8] */;
  %33 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %34 = %33.3;
  %35 = cast(%var_6334, dtype="int32") /* ty=Tensor[(7, 11, 2), int32] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="int32") /* ty=Tensor[(7, 11, 2), int32] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %39 = @func_5543(%32) /* ty=Tensor[(15, 5, 2), uint8] */;
  %40 = right_shift(%37, %38) /* ty=Tensor[(7, 11, 2), int32] */;
  (%39, %var_6328, %40)
}

def @func_5691() -> (Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), float64]) {
  %41 = @func_3440() /* ty=Tensor[(7, 5, 14), uint64] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %43 = log10(%42) /* ty=Tensor[(7, 5, 14), float32] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %45 = atanh(%44) /* ty=Tensor[(7, 5, 14), float64] */;
  %46 = cast(%45, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %47 = reshape(%46, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %48 = @func_778(%47) /* ty=(Tensor[(7, 5, 14), float64],) */;
  %49 = %48.0;
  (%45, %49)
}

def @func_575() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %50 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %51 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %52 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%50, %51, %52)
}

def @func_1193() -> (Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) {
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(245, 2), uint64] */, dtype="uint64") /* ty=Tensor[(245, 2), uint64] */;
  %54 = reshape(%53, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %55 = @func_664(%54) /* ty=(Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %57 = erf(%56) /* ty=Tensor[(15, 1, 10), float32] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %59 = %55.1;
  %60 = cos(%58) /* ty=Tensor[(15, 1, 10), float32] */;
  (%59, meta[relay.Constant][2] /* ty=Tensor[(245, 2), uint64] */, %60)
}

def @func_4010(%var_3985: Tensor[(720), int8]) -> (Tensor[(15, 1, 10), float32], Tensor[(720), int8], Tensor[(7, 5, 14), float64]) {
  %61 = cast(%var_3985, dtype="int8") /* ty=Tensor[(720), int8] */;
  %62 = cast(%var_3985, dtype="int8") /* ty=Tensor[(720), int8] */;
  %63 = reshape(%61, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), int8] */;
  %64 = reshape(%62, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), int8] */;
  %65 = @func_2050(%63, %64) /* ty=(Tensor[(9, 8, 10), bool], Tensor[(15, 1, 10), float32]) */;
  %66 = @func_3717() /* ty=Tensor[(7, 5, 14), uint64] */;
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = greater_equal(%69, %70) /* ty=Tensor[(7, 5, 14), bool] */;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %73 = %65.1;
  %74 = sigmoid(%72) /* ty=Tensor[(7, 5, 14), float64] */;
  (%73, %var_3985, %74)
}

def @func_4104(%var_4075: Tensor[(2, 420), float32], %var_4091: Tensor[(12, 10, 7), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(2, 420), float32], Tensor[(7, 5, 14), uint64], Tensor[(12, 10, 7), float64]) {
  %75 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %76 = cast(%var_4075, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %77 = cast(%var_4075, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %78 = reshape(%76, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
  %79 = reshape(%77, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
  %80 = @func_2388(%78, %79) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) */;
  %81 = %80.0;
  %82 = cast(%var_4091, dtype="float64") /* ty=Tensor[(12, 10, 7), float64] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="float64") /* ty=Tensor[(12, 10, 7), float64] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %86 = %75.0;
  %87 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  %88 = floor_mod(%84, %85) /* ty=Tensor[(12, 10, 7), float64] */;
  (%86, %var_4075, %87, %88)
}

def @func_6206() -> Tensor[(6, 5, 7), uint32] {
  @func_6145() /* ty=Tensor[(6, 5, 7), uint32] */
}

def @func_6664(%var_6656: Tensor[(10, 5, 14), int16], %var_6657: Tensor[(10, 5, 14), int16]) -> Tensor[(10, 5, 14), int16] {
  %89 = cast(%var_6657, dtype="int16") /* ty=Tensor[(10, 5, 14), int16] */;
  %90 = shape_of(%var_6656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%var_6656, dtype="int16") /* ty=Tensor[(10, 5, 14), int16] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%91, %92) /* ty=Tensor[(10, 5, 14), int16] */
}

def @func_2638(%var_2630: uint32) -> (Tensor[(7, 5, 14), uint32], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), float32]) {
  %93 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %94 = %93.0;
  %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint32") /* ty=Tensor[(7, 5, 14), uint32] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="uint32") /* ty=Tensor[(7, 5, 14), uint32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %99 = cast(%var_2630, dtype="uint32") /* ty=uint32 */;
  %100 = reshape(%99, newshape=[]) /* ty=uint32 */;
  %101 = @func_1398(%100) /* ty=(Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %102 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
  %103 = subtract(%97, %98) /* ty=Tensor[(7, 5, 14), uint32] */;
  %104 = %101.1;
  %105 = %102.0;
  (%103, %104, %var_2630, %105)
}

def @func_2693(%var_2678: uint8, %var_2679: Tensor[(16, 6, 1), uint8]) -> (Tensor[(16, 6, ?), bool],) {
  %106 = cast(%var_2678, dtype="uint8") /* ty=uint8 */;
  %107 = cast(%var_2679, dtype="uint8") /* ty=Tensor[(16, 6, 1), uint8] */;
  %108 = bitwise_or(%106, %107) /* ty=Tensor[(16, 6, 1), uint8] */;
  %109 = cast(%108, dtype="bool") /* ty=Tensor[(16, 6, 1), bool] */;
  %110 = shape_of(%var_2679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_2679, dtype="bool") /* ty=Tensor[(16, 6, 1), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %113 = logical_or(%111, %112) /* ty=Tensor[(16, 6, ?), bool] */;
  (%113,)
}

def @func_5424() -> (Tensor[(7, 5, 14), uint64],) {
  %114 = @func_3236() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %115 = %114.0;
  (%115,)
}

def @func_6933() -> (Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) {
  %116 = @func_4963() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) */;
  %117 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %118 = %116.2;
  %119 = %117.1;
  (%118, %119)
}

def @func_6552(%var_6529: Tensor[(165), float64], %var_6530: Tensor[(210), uint32], %var_6538: Tensor[(77, 1), float64]) -> (Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(150), uint16], Tensor[(7, 5, 14), uint64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(11, 7, 8), float64], Tensor[(77, 1), float64], Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64]) {
  %120 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %121 = cast(meta[relay.Constant][6] /* ty=Tensor[(150), uint16] */, dtype="uint16") /* ty=Tensor[(150), uint16] */;
  %122 = cast(meta[relay.Constant][6] /* ty=Tensor[(150), uint16] */, dtype="int64") /* ty=Tensor[(150), int64] */;
  %123 = reshape(%121, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint16] */;
  %124 = reshape(%122, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), int64] */;
  %125 = @func_3361(%123, %124) /* ty=(Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) */;
  %126 = cast(%var_6529, dtype="float64") /* ty=Tensor[(165), float64] */;
  %127 = cast(%var_6530, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %128 = reshape(%126, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %129 = reshape(%127, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %130 = @func_1952(%128, %129) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(165), float64]) */;
  %131 = cast(%var_6538, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %132 = reshape(%131, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
  %133 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %134 = @func_4376() /* ty=Tensor[(7, 5, 14), float64] */;
  %135 = %120.0;
  %136 = %125.1;
  %137 = %130.0;
  %138 = @func_956(%132) /* ty=Tensor[(11, 7, 8), float64] */;
  %139 = @func_4376() /* ty=Tensor[(7, 5, 14), float64] */;
  %140 = %133.0;
  (%134, %135, %136, meta[relay.Constant][6] /* ty=Tensor[(150), uint16] */, %137, %var_6529, %var_6530, %138, %var_6538, %139, %140)
}

def @func_4963() -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) {
  %141 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %142 = reshape(%141, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %143 = @func_340(%142) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
  %144 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %145 = %143.2;
  (%144, %145, meta[relay.Constant][7] /* ty=Tensor[(210), uint32] */)
}

def @func_6729() -> (Tensor[(13, 1, 16), float32],) {
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %147 = log(%146) /* ty=Tensor[(13, 1, 16), float32] */;
  (%147,)
}

def @func_3843(%var_3795: Tensor[(7, 9, 8), float64], %var_3798: Tensor[(7, 9, 8), float64]) -> (Tensor[(7, 9, 8), int8],) {
  %148 = cast(%var_3795, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %149 = asin(%148) /* ty=Tensor[(7, 9, 8), float64] */;
  %150 = cast(%var_3798, dtype="bool") /* ty=Tensor[(7, 9, 8), bool] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="bool") /* ty=Tensor[(7, 9, 8), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = greater_equal(%152, %153) /* ty=Tensor[(7, 9, 8), bool] */;
  %155 = cast(%var_3795, dtype="int8") /* ty=Tensor[(7, 9, 8), int8] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="int8") /* ty=Tensor[(7, 9, 8), int8] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %159 = subtract(%157, %158) /* ty=Tensor[(7, 9, 8), int8] */;
  (%159,)
}

def @func_5150(%var_5121: Tensor[(14, 16, 2), int8], %var_5136: uint32) -> (Tensor[(14, 16, 2), bool], Tensor[(14, 16, 2), bool], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), uint64]) {
  %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 16, 2), int8] */, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %161 = shape_of(%var_5121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_5121, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 16, 2), int8] */, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %165 = shape_of(%var_5121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_5121, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(%var_5136, dtype="uint32") /* ty=uint32 */;
  %169 = reshape(%168, newshape=[]) /* ty=uint32 */;
  %170 = @func_1398(%169) /* ty=(Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %171 = @func_4020() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %172 = less(%162, %163) /* ty=Tensor[(14, 16, 2), bool] */;
  %173 = logical_or(%166, %167) /* ty=Tensor[(14, 16, 2), bool] */;
  %174 = %170.1;
  %175 = %171.0;
  (%172, %173, %174, %var_5136, %175)
}

def @func_1494(%var_1450: Tensor[(165), float64], %var_1451: Tensor[(105, 2), uint32], %var_1454: Tensor[(165), float64], %var_1468: Tensor[(7, 5, 14), float32]) -> (Tensor[(6, 5, 7), bool], Tensor[(105, 2), uint32], Tensor[(165), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float32], Tensor[(13, 5), float32], Tensor[(65), float32]) {
  %176 = cast(%var_1450, dtype="float64") /* ty=Tensor[(165), float64] */;
  %177 = cast(%var_1451, dtype="uint32") /* ty=Tensor[(105, 2), uint32] */;
  %178 = reshape(%176, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %179 = reshape(%177, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %180 = @func_279(%178, %179) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %181 = cast(%var_1454, dtype="bool") /* ty=Tensor[(165), bool] */;
  %182 = shape_of(%var_1450, dtype="int32") /* ty=Tensor[(1), int32] */;
  %183 = cast(%var_1450, dtype="bool") /* ty=Tensor[(165), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), bool] */;
  %185 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %187 = cosh(%186) /* ty=Tensor[(7, 5, 14), float32] */;
  %188 = cast(%var_1468, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %192 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %193 = cast(%var_1468, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %195 = reshape(%194, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %196 = @func_1047(%195) /* ty=(Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) */;
  %197 = %180.1;
  %198 = logical_and(%183, %184) /* ty=Tensor[(165), bool] */;
  %199 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %200 = minimum(%190, %191) /* ty=Tensor[(7, 5, 14), uint16] */;
  %201 = %192.0;
  %202 = log(%193) /* ty=Tensor[(7, 5, 14), float32] */;
  %203 = %196.0;
  (%197, %var_1451, %198, %199, %200, %201, %202, %203, meta[relay.Constant][10] /* ty=Tensor[(65), float32] */)
}

def @func_2908(%var_2866: Tensor[(60), float32], %var_2867: Tensor[(720), float32]) -> (Tensor[(12, 12, 5), bool], Tensor[(60), float32], Tensor[(720), float32], Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) {
  %204 = cast(%var_2866, dtype="float32") /* ty=Tensor[(60), float32] */;
  %205 = cast(%var_2867, dtype="float32") /* ty=Tensor[(720), float32] */;
  %206 = reshape(%204, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
  %207 = reshape(%205, newshape=[12, 12, 5]) /* ty=Tensor[(12, 12, 5), float32] */;
  %208 = @func_1878(%206, %207) /* ty=(Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) */;
  %209 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %210 = %209.0;
  %211 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %215 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %216 = %208.1;
  %217 = bitwise_and(%213, %214) /* ty=Tensor[(7, 5, 14), uint8] */;
  %218 = %215.0;
  (%216, %var_2866, %var_2867, %217, %218)
}

def @func_4757(%var_4723: Tensor[(11, 1, 8), int8], %var_4724: Tensor[(11, 1, 8), int8]) -> (Tensor[(11, 7, 8), uint32],) {
  %219 = cast(%var_4724, dtype="int8") /* ty=Tensor[(11, 1, 8), int8] */;
  %220 = shape_of(%var_4723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_4723, dtype="int8") /* ty=Tensor[(11, 1, 8), int8] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %223 = maximum(%221, %222) /* ty=Tensor[(11, ?, 8), int8] */;
  %224 = cast(%223, dtype="uint32") /* ty=Tensor[(11, ?, 8), uint32] */;
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 7, 8), int8] */, dtype="uint32") /* ty=Tensor[(11, 7, 8), uint32] */;
  %226 = subtract(%224, %225) /* ty=Tensor[(11, 7, 8), uint32] */;
  (%226,)
}

def @func_1307(%var_1234: Tensor[(65), float32]) -> (Tensor[(15, 1, 10), float32], Tensor[(65), float32], Tensor[(1, 210), uint32], Tensor[(154), uint64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(11, 7, 8), float64], Tensor[(77), float64]) {
  %227 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
  %228 = cast(meta[relay.Constant][13] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %229 = reshape(%228, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint64] */;
  %230 = @func_1115(%229) /* ty=(Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) */;
  %231 = cast(%var_1234, dtype="float32") /* ty=Tensor[(65), float32] */;
  %232 = reshape(%231, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %233 = @func_1047(%232) /* ty=(Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) */;
  %234 = %233.1;
  %235 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
  %236 = %235.0;
  %237 = cast(%236, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %238 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%234, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %242 = cast(meta[relay.Constant][14] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %243 = reshape(%242, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
  %244 = %227.2;
  %245 = %230.3;
  %246 = equal(%239, %240) /* ty=Tensor[(7, 5, 14), bool] */;
  %247 = %241.0;
  %248 = @func_956(%243) /* ty=Tensor[(11, 7, 8), float64] */;
  (%244, %var_1234, %245, meta[relay.Constant][13] /* ty=Tensor[(154), uint64] */, %246, %247, %248, meta[relay.Constant][14] /* ty=Tensor[(77), float64] */)
}

def @func_2020(%var_2018: Tensor[(200, 1), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32]) {
  %249 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %250 = cast(%var_2018, dtype="float32") /* ty=Tensor[(200, 1), float32] */;
  %251 = reshape(%250, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
  %252 = @func_843(%251) /* ty=(Tensor[(5, 4, 10), float32],) */;
  %253 = %249.0;
  %254 = %252.0;
  (%253, %254, %var_2018)
}

def @func_685() -> Tensor[(7, 5, 14), uint64] {
  @func_194() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_4520(%var_4515: Tensor[(12, 8, 3), int16]) -> (Tensor[(12, 8, 3), bool],) {
  %255 = cast(%var_4515, dtype="bool") /* ty=Tensor[(12, 8, 3), bool] */;
  %256 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 8, 3), int16] */, dtype="bool") /* ty=Tensor[(12, 8, 3), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = equal(%257, %258) /* ty=Tensor[(12, 8, 3), bool] */;
  (%259,)
}

def @func_5990() -> (Tensor[(7, 11, 2), float64], Tensor[(77), float64], Tensor[(65), float32]) {
  %260 = @func_3121() /* ty=(Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) */;
  %261 = cast(meta[relay.Constant][16] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %262 = reshape(%261, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %263 = @func_1307(%262) /* ty=(Tensor[(15, 1, 10), float32], Tensor[(65), float32], Tensor[(1, 210), uint32], Tensor[(154), uint64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(11, 7, 8), float64], Tensor[(77), float64]) */;
  %264 = %260.0;
  %265 = %263.7;
  (%264, %265, meta[relay.Constant][16] /* ty=Tensor[(65), float32] */)
}

def @func_2836() -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) {
  %266 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %267 = cast(meta[relay.Constant][17] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %268 = reshape(%267, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %269 = %266.1;
  %270 = @func_168(%268) /* ty=Tensor[(6, 5, 7), uint32] */;
  (%269, %270, meta[relay.Constant][17] /* ty=Tensor[(210), uint32] */)
}

def @func_279(%var_247: Tensor[(3, 5, 11), float64], %var_258: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) {
  %271 = cast(%var_258, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %272 = reshape(%271, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %273 = @func_168(%272) /* ty=Tensor[(6, 5, 7), uint32] */;
  %274 = cast(%var_258, dtype="bool") /* ty=Tensor[(210), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = cast(%273, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
  %279 = reshape(%278, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %280 = cast(%var_247, dtype="float64") /* ty=Tensor[(3, 5, 11), float64] */;
  %281 = exp(%280) /* ty=Tensor[(3, 5, 11), float64] */;
  %282 = cast(%var_247, dtype="int64") /* ty=Tensor[(3, 5, 11), int64] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="int64") /* ty=Tensor[(3, 5, 11), int64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %286 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %287 = less(%276, %277) /* ty=Tensor[(6, 5, 7), bool] */;
  %288 = @func_168(%279) /* ty=Tensor[(6, 5, 7), uint32] */;
  %289 = add(%284, %285) /* ty=Tensor[(3, 5, 11), int64] */;
  (%286, %287, %288, %289)
}

def @func_4056() -> (Tensor[(7, 5, 14), uint64], Tensor[(11, 15), float64], Tensor[(7, 5, 14), float64]) {
  %290 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 15), float64] */;
  %291 = reshape(%290, newshape=[1, 165]) /* ty=Tensor[(1, 165), float64] */;
  %292 = @func_2566(%291) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) */;
  %293 = @func_4020() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %296 = %292.2;
  %297 = sin(%295) /* ty=Tensor[(7, 5, 14), float64] */;
  (%296, meta[relay.Constant][18] /* ty=Tensor[(11, 15), float64] */, %297)
}

def @func_2455(%var_2445: Tensor[(16, 15, 7), float64]) -> (Tensor[(16, 15, 7), float64],) {
  %298 = cast(%var_2445, dtype="float64") /* ty=Tensor[(16, 15, 7), float64] */;
  %299 = cosh(%298) /* ty=Tensor[(16, 15, 7), float64] */;
  (%299,)
}

def @func_919() -> (Tensor[(7, 5, 14), uint64],) {
  %300 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %301 = %300.0;
  (%301,)
}

def @func_4604() -> (Tensor[(210), uint32], Tensor[(7, 11, 2), float32]) {
  %302 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %303 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %304 = %303.3;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(7, 11, 2), float32] */;
  %306 = %302.2;
  %307 = atanh(%305) /* ty=Tensor[(7, 11, 2), float32] */;
  (%306, %307)
}

def @func_1115(%var_1083: Tensor[(7, 11, 2), uint64]) -> (Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) {
  %308 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 11, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
  %309 = shape_of(%var_1083, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_1083, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %312 = bitwise_or(%310, %311) /* ty=Tensor[(7, 11, 2), uint64] */;
  %313 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 11, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %317 = cast(%312, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
  %318 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 210), uint32] */, dtype="uint32") /* ty=Tensor[(1, 210), uint32] */;
  %319 = reshape(%318, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %320 = @func_340(%319) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
  %321 = subtract(%315, %316) /* ty=Tensor[(7, 11, 2), uint64] */;
  %322 = asinh(%317) /* ty=Tensor[(7, 11, 2), float64] */;
  %323 = %320.1;
  (%321, %322, %323, meta[relay.Constant][20] /* ty=Tensor[(1, 210), uint32] */)
}

def @func_2388(%var_2324: Tensor[(12, 10, 7), float32], %var_2325: Tensor[(12, 10, 7), float32]) -> (Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) {
  %324 = cast(%var_2325, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %325 = shape_of(%var_2324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_2324, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %328 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 77), float64] */, dtype="float64") /* ty=Tensor[(1, 77), float64] */;
  %329 = reshape(%328, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
  %330 = @func_2317() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %331 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %332 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 77), float64] */, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
  %333 = log2(%332) /* ty=Tensor[(1, 77), float32] */;
  %334 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 77), float64] */, dtype="bool") /* ty=Tensor[(1, 77), bool] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%333, dtype="bool") /* ty=Tensor[(1, 77), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %338 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 77), float64] */, dtype="int32") /* ty=Tensor[(1, 77), int32] */;
  %339 = shape_of(%333, dtype="int32") /* ty=Tensor[(2), int32] */;
  %340 = cast(%333, dtype="int32") /* ty=Tensor[(1, 77), int32] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %342 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %343 = divide(%326, %327) /* ty=Tensor[(12, 10, 7), float32] */;
  %344 = @func_956(%329) /* ty=Tensor[(11, 7, 8), float64] */;
  %345 = %330.0;
  %346 = %331.0;
  %347 = greater(%336, %337) /* ty=Tensor[(?, 77), bool] */;
  %348 = right_shift(%340, %341) /* ty=Tensor[(?, 77), int32] */;
  %349 = %342.0;
  (%343, %344, %345, %346, %347, %348, %349)
}

def @func_3440() -> Tensor[(7, 5, 14), uint64] {
  %350 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %350.0
}

def @func_2999() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) {
  %351 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %352 = @func_2968() /* ty=Tensor[(7, 5, 14), uint64] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %354 = %351.0;
  %355 = @func_2968() /* ty=Tensor[(7, 5, 14), uint64] */;
  %356 = sinh(%353) /* ty=Tensor[(7, 5, 14), float64] */;
  (%354, %355, %356)
}

def @func_2180(%var_2108: Tensor[(210), uint32], %var_2168: Tensor[(6, 5, 7), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) {
  %357 = cast(meta[relay.Constant][23] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %358 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 140), uint16] */, dtype="uint16") /* ty=Tensor[(9, 140), uint16] */;
  %359 = reshape(%357, newshape=[]) /* ty=uint16 */;
  %360 = reshape(%358, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint16] */;
  %361 = @func_1327(%359, %360) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(210), uint32], Tensor[(210), uint32]) */;
  %362 = %361.0;
  %363 = cast(%362, dtype="uint16") /* ty=Tensor[(15, 6, 14), uint16] */;
  %364 = cast(meta[relay.Constant][23] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %365 = cast(%var_2108, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %366 = reshape(%365, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %367 = @func_168(%366) /* ty=Tensor[(6, 5, 7), uint32] */;
  %368 = cast(%367, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
  %369 = sinh(%368) /* ty=Tensor[(6, 5, 7), float32] */;
  %370 = cast(%var_2168, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %374 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %375 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %376 = logical_xor(%363, %364) /* ty=Tensor[(15, 6, 14), uint16] */;
  %377 = greater_equal(%372, %373) /* ty=Tensor[(6, 5, 7), bool] */;
  (%374, %var_2108, meta[relay.Constant][22] /* ty=Tensor[(9, 140), uint16] */, %375, %376, %377)
}

def @func_4680() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %378 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %379 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %380 = @func_2661() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %381 = %378.0;
  %382 = %379.0;
  %383 = %380.1;
  (%381, %382, %383)
}

def @func_6782(%var_6777: int32, %var_6778: Tensor[(15, 2, 2), int32]) -> Tensor[(15, 2, 2), bool] {
  %384 = cast(%var_6777, dtype="bool") /* ty=bool */;
  %385 = cast(%var_6778, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  greater(%384, %385) /* ty=Tensor[(15, 2, 2), bool] */
}

def @main(%var_6972: Tensor[(11, 10), float32]) -> Tensor[(11, 10), float32] {
  %386 = cast(%var_6972, dtype="float32") /* ty=Tensor[(11, 10), float32] */;
  tan(%386) /* ty=Tensor[(11, 10), float32] */
}

def @func_5203(%var_5192: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64]) {
  %387 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  %388 = cast(%var_5192, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %392 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %393 = multiply(%390, %391) /* ty=Tensor[(7, 5, 14), uint16] */;
  %394 = %392.0;
  (%393, %394)
}

def @func_2247(%var_2239: Tensor[(3, 4, 2), float32], %var_2240: Tensor[(3, 4, 2), float32]) -> (Tensor[(3, 4, 2), float32],) {
  %395 = cast(%var_2240, dtype="float32") /* ty=Tensor[(3, 4, 2), float32] */;
  %396 = shape_of(%var_2239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%var_2239, dtype="float32") /* ty=Tensor[(3, 4, 2), float32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %399 = divide(%397, %398) /* ty=Tensor[(3, 4, 2), float32] */;
  (%399,)
}

def @func_2566(%var_2553: Tensor[(1, 165), float64]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) {
  %400 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %401 = cast(%var_2553, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %402 = cast(meta[relay.Constant][24] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %403 = reshape(%401, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %404 = reshape(%402, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %405 = @func_279(%403, %404) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %406 = cast(%var_2553, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
  %407 = @func_1711() /* ty=Tensor[(7, 5, 14), uint64] */;
  %408 = %400.0;
  %409 = %405.0;
  %410 = sin(%406) /* ty=Tensor[(1, 165), float32] */;
  (%407, %408, %409, meta[relay.Constant][24] /* ty=Tensor[(210), uint32] */, %410)
}

def @func_6464(%var_6454: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool],) {
  %411 = @func_1711() /* ty=Tensor[(7, 5, 14), uint64] */;
  %412 = cast(%var_6454, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = less_equal(%414, %415) /* ty=Tensor[(7, 5, 14), bool] */;
  (%416,)
}

def @func_500() -> Tensor[(7, 5, 14), uint64] {
  @func_194() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_3637() -> Tensor[(7, 5, 14), uint64] {
  %417 = @func_3236() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %417.0
}

def @func_681() -> (Tensor[(7, 5, 14), uint64],) {
  %418 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%418,)
}

def @func_3717() -> Tensor[(7, 5, 14), uint64] {
  %419 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %419.0
}

def @func_965() -> (Tensor[(7, 5, 14), uint64],) {
  %420 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%420,)
}

def @func_1711() -> Tensor[(7, 5, 14), uint64] {
  %421 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %421.2
}

def @func_595() -> Tensor[(7, 5, 14), uint64] {
  @func_194() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_2968() -> Tensor[(7, 5, 14), uint64] {
  %422 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %422.0
}

def @func_1047(%var_1032: Tensor[(13, 5), float32]) -> (Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) {
  %423 = cast(%var_1032, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
  %424 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %426 = tan(%423) /* ty=Tensor[(13, 5), float32] */;
  %427 = asinh(%425) /* ty=Tensor[(7, 5, 14), float32] */;
  (%426, %427)
}

def @func_3236() -> (Tensor[(7, 5, 14), uint64],) {
  %428 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %429 = %428.0;
  (%429,)
}

def @func_1398(%var_1360: uint32) -> (Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) {
  %430 = cast(%var_1360, dtype="bool") /* ty=bool */;
  %431 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 7, 1), uint32] */, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %432 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %435 = reshape(%434, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %436 = @func_778(%435) /* ty=(Tensor[(7, 5, 14), float64],) */;
  %437 = less_equal(%430, %431) /* ty=Tensor[(14, 7, 1), bool] */;
  %438 = %436.0;
  (%437, %433, %438)
}

def @func_5551() -> (Tensor[(7, 5, 14), uint8],) {
  %439 = @func_2954() /* ty=Tensor[(7, 5, 14), uint8] */;
  (%439,)
}

def @func_5866(%var_5851: Tensor[(7, 5, 14), uint64], %var_5857: Tensor[(960), int16], %var_5858: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), bool], Tensor[(16, 12, 5), int16], Tensor[(960), int16], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) {
  %440 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %441 = %440.0;
  %442 = cast(%var_5851, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %446 = cast(%var_5857, dtype="int16") /* ty=Tensor[(960), int16] */;
  %447 = cast(%var_5858, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %448 = reshape(%446, newshape=[16, 12, 5]) /* ty=Tensor[(16, 12, 5), int16] */;
  %449 = reshape(%447, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %450 = @func_5608(%448, %449) /* ty=(Tensor[(16, 12, 5), int16], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %451 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %452 = greater(%444, %445) /* ty=Tensor[(7, 5, 14), bool] */;
  %453 = %450.0;
  %454 = %451.0;
  (%452, %453, %var_5857, %var_5858, %454)
}

def @func_6500() -> Tensor[(7, 5, 14), uint64] {
  %455 = @func_2317() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %455.0
}

def @func_5467() -> Tensor[(7, 5, 14), uint64] {
  %456 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %456.0
}

def @func_3150() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %457 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %458 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %459 = %457.0;
  %460 = %458.0;
  (%459, %460)
}

def @func_843(%var_821: Tensor[(5, 4, 10), float32]) -> (Tensor[(5, 4, 10), float32],) {
  %461 = cast(%var_821, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
  %462 = sinh(%461) /* ty=Tensor[(5, 4, 10), float32] */;
  (%462,)
}

def @func_547(%var_535: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool],) {
  %463 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %464 = cast(%var_535, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %468 = less(%466, %467) /* ty=Tensor[(7, 5, 14), bool] */;
  (%468,)
}

def @func_5543(%var_5530: Tensor[(15, 5, 2), uint8]) -> Tensor[(15, 5, 2), uint8] {
  %469 = cast(%var_5530, dtype="uint8") /* ty=Tensor[(15, 5, 2), uint8] */;
  %470 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(15, 5, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 5, 2), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 2), uint8] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%471, %472) /* ty=Tensor[(15, 5, 2), uint8] */
}

def @func_168(%var_160: Tensor[(6, 5, 7), uint32]) -> Tensor[(6, 5, 7), uint32] {
  %473 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %474 = cast(%var_160, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
  bitwise_xor(%473, %474) /* ty=Tensor[(6, 5, 7), uint32] */
}

def @func_956(%var_951: Tensor[(11, 7, 1), float64]) -> Tensor[(11, 7, 8), float64] {
  %475 = cast(%var_951, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
  %476 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
  divide(%475, %476) /* ty=Tensor[(11, 7, 8), float64] */
}

def @func_5372(%var_5352: Tensor[(25, 6), uint16]) -> (Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(25, 6), uint16], Tensor[(7, 5, 14), uint64]) {
  %477 = @func_4020() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %478 = cast(%var_5352, dtype="uint16") /* ty=Tensor[(25, 6), uint16] */;
  %479 = cast(%var_5352, dtype="int64") /* ty=Tensor[(25, 6), int64] */;
  %480 = reshape(%478, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint16] */;
  %481 = reshape(%479, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), int64] */;
  %482 = @func_3361(%480, %481) /* ty=(Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) */;
  %483 = @func_3150() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %484 = %477.0;
  %485 = %482.1;
  %486 = %483.0;
  (%484, %485, %var_5352, %486)
}

def @func_6145() -> Tensor[(6, 5, 7), uint32] {
  %487 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %487.1
}

def @func_4821() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %488 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %489 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  %490 = %488.0;
  (%489, %490)
}

def @func_664(%var_642: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) {
  %491 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %492 = %491.2;
  %493 = cast(%var_642, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %497 = cast(%var_642, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %498 = erf(%497) /* ty=Tensor[(7, 5, 14), float32] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %500 = right_shift(%495, %496) /* ty=Tensor[(7, 5, 14), int16] */;
  %501 = exp(%499) /* ty=Tensor[(7, 5, 14), float32] */;
  (%500, %501)
}

def @func_5716(%var_5703: Tensor[(4, 6, 7), uint64]) -> Tensor[(4, 6, 7), uint64] {
  %502 = cast(%var_5703, dtype="uint64") /* ty=Tensor[(4, 6, 7), uint64] */;
  %503 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(4, 6, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 6, 7), uint64] */, dtype="uint64") /* ty=Tensor[(4, 6, 7), uint64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%504, %505) /* ty=Tensor[(4, 6, 7), uint64] */
}

def @func_3121() -> (Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) {
  %506 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %507 = %506.3;
  %508 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 11, 2), uint64] */, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %512 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 12), float32] */;
  %513 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 12), float32] */;
  %514 = reshape(%512, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %515 = reshape(%513, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %516 = @func_2247(%514, %515) /* ty=(Tensor[(3, 4, 2), float32],) */;
  %517 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %518 = divide(%510, %511) /* ty=Tensor[(7, 11, 2), float64] */;
  %519 = %516.0;
  %520 = %517.0;
  (%518, %519, meta[relay.Constant][31] /* ty=Tensor[(2, 12), float32] */, %520)
}

def @func_1523() -> (Tensor[(15, 1, 10), float32],) {
  %521 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
  %522 = %521.2;
  (%522,)
}

def @func_4713() -> (Tensor[(7, 5, 14), uint64],) {
  %523 = @func_3637() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%523,)
}

def @func_1952(%var_1894: Tensor[(165), float64], %var_1895: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(165), float64]) {
  %524 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %525 = cast(%var_1894, dtype="float64") /* ty=Tensor[(165), float64] */;
  %526 = cast(%var_1895, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %527 = reshape(%525, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %528 = reshape(%526, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %529 = @func_279(%527, %528) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %530 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %531 = cast(%var_1894, dtype="float64") /* ty=Tensor[(165), float64] */;
  %532 = %524.0;
  %533 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %534 = %529.1;
  %535 = %530.0;
  %536 = log2(%531) /* ty=Tensor[(165), float64] */;
  (%532, %533, %534, %var_1895, %535, %536)
}

def @func_1878(%var_1851: Tensor[(1, 12, 5), float32], %var_1852: Tensor[(12, 12, 5), float32]) -> (Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) {
  %537 = cast(%var_1851, dtype="float32") /* ty=Tensor[(1, 12, 5), float32] */;
  %538 = cast(%var_1852, dtype="float32") /* ty=Tensor[(12, 12, 5), float32] */;
  %539 = cast(%var_1851, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
  %540 = cast(%var_1852, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
  %541 = power(%537, %538) /* ty=Tensor[(12, 12, 5), float32] */;
  %542 = logical_or(%539, %540) /* ty=Tensor[(12, 12, 5), bool] */;
  (%541, %542)
}

def @func_5753() -> Tensor[(210), uint32] {
  %543 = @func_4604() /* ty=(Tensor[(210), uint32], Tensor[(7, 11, 2), float32]) */;
  %543.0
}

def @func_194() -> Tensor[(7, 5, 14), uint64] {
  %544 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %545 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%546, %547) /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_6864(%var_6852: Tensor[(840), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(840), float32], Tensor[(7, 5, 14), int64]) {
  %548 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %549 = cast(%var_6852, dtype="float32") /* ty=Tensor[(840), float32] */;
  %550 = cast(%var_6852, dtype="float32") /* ty=Tensor[(840), float32] */;
  %551 = reshape(%549, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
  %552 = reshape(%550, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
  %553 = @func_2388(%551, %552) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) */;
  %554 = %553.6;
  %555 = cast(%554, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %556 = reshape(%555, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %557 = @func_5332(%556) /* ty=(Tensor[(7, 5, 14), int64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32]) */;
  %558 = %548.0;
  %559 = %557.0;
  (%558, %554, %var_6852, %559)
}

def @func_3574(%var_3553: Tensor[(4, 5, 16), float32], %var_3567: Tensor[(7, 11, 2), float64]) -> (Tensor[(4, 5, 16), float32], Tensor[(7, 11, 2), int8]) {
  %560 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 16), float32] */;
  %561 = cast(%var_3553, dtype="float32") /* ty=Tensor[(4, 5, 16), float32] */;
  %562 = @func_3121() /* ty=(Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) */;
  %563 = %562.0;
  %564 = cast(%var_3567, dtype="int8") /* ty=Tensor[(7, 11, 2), int8] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="int8") /* ty=Tensor[(7, 11, 2), int8] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %568 = divide(%560, %561) /* ty=Tensor[(4, 5, 16), float32] */;
  %569 = bitwise_and(%566, %567) /* ty=Tensor[(7, 11, 2), int8] */;
  (%568, %569)
}

def @func_2613(%var_2605: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), float32], Tensor[(7, 5, 14), float32], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(210), float64]) {
  %570 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %573 = cast(%571, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %574 = cast(%var_2605, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %575 = cast(%var_2605, dtype="float32") /* ty=Tensor[(210), float32] */;
  %576 = reshape(%574, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %577 = reshape(%575, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float32] */;
  %578 = @func_2180(%576, %577) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) */;
  %579 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %580 = cast(%var_2605, dtype="float64") /* ty=Tensor[(210), float64] */;
  %581 = cos(%572) /* ty=Tensor[(7, 5, 14), float32] */;
  %582 = rsqrt(%573) /* ty=Tensor[(7, 5, 14), float32] */;
  %583 = %578.1;
  %584 = %579.0;
  %585 = acosh(%580) /* ty=Tensor[(210), float64] */;
  (%581, %582, %583, %584, %585)
}

def @func_340(%var_317: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) {
  %586 = cast(%var_317, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %587 = reshape(%586, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %588 = @func_168(%587) /* ty=Tensor[(6, 5, 7), uint32] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %590 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %591 = sin(%589) /* ty=Tensor[(6, 5, 7), float64] */;
  (%590, %var_317, %591)
}

def @func_4020() -> (Tensor[(7, 5, 14), uint64],) {
  %592 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %593 = %592.1;
  (%593,)
}

def @func_5608(%var_5592: Tensor[(16, 12, 5), int16], %var_5601: Tensor[(210), uint32]) -> (Tensor[(16, 12, 5), int16], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) {
  %594 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 12, 5), int16] */, dtype="int16") /* ty=Tensor[(16, 12, 5), int16] */;
  %595 = shape_of(%var_5592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%var_5592, dtype="int16") /* ty=Tensor[(16, 12, 5), int16] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %598 = cast(%var_5601, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %599 = reshape(%598, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %600 = bitwise_and(%596, %597) /* ty=Tensor[(16, 12, 5), int16] */;
  %601 = @func_168(%599) /* ty=Tensor[(6, 5, 7), uint32] */;
  (%600, %601, %var_5601)
}

def @func_6393() -> (Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) {
  %602 = @func_2954() /* ty=Tensor[(7, 5, 14), uint8] */;
  %603 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%602, %603)
}

def @func_2499(%var_2471: Tensor[(6, 15, 13), float32]) -> Tensor[(6, 15, 13), float32] {
  %604 = cast(%var_2471, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %605 = sin(%604) /* ty=Tensor[(6, 15, 13), float32] */;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  log2(%606) /* ty=Tensor[(6, 15, 13), float32] */
}

def @func_1994() -> (Tensor[(7, 5, 14), uint64],) {
  %607 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %608 = %607.0;
  (%608,)
}

def @func_4880() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %609 = @func_4821() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %610 = @func_3236() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %611 = %609.1;
  %612 = %610.0;
  (%611, %612)
}

def @func_6630(%var_6567: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint8]) {
  %613 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %614 = cast(%var_6567, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %615 = reshape(%614, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %616 = @func_340(%615) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
  %617 = @func_6393() /* ty=(Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) */;
  %618 = %613.0;
  %619 = %616.0;
  %620 = %617.0;
  (%618, %619, %var_6567, %620)
}

def @func_3073() -> (Tensor[(210), uint32], Tensor[(3, 4, 2), float32], Tensor[(24), float32]) {
  %621 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %622 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %623 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %624 = reshape(%622, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %625 = reshape(%623, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %626 = @func_2247(%624, %625) /* ty=(Tensor[(3, 4, 2), float32],) */;
  %627 = %621.2;
  %628 = %626.0;
  (%627, %628, meta[relay.Constant][36] /* ty=Tensor[(24), float32] */)
}

def @func_2317() -> (Tensor[(7, 5, 14), uint64],) {
  %629 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %630 = %629.0;
  (%630,)
}

def @func_2050(%var_2040: Tensor[(9, 8, 10), int8], %var_2041: Tensor[(9, 8, 10), int8]) -> (Tensor[(9, 8, 10), bool], Tensor[(15, 1, 10), float32]) {
  %631 = cast(%var_2041, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
  %632 = shape_of(%var_2040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_2040, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = @func_1523() /* ty=(Tensor[(15, 1, 10), float32],) */;
  %636 = not_equal(%633, %634) /* ty=Tensor[(9, 8, 10), bool] */;
  %637 = %635.0;
  (%636, %637)
}

def @func_6709() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 9, 8), int8], Tensor[(504), float64]) {
  %638 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %639 = cast(meta[relay.Constant][37] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %640 = cast(meta[relay.Constant][37] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %641 = reshape(%639, newshape=[7, 9, 8]) /* ty=Tensor[(7, 9, 8), float64] */;
  %642 = reshape(%640, newshape=[7, 9, 8]) /* ty=Tensor[(7, 9, 8), float64] */;
  %643 = @func_3843(%641, %642) /* ty=(Tensor[(7, 9, 8), int8],) */;
  %644 = %638.0;
  %645 = %643.0;
  (%644, %645, meta[relay.Constant][37] /* ty=Tensor[(504), float64] */)
}

def @func_5332(%var_5275: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), int64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32]) {
  %646 = @func_3717() /* ty=Tensor[(7, 5, 14), uint64] */;
  %647 = cast(%var_5275, dtype="int64") /* ty=Tensor[(7, 5, 14), int64] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="int64") /* ty=Tensor[(7, 5, 14), int64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %651 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %652 = @func_3073() /* ty=(Tensor[(210), uint32], Tensor[(3, 4, 2), float32], Tensor[(24), float32]) */;
  %653 = bitwise_or(%649, %650) /* ty=Tensor[(7, 5, 14), int64] */;
  %654 = %651.0;
  %655 = %652.0;
  (%653, %654, %655)
}

def @func_6714(%var_6711: Tensor[(13, 16, 7), float32]) -> (Tensor[(13, 16, 7), float32],) {
  %656 = cast(%var_6711, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %657 = asinh(%656) /* ty=Tensor[(13, 16, 7), float32] */;
  (%657,)
}

def @func_4496() -> (Tensor[(7, 5, 14), float64],) {
  %658 = @func_4056() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(11, 15), float64], Tensor[(7, 5, 14), float64]) */;
  %659 = %658.2;
  (%659,)
}

def @func_6821() -> Tensor[(7, 5, 14), uint8] {
  @func_2954() /* ty=Tensor[(7, 5, 14), uint8] */
}

def @func_5814(%var_5767: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool], Tensor[(210), int16], Tensor[(15, 6, 14), uint16]) {
  %660 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %661 = %660.0;
  %662 = cast(%var_5767, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %667 = %666.2;
  %668 = cast(meta[relay.Constant][38] /* ty=Tensor[(210), uint32] */, dtype="int16") /* ty=Tensor[(210), int16] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(1), int32] */;
  %670 = cast(%667, dtype="int16") /* ty=Tensor[(210), int16] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), int16] */;
  %672 = cast(%667, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %673 = cast(meta[relay.Constant][38] /* ty=Tensor[(210), uint32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %674 = reshape(%672, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %675 = reshape(%673, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float32] */;
  %676 = @func_2180(%674, %675) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) */;
  %677 = not_equal(%664, %665) /* ty=Tensor[(7, 5, 14), bool] */;
  %678 = minimum(%670, %671) /* ty=Tensor[(210), int16] */;
  %679 = %676.4;
  (%677, %678, %679)
}

def @func_3210() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(165), float64], Tensor[(7, 5, 14), uint64]) {
  %680 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %681 = @func_3150() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %682 = cast(meta[relay.Constant][39] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %683 = reshape(%682, newshape=[1, 165]) /* ty=Tensor[(1, 165), float64] */;
  %684 = @func_2566(%683) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) */;
  %685 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %686 = %680.0;
  %687 = %681.1;
  %688 = %684.3;
  %689 = %685.0;
  (%686, %687, %688, meta[relay.Constant][39] /* ty=Tensor[(165), float64] */, %689)
}

def @func_1327(%var_1313: uint16, %var_1314: Tensor[(15, 6, 14), uint16]) -> (Tensor[(15, 6, 14), bool], Tensor[(210), uint32], Tensor[(210), uint32]) {
  %690 = cast(%var_1313, dtype="bool") /* ty=bool */;
  %691 = cast(%var_1314, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
  %692 = cast(meta[relay.Constant][40] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %693 = reshape(%692, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %694 = @func_340(%693) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
  %695 = not_equal(%690, %691) /* ty=Tensor[(15, 6, 14), bool] */;
  %696 = %694.1;
  (%695, %696, meta[relay.Constant][40] /* ty=Tensor[(210), uint32] */)
}

def @func_2427() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) {
  %697 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %698 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %699 = cast(meta[relay.Constant][41] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %700 = reshape(%699, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint64] */;
  %701 = @func_1115(%700) /* ty=(Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) */;
  %702 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  %703 = %697.0;
  %704 = %698.0;
  %705 = %701.0;
  (%702, %703, %704, %705, meta[relay.Constant][41] /* ty=Tensor[(154), uint64] */)
}

def @func_4651() -> (Tensor[(15, 1, 10), float32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %706 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
  %707 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %708 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %709 = %706.2;
  %710 = %707.0;
  %711 = %708.0;
  (%709, %710, %711)
}

def @func_2661() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %712 = @func_1711() /* ty=Tensor[(7, 5, 14), uint64] */;
  %713 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%712, %713)
}

def @func_1571() -> (Tensor[(7, 5, 14), uint64],) {
  %714 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%714,)
}

def @func_4947(%var_4944: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) {
  %715 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %716 = cast(%var_4944, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %717 = reshape(%716, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %718 = @func_340(%717) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
  %719 = %715.0;
  %720 = %718.2;
  (%719, %720, %var_4944)
}

def @func_4216(%var_4109: Tensor[(16, 6, 11), float64], %var_4115: Tensor[(10), int16], %var_4139: Tensor[(35, 6), uint32], %var_4154: Tensor[(33, 5), float64]) -> (Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20, 1), int16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(35, 6), uint32], Tensor[(7, 5, 14), uint64], Tensor[(33, 5), float64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), float32], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), uint8]) {
  %721 = cast(%var_4115, dtype="int16") /* ty=Tensor[(10), int16] */;
  %722 = cast(meta[relay.Constant][42] /* ty=Tensor[(20, 1), int16] */, dtype="int16") /* ty=Tensor[(20, 1), int16] */;
  %723 = reshape(%721, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int16] */;
  %724 = reshape(%722, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), int16] */;
  %725 = cast(%var_4139, dtype="uint32") /* ty=Tensor[(35, 6), uint32] */;
  %726 = reshape(%725, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %727 = cast(%var_4154, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %728 = reshape(%727, newshape=[1, 165]) /* ty=Tensor[(1, 165), float64] */;
  %729 = @func_2566(%728) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) */;
  %730 = %729.2;
  %731 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  %732 = cast(%731, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %733 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%730, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = cast(%var_4154, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %737 = cast(%var_4139, dtype="uint32") /* ty=Tensor[(35, 6), uint32] */;
  %738 = reshape(%736, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %739 = reshape(%737, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %740 = @func_279(%738, %739) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %741 = cast(%var_4109, dtype="float64") /* ty=Tensor[(16, 6, 11), float64] */;
  %742 = cosh(%741) /* ty=Tensor[(16, 6, 11), float64] */;
  %743 = cast(%var_4109, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %747 = @func_2661() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %748 = cast(%742, dtype="float64") /* ty=Tensor[(16, 6, 11), float64] */;
  %749 = exp(%748) /* ty=Tensor[(16, 6, 11), float64] */;
  %750 = cast(%742, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %754 = floor_divide(%752, %753) /* ty=Tensor[(16, 6, 11), float32] */;
  %755 = cast(%742, dtype="uint64") /* ty=Tensor[(16, 6, 11), uint64] */;
  %756 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%749, dtype="uint64") /* ty=Tensor[(16, 6, 11), uint64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %759 = add(%757, %758) /* ty=Tensor[(16, 6, 11), uint64] */;
  %760 = cast(%759, dtype="uint8") /* ty=Tensor[(16, 6, 11), uint8] */;
  %761 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%754, dtype="uint8") /* ty=Tensor[(16, 6, 11), uint8] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %764 = @func_3394(%723, %724) /* ty=Tensor[(2, 5, 2), int16] */;
  %765 = @func_3440() /* ty=Tensor[(7, 5, 14), uint64] */;
  %766 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %767 = @func_168(%726) /* ty=Tensor[(6, 5, 7), uint32] */;
  %768 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %769 = logical_or(%734, %735) /* ty=Tensor[(7, 5, 14), bool] */;
  %770 = %740.0;
  %771 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %772 = maximum(%745, %746) /* ty=Tensor[(16, 6, 11), float32] */;
  %773 = %747.0;
  %774 = bitwise_xor(%762, %763) /* ty=Tensor[(16, 6, 11), uint8] */;
  (%764, %var_4115, meta[relay.Constant][42] /* ty=Tensor[(20, 1), int16] */, %765, %766, %767, %var_4139, %768, %var_4154, %769, %770, %771, %772, %773, %774)
}

def @func_6127(%var_6095: Tensor[(10), int16], %var_6096: Tensor[(20), int16], %var_6105: Tensor[(96), uint8]) -> (Tensor[(7, 5, 14), uint64], Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20), int16], Tensor[(16, 6, ?), bool], uint8, Tensor[(96), uint8], Tensor[(210), int16]) {
  %775 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %776 = cast(%var_6095, dtype="int16") /* ty=Tensor[(10), int16] */;
  %777 = cast(%var_6096, dtype="int16") /* ty=Tensor[(20), int16] */;
  %778 = reshape(%776, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int16] */;
  %779 = reshape(%777, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), int16] */;
  %780 = cast(meta[relay.Constant][43] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %781 = cast(%var_6105, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %782 = reshape(%780, newshape=[]) /* ty=uint8 */;
  %783 = reshape(%781, newshape=[16, 6, 1]) /* ty=Tensor[(16, 6, 1), uint8] */;
  %784 = @func_2693(%782, %783) /* ty=(Tensor[(16, 6, ?), bool],) */;
  %785 = %775.0;
  %786 = cast(%785, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %787 = reshape(%786, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %788 = @func_5814(%787) /* ty=(Tensor[(7, 5, 14), bool], Tensor[(210), int16], Tensor[(15, 6, 14), uint16]) */;
  %789 = @func_3394(%778, %779) /* ty=Tensor[(2, 5, 2), int16] */;
  %790 = %784.0;
  %791 = %788.1;
  (%785, %789, %var_6095, %var_6096, %790, meta[relay.Constant][43] /* ty=uint8 */, %var_6105, %791)
}

def @func_5116() -> (Tensor[(7, 5, 14), uint64],) {
  %792 = @func_3717() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%792,)
}

def @func_6054(%var_6013: Tensor[(60, 1), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(12, 12, 5), float32], Tensor[(60, 1), float32], Tensor[(720), float32]) {
  %793 = @func_2661() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %794 = cast(%var_6013, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %795 = cast(meta[relay.Constant][44] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %796 = reshape(%794, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
  %797 = reshape(%795, newshape=[12, 12, 5]) /* ty=Tensor[(12, 12, 5), float32] */;
  %798 = @func_1878(%796, %797) /* ty=(Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) */;
  %799 = %793.1;
  %800 = %798.0;
  (%799, %800, %var_6013, meta[relay.Constant][44] /* ty=Tensor[(720), float32] */)
}

def @func_1820() -> (Tensor[(7, 5, 14), uint64],) {
  %801 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%801,)
}

def @func_2954() -> Tensor[(7, 5, 14), uint8] {
  %802 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %803 = %802.0;
  %804 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%806, %807) /* ty=Tensor[(7, 5, 14), uint8] */
}

def @func_4376() -> Tensor[(7, 5, 14), float64] {
  %808 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %809 = %808.1;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  acosh(%810) /* ty=Tensor[(7, 5, 14), float64] */
}

def @func_4383() -> (Tensor[(7, 5, 14), uint64],) {
  %811 = @func_3150() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %812 = %811.0;
  (%812,)
}

def @func_778(%var_773: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), float64],) {
  %813 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %814 = cast(%var_773, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %818 = floor_divide(%816, %817) /* ty=Tensor[(7, 5, 14), float64] */;
  (%818,)
}

def @func_3394(%var_3383: Tensor[(2, 5, 1), int16], %var_3384: Tensor[(2, 5, 2), int16]) -> Tensor[(2, 5, 2), int16] {
  %819 = cast(%var_3383, dtype="int16") /* ty=Tensor[(2, 5, 1), int16] */;
  %820 = cast(%var_3384, dtype="int16") /* ty=Tensor[(2, 5, 2), int16] */;
  multiply(%819, %820) /* ty=Tensor[(2, 5, 2), int16] */
}

def @func_757(%var_715: Tensor[(210), uint32]) -> (Tensor[(3, 5, 11), int64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), uint64]) {
  %821 = cast(meta[relay.Constant][46] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %822 = cast(%var_715, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %823 = reshape(%821, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %824 = reshape(%822, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %825 = @func_279(%823, %824) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %826 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %827 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %828 = cast(%827, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %829 = reshape(%828, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %830 = @func_664(%829) /* ty=(Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) */;
  %831 = %830.0;
  %832 = cast(%831, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
  %833 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%827, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %836 = %825.3;
  %837 = %826.0;
  %838 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  %839 = bitwise_xor(%834, %835) /* ty=Tensor[(7, 5, 14), int16] */;
  %840 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%836, meta[relay.Constant][46] /* ty=Tensor[(165), float64] */, %var_715, %837, %838, %839, %840)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6467(%var_6465: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool],) {
  @func_6464(%var_6465) /* ty=(Tensor[(7, 5, 14), bool],) */
}

def @func_3364(%var_3362: Tensor[(5, 6, 5), uint16], %var_3363: Tensor[(5, 6, 5), int64]) -> (Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) {
  %18 = fn (%var_3300: Tensor[(5, 6, 5), uint16], %var_3355: Tensor[(5, 6, 5), int64]) -> (Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) {
    %0 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %1 = %0.0;
    %2 = cast(%1, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
    %3 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %4 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %5 = cast(%var_3300, dtype="bool") /* ty=Tensor[(5, 6, 5), bool] */;
    %6 = not_equal(%4, %5) /* ty=Tensor[(5, 6, 5), bool] */;
    %7 = cast(%var_3300, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%6, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %11 = bitwise_or(%9, %10) /* ty=Tensor[(5, 6, 5), int64] */;
    %12 = cast(%var_3355, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%11, dtype="int64") /* ty=Tensor[(5, 6, 5), int64] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %16 = maximum(%2, %3) /* ty=Tensor[(7, 5, 14), uint16] */;
    %17 = bitwise_xor(%14, %15) /* ty=Tensor[(5, 6, 5), int64] */;
    (%16, %17)
  };
  %18(%var_3362, %var_3363) /* ty=(Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) */
}

def @func_6464(%var_6454: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool],) {
  %19 = @func_1711() /* ty=Tensor[(7, 5, 14), uint64] */;
  %20 = cast(%var_6454, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %24 = less_equal(%22, %23) /* ty=Tensor[(7, 5, 14), bool] */;
  (%24,)
}

def @func_5716(%var_5703: Tensor[(4, 6, 7), uint64]) -> Tensor[(4, 6, 7), uint64] {
  %25 = cast(%var_5703, dtype="uint64") /* ty=Tensor[(4, 6, 7), uint64] */;
  %26 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(4, 6, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 6, 7), uint64] */, dtype="uint64") /* ty=Tensor[(4, 6, 7), uint64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%27, %28) /* ty=Tensor[(4, 6, 7), uint64] */
}

def @func_2954() -> Tensor[(7, 5, 14), uint8] {
  %29 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %30 = %29.0;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%33, %34) /* ty=Tensor[(7, 5, 14), uint8] */
}

def @func_5468() -> Tensor[(7, 5, 14), uint64] {
  %36 = fn () -> Tensor[(7, 5, 14), uint64] {
    %35 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %35.0
  };
  %36() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_1572() -> (Tensor[(7, 5, 14), uint64],) {
  %38 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %37 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%37,)
  };
  %38() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_5866(%var_5851: Tensor[(7, 5, 14), uint64], %var_5857: Tensor[(960), int16], %var_5858: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), bool], Tensor[(16, 12, 5), int16], Tensor[(960), int16], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) {
  %39 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %40 = %39.0;
  %41 = cast(%var_5851, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%var_5857, dtype="int16") /* ty=Tensor[(960), int16] */;
  %46 = cast(%var_5858, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %47 = reshape(%45, newshape=[16, 12, 5]) /* ty=Tensor[(16, 12, 5), int16] */;
  %48 = reshape(%46, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %49 = @func_5608(%47, %48) /* ty=(Tensor[(16, 12, 5), int16], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %50 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %51 = greater(%43, %44) /* ty=Tensor[(7, 5, 14), bool] */;
  %52 = %49.0;
  %53 = %50.0;
  (%51, %52, %var_5857, %var_5858, %53)
}

def @func_1882(%var_1880: Tensor[(1, 12, 5), float32], %var_1881: Tensor[(12, 12, 5), float32]) -> (Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) {
  @func_1878(%var_1880, %var_1881) /* ty=(Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) */
}

def @func_4682() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  @func_4680() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */
}

def @func_6933() -> (Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) {
  %54 = @func_4963() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) */;
  %55 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %56 = %54.2;
  %57 = %55.1;
  (%56, %57)
}

def @func_2391(%var_2389: Tensor[(12, 10, 7), float32], %var_2390: Tensor[(12, 10, 7), float32]) -> (Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) {
  %84 = fn (%var_2324: Tensor[(12, 10, 7), float32], %var_2325: Tensor[(12, 10, 7), float32]) -> (Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) {
    %58 = cast(%var_2325, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
    %59 = shape_of(%var_2324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%var_2324, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 77), float64] */, dtype="float64") /* ty=Tensor[(1, 77), float64] */;
    %63 = reshape(%62, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
    %64 = @func_2317() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %65 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 77), float64] */, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
    %67 = log2(%66) /* ty=Tensor[(1, 77), float32] */;
    %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 77), float64] */, dtype="bool") /* ty=Tensor[(1, 77), bool] */;
    %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(2), int32] */;
    %70 = cast(%67, dtype="bool") /* ty=Tensor[(1, 77), bool] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 77), float64] */, dtype="int32") /* ty=Tensor[(1, 77), int32] */;
    %73 = shape_of(%67, dtype="int32") /* ty=Tensor[(2), int32] */;
    %74 = cast(%67, dtype="int32") /* ty=Tensor[(1, 77), int32] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %76 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %77 = divide(%60, %61) /* ty=Tensor[(12, 10, 7), float32] */;
    %78 = @func_956(%63) /* ty=Tensor[(11, 7, 8), float64] */;
    %79 = %64.0;
    %80 = %65.0;
    %81 = greater(%70, %71) /* ty=Tensor[(?, 77), bool] */;
    %82 = right_shift(%74, %75) /* ty=Tensor[(?, 77), int32] */;
    %83 = %76.0;
    (%77, %78, %79, %80, %81, %82, %83)
  };
  %84(%var_2389, %var_2390) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) */
}

def @func_4056() -> (Tensor[(7, 5, 14), uint64], Tensor[(11, 15), float64], Tensor[(7, 5, 14), float64]) {
  %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 15), float64] */;
  %86 = reshape(%85, newshape=[1, 165]) /* ty=Tensor[(1, 165), float64] */;
  %87 = @func_2566(%86) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) */;
  %88 = @func_4020() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %89 = %88.0;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %91 = %87.2;
  %92 = sin(%90) /* ty=Tensor[(7, 5, 14), float64] */;
  (%91, meta[relay.Constant][4] /* ty=Tensor[(11, 15), float64] */, %92)
}

def @func_2020(%var_2018: Tensor[(200, 1), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32]) {
  %93 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %94 = cast(%var_2018, dtype="float32") /* ty=Tensor[(200, 1), float32] */;
  %95 = reshape(%94, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
  %96 = @func_843(%95) /* ty=(Tensor[(5, 4, 10), float32],) */;
  %97 = %93.0;
  %98 = %96.0;
  (%97, %98, %var_2018)
}

def @func_340(%var_317: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) {
  %99 = cast(%var_317, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %100 = reshape(%99, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %101 = @func_168(%100) /* ty=Tensor[(6, 5, 7), uint32] */;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %103 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %104 = sin(%102) /* ty=Tensor[(6, 5, 7), float64] */;
  (%103, %var_317, %104)
}

def @main(%var_6972: Tensor[(11, 10), float32]) -> Tensor[(11, 10), float32] {
  %105 = cast(%var_6972, dtype="float32") /* ty=Tensor[(11, 10), float32] */;
  tan(%105) /* ty=Tensor[(11, 10), float32] */
}

def @func_5514(%var_5513: Tensor[(105, 2), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(15, 1, 10), float32], Tensor[(105, 2), int32]) {
  %118 = fn (%var_5508: Tensor[(105, 2), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(15, 1, 10), float32], Tensor[(105, 2), int32]) {
    %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(105, 2), uint32] */, dtype="uint32") /* ty=Tensor[(105, 2), uint32] */;
    %107 = reshape(%106, newshape=[210]) /* ty=Tensor[(210), uint32] */;
    %108 = @func_4947(%107) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) */;
    %109 = @func_1523() /* ty=(Tensor[(15, 1, 10), float32],) */;
    %110 = cast(%var_5508, dtype="int32") /* ty=Tensor[(105, 2), int32] */;
    %111 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(105, 2), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(105, 2), uint32] */, dtype="int32") /* ty=Tensor[(105, 2), int32] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %114 = @func_2968() /* ty=Tensor[(7, 5, 14), uint64] */;
    %115 = %108.0;
    %116 = %109.0;
    %117 = subtract(%112, %113) /* ty=Tensor[(105, 2), int32] */;
    (%114, %115, %116, %117)
  };
  %118(%var_5513) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(15, 1, 10), float32], Tensor[(105, 2), int32]) */
}

def @func_4965() -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) {
  @func_4963() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) */
}

def @func_2458(%var_2456: Tensor[(16, 15, 7), float64]) -> (Tensor[(16, 15, 7), float64],) {
  @func_2455(%var_2456) /* ty=(Tensor[(16, 15, 7), float64],) */
}

def @func_4058() -> (Tensor[(7, 5, 14), uint64], Tensor[(11, 15), float64], Tensor[(7, 5, 14), float64]) {
  @func_4056() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(11, 15), float64], Tensor[(7, 5, 14), float64]) */
}

def @func_4947(%var_4944: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) {
  %119 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %120 = cast(%var_4944, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %121 = reshape(%120, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %122 = @func_340(%121) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
  %123 = %119.0;
  %124 = %122.2;
  (%123, %124, %var_4944)
}

def @func_170(%var_169: Tensor[(6, 5, 7), uint32]) -> Tensor[(6, 5, 7), uint32] {
  %127 = fn (%var_160: Tensor[(6, 5, 7), uint32]) -> Tensor[(6, 5, 7), uint32] {
    %125 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %126 = cast(%var_160, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
    bitwise_xor(%125, %126) /* ty=Tensor[(6, 5, 7), uint32] */
  };
  %127(%var_169) /* ty=Tensor[(6, 5, 7), uint32] */
}

def @func_4107(%var_4105: Tensor[(2, 420), float32], %var_4106: Tensor[(12, 10, 7), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(2, 420), float32], Tensor[(7, 5, 14), uint64], Tensor[(12, 10, 7), float64]) {
  %142 = fn (%var_4075: Tensor[(2, 420), float32], %var_4091: Tensor[(12, 10, 7), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(2, 420), float32], Tensor[(7, 5, 14), uint64], Tensor[(12, 10, 7), float64]) {
    %128 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %129 = cast(%var_4075, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
    %130 = cast(%var_4075, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
    %131 = reshape(%129, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
    %132 = reshape(%130, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
    %133 = @func_2388(%131, %132) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) */;
    %134 = %133.0;
    %135 = cast(%var_4091, dtype="float64") /* ty=Tensor[(12, 10, 7), float64] */;
    %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(%134, dtype="float64") /* ty=Tensor[(12, 10, 7), float64] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %139 = %128.0;
    %140 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
    %141 = floor_mod(%137, %138) /* ty=Tensor[(12, 10, 7), float64] */;
    (%139, %var_4075, %140, %141)
  };
  %142(%var_4105, %var_4106) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(2, 420), float32], Tensor[(7, 5, 14), uint64], Tensor[(12, 10, 7), float64]) */
}

def @func_279(%var_247: Tensor[(3, 5, 11), float64], %var_258: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) {
  %143 = cast(%var_258, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %144 = reshape(%143, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %145 = @func_168(%144) /* ty=Tensor[(6, 5, 7), uint32] */;
  %146 = cast(%var_258, dtype="bool") /* ty=Tensor[(210), bool] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = cast(%145, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
  %151 = reshape(%150, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %152 = cast(%var_247, dtype="float64") /* ty=Tensor[(3, 5, 11), float64] */;
  %153 = exp(%152) /* ty=Tensor[(3, 5, 11), float64] */;
  %154 = cast(%var_247, dtype="int64") /* ty=Tensor[(3, 5, 11), int64] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="int64") /* ty=Tensor[(3, 5, 11), int64] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %158 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %159 = less(%148, %149) /* ty=Tensor[(6, 5, 7), bool] */;
  %160 = @func_168(%151) /* ty=Tensor[(6, 5, 7), uint32] */;
  %161 = add(%156, %157) /* ty=Tensor[(3, 5, 11), int64] */;
  (%158, %159, %160, %161)
}

def @func_4604() -> (Tensor[(210), uint32], Tensor[(7, 11, 2), float32]) {
  %162 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %163 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %164 = %163.3;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(7, 11, 2), float32] */;
  %166 = %162.2;
  %167 = atanh(%165) /* ty=Tensor[(7, 11, 2), float32] */;
  (%166, %167)
}

def @func_958(%var_957: Tensor[(11, 7, 1), float64]) -> Tensor[(11, 7, 8), float64] {
  %170 = fn (%var_951: Tensor[(11, 7, 1), float64]) -> Tensor[(11, 7, 8), float64] {
    %168 = cast(%var_951, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
    %169 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
    divide(%168, %169) /* ty=Tensor[(11, 7, 8), float64] */
  };
  %170(%var_957) /* ty=Tensor[(11, 7, 8), float64] */
}

def @func_283(%var_281: Tensor[(3, 5, 11), float64], %var_282: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) {
  @func_279(%var_281, %var_282) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */
}

def @func_1952(%var_1894: Tensor[(165), float64], %var_1895: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(165), float64]) {
  %171 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %172 = cast(%var_1894, dtype="float64") /* ty=Tensor[(165), float64] */;
  %173 = cast(%var_1895, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %174 = reshape(%172, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %175 = reshape(%173, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %176 = @func_279(%174, %175) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %177 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %178 = cast(%var_1894, dtype="float64") /* ty=Tensor[(165), float64] */;
  %179 = %171.0;
  %180 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %181 = %176.1;
  %182 = %177.0;
  %183 = log2(%178) /* ty=Tensor[(165), float64] */;
  (%179, %180, %181, %var_1895, %182, %183)
}

def @func_1822() -> (Tensor[(7, 5, 14), uint64],) {
  @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_3394(%var_3383: Tensor[(2, 5, 1), int16], %var_3384: Tensor[(2, 5, 2), int16]) -> Tensor[(2, 5, 2), int16] {
  %184 = cast(%var_3383, dtype="int16") /* ty=Tensor[(2, 5, 1), int16] */;
  %185 = cast(%var_3384, dtype="int16") /* ty=Tensor[(2, 5, 2), int16] */;
  multiply(%184, %185) /* ty=Tensor[(2, 5, 2), int16] */
}

def @func_2693(%var_2678: uint8, %var_2679: Tensor[(16, 6, 1), uint8]) -> (Tensor[(16, 6, ?), bool],) {
  %186 = cast(%var_2678, dtype="uint8") /* ty=uint8 */;
  %187 = cast(%var_2679, dtype="uint8") /* ty=Tensor[(16, 6, 1), uint8] */;
  %188 = bitwise_or(%186, %187) /* ty=Tensor[(16, 6, 1), uint8] */;
  %189 = cast(%188, dtype="bool") /* ty=Tensor[(16, 6, 1), bool] */;
  %190 = shape_of(%var_2679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%var_2679, dtype="bool") /* ty=Tensor[(16, 6, 1), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = logical_or(%191, %192) /* ty=Tensor[(16, 6, ?), bool] */;
  (%193,)
}

def @func_1330(%var_1328: uint16, %var_1329: Tensor[(15, 6, 14), uint16]) -> (Tensor[(15, 6, 14), bool], Tensor[(210), uint32], Tensor[(210), uint32]) {
  %201 = fn (%var_1313: uint16, %var_1314: Tensor[(15, 6, 14), uint16]) -> (Tensor[(15, 6, 14), bool], Tensor[(210), uint32], Tensor[(210), uint32]) {
    %194 = cast(%var_1313, dtype="bool") /* ty=bool */;
    %195 = cast(%var_1314, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
    %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %197 = reshape(%196, newshape=[210]) /* ty=Tensor[(210), uint32] */;
    %198 = @func_340(%197) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
    %199 = not_equal(%194, %195) /* ty=Tensor[(15, 6, 14), bool] */;
    %200 = %198.1;
    (%199, %200, meta[relay.Constant][8] /* ty=Tensor[(210), uint32] */)
  };
  %201(%var_1328, %var_1329) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(210), uint32], Tensor[(210), uint32]) */
}

def @func_843(%var_821: Tensor[(5, 4, 10), float32]) -> (Tensor[(5, 4, 10), float32],) {
  %202 = cast(%var_821, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
  %203 = sinh(%202) /* ty=Tensor[(5, 4, 10), float32] */;
  (%203,)
}

def @func_2956() -> Tensor[(7, 5, 14), uint8] {
  @func_2954() /* ty=Tensor[(7, 5, 14), uint8] */
}

def @func_2999() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) {
  %204 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %205 = @func_2968() /* ty=Tensor[(7, 5, 14), uint64] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %207 = %204.0;
  %208 = @func_2968() /* ty=Tensor[(7, 5, 14), uint64] */;
  %209 = sinh(%206) /* ty=Tensor[(7, 5, 14), float64] */;
  (%207, %208, %209)
}

def @func_2662() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %212 = fn () -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
    %210 = @func_1711() /* ty=Tensor[(7, 5, 14), uint64] */;
    %211 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%210, %211)
  };
  %212() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */
}

def @func_2613(%var_2605: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), float32], Tensor[(7, 5, 14), float32], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(210), float64]) {
  %213 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %214 = %213.0;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %216 = cast(%214, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %217 = cast(%var_2605, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %218 = cast(%var_2605, dtype="float32") /* ty=Tensor[(210), float32] */;
  %219 = reshape(%217, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %220 = reshape(%218, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float32] */;
  %221 = @func_2180(%219, %220) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) */;
  %222 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %223 = cast(%var_2605, dtype="float64") /* ty=Tensor[(210), float64] */;
  %224 = cos(%215) /* ty=Tensor[(7, 5, 14), float32] */;
  %225 = rsqrt(%216) /* ty=Tensor[(7, 5, 14), float32] */;
  %226 = %221.1;
  %227 = %222.0;
  %228 = acosh(%223) /* ty=Tensor[(210), float64] */;
  (%224, %225, %226, %227, %228)
}

def @func_3150() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %229 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %230 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %231 = %229.0;
  %232 = %230.0;
  (%231, %232)
}

def @func_5424() -> (Tensor[(7, 5, 14), uint64],) {
  %233 = @func_3236() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %234 = %233.0;
  (%234,)
}

def @func_5545(%var_5544: Tensor[(15, 5, 2), uint8]) -> Tensor[(15, 5, 2), uint8] {
  %239 = fn (%var_5530: Tensor[(15, 5, 2), uint8]) -> Tensor[(15, 5, 2), uint8] {
    %235 = cast(%var_5530, dtype="uint8") /* ty=Tensor[(15, 5, 2), uint8] */;
    %236 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(15, 5, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %237 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 5, 2), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 2), uint8] */;
    %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    right_shift(%237, %238) /* ty=Tensor[(15, 5, 2), uint8] */
  };
  %239(%var_5544) /* ty=Tensor[(15, 5, 2), uint8] */
}

def @func_6866(%var_6865: Tensor[(840), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(840), float32], Tensor[(7, 5, 14), int64]) {
  %252 = fn (%var_6852: Tensor[(840), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(840), float32], Tensor[(7, 5, 14), int64]) {
    %240 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %241 = cast(%var_6852, dtype="float32") /* ty=Tensor[(840), float32] */;
    %242 = cast(%var_6852, dtype="float32") /* ty=Tensor[(840), float32] */;
    %243 = reshape(%241, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
    %244 = reshape(%242, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
    %245 = @func_2388(%243, %244) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(11, 7, 8), float64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(?, 77), bool], Tensor[(?, 77), int32], Tensor[(7, 5, 14), uint64]) */;
    %246 = %245.6;
    %247 = cast(%246, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
    %248 = reshape(%247, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
    %249 = @func_5332(%248) /* ty=(Tensor[(7, 5, 14), int64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32]) */;
    %250 = %240.0;
    %251 = %249.0;
    (%250, %246, %var_6852, %251)
  };
  %252(%var_6865) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(840), float32], Tensor[(7, 5, 14), int64]) */
}

def @func_967() -> (Tensor[(7, 5, 14), uint64],) {
  @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_5426() -> (Tensor[(7, 5, 14), uint64],) {
  @func_5424() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_4881() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %257 = fn () -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
    %253 = @func_4821() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
    %254 = @func_3236() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %255 = %253.1;
    %256 = %254.0;
    (%255, %256)
  };
  %257() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */
}

def @func_2455(%var_2445: Tensor[(16, 15, 7), float64]) -> (Tensor[(16, 15, 7), float64],) {
  %258 = cast(%var_2445, dtype="float64") /* ty=Tensor[(16, 15, 7), float64] */;
  %259 = cosh(%258) /* ty=Tensor[(16, 15, 7), float64] */;
  (%259,)
}

def @func_4523(%var_4521: Tensor[(12, 8, 3), int16]) -> (Tensor[(12, 8, 3), bool],) {
  @func_4520(%var_4521) /* ty=(Tensor[(12, 8, 3), bool],) */
}

def @func_685() -> Tensor[(7, 5, 14), uint64] {
  @func_194() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_3152() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  @func_3150() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */
}

def @func_1494(%var_1450: Tensor[(165), float64], %var_1451: Tensor[(105, 2), uint32], %var_1454: Tensor[(165), float64], %var_1468: Tensor[(7, 5, 14), float32]) -> (Tensor[(6, 5, 7), bool], Tensor[(105, 2), uint32], Tensor[(165), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float32], Tensor[(13, 5), float32], Tensor[(65), float32]) {
  %260 = cast(%var_1450, dtype="float64") /* ty=Tensor[(165), float64] */;
  %261 = cast(%var_1451, dtype="uint32") /* ty=Tensor[(105, 2), uint32] */;
  %262 = reshape(%260, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %263 = reshape(%261, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %264 = @func_279(%262, %263) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %265 = cast(%var_1454, dtype="bool") /* ty=Tensor[(165), bool] */;
  %266 = shape_of(%var_1450, dtype="int32") /* ty=Tensor[(1), int32] */;
  %267 = cast(%var_1450, dtype="bool") /* ty=Tensor[(165), bool] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?), bool] */;
  %269 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %271 = cosh(%270) /* ty=Tensor[(7, 5, 14), float32] */;
  %272 = cast(%var_1468, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %276 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %277 = cast(%var_1468, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %278 = cast(meta[relay.Constant][10] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %279 = reshape(%278, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %280 = @func_1047(%279) /* ty=(Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) */;
  %281 = %264.1;
  %282 = logical_and(%267, %268) /* ty=Tensor[(165), bool] */;
  %283 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %284 = minimum(%274, %275) /* ty=Tensor[(7, 5, 14), uint16] */;
  %285 = %276.0;
  %286 = log(%277) /* ty=Tensor[(7, 5, 14), float32] */;
  %287 = %280.0;
  (%281, %var_1451, %282, %283, %284, %285, %286, %287, meta[relay.Constant][10] /* ty=Tensor[(65), float32] */)
}

def @func_6147() -> Tensor[(6, 5, 7), uint32] {
  @func_6145() /* ty=Tensor[(6, 5, 7), uint32] */
}

def @func_6822() -> Tensor[(7, 5, 14), uint8] {
  %288 = fn () -> Tensor[(7, 5, 14), uint8] {
    @func_2954() /* ty=Tensor[(7, 5, 14), uint8] */
  };
  %288() /* ty=Tensor[(7, 5, 14), uint8] */
}

def @func_6667(%var_6665: Tensor[(10, 5, 14), int16], %var_6666: Tensor[(10, 5, 14), int16]) -> Tensor[(10, 5, 14), int16] {
  %293 = fn (%var_6656: Tensor[(10, 5, 14), int16], %var_6657: Tensor[(10, 5, 14), int16]) -> Tensor[(10, 5, 14), int16] {
    %289 = cast(%var_6657, dtype="int16") /* ty=Tensor[(10, 5, 14), int16] */;
    %290 = shape_of(%var_6656, dtype="int32") /* ty=Tensor[(3), int32] */;
    %291 = cast(%var_6656, dtype="int16") /* ty=Tensor[(10, 5, 14), int16] */;
    %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_or(%291, %292) /* ty=Tensor[(10, 5, 14), int16] */
  };
  %293(%var_6665, %var_6666) /* ty=Tensor[(10, 5, 14), int16] */
}

def @func_5150(%var_5121: Tensor[(14, 16, 2), int8], %var_5136: uint32) -> (Tensor[(14, 16, 2), bool], Tensor[(14, 16, 2), bool], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), uint64]) {
  %294 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 16, 2), int8] */, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %295 = shape_of(%var_5121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%var_5121, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 16, 2), int8] */, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %299 = shape_of(%var_5121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_5121, dtype="bool") /* ty=Tensor[(14, 16, 2), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = cast(%var_5136, dtype="uint32") /* ty=uint32 */;
  %303 = reshape(%302, newshape=[]) /* ty=uint32 */;
  %304 = @func_1398(%303) /* ty=(Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %305 = @func_4020() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %306 = less(%296, %297) /* ty=Tensor[(14, 16, 2), bool] */;
  %307 = logical_or(%300, %301) /* ty=Tensor[(14, 16, 2), bool] */;
  %308 = %304.1;
  %309 = %305.0;
  (%306, %307, %308, %var_5136, %309)
}

def @func_4385() -> (Tensor[(7, 5, 14), uint64],) {
  @func_4383() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_6206() -> Tensor[(6, 5, 7), uint32] {
  @func_6145() /* ty=Tensor[(6, 5, 7), uint32] */
}

def @func_2499(%var_2471: Tensor[(6, 15, 13), float32]) -> Tensor[(6, 15, 13), float32] {
  %310 = cast(%var_2471, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %311 = sin(%310) /* ty=Tensor[(6, 15, 13), float32] */;
  %312 = cast(%311, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  log2(%312) /* ty=Tensor[(6, 15, 13), float32] */
}

def @func_2053(%var_2051: Tensor[(9, 8, 10), int8], %var_2052: Tensor[(9, 8, 10), int8]) -> (Tensor[(9, 8, 10), bool], Tensor[(15, 1, 10), float32]) {
  %320 = fn (%var_2040: Tensor[(9, 8, 10), int8], %var_2041: Tensor[(9, 8, 10), int8]) -> (Tensor[(9, 8, 10), bool], Tensor[(15, 1, 10), float32]) {
    %313 = cast(%var_2041, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
    %314 = shape_of(%var_2040, dtype="int32") /* ty=Tensor[(3), int32] */;
    %315 = cast(%var_2040, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %317 = @func_1523() /* ty=(Tensor[(15, 1, 10), float32],) */;
    %318 = not_equal(%315, %316) /* ty=Tensor[(9, 8, 10), bool] */;
    %319 = %317.0;
    (%318, %319)
  };
  %320(%var_2051, %var_2052) /* ty=(Tensor[(9, 8, 10), bool], Tensor[(15, 1, 10), float32]) */
}

def @func_502() -> Tensor[(7, 5, 14), uint64] {
  @func_500() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_4498() -> (Tensor[(7, 5, 14), float64],) {
  @func_4496() /* ty=(Tensor[(7, 5, 14), float64],) */
}

def @func_1193() -> (Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) {
  %321 = cast(meta[relay.Constant][12] /* ty=Tensor[(245, 2), uint64] */, dtype="uint64") /* ty=Tensor[(245, 2), uint64] */;
  %322 = reshape(%321, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %323 = @func_664(%322) /* ty=(Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) */;
  %324 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %325 = erf(%324) /* ty=Tensor[(15, 1, 10), float32] */;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %327 = %323.1;
  %328 = cos(%326) /* ty=Tensor[(15, 1, 10), float32] */;
  (%327, meta[relay.Constant][12] /* ty=Tensor[(245, 2), uint64] */, %328)
}

def @func_2427() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) {
  %329 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %330 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %331 = cast(meta[relay.Constant][14] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %332 = reshape(%331, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint64] */;
  %333 = @func_1115(%332) /* ty=(Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) */;
  %334 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  %335 = %329.0;
  %336 = %330.0;
  %337 = %333.0;
  (%334, %335, %336, %337, meta[relay.Constant][14] /* ty=Tensor[(154), uint64] */)
}

def @func_6710() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 9, 8), int8], Tensor[(504), float64]) {
  %346 = fn () -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 9, 8), int8], Tensor[(504), float64]) {
    %338 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
    %339 = cast(meta[relay.Constant][15] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %340 = cast(meta[relay.Constant][15] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %341 = reshape(%339, newshape=[7, 9, 8]) /* ty=Tensor[(7, 9, 8), float64] */;
    %342 = reshape(%340, newshape=[7, 9, 8]) /* ty=Tensor[(7, 9, 8), float64] */;
    %343 = @func_3843(%341, %342) /* ty=(Tensor[(7, 9, 8), int8],) */;
    %344 = %338.0;
    %345 = %343.0;
    (%344, %345, meta[relay.Constant][15] /* ty=Tensor[(504), float64] */)
  };
  %346() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 9, 8), int8], Tensor[(504), float64]) */
}

def @func_1524() -> (Tensor[(15, 1, 10), float32],) {
  %349 = fn () -> (Tensor[(15, 1, 10), float32],) {
    %347 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
    %348 = %347.2;
    (%348,)
  };
  %349() /* ty=(Tensor[(15, 1, 10), float32],) */
}

def @func_1996() -> (Tensor[(7, 5, 14), uint64],) {
  @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_1994() -> (Tensor[(7, 5, 14), uint64],) {
  %350 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %351 = %350.0;
  (%351,)
}

def @func_3441() -> Tensor[(7, 5, 14), uint64] {
  %353 = fn () -> Tensor[(7, 5, 14), uint64] {
    %352 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %352.0
  };
  %353() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_3847(%var_3845: Tensor[(7, 9, 8), float64], %var_3846: Tensor[(7, 9, 8), float64]) -> (Tensor[(7, 9, 8), int8],) {
  @func_3843(%var_3845, %var_3846) /* ty=(Tensor[(7, 9, 8), int8],) */
}

def @func_3001() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) {
  @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */
}

def @func_4652() -> (Tensor[(15, 1, 10), float32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %360 = fn () -> (Tensor[(15, 1, 10), float32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
    %354 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
    %355 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %356 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %357 = %354.2;
    %358 = %355.0;
    %359 = %356.0;
    (%357, %358, %359)
  };
  %360() /* ty=(Tensor[(15, 1, 10), float32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */
}

def @func_3210() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(165), float64], Tensor[(7, 5, 14), uint64]) {
  %361 = @func_965() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %362 = @func_3150() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %363 = cast(meta[relay.Constant][16] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %364 = reshape(%363, newshape=[1, 165]) /* ty=Tensor[(1, 165), float64] */;
  %365 = @func_2566(%364) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) */;
  %366 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %367 = %361.0;
  %368 = %362.1;
  %369 = %365.3;
  %370 = %366.0;
  (%367, %368, %369, meta[relay.Constant][16] /* ty=Tensor[(165), float64] */, %370)
}

def @func_1049(%var_1048: Tensor[(13, 5), float32]) -> (Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) {
  %376 = fn (%var_1032: Tensor[(13, 5), float32]) -> (Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) {
    %371 = cast(%var_1032, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
    %372 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
    %373 = cast(%372, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
    %374 = tan(%371) /* ty=Tensor[(13, 5), float32] */;
    %375 = asinh(%373) /* ty=Tensor[(7, 5, 14), float32] */;
    (%374, %375)
  };
  %376(%var_1048) /* ty=(Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) */
}

def @func_6552(%var_6529: Tensor[(165), float64], %var_6530: Tensor[(210), uint32], %var_6538: Tensor[(77, 1), float64]) -> (Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(150), uint16], Tensor[(7, 5, 14), uint64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(11, 7, 8), float64], Tensor[(77, 1), float64], Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64]) {
  %377 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %378 = cast(meta[relay.Constant][17] /* ty=Tensor[(150), uint16] */, dtype="uint16") /* ty=Tensor[(150), uint16] */;
  %379 = cast(meta[relay.Constant][17] /* ty=Tensor[(150), uint16] */, dtype="int64") /* ty=Tensor[(150), int64] */;
  %380 = reshape(%378, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint16] */;
  %381 = reshape(%379, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), int64] */;
  %382 = @func_3361(%380, %381) /* ty=(Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) */;
  %383 = cast(%var_6529, dtype="float64") /* ty=Tensor[(165), float64] */;
  %384 = cast(%var_6530, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %385 = reshape(%383, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %386 = reshape(%384, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %387 = @func_1952(%385, %386) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(165), float64]) */;
  %388 = cast(%var_6538, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %389 = reshape(%388, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
  %390 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %391 = @func_4376() /* ty=Tensor[(7, 5, 14), float64] */;
  %392 = %377.0;
  %393 = %382.1;
  %394 = %387.0;
  %395 = @func_956(%389) /* ty=Tensor[(11, 7, 8), float64] */;
  %396 = @func_4376() /* ty=Tensor[(7, 5, 14), float64] */;
  %397 = %390.0;
  (%391, %392, %393, meta[relay.Constant][17] /* ty=Tensor[(150), uint16] */, %394, %var_6529, %var_6530, %395, %var_6538, %396, %397)
}

def @func_195() -> Tensor[(7, 5, 14), uint64] {
  %402 = fn () -> Tensor[(7, 5, 14), uint64] {
    %398 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
    %399 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    left_shift(%400, %401) /* ty=Tensor[(7, 5, 14), uint64] */
  };
  %402() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_3123() -> (Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) {
  @func_3121() /* ty=(Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) */
}

def @func_3073() -> (Tensor[(210), uint32], Tensor[(3, 4, 2), float32], Tensor[(24), float32]) {
  %403 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %404 = cast(meta[relay.Constant][20] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %405 = cast(meta[relay.Constant][20] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %406 = reshape(%404, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %407 = reshape(%405, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %408 = @func_2247(%406, %407) /* ty=(Tensor[(3, 4, 2), float32],) */;
  %409 = %403.2;
  %410 = %408.0;
  (%409, %410, meta[relay.Constant][20] /* ty=Tensor[(24), float32] */)
}

def @func_6716(%var_6715: Tensor[(13, 16, 7), float32]) -> (Tensor[(13, 16, 7), float32],) {
  %413 = fn (%var_6711: Tensor[(13, 16, 7), float32]) -> (Tensor[(13, 16, 7), float32],) {
    %411 = cast(%var_6711, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
    %412 = asinh(%411) /* ty=Tensor[(13, 16, 7), float32] */;
    (%412,)
  };
  %413(%var_6715) /* ty=(Tensor[(13, 16, 7), float32],) */
}

def @func_920() -> (Tensor[(7, 5, 14), uint64],) {
  %416 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %414 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %415 = %414.0;
    (%415,)
  };
  %416() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_5817(%var_5815: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool], Tensor[(210), int16], Tensor[(15, 6, 14), uint16]) {
  @func_5814(%var_5815) /* ty=(Tensor[(7, 5, 14), bool], Tensor[(210), int16], Tensor[(15, 6, 14), uint16]) */
}

def @func_5117() -> (Tensor[(7, 5, 14), uint64],) {
  %418 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %417 = @func_3717() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%417,)
  };
  %418() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_5871(%var_5868: Tensor[(7, 5, 14), uint64], %var_5869: Tensor[(960), int16], %var_5870: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), bool], Tensor[(16, 12, 5), int16], Tensor[(960), int16], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) {
  @func_5866(%var_5868, %var_5869, %var_5870) /* ty=(Tensor[(7, 5, 14), bool], Tensor[(16, 12, 5), int16], Tensor[(960), int16], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) */
}

def @func_6054(%var_6013: Tensor[(60, 1), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(12, 12, 5), float32], Tensor[(60, 1), float32], Tensor[(720), float32]) {
  %419 = @func_2661() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %420 = cast(%var_6013, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %421 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %422 = reshape(%420, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
  %423 = reshape(%421, newshape=[12, 12, 5]) /* ty=Tensor[(12, 12, 5), float32] */;
  %424 = @func_1878(%422, %423) /* ty=(Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) */;
  %425 = %419.1;
  %426 = %424.0;
  (%425, %426, %var_6013, meta[relay.Constant][21] /* ty=Tensor[(720), float32] */)
}

def @func_3212() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(165), float64], Tensor[(7, 5, 14), uint64]) {
  @func_3210() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(165), float64], Tensor[(7, 5, 14), uint64]) */
}

def @func_6501() -> Tensor[(7, 5, 14), uint64] {
  %428 = fn () -> Tensor[(7, 5, 14), uint64] {
    %427 = @func_2317() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %427.0
  };
  %428() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_682() -> (Tensor[(7, 5, 14), uint64],) {
  %430 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %429 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%429,)
  };
  %430() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_6057(%var_6055: Tensor[(60, 1), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(12, 12, 5), float32], Tensor[(60, 1), float32], Tensor[(720), float32]) {
  @func_6054(%var_6055) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(12, 12, 5), float32], Tensor[(60, 1), float32], Tensor[(720), float32]) */
}

def @func_6394() -> (Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) {
  %433 = fn () -> (Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) {
    %431 = @func_2954() /* ty=Tensor[(7, 5, 14), uint8] */;
    %432 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%431, %432)
  };
  %433() /* ty=(Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) */
}

def @func_5206(%var_5204: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64]) {
  @func_5203(%var_5204) /* ty=(Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64]) */
}

def @func_780(%var_779: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), float64],) {
  %440 = fn (%var_773: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), float64],) {
    %434 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
    %435 = cast(%var_773, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
    %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
    %437 = cast(%434, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
    %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %439 = floor_divide(%437, %438) /* ty=Tensor[(7, 5, 14), float64] */;
    (%439,)
  };
  %440(%var_779) /* ty=(Tensor[(7, 5, 14), float64],) */
}

def @func_500() -> Tensor[(7, 5, 14), uint64] {
  @func_194() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_2640(%var_2639: uint32) -> (Tensor[(7, 5, 14), uint32], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), float32]) {
  %454 = fn (%var_2630: uint32) -> (Tensor[(7, 5, 14), uint32], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), float32]) {
    %441 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %442 = %441.0;
    %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint32") /* ty=Tensor[(7, 5, 14), uint32] */;
    %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%442, dtype="uint32") /* ty=Tensor[(7, 5, 14), uint32] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %447 = cast(%var_2630, dtype="uint32") /* ty=uint32 */;
    %448 = reshape(%447, newshape=[]) /* ty=uint32 */;
    %449 = @func_1398(%448) /* ty=(Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
    %450 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
    %451 = subtract(%445, %446) /* ty=Tensor[(7, 5, 14), uint32] */;
    %452 = %449.1;
    %453 = %450.0;
    (%451, %452, %var_2630, %453)
  };
  %454(%var_2639) /* ty=(Tensor[(7, 5, 14), uint32], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), float32]) */
}

def @func_4378() -> Tensor[(7, 5, 14), float64] {
  @func_4376() /* ty=Tensor[(7, 5, 14), float64] */
}

def @func_5203(%var_5192: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64]) {
  %455 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  %456 = cast(%var_5192, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="uint16") /* ty=Tensor[(7, 5, 14), uint16] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %460 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %461 = multiply(%458, %459) /* ty=Tensor[(7, 5, 14), uint16] */;
  %462 = %460.0;
  (%461, %462)
}

def @func_6145() -> Tensor[(6, 5, 7), uint32] {
  %463 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %463.1
}

def @func_4021() -> (Tensor[(7, 5, 14), uint64],) {
  %466 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %464 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
    %465 = %464.1;
    (%465,)
  };
  %466() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_2697(%var_2695: uint8, %var_2696: Tensor[(16, 6, 1), uint8]) -> (Tensor[(16, 6, ?), bool],) {
  @func_2693(%var_2695, %var_2696) /* ty=(Tensor[(16, 6, ?), bool],) */
}

def @func_2837() -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) {
  %472 = fn () -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) {
    %467 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
    %468 = cast(meta[relay.Constant][23] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %469 = reshape(%468, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
    %470 = %467.1;
    %471 = @func_168(%469) /* ty=Tensor[(6, 5, 7), uint32] */;
    (%470, %471, meta[relay.Constant][23] /* ty=Tensor[(210), uint32] */)
  };
  %472() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */
}

def @func_1206() -> (Tensor[(7, 5, 14), uint64],) {
  %474 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %473 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%473,)
  };
  %474() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_1500(%var_1496: Tensor[(165), float64], %var_1497: Tensor[(105, 2), uint32], %var_1498: Tensor[(165), float64], %var_1499: Tensor[(7, 5, 14), float32]) -> (Tensor[(6, 5, 7), bool], Tensor[(105, 2), uint32], Tensor[(165), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float32], Tensor[(13, 5), float32], Tensor[(65), float32]) {
  @func_1494(%var_1496, %var_1497, %var_1498, %var_1499) /* ty=(Tensor[(6, 5, 7), bool], Tensor[(105, 2), uint32], Tensor[(165), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float32], Tensor[(13, 5), float32], Tensor[(65), float32]) */
}

def @func_6632(%var_6631: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint8]) {
  %483 = fn (%var_6567: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint8]) {
    %475 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %476 = cast(%var_6567, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %477 = reshape(%476, newshape=[210]) /* ty=Tensor[(210), uint32] */;
    %478 = @func_340(%477) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
    %479 = @func_6393() /* ty=(Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) */;
    %480 = %475.0;
    %481 = %478.0;
    %482 = %479.0;
    (%480, %481, %var_6567, %482)
  };
  %483(%var_6631) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint8]) */
}

def @func_759(%var_758: Tensor[(210), uint32]) -> (Tensor[(3, 5, 11), int64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), uint64]) {
  %504 = fn (%var_715: Tensor[(210), uint32]) -> (Tensor[(3, 5, 11), int64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), uint64]) {
    %484 = cast(meta[relay.Constant][24] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
    %485 = cast(%var_715, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %486 = reshape(%484, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
    %487 = reshape(%485, newshape=[210]) /* ty=Tensor[(210), uint32] */;
    %488 = @func_279(%486, %487) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
    %489 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
    %490 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
    %491 = cast(%490, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
    %492 = reshape(%491, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
    %493 = @func_664(%492) /* ty=(Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) */;
    %494 = %493.0;
    %495 = cast(%494, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
    %496 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%490, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %499 = %488.3;
    %500 = %489.0;
    %501 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
    %502 = bitwise_xor(%497, %498) /* ty=Tensor[(7, 5, 14), int16] */;
    %503 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%499, meta[relay.Constant][24] /* ty=Tensor[(165), float64] */, %var_715, %500, %501, %502, %503)
  };
  %504(%var_758) /* ty=(Tensor[(3, 5, 11), int64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), uint64]) */
}

def @func_4520(%var_4515: Tensor[(12, 8, 3), int16]) -> (Tensor[(12, 8, 3), bool],) {
  %505 = cast(%var_4515, dtype="bool") /* ty=Tensor[(12, 8, 3), bool] */;
  %506 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(12, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 8, 3), int16] */, dtype="bool") /* ty=Tensor[(12, 8, 3), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = equal(%507, %508) /* ty=Tensor[(12, 8, 3), bool] */;
  (%509,)
}

def @func_664(%var_642: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) {
  %510 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %511 = %510.2;
  %512 = cast(%var_642, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="int16") /* ty=Tensor[(7, 5, 14), int16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %516 = cast(%var_642, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %517 = erf(%516) /* ty=Tensor[(7, 5, 14), float32] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %519 = right_shift(%514, %515) /* ty=Tensor[(7, 5, 14), int16] */;
  %520 = exp(%518) /* ty=Tensor[(7, 5, 14), float32] */;
  (%519, %520)
}

def @func_343(%var_341: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) {
  @func_340(%var_341) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */
}

def @func_6557(%var_6554: Tensor[(165), float64], %var_6555: Tensor[(210), uint32], %var_6556: Tensor[(77, 1), float64]) -> (Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(150), uint16], Tensor[(7, 5, 14), uint64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(11, 7, 8), float64], Tensor[(77, 1), float64], Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64]) {
  @func_6552(%var_6554, %var_6555, %var_6556) /* ty=(Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(150), uint16], Tensor[(7, 5, 14), uint64], Tensor[(165), float64], Tensor[(210), uint32], Tensor[(11, 7, 8), float64], Tensor[(77, 1), float64], Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), uint64]) */
}

def @func_4950(%var_4948: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) {
  @func_4947(%var_4948) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) */
}

def @func_5719(%var_5717: Tensor[(4, 6, 7), uint64]) -> Tensor[(4, 6, 7), uint64] {
  @func_5716(%var_5717) /* ty=Tensor[(4, 6, 7), uint64] */
}

def @func_4680() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %521 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %522 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %523 = @func_2661() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %524 = %521.0;
  %525 = %522.0;
  %526 = %523.1;
  (%524, %525, %526)
}

def @func_1398(%var_1360: uint32) -> (Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) {
  %527 = cast(%var_1360, dtype="bool") /* ty=bool */;
  %528 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 7, 1), uint32] */, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %529 = @func_919() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %532 = reshape(%531, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %533 = @func_778(%532) /* ty=(Tensor[(7, 5, 14), float64],) */;
  %534 = less_equal(%527, %528) /* ty=Tensor[(14, 7, 1), bool] */;
  %535 = %533.0;
  (%534, %530, %535)
}

def @func_575() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %536 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %537 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %538 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%536, %537, %538)
}

def @func_4714() -> (Tensor[(7, 5, 14), uint64],) {
  %540 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %539 = @func_3637() /* ty=Tensor[(7, 5, 14), uint64] */;
    (%539,)
  };
  %540() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_4496() -> (Tensor[(7, 5, 14), float64],) {
  %541 = @func_4056() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(11, 15), float64], Tensor[(7, 5, 14), float64]) */;
  %542 = %541.2;
  (%542,)
}

def @func_4606() -> (Tensor[(210), uint32], Tensor[(7, 11, 2), float32]) {
  @func_4604() /* ty=(Tensor[(210), uint32], Tensor[(7, 11, 2), float32]) */
}

def @func_4963() -> (Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), float64], Tensor[(210), uint32]) {
  %543 = cast(meta[relay.Constant][27] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %544 = reshape(%543, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %545 = @func_340(%544) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
  %546 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %547 = %545.2;
  (%546, %547, meta[relay.Constant][27] /* ty=Tensor[(210), uint32] */)
}

def @func_5990() -> (Tensor[(7, 11, 2), float64], Tensor[(77), float64], Tensor[(65), float32]) {
  %548 = @func_3121() /* ty=(Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) */;
  %549 = cast(meta[relay.Constant][28] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %550 = reshape(%549, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %551 = @func_1307(%550) /* ty=(Tensor[(15, 1, 10), float32], Tensor[(65), float32], Tensor[(1, 210), uint32], Tensor[(154), uint64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(11, 7, 8), float64], Tensor[(77), float64]) */;
  %552 = %548.0;
  %553 = %551.7;
  (%552, %553, meta[relay.Constant][28] /* ty=Tensor[(65), float32] */)
}

def @func_3843(%var_3795: Tensor[(7, 9, 8), float64], %var_3798: Tensor[(7, 9, 8), float64]) -> (Tensor[(7, 9, 8), int8],) {
  %554 = cast(%var_3795, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %555 = asin(%554) /* ty=Tensor[(7, 9, 8), float64] */;
  %556 = cast(%var_3798, dtype="bool") /* ty=Tensor[(7, 9, 8), bool] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="bool") /* ty=Tensor[(7, 9, 8), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = greater_equal(%558, %559) /* ty=Tensor[(7, 9, 8), bool] */;
  %561 = cast(%var_3795, dtype="int8") /* ty=Tensor[(7, 9, 8), int8] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="int8") /* ty=Tensor[(7, 9, 8), int8] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %565 = subtract(%563, %564) /* ty=Tensor[(7, 9, 8), int8] */;
  (%565,)
}

def @func_1820() -> (Tensor[(7, 5, 14), uint64],) {
  %566 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%566,)
}

def @func_4010(%var_3985: Tensor[(720), int8]) -> (Tensor[(15, 1, 10), float32], Tensor[(720), int8], Tensor[(7, 5, 14), float64]) {
  %567 = cast(%var_3985, dtype="int8") /* ty=Tensor[(720), int8] */;
  %568 = cast(%var_3985, dtype="int8") /* ty=Tensor[(720), int8] */;
  %569 = reshape(%567, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), int8] */;
  %570 = reshape(%568, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), int8] */;
  %571 = @func_2050(%569, %570) /* ty=(Tensor[(9, 8, 10), bool], Tensor[(15, 1, 10), float32]) */;
  %572 = @func_3717() /* ty=Tensor[(7, 5, 14), uint64] */;
  %573 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = greater_equal(%575, %576) /* ty=Tensor[(7, 5, 14), bool] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %579 = %571.1;
  %580 = sigmoid(%578) /* ty=Tensor[(7, 5, 14), float64] */;
  (%579, %var_3985, %580)
}

def @func_4376() -> Tensor[(7, 5, 14), float64] {
  %581 = @func_2999() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */;
  %582 = %581.1;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  acosh(%583) /* ty=Tensor[(7, 5, 14), float64] */
}

def @func_5608(%var_5592: Tensor[(16, 12, 5), int16], %var_5601: Tensor[(210), uint32]) -> (Tensor[(16, 12, 5), int16], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) {
  %584 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 12, 5), int16] */, dtype="int16") /* ty=Tensor[(16, 12, 5), int16] */;
  %585 = shape_of(%var_5592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_5592, dtype="int16") /* ty=Tensor[(16, 12, 5), int16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %588 = cast(%var_5601, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %589 = reshape(%588, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %590 = bitwise_and(%586, %587) /* ty=Tensor[(16, 12, 5), int16] */;
  %591 = @func_168(%589) /* ty=Tensor[(6, 5, 7), uint32] */;
  (%590, %591, %var_5601)
}

def @func_667(%var_665: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) {
  @func_664(%var_665) /* ty=(Tensor[(7, 5, 14), int16], Tensor[(7, 5, 14), float32]) */
}

def @func_2911(%var_2909: Tensor[(60), float32], %var_2910: Tensor[(720), float32]) -> (Tensor[(12, 12, 5), bool], Tensor[(60), float32], Tensor[(720), float32], Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) {
  %607 = fn (%var_2866: Tensor[(60), float32], %var_2867: Tensor[(720), float32]) -> (Tensor[(12, 12, 5), bool], Tensor[(60), float32], Tensor[(720), float32], Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) {
    %592 = cast(%var_2866, dtype="float32") /* ty=Tensor[(60), float32] */;
    %593 = cast(%var_2867, dtype="float32") /* ty=Tensor[(720), float32] */;
    %594 = reshape(%592, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), float32] */;
    %595 = reshape(%593, newshape=[12, 12, 5]) /* ty=Tensor[(12, 12, 5), float32] */;
    %596 = @func_1878(%594, %595) /* ty=(Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) */;
    %597 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %598 = %597.0;
    %599 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 5, 14), uint64] */, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
    %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(%598, dtype="uint8") /* ty=Tensor[(7, 5, 14), uint8] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %603 = @func_1820() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %604 = %596.1;
    %605 = bitwise_and(%601, %602) /* ty=Tensor[(7, 5, 14), uint8] */;
    %606 = %603.0;
    (%604, %var_2866, %var_2867, %605, %606)
  };
  %607(%var_2909, %var_2910) /* ty=(Tensor[(12, 12, 5), bool], Tensor[(60), float32], Tensor[(720), float32], Tensor[(7, 5, 14), uint8], Tensor[(7, 5, 14), uint64]) */
}

def @func_4222(%var_4218: Tensor[(16, 6, 11), float64], %var_4219: Tensor[(10), int16], %var_4220: Tensor[(35, 6), uint32], %var_4221: Tensor[(33, 5), float64]) -> (Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20, 1), int16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(35, 6), uint32], Tensor[(7, 5, 14), uint64], Tensor[(33, 5), float64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), float32], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), uint8]) {
  @func_4216(%var_4218, %var_4219, %var_4220, %var_4221) /* ty=(Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20, 1), int16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(35, 6), uint32], Tensor[(7, 5, 14), uint64], Tensor[(33, 5), float64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), float32], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), uint8]) */
}

def @func_4760(%var_4758: Tensor[(11, 1, 8), int8], %var_4759: Tensor[(11, 1, 8), int8]) -> (Tensor[(11, 7, 8), uint32],) {
  %616 = fn (%var_4723: Tensor[(11, 1, 8), int8], %var_4724: Tensor[(11, 1, 8), int8]) -> (Tensor[(11, 7, 8), uint32],) {
    %608 = cast(%var_4724, dtype="int8") /* ty=Tensor[(11, 1, 8), int8] */;
    %609 = shape_of(%var_4723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%var_4723, dtype="int8") /* ty=Tensor[(11, 1, 8), int8] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %612 = maximum(%610, %611) /* ty=Tensor[(11, ?, 8), int8] */;
    %613 = cast(%612, dtype="uint32") /* ty=Tensor[(11, ?, 8), uint32] */;
    %614 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 7, 8), int8] */, dtype="uint32") /* ty=Tensor[(11, 7, 8), uint32] */;
    %615 = subtract(%613, %614) /* ty=Tensor[(11, 7, 8), uint32] */;
    (%615,)
  };
  %616(%var_4758, %var_4759) /* ty=(Tensor[(11, 7, 8), uint32],) */
}

def @func_5335(%var_5333: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), int64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32]) {
  @func_5332(%var_5333) /* ty=(Tensor[(7, 5, 14), int64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32]) */
}

def @func_2970() -> Tensor[(7, 5, 14), uint64] {
  @func_2968() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_4823() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  @func_4821() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */
}

def @func_2616(%var_2614: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), float32], Tensor[(7, 5, 14), float32], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(210), float64]) {
  @func_2613(%var_2614) /* ty=(Tensor[(7, 5, 14), float32], Tensor[(7, 5, 14), float32], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(210), float64]) */
}

def @func_5374(%var_5373: Tensor[(25, 6), uint16]) -> (Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(25, 6), uint16], Tensor[(7, 5, 14), uint64]) {
  %627 = fn (%var_5352: Tensor[(25, 6), uint16]) -> (Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(25, 6), uint16], Tensor[(7, 5, 14), uint64]) {
    %617 = @func_4020() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %618 = cast(%var_5352, dtype="uint16") /* ty=Tensor[(25, 6), uint16] */;
    %619 = cast(%var_5352, dtype="int64") /* ty=Tensor[(25, 6), int64] */;
    %620 = reshape(%618, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), uint16] */;
    %621 = reshape(%619, newshape=[5, 6, 5]) /* ty=Tensor[(5, 6, 5), int64] */;
    %622 = @func_3361(%620, %621) /* ty=(Tensor[(7, 5, 14), uint16], Tensor[(5, 6, 5), int64]) */;
    %623 = @func_3150() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
    %624 = %617.0;
    %625 = %622.1;
    %626 = %623.0;
    (%624, %625, %var_5352, %626)
  };
  %627(%var_5373) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(5, 6, 5), int64], Tensor[(25, 6), uint16], Tensor[(7, 5, 14), uint64]) */
}

def @func_6127(%var_6095: Tensor[(10), int16], %var_6096: Tensor[(20), int16], %var_6105: Tensor[(96), uint8]) -> (Tensor[(7, 5, 14), uint64], Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20), int16], Tensor[(16, 6, ?), bool], uint8, Tensor[(96), uint8], Tensor[(210), int16]) {
  %628 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %629 = cast(%var_6095, dtype="int16") /* ty=Tensor[(10), int16] */;
  %630 = cast(%var_6096, dtype="int16") /* ty=Tensor[(20), int16] */;
  %631 = reshape(%629, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int16] */;
  %632 = reshape(%630, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), int16] */;
  %633 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %634 = cast(%var_6105, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %635 = reshape(%633, newshape=[]) /* ty=uint8 */;
  %636 = reshape(%634, newshape=[16, 6, 1]) /* ty=Tensor[(16, 6, 1), uint8] */;
  %637 = @func_2693(%635, %636) /* ty=(Tensor[(16, 6, ?), bool],) */;
  %638 = %628.0;
  %639 = cast(%638, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %640 = reshape(%639, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %641 = @func_5814(%640) /* ty=(Tensor[(7, 5, 14), bool], Tensor[(210), int16], Tensor[(15, 6, 14), uint16]) */;
  %642 = @func_3394(%631, %632) /* ty=Tensor[(2, 5, 2), int16] */;
  %643 = %637.0;
  %644 = %641.1;
  (%638, %642, %var_6095, %var_6096, %643, meta[relay.Constant][33] /* ty=uint8 */, %var_6105, %644)
}

def @func_846(%var_844: Tensor[(5, 4, 10), float32]) -> (Tensor[(5, 4, 10), float32],) {
  @func_843(%var_844) /* ty=(Tensor[(5, 4, 10), float32],) */
}

def @func_6731() -> (Tensor[(13, 1, 16), float32],) {
  @func_6729() /* ty=(Tensor[(13, 1, 16), float32],) */
}

def @func_5612(%var_5610: Tensor[(16, 12, 5), int16], %var_5611: Tensor[(210), uint32]) -> (Tensor[(16, 12, 5), int16], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) {
  @func_5608(%var_5610, %var_5611) /* ty=(Tensor[(16, 12, 5), int16], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */
}

def @func_3121() -> (Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) {
  %645 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %646 = %645.3;
  %647 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 11, 2), uint64] */, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %651 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 12), float32] */;
  %652 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 12), float32] */, dtype="float32") /* ty=Tensor[(2, 12), float32] */;
  %653 = reshape(%651, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %654 = reshape(%652, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %655 = @func_2247(%653, %654) /* ty=(Tensor[(3, 4, 2), float32],) */;
  %656 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %657 = divide(%649, %650) /* ty=Tensor[(7, 11, 2), float64] */;
  %658 = %655.0;
  %659 = %656.0;
  (%657, %658, meta[relay.Constant][35] /* ty=Tensor[(2, 12), float32] */, %659)
}

def @func_4383() -> (Tensor[(7, 5, 14), uint64],) {
  %660 = @func_3150() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %661 = %660.0;
  (%661,)
}

def @func_965() -> (Tensor[(7, 5, 14), uint64],) {
  %662 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  (%662,)
}

def @func_596() -> Tensor[(7, 5, 14), uint64] {
  %663 = fn () -> Tensor[(7, 5, 14), uint64] {
    @func_194() /* ty=Tensor[(7, 5, 14), uint64] */
  };
  %663() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_3574(%var_3553: Tensor[(4, 5, 16), float32], %var_3567: Tensor[(7, 11, 2), float64]) -> (Tensor[(4, 5, 16), float32], Tensor[(7, 11, 2), int8]) {
  %664 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 16), float32] */;
  %665 = cast(%var_3553, dtype="float32") /* ty=Tensor[(4, 5, 16), float32] */;
  %666 = @func_3121() /* ty=(Tensor[(7, 11, 2), float64], Tensor[(3, 4, 2), float32], Tensor[(2, 12), float32], Tensor[(7, 5, 14), uint64]) */;
  %667 = %666.0;
  %668 = cast(%var_3567, dtype="int8") /* ty=Tensor[(7, 11, 2), int8] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="int8") /* ty=Tensor[(7, 11, 2), int8] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %672 = divide(%664, %665) /* ty=Tensor[(4, 5, 16), float32] */;
  %673 = bitwise_and(%670, %671) /* ty=Tensor[(7, 11, 2), int8] */;
  (%672, %673)
}

def @func_6132(%var_6129: Tensor[(10), int16], %var_6130: Tensor[(20), int16], %var_6131: Tensor[(96), uint8]) -> (Tensor[(7, 5, 14), uint64], Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20), int16], Tensor[(16, 6, ?), bool], uint8, Tensor[(96), uint8], Tensor[(210), int16]) {
  @func_6127(%var_6129, %var_6130, %var_6131) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20), int16], Tensor[(16, 6, ?), bool], uint8, Tensor[(96), uint8], Tensor[(210), int16]) */
}

def @func_6345(%var_6328: Tensor[(150), uint8], %var_6334: Tensor[(7, 11, 2), uint64]) -> (Tensor[(15, 5, 2), uint8], Tensor[(150), uint8], Tensor[(7, 11, 2), int32]) {
  %674 = cast(%var_6328, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %675 = reshape(%674, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), uint8] */;
  %676 = @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */;
  %677 = %676.3;
  %678 = cast(%var_6334, dtype="int32") /* ty=Tensor[(7, 11, 2), int32] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="int32") /* ty=Tensor[(7, 11, 2), int32] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %682 = @func_5543(%675) /* ty=Tensor[(15, 5, 2), uint8] */;
  %683 = right_shift(%680, %681) /* ty=Tensor[(7, 11, 2), int32] */;
  (%682, %var_6328, %683)
}

def @func_1117(%var_1116: Tensor[(7, 11, 2), uint64]) -> (Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) {
  %700 = fn (%var_1083: Tensor[(7, 11, 2), uint64]) -> (Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) {
    %684 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 11, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
    %685 = shape_of(%var_1083, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%var_1083, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %688 = bitwise_or(%686, %687) /* ty=Tensor[(7, 11, 2), uint64] */;
    %689 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 11, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
    %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%688, dtype="uint64") /* ty=Tensor[(7, 11, 2), uint64] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %693 = cast(%688, dtype="float64") /* ty=Tensor[(7, 11, 2), float64] */;
    %694 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 210), uint32] */, dtype="uint32") /* ty=Tensor[(1, 210), uint32] */;
    %695 = reshape(%694, newshape=[210]) /* ty=Tensor[(210), uint32] */;
    %696 = @func_340(%695) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(6, 5, 7), float64]) */;
    %697 = subtract(%691, %692) /* ty=Tensor[(7, 11, 2), uint64] */;
    %698 = asinh(%693) /* ty=Tensor[(7, 11, 2), float64] */;
    %699 = %696.1;
    (%697, %698, %699, meta[relay.Constant][38] /* ty=Tensor[(1, 210), uint32] */)
  };
  %700(%var_1116) /* ty=(Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) */
}

def @func_3578(%var_3576: Tensor[(4, 5, 16), float32], %var_3577: Tensor[(7, 11, 2), float64]) -> (Tensor[(4, 5, 16), float32], Tensor[(7, 11, 2), int8]) {
  @func_3574(%var_3576, %var_3577) /* ty=(Tensor[(4, 5, 16), float32], Tensor[(7, 11, 2), int8]) */
}

def @func_6208() -> Tensor[(6, 5, 7), uint32] {
  @func_6206() /* ty=Tensor[(6, 5, 7), uint32] */
}

def @func_3638() -> Tensor[(7, 5, 14), uint64] {
  %702 = fn () -> Tensor[(7, 5, 14), uint64] {
    %701 = @func_3236() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %701.0
  };
  %702() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_5992() -> (Tensor[(7, 11, 2), float64], Tensor[(77), float64], Tensor[(65), float32]) {
  @func_5990() /* ty=(Tensor[(7, 11, 2), float64], Tensor[(77), float64], Tensor[(65), float32]) */
}

def @func_2184(%var_2182: Tensor[(210), uint32], %var_2183: Tensor[(6, 5, 7), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) {
  @func_2180(%var_2182, %var_2183) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) */
}

def @func_1195() -> (Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) {
  @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */
}

def @func_2429() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) {
  @func_2427() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 11, 2), uint64], Tensor[(154), uint64]) */
}

def @func_5154(%var_5152: Tensor[(14, 16, 2), int8], %var_5153: uint32) -> (Tensor[(14, 16, 2), bool], Tensor[(14, 16, 2), bool], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), uint64]) {
  @func_5150(%var_5152, %var_5153) /* ty=(Tensor[(14, 16, 2), bool], Tensor[(14, 16, 2), bool], Tensor[(7, 5, 14), uint64], uint32, Tensor[(7, 5, 14), uint64]) */
}

def @func_6729() -> (Tensor[(13, 1, 16), float32],) {
  %703 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %704 = log(%703) /* ty=Tensor[(13, 1, 16), float32] */;
  (%704,)
}

def @func_577() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */
}

def @func_1878(%var_1851: Tensor[(1, 12, 5), float32], %var_1852: Tensor[(12, 12, 5), float32]) -> (Tensor[(12, 12, 5), float32], Tensor[(12, 12, 5), bool]) {
  %705 = cast(%var_1851, dtype="float32") /* ty=Tensor[(1, 12, 5), float32] */;
  %706 = cast(%var_1852, dtype="float32") /* ty=Tensor[(12, 12, 5), float32] */;
  %707 = cast(%var_1851, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
  %708 = cast(%var_1852, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
  %709 = power(%705, %706) /* ty=Tensor[(12, 12, 5), float32] */;
  %710 = logical_or(%707, %708) /* ty=Tensor[(12, 12, 5), bool] */;
  (%709, %710)
}

def @func_2318() -> (Tensor[(7, 5, 14), uint64],) {
  %713 = fn () -> (Tensor[(7, 5, 14), uint64],) {
    %711 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %712 = %711.0;
    (%712,)
  };
  %713() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_5552() -> (Tensor[(7, 5, 14), uint8],) {
  %715 = fn () -> (Tensor[(7, 5, 14), uint8],) {
    %714 = @func_2954() /* ty=Tensor[(7, 5, 14), uint8] */;
    (%714,)
  };
  %715() /* ty=(Tensor[(7, 5, 14), uint8],) */
}

def @func_3719() -> Tensor[(7, 5, 14), uint64] {
  @func_3717() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_6935() -> (Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) {
  @func_6933() /* ty=(Tensor[(210), uint32], Tensor[(7, 5, 14), uint64]) */
}

def @func_5691() -> (Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), float64]) {
  %716 = @func_3440() /* ty=Tensor[(7, 5, 14), uint64] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(7, 5, 14), float32] */;
  %718 = log10(%717) /* ty=Tensor[(7, 5, 14), float32] */;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(7, 5, 14), float64] */;
  %720 = atanh(%719) /* ty=Tensor[(7, 5, 14), float64] */;
  %721 = cast(%720, dtype="uint64") /* ty=Tensor[(7, 5, 14), uint64] */;
  %722 = reshape(%721, newshape=[7, 5, 14]) /* ty=Tensor[(7, 5, 14), uint64] */;
  %723 = @func_778(%722) /* ty=(Tensor[(7, 5, 14), float64],) */;
  %724 = %723.0;
  (%720, %724)
}

def @func_6349(%var_6347: Tensor[(150), uint8], %var_6348: Tensor[(7, 11, 2), uint64]) -> (Tensor[(15, 5, 2), uint8], Tensor[(150), uint8], Tensor[(7, 11, 2), int32]) {
  @func_6345(%var_6347, %var_6348) /* ty=(Tensor[(15, 5, 2), uint8], Tensor[(150), uint8], Tensor[(7, 11, 2), int32]) */
}

def @func_1401(%var_1399: uint32) -> (Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) {
  @func_1398(%var_1399) /* ty=(Tensor[(14, 7, 1), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), float64]) */
}

def @func_1712() -> Tensor[(7, 5, 14), uint64] {
  %726 = fn () -> Tensor[(7, 5, 14), uint64] {
    %725 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
    %725.2
  };
  %726() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_687() -> Tensor[(7, 5, 14), uint64] {
  @func_685() /* ty=Tensor[(7, 5, 14), uint64] */
}

def @func_4821() -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) {
  %727 = @func_681() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %728 = @func_595() /* ty=Tensor[(7, 5, 14), uint64] */;
  %729 = %727.0;
  (%728, %729)
}

def @func_3236() -> (Tensor[(7, 5, 14), uint64],) {
  %730 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %731 = %730.0;
  (%731,)
}

def @func_1309(%var_1308: Tensor[(65), float32]) -> (Tensor[(15, 1, 10), float32], Tensor[(65), float32], Tensor[(1, 210), uint32], Tensor[(154), uint64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(11, 7, 8), float64], Tensor[(77), float64]) {
  %754 = fn (%var_1234: Tensor[(65), float32]) -> (Tensor[(15, 1, 10), float32], Tensor[(65), float32], Tensor[(1, 210), uint32], Tensor[(154), uint64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(11, 7, 8), float64], Tensor[(77), float64]) {
    %732 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
    %733 = cast(meta[relay.Constant][40] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
    %734 = reshape(%733, newshape=[7, 11, 2]) /* ty=Tensor[(7, 11, 2), uint64] */;
    %735 = @func_1115(%734) /* ty=(Tensor[(7, 11, 2), uint64], Tensor[(7, 11, 2), float64], Tensor[(210), uint32], Tensor[(1, 210), uint32]) */;
    %736 = cast(%var_1234, dtype="float32") /* ty=Tensor[(65), float32] */;
    %737 = reshape(%736, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
    %738 = @func_1047(%737) /* ty=(Tensor[(13, 5), float32], Tensor[(7, 5, 14), float32]) */;
    %739 = %738.1;
    %740 = @func_1193() /* ty=(Tensor[(7, 5, 14), float32], Tensor[(245, 2), uint64], Tensor[(15, 1, 10), float32]) */;
    %741 = %740.0;
    %742 = cast(%741, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
    %743 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%739, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %746 = @func_575() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
    %747 = cast(meta[relay.Constant][41] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
    %748 = reshape(%747, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
    %749 = %732.2;
    %750 = %735.3;
    %751 = equal(%744, %745) /* ty=Tensor[(7, 5, 14), bool] */;
    %752 = %746.0;
    %753 = @func_956(%748) /* ty=Tensor[(11, 7, 8), float64] */;
    (%749, %var_1234, %750, meta[relay.Constant][40] /* ty=Tensor[(154), uint64] */, %751, %752, %753, meta[relay.Constant][41] /* ty=Tensor[(77), float64] */)
  };
  %754(%var_1308) /* ty=(Tensor[(15, 1, 10), float32], Tensor[(65), float32], Tensor[(1, 210), uint32], Tensor[(154), uint64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(11, 7, 8), float64], Tensor[(77), float64]) */
}

def @func_2250(%var_2248: Tensor[(3, 4, 2), float32], %var_2249: Tensor[(3, 4, 2), float32]) -> (Tensor[(3, 4, 2), float32],) {
  %760 = fn (%var_2239: Tensor[(3, 4, 2), float32], %var_2240: Tensor[(3, 4, 2), float32]) -> (Tensor[(3, 4, 2), float32],) {
    %755 = cast(%var_2240, dtype="float32") /* ty=Tensor[(3, 4, 2), float32] */;
    %756 = shape_of(%var_2239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %757 = cast(%var_2239, dtype="float32") /* ty=Tensor[(3, 4, 2), float32] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %759 = divide(%757, %758) /* ty=Tensor[(3, 4, 2), float32] */;
    (%759,)
  };
  %760(%var_2248, %var_2249) /* ty=(Tensor[(3, 4, 2), float32],) */
}

def @func_2502(%var_2500: Tensor[(6, 15, 13), float32]) -> Tensor[(6, 15, 13), float32] {
  @func_2499(%var_2500) /* ty=Tensor[(6, 15, 13), float32] */
}

def @func_2180(%var_2108: Tensor[(210), uint32], %var_2168: Tensor[(6, 5, 7), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) {
  %761 = cast(meta[relay.Constant][43] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %762 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 140), uint16] */, dtype="uint16") /* ty=Tensor[(9, 140), uint16] */;
  %763 = reshape(%761, newshape=[]) /* ty=uint16 */;
  %764 = reshape(%762, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint16] */;
  %765 = @func_1327(%763, %764) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(210), uint32], Tensor[(210), uint32]) */;
  %766 = %765.0;
  %767 = cast(%766, dtype="uint16") /* ty=Tensor[(15, 6, 14), uint16] */;
  %768 = cast(meta[relay.Constant][43] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %769 = cast(%var_2108, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %770 = reshape(%769, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %771 = @func_168(%770) /* ty=Tensor[(6, 5, 7), uint32] */;
  %772 = cast(%771, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
  %773 = sinh(%772) /* ty=Tensor[(6, 5, 7), float32] */;
  %774 = cast(%var_2168, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %778 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %779 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %780 = logical_xor(%767, %768) /* ty=Tensor[(15, 6, 14), uint16] */;
  %781 = greater_equal(%776, %777) /* ty=Tensor[(6, 5, 7), bool] */;
  (%778, %var_2108, meta[relay.Constant][42] /* ty=Tensor[(9, 140), uint16] */, %779, %780, %781)
}

def @func_5332(%var_5275: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), int64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32]) {
  %782 = @func_3717() /* ty=Tensor[(7, 5, 14), uint64] */;
  %783 = cast(%var_5275, dtype="int64") /* ty=Tensor[(7, 5, 14), int64] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="int64") /* ty=Tensor[(7, 5, 14), int64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %787 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %788 = @func_3073() /* ty=(Tensor[(210), uint32], Tensor[(3, 4, 2), float32], Tensor[(24), float32]) */;
  %789 = bitwise_or(%785, %786) /* ty=Tensor[(7, 5, 14), int64] */;
  %790 = %787.0;
  %791 = %788.0;
  (%789, %790, %791)
}

def @func_3717() -> Tensor[(7, 5, 14), uint64] {
  %792 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %792.0
}

def @func_1956(%var_1954: Tensor[(165), float64], %var_1955: Tensor[(210), uint32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(165), float64]) {
  @func_1952(%var_1954, %var_1955) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(210), uint32], Tensor[(7, 5, 14), uint64], Tensor[(165), float64]) */
}

def @func_2968() -> Tensor[(7, 5, 14), uint64] {
  %793 = @func_1571() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %793.0
}

def @func_5754() -> Tensor[(210), uint32] {
  %795 = fn () -> Tensor[(210), uint32] {
    %794 = @func_4604() /* ty=(Tensor[(210), uint32], Tensor[(7, 11, 2), float32]) */;
    %794.0
  };
  %795() /* ty=Tensor[(210), uint32] */
}

def @func_5814(%var_5767: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool], Tensor[(210), int16], Tensor[(15, 6, 14), uint16]) {
  %796 = @func_1994() /* ty=(Tensor[(7, 5, 14), uint64],) */;
  %797 = %796.0;
  %798 = cast(%var_5767, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%797, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %802 = @func_2836() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(210), uint32]) */;
  %803 = %802.2;
  %804 = cast(meta[relay.Constant][44] /* ty=Tensor[(210), uint32] */, dtype="int16") /* ty=Tensor[(210), int16] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(1), int32] */;
  %806 = cast(%803, dtype="int16") /* ty=Tensor[(210), int16] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?), int16] */;
  %808 = cast(%803, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %809 = cast(meta[relay.Constant][44] /* ty=Tensor[(210), uint32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %810 = reshape(%808, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %811 = reshape(%809, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float32] */;
  %812 = @func_2180(%810, %811) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(9, 140), uint16], Tensor[(7, 5, 14), uint64], Tensor[(15, 6, 14), uint16], Tensor[(6, 5, 7), bool]) */;
  %813 = not_equal(%800, %801) /* ty=Tensor[(7, 5, 14), bool] */;
  %814 = minimum(%806, %807) /* ty=Tensor[(210), int16] */;
  %815 = %812.4;
  (%813, %814, %815)
}

def @func_6785(%var_6783: int32, %var_6784: Tensor[(15, 2, 2), int32]) -> Tensor[(15, 2, 2), bool] {
  %818 = fn (%var_6777: int32, %var_6778: Tensor[(15, 2, 2), int32]) -> Tensor[(15, 2, 2), bool] {
    %816 = cast(%var_6777, dtype="bool") /* ty=bool */;
    %817 = cast(%var_6778, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
    greater(%816, %817) /* ty=Tensor[(15, 2, 2), bool] */
  };
  %818(%var_6783, %var_6784) /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_4216(%var_4109: Tensor[(16, 6, 11), float64], %var_4115: Tensor[(10), int16], %var_4139: Tensor[(35, 6), uint32], %var_4154: Tensor[(33, 5), float64]) -> (Tensor[(2, 5, 2), int16], Tensor[(10), int16], Tensor[(20, 1), int16], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), uint32], Tensor[(35, 6), uint32], Tensor[(7, 5, 14), uint64], Tensor[(33, 5), float64], Tensor[(7, 5, 14), bool], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), float32], Tensor[(7, 5, 14), uint64], Tensor[(16, 6, 11), uint8]) {
  %819 = cast(%var_4115, dtype="int16") /* ty=Tensor[(10), int16] */;
  %820 = cast(meta[relay.Constant][45] /* ty=Tensor[(20, 1), int16] */, dtype="int16") /* ty=Tensor[(20, 1), int16] */;
  %821 = reshape(%819, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int16] */;
  %822 = reshape(%820, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), int16] */;
  %823 = cast(%var_4139, dtype="uint32") /* ty=Tensor[(35, 6), uint32] */;
  %824 = reshape(%823, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %825 = cast(%var_4154, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %826 = reshape(%825, newshape=[1, 165]) /* ty=Tensor[(1, 165), float64] */;
  %827 = @func_2566(%826) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) */;
  %828 = %827.2;
  %829 = @func_685() /* ty=Tensor[(7, 5, 14), uint64] */;
  %830 = cast(%829, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %831 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%828, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = cast(%var_4154, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %835 = cast(%var_4139, dtype="uint32") /* ty=Tensor[(35, 6), uint32] */;
  %836 = reshape(%834, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
  %837 = reshape(%835, newshape=[210]) /* ty=Tensor[(210), uint32] */;
  %838 = @func_279(%836, %837) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
  %839 = cast(%var_4109, dtype="float64") /* ty=Tensor[(16, 6, 11), float64] */;
  %840 = cosh(%839) /* ty=Tensor[(16, 6, 11), float64] */;
  %841 = cast(%var_4109, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %842 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%840, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %845 = @func_2661() /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64]) */;
  %846 = cast(%840, dtype="float64") /* ty=Tensor[(16, 6, 11), float64] */;
  %847 = exp(%846) /* ty=Tensor[(16, 6, 11), float64] */;
  %848 = cast(%840, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %852 = floor_divide(%850, %851) /* ty=Tensor[(16, 6, 11), float32] */;
  %853 = cast(%840, dtype="uint64") /* ty=Tensor[(16, 6, 11), uint64] */;
  %854 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%847, dtype="uint64") /* ty=Tensor[(16, 6, 11), uint64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %857 = add(%855, %856) /* ty=Tensor[(16, 6, 11), uint64] */;
  %858 = cast(%857, dtype="uint8") /* ty=Tensor[(16, 6, 11), uint8] */;
  %859 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%852, dtype="uint8") /* ty=Tensor[(16, 6, 11), uint8] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %862 = @func_3394(%821, %822) /* ty=Tensor[(2, 5, 2), int16] */;
  %863 = @func_3440() /* ty=Tensor[(7, 5, 14), uint64] */;
  %864 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %865 = @func_168(%824) /* ty=Tensor[(6, 5, 7), uint32] */;
  %866 = @func_194() /* ty=Tensor[(7, 5, 14), uint64] */;
  %867 = logical_or(%832, %833) /* ty=Tensor[(7, 5, 14), bool] */;
  %868 = %838.0;
  %869 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
  %870 = maximum(%843, %844) /* ty=Tensor[(16, 6, 11), float32] */;
  %871 = %845.0;
  %872 = bitwise_xor(%860, %861) /* ty=Tensor[(16, 6, 11), uint8] */;
  (%862, %var_4115, meta[relay.Constant][45] /* ty=Tensor[(20, 1), int16] */, %863, %864, %865, %var_4139, %866, %var_4154, %867, %868, %869, %870, %871, %872)
}

def @func_4013(%var_4011: Tensor[(720), int8]) -> (Tensor[(15, 1, 10), float32], Tensor[(720), int8], Tensor[(7, 5, 14), float64]) {
  @func_4010(%var_4011) /* ty=(Tensor[(15, 1, 10), float32], Tensor[(720), int8], Tensor[(7, 5, 14), float64]) */
}

def @func_3075() -> (Tensor[(210), uint32], Tensor[(3, 4, 2), float32], Tensor[(24), float32]) {
  @func_3073() /* ty=(Tensor[(210), uint32], Tensor[(3, 4, 2), float32], Tensor[(24), float32]) */
}

def @func_2568(%var_2567: Tensor[(1, 165), float64]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) {
  %884 = fn (%var_2553: Tensor[(1, 165), float64]) -> (Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) {
    %873 = @func_1205() /* ty=(Tensor[(7, 5, 14), uint64],) */;
    %874 = cast(%var_2553, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
    %875 = cast(meta[relay.Constant][46] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %876 = reshape(%874, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float64] */;
    %877 = reshape(%875, newshape=[210]) /* ty=Tensor[(210), uint32] */;
    %878 = @func_279(%876, %877) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(6, 5, 7), bool], Tensor[(6, 5, 7), uint32], Tensor[(3, 5, 11), int64]) */;
    %879 = cast(%var_2553, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
    %880 = @func_1711() /* ty=Tensor[(7, 5, 14), uint64] */;
    %881 = %873.0;
    %882 = %878.0;
    %883 = sin(%879) /* ty=Tensor[(1, 165), float32] */;
    (%880, %881, %882, meta[relay.Constant][46] /* ty=Tensor[(210), uint32] */, %883)
  };
  %884(%var_2567) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(7, 5, 14), uint64], Tensor[(210), uint32], Tensor[(1, 165), float32]) */
}

def @func_2023(%var_2021: Tensor[(200, 1), float32]) -> (Tensor[(7, 5, 14), uint64], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32]) {
  @func_2020(%var_2021) /* ty=(Tensor[(7, 5, 14), uint64], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32]) */
}

def @func_3398(%var_3396: Tensor[(2, 5, 1), int16], %var_3397: Tensor[(2, 5, 2), int16]) -> Tensor[(2, 5, 2), int16] {
  @func_3394(%var_3396, %var_3397) /* ty=Tensor[(2, 5, 2), int16] */
}

def @func_5693() -> (Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), float64]) {
  @func_5691() /* ty=(Tensor[(7, 5, 14), float64], Tensor[(7, 5, 14), float64]) */
}

def @func_3238() -> (Tensor[(7, 5, 14), uint64],) {
  @func_3236() /* ty=(Tensor[(7, 5, 14), uint64],) */
}

def @func_549(%var_548: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool],) {
  %891 = fn (%var_535: Tensor[(7, 5, 14), uint64]) -> (Tensor[(7, 5, 14), bool],) {
    %885 = @func_500() /* ty=Tensor[(7, 5, 14), uint64] */;
    %886 = cast(%var_535, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
    %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
    %888 = cast(%885, dtype="bool") /* ty=Tensor[(7, 5, 14), bool] */;
    %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %890 = less(%888, %889) /* ty=Tensor[(7, 5, 14), bool] */;
    (%890,)
  };
  %891(%var_548) /* ty=(Tensor[(7, 5, 14), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen164/build/output.py:2508: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen164/build/output.py", line 2513, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(110) tvmgen_default_fused_tan_kernel0(float* __restrict__ T_tan, float* __restrict__ placeholder) {
  T_tan[(((int)threadIdx.x))] = tanf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

