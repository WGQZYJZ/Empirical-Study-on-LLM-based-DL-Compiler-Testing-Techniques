==========mod==========
#[version = "0.0.5"]
def @func_5184(%var_5168: Tensor[(10, 12, 5), bool]) -> (Tensor[(10, 12, 5), bool], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32], Tensor[(10, 12, 5), uint8]) {
  %0 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %3 = exp(%2) /* ty=Tensor[(10, 12, 5), float32] */;
  %4 = cast(%3, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %5 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%1, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(1440), uint32] */, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(1440), uint32] */, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %10 = reshape(%8, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %11 = reshape(%9, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %12 = @func_4441(%10, %11) /* ty=(Tensor[(12, 12, 10), bool],) */;
  %13 = cast(%var_5168, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
  %14 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%1, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %17 = not_equal(%6, %7) /* ty=Tensor[(10, 12, 5), bool] */;
  %18 = %12.0;
  %19 = bitwise_and(%15, %16) /* ty=Tensor[(10, 12, 5), uint8] */;
  (%17, %18, meta[relay.Constant][0] /* ty=Tensor[(1440), uint32] */, %19)
}

def @func_2113(%var_2109: Tensor[(7, 1), uint8]) -> Tensor[(7, 1), uint8] {
  %20 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %21 = cast(%var_2109, dtype="uint8") /* ty=Tensor[(7, 1), uint8] */;
  left_shift(%20, %21) /* ty=Tensor[(7, 1), uint8] */
}

def @func_6504() -> (Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
  %22 = @func_4562() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %23 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %24 = %22.0;
  (%23, %24)
}

def @func_653(%var_631: Tensor[(6, 11, 7), uint16], %var_632: Tensor[(6, 11, 7), uint16], %var_642: Tensor[(1170, 1), float32]) -> (Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) {
  %25 = cast(%var_632, dtype="uint16") /* ty=Tensor[(6, 11, 7), uint16] */;
  %26 = shape_of(%var_631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%var_631, dtype="uint16") /* ty=Tensor[(6, 11, 7), uint16] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %29 = cast(%var_642, dtype="float32") /* ty=Tensor[(1170, 1), float32] */;
  %30 = reshape(%29, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %31 = @func_325(%30) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
  %32 = bitwise_xor(%27, %28) /* ty=Tensor[(6, 11, 7), uint16] */;
  %33 = %31.2;
  (%32, %33, %var_642)
}

def @func_2797(%var_2744: float32, %var_2745: Tensor[(13, 14, 3), float32], %var_2763: Tensor[(13, 14, 3), float64], %var_2780: Tensor[(13, 14, 3), int8], %var_2785: Tensor[(1170), float32], %var_2793: Tensor[(13, 14, 3), float64]) -> (Tensor[(13, 14, 3), uint32], Tensor[(13, 14, 3), uint64], Tensor[(13, 14, 3), bool], Tensor[(1170), float32], Tensor[(1170), float32], Tensor[(13, 14, 3), bool]) {
  %34 = cast(%var_2745, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
  %35 = acosh(%34) /* ty=Tensor[(13, 14, 3), float64] */;
  %36 = cast(%var_2763, dtype="uint32") /* ty=Tensor[(13, 14, 3), uint32] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="uint32") /* ty=Tensor[(13, 14, 3), uint32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %40 = cast(%35, dtype="uint64") /* ty=Tensor[(13, 14, 3), uint64] */;
  %41 = cast(%var_2744, dtype="uint64") /* ty=uint64 */;
  %42 = cast(%var_2744, dtype="bool") /* ty=bool */;
  %43 = cast(%var_2745, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %44 = equal(%42, %43) /* ty=Tensor[(13, 14, 3), bool] */;
  %45 = cast(%44, dtype="int8") /* ty=Tensor[(13, 14, 3), int8] */;
  %46 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%35, dtype="int8") /* ty=Tensor[(13, 14, 3), int8] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %49 = bitwise_or(%47, %48) /* ty=Tensor[(13, 14, 3), int8] */;
  %50 = cast(%var_2780, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = cast(%var_2785, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %55 = reshape(%54, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %56 = @func_325(%55) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
  %57 = cast(%var_2793, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %58 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%35, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = bitwise_xor(%38, %39) /* ty=Tensor[(13, 14, 3), uint32] */;
  %62 = bitwise_and(%40, %41) /* ty=Tensor[(13, 14, 3), uint64] */;
  %63 = greater_equal(%52, %53) /* ty=Tensor[(13, 14, 3), bool] */;
  %64 = %56.1;
  %65 = greater(%59, %60) /* ty=Tensor[(13, 14, 3), bool] */;
  (%61, %62, %63, %64, %var_2785, %65)
}

def @func_6799(%var_6786: Tensor[(15, 8, 3), uint8], %var_6787: Tensor[(15, 8, 3), uint8]) -> (Tensor[(15, 8, 3), uint8],) {
  %66 = cast(%var_6787, dtype="uint8") /* ty=Tensor[(15, 8, 3), uint8] */;
  %67 = shape_of(%var_6786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_6786, dtype="uint8") /* ty=Tensor[(15, 8, 3), uint8] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %70 = bitwise_or(%68, %69) /* ty=Tensor[(15, 8, 3), uint8] */;
  (%70,)
}

def @func_4236() -> (Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) {
  %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %72 = reshape(%71, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %74 = reshape(%73, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %75 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %76 = %75.0;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 12, 5), int32] */, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %81 = @func_146(%72) /* ty=Tensor[(4, 13, 16), bool] */;
  %82 = @func_3408(%74) /* ty=Tensor[(14, 6, 13), float32] */;
  %83 = left_shift(%79, %80) /* ty=Tensor[(10, 12, 5), uint32] */;
  (%81, meta[relay.Constant][2] /* ty=Tensor[(832), uint16] */, %82, meta[relay.Constant][3] /* ty=Tensor[(78), float32] */, %83)
}

def @func_4768(%var_4756: float32, %var_4757: Tensor[(108), float32], %var_4759: Tensor[(832), uint16], %var_4764: Tensor[(462, 1), uint16]) -> (Tensor[(10, 12, 5), uint64], Tensor[(832), uint16], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16]) {
  %84 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %85 = %84.0;
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 12, 5), bool] */, dtype="uint64") /* ty=Tensor[(10, 12, 5), uint64] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="uint64") /* ty=Tensor[(10, 12, 5), uint64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %90 = cast(%var_4756, dtype="float32") /* ty=float32 */;
  %91 = cast(%var_4757, dtype="float32") /* ty=Tensor[(108), float32] */;
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %93 = cast(%var_4759, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %94 = reshape(%90, newshape=[]) /* ty=float32 */;
  %95 = reshape(%91, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %96 = reshape(%92, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %97 = reshape(%93, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %98 = @func_494(%94, %95, %96, %97) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %99 = cast(%var_4764, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %100 = cast(%var_4764, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %101 = cast(meta[relay.Constant][6] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %102 = reshape(%99, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %103 = reshape(%100, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %104 = reshape(%101, newshape=[1170, 1]) /* ty=Tensor[(1170, 1), float32] */;
  %105 = @func_653(%102, %103, %104) /* ty=(Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) */;
  %106 = multiply(%88, %89) /* ty=Tensor[(10, 12, 5), uint64] */;
  %107 = %98.4;
  %108 = %105.1;
  (%106, %107, %var_4756, %var_4757, meta[relay.Constant][6] /* ty=Tensor[(1170), float32] */, %var_4759, %108, %var_4764)
}

def @func_6855() -> (Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
  %109 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %110 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %111 = %109.0;
  %112 = %110.0;
  (%111, %112)
}

def @func_4088() -> Tensor[(10, 12, 5), int32] {
  %113 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %114 = %113.0;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %116 = atanh(%115) /* ty=Tensor[(10, 12, 5), float32] */;
  %117 = cast(%116, dtype="int32") /* ty=Tensor[(10, 12, 5), int32] */;
  %118 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%114, dtype="int32") /* ty=Tensor[(10, 12, 5), int32] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  minimum(%119, %120) /* ty=Tensor[(10, 12, 5), int32] */
}

def @func_7056() -> (Tensor[(10, 12, 5), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), bool]) {
  %121 = @func_5670() /* ty=Tensor[(10, 12, 5), float32] */;
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 12, 5), float32] */, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
  %127 = greater_equal(%124, %125) /* ty=Tensor[(10, 12, 5), bool] */;
  %128 = @func_5320() /* ty=Tensor[(4, 13, 16), bool] */;
  %129 = %126.1;
  (%127, %128, %129)
}

def @func_5670() -> Tensor[(10, 12, 5), float32] {
  %130 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %131 = %130.0;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  acosh(%132) /* ty=Tensor[(10, 12, 5), float32] */
}

def @func_6676() -> (Tensor[(10, 12, 5), uint32],) {
  %133 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
  %134 = %133.4;
  (%134,)
}

def @func_693(%var_669: Tensor[(9, 3, 1), float64]) -> Tensor[(9, 3, ?), bool] {
  %135 = cast(%var_669, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %136 = rsqrt(%135) /* ty=Tensor[(9, 3, 1), float64] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %138 = cosh(%137) /* ty=Tensor[(9, 3, 1), float64] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%141, %142) /* ty=Tensor[(9, 3, ?), bool] */
}

def @func_4587(%var_4581: Tensor[(390), int32]) -> (Tensor[(10, 12, 5), bool], Tensor[(390), int32], Tensor[(13, 10, 3), float64]) {
  %143 = cast(%var_4581, dtype="int32") /* ty=Tensor[(390), int32] */;
  %144 = reshape(%143, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int32] */;
  %145 = @func_1893(%144) /* ty=(Tensor[(13, 10, 3), float32],) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %148 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %149 = atan(%147) /* ty=Tensor[(13, 10, 3), float64] */;
  (%148, %var_4581, %149)
}

def @func_5946(%var_5912: Tensor[(546), float32]) -> (Tensor[(10, 12, 5), int32], Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(10, 12, 5), float32], Tensor[(13, 14, 3), bool], float32, Tensor[(546), float32], Tensor[(832), float64], Tensor[(832), uint16]) {
  %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %151 = reshape(%150, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %152 = cast(-2.65785f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %153 = cast(%var_5912, dtype="float32") /* ty=Tensor[(546), float32] */;
  %154 = cast(%var_5912, dtype="float64") /* ty=Tensor[(546), float64] */;
  %155 = cast(%var_5912, dtype="int8") /* ty=Tensor[(546), int8] */;
  %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %157 = cast(%var_5912, dtype="float64") /* ty=Tensor[(546), float64] */;
  %158 = reshape(%152, newshape=[]) /* ty=float32 */;
  %159 = reshape(%153, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float32] */;
  %160 = reshape(%154, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float64] */;
  %161 = reshape(%155, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), int8] */;
  %162 = reshape(%156, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %163 = reshape(%157, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float64] */;
  %164 = @func_2797(%158, %159, %160, %161, %162, %163) /* ty=(Tensor[(13, 14, 3), uint32], Tensor[(13, 14, 3), uint64], Tensor[(13, 14, 3), bool], Tensor[(1170), float32], Tensor[(1170), float32], Tensor[(13, 14, 3), bool]) */;
  %165 = cast(meta[relay.Constant][9] /* ty=Tensor[(832), uint16] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %166 = cos(%165) /* ty=Tensor[(832), float64] */;
  %167 = cast(meta[relay.Constant][9] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %168 = reshape(%167, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %169 = @func_146(%168) /* ty=Tensor[(4, 13, 16), bool] */;
  %170 = cast(%169, dtype="int64") /* ty=Tensor[(4, 13, 16), int64] */;
  %171 = shape_of(%166, dtype="int32") /* ty=Tensor[(1), int32] */;
  %172 = cast(%166, dtype="int64") /* ty=Tensor[(832), int64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?), int64] */;
  %174 = bitwise_xor(%172, %173) /* ty=Tensor[(832), int64] */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(832), int64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(1), int32] */;
  %177 = cast(%174, dtype="float64") /* ty=Tensor[(832), float64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?), float64] */;
  %179 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
  %180 = @func_5862() /* ty=Tensor[(10, 12, 5), int32] */;
  %181 = @func_310(%151) /* ty=Tensor[(6, 15, 13), float32] */;
  %182 = @func_5670() /* ty=Tensor[(10, 12, 5), float32] */;
  %183 = %164.2;
  %184 = multiply(%177, %178) /* ty=Tensor[(832), float64] */;
  %185 = %179.1;
  (%180, %181, meta[relay.Constant][8] /* ty=Tensor[(1170), float32] */, %182, %183, -2.65785f /* ty=float32 */, %var_5912, %184, %185)
}

def @func_7339(%var_7322: Tensor[(10, 12, 5), float64]) -> (Tensor[(10, 12, 5), float64],) {
  %186 = @func_7070() /* ty=Tensor[(10, 12, 5), float64] */;
  %187 = cast(%var_7322, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %191 = floor_divide(%189, %190) /* ty=Tensor[(10, 12, 5), float64] */;
  (%191,)
}

def @func_5287() -> (Tensor[(10, 12, 5), int32],) {
  %192 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
  %193 = %192.0;
  (%193,)
}

def @func_2172(%var_2145: Tensor[(3, 5, 2), int8], %var_2146: Tensor[(3, 5, 2), int8], %var_2154: Tensor[(55), float64], %var_2156: Tensor[(4, 208), uint16]) -> (Tensor[(3, 5, 2), int8], Tensor[(390, 3), float32], Tensor[(55), float64], Tensor[(108), float32], Tensor[(4, 208), uint16], Tensor[(2, 9, 10), bool]) {
  %194 = cast(%var_2146, dtype="int8") /* ty=Tensor[(3, 5, 2), int8] */;
  %195 = shape_of(%var_2145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_2145, dtype="int8") /* ty=Tensor[(3, 5, 2), int8] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %198 = cast(%var_2154, dtype="float64") /* ty=Tensor[(55), float64] */;
  %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %200 = cast(%var_2156, dtype="uint16") /* ty=Tensor[(4, 208), uint16] */;
  %201 = reshape(%198, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float64] */;
  %202 = reshape(%199, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %203 = reshape(%200, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %204 = @func_1118(%201, %202, %203) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) */;
  %205 = %204.1;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %207 = reshape(%206, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %208 = @func_325(%207) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
  %209 = %208.2;
  %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 9, 10), float32] */, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = bitwise_and(%196, %197) /* ty=Tensor[(3, 5, 2), int8] */;
  %215 = not_equal(%212, %213) /* ty=Tensor[(2, 9, 10), bool] */;
  (%214, %205, %var_2154, meta[relay.Constant][11] /* ty=Tensor[(108), float32] */, %var_2156, %215)
}

def @func_4975(%var_4937: Tensor[(10, 12, 5), int32], %var_4967: Tensor[(1440), uint32]) -> (Tensor[(10, 12, 5), uint8], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32]) {
  %216 = @func_4088() /* ty=Tensor[(10, 12, 5), int32] */;
  %217 = cast(%var_4937, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %221 = divide(%219, %220) /* ty=Tensor[(10, 12, 5), float32] */;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %223 = log10(%222) /* ty=Tensor[(10, 12, 5), float64] */;
  %224 = cast(%221, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %228 = cast(%var_4967, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %229 = cast(%var_4967, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %230 = reshape(%228, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %231 = reshape(%229, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %232 = @func_4441(%230, %231) /* ty=(Tensor[(12, 12, 10), bool],) */;
  %233 = right_shift(%226, %227) /* ty=Tensor[(10, 12, 5), uint8] */;
  %234 = %232.0;
  (%233, %234, %var_4967)
}

def @func_3910(%var_3895: Tensor[(1, 11, 7), float32], %var_3902: Tensor[(12, 11, 7), float32]) -> Tensor[(12, 11, 7), int64] {
  %235 = cast(%var_3895, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  %236 = atanh(%235) /* ty=Tensor[(1, 11, 7), float32] */;
  %237 = cast(%236, dtype="int64") /* ty=Tensor[(1, 11, 7), int64] */;
  %238 = cast(%var_3902, dtype="int64") /* ty=Tensor[(12, 11, 7), int64] */;
  minimum(%237, %238) /* ty=Tensor[(12, 11, 7), int64] */
}

def @func_1118(%var_1069: Tensor[(5, 11, 1), float64], %var_1109: Tensor[(108), float32], %var_1111: Tensor[(832), uint16]) -> (Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) {
  %239 = cast(%var_1069, dtype="float64") /* ty=Tensor[(5, 11, 1), float64] */;
  %240 = cast(-0.178906f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %241 = cast(%var_1109, dtype="float32") /* ty=Tensor[(108), float32] */;
  %242 = cast(meta[relay.Constant][13] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %243 = cast(%var_1111, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %244 = reshape(%240, newshape=[]) /* ty=float32 */;
  %245 = reshape(%241, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %246 = reshape(%242, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %247 = reshape(%243, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %248 = @func_494(%244, %245, %246, %247) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %249 = %248.2;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %251 = reshape(%250, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %252 = acosh(%239) /* ty=Tensor[(5, 11, 1), float64] */;
  %253 = @func_310(%251) /* ty=Tensor[(6, 15, 13), float32] */;
  (%252, %249, -0.178906f /* ty=float32 */, %var_1109, meta[relay.Constant][13] /* ty=Tensor[(1170), float32] */, %var_1111, %253)
}

def @func_3408(%var_3402: Tensor[(1, 6, 13), float32]) -> Tensor[(14, 6, 13), float32] {
  %254 = cast(%var_3402, dtype="float32") /* ty=Tensor[(1, 6, 13), float32] */;
  %255 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 13), float32] */;
  mod(%254, %255) /* ty=Tensor[(14, 6, 13), float32] */
}

def @func_6068(%var_5996: Tensor[(440), int32], %var_6003: Tensor[(1, 390), int32], %var_6032: Tensor[(2, 720), uint32], %var_6044: Tensor[(462, 1), uint16]) -> (Tensor[(10, 12, 5), int32], Tensor[(390, 3), float32], Tensor[(10, 11, 4), float64], Tensor[(440), int32], Tensor[(13, 10, 3), float32], Tensor[(1, 390), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(12, 12, 10), bool], Tensor[(2, 720), uint32], Tensor[(10, 12, 5), int32], Tensor[(10, 11, 4), float64], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16], Tensor[(10, 12, 5), uint32], Tensor[(6, 15, 13), float64]) {
  %256 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %257 = cast(%var_5996, dtype="int32") /* ty=Tensor[(440), int32] */;
  %258 = reshape(%257, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %259 = @func_3891(%258) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %260 = cast(%var_6003, dtype="int32") /* ty=Tensor[(1, 390), int32] */;
  %261 = reshape(%260, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int32] */;
  %262 = @func_1893(%261) /* ty=(Tensor[(13, 10, 3), float32],) */;
  %263 = @func_5287() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %264 = cast(%var_6032, dtype="uint32") /* ty=Tensor[(2, 720), uint32] */;
  %265 = cast(%var_6032, dtype="uint32") /* ty=Tensor[(2, 720), uint32] */;
  %266 = reshape(%264, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %267 = reshape(%265, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %268 = @func_4441(%266, %267) /* ty=(Tensor[(12, 12, 10), bool],) */;
  %269 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %270 = cast(%var_5996, dtype="int32") /* ty=Tensor[(440), int32] */;
  %271 = reshape(%270, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %272 = @func_3891(%271) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %273 = cast(%var_6044, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %274 = cast(%var_6044, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %275 = cast(meta[relay.Constant][15] /* ty=Tensor[(390, 3), float32] */, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %276 = reshape(%275, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %277 = @func_310(%276) /* ty=Tensor[(6, 15, 13), float32] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %279 = log10(%278) /* ty=Tensor[(6, 15, 13), float32] */;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %281 = reshape(%273, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %282 = reshape(%274, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %283 = reshape(%280, newshape=[1170, 1]) /* ty=Tensor[(1170, 1), float32] */;
  %284 = @func_653(%281, %282, %283) /* ty=(Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) */;
  %285 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %286 = cast(%279, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %287 = acosh(%286) /* ty=Tensor[(6, 15, 13), float32] */;
  %288 = cast(%277, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %292 = floor_mod(%290, %291) /* ty=Tensor[(6, 15, 13), float64] */;
  %293 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %297 = %256.0;
  %298 = %259.0;
  %299 = %262.0;
  %300 = %263.0;
  %301 = @func_5063() /* ty=Tensor[(10, 12, 5), int32] */;
  %302 = %268.0;
  %303 = %269.0;
  %304 = %272.0;
  %305 = %284.1;
  %306 = %285.0;
  %307 = mod(%295, %296) /* ty=Tensor[(6, 15, 13), float64] */;
  (%297, meta[relay.Constant][15] /* ty=Tensor[(390, 3), float32] */, %298, %var_5996, %299, %var_6003, %300, %301, %302, %var_6032, %303, %304, %305, %var_6044, %306, %307)
}

def @func_7070() -> Tensor[(10, 12, 5), float64] {
  %308 = @func_6184() /* ty=(Tensor[(10, 12, 5), float64], Tensor[(10, 12, 5), float64], Tensor[(10, 11, 4), float64], Tensor[(440, 1), int32]) */;
  %308.0
}

def @func_146(%var_141: Tensor[(4, 13, 16), uint16]) -> Tensor[(4, 13, 16), bool] {
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 13, 16), uint16] */, dtype="bool") /* ty=Tensor[(1, 13, 16), bool] */;
  %310 = cast(%var_141, dtype="bool") /* ty=Tensor[(4, 13, 16), bool] */;
  not_equal(%309, %310) /* ty=Tensor[(4, 13, 16), bool] */
}

def @func_6738() -> (Tensor[(4, 13, 16), bool],) {
  %311 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %312 = %311.1;
  (%312,)
}

def @func_5350(%var_5342: Tensor[(8, 16, 16), float64]) -> (Tensor[(8, 16, 16), float64],) {
  %313 = cast(%var_5342, dtype="float64") /* ty=Tensor[(8, 16, 16), float64] */;
  %314 = sigmoid(%313) /* ty=Tensor[(8, 16, 16), float64] */;
  (%314,)
}

def @func_2584(%var_2550: Tensor[(12, 14, 2), float32], %var_2574: Tensor[(27), float64]) -> (Tensor[(12, 14, 2), float32], Tensor[(12, 14, 2), float64], Tensor[(9, 3, ?), bool], Tensor[(27), float64]) {
  %315 = cast(%var_2550, dtype="float32") /* ty=Tensor[(12, 14, 2), float32] */;
  %316 = cosh(%315) /* ty=Tensor[(12, 14, 2), float32] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(12, 14, 2), float32] */;
  %318 = cast(%var_2550, dtype="float64") /* ty=Tensor[(12, 14, 2), float64] */;
  %319 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%316, dtype="float64") /* ty=Tensor[(12, 14, 2), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = cast(%var_2574, dtype="float64") /* ty=Tensor[(27), float64] */;
  %323 = reshape(%322, newshape=[9, 3, 1]) /* ty=Tensor[(9, 3, 1), float64] */;
  %324 = atanh(%317) /* ty=Tensor[(12, 14, 2), float32] */;
  %325 = maximum(%320, %321) /* ty=Tensor[(12, 14, 2), float64] */;
  %326 = @func_693(%323) /* ty=Tensor[(9, 3, ?), bool] */;
  (%324, %325, %326, %var_2574)
}

def @func_5729() -> Tensor[(10, 12, 5), bool] {
  %327 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %329 = cos(%328) /* ty=Tensor[(10, 12, 5), float64] */;
  %330 = cast(%327, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%332, %333) /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_3970() -> (Tensor[(10, 12, 5), bool],) {
  %334 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 12, 5), uint64] */, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %335 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(10, 12, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 12, 5), uint64] */, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = less_equal(%336, %337) /* ty=Tensor[(10, 12, 5), bool] */;
  (%338,)
}

def @func_3891(%var_3880: Tensor[(10, 11, 4), int32]) -> (Tensor[(10, 11, 4), float64],) {
  %339 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 11, 4), int32] */, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
  %340 = shape_of(%var_3880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_3880, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = not_equal(%341, %342) /* ty=Tensor[(10, 11, 4), bool] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %345 = log(%344) /* ty=Tensor[(10, 11, 4), float64] */;
  (%345,)
}

def @func_4541(%var_4501: Tensor[(832), uint16], %var_4503: Tensor[(78), float64]) -> (Tensor[(10, 12, 5), int32], Tensor[(4, 13, 16), bool], Tensor[(832), float32], Tensor[(78), float32], Tensor[(78), float64]) {
  %346 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %347 = cast(%var_4501, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %348 = reshape(%347, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %349 = cast(%var_4501, dtype="float32") /* ty=Tensor[(832), float32] */;
  %350 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
  %351 = %350.3;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(78), float64] */;
  %353 = asin(%352) /* ty=Tensor[(78), float64] */;
  %354 = cast(%var_4503, dtype="bool") /* ty=Tensor[(78), bool] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(1), int32] */;
  %356 = cast(%353, dtype="bool") /* ty=Tensor[(78), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?), bool] */;
  %358 = less(%356, %357) /* ty=Tensor[(78), bool] */;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(78), float32] */;
  %360 = cast(%353, dtype="float64") /* ty=Tensor[(78), float64] */;
  %361 = %346.0;
  %362 = @func_146(%348) /* ty=Tensor[(4, 13, 16), bool] */;
  %363 = acosh(%349) /* ty=Tensor[(832), float32] */;
  %364 = log10(%359) /* ty=Tensor[(78), float32] */;
  %365 = atan(%360) /* ty=Tensor[(78), float64] */;
  (%361, %362, %363, %364, %365)
}

def @func_2914(%var_2873: Tensor[(12, 6, 8), int16], %var_2898: Tensor[(1170), float32], %var_2902: Tensor[(108), float32], %var_2903: Tensor[(832), uint16]) -> (Tensor[(12, 6, 8), float32], Tensor[(5, 10, 4), float32], Tensor[(1170), float32], float32, Tensor[(108), float32], Tensor[(832), uint16], Tensor[(4, 13, 16), float32]) {
  %366 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 6, 8), int16] */, dtype="int16") /* ty=Tensor[(12, 6, 8), int16] */;
  %367 = shape_of(%var_2873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_2873, dtype="int16") /* ty=Tensor[(12, 6, 8), int16] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %370 = maximum(%368, %369) /* ty=Tensor[(12, 6, 8), int16] */;
  %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 6, 8), int16] */, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %375 = cast(%var_2898, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %376 = reshape(%375, newshape=[1, 1170]) /* ty=Tensor[(1, 1170), float32] */;
  %377 = @func_1238(%376) /* ty=(Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) */;
  %378 = cast(-6.28019f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %379 = cast(%var_2902, dtype="float32") /* ty=Tensor[(108), float32] */;
  %380 = cast(%var_2898, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %381 = cast(%var_2903, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %382 = reshape(%378, newshape=[]) /* ty=float32 */;
  %383 = reshape(%379, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %384 = reshape(%380, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %385 = reshape(%381, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %386 = @func_494(%382, %383, %384, %385) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %387 = %386.6;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(4, 13, 16), float32] */;
  %389 = floor_mod(%373, %374) /* ty=Tensor[(12, 6, 8), float32] */;
  %390 = %377.0;
  %391 = asinh(%388) /* ty=Tensor[(4, 13, 16), float32] */;
  (%389, %390, %var_2898, -6.28019f /* ty=float32 */, %var_2902, %var_2903, %391)
}

def @func_6918(%var_6915: Tensor[(4, 16, 7), float32]) -> Tensor[(4, 16, 7), float32] {
  %392 = cast(%var_6915, dtype="float32") /* ty=Tensor[(4, 16, 7), float32] */;
  tan(%392) /* ty=Tensor[(4, 16, 7), float32] */
}

def @main() -> (Tensor[(3, 11, 8), float32],) {
  %393 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %394 = asinh(%393) /* ty=Tensor[(3, 11, 8), float32] */;
  (%394,)
}

def @func_7297(%var_7286: Tensor[(7), uint8]) -> (Tensor[(10, 12, 5), int32], Tensor[(7, 1), uint8], Tensor[(7), uint8], Tensor[(10, 12, 5), bool]) {
  %395 = cast(%var_7286, dtype="uint8") /* ty=Tensor[(7), uint8] */;
  %396 = reshape(%395, newshape=[7, 1]) /* ty=Tensor[(7, 1), uint8] */;
  %397 = @func_6855() /* ty=(Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) */;
  %398 = @func_5063() /* ty=Tensor[(10, 12, 5), int32] */;
  %399 = @func_2113(%396) /* ty=Tensor[(7, 1), uint8] */;
  %400 = %397.0;
  (%398, %399, %var_7286, %400)
}

def @func_310(%var_281: Tensor[(6, 15, 13), float32]) -> Tensor[(6, 15, 13), float32] {
  %401 = cast(%var_281, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  tan(%401) /* ty=Tensor[(6, 15, 13), float32] */
}

def @func_494(%var_397: float32, %var_398: Tensor[(6, 6, 3), float32], %var_410: Tensor[(390, 3), float32], %var_436: Tensor[(832), uint16]) -> (Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) {
  %402 = cast(%var_397, dtype="float32") /* ty=float32 */;
  %403 = cast(%var_398, dtype="float32") /* ty=Tensor[(6, 6, 3), float32] */;
  %404 = cast(%var_410, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %405 = reshape(%404, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %406 = @func_310(%405) /* ty=Tensor[(6, 15, 13), float32] */;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %408 = reshape(%407, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %409 = @func_310(%408) /* ty=Tensor[(6, 15, 13), float32] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %411 = reshape(%410, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %412 = @func_325(%411) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
  %413 = %412.2;
  %414 = cast(%413, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
  %415 = cast(%var_397, dtype="bool") /* ty=bool */;
  %416 = cast(%var_436, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %417 = reshape(%416, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %418 = @func_146(%417) /* ty=Tensor[(4, 13, 16), bool] */;
  %419 = cast(%var_397, dtype="uint32") /* ty=uint32 */;
  %420 = cast(%418, dtype="uint32") /* ty=Tensor[(4, 13, 16), uint32] */;
  %421 = minimum(%402, %403) /* ty=Tensor[(6, 6, 3), float32] */;
  %422 = less(%414, %415) /* ty=Tensor[(2, 9, 10), bool] */;
  %423 = maximum(%419, %420) /* ty=Tensor[(4, 13, 16), uint32] */;
  (%421, %406, %var_410, %409, %var_436, %422, %423)
}

def @func_4304(%var_4274: Tensor[(832), uint16], %var_4285: Tensor[(110, 4), int32]) -> (Tensor[(10, 12, 5), bool], Tensor[(5, 11, 1), float64], Tensor[(55), float64], Tensor[(54, 2), float32], Tensor[(832), uint16], Tensor[(110, 4), int8]) {
  %424 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %425 = cast(meta[relay.Constant][23] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %426 = cast(meta[relay.Constant][24] /* ty=Tensor[(54, 2), float32] */, dtype="float32") /* ty=Tensor[(54, 2), float32] */;
  %427 = cast(%var_4274, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %428 = reshape(%425, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float64] */;
  %429 = reshape(%426, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %430 = reshape(%427, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %431 = @func_1118(%428, %429, %430) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) */;
  %432 = cast(%var_4285, dtype="int32") /* ty=Tensor[(110, 4), int32] */;
  %433 = reshape(%432, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %434 = @func_3891(%433) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %435 = %434.0;
  %436 = cast(%435, dtype="int8") /* ty=Tensor[(10, 11, 4), int8] */;
  %437 = shape_of(%var_4285, dtype="int32") /* ty=Tensor[(2), int32] */;
  %438 = cast(%var_4285, dtype="int8") /* ty=Tensor[(110, 4), int8] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %440 = %424.0;
  %441 = %431.0;
  %442 = logical_xor(%438, %439) /* ty=Tensor[(110, 4), int8] */;
  (%440, %441, meta[relay.Constant][23] /* ty=Tensor[(55), float64] */, meta[relay.Constant][24] /* ty=Tensor[(54, 2), float32] */, %var_4274, %442)
}

def @func_6536(%var_6521: Tensor[(10, 12, 5), bool]) -> (Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float32]) {
  %443 = @func_5729() /* ty=Tensor[(10, 12, 5), bool] */;
  %444 = cast(%var_6521, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %448 = cast(%var_6521, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %449 = mod(%446, %447) /* ty=Tensor[(10, 12, 5), float32] */;
  %450 = sinh(%448) /* ty=Tensor[(10, 12, 5), float32] */;
  (%449, %450)
}

def @func_6358(%var_6281: Tensor[(8, 4, 11), int64], %var_6346: Tensor[(77), float32], %var_6347: Tensor[(924), float32]) -> (Tensor[(12, 11, 7), int64], Tensor[(77), float32], Tensor[(924), float32], Tensor[(8, 4, 11), float32]) {
  %451 = cast(%var_6346, dtype="float32") /* ty=Tensor[(77), float32] */;
  %452 = cast(%var_6347, dtype="float32") /* ty=Tensor[(924), float32] */;
  %453 = reshape(%451, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), float32] */;
  %454 = reshape(%452, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %455 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %456 = shape_of(%var_6281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%var_6281, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %459 = bitwise_and(%457, %458) /* ty=Tensor[(8, 4, 11), int64] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %461 = cosh(%460) /* ty=Tensor[(8, 4, 11), float32] */;
  %462 = cast(%459, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %466 = left_shift(%464, %465) /* ty=Tensor[(8, 4, 11), uint64] */;
  %467 = cast(%459, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = less(%469, %470) /* ty=Tensor[(8, 4, 11), bool] */;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
  %473 = @func_3910(%453, %454) /* ty=Tensor[(12, 11, 7), int64] */;
  %474 = sqrt(%472) /* ty=Tensor[(8, 4, 11), float32] */;
  (%473, %var_6346, %var_6347, %474)
}

def @func_4441(%var_4432: Tensor[(12, 12, 10), uint32], %var_4433: Tensor[(12, 12, 10), uint32]) -> (Tensor[(12, 12, 10), bool],) {
  %475 = cast(%var_4433, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %476 = shape_of(%var_4432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_4432, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = greater(%477, %478) /* ty=Tensor[(12, 12, 10), bool] */;
  %480 = cast(%var_4433, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %484 = logical_and(%482, %483) /* ty=Tensor[(12, 12, 10), bool] */;
  (%484,)
}

def @func_4140() -> (Tensor[(10, 12, 5), int32],) {
  %485 = @func_4088() /* ty=Tensor[(10, 12, 5), int32] */;
  (%485,)
}

def @func_4407() -> Tensor[(10, 12, 5), bool] {
  %486 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %486.0
}

def @func_5213() -> (Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) {
  %487 = @func_4088() /* ty=Tensor[(10, 12, 5), int32] */;
  %488 = cast(%487, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %489 = reshape(%488, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), bool] */;
  %490 = @func_4031(%489) /* ty=Tensor[(10, 12, 5), bool] */;
  (%487, %490)
}

def @func_5320() -> Tensor[(4, 13, 16), bool] {
  %491 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %491.1
}

def @func_4562() -> (Tensor[(10, 12, 5), int32],) {
  %492 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %493 = %492.0;
  (%493,)
}

def @func_6128(%var_6089: Tensor[(7, 14, 15), float32], %var_6099: Tensor[(18, 6), float32], %var_6100: Tensor[(1170), float32], %var_6101: Tensor[(1, 832), uint16]) -> (Tensor[(6, 6, 3), float32], float32, Tensor[(18, 6), float32], Tensor[(1170), float32], Tensor[(1, 832), uint16], Tensor[(7, 14, 15), float64]) {
  %494 = cast(9.83869f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %495 = cast(%var_6099, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
  %496 = cast(%var_6100, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %497 = cast(%var_6101, dtype="uint16") /* ty=Tensor[(1, 832), uint16] */;
  %498 = reshape(%494, newshape=[]) /* ty=float32 */;
  %499 = reshape(%495, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %500 = reshape(%496, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %501 = reshape(%497, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %502 = @func_494(%498, %499, %500, %501) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %503 = cast(%var_6089, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
  %504 = log10(%503) /* ty=Tensor[(7, 14, 15), float32] */;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(7, 14, 15), float64] */;
  %506 = %502.0;
  %507 = rsqrt(%505) /* ty=Tensor[(7, 14, 15), float64] */;
  (%506, 9.83869f /* ty=float32 */, %var_6099, %var_6100, %var_6101, %507)
}

def @func_7144() -> (Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
  %508 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %509 = @func_4562() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %510 = %508.0;
  %511 = @func_5862() /* ty=Tensor[(10, 12, 5), int32] */;
  %512 = @func_5729() /* ty=Tensor[(10, 12, 5), bool] */;
  %513 = %509.0;
  (%510, %511, %512, %513)
}

def @func_4722() -> (Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) {
  %514 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %515 = %514.0;
  %516 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %517 = cast(%516, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %518 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%515, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %521 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
  %522 = add(%519, %520) /* ty=Tensor[(10, 12, 5), uint32] */;
  %523 = %521.0;
  (%522, %523)
}

def @func_6776() -> Tensor[(10, 12, 5), bool] {
  %524 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
  %524.1
}

def @func_4810() -> (Tensor[(10, 12, 5), float64],) {
  %525 = @func_4562() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %528 = sqrt(%527) /* ty=Tensor[(10, 12, 5), float64] */;
  (%528,)
}

def @func_6991(%var_6969: Tensor[(108, 1), float32]) -> (Tensor[(12, 14, 2), float64], Tensor[(4, 84), float32], Tensor[(27, 1), float64], Tensor[(108), float32], Tensor[(576, 1), int16], Tensor[(1170), float32], Tensor[(108, 832), float32], Tensor[(13, 10, 3), float32], Tensor[(390), int32]) {
  %529 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 84), float32] */, dtype="float32") /* ty=Tensor[(4, 84), float32] */;
  %530 = cast(meta[relay.Constant][27] /* ty=Tensor[(27, 1), float64] */, dtype="float64") /* ty=Tensor[(27, 1), float64] */;
  %531 = reshape(%529, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), float32] */;
  %532 = reshape(%530, newshape=[27]) /* ty=Tensor[(27), float64] */;
  %533 = @func_2584(%531, %532) /* ty=(Tensor[(12, 14, 2), float32], Tensor[(12, 14, 2), float64], Tensor[(9, 3, ?), bool], Tensor[(27), float64]) */;
  %534 = cast(meta[relay.Constant][28] /* ty=Tensor[(576, 1), int16] */, dtype="int16") /* ty=Tensor[(576, 1), int16] */;
  %535 = cast(meta[relay.Constant][29] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %536 = cast(%var_6969, dtype="float32") /* ty=Tensor[(108, 1), float32] */;
  %537 = @func_6447() /* ty=(Tensor[(832), uint16], Tensor[(440), int32], Tensor[(4, 13, 16), float32]) */;
  %538 = %537.0;
  %539 = cast(%538, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %540 = reshape(%534, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int16] */;
  %541 = reshape(%535, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %542 = reshape(%536, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %543 = reshape(%539, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %544 = @func_2914(%540, %541, %542, %543) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(5, 10, 4), float32], Tensor[(1170), float32], float32, Tensor[(108), float32], Tensor[(832), uint16], Tensor[(4, 13, 16), float32]) */;
  %545 = cast(%538, dtype="float32") /* ty=Tensor[(832), float32] */;
  %546 = cast(%var_6969, dtype="float32") /* ty=Tensor[(108, 1), float32] */;
  %547 = cast(meta[relay.Constant][30] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %548 = reshape(%547, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int32] */;
  %549 = @func_1893(%548) /* ty=(Tensor[(13, 10, 3), float32],) */;
  %550 = %533.1;
  %551 = %544.4;
  %552 = floor_mod(%545, %546) /* ty=Tensor[(108, 832), float32] */;
  %553 = %549.0;
  (%550, meta[relay.Constant][26] /* ty=Tensor[(4, 84), float32] */, meta[relay.Constant][27] /* ty=Tensor[(27, 1), float64] */, %551, meta[relay.Constant][28] /* ty=Tensor[(576, 1), int16] */, meta[relay.Constant][29] /* ty=Tensor[(1170), float32] */, %552, %553, meta[relay.Constant][30] /* ty=Tensor[(390), int32] */)
}

def @func_6233() -> Tensor[(4, 13, 16), bool] {
  @func_5320() /* ty=Tensor[(4, 13, 16), bool] */
}

def @func_2046(%var_2012: Tensor[(12, 5, 14), float64], %var_2013: Tensor[(12, 5, 14), float64], %var_2017: Tensor[(12, 5, 14), float64]) -> (Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) {
  %554 = cast(%var_2013, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %555 = shape_of(%var_2012, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_2012, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = cast(%var_2017, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %559 = shape_of(%var_2013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%var_2013, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 5, 14), float64] */, dtype="uint8") /* ty=Tensor[(12, 5, 14), uint8] */;
  %563 = shape_of(%var_2013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(12, 5, 14), uint8] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %566 = cast(meta[relay.Constant][32] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %567 = reshape(%566, newshape=[1, 1170]) /* ty=Tensor[(1, 1170), float32] */;
  %568 = @func_1238(%567) /* ty=(Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) */;
  %569 = not_equal(%556, %557) /* ty=Tensor[(12, 5, 14), bool] */;
  %570 = less_equal(%560, %561) /* ty=Tensor[(12, 5, 14), bool] */;
  %571 = minimum(%564, %565) /* ty=Tensor[(12, 5, 14), uint8] */;
  %572 = %568.2;
  (%569, %570, %571, %572, meta[relay.Constant][32] /* ty=Tensor[(1170), float32] */)
}

def @func_1893(%var_1874: Tensor[(13, 10, 3), int32]) -> (Tensor[(13, 10, 3), float32],) {
  %573 = cast(%var_1874, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %574 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(13, 10, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 10, 3), int32] */, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = less_equal(%575, %576) /* ty=Tensor[(13, 10, 3), bool] */;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %579 = sin(%578) /* ty=Tensor[(13, 10, 3), float32] */;
  (%579,)
}

def @func_7195() -> Tensor[(10, 12, 5), int32] {
  %580 = @func_6504() /* ty=(Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) */;
  %580.1
}

def @func_325(%var_318: Tensor[(1170), float32]) -> (Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) {
  %581 = cast(%var_318, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %582 = reshape(%581, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %583 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %584 = sqrt(%583) /* ty=Tensor[(2, 9, 10), float64] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  %586 = @func_310(%582) /* ty=Tensor[(6, 15, 13), float32] */;
  %587 = log(%585) /* ty=Tensor[(2, 9, 10), float32] */;
  (%586, %var_318, %587)
}

def @func_5809(%var_5784: Tensor[(840), float64]) -> (Tensor[(10, 12, 5), int32], Tensor[(12, 5, 14), bool], Tensor[(840), float64], Tensor[(10, 12, 5), int32]) {
  %588 = @func_5287() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %589 = cast(%var_5784, dtype="float64") /* ty=Tensor[(840), float64] */;
  %590 = cast(%var_5784, dtype="float64") /* ty=Tensor[(840), float64] */;
  %591 = cast(%var_5784, dtype="float64") /* ty=Tensor[(840), float64] */;
  %592 = reshape(%589, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %593 = reshape(%590, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %594 = reshape(%591, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %595 = @func_2046(%592, %593, %594) /* ty=(Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) */;
  %596 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %597 = %588.0;
  %598 = %595.0;
  %599 = %596.0;
  (%597, %598, %var_5784, %599)
}

def @func_6634(%var_6623: Tensor[(5, 88), int32], %var_6625: Tensor[(1440), uint32]) -> (Tensor[(10, 12, 5), int32], Tensor[(2, 9, 10), float32], Tensor[(5, 88), int32], Tensor[(390), int32], Tensor[(1440), uint32], Tensor[(462), uint16]) {
  %600 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
  %601 = cast(%var_6623, dtype="int32") /* ty=Tensor[(5, 88), int32] */;
  %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %603 = cast(%var_6625, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %604 = cast(meta[relay.Constant][36] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %605 = reshape(%601, newshape=[440]) /* ty=Tensor[(440), int32] */;
  %606 = reshape(%602, newshape=[1, 390]) /* ty=Tensor[(1, 390), int32] */;
  %607 = reshape(%603, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint32] */;
  %608 = reshape(%604, newshape=[462, 1]) /* ty=Tensor[(462, 1), uint16] */;
  %609 = @func_6068(%605, %606, %607, %608) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(390, 3), float32], Tensor[(10, 11, 4), float64], Tensor[(440), int32], Tensor[(13, 10, 3), float32], Tensor[(1, 390), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(12, 12, 10), bool], Tensor[(2, 720), uint32], Tensor[(10, 12, 5), int32], Tensor[(10, 11, 4), float64], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16], Tensor[(10, 12, 5), uint32], Tensor[(6, 15, 13), float64]) */;
  %610 = %600.0;
  %611 = %609.12;
  (%610, %611, %var_6623, meta[relay.Constant][35] /* ty=Tensor[(390), int32] */, %var_6625, meta[relay.Constant][36] /* ty=Tensor[(462), uint16] */)
}

def @func_6767() -> (Tensor[(4, 13, 16), bool],) {
  %612 = @func_5320() /* ty=Tensor[(4, 13, 16), bool] */;
  (%612,)
}

def @func_2321(%var_2288: Tensor[(14, 15, 11), uint8], %var_2289: Tensor[(14, 15, 11), uint8], %var_2295: Tensor[(832), uint16], %var_2297: Tensor[(14, 15, 11), bool], %var_2314: Tensor[(5, 6), int8], %var_2315: Tensor[(55), float64]) -> (Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 15, 11), uint32], Tensor[(2, 9, 10), bool], Tensor[(5, 6), int8], Tensor[(55), float64]) {
  %613 = cast(%var_2295, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %614 = reshape(%613, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %615 = cast(%var_2289, dtype="bool") /* ty=Tensor[(14, 15, 11), bool] */;
  %616 = shape_of(%var_2288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_2288, dtype="bool") /* ty=Tensor[(14, 15, 11), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = greater_equal(%617, %618) /* ty=Tensor[(14, 15, 11), bool] */;
  %620 = cast(%var_2297, dtype="int8") /* ty=Tensor[(14, 15, 11), int8] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="int8") /* ty=Tensor[(14, 15, 11), int8] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %624 = right_shift(%622, %623) /* ty=Tensor[(14, 15, 11), int8] */;
  %625 = cast(%624, dtype="uint32") /* ty=Tensor[(14, 15, 11), uint32] */;
  %626 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%619, dtype="uint32") /* ty=Tensor[(14, 15, 11), uint32] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %629 = cast(%var_2314, dtype="int8") /* ty=Tensor[(5, 6), int8] */;
  %630 = cast(%var_2314, dtype="int8") /* ty=Tensor[(5, 6), int8] */;
  %631 = cast(%var_2315, dtype="float64") /* ty=Tensor[(55), float64] */;
  %632 = cast(%var_2295, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %633 = reshape(%629, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), int8] */;
  %634 = reshape(%630, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), int8] */;
  %635 = reshape(%631, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %636 = reshape(%632, newshape=[4, 208]) /* ty=Tensor[(4, 208), uint16] */;
  %637 = @func_2172(%633, %634, %635, %636) /* ty=(Tensor[(3, 5, 2), int8], Tensor[(390, 3), float32], Tensor[(55), float64], Tensor[(108), float32], Tensor[(4, 208), uint16], Tensor[(2, 9, 10), bool]) */;
  %638 = @func_146(%614) /* ty=Tensor[(4, 13, 16), bool] */;
  %639 = maximum(%627, %628) /* ty=Tensor[(14, 15, 11), uint32] */;
  %640 = %637.5;
  (%638, %var_2295, %639, %640, %var_2314, %var_2315)
}

def @func_4031(%var_4025: Tensor[(10, 12, 5), bool]) -> Tensor[(10, 12, 5), bool] {
  %641 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %642 = %641.0;
  %643 = cast(%var_4025, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%645, %646) /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_5862() -> Tensor[(10, 12, 5), int32] {
  %647 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %647.0
}

def @func_6184() -> (Tensor[(10, 12, 5), float64], Tensor[(10, 12, 5), float64], Tensor[(10, 11, 4), float64], Tensor[(440, 1), int32]) {
  %648 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %649 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %650 = cast(meta[relay.Constant][37] /* ty=Tensor[(440, 1), int32] */, dtype="int32") /* ty=Tensor[(440, 1), int32] */;
  %651 = reshape(%650, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %652 = @func_3891(%651) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %653 = %648.0;
  %654 = %649.0;
  %655 = %652.0;
  (%653, %654, %655, meta[relay.Constant][37] /* ty=Tensor[(440, 1), int32] */)
}

def @func_1238(%var_1233: Tensor[(1, 1170), float32]) -> (Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) {
  %656 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 4), float32] */;
  %657 = cast(%var_1233, dtype="float32") /* ty=Tensor[(1, 1170), float32] */;
  %658 = reshape(%657, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %659 = atanh(%656) /* ty=Tensor[(5, 10, 4), float32] */;
  %660 = @func_310(%658) /* ty=Tensor[(6, 15, 13), float32] */;
  (%659, %660, %var_1233)
}

def @func_5571(%var_5481: Tensor[(8, 1170), float32]) -> (Tensor[(10, 12, 5), bool], Tensor[(840), float64], Tensor[(8, 1170), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float64], Tensor[(8, 1170), int32]) {
  %661 = cast(meta[relay.Constant][39] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %662 = cast(meta[relay.Constant][39] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %663 = cast(meta[relay.Constant][39] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %664 = reshape(%661, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %665 = reshape(%662, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %666 = reshape(%663, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %667 = @func_2046(%664, %665, %666) /* ty=(Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) */;
  %668 = %667.3;
  %669 = cast(%668, dtype="bool") /* ty=Tensor[(1, 1170), bool] */;
  %670 = cast(%var_5481, dtype="bool") /* ty=Tensor[(8, 1170), bool] */;
  %671 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %672 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %674 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %675 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 1170), float32] */, dtype="int32") /* ty=Tensor[(8, 1170), int32] */;
  %676 = shape_of(%var_5481, dtype="int32") /* ty=Tensor[(2), int32] */;
  %677 = cast(%var_5481, dtype="int32") /* ty=Tensor[(8, 1170), int32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %679 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %680 = less_equal(%669, %670) /* ty=Tensor[(8, 1170), bool] */;
  %681 = %671.1;
  %682 = log(%673) /* ty=Tensor[(10, 12, 5), float32] */;
  %683 = %674.0;
  %684 = subtract(%677, %678) /* ty=Tensor[(8, 1170), int32] */;
  (%679, meta[relay.Constant][39] /* ty=Tensor[(840), float64] */, %680, %681, %682, %683, %684)
}

def @func_614(%var_605: Tensor[(13, 8, 1), float64]) -> Tensor[(13, 8, 1), float64] {
  %685 = cast(%var_605, dtype="float64") /* ty=Tensor[(13, 8, 1), float64] */;
  asin(%685) /* ty=Tensor[(13, 8, 1), float64] */
}

def @func_2140(%var_2128: Tensor[(10, 7, 13), float32], %var_2136: Tensor[(10, 7, 13), float32]) -> (Tensor[(10, 7, 13), float32], Tensor[(10, 7, 13), int64]) {
  %686 = cast(%var_2128, dtype="float32") /* ty=Tensor[(10, 7, 13), float32] */;
  %687 = cast(%var_2136, dtype="int64") /* ty=Tensor[(10, 7, 13), int64] */;
  %688 = shape_of(%var_2128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%var_2128, dtype="int64") /* ty=Tensor[(10, 7, 13), int64] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %691 = acosh(%686) /* ty=Tensor[(10, 7, 13), float32] */;
  %692 = right_shift(%689, %690) /* ty=Tensor[(10, 7, 13), int64] */;
  (%691, %692)
}

def @func_6261(%var_6248: Tensor[(5, 78), int32]) -> (Tensor[(10, 12, 5), int32], Tensor[(13, 10, 3), float64], Tensor[(5, 78), int32]) {
  %693 = cast(%var_6248, dtype="int32") /* ty=Tensor[(5, 78), int32] */;
  %694 = reshape(%693, newshape=[390]) /* ty=Tensor[(390), int32] */;
  %695 = @func_4587(%694) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(390), int32], Tensor[(13, 10, 3), float64]) */;
  %696 = @func_5063() /* ty=Tensor[(10, 12, 5), int32] */;
  %697 = %695.2;
  (%696, %697, %var_6248)
}

def @func_3190(%var_3176: uint16, %var_3177: Tensor[(15, 7, 9), uint16]) -> Tensor[(15, 7, 9), uint16] {
  %698 = cast(%var_3176, dtype="uint16") /* ty=uint16 */;
  %699 = cast(%var_3177, dtype="uint16") /* ty=Tensor[(15, 7, 9), uint16] */;
  multiply(%698, %699) /* ty=Tensor[(15, 7, 9), uint16] */
}

def @func_6447() -> (Tensor[(832), uint16], Tensor[(440), int32], Tensor[(4, 13, 16), float32]) {
  %700 = @func_6233() /* ty=Tensor[(4, 13, 16), bool] */;
  %701 = cast(%700, dtype="uint16") /* ty=Tensor[(4, 13, 16), uint16] */;
  %702 = cast(meta[relay.Constant][41] /* ty=Tensor[(440), int32] */, dtype="int32") /* ty=Tensor[(440), int32] */;
  %703 = reshape(%701, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %704 = reshape(%702, newshape=[110, 4]) /* ty=Tensor[(110, 4), int32] */;
  %705 = @func_4304(%703, %704) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(5, 11, 1), float64], Tensor[(55), float64], Tensor[(54, 2), float32], Tensor[(832), uint16], Tensor[(110, 4), int8]) */;
  %706 = cast(%700, dtype="float32") /* ty=Tensor[(4, 13, 16), float32] */;
  %707 = %705.4;
  %708 = sinh(%706) /* ty=Tensor[(4, 13, 16), float32] */;
  (%707, meta[relay.Constant][41] /* ty=Tensor[(440), int32] */, %708)
}

def @func_4263(%var_4255: Tensor[(12, 15, 11), bool], %var_4256: Tensor[(12, 15, 11), bool]) -> (Tensor[(12, 15, 11), bool],) {
  %709 = cast(%var_4256, dtype="bool") /* ty=Tensor[(12, 15, 11), bool] */;
  %710 = shape_of(%var_4255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_4255, dtype="bool") /* ty=Tensor[(12, 15, 11), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = logical_or(%711, %712) /* ty=Tensor[(12, 15, 11), bool] */;
  (%713,)
}

def @func_5063() -> Tensor[(10, 12, 5), int32] {
  %714 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %714.0
}

def @func_6772() -> Tensor[(10, 12, 5), int32] {
  %715 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %715.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6448() -> (Tensor[(832), uint16], Tensor[(440), int32], Tensor[(4, 13, 16), float32]) {
  %9 = fn () -> (Tensor[(832), uint16], Tensor[(440), int32], Tensor[(4, 13, 16), float32]) {
    %0 = @func_6233() /* ty=Tensor[(4, 13, 16), bool] */;
    %1 = cast(%0, dtype="uint16") /* ty=Tensor[(4, 13, 16), uint16] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(440), int32] */, dtype="int32") /* ty=Tensor[(440), int32] */;
    %3 = reshape(%1, newshape=[832]) /* ty=Tensor[(832), uint16] */;
    %4 = reshape(%2, newshape=[110, 4]) /* ty=Tensor[(110, 4), int32] */;
    %5 = @func_4304(%3, %4) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(5, 11, 1), float64], Tensor[(55), float64], Tensor[(54, 2), float32], Tensor[(832), uint16], Tensor[(110, 4), int8]) */;
    %6 = cast(%0, dtype="float32") /* ty=Tensor[(4, 13, 16), float32] */;
    %7 = %5.4;
    %8 = sinh(%6) /* ty=Tensor[(4, 13, 16), float32] */;
    (%7, meta[relay.Constant][0] /* ty=Tensor[(440), int32] */, %8)
  };
  %9() /* ty=(Tensor[(832), uint16], Tensor[(440), int32], Tensor[(4, 13, 16), float32]) */
}

def @func_5352(%var_5351: Tensor[(8, 16, 16), float64]) -> (Tensor[(8, 16, 16), float64],) {
  %12 = fn (%var_5342: Tensor[(8, 16, 16), float64]) -> (Tensor[(8, 16, 16), float64],) {
    %10 = cast(%var_5342, dtype="float64") /* ty=Tensor[(8, 16, 16), float64] */;
    %11 = sigmoid(%10) /* ty=Tensor[(8, 16, 16), float64] */;
    (%11,)
  };
  %12(%var_5351) /* ty=(Tensor[(8, 16, 16), float64],) */
}

def @func_6799(%var_6786: Tensor[(15, 8, 3), uint8], %var_6787: Tensor[(15, 8, 3), uint8]) -> (Tensor[(15, 8, 3), uint8],) {
  %13 = cast(%var_6787, dtype="uint8") /* ty=Tensor[(15, 8, 3), uint8] */;
  %14 = shape_of(%var_6786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%var_6786, dtype="uint8") /* ty=Tensor[(15, 8, 3), uint8] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %17 = bitwise_or(%15, %16) /* ty=Tensor[(15, 8, 3), uint8] */;
  (%17,)
}

def @func_6134(%var_6130: Tensor[(7, 14, 15), float32], %var_6131: Tensor[(18, 6), float32], %var_6132: Tensor[(1170), float32], %var_6133: Tensor[(1, 832), uint16]) -> (Tensor[(6, 6, 3), float32], float32, Tensor[(18, 6), float32], Tensor[(1170), float32], Tensor[(1, 832), uint16], Tensor[(7, 14, 15), float64]) {
  @func_6128(%var_6130, %var_6131, %var_6132, %var_6133) /* ty=(Tensor[(6, 6, 3), float32], float32, Tensor[(18, 6), float32], Tensor[(1170), float32], Tensor[(1, 832), uint16], Tensor[(7, 14, 15), float64]) */
}

def @func_7057() -> (Tensor[(10, 12, 5), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), bool]) {
  %27 = fn () -> (Tensor[(10, 12, 5), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), bool]) {
    %18 = @func_5670() /* ty=Tensor[(10, 12, 5), float32] */;
    %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 12, 5), float32] */, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%18, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %23 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
    %24 = greater_equal(%21, %22) /* ty=Tensor[(10, 12, 5), bool] */;
    %25 = @func_5320() /* ty=Tensor[(4, 13, 16), bool] */;
    %26 = %23.1;
    (%24, %25, %26)
  };
  %27() /* ty=(Tensor[(10, 12, 5), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), bool]) */
}

def @func_5322() -> Tensor[(4, 13, 16), bool] {
  @func_5320() /* ty=Tensor[(4, 13, 16), bool] */
}

def @func_5862() -> Tensor[(10, 12, 5), int32] {
  %28 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %28.0
}

def @func_7339(%var_7322: Tensor[(10, 12, 5), float64]) -> (Tensor[(10, 12, 5), float64],) {
  %29 = @func_7070() /* ty=Tensor[(10, 12, 5), float64] */;
  %30 = cast(%var_7322, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %34 = floor_divide(%32, %33) /* ty=Tensor[(10, 12, 5), float64] */;
  (%34,)
}

def @func_312(%var_311: Tensor[(6, 15, 13), float32]) -> Tensor[(6, 15, 13), float32] {
  %36 = fn (%var_281: Tensor[(6, 15, 13), float32]) -> Tensor[(6, 15, 13), float32] {
    %35 = cast(%var_281, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
    tan(%35) /* ty=Tensor[(6, 15, 13), float32] */
  };
  %36(%var_311) /* ty=Tensor[(6, 15, 13), float32] */
}

def @func_5064() -> Tensor[(10, 12, 5), int32] {
  %38 = fn () -> Tensor[(10, 12, 5), int32] {
    %37 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %37.0
  };
  %38() /* ty=Tensor[(10, 12, 5), int32] */
}

def @func_5186(%var_5185: Tensor[(10, 12, 5), bool]) -> (Tensor[(10, 12, 5), bool], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32], Tensor[(10, 12, 5), uint8]) {
  %59 = fn (%var_5168: Tensor[(10, 12, 5), bool]) -> (Tensor[(10, 12, 5), bool], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32], Tensor[(10, 12, 5), uint8]) {
    %39 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
    %40 = %39.0;
    %41 = cast(%40, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
    %42 = exp(%41) /* ty=Tensor[(10, 12, 5), float32] */;
    %43 = cast(%42, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %44 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%40, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(1440), uint32] */, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
    %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(1440), uint32] */, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
    %49 = reshape(%47, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
    %50 = reshape(%48, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
    %51 = @func_4441(%49, %50) /* ty=(Tensor[(12, 12, 10), bool],) */;
    %52 = cast(%var_5168, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
    %53 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %54 = cast(%40, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %56 = not_equal(%45, %46) /* ty=Tensor[(10, 12, 5), bool] */;
    %57 = %51.0;
    %58 = bitwise_and(%54, %55) /* ty=Tensor[(10, 12, 5), uint8] */;
    (%56, %57, meta[relay.Constant][2] /* ty=Tensor[(1440), uint32] */, %58)
  };
  %59(%var_5185) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32], Tensor[(10, 12, 5), uint8]) */
}

def @func_2805(%var_2799: float32, %var_2800: Tensor[(13, 14, 3), float32], %var_2801: Tensor[(13, 14, 3), float64], %var_2802: Tensor[(13, 14, 3), int8], %var_2803: Tensor[(1170), float32], %var_2804: Tensor[(13, 14, 3), float64]) -> (Tensor[(13, 14, 3), uint32], Tensor[(13, 14, 3), uint64], Tensor[(13, 14, 3), bool], Tensor[(1170), float32], Tensor[(1170), float32], Tensor[(13, 14, 3), bool]) {
  @func_2797(%var_2799, %var_2800, %var_2801, %var_2802, %var_2803, %var_2804) /* ty=(Tensor[(13, 14, 3), uint32], Tensor[(13, 14, 3), uint64], Tensor[(13, 14, 3), bool], Tensor[(1170), float32], Tensor[(1170), float32], Tensor[(13, 14, 3), bool]) */
}

def @func_4768(%var_4756: float32, %var_4757: Tensor[(108), float32], %var_4759: Tensor[(832), uint16], %var_4764: Tensor[(462, 1), uint16]) -> (Tensor[(10, 12, 5), uint64], Tensor[(832), uint16], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16]) {
  %60 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %61 = %60.0;
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 12, 5), bool] */, dtype="uint64") /* ty=Tensor[(10, 12, 5), uint64] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="uint64") /* ty=Tensor[(10, 12, 5), uint64] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %66 = cast(%var_4756, dtype="float32") /* ty=float32 */;
  %67 = cast(%var_4757, dtype="float32") /* ty=Tensor[(108), float32] */;
  %68 = cast(meta[relay.Constant][4] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %69 = cast(%var_4759, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %70 = reshape(%66, newshape=[]) /* ty=float32 */;
  %71 = reshape(%67, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %72 = reshape(%68, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %73 = reshape(%69, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %74 = @func_494(%70, %71, %72, %73) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %75 = cast(%var_4764, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %76 = cast(%var_4764, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %78 = reshape(%75, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %79 = reshape(%76, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %80 = reshape(%77, newshape=[1170, 1]) /* ty=Tensor[(1170, 1), float32] */;
  %81 = @func_653(%78, %79, %80) /* ty=(Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) */;
  %82 = multiply(%64, %65) /* ty=Tensor[(10, 12, 5), uint64] */;
  %83 = %74.4;
  %84 = %81.1;
  (%82, %83, %var_4756, %var_4757, meta[relay.Constant][4] /* ty=Tensor[(1170), float32] */, %var_4759, %84, %var_4764)
}

def @func_2321(%var_2288: Tensor[(14, 15, 11), uint8], %var_2289: Tensor[(14, 15, 11), uint8], %var_2295: Tensor[(832), uint16], %var_2297: Tensor[(14, 15, 11), bool], %var_2314: Tensor[(5, 6), int8], %var_2315: Tensor[(55), float64]) -> (Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 15, 11), uint32], Tensor[(2, 9, 10), bool], Tensor[(5, 6), int8], Tensor[(55), float64]) {
  %85 = cast(%var_2295, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %86 = reshape(%85, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %87 = cast(%var_2289, dtype="bool") /* ty=Tensor[(14, 15, 11), bool] */;
  %88 = shape_of(%var_2288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_2288, dtype="bool") /* ty=Tensor[(14, 15, 11), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = greater_equal(%89, %90) /* ty=Tensor[(14, 15, 11), bool] */;
  %92 = cast(%var_2297, dtype="int8") /* ty=Tensor[(14, 15, 11), int8] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="int8") /* ty=Tensor[(14, 15, 11), int8] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %96 = right_shift(%94, %95) /* ty=Tensor[(14, 15, 11), int8] */;
  %97 = cast(%96, dtype="uint32") /* ty=Tensor[(14, 15, 11), uint32] */;
  %98 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%91, dtype="uint32") /* ty=Tensor[(14, 15, 11), uint32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %101 = cast(%var_2314, dtype="int8") /* ty=Tensor[(5, 6), int8] */;
  %102 = cast(%var_2314, dtype="int8") /* ty=Tensor[(5, 6), int8] */;
  %103 = cast(%var_2315, dtype="float64") /* ty=Tensor[(55), float64] */;
  %104 = cast(%var_2295, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %105 = reshape(%101, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), int8] */;
  %106 = reshape(%102, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), int8] */;
  %107 = reshape(%103, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %108 = reshape(%104, newshape=[4, 208]) /* ty=Tensor[(4, 208), uint16] */;
  %109 = @func_2172(%105, %106, %107, %108) /* ty=(Tensor[(3, 5, 2), int8], Tensor[(390, 3), float32], Tensor[(55), float64], Tensor[(108), float32], Tensor[(4, 208), uint16], Tensor[(2, 9, 10), bool]) */;
  %110 = @func_146(%86) /* ty=Tensor[(4, 13, 16), bool] */;
  %111 = maximum(%99, %100) /* ty=Tensor[(14, 15, 11), uint32] */;
  %112 = %109.5;
  (%110, %var_2295, %111, %112, %var_2314, %var_2315)
}

def @func_4774(%var_4770: float32, %var_4771: Tensor[(108), float32], %var_4772: Tensor[(832), uint16], %var_4773: Tensor[(462, 1), uint16]) -> (Tensor[(10, 12, 5), uint64], Tensor[(832), uint16], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16]) {
  @func_4768(%var_4770, %var_4771, %var_4772, %var_4773) /* ty=(Tensor[(10, 12, 5), uint64], Tensor[(832), uint16], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16]) */
}

def @func_5809(%var_5784: Tensor[(840), float64]) -> (Tensor[(10, 12, 5), int32], Tensor[(12, 5, 14), bool], Tensor[(840), float64], Tensor[(10, 12, 5), int32]) {
  %113 = @func_5287() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %114 = cast(%var_5784, dtype="float64") /* ty=Tensor[(840), float64] */;
  %115 = cast(%var_5784, dtype="float64") /* ty=Tensor[(840), float64] */;
  %116 = cast(%var_5784, dtype="float64") /* ty=Tensor[(840), float64] */;
  %117 = reshape(%114, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %118 = reshape(%115, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %119 = reshape(%116, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %120 = @func_2046(%117, %118, %119) /* ty=(Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) */;
  %121 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %122 = %113.0;
  %123 = %120.0;
  %124 = %121.0;
  (%122, %123, %var_5784, %124)
}

def @func_6074(%var_6070: Tensor[(440), int32], %var_6071: Tensor[(1, 390), int32], %var_6072: Tensor[(2, 720), uint32], %var_6073: Tensor[(462, 1), uint16]) -> (Tensor[(10, 12, 5), int32], Tensor[(390, 3), float32], Tensor[(10, 11, 4), float64], Tensor[(440), int32], Tensor[(13, 10, 3), float32], Tensor[(1, 390), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(12, 12, 10), bool], Tensor[(2, 720), uint32], Tensor[(10, 12, 5), int32], Tensor[(10, 11, 4), float64], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16], Tensor[(10, 12, 5), uint32], Tensor[(6, 15, 13), float64]) {
  @func_6068(%var_6070, %var_6071, %var_6072, %var_6073) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(390, 3), float32], Tensor[(10, 11, 4), float64], Tensor[(440), int32], Tensor[(13, 10, 3), float32], Tensor[(1, 390), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(12, 12, 10), bool], Tensor[(2, 720), uint32], Tensor[(10, 12, 5), int32], Tensor[(10, 11, 4), float64], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16], Tensor[(10, 12, 5), uint32], Tensor[(6, 15, 13), float64]) */
}

def @func_5672() -> Tensor[(10, 12, 5), float32] {
  @func_5670() /* ty=Tensor[(10, 12, 5), float32] */
}

def @func_3971() -> (Tensor[(10, 12, 5), bool],) {
  %130 = fn () -> (Tensor[(10, 12, 5), bool],) {
    %125 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 12, 5), uint64] */, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %126 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 12, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 12, 5), uint64] */, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %129 = less_equal(%127, %128) /* ty=Tensor[(10, 12, 5), bool] */;
    (%129,)
  };
  %130() /* ty=(Tensor[(10, 12, 5), bool],) */
}

def @func_7195() -> Tensor[(10, 12, 5), int32] {
  %131 = @func_6504() /* ty=(Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) */;
  %131.1
}

def @func_6855() -> (Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
  %132 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %133 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %134 = %132.0;
  %135 = %133.0;
  (%134, %135)
}

def @func_1896(%var_1894: Tensor[(13, 10, 3), int32]) -> (Tensor[(13, 10, 3), float32],) {
  @func_1893(%var_1894) /* ty=(Tensor[(13, 10, 3), float32],) */
}

def @func_657(%var_654: Tensor[(6, 11, 7), uint16], %var_655: Tensor[(6, 11, 7), uint16], %var_656: Tensor[(1170, 1), float32]) -> (Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) {
  %145 = fn (%var_631: Tensor[(6, 11, 7), uint16], %var_632: Tensor[(6, 11, 7), uint16], %var_642: Tensor[(1170, 1), float32]) -> (Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) {
    %136 = cast(%var_632, dtype="uint16") /* ty=Tensor[(6, 11, 7), uint16] */;
    %137 = shape_of(%var_631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %138 = cast(%var_631, dtype="uint16") /* ty=Tensor[(6, 11, 7), uint16] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %140 = cast(%var_642, dtype="float32") /* ty=Tensor[(1170, 1), float32] */;
    %141 = reshape(%140, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %142 = @func_325(%141) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
    %143 = bitwise_xor(%138, %139) /* ty=Tensor[(6, 11, 7), uint16] */;
    %144 = %142.2;
    (%143, %144, %var_642)
  };
  %145(%var_654, %var_655, %var_656) /* ty=(Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) */
}

def @func_4811() -> (Tensor[(10, 12, 5), float64],) {
  %150 = fn () -> (Tensor[(10, 12, 5), float64],) {
    %146 = @func_4562() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %147 = %146.0;
    %148 = cast(%147, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
    %149 = sqrt(%148) /* ty=Tensor[(10, 12, 5), float64] */;
    (%149,)
  };
  %150() /* ty=(Tensor[(10, 12, 5), float64],) */
}

def @func_5670() -> Tensor[(10, 12, 5), float32] {
  %151 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  acosh(%153) /* ty=Tensor[(10, 12, 5), float32] */
}

def @func_6634(%var_6623: Tensor[(5, 88), int32], %var_6625: Tensor[(1440), uint32]) -> (Tensor[(10, 12, 5), int32], Tensor[(2, 9, 10), float32], Tensor[(5, 88), int32], Tensor[(390), int32], Tensor[(1440), uint32], Tensor[(462), uint16]) {
  %154 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
  %155 = cast(%var_6623, dtype="int32") /* ty=Tensor[(5, 88), int32] */;
  %156 = cast(meta[relay.Constant][7] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %157 = cast(%var_6625, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %158 = cast(meta[relay.Constant][8] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %159 = reshape(%155, newshape=[440]) /* ty=Tensor[(440), int32] */;
  %160 = reshape(%156, newshape=[1, 390]) /* ty=Tensor[(1, 390), int32] */;
  %161 = reshape(%157, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint32] */;
  %162 = reshape(%158, newshape=[462, 1]) /* ty=Tensor[(462, 1), uint16] */;
  %163 = @func_6068(%159, %160, %161, %162) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(390, 3), float32], Tensor[(10, 11, 4), float64], Tensor[(440), int32], Tensor[(13, 10, 3), float32], Tensor[(1, 390), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(12, 12, 10), bool], Tensor[(2, 720), uint32], Tensor[(10, 12, 5), int32], Tensor[(10, 11, 4), float64], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16], Tensor[(10, 12, 5), uint32], Tensor[(6, 15, 13), float64]) */;
  %164 = %154.0;
  %165 = %163.12;
  (%164, %165, %var_6623, meta[relay.Constant][7] /* ty=Tensor[(390), int32] */, %var_6625, meta[relay.Constant][8] /* ty=Tensor[(462), uint16] */)
}

def @func_6769() -> (Tensor[(4, 13, 16), bool],) {
  @func_6767() /* ty=(Tensor[(4, 13, 16), bool],) */
}

def @func_7342(%var_7340: Tensor[(10, 12, 5), float64]) -> (Tensor[(10, 12, 5), float64],) {
  @func_7339(%var_7340) /* ty=(Tensor[(10, 12, 5), float64],) */
}

def @func_4263(%var_4255: Tensor[(12, 15, 11), bool], %var_4256: Tensor[(12, 15, 11), bool]) -> (Tensor[(12, 15, 11), bool],) {
  %166 = cast(%var_4256, dtype="bool") /* ty=Tensor[(12, 15, 11), bool] */;
  %167 = shape_of(%var_4255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_4255, dtype="bool") /* ty=Tensor[(12, 15, 11), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = logical_or(%168, %169) /* ty=Tensor[(12, 15, 11), bool] */;
  (%170,)
}

def @func_6678() -> (Tensor[(10, 12, 5), uint32],) {
  @func_6676() /* ty=(Tensor[(10, 12, 5), uint32],) */
}

def @func_5287() -> (Tensor[(10, 12, 5), int32],) {
  %171 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
  %172 = %171.0;
  (%172,)
}

def @func_4544(%var_4542: Tensor[(832), uint16], %var_4543: Tensor[(78), float64]) -> (Tensor[(10, 12, 5), int32], Tensor[(4, 13, 16), bool], Tensor[(832), float32], Tensor[(78), float32], Tensor[(78), float64]) {
  %193 = fn (%var_4501: Tensor[(832), uint16], %var_4503: Tensor[(78), float64]) -> (Tensor[(10, 12, 5), int32], Tensor[(4, 13, 16), bool], Tensor[(832), float32], Tensor[(78), float32], Tensor[(78), float64]) {
    %173 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %174 = cast(%var_4501, dtype="uint16") /* ty=Tensor[(832), uint16] */;
    %175 = reshape(%174, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
    %176 = cast(%var_4501, dtype="float32") /* ty=Tensor[(832), float32] */;
    %177 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
    %178 = %177.3;
    %179 = cast(%178, dtype="float64") /* ty=Tensor[(78), float64] */;
    %180 = asin(%179) /* ty=Tensor[(78), float64] */;
    %181 = cast(%var_4503, dtype="bool") /* ty=Tensor[(78), bool] */;
    %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(1), int32] */;
    %183 = cast(%180, dtype="bool") /* ty=Tensor[(78), bool] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), bool] */;
    %185 = less(%183, %184) /* ty=Tensor[(78), bool] */;
    %186 = cast(%185, dtype="float32") /* ty=Tensor[(78), float32] */;
    %187 = cast(%180, dtype="float64") /* ty=Tensor[(78), float64] */;
    %188 = %173.0;
    %189 = @func_146(%175) /* ty=Tensor[(4, 13, 16), bool] */;
    %190 = acosh(%176) /* ty=Tensor[(832), float32] */;
    %191 = log10(%186) /* ty=Tensor[(78), float32] */;
    %192 = atan(%187) /* ty=Tensor[(78), float64] */;
    (%188, %189, %190, %191, %192)
  };
  %193(%var_4542, %var_4543) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(4, 13, 16), bool], Tensor[(832), float32], Tensor[(78), float32], Tensor[(78), float64]) */
}

def @func_4589(%var_4588: Tensor[(390), int32]) -> (Tensor[(10, 12, 5), bool], Tensor[(390), int32], Tensor[(13, 10, 3), float64]) {
  %201 = fn (%var_4581: Tensor[(390), int32]) -> (Tensor[(10, 12, 5), bool], Tensor[(390), int32], Tensor[(13, 10, 3), float64]) {
    %194 = cast(%var_4581, dtype="int32") /* ty=Tensor[(390), int32] */;
    %195 = reshape(%194, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int32] */;
    %196 = @func_1893(%195) /* ty=(Tensor[(13, 10, 3), float32],) */;
    %197 = %196.0;
    %198 = cast(%197, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %199 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
    %200 = atan(%198) /* ty=Tensor[(13, 10, 3), float64] */;
    (%199, %var_4581, %200)
  };
  %201(%var_4588) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(390), int32], Tensor[(13, 10, 3), float64]) */
}

def @func_4563() -> (Tensor[(10, 12, 5), int32],) {
  %204 = fn () -> (Tensor[(10, 12, 5), int32],) {
    %202 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(10, 12, 5), int32],) */
}

def @func_4238() -> (Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) {
  @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */
}

def @func_2143(%var_2141: Tensor[(10, 7, 13), float32], %var_2142: Tensor[(10, 7, 13), float32]) -> (Tensor[(10, 7, 13), float32], Tensor[(10, 7, 13), int64]) {
  %212 = fn (%var_2128: Tensor[(10, 7, 13), float32], %var_2136: Tensor[(10, 7, 13), float32]) -> (Tensor[(10, 7, 13), float32], Tensor[(10, 7, 13), int64]) {
    %205 = cast(%var_2128, dtype="float32") /* ty=Tensor[(10, 7, 13), float32] */;
    %206 = cast(%var_2136, dtype="int64") /* ty=Tensor[(10, 7, 13), int64] */;
    %207 = shape_of(%var_2128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %208 = cast(%var_2128, dtype="int64") /* ty=Tensor[(10, 7, 13), int64] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %210 = acosh(%205) /* ty=Tensor[(10, 7, 13), float32] */;
    %211 = right_shift(%208, %209) /* ty=Tensor[(10, 7, 13), int64] */;
    (%210, %211)
  };
  %212(%var_2141, %var_2142) /* ty=(Tensor[(10, 7, 13), float32], Tensor[(10, 7, 13), int64]) */
}

def @func_4304(%var_4274: Tensor[(832), uint16], %var_4285: Tensor[(110, 4), int32]) -> (Tensor[(10, 12, 5), bool], Tensor[(5, 11, 1), float64], Tensor[(55), float64], Tensor[(54, 2), float32], Tensor[(832), uint16], Tensor[(110, 4), int8]) {
  %213 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
  %214 = cast(meta[relay.Constant][9] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %215 = cast(meta[relay.Constant][10] /* ty=Tensor[(54, 2), float32] */, dtype="float32") /* ty=Tensor[(54, 2), float32] */;
  %216 = cast(%var_4274, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %217 = reshape(%214, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float64] */;
  %218 = reshape(%215, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %219 = reshape(%216, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %220 = @func_1118(%217, %218, %219) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) */;
  %221 = cast(%var_4285, dtype="int32") /* ty=Tensor[(110, 4), int32] */;
  %222 = reshape(%221, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %223 = @func_3891(%222) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %224 = %223.0;
  %225 = cast(%224, dtype="int8") /* ty=Tensor[(10, 11, 4), int8] */;
  %226 = shape_of(%var_4285, dtype="int32") /* ty=Tensor[(2), int32] */;
  %227 = cast(%var_4285, dtype="int8") /* ty=Tensor[(110, 4), int8] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %229 = %213.0;
  %230 = %220.0;
  %231 = logical_xor(%227, %228) /* ty=Tensor[(110, 4), int8] */;
  (%229, %230, meta[relay.Constant][9] /* ty=Tensor[(55), float64] */, meta[relay.Constant][10] /* ty=Tensor[(54, 2), float32] */, %var_4274, %231)
}

def @func_5214() -> (Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) {
  %236 = fn () -> (Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) {
    %232 = @func_4088() /* ty=Tensor[(10, 12, 5), int32] */;
    %233 = cast(%232, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %234 = reshape(%233, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), bool] */;
    %235 = @func_4031(%234) /* ty=Tensor[(10, 12, 5), bool] */;
    (%232, %235)
  };
  %236() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */
}

def @func_5864() -> Tensor[(10, 12, 5), int32] {
  @func_5862() /* ty=Tensor[(10, 12, 5), int32] */
}

def @func_6638(%var_6636: Tensor[(5, 88), int32], %var_6637: Tensor[(1440), uint32]) -> (Tensor[(10, 12, 5), int32], Tensor[(2, 9, 10), float32], Tensor[(5, 88), int32], Tensor[(390), int32], Tensor[(1440), uint32], Tensor[(462), uint16]) {
  @func_6634(%var_6636, %var_6637) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(2, 9, 10), float32], Tensor[(5, 88), int32], Tensor[(390), int32], Tensor[(1440), uint32], Tensor[(462), uint16]) */
}

def @func_7197() -> Tensor[(10, 12, 5), int32] {
  @func_7195() /* ty=Tensor[(10, 12, 5), int32] */
}

def @func_6263(%var_6262: Tensor[(5, 78), int32]) -> (Tensor[(10, 12, 5), int32], Tensor[(13, 10, 3), float64], Tensor[(5, 78), int32]) {
  %242 = fn (%var_6248: Tensor[(5, 78), int32]) -> (Tensor[(10, 12, 5), int32], Tensor[(13, 10, 3), float64], Tensor[(5, 78), int32]) {
    %237 = cast(%var_6248, dtype="int32") /* ty=Tensor[(5, 78), int32] */;
    %238 = reshape(%237, newshape=[390]) /* ty=Tensor[(390), int32] */;
    %239 = @func_4587(%238) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(390), int32], Tensor[(13, 10, 3), float64]) */;
    %240 = @func_5063() /* ty=Tensor[(10, 12, 5), int32] */;
    %241 = %239.2;
    (%240, %241, %var_6248)
  };
  %242(%var_6262) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(13, 10, 3), float64], Tensor[(5, 78), int32]) */
}

def @func_4975(%var_4937: Tensor[(10, 12, 5), int32], %var_4967: Tensor[(1440), uint32]) -> (Tensor[(10, 12, 5), uint8], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32]) {
  %243 = @func_4088() /* ty=Tensor[(10, 12, 5), int32] */;
  %244 = cast(%var_4937, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %248 = divide(%246, %247) /* ty=Tensor[(10, 12, 5), float32] */;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
  %250 = log10(%249) /* ty=Tensor[(10, 12, 5), float64] */;
  %251 = cast(%248, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="uint8") /* ty=Tensor[(10, 12, 5), uint8] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %255 = cast(%var_4967, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %256 = cast(%var_4967, dtype="uint32") /* ty=Tensor[(1440), uint32] */;
  %257 = reshape(%255, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %258 = reshape(%256, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %259 = @func_4441(%257, %258) /* ty=(Tensor[(12, 12, 10), bool],) */;
  %260 = right_shift(%253, %254) /* ty=Tensor[(10, 12, 5), uint8] */;
  %261 = %259.0;
  (%260, %261, %var_4967)
}

def @func_4722() -> (Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) {
  %262 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %263 = %262.0;
  %264 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %265 = cast(%264, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %266 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%263, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %269 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
  %270 = add(%267, %268) /* ty=Tensor[(10, 12, 5), uint32] */;
  %271 = %269.0;
  (%270, %271)
}

def @func_3410(%var_3409: Tensor[(1, 6, 13), float32]) -> Tensor[(14, 6, 13), float32] {
  %274 = fn (%var_3402: Tensor[(1, 6, 13), float32]) -> Tensor[(14, 6, 13), float32] {
    %272 = cast(%var_3402, dtype="float32") /* ty=Tensor[(1, 6, 13), float32] */;
    %273 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 13), float32] */;
    mod(%272, %273) /* ty=Tensor[(14, 6, 13), float32] */
  };
  %274(%var_3409) /* ty=Tensor[(14, 6, 13), float32] */
}

def @func_149(%var_147: Tensor[(4, 13, 16), uint16]) -> Tensor[(4, 13, 16), bool] {
  @func_146(%var_147) /* ty=Tensor[(4, 13, 16), bool] */
}

def @func_5730() -> Tensor[(10, 12, 5), bool] {
  %282 = fn () -> Tensor[(10, 12, 5), bool] {
    %275 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
    %276 = cast(%275, dtype="float64") /* ty=Tensor[(10, 12, 5), float64] */;
    %277 = cos(%276) /* ty=Tensor[(10, 12, 5), float64] */;
    %278 = cast(%275, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%280, %281) /* ty=Tensor[(10, 12, 5), bool] */
  };
  %282() /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_1118(%var_1069: Tensor[(5, 11, 1), float64], %var_1109: Tensor[(108), float32], %var_1111: Tensor[(832), uint16]) -> (Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) {
  %283 = cast(%var_1069, dtype="float64") /* ty=Tensor[(5, 11, 1), float64] */;
  %284 = cast(-0.178906f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %285 = cast(%var_1109, dtype="float32") /* ty=Tensor[(108), float32] */;
  %286 = cast(meta[relay.Constant][12] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %287 = cast(%var_1111, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %288 = reshape(%284, newshape=[]) /* ty=float32 */;
  %289 = reshape(%285, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %290 = reshape(%286, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %291 = reshape(%287, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %292 = @func_494(%288, %289, %290, %291) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %293 = %292.2;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %295 = reshape(%294, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %296 = acosh(%283) /* ty=Tensor[(5, 11, 1), float64] */;
  %297 = @func_310(%295) /* ty=Tensor[(6, 15, 13), float32] */;
  (%296, %293, -0.178906f /* ty=float32 */, %var_1109, meta[relay.Constant][12] /* ty=Tensor[(1170), float32] */, %var_1111, %297)
}

def @func_6740() -> (Tensor[(4, 13, 16), bool],) {
  @func_6738() /* ty=(Tensor[(4, 13, 16), bool],) */
}

def @func_6362(%var_6359: Tensor[(8, 4, 11), int64], %var_6360: Tensor[(77), float32], %var_6361: Tensor[(924), float32]) -> (Tensor[(12, 11, 7), int64], Tensor[(77), float32], Tensor[(924), float32], Tensor[(8, 4, 11), float32]) {
  %322 = fn (%var_6281: Tensor[(8, 4, 11), int64], %var_6346: Tensor[(77), float32], %var_6347: Tensor[(924), float32]) -> (Tensor[(12, 11, 7), int64], Tensor[(77), float32], Tensor[(924), float32], Tensor[(8, 4, 11), float32]) {
    %298 = cast(%var_6346, dtype="float32") /* ty=Tensor[(77), float32] */;
    %299 = cast(%var_6347, dtype="float32") /* ty=Tensor[(924), float32] */;
    %300 = reshape(%298, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), float32] */;
    %301 = reshape(%299, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %302 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
    %303 = shape_of(%var_6281, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%var_6281, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %306 = bitwise_and(%304, %305) /* ty=Tensor[(8, 4, 11), int64] */;
    %307 = cast(%306, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
    %308 = cosh(%307) /* ty=Tensor[(8, 4, 11), float32] */;
    %309 = cast(%306, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
    %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
    %311 = cast(%308, dtype="uint64") /* ty=Tensor[(8, 4, 11), uint64] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %313 = left_shift(%311, %312) /* ty=Tensor[(8, 4, 11), uint64] */;
    %314 = cast(%306, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
    %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(%313, dtype="bool") /* ty=Tensor[(8, 4, 11), bool] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %318 = less(%316, %317) /* ty=Tensor[(8, 4, 11), bool] */;
    %319 = cast(%318, dtype="float32") /* ty=Tensor[(8, 4, 11), float32] */;
    %320 = @func_3910(%300, %301) /* ty=Tensor[(12, 11, 7), int64] */;
    %321 = sqrt(%319) /* ty=Tensor[(8, 4, 11), float32] */;
    (%320, %var_6346, %var_6347, %321)
  };
  %322(%var_6359, %var_6360, %var_6361) /* ty=(Tensor[(12, 11, 7), int64], Tensor[(77), float32], Tensor[(924), float32], Tensor[(8, 4, 11), float32]) */
}

def @func_4441(%var_4432: Tensor[(12, 12, 10), uint32], %var_4433: Tensor[(12, 12, 10), uint32]) -> (Tensor[(12, 12, 10), bool],) {
  %323 = cast(%var_4433, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %324 = shape_of(%var_4432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_4432, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = greater(%325, %326) /* ty=Tensor[(12, 12, 10), bool] */;
  %328 = cast(%var_4433, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = logical_and(%330, %331) /* ty=Tensor[(12, 12, 10), bool] */;
  (%332,)
}

def @func_500(%var_496: float32, %var_497: Tensor[(6, 6, 3), float32], %var_498: Tensor[(390, 3), float32], %var_499: Tensor[(832), uint16]) -> (Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) {
  @func_494(%var_496, %var_497, %var_498, %var_499) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */
}

def @func_4267(%var_4265: Tensor[(12, 15, 11), bool], %var_4266: Tensor[(12, 15, 11), bool]) -> (Tensor[(12, 15, 11), bool],) {
  @func_4263(%var_4265, %var_4266) /* ty=(Tensor[(12, 15, 11), bool],) */
}

def @func_696(%var_694: Tensor[(9, 3, 1), float64]) -> Tensor[(9, 3, ?), bool] {
  @func_693(%var_694) /* ty=Tensor[(9, 3, ?), bool] */
}

def @func_3193(%var_3191: uint16, %var_3192: Tensor[(15, 7, 9), uint16]) -> Tensor[(15, 7, 9), uint16] {
  %335 = fn (%var_3176: uint16, %var_3177: Tensor[(15, 7, 9), uint16]) -> Tensor[(15, 7, 9), uint16] {
    %333 = cast(%var_3176, dtype="uint16") /* ty=uint16 */;
    %334 = cast(%var_3177, dtype="uint16") /* ty=Tensor[(15, 7, 9), uint16] */;
    multiply(%333, %334) /* ty=Tensor[(15, 7, 9), uint16] */
  };
  %335(%var_3191, %var_3192) /* ty=Tensor[(15, 7, 9), uint16] */
}

def @func_6777() -> Tensor[(10, 12, 5), bool] {
  %337 = fn () -> Tensor[(10, 12, 5), bool] {
    %336 = @func_5213() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool]) */;
    %336.1
  };
  %337() /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_2177(%var_2173: Tensor[(3, 5, 2), int8], %var_2174: Tensor[(3, 5, 2), int8], %var_2175: Tensor[(55), float64], %var_2176: Tensor[(4, 208), uint16]) -> (Tensor[(3, 5, 2), int8], Tensor[(390, 3), float32], Tensor[(55), float64], Tensor[(108), float32], Tensor[(4, 208), uint16], Tensor[(2, 9, 10), bool]) {
  %360 = fn (%var_2145: Tensor[(3, 5, 2), int8], %var_2146: Tensor[(3, 5, 2), int8], %var_2154: Tensor[(55), float64], %var_2156: Tensor[(4, 208), uint16]) -> (Tensor[(3, 5, 2), int8], Tensor[(390, 3), float32], Tensor[(55), float64], Tensor[(108), float32], Tensor[(4, 208), uint16], Tensor[(2, 9, 10), bool]) {
    %338 = cast(%var_2146, dtype="int8") /* ty=Tensor[(3, 5, 2), int8] */;
    %339 = shape_of(%var_2145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%var_2145, dtype="int8") /* ty=Tensor[(3, 5, 2), int8] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %342 = cast(%var_2154, dtype="float64") /* ty=Tensor[(55), float64] */;
    %343 = cast(meta[relay.Constant][14] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
    %344 = cast(%var_2156, dtype="uint16") /* ty=Tensor[(4, 208), uint16] */;
    %345 = reshape(%342, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float64] */;
    %346 = reshape(%343, newshape=[108]) /* ty=Tensor[(108), float32] */;
    %347 = reshape(%344, newshape=[832]) /* ty=Tensor[(832), uint16] */;
    %348 = @func_1118(%345, %346, %347) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) */;
    %349 = %348.1;
    %350 = cast(%349, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
    %351 = reshape(%350, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %352 = @func_325(%351) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
    %353 = %352.2;
    %354 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 9, 10), float32] */, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%353, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %358 = bitwise_and(%340, %341) /* ty=Tensor[(3, 5, 2), int8] */;
    %359 = not_equal(%356, %357) /* ty=Tensor[(2, 9, 10), bool] */;
    (%358, %349, %var_2154, meta[relay.Constant][14] /* ty=Tensor[(108), float32] */, %var_2156, %359)
  };
  %360(%var_2173, %var_2174, %var_2175, %var_2176) /* ty=(Tensor[(3, 5, 2), int8], Tensor[(390, 3), float32], Tensor[(55), float64], Tensor[(108), float32], Tensor[(4, 208), uint16], Tensor[(2, 9, 10), bool]) */
}

def @func_4236() -> (Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) {
  %361 = cast(meta[relay.Constant][16] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %362 = reshape(%361, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %363 = cast(meta[relay.Constant][17] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %364 = reshape(%363, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float32] */;
  %365 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %366 = %365.0;
  %367 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 12, 5), int32] */, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="uint32") /* ty=Tensor[(10, 12, 5), uint32] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %371 = @func_146(%362) /* ty=Tensor[(4, 13, 16), bool] */;
  %372 = @func_3408(%364) /* ty=Tensor[(14, 6, 13), float32] */;
  %373 = left_shift(%369, %370) /* ty=Tensor[(10, 12, 5), uint32] */;
  (%371, meta[relay.Constant][16] /* ty=Tensor[(832), uint16] */, %372, meta[relay.Constant][17] /* ty=Tensor[(78), float32] */, %373)
}

def @func_4308(%var_4306: Tensor[(832), uint16], %var_4307: Tensor[(110, 4), int32]) -> (Tensor[(10, 12, 5), bool], Tensor[(5, 11, 1), float64], Tensor[(55), float64], Tensor[(54, 2), float32], Tensor[(832), uint16], Tensor[(110, 4), int8]) {
  @func_4304(%var_4306, %var_4307) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(5, 11, 1), float64], Tensor[(55), float64], Tensor[(54, 2), float32], Tensor[(832), uint16], Tensor[(110, 4), int8]) */
}

def @func_5574(%var_5572: Tensor[(8, 1170), float32]) -> (Tensor[(10, 12, 5), bool], Tensor[(840), float64], Tensor[(8, 1170), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float64], Tensor[(8, 1170), int32]) {
  @func_5571(%var_5572) /* ty=(Tensor[(10, 12, 5), bool], Tensor[(840), float64], Tensor[(8, 1170), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float64], Tensor[(8, 1170), int32]) */
}

def @func_6803(%var_6801: Tensor[(15, 8, 3), uint8], %var_6802: Tensor[(15, 8, 3), uint8]) -> (Tensor[(15, 8, 3), uint8],) {
  @func_6799(%var_6801, %var_6802) /* ty=(Tensor[(15, 8, 3), uint8],) */
}

def @func_2914(%var_2873: Tensor[(12, 6, 8), int16], %var_2898: Tensor[(1170), float32], %var_2902: Tensor[(108), float32], %var_2903: Tensor[(832), uint16]) -> (Tensor[(12, 6, 8), float32], Tensor[(5, 10, 4), float32], Tensor[(1170), float32], float32, Tensor[(108), float32], Tensor[(832), uint16], Tensor[(4, 13, 16), float32]) {
  %374 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 6, 8), int16] */, dtype="int16") /* ty=Tensor[(12, 6, 8), int16] */;
  %375 = shape_of(%var_2873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_2873, dtype="int16") /* ty=Tensor[(12, 6, 8), int16] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %378 = maximum(%376, %377) /* ty=Tensor[(12, 6, 8), int16] */;
  %379 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 6, 8), int16] */, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %383 = cast(%var_2898, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %384 = reshape(%383, newshape=[1, 1170]) /* ty=Tensor[(1, 1170), float32] */;
  %385 = @func_1238(%384) /* ty=(Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) */;
  %386 = cast(-6.28019f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %387 = cast(%var_2902, dtype="float32") /* ty=Tensor[(108), float32] */;
  %388 = cast(%var_2898, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %389 = cast(%var_2903, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %390 = reshape(%386, newshape=[]) /* ty=float32 */;
  %391 = reshape(%387, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %392 = reshape(%388, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %393 = reshape(%389, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %394 = @func_494(%390, %391, %392, %393) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %395 = %394.6;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(4, 13, 16), float32] */;
  %397 = floor_mod(%381, %382) /* ty=Tensor[(12, 6, 8), float32] */;
  %398 = %385.0;
  %399 = asinh(%396) /* ty=Tensor[(4, 13, 16), float32] */;
  (%397, %398, %var_2898, -6.28019f /* ty=float32 */, %var_2902, %var_2903, %399)
}

def @func_4033(%var_4032: Tensor[(10, 12, 5), bool]) -> Tensor[(10, 12, 5), bool] {
  %406 = fn (%var_4025: Tensor[(10, 12, 5), bool]) -> Tensor[(10, 12, 5), bool] {
    %400 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
    %401 = %400.0;
    %402 = cast(%var_4025, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%401, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%404, %405) /* ty=Tensor[(10, 12, 5), bool] */
  };
  %406(%var_4032) /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_4141() -> (Tensor[(10, 12, 5), int32],) {
  %408 = fn () -> (Tensor[(10, 12, 5), int32],) {
    %407 = @func_4088() /* ty=Tensor[(10, 12, 5), int32] */;
    (%407,)
  };
  %408() /* ty=(Tensor[(10, 12, 5), int32],) */
}

def @func_6068(%var_5996: Tensor[(440), int32], %var_6003: Tensor[(1, 390), int32], %var_6032: Tensor[(2, 720), uint32], %var_6044: Tensor[(462, 1), uint16]) -> (Tensor[(10, 12, 5), int32], Tensor[(390, 3), float32], Tensor[(10, 11, 4), float64], Tensor[(440), int32], Tensor[(13, 10, 3), float32], Tensor[(1, 390), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(12, 12, 10), bool], Tensor[(2, 720), uint32], Tensor[(10, 12, 5), int32], Tensor[(10, 11, 4), float64], Tensor[(2, 9, 10), float32], Tensor[(462, 1), uint16], Tensor[(10, 12, 5), uint32], Tensor[(6, 15, 13), float64]) {
  %409 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %410 = cast(%var_5996, dtype="int32") /* ty=Tensor[(440), int32] */;
  %411 = reshape(%410, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %412 = @func_3891(%411) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %413 = cast(%var_6003, dtype="int32") /* ty=Tensor[(1, 390), int32] */;
  %414 = reshape(%413, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int32] */;
  %415 = @func_1893(%414) /* ty=(Tensor[(13, 10, 3), float32],) */;
  %416 = @func_5287() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %417 = cast(%var_6032, dtype="uint32") /* ty=Tensor[(2, 720), uint32] */;
  %418 = cast(%var_6032, dtype="uint32") /* ty=Tensor[(2, 720), uint32] */;
  %419 = reshape(%417, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %420 = reshape(%418, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), uint32] */;
  %421 = @func_4441(%419, %420) /* ty=(Tensor[(12, 12, 10), bool],) */;
  %422 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
  %423 = cast(%var_5996, dtype="int32") /* ty=Tensor[(440), int32] */;
  %424 = reshape(%423, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %425 = @func_3891(%424) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %426 = cast(%var_6044, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %427 = cast(%var_6044, dtype="uint16") /* ty=Tensor[(462, 1), uint16] */;
  %428 = cast(meta[relay.Constant][20] /* ty=Tensor[(390, 3), float32] */, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %429 = reshape(%428, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %430 = @func_310(%429) /* ty=Tensor[(6, 15, 13), float32] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %432 = log10(%431) /* ty=Tensor[(6, 15, 13), float32] */;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %434 = reshape(%426, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %435 = reshape(%427, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), uint16] */;
  %436 = reshape(%433, newshape=[1170, 1]) /* ty=Tensor[(1170, 1), float32] */;
  %437 = @func_653(%434, %435, %436) /* ty=(Tensor[(6, 11, 7), uint16], Tensor[(2, 9, 10), float32], Tensor[(1170, 1), float32]) */;
  %438 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %439 = cast(%432, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %440 = acosh(%439) /* ty=Tensor[(6, 15, 13), float32] */;
  %441 = cast(%430, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %445 = floor_mod(%443, %444) /* ty=Tensor[(6, 15, 13), float64] */;
  %446 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %450 = %409.0;
  %451 = %412.0;
  %452 = %415.0;
  %453 = %416.0;
  %454 = @func_5063() /* ty=Tensor[(10, 12, 5), int32] */;
  %455 = %421.0;
  %456 = %422.0;
  %457 = %425.0;
  %458 = %437.1;
  %459 = %438.0;
  %460 = mod(%448, %449) /* ty=Tensor[(6, 15, 13), float64] */;
  (%450, meta[relay.Constant][20] /* ty=Tensor[(390, 3), float32] */, %451, %var_5996, %452, %var_6003, %453, %454, %455, %var_6032, %456, %457, %458, %var_6044, %459, %460)
}

def @func_6536(%var_6521: Tensor[(10, 12, 5), bool]) -> (Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float32]) {
  %461 = @func_5729() /* ty=Tensor[(10, 12, 5), bool] */;
  %462 = cast(%var_6521, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %466 = cast(%var_6521, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %467 = mod(%464, %465) /* ty=Tensor[(10, 12, 5), float32] */;
  %468 = sinh(%466) /* ty=Tensor[(10, 12, 5), float32] */;
  (%467, %468)
}

def @func_6676() -> (Tensor[(10, 12, 5), uint32],) {
  %469 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
  %470 = %469.4;
  (%470,)
}

def @func_146(%var_141: Tensor[(4, 13, 16), uint16]) -> Tensor[(4, 13, 16), bool] {
  %471 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 13, 16), uint16] */, dtype="bool") /* ty=Tensor[(1, 13, 16), bool] */;
  %472 = cast(%var_141, dtype="bool") /* ty=Tensor[(4, 13, 16), bool] */;
  not_equal(%471, %472) /* ty=Tensor[(4, 13, 16), bool] */
}

def @func_6184() -> (Tensor[(10, 12, 5), float64], Tensor[(10, 12, 5), float64], Tensor[(10, 11, 4), float64], Tensor[(440, 1), int32]) {
  %473 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %474 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %475 = cast(meta[relay.Constant][23] /* ty=Tensor[(440, 1), int32] */, dtype="int32") /* ty=Tensor[(440, 1), int32] */;
  %476 = reshape(%475, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), int32] */;
  %477 = @func_3891(%476) /* ty=(Tensor[(10, 11, 4), float64],) */;
  %478 = %473.0;
  %479 = %474.0;
  %480 = %477.0;
  (%478, %479, %480, meta[relay.Constant][23] /* ty=Tensor[(440, 1), int32] */)
}

def @func_5320() -> Tensor[(4, 13, 16), bool] {
  %481 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %481.1
}

def @func_2587(%var_2585: Tensor[(12, 14, 2), float32], %var_2586: Tensor[(27), float64]) -> (Tensor[(12, 14, 2), float32], Tensor[(12, 14, 2), float64], Tensor[(9, 3, ?), bool], Tensor[(27), float64]) {
  %494 = fn (%var_2550: Tensor[(12, 14, 2), float32], %var_2574: Tensor[(27), float64]) -> (Tensor[(12, 14, 2), float32], Tensor[(12, 14, 2), float64], Tensor[(9, 3, ?), bool], Tensor[(27), float64]) {
    %482 = cast(%var_2550, dtype="float32") /* ty=Tensor[(12, 14, 2), float32] */;
    %483 = cosh(%482) /* ty=Tensor[(12, 14, 2), float32] */;
    %484 = cast(%483, dtype="float32") /* ty=Tensor[(12, 14, 2), float32] */;
    %485 = cast(%var_2550, dtype="float64") /* ty=Tensor[(12, 14, 2), float64] */;
    %486 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
    %487 = cast(%483, dtype="float64") /* ty=Tensor[(12, 14, 2), float64] */;
    %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %489 = cast(%var_2574, dtype="float64") /* ty=Tensor[(27), float64] */;
    %490 = reshape(%489, newshape=[9, 3, 1]) /* ty=Tensor[(9, 3, 1), float64] */;
    %491 = atanh(%484) /* ty=Tensor[(12, 14, 2), float32] */;
    %492 = maximum(%487, %488) /* ty=Tensor[(12, 14, 2), float64] */;
    %493 = @func_693(%490) /* ty=Tensor[(9, 3, ?), bool] */;
    (%491, %492, %493, %var_2574)
  };
  %494(%var_2585, %var_2586) /* ty=(Tensor[(12, 14, 2), float32], Tensor[(12, 14, 2), float64], Tensor[(9, 3, ?), bool], Tensor[(27), float64]) */
}

def @func_5571(%var_5481: Tensor[(8, 1170), float32]) -> (Tensor[(10, 12, 5), bool], Tensor[(840), float64], Tensor[(8, 1170), bool], Tensor[(4, 13, 16), bool], Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float64], Tensor[(8, 1170), int32]) {
  %495 = cast(meta[relay.Constant][24] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %496 = cast(meta[relay.Constant][24] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %497 = cast(meta[relay.Constant][24] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %498 = reshape(%495, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %499 = reshape(%496, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %500 = reshape(%497, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %501 = @func_2046(%498, %499, %500) /* ty=(Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) */;
  %502 = %501.3;
  %503 = cast(%502, dtype="bool") /* ty=Tensor[(1, 1170), bool] */;
  %504 = cast(%var_5481, dtype="bool") /* ty=Tensor[(8, 1170), bool] */;
  %505 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %506 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %508 = @func_4810() /* ty=(Tensor[(10, 12, 5), float64],) */;
  %509 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 1170), float32] */, dtype="int32") /* ty=Tensor[(8, 1170), int32] */;
  %510 = shape_of(%var_5481, dtype="int32") /* ty=Tensor[(2), int32] */;
  %511 = cast(%var_5481, dtype="int32") /* ty=Tensor[(8, 1170), int32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %513 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
  %514 = less_equal(%503, %504) /* ty=Tensor[(8, 1170), bool] */;
  %515 = %505.1;
  %516 = log(%507) /* ty=Tensor[(10, 12, 5), float32] */;
  %517 = %508.0;
  %518 = subtract(%511, %512) /* ty=Tensor[(8, 1170), int32] */;
  (%513, meta[relay.Constant][24] /* ty=Tensor[(840), float64] */, %514, %515, %516, %517, %518)
}

def @func_6767() -> (Tensor[(4, 13, 16), bool],) {
  %519 = @func_5320() /* ty=Tensor[(4, 13, 16), bool] */;
  (%519,)
}

def @func_1893(%var_1874: Tensor[(13, 10, 3), int32]) -> (Tensor[(13, 10, 3), float32],) {
  %520 = cast(%var_1874, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %521 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(13, 10, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 10, 3), int32] */, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = less_equal(%522, %523) /* ty=Tensor[(13, 10, 3), bool] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %526 = sin(%525) /* ty=Tensor[(13, 10, 3), float32] */;
  (%526,)
}

def @func_7071() -> Tensor[(10, 12, 5), float64] {
  %528 = fn () -> Tensor[(10, 12, 5), float64] {
    %527 = @func_6184() /* ty=(Tensor[(10, 12, 5), float64], Tensor[(10, 12, 5), float64], Tensor[(10, 11, 4), float64], Tensor[(440, 1), int32]) */;
    %527.0
  };
  %528() /* ty=Tensor[(10, 12, 5), float64] */
}

def @func_6857() -> (Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
  @func_6855() /* ty=(Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) */
}

def @func_4724() -> (Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) {
  @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */
}

def @func_5812(%var_5810: Tensor[(840), float64]) -> (Tensor[(10, 12, 5), int32], Tensor[(12, 5, 14), bool], Tensor[(840), float64], Tensor[(10, 12, 5), int32]) {
  @func_5809(%var_5810) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(12, 5, 14), bool], Tensor[(840), float64], Tensor[(10, 12, 5), int32]) */
}

def @func_5289() -> (Tensor[(10, 12, 5), int32],) {
  @func_5287() /* ty=(Tensor[(10, 12, 5), int32],) */
}

def @func_3910(%var_3895: Tensor[(1, 11, 7), float32], %var_3902: Tensor[(12, 11, 7), float32]) -> Tensor[(12, 11, 7), int64] {
  %529 = cast(%var_3895, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  %530 = atanh(%529) /* ty=Tensor[(1, 11, 7), float32] */;
  %531 = cast(%530, dtype="int64") /* ty=Tensor[(1, 11, 7), int64] */;
  %532 = cast(%var_3902, dtype="int64") /* ty=Tensor[(12, 11, 7), int64] */;
  minimum(%531, %532) /* ty=Tensor[(12, 11, 7), int64] */
}

def @func_2797(%var_2744: float32, %var_2745: Tensor[(13, 14, 3), float32], %var_2763: Tensor[(13, 14, 3), float64], %var_2780: Tensor[(13, 14, 3), int8], %var_2785: Tensor[(1170), float32], %var_2793: Tensor[(13, 14, 3), float64]) -> (Tensor[(13, 14, 3), uint32], Tensor[(13, 14, 3), uint64], Tensor[(13, 14, 3), bool], Tensor[(1170), float32], Tensor[(1170), float32], Tensor[(13, 14, 3), bool]) {
  %533 = cast(%var_2745, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
  %534 = acosh(%533) /* ty=Tensor[(13, 14, 3), float64] */;
  %535 = cast(%var_2763, dtype="uint32") /* ty=Tensor[(13, 14, 3), uint32] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="uint32") /* ty=Tensor[(13, 14, 3), uint32] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %539 = cast(%534, dtype="uint64") /* ty=Tensor[(13, 14, 3), uint64] */;
  %540 = cast(%var_2744, dtype="uint64") /* ty=uint64 */;
  %541 = cast(%var_2744, dtype="bool") /* ty=bool */;
  %542 = cast(%var_2745, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %543 = equal(%541, %542) /* ty=Tensor[(13, 14, 3), bool] */;
  %544 = cast(%543, dtype="int8") /* ty=Tensor[(13, 14, 3), int8] */;
  %545 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%534, dtype="int8") /* ty=Tensor[(13, 14, 3), int8] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %548 = bitwise_or(%546, %547) /* ty=Tensor[(13, 14, 3), int8] */;
  %549 = cast(%var_2780, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %553 = cast(%var_2785, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %554 = reshape(%553, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %555 = @func_325(%554) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
  %556 = cast(%var_2793, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %557 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%534, dtype="bool") /* ty=Tensor[(13, 14, 3), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = bitwise_xor(%537, %538) /* ty=Tensor[(13, 14, 3), uint32] */;
  %561 = bitwise_and(%539, %540) /* ty=Tensor[(13, 14, 3), uint64] */;
  %562 = greater_equal(%551, %552) /* ty=Tensor[(13, 14, 3), bool] */;
  %563 = %555.1;
  %564 = greater(%558, %559) /* ty=Tensor[(13, 14, 3), bool] */;
  (%560, %561, %562, %563, %var_2785, %564)
}

def @func_3914(%var_3912: Tensor[(1, 11, 7), float32], %var_3913: Tensor[(12, 11, 7), float32]) -> Tensor[(12, 11, 7), int64] {
  @func_3910(%var_3912, %var_3913) /* ty=Tensor[(12, 11, 7), int64] */
}

def @func_7145() -> (Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
  %571 = fn () -> (Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
    %565 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %566 = @func_4562() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %567 = %565.0;
    %568 = @func_5862() /* ty=Tensor[(10, 12, 5), int32] */;
    %569 = @func_5729() /* ty=Tensor[(10, 12, 5), bool] */;
    %570 = %566.0;
    (%567, %568, %569, %570)
  };
  %571() /* ty=(Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), int32], Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) */
}

def @func_6738() -> (Tensor[(4, 13, 16), bool],) {
  %572 = @func_4722() /* ty=(Tensor[(10, 12, 5), uint32], Tensor[(4, 13, 16), bool]) */;
  %573 = %572.1;
  (%573,)
}

def @func_2051(%var_2048: Tensor[(12, 5, 14), float64], %var_2049: Tensor[(12, 5, 14), float64], %var_2050: Tensor[(12, 5, 14), float64]) -> (Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) {
  @func_2046(%var_2048, %var_2049, %var_2050) /* ty=(Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) */
}

def @func_4408() -> Tensor[(10, 12, 5), bool] {
  %575 = fn () -> Tensor[(10, 12, 5), bool] {
    %574 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
    %574.0
  };
  %575() /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_2920(%var_2916: Tensor[(12, 6, 8), int16], %var_2917: Tensor[(1170), float32], %var_2918: Tensor[(108), float32], %var_2919: Tensor[(832), uint16]) -> (Tensor[(12, 6, 8), float32], Tensor[(5, 10, 4), float32], Tensor[(1170), float32], float32, Tensor[(108), float32], Tensor[(832), uint16], Tensor[(4, 13, 16), float32]) {
  @func_2914(%var_2916, %var_2917, %var_2918, %var_2919) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(5, 10, 4), float32], Tensor[(1170), float32], float32, Tensor[(108), float32], Tensor[(832), uint16], Tensor[(4, 13, 16), float32]) */
}

def @func_4445(%var_4443: Tensor[(12, 12, 10), uint32], %var_4444: Tensor[(12, 12, 10), uint32]) -> (Tensor[(12, 12, 10), bool],) {
  @func_4441(%var_4443, %var_4444) /* ty=(Tensor[(12, 12, 10), bool],) */
}

def @func_494(%var_397: float32, %var_398: Tensor[(6, 6, 3), float32], %var_410: Tensor[(390, 3), float32], %var_436: Tensor[(832), uint16]) -> (Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) {
  %576 = cast(%var_397, dtype="float32") /* ty=float32 */;
  %577 = cast(%var_398, dtype="float32") /* ty=Tensor[(6, 6, 3), float32] */;
  %578 = cast(%var_410, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %579 = reshape(%578, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %580 = @func_310(%579) /* ty=Tensor[(6, 15, 13), float32] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %582 = reshape(%581, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %583 = @func_310(%582) /* ty=Tensor[(6, 15, 13), float32] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(6, 15, 13), float32] */;
  %585 = reshape(%584, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %586 = @func_325(%585) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */;
  %587 = %586.2;
  %588 = cast(%587, dtype="bool") /* ty=Tensor[(2, 9, 10), bool] */;
  %589 = cast(%var_397, dtype="bool") /* ty=bool */;
  %590 = cast(%var_436, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %591 = reshape(%590, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
  %592 = @func_146(%591) /* ty=Tensor[(4, 13, 16), bool] */;
  %593 = cast(%var_397, dtype="uint32") /* ty=uint32 */;
  %594 = cast(%592, dtype="uint32") /* ty=Tensor[(4, 13, 16), uint32] */;
  %595 = minimum(%576, %577) /* ty=Tensor[(6, 6, 3), float32] */;
  %596 = less(%588, %589) /* ty=Tensor[(2, 9, 10), bool] */;
  %597 = maximum(%593, %594) /* ty=Tensor[(4, 13, 16), uint32] */;
  (%595, %580, %var_410, %583, %var_436, %596, %597)
}

def @func_6128(%var_6089: Tensor[(7, 14, 15), float32], %var_6099: Tensor[(18, 6), float32], %var_6100: Tensor[(1170), float32], %var_6101: Tensor[(1, 832), uint16]) -> (Tensor[(6, 6, 3), float32], float32, Tensor[(18, 6), float32], Tensor[(1170), float32], Tensor[(1, 832), uint16], Tensor[(7, 14, 15), float64]) {
  %598 = cast(9.83869f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %599 = cast(%var_6099, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
  %600 = cast(%var_6100, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %601 = cast(%var_6101, dtype="uint16") /* ty=Tensor[(1, 832), uint16] */;
  %602 = reshape(%598, newshape=[]) /* ty=float32 */;
  %603 = reshape(%599, newshape=[6, 6, 3]) /* ty=Tensor[(6, 6, 3), float32] */;
  %604 = reshape(%600, newshape=[390, 3]) /* ty=Tensor[(390, 3), float32] */;
  %605 = reshape(%601, newshape=[832]) /* ty=Tensor[(832), uint16] */;
  %606 = @func_494(%602, %603, %604, %605) /* ty=(Tensor[(6, 6, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(390, 3), float32], Tensor[(6, 15, 13), float32], Tensor[(832), uint16], Tensor[(2, 9, 10), bool], Tensor[(4, 13, 16), uint32]) */;
  %607 = cast(%var_6089, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
  %608 = log10(%607) /* ty=Tensor[(7, 14, 15), float32] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(7, 14, 15), float64] */;
  %610 = %606.0;
  %611 = rsqrt(%609) /* ty=Tensor[(7, 14, 15), float64] */;
  (%610, 9.83869f /* ty=float32 */, %var_6099, %var_6100, %var_6101, %611)
}

def @func_5948(%var_5947: Tensor[(546), float32]) -> (Tensor[(10, 12, 5), int32], Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(10, 12, 5), float32], Tensor[(13, 14, 3), bool], float32, Tensor[(546), float32], Tensor[(832), float64], Tensor[(832), uint16]) {
  %648 = fn (%var_5912: Tensor[(546), float32]) -> (Tensor[(10, 12, 5), int32], Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(10, 12, 5), float32], Tensor[(13, 14, 3), bool], float32, Tensor[(546), float32], Tensor[(832), float64], Tensor[(832), uint16]) {
    %612 = cast(meta[relay.Constant][27] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %613 = reshape(%612, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
    %614 = cast(-2.65785f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %615 = cast(%var_5912, dtype="float32") /* ty=Tensor[(546), float32] */;
    %616 = cast(%var_5912, dtype="float64") /* ty=Tensor[(546), float64] */;
    %617 = cast(%var_5912, dtype="int8") /* ty=Tensor[(546), int8] */;
    %618 = cast(meta[relay.Constant][27] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %619 = cast(%var_5912, dtype="float64") /* ty=Tensor[(546), float64] */;
    %620 = reshape(%614, newshape=[]) /* ty=float32 */;
    %621 = reshape(%615, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float32] */;
    %622 = reshape(%616, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float64] */;
    %623 = reshape(%617, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), int8] */;
    %624 = reshape(%618, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %625 = reshape(%619, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float64] */;
    %626 = @func_2797(%620, %621, %622, %623, %624, %625) /* ty=(Tensor[(13, 14, 3), uint32], Tensor[(13, 14, 3), uint64], Tensor[(13, 14, 3), bool], Tensor[(1170), float32], Tensor[(1170), float32], Tensor[(13, 14, 3), bool]) */;
    %627 = cast(meta[relay.Constant][28] /* ty=Tensor[(832), uint16] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %628 = cos(%627) /* ty=Tensor[(832), float64] */;
    %629 = cast(meta[relay.Constant][28] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
    %630 = reshape(%629, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint16] */;
    %631 = @func_146(%630) /* ty=Tensor[(4, 13, 16), bool] */;
    %632 = cast(%631, dtype="int64") /* ty=Tensor[(4, 13, 16), int64] */;
    %633 = shape_of(%628, dtype="int32") /* ty=Tensor[(1), int32] */;
    %634 = cast(%628, dtype="int64") /* ty=Tensor[(832), int64] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?), int64] */;
    %636 = bitwise_xor(%634, %635) /* ty=Tensor[(832), int64] */;
    %637 = cast(meta[relay.Constant][29] /* ty=Tensor[(832), int64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(1), int32] */;
    %639 = cast(%636, dtype="float64") /* ty=Tensor[(832), float64] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?), float64] */;
    %641 = @func_4236() /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 6, 13), float32], Tensor[(78), float32], Tensor[(10, 12, 5), uint32]) */;
    %642 = @func_5862() /* ty=Tensor[(10, 12, 5), int32] */;
    %643 = @func_310(%613) /* ty=Tensor[(6, 15, 13), float32] */;
    %644 = @func_5670() /* ty=Tensor[(10, 12, 5), float32] */;
    %645 = %626.2;
    %646 = multiply(%639, %640) /* ty=Tensor[(832), float64] */;
    %647 = %641.1;
    (%642, %643, meta[relay.Constant][27] /* ty=Tensor[(1170), float32] */, %644, %645, -2.65785f /* ty=float32 */, %var_5912, %646, %647)
  };
  %648(%var_5947) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(10, 12, 5), float32], Tensor[(13, 14, 3), bool], float32, Tensor[(546), float32], Tensor[(832), float64], Tensor[(832), uint16]) */
}

def @func_6993(%var_6992: Tensor[(108, 1), float32]) -> (Tensor[(12, 14, 2), float64], Tensor[(4, 84), float32], Tensor[(27, 1), float64], Tensor[(108), float32], Tensor[(576, 1), int16], Tensor[(1170), float32], Tensor[(108, 832), float32], Tensor[(13, 10, 3), float32], Tensor[(390), int32]) {
  %674 = fn (%var_6969: Tensor[(108, 1), float32]) -> (Tensor[(12, 14, 2), float64], Tensor[(4, 84), float32], Tensor[(27, 1), float64], Tensor[(108), float32], Tensor[(576, 1), int16], Tensor[(1170), float32], Tensor[(108, 832), float32], Tensor[(13, 10, 3), float32], Tensor[(390), int32]) {
    %649 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 84), float32] */, dtype="float32") /* ty=Tensor[(4, 84), float32] */;
    %650 = cast(meta[relay.Constant][31] /* ty=Tensor[(27, 1), float64] */, dtype="float64") /* ty=Tensor[(27, 1), float64] */;
    %651 = reshape(%649, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), float32] */;
    %652 = reshape(%650, newshape=[27]) /* ty=Tensor[(27), float64] */;
    %653 = @func_2584(%651, %652) /* ty=(Tensor[(12, 14, 2), float32], Tensor[(12, 14, 2), float64], Tensor[(9, 3, ?), bool], Tensor[(27), float64]) */;
    %654 = cast(meta[relay.Constant][32] /* ty=Tensor[(576, 1), int16] */, dtype="int16") /* ty=Tensor[(576, 1), int16] */;
    %655 = cast(meta[relay.Constant][33] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %656 = cast(%var_6969, dtype="float32") /* ty=Tensor[(108, 1), float32] */;
    %657 = @func_6447() /* ty=(Tensor[(832), uint16], Tensor[(440), int32], Tensor[(4, 13, 16), float32]) */;
    %658 = %657.0;
    %659 = cast(%658, dtype="uint16") /* ty=Tensor[(832), uint16] */;
    %660 = reshape(%654, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int16] */;
    %661 = reshape(%655, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %662 = reshape(%656, newshape=[108]) /* ty=Tensor[(108), float32] */;
    %663 = reshape(%659, newshape=[832]) /* ty=Tensor[(832), uint16] */;
    %664 = @func_2914(%660, %661, %662, %663) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(5, 10, 4), float32], Tensor[(1170), float32], float32, Tensor[(108), float32], Tensor[(832), uint16], Tensor[(4, 13, 16), float32]) */;
    %665 = cast(%658, dtype="float32") /* ty=Tensor[(832), float32] */;
    %666 = cast(%var_6969, dtype="float32") /* ty=Tensor[(108, 1), float32] */;
    %667 = cast(meta[relay.Constant][34] /* ty=Tensor[(390), int32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
    %668 = reshape(%667, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int32] */;
    %669 = @func_1893(%668) /* ty=(Tensor[(13, 10, 3), float32],) */;
    %670 = %653.1;
    %671 = %664.4;
    %672 = floor_mod(%665, %666) /* ty=Tensor[(108, 832), float32] */;
    %673 = %669.0;
    (%670, meta[relay.Constant][30] /* ty=Tensor[(4, 84), float32] */, meta[relay.Constant][31] /* ty=Tensor[(27, 1), float64] */, %671, meta[relay.Constant][32] /* ty=Tensor[(576, 1), int16] */, meta[relay.Constant][33] /* ty=Tensor[(1170), float32] */, %672, %673, meta[relay.Constant][34] /* ty=Tensor[(390), int32] */)
  };
  %674(%var_6992) /* ty=(Tensor[(12, 14, 2), float64], Tensor[(4, 84), float32], Tensor[(27, 1), float64], Tensor[(108), float32], Tensor[(576, 1), int16], Tensor[(1170), float32], Tensor[(108, 832), float32], Tensor[(13, 10, 3), float32], Tensor[(390), int32]) */
}

def @main() -> (Tensor[(3, 11, 8), float32],) {
  %675 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %676 = asinh(%675) /* ty=Tensor[(3, 11, 8), float32] */;
  (%676,)
}

def @func_4089() -> Tensor[(10, 12, 5), int32] {
  %685 = fn () -> Tensor[(10, 12, 5), int32] {
    %677 = @func_3970() /* ty=(Tensor[(10, 12, 5), bool],) */;
    %678 = %677.0;
    %679 = cast(%678, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
    %680 = atanh(%679) /* ty=Tensor[(10, 12, 5), float32] */;
    %681 = cast(%680, dtype="int32") /* ty=Tensor[(10, 12, 5), int32] */;
    %682 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(%678, dtype="int32") /* ty=Tensor[(10, 12, 5), int32] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    minimum(%683, %684) /* ty=Tensor[(10, 12, 5), int32] */
  };
  %685() /* ty=Tensor[(10, 12, 5), int32] */
}

def @func_6234() -> Tensor[(4, 13, 16), bool] {
  %686 = fn () -> Tensor[(4, 13, 16), bool] {
    @func_5320() /* ty=Tensor[(4, 13, 16), bool] */
  };
  %686() /* ty=Tensor[(4, 13, 16), bool] */
}

def @func_2115(%var_2114: Tensor[(7, 1), uint8]) -> Tensor[(7, 1), uint8] {
  %689 = fn (%var_2109: Tensor[(7, 1), uint8]) -> Tensor[(7, 1), uint8] {
    %687 = cast(meta[relay.Constant][36] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %688 = cast(%var_2109, dtype="uint8") /* ty=Tensor[(7, 1), uint8] */;
    left_shift(%687, %688) /* ty=Tensor[(7, 1), uint8] */
  };
  %689(%var_2114) /* ty=Tensor[(7, 1), uint8] */
}

def @func_3893(%var_3892: Tensor[(10, 11, 4), int32]) -> (Tensor[(10, 11, 4), float64],) {
  %697 = fn (%var_3880: Tensor[(10, 11, 4), int32]) -> (Tensor[(10, 11, 4), float64],) {
    %690 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 11, 4), int32] */, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
    %691 = shape_of(%var_3880, dtype="int32") /* ty=Tensor[(3), int32] */;
    %692 = cast(%var_3880, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %694 = not_equal(%692, %693) /* ty=Tensor[(10, 11, 4), bool] */;
    %695 = cast(%694, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
    %696 = log(%695) /* ty=Tensor[(10, 11, 4), float64] */;
    (%696,)
  };
  %697(%var_3892) /* ty=(Tensor[(10, 11, 4), float64],) */
}

def @func_325(%var_318: Tensor[(1170), float32]) -> (Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) {
  %698 = cast(%var_318, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %699 = reshape(%698, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
  %700 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %701 = sqrt(%700) /* ty=Tensor[(2, 9, 10), float64] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  %703 = @func_310(%699) /* ty=Tensor[(6, 15, 13), float32] */;
  %704 = log(%702) /* ty=Tensor[(2, 9, 10), float32] */;
  (%703, %var_318, %704)
}

def @func_4979(%var_4977: Tensor[(10, 12, 5), int32], %var_4978: Tensor[(1440), uint32]) -> (Tensor[(10, 12, 5), uint8], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32]) {
  @func_4975(%var_4977, %var_4978) /* ty=(Tensor[(10, 12, 5), uint8], Tensor[(12, 12, 10), bool], Tensor[(1440), uint32]) */
}

def @func_1240(%var_1239: Tensor[(1, 1170), float32]) -> (Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) {
  %710 = fn (%var_1233: Tensor[(1, 1170), float32]) -> (Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) {
    %705 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 4), float32] */;
    %706 = cast(%var_1233, dtype="float32") /* ty=Tensor[(1, 1170), float32] */;
    %707 = reshape(%706, newshape=[6, 15, 13]) /* ty=Tensor[(6, 15, 13), float32] */;
    %708 = atanh(%705) /* ty=Tensor[(5, 10, 4), float32] */;
    %709 = @func_310(%707) /* ty=Tensor[(6, 15, 13), float32] */;
    (%708, %709, %var_1233)
  };
  %710(%var_1239) /* ty=(Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) */
}

def @func_6186() -> (Tensor[(10, 12, 5), float64], Tensor[(10, 12, 5), float64], Tensor[(10, 11, 4), float64], Tensor[(440, 1), int32]) {
  @func_6184() /* ty=(Tensor[(10, 12, 5), float64], Tensor[(10, 12, 5), float64], Tensor[(10, 11, 4), float64], Tensor[(440, 1), int32]) */
}

def @func_6539(%var_6537: Tensor[(10, 12, 5), bool]) -> (Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float32]) {
  @func_6536(%var_6537) /* ty=(Tensor[(10, 12, 5), float32], Tensor[(10, 12, 5), float32]) */
}

def @func_1123(%var_1120: Tensor[(5, 11, 1), float64], %var_1121: Tensor[(108), float32], %var_1122: Tensor[(832), uint16]) -> (Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) {
  @func_1118(%var_1120, %var_1121, %var_1122) /* ty=(Tensor[(5, 11, 1), float64], Tensor[(390, 3), float32], float32, Tensor[(108), float32], Tensor[(1170), float32], Tensor[(832), uint16], Tensor[(6, 15, 13), float32]) */
}

def @func_693(%var_669: Tensor[(9, 3, 1), float64]) -> Tensor[(9, 3, ?), bool] {
  %711 = cast(%var_669, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %712 = rsqrt(%711) /* ty=Tensor[(9, 3, 1), float64] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(9, 3, 1), float64] */;
  %714 = cosh(%713) /* ty=Tensor[(9, 3, 1), float64] */;
  %715 = cast(%712, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(9, 3, 1), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%717, %718) /* ty=Tensor[(9, 3, ?), bool] */
}

def @func_6920(%var_6919: Tensor[(4, 16, 7), float32]) -> Tensor[(4, 16, 7), float32] {
  %720 = fn (%var_6915: Tensor[(4, 16, 7), float32]) -> Tensor[(4, 16, 7), float32] {
    %719 = cast(%var_6915, dtype="float32") /* ty=Tensor[(4, 16, 7), float32] */;
    tan(%719) /* ty=Tensor[(4, 16, 7), float32] */
  };
  %720(%var_6919) /* ty=Tensor[(4, 16, 7), float32] */
}

def @func_2329(%var_2323: Tensor[(14, 15, 11), uint8], %var_2324: Tensor[(14, 15, 11), uint8], %var_2325: Tensor[(832), uint16], %var_2326: Tensor[(14, 15, 11), bool], %var_2327: Tensor[(5, 6), int8], %var_2328: Tensor[(55), float64]) -> (Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 15, 11), uint32], Tensor[(2, 9, 10), bool], Tensor[(5, 6), int8], Tensor[(55), float64]) {
  @func_2321(%var_2323, %var_2324, %var_2325, %var_2326, %var_2327, %var_2328) /* ty=(Tensor[(4, 13, 16), bool], Tensor[(832), uint16], Tensor[(14, 15, 11), uint32], Tensor[(2, 9, 10), bool], Tensor[(5, 6), int8], Tensor[(55), float64]) */
}

def @func_7299(%var_7298: Tensor[(7), uint8]) -> (Tensor[(10, 12, 5), int32], Tensor[(7, 1), uint8], Tensor[(7), uint8], Tensor[(10, 12, 5), bool]) {
  %727 = fn (%var_7286: Tensor[(7), uint8]) -> (Tensor[(10, 12, 5), int32], Tensor[(7, 1), uint8], Tensor[(7), uint8], Tensor[(10, 12, 5), bool]) {
    %721 = cast(%var_7286, dtype="uint8") /* ty=Tensor[(7), uint8] */;
    %722 = reshape(%721, newshape=[7, 1]) /* ty=Tensor[(7, 1), uint8] */;
    %723 = @func_6855() /* ty=(Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) */;
    %724 = @func_5063() /* ty=Tensor[(10, 12, 5), int32] */;
    %725 = @func_2113(%722) /* ty=Tensor[(7, 1), uint8] */;
    %726 = %723.0;
    (%724, %725, %var_7286, %726)
  };
  %727(%var_7298) /* ty=(Tensor[(10, 12, 5), int32], Tensor[(7, 1), uint8], Tensor[(7), uint8], Tensor[(10, 12, 5), bool]) */
}

def @func_6505() -> (Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
  %731 = fn () -> (Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) {
    %728 = @func_4562() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %729 = @func_4407() /* ty=Tensor[(10, 12, 5), bool] */;
    %730 = %728.0;
    (%729, %730)
  };
  %731() /* ty=(Tensor[(10, 12, 5), bool], Tensor[(10, 12, 5), int32]) */
}

def @func_6773() -> Tensor[(10, 12, 5), int32] {
  %733 = fn () -> Tensor[(10, 12, 5), int32] {
    %732 = @func_4140() /* ty=(Tensor[(10, 12, 5), int32],) */;
    %732.0
  };
  %733() /* ty=Tensor[(10, 12, 5), int32] */
}

def @func_2046(%var_2012: Tensor[(12, 5, 14), float64], %var_2013: Tensor[(12, 5, 14), float64], %var_2017: Tensor[(12, 5, 14), float64]) -> (Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), bool], Tensor[(12, 5, 14), uint8], Tensor[(1, 1170), float32], Tensor[(1170), float32]) {
  %734 = cast(%var_2013, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %735 = shape_of(%var_2012, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_2012, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %738 = cast(%var_2017, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %739 = shape_of(%var_2013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%var_2013, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 5, 14), float64] */, dtype="uint8") /* ty=Tensor[(12, 5, 14), uint8] */;
  %743 = shape_of(%var_2013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_2013, dtype="uint8") /* ty=Tensor[(12, 5, 14), uint8] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %746 = cast(meta[relay.Constant][41] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %747 = reshape(%746, newshape=[1, 1170]) /* ty=Tensor[(1, 1170), float32] */;
  %748 = @func_1238(%747) /* ty=(Tensor[(5, 10, 4), float32], Tensor[(6, 15, 13), float32], Tensor[(1, 1170), float32]) */;
  %749 = not_equal(%736, %737) /* ty=Tensor[(12, 5, 14), bool] */;
  %750 = less_equal(%740, %741) /* ty=Tensor[(12, 5, 14), bool] */;
  %751 = minimum(%744, %745) /* ty=Tensor[(12, 5, 14), uint8] */;
  %752 = %748.2;
  (%749, %750, %751, %752, meta[relay.Constant][41] /* ty=Tensor[(1170), float32] */)
}

def @func_616(%var_615: Tensor[(13, 8, 1), float64]) -> Tensor[(13, 8, 1), float64] {
  %754 = fn (%var_605: Tensor[(13, 8, 1), float64]) -> Tensor[(13, 8, 1), float64] {
    %753 = cast(%var_605, dtype="float64") /* ty=Tensor[(13, 8, 1), float64] */;
    asin(%753) /* ty=Tensor[(13, 8, 1), float64] */
  };
  %754(%var_615) /* ty=Tensor[(13, 8, 1), float64] */
}

def @func_328(%var_326: Tensor[(1170), float32]) -> (Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) {
  @func_325(%var_326) /* ty=(Tensor[(6, 15, 13), float32], Tensor[(1170), float32], Tensor[(2, 9, 10), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen172/build/output.py:1680: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen172/build/output.py:1685: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen172/build/output.py:1716: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen172/build/output.py:1721: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen172/build/output.py:1726: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen172/build/output.py:1731: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %0 = (%l, %r);
  match (%0) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      %1 = match (%l) {
        Raw(%x: T) => {
          %x
        },
        One(%x1: fn () -> T) => {
          %x1() /* ty=T */
        },
        Zero(%x2: fn () -> T) => {
          %x2() /* ty=T */
        },
      };
      %2 = match (%r) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %3 = %multiply(%1, %2) /* ty=T */;
      Raw(%3) /* ty=GradCell[T] */
    },
  }
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %4 = (%l1, %r1);
  match (%4) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      %5 = match (%l1) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %6 = match (%r1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %7 = %add(%5, %6) /* ty=T */;
      Raw(%7) /* ty=GradCell[T] */
    },
  }
}

def @main() -> ((Tensor[(3, 11, 8), float32],), ()) {
  %8 = (meta[relay.Constant][0] /* ty=Tensor[(3, 11, 8), float32] */,);
  %9 = ();
  (%8, %9)
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x12: T) => {
      %x12
    },
    One(%x13: fn () -> T) => {
      %x13() /* ty=T */
    },
    Zero(%x14: fn () -> T) => {
      %x14() /* ty=T */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
