==========mod==========
#[version = "0.0.5"]
def @func_757(%var_743: int64, %var_744: Tensor[(14, 8, 10), int64]) -> (Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) {
  %0 = cast(%var_743, dtype="bool") /* ty=bool */;
  %1 = cast(%var_744, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %3 = reshape(%2, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %5 = reshape(%4, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %6 = equal(%0, %1) /* ty=Tensor[(14, 8, 10), bool] */;
  %7 = @func_270(%3) /* ty=Tensor[(9, ?, 9), float64] */;
  %8 = @func_270(%5) /* ty=Tensor[(9, ?, 9), float64] */;
  (%6, %7, meta[relay.Constant][0] /* ty=Tensor[(81), float64] */, %8)
}

def @func_8759(%var_8741: Tensor[(81), int8]) -> (Tensor[(81), uint64], Tensor[(234), float64]) {
  %9 = @func_6439() /* ty=Tensor[(81), int8] */;
  %10 = cast(%var_8741, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(1), int32] */;
  %12 = cast(%9, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %14 = @func_7941() /* ty=(Tensor[(234), float64],) */;
  %15 = bitwise_or(%12, %13) /* ty=Tensor[(81), uint64] */;
  %16 = %14.0;
  (%15, %16)
}

def @func_2387() -> (Tensor[(234), float64],) {
  %17 = @func_2359() /* ty=(Tensor[(234), float64],) */;
  %18 = %17.0;
  (%18,)
}

def @func_2359() -> (Tensor[(234), float64],) {
  %19 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %20 = %19.2;
  (%20,)
}

def @func_7247() -> (Tensor[(1120), int64], Tensor[(?, ?, 13), bool]) {
  %21 = @func_5503() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) */;
  %22 = %21.0;
  %23 = @func_4955() /* ty=Tensor[(?, ?, 13), bool] */;
  (%22, %23)
}

def @func_5897() -> (Tensor[(1, 1, 13), float64],) {
  %24 = @func_2238() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %25 = %24.0;
  (%25,)
}

def @func_8547(%var_8541: Tensor[(540), float64]) -> (Tensor[(13, 5), uint8], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64]) {
  %26 = @func_8312() /* ty=(Tensor[(3, 27), uint64], Tensor[(13, 5, ?), bool], Tensor[(13, 5), uint8]) */;
  %27 = cast(%var_8541, dtype="float64") /* ty=Tensor[(540), float64] */;
  %28 = reshape(%27, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %29 = @func_6640(%28) /* ty=(Tensor[(6, 15, 6), float64],) */;
  %30 = %26.2;
  %31 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
  %32 = %29.0;
  (%30, %31, %32, %var_8541)
}

def @func_11027() -> Tensor[(5, 5, 9), float64] {
  %33 = @func_9521() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(5, 5, 9), float64]) */;
  %33.2
}

def @func_8192() -> (Tensor[(7, 6, 14), float64], Tensor[(1, 1, 13), float64]) {
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 14), float64] */;
  %35 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %36 = atan(%34) /* ty=Tensor[(7, 6, 14), float64] */;
  %37 = %35.0;
  (%36, %37)
}

def @func_6791() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %38 = @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %39 = @func_6008() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %40 = %38.0;
  %41 = %39.1;
  (%40, %41)
}

def @func_9287() -> Tensor[(1, 1, 13), float32] {
  %42 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %42.0
}

def @func_4789() -> (Tensor[(?, ?, 13), bool],) {
  %43 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %44 = %43.1;
  %45 = @func_1842() /* ty=Tensor[(1, 1, 13), float64] */;
  %46 = cast(%45, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %47 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%44, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = logical_or(%48, %49) /* ty=Tensor[(?, ?, 13), bool] */;
  (%50,)
}

def @func_2238() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %51 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %52 = @func_2115() /* ty=Tensor[(1, 1, 13), float64] */;
  %53 = %51.1;
  (%52, %53)
}

def @func_8494() -> Tensor[(1, 1, 13), float64] {
  %54 = @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %54.0
}

def @func_3395() -> (Tensor[(81), float64],) {
  %55 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %56 = %55.0;
  (%56,)
}

def @func_10408(%var_10380: Tensor[(8, 15, 13), float64]) -> (Tensor[(8, 15, 13), bool], Tensor[(1, 1, 13), float64]) {
  %57 = @func_5852() /* ty=Tensor[(1, 1, 13), float64] */;
  %58 = cast(%57, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %59 = cast(%var_10380, dtype="bool") /* ty=Tensor[(8, 15, 13), bool] */;
  %60 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %61 = logical_or(%58, %59) /* ty=Tensor[(8, 15, 13), bool] */;
  %62 = %60.1;
  (%61, %62)
}

def @func_8249(%var_8237: Tensor[(540), float64]) -> (Tensor[(8, 10, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64], Tensor[(1, 1, 13), float64]) {
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
  %64 = cast(%var_8237, dtype="float64") /* ty=Tensor[(540), float64] */;
  %65 = reshape(%64, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %66 = @func_6640(%65) /* ty=(Tensor[(6, 15, 6), float64],) */;
  %67 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %68 = log(%63) /* ty=Tensor[(8, 10, 13), float64] */;
  %69 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
  %70 = %66.0;
  %71 = %67.0;
  (%68, %69, %70, %var_8237, %71)
}

def @func_2304() -> Tensor[(1, 1, 13), float32] {
  %72 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %72.0
}

def @func_7682(%var_7677: Tensor[(1120), int64]) -> (Tensor[(?, ?, 13), bool], float32, Tensor[(1120), int64]) {
  %73 = @func_4789() /* ty=(Tensor[(?, ?, 13), bool],) */;
  %74 = cast(%var_7677, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %75 = reshape(%74, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
  %76 = @func_5804(%75) /* ty=(Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) */;
  %77 = %73.0;
  %78 = %76.4;
  (%77, %78, %var_7677)
}

def @func_1433() -> Tensor[(1, 1, 13), float64] {
  %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  atanh(%79) /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_1842() -> Tensor[(1, 1, 13), float64] {
  %80 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %80.0
}

def @func_1917() -> Tensor[(1, 1, 13), float64] {
  @func_1828() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5804(%var_5768: Tensor[(56, 20), int64]) -> (Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) {
  %81 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %82 = cast(%var_5768, dtype="int64") /* ty=Tensor[(56, 20), int64] */;
  %83 = reshape(%82, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %84 = @func_2050(%83) /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) */;
  %85 = cast(7.0686f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %87 = reshape(%85, newshape=[]) /* ty=float32 */;
  %88 = reshape(%86, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
  %89 = @func_3369(%87, %88) /* ty=(Tensor[(81), float64], Tensor[(1, 9, 12), bool]) */;
  %90 = @func_5284() /* ty=Tensor[(81), float64] */;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(81), float32] */;
  %92 = acos(%91) /* ty=Tensor[(81), float32] */;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(81), float32] */;
  %94 = @func_3012() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %95 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %96 = @func_3395() /* ty=(Tensor[(81), float64],) */;
  %97 = %81.1;
  %98 = %84.2;
  %99 = %89.0;
  %100 = log(%93) /* ty=Tensor[(81), float32] */;
  %101 = %94.0;
  %102 = %95.0;
  %103 = %96.0;
  (%97, %98, %var_5768, %99, 7.0686f /* ty=float32 */, meta[relay.Constant][4] /* ty=Tensor[(108), float32] */, %100, %101, %102, %103)
}

def @func_1903() -> (Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) {
  %104 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 27), float64] */, dtype="float64") /* ty=Tensor[(3, 27), float64] */;
  %105 = reshape(%104, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 27), float64] */, dtype="float64") /* ty=Tensor[(3, 27), float64] */;
  %107 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  %108 = @func_270(%105) /* ty=Tensor[(9, ?, 9), float64] */;
  %109 = acos(%106) /* ty=Tensor[(3, 27), float64] */;
  (%107, %108, %109)
}

def @func_1453() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %110 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %111 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  (%110, %111)
}

def @func_11534() -> (Tensor[(?, ?, 13), bool], Tensor[(540), float64], Tensor[(540), float64]) {
  %112 = @func_4789() /* ty=(Tensor[(?, ?, 13), bool],) */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %114 = reshape(%113, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %115 = @func_8547(%114) /* ty=(Tensor[(13, 5), uint8], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64]) */;
  %116 = %112.0;
  %117 = %115.3;
  (%116, %117, meta[relay.Constant][6] /* ty=Tensor[(540), float64] */)
}

def @func_2340() -> (Tensor[(1, 1, 13), float32],) {
  %118 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %119 = %118.0;
  (%119,)
}

def @func_9368() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float32]) {
  %120 = @func_3012() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %121 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %122 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
  %123 = %122.0;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(5, ?, 13), float32] */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %126 = reshape(%125, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %127 = %120.0;
  %128 = %121.0;
  %129 = sigmoid(%124) /* ty=Tensor[(5, ?, 13), float32] */;
  %130 = @func_3980(%126) /* ty=Tensor[(8, 7, 15), float64] */;
  (%127, %128, %129, %130, meta[relay.Constant][7] /* ty=Tensor[(840), float32] */)
}

def @func_4096() -> (Tensor[(1, 1, 13), float32],) {
  %131 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %132 = %131.1;
  (%132,)
}

def @func_6740() -> (Tensor[(1, 1, 13), float64],) {
  %133 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %134 = %133.0;
  (%134,)
}

def @func_11365() -> Tensor[(5, 5, 9), float64] {
  @func_11027() /* ty=Tensor[(5, 5, 9), float64] */
}

def @func_6165(%var_6158: Tensor[(3, 10, 2), float32]) -> (Tensor[(3, 10, 2), float32], Tensor[(1, 1, 13), float32]) {
  %135 = cast(%var_6158, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %136 = @func_6008() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %137 = tan(%135) /* ty=Tensor[(3, 10, 2), float32] */;
  %138 = %136.1;
  (%137, %138)
}

def @func_10670() -> Tensor[(81), float64] {
  @func_4390() /* ty=Tensor[(81), float64] */
}

def @func_2869() -> (Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) {
  %139 = @func_2387() /* ty=(Tensor[(234), float64],) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(234), float64] */;
  %142 = reshape(%141, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %143 = @func_1495(%142) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %144 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %145 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %146 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %147 = %146.0;
  %148 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %149 = %148.0;
  %150 = cast(%149, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %151 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%147, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = greater_equal(%152, %153) /* ty=Tensor[(?, ?, 13), bool] */;
  %155 = cast(%147, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %159 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %160 = %143.3;
  %161 = %144.0;
  %162 = %145.0;
  %163 = logical_and(%157, %158) /* ty=Tensor[(?, ?, 13), bool] */;
  %164 = %159.1;
  (%140, %160, %161, %162, %163, %164)
}

def @func_9041(%var_9012: Tensor[(5, 4, 10), float32]) -> (Tensor[(5, 4, 10), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1120), int64]) {
  %165 = cast(%var_9012, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
  %166 = @func_8648() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %167 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %168 = @func_5503() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) */;
  %169 = asin(%165) /* ty=Tensor[(5, 4, 10), float32] */;
  %170 = %166.1;
  %171 = %167.0;
  %172 = %168.0;
  (%169, %170, %171, %172)
}

def @func_3049() -> Tensor[(1, 1, 13), float64] {
  @func_2023() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8887(%var_8866: Tensor[(1, 15, 13), float64]) -> (Tensor[(1, 15, 13), uint64], Tensor[(1, 15, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
  %173 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %174 = %173.0;
  %175 = cast(%174, dtype="uint64") /* ty=Tensor[(1, 1, 13), uint64] */;
  %176 = cast(%var_8866, dtype="uint64") /* ty=Tensor[(1, 15, 13), uint64] */;
  %177 = cast(%var_8866, dtype="float32") /* ty=Tensor[(1, 15, 13), float32] */;
  %178 = cast(meta[relay.Constant][8] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %179 = reshape(%178, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %180 = multiply(%175, %176) /* ty=Tensor[(1, 15, 13), uint64] */;
  %181 = erf(%177) /* ty=Tensor[(1, 15, 13), float32] */;
  %182 = @func_270(%179) /* ty=Tensor[(9, ?, 9), float64] */;
  (%180, %181, %182, meta[relay.Constant][8] /* ty=Tensor[(81), float64] */)
}

def @func_9089() -> (Tensor[(1, 1, 13), float64],) {
  %183 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
  (%183,)
}

def @func_3251() -> (Tensor[(1, 1, 13), float32],) {
  %184 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %185 = %184.0;
  (%185,)
}

def @func_3867() -> (Tensor[(1120), int64], Tensor[(234), float64], Tensor[(1, 1, 13), float64]) {
  %186 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %187 = @func_2359() /* ty=(Tensor[(234), float64],) */;
  %188 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %189 = %186.3;
  %190 = %187.0;
  %191 = %188.1;
  (%189, %190, %191)
}

def @func_1762(%var_1747: Tensor[(1120), int64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64, Tensor[(1120), int64], Tensor[(81), float64], int64, Tensor[(1680), float32]) {
  %192 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %193 = cast(%var_1747, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %194 = reshape(%192, newshape=[]) /* ty=int64 */;
  %195 = reshape(%193, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %196 = @func_757(%194, %195) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %197 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %198 = cast(%var_1747, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %199 = reshape(%197, newshape=[]) /* ty=int64 */;
  %200 = reshape(%198, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %201 = @func_757(%199, %200) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %202 = cast(meta[relay.Constant][9] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %203 = %201.2;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(81), float64] */;
  %205 = cast(%var_1747, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %206 = reshape(%202, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
  %207 = reshape(%204, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %208 = reshape(%205, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %209 = @func_1403(%206, %207, %208) /* ty=(Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], int64, Tensor[(1120), int64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64]) */;
  %210 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %211 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %212 = %196.2;
  %213 = %209.5;
  (%210, %211, %212, -8 /* ty=int64 */, %var_1747, %203, %213, meta[relay.Constant][9] /* ty=Tensor[(1680), float32] */)
}

def @func_7038() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(?, ?, 13), bool]) {
  %214 = @func_5897() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %215 = @func_3303() /* ty=(Tensor[(81), float64],) */;
  %216 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %217 = %214.0;
  %218 = %215.0;
  %219 = %216.4;
  (%217, %218, %219)
}

def @func_8312() -> (Tensor[(3, 27), uint64], Tensor[(13, 5, ?), bool], Tensor[(13, 5), uint8]) {
  %220 = @func_7584() /* ty=(Tensor[(81), int8], Tensor[(3, 27), uint64]) */;
  %221 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 5), uint8] */, dtype="uint8") /* ty=Tensor[(13, 5), uint8] */;
  %222 = reshape(%221, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint8] */;
  %223 = @func_4452(%222) /* ty=(Tensor[(13, 5, ?), bool], Tensor[(81), float64]) */;
  %224 = %220.1;
  %225 = %223.0;
  (%224, %225, meta[relay.Constant][10] /* ty=Tensor[(13, 5), uint8] */)
}

def @func_10919() -> Tensor[(1, 1, 13), float32] {
  %226 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %226.0
}

def @func_2023() -> Tensor[(1, 1, 13), float64] {
  @func_1917() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5253() -> (Tensor[(234), float64], Tensor[(?, ?, 13), bool]) {
  %227 = @func_2387() /* ty=(Tensor[(234), float64],) */;
  %228 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %229 = %227.0;
  %230 = %228.4;
  (%229, %230)
}

def @func_3012() -> (Tensor[(1, 1, 13), float64],) {
  %231 = @func_2115() /* ty=Tensor[(1, 1, 13), float64] */;
  (%231,)
}

def @func_6825() -> (Tensor[(1, 1, 13), float32],) {
  %232 = @func_4553() /* ty=Tensor[(1, 1, 13), float32] */;
  (%232,)
}

def @func_5191() -> (Tensor[(81), float64],) {
  %233 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %234 = %233.2;
  (%234,)
}

def @func_10629(%var_10625: Tensor[(168, 1), uint8]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168, 1), uint8]) {
  %235 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %236 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %237 = cast(%var_10625, dtype="uint8") /* ty=Tensor[(168, 1), uint8] */;
  %238 = reshape(%237, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), uint8] */;
  %239 = %235.1;
  %240 = %236.0;
  %241 = @func_7410(%238) /* ty=Tensor[(6, 4, 7), uint8] */;
  (%239, %240, %241, %var_10625)
}

def @func_6439() -> Tensor[(81), int8] {
  %242 = @func_5162() /* ty=(Tensor[(81), int8],) */;
  %242.0
}

def @func_11639() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), bool]) {
  %243 = @func_3499() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(234), float64]) */;
  %244 = @func_8648() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %245 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
  %246 = %243.0;
  %247 = %244.1;
  %248 = @func_5852() /* ty=Tensor[(1, 1, 13), float64] */;
  %249 = %245.0;
  (%246, %247, %248, %249)
}

def @func_4553() -> Tensor[(1, 1, 13), float32] {
  @func_3950() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_3950() -> Tensor[(1, 1, 13), float32] {
  %250 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %250.0
}

def @func_5410() -> Tensor[(3, 27), float32] {
  %251 = @func_1903() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) */;
  %252 = %251.2;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(3, 27), float32] */;
  acosh(%253) /* ty=Tensor[(3, 27), float32] */
}

def @func_8917() -> (Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) {
  %254 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %255 = @func_4789() /* ty=(Tensor[(?, ?, 13), bool],) */;
  %256 = %254.0;
  %257 = %255.0;
  (%256, %257)
}

def @func_11332(%var_11318: int64) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64) {
  %258 = cast(%var_11318, dtype="int64") /* ty=int64 */;
  %259 = reshape(%258, newshape=[]) /* ty=int64 */;
  %260 = @func_1981(%259) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
  %261 = @func_7288() /* ty=Tensor[(1, 1, 13), float64] */;
  %262 = %260.1;
  (%261, %262, %var_11318)
}

def @func_10867() -> (Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  %263 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %264 = cast(meta[relay.Constant][11] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %265 = reshape(%264, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
  %266 = @func_5383(%265) /* ty=(Tensor[(5, 5, 9), float64],) */;
  %267 = @func_4711() /* ty=(Tensor[(81), float64],) */;
  %268 = @func_8401() /* ty=Tensor[(1, 1, 13), float64] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %270 = %263.0;
  %271 = %266.0;
  %272 = %267.0;
  %273 = log2(%269) /* ty=Tensor[(1, 1, 13), float32] */;
  (%270, %271, meta[relay.Constant][11] /* ty=Tensor[(225), float64] */, %272, %273)
}

def @func_6274(%var_6259: Tensor[(3, 27), float64]) -> (Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) {
  %274 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
  %275 = @func_1903() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) */;
  %276 = %275.2;
  %277 = cast(%var_6259, dtype="uint64") /* ty=Tensor[(3, 27), uint64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(2), int32] */;
  %279 = cast(%276, dtype="uint64") /* ty=Tensor[(3, 27), uint64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %281 = cast(meta[relay.Constant][12] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %282 = reshape(%281, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
  %283 = @func_5383(%282) /* ty=(Tensor[(5, 5, 9), float64],) */;
  %284 = %274.0;
  %285 = minimum(%279, %280) /* ty=Tensor[(3, 27), uint64] */;
  %286 = %283.0;
  (%284, %285, %286, meta[relay.Constant][12] /* ty=Tensor[(225), float64] */)
}

def @func_1870() -> Tensor[(1, 1, 13), float32] {
  %287 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  atan(%288) /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_7632(%var_7624: Tensor[(81), float64]) -> (Tensor[(7, 3, 13), bool], Tensor[(81), bool]) {
  %289 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %290 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %291 = %290.0;
  %292 = cast(%var_7624, dtype="bool") /* ty=Tensor[(81), bool] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(1), int32] */;
  %294 = cast(%291, dtype="bool") /* ty=Tensor[(81), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?), bool] */;
  %296 = %289.0;
  %297 = less(%294, %295) /* ty=Tensor[(81), bool] */;
  (%296, %297)
}

def @func_9568() -> (Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float32], Tensor[(81), float64], Tensor[(169), float64]) {
  %298 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %299 = @func_7704() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %300 = cast(meta[relay.Constant][13] /* ty=Tensor[(169), float64] */, dtype="float64") /* ty=Tensor[(169), float64] */;
  %301 = reshape(%300, newshape=[169, 1]) /* ty=Tensor[(169, 1), float64] */;
  %302 = @func_8356(%301) /* ty=(Tensor[(81), float64], Tensor[(?, 13, 13), bool]) */;
  %303 = %298.0;
  %304 = %299.0;
  %305 = %302.0;
  (%303, %304, %305, meta[relay.Constant][13] /* ty=Tensor[(169), float64] */)
}

def @func_9521() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(5, 5, 9), float64]) {
  %306 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %307 = @func_5093() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) */;
  %308 = %307.1;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(81), float64] */;
  %310 = reshape(%309, newshape=[3, 27]) /* ty=Tensor[(3, 27), float64] */;
  %311 = @func_6274(%310) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) */;
  %312 = %306.1;
  %313 = %311.2;
  (%312, %308, %313)
}

def @func_3499() -> (Tensor[(1, 1, 13), float64], Tensor[(234), float64]) {
  %314 = @func_2359() /* ty=(Tensor[(234), float64],) */;
  %315 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %316 = %314.0;
  (%315, %316)
}

def @func_4635(%var_4625: Tensor[(16, 14, 13), float32]) -> (Tensor[(16, 14, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %317 = @func_4553() /* ty=Tensor[(1, 1, 13), float32] */;
  %318 = cast(%317, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %319 = cast(%var_4625, dtype="bool") /* ty=Tensor[(16, 14, 13), bool] */;
  %320 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %321 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %322 = logical_or(%318, %319) /* ty=Tensor[(16, 14, 13), bool] */;
  %323 = %320.0;
  %324 = %321.0;
  (%322, %323, %324)
}

def @func_7288() -> Tensor[(1, 1, 13), float64] {
  %325 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %325.1
}

def @func_6051() -> Tensor[(1, 1, 13), float32] {
  @func_4483() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_5383(%var_5374: Tensor[(5, 5, 9), float64]) -> (Tensor[(5, 5, 9), float64],) {
  %326 = cast(%var_5374, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %327 = tan(%326) /* ty=Tensor[(5, 5, 9), float64] */;
  (%327,)
}

def @func_4390() -> Tensor[(81), float64] {
  %328 = @func_3303() /* ty=(Tensor[(81), float64],) */;
  %328.0
}

def @func_10516() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %329 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %330 = @func_6791() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) */;
  %331 = %329.1;
  %332 = %330.1;
  (%331, %332)
}

def @func_5284() -> Tensor[(81), float64] {
  %333 = @func_3303() /* ty=(Tensor[(81), float64],) */;
  %333.0
}

def @func_4802() -> Tensor[(1, 1, 13), float64] {
  %334 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %334.5
}

def @func_7176() -> Tensor[(1, 1, 13), float64] {
  @func_3049() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_1828() -> Tensor[(1, 1, 13), float64] {
  %335 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %335.0
}

def @func_7123() -> Tensor[(1, 1, 13), float64] {
  %336 = @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %336.0
}

def @func_7511(%var_7482: Tensor[(10, 9, 1), float32]) -> (Tensor[(10, 9, 1), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %337 = cast(%var_7482, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
  %338 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %339 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %340 = atan(%337) /* ty=Tensor[(10, 9, 1), float32] */;
  %341 = %338.0;
  %342 = %339.0;
  %343 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  (%340, %341, %342, %343)
}

def @func_9911(%var_9847: Tensor[(10, 5, 9), float32], %var_9877: Tensor[(225), float64]) -> (Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(10, 5, 9), bool]) {
  %344 = @func_9674() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %345 = cast(%var_9877, dtype="float64") /* ty=Tensor[(225), float64] */;
  %346 = reshape(%345, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
  %347 = @func_5383(%346) /* ty=(Tensor[(5, 5, 9), float64],) */;
  %348 = cast(%var_9847, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %349 = tan(%348) /* ty=Tensor[(10, 5, 9), float32] */;
  %350 = cast(%var_9847, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = %344.0;
  %355 = %347.0;
  %356 = less(%352, %353) /* ty=Tensor[(10, 5, 9), bool] */;
  (%354, %355, %var_9877, %356)
}

def @func_9131() -> Tensor[(1, 1, 13), float64] {
  @func_8494() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_9943() -> (Tensor[(1, 1, 13), float64], Tensor[(81), int8]) {
  %357 = @func_5162() /* ty=(Tensor[(81), int8],) */;
  %358 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %359 = %357.0;
  (%358, %359)
}

def @func_5480(%var_5460: Tensor[(81), float64], %var_5467: Tensor[(65), uint8]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(208), float32], Tensor[(81), float64], Tensor[(81), float64], Tensor[(65), uint8], Tensor[(1, 1, 13), float64]) {
  %360 = @func_3541() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %361 = cast(meta[relay.Constant][14] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %362 = cast(%var_5460, dtype="float64") /* ty=Tensor[(81), float64] */;
  %363 = reshape(%361, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), float32] */;
  %364 = reshape(%362, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
  %365 = @func_3607(%363, %364) /* ty=(Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(16, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %366 = cast(%var_5467, dtype="uint8") /* ty=Tensor[(65), uint8] */;
  %367 = reshape(%366, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint8] */;
  %368 = @func_4452(%367) /* ty=(Tensor[(13, 5, ?), bool], Tensor[(81), float64]) */;
  %369 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %370 = @func_3899() /* ty=Tensor[(1, 1, 13), float64] */;
  %371 = %360.0;
  %372 = %365.1;
  %373 = %368.1;
  %374 = %369.0;
  (%370, %371, %372, meta[relay.Constant][14] /* ty=Tensor[(208), float32] */, %var_5460, %373, %var_5467, %374)
}

def @func_8374() -> (Tensor[(?, ?, 13), bool],) {
  %375 = @func_7247() /* ty=(Tensor[(1120), int64], Tensor[(?, ?, 13), bool]) */;
  %376 = %375.1;
  (%376,)
}

def @func_10343(%var_10162: Tensor[(54, 10), float64], %var_10214: Tensor[(200, 1), float32], %var_10254: Tensor[(54, 10), float64], %var_10277: Tensor[(54, 10), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(54, 10), uint32], Tensor[(5, ?, 13), bool], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32], Tensor[(12, 1, 12), float32], Tensor[(144), float32], Tensor[(81), int8], Tensor[(169, 1), float64], Tensor[(1, 1, 13), float32], Tensor[(7, 3, 13), bool], Tensor[(54, 10), bool], Tensor[(54, 10), float64], Tensor[(54, 10), float32], Tensor[(1, 1, 13), float32], Tensor[(54, 10), bool]) {
  %377 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %378 = @func_4711() /* ty=(Tensor[(81), float64],) */;
  %379 = @func_6210() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(54, 10), float64]) */;
  %380 = %379.3;
  %381 = cast(%var_10162, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(2), int32] */;
  %383 = cast(%380, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %385 = multiply(%383, %384) /* ty=Tensor[(54, 10), uint32] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
  %387 = exp(%386) /* ty=Tensor[(54, 10), float32] */;
  %388 = cast(%380, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(2), int32] */;
  %390 = cast(%387, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %392 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
  %393 = cast(%var_10214, dtype="float32") /* ty=Tensor[(200, 1), float32] */;
  %394 = reshape(%393, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
  %395 = @func_9041(%394) /* ty=(Tensor[(5, 4, 10), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1120), int64]) */;
  %396 = cast(meta[relay.Constant][15] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %397 = reshape(%396, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float32] */;
  %398 = @func_8992(%397) /* ty=(Tensor[(12, 1, 12), float32],) */;
  %399 = cast(meta[relay.Constant][16] /* ty=Tensor[(169, 1), float64] */, dtype="float64") /* ty=Tensor[(169, 1), float64] */;
  %400 = reshape(%399, newshape=[1, 13, 13]) /* ty=Tensor[(1, 13, 13), float64] */;
  %401 = @func_6405(%400) /* ty=(Tensor[(1, 13, 13), float32], Tensor[(81), int8]) */;
  %402 = @func_5054() /* ty=(Tensor[(7, 3, 13), bool],) */;
  %403 = cast(%387, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
  %404 = asin(%403) /* ty=Tensor[(54, 10), float64] */;
  %405 = cast(%385, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(2), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %409 = cast(%var_10277, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
  %410 = shape_of(%387, dtype="int32") /* ty=Tensor[(2), int32] */;
  %411 = cast(%387, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %413 = cast(%var_10254, dtype="int64") /* ty=Tensor[(54, 10), int64] */;
  %414 = shape_of(%404, dtype="int32") /* ty=Tensor[(2), int32] */;
  %415 = cast(%404, dtype="int64") /* ty=Tensor[(54, 10), int64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %417 = subtract(%415, %416) /* ty=Tensor[(54, 10), int64] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
  %419 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %420 = cast(%404, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
  %421 = shape_of(%var_10162, dtype="int32") /* ty=Tensor[(2), int32] */;
  %422 = cast(%var_10162, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %424 = %377.0;
  %425 = %378.0;
  %426 = right_shift(%390, %391) /* ty=Tensor[(54, 10), uint32] */;
  %427 = %392.0;
  %428 = %395.0;
  %429 = %398.0;
  %430 = %401.1;
  %431 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  %432 = %402.0;
  %433 = equal(%407, %408) /* ty=Tensor[(54, 10), bool] */;
  %434 = floor_divide(%411, %412) /* ty=Tensor[(54, 10), float64] */;
  %435 = rsqrt(%418) /* ty=Tensor[(54, 10), float32] */;
  %436 = %419.0;
  %437 = logical_and(%422, %423) /* ty=Tensor[(54, 10), bool] */;
  (%424, %425, %426, %427, %428, %var_10214, %429, meta[relay.Constant][15] /* ty=Tensor[(144), float32] */, %430, meta[relay.Constant][16] /* ty=Tensor[(169, 1), float64] */, %431, %432, %433, %434, %435, %436, %437)
}

def @func_2621() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %438 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  %439 = @func_2304() /* ty=Tensor[(1, 1, 13), float32] */;
  (%438, %439)
}

def @func_2028() -> (Tensor[(1, 1, 13), float32],) {
  %440 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  (%440,)
}

def @func_7794(%var_7786: float32, %var_7787: Tensor[(108), float32]) -> (Tensor[(5, ?, 13), bool], Tensor[(81), float64], float32, Tensor[(108), float32]) {
  %441 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
  %442 = cast(%var_7786, dtype="float32") /* ty=float32 */;
  %443 = cast(%var_7787, dtype="float32") /* ty=Tensor[(108), float32] */;
  %444 = reshape(%442, newshape=[]) /* ty=float32 */;
  %445 = reshape(%443, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
  %446 = @func_3369(%444, %445) /* ty=(Tensor[(81), float64], Tensor[(1, 9, 12), bool]) */;
  %447 = %441.0;
  %448 = %446.0;
  (%447, %448, %var_7786, %var_7787)
}

def @func_10741(%var_10720: Tensor[(3, 9, 9), int64]) -> (Tensor[(3, 9, 9), bool], Tensor[(81), float32]) {
  %449 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 9, 9), int64] */, dtype="bool") /* ty=Tensor[(3, 9, 9), bool] */;
  %450 = shape_of(%var_10720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%var_10720, dtype="bool") /* ty=Tensor[(3, 9, 9), bool] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %453 = @func_5093() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) */;
  %454 = less_equal(%451, %452) /* ty=Tensor[(3, 9, 9), bool] */;
  %455 = %453.1;
  (%454, %455)
}

def @func_6405(%var_6381: Tensor[(1, 13, 13), float64]) -> (Tensor[(1, 13, 13), float32], Tensor[(81), int8]) {
  %456 = @func_4802() /* ty=Tensor[(1, 1, 13), float64] */;
  %457 = cast(%456, dtype="uint16") /* ty=Tensor[(1, 1, 13), uint16] */;
  %458 = cast(%var_6381, dtype="uint16") /* ty=Tensor[(1, 13, 13), uint16] */;
  %459 = add(%457, %458) /* ty=Tensor[(1, 13, 13), uint16] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(1, 13, 13), float32] */;
  %461 = @func_5162() /* ty=(Tensor[(81), int8],) */;
  %462 = asinh(%460) /* ty=Tensor[(1, 13, 13), float32] */;
  %463 = %461.0;
  (%462, %463)
}

def @func_4452(%var_4440: Tensor[(13, 5, 1), uint8]) -> (Tensor[(13, 5, ?), bool], Tensor[(81), float64]) {
  %464 = cast(%var_4440, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %465 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(13, 5, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 5, 1), uint8] */, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %468 = less_equal(%466, %467) /* ty=Tensor[(13, 5, ?), bool] */;
  %469 = @func_4390() /* ty=Tensor[(81), float64] */;
  (%468, %469)
}

def @func_11190() -> (Tensor[(1, 1, 13), float32],) {
  %470 = @func_10919() /* ty=Tensor[(1, 1, 13), float32] */;
  (%470,)
}

def @func_3899() -> Tensor[(1, 1, 13), float64] {
  @func_3049() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_9759() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %471 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %472 = @func_7288() /* ty=Tensor[(1, 1, 13), float64] */;
  %473 = %471.0;
  %474 = @func_3950() /* ty=Tensor[(1, 1, 13), float32] */;
  (%472, %473, %474)
}

def @func_11258(%var_11254: Tensor[(90), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(90), float32]) {
  %475 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %476 = cast(%var_11254, dtype="float32") /* ty=Tensor[(90), float32] */;
  %477 = reshape(%476, newshape=[10, 9, 1]) /* ty=Tensor[(10, 9, 1), float32] */;
  %478 = @func_7511(%477) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %479 = %475.0;
  %480 = %478.1;
  (%479, %480, %var_11254)
}

def @func_3607(%var_3573: Tensor[(16, 1, 13), float32], %var_3579: Tensor[(27, 3), float64]) -> (Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(16, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  %481 = cast(%var_3579, dtype="float64") /* ty=Tensor[(27, 3), float64] */;
  %482 = reshape(%481, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %483 = @func_2077(%482) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %484 = @func_3541() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %487 = cast(%var_3573, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
  %488 = greater(%486, %487) /* ty=Tensor[(16, 1, 13), bool] */;
  %489 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  %490 = cast(%488, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %491 = cast(%489, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %492 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %493 = %483.1;
  %494 = mod(%490, %491) /* ty=Tensor[(16, 1, 13), float32] */;
  %495 = %492.0;
  (%493, %var_3579, %494, %495)
}

def @func_6984() -> (Tensor[(1, 1, 13), float32],) {
  %496 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  (%496,)
}

def @func_6607(%var_6567: Tensor[(11, 11, 15), float32]) -> (Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float64]) {
  %497 = cast(%var_6567, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
  %498 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %501 = cast(%var_6567, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
  %502 = @func_3395() /* ty=(Tensor[(81), float64],) */;
  %503 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %504 = floor_mod(%499, %500) /* ty=Tensor[(11, 11, 15), float32] */;
  %505 = sinh(%501) /* ty=Tensor[(11, 11, 15), float32] */;
  %506 = %502.0;
  %507 = %503.1;
  (%504, %505, %506, %507)
}

def @func_7167() -> (Tensor[(81), float64], Tensor[(1120), int64], Tensor[(1120), int64]) {
  %508 = @func_4711() /* ty=(Tensor[(81), float64],) */;
  %509 = cast(meta[relay.Constant][20] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %510 = reshape(%509, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
  %511 = @func_5804(%510) /* ty=(Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) */;
  %512 = %508.0;
  %513 = %511.1;
  (%512, %513, meta[relay.Constant][20] /* ty=Tensor[(1120), int64] */)
}

def @func_2531() -> (Tensor[(1, 1, 13), float32],) {
  %514 = @func_2304() /* ty=Tensor[(1, 1, 13), float32] */;
  (%514,)
}

def @func_11548() -> (Tensor[(5, 5, 9), float64], Tensor[(7, 3, 13), bool]) {
  %515 = @func_5054() /* ty=(Tensor[(7, 3, 13), bool],) */;
  %516 = @func_11365() /* ty=Tensor[(5, 5, 9), float64] */;
  %517 = %515.0;
  (%516, %517)
}

def @func_5162() -> (Tensor[(81), int8],) {
  %518 = @func_3303() /* ty=(Tensor[(81), float64],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(81), float64] */;
  %521 = log10(%520) /* ty=Tensor[(81), float64] */;
  %522 = cast(%519, dtype="int8") /* ty=Tensor[(81), int8] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(1), int32] */;
  %524 = cast(%521, dtype="int8") /* ty=Tensor[(81), int8] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?), int8] */;
  %526 = bitwise_and(%524, %525) /* ty=Tensor[(81), int8] */;
  (%526,)
}

def @func_4955() -> Tensor[(?, ?, 13), bool] {
  %527 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %530 = cos(%529) /* ty=Tensor[(1, 1, 13), float32] */;
  %531 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  %532 = cast(%531, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %533 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%530, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%534, %535) /* ty=Tensor[(?, ?, 13), bool] */
}

def @func_10432() -> (Tensor[(81), float32],) {
  %536 = @func_7038() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(?, ?, 13), bool]) */;
  %537 = %536.1;
  %538 = cast(meta[relay.Constant][21] /* ty=Tensor[(81), float64] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(1), int32] */;
  %540 = cast(%537, dtype="float32") /* ty=Tensor[(81), float32] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), float32] */;
  %542 = power(%540, %541) /* ty=Tensor[(81), float32] */;
  (%542,)
}

def @func_9238() -> (Tensor[(81), int8],) {
  %543 = @func_6764() /* ty=Tensor[(81), int8] */;
  (%543,)
}

def @func_1713(%var_1703: Tensor[(81), float64], %var_1707: Tensor[(11, 1, 13), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(11, 1, 13), int64]) {
  %544 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %545 = cast(%var_1703, dtype="float64") /* ty=Tensor[(81), float64] */;
  %546 = reshape(%545, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %547 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %549 = asinh(%548) /* ty=Tensor[(1, 1, 13), float32] */;
  %550 = cast(%549, dtype="int64") /* ty=Tensor[(1, 1, 13), int64] */;
  %551 = cast(%var_1707, dtype="int64") /* ty=Tensor[(11, 1, 13), int64] */;
  %552 = %544.1;
  %553 = @func_270(%546) /* ty=Tensor[(9, ?, 9), float64] */;
  %554 = minimum(%550, %551) /* ty=Tensor[(11, 1, 13), int64] */;
  (%552, %553, %var_1703, %554)
}

def @func_8474() -> (Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) {
  %555 = @func_8374() /* ty=(Tensor[(?, ?, 13), bool],) */;
  %556 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  %557 = %555.0;
  (%556, %557)
}

def @func_4483() -> Tensor[(1, 1, 13), float32] {
  %558 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %558.1
}

def @func_4750(%var_4735: float32) -> (Tensor[(234), float64], float32, Tensor[(108), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  %559 = @func_3499() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(234), float64]) */;
  %560 = cast(%var_4735, dtype="float32") /* ty=float32 */;
  %561 = cast(meta[relay.Constant][22] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %562 = reshape(%560, newshape=[]) /* ty=float32 */;
  %563 = reshape(%561, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
  %564 = @func_3369(%562, %563) /* ty=(Tensor[(81), float64], Tensor[(1, 9, 12), bool]) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(81), float64] */;
  %567 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %568 = %559.1;
  %569 = sqrt(%566) /* ty=Tensor[(81), float64] */;
  %570 = %567.0;
  (%568, %var_4735, meta[relay.Constant][22] /* ty=Tensor[(108), float32] */, %569, %570)
}

def @func_3369(%var_3326: float32, %var_3327: Tensor[(1, 9, 12), float32]) -> (Tensor[(81), float64], Tensor[(1, 9, 12), bool]) {
  %571 = @func_3303() /* ty=(Tensor[(81), float64],) */;
  %572 = cast(%var_3326, dtype="float32") /* ty=float32 */;
  %573 = cast(%var_3327, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
  %574 = power(%572, %573) /* ty=Tensor[(1, 9, 12), float32] */;
  %575 = cast(%var_3326, dtype="bool") /* ty=bool */;
  %576 = cast(%574, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
  %577 = %571.0;
  %578 = less(%575, %576) /* ty=Tensor[(1, 9, 12), bool] */;
  (%577, %578)
}

def @func_6692() -> (Tensor[(81), float64], Tensor[(7, 8, 13), bool]) {
  %579 = @func_4711() /* ty=(Tensor[(81), float64],) */;
  %580 = @func_5253() /* ty=(Tensor[(234), float64], Tensor[(?, ?, 13), bool]) */;
  %581 = %580.1;
  %582 = cast(%581, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %583 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 8, 13), bool] */, dtype="bool") /* ty=Tensor[(7, 8, 13), bool] */;
  %584 = %579.0;
  %585 = greater(%582, %583) /* ty=Tensor[(7, 8, 13), bool] */;
  (%584, %585)
}

def @func_5093() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) {
  %586 = @func_3012() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %587 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(81), float32] */;
  %590 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %591 = %586.0;
  %592 = rsqrt(%589) /* ty=Tensor[(81), float32] */;
  %593 = %590.0;
  (%591, %592, %593)
}

def @func_6522() -> Tensor[(1, 1, 13), float64] {
  @func_1842() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_6075() -> (Tensor[(1, 1, 13), float64],) {
  %594 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
  (%594,)
}

def @func_4888() -> (Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %595 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %596 = cast(%595, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %597 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 3, 13), float64] */, dtype="bool") /* ty=Tensor[(7, 3, 13), bool] */;
  %598 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %599 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %600 = less(%596, %597) /* ty=Tensor[(7, 3, 13), bool] */;
  %601 = %598.0;
  %602 = %599.0;
  (%600, %601, %602)
}

def @func_10028() -> Tensor[(234), float64] {
  %603 = @func_7941() /* ty=(Tensor[(234), float64],) */;
  %603.0
}

def @func_1801() -> (Tensor[(1, 1, 13), float64],) {
  %604 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %605 = %604.0;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %607 = acosh(%606) /* ty=Tensor[(1, 1, 13), float64] */;
  (%607,)
}

def @func_3237() -> (Tensor[(81), float64],) {
  %608 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %609 = %608.2;
  (%609,)
}

def @func_3430() -> (Tensor[(1, 1, 13), float64],) {
  %610 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  (%610,)
}

def @func_8955() -> Tensor[(234), float64] {
  %611 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %611.2
}

def @func_10962() -> Tensor[(1, 1, 13), float32] {
  %612 = @func_9674() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %612.0
}

def @func_5692() -> Tensor[(1, 1, 13), float64] {
  @func_3899() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5571(%var_5536: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64], Tensor[(1120), int64]) {
  %613 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %615 = cast(%var_5536, dtype="float64") /* ty=Tensor[(8, 1, 13), float64] */;
  %616 = cast(meta[relay.Constant][25] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %617 = reshape(%616, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %618 = @func_2050(%617) /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) */;
  %619 = floor_divide(%614, %615) /* ty=Tensor[(8, 1, 13), float64] */;
  %620 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
  %621 = %618.2;
  (%619, %620, %621, meta[relay.Constant][25] /* ty=Tensor[(1120), int64] */)
}

def @func_7941() -> (Tensor[(234), float64],) {
  %622 = @func_2387() /* ty=(Tensor[(234), float64],) */;
  %623 = %622.0;
  (%623,)
}

def @func_8401() -> Tensor[(1, 1, 13), float64] {
  @func_1828() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5054() -> (Tensor[(7, 3, 13), bool],) {
  %624 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %625 = %624.0;
  (%625,)
}

def @func_10538() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %626 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %627 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %628 = %626.2;
  %629 = %627.1;
  (%628, %629)
}

def @func_2669(%var_2651: Tensor[(1, 16, 13), float64]) -> (Tensor[(1, 16, 13), int8],) {
  %630 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %631 = cast(%630, dtype="int8") /* ty=Tensor[(1, 1, 13), int8] */;
  %632 = cast(%var_2651, dtype="int8") /* ty=Tensor[(1, 16, 13), int8] */;
  %633 = bitwise_or(%631, %632) /* ty=Tensor[(1, 16, 13), int8] */;
  (%633,)
}

def @func_3303() -> (Tensor[(81), float64],) {
  %634 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %635 = %634.2;
  (%635,)
}

def @func_9714() -> Tensor[(1, 1, 13), float64] {
  %636 = @func_9089() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %636.0
}

def @func_6663() -> (Tensor[(1120), int64], Tensor[(1, 1, 13), float64]) {
  %637 = @func_5503() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) */;
  %638 = @func_3867() /* ty=(Tensor[(1120), int64], Tensor[(234), float64], Tensor[(1, 1, 13), float64]) */;
  %639 = %637.0;
  %640 = %638.2;
  (%639, %640)
}

def @func_5599(%var_5591: Tensor[(1, 10, 13), float64]) -> (Tensor[(81), float64], Tensor[(1, 10, 13), bool]) {
  %641 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %642 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %645 = cast(%var_5591, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %646 = %641.0;
  %647 = equal(%644, %645) /* ty=Tensor[(1, 10, 13), bool] */;
  (%646, %647)
}

def @func_1981(%var_1968: int64) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) {
  %648 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %649 = cast(%var_1968, dtype="int64") /* ty=int64 */;
  %650 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 560), int64] */, dtype="int64") /* ty=Tensor[(2, 560), int64] */;
  %651 = reshape(%649, newshape=[]) /* ty=int64 */;
  %652 = reshape(%650, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %653 = @func_757(%651, %652) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %654 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %655 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 560), int64] */, dtype="bool") /* ty=Tensor[(2, 560), bool] */;
  %656 = cast(%var_1968, dtype="bool") /* ty=bool */;
  %657 = %648.0;
  %658 = %653.2;
  %659 = %654.0;
  %660 = equal(%655, %656) /* ty=Tensor[(2, 560), bool] */;
  (%657, %658, %659, %660)
}

def @func_10997() -> (Tensor[(81), float64],) {
  %661 = @func_4390() /* ty=Tensor[(81), float64] */;
  (%661,)
}

def @func_7410(%var_7394: Tensor[(6, 4, 7), uint8]) -> Tensor[(6, 4, 7), uint8] {
  %662 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 4, 7), uint8] */, dtype="uint8") /* ty=Tensor[(6, 4, 7), uint8] */;
  %663 = shape_of(%var_7394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%var_7394, dtype="uint8") /* ty=Tensor[(6, 4, 7), uint8] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%664, %665) /* ty=Tensor[(6, 4, 7), uint8] */
}

def @func_2192() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %666 = cast(meta[relay.Constant][28] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %667 = reshape(%666, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %668 = @func_2077(%667) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %669 = @func_1842() /* ty=Tensor[(1, 1, 13), float64] */;
  %670 = %668.0;
  (%669, %670, meta[relay.Constant][28] /* ty=Tensor[(81), float64] */)
}

def @func_2557() -> (Tensor[(1, 1, 13), float64],) {
  %671 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %672 = %671.0;
  (%672,)
}

def @func_2929() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %673 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %674 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %675 = %673.0;
  %676 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %677 = %674.1;
  (%675, %676, %677)
}

def @func_4711() -> (Tensor[(81), float64],) {
  %678 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %679 = %678.0;
  (%679,)
}

def @func_5874() -> (Tensor[(5, ?, 13), bool],) {
  %680 = @func_4955() /* ty=Tensor[(?, ?, 13), bool] */;
  %681 = cast(%680, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %682 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 1, 13), bool] */, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
  %683 = less(%681, %682) /* ty=Tensor[(5, ?, 13), bool] */;
  (%683,)
}

def @func_7704() -> (Tensor[(1, 1, 13), float32],) {
  %684 = @func_6051() /* ty=Tensor[(1, 1, 13), float32] */;
  (%684,)
}

def @func_1592() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) {
  %685 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %686 = cast(meta[relay.Constant][30] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %687 = reshape(%686, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %688 = @func_1495(%687) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %689 = %685.1;
  %690 = %688.3;
  (%689, %690, meta[relay.Constant][30] /* ty=Tensor[(234), float64] */)
}

def @func_10781() -> (Tensor[(15, 16, 13), bool],) {
  %691 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %692 = %691.0;
  %693 = cast(%692, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %694 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 16, 13), float32] */, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
  %695 = not_equal(%693, %694) /* ty=Tensor[(15, 16, 13), bool] */;
  %696 = cast(%692, dtype="uint16") /* ty=Tensor[(1, 1, 13), uint16] */;
  %697 = cast(%695, dtype="uint16") /* ty=Tensor[(15, 16, 13), uint16] */;
  %698 = bitwise_or(%696, %697) /* ty=Tensor[(15, 16, 13), uint16] */;
  %699 = cast(%695, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %703 = logical_or(%701, %702) /* ty=Tensor[(15, 16, 13), bool] */;
  (%703,)
}

def @func_3190(%var_3158: Tensor[(81, 1), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(234), bool], Tensor[(2, 560), bool], Tensor[(1, 1, 13), float64], Tensor[(81, 1), float64]) {
  %704 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %705 = reshape(%704, newshape=[]) /* ty=int64 */;
  %706 = @func_1981(%705) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
  %707 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %708 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %709 = %708.2;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(234), float32] */;
  %711 = atanh(%710) /* ty=Tensor[(234), float32] */;
  %712 = cast(%711, dtype="bool") /* ty=Tensor[(234), bool] */;
  %713 = cast(6 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %714 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %715 = reshape(%714, newshape=[]) /* ty=int64 */;
  %716 = @func_1981(%715) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
  %717 = cast(%var_3158, dtype="float64") /* ty=Tensor[(81, 1), float64] */;
  %718 = reshape(%717, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %719 = @func_2077(%718) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %720 = %706.0;
  %721 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
  %722 = %707.0;
  %723 = logical_or(%712, %713) /* ty=Tensor[(234), bool] */;
  %724 = %716.3;
  %725 = %719.0;
  (%720, %721, %722, %723, %724, %725, %var_3158)
}

def @func_6210() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(54, 10), float64]) {
  %726 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %727 = cast(meta[relay.Constant][32] /* ty=Tensor[(54, 10), float32] */, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
  %728 = reshape(%727, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), float32] */;
  %729 = cast(meta[relay.Constant][32] /* ty=Tensor[(54, 10), float32] */, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
  %730 = %726.0;
  %731 = @func_2304() /* ty=Tensor[(1, 1, 13), float32] */;
  %732 = @func_4029(%728) /* ty=Tensor[(3, 15, 12), float32] */;
  %733 = sinh(%729) /* ty=Tensor[(54, 10), float64] */;
  (%730, %731, %732, %733)
}

def @func_5852() -> Tensor[(1, 1, 13), float64] {
  @func_1917() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8992(%var_8988: Tensor[(12, 1, 12), float32]) -> (Tensor[(12, 1, 12), float32],) {
  %734 = cast(%var_8988, dtype="float32") /* ty=Tensor[(12, 1, 12), float32] */;
  %735 = exp(%734) /* ty=Tensor[(12, 1, 12), float32] */;
  (%735,)
}

def @func_8648() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  %736 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %737 = @func_2238() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %738 = %736.0;
  %739 = %737.0;
  (%738, %739)
}

def @func_6008() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %740 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %741 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %742 = %740.0;
  %743 = %741.0;
  (%742, %743)
}

def @func_270(%var_264: Tensor[(9, 1, 9), float64]) -> Tensor[(9, ?, 9), float64] {
  %744 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 1, 9), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 9), float64] */;
  %745 = shape_of(%var_264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%var_264, dtype="float64") /* ty=Tensor[(9, 1, 9), float64] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%746, %747) /* ty=Tensor[(9, ?, 9), float64] */
}

def @func_8356(%var_8347: Tensor[(169, 1), float64]) -> (Tensor[(81), float64], Tensor[(?, 13, 13), bool]) {
  %748 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %749 = cast(%var_8347, dtype="float64") /* ty=Tensor[(169, 1), float64] */;
  %750 = reshape(%749, newshape=[1, 13, 13]) /* ty=Tensor[(1, 13, 13), float64] */;
  %751 = @func_6405(%750) /* ty=(Tensor[(1, 13, 13), float32], Tensor[(81), int8]) */;
  %752 = %751.0;
  %753 = cast(%var_8347, dtype="bool") /* ty=Tensor[(169, 1), bool] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="bool") /* ty=Tensor[(1, 13, 13), bool] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %757 = %748.0;
  %758 = greater_equal(%755, %756) /* ty=Tensor[(?, 13, 13), bool] */;
  (%757, %758)
}

def @func_8843() -> (Tensor[(81), float64], Tensor[(1, 1, 13), float64]) {
  %759 = @func_5191() /* ty=(Tensor[(81), float64],) */;
  %760 = %759.0;
  %761 = @func_6522() /* ty=Tensor[(1, 1, 13), float64] */;
  (%760, %761)
}

def @func_1495(%var_1455: Tensor[(9, 2, 13), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
  %762 = cast(%var_1455, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %763 = cos(%762) /* ty=Tensor[(9, 2, 13), float64] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %765 = acos(%764) /* ty=Tensor[(9, 2, 13), float64] */;
  %766 = cast(%765, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %767 = erf(%766) /* ty=Tensor[(9, 2, 13), float64] */;
  %768 = cast(%var_1455, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %769 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%763, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = greater_equal(%770, %771) /* ty=Tensor[(9, 2, 13), bool] */;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %774 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%767, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %777 = cast(meta[relay.Constant][34] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %778 = reshape(%777, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %779 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %780 = subtract(%775, %776) /* ty=Tensor[(9, 2, 13), float32] */;
  %781 = @func_270(%778) /* ty=Tensor[(9, ?, 9), float64] */;
  (%779, %780, %781, meta[relay.Constant][34] /* ty=Tensor[(81), float64] */)
}

def @func_11302(%var_11287: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %782 = @func_6075() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %785 = cast(%var_11287, dtype="float32") /* ty=Tensor[(8, 1, 13), float32] */;
  %786 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %787 = mod(%784, %785) /* ty=Tensor[(8, 1, 13), float32] */;
  %788 = %786.0;
  (%787, %788)
}

def @func_11431() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(168), uint8]) {
  %789 = cast(meta[relay.Constant][35] /* ty=Tensor[(168), uint8] */, dtype="uint8") /* ty=Tensor[(168), uint8] */;
  %790 = reshape(%789, newshape=[168, 1]) /* ty=Tensor[(168, 1), uint8] */;
  %791 = @func_10629(%790) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168, 1), uint8]) */;
  %792 = @func_10919() /* ty=Tensor[(1, 1, 13), float32] */;
  %793 = %791.0;
  (%792, %793, meta[relay.Constant][35] /* ty=Tensor[(168), uint8] */)
}

def @func_9674() -> (Tensor[(1, 1, 13), float32],) {
  %794 = @func_9287() /* ty=Tensor[(1, 1, 13), float32] */;
  (%794,)
}

def @func_8714() -> (Tensor[(1, 1, 13), float64],) {
  %795 = @func_5852() /* ty=Tensor[(1, 1, 13), float64] */;
  (%795,)
}

def @func_4029(%var_4001: Tensor[(3, 15, 12), float32]) -> Tensor[(3, 15, 12), float32] {
  %796 = cast(%var_4001, dtype="float32") /* ty=Tensor[(3, 15, 12), float32] */;
  log(%796) /* ty=Tensor[(3, 15, 12), float32] */
}

def @func_9973() -> (Tensor[(5, ?, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168), uint8]) {
  %797 = @func_9368() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float32]) */;
  %798 = cast(meta[relay.Constant][36] /* ty=Tensor[(168), uint8] */, dtype="uint8") /* ty=Tensor[(168), uint8] */;
  %799 = reshape(%798, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), uint8] */;
  %800 = %797.2;
  %801 = @func_7410(%799) /* ty=Tensor[(6, 4, 7), uint8] */;
  (%800, %801, meta[relay.Constant][36] /* ty=Tensor[(168), uint8] */)
}

def @func_10131() -> Tensor[(1, 1, 13), float32] {
  %802 = @func_9568() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float32], Tensor[(81), float64], Tensor[(169), float64]) */;
  %802.1
}

def @func_5963(%var_5934: Tensor[(4, 280), int64], %var_5952: Tensor[(9, 14, 13), float64]) -> (Tensor[(81), float64], Tensor[(3, 27), float32], Tensor[(9, ?, 9), float64], int64, Tensor[(4, 280), int64], Tensor[(9, 14, 13), float32], Tensor[(234), float64]) {
  %803 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %804 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %805 = cast(%var_5934, dtype="int64") /* ty=Tensor[(4, 280), int64] */;
  %806 = reshape(%804, newshape=[]) /* ty=int64 */;
  %807 = reshape(%805, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %808 = @func_757(%806, %807) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %809 = @func_5692() /* ty=Tensor[(1, 1, 13), float64] */;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %811 = cast(%var_5952, dtype="float32") /* ty=Tensor[(9, 14, 13), float32] */;
  %812 = @func_2359() /* ty=(Tensor[(234), float64],) */;
  %813 = %803.2;
  %814 = @func_5410() /* ty=Tensor[(3, 27), float32] */;
  %815 = %808.3;
  %816 = minimum(%810, %811) /* ty=Tensor[(9, 14, 13), float32] */;
  %817 = %812.0;
  (%813, %814, %815, -2 /* ty=int64 */, %var_5934, %816, %817)
}

def @main(%var_11746: Tensor[(144), float32], %var_11751: Tensor[(9, 9), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(3, 15, 12), float32], Tensor[(540), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(3, 27), uint64], Tensor[(9, 9), float64], Tensor[(12, ?, 12), uint64]) {
  %818 = @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %819 = cast(meta[relay.Constant][37] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %820 = reshape(%819, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), float32] */;
  %821 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %822 = %821.2;
  %823 = @func_5692() /* ty=Tensor[(1, 1, 13), float64] */;
  %824 = cast(%823, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %825 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%822, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = cast(%var_11751, dtype="float64") /* ty=Tensor[(9, 9), float64] */;
  %829 = reshape(%828, newshape=[3, 27]) /* ty=Tensor[(3, 27), float64] */;
  %830 = @func_6274(%829) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) */;
  %831 = cast(%var_11746, dtype="float32") /* ty=Tensor[(144), float32] */;
  %832 = reshape(%831, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float32] */;
  %833 = @func_8992(%832) /* ty=(Tensor[(12, 1, 12), float32],) */;
  %834 = %833.0;
  %835 = cast(%var_11746, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%834, dtype="uint64") /* ty=Tensor[(12, 1, 12), uint64] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %839 = %818.0;
  %840 = @func_4029(%820) /* ty=Tensor[(3, 15, 12), float32] */;
  %841 = greater(%826, %827) /* ty=Tensor[(?, ?, 13), bool] */;
  %842 = @func_5692() /* ty=Tensor[(1, 1, 13), float64] */;
  %843 = %830.1;
  %844 = multiply(%837, %838) /* ty=Tensor[(12, ?, 12), uint64] */;
  (%839, %840, meta[relay.Constant][37] /* ty=Tensor[(540), float32] */, %841, %842, %843, %var_11751, %844)
}

def @func_11351(%var_11344: Tensor[(13, 1, 16), float32]) -> (Tensor[(13, 1, 16), float32],) {
  %845 = cast(%var_11344, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %846 = tan(%845) /* ty=Tensor[(13, 1, 16), float32] */;
  (%846,)
}

def @func_8700() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %847 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %848 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  %849 = %847.0;
  (%848, %849)
}

def @func_6120() -> Tensor[(81), int8] {
  %850 = @func_5162() /* ty=(Tensor[(81), int8],) */;
  %850.0
}

def @func_7925(%var_7915: int64, %var_7923: Tensor[(2912), float32]) -> (Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64], int64, Tensor[(16, 14, 13), bool], Tensor[(2912), float32]) {
  %851 = cast(%var_7915, dtype="int64") /* ty=int64 */;
  %852 = reshape(%851, newshape=[]) /* ty=int64 */;
  %853 = @func_1981(%852) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
  %854 = cast(%var_7923, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %855 = reshape(%854, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
  %856 = @func_4635(%855) /* ty=(Tensor[(16, 14, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %857 = @func_4955() /* ty=Tensor[(?, ?, 13), bool] */;
  %858 = %853.0;
  %859 = %856.0;
  (%857, %858, %var_7915, %859, %var_7923)
}

def @func_8329() -> Tensor[(81), float64] {
  @func_5284() /* ty=Tensor[(81), float64] */
}

def @func_2050(%var_2045: Tensor[(1120), int64]) -> (Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) {
  %860 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %861 = cast(%var_2045, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %862 = reshape(%861, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %863 = @func_1762(%862) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64, Tensor[(1120), int64], Tensor[(81), float64], int64, Tensor[(1680), float32]) */;
  %864 = %860.1;
  %865 = %863.1;
  (%864, %865, %var_2045)
}

def @func_9174() -> (Tensor[(234), bool],) {
  %866 = @func_3499() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(234), float64]) */;
  %867 = %866.1;
  %868 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), float64] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(1), int32] */;
  %870 = cast(%867, dtype="bool") /* ty=Tensor[(234), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?), bool] */;
  %872 = less(%870, %871) /* ty=Tensor[(234), bool] */;
  (%872,)
}

def @func_6640(%var_6625: Tensor[(6, 15, 6), float64]) -> (Tensor[(6, 15, 6), float64],) {
  %873 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
  %874 = shape_of(%var_6625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%var_6625, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %877 = mod(%875, %876) /* ty=Tensor[(6, 15, 6), float64] */;
  (%877,)
}

def @func_2077(%var_2075: Tensor[(81), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
  %878 = @func_1903() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) */;
  %879 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %881 = cast(%var_2075, dtype="float64") /* ty=Tensor[(81), float64] */;
  %882 = reshape(%881, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %883 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %884 = %878.0;
  %885 = sigmoid(%880) /* ty=Tensor[(1, 1, 13), float32] */;
  %886 = @func_270(%882) /* ty=Tensor[(9, ?, 9), float64] */;
  (%883, %884, %885, %886, %var_2075)
}

def @func_6957() -> (Tensor[(1, 1, 13), float64],) {
  %887 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  (%887,)
}

def @func_8018() -> Tensor[(1, 1, 13), float64] {
  @func_3899() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_10094() -> (Tensor[(1, 1, 13), float32],) {
  %888 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  (%888,)
}

def @func_8081() -> Tensor[(1, 1, 13), float32] {
  @func_2304() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_2115() -> Tensor[(1, 1, 13), float64] {
  @func_1828() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_10569() -> Tensor[(8, 7, 15), float64] {
  %889 = @func_4990() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(8, 7, 15), float64], Tensor[(420, 2), float32]) */;
  %889.1
}

def @func_10803(%var_10798: Tensor[(16, 9, 3), float64]) -> (Tensor[(16, 9, 3), float64],) {
  %890 = cast(%var_10798, dtype="float64") /* ty=Tensor[(16, 9, 3), float64] */;
  %891 = acos(%890) /* ty=Tensor[(16, 9, 3), float64] */;
  (%891,)
}

def @func_7382(%var_7307: Tensor[(540), float32]) -> (Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(540), float32], Tensor[(1, 1, 13), float64], Tensor[(81), bool], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  %892 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %893 = cast(%var_7307, dtype="float32") /* ty=Tensor[(540), float32] */;
  %894 = reshape(%893, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), float32] */;
  %895 = cast(meta[relay.Constant][40] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %896 = reshape(%895, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %897 = %892.0;
  %898 = @func_4029(%894) /* ty=Tensor[(3, 15, 12), float32] */;
  %899 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
  %900 = @func_2982(%896) /* ty=Tensor[(81), bool] */;
  %901 = @func_4553() /* ty=Tensor[(1, 1, 13), float32] */;
  (%897, %898, %var_7307, %899, %900, meta[relay.Constant][40] /* ty=Tensor[(81), float64] */, %901)
}

def @func_7584() -> (Tensor[(81), int8], Tensor[(3, 27), uint64]) {
  %902 = @func_5162() /* ty=(Tensor[(81), int8],) */;
  %903 = %902.0;
  %904 = cast(%903, dtype="float64") /* ty=Tensor[(81), float64] */;
  %905 = reshape(%904, newshape=[3, 27]) /* ty=Tensor[(3, 27), float64] */;
  %906 = @func_6274(%905) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) */;
  %907 = %906.1;
  (%903, %907)
}

def @func_5332() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %908 = @func_5093() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) */;
  %909 = %908.2;
  %910 = cast(%909, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %911 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %912 = cosh(%910) /* ty=Tensor[(1, 1, 13), float64] */;
  %913 = %911.2;
  (%912, %913)
}

def @func_10990() -> (Tensor[(1, 1, 13), float64],) {
  %914 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %915 = %914.1;
  (%915,)
}

def @func_4990() -> (Tensor[(1, 1, 13), float64], Tensor[(8, 7, 15), float64], Tensor[(420, 2), float32]) {
  %916 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %917 = cast(meta[relay.Constant][41] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %918 = reshape(%917, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %919 = %916.1;
  %920 = @func_3980(%918) /* ty=Tensor[(8, 7, 15), float64] */;
  (%919, %920, meta[relay.Constant][41] /* ty=Tensor[(420, 2), float32] */)
}

def @func_9835() -> Tensor[(1, 1, 13), float64] {
  @func_7176() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_2982(%var_2970: Tensor[(81), float64]) -> Tensor[(81), bool] {
  %921 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %922 = %921.1;
  %923 = cast(%var_2970, dtype="bool") /* ty=Tensor[(81), bool] */;
  %924 = shape_of(%922, dtype="int32") /* ty=Tensor[(1), int32] */;
  %925 = cast(%922, dtype="bool") /* ty=Tensor[(81), bool] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%925, %926) /* ty=Tensor[(81), bool] */
}

def @func_1403(%var_1294: Tensor[(15, 16, 7), float32], %var_1327: Tensor[(81), float64], %var_1352: Tensor[(1120), int64]) -> (Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], int64, Tensor[(1120), int64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64]) {
  %927 = cast(%var_1294, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %928 = log2(%927) /* ty=Tensor[(15, 16, 7), float32] */;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %930 = acos(%929) /* ty=Tensor[(15, 16, 7), float64] */;
  %931 = cast(%930, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %932 = erf(%931) /* ty=Tensor[(15, 16, 7), float32] */;
  %933 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 16, 7), float32] */, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%932, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %937 = cast(%var_1327, dtype="float64") /* ty=Tensor[(81), float64] */;
  %938 = reshape(%937, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %939 = cast(%var_1327, dtype="float64") /* ty=Tensor[(81), float64] */;
  %940 = reshape(%939, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %941 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %942 = cast(%var_1352, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %943 = reshape(%941, newshape=[]) /* ty=int64 */;
  %944 = reshape(%942, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %945 = @func_757(%943, %944) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %946 = @func_270(%940) /* ty=Tensor[(9, ?, 9), float64] */;
  %947 = cast(%946, dtype="float64") /* ty=Tensor[(9, ?, 9), float64] */;
  %948 = reshape(%947, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %949 = cast(%var_1327, dtype="float64") /* ty=Tensor[(81), float64] */;
  %950 = reshape(%949, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %951 = @func_270(%948) /* ty=Tensor[(9, ?, 9), float64] */;
  %952 = cast(%951, dtype="float64") /* ty=Tensor[(9, ?, 9), float64] */;
  %953 = reshape(%952, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %954 = cast(%930, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %955 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %956 = cast(%932, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %958 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %959 = cast(%var_1352, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %960 = reshape(%958, newshape=[]) /* ty=int64 */;
  %961 = reshape(%959, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %962 = @func_757(%960, %961) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %963 = floor_mod(%935, %936) /* ty=Tensor[(15, 16, 7), float64] */;
  %964 = @func_270(%938) /* ty=Tensor[(9, ?, 9), float64] */;
  %965 = %945.1;
  %966 = @func_270(%950) /* ty=Tensor[(9, ?, 9), float64] */;
  %967 = @func_270(%953) /* ty=Tensor[(9, ?, 9), float64] */;
  %968 = add(%956, %957) /* ty=Tensor[(15, 16, 7), float64] */;
  %969 = %962.1;
  (%963, %964, %var_1327, %946, %965, 7 /* ty=int64 */, %var_1352, %951, %966, %967, %968, %969)
}

def @func_11073(%var_11067: Tensor[(5, 2, 13), float32]) -> Tensor[(5, 2, 13), int64] {
  %970 = @func_10516() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %971 = %970.0;
  %972 = cast(%971, dtype="int64") /* ty=Tensor[(1, 1, 13), int64] */;
  %973 = cast(%var_11067, dtype="int64") /* ty=Tensor[(5, 2, 13), int64] */;
  logical_xor(%972, %973) /* ty=Tensor[(5, 2, 13), int64] */
}

def @func_3980(%var_3959: Tensor[(8, 7, 15), float32]) -> Tensor[(8, 7, 15), float64] {
  %974 = cast(%var_3959, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %975 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(8, 7, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %976 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %978 = power(%976, %977) /* ty=Tensor[(8, 7, 15), float32] */;
  %979 = cast(%978, dtype="float64") /* ty=Tensor[(8, 7, 15), float64] */;
  cosh(%979) /* ty=Tensor[(8, 7, 15), float64] */
}

def @func_2484() -> (Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) {
  %980 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
  %981 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %982 = %981.0;
  %983 = cast(%982, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %984 = shape_of(%980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %985 = cast(%980, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %987 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %988 = %987.1;
  %989 = cast(%988, dtype="float64") /* ty=Tensor[(81), float64] */;
  %990 = reshape(%989, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %991 = @func_270(%990) /* ty=Tensor[(9, ?, 9), float64] */;
  %992 = cast(%988, dtype="float32") /* ty=Tensor[(81), float32] */;
  %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%991, dtype="float32") /* ty=Tensor[(9, ?, 9), float32] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %996 = cast(meta[relay.Constant][44] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %997 = reshape(%996, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %998 = @func_2050(%997) /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) */;
  %999 = divide(%985, %986) /* ty=Tensor[(?, ?, 13), float64] */;
  %1000 = power(%994, %995) /* ty=Tensor[(9, ?, 9), float32] */;
  %1001 = %998.0;
  (%999, %1000, %1001, meta[relay.Constant][44] /* ty=Tensor[(1120), int64] */)
}

def @func_3541() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  %1002 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %1003 = %1002.0;
  %1004 = @func_2115() /* ty=Tensor[(1, 1, 13), float64] */;
  (%1003, %1004)
}

def @func_5503() -> (Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) {
  %1005 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %1006 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %1007 = %1005.3;
  %1008 = %1006.0;
  (%1007, %1008)
}

def @func_6764() -> Tensor[(81), int8] {
  @func_6120() /* ty=Tensor[(81), int8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2024() -> Tensor[(1, 1, 13), float64] {
  %0 = fn () -> Tensor[(1, 1, 13), float64] {
    @func_1917() /* ty=Tensor[(1, 1, 13), float64] */
  };
  %0() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_7289() -> Tensor[(1, 1, 13), float64] {
  %2 = fn () -> Tensor[(1, 1, 13), float64] {
    %1 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %1.1
  };
  %2() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_9287() -> Tensor[(1, 1, 13), float32] {
  %3 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %3.0
}

def @func_10348(%var_10344: Tensor[(54, 10), float64], %var_10345: Tensor[(200, 1), float32], %var_10346: Tensor[(54, 10), float64], %var_10347: Tensor[(54, 10), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(54, 10), uint32], Tensor[(5, ?, 13), bool], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32], Tensor[(12, 1, 12), float32], Tensor[(144), float32], Tensor[(81), int8], Tensor[(169, 1), float64], Tensor[(1, 1, 13), float32], Tensor[(7, 3, 13), bool], Tensor[(54, 10), bool], Tensor[(54, 10), float64], Tensor[(54, 10), float32], Tensor[(1, 1, 13), float32], Tensor[(54, 10), bool]) {
  %65 = fn (%var_10162: Tensor[(54, 10), float64], %var_10214: Tensor[(200, 1), float32], %var_10254: Tensor[(54, 10), float64], %var_10277: Tensor[(54, 10), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(54, 10), uint32], Tensor[(5, ?, 13), bool], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32], Tensor[(12, 1, 12), float32], Tensor[(144), float32], Tensor[(81), int8], Tensor[(169, 1), float64], Tensor[(1, 1, 13), float32], Tensor[(7, 3, 13), bool], Tensor[(54, 10), bool], Tensor[(54, 10), float64], Tensor[(54, 10), float32], Tensor[(1, 1, 13), float32], Tensor[(54, 10), bool]) {
    %4 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %5 = @func_4711() /* ty=(Tensor[(81), float64],) */;
    %6 = @func_6210() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(54, 10), float64]) */;
    %7 = %6.3;
    %8 = cast(%var_10162, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
    %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(2), int32] */;
    %10 = cast(%7, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %12 = multiply(%10, %11) /* ty=Tensor[(54, 10), uint32] */;
    %13 = cast(%12, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
    %14 = exp(%13) /* ty=Tensor[(54, 10), float32] */;
    %15 = cast(%7, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
    %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
    %17 = cast(%14, dtype="uint32") /* ty=Tensor[(54, 10), uint32] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %19 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
    %20 = cast(%var_10214, dtype="float32") /* ty=Tensor[(200, 1), float32] */;
    %21 = reshape(%20, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
    %22 = @func_9041(%21) /* ty=(Tensor[(5, 4, 10), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1120), int64]) */;
    %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %24 = reshape(%23, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float32] */;
    %25 = @func_8992(%24) /* ty=(Tensor[(12, 1, 12), float32],) */;
    %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(169, 1), float64] */, dtype="float64") /* ty=Tensor[(169, 1), float64] */;
    %27 = reshape(%26, newshape=[1, 13, 13]) /* ty=Tensor[(1, 13, 13), float64] */;
    %28 = @func_6405(%27) /* ty=(Tensor[(1, 13, 13), float32], Tensor[(81), int8]) */;
    %29 = @func_5054() /* ty=(Tensor[(7, 3, 13), bool],) */;
    %30 = cast(%14, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
    %31 = asin(%30) /* ty=Tensor[(54, 10), float64] */;
    %32 = cast(%12, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
    %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(2), int32] */;
    %34 = cast(%31, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %36 = cast(%var_10277, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
    %37 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
    %38 = cast(%14, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
    %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %40 = cast(%var_10254, dtype="int64") /* ty=Tensor[(54, 10), int64] */;
    %41 = shape_of(%31, dtype="int32") /* ty=Tensor[(2), int32] */;
    %42 = cast(%31, dtype="int64") /* ty=Tensor[(54, 10), int64] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %44 = subtract(%42, %43) /* ty=Tensor[(54, 10), int64] */;
    %45 = cast(%44, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
    %46 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %47 = cast(%31, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
    %48 = shape_of(%var_10162, dtype="int32") /* ty=Tensor[(2), int32] */;
    %49 = cast(%var_10162, dtype="bool") /* ty=Tensor[(54, 10), bool] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %51 = %4.0;
    %52 = %5.0;
    %53 = right_shift(%17, %18) /* ty=Tensor[(54, 10), uint32] */;
    %54 = %19.0;
    %55 = %22.0;
    %56 = %25.0;
    %57 = %28.1;
    %58 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
    %59 = %29.0;
    %60 = equal(%34, %35) /* ty=Tensor[(54, 10), bool] */;
    %61 = floor_divide(%38, %39) /* ty=Tensor[(54, 10), float64] */;
    %62 = rsqrt(%45) /* ty=Tensor[(54, 10), float32] */;
    %63 = %46.0;
    %64 = logical_and(%49, %50) /* ty=Tensor[(54, 10), bool] */;
    (%51, %52, %53, %54, %55, %var_10214, %56, meta[relay.Constant][0] /* ty=Tensor[(144), float32] */, %57, meta[relay.Constant][1] /* ty=Tensor[(169, 1), float64] */, %58, %59, %60, %61, %62, %63, %64)
  };
  %65(%var_10344, %var_10345, %var_10346, %var_10347) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(54, 10), uint32], Tensor[(5, ?, 13), bool], Tensor[(5, 4, 10), float32], Tensor[(200, 1), float32], Tensor[(12, 1, 12), float32], Tensor[(144), float32], Tensor[(81), int8], Tensor[(169, 1), float64], Tensor[(1, 1, 13), float32], Tensor[(7, 3, 13), bool], Tensor[(54, 10), bool], Tensor[(54, 10), float64], Tensor[(54, 10), float32], Tensor[(1, 1, 13), float32], Tensor[(54, 10), bool]) */
}

def @func_10631(%var_10630: Tensor[(168, 1), uint8]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168, 1), uint8]) {
  %73 = fn (%var_10625: Tensor[(168, 1), uint8]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168, 1), uint8]) {
    %66 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
    %67 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %68 = cast(%var_10625, dtype="uint8") /* ty=Tensor[(168, 1), uint8] */;
    %69 = reshape(%68, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), uint8] */;
    %70 = %66.1;
    %71 = %67.0;
    %72 = @func_7410(%69) /* ty=Tensor[(6, 4, 7), uint8] */;
    (%70, %71, %72, %var_10625)
  };
  %73(%var_10630) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168, 1), uint8]) */
}

def @func_2240() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  @func_2238() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */
}

def @func_4454(%var_4453: Tensor[(13, 5, 1), uint8]) -> (Tensor[(13, 5, ?), bool], Tensor[(81), float64]) {
  %80 = fn (%var_4440: Tensor[(13, 5, 1), uint8]) -> (Tensor[(13, 5, ?), bool], Tensor[(81), float64]) {
    %74 = cast(%var_4440, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
    %75 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(13, 5, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 5, 1), uint8] */, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %78 = less_equal(%76, %77) /* ty=Tensor[(13, 5, ?), bool] */;
    %79 = @func_4390() /* ty=Tensor[(81), float64] */;
    (%78, %79)
  };
  %80(%var_4453) /* ty=(Tensor[(13, 5, ?), bool], Tensor[(81), float64]) */
}

def @main(%var_11746: Tensor[(144), float32], %var_11751: Tensor[(9, 9), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(3, 15, 12), float32], Tensor[(540), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(3, 27), uint64], Tensor[(9, 9), float64], Tensor[(12, ?, 12), uint64]) {
  %81 = @func_5334() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %83 = reshape(%82, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), float32] */;
  %84 = @func_2871() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %85 = %84.2;
  %86 = @func_5692() /* ty=Tensor[(1, 1, 13), float64] */;
  %87 = cast(%86, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %88 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%85, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = cast(%var_11751, dtype="float64") /* ty=Tensor[(9, 9), float64] */;
  %92 = reshape(%91, newshape=[3, 27]) /* ty=Tensor[(3, 27), float64] */;
  %93 = @func_6276(%92) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) */;
  %94 = cast(%var_11746, dtype="float32") /* ty=Tensor[(144), float32] */;
  %95 = reshape(%94, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float32] */;
  %96 = @func_8994(%95) /* ty=(Tensor[(12, 1, 12), float32],) */;
  %97 = %96.0;
  %98 = cast(%var_11746, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="uint64") /* ty=Tensor[(12, 1, 12), uint64] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %102 = %81.0;
  %103 = @func_4029(%83) /* ty=Tensor[(3, 15, 12), float32] */;
  %104 = greater(%89, %90) /* ty=Tensor[(?, ?, 13), bool] */;
  %105 = @func_5692() /* ty=Tensor[(1, 1, 13), float64] */;
  %106 = %93.1;
  %107 = multiply(%100, %101) /* ty=Tensor[(12, ?, 12), uint64] */;
  (%102, %103, meta[relay.Constant][3] /* ty=Tensor[(540), float32] */, %104, %105, %106, %var_11751, %107)
}

def @func_6663() -> (Tensor[(1120), int64], Tensor[(1, 1, 13), float64]) {
  %108 = @func_5503() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) */;
  %109 = @func_3867() /* ty=(Tensor[(1120), int64], Tensor[(234), float64], Tensor[(1, 1, 13), float64]) */;
  %110 = %108.0;
  %111 = %109.2;
  (%110, %111)
}

def @func_1403(%var_1294: Tensor[(15, 16, 7), float32], %var_1327: Tensor[(81), float64], %var_1352: Tensor[(1120), int64]) -> (Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], int64, Tensor[(1120), int64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64]) {
  %112 = cast(%var_1294, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %113 = log2(%112) /* ty=Tensor[(15, 16, 7), float32] */;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %115 = acos(%114) /* ty=Tensor[(15, 16, 7), float64] */;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(15, 16, 7), float32] */;
  %117 = erf(%116) /* ty=Tensor[(15, 16, 7), float32] */;
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 16, 7), float32] */, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %122 = cast(%var_1327, dtype="float64") /* ty=Tensor[(81), float64] */;
  %123 = reshape(%122, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %124 = cast(%var_1327, dtype="float64") /* ty=Tensor[(81), float64] */;
  %125 = reshape(%124, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %126 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %127 = cast(%var_1352, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %128 = reshape(%126, newshape=[]) /* ty=int64 */;
  %129 = reshape(%127, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %130 = @func_757(%128, %129) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %131 = @func_270(%125) /* ty=Tensor[(9, ?, 9), float64] */;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(9, ?, 9), float64] */;
  %133 = reshape(%132, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %134 = cast(%var_1327, dtype="float64") /* ty=Tensor[(81), float64] */;
  %135 = reshape(%134, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %136 = @func_270(%133) /* ty=Tensor[(9, ?, 9), float64] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(9, ?, 9), float64] */;
  %138 = reshape(%137, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %139 = cast(%115, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %140 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%117, dtype="float64") /* ty=Tensor[(15, 16, 7), float64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %143 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %144 = cast(%var_1352, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %145 = reshape(%143, newshape=[]) /* ty=int64 */;
  %146 = reshape(%144, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
  %147 = @func_757(%145, %146) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
  %148 = floor_mod(%120, %121) /* ty=Tensor[(15, 16, 7), float64] */;
  %149 = @func_270(%123) /* ty=Tensor[(9, ?, 9), float64] */;
  %150 = %130.1;
  %151 = @func_270(%135) /* ty=Tensor[(9, ?, 9), float64] */;
  %152 = @func_270(%138) /* ty=Tensor[(9, ?, 9), float64] */;
  %153 = add(%141, %142) /* ty=Tensor[(15, 16, 7), float64] */;
  %154 = %147.1;
  (%148, %149, %var_1327, %131, %150, 7 /* ty=int64 */, %var_1352, %136, %151, %152, %153, %154)
}

def @func_1593() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) {
  %161 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) {
    %155 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %156 = cast(meta[relay.Constant][5] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
    %157 = reshape(%156, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
    %158 = @func_1495(%157) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
    %159 = %155.1;
    %160 = %158.3;
    (%159, %160, meta[relay.Constant][5] /* ty=Tensor[(234), float64] */)
  };
  %161() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */
}

def @func_6440() -> Tensor[(81), int8] {
  %163 = fn () -> Tensor[(81), int8] {
    %162 = @func_5162() /* ty=(Tensor[(81), int8],) */;
    %162.0
  };
  %163() /* ty=Tensor[(81), int8] */
}

def @func_6640(%var_6625: Tensor[(6, 15, 6), float64]) -> (Tensor[(6, 15, 6), float64],) {
  %164 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
  %165 = shape_of(%var_6625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_6625, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %168 = mod(%166, %167) /* ty=Tensor[(6, 15, 6), float64] */;
  (%168,)
}

def @func_1454() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %171 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
    %169 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
    %170 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
    (%169, %170)
  };
  %171() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_5191() -> (Tensor[(81), float64],) {
  %172 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %173 = %172.2;
  (%173,)
}

def @func_8376() -> (Tensor[(?, ?, 13), bool],) {
  @func_8374() /* ty=(Tensor[(?, ?, 13), bool],) */
}

def @func_11366() -> Tensor[(5, 5, 9), float64] {
  %174 = fn () -> Tensor[(5, 5, 9), float64] {
    @func_11027() /* ty=Tensor[(5, 5, 9), float64] */
  };
  %174() /* ty=Tensor[(5, 5, 9), float64] */
}

def @func_5385(%var_5384: Tensor[(5, 5, 9), float64]) -> (Tensor[(5, 5, 9), float64],) {
  %177 = fn (%var_5374: Tensor[(5, 5, 9), float64]) -> (Tensor[(5, 5, 9), float64],) {
    %175 = cast(%var_5374, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
    %176 = tan(%175) /* ty=Tensor[(5, 5, 9), float64] */;
    (%176,)
  };
  %177(%var_5384) /* ty=(Tensor[(5, 5, 9), float64],) */
}

def @func_1872() -> Tensor[(1, 1, 13), float32] {
  @func_1870() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_7178() -> Tensor[(1, 1, 13), float64] {
  @func_7176() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_7925(%var_7915: int64, %var_7923: Tensor[(2912), float32]) -> (Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64], int64, Tensor[(16, 14, 13), bool], Tensor[(2912), float32]) {
  %178 = cast(%var_7915, dtype="int64") /* ty=int64 */;
  %179 = reshape(%178, newshape=[]) /* ty=int64 */;
  %180 = @func_1981(%179) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
  %181 = cast(%var_7923, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %182 = reshape(%181, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), float32] */;
  %183 = @func_4635(%182) /* ty=(Tensor[(16, 14, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %184 = @func_4955() /* ty=Tensor[(?, ?, 13), bool] */;
  %185 = %180.0;
  %186 = %183.0;
  (%184, %185, %var_7915, %186, %var_7923)
}

def @func_8701() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %190 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
    %187 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %188 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
    %189 = %187.0;
    (%188, %189)
  };
  %190() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) */
}

def @func_5483(%var_5481: Tensor[(81), float64], %var_5482: Tensor[(65), uint8]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(208), float32], Tensor[(81), float64], Tensor[(81), float64], Tensor[(65), uint8], Tensor[(1, 1, 13), float64]) {
  %206 = fn (%var_5460: Tensor[(81), float64], %var_5467: Tensor[(65), uint8]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(208), float32], Tensor[(81), float64], Tensor[(81), float64], Tensor[(65), uint8], Tensor[(1, 1, 13), float64]) {
    %191 = @func_3541() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
    %192 = cast(meta[relay.Constant][7] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %193 = cast(%var_5460, dtype="float64") /* ty=Tensor[(81), float64] */;
    %194 = reshape(%192, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), float32] */;
    %195 = reshape(%193, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
    %196 = @func_3607(%194, %195) /* ty=(Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(16, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
    %197 = cast(%var_5467, dtype="uint8") /* ty=Tensor[(65), uint8] */;
    %198 = reshape(%197, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint8] */;
    %199 = @func_4452(%198) /* ty=(Tensor[(13, 5, ?), bool], Tensor[(81), float64]) */;
    %200 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %201 = @func_3899() /* ty=Tensor[(1, 1, 13), float64] */;
    %202 = %191.0;
    %203 = %196.1;
    %204 = %199.1;
    %205 = %200.0;
    (%201, %202, %203, meta[relay.Constant][7] /* ty=Tensor[(208), float32] */, %var_5460, %204, %var_5467, %205)
  };
  %206(%var_5481, %var_5482) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(208), float32], Tensor[(81), float64], Tensor[(81), float64], Tensor[(65), uint8], Tensor[(1, 1, 13), float64]) */
}

def @func_11305(%var_11303: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  @func_11302(%var_11303) /* ty=(Tensor[(8, 1, 13), float32], Tensor[(1, 1, 13), float32]) */
}

def @func_3611(%var_3609: Tensor[(16, 1, 13), float32], %var_3610: Tensor[(27, 3), float64]) -> (Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(16, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  @func_3607(%var_3609, %var_3610) /* ty=(Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(16, 1, 13), float32], Tensor[(1, 1, 13), float64]) */
}

def @func_2982(%var_2970: Tensor[(81), float64]) -> Tensor[(81), bool] {
  %207 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %208 = %207.1;
  %209 = cast(%var_2970, dtype="bool") /* ty=Tensor[(81), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(1), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(81), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%211, %212) /* ty=Tensor[(81), bool] */
}

def @func_6985() -> (Tensor[(1, 1, 13), float32],) {
  %214 = fn () -> (Tensor[(1, 1, 13), float32],) {
    %213 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
    (%213,)
  };
  %214() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_10516() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %215 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %216 = @func_6791() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) */;
  %217 = %215.1;
  %218 = %216.1;
  (%217, %218)
}

def @func_4888() -> (Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %219 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %220 = cast(%219, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %221 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 3, 13), float64] */, dtype="bool") /* ty=Tensor[(7, 3, 13), bool] */;
  %222 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %223 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %224 = less(%220, %221) /* ty=Tensor[(7, 3, 13), bool] */;
  %225 = %222.0;
  %226 = %223.0;
  (%224, %225, %226)
}

def @func_2669(%var_2651: Tensor[(1, 16, 13), float64]) -> (Tensor[(1, 16, 13), int8],) {
  %227 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %228 = cast(%227, dtype="int8") /* ty=Tensor[(1, 1, 13), int8] */;
  %229 = cast(%var_2651, dtype="int8") /* ty=Tensor[(1, 16, 13), int8] */;
  %230 = bitwise_or(%228, %229) /* ty=Tensor[(1, 16, 13), int8] */;
  (%230,)
}

def @func_9041(%var_9012: Tensor[(5, 4, 10), float32]) -> (Tensor[(5, 4, 10), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1120), int64]) {
  %231 = cast(%var_9012, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
  %232 = @func_8648() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %233 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %234 = @func_5503() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) */;
  %235 = asin(%231) /* ty=Tensor[(5, 4, 10), float32] */;
  %236 = %232.1;
  %237 = %233.0;
  %238 = %234.0;
  (%235, %236, %237, %238)
}

def @func_6075() -> (Tensor[(1, 1, 13), float64],) {
  %239 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
  (%239,)
}

def @func_5253() -> (Tensor[(234), float64], Tensor[(?, ?, 13), bool]) {
  %240 = @func_2387() /* ty=(Tensor[(234), float64],) */;
  %241 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %242 = %240.0;
  %243 = %241.4;
  (%242, %243)
}

def @func_8020() -> Tensor[(1, 1, 13), float64] {
  @func_8018() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5334() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */
}

def @func_10671() -> Tensor[(81), float64] {
  %244 = fn () -> Tensor[(81), float64] {
    @func_4390() /* ty=Tensor[(81), float64] */
  };
  %244() /* ty=Tensor[(81), float64] */
}

def @func_8082() -> Tensor[(1, 1, 13), float32] {
  %245 = fn () -> Tensor[(1, 1, 13), float32] {
    @func_2304() /* ty=Tensor[(1, 1, 13), float32] */
  };
  %245() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_6524() -> Tensor[(1, 1, 13), float64] {
  @func_6522() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5411() -> Tensor[(3, 27), float32] {
  %249 = fn () -> Tensor[(3, 27), float32] {
    %246 = @func_1903() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) */;
    %247 = %246.2;
    %248 = cast(%247, dtype="float32") /* ty=Tensor[(3, 27), float32] */;
    acosh(%248) /* ty=Tensor[(3, 27), float32] */
  };
  %249() /* ty=Tensor[(3, 27), float32] */
}

def @func_10029() -> Tensor[(234), float64] {
  %251 = fn () -> Tensor[(234), float64] {
    %250 = @func_7941() /* ty=(Tensor[(234), float64],) */;
    %250.0
  };
  %251() /* ty=Tensor[(234), float64] */
}

def @func_4890() -> (Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_11260(%var_11259: Tensor[(90), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(90), float32]) {
  %258 = fn (%var_11254: Tensor[(90), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(90), float32]) {
    %252 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %253 = cast(%var_11254, dtype="float32") /* ty=Tensor[(90), float32] */;
    %254 = reshape(%253, newshape=[10, 9, 1]) /* ty=Tensor[(10, 9, 1), float32] */;
    %255 = @func_7511(%254) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %256 = %252.0;
    %257 = %255.1;
    (%256, %257, %var_11254)
  };
  %258(%var_11259) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(90), float32]) */
}

def @func_2869() -> (Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) {
  %259 = @func_2387() /* ty=(Tensor[(234), float64],) */;
  %260 = %259.0;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(234), float64] */;
  %262 = reshape(%261, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %263 = @func_1495(%262) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %264 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %265 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %266 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %267 = %266.0;
  %268 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %269 = %268.0;
  %270 = cast(%269, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %271 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%267, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = greater_equal(%272, %273) /* ty=Tensor[(?, ?, 13), bool] */;
  %275 = cast(%267, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %280 = %263.3;
  %281 = %264.0;
  %282 = %265.0;
  %283 = logical_and(%277, %278) /* ty=Tensor[(?, ?, 13), bool] */;
  %284 = %279.1;
  (%260, %280, %281, %282, %283, %284)
}

def @func_3193(%var_3191: Tensor[(81, 1), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(234), bool], Tensor[(2, 560), bool], Tensor[(1, 1, 13), float64], Tensor[(81, 1), float64]) {
  @func_3190(%var_3191) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(234), bool], Tensor[(2, 560), bool], Tensor[(1, 1, 13), float64], Tensor[(81, 1), float64]) */
}

def @func_11028() -> Tensor[(5, 5, 9), float64] {
  %286 = fn () -> Tensor[(5, 5, 9), float64] {
    %285 = @func_9521() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(5, 5, 9), float64]) */;
    %285.2
  };
  %286() /* ty=Tensor[(5, 5, 9), float64] */
}

def @func_2193() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %292 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
    %287 = cast(meta[relay.Constant][9] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
    %288 = reshape(%287, newshape=[81]) /* ty=Tensor[(81), float64] */;
    %289 = @func_2077(%288) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
    %290 = @func_1842() /* ty=Tensor[(1, 1, 13), float64] */;
    %291 = %289.0;
    (%290, %291, meta[relay.Constant][9] /* ty=Tensor[(81), float64] */)
  };
  %292() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */
}

def @func_5601(%var_5600: Tensor[(1, 10, 13), float64]) -> (Tensor[(81), float64], Tensor[(1, 10, 13), bool]) {
  %300 = fn (%var_5591: Tensor[(1, 10, 13), float64]) -> (Tensor[(81), float64], Tensor[(1, 10, 13), bool]) {
    %293 = @func_3237() /* ty=(Tensor[(81), float64],) */;
    %294 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %295 = %294.0;
    %296 = cast(%295, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
    %297 = cast(%var_5591, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
    %298 = %293.0;
    %299 = equal(%296, %297) /* ty=Tensor[(1, 10, 13), bool] */;
    (%298, %299)
  };
  %300(%var_5600) /* ty=(Tensor[(81), float64], Tensor[(1, 10, 13), bool]) */
}

def @func_9133() -> Tensor[(1, 1, 13), float64] {
  @func_9131() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8403() -> Tensor[(1, 1, 13), float64] {
  @func_8401() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_7412(%var_7411: Tensor[(6, 4, 7), uint8]) -> Tensor[(6, 4, 7), uint8] {
  %305 = fn (%var_7394: Tensor[(6, 4, 7), uint8]) -> Tensor[(6, 4, 7), uint8] {
    %301 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 4, 7), uint8] */, dtype="uint8") /* ty=Tensor[(6, 4, 7), uint8] */;
    %302 = shape_of(%var_7394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%var_7394, dtype="uint8") /* ty=Tensor[(6, 4, 7), uint8] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%303, %304) /* ty=Tensor[(6, 4, 7), uint8] */
  };
  %305(%var_7411) /* ty=Tensor[(6, 4, 7), uint8] */
}

def @func_4712() -> (Tensor[(81), float64],) {
  %308 = fn () -> (Tensor[(81), float64],) {
    %306 = @func_3237() /* ty=(Tensor[(81), float64],) */;
    %307 = %306.0;
    (%307,)
  };
  %308() /* ty=(Tensor[(81), float64],) */
}

def @func_6959() -> (Tensor[(1, 1, 13), float64],) {
  @func_6957() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_7794(%var_7786: float32, %var_7787: Tensor[(108), float32]) -> (Tensor[(5, ?, 13), bool], Tensor[(81), float64], float32, Tensor[(108), float32]) {
  %309 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
  %310 = cast(%var_7786, dtype="float32") /* ty=float32 */;
  %311 = cast(%var_7787, dtype="float32") /* ty=Tensor[(108), float32] */;
  %312 = reshape(%310, newshape=[]) /* ty=float32 */;
  %313 = reshape(%311, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
  %314 = @func_3369(%312, %313) /* ty=(Tensor[(81), float64], Tensor[(1, 9, 12), bool]) */;
  %315 = %309.0;
  %316 = %314.0;
  (%315, %316, %var_7786, %var_7787)
}

def @func_5806(%var_5805: Tensor[(56, 20), int64]) -> (Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) {
  %340 = fn (%var_5768: Tensor[(56, 20), int64]) -> (Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) {
    %317 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
    %318 = cast(%var_5768, dtype="int64") /* ty=Tensor[(56, 20), int64] */;
    %319 = reshape(%318, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
    %320 = @func_2050(%319) /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) */;
    %321 = cast(7.0686f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %322 = cast(meta[relay.Constant][11] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
    %323 = reshape(%321, newshape=[]) /* ty=float32 */;
    %324 = reshape(%322, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
    %325 = @func_3369(%323, %324) /* ty=(Tensor[(81), float64], Tensor[(1, 9, 12), bool]) */;
    %326 = @func_5284() /* ty=Tensor[(81), float64] */;
    %327 = cast(%326, dtype="float32") /* ty=Tensor[(81), float32] */;
    %328 = acos(%327) /* ty=Tensor[(81), float32] */;
    %329 = cast(%328, dtype="float32") /* ty=Tensor[(81), float32] */;
    %330 = @func_3012() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %331 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %332 = @func_3395() /* ty=(Tensor[(81), float64],) */;
    %333 = %317.1;
    %334 = %320.2;
    %335 = %325.0;
    %336 = log(%329) /* ty=Tensor[(81), float32] */;
    %337 = %330.0;
    %338 = %331.0;
    %339 = %332.0;
    (%333, %334, %var_5768, %335, 7.0686f /* ty=float32 */, meta[relay.Constant][11] /* ty=Tensor[(108), float32] */, %336, %337, %338, %339)
  };
  %340(%var_5805) /* ty=(Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) */
}

def @func_3237() -> (Tensor[(81), float64],) {
  %341 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %342 = %341.2;
  (%342,)
}

def @func_9522() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(5, 5, 9), float64]) {
  %351 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(5, 5, 9), float64]) {
    %343 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %344 = @func_5093() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) */;
    %345 = %344.1;
    %346 = cast(%345, dtype="float64") /* ty=Tensor[(81), float64] */;
    %347 = reshape(%346, newshape=[3, 27]) /* ty=Tensor[(3, 27), float64] */;
    %348 = @func_6274(%347) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) */;
    %349 = %343.1;
    %350 = %348.2;
    (%349, %345, %350)
  };
  %351() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(5, 5, 9), float64]) */
}

def @func_9911(%var_9847: Tensor[(10, 5, 9), float32], %var_9877: Tensor[(225), float64]) -> (Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(10, 5, 9), bool]) {
  %352 = @func_9674() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %353 = cast(%var_9877, dtype="float64") /* ty=Tensor[(225), float64] */;
  %354 = reshape(%353, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
  %355 = @func_5383(%354) /* ty=(Tensor[(5, 5, 9), float64],) */;
  %356 = cast(%var_9847, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %357 = tan(%356) /* ty=Tensor[(10, 5, 9), float32] */;
  %358 = cast(%var_9847, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = %352.0;
  %363 = %355.0;
  %364 = less(%360, %361) /* ty=Tensor[(10, 5, 9), bool] */;
  (%362, %363, %var_9877, %364)
}

def @func_1983(%var_1982: int64) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) {
  %378 = fn (%var_1968: int64) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) {
    %365 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %366 = cast(%var_1968, dtype="int64") /* ty=int64 */;
    %367 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 560), int64] */, dtype="int64") /* ty=Tensor[(2, 560), int64] */;
    %368 = reshape(%366, newshape=[]) /* ty=int64 */;
    %369 = reshape(%367, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
    %370 = @func_757(%368, %369) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
    %371 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
    %372 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 560), int64] */, dtype="bool") /* ty=Tensor[(2, 560), bool] */;
    %373 = cast(%var_1968, dtype="bool") /* ty=bool */;
    %374 = %365.0;
    %375 = %370.2;
    %376 = %371.0;
    %377 = equal(%372, %373) /* ty=Tensor[(2, 560), bool] */;
    (%374, %375, %376, %377)
  };
  %378(%var_1982) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */
}

def @func_7798(%var_7796: float32, %var_7797: Tensor[(108), float32]) -> (Tensor[(5, ?, 13), bool], Tensor[(81), float64], float32, Tensor[(108), float32]) {
  @func_7794(%var_7796, %var_7797) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(81), float64], float32, Tensor[(108), float32]) */
}

def @func_7247() -> (Tensor[(1120), int64], Tensor[(?, ?, 13), bool]) {
  %379 = @func_5503() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) */;
  %380 = %379.0;
  %381 = @func_4955() /* ty=Tensor[(?, ?, 13), bool] */;
  (%380, %381)
}

def @func_8887(%var_8866: Tensor[(1, 15, 13), float64]) -> (Tensor[(1, 15, 13), uint64], Tensor[(1, 15, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
  %382 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %383 = %382.0;
  %384 = cast(%383, dtype="uint64") /* ty=Tensor[(1, 1, 13), uint64] */;
  %385 = cast(%var_8866, dtype="uint64") /* ty=Tensor[(1, 15, 13), uint64] */;
  %386 = cast(%var_8866, dtype="float32") /* ty=Tensor[(1, 15, 13), float32] */;
  %387 = cast(meta[relay.Constant][13] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %388 = reshape(%387, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %389 = multiply(%384, %385) /* ty=Tensor[(1, 15, 13), uint64] */;
  %390 = erf(%386) /* ty=Tensor[(1, 15, 13), float32] */;
  %391 = @func_270(%388) /* ty=Tensor[(9, ?, 9), float64] */;
  (%389, %390, %391, meta[relay.Constant][13] /* ty=Tensor[(81), float64] */)
}

def @func_4390() -> Tensor[(81), float64] {
  %392 = @func_3303() /* ty=(Tensor[(81), float64],) */;
  %392.0
}

def @func_10964() -> Tensor[(1, 1, 13), float32] {
  @func_10962() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_2053(%var_2051: Tensor[(1120), int64]) -> (Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) {
  @func_2050(%var_2051) /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) */
}

def @func_8314() -> (Tensor[(3, 27), uint64], Tensor[(13, 5, ?), bool], Tensor[(13, 5), uint8]) {
  @func_8312() /* ty=(Tensor[(3, 27), uint64], Tensor[(13, 5, ?), bool], Tensor[(13, 5), uint8]) */
}

def @func_11334(%var_11333: int64) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64) {
  %398 = fn (%var_11318: int64) -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64) {
    %393 = cast(%var_11318, dtype="int64") /* ty=int64 */;
    %394 = reshape(%393, newshape=[]) /* ty=int64 */;
    %395 = @func_1981(%394) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
    %396 = @func_7288() /* ty=Tensor[(1, 1, 13), float64] */;
    %397 = %395.1;
    (%396, %397, %var_11318)
  };
  %398(%var_11333) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64) */
}

def @func_760(%var_758: int64, %var_759: Tensor[(14, 8, 10), int64]) -> (Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) {
  %408 = fn (%var_743: int64, %var_744: Tensor[(14, 8, 10), int64]) -> (Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) {
    %399 = cast(%var_743, dtype="bool") /* ty=bool */;
    %400 = cast(%var_744, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
    %401 = cast(meta[relay.Constant][14] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
    %402 = reshape(%401, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
    %403 = cast(meta[relay.Constant][14] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
    %404 = reshape(%403, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
    %405 = equal(%399, %400) /* ty=Tensor[(14, 8, 10), bool] */;
    %406 = @func_270(%402) /* ty=Tensor[(9, ?, 9), float64] */;
    %407 = @func_270(%404) /* ty=Tensor[(9, ?, 9), float64] */;
    (%405, %406, meta[relay.Constant][14] /* ty=Tensor[(81), float64] */, %407)
  };
  %408(%var_758, %var_759) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */
}

def @func_10868() -> (Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  %420 = fn () -> (Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
    %409 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %410 = cast(meta[relay.Constant][15] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
    %411 = reshape(%410, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
    %412 = @func_5383(%411) /* ty=(Tensor[(5, 5, 9), float64],) */;
    %413 = @func_4711() /* ty=(Tensor[(81), float64],) */;
    %414 = @func_8401() /* ty=Tensor[(1, 1, 13), float64] */;
    %415 = cast(%414, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
    %416 = %409.0;
    %417 = %412.0;
    %418 = %413.0;
    %419 = log2(%415) /* ty=Tensor[(1, 1, 13), float32] */;
    (%416, %417, meta[relay.Constant][15] /* ty=Tensor[(225), float64] */, %418, %419)
  };
  %420() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) */
}

def @func_8251(%var_8250: Tensor[(540), float64]) -> (Tensor[(8, 10, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64], Tensor[(1, 1, 13), float64]) {
  %430 = fn (%var_8237: Tensor[(540), float64]) -> (Tensor[(8, 10, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64], Tensor[(1, 1, 13), float64]) {
    %421 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
    %422 = cast(%var_8237, dtype="float64") /* ty=Tensor[(540), float64] */;
    %423 = reshape(%422, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %424 = @func_6640(%423) /* ty=(Tensor[(6, 15, 6), float64],) */;
    %425 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %426 = log(%421) /* ty=Tensor[(8, 10, 13), float64] */;
    %427 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
    %428 = %424.0;
    %429 = %425.0;
    (%426, %427, %428, %var_8237, %429)
  };
  %430(%var_8250) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_6957() -> (Tensor[(1, 1, 13), float64],) {
  %431 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  (%431,)
}

def @func_6694() -> (Tensor[(81), float64], Tensor[(7, 8, 13), bool]) {
  @func_6692() /* ty=(Tensor[(81), float64], Tensor[(7, 8, 13), bool]) */
}

def @func_5875() -> (Tensor[(5, ?, 13), bool],) {
  %436 = fn () -> (Tensor[(5, ?, 13), bool],) {
    %432 = @func_4955() /* ty=Tensor[(?, ?, 13), bool] */;
    %433 = cast(%432, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
    %434 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 1, 13), bool] */, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
    %435 = less(%433, %434) /* ty=Tensor[(5, ?, 13), bool] */;
    (%435,)
  };
  %436() /* ty=(Tensor[(5, ?, 13), bool],) */
}

def @func_4804() -> Tensor[(1, 1, 13), float64] {
  @func_4802() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_7167() -> (Tensor[(81), float64], Tensor[(1120), int64], Tensor[(1120), int64]) {
  %437 = @func_4711() /* ty=(Tensor[(81), float64],) */;
  %438 = cast(meta[relay.Constant][18] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %439 = reshape(%438, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
  %440 = @func_5804(%439) /* ty=(Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) */;
  %441 = %437.0;
  %442 = %440.1;
  (%441, %442, meta[relay.Constant][18] /* ty=Tensor[(1120), int64] */)
}

def @func_7929(%var_7927: int64, %var_7928: Tensor[(2912), float32]) -> (Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64], int64, Tensor[(16, 14, 13), bool], Tensor[(2912), float32]) {
  @func_7925(%var_7927, %var_7928) /* ty=(Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64], int64, Tensor[(16, 14, 13), bool], Tensor[(2912), float32]) */
}

def @func_6276(%var_6275: Tensor[(3, 27), float64]) -> (Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) {
  %456 = fn (%var_6259: Tensor[(3, 27), float64]) -> (Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) {
    %443 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
    %444 = @func_1903() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) */;
    %445 = %444.2;
    %446 = cast(%var_6259, dtype="uint64") /* ty=Tensor[(3, 27), uint64] */;
    %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(2), int32] */;
    %448 = cast(%445, dtype="uint64") /* ty=Tensor[(3, 27), uint64] */;
    %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %450 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
    %451 = reshape(%450, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), float64] */;
    %452 = @func_5383(%451) /* ty=(Tensor[(5, 5, 9), float64],) */;
    %453 = %443.0;
    %454 = minimum(%448, %449) /* ty=Tensor[(3, 27), uint64] */;
    %455 = %452.0;
    (%453, %454, %455, meta[relay.Constant][19] /* ty=Tensor[(225), float64] */)
  };
  %456(%var_6275) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) */
}

def @func_10805(%var_10804: Tensor[(16, 9, 3), float64]) -> (Tensor[(16, 9, 3), float64],) {
  %459 = fn (%var_10798: Tensor[(16, 9, 3), float64]) -> (Tensor[(16, 9, 3), float64],) {
    %457 = cast(%var_10798, dtype="float64") /* ty=Tensor[(16, 9, 3), float64] */;
    %458 = acos(%457) /* ty=Tensor[(16, 9, 3), float64] */;
    (%458,)
  };
  %459(%var_10804) /* ty=(Tensor[(16, 9, 3), float64],) */
}

def @func_11075(%var_11074: Tensor[(5, 2, 13), float32]) -> Tensor[(5, 2, 13), int64] {
  %464 = fn (%var_11067: Tensor[(5, 2, 13), float32]) -> Tensor[(5, 2, 13), int64] {
    %460 = @func_10516() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
    %461 = %460.0;
    %462 = cast(%461, dtype="int64") /* ty=Tensor[(1, 1, 13), int64] */;
    %463 = cast(%var_11067, dtype="int64") /* ty=Tensor[(5, 2, 13), int64] */;
    logical_xor(%462, %463) /* ty=Tensor[(5, 2, 13), int64] */
  };
  %464(%var_11074) /* ty=Tensor[(5, 2, 13), int64] */
}

def @func_2238() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %465 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %466 = @func_2115() /* ty=Tensor[(1, 1, 13), float64] */;
  %467 = %465.1;
  (%466, %467)
}

def @func_8716() -> (Tensor[(1, 1, 13), float64],) {
  @func_8714() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_3982(%var_3981: Tensor[(8, 7, 15), float32]) -> Tensor[(8, 7, 15), float64] {
  %474 = fn (%var_3959: Tensor[(8, 7, 15), float32]) -> Tensor[(8, 7, 15), float64] {
    %468 = cast(%var_3959, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
    %469 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(8, 7, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %472 = power(%470, %471) /* ty=Tensor[(8, 7, 15), float32] */;
    %473 = cast(%472, dtype="float64") /* ty=Tensor[(8, 7, 15), float64] */;
    cosh(%473) /* ty=Tensor[(8, 7, 15), float64] */
  };
  %474(%var_3981) /* ty=Tensor[(8, 7, 15), float64] */
}

def @func_9836() -> Tensor[(1, 1, 13), float64] {
  %475 = fn () -> Tensor[(1, 1, 13), float64] {
    @func_7176() /* ty=Tensor[(1, 1, 13), float64] */
  };
  %475() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_6825() -> (Tensor[(1, 1, 13), float32],) {
  %476 = @func_4553() /* ty=Tensor[(1, 1, 13), float32] */;
  (%476,)
}

def @func_2931() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */
}

def @func_1408(%var_1405: Tensor[(15, 16, 7), float32], %var_1406: Tensor[(81), float64], %var_1407: Tensor[(1120), int64]) -> (Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], int64, Tensor[(1120), int64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64]) {
  @func_1403(%var_1405, %var_1406, %var_1407) /* ty=(Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], int64, Tensor[(1120), int64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64]) */
}

def @func_9091() -> (Tensor[(1, 1, 13), float64],) {
  @func_9089() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_6009() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %481 = fn () -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
    %477 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
    %478 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %479 = %477.0;
    %480 = %478.0;
    (%479, %480)
  };
  %481() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */
}

def @func_2929() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %482 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %483 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %484 = %482.0;
  %485 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %486 = %483.1;
  (%484, %485, %486)
}

def @func_3901() -> Tensor[(1, 1, 13), float64] {
  @func_3899() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5504() -> (Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) {
  %491 = fn () -> (Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) {
    %487 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
    %488 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %489 = %487.3;
    %490 = %488.0;
    (%489, %490)
  };
  %491() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float32]) */
}

def @func_8401() -> Tensor[(1, 1, 13), float64] {
  @func_1828() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8192() -> (Tensor[(7, 6, 14), float64], Tensor[(1, 1, 13), float64]) {
  %492 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 14), float64] */;
  %493 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %494 = atan(%492) /* ty=Tensor[(7, 6, 14), float64] */;
  %495 = %493.0;
  (%494, %495)
}

def @func_9131() -> Tensor[(1, 1, 13), float64] {
  @func_8494() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_11641() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), bool]) {
  @func_11639() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), bool]) */
}

def @func_1801() -> (Tensor[(1, 1, 13), float64],) {
  %496 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %497 = %496.0;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %499 = acosh(%498) /* ty=Tensor[(1, 1, 13), float64] */;
  (%499,)
}

def @func_2361() -> (Tensor[(234), float64],) {
  @func_2359() /* ty=(Tensor[(234), float64],) */
}

def @func_7038() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(?, ?, 13), bool]) {
  %500 = @func_5897() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %501 = @func_3303() /* ty=(Tensor[(81), float64],) */;
  %502 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %503 = %500.0;
  %504 = %501.0;
  %505 = %502.4;
  (%503, %504, %505)
}

def @func_4392() -> Tensor[(81), float64] {
  @func_4390() /* ty=Tensor[(81), float64] */
}

def @func_8549(%var_8548: Tensor[(540), float64]) -> (Tensor[(13, 5), uint8], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64]) {
  %513 = fn (%var_8541: Tensor[(540), float64]) -> (Tensor[(13, 5), uint8], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64]) {
    %506 = @func_8312() /* ty=(Tensor[(3, 27), uint64], Tensor[(13, 5, ?), bool], Tensor[(13, 5), uint8]) */;
    %507 = cast(%var_8541, dtype="float64") /* ty=Tensor[(540), float64] */;
    %508 = reshape(%507, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %509 = @func_6640(%508) /* ty=(Tensor[(6, 15, 6), float64],) */;
    %510 = %506.2;
    %511 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
    %512 = %509.0;
    (%510, %511, %512, %var_8541)
  };
  %513(%var_8548) /* ty=(Tensor[(13, 5), uint8], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64]) */
}

def @func_4802() -> Tensor[(1, 1, 13), float64] {
  %514 = @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */;
  %514.5
}

def @func_2117() -> Tensor[(1, 1, 13), float64] {
  @func_2115() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5285() -> Tensor[(81), float64] {
  %516 = fn () -> Tensor[(81), float64] {
    %515 = @func_3303() /* ty=(Tensor[(81), float64],) */;
    %515.0
  };
  %516() /* ty=Tensor[(81), float64] */
}

def @func_9915(%var_9913: Tensor[(10, 5, 9), float32], %var_9914: Tensor[(225), float64]) -> (Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(10, 5, 9), bool]) {
  @func_9911(%var_9913, %var_9914) /* ty=(Tensor[(1, 1, 13), float32], Tensor[(5, 5, 9), float64], Tensor[(225), float64], Tensor[(10, 5, 9), bool]) */
}

def @func_2388() -> (Tensor[(234), float64],) {
  %519 = fn () -> (Tensor[(234), float64],) {
    %517 = @func_2359() /* ty=(Tensor[(234), float64],) */;
    %518 = %517.0;
    (%518,)
  };
  %519() /* ty=(Tensor[(234), float64],) */
}

def @func_3500() -> (Tensor[(1, 1, 13), float64], Tensor[(234), float64]) {
  %523 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(234), float64]) {
    %520 = @func_2359() /* ty=(Tensor[(234), float64],) */;
    %521 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
    %522 = %520.0;
    (%521, %522)
  };
  %523() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(234), float64]) */
}

def @func_3543() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  @func_3541() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */
}

def @func_270(%var_264: Tensor[(9, 1, 9), float64]) -> Tensor[(9, ?, 9), float64] {
  %524 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 1, 9), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 9), float64] */;
  %525 = shape_of(%var_264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%var_264, dtype="float64") /* ty=Tensor[(9, 1, 9), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%526, %527) /* ty=Tensor[(9, ?, 9), float64] */
}

def @func_2558() -> (Tensor[(1, 1, 13), float64],) {
  %530 = fn () -> (Tensor[(1, 1, 13), float64],) {
    %528 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
    %529 = %528.0;
    (%529,)
  };
  %530() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_7513(%var_7512: Tensor[(10, 9, 1), float32]) -> (Tensor[(10, 9, 1), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %538 = fn (%var_7482: Tensor[(10, 9, 1), float32]) -> (Tensor[(10, 9, 1), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
    %531 = cast(%var_7482, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
    %532 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %533 = @func_2557() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %534 = atan(%531) /* ty=Tensor[(10, 9, 1), float32] */;
    %535 = %532.0;
    %536 = %533.0;
    %537 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
    (%534, %535, %536, %537)
  };
  %538(%var_7512) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_7941() -> (Tensor[(234), float64],) {
  %539 = @func_2387() /* ty=(Tensor[(234), float64],) */;
  %540 = %539.0;
  (%540,)
}

def @func_7943() -> (Tensor[(234), float64],) {
  @func_7941() /* ty=(Tensor[(234), float64],) */
}

def @func_10096() -> (Tensor[(1, 1, 13), float32],) {
  @func_10094() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_3607(%var_3573: Tensor[(16, 1, 13), float32], %var_3579: Tensor[(27, 3), float64]) -> (Tensor[(1, 1, 13), float32], Tensor[(27, 3), float64], Tensor[(16, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  %541 = cast(%var_3579, dtype="float64") /* ty=Tensor[(27, 3), float64] */;
  %542 = reshape(%541, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %543 = @func_2077(%542) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %544 = @func_3541() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %545 = %544.0;
  %546 = cast(%545, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %547 = cast(%var_3573, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
  %548 = greater(%546, %547) /* ty=Tensor[(16, 1, 13), bool] */;
  %549 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  %550 = cast(%548, dtype="float32") /* ty=Tensor[(16, 1, 13), float32] */;
  %551 = cast(%549, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %552 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %553 = %543.1;
  %554 = mod(%550, %551) /* ty=Tensor[(16, 1, 13), float32] */;
  %555 = %552.0;
  (%553, %var_3579, %554, %555)
}

def @func_6167(%var_6166: Tensor[(3, 10, 2), float32]) -> (Tensor[(3, 10, 2), float32], Tensor[(1, 1, 13), float32]) {
  %560 = fn (%var_6158: Tensor[(3, 10, 2), float32]) -> (Tensor[(3, 10, 2), float32], Tensor[(1, 1, 13), float32]) {
    %556 = cast(%var_6158, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
    %557 = @func_6008() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
    %558 = tan(%556) /* ty=Tensor[(3, 10, 2), float32] */;
    %559 = %557.1;
    (%558, %559)
  };
  %560(%var_6166) /* ty=(Tensor[(3, 10, 2), float32], Tensor[(1, 1, 13), float32]) */
}

def @func_4957() -> Tensor[(?, ?, 13), bool] {
  @func_4955() /* ty=Tensor[(?, ?, 13), bool] */
}

def @func_5854() -> Tensor[(1, 1, 13), float64] {
  @func_5852() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_7382(%var_7307: Tensor[(540), float32]) -> (Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(540), float32], Tensor[(1, 1, 13), float64], Tensor[(81), bool], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  %561 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %562 = cast(%var_7307, dtype="float32") /* ty=Tensor[(540), float32] */;
  %563 = reshape(%562, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), float32] */;
  %564 = cast(meta[relay.Constant][23] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %565 = reshape(%564, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %566 = %561.0;
  %567 = @func_4029(%563) /* ty=Tensor[(3, 15, 12), float32] */;
  %568 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
  %569 = @func_2982(%565) /* ty=Tensor[(81), bool] */;
  %570 = @func_4553() /* ty=Tensor[(1, 1, 13), float32] */;
  (%566, %567, %var_7307, %568, %569, meta[relay.Constant][23] /* ty=Tensor[(81), float64] */, %570)
}

def @func_6609(%var_6608: Tensor[(11, 11, 15), float32]) -> (Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float64]) {
  %582 = fn (%var_6567: Tensor[(11, 11, 15), float32]) -> (Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float64]) {
    %571 = cast(%var_6567, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
    %572 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(11, 11, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %575 = cast(%var_6567, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
    %576 = @func_3395() /* ty=(Tensor[(81), float64],) */;
    %577 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %578 = floor_mod(%573, %574) /* ty=Tensor[(11, 11, 15), float32] */;
    %579 = sinh(%575) /* ty=Tensor[(11, 11, 15), float32] */;
    %580 = %576.0;
    %581 = %577.1;
    (%578, %579, %580, %581)
  };
  %582(%var_6608) /* ty=(Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_9674() -> (Tensor[(1, 1, 13), float32],) {
  %583 = @func_9287() /* ty=Tensor[(1, 1, 13), float32] */;
  (%583,)
}

def @func_2871() -> (Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) {
  @func_2869() /* ty=(Tensor[(234), float64], Tensor[(81), float64], Tensor[(?, ?, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool], Tensor[(1, 1, 13), float64]) */
}

def @func_4032(%var_4030: Tensor[(3, 15, 12), float32]) -> Tensor[(3, 15, 12), float32] {
  @func_4029(%var_4030) /* ty=Tensor[(3, 15, 12), float32] */
}

def @func_8956() -> Tensor[(234), float64] {
  %585 = fn () -> Tensor[(234), float64] {
    %584 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
    %584.2
  };
  %585() /* ty=Tensor[(234), float64] */
}

def @func_9759() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %586 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %587 = @func_7288() /* ty=Tensor[(1, 1, 13), float64] */;
  %588 = %586.0;
  %589 = @func_3950() /* ty=Tensor[(1, 1, 13), float32] */;
  (%587, %588, %589)
}

def @func_2030() -> (Tensor[(1, 1, 13), float32],) {
  @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_10434() -> (Tensor[(81), float32],) {
  @func_10432() /* ty=(Tensor[(81), float32],) */
}

def @func_1919() -> Tensor[(1, 1, 13), float64] {
  @func_1917() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_10569() -> Tensor[(8, 7, 15), float64] {
  %590 = @func_4990() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(8, 7, 15), float64], Tensor[(420, 2), float32]) */;
  %590.1
}

def @func_3395() -> (Tensor[(81), float64],) {
  %591 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %592 = %591.0;
  (%592,)
}

def @func_6522() -> Tensor[(1, 1, 13), float64] {
  @func_1842() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_10094() -> (Tensor[(1, 1, 13), float32],) {
  %593 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  (%593,)
}

def @func_10921() -> Tensor[(1, 1, 13), float32] {
  @func_10919() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_2985(%var_2983: Tensor[(81), float64]) -> Tensor[(81), bool] {
  @func_2982(%var_2983) /* ty=Tensor[(81), bool] */
}

def @func_11549() -> (Tensor[(5, 5, 9), float64], Tensor[(7, 3, 13), bool]) {
  %597 = fn () -> (Tensor[(5, 5, 9), float64], Tensor[(7, 3, 13), bool]) {
    %594 = @func_5054() /* ty=(Tensor[(7, 3, 13), bool],) */;
    %595 = @func_11365() /* ty=Tensor[(5, 5, 9), float64] */;
    %596 = %594.0;
    (%595, %596)
  };
  %597() /* ty=(Tensor[(5, 5, 9), float64], Tensor[(7, 3, 13), bool]) */
}

def @func_10998() -> (Tensor[(81), float64],) {
  %599 = fn () -> (Tensor[(81), float64],) {
    %598 = @func_4390() /* ty=Tensor[(81), float64] */;
    (%598,)
  };
  %599() /* ty=(Tensor[(81), float64],) */
}

def @func_1497(%var_1496: Tensor[(9, 2, 13), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
  %620 = fn (%var_1455: Tensor[(9, 2, 13), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
    %600 = cast(%var_1455, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
    %601 = cos(%600) /* ty=Tensor[(9, 2, 13), float64] */;
    %602 = cast(%601, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
    %603 = acos(%602) /* ty=Tensor[(9, 2, 13), float64] */;
    %604 = cast(%603, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
    %605 = erf(%604) /* ty=Tensor[(9, 2, 13), float64] */;
    %606 = cast(%var_1455, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
    %607 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%601, dtype="bool") /* ty=Tensor[(9, 2, 13), bool] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %610 = greater_equal(%608, %609) /* ty=Tensor[(9, 2, 13), bool] */;
    %611 = cast(%610, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
    %612 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %613 = cast(%605, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %615 = cast(meta[relay.Constant][25] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
    %616 = reshape(%615, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
    %617 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
    %618 = subtract(%613, %614) /* ty=Tensor[(9, 2, 13), float32] */;
    %619 = @func_270(%616) /* ty=Tensor[(9, ?, 9), float64] */;
    (%617, %618, %619, meta[relay.Constant][25] /* ty=Tensor[(81), float64] */)
  };
  %620(%var_1496) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(9, 2, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */
}

def @func_5054() -> (Tensor[(7, 3, 13), bool],) {
  %621 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %622 = %621.0;
  (%622,)
}

def @func_8330() -> Tensor[(81), float64] {
  %623 = fn () -> Tensor[(81), float64] {
    @func_5284() /* ty=Tensor[(81), float64] */
  };
  %623() /* ty=Tensor[(81), float64] */
}

def @func_9240() -> (Tensor[(81), int8],) {
  @func_9238() /* ty=(Tensor[(81), int8],) */
}

def @func_7684(%var_7683: Tensor[(1120), int64]) -> (Tensor[(?, ?, 13), bool], float32, Tensor[(1120), int64]) {
  %630 = fn (%var_7677: Tensor[(1120), int64]) -> (Tensor[(?, ?, 13), bool], float32, Tensor[(1120), int64]) {
    %624 = @func_4789() /* ty=(Tensor[(?, ?, 13), bool],) */;
    %625 = cast(%var_7677, dtype="int64") /* ty=Tensor[(1120), int64] */;
    %626 = reshape(%625, newshape=[56, 20]) /* ty=Tensor[(56, 20), int64] */;
    %627 = @func_5804(%626) /* ty=(Tensor[(81), float64], Tensor[(1120), int64], Tensor[(56, 20), int64], Tensor[(81), float64], float32, Tensor[(108), float32], Tensor[(81), float32], Tensor[(1, 1, 13), float64], Tensor[(7, 3, 13), bool], Tensor[(81), float64]) */;
    %628 = %624.0;
    %629 = %627.4;
    (%628, %629, %var_7677)
  };
  %630(%var_7683) /* ty=(Tensor[(?, ?, 13), bool], float32, Tensor[(1120), int64]) */
}

def @func_1717(%var_1715: Tensor[(81), float64], %var_1716: Tensor[(11, 1, 13), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(11, 1, 13), int64]) {
  @func_1713(%var_1715, %var_1716) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(11, 1, 13), int64]) */
}

def @func_3899() -> Tensor[(1, 1, 13), float64] {
  @func_3049() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_9044(%var_9042: Tensor[(5, 4, 10), float32]) -> (Tensor[(5, 4, 10), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1120), int64]) {
  @func_9041(%var_9042) /* ty=(Tensor[(5, 4, 10), float32], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1120), int64]) */
}

def @func_11351(%var_11344: Tensor[(13, 1, 16), float32]) -> (Tensor[(13, 1, 16), float32],) {
  %631 = cast(%var_11344, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %632 = tan(%631) /* ty=Tensor[(13, 1, 16), float32] */;
  (%632,)
}

def @func_5898() -> (Tensor[(1, 1, 13), float64],) {
  %635 = fn () -> (Tensor[(1, 1, 13), float64],) {
    %633 = @func_2238() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
    %634 = %633.0;
    (%634,)
  };
  %635() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_7176() -> Tensor[(1, 1, 13), float64] {
  @func_3049() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_3372(%var_3370: float32, %var_3371: Tensor[(1, 9, 12), float32]) -> (Tensor[(81), float64], Tensor[(1, 9, 12), bool]) {
  %644 = fn (%var_3326: float32, %var_3327: Tensor[(1, 9, 12), float32]) -> (Tensor[(81), float64], Tensor[(1, 9, 12), bool]) {
    %636 = @func_3303() /* ty=(Tensor[(81), float64],) */;
    %637 = cast(%var_3326, dtype="float32") /* ty=float32 */;
    %638 = cast(%var_3327, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
    %639 = power(%637, %638) /* ty=Tensor[(1, 9, 12), float32] */;
    %640 = cast(%var_3326, dtype="bool") /* ty=bool */;
    %641 = cast(%639, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
    %642 = %636.0;
    %643 = less(%640, %641) /* ty=Tensor[(1, 9, 12), bool] */;
    (%642, %643)
  };
  %644(%var_3370, %var_3371) /* ty=(Tensor[(81), float64], Tensor[(1, 9, 12), bool]) */
}

def @func_9761() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  @func_9759() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) */
}

def @func_5966(%var_5964: Tensor[(4, 280), int64], %var_5965: Tensor[(9, 14, 13), float64]) -> (Tensor[(81), float64], Tensor[(3, 27), float32], Tensor[(9, ?, 9), float64], int64, Tensor[(4, 280), int64], Tensor[(9, 14, 13), float32], Tensor[(234), float64]) {
  %660 = fn (%var_5934: Tensor[(4, 280), int64], %var_5952: Tensor[(9, 14, 13), float64]) -> (Tensor[(81), float64], Tensor[(3, 27), float32], Tensor[(9, ?, 9), float64], int64, Tensor[(4, 280), int64], Tensor[(9, 14, 13), float32], Tensor[(234), float64]) {
    %645 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
    %646 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %647 = cast(%var_5934, dtype="int64") /* ty=Tensor[(4, 280), int64] */;
    %648 = reshape(%646, newshape=[]) /* ty=int64 */;
    %649 = reshape(%647, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
    %650 = @func_757(%648, %649) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
    %651 = @func_5692() /* ty=Tensor[(1, 1, 13), float64] */;
    %652 = cast(%651, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
    %653 = cast(%var_5952, dtype="float32") /* ty=Tensor[(9, 14, 13), float32] */;
    %654 = @func_2359() /* ty=(Tensor[(234), float64],) */;
    %655 = %645.2;
    %656 = @func_5410() /* ty=Tensor[(3, 27), float32] */;
    %657 = %650.3;
    %658 = minimum(%652, %653) /* ty=Tensor[(9, 14, 13), float32] */;
    %659 = %654.0;
    (%655, %656, %657, -2 /* ty=int64 */, %var_5934, %658, %659)
  };
  %660(%var_5964, %var_5965) /* ty=(Tensor[(81), float64], Tensor[(3, 27), float32], Tensor[(9, ?, 9), float64], int64, Tensor[(4, 280), int64], Tensor[(9, 14, 13), float32], Tensor[(234), float64]) */
}

def @func_3304() -> (Tensor[(81), float64],) {
  %663 = fn () -> (Tensor[(81), float64],) {
    %661 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
    %662 = %661.2;
    (%662,)
  };
  %663() /* ty=(Tensor[(81), float64],) */
}

def @func_8714() -> (Tensor[(1, 1, 13), float64],) {
  %664 = @func_5852() /* ty=Tensor[(1, 1, 13), float64] */;
  (%664,)
}

def @func_4753(%var_4751: float32) -> (Tensor[(234), float64], float32, Tensor[(108), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  @func_4750(%var_4751) /* ty=(Tensor[(234), float64], float32, Tensor[(108), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) */
}

def @func_2672(%var_2670: Tensor[(1, 16, 13), float64]) -> (Tensor[(1, 16, 13), int8],) {
  @func_2669(%var_2670) /* ty=(Tensor[(1, 16, 13), int8],) */
}

def @func_5694() -> Tensor[(1, 1, 13), float64] {
  @func_5692() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_3252() -> (Tensor[(1, 1, 13), float32],) {
  %667 = fn () -> (Tensor[(1, 1, 13), float32],) {
    %665 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
    %666 = %665.0;
    (%666,)
  };
  %667() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_8844() -> (Tensor[(81), float64], Tensor[(1, 1, 13), float64]) {
  %671 = fn () -> (Tensor[(81), float64], Tensor[(1, 1, 13), float64]) {
    %668 = @func_5191() /* ty=(Tensor[(81), float64],) */;
    %669 = %668.0;
    %670 = @func_6522() /* ty=Tensor[(1, 1, 13), float64] */;
    (%669, %670)
  };
  %671() /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_11191() -> (Tensor[(1, 1, 13), float32],) {
  %673 = fn () -> (Tensor[(1, 1, 13), float32],) {
    %672 = @func_10919() /* ty=Tensor[(1, 1, 13), float32] */;
    (%672,)
  };
  %673() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_8994(%var_8993: Tensor[(12, 1, 12), float32]) -> (Tensor[(12, 1, 12), float32],) {
  %676 = fn (%var_8988: Tensor[(12, 1, 12), float32]) -> (Tensor[(12, 1, 12), float32],) {
    %674 = cast(%var_8988, dtype="float32") /* ty=Tensor[(12, 1, 12), float32] */;
    %675 = exp(%674) /* ty=Tensor[(12, 1, 12), float32] */;
    (%675,)
  };
  %676(%var_8993) /* ty=(Tensor[(12, 1, 12), float32],) */
}

def @func_7635(%var_7633: Tensor[(81), float64]) -> (Tensor[(7, 3, 13), bool], Tensor[(81), bool]) {
  @func_7632(%var_7633) /* ty=(Tensor[(7, 3, 13), bool], Tensor[(81), bool]) */
}

def @func_4029(%var_4001: Tensor[(3, 15, 12), float32]) -> Tensor[(3, 15, 12), float32] {
  %677 = cast(%var_4001, dtype="float32") /* ty=Tensor[(3, 15, 12), float32] */;
  log(%677) /* ty=Tensor[(3, 15, 12), float32] */
}

def @func_2079(%var_2078: Tensor[(81), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
  %687 = fn (%var_2075: Tensor[(81), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
    %678 = @func_1903() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) */;
    %679 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
    %680 = cast(%679, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
    %681 = cast(%var_2075, dtype="float64") /* ty=Tensor[(81), float64] */;
    %682 = reshape(%681, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
    %683 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
    %684 = %678.0;
    %685 = sigmoid(%680) /* ty=Tensor[(1, 1, 13), float32] */;
    %686 = @func_270(%682) /* ty=Tensor[(9, ?, 9), float64] */;
    (%683, %684, %685, %686, %var_2075)
  };
  %687(%var_2078) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */
}

def @func_9973() -> (Tensor[(5, ?, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168), uint8]) {
  %688 = @func_9368() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float32]) */;
  %689 = cast(meta[relay.Constant][26] /* ty=Tensor[(168), uint8] */, dtype="uint8") /* ty=Tensor[(168), uint8] */;
  %690 = reshape(%689, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), uint8] */;
  %691 = %688.2;
  %692 = @func_7410(%690) /* ty=Tensor[(6, 4, 7), uint8] */;
  (%691, %692, meta[relay.Constant][26] /* ty=Tensor[(168), uint8] */)
}

def @func_11535() -> (Tensor[(?, ?, 13), bool], Tensor[(540), float64], Tensor[(540), float64]) {
  %699 = fn () -> (Tensor[(?, ?, 13), bool], Tensor[(540), float64], Tensor[(540), float64]) {
    %693 = @func_4789() /* ty=(Tensor[(?, ?, 13), bool],) */;
    %694 = cast(meta[relay.Constant][27] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %695 = reshape(%694, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %696 = @func_8547(%695) /* ty=(Tensor[(13, 5), uint8], Tensor[(1, 1, 13), float64], Tensor[(6, 15, 6), float64], Tensor[(540), float64]) */;
    %697 = %693.0;
    %698 = %696.3;
    (%697, %698, meta[relay.Constant][27] /* ty=Tensor[(540), float64] */)
  };
  %699() /* ty=(Tensor[(?, ?, 13), bool], Tensor[(540), float64], Tensor[(540), float64]) */
}

def @func_9089() -> (Tensor[(1, 1, 13), float64],) {
  %700 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
  (%700,)
}

def @func_9715() -> Tensor[(1, 1, 13), float64] {
  %702 = fn () -> Tensor[(1, 1, 13), float64] {
    %701 = @func_9089() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %701.0
  };
  %702() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5852() -> Tensor[(1, 1, 13), float64] {
  @func_1917() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_3239() -> (Tensor[(81), float64],) {
  @func_3237() /* ty=(Tensor[(81), float64],) */
}

def @func_8890(%var_8888: Tensor[(1, 15, 13), float64]) -> (Tensor[(1, 15, 13), uint64], Tensor[(1, 15, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) {
  @func_8887(%var_8888) /* ty=(Tensor[(1, 15, 13), uint64], Tensor[(1, 15, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */
}

def @func_7040() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(?, ?, 13), bool]) {
  @func_7038() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(?, ?, 13), bool]) */
}

def @func_5332() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float64]) {
  %703 = @func_5093() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) */;
  %704 = %703.2;
  %705 = cast(%704, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %706 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %707 = cosh(%705) /* ty=Tensor[(1, 1, 13), float64] */;
  %708 = %706.2;
  (%707, %708)
}

def @func_1843() -> Tensor[(1, 1, 13), float64] {
  %710 = fn () -> Tensor[(1, 1, 13), float64] {
    %709 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %709.0
  };
  %710() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_3867() -> (Tensor[(1120), int64], Tensor[(234), float64], Tensor[(1, 1, 13), float64]) {
  %711 = @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */;
  %712 = @func_2359() /* ty=(Tensor[(234), float64],) */;
  %713 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %714 = %711.3;
  %715 = %712.0;
  %716 = %713.1;
  (%714, %715, %716)
}

def @func_9238() -> (Tensor[(81), int8],) {
  %717 = @func_6764() /* ty=Tensor[(81), int8] */;
  (%717,)
}

def @func_6741() -> (Tensor[(1, 1, 13), float64],) {
  %720 = fn () -> (Tensor[(1, 1, 13), float64],) {
    %718 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %719 = %718.0;
    (%719,)
  };
  %720() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_2484() -> (Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) {
  %721 = @func_1828() /* ty=Tensor[(1, 1, 13), float64] */;
  %722 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %723 = %722.0;
  %724 = cast(%723, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %725 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%721, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %728 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %729 = %728.1;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(81), float64] */;
  %731 = reshape(%730, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %732 = @func_270(%731) /* ty=Tensor[(9, ?, 9), float64] */;
  %733 = cast(%729, dtype="float32") /* ty=Tensor[(81), float32] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="float32") /* ty=Tensor[(9, ?, 9), float32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %737 = cast(meta[relay.Constant][28] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %738 = reshape(%737, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %739 = @func_2050(%738) /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) */;
  %740 = divide(%726, %727) /* ty=Tensor[(?, ?, 13), float64] */;
  %741 = power(%735, %736) /* ty=Tensor[(9, ?, 9), float32] */;
  %742 = %739.0;
  (%740, %741, %742, meta[relay.Constant][28] /* ty=Tensor[(1120), int64] */)
}

def @func_6827() -> (Tensor[(1, 1, 13), float32],) {
  @func_6825() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_8374() -> (Tensor[(?, ?, 13), bool],) {
  %743 = @func_7247() /* ty=(Tensor[(1120), int64], Tensor[(?, ?, 13), bool]) */;
  %744 = %743.1;
  (%744,)
}

def @func_10538() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %745 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %746 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %747 = %745.2;
  %748 = %746.1;
  (%747, %748)
}

def @func_3013() -> (Tensor[(1, 1, 13), float64],) {
  %750 = fn () -> (Tensor[(1, 1, 13), float64],) {
    %749 = @func_2115() /* ty=Tensor[(1, 1, 13), float64] */;
    (%749,)
  };
  %750() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_2050(%var_2045: Tensor[(1120), int64]) -> (Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) {
  %751 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %752 = cast(%var_2045, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %753 = reshape(%752, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %754 = @func_1762(%753) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64, Tensor[(1120), int64], Tensor[(81), float64], int64, Tensor[(1680), float32]) */;
  %755 = %751.1;
  %756 = %754.1;
  (%755, %756, %var_2045)
}

def @func_6793() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  @func_6791() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) */
}

def @func_9943() -> (Tensor[(1, 1, 13), float64], Tensor[(81), int8]) {
  %757 = @func_5162() /* ty=(Tensor[(81), int8],) */;
  %758 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
  %759 = %757.0;
  (%758, %759)
}

def @func_6791() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  %760 = @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %761 = @func_6008() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %762 = %760.0;
  %763 = %761.1;
  (%762, %763)
}

def @func_10432() -> (Tensor[(81), float32],) {
  %764 = @func_7038() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(?, ?, 13), bool]) */;
  %765 = %764.1;
  %766 = cast(meta[relay.Constant][29] /* ty=Tensor[(81), float64] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(1), int32] */;
  %768 = cast(%765, dtype="float32") /* ty=Tensor[(81), float32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?), float32] */;
  %770 = power(%768, %769) /* ty=Tensor[(81), float32] */;
  (%770,)
}

def @func_10132() -> Tensor[(1, 1, 13), float32] {
  %772 = fn () -> Tensor[(1, 1, 13), float32] {
    %771 = @func_9568() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float32], Tensor[(81), float64], Tensor[(169), float64]) */;
    %771.1
  };
  %772() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_6692() -> (Tensor[(81), float64], Tensor[(7, 8, 13), bool]) {
  %773 = @func_4711() /* ty=(Tensor[(81), float64],) */;
  %774 = @func_5253() /* ty=(Tensor[(234), float64], Tensor[(?, ?, 13), bool]) */;
  %775 = %774.1;
  %776 = cast(%775, dtype="bool") /* ty=Tensor[(?, ?, 13), bool] */;
  %777 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 8, 13), bool] */, dtype="bool") /* ty=Tensor[(7, 8, 13), bool] */;
  %778 = %773.0;
  %779 = greater(%776, %777) /* ty=Tensor[(7, 8, 13), bool] */;
  (%778, %779)
}

def @func_10919() -> Tensor[(1, 1, 13), float32] {
  %780 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %780.0
}

def @func_6053() -> Tensor[(1, 1, 13), float32] {
  @func_6051() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_5193() -> (Tensor[(81), float64],) {
  @func_5191() /* ty=(Tensor[(81), float64],) */
}

def @func_2623() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */
}

def @func_2359() -> (Tensor[(234), float64],) {
  %781 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %782 = %781.2;
  (%782,)
}

def @func_10782() -> (Tensor[(15, 16, 13), bool],) {
  %796 = fn () -> (Tensor[(15, 16, 13), bool],) {
    %783 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %784 = %783.0;
    %785 = cast(%784, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
    %786 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 16, 13), float32] */, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
    %787 = not_equal(%785, %786) /* ty=Tensor[(15, 16, 13), bool] */;
    %788 = cast(%784, dtype="uint16") /* ty=Tensor[(1, 1, 13), uint16] */;
    %789 = cast(%787, dtype="uint16") /* ty=Tensor[(15, 16, 13), uint16] */;
    %790 = bitwise_or(%788, %789) /* ty=Tensor[(15, 16, 13), uint16] */;
    %791 = cast(%787, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
    %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
    %793 = cast(%790, dtype="bool") /* ty=Tensor[(15, 16, 13), bool] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %795 = logical_or(%793, %794) /* ty=Tensor[(15, 16, 13), bool] */;
    (%795,)
  };
  %796() /* ty=(Tensor[(15, 16, 13), bool],) */
}

def @func_10518() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  @func_10516() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */
}

def @func_7705() -> (Tensor[(1, 1, 13), float32],) {
  %798 = fn () -> (Tensor[(1, 1, 13), float32],) {
    %797 = @func_6051() /* ty=Tensor[(1, 1, 13), float32] */;
    (%797,)
  };
  %798() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_11433() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(168), uint8]) {
  @func_11431() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(168), uint8]) */
}

def @func_1434() -> Tensor[(1, 1, 13), float64] {
  %800 = fn () -> Tensor[(1, 1, 13), float64] {
    %799 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
    atanh(%799) /* ty=Tensor[(1, 1, 13), float64] */
  };
  %800() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_1870() -> Tensor[(1, 1, 13), float32] {
  %801 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  atan(%802) /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_5692() -> Tensor[(1, 1, 13), float64] {
  @func_3899() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8918() -> (Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) {
  %807 = fn () -> (Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) {
    %803 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %804 = @func_4789() /* ty=(Tensor[(?, ?, 13), bool],) */;
    %805 = %803.0;
    %806 = %804.0;
    (%805, %806)
  };
  %807() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) */
}

def @func_10410(%var_10409: Tensor[(8, 15, 13), float64]) -> (Tensor[(8, 15, 13), bool], Tensor[(1, 1, 13), float64]) {
  %814 = fn (%var_10380: Tensor[(8, 15, 13), float64]) -> (Tensor[(8, 15, 13), bool], Tensor[(1, 1, 13), float64]) {
    %808 = @func_5852() /* ty=Tensor[(1, 1, 13), float64] */;
    %809 = cast(%808, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
    %810 = cast(%var_10380, dtype="bool") /* ty=Tensor[(8, 15, 13), bool] */;
    %811 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %812 = logical_or(%809, %810) /* ty=Tensor[(8, 15, 13), bool] */;
    %813 = %811.1;
    (%812, %813)
  };
  %814(%var_10409) /* ty=(Tensor[(8, 15, 13), bool], Tensor[(1, 1, 13), float64]) */
}

def @func_6121() -> Tensor[(81), int8] {
  %816 = fn () -> Tensor[(81), int8] {
    %815 = @func_5162() /* ty=(Tensor[(81), int8],) */;
    %815.0
  };
  %816() /* ty=Tensor[(81), int8] */
}

def @func_8495() -> Tensor[(1, 1, 13), float64] {
  %818 = fn () -> Tensor[(1, 1, 13), float64] {
    %817 = @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
    %817.0
  };
  %818() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8312() -> (Tensor[(3, 27), uint64], Tensor[(13, 5, ?), bool], Tensor[(13, 5), uint8]) {
  %819 = @func_7584() /* ty=(Tensor[(81), int8], Tensor[(3, 27), uint64]) */;
  %820 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 5), uint8] */, dtype="uint8") /* ty=Tensor[(13, 5), uint8] */;
  %821 = reshape(%820, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), uint8] */;
  %822 = @func_4452(%821) /* ty=(Tensor[(13, 5, ?), bool], Tensor[(81), float64]) */;
  %823 = %819.1;
  %824 = %822.0;
  (%823, %824, meta[relay.Constant][33] /* ty=Tensor[(13, 5), uint8] */)
}

def @func_10540() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) {
  @func_10538() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32]) */
}

def @func_10992() -> (Tensor[(1, 1, 13), float64],) {
  @func_10990() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_1904() -> (Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) {
  %831 = fn () -> (Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) {
    %825 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 27), float64] */, dtype="float64") /* ty=Tensor[(3, 27), float64] */;
    %826 = reshape(%825, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
    %827 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 27), float64] */, dtype="float64") /* ty=Tensor[(3, 27), float64] */;
    %828 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
    %829 = @func_270(%826) /* ty=Tensor[(9, ?, 9), float64] */;
    %830 = acos(%827) /* ty=Tensor[(3, 27), float64] */;
    (%828, %829, %830)
  };
  %831() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(3, 27), float64]) */
}

def @func_3951() -> Tensor[(1, 1, 13), float32] {
  %833 = fn () -> Tensor[(1, 1, 13), float32] {
    %832 = @func_3251() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %832.0
  };
  %833() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_9975() -> (Tensor[(5, ?, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168), uint8]) {
  @func_9973() /* ty=(Tensor[(5, ?, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168), uint8]) */
}

def @func_4483() -> Tensor[(1, 1, 13), float32] {
  %834 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %834.1
}

def @func_4791() -> (Tensor[(?, ?, 13), bool],) {
  @func_4789() /* ty=(Tensor[(?, ?, 13), bool],) */
}

def @func_4991() -> (Tensor[(1, 1, 13), float64], Tensor[(8, 7, 15), float64], Tensor[(420, 2), float32]) {
  %840 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(8, 7, 15), float64], Tensor[(420, 2), float32]) {
    %835 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %836 = cast(meta[relay.Constant][35] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
    %837 = reshape(%836, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
    %838 = %835.1;
    %839 = @func_3980(%837) /* ty=Tensor[(8, 7, 15), float64] */;
    (%838, %839, meta[relay.Constant][35] /* ty=Tensor[(420, 2), float32] */)
  };
  %840() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(8, 7, 15), float64], Tensor[(420, 2), float32]) */
}

def @func_4555() -> Tensor[(1, 1, 13), float32] {
  @func_4553() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_6077() -> (Tensor[(1, 1, 13), float64],) {
  @func_6075() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_9289() -> Tensor[(1, 1, 13), float32] {
  @func_9287() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_3190(%var_3158: Tensor[(81, 1), float64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(234), bool], Tensor[(2, 560), bool], Tensor[(1, 1, 13), float64], Tensor[(81, 1), float64]) {
  %841 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %842 = reshape(%841, newshape=[]) /* ty=int64 */;
  %843 = @func_1981(%842) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
  %844 = @func_2340() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %845 = @func_1592() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(234), float64]) */;
  %846 = %845.2;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(234), float32] */;
  %848 = atanh(%847) /* ty=Tensor[(234), float32] */;
  %849 = cast(%848, dtype="bool") /* ty=Tensor[(234), bool] */;
  %850 = cast(6 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %851 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %852 = reshape(%851, newshape=[]) /* ty=int64 */;
  %853 = @func_1981(%852) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(2, 560), bool]) */;
  %854 = cast(%var_3158, dtype="float64") /* ty=Tensor[(81, 1), float64] */;
  %855 = reshape(%854, newshape=[81]) /* ty=Tensor[(81), float64] */;
  %856 = @func_2077(%855) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32], Tensor[(9, ?, 9), float64], Tensor[(81), float64]) */;
  %857 = %843.0;
  %858 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
  %859 = %844.0;
  %860 = logical_or(%849, %850) /* ty=Tensor[(234), bool] */;
  %861 = %853.3;
  %862 = %856.0;
  (%857, %858, %859, %860, %861, %862, %var_3158)
}

def @func_9569() -> (Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float32], Tensor[(81), float64], Tensor[(169), float64]) {
  %871 = fn () -> (Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float32], Tensor[(81), float64], Tensor[(169), float64]) {
    %863 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
    %864 = @func_7704() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %865 = cast(meta[relay.Constant][36] /* ty=Tensor[(169), float64] */, dtype="float64") /* ty=Tensor[(169), float64] */;
    %866 = reshape(%865, newshape=[169, 1]) /* ty=Tensor[(169, 1), float64] */;
    %867 = @func_8356(%866) /* ty=(Tensor[(81), float64], Tensor[(?, 13, 13), bool]) */;
    %868 = %863.0;
    %869 = %864.0;
    %870 = %867.0;
    (%868, %869, %870, meta[relay.Constant][36] /* ty=Tensor[(169), float64] */)
  };
  %871() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float32], Tensor[(81), float64], Tensor[(169), float64]) */
}

def @func_1803() -> (Tensor[(1, 1, 13), float64],) {
  @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_4096() -> (Tensor[(1, 1, 13), float32],) {
  %872 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %873 = %872.1;
  (%873,)
}

def @func_4789() -> (Tensor[(?, ?, 13), bool],) {
  %874 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %875 = %874.1;
  %876 = @func_1842() /* ty=Tensor[(1, 1, 13), float64] */;
  %877 = cast(%876, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %878 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%875, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %881 = logical_or(%879, %880) /* ty=Tensor[(?, ?, 13), bool] */;
  (%881,)
}

def @func_5573(%var_5572: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64], Tensor[(1120), int64]) {
  %891 = fn (%var_5536: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64], Tensor[(1120), int64]) {
    %882 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
    %883 = cast(%882, dtype="float64") /* ty=Tensor[(1, 1, 13), float64] */;
    %884 = cast(%var_5536, dtype="float64") /* ty=Tensor[(8, 1, 13), float64] */;
    %885 = cast(meta[relay.Constant][37] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
    %886 = reshape(%885, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
    %887 = @func_2050(%886) /* ty=(Tensor[(81), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64]) */;
    %888 = floor_divide(%883, %884) /* ty=Tensor[(8, 1, 13), float64] */;
    %889 = @func_1917() /* ty=Tensor[(1, 1, 13), float64] */;
    %890 = %887.2;
    (%888, %889, %890, meta[relay.Constant][37] /* ty=Tensor[(1120), int64] */)
  };
  %891(%var_5572) /* ty=(Tensor[(8, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1120), int64], Tensor[(1120), int64]) */
}

def @func_1764(%var_1763: Tensor[(1120), int64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64, Tensor[(1120), int64], Tensor[(81), float64], int64, Tensor[(1680), float32]) {
  %914 = fn (%var_1747: Tensor[(1120), int64]) -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64, Tensor[(1120), int64], Tensor[(81), float64], int64, Tensor[(1680), float32]) {
    %892 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %893 = cast(%var_1747, dtype="int64") /* ty=Tensor[(1120), int64] */;
    %894 = reshape(%892, newshape=[]) /* ty=int64 */;
    %895 = reshape(%893, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
    %896 = @func_757(%894, %895) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
    %897 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %898 = cast(%var_1747, dtype="int64") /* ty=Tensor[(1120), int64] */;
    %899 = reshape(%897, newshape=[]) /* ty=int64 */;
    %900 = reshape(%898, newshape=[14, 8, 10]) /* ty=Tensor[(14, 8, 10), int64] */;
    %901 = @func_757(%899, %900) /* ty=(Tensor[(14, 8, 10), bool], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64]) */;
    %902 = cast(meta[relay.Constant][38] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %903 = %901.2;
    %904 = cast(%903, dtype="float64") /* ty=Tensor[(81), float64] */;
    %905 = cast(%var_1747, dtype="int64") /* ty=Tensor[(1120), int64] */;
    %906 = reshape(%902, newshape=[15, 16, 7]) /* ty=Tensor[(15, 16, 7), float32] */;
    %907 = reshape(%904, newshape=[81]) /* ty=Tensor[(81), float64] */;
    %908 = reshape(%905, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
    %909 = @func_1403(%906, %907, %908) /* ty=(Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], int64, Tensor[(1120), int64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(9, ?, 9), float64], Tensor[(15, 16, 7), float64], Tensor[(9, ?, 9), float64]) */;
    %910 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
    %911 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
    %912 = %896.2;
    %913 = %909.5;
    (%910, %911, %912, -8 /* ty=int64 */, %var_1747, %903, %913, meta[relay.Constant][38] /* ty=Tensor[(1680), float32] */)
  };
  %914(%var_1763) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64], int64, Tensor[(1120), int64], Tensor[(81), float64], int64, Tensor[(1680), float32]) */
}

def @func_10571() -> Tensor[(8, 7, 15), float64] {
  @func_10569() /* ty=Tensor[(8, 7, 15), float64] */
}

def @func_3431() -> (Tensor[(1, 1, 13), float64],) {
  %916 = fn () -> (Tensor[(1, 1, 13), float64],) {
    %915 = @func_2023() /* ty=Tensor[(1, 1, 13), float64] */;
    (%915,)
  };
  %916() /* ty=(Tensor[(1, 1, 13), float64],) */
}

def @func_9945() -> (Tensor[(1, 1, 13), float64], Tensor[(81), int8]) {
  @func_9943() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), int8]) */
}

def @func_2486() -> (Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) {
  @func_2484() /* ty=(Tensor[(?, ?, 13), float64], Tensor[(9, ?, 9), float32], Tensor[(81), float64], Tensor[(1120), int64]) */
}

def @func_7169() -> (Tensor[(81), float64], Tensor[(1120), int64], Tensor[(1120), int64]) {
  @func_7167() /* ty=(Tensor[(81), float64], Tensor[(1120), int64], Tensor[(1120), int64]) */
}

def @func_3869() -> (Tensor[(1120), int64], Tensor[(234), float64], Tensor[(1, 1, 13), float64]) {
  @func_3867() /* ty=(Tensor[(1120), int64], Tensor[(234), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_7585() -> (Tensor[(81), int8], Tensor[(3, 27), uint64]) {
  %923 = fn () -> (Tensor[(81), int8], Tensor[(3, 27), uint64]) {
    %917 = @func_5162() /* ty=(Tensor[(81), int8],) */;
    %918 = %917.0;
    %919 = cast(%918, dtype="float64") /* ty=Tensor[(81), float64] */;
    %920 = reshape(%919, newshape=[3, 27]) /* ty=Tensor[(3, 27), float64] */;
    %921 = @func_6274(%920) /* ty=(Tensor[(5, ?, 13), bool], Tensor[(3, 27), uint64], Tensor[(5, 5, 9), float64], Tensor[(225), float64]) */;
    %922 = %921.1;
    (%918, %922)
  };
  %923() /* ty=(Tensor[(81), int8], Tensor[(3, 27), uint64]) */
}

def @func_2341() -> (Tensor[(1, 1, 13), float32],) {
  %926 = fn () -> (Tensor[(1, 1, 13), float32],) {
    %924 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %925 = %924.0;
    (%925,)
  };
  %926() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_11431() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(168), uint8]) {
  %927 = cast(meta[relay.Constant][39] /* ty=Tensor[(168), uint8] */, dtype="uint8") /* ty=Tensor[(168), uint8] */;
  %928 = reshape(%927, newshape=[168, 1]) /* ty=Tensor[(168, 1), uint8] */;
  %929 = @func_10629(%928) /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(6, 4, 7), uint8], Tensor[(168, 1), uint8]) */;
  %930 = @func_10919() /* ty=Tensor[(1, 1, 13), float32] */;
  %931 = %929.0;
  (%930, %931, meta[relay.Constant][39] /* ty=Tensor[(168), uint8] */)
}

def @func_6212() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(54, 10), float64]) {
  @func_6210() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(54, 10), float64]) */
}

def @func_8356(%var_8347: Tensor[(169, 1), float64]) -> (Tensor[(81), float64], Tensor[(?, 13, 13), bool]) {
  %932 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %933 = cast(%var_8347, dtype="float64") /* ty=Tensor[(169, 1), float64] */;
  %934 = reshape(%933, newshape=[1, 13, 13]) /* ty=Tensor[(1, 13, 13), float64] */;
  %935 = @func_6405(%934) /* ty=(Tensor[(1, 13, 13), float32], Tensor[(81), int8]) */;
  %936 = %935.0;
  %937 = cast(%var_8347, dtype="bool") /* ty=Tensor[(169, 1), bool] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%936, dtype="bool") /* ty=Tensor[(1, 13, 13), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = %932.0;
  %942 = greater_equal(%939, %940) /* ty=Tensor[(?, 13, 13), bool] */;
  (%941, %942)
}

def @func_4098() -> (Tensor[(1, 1, 13), float32],) {
  @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_7124() -> Tensor[(1, 1, 13), float64] {
  %944 = fn () -> Tensor[(1, 1, 13), float64] {
    %943 = @func_5332() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
    %943.0
  };
  %944() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8474() -> (Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) {
  %945 = @func_8374() /* ty=(Tensor[(?, ?, 13), bool],) */;
  %946 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  %947 = %945.0;
  (%946, %947)
}

def @func_6408(%var_6406: Tensor[(1, 13, 13), float64]) -> (Tensor[(1, 13, 13), float32], Tensor[(81), int8]) {
  @func_6405(%var_6406) /* ty=(Tensor[(1, 13, 13), float32], Tensor[(81), int8]) */
}

def @func_7632(%var_7624: Tensor[(81), float64]) -> (Tensor[(7, 3, 13), bool], Tensor[(81), bool]) {
  %948 = @func_4888() /* ty=(Tensor[(7, 3, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %949 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %950 = %949.0;
  %951 = cast(%var_7624, dtype="bool") /* ty=Tensor[(81), bool] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(1), int32] */;
  %953 = cast(%950, dtype="bool") /* ty=Tensor[(81), bool] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?), bool] */;
  %955 = %948.0;
  %956 = less(%953, %954) /* ty=Tensor[(81), bool] */;
  (%955, %956)
}

def @func_8018() -> Tensor[(1, 1, 13), float64] {
  @func_3899() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_5095() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) {
  @func_5093() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) */
}

def @func_6051() -> Tensor[(1, 1, 13), float32] {
  @func_4483() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_3541() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  %957 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %958 = %957.0;
  %959 = @func_2115() /* ty=Tensor[(1, 1, 13), float64] */;
  (%958, %959)
}

def @func_2028() -> (Tensor[(1, 1, 13), float32],) {
  %960 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  (%960,)
}

def @func_1713(%var_1703: Tensor[(81), float64], %var_1707: Tensor[(11, 1, 13), float32]) -> (Tensor[(1, 1, 13), float64], Tensor[(9, ?, 9), float64], Tensor[(81), float64], Tensor[(11, 1, 13), int64]) {
  %961 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %962 = cast(%var_1703, dtype="float64") /* ty=Tensor[(81), float64] */;
  %963 = reshape(%962, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), float64] */;
  %964 = @func_1433() /* ty=Tensor[(1, 1, 13), float64] */;
  %965 = cast(%964, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %966 = asinh(%965) /* ty=Tensor[(1, 1, 13), float32] */;
  %967 = cast(%966, dtype="int64") /* ty=Tensor[(1, 1, 13), int64] */;
  %968 = cast(%var_1707, dtype="int64") /* ty=Tensor[(11, 1, 13), int64] */;
  %969 = %961.1;
  %970 = @func_270(%963) /* ty=Tensor[(9, ?, 9), float64] */;
  %971 = minimum(%967, %968) /* ty=Tensor[(11, 1, 13), int64] */;
  (%969, %970, %var_1703, %971)
}

def @func_8359(%var_8357: Tensor[(169, 1), float64]) -> (Tensor[(81), float64], Tensor[(?, 13, 13), bool]) {
  @func_8356(%var_8357) /* ty=(Tensor[(81), float64], Tensor[(?, 13, 13), bool]) */
}

def @func_6643(%var_6641: Tensor[(6, 15, 6), float64]) -> (Tensor[(6, 15, 6), float64],) {
  @func_6640(%var_6641) /* ty=(Tensor[(6, 15, 6), float64],) */
}

def @func_6765() -> Tensor[(81), int8] {
  %972 = fn () -> Tensor[(81), int8] {
    @func_6120() /* ty=Tensor[(81), int8] */
  };
  %972() /* ty=Tensor[(81), int8] */
}

def @func_7249() -> (Tensor[(1120), int64], Tensor[(?, ?, 13), bool]) {
  @func_7247() /* ty=(Tensor[(1120), int64], Tensor[(?, ?, 13), bool]) */
}

def @func_10990() -> (Tensor[(1, 1, 13), float64],) {
  %973 = @func_2192() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %974 = %973.1;
  (%974,)
}

def @func_1830() -> Tensor[(1, 1, 13), float64] {
  @func_1828() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_1917() -> Tensor[(1, 1, 13), float64] {
  @func_1828() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_11639() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), bool]) {
  %975 = @func_3499() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(234), float64]) */;
  %976 = @func_8648() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */;
  %977 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
  %978 = %975.0;
  %979 = %976.1;
  %980 = @func_5852() /* ty=Tensor[(1, 1, 13), float64] */;
  %981 = %977.0;
  (%978, %979, %980, %981)
}

def @func_2621() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %982 = @func_1870() /* ty=Tensor[(1, 1, 13), float32] */;
  %983 = @func_2304() /* ty=Tensor[(1, 1, 13), float32] */;
  (%982, %983)
}

def @func_4485() -> Tensor[(1, 1, 13), float32] {
  @func_4483() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_11354(%var_11352: Tensor[(13, 1, 16), float32]) -> (Tensor[(13, 1, 16), float32],) {
  @func_11351(%var_11352) /* ty=(Tensor[(13, 1, 16), float32],) */
}

def @func_11302(%var_11287: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float32], Tensor[(1, 1, 13), float32]) {
  %984 = @func_6075() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %985 = %984.0;
  %986 = cast(%985, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %987 = cast(%var_11287, dtype="float32") /* ty=Tensor[(8, 1, 13), float32] */;
  %988 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %989 = mod(%986, %987) /* ty=Tensor[(8, 1, 13), float32] */;
  %990 = %988.0;
  (%989, %990)
}

def @func_5056() -> (Tensor[(7, 3, 13), bool],) {
  @func_5054() /* ty=(Tensor[(7, 3, 13), bool],) */
}

def @func_8476() -> (Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) {
  @func_8474() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(?, ?, 13), bool]) */
}

def @func_1828() -> Tensor[(1, 1, 13), float64] {
  %991 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %991.0
}

def @func_3397() -> (Tensor[(81), float64],) {
  @func_3395() /* ty=(Tensor[(81), float64],) */
}

def @func_10962() -> Tensor[(1, 1, 13), float32] {
  %992 = @func_9674() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %992.0
}

def @func_2532() -> (Tensor[(1, 1, 13), float32],) {
  %994 = fn () -> (Tensor[(1, 1, 13), float32],) {
    %993 = @func_2304() /* ty=Tensor[(1, 1, 13), float32] */;
    (%993,)
  };
  %994() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_6405(%var_6381: Tensor[(1, 13, 13), float64]) -> (Tensor[(1, 13, 13), float32], Tensor[(81), int8]) {
  %995 = @func_4802() /* ty=Tensor[(1, 1, 13), float64] */;
  %996 = cast(%995, dtype="uint16") /* ty=Tensor[(1, 1, 13), uint16] */;
  %997 = cast(%var_6381, dtype="uint16") /* ty=Tensor[(1, 13, 13), uint16] */;
  %998 = add(%996, %997) /* ty=Tensor[(1, 13, 13), uint16] */;
  %999 = cast(%998, dtype="float32") /* ty=Tensor[(1, 13, 13), float32] */;
  %1000 = @func_5162() /* ty=(Tensor[(81), int8],) */;
  %1001 = asinh(%999) /* ty=Tensor[(1, 13, 13), float32] */;
  %1002 = %1000.0;
  (%1001, %1002)
}

def @func_2305() -> Tensor[(1, 1, 13), float32] {
  %1004 = fn () -> Tensor[(1, 1, 13), float32] {
    %1003 = @func_2028() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %1003.0
  };
  %1004() /* ty=Tensor[(1, 1, 13), float32] */
}

def @func_8649() -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
  %1009 = fn () -> (Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) {
    %1005 = @func_2531() /* ty=(Tensor[(1, 1, 13), float32],) */;
    %1006 = @func_2238() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
    %1007 = %1005.0;
    %1008 = %1006.0;
    (%1007, %1008)
  };
  %1009() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64]) */
}

def @func_8761(%var_8760: Tensor[(81), int8]) -> (Tensor[(81), uint64], Tensor[(234), float64]) {
  %1018 = fn (%var_8741: Tensor[(81), int8]) -> (Tensor[(81), uint64], Tensor[(234), float64]) {
    %1010 = @func_6439() /* ty=Tensor[(81), int8] */;
    %1011 = cast(%var_8741, dtype="uint64") /* ty=Tensor[(81), uint64] */;
    %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1013 = cast(%1010, dtype="uint64") /* ty=Tensor[(81), uint64] */;
    %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %1015 = @func_7941() /* ty=(Tensor[(234), float64],) */;
    %1016 = bitwise_or(%1013, %1014) /* ty=Tensor[(81), uint64] */;
    %1017 = %1015.0;
    (%1016, %1017)
  };
  %1018(%var_8760) /* ty=(Tensor[(81), uint64], Tensor[(234), float64]) */
}

def @func_10743(%var_10742: Tensor[(3, 9, 9), int64]) -> (Tensor[(3, 9, 9), bool], Tensor[(81), float32]) {
  %1026 = fn (%var_10720: Tensor[(3, 9, 9), int64]) -> (Tensor[(3, 9, 9), bool], Tensor[(81), float32]) {
    %1019 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 9, 9), int64] */, dtype="bool") /* ty=Tensor[(3, 9, 9), bool] */;
    %1020 = shape_of(%var_10720, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1021 = cast(%var_10720, dtype="bool") /* ty=Tensor[(3, 9, 9), bool] */;
    %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1023 = @func_5093() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) */;
    %1024 = less_equal(%1021, %1022) /* ty=Tensor[(3, 9, 9), bool] */;
    %1025 = %1023.1;
    (%1024, %1025)
  };
  %1026(%var_10742) /* ty=(Tensor[(3, 9, 9), bool], Tensor[(81), float32]) */
}

def @func_4955() -> Tensor[(?, ?, 13), bool] {
  %1027 = @func_2621() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float32]) */;
  %1028 = %1027.0;
  %1029 = cast(%1028, dtype="float32") /* ty=Tensor[(1, 1, 13), float32] */;
  %1030 = cos(%1029) /* ty=Tensor[(1, 1, 13), float32] */;
  %1031 = @func_3049() /* ty=Tensor[(1, 1, 13), float64] */;
  %1032 = cast(%1031, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %1033 = shape_of(%1030, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(%1030, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%1034, %1035) /* ty=Tensor[(?, ?, 13), bool] */
}

def @func_2115() -> Tensor[(1, 1, 13), float64] {
  @func_1828() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_9175() -> (Tensor[(234), bool],) {
  %1043 = fn () -> (Tensor[(234), bool],) {
    %1036 = @func_3499() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(234), float64]) */;
    %1037 = %1036.1;
    %1038 = cast(meta[relay.Constant][41] /* ty=Tensor[(234), float64] */, dtype="bool") /* ty=Tensor[(234), bool] */;
    %1039 = shape_of(%1037, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1040 = cast(%1037, dtype="bool") /* ty=Tensor[(234), bool] */;
    %1041 = dyn.reshape(%1038, %1039, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1042 = less(%1040, %1041) /* ty=Tensor[(234), bool] */;
    (%1042,)
  };
  %1043() /* ty=(Tensor[(234), bool],) */
}

def @func_7385(%var_7383: Tensor[(540), float32]) -> (Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(540), float32], Tensor[(1, 1, 13), float64], Tensor[(81), bool], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  @func_7382(%var_7383) /* ty=(Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(540), float32], Tensor[(1, 1, 13), float64], Tensor[(81), bool], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) */
}

def @func_9676() -> (Tensor[(1, 1, 13), float32],) {
  @func_9674() /* ty=(Tensor[(1, 1, 13), float32],) */
}

def @func_5093() -> (Tensor[(1, 1, 13), float64], Tensor[(81), float32], Tensor[(1, 1, 13), float32]) {
  %1044 = @func_3012() /* ty=(Tensor[(1, 1, 13), float64],) */;
  %1045 = @func_3237() /* ty=(Tensor[(81), float64],) */;
  %1046 = %1045.0;
  %1047 = cast(%1046, dtype="float32") /* ty=Tensor[(81), float32] */;
  %1048 = @func_2929() /* ty=(Tensor[(1, 1, 13), float32], Tensor[(1, 1, 13), float64], Tensor[(81), float64]) */;
  %1049 = %1044.0;
  %1050 = rsqrt(%1047) /* ty=Tensor[(81), float32] */;
  %1051 = %1048.0;
  (%1049, %1050, %1051)
}

def @func_273(%var_271: Tensor[(9, 1, 9), float64]) -> Tensor[(9, ?, 9), float64] {
  @func_270(%var_271) /* ty=Tensor[(9, ?, 9), float64] */
}

def @func_6210() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float32], Tensor[(3, 15, 12), float32], Tensor[(54, 10), float64]) {
  %1052 = @func_1453() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */;
  %1053 = cast(meta[relay.Constant][42] /* ty=Tensor[(54, 10), float32] */, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
  %1054 = reshape(%1053, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), float32] */;
  %1055 = cast(meta[relay.Constant][42] /* ty=Tensor[(54, 10), float32] */, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
  %1056 = %1052.0;
  %1057 = @func_2304() /* ty=Tensor[(1, 1, 13), float32] */;
  %1058 = @func_4029(%1054) /* ty=Tensor[(3, 15, 12), float32] */;
  %1059 = sinh(%1055) /* ty=Tensor[(54, 10), float64] */;
  (%1056, %1057, %1058, %1059)
}

def @func_3050() -> Tensor[(1, 1, 13), float64] {
  %1060 = fn () -> Tensor[(1, 1, 13), float64] {
    @func_2023() /* ty=Tensor[(1, 1, 13), float64] */
  };
  %1060() /* ty=Tensor[(1, 1, 13), float64] */
}

def @func_8194() -> (Tensor[(7, 6, 14), float64], Tensor[(1, 1, 13), float64]) {
  @func_8192() /* ty=(Tensor[(7, 6, 14), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_9369() -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float32]) {
  %1072 = fn () -> (Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float32]) {
    %1061 = @func_3012() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %1062 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %1063 = @func_5874() /* ty=(Tensor[(5, ?, 13), bool],) */;
    %1064 = %1063.0;
    %1065 = cast(%1064, dtype="float32") /* ty=Tensor[(5, ?, 13), float32] */;
    %1066 = cast(meta[relay.Constant][43] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %1067 = reshape(%1066, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
    %1068 = %1061.0;
    %1069 = %1062.0;
    %1070 = sigmoid(%1065) /* ty=Tensor[(5, ?, 13), float32] */;
    %1071 = @func_3980(%1067) /* ty=Tensor[(8, 7, 15), float64] */;
    (%1068, %1069, %1070, %1071, meta[relay.Constant][43] /* ty=Tensor[(840), float32] */)
  };
  %1072() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64], Tensor[(5, ?, 13), float32], Tensor[(8, 7, 15), float64], Tensor[(840), float32]) */
}

def @func_5255() -> (Tensor[(234), float64], Tensor[(?, ?, 13), bool]) {
  @func_5253() /* ty=(Tensor[(234), float64], Tensor[(?, ?, 13), bool]) */
}

def @func_4637(%var_4636: Tensor[(16, 14, 13), float32]) -> (Tensor[(16, 14, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
  %1081 = fn (%var_4625: Tensor[(16, 14, 13), float32]) -> (Tensor[(16, 14, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) {
    %1073 = @func_4553() /* ty=Tensor[(1, 1, 13), float32] */;
    %1074 = cast(%1073, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
    %1075 = cast(%var_4625, dtype="bool") /* ty=Tensor[(16, 14, 13), bool] */;
    %1076 = @func_1801() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %1077 = @func_3430() /* ty=(Tensor[(1, 1, 13), float64],) */;
    %1078 = logical_or(%1074, %1075) /* ty=Tensor[(16, 14, 13), bool] */;
    %1079 = %1076.0;
    %1080 = %1077.0;
    (%1078, %1079, %1080)
  };
  %1081(%var_4636) /* ty=(Tensor[(16, 14, 13), bool], Tensor[(1, 1, 13), float64], Tensor[(1, 1, 13), float64]) */
}

def @func_6665() -> (Tensor[(1120), int64], Tensor[(1, 1, 13), float64]) {
  @func_6663() /* ty=(Tensor[(1120), int64], Tensor[(1, 1, 13), float64]) */
}

def @func_5163() -> (Tensor[(81), int8],) {
  %1091 = fn () -> (Tensor[(81), int8],) {
    %1082 = @func_3303() /* ty=(Tensor[(81), float64],) */;
    %1083 = %1082.0;
    %1084 = cast(%1083, dtype="float64") /* ty=Tensor[(81), float64] */;
    %1085 = log10(%1084) /* ty=Tensor[(81), float64] */;
    %1086 = cast(%1083, dtype="int8") /* ty=Tensor[(81), int8] */;
    %1087 = shape_of(%1085, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1088 = cast(%1085, dtype="int8") /* ty=Tensor[(81), int8] */;
    %1089 = dyn.reshape(%1086, %1087, newshape=[]) /* ty=Tensor[(?), int8] */;
    %1090 = bitwise_and(%1088, %1089) /* ty=Tensor[(81), int8] */;
    (%1090,)
  };
  %1091() /* ty=(Tensor[(81), int8],) */
}

def @func_4750(%var_4735: float32) -> (Tensor[(234), float64], float32, Tensor[(108), float32], Tensor[(81), float64], Tensor[(1, 1, 13), float32]) {
  %1092 = @func_3499() /* ty=(Tensor[(1, 1, 13), float64], Tensor[(234), float64]) */;
  %1093 = cast(%var_4735, dtype="float32") /* ty=float32 */;
  %1094 = cast(meta[relay.Constant][44] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %1095 = reshape(%1093, newshape=[]) /* ty=float32 */;
  %1096 = reshape(%1094, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
  %1097 = @func_3369(%1095, %1096) /* ty=(Tensor[(81), float64], Tensor[(1, 9, 12), bool]) */;
  %1098 = %1097.0;
  %1099 = cast(%1098, dtype="float64") /* ty=Tensor[(81), float64] */;
  %1100 = @func_4096() /* ty=(Tensor[(1, 1, 13), float32],) */;
  %1101 = %1092.1;
  %1102 = sqrt(%1099) /* ty=Tensor[(81), float64] */;
  %1103 = %1100.0;
  (%1101, %var_4735, meta[relay.Constant][44] /* ty=Tensor[(108), float32] */, %1102, %1103)
}

def @func_4553() -> Tensor[(1, 1, 13), float32] {
  @func_3950() /* ty=Tensor[(1, 1, 13), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen826/build/output.py", line 3817, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:22:15] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

