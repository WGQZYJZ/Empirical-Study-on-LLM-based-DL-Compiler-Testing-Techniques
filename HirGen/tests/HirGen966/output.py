import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_1513 = relay.var("var_1513", dtype = "float32", shape = (16, 2, 10))#candidate|1513|(16, 2, 10)|var|float32
uop_1514 = relay.sinh(var_1513.astype('float32')) # shape=(16, 2, 10)
output = relay.Tuple([uop_1514,])
output2 = relay.Tuple([uop_1514,])
func_1568 = relay.Function([var_1513,], output)
mod['func_1568'] = func_1568
mod = relay.transform.InferType()(mod)
mutated_mod['func_1568'] = func_1568
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1569 = relay.var("var_1569", dtype = "float32", shape = (16, 2, 10))#candidate|1569|(16, 2, 10)|var|float32
func_1568_call = mutated_mod.get_global_var('func_1568')
call_1570 = func_1568_call(var_1569)
output = call_1570
func_1571 = relay.Function([var_1569], output)
mutated_mod['func_1571'] = func_1571
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2091 = relay.var("var_2091", dtype = "int8", shape = (12, 13, 15))#candidate|2091|(12, 13, 15)|var|int8
const_2092 = relay.const([[[9,3,5,-1,4,-2,4,-8,1,-9,-5,-4,-1,3,10],[-3,-3,1,8,-9,-4,5,9,1,1,2,-4,-7,1,-9],[4,-1,8,-9,4,9,8,-7,7,-8,-9,6,-5,8,-5],[-8,-9,-7,9,-3,3,2,-6,-10,-7,3,7,9,4,-9],[-4,-7,-5,2,-2,10,7,-1,-3,5,-7,5,-8,9,4],[1,4,3,-4,-7,1,6,-9,2,5,-1,-8,10,5,-9],[7,6,-10,3,5,-2,7,-8,-4,10,10,4,2,-5,1],[-3,-6,10,-10,-1,4,5,3,8,6,7,-1,-5,4,7],[5,-4,1,-8,8,7,-7,3,-8,9,1,9,6,-5,3],[6,2,-9,-5,-7,8,-4,8,5,2,-7,10,5,9,6],[1,-8,-3,7,3,10,-8,6,-4,2,-5,-7,5,2,-1],[6,2,5,10,-3,8,6,-6,3,-1,5,4,-10,-5,4],[3,-8,-3,-10,8,8,5,-1,-6,2,-9,-5,9,3,10]],[[-10,5,-7,2,3,-1,6,-5,-8,3,-8,6,-5,-9,-9],[-6,-1,8,1,-5,1,-5,1,-6,-3,-6,-9,-4,-7,5],[-3,6,5,-2,-5,-3,1,5,-10,-9,-10,-3,9,-5,2],[2,-2,9,-2,4,-8,-8,-6,10,-4,8,6,-2,9,-1],[9,6,4,9,-8,5,-3,-2,-6,3,-3,-3,-2,-4,-4],[4,10,7,7,10,-2,-1,8,1,8,-5,7,-10,4,-4],[10,-6,-9,-4,10,2,-9,-6,-6,4,-5,5,-8,2,8],[4,3,-10,-2,9,-8,-5,-5,5,-8,-5,9,-4,4,1],[-4,-2,3,-1,6,-9,2,1,-5,-1,7,-7,-8,5,10],[6,9,3,1,8,-6,10,-3,5,1,-2,-4,7,1,-3],[-6,-5,6,8,1,-5,-5,5,7,-7,-8,7,9,3,5],[-10,-5,-5,-4,10,-9,4,-9,-3,1,-5,10,-2,-7,10],[2,-3,7,-10,3,8,-3,7,1,10,-1,-2,8,-9,-8]],[[-7,8,-7,-1,8,5,7,6,1,3,9,8,-4,-5,1],[1,4,-1,-6,8,-6,8,4,-7,-3,-8,-4,-6,-3,3],[-4,4,-6,3,-7,4,5,-7,7,-5,4,-5,-2,-1,9],[8,8,5,7,6,10,-7,1,5,-8,8,-6,2,-3,-2],[7,-8,-4,-9,-3,-4,4,-8,-7,-4,-3,-9,-7,-4,4],[-5,-8,5,7,2,10,3,-9,-2,-5,-1,1,7,1,-10],[-9,-3,7,-6,4,6,-4,-10,3,-9,-8,-5,10,-9,-3],[-5,4,-7,8,7,1,-5,-6,8,-7,-6,-7,4,-4,10],[1,-10,-5,-6,-2,4,8,-10,6,-2,5,6,10,1,10],[-1,-7,6,10,5,-4,-7,10,-7,-5,9,-8,2,-2,9],[-4,-5,-1,-3,4,5,6,-2,-9,-5,7,-4,7,-2,9],[-5,2,-4,-4,6,-4,5,2,8,-6,6,7,10,-6,-4],[-4,7,-2,10,7,-1,-6,-3,-6,2,6,-7,7,-6,10]],[[7,-3,-9,-5,-9,5,-5,8,3,-1,-8,-2,1,-6,2],[8,-7,2,-6,-7,3,-8,-6,8,-2,4,-7,9,-6,4],[-9,5,-5,-6,-8,-7,4,9,2,9,8,8,-10,5,9],[1,-4,-8,5,-10,-4,4,-2,7,-10,-2,10,6,-6,-3],[10,5,-2,3,-8,2,1,1,9,-1,-4,9,-2,3,6],[5,2,2,-4,5,9,3,3,5,-1,1,1,9,-5,-1],[8,10,5,-8,-8,-10,-10,1,6,5,4,1,6,-9,4],[-3,-8,-4,5,-2,5,-4,-7,-8,10,-8,-9,-10,-3,-9],[10,9,5,1,-5,6,6,-5,-4,-6,8,9,-7,4,1],[-4,5,9,7,3,2,2,-9,3,-1,8,-4,-7,-9,10],[-4,8,-8,-1,-6,4,4,-10,-4,6,3,-5,10,-8,2],[-6,-2,10,-3,4,-7,-1,-6,-4,3,6,-4,3,-10,3],[-8,-2,7,-10,-3,2,-3,-3,-4,-9,-6,3,5,-4,-8]],[[1,-9,-8,-5,9,-5,9,5,-8,6,-6,-4,2,6,8],[-4,1,10,-10,-8,-2,-1,2,1,-3,-7,1,1,-3,-9],[2,-10,7,-2,4,5,4,8,-9,4,-10,-4,-6,-4,1],[-2,7,4,1,-8,-6,2,8,-4,3,-1,-2,-1,8,-7],[-9,2,10,-7,-1,-5,-9,-5,-1,5,10,4,-1,-10,10],[-9,-8,-4,-6,9,-7,4,-5,2,9,-7,-3,1,-8,6],[2,-7,-6,-9,4,-10,4,7,-3,3,-8,3,3,-7,8],[-9,9,-9,8,9,-7,5,3,1,4,-1,6,4,-9,8],[-4,-6,-4,-10,-6,-6,-8,-4,-4,-8,-9,-1,-3,2,-5],[9,-9,4,1,-8,1,-8,5,-1,-7,7,9,10,-2,4],[-7,9,-8,-1,-7,4,1,8,-5,4,9,7,9,2,2],[-1,8,4,4,-5,-2,-10,4,-8,-6,-3,6,-5,-9,-6],[-2,7,6,-8,-7,-1,5,-4,9,7,6,4,-10,-5,-5]],[[-10,-10,1,-10,-8,3,8,1,8,-3,9,5,-9,2,3],[-9,-6,-10,4,-5,9,-2,-9,-6,-6,2,-6,7,-1,1],[8,-7,-8,-1,-8,-7,-8,1,-3,-4,6,2,-10,-9,-10],[5,2,-4,10,5,2,5,10,-9,3,-9,7,2,4,10],[-4,4,6,8,-3,-6,-4,7,8,-4,7,-1,9,-4,5],[-9,-9,-6,-10,3,-7,10,-1,-3,3,10,-3,6,4,-4],[-2,-9,5,7,10,-9,-10,-6,6,-8,9,8,-8,-3,-2],[1,-8,-6,6,8,-3,2,-6,4,10,-8,9,8,-8,-10],[-7,-6,-1,-8,8,-4,-5,-6,-5,-2,2,3,-7,9,-1],[8,9,-3,-8,9,10,-9,-10,-7,-3,1,2,7,4,-5],[-6,-2,-10,-9,-7,6,-4,2,10,-10,-10,-10,-4,10,-4],[10,1,-7,7,1,4,3,2,1,-7,-7,-1,-7,-4,10],[5,8,-4,-9,10,-6,9,2,7,5,4,8,7,-8,-6]],[[8,8,9,4,-4,-10,-9,-10,-10,6,-10,7,4,5,4],[-2,-3,2,-4,-4,1,9,-2,-2,-7,-10,-9,-2,9,-8],[-9,9,3,-7,-8,-5,6,-10,4,-3,-2,-7,7,7,9],[3,6,-1,3,-5,-1,-1,-6,-5,5,-3,-8,10,-2,-3],[2,8,-8,-8,8,-2,-8,6,-4,-6,9,-5,-2,4,4],[2,3,-8,10,10,1,-9,-6,3,-7,8,10,3,-10,5],[-4,2,8,6,7,-8,-9,7,3,5,1,-6,-9,-5,5],[5,-7,-9,-8,-5,-3,3,-1,9,-10,-3,-10,-2,-9,-7],[6,-6,-10,2,-9,5,9,6,-6,-3,3,-7,-7,1,-7],[2,2,-10,2,2,-6,-5,-5,-4,-10,-7,-5,6,-3,-9],[7,6,1,4,8,7,5,1,-7,-8,2,-9,-10,-8,-2],[-5,-8,8,9,-5,8,-2,-5,10,8,8,5,-6,2,8],[-10,-3,-6,-10,-3,-3,-8,-3,-8,5,-2,5,-2,-10,2]],[[2,-1,-2,6,-1,6,1,8,7,6,1,8,-5,6,9],[-5,2,6,4,-8,2,-10,-10,-4,6,2,1,-5,2,-4],[-9,-2,9,-7,-1,-2,10,5,-2,-8,10,-6,-10,7,-2],[3,-2,-6,-4,-5,-9,7,9,-9,2,9,-5,-2,8,7],[4,3,8,6,2,8,-8,-1,8,8,-7,-1,-4,7,4],[-3,-5,-4,-8,4,4,1,6,9,-2,-3,5,-1,-7,-4],[4,1,6,2,-10,3,-10,-7,6,10,4,9,7,10,-10],[-7,2,6,5,-1,6,-2,8,-3,-7,6,-6,3,-5,-9],[9,-1,-4,-8,-5,-8,5,-9,9,-1,5,-8,-2,-6,5],[-2,-1,-5,8,-6,6,-5,-3,-6,-6,-7,-6,-6,9,3],[-9,-8,10,5,-9,-2,-6,6,3,2,-10,-4,5,5,2],[-9,5,-1,-1,4,1,6,4,9,-5,9,-1,4,-3,-1],[6,-7,-7,7,-7,9,4,-7,9,-8,-6,-10,7,2,-2]],[[6,3,1,2,-8,-9,-6,4,3,-9,8,7,-2,-3,-6],[-9,4,-4,4,5,4,10,-8,5,-10,2,2,5,4,10],[4,2,3,-5,1,-10,-3,-9,9,-2,-10,6,-4,6,10],[7,5,-1,5,-7,3,5,10,-9,-8,5,-5,-10,1,-6],[1,-4,-5,5,9,6,1,-2,-5,-7,9,-3,-4,-3,8],[-7,-5,5,6,-9,4,-8,9,6,-10,9,7,-6,-6,8],[-2,-4,8,6,1,-8,3,10,8,7,8,-9,-9,-8,6],[10,-4,5,-4,-5,-8,-2,3,-4,9,-10,7,-6,4,1],[1,-8,-6,7,5,8,7,4,-5,2,10,-3,-9,5,-2],[-5,-10,7,7,-7,-8,-6,7,4,10,6,-5,-9,7,-2],[-2,1,2,-7,2,3,-1,4,1,-9,-3,3,3,6,7],[8,-7,-9,-7,-9,-2,-10,1,8,1,3,2,5,7,5],[1,5,-4,-8,3,-1,-10,-6,4,-3,1,10,3,1,7]],[[5,-9,6,5,4,1,-10,6,-4,-2,-5,4,-8,-1,8],[-5,3,-3,7,3,5,9,-7,-3,-3,-9,-8,4,-1,-3],[2,-9,-3,-6,-10,4,-4,-3,5,-1,9,-9,-2,-2,-1],[-1,-4,9,-5,-8,5,2,-2,-8,1,9,9,8,2,-4],[5,-5,-6,-6,9,-7,3,-2,4,-4,-1,-8,1,-2,4],[-8,-1,-9,9,-7,-9,-3,-4,1,-6,5,-10,-8,9,-7],[-5,-3,10,-5,-9,-7,9,-5,6,-10,-1,-10,10,-3,9],[3,5,-2,9,-3,-2,-1,2,-3,-1,1,-10,4,-2,-10],[-5,6,-8,-4,-6,9,9,8,-5,-2,-3,-8,-5,-4,9],[7,-6,5,-1,-3,8,-4,2,-10,2,1,4,-8,-2,-5],[8,-7,5,8,-1,-3,-5,-7,1,-1,-9,8,-4,2,1],[-8,-1,3,7,4,-4,-6,-5,5,-10,9,-1,-3,-3,2],[2,3,7,1,-9,3,-1,-4,3,2,-8,-3,6,-5,-8]],[[-5,10,-6,-3,-2,-4,-8,5,-1,1,-10,-4,7,8,1],[2,-8,3,9,5,-10,6,1,-10,-10,8,10,-4,2,-3],[-7,10,-5,-3,10,-6,4,8,5,-10,1,-6,1,-9,1],[-7,-7,6,-9,8,7,-10,8,-8,8,-2,7,-1,8,-1],[-4,-9,-5,-4,-6,-6,8,3,7,-1,-9,-5,10,5,6],[9,4,2,5,-8,10,-3,1,4,-7,-3,9,5,4,1],[5,1,-10,-3,-2,-7,6,-1,-7,-4,-2,-3,7,-4,7],[2,-5,-3,9,-9,8,3,5,-10,-9,-9,5,5,9,6],[5,9,-2,-3,10,-2,-8,-4,-9,7,1,8,-7,2,2],[-3,-6,7,5,-1,-3,-5,7,6,-4,-3,-1,2,4,6],[-10,5,1,3,1,3,6,7,-7,-9,-7,7,3,-10,5],[-7,6,2,3,3,1,9,6,-3,8,6,-6,5,-2,8],[-10,-2,-8,-4,-10,-4,5,-8,-9,3,-5,-3,2,10,-3]],[[-3,5,9,-10,4,-2,-2,-4,-7,3,8,-9,-7,-9,6],[5,-4,5,-4,8,6,6,6,-2,3,-5,3,4,-4,7],[4,9,4,3,8,6,3,6,4,-4,-3,-9,-10,6,-5],[-6,-7,-1,9,-1,-7,-3,-8,10,6,8,1,-6,10,9],[-7,6,-9,6,-1,5,3,8,6,3,2,-9,-9,-7,7],[6,-10,7,-1,7,10,-2,9,-4,10,5,1,8,-1,10],[-1,-3,1,10,4,4,9,-7,-7,-3,8,-2,6,-8,-3],[6,-5,4,-8,7,-2,-6,-8,1,-3,4,-4,8,-6,-6],[5,2,-10,5,1,-2,3,-5,-2,-8,-3,-4,-1,-7,-1],[4,5,-7,2,-5,-5,7,-6,1,-9,10,-3,10,-9,9],[-10,-9,10,-1,9,7,-2,2,-7,5,1,-9,-10,-8,-6],[10,-9,2,-4,-4,-9,-6,5,1,2,9,1,-10,7,-1],[-5,8,9,-3,-2,-7,8,-4,-5,5,2,3,-10,-4,2]]], dtype = "int8")#candidate|2092|(12, 13, 15)|const|int8
bop_2093 = relay.bitwise_and(var_2091.astype('int8'), relay.reshape(const_2092.astype('int8'), relay.shape_of(var_2091))) # shape=(12, 13, 15)
bop_2096 = relay.subtract(bop_2093.astype('float32'), relay.reshape(const_2092.astype('float32'), relay.shape_of(bop_2093))) # shape=(12, 13, 15)
output = relay.Tuple([bop_2096,])
output2 = relay.Tuple([bop_2096,])
func_2109 = relay.Function([var_2091,], output)
mod['func_2109'] = func_2109
mod = relay.transform.InferType()(mod)
mutated_mod['func_2109'] = func_2109
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2110 = relay.var("var_2110", dtype = "int8", shape = (12, 13, 15))#candidate|2110|(12, 13, 15)|var|int8
func_2109_call = mutated_mod.get_global_var('func_2109')
call_2111 = func_2109_call(var_2110)
output = call_2111
func_2112 = relay.Function([var_2110], output)
mutated_mod['func_2112'] = func_2112
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2169 = relay.var("var_2169", dtype = "float64", shape = (1, 11, 15))#candidate|2169|(1, 11, 15)|var|float64
uop_2170 = relay.sqrt(var_2169.astype('float64')) # shape=(1, 11, 15)
func_2109_call = mod.get_global_var('func_2109')
func_2112_call = mutated_mod.get_global_var('func_2112')
const_2178 = relay.const([-9,5,4,1,-4,-2,-10,3,8,-7,5,-4,-7,-5,6,-10,-8,10,-2,6,5,-2,8,7,9,8,8,-6,-5,-3,-5,-8,7,7,-1,7,10,1,3,7,-3,-5,-7,5,10,-6,10,9,4,-9,10,10,-5,9,10,1,1,4,9,-3,-9,5,3,-9,2,3,-5,-2,-4,10,9,7,1,9,3,8,-10,-1,9,-3,9,-2,7,-7,-7,6,10,5,5,1,7,-9,-2,-2,-10,1,9,2,-7,8,7,9,7,1,1,1,-9,7,-1,-2,3,8,7,9,-10,8,-3,5,5,4,-7,-6,-7,10,1,7,-5,6,-5,-6,4,-2,-4,-4,4,7,-7,10,7,10,-1,-9,-1,6,2,3,-7,10,6,10,-4,-3,-1,4,2,5,-10,8,1,-9,8,-8,9,-4,-2,4,3,-8,10,-2,6,6,2,-7,-9,-6,8,-2,2,9,4,1,-1,-2,2,5,-1,-4,-4,6,7,4,7,-2,4,2,-7,5,-3,10,1,3,-6,-5,-8,-8,6,-10,-8,2,6,-1,-9,2,3,7,-7,6,-5,-6,5,-8,5,-5,-2,4,3,10,2,-3,-4,-9,-3,6,9,1,-5,-4,-8,-3,8,-8,-5,-2,-8,1,9,3,-6,-8,-1,8,1,-8,3,-9,1,1,-4,4,-9,-6,-7,-8,7,8,8,-6,10,-8,-7,3,2,7,-6,-10,8,-3,6,-9,-1,3,-5,-8,6,5,1,-3,-1,-1,-3,-1,-8,7,-10,-6,-3,2,-1,2,-6,-1,4,-2,-6,1,-3,-10,9,-2,4,-1,9,7,-4,5,4,9,-2,3,3,5,6,-6,3,-7,-9,3,2,8,-9,-5,1,-2,-4,-10,9,-2,1,2,-7,-10,-7,-4,5,4,7,8,3,2,5,6,-7,8,8,1,-9,4,8,-5,-2,-6,8,8,3,3,-1,-1,7,6,9,1,-10,4,-2,2,7,2,3,-9,9,-4,8,9,-3,1,4,-2,8,4,-4,-4,4,8,-8,-4,8,-9,1,4,-5,-8,8,5,5,-5,-6,1,7,-9,-8,-5,-9,5,-4,-8,5,-2,-7,8,-6,2,-4,-6,-4,-9,6,-1,8,-8,4,-5,-1,9,-4,9,-1,-4,6,7,4,4,-10,6,-10,2,8,10,-4,7,-7,-8,5,-3,-3,-3,-8,9,-4,6,9,6,5,9,7,5,-10,2,8,-8,-8,10,-2,4,5,-9,-7,-4,-1,10,-8,-1,2,6,9,-1,-9,-4,1,8,-5,-10,2,-5,-8,-2,-1,-5,-6,-3,6,-3,6,-7,-5,-4,-2,3,10,-8,2,-3,4,-6,-10,9,-2,1,2,-8,3,-7,6,-8,9,-5,7,-6,9,-5,-2,4,-9,-3,-5,7,-2,-2,6,7,5,10,1,4,9,-6,4,-4,-9,3,9,1,-4,-2,-2,-8,10,-10,4,-10,5,-6,9,1,9,9,6,1,-4,10,3,-4,8,5,-10,-6,2,4,-2,-9,-1,-10,10,-6,-8,2,-6,4,10,5,6,-5,-1,-2,-5,5,1,4,-9,-10,9,-8,-8,-9,4,10,-5,-2,5,-1,-7,8,-2,-1,-5,9,3,-8,-2,1,3,7,6,8,5,4,6,10,-6,-10,-4,-4,-6,9,-3,3,-2,6,2,-1,-5,-9,-7,-10,1,-4,9,-1,-2,3,1,-3,-10,2,5,1,8,-1,-8,-8,1,4,-1,6,-5,1,9,-10,-3,3,6,7,1,-9,-9,5,-10,-1,-4,-4,-8,-9,-7,5,1,-9,9,5,8,-8,2,8,-4,10,-5,-9,7,9,-6,5,2,8,-4,3,6,8,9,-9,4,-1,4,-4,-9,-7,9,4,-8,7,7,3,-3,1,-6,5,10,10,7,2,-9,2,-3,-3,1,2,-10,-9,-5,-5,1,-2,7,2,8,-9,-5,8,7,8,9,-6,-4,-2,-7,1,-8,-10,6,8,-8,-4,-9,-2,4,-4,1,-4,5,7,6,2,2,8,4,6,4,-8,4,9,1,3,-3,8,-4,2,2,3,-5,-3,-8,4,9,-6,1,1,9,3,-10,4,5,-3,1,10,6,7,-10,-7,-3,2,-6,-8,-4,1,-4,-7,10,-4,3,-6,-7,4,-6,-6,1,4,8,6,-5,-7,9,-5,-1,9,5,4,10,9,8,6,-3,1,-4,-7,-4,-7,-6,4,-5,3,10,-2,-7,10,-8,9,9,-7,8,4,-8,-7,-3,-4,-7,8,8,10,5,-3,8,-8,-1,-10,1,-1,4,5,-2,-8,8,6,10,-1,8,9,5,3,-2,-7,8,2,-7,-9,-6,5,3,-7,-9,-7,10,1,3,3,8,6,7,5,-5,-10,3,2,-9,10,-7,5,3,5,1,-1,8,-4,-7,9,-5,-2,6,-4,-5,5,3,3,7,2,-8,8,10,2,-8,1,2,2,9,7,4,8,-3,3,-1,-9,-8,8,6,7,-3,-9,-4,-4,-1,-7,-4,-10,9,6,-10,10,1,-8,-8,-3,5,-5,-7,2,-2,2,-5,1,-8,4,4,-6,2,4,-10,10,-10,-6,3,-4,-6,-1,1,-7,-10,8,6,1,-7,9,-3,-5,-3,-10,9,-1,4,-10,-5,5,9,-1,9,-5,8,-6,-3,4,3,2,1,1,-7,-2,7,8,-3,2,-3,-8,3,4,6,1,5,5,9,1,4,-10,3,8,-9,5,9,4,7,7,-5,7,2,-6,-6,10,-2,-5,-8,-8,3,-10,-9,4,2,1,8,5,-10,4,10,9,2,-5,-7,9,8,-2,-6,5,8,3,-4,9,-1,-1,4,-3,2,-9,4,-8,-9,-1,9,-3,2,4,-6,1,3,-10,-1,-5,2,-3,6,-9,6,-10,-4,3,-8,-3,9,4,7,10,7,-1,1,-5,7,-4,2,7,8,3,6,-2,3,6,-10,-7,4,-7,-4,-4,6,4,-1,-7,9,-6,-7,10,4,7,-2,4,4,1,-6,7,-2,-2,-1,1,-9,7,-5,6,-2,-7,9,10,-5,-9,5,-2,8,9,1,3,1,5,-6,-7,-6,-3,-8,-8,6,-1,-5,8,-5,5,1,5,8,7,-1,-4,-1,-1,2,1,7,8,6,-7,7,8,-2,1,5,5,4,-2,-6,5,2,-7,9,3,3,8,-6,9,9,9,8,9,-3,9,6,9,-10,-9,2,-4,-1,-9,9,4,-8,2,-7,9,2,1,-10,5,9,-8,-5,-7,5,5,4,1,-4,-9,4,3,4,3,6,-3,-4,-5,-5,5,-8,3,-10,5,7,-7,10,6,-5,7,1,-6,2,1,-6,7,-7,-10,-3,2,-7,-1,-8,2,-10,-5,-10,5,4,7,-4,-8,5,9,10,-9,10,-5,-9,-2,-5,-1,7,5,3,5,-8,-10,10,-2,3,-9,-1,1,-9,-2,-1,-7,10,2,-8,1,-10,1,-2,-10,2,8,-2,-7,6,-5,-2,-5,-8,6,-4,2,-9,1,3,8,1,-3,9,-5,-9,9,-5,-6,1,-7,-10,-8,1,4,-3,3,8,-8,-6,-9,-1,8,5,9,5,-1,-6,-6,10,-2,2,-8,3,-7,-7,8,7,6,-2,-7,10,4,9,-2,1,4,3,-4,-8,-9,-9,4,3,-9,-6,1,-8,-1,-6,6,1,9,-1,-2,5,-3,6,-2,9,3,-10,1,-9,5,-9,3,2,-4,4,-2,-7,3,6,4,7,-1,2,-4,-6,8,-9,-7,-2,6,9,7,4,-9,7,6,-1,-2,-10,-7,5,-4,-4,-5,-2,-2,-8,-6,1,5,-1,2,7,-8,-10,5,-10,-10,-10,1,-8,2,2,-10,-5,10,7,1,-6,3,4,1,-7,-8,-8,8,4,1,9,-8,8,4,2,9,4,5,-8,-4,9,-1,-3,-2,10,-2,5,-5,9,-8,5,-8,9,-1,-2,-5,6,-8,4,5,-3,3,6,3,-7,6,-10,3,8,10,8,10,9,5,8,-9,5,-9,10,-6,-2,-1,9,-4,7,-8,9,-10,-6,4,-5,6,-7,-2,-6,-5,3,3,-1,8,10,4,-3,-10,1,4,-6,-7,5,9,-10,-2,-2,2,3,-3,5,4,4,-7,-7,3,3,-6,9,-10,2,1,-8,-9,-4,-3,2,7,9,-2,-6,10,7,8,5,-7,1,-3,1,-7,4,2,-7,-1,4,5,-10,-9,-2,3,4,-4,-7,1,9,-3,-8,-7,5,-1,3,8,10,-8,-2,-10,2,1,-3,7,2,2,-6,-5,1,9,4,7,3,-8,8,-5,-4,-10,-1,-8,9,-3,1,6,-7,-5,-2,-7,-8,4,-5,-8,5,7,-9,9,4,-4,3,8,7,-3,6,6,6,-3,8,1,1,9,2,-9,3,1,3,8,-3,-9,-2,6,-4,3,10,5,-4,3,-6,2,6,-7,-3,7,7,-6,10,9,10,-5,-5,-4,-7,-5,-1,-4,10,-4,-6,8,8,4,-7,3,6,8,10,-2,-10,2,2,6,7,5,-4,9,-9,1,8,1,-10,5,2,-9,-4,2,6,10,-10,9,7,6,-10,2,-9,-2,-4,10,-6,-6,9,8,8,9,2,1,-5,-5,-2,-1,-10,1,-1,9,10,-8,5,-4,-2,10,10,-3,-6,10,-5,-10,-5,8,4,1,-3,2,-3,-1,-9,10,2,-4,2,-8,-4,-10,1,-3,5,8,-5,8,-7,4,9,5,7,-10,1,4,8,2,-3,-4,-1,8,5,3,-4,7,-10,7,-10,-6,4,-6,-3,-4,5,7,-2,-1,9,-10,2,-8,-2,10,1,4,-6,-10,1,7,1,2,-9,4,-9,-2,-4,3,-7,-7,-1,-6,1,9,-1,8,2,-7,4,-8,-8,6,-1,7,4,-6,6,5,9,9,-10,-2,-6,-1,2,5,-10,-1,2,10,-3,2,-8,7,8,-7,-3,-1,10,1,-1,-10,-9,-3,9,6,10,1,6,-9,-4,-5,7,-5,-7,-9,-7,3,-1,9,-2,2,-5,-3,-9,-7,9,9,7,-5,4,-7,2,-9,8,3,-2,-3,-7,10,-9,10,-9,5,5,-2,-1,-10,-9,-8,-6,9,7,7,-8,-2,3,4,1,8,7,-4,9,5,-4,6,-5,10,-7,-6,5,10,7,2,5,-5,1,3,5,9,1,1,-2,-8,7,2,9,10,7,-6,-1,5,2,4,-7,9,10,-4,1,9,-5,2,4,1,-5,6,-10,9,-10,-1,6,5,-2,-6,2,-2,8,-10,-7,6,8,7,-2,1,-9,-10,-4,9,-5,-10,-4,-5,-6,7,-8,5,-6,5,9,3,-10,-3,8,-2,-10,-2,-5,-9,4,6,2,7,6,-7,9,4,-2,6,10,-3,-8,-7,3,-6,1,-8,-5,-2,-8,7,8,9,-10,-10,-10,-1,7,5,-3,7,-5,8,2,3,8,9,1,7,-2,-2,-9,5,10,-6,-1,8,7,-5,7,-9,6,-2,-8,8,8,-2,-4,3,-5,8,1,1,3,7,2,4,5,-8,-7,-1,-6,-3,10,-4,-4,-2,-10,3,8,3,5,1,5,1,6,8,6,4,-7,4,3,-8,-10,-6,10,-10,9,7,3,-8,1,-10,-7,-7,-5,8,9,-10,-7,-7,6,-4,-3,10,8,-2,6,-9,8,-9,-7,10,-3,2,9,-8,9,1,-2,7,-1,-2,2,-1,-7,3,9,7,6,-3,1,1,5,1,2,-9,6,9,-5,8,3,4,-7,-4,-10,-9,10,10,-1,-3,8,8,-5,2,9,10,1,2,4,-2,-4,-5,2,-10,-6,-8,4,10,4,1,-4,-5,-6,-5,-4,-5,10,5,-3,5,-5,-6,8,2,8,7,-6,-6,-1,3,8,6,-7,-9,3,10,8,10,-1,-10,-6,10,-9,-4,-7,-6,4,4,2,-2,9,4,9,3,-4,9,-2,-2,5,-9,-3,-9,8,8,9,4,3,5,-10,2,-3,-6,7,-6,-5,7,2,7,-1,10,9,8,-10,6,3,-5,-6,-5,-10,7,8,5,2,-1,-1,5,-5,-3,-7,-6,-4,1,2,5,7,-9,-10,6,-8,-6,-8,-10,5,-9,-2,-5,5,-8,-1,1,9,-2,6,-10,3,-5], dtype = "int8")#candidate|2178|(2340,)|const|int8
call_2177 = relay.TupleGetItem(func_2109_call(relay.reshape(const_2178.astype('int8'), [12, 13, 15])), 0)
call_2179 = relay.TupleGetItem(func_2112_call(relay.reshape(const_2178.astype('int8'), [12, 13, 15])), 0)
output = relay.Tuple([uop_2170,call_2177,const_2178,])
output2 = relay.Tuple([uop_2170,call_2179,const_2178,])
func_2183 = relay.Function([var_2169,], output)
mod['func_2183'] = func_2183
mod = relay.transform.InferType()(mod)
var_2184 = relay.var("var_2184", dtype = "float64", shape = (1, 11, 15))#candidate|2184|(1, 11, 15)|var|float64
output = func_2183(var_2184)
func_2185 = relay.Function([var_2184], output)
mutated_mod['func_2185'] = func_2185
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2245 = relay.const([[[2.123861,2.165816,-9.512309,-5.298134,-3.274626,-5.003329],[6.032476,-3.379206,-4.359209,-3.936757,-8.387216,-9.031481],[1.553478,2.332864,9.076109,0.877360,8.371120,-6.075226],[7.340815,-7.517513,-7.974760,3.473025,9.397644,-7.463003],[-2.260845,7.041114,-8.778140,4.939375,-6.657875,5.211308],[7.320771,-1.994040,5.957934,0.775618,3.142716,-7.982535],[-1.916982,2.501675,3.448847,3.936047,-4.684033,-1.582460],[8.597080,-0.598026,4.154855,1.935765,-3.870693,9.876677]],[[-4.788689,-1.604141,6.760913,3.388802,-2.014135,6.730951],[3.004874,-5.007130,5.680447,-1.462385,-8.267559,-3.395964],[-2.837399,-8.646048,-8.587457,-0.717025,-3.957386,-0.659463],[5.711371,0.599115,4.211947,8.704919,-6.985751,-4.537609],[-8.811450,-4.875275,-8.544972,-6.374161,-0.148973,4.294587],[7.056291,-9.897285,7.928432,2.572786,-5.963356,-6.123048],[5.208158,-7.997039,1.044456,8.526184,9.105034,-1.514095],[-5.511409,-0.126827,-4.674235,6.833052,6.646878,7.263600]],[[9.499778,1.960726,-3.155449,8.578562,8.356546,1.350539],[-5.697292,7.863238,-6.735656,9.785863,-6.941830,9.222256],[-8.668287,-6.904759,-8.487399,-2.217460,-4.758336,-1.405487],[0.128700,-3.408070,9.712293,-9.416425,-9.522992,-8.972702],[2.836536,-2.720391,8.667885,-9.168408,-0.456701,-2.074277],[0.823703,-2.042771,-0.075884,-1.504886,-7.073134,4.908384],[-1.094941,-8.502694,2.903160,7.224542,-0.162901,-1.938753],[3.030834,6.897265,-5.545423,8.681957,-0.213533,4.304657]],[[-2.351015,5.924858,6.746151,-7.879458,-1.230009,-8.775989],[2.173733,-4.004125,5.998997,-2.135254,-7.816309,1.558510],[2.364573,-1.757970,-7.894622,-9.550765,6.971517,-7.762065],[-2.542890,-6.652407,7.451108,-3.199089,-9.985046,-6.074453],[-3.776389,-1.816587,1.672851,2.231916,-6.161744,-3.173870],[6.319425,4.682777,-3.713039,5.036930,1.108091,4.987674],[1.843297,2.835957,1.822672,5.108273,-6.846907,-8.600785],[7.881186,-9.854092,9.209189,1.648743,-0.857306,9.497021]],[[-9.025134,3.756441,-5.768030,-2.702597,5.066980,0.802575],[6.441082,-7.146014,-1.073095,6.474235,-9.044722,-0.622113],[6.686428,-4.368511,-0.254703,-8.890690,6.232445,-9.864292],[9.910831,7.077028,1.006063,6.182636,8.048397,-2.980877],[-7.681248,-7.015943,-8.122276,-8.610190,-5.550877,4.787933],[-1.551411,5.124190,8.904045,7.121511,-1.050412,1.678511],[4.748082,-6.877537,-6.150981,-0.184322,1.659894,3.235757],[3.071782,7.739392,4.825617,7.195159,-7.961677,2.058384]],[[-6.525588,-7.037192,6.809834,-2.617567,-9.628304,9.669120],[-5.091329,7.169514,-5.127575,8.336252,-9.982174,8.378535],[6.852145,1.979162,4.238859,2.789893,2.138035,-4.520982],[-5.375029,9.736759,-5.151003,3.244939,1.529540,-5.728548],[-4.700368,4.570482,-6.039076,-3.035998,7.084389,4.125223],[-7.997470,1.528574,0.671778,-9.233583,-0.681964,-4.570773],[-8.531097,7.991616,1.583159,-3.160012,8.781648,-2.717032],[-1.929238,7.893328,2.712288,9.525147,-9.961512,6.422830]],[[-8.702499,6.211695,-8.247577,8.026127,2.388303,-1.907833],[-4.371371,-2.599219,-5.052745,6.153023,5.445002,0.928265],[-5.300214,-2.567384,7.603192,-4.346350,0.380298,-5.300216],[4.814044,2.046213,5.116947,1.921459,-4.976724,7.466697],[0.061841,3.125333,-3.224511,4.111875,1.366379,2.154477],[6.949882,1.071572,6.169968,-8.443055,6.614354,9.465874],[0.352730,4.013889,1.772696,5.271454,5.674627,0.391674],[6.694626,-3.019633,3.844378,1.793466,0.084302,2.842285]],[[-9.819038,-6.206740,4.552985,-3.724209,-9.999743,-9.560601],[8.333042,-3.525966,9.094564,-2.704613,-7.465960,8.310129],[-5.504612,8.584878,5.154480,-8.292626,-4.350988,-9.477140],[-0.199731,8.222911,-9.462051,-2.608901,1.224048,-2.626692],[4.465151,7.110444,-2.711241,3.761562,8.040120,-2.802720],[3.097293,-6.957702,3.879567,-1.276839,-9.140364,7.707301],[9.253773,-3.059402,-2.588648,9.392347,7.773571,-2.458392],[-9.463004,-2.995820,-0.241218,-8.437557,2.909654,1.286475]],[[2.760602,-1.597711,3.016430,-5.892881,-9.489320,3.154181],[-7.540439,-8.332045,4.323282,3.674162,-6.507552,9.210814],[-7.633188,-9.135724,4.333322,6.348052,6.558793,-5.098451],[0.147604,-7.257957,5.620991,-2.001475,-3.948469,9.965364],[2.893446,4.570342,-7.319086,-1.492224,0.053151,-5.403431],[5.198951,2.220728,6.075294,6.504911,5.336741,-2.199268],[-7.438082,-0.671685,0.808828,-9.957150,-1.366943,-9.634616],[8.878610,5.340988,-8.722296,4.043714,8.989530,-5.041922]],[[-4.382830,2.569622,0.916136,-4.317216,2.611625,8.438204],[-0.070950,7.643062,9.674045,2.249451,3.571648,2.558551],[-3.545627,3.466193,-6.807006,-7.746262,1.137373,-9.143045],[-2.931136,-8.743110,9.594589,-9.009683,-3.482894,-4.353187],[-6.068781,-6.146298,-5.700179,4.374559,-7.508024,8.503722],[-8.549557,6.185515,2.983736,7.521206,-3.707691,8.996666],[5.100654,9.283802,-2.514595,2.026609,1.522179,-0.126628],[-8.678750,-8.428300,-1.309040,8.989074,2.910425,-8.583990]],[[-3.670542,-1.722108,-2.501109,-8.620384,-9.926419,8.355662],[9.246042,5.516992,-3.588981,-1.494354,0.787474,0.862264],[-5.856498,-5.571219,0.970428,2.479022,-4.287331,-2.766239],[4.024152,-5.516009,-3.072470,-9.459823,6.504470,-5.525180],[9.011732,-1.427378,0.502583,-7.791921,-4.947310,2.588410],[-7.981792,9.017998,8.639967,3.048101,-3.454704,-7.821509],[7.437031,-3.115560,-4.309807,-9.711087,4.675652,-5.490444],[-4.605167,8.793721,9.912432,-8.063666,2.278441,9.224343]],[[7.999482,6.997963,-9.830354,-4.346464,6.736718,-3.895606],[7.236726,8.530656,8.653365,7.305232,1.199065,-7.336989],[0.794983,-9.447755,-6.140797,6.227964,-2.276254,5.183470],[-3.522525,-7.959155,-7.416889,9.017346,2.415307,8.501718],[-4.092379,-7.538584,2.102444,3.746332,6.626720,6.789569],[3.758741,7.698986,3.927343,-6.938172,-6.816539,5.631362],[-5.677701,-5.663475,-9.177020,-9.137593,-5.378700,-8.001148],[-0.387699,-8.788457,1.163842,9.821158,9.583380,-3.113309]],[[-8.500982,-2.475274,4.561710,4.186545,7.592646,4.302381],[2.444066,-6.481995,-5.903953,9.848904,-1.657870,-6.373108],[0.347778,-6.063462,-5.585112,-2.313620,-0.289063,3.365923],[-4.420381,7.588330,-5.326948,4.778503,-5.843358,0.568470],[-7.737163,0.685649,-1.815703,-8.448375,-6.901317,-4.261107],[5.769719,2.231006,-3.599147,7.575101,0.932846,-4.685158],[7.946027,-0.577227,5.692619,-9.051395,-8.291446,9.909320],[4.253843,8.498179,-4.604007,-0.225806,-1.826004,4.543244]]], dtype = "float64")#candidate|2245|(13, 8, 6)|const|float64
uop_2246 = relay.log2(const_2245.astype('float64')) # shape=(13, 8, 6)
output = uop_2246
output2 = uop_2246
func_2269 = relay.Function([], output)
mod['func_2269'] = func_2269
mod = relay.transform.InferType()(mod)
output = func_2269()
func_2270 = relay.Function([], output)
mutated_mod['func_2270'] = func_2270
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_2286 = func_2269_call()
call_2287 = func_2269_call()
func_2183_call = mod.get_global_var('func_2183')
func_2185_call = mutated_mod.get_global_var('func_2185')
const_2293 = relay.const([[8.661908],[-8.017299],[-0.336906],[2.580284],[-5.766512],[-9.399483],[4.607586],[-7.110095],[-2.427760],[-8.399484],[4.192677],[5.069711],[-0.786610],[1.762951],[7.001067],[-7.499082],[0.945837],[-4.130369],[-5.021768],[-1.805276],[-6.123891],[0.175729],[-7.226673],[4.412253],[3.913033],[7.283482],[6.558227],[-4.708117],[1.665030],[-7.987890],[4.714788],[1.525270],[2.916440],[-9.708057],[-3.362492],[-3.961426],[3.616314],[-1.634804],[7.459567],[7.085728],[7.017025],[-4.113559],[6.267454],[-2.152968],[-8.872662],[4.909396],[1.338259],[-8.257537],[9.267299],[-0.348211],[9.810226],[-5.096958],[7.529769],[-2.665772],[-6.762992],[8.809047],[0.854829],[7.304262],[-0.690643],[9.956886],[-9.537653],[6.051914],[-9.313330],[1.971367],[-0.672979],[6.650189],[-0.299911],[1.981393],[-5.822252],[0.013693],[5.385906],[-7.802543],[-8.431117],[9.015287],[7.700164],[8.319097],[-5.502106],[4.541770],[7.898123],[-8.252304],[7.488373],[7.408829],[9.880238],[4.638791],[1.207792],[7.405835],[9.530466],[8.775657],[2.648496],[3.483099],[8.689758],[-7.425662],[5.525346],[-2.369796],[-6.219695],[-4.599063],[-1.055845],[-3.146542],[-5.256743],[4.292225],[-5.180870],[-7.611713],[-1.148674],[8.342296],[9.967917],[-5.933997],[5.037318],[-3.370357],[2.250889],[8.624298],[1.170280],[9.650131],[-7.699904],[2.971437],[5.209612],[-5.345838],[7.655848],[7.950649],[-9.390946],[3.970388],[0.621902],[-6.398637],[1.500710],[2.917522],[-5.495441],[-2.049687],[4.146590],[8.521221],[9.572270],[-3.595952],[-9.699319],[-8.640047],[-1.555684],[6.147364],[-5.069804],[-6.919468],[7.336146],[8.174046],[8.725333],[0.970239],[7.296325],[1.578656],[5.436944],[-4.806984],[3.986965],[2.038947],[5.367540],[-2.108184],[9.145205],[-1.114497],[-4.133943],[-8.749295],[-7.601605],[-5.970676],[-6.313427],[7.505592],[-6.299869],[-4.072750],[3.715710],[-6.909065],[-0.219973],[-1.396976],[-7.447553],[5.820587],[1.668363]], dtype = "float64")#candidate|2293|(165, 1)|const|float64
call_2292 = relay.TupleGetItem(func_2183_call(relay.reshape(const_2293.astype('float64'), [1, 11, 15])), 0)
call_2294 = relay.TupleGetItem(func_2185_call(relay.reshape(const_2293.astype('float64'), [1, 11, 15])), 0)
uop_2302 = relay.asin(call_2292.astype('float32')) # shape=(1, 11, 15)
uop_2304 = relay.asin(call_2294.astype('float32')) # shape=(1, 11, 15)
output = relay.Tuple([call_2286,const_2293,uop_2302,])
output2 = relay.Tuple([call_2287,const_2293,uop_2304,])
func_2306 = relay.Function([], output)
mod['func_2306'] = func_2306
mod = relay.transform.InferType()(mod)
mutated_mod['func_2306'] = func_2306
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mutated_mod.get_global_var('func_2306')
call_2307 = func_2306_call()
output = call_2307
func_2308 = relay.Function([], output)
mutated_mod['func_2308'] = func_2308
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_2324 = relay.TupleGetItem(func_2306_call(), 2)
call_2325 = relay.TupleGetItem(func_2308_call(), 2)
output = call_2324
output2 = call_2325
func_2345 = relay.Function([], output)
mod['func_2345'] = func_2345
mod = relay.transform.InferType()(mod)
mutated_mod['func_2345'] = func_2345
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2345_call = mutated_mod.get_global_var('func_2345')
call_2346 = func_2345_call()
output = call_2346
func_2347 = relay.Function([], output)
mutated_mod['func_2347'] = func_2347
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_2416 = relay.TupleGetItem(func_2306_call(), 1)
call_2417 = relay.TupleGetItem(func_2308_call(), 1)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_2427 = func_2345_call()
call_2428 = func_2345_call()
func_2183_call = mod.get_global_var('func_2183')
func_2185_call = mutated_mod.get_global_var('func_2185')
call_2431 = relay.TupleGetItem(func_2183_call(relay.reshape(call_2427.astype('float64'), [1, 11, 15])), 1)
call_2432 = relay.TupleGetItem(func_2185_call(relay.reshape(call_2427.astype('float64'), [1, 11, 15])), 1)
bop_2435 = relay.logical_xor(call_2416.astype('uint32'), relay.reshape(call_2427.astype('uint32'), relay.shape_of(call_2416))) # shape=(165, 1)
bop_2438 = relay.logical_xor(call_2417.astype('uint32'), relay.reshape(call_2428.astype('uint32'), relay.shape_of(call_2417))) # shape=(165, 1)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_2440 = func_2345_call()
call_2441 = func_2345_call()
output = relay.Tuple([call_2431,bop_2435,call_2440,])
output2 = relay.Tuple([call_2432,bop_2438,call_2441,])
func_2447 = relay.Function([], output)
mod['func_2447'] = func_2447
mod = relay.transform.InferType()(mod)
mutated_mod['func_2447'] = func_2447
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mutated_mod.get_global_var('func_2447')
call_2448 = func_2447_call()
output = call_2448
func_2449 = relay.Function([], output)
mutated_mod['func_2449'] = func_2449
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_2458 = relay.TupleGetItem(func_2447_call(), 1)
call_2459 = relay.TupleGetItem(func_2449_call(), 1)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_2460 = relay.TupleGetItem(func_2306_call(), 1)
call_2461 = relay.TupleGetItem(func_2308_call(), 1)
output = relay.Tuple([call_2458,call_2460,])
output2 = relay.Tuple([call_2459,call_2461,])
func_2470 = relay.Function([], output)
mod['func_2470'] = func_2470
mod = relay.transform.InferType()(mod)
output = func_2470()
func_2471 = relay.Function([], output)
mutated_mod['func_2471'] = func_2471
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_2549 = relay.TupleGetItem(func_2306_call(), 1)
call_2550 = relay.TupleGetItem(func_2308_call(), 1)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_2556 = func_2345_call()
call_2557 = func_2345_call()
uop_2558 = relay.acosh(call_2549.astype('float32')) # shape=(165, 1)
uop_2560 = relay.acosh(call_2550.astype('float32')) # shape=(165, 1)
output = relay.Tuple([call_2556,uop_2558,])
output2 = relay.Tuple([call_2557,uop_2560,])
func_2562 = relay.Function([], output)
mod['func_2562'] = func_2562
mod = relay.transform.InferType()(mod)
output = func_2562()
func_2563 = relay.Function([], output)
mutated_mod['func_2563'] = func_2563
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_2609 = relay.TupleGetItem(func_2306_call(), 0)
call_2610 = relay.TupleGetItem(func_2308_call(), 0)
output = call_2609
output2 = call_2610
func_2626 = relay.Function([], output)
mod['func_2626'] = func_2626
mod = relay.transform.InferType()(mod)
output = func_2626()
func_2627 = relay.Function([], output)
mutated_mod['func_2627'] = func_2627
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_2806 = relay.TupleGetItem(func_2306_call(), 0)
call_2807 = relay.TupleGetItem(func_2308_call(), 0)
const_2808 = relay.const([[[-7.725440,3.451119,-8.683329,4.546476,8.176046,-0.043445],[-0.679741,7.412067,2.785882,-0.917163,-2.047325,8.607013],[-7.683990,3.342210,-6.982375,-6.001449,-7.745836,-7.824325],[-7.392280,4.963072,-5.652531,-8.981708,-0.623667,-6.066833],[-9.961348,-2.307214,-4.414654,-5.601160,-7.211113,7.616199],[-4.664463,4.551328,4.315486,1.760150,-8.742705,9.891804],[0.559394,7.817344,4.318564,2.265152,-2.155730,-8.148639],[-5.315623,3.869075,0.703965,3.670931,9.926265,-3.563222]],[[-6.675732,-7.363666,-4.284130,7.184037,0.077262,-4.206275],[-7.404479,-5.084472,4.961240,6.153596,1.440873,-5.150509],[4.065179,5.589568,2.651735,1.669668,2.135843,-7.486047],[9.917235,3.570282,-7.406638,8.302519,-0.583974,6.534852],[3.245221,0.260244,-2.904585,9.600744,7.635356,-4.810238],[-4.965623,-3.952697,7.270862,0.503336,-0.245833,7.971369],[-8.451885,-7.697030,-1.003868,0.447625,-2.528570,2.269142],[-2.762174,9.852307,0.448267,-2.483171,3.635820,6.743166]],[[9.768600,-1.486136,-2.957529,-9.267864,-5.237957,2.782935],[3.973599,-8.546185,5.430950,-1.349973,-6.750472,0.607362],[5.697533,7.531142,-4.367384,6.073719,-6.304445,3.208734],[7.721883,6.896341,-0.953796,-6.019648,9.365273,-6.237870],[-7.314177,3.203312,-1.097372,-5.601131,-0.965587,-3.873904],[9.432937,8.568599,9.878101,-5.656600,-3.258402,3.718381],[-2.738951,-2.720042,-7.588491,-0.028813,7.444678,-8.507799],[-9.029578,8.047948,-9.056300,1.864944,7.799634,7.275415]],[[1.565972,5.160580,-9.150395,9.226730,8.230244,-3.661241],[-2.551256,-8.103394,-8.304028,5.300348,-3.968113,-6.725518],[-2.907538,-3.297973,-5.958967,4.266534,9.557476,5.081215],[5.337544,-9.576776,6.814157,-7.194764,1.861535,4.203098],[6.866293,-1.796822,-3.529376,2.633983,-4.961040,-7.884832],[8.786928,-7.299907,4.551765,-5.428655,-7.000701,7.917163],[-7.617817,8.515562,-5.855210,5.632139,2.530520,8.227158],[-1.535443,4.586729,-3.469274,0.676669,6.218027,-4.290507]],[[-1.939558,4.659764,6.196005,-2.330238,-4.449236,2.583993],[-9.542248,2.557701,-6.522745,6.722508,0.149025,0.416847],[2.826737,4.765436,7.840413,7.519231,1.450853,-4.526242],[9.474286,-2.118292,1.991779,-3.244586,-9.528624,5.314383],[4.886815,-7.356742,3.198180,-3.476456,-7.475878,1.099716],[-9.749166,0.362089,4.248310,-8.697310,-5.566880,2.442059],[2.907979,-2.352544,5.148049,-7.256755,-9.123714,2.044789],[4.331814,-7.197596,3.671653,5.439919,-6.183952,4.566900]],[[-6.751182,-0.418483,-0.058031,-4.448146,-8.332383,-4.596561],[3.525936,-0.297687,8.592738,0.478019,5.416777,-7.944282],[-3.289880,-5.361786,1.331640,-5.764552,-9.356624,-2.724403],[-2.041650,-2.264208,0.747781,-9.431188,6.977005,0.806508],[-4.278249,7.569514,-5.467809,5.218477,2.132810,-5.290624],[0.787210,3.373201,9.589808,8.916733,-7.840067,-8.771533],[-2.014224,-6.454694,0.126319,-9.717294,8.852263,-9.476996],[6.470154,-9.449901,8.991205,6.648641,4.208168,-9.610433]],[[1.121554,6.200640,5.377772,8.009880,-7.594273,-9.149896],[6.329655,-9.020109,-6.168550,7.332159,-9.074040,1.655679],[-8.937587,-9.561948,6.731112,-9.828904,-5.554398,-1.001366],[-9.459755,1.718880,-6.080734,-5.194869,-6.611875,-7.477917],[0.735092,7.351624,9.726944,-4.003576,6.076869,7.072712],[2.689980,2.911741,3.389457,-2.760712,-6.443565,9.247784],[2.820892,-2.102635,-6.350024,-7.517251,-5.589492,7.559110],[-8.063361,6.501634,-3.936485,-2.454078,4.980790,-0.491382]],[[-8.410213,-1.803242,-0.266016,6.558469,6.228397,-0.123576],[-9.303076,-2.653371,-6.597327,-6.467125,6.661179,-9.467212],[-8.549458,8.682292,2.450111,2.955242,-6.245432,-2.179303],[1.675641,-5.689255,1.594978,-5.141497,-9.827067,2.322208],[-3.142165,0.664949,5.209382,3.484906,4.210628,8.308041],[-6.230918,-9.530153,-9.665375,-3.355013,-4.477413,9.070446],[0.280960,5.215909,-1.990680,-3.781203,-5.241923,-9.158577],[0.021465,8.354263,-2.641176,1.290922,8.588586,-0.616496]],[[-9.229983,4.157048,3.406728,6.632825,-9.701786,-8.684391],[7.526456,1.065377,7.998136,5.910029,-5.944828,8.178931],[-2.729529,9.419741,-7.132773,4.202303,-5.209024,0.400494],[6.720400,-0.037771,5.530717,-0.013818,0.160139,-8.297506],[2.235439,-7.958732,-2.785342,4.705752,-6.493235,0.270756],[-3.028040,-3.635510,2.407432,-2.664203,-1.587761,5.515128],[-0.650631,-7.575281,9.326743,-8.470503,-1.819619,-9.565323],[-2.993239,2.480589,0.907222,0.742500,-9.536511,-9.590272]],[[1.698791,-6.892695,-9.583479,3.333697,-1.386409,-6.147159],[-4.783652,-6.448962,0.665730,0.602354,-1.762480,2.081866],[1.135426,7.136378,-9.510011,-0.067226,7.861658,8.677171],[-4.289949,-1.976828,-0.948974,-9.975149,4.642596,9.793014],[-1.153636,-0.972216,-7.526708,-6.445745,-0.026482,9.925931],[5.094946,-6.661639,-4.351965,-6.286578,-4.205485,4.740739],[-7.748907,4.182138,4.506711,-0.140454,4.870765,-8.917407],[-6.294702,-3.401858,9.519404,2.257513,9.904677,6.608343]],[[0.480163,-2.167535,-3.231375,-8.239760,8.845415,-8.655728],[6.050499,-7.840444,6.577131,-6.589542,6.553260,-4.168639],[-4.966641,-7.845129,5.538568,8.121233,5.547447,-5.250996],[-0.604074,-6.789743,-1.247455,-3.529113,-6.213714,-6.667483],[6.290790,5.334644,2.973210,1.074247,-3.863086,8.875630],[4.155258,-6.248032,-8.164572,-6.363815,-2.240127,9.032926],[1.735861,-8.912040,-1.993429,9.509772,6.200592,2.753550],[-9.255838,-8.376101,-1.122463,-4.336889,-9.946752,-3.527979]],[[6.600427,7.999158,-3.377439,-7.579048,-9.198985,3.101442],[-8.850293,0.486530,0.468773,-4.509889,2.434700,-7.551128],[6.842374,-5.585022,-6.015981,-2.583881,4.807602,9.049969],[-7.299960,-9.592600,-7.614906,-5.667303,-0.690658,-6.775915],[-1.426344,-7.098132,5.150939,0.343067,8.003901,-8.762776],[-5.828493,-4.259003,4.169093,2.188256,8.111241,-5.676870],[4.925637,-5.793353,-4.304510,-5.917328,-7.323934,2.049707],[0.809882,-3.528465,-4.738847,-3.415105,9.362198,-2.867581]],[[-8.961840,6.142705,5.038047,0.978589,-3.689535,5.670526],[-9.707028,1.766228,-0.458370,-4.025893,0.065867,-6.667410],[-7.782967,-1.731314,6.479330,-0.121743,5.592870,-0.026078],[6.153860,2.673944,4.351244,5.072959,-3.820520,-7.078716],[4.478366,5.643758,0.342519,-9.209477,-2.999537,-6.458881],[5.301465,-1.769014,-7.036372,-6.528306,-3.623221,8.862568],[-0.246288,-8.958004,4.065957,8.728100,9.379883,9.497483],[-1.725162,-1.447081,-7.423151,7.003923,7.069506,-6.774725]]], dtype = "float64")#candidate|2808|(13, 8, 6)|const|float64
bop_2809 = relay.logical_or(call_2806.astype('bool'), relay.reshape(const_2808.astype('bool'), relay.shape_of(call_2806))) # shape=(13, 8, 6)
bop_2812 = relay.logical_or(call_2807.astype('bool'), relay.reshape(const_2808.astype('bool'), relay.shape_of(call_2807))) # shape=(13, 8, 6)
output = bop_2809
output2 = bop_2812
func_2840 = relay.Function([], output)
mod['func_2840'] = func_2840
mod = relay.transform.InferType()(mod)
mutated_mod['func_2840'] = func_2840
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2840_call = mutated_mod.get_global_var('func_2840')
call_2841 = func_2840_call()
output = call_2841
func_2842 = relay.Function([], output)
mutated_mod['func_2842'] = func_2842
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_2904 = func_2269_call()
call_2905 = func_2269_call()
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_2912 = func_2345_call()
call_2913 = func_2345_call()
func_2470_call = mod.get_global_var('func_2470')
func_2471_call = mutated_mod.get_global_var('func_2471')
call_2929 = relay.TupleGetItem(func_2470_call(), 1)
call_2930 = relay.TupleGetItem(func_2471_call(), 1)
output = relay.Tuple([call_2904,call_2912,call_2929,])
output2 = relay.Tuple([call_2905,call_2913,call_2930,])
func_2936 = relay.Function([], output)
mod['func_2936'] = func_2936
mod = relay.transform.InferType()(mod)
output = func_2936()
func_2937 = relay.Function([], output)
mutated_mod['func_2937'] = func_2937
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2562_call = mod.get_global_var('func_2562')
func_2563_call = mutated_mod.get_global_var('func_2563')
call_2952 = relay.TupleGetItem(func_2562_call(), 1)
call_2953 = relay.TupleGetItem(func_2563_call(), 1)
var_2957 = relay.var("var_2957", dtype = "float32", shape = (165, 2))#candidate|2957|(165, 2)|var|float32
bop_2958 = relay.bitwise_and(call_2952.astype('uint16'), var_2957.astype('uint16')) # shape=(165, 2)
bop_2961 = relay.bitwise_and(call_2953.astype('uint16'), var_2957.astype('uint16')) # shape=(165, 2)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_2962 = relay.TupleGetItem(func_2447_call(), 1)
call_2963 = relay.TupleGetItem(func_2449_call(), 1)
output = relay.Tuple([bop_2958,call_2962,])
output2 = relay.Tuple([bop_2961,call_2963,])
func_2968 = relay.Function([var_2957,], output)
mod['func_2968'] = func_2968
mod = relay.transform.InferType()(mod)
mutated_mod['func_2968'] = func_2968
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2969 = relay.var("var_2969", dtype = "float32", shape = (165, 2))#candidate|2969|(165, 2)|var|float32
func_2968_call = mutated_mod.get_global_var('func_2968')
call_2970 = func_2968_call(var_2969)
output = call_2970
func_2971 = relay.Function([var_2969], output)
mutated_mod['func_2971'] = func_2971
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_2978 = func_2626_call()
call_2979 = func_2626_call()
output = relay.Tuple([call_2978,])
output2 = relay.Tuple([call_2979,])
func_3010 = relay.Function([], output)
mod['func_3010'] = func_3010
mod = relay.transform.InferType()(mod)
mutated_mod['func_3010'] = func_3010
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3010_call = mutated_mod.get_global_var('func_3010')
call_3011 = func_3010_call()
output = call_3011
func_3012 = relay.Function([], output)
mutated_mod['func_3012'] = func_3012
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2936_call = mod.get_global_var('func_2936')
func_2937_call = mutated_mod.get_global_var('func_2937')
call_3021 = relay.TupleGetItem(func_2936_call(), 2)
call_3022 = relay.TupleGetItem(func_2937_call(), 2)
output = relay.Tuple([call_3021,])
output2 = relay.Tuple([call_3022,])
func_3028 = relay.Function([], output)
mod['func_3028'] = func_3028
mod = relay.transform.InferType()(mod)
output = func_3028()
func_3029 = relay.Function([], output)
mutated_mod['func_3029'] = func_3029
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2562_call = mod.get_global_var('func_2562')
func_2563_call = mutated_mod.get_global_var('func_2563')
call_3104 = relay.TupleGetItem(func_2562_call(), 0)
call_3105 = relay.TupleGetItem(func_2563_call(), 0)
func_3010_call = mod.get_global_var('func_3010')
func_3012_call = mutated_mod.get_global_var('func_3012')
call_3109 = relay.TupleGetItem(func_3010_call(), 0)
call_3110 = relay.TupleGetItem(func_3012_call(), 0)
output = relay.Tuple([call_3104,call_3109,])
output2 = relay.Tuple([call_3105,call_3110,])
func_3111 = relay.Function([], output)
mod['func_3111'] = func_3111
mod = relay.transform.InferType()(mod)
output = func_3111()
func_3112 = relay.Function([], output)
mutated_mod['func_3112'] = func_3112
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3111_call = mod.get_global_var('func_3111')
func_3112_call = mutated_mod.get_global_var('func_3112')
call_3152 = relay.TupleGetItem(func_3111_call(), 1)
call_3153 = relay.TupleGetItem(func_3112_call(), 1)
output = relay.Tuple([call_3152,])
output2 = relay.Tuple([call_3153,])
func_3157 = relay.Function([], output)
mod['func_3157'] = func_3157
mod = relay.transform.InferType()(mod)
output = func_3157()
func_3158 = relay.Function([], output)
mutated_mod['func_3158'] = func_3158
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_3176 = func_2626_call()
call_3177 = func_2626_call()
func_2968_call = mod.get_global_var('func_2968')
func_2971_call = mutated_mod.get_global_var('func_2971')
var_3182 = relay.var("var_3182", dtype = "float32", shape = (330,))#candidate|3182|(330,)|var|float32
call_3181 = relay.TupleGetItem(func_2968_call(relay.reshape(var_3182.astype('float32'), [165, 2])), 0)
call_3183 = relay.TupleGetItem(func_2971_call(relay.reshape(var_3182.astype('float32'), [165, 2])), 0)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_3184 = relay.TupleGetItem(func_2306_call(), 2)
call_3185 = relay.TupleGetItem(func_2308_call(), 2)
output = relay.Tuple([call_3176,call_3181,var_3182,call_3184,])
output2 = relay.Tuple([call_3177,call_3183,var_3182,call_3185,])
func_3190 = relay.Function([var_3182,], output)
mod['func_3190'] = func_3190
mod = relay.transform.InferType()(mod)
mutated_mod['func_3190'] = func_3190
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3191 = relay.var("var_3191", dtype = "float32", shape = (330,))#candidate|3191|(330,)|var|float32
func_3190_call = mutated_mod.get_global_var('func_3190')
call_3192 = func_3190_call(var_3191)
output = call_3192
func_3193 = relay.Function([var_3191], output)
mutated_mod['func_3193'] = func_3193
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_3195 = func_2269_call()
call_3196 = func_2269_call()
output = relay.Tuple([call_3195,])
output2 = relay.Tuple([call_3196,])
func_3221 = relay.Function([], output)
mod['func_3221'] = func_3221
mod = relay.transform.InferType()(mod)
output = func_3221()
func_3222 = relay.Function([], output)
mutated_mod['func_3222'] = func_3222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_3238 = relay.TupleGetItem(func_2447_call(), 1)
call_3239 = relay.TupleGetItem(func_2449_call(), 1)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_3247 = func_2345_call()
call_3248 = func_2345_call()
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_3254 = relay.TupleGetItem(func_2306_call(), 1)
call_3255 = relay.TupleGetItem(func_2308_call(), 1)
output = relay.Tuple([call_3238,call_3247,call_3254,])
output2 = relay.Tuple([call_3239,call_3248,call_3255,])
func_3259 = relay.Function([], output)
mod['func_3259'] = func_3259
mod = relay.transform.InferType()(mod)
mutated_mod['func_3259'] = func_3259
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3259_call = mutated_mod.get_global_var('func_3259')
call_3260 = func_3259_call()
output = call_3260
func_3261 = relay.Function([], output)
mutated_mod['func_3261'] = func_3261
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2840_call = mod.get_global_var('func_2840')
func_2842_call = mutated_mod.get_global_var('func_2842')
call_3273 = func_2840_call()
call_3274 = func_2840_call()
output = call_3273
output2 = call_3274
func_3276 = relay.Function([], output)
mod['func_3276'] = func_3276
mod = relay.transform.InferType()(mod)
output = func_3276()
func_3277 = relay.Function([], output)
mutated_mod['func_3277'] = func_3277
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3278 = relay.var("var_3278", dtype = "uint8", shape = ())#candidate|3278|()|var|uint8
var_3279 = relay.var("var_3279", dtype = "uint8", shape = (5, 12, 14))#candidate|3279|(5, 12, 14)|var|uint8
bop_3280 = relay.equal(var_3278.astype('bool'), var_3279.astype('bool')) # shape=(5, 12, 14)
output = bop_3280
output2 = bop_3280
func_3287 = relay.Function([var_3278,var_3279,], output)
mod['func_3287'] = func_3287
mod = relay.transform.InferType()(mod)
mutated_mod['func_3287'] = func_3287
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3287_call = mutated_mod.get_global_var('func_3287')
var_3289 = relay.var("var_3289", dtype = "uint8", shape = ())#candidate|3289|()|var|uint8
var_3290 = relay.var("var_3290", dtype = "uint8", shape = (5, 12, 14))#candidate|3290|(5, 12, 14)|var|uint8
call_3288 = func_3287_call(var_3289,var_3290,)
output = call_3288
func_3291 = relay.Function([var_3289,var_3290,], output)
mutated_mod['func_3291'] = func_3291
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_3353 = relay.TupleGetItem(func_2447_call(), 1)
call_3354 = relay.TupleGetItem(func_2449_call(), 1)
var_3373 = relay.var("var_3373", dtype = "uint32", shape = (165, 4))#candidate|3373|(165, 4)|var|uint32
bop_3374 = relay.add(call_3353.astype('int16'), var_3373.astype('int16')) # shape=(165, 4)
bop_3377 = relay.add(call_3354.astype('int16'), var_3373.astype('int16')) # shape=(165, 4)
output = bop_3374
output2 = bop_3377
func_3399 = relay.Function([var_3373,], output)
mod['func_3399'] = func_3399
mod = relay.transform.InferType()(mod)
mutated_mod['func_3399'] = func_3399
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3400 = relay.var("var_3400", dtype = "uint32", shape = (165, 4))#candidate|3400|(165, 4)|var|uint32
func_3399_call = mutated_mod.get_global_var('func_3399')
call_3401 = func_3399_call(var_3400)
output = call_3401
func_3402 = relay.Function([var_3400], output)
mutated_mod['func_3402'] = func_3402
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3410 = relay.const([[[-2.090784,-6.055588,4.665491,5.674916,-0.261963,-8.929611,8.913737,7.068172,-9.412296,-5.890073,-4.026738,-6.448301,-6.224543,-8.831574],[-6.805494,3.031775,-4.832992,7.558871,-2.801365,-4.202706,-2.511258,-1.023319,5.159804,-0.523343,6.597034,9.822331,9.132130,-2.079234],[9.105610,-7.023043,6.425488,-4.400934,2.486283,3.083983,2.247808,-2.089222,-5.359747,3.127227,-6.254779,1.724085,1.929902,-3.161107],[-5.367756,-1.374996,8.749073,-0.853342,-0.598626,-7.914280,-0.427192,3.357000,5.059116,5.262522,-7.484619,-4.810132,-7.661696,9.745971],[-8.038633,-3.082766,-5.608736,-9.206113,6.097169,-4.914076,-5.088539,5.513959,-2.392733,-6.181626,-4.354355,-7.649458,-5.787469,-7.913287],[-6.005451,-8.151960,0.523224,-9.031940,1.046696,7.465326,3.940199,-1.922219,-5.573107,-9.376157,5.258586,-4.290418,-4.948997,-2.862475],[9.470824,-4.202678,-8.972172,6.392987,4.766527,-3.086722,-1.501051,-5.256459,0.142891,3.373079,-9.956082,5.086652,-5.013738,-9.727438],[-2.083749,-5.712180,4.810374,0.677023,6.628683,2.083835,-0.758412,-8.695733,7.617069,-4.016980,9.323795,-4.892532,8.774358,4.839528],[3.844406,9.644684,9.371715,-1.682281,-3.132280,-6.664731,-0.796618,-0.487904,0.686082,5.453555,0.993717,-3.795844,-2.808479,4.237322],[-6.709111,4.385395,-3.426310,7.145084,-6.765850,-5.655647,7.868680,1.139411,-2.340748,6.345648,-4.488925,-4.673418,-0.771276,-8.376316],[1.042833,9.847276,3.215142,8.613275,5.339741,0.488717,-3.982870,-5.175345,-8.195558,8.034486,1.183354,0.665556,-4.219718,-3.464850],[-2.514297,1.367590,-7.082523,0.133794,3.741821,5.081339,8.323880,1.132110,-2.792089,8.489193,4.573360,0.151054,2.047397,-3.749977],[-8.482876,0.751979,9.035514,-3.815196,7.984148,4.889225,-5.666856,6.082313,8.094813,-1.392551,-2.210771,2.987544,-3.772864,-1.699214],[6.090726,8.815970,1.388479,-8.386021,0.901264,-2.079871,-0.822748,-9.403966,-5.836986,-2.207145,-4.359718,6.016628,-7.332392,-3.290256]],[[2.835367,3.778208,5.446054,-2.526666,3.192234,0.741998,0.324628,1.933390,-9.030949,5.109375,3.612210,-2.855293,-8.269712,-3.312462],[-8.796763,9.673875,8.372586,-2.750968,-7.306616,-0.483297,4.211387,-5.103320,9.654200,-2.533812,0.395125,0.524962,9.950686,-7.490565],[5.155635,3.881722,3.528034,-8.678032,1.309744,5.816055,3.212292,9.796398,-3.911502,-9.229142,0.195988,8.374410,-2.699534,2.392243],[-2.511425,6.742009,-9.352395,-8.278177,1.355972,-4.497167,3.465408,-5.994518,9.300841,-6.299484,-5.714898,-7.096321,8.275030,-5.530423],[-4.173622,-1.030197,-6.500787,-1.249465,-4.150595,-2.097625,8.070434,-4.944383,1.119108,-3.738530,-5.018782,-0.511452,0.543867,-0.578121],[-6.574477,-3.624807,-4.597264,9.365041,-0.206467,0.273215,-7.793000,-0.695321,-1.481806,5.451554,-2.247761,5.473316,-3.959861,0.652109],[-5.784252,-8.091023,-1.337922,1.683813,2.262606,5.040022,-3.535577,-2.266977,9.098424,8.525747,7.425891,8.036956,-5.637106,-3.099077],[-3.958183,-4.319268,4.277493,0.521070,9.193301,-9.800218,4.968536,-5.425697,-3.999850,5.523513,0.922470,-0.133462,7.853942,-4.099110],[-7.577035,-9.085506,-0.061375,8.540332,7.449355,-1.908770,0.904124,-9.062622,-1.954788,-7.885409,9.338171,-1.949720,-8.868261,-7.222079],[-9.355694,1.564542,9.992671,8.212066,-1.061536,-7.745755,6.983815,-8.303719,6.641216,-5.740507,1.366139,9.293546,-6.633409,-7.953664],[-9.851462,-6.307205,4.775353,6.650033,0.944496,6.142590,3.019496,8.156300,-4.184294,9.002885,-9.020118,0.280772,-6.822620,6.243696],[3.338044,-3.765491,-3.427341,-9.917069,-8.952915,-8.838462,0.094210,-9.955757,4.300328,4.317128,4.060266,-1.580619,-5.904925,-6.514988],[-0.149558,3.255679,6.545590,7.438233,-6.732992,4.388774,1.845067,-8.128230,9.901995,4.297196,3.813661,-7.433741,7.203234,-2.358095],[0.673018,-3.315815,-2.829183,5.122052,5.790739,2.656452,-4.290325,0.909140,5.529910,-7.366182,-5.690068,4.443774,6.149048,-4.121027]],[[-3.335375,-5.987437,1.309334,8.033929,4.764077,2.077047,5.464634,-3.283754,-6.658238,8.764688,-8.999007,-1.006402,7.331703,-2.818269],[-4.021640,8.963090,7.136427,-6.058387,7.586562,9.708405,-0.041476,2.900199,6.502640,0.590651,2.726953,9.729961,4.380203,-6.667722],[-6.603207,9.305773,-2.412992,2.004130,-2.720084,-9.585164,-1.593953,-4.089220,5.349099,-9.477766,-0.344912,-2.383603,5.265662,7.303498],[3.234711,1.327643,-8.845051,-6.935325,-7.358078,-8.107062,4.461260,-9.615911,-3.800067,-5.692649,-9.588285,8.623035,1.864394,9.239660],[8.337619,6.009996,-4.058141,-8.471909,1.554063,0.722477,9.422629,-1.291652,0.104243,-6.278357,-2.246028,0.240861,5.585736,9.457174],[-6.562197,6.600072,2.667661,-2.300084,-5.798965,-4.892468,-3.060455,8.603518,3.529548,-4.035671,-1.018448,9.005807,-3.720151,2.141458],[4.160573,-7.415342,3.207653,0.059981,-5.341823,4.797549,4.035950,-9.781923,7.769657,7.823668,1.317808,8.782040,-7.613378,-7.443209],[2.288962,-1.066869,-7.903952,-0.957545,3.152442,-3.677241,-4.556045,-9.078146,9.688643,3.185159,-3.782878,-9.014402,-1.952850,0.673495],[-1.499678,7.717257,3.372199,-2.220525,-3.632186,-5.943181,-7.586831,6.016365,-7.005135,-0.762909,-5.491858,-8.615858,-4.667211,8.444450],[8.693354,2.081230,-0.213939,5.140235,4.087847,-3.485457,8.105767,3.741125,3.618394,-9.060997,-7.792934,-2.872590,-5.874223,4.117274],[0.487583,4.978898,0.940895,-2.275875,-3.535714,9.859006,9.220248,7.218442,-7.792604,-2.363539,-6.371649,8.109220,-4.254144,5.807685],[0.630173,8.289737,3.721416,6.225837,-3.035799,8.437797,5.441981,-9.876079,-4.625101,2.753790,-6.317839,-4.659535,-9.012478,4.110420],[2.021152,2.628350,0.189700,6.804070,-8.488269,3.316646,-1.915640,9.455446,9.861712,-7.736472,6.075440,4.706349,-0.779460,-0.734934],[3.311924,3.487802,3.935295,8.029085,7.033988,7.895720,2.499558,-3.846359,7.287486,-5.103139,8.956503,-5.672848,-9.017574,-3.239144]],[[-1.672017,-5.594275,-3.033493,-2.332362,-8.558745,-5.152159,2.517604,6.603530,-5.029495,-1.049998,3.922287,8.048970,-9.908975,-9.675866],[4.461011,6.100299,8.550779,9.885464,7.021660,4.659702,-5.456079,0.510953,-2.582888,-5.870384,3.226602,-8.740748,0.587264,1.753107],[-4.641909,2.621006,2.609453,0.830643,-6.462776,-3.708753,-6.622725,5.068447,-3.434472,-1.350402,-6.025753,9.448265,-1.864985,-3.131886],[8.379329,8.447139,9.142949,8.663699,2.990200,-2.246881,-1.343975,4.415085,-1.582314,8.463086,5.279456,7.549077,-3.388327,5.192597],[5.399454,1.045682,-6.922235,-5.686378,8.451495,-7.942167,-7.416526,-5.420477,7.477427,4.085629,-0.276674,-3.584167,6.428323,2.643231],[5.895871,-4.920677,8.606094,2.041339,-3.585842,2.234940,-9.387708,-8.957384,-8.258428,3.084073,-5.018948,-9.303388,4.564020,-4.608137],[-5.979513,-9.410076,0.850591,-8.031642,-3.542062,-9.155470,7.553284,-9.066762,6.931322,-6.366791,3.734420,7.652237,8.633653,5.416132],[9.764765,2.986939,2.881753,3.418809,-1.634048,0.081453,4.813253,6.830072,-1.594933,-1.900759,-4.399834,6.974506,-9.284877,7.729574],[-4.239871,-4.896735,-0.045774,-8.921770,-2.404047,-1.753191,8.632022,7.290281,7.840293,-0.616656,3.838250,9.303017,6.214833,6.625674],[-6.521573,5.923231,7.306130,-3.979506,3.034424,-3.986706,-3.986608,-6.448191,-3.289038,-9.542205,-6.929914,7.610946,-0.972771,4.815745],[-9.487570,8.775336,5.104327,7.422894,4.597082,7.563670,-2.824679,-2.334019,-0.073431,1.024167,-6.985624,6.629538,-6.850204,-7.729189],[4.987714,-5.515038,0.585252,-6.100692,3.159109,4.246216,6.719805,5.927847,-8.935789,-0.635944,8.508355,-2.668111,-9.600377,-0.047255],[-6.680258,6.857158,1.662157,6.859774,5.407605,0.613576,-3.866451,9.231691,0.852402,6.424486,-4.453826,4.956566,0.978256,-6.263889],[2.964637,-6.492608,1.878307,4.742338,-5.307856,5.852522,2.070836,-5.203660,-4.077378,7.798923,-4.542499,8.462158,1.457862,-8.896015]],[[-1.843911,-8.408329,-7.179518,-9.649348,-6.986251,-3.439265,-5.387132,-7.501034,-0.458975,7.376455,2.016007,2.433467,-6.409376,-4.317710],[9.211251,-1.032775,6.716105,8.066567,-7.219946,-6.297512,5.053904,9.399019,-7.872067,7.267936,-3.632995,9.103476,-5.784194,4.037867],[-2.489231,-0.729032,6.564137,3.737981,6.967198,-0.606626,-8.214328,-6.040428,7.374078,-3.803316,4.043765,-6.977509,-9.305609,8.902467],[-1.281942,3.883765,5.429276,-8.364154,2.240066,3.841664,-8.008456,-4.366376,-1.969427,1.000304,-9.528235,-3.998917,9.014475,7.632594],[-5.170350,-2.138753,6.966546,9.331195,6.327045,4.551193,-8.683676,6.234611,-9.176387,6.831813,-5.311970,-4.466812,-5.580108,5.962298],[-3.888293,-3.694920,7.052200,7.199843,-4.150680,6.808105,0.464978,-3.715563,-6.589066,-6.213565,2.519656,9.281544,-2.784341,-2.736490],[-8.566581,8.744347,-6.648620,-6.694548,-8.162295,4.983126,-9.033512,6.622777,9.128081,4.752842,5.350416,2.321707,-2.903981,1.173969],[-1.116061,2.279271,2.816055,7.173115,-9.524353,0.482398,-0.526835,-1.292888,-4.875886,-7.399173,3.901808,7.400705,0.178648,-5.251054],[7.548968,0.118771,4.719299,1.668096,6.989837,4.562237,-6.580883,-4.292954,2.843482,7.481319,-1.821485,7.623872,-0.120464,7.516865],[0.119356,0.183063,3.301330,7.989056,7.751401,1.733649,1.613666,4.512716,2.208684,-2.657254,-4.733512,-6.363544,3.706133,-5.171375],[-8.911742,-7.039136,8.963626,3.450794,-8.328779,-7.814574,6.499591,-6.648816,-2.616231,-3.105022,7.450105,-8.708560,-1.628863,5.841593],[-5.630588,3.279062,4.966998,6.948328,5.367182,8.223801,9.062932,-2.379540,2.071779,8.180543,-6.287965,8.954967,3.647435,2.466569],[5.498645,3.486532,-0.993963,-0.802285,-3.371698,4.391858,-7.773044,8.500164,-8.812068,-8.053521,-0.855944,1.571609,3.709964,6.907897],[-5.487607,0.170555,8.750163,7.409292,5.467559,3.530033,3.572984,-0.254210,7.499408,0.504192,5.140167,5.466656,-9.836759,-3.247822]],[[4.144435,-8.282987,-3.022599,8.589154,-3.209008,9.665903,4.309235,-5.944156,9.608765,-5.766209,-0.924999,-7.371617,-8.830579,-6.521906],[-5.297866,-8.510870,-8.557024,2.739773,-8.824281,-6.153419,-8.446443,2.750546,-3.313290,-6.897338,-8.411443,-5.752516,6.140474,-8.893923],[-4.361557,-7.549952,6.417801,-9.241709,4.861463,-1.908860,8.518965,-4.460253,-5.780802,7.832157,3.394927,5.606746,-5.713471,8.331727],[-8.643404,0.427657,-8.944363,-6.748327,6.901629,8.629470,-3.936552,-9.118819,-1.597962,1.228370,-2.014241,1.143804,9.791725,3.800024],[-2.084333,6.375530,-7.962739,5.675029,-8.425068,-7.768865,-5.854825,-7.473959,9.252732,-5.515873,7.250908,3.482630,-1.501657,-9.519493],[0.449636,-2.917582,-8.004270,-8.292861,-9.991143,6.468623,1.640388,-0.721672,8.681953,3.032147,-5.778962,-2.044133,7.829951,6.871000],[-7.520782,5.987996,-2.467394,8.376219,2.582099,1.861282,7.430961,-8.216221,9.550978,-2.186688,3.243549,3.975495,-8.725396,-8.575088],[8.465506,5.872883,5.012978,8.336046,-8.261962,-5.077183,8.629721,-2.111819,-3.756867,6.166974,7.192691,-4.340930,8.148444,-4.463602],[5.193360,-2.174210,6.379871,-2.457337,-7.218959,-7.554714,-3.811156,2.668050,-3.097180,-5.841413,-9.068477,-7.063444,7.918875,9.600499],[8.765001,-4.483831,-1.145785,9.983035,6.952957,-4.837506,-3.692968,-4.387681,5.448987,-3.033600,6.417864,-4.593367,-2.618587,-7.929591],[7.550580,3.913332,4.077347,9.628375,-9.926886,4.905176,-3.947275,1.275089,-6.815684,2.508218,6.008492,-0.573460,-1.533328,8.825328],[6.147898,-3.151869,2.481671,6.359279,-3.042951,-5.763509,-3.903580,-6.985024,7.429581,4.055963,5.239280,8.930268,-4.139018,-1.909803],[-9.548335,2.792140,5.025253,-8.780735,0.461210,3.776390,-7.854102,-1.197867,-6.848012,4.571948,0.083193,0.866840,7.669702,8.528401],[-8.925125,-2.830576,9.183334,6.752368,7.259434,1.546872,6.531796,-8.702464,-4.216252,-8.501310,3.095885,-6.819224,-0.749917,-4.815800]],[[-8.662075,1.212275,2.896209,7.762248,-2.164402,1.176517,-2.014027,-8.199328,3.274911,6.144285,-1.543369,-0.617480,7.041210,-6.692536],[3.882314,2.195662,-3.459204,-3.689150,-5.342540,3.245224,-7.977365,6.237357,2.971290,9.630329,-0.134712,4.846107,-1.790138,5.385409],[-8.740709,-3.934909,-6.754100,-2.194254,-0.036193,-7.845432,-1.820487,6.275443,-8.163332,-2.629566,4.035704,-9.306154,-0.274815,-1.728130],[-4.782863,4.081264,4.318147,-4.286501,6.236092,-4.163891,1.969354,2.989665,-7.995391,9.886565,5.478539,9.708852,8.536195,-6.705751],[9.971479,-4.948443,-7.669539,-3.785957,8.051735,5.273270,8.767885,6.611336,-7.087212,2.564033,6.343522,5.277501,-1.806726,3.354156],[2.912432,5.599288,-1.724629,-7.903582,6.227234,-2.224489,4.614213,-8.510037,-5.298946,9.914683,-7.044159,6.140080,7.704977,-4.336539],[0.370028,5.444948,3.706351,1.747573,2.248420,0.102265,2.192842,1.845427,3.180123,4.828485,0.855613,0.373618,2.813819,-4.178473],[5.313243,-2.897164,-4.808025,0.198159,1.022817,-2.227874,-3.504931,5.788918,6.901059,-4.658679,-4.561846,-6.941245,8.859459,7.424232],[1.381602,7.696520,-3.355934,4.047431,-9.079796,9.150928,-6.464983,-0.448383,3.636892,-0.942683,-5.074021,2.756642,-9.047121,6.586625],[4.427029,6.129874,-9.479577,-9.024603,-2.369464,1.822245,-5.887774,-8.819181,-8.009533,-8.065970,5.253051,0.685733,6.975319,-1.255549],[-5.657581,5.283040,2.860626,-8.621354,-6.489687,-1.878754,4.416978,0.836958,-2.077313,-5.521764,-6.341376,-4.083112,9.638057,0.728744],[2.456987,-1.184180,3.058743,8.832796,-1.724843,-1.053944,-2.042372,-6.061847,9.681527,-5.898581,1.229545,-0.795977,8.861755,1.955424],[-9.997398,2.350876,5.410655,-9.587952,-9.655424,1.464236,6.250903,6.847213,-9.604542,9.072610,8.196500,-4.824528,-7.065703,-9.704548],[6.297653,-9.065972,-9.889659,7.915320,-6.537894,7.650202,-0.571073,2.581557,-4.479548,6.251964,-4.238911,-2.605982,-5.648725,1.275622]],[[-9.924582,-7.680271,9.872041,0.781137,4.494077,0.763590,-1.864824,-5.250201,7.691286,9.369472,-8.703291,1.021597,9.493145,-7.603053],[-7.765057,3.230715,8.926542,-8.096863,-6.676673,-5.872091,6.897992,3.175721,-9.603770,-2.549566,-2.358204,-3.479157,-5.831998,6.641892],[0.013373,-2.802091,0.011706,-6.397850,2.809248,-0.652039,2.828196,2.647593,-6.789835,-7.066020,-6.046722,9.861898,-2.844189,3.894918],[1.553326,2.214216,-9.624992,-7.600795,2.557029,-4.966075,0.018262,-1.508047,-9.878057,9.368241,2.819951,4.945972,-1.188705,-0.834112],[-1.775347,-3.015648,-2.909910,7.257658,8.479064,3.369508,-9.627058,7.765052,-6.230661,-8.572506,-5.038902,6.525793,-7.970191,0.800857],[3.382544,4.460930,-6.266574,7.064844,0.797346,8.156052,-9.173478,1.655063,9.937511,5.996491,8.623934,-6.938043,0.839815,0.783147],[-4.867683,6.124332,-3.729956,-2.970107,-2.582218,2.343962,-8.331921,-0.492187,6.055247,8.311946,-1.624486,-9.177977,7.403929,8.434420],[4.121441,-8.761153,-7.931626,6.013929,-8.326822,6.052928,-9.394815,2.777842,2.156645,3.686187,3.561881,5.628645,9.128640,7.104803],[-1.170314,-3.067884,9.050214,-4.252706,-8.111141,-4.451189,1.386001,6.130938,2.251218,-3.216068,-7.656507,3.314056,-9.773349,1.952812],[4.556339,-7.918850,-9.811422,6.824829,6.489932,9.251361,9.251620,7.071221,1.950363,-0.568855,6.377278,0.397463,1.852871,8.863165],[-0.027502,4.845224,-4.746291,0.443637,-6.017172,-5.040757,-3.660237,5.982967,-4.458880,-6.799525,7.329473,-3.054490,1.094904,-8.857538],[-7.225215,0.294483,9.698936,-1.891086,-8.289076,-7.379593,-6.650170,6.792981,-7.051946,6.570207,5.464875,-5.106769,-1.935035,0.028199],[-1.366246,-0.708562,4.930198,3.947815,9.648207,-2.033506,-2.528992,-5.764389,-3.212268,7.055249,5.697087,7.476473,4.736599,9.416434],[-2.423746,7.155192,4.416874,5.615053,9.022444,3.484614,7.011594,7.341960,-8.987497,-0.080058,7.933899,8.486659,-9.959242,0.570593]],[[-6.956203,-5.002504,6.815455,1.322576,6.376638,0.356013,-6.390247,2.324372,6.339098,9.067924,1.401150,-6.106247,4.942045,2.363214],[-9.418832,7.960023,8.293508,4.172722,-4.675268,0.923330,0.877297,-6.840522,0.475001,1.035957,-7.419121,-5.143010,9.750900,-3.007505],[-1.023710,-2.549335,-8.965455,9.534253,5.988744,-7.022846,-6.974156,-7.918277,6.661970,7.936307,-9.527063,5.651144,6.041333,-2.522736],[-8.112043,2.866813,-0.888857,6.672737,-3.485915,1.751137,6.069506,3.754247,9.786613,6.567566,-4.714370,-7.883661,-1.711603,-9.819981],[2.487653,-0.448741,8.265855,1.523030,9.349826,0.477994,8.812037,-6.747905,-6.721152,-3.309509,4.380150,-0.731836,-1.790033,-7.956346],[-0.343204,-1.132668,-7.595089,0.979697,3.281559,7.858505,7.290123,-8.162214,9.464088,1.956118,-6.157923,-5.484245,-0.037367,8.046927],[3.021777,4.849640,-5.273770,6.891721,-1.567501,9.357354,7.227086,-7.320138,5.112763,-5.086301,2.139222,-0.419670,1.869693,0.374423],[-9.837131,6.292326,7.489437,2.556019,-8.817727,-9.101716,-0.574247,-5.868429,-5.129850,-1.465779,2.807304,7.340011,9.998885,-9.453539],[-5.173631,-6.096830,8.911930,-4.704395,-6.266532,-9.856070,-0.304114,5.804092,-4.307309,4.374719,-3.636633,-2.328990,-8.928096,6.006714],[-8.798159,-8.500005,2.875533,0.356976,-4.841660,1.018507,8.740641,-4.861489,-2.080627,-0.195427,3.282425,-8.851422,-5.028586,-1.542676],[-8.107175,-5.343082,2.881893,0.639360,0.556585,8.607266,-8.897388,-0.723473,1.433926,1.254755,-2.478937,-4.174574,3.599827,1.180978],[-8.641727,-9.842054,0.853533,3.011630,-9.558675,-7.305722,6.668982,9.444822,-6.353172,9.696329,-0.810382,-6.728011,6.424855,3.123899],[9.203932,-9.666332,-7.834371,-3.055907,5.069880,-9.368604,-8.519302,5.400354,8.883306,1.899777,-6.767370,2.324307,8.666202,9.153869],[-2.892833,-9.343993,1.763341,1.025745,6.676093,-8.222035,6.399051,-7.439814,6.132708,7.262120,1.788999,-6.342616,-2.638675,-5.231142]],[[6.610554,-9.360064,-6.044848,0.614526,5.347513,5.068898,-6.257463,6.846561,7.111834,8.217390,4.240914,3.217799,6.411439,-0.052412],[6.189036,-9.281145,-6.370781,-0.033102,9.493651,-3.818856,9.493338,5.294866,5.200978,0.909866,8.087377,9.993228,-6.217121,6.814049],[1.571159,7.336084,-5.957484,5.948061,-4.093758,-8.615615,-1.393566,-6.602147,-5.883666,3.243092,-5.075453,-8.023229,-8.814274,-3.096435],[-7.397260,-9.707362,3.455895,-5.142307,0.303412,-4.458337,-4.104514,5.894230,1.693299,-3.212692,-2.568463,-3.702438,-1.526401,-1.332503],[-4.137309,1.673550,-9.576556,-6.409936,5.721865,3.813385,7.604262,-0.446387,-2.283749,-3.322442,4.637966,-6.745671,-4.201120,-1.682499],[3.420602,7.199898,5.398836,1.193665,2.926947,8.907171,-9.173770,3.765475,-3.819633,3.487348,-5.907364,4.328678,-8.611027,2.648741],[-9.332958,-7.992455,-0.994639,0.668908,-3.087600,5.049714,8.653689,0.267276,4.312317,5.804428,-2.568631,7.597490,-4.409677,8.491748],[-1.919119,5.833753,-5.542925,-3.950851,-4.275974,5.845763,-0.702149,-5.270585,8.286537,-5.411440,-5.322513,4.804653,-6.621561,5.736256],[4.065188,-0.025900,5.957610,-6.623729,2.651310,-9.242827,-2.267661,-8.382471,-2.888128,-5.403516,-2.799036,7.643278,-6.862635,-0.250083],[6.086650,0.109804,-7.490276,-8.122398,-1.610350,9.437082,4.224927,7.415791,3.285684,4.226290,-8.623731,-8.298131,-2.654339,4.648804],[-2.681203,6.106869,-2.062535,-7.197529,-7.543797,-6.823408,6.668629,-1.938579,-0.956388,-7.763722,-8.593330,8.259461,-3.928638,9.265065],[3.417404,2.633465,-9.700253,6.280927,-2.832396,6.299173,-2.225371,2.548864,-1.647862,2.210389,7.749046,-9.516205,1.508966,-2.392135],[3.564302,-5.611800,-1.888231,-4.777250,-5.373691,3.022626,1.550979,-4.456733,6.365319,4.668425,9.215440,-1.809743,9.174938,-1.758258],[-0.723700,-4.653499,7.471121,4.264531,-3.421145,-7.895007,0.176698,2.158953,7.529509,2.636096,0.908786,-8.565492,5.830655,9.939715]],[[6.306858,4.788290,-3.579632,-4.287615,-9.254837,-7.466530,9.344177,2.666211,-5.569437,-8.246809,-2.148649,-9.881840,-6.179370,2.912780],[6.511479,-5.273173,-8.550846,4.179665,0.079690,-4.191268,5.667327,2.615619,-9.574643,3.920592,5.277007,-2.235427,9.855349,-7.378961],[6.915519,2.044822,-7.669902,2.255886,1.758249,-2.684582,-1.627762,-2.833677,5.440976,4.214108,8.373951,-1.343457,-6.638132,-7.243347],[-4.896301,1.178698,-2.737729,-3.107683,8.994757,-5.009043,-2.256262,6.696343,3.901846,-9.068388,6.785046,-2.921891,3.031284,-0.299108],[9.252356,9.259122,5.776009,0.660518,-9.109769,-4.244493,-6.681751,-9.042198,3.504869,1.017494,-4.186879,5.151232,3.516886,-6.825345],[1.277729,-0.380343,0.114158,-4.819200,6.759773,1.114397,9.849965,5.467709,-3.842400,4.119717,2.880953,-4.699009,-3.021952,-0.094548],[-3.781206,-5.936948,7.227937,-3.502237,6.052345,2.814738,0.463742,-9.890554,-2.802982,-2.981633,8.972345,5.032542,-9.000534,-1.575415],[0.505468,0.187484,7.604511,9.673040,-0.698762,-0.978629,-7.896518,-4.999891,-1.523107,7.680878,-9.375598,6.241729,3.803772,0.705333],[-3.483516,-1.938980,-8.652582,6.439501,-8.200025,-9.062818,2.097258,-2.581587,-4.593409,3.981757,4.024055,7.925054,-8.850367,3.119743],[9.605511,4.193091,0.902906,-4.056125,3.924350,6.629763,-7.462982,5.376706,-4.011333,-8.240988,-0.776083,1.211834,-1.955193,-3.968710],[5.767272,-2.492589,-8.114061,0.520268,9.532985,5.237780,8.853179,-3.210590,-6.850435,8.359869,0.826019,7.696221,0.590833,9.343077],[9.176330,-2.428513,-2.296972,-7.186682,5.211375,-9.972183,8.620896,3.229728,-1.815061,-5.516363,1.335949,-7.025679,6.141607,0.399128],[-5.240182,-4.773416,-0.747692,6.563290,5.377945,4.954556,6.169019,-8.236410,7.275108,4.003430,2.580177,-1.730262,-4.016283,-2.710674],[-5.345026,-0.343928,-4.737591,-5.920373,-7.040476,5.887304,8.728332,-3.932197,-2.363402,3.241291,-6.574029,-9.067425,1.430311,9.823907]],[[4.518540,7.780206,5.864668,-2.351038,0.877331,-5.655009,-2.384672,0.041028,-4.963066,-5.620055,-8.959703,-7.026728,4.675504,6.383410],[6.540235,-9.344136,-5.891438,-9.298054,8.379558,9.176859,7.009018,-9.062221,-0.052740,-2.863204,7.425374,4.938159,-3.670532,6.915831],[-2.353846,-3.210688,8.086046,-1.547898,6.191007,6.865286,-9.913862,8.770140,-2.707535,3.585220,1.199792,2.629558,5.550830,5.845918],[-5.504591,6.323966,1.787787,-9.928751,-1.320983,-2.316102,9.021751,-1.775943,-8.172735,6.083349,-9.332982,5.264570,-8.579563,-1.011296],[-1.789011,-6.140069,-0.336281,2.361302,5.688287,-1.072620,8.876671,4.142845,-5.028749,-4.296769,3.875408,6.849829,-0.409540,-2.705466],[0.387428,-5.160685,-4.977755,-0.767268,-7.382400,-6.725801,0.488181,8.985307,9.170480,6.505564,4.643670,-5.178368,-2.159270,-1.151715],[6.341087,6.605819,8.315749,-3.166112,-0.331029,0.462087,-2.770241,6.599998,-4.473732,-3.258699,8.807570,-9.658907,8.170208,-9.224434],[-7.297179,3.230290,4.568427,3.946045,-8.541546,-4.368341,-9.021124,-6.541893,0.932832,6.965685,-1.876666,8.803314,2.939817,-3.790244],[-7.925253,-2.180221,3.011957,-1.898359,9.133563,-5.320861,1.106044,-1.918987,-0.786328,9.894724,-6.998314,0.878968,-8.186466,8.181943],[-5.060594,9.290523,-0.290608,-1.845283,4.601671,-3.088707,-8.892221,-0.981198,6.909105,4.411328,2.008933,1.142650,1.137447,8.413716],[9.714854,-7.126880,-4.440230,-1.413123,5.226648,7.575871,-8.978883,5.477488,-0.532074,-3.180147,8.086389,7.250372,-6.464175,-1.357846],[3.801356,-0.173221,-8.808634,4.521746,-8.687271,6.086470,-6.810172,-3.771314,-6.378704,0.185034,6.989225,-9.999093,3.639134,-8.385633],[-1.966006,-3.385757,-1.725012,-8.139752,1.083756,9.112802,-8.694392,2.388120,8.069550,1.806641,-1.467741,-0.807592,-9.611716,-5.910171],[-4.667437,-0.858709,0.343933,3.314438,6.123972,4.774225,5.554316,-1.401698,9.824613,-8.928975,5.600809,5.415156,-2.424576,6.315034]],[[-8.917666,-4.161637,-2.716162,-3.108734,6.960062,2.482067,3.680301,9.110941,-4.345917,-2.935860,-5.913544,-9.008233,-6.364642,9.518391],[-7.704854,-8.670293,-9.199481,8.580437,8.880334,-4.362836,6.246854,5.679000,-5.802614,4.631234,-8.301032,3.258754,-1.179236,-9.326392],[2.482622,8.369499,-6.077709,-9.840559,1.105261,-2.305467,5.570361,4.082892,-5.005295,-3.672593,-0.776996,3.684712,9.153422,7.240436],[5.592286,8.043659,0.247295,-5.763585,-7.952534,-4.664334,-1.214718,-7.719167,1.520025,0.673987,-8.210206,8.482115,9.655896,4.136024],[8.212481,9.220393,-5.649188,0.070549,1.262607,9.051740,-3.896067,3.065502,-5.535773,6.394652,-3.460679,-7.527956,-7.275099,3.759912],[-6.929314,-2.685460,7.439337,-9.582569,-1.253586,2.035534,4.274283,0.586766,-5.249210,2.463040,-3.188142,-9.047250,8.667941,7.205006],[-1.002992,7.233700,4.510430,-7.456790,8.771248,-5.558266,-9.566408,-4.405390,4.675075,-7.570445,-7.871840,-6.905059,-9.437660,2.097148],[8.382050,3.965954,7.903260,4.333877,-5.471094,0.559875,-6.047850,-6.381911,2.751859,2.659467,-1.456784,-3.569245,0.262154,-5.532009],[-7.565590,9.162552,-9.330409,6.951963,9.236708,0.914000,5.102317,-2.076306,-8.304702,-5.882321,0.303862,-1.504615,6.035783,-1.664736],[-8.027550,-7.034997,6.643998,-4.380875,-2.590285,6.899121,-6.267948,-1.218092,-4.979158,-7.932528,1.253736,-1.900737,-5.876126,-8.481184],[-6.451830,-3.572161,2.310108,0.582594,-7.441366,5.454559,2.777430,-2.648714,9.186528,1.192835,3.371332,-4.117774,1.409764,0.333663],[-6.332189,1.802200,3.406941,7.569631,6.827574,1.391884,-8.980822,-3.229552,4.318800,-6.236568,1.249005,-8.731715,4.153861,7.597580],[-0.891863,-3.854394,9.911582,1.268977,9.736168,1.036483,8.556232,-8.037528,6.223039,2.429465,7.717797,4.043649,-8.073194,-9.814227],[8.580120,-9.572971,-2.435825,-2.927926,-5.857388,-5.663429,-3.212187,-5.723777,-3.218349,7.353370,-3.724946,9.725061,-6.935524,-4.668395]],[[-1.599293,-1.164431,7.709193,9.538702,1.671651,6.863884,0.170772,3.107470,3.983520,4.060941,-5.893316,-0.086978,-9.463834,7.830077],[-0.817616,3.515879,-1.372345,-1.427587,-7.970227,1.167287,2.584222,4.374603,6.971344,-2.098274,5.246341,-7.370198,7.227900,-5.624672],[-6.256664,-1.987078,5.580011,-6.943443,-0.639297,9.135223,-4.129284,-6.403303,3.193901,8.824108,4.478521,-2.493292,6.953415,-1.665179],[8.474478,-7.974727,-0.650167,-8.892339,-0.494048,6.853576,-1.148869,2.457026,-2.811424,-5.688500,-5.516986,-0.393204,-1.325746,-6.260393],[6.527225,-7.288201,4.200916,0.599992,9.489170,3.978860,-7.670127,-4.636546,-9.708650,4.343061,-3.565471,-5.449251,5.661878,-0.183554],[8.945312,-1.602214,6.702184,1.489430,3.014244,8.864938,1.135284,3.699971,5.483380,-3.612161,4.777341,-3.603593,2.354404,-6.493800],[5.610876,-8.865398,4.152750,-9.102031,7.231483,9.691264,-0.737431,-5.570015,-2.618323,3.801357,4.107109,8.217610,2.473898,-3.483384],[-3.817455,-7.438780,7.366632,1.420510,0.510135,-4.722592,7.535772,1.052520,-5.879783,8.837922,4.540618,-5.272651,-4.044094,-9.268344],[-3.492327,8.082787,0.881315,-4.892950,-1.003400,-9.912803,2.681661,3.756319,-9.547250,-3.114217,-6.469693,5.950199,-5.945976,-9.641898],[8.567075,3.271838,-5.619464,6.553959,-5.694228,-0.188929,4.015354,-9.506391,5.938531,1.602182,-5.576359,-3.764909,-0.992913,1.997434],[-8.097368,1.482465,-4.008902,5.608487,5.748481,-5.878061,-9.978819,9.250535,6.043914,7.023104,0.408848,9.298316,-1.379322,-1.358323],[5.983549,-6.041519,2.446690,-4.420706,-5.562066,-1.743985,-4.369320,3.425702,-5.419524,-4.156157,-0.809221,-6.866118,-6.800059,8.815037],[-0.492093,1.536829,8.255271,3.043016,-6.901020,-9.606573,9.407099,-2.799797,-8.955199,-9.896191,-0.871295,-9.873514,-5.912389,-8.137851],[-6.403518,-5.965583,3.118326,8.902885,2.461435,-8.689825,-4.103850,-1.459420,6.670957,6.700612,-4.472728,-1.949320,-1.279195,0.351073]],[[-5.557661,7.957724,2.147737,3.269521,-1.122645,-4.562117,4.807893,6.898350,3.400202,7.162731,-9.711096,-7.798600,-4.244853,-3.950067],[-4.475694,-5.289395,2.201640,9.641736,3.111094,-8.388938,1.384610,4.931856,9.152172,-3.675553,-5.647981,9.327279,-8.825114,5.809747],[3.742040,1.375373,3.230365,-1.542121,-7.666642,5.572831,-2.949050,9.408760,-4.111747,-6.849316,2.450991,8.508636,-3.934569,-2.659705],[-6.573020,8.403614,0.271658,7.874075,-3.575388,-5.694876,-3.966634,-9.142354,0.303325,-4.536788,-4.207833,5.346958,-8.909111,7.209710],[7.759766,7.656022,9.936862,6.579156,-9.110763,9.182423,-0.016379,8.611276,-2.227476,7.201226,8.866844,0.186584,-2.395880,6.179239],[3.713461,8.315151,-6.668409,8.134057,-3.069762,4.977840,8.749400,9.481914,-0.326729,-6.679591,2.335022,-1.276938,-1.467229,-8.021682],[-2.099221,1.009595,4.723077,-2.074496,7.743087,4.417568,5.497273,-6.778471,-8.639849,-1.703548,-8.924746,3.502240,8.394892,-2.940170],[4.799101,-7.058954,-6.768683,-3.775328,3.656437,-7.180786,-4.372901,-8.574463,-8.680592,-8.179840,-8.818549,2.727516,-6.888616,-8.648834],[-6.649095,1.563176,-7.942669,4.307080,4.472635,-2.960718,-5.553498,9.393226,-8.826660,-5.030471,9.559701,7.884895,-1.948219,-0.005757],[9.444278,-6.918531,-9.957647,-1.636253,9.389764,6.440185,1.880423,1.390167,-7.158695,-1.391661,-6.415446,5.496714,1.273304,-0.315023],[1.133971,-7.072176,5.393095,-0.963349,-9.601055,-2.813532,-6.508666,-9.284790,8.949478,-8.567797,2.957383,2.148139,4.405424,9.388161],[2.460392,-7.490061,-9.663738,-3.745304,8.260265,8.482213,2.588107,-5.299379,-5.987491,2.735740,-2.079227,6.550198,-8.199680,-7.134623],[-9.848697,-2.846693,2.588106,-0.064903,-4.796628,8.158282,-6.869530,5.236927,2.913828,6.575539,8.155179,6.507391,-0.377997,1.172874],[7.255465,8.894126,8.355173,-9.154359,-7.210999,-2.478023,5.939628,0.901763,1.146125,3.969996,-6.623171,-3.324170,5.325453,4.285555]],[[-5.752148,-2.199742,-6.789682,1.285603,2.531708,-2.964257,5.471497,-8.736051,2.707053,-1.256068,8.416870,3.749766,-8.398278,6.550561],[5.497839,-9.164906,6.569462,-8.152238,-0.706962,2.778455,5.569396,4.739001,-5.331613,5.362303,7.941976,-7.865782,4.835250,-4.331268],[1.693195,9.209558,1.496498,2.347215,-0.588358,-3.226120,9.619692,-2.165970,-5.304380,6.181858,-0.912393,-9.834633,-2.089442,-6.362521],[-1.435754,-9.208448,-0.783538,-6.497191,4.124613,-0.354203,1.414507,-3.161553,-2.366786,8.240769,-2.504625,6.127466,7.323023,0.205897],[6.538048,4.061514,-0.822428,3.778746,2.005106,-7.784587,9.852564,-6.677021,-9.233899,-6.197430,-8.602915,9.767052,-5.300665,7.344356],[-5.488988,-2.828420,-9.794627,9.336745,6.314978,6.922024,-5.976372,8.057505,-0.307101,6.457846,-9.227685,5.957909,6.660631,7.220088],[5.867890,-6.473920,3.978151,5.594186,-2.449729,0.274387,-9.079432,3.623436,-2.971457,-7.735010,-1.822641,0.501040,7.488773,8.698944],[5.429546,7.202433,9.487633,-0.511437,-2.177766,-3.074429,-0.301381,-8.185449,-7.296357,-5.989923,-1.104246,3.106459,-2.217820,7.985555],[3.695835,-3.108344,8.360868,-2.589087,3.176124,-8.249208,-7.115200,6.824177,-5.946724,0.238001,8.669001,9.798213,7.876104,-0.329391],[-3.473476,3.381718,8.931223,-9.581538,1.713432,4.575512,-7.028588,-3.902222,3.817379,6.365537,8.479218,-6.718835,-9.252274,-2.526269],[6.093471,2.890732,-3.328930,1.848139,5.587604,6.506842,-4.241041,3.056279,-2.017667,-0.947865,8.188542,9.615455,-0.320251,1.400379],[0.760593,-3.944009,9.633062,-5.677477,2.224808,5.552983,-1.899925,6.459700,1.934603,9.291893,5.597718,5.336516,5.619579,1.607611],[0.424382,7.447002,6.569463,8.238353,9.597008,-9.479571,6.850808,1.183574,-1.606365,2.276000,-3.246600,2.529796,-3.554934,-5.272884],[8.790406,1.003598,7.166875,-0.435000,7.463066,9.093997,5.694415,9.717970,0.784611,-4.172225,6.716812,4.997169,-0.352508,8.103692]]], dtype = "float64")#candidate|3410|(16, 14, 14)|const|float64
uop_3411 = relay.erf(const_3410.astype('float64')) # shape=(16, 14, 14)
bop_3440 = relay.left_shift(uop_3411.astype('uint64'), relay.reshape(const_3410.astype('uint64'), relay.shape_of(uop_3411))) # shape=(16, 14, 14)
output = bop_3440
output2 = bop_3440
func_3449 = relay.Function([], output)
mod['func_3449'] = func_3449
mod = relay.transform.InferType()(mod)
mutated_mod['func_3449'] = func_3449
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3449_call = mutated_mod.get_global_var('func_3449')
call_3450 = func_3449_call()
output = call_3450
func_3451 = relay.Function([], output)
mutated_mod['func_3451'] = func_3451
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_3506 = func_2345_call()
call_3507 = func_2345_call()
output = call_3506
output2 = call_3507
func_3508 = relay.Function([], output)
mod['func_3508'] = func_3508
mod = relay.transform.InferType()(mod)
mutated_mod['func_3508'] = func_3508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3508_call = mutated_mod.get_global_var('func_3508')
call_3509 = func_3508_call()
output = call_3509
func_3510 = relay.Function([], output)
mutated_mod['func_3510'] = func_3510
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3508_call = mod.get_global_var('func_3508')
func_3510_call = mutated_mod.get_global_var('func_3510')
call_3521 = func_3508_call()
call_3522 = func_3508_call()
func_3157_call = mod.get_global_var('func_3157')
func_3158_call = mutated_mod.get_global_var('func_3158')
call_3578 = relay.TupleGetItem(func_3157_call(), 0)
call_3579 = relay.TupleGetItem(func_3158_call(), 0)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_3604 = func_2345_call()
call_3605 = func_2345_call()
output = relay.Tuple([call_3521,call_3578,call_3604,])
output2 = relay.Tuple([call_3522,call_3579,call_3605,])
func_3611 = relay.Function([], output)
mod['func_3611'] = func_3611
mod = relay.transform.InferType()(mod)
output = func_3611()
func_3612 = relay.Function([], output)
mutated_mod['func_3612'] = func_3612
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_3621 = func_2269_call()
call_3622 = func_2269_call()
uop_3626 = relay.acos(call_3621.astype('float64')) # shape=(13, 8, 6)
uop_3628 = relay.acos(call_3622.astype('float64')) # shape=(13, 8, 6)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_3633 = func_2345_call()
call_3634 = func_2345_call()
func_1568_call = mod.get_global_var('func_1568')
func_1571_call = mutated_mod.get_global_var('func_1571')
const_3643 = relay.const([[-9.280777,9.672645,9.782661,1.348916,7.418461,-9.965533,-1.506852,-8.015564],[8.593611,-6.915827,-5.313119,1.518281,0.947244,-4.918826,8.343152,-3.081922],[7.462151,5.965181,-7.501194,8.793451,-1.221179,7.964745,0.161896,-6.031148],[2.273811,0.148742,5.619819,0.896206,3.267444,-4.305101,1.741914,-1.869357],[-1.583252,5.034444,-8.869760,-7.665344,-2.226323,-2.472023,-2.373142,-1.603948],[3.213067,4.195143,-0.028880,0.369682,4.802558,-4.606397,-9.902494,5.638866],[-7.084523,4.957855,2.958774,-7.210325,-6.528401,0.118811,4.456676,-9.214668],[7.145116,4.462058,-5.222445,2.468513,-0.839283,-9.303237,-2.640176,6.159121],[-7.606564,-1.185695,9.651385,9.427655,1.091170,-8.972357,4.327436,7.532594],[-4.294579,-0.684545,6.035014,-8.888487,-7.677472,-5.859586,1.827005,2.371861],[-8.700731,9.219463,-1.021325,5.253798,-7.230263,9.523879,9.354484,-6.971888],[9.280983,-8.618380,0.326829,6.360595,-2.060613,-5.055573,6.841705,1.867752],[0.628582,2.262364,-0.060829,6.019708,-5.504119,-1.682771,5.228146,-1.575066],[8.517145,2.297692,9.030722,-9.791030,-9.787690,0.966431,7.523650,-0.632102],[-3.092249,-2.728220,-2.467388,2.143921,-4.762043,-3.561248,-2.258604,0.054554],[-7.236203,-7.997585,7.127780,8.467431,-5.694327,2.307119,9.887023,-5.599498],[-8.748003,-2.929513,3.762003,7.225756,1.924021,3.567812,-6.368857,-9.555836],[-2.138993,7.209505,9.144176,5.971295,0.613155,1.687619,-8.019865,-8.709275],[9.447722,-2.138945,-3.215631,-3.318994,2.460396,-5.051395,-5.450932,-0.049074],[5.211850,-1.870839,-3.402736,-7.537305,0.657900,6.534595,-7.488580,-4.513847],[-5.063177,-1.885993,-5.151944,3.144550,-7.070864,-0.130552,-0.006194,2.090042],[-1.925058,-0.258825,-0.442721,-3.872072,9.302221,3.140814,-6.290123,5.146820],[-8.617427,3.270771,-3.907859,5.173003,-0.159523,-3.149871,-6.060483,2.158605],[4.656802,-7.615733,-2.609079,9.493662,-2.647003,5.844581,-2.567713,8.949691],[-8.754516,-7.141481,6.775621,-9.998868,5.501557,-0.073217,-4.586041,-1.027527],[-7.093256,0.141535,2.912271,-8.697357,-4.369496,-3.156392,-9.626032,4.429674],[9.832161,3.597218,7.437104,-1.649417,-0.506988,0.084329,-3.995804,4.561040],[-4.685128,-7.802085,6.568112,4.470315,-8.846916,2.405577,9.275534,-9.909029],[-0.295972,-9.946949,0.288425,-3.847500,0.836962,-9.896455,8.906372,-4.605463],[3.864820,6.966886,7.336037,-6.034214,8.660696,-7.989542,-4.223397,1.039758],[0.667623,9.807337,-6.266656,-3.473728,3.732146,-0.811702,-9.931187,-1.605036],[8.929820,1.274001,-4.879251,-9.463379,1.301202,-9.117435,2.621763,-0.522273],[0.235428,1.651571,0.618996,-9.555444,5.840633,9.516589,5.980833,5.239831],[9.542513,-3.811842,-9.415324,7.165003,6.304423,7.766137,3.562786,7.110848],[3.374563,9.730706,4.935588,1.262733,-0.001906,-0.489903,-4.674971,-8.702763],[-0.944346,1.464401,2.247369,-3.258655,0.115146,-7.275548,4.304748,1.236753],[-2.866899,7.826929,-9.925254,-0.937291,7.796001,0.565406,-4.643079,-6.103332],[-8.977494,3.696799,-5.041223,-7.705320,-8.341027,6.855806,5.756081,-6.940000],[5.216704,8.224213,7.132797,-9.949983,-2.312852,-2.836757,7.795758,-9.396101],[2.943849,8.598191,8.427975,5.117640,-2.260394,-1.420535,8.619142,-2.442616]], dtype = "float32")#candidate|3643|(40, 8)|const|float32
call_3642 = relay.TupleGetItem(func_1568_call(relay.reshape(const_3643.astype('float32'), [16, 2, 10])), 0)
call_3644 = relay.TupleGetItem(func_1571_call(relay.reshape(const_3643.astype('float32'), [16, 2, 10])), 0)
output = relay.Tuple([uop_3626,call_3633,call_3642,const_3643,])
output2 = relay.Tuple([uop_3628,call_3634,call_3644,const_3643,])
func_3645 = relay.Function([], output)
mod['func_3645'] = func_3645
mod = relay.transform.InferType()(mod)
mutated_mod['func_3645'] = func_3645
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3645_call = mutated_mod.get_global_var('func_3645')
call_3646 = func_3645_call()
output = call_3646
func_3647 = relay.Function([], output)
mutated_mod['func_3647'] = func_3647
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_3658 = func_2269_call()
call_3659 = func_2269_call()
func_2109_call = mod.get_global_var('func_2109')
func_2112_call = mutated_mod.get_global_var('func_2112')
const_3661 = relay.const([1,-4,-9,-1,-1,-5,10,8,7,1,-10,5,7,1,9,8,5,-8,-6,5,6,8,-2,-5,10,4,9,10,-5,9,-6,5,9,-8,-4,2,-1,-5,1,-5,10,-1,-9,4,3,-8,-10,-4,10,-4,5,6,8,-10,-3,-8,-2,-3,1,5,-3,-4,-9,2,10,-6,1,10,3,-8,3,-1,-6,-8,-4,-10,-7,1,-5,-5,-10,10,3,3,-8,-2,7,-7,-10,10,7,10,-4,-10,-6,4,8,-7,3,-4,-9,3,-2,8,3,-7,-8,6,7,-3,-1,-9,2,-9,-6,-8,-1,-2,9,-8,-10,5,-1,-1,7,3,2,8,-10,1,-1,-2,7,-7,3,-1,10,10,6,-10,-5,2,5,-3,6,10,10,10,-5,6,-6,-3,-2,8,4,5,-10,-9,9,-1,-6,2,2,-3,-3,-5,5,-5,-10,-9,10,-6,-10,-7,-8,4,9,8,-2,-8,-2,-5,-8,-6,-3,3,-6,6,-5,-5,-3,-5,-6,4,5,-4,5,-6,10,-9,6,6,2,-9,7,8,-4,-2,5,8,-8,-9,-2,5,-6,4,-8,-3,4,-5,-6,9,-5,10,-7,-4,-3,-9,9,-8,8,-6,-4,-5,2,9,5,10,1,2,2,-4,-8,-3,-8,-1,-5,-3,9,-9,-1,3,-8,-6,6,-6,1,-5,-4,-5,1,1,6,-5,5,9,2,-10,6,-9,3,1,7,4,-6,6,-6,1,10,-10,-10,10,9,-4,7,5,9,3,-4,9,-5,-5,-1,-4,4,7,1,8,7,-6,7,4,9,-4,-4,3,6,-2,-4,-10,-2,-2,4,4,-4,-8,2,-7,-1,6,-3,-5,-4,-8,5,9,-4,-10,-1,-10,5,-7,1,-9,-6,8,-3,8,9,-8,-5,2,7,8,6,-6,9,9,-7,10,5,-3,-10,8,9,6,4,-5,-9,1,-4,-8,8,1,-8,-9,1,-3,-4,-4,8,1,7,-3,1,-4,10,-8,-9,-4,-1,4,-8,5,-10,7,9,10,-3,4,8,9,-10,-6,7,8,6,2,-8,6,-7,6,8,-4,10,5,8,5,10,-6,3,4,3,3,-4,7,-9,-7,-8,10,-1,-7,-8,4,4,-2,4,-8,2,6,8,9,-8,-8,9,6,2,8,6,7,-4,8,-5,-4,-6,4,6,5,10,-10,-1,1,-8,3,-5,-3,-9,6,7,-2,-2,9,2,10,5,-2,-6,10,-4,-7,3,-7,-1,8,-2,-1,9,-2,1,-2,4,5,-9,-4,-9,-9,1,7,-8,9,5,6,-7,-4,2,7,2,-6,6,-1,2,-7,5,-6,9,4,-5,-8,9,-3,8,9,-1,-8,-6,9,-2,-3,-2,-9,-4,7,-3,2,-4,5,4,-1,-8,1,9,-3,8,-7,5,-3,1,8,4,-8,-6,10,6,6,-10,7,9,-2,6,-9,-7,1,4,-4,1,7,-4,1,8,-3,6,-10,9,-4,-1,-9,-7,6,10,-10,-1,-2,7,4,-3,-6,6,4,7,-4,10,7,-4,9,-5,8,-9,1,-4,-1,-4,5,-2,9,8,-10,-7,-6,-3,6,7,4,-4,1,-1,-6,1,7,2,-5,-9,9,-5,8,1,4,10,3,2,-4,8,10,-1,3,2,4,-4,-9,7,6,1,-5,9,-7,-3,6,2,3,4,9,-5,-9,-5,7,-6,-1,5,10,-5,5,-1,-1,10,8,-9,1,-9,2,-9,-7,6,-1,-5,4,-9,2,-3,-3,-9,4,8,-2,6,-3,7,-9,8,-3,-1,5,-8,-10,-9,2,3,-6,3,-10,-5,5,2,4,-4,-7,2,6,8,-8,8,7,-8,-6,4,-2,-8,-1,-1,-2,-10,9,-10,1,-1,-9,3,-4,-10,3,-6,-2,-4,-7,-6,9,10,7,4,-2,-10,-8,6,5,-2,-9,-5,-5,2,1,4,3,9,6,1,-10,6,4,-10,7,7,-2,-8,9,-10,-9,2,8,3,7,-1,-5,-5,-10,-5,-8,-4,-5,9,2,4,-6,3,-8,-8,-10,-1,8,3,-2,-5,-1,3,3,9,3,-9,10,3,-10,-6,-3,-7,-5,-9,9,1,4,7,6,-5,9,-10,-5,10,5,8,-3,9,5,8,3,-5,3,-6,-8,-10,4,10,2,-9,-6,-6,-3,-8,2,-4,5,-2,3,-7,-9,-10,6,6,-7,-6,-1,-3,-5,3,-9,2,6,2,4,-10,6,-7,7,-10,-6,9,-9,10,-5,3,9,8,1,-5,-7,7,-3,6,8,4,4,-1,-8,-9,5,-7,-9,-10,-2,5,-7,5,-7,-2,8,-8,1,-7,4,2,-10,-4,1,-1,-8,-4,-9,7,-1,10,6,2,-9,6,7,-3,-6,-7,-10,2,5,4,-7,7,-1,7,-6,7,-2,-1,1,-7,2,6,4,-1,-5,10,-8,-10,-7,8,-10,1,8,-10,-9,-7,-2,-2,-10,5,7,-7,-6,4,6,7,7,-9,-3,3,7,-10,3,-5,-4,-6,8,6,2,7,3,5,3,4,-2,-5,-7,8,-6,2,-5,-1,-4,9,6,-6,-10,-1,-5,-9,2,-6,1,-10,8,7,2,10,-2,2,5,-10,-8,-9,6,10,4,-8,9,-1,9,2,-3,-9,-1,4,-10,-4,5,-3,-3,-8,10,-3,-3,-8,2,8,-4,2,-8,3,3,8,1,7,-6,-5,1,5,-4,-10,5,-4,5,-4,2,-2,-5,3,4,3,4,-6,8,3,-6,-8,1,8,8,8,9,7,2,3,-9,-8,6,10,-7,6,5,2,8,3,-4,-7,3,-9,3,3,-8,-5,-4,8,9,3,-10,2,-7,-5,6,-5,8,-5,6,3,6,-10,-6,-10,-2,8,1,1,5,-8,8,1,7,-6,-4,9,-8,10,7,6,-4,3,-6,-3,8,5,5,1,4,7,6,-7,6,10,-7,5,3,-7,2,-2,-1,8,5,-10,-9,-6,-4,3,10,3,10,-9,6,3,-3,-8,-4,-2,10,-7,-8,5,-7,2,-10,7,1,-2,-1,4,-2,10,-1,-4,-4,-1,7,6,2,3,3,3,-3,10,2,8,6,-9,-10,-1,7,7,-6,7,-1,2,-8,5,-2,5,-8,-7,3,-5,-10,-7,6,8,-7,2,5,9,8,5,10,3,7,6,5,-2,8,1,-3,6,6,-5,1,-4,-9,-1,1,7,-4,-7,-4,6,-8,6,8,9,-1,4,-10,4,-7,6,-7,-5,8,1,-1,-4,8,8,3,1,-6,7,-5,-3,4,-10,4,3,7,4,5,-7,-7,8,-6,3,3,-6,-8,1,-10,-4,-8,8,5,5,9,2,9,-7,8,-7,-9,9,1,1,5,-8,6,-10,8,-2,9,5,3,-5,2,-2,-4,-10,5,8,1,-2,-2,10,10,-8,-6,-1,5,-10,9,-1,6,-1,5,8,-7,-2,5,-8,-4,5,9,8,5,4,1,8,7,6,-1,9,-9,7,-5,-8,-3,-10,3,10,-6,-2,10,-4,-1,10,-9,2,-9,9,-5,-4,3,3,-2,4,7,-6,-7,-5,-3,2,5,-7,4,10,-6,-10,-6,5,-7,-5,6,-3,-4,-3,5,-8,-1,5,-4,7,-9,8,-1,3,-5,-2,2,4,-6,-4,4,1,8,1,3,1,-4,-5,-6,-10,-1,-4,10,10,6,-6,5,-6,-5,4,-4,8,-7,-10,5,6,6,8,7,-1,9,3,-9,6,5,-2,6,4,4,8,8,5,1,10,-9,-1,2,-2,-3,5,-10,-7,-6,4,9,-9,-4,-10,6,-5,1,-5,1,4,-8,4,-5,-8,3,10,2,8,-4,4,-8,-4,4,4,9,-9,-8,-6,-3,-1,-6,2,-10,7,1,-1,10,-10,7,10,-3,-2,2,-1,4,-5,2,-2,8,-4,1,-7,-3,5,-10,-5,-4,1,6,-4,3,3,-7,-8,6,-3,7,8,-7,-1,8,10,-6,-1,-5,5,4,-5,-4,-5,5,7,-10,-4,-8,5,-3,-9,8,-1,2,-2,5,7,-2,-10,-10,1,-2,6,1,5,8,5,3,-10,-4,-3,-4,8,1,-3,7,-3,-10,-10,-2,-7,10,-6,-7,-9,-3,-10,3,10,-8,-6,-8,5,-8,1,9,-10,-9,1,5,5,-4,-2,4,2,-9,-10,-9,-7,9,7,-7,8,-3,9,1,-5,-10,-2,3,8,-2,10,-3,-8,-6,-2,-2,-8,1,7,3,5,-1,10,10,-5,-8,2,4,6,5,-3,-10,5,10,1,4,-9,-4,-10,-10,-5,-1,-2,8,-5,7,1,-10,-1,6,6,-10,6,5,-8,-10,5,-1,8,-4,2,4,-3,10,7,-5,-8,7,1,-2,8,4,-5,10,-6,-6,-8,-4,5,4,-1,-4,-4,-5,-4,5,-8,5,6,7,-10,10,5,8,7,-3,-10,9,9,-2,2,-5,6,6,-5,-4,9,-4,8,-6,5,5,-6,3,10,-10,-1,-5,-7,9,-7,9,-6,10,-7,9,4,9,-8,-9,6,-3,6,-5,2,-9,8,-4,-10,-8,-9,-1,1,-6,10,9,5,-4,9,-6,-5,9,2,8,6,-1,5,9,-1,4,10,-9,5,-8,5,5,-10,5,-8,5,1,2,-9,-9,-7,2,-6,4,4,-6,-7,-1,9,-8,1,2,1,-7,6,1,-10,-3,-3,10,1,8,-8,5,-5,4,-8,7,2,-10,-9,-4,-3,7,-3,5,2,-4,-4,-8,1,6,-2,-9,-6,-5,-7,6,-5,7,-10,4,8,4,4,-5,-6,6,-6,4,-1,1,-5,9,-9,-10,9,-3,-9,-10,-9,-9,8,2,-10,9,5,-1,-6,2,5,6,-3,10,4,-4,5,-7,-1,-6,-7,-2,5,-3,-2,-6,-7,10,3,-2,7,9,1,4,7,3,-5,6,-8,8,-4,-6,1,10,5,-1,10,-4,-10,-3,8,-2,-10,-2,-7,-8,-9,3,2,3,7,-8,8,6,-2,-4,6,3,4,6,-8,-6,1,-6,-5,8,7,-7,-10,2,3,-2,3,6,-3,-3,-7,9,-8,-10,-7,5,4,8,6,-8,7,-9,-7,8,-7,2,-9,3,7,-2,-2,6,-10,2,4,4,-9,-10,10,-8,-10,-3,1,-8,-1,-3,-9,1,-5,5,4,-1,-6,1,10,3,10,-2,-3,-1,3,9,3,1,-2,7,10,1,8,2,-3,-9,2,-6,-2,-1,-1,8,10,-3,-8,10,-6,-5,-5,4,1,-1,-7,-10,-3,5,-3,9,-2,8,3,-9,-1,5,3,-5,5,9,-4,2,-2,-3,-1,8,5,5,-6,-6,1,4,-3,8,7,-1,-6,10,3,5,-8,-7,-1,-10,7,3,-1,1,7,3,7,-5,-8,-3,10,3,4,-10,2,-1,8,-6,2,3,5,3,10,6,-3,-9,8,-1,-1,7,-1,-2,-4,-9,6,-8,-8,4,9,5,9,-6,-7,-9,-10,-2,5,-1,2,7,-4,8,4,-1,2,-6,2,-7,-1,-7,-3,1,5,-8,3,-5,-8,8,-7,-6,7,-9,6,-7,-2,-5,5,4,-7,9,6,7,-8,-10,4,-5,10,9,10,10,-10,9,-2,-5,5,-10,-7,9,-2,2,4,8,-1,-9,-4,-5,5,-10,-8,7,1,6,-4,7,3,3,-7,1,-7,1,9,-8,9,-5,-4,-10,-10,5,1,-10,-1,4,-4,-8,-5,-4,6,-3,9,1,8,10,-10,-4,9,7,-8,10,8,-7,-8,9,5,8,-8,9,2,8,8,-7,7,-7,-7,-9,6,7,-6,-7,-8,5,5,4,5,3,3,10,-4,-4,-5,-5,8,-4,-10,-5,7,-6,6,-2,-3,6,-5,-5,5,-1,4,-9,9,5,4,10,10,4,8,-8,-10,-7,1,5,3,4,3,-8,-7,-2,4,10,9,-1,9,8,-4,-6,8,10,-9,-1,-8,-3,-3,-5,8,-3,9,-4,3,-10,6,1,9,-7,6,9,6,-10,-10,8,-10,4,6,10,9,-6,7,-9,1,-3,2,10,5,-9,-4,-2,7,-8,4,-2,-9,8,-10,-10,-2,5,-4,-4,-6,3,-7,6,1,-6,-3,9,-9,-8,3,9,1,-1,-10,6,-5,7,4,-7,7,-3,4,-2,9,3,8,-7,-5,-5], dtype = "int8")#candidate|3661|(2340,)|const|int8
call_3660 = relay.TupleGetItem(func_2109_call(relay.reshape(const_3661.astype('int8'), [12, 13, 15])), 0)
call_3662 = relay.TupleGetItem(func_2112_call(relay.reshape(const_3661.astype('int8'), [12, 13, 15])), 0)
output = relay.Tuple([call_3658,call_3660,const_3661,])
output2 = relay.Tuple([call_3659,call_3662,const_3661,])
func_3674 = relay.Function([], output)
mod['func_3674'] = func_3674
mod = relay.transform.InferType()(mod)
mutated_mod['func_3674'] = func_3674
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3674_call = mutated_mod.get_global_var('func_3674')
call_3675 = func_3674_call()
output = call_3675
func_3676 = relay.Function([], output)
mutated_mod['func_3676'] = func_3676
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_3741 = func_2626_call()
call_3742 = func_2626_call()
output = relay.Tuple([call_3741,])
output2 = relay.Tuple([call_3742,])
func_3747 = relay.Function([], output)
mod['func_3747'] = func_3747
mod = relay.transform.InferType()(mod)
output = func_3747()
func_3748 = relay.Function([], output)
mutated_mod['func_3748'] = func_3748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_3868 = func_2345_call()
call_3869 = func_2345_call()
uop_3876 = relay.acos(call_3868.astype('float64')) # shape=(1, 11, 15)
uop_3878 = relay.acos(call_3869.astype('float64')) # shape=(1, 11, 15)
output = relay.Tuple([uop_3876,])
output2 = relay.Tuple([uop_3878,])
func_3880 = relay.Function([], output)
mod['func_3880'] = func_3880
mod = relay.transform.InferType()(mod)
output = func_3880()
func_3881 = relay.Function([], output)
mutated_mod['func_3881'] = func_3881
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_3904 = relay.TupleGetItem(func_2306_call(), 2)
call_3905 = relay.TupleGetItem(func_2308_call(), 2)
output = relay.Tuple([call_3904,])
output2 = relay.Tuple([call_3905,])
func_3906 = relay.Function([], output)
mod['func_3906'] = func_3906
mod = relay.transform.InferType()(mod)
output = func_3906()
func_3907 = relay.Function([], output)
mutated_mod['func_3907'] = func_3907
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3645_call = mod.get_global_var('func_3645')
func_3647_call = mutated_mod.get_global_var('func_3647')
call_3913 = relay.TupleGetItem(func_3645_call(), 1)
call_3914 = relay.TupleGetItem(func_3647_call(), 1)
output = call_3913
output2 = call_3914
func_3927 = relay.Function([], output)
mod['func_3927'] = func_3927
mod = relay.transform.InferType()(mod)
output = func_3927()
func_3928 = relay.Function([], output)
mutated_mod['func_3928'] = func_3928
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3880_call = mod.get_global_var('func_3880')
func_3881_call = mutated_mod.get_global_var('func_3881')
call_3933 = relay.TupleGetItem(func_3880_call(), 0)
call_3934 = relay.TupleGetItem(func_3881_call(), 0)
func_3111_call = mod.get_global_var('func_3111')
func_3112_call = mutated_mod.get_global_var('func_3112')
call_3962 = relay.TupleGetItem(func_3111_call(), 1)
call_3963 = relay.TupleGetItem(func_3112_call(), 1)
output = relay.Tuple([call_3933,call_3962,])
output2 = relay.Tuple([call_3934,call_3963,])
func_3968 = relay.Function([], output)
mod['func_3968'] = func_3968
mod = relay.transform.InferType()(mod)
output = func_3968()
func_3969 = relay.Function([], output)
mutated_mod['func_3969'] = func_3969
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3906_call = mod.get_global_var('func_3906')
func_3907_call = mutated_mod.get_global_var('func_3907')
call_4004 = relay.TupleGetItem(func_3906_call(), 0)
call_4005 = relay.TupleGetItem(func_3907_call(), 0)
func_3190_call = mod.get_global_var('func_3190')
func_3193_call = mutated_mod.get_global_var('func_3193')
var_4021 = relay.var("var_4021", dtype = "float32", shape = (330,))#candidate|4021|(330,)|var|float32
call_4020 = relay.TupleGetItem(func_3190_call(relay.reshape(var_4021.astype('float32'), [330,])), 3)
call_4022 = relay.TupleGetItem(func_3193_call(relay.reshape(var_4021.astype('float32'), [330,])), 3)
uop_4031 = relay.log2(var_4021.astype('float32')) # shape=(330,)
func_3276_call = mod.get_global_var('func_3276')
func_3277_call = mutated_mod.get_global_var('func_3277')
call_4042 = func_3276_call()
call_4043 = func_3276_call()
output = relay.Tuple([call_4004,call_4020,uop_4031,call_4042,])
output2 = relay.Tuple([call_4005,call_4022,uop_4031,call_4043,])
func_4045 = relay.Function([var_4021,], output)
mod['func_4045'] = func_4045
mod = relay.transform.InferType()(mod)
mutated_mod['func_4045'] = func_4045
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4046 = relay.var("var_4046", dtype = "float32", shape = (330,))#candidate|4046|(330,)|var|float32
func_4045_call = mutated_mod.get_global_var('func_4045')
call_4047 = func_4045_call(var_4046)
output = call_4047
func_4048 = relay.Function([var_4046], output)
mutated_mod['func_4048'] = func_4048
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3880_call = mod.get_global_var('func_3880')
func_3881_call = mutated_mod.get_global_var('func_3881')
call_4082 = relay.TupleGetItem(func_3880_call(), 0)
call_4083 = relay.TupleGetItem(func_3881_call(), 0)
output = relay.Tuple([call_4082,])
output2 = relay.Tuple([call_4083,])
func_4087 = relay.Function([], output)
mod['func_4087'] = func_4087
mod = relay.transform.InferType()(mod)
output = func_4087()
func_4088 = relay.Function([], output)
mutated_mod['func_4088'] = func_4088
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2562_call = mod.get_global_var('func_2562')
func_2563_call = mutated_mod.get_global_var('func_2563')
call_4148 = relay.TupleGetItem(func_2562_call(), 1)
call_4149 = relay.TupleGetItem(func_2563_call(), 1)
func_3927_call = mod.get_global_var('func_3927')
func_3928_call = mutated_mod.get_global_var('func_3928')
call_4158 = func_3927_call()
call_4159 = func_3927_call()
uop_4169 = relay.sqrt(call_4148.astype('float32')) # shape=(165, 1)
uop_4171 = relay.sqrt(call_4149.astype('float32')) # shape=(165, 1)
func_3674_call = mod.get_global_var('func_3674')
func_3676_call = mutated_mod.get_global_var('func_3676')
call_4175 = relay.TupleGetItem(func_3674_call(), 0)
call_4176 = relay.TupleGetItem(func_3676_call(), 0)
func_3287_call = mod.get_global_var('func_3287')
func_3291_call = mutated_mod.get_global_var('func_3291')
var_4182 = relay.var("var_4182", dtype = "uint8", shape = ())#candidate|4182|()|var|uint8
const_4183 = relay.const([5,-3,-7,-4,-8,6,8,-2,-10,-1,7,8,6,6,2,-2,-1,10,9,4,-5,-5,-6,-7,9,-9,-5,4,-10,-3,-8,-1,-1,-6,-5,10,-5,-2,-1,-7,8,9,-4,-5,3,-7,3,3,9,8,2,-3,-2,9,-5,-6,-4,-6,-7,-3,1,5,-7,9,8,7,5,8,-6,-5,-5,2,7,10,-1,6,2,-5,10,3,3,-9,-2,10,-5,-7,-7,10,10,-7,2,10,-5,-2,-3,2,-9,-6,7,8,-8,-2,7,8,3,-6,-9,10,-5,8,1,4,2,-10,-4,2,-3,-9,-8,8,10,-10,-2,2,5,5,-3,-4,7,-5,2,4,-4,8,10,7,9,1,-8,-9,5,8,3,5,6,2,9,-3,-1,-9,4,2,-3,-5,6,-5,7,10,-3,-1,-7,7,1,1,1,-2,5,-10,-5,-1,-10,3,-8,-9,-2,-2,-3,4,-10,-5,-4,10,1,10,-7,-8,-5,-6,5,-4,8,-5,6,5,6,-9,-9,10,8,-5,-10,2,3,6,5,-7,7,-4,-3,1,2,-10,6,8,-1,-9,-3,4,-10,8,-4,8,8,6,-4,-1,-4,5,10,-6,-6,9,5,-9,-8,10,-1,3,4,-3,4,-5,2,10,5,2,-10,-1,8,2,7,6,-2,-9,8,-5,5,-3,-1,-8,1,-6,-3,-8,8,-7,-3,5,3,4,-8,-6,-2,-10,3,7,-2,-7,-3,5,8,-6,-6,8,7,-3,-4,7,-9,7,9,-8,-1,5,3,-3,2,1,2,-9,3,3,-10,-1,1,1,-6,-8,-5,8,3,-8,-5,-4,10,6,-5,1,1,-2,-4,2,-3,4,3,5,-7,4,-6,9,-4,-9,5,-4,-4,1,-9,-7,-5,-10,4,6,-2,5,9,-4,-8,1,5,-2,-2,-8,-7,-3,5,-1,-1,-4,7,1,-3,8,9,7,-5,-4,3,7,-6,-4,-6,-4,4,-1,7,-9,-6,4,-8,-1,1,9,-7,5,9,-8,4,1,10,-1,4,9,-8,-7,-3,1,-6,-9,-9,8,-6,2,-8,2,-4,9,2,10,-1,10,9,-2,-4,-10,9,-2,6,-9,-6,4,-3,-10,3,6,-8,9,-10,2,4,-8,10,8,-3,-2,-7,8,1,4,9,5,-8,7,-7,-1,-1,-4,8,-8,-10,-9,7,6,7,-10,-9,8,-3,-5,-5,3,-7,8,-10,8,9,6,9,3,-1,-4,10,-8,-6,5,-1,-9,5,6,6,-5,3,10,-5,-8,6,5,-6,8,5,-3,-10,-5,-2,10,6,10,1,1,-2,10,-3,-3,7,-10,5,-1,8,1,8,7,-1,3,-6,5,5,6,-10,6,-10,-2,-4,1,-10,1,6,-1,-4,8,-3,9,-8,-8,6,8,2,1,4,7,6,1,5,-10,8,-10,3,-9,-8,1,-10,-10,-10,8,2,-5,5,-2,-8,1,10,-9,5,-4,-4,7,-6,8,-7,-10,-4,-9,1,-3,-4,6,-8,-7,-4,7,7,-2,2,-1,-6,10,-5,1,10,8,-8,8,-1,2,5,1,-5,9,5,-6,2,-3,5,-5,-9,7,-7,-7,9,2,-1,7,10,-5,7,-5,7,6,-3,-7,3,-2,-10,-9,-8,-2,-7,-7,7,9,-5,-3,-4,6,-1,10,6,4,-8,-4,5,-7,7,9,-8,-9,5,-5,2,-6,4,-7,-7,8,-4,-4,-8,-1,-7,-8,9,5,-9,2,-4,4,-4,8,-2,7,-9,-4,3,2,6,-2,7,-6,10,2,6,-1,9,-10,-8,-6,9,3,-7,-10,5,5,-1,-2,1,-6,10,-7,-9,-9,-5,3,6,6,3,6,9,-1,2,-1,5,-10,-5,3,4,-10,-6,-5,-2,-8,8,-2,3,7,-7,10,6,-9,7,-6,4,3,10,4,8,7,-4,-5,4,-6,-2,5,6,-10,5,-7,-1,-1,-6,-5,7,-4,-4,-1,1,-9,4,1,-9,-5,7,3,2,-9,1,7,-7,-2,-10,-9,-10,3,6,6,-5,10,-4,-9,9,7,3,9,-4,3,5,4,2,-1,-3,2,9,9,-6,-4,-6,4,-4,1,5,-2,6,6,-5,-6,4,-6,1,10,6,10,-4,3,-9,-8,8,5,-9,-2,7,-3,-8,-6,6,6,-10,6,-3,4,5,8,-5,7,-5,-8,-9,-3,-2,5,7,-2,8,-2], dtype = "uint8")#candidate|4183|(840,)|const|uint8
call_4181 = func_3287_call(relay.reshape(var_4182.astype('uint8'), []), relay.reshape(const_4183.astype('uint8'), [5, 12, 14]), )
call_4184 = func_3287_call(relay.reshape(var_4182.astype('uint8'), []), relay.reshape(const_4183.astype('uint8'), [5, 12, 14]), )
func_3927_call = mod.get_global_var('func_3927')
func_3928_call = mutated_mod.get_global_var('func_3928')
call_4185 = func_3927_call()
call_4186 = func_3927_call()
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_4188 = relay.TupleGetItem(func_2306_call(), 0)
call_4189 = relay.TupleGetItem(func_2308_call(), 0)
bop_4190 = relay.floor_mod(const_4183.astype('float32'), call_4148.astype('float32')) # shape=(165, 840)
bop_4193 = relay.floor_mod(const_4183.astype('float32'), call_4149.astype('float32')) # shape=(165, 840)
var_4197 = relay.var("var_4197", dtype = "float32", shape = (165, 1))#candidate|4197|(165, 1)|var|float32
bop_4198 = relay.bitwise_xor(uop_4169.astype('uint32'), relay.reshape(var_4197.astype('uint32'), relay.shape_of(uop_4169))) # shape=(165, 1)
bop_4201 = relay.bitwise_xor(uop_4171.astype('uint32'), relay.reshape(var_4197.astype('uint32'), relay.shape_of(uop_4171))) # shape=(165, 1)
bop_4206 = relay.add(bop_4198.astype('uint8'), relay.reshape(call_4148.astype('uint8'), relay.shape_of(bop_4198))) # shape=(165, 1)
bop_4209 = relay.add(bop_4201.astype('uint8'), relay.reshape(call_4149.astype('uint8'), relay.shape_of(bop_4201))) # shape=(165, 1)
func_3880_call = mod.get_global_var('func_3880')
func_3881_call = mutated_mod.get_global_var('func_3881')
call_4212 = relay.TupleGetItem(func_3880_call(), 0)
call_4213 = relay.TupleGetItem(func_3881_call(), 0)
func_2109_call = mod.get_global_var('func_2109')
func_2112_call = mutated_mod.get_global_var('func_2112')
const_4215 = relay.const([-3,-8,3,5,-1,5,-7,2,2,-10,-10,1,9,-6,-8,-1,-10,-3,6,-2,-2,2,-9,-1,-10,-4,-1,10,-6,-3,5,-5,-2,9,-8,-7,-7,10,-3,9,-4,-6,9,-7,2,9,-5,-6,3,-6,-6,1,-4,-9,6,2,2,-6,-4,8,-6,-7,1,7,7,-7,10,6,1,-1,-5,6,3,-10,7,-6,7,4,-5,4,-8,-6,-10,-2,-8,-7,-8,-2,-7,9,-2,-8,6,-7,-3,-4,-1,-9,1,-2,-4,3,4,-2,-8,6,6,7,6,-5,-4,-1,-9,7,-2,10,8,8,9,-2,3,-4,-3,-10,-6,7,-4,-6,9,-3,-2,4,8,-3,-4,-1,4,5,-8,-6,10,6,-2,-6,-6,9,-4,2,-7,-9,10,1,5,1,10,10,1,-5,8,3,2,6,6,-8,-10,5,6,6,-1,7,-6,-5,-2,-1,2,6,5,10,9,4,4,1,-5,-1,6,10,-4,-9,5,-9,-4,-1,-1,10,-8,9,-4,-1,-9,-9,-10,-7,6,-5,7,-10,-10,-10,3,-1,4,4,-2,1,7,8,-9,-4,-10,5,-2,10,5,5,10,8,7,6,-7,3,-4,-1,-6,7,-3,-5,7,-9,5,-2,-1,3,-2,-9,5,-3,5,-4,-1,6,5,-9,7,7,-3,9,1,1,-10,-4,-2,-3,-3,7,8,-9,7,7,5,7,5,9,-7,-1,1,-1,-4,-10,-9,-2,2,-2,-7,-2,3,2,5,-3,-4,-9,-10,7,-3,1,-6,3,-2,5,-3,6,6,3,-9,-2,-3,-7,-1,4,-1,-10,-8,5,5,3,-8,-4,-7,4,5,9,8,10,-10,7,-1,-2,-7,3,6,-2,5,9,-4,7,10,9,6,9,-4,-9,1,-8,-8,-2,6,-1,9,2,10,5,9,-9,-1,-1,5,4,3,6,-2,8,-4,9,-6,1,2,7,7,-6,-2,-7,-9,5,-2,5,-3,10,-1,-3,9,2,-9,5,-5,-8,8,-6,-6,-8,3,-2,6,6,-2,4,-2,-5,7,8,-10,1,-2,6,-9,6,-10,8,2,-3,4,8,-8,-8,-6,7,1,-4,4,-10,-4,4,-7,-10,-8,-7,-4,10,-1,-7,3,1,-3,-8,6,-1,-6,-6,9,4,-3,-2,8,-9,10,-4,-9,6,3,-8,-2,3,3,-1,-7,4,7,-9,9,2,1,2,-10,-1,-4,3,-7,4,-6,-6,1,5,7,-3,-9,8,10,9,10,-2,-8,-2,1,-8,-2,-10,-6,1,8,-2,8,6,-9,7,-6,6,5,-2,4,3,-6,-9,7,-8,5,-1,-9,8,-5,-9,-5,4,1,-4,6,10,-10,6,10,-2,1,5,-2,10,-9,8,-4,-2,10,9,-3,10,8,3,-8,-1,10,-3,-1,2,3,-2,2,-1,1,-10,1,-10,-6,6,-7,4,-5,10,9,-7,-1,9,-4,6,2,-2,8,1,4,-7,-8,-8,8,-10,9,-1,-8,-4,3,-10,9,-10,-3,-8,-10,-9,8,3,7,-6,3,-9,-10,-3,-6,-9,-4,-2,2,7,-7,-2,8,-10,9,5,5,-2,8,9,-8,-9,-9,-3,-10,-5,-9,-1,-2,-1,-9,2,-10,-9,10,4,-6,4,5,8,-8,-2,8,5,6,-3,-4,-7,9,-5,-5,1,-4,-9,-10,4,-8,6,-2,7,9,-3,5,7,7,7,3,-3,10,-5,7,-10,-8,2,-9,7,9,9,9,1,8,-8,-3,7,1,4,1,-4,2,8,4,-9,5,-8,6,10,5,-4,-9,2,2,9,-1,2,-6,7,8,-3,-4,9,10,3,-7,6,7,-7,5,2,-6,9,9,-2,-2,1,-7,7,10,-5,-8,-3,10,-5,6,10,6,-4,7,-1,10,-6,-10,6,-4,7,3,-8,1,-9,3,-9,-9,1,8,5,-3,4,-6,3,3,-4,1,-9,-7,9,8,-8,-10,4,-2,5,10,9,10,-7,-2,-9,-3,5,-9,-2,4,-5,-9,-10,6,6,-5,-5,5,-9,-3,1,-9,7,-3,-4,-7,1,5,-8,-7,10,-7,6,-5,2,3,5,2,-9,-1,1,-1,-5,-4,-1,7,-2,4,-8,-4,8,-4,1,-5,8,-5,-3,3,-5,10,9,-7,2,8,-2,-10,2,-5,7,-3,-5,6,-7,7,10,-7,-7,-10,6,8,-2,10,10,5,9,-2,8,-4,1,-6,1,9,-8,4,7,-3,10,-1,1,8,5,4,-10,-10,-2,-1,10,8,9,1,5,2,-9,6,10,10,5,-1,-4,7,7,-6,10,-6,-9,-2,3,2,9,-10,3,6,-5,5,8,-3,2,4,7,-10,7,3,-9,9,-4,-7,-10,4,-10,3,3,-4,9,-6,6,-3,1,2,-2,8,-2,4,9,-5,9,10,-8,-4,2,3,9,10,3,-9,-3,-2,3,-6,4,-5,3,-4,10,6,-9,10,7,7,4,-7,-3,1,-7,-10,10,5,-1,-2,6,-2,9,4,-2,5,6,-2,-3,7,-1,10,-4,-5,-1,-7,7,3,-1,-1,7,-8,10,-4,-6,2,1,1,6,-4,4,-5,9,8,-6,-3,-7,-9,-3,-9,-5,-8,-10,6,4,-2,-9,9,6,8,-6,-8,-3,9,10,-7,-8,3,-6,5,-9,10,7,-6,7,-6,8,-8,-9,-9,7,-5,-4,7,7,10,1,4,9,3,-5,-3,-3,3,9,2,-9,5,5,-3,-3,10,3,2,-1,10,-3,8,5,1,-3,-2,-2,-8,-6,-1,2,-5,-3,-8,3,2,-10,-4,-2,-9,-10,9,-7,-8,8,3,9,6,6,-8,-2,5,-1,-9,5,-9,-10,-6,-7,-1,4,-4,2,6,-4,5,5,7,10,-10,-5,-2,9,-1,4,1,4,2,-5,-3,3,4,9,-5,-1,-8,3,-9,-9,9,2,1,5,-3,-2,-1,6,6,-1,6,7,6,5,-4,-10,8,-3,10,-2,2,9,10,3,3,-8,-5,5,5,-9,-4,2,-10,1,-4,-3,1,-2,-9,9,-8,-3,10,-4,-7,1,-3,5,7,3,1,10,8,-2,-8,9,6,10,-9,10,-9,-9,-6,-6,-10,-6,7,-2,-9,-1,5,-6,-3,8,1,8,-1,-2,1,9,9,2,-1,-10,-1,9,3,9,-2,-8,7,10,-4,4,-10,-9,-8,4,7,2,-7,4,-6,7,-9,10,-2,-3,-5,-2,-10,6,3,-7,-4,-8,10,10,-4,6,2,7,-10,-10,7,-10,4,7,5,-6,5,-9,-8,2,6,3,-6,1,3,1,-3,1,8,-5,-3,4,-6,4,-2,4,-6,5,1,10,-9,-6,-3,-2,-4,-5,-9,-7,-2,9,-7,3,3,-7,-5,-8,9,7,-2,4,5,5,10,6,-2,7,1,-5,7,-9,-9,7,3,-2,10,-3,5,8,1,-9,-1,4,-8,4,-1,8,-10,-9,-6,1,7,2,3,9,-3,1,-7,-6,6,-8,5,-8,-10,1,10,-3,-6,-10,4,5,8,-3,-2,7,9,4,3,10,-1,-3,-10,9,-3,5,6,7,7,-8,7,5,-5,1,-1,3,-1,-4,-3,9,1,5,5,3,10,-10,-1,4,-6,-3,-7,2,3,2,-10,-1,-6,-10,6,4,-9,4,1,-3,4,-5,-2,-2,-2,10,7,3,-10,4,-8,-4,5,6,-8,3,7,-7,-7,-6,5,-1,9,-6,8,-5,-10,-3,8,1,10,-10,-5,6,7,-9,7,-5,-5,-5,2,-9,-8,-9,6,2,7,-3,-2,2,-2,-4,-2,-5,-1,-10,-10,-9,-5,-5,-10,7,3,-10,10,4,5,-10,8,-6,8,4,-6,8,-1,4,-4,-9,-10,1,10,-3,5,2,1,-2,3,-10,-9,2,-3,-1,7,3,-8,-9,-4,-1,-6,-2,-10,-9,-2,-4,7,-3,10,7,-2,7,7,-8,6,9,4,-2,-10,7,-10,-5,5,-7,-9,-6,-7,3,-7,-6,-10,-7,-8,9,2,2,-7,8,4,-10,-2,-6,-7,4,1,9,4,-8,-6,2,2,-9,10,2,-3,-7,-7,5,-3,8,-8,7,-4,8,-1,6,-4,-4,-2,-8,-9,1,9,1,-6,8,-5,-10,10,-9,-8,-6,-1,9,-9,10,2,-3,9,5,-3,1,-5,-9,9,-8,4,-1,8,-8,-7,-4,-2,-1,3,8,8,5,10,-10,3,-10,-6,2,3,1,-10,10,-2,-3,-9,-10,-10,-10,-3,3,-10,3,-4,-10,-8,-6,5,-10,-8,-3,-6,6,10,-8,8,-10,-4,6,9,2,6,6,3,8,1,-2,4,2,-4,8,-2,4,-1,-4,6,-10,4,-6,1,2,-7,8,-2,7,1,-2,4,-10,6,-9,-10,7,-4,2,-6,9,1,-5,8,-1,-9,-3,-6,-2,-5,-7,8,8,6,9,-8,-7,6,2,-6,-2,-5,-10,7,5,2,6,5,-4,-6,5,1,-3,-4,10,7,4,6,2,5,5,9,-9,-5,-7,6,-5,6,6,2,-9,-8,8,9,7,-7,-1,-6,-1,3,-4,-2,8,6,7,7,-8,10,-9,5,-1,2,9,4,9,-1,-6,1,-10,-5,-6,4,-7,1,1,6,10,-6,6,-2,7,7,6,-5,-6,5,3,7,4,-6,3,9,-1,-4,-6,1,10,7,5,-6,2,-4,-3,-3,-8,3,4,-7,-10,-10,-9,-2,-1,7,-8,-7,-4,-5,2,5,-8,1,4,-5,-1,1,-7,1,1,-6,-10,-1,-5,-5,-4,-7,1,-4,-8,-9,5,-8,-4,-2,8,-4,-2,7,1,4,-2,-8,9,-10,-1,7,-9,-10,-6,8,2,-4,-8,2,3,-5,-7,10,2,-4,-6,-9,-7,-10,3,7,-3,-2,2,-2,-9,9,-7,3,-8,-4,-9,-1,-4,-9,2,-4,9,-8,9,-5,5,6,5,-3,8,9,-2,6,-5,5,-5,2,5,4,-8,-6,-6,-6,4,4,-9,-1,-5,-9,6,-6,2,-2,10,3,-8,2,1,-5,-1,9,1,-3,9,-5,-3,-3,-10,4,-4,7,-7,-3,9,5,6,10,-4,-4,-2,-9,1,-1,-8,1,3,-1,9,1,4,7,-10,7,-9,-8,-1,7,-8,3,5,-7,1,9,5,-9,-5,-9,3,-10,9,5,-4,2,-3,9,8,-8,-3,-1,8,7,6,10,-6,-4,-8,-6,3,6,2,6,9,-1,1,-5,3,2,-10,3,-3,-10,7,-3,4,8,5,8,-10,-8,-4,-1,5,-10,-8,-10,1,-1,-5,-1,-4,-7,-5,-2,-7,-7,5,9,1,-4,4,9,-5,-4,-5,-1,5,7,-4,-6,-9,-3,-1,6,-4,1,6,3,-10,-2,-3,-3,3,-10,-7,10,-9,4,-9,-2,-1,-1,4,-8,5,9,-5,8,-2,-4,7,9,-1,8,1,1,4,7,-9,2,7,2,6,7,-10,-9,7,7,-8,5,4,1,1,-7,5,4,5,-3,6,10,-2,-7,6,-6,8,4,-1,-1,5,3,-9,1,3,-4,-3,-8,-1,4,8,2,5,-9,2,-9,10,-8,-8,-1,-2,-1,9,-2,2,-10,7,-8,9,-7,9,-10,9,-8,-9,-8,-5,-8,8,-7,-5,3,-8,-4,-10,9,-8,-8,9,4,8,8,10,-8,-5,1,9,-4,4,-3,3,-4,3,10,10,7,-7,-1,-1,7,3,8,1,10,-1,10,7,7,-7,-1,10,-5,2,-3,-7,7,-8,4,6,-5,-9,3,10,-9,6,4,-7,-2,-6,-2,-7,3,-5,-5,2,-9,6,10,-1,-2,6,-2,6,-4,3,7,8,-5,8,-5,1,-1,8,-2,-10,-8,10,-1,-6,-3,4,8,2,4,-7,-10,5,-5,3,-3,-4,1,-3,-2,-9,7,-7,-5,10,6,-10,-6,-10,-1,-10,7,-7,8,1,8,-7,5,-10,2,4,5,-6,1,2,8,6,6,4,-3,5,6,4,5,-2,4,-7,-1,10,9,-4,5,-4,5,-4,2,-8,1,-10,8,5,7,10,3,10,3,-8,-7,-9,10,-9,-3,1,-8,2,2,-7,9,8,9,-3,5,-1,6,3,3,10,-8,2,1,-2,-1,-3,8,2,1,-10,-9,-9,2,4,-3,-1,-5,-8], dtype = "int8")#candidate|4215|(2340,)|const|int8
call_4214 = relay.TupleGetItem(func_2109_call(relay.reshape(const_4215.astype('int8'), [12, 13, 15])), 0)
call_4216 = relay.TupleGetItem(func_2112_call(relay.reshape(const_4215.astype('int8'), [12, 13, 15])), 0)
output = relay.Tuple([call_4158,call_4175,call_4181,var_4182,call_4185,call_4188,bop_4190,bop_4206,call_4212,call_4214,const_4215,])
output2 = relay.Tuple([call_4159,call_4176,call_4184,var_4182,call_4186,call_4189,bop_4193,bop_4209,call_4213,call_4216,const_4215,])
func_4222 = relay.Function([var_4182,var_4197,], output)
mod['func_4222'] = func_4222
mod = relay.transform.InferType()(mod)
var_4223 = relay.var("var_4223", dtype = "uint8", shape = ())#candidate|4223|()|var|uint8
var_4224 = relay.var("var_4224", dtype = "float32", shape = (165, 1))#candidate|4224|(165, 1)|var|float32
output = func_4222(var_4223,var_4224,)
func_4225 = relay.Function([var_4223,var_4224,], output)
mutated_mod['func_4225'] = func_4225
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3259_call = mod.get_global_var('func_3259')
func_3261_call = mutated_mod.get_global_var('func_3261')
call_4297 = relay.TupleGetItem(func_3259_call(), 0)
call_4298 = relay.TupleGetItem(func_3261_call(), 0)
output = relay.Tuple([call_4297,])
output2 = relay.Tuple([call_4298,])
func_4300 = relay.Function([], output)
mod['func_4300'] = func_4300
mod = relay.transform.InferType()(mod)
output = func_4300()
func_4301 = relay.Function([], output)
mutated_mod['func_4301'] = func_4301
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3111_call = mod.get_global_var('func_3111')
func_3112_call = mutated_mod.get_global_var('func_3112')
call_4341 = relay.TupleGetItem(func_3111_call(), 0)
call_4342 = relay.TupleGetItem(func_3112_call(), 0)
func_2562_call = mod.get_global_var('func_2562')
func_2563_call = mutated_mod.get_global_var('func_2563')
call_4344 = relay.TupleGetItem(func_2562_call(), 0)
call_4345 = relay.TupleGetItem(func_2563_call(), 0)
func_3611_call = mod.get_global_var('func_3611')
func_3612_call = mutated_mod.get_global_var('func_3612')
call_4346 = relay.TupleGetItem(func_3611_call(), 2)
call_4347 = relay.TupleGetItem(func_3612_call(), 2)
output = relay.Tuple([call_4341,call_4344,call_4346,])
output2 = relay.Tuple([call_4342,call_4345,call_4347,])
func_4358 = relay.Function([], output)
mod['func_4358'] = func_4358
mod = relay.transform.InferType()(mod)
mutated_mod['func_4358'] = func_4358
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4358_call = mutated_mod.get_global_var('func_4358')
call_4359 = func_4358_call()
output = call_4359
func_4360 = relay.Function([], output)
mutated_mod['func_4360'] = func_4360
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3645_call = mod.get_global_var('func_3645')
func_3647_call = mutated_mod.get_global_var('func_3647')
call_4376 = relay.TupleGetItem(func_3645_call(), 1)
call_4377 = relay.TupleGetItem(func_3647_call(), 1)
output = call_4376
output2 = call_4377
func_4378 = relay.Function([], output)
mod['func_4378'] = func_4378
mod = relay.transform.InferType()(mod)
output = func_4378()
func_4379 = relay.Function([], output)
mutated_mod['func_4379'] = func_4379
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3674_call = mod.get_global_var('func_3674')
func_3676_call = mutated_mod.get_global_var('func_3676')
call_4380 = relay.TupleGetItem(func_3674_call(), 1)
call_4381 = relay.TupleGetItem(func_3676_call(), 1)
func_2968_call = mod.get_global_var('func_2968')
func_2971_call = mutated_mod.get_global_var('func_2971')
var_4389 = relay.var("var_4389", dtype = "float32", shape = (330,))#candidate|4389|(330,)|var|float32
call_4388 = relay.TupleGetItem(func_2968_call(relay.reshape(var_4389.astype('float32'), [165, 2])), 1)
call_4390 = relay.TupleGetItem(func_2971_call(relay.reshape(var_4389.astype('float32'), [165, 2])), 1)
bop_4395 = relay.equal(call_4388.astype('bool'), var_4389.astype('bool')) # shape=(165, 330)
bop_4398 = relay.equal(call_4390.astype('bool'), var_4389.astype('bool')) # shape=(165, 330)
const_4405 = relay.const([[True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True],[False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True],[False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False],[True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True],[False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True],[False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False],[True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True],[True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True],[True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True],[False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False],[True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False],[False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False],[False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False],[True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True],[False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False],[True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False],[False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True],[True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True],[True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True],[False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,True],[False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,False],[True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True],[False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True],[True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False],[False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True],[True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False],[True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True],[False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False],[True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True],[True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True],[False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True],[False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True],[False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False],[False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False],[False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False],[False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False],[False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True],[True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,True,False],[True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True],[False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False],[False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True],[True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True],[True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False],[False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True],[True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True],[True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False],[False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True],[False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False],[True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True],[True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True],[True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False],[False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False],[True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False],[True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True],[True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True],[True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True],[True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False],[True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False],[True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True],[True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True],[True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False],[False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True],[False,False,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True],[False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True],[False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False],[False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True],[True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False],[False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False],[True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True],[True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True],[False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False],[True,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True],[True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True],[False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True],[False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True],[True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True],[True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False],[True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True],[True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True],[True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False],[False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False],[False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True],[True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True],[False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True],[False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False],[True,False,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True],[False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False],[False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False],[False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False],[False,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True],[False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True],[True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False],[False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True],[True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False],[False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True],[False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False],[False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,True],[True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,False],[False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,True],[True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True],[True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False],[False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True],[False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False],[False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False],[True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True],[True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True],[False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True],[False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,True,True],[True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False],[True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False],[False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False],[True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True],[False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False],[True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True],[True,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,False],[True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True],[True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,False],[False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False],[True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True],[True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False],[False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True],[True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True],[False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False],[False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False],[True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True],[True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True],[True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,True],[True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True],[True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False],[True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False],[True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False],[False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False],[False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,True,True],[False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False],[False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True],[False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False],[False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True],[True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True],[False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False],[False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True],[True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False],[False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True],[True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True],[True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False],[False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True],[True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True],[False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True],[False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False],[False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False],[False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False],[True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True],[True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True],[True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False],[True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False],[True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False],[False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True],[True,False,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True],[False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False],[False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True],[False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True],[True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False],[False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True],[True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False],[True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False],[True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False]], dtype = "bool")#candidate|4405|(165, 330)|const|bool
bop_4406 = relay.less(bop_4395.astype('bool'), relay.reshape(const_4405.astype('bool'), relay.shape_of(bop_4395))) # shape=(165, 330)
bop_4409 = relay.less(bop_4398.astype('bool'), relay.reshape(const_4405.astype('bool'), relay.shape_of(bop_4398))) # shape=(165, 330)
bop_4415 = relay.minimum(bop_4406.astype('uint64'), call_4388.astype('uint64')) # shape=(165, 330)
bop_4418 = relay.minimum(bop_4409.astype('uint64'), call_4390.astype('uint64')) # shape=(165, 330)
output = relay.Tuple([call_4380,bop_4415,])
output2 = relay.Tuple([call_4381,bop_4418,])
func_4419 = relay.Function([var_4389,], output)
mod['func_4419'] = func_4419
mod = relay.transform.InferType()(mod)
var_4420 = relay.var("var_4420", dtype = "float32", shape = (330,))#candidate|4420|(330,)|var|float32
output = func_4419(var_4420)
func_4421 = relay.Function([var_4420], output)
mutated_mod['func_4421'] = func_4421
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3611_call = mod.get_global_var('func_3611')
func_3612_call = mutated_mod.get_global_var('func_3612')
call_4425 = relay.TupleGetItem(func_3611_call(), 0)
call_4426 = relay.TupleGetItem(func_3612_call(), 0)
output = call_4425
output2 = call_4426
func_4447 = relay.Function([], output)
mod['func_4447'] = func_4447
mod = relay.transform.InferType()(mod)
mutated_mod['func_4447'] = func_4447
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4447_call = mutated_mod.get_global_var('func_4447')
call_4448 = func_4447_call()
output = call_4448
func_4449 = relay.Function([], output)
mutated_mod['func_4449'] = func_4449
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3276_call = mod.get_global_var('func_3276')
func_3277_call = mutated_mod.get_global_var('func_3277')
call_4450 = func_3276_call()
call_4451 = func_3276_call()
output = relay.Tuple([call_4450,])
output2 = relay.Tuple([call_4451,])
func_4462 = relay.Function([], output)
mod['func_4462'] = func_4462
mod = relay.transform.InferType()(mod)
mutated_mod['func_4462'] = func_4462
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4462_call = mutated_mod.get_global_var('func_4462')
call_4463 = func_4462_call()
output = call_4463
func_4464 = relay.Function([], output)
mutated_mod['func_4464'] = func_4464
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3276_call = mod.get_global_var('func_3276')
func_3277_call = mutated_mod.get_global_var('func_3277')
call_4465 = func_3276_call()
call_4466 = func_3276_call()
func_4222_call = mod.get_global_var('func_4222')
func_4225_call = mutated_mod.get_global_var('func_4225')
const_4477 = relay.const(10, dtype = "uint8")#candidate|4477|()|const|uint8
const_4478 = relay.const([-1.853049,-6.247777,9.340392,2.945524,-5.205552,-3.716027,7.063689,3.781955,6.015767,6.168240,-1.925009,-0.669893,9.009598,7.749714,-7.999794,3.162209,-4.021764,3.926243,3.251314,2.736548,5.627639,-2.530553,4.670818,-0.499454,2.194024,7.120109,-2.588011,6.576125,1.559569,-4.358409,0.906273,-4.371905,8.664445,-6.053595,-8.227993,0.336700,5.723505,1.059236,4.517480,-5.930746,7.482526,-4.859142,8.340869,0.365249,-0.443427,-9.820117,-6.340522,-9.505482,-2.099874,-3.579434,-0.116253,6.878664,0.721203,-2.079284,-2.700866,0.546364,-8.546626,6.865238,6.299185,-5.917640,-9.019957,-3.527196,-2.896691,4.582290,1.822077,3.310046,9.498337,8.701658,2.962597,4.057884,-9.082748,7.393645,5.086823,-1.408216,-6.779059,-1.192274,5.522071,7.232655,3.789208,8.207767,-4.981156,-0.059249,5.317284,-4.391349,-8.279974,-2.622118,-6.247862,9.151898,-7.807649,9.514419,8.967681,6.262446,-8.915046,-7.665190,9.428145,-0.532353,-2.118348,6.387318,-0.926883,3.141566,-0.694057,-9.360476,9.567229,-0.565719,6.714569,-7.912545,6.722183,-9.698070,-7.271035,-9.360904,-4.305052,5.528260,7.870495,-4.147004,-1.991208,-1.381189,3.473024,-9.739805,8.296296,-7.437233,-9.946761,5.933974,-3.657692,7.017322,-3.242149,8.516062,-7.801627,7.367878,7.280246,9.589725,5.364175,-5.027865,-1.901935,-6.636093,3.496228,3.059112,8.482569,-0.662471,-2.239264,9.328291,0.751892,8.114132,0.933383,6.278517,-6.759661,0.151685,8.377463,-9.375175,-5.076581,1.701781,8.182424,9.155389,7.352488,-6.090094,3.204898,-8.106432,-9.845367,-4.790184,-3.917072,5.143582,-0.814229,1.000704,-3.236497,-2.576563,-3.172183], dtype = "float32")#candidate|4478|(165,)|const|float32
call_4476 = relay.TupleGetItem(func_4222_call(relay.reshape(const_4477.astype('uint8'), []), relay.reshape(const_4478.astype('float32'), [165, 1]), ), 7)
call_4479 = relay.TupleGetItem(func_4225_call(relay.reshape(const_4477.astype('uint8'), []), relay.reshape(const_4478.astype('float32'), [165, 1]), ), 7)
output = relay.Tuple([call_4465,call_4476,const_4477,const_4478,])
output2 = relay.Tuple([call_4466,call_4479,const_4477,const_4478,])
func_4484 = relay.Function([], output)
mod['func_4484'] = func_4484
mod = relay.transform.InferType()(mod)
output = func_4484()
func_4485 = relay.Function([], output)
mutated_mod['func_4485'] = func_4485
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3968_call = mod.get_global_var('func_3968')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_4512 = relay.TupleGetItem(func_3968_call(), 1)
call_4513 = relay.TupleGetItem(func_3969_call(), 1)
func_2183_call = mod.get_global_var('func_2183')
func_2185_call = mutated_mod.get_global_var('func_2185')
var_4569 = relay.var("var_4569", dtype = "float64", shape = (165,))#candidate|4569|(165,)|var|float64
call_4568 = relay.TupleGetItem(func_2183_call(relay.reshape(var_4569.astype('float64'), [1, 11, 15])), 0)
call_4570 = relay.TupleGetItem(func_2185_call(relay.reshape(var_4569.astype('float64'), [1, 11, 15])), 0)
func_3157_call = mod.get_global_var('func_3157')
func_3158_call = mutated_mod.get_global_var('func_3158')
call_4572 = relay.TupleGetItem(func_3157_call(), 0)
call_4573 = relay.TupleGetItem(func_3158_call(), 0)
output = relay.Tuple([call_4512,call_4568,var_4569,call_4572,])
output2 = relay.Tuple([call_4513,call_4570,var_4569,call_4573,])
func_4583 = relay.Function([var_4569,], output)
mod['func_4583'] = func_4583
mod = relay.transform.InferType()(mod)
var_4584 = relay.var("var_4584", dtype = "float64", shape = (165,))#candidate|4584|(165,)|var|float64
output = func_4583(var_4584)
func_4585 = relay.Function([var_4584], output)
mutated_mod['func_4585'] = func_4585
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2936_call = mod.get_global_var('func_2936')
func_2937_call = mutated_mod.get_global_var('func_2937')
call_4620 = relay.TupleGetItem(func_2936_call(), 0)
call_4621 = relay.TupleGetItem(func_2937_call(), 0)
output = call_4620
output2 = call_4621
func_4644 = relay.Function([], output)
mod['func_4644'] = func_4644
mod = relay.transform.InferType()(mod)
output = func_4644()
func_4645 = relay.Function([], output)
mutated_mod['func_4645'] = func_4645
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3611_call = mod.get_global_var('func_3611')
func_3612_call = mutated_mod.get_global_var('func_3612')
call_4668 = relay.TupleGetItem(func_3611_call(), 0)
call_4669 = relay.TupleGetItem(func_3612_call(), 0)
output = relay.Tuple([call_4668,])
output2 = relay.Tuple([call_4669,])
func_4670 = relay.Function([], output)
mod['func_4670'] = func_4670
mod = relay.transform.InferType()(mod)
output = func_4670()
func_4671 = relay.Function([], output)
mutated_mod['func_4671'] = func_4671
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3449_call = mod.get_global_var('func_3449')
func_3451_call = mutated_mod.get_global_var('func_3451')
call_4701 = func_3449_call()
call_4702 = func_3449_call()
uop_4719 = relay.asinh(call_4701.astype('float32')) # shape=(16, 14, 14)
uop_4721 = relay.asinh(call_4702.astype('float32')) # shape=(16, 14, 14)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_4733 = relay.TupleGetItem(func_2306_call(), 0)
call_4734 = relay.TupleGetItem(func_2308_call(), 0)
func_4670_call = mod.get_global_var('func_4670')
func_4671_call = mutated_mod.get_global_var('func_4671')
call_4753 = relay.TupleGetItem(func_4670_call(), 0)
call_4754 = relay.TupleGetItem(func_4671_call(), 0)
func_1568_call = mod.get_global_var('func_1568')
func_1571_call = mutated_mod.get_global_var('func_1571')
var_4765 = relay.var("var_4765", dtype = "float32", shape = (2, 160))#candidate|4765|(2, 160)|var|float32
call_4764 = relay.TupleGetItem(func_1568_call(relay.reshape(var_4765.astype('float32'), [16, 2, 10])), 0)
call_4766 = relay.TupleGetItem(func_1571_call(relay.reshape(var_4765.astype('float32'), [16, 2, 10])), 0)
func_4378_call = mod.get_global_var('func_4378')
func_4379_call = mutated_mod.get_global_var('func_4379')
call_4771 = func_4378_call()
call_4772 = func_4378_call()
func_4300_call = mod.get_global_var('func_4300')
func_4301_call = mutated_mod.get_global_var('func_4301')
call_4775 = relay.TupleGetItem(func_4300_call(), 0)
call_4776 = relay.TupleGetItem(func_4301_call(), 0)
func_3259_call = mod.get_global_var('func_3259')
func_3261_call = mutated_mod.get_global_var('func_3261')
call_4780 = relay.TupleGetItem(func_3259_call(), 2)
call_4781 = relay.TupleGetItem(func_3261_call(), 2)
output = relay.Tuple([uop_4719,call_4733,call_4753,call_4764,var_4765,call_4771,call_4775,call_4780,])
output2 = relay.Tuple([uop_4721,call_4734,call_4754,call_4766,var_4765,call_4772,call_4776,call_4781,])
func_4784 = relay.Function([var_4765,], output)
mod['func_4784'] = func_4784
mod = relay.transform.InferType()(mod)
mutated_mod['func_4784'] = func_4784
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4785 = relay.var("var_4785", dtype = "float32", shape = (2, 160))#candidate|4785|(2, 160)|var|float32
func_4784_call = mutated_mod.get_global_var('func_4784')
call_4786 = func_4784_call(var_4785)
output = call_4786
func_4787 = relay.Function([var_4785], output)
mutated_mod['func_4787'] = func_4787
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4644_call = mod.get_global_var('func_4644')
func_4645_call = mutated_mod.get_global_var('func_4645')
call_4808 = func_4644_call()
call_4809 = func_4644_call()
uop_4819 = relay.erf(call_4808.astype('float64')) # shape=(13, 8, 6)
uop_4821 = relay.erf(call_4809.astype('float64')) # shape=(13, 8, 6)
func_2562_call = mod.get_global_var('func_2562')
func_2563_call = mutated_mod.get_global_var('func_2563')
call_4824 = relay.TupleGetItem(func_2562_call(), 1)
call_4825 = relay.TupleGetItem(func_2563_call(), 1)
output = relay.Tuple([uop_4819,call_4824,])
output2 = relay.Tuple([uop_4821,call_4825,])
func_4829 = relay.Function([], output)
mod['func_4829'] = func_4829
mod = relay.transform.InferType()(mod)
output = func_4829()
func_4830 = relay.Function([], output)
mutated_mod['func_4830'] = func_4830
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_4865 = relay.TupleGetItem(func_2306_call(), 0)
call_4866 = relay.TupleGetItem(func_2308_call(), 0)
output = call_4865
output2 = call_4866
func_4878 = relay.Function([], output)
mod['func_4878'] = func_4878
mod = relay.transform.InferType()(mod)
mutated_mod['func_4878'] = func_4878
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mutated_mod.get_global_var('func_4878')
call_4879 = func_4878_call()
output = call_4879
func_4880 = relay.Function([], output)
mutated_mod['func_4880'] = func_4880
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3747_call = mod.get_global_var('func_3747')
func_3748_call = mutated_mod.get_global_var('func_3748')
call_4883 = relay.TupleGetItem(func_3747_call(), 0)
call_4884 = relay.TupleGetItem(func_3748_call(), 0)
uop_4885 = relay.log10(call_4883.astype('float32')) # shape=(13, 8, 6)
uop_4887 = relay.log10(call_4884.astype('float32')) # shape=(13, 8, 6)
output = uop_4885
output2 = uop_4887
func_4892 = relay.Function([], output)
mod['func_4892'] = func_4892
mod = relay.transform.InferType()(mod)
output = func_4892()
func_4893 = relay.Function([], output)
mutated_mod['func_4893'] = func_4893
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_4935 = relay.TupleGetItem(func_3028_call(), 0)
call_4936 = relay.TupleGetItem(func_3029_call(), 0)
func_4419_call = mod.get_global_var('func_4419')
func_4421_call = mutated_mod.get_global_var('func_4421')
var_4940 = relay.var("var_4940", dtype = "float32", shape = (330,))#candidate|4940|(330,)|var|float32
call_4939 = relay.TupleGetItem(func_4419_call(relay.reshape(var_4940.astype('float32'), [330,])), 0)
call_4941 = relay.TupleGetItem(func_4421_call(relay.reshape(var_4940.astype('float32'), [330,])), 0)
output = relay.Tuple([call_4935,call_4939,var_4940,])
output2 = relay.Tuple([call_4936,call_4941,var_4940,])
func_4943 = relay.Function([var_4940,], output)
mod['func_4943'] = func_4943
mod = relay.transform.InferType()(mod)
mutated_mod['func_4943'] = func_4943
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4944 = relay.var("var_4944", dtype = "float32", shape = (330,))#candidate|4944|(330,)|var|float32
func_4943_call = mutated_mod.get_global_var('func_4943')
call_4945 = func_4943_call(var_4944)
output = call_4945
func_4946 = relay.Function([var_4944], output)
mutated_mod['func_4946'] = func_4946
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_5012 = relay.TupleGetItem(func_2306_call(), 0)
call_5013 = relay.TupleGetItem(func_2308_call(), 0)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_5022 = func_2345_call()
call_5023 = func_2345_call()
output = relay.Tuple([call_5012,call_5022,])
output2 = relay.Tuple([call_5013,call_5023,])
func_5032 = relay.Function([], output)
mod['func_5032'] = func_5032
mod = relay.transform.InferType()(mod)
output = func_5032()
func_5033 = relay.Function([], output)
mutated_mod['func_5033'] = func_5033
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4462_call = mod.get_global_var('func_4462')
func_4464_call = mutated_mod.get_global_var('func_4464')
call_5040 = relay.TupleGetItem(func_4462_call(), 0)
call_5041 = relay.TupleGetItem(func_4464_call(), 0)
func_3674_call = mod.get_global_var('func_3674')
func_3676_call = mutated_mod.get_global_var('func_3676')
call_5042 = relay.TupleGetItem(func_3674_call(), 2)
call_5043 = relay.TupleGetItem(func_3676_call(), 2)
output = relay.Tuple([call_5040,call_5042,])
output2 = relay.Tuple([call_5041,call_5043,])
func_5054 = relay.Function([], output)
mod['func_5054'] = func_5054
mod = relay.transform.InferType()(mod)
output = func_5054()
func_5055 = relay.Function([], output)
mutated_mod['func_5055'] = func_5055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3276_call = mod.get_global_var('func_3276')
func_3277_call = mutated_mod.get_global_var('func_3277')
call_5059 = func_3276_call()
call_5060 = func_3276_call()
func_4644_call = mod.get_global_var('func_4644')
func_4645_call = mutated_mod.get_global_var('func_4645')
call_5092 = func_4644_call()
call_5093 = func_4644_call()
func_1568_call = mod.get_global_var('func_1568')
func_1571_call = mutated_mod.get_global_var('func_1571')
var_5105 = relay.var("var_5105", dtype = "float32", shape = (320,))#candidate|5105|(320,)|var|float32
call_5104 = relay.TupleGetItem(func_1568_call(relay.reshape(var_5105.astype('float32'), [16, 2, 10])), 0)
call_5106 = relay.TupleGetItem(func_1571_call(relay.reshape(var_5105.astype('float32'), [16, 2, 10])), 0)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_5107 = relay.TupleGetItem(func_2447_call(), 0)
call_5108 = relay.TupleGetItem(func_2449_call(), 0)
func_4644_call = mod.get_global_var('func_4644')
func_4645_call = mutated_mod.get_global_var('func_4645')
call_5126 = func_4644_call()
call_5127 = func_4644_call()
output = relay.Tuple([call_5059,call_5092,call_5104,var_5105,call_5107,call_5126,])
output2 = relay.Tuple([call_5060,call_5093,call_5106,var_5105,call_5108,call_5127,])
func_5133 = relay.Function([var_5105,], output)
mod['func_5133'] = func_5133
mod = relay.transform.InferType()(mod)
var_5134 = relay.var("var_5134", dtype = "float32", shape = (320,))#candidate|5134|(320,)|var|float32
output = func_5133(var_5134)
func_5135 = relay.Function([var_5134], output)
mutated_mod['func_5135'] = func_5135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2840_call = mod.get_global_var('func_2840')
func_2842_call = mutated_mod.get_global_var('func_2842')
call_5145 = func_2840_call()
call_5146 = func_2840_call()
output = relay.Tuple([call_5145,])
output2 = relay.Tuple([call_5146,])
func_5163 = relay.Function([], output)
mod['func_5163'] = func_5163
mod = relay.transform.InferType()(mod)
output = func_5163()
func_5164 = relay.Function([], output)
mutated_mod['func_5164'] = func_5164
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4670_call = mod.get_global_var('func_4670')
func_4671_call = mutated_mod.get_global_var('func_4671')
call_5223 = relay.TupleGetItem(func_4670_call(), 0)
call_5224 = relay.TupleGetItem(func_4671_call(), 0)
output = relay.Tuple([call_5223,])
output2 = relay.Tuple([call_5224,])
func_5235 = relay.Function([], output)
mod['func_5235'] = func_5235
mod = relay.transform.InferType()(mod)
output = func_5235()
func_5236 = relay.Function([], output)
mutated_mod['func_5236'] = func_5236
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3968_call = mod.get_global_var('func_3968')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_5263 = relay.TupleGetItem(func_3968_call(), 1)
call_5264 = relay.TupleGetItem(func_3969_call(), 1)
output = call_5263
output2 = call_5264
func_5274 = relay.Function([], output)
mod['func_5274'] = func_5274
mod = relay.transform.InferType()(mod)
mutated_mod['func_5274'] = func_5274
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5274_call = mutated_mod.get_global_var('func_5274')
call_5275 = func_5274_call()
output = call_5275
func_5276 = relay.Function([], output)
mutated_mod['func_5276'] = func_5276
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_5297 = relay.TupleGetItem(func_2306_call(), 2)
call_5298 = relay.TupleGetItem(func_2308_call(), 2)
output = relay.Tuple([call_5297,])
output2 = relay.Tuple([call_5298,])
func_5309 = relay.Function([], output)
mod['func_5309'] = func_5309
mod = relay.transform.InferType()(mod)
output = func_5309()
func_5310 = relay.Function([], output)
mutated_mod['func_5310'] = func_5310
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2936_call = mod.get_global_var('func_2936')
func_2937_call = mutated_mod.get_global_var('func_2937')
call_5330 = relay.TupleGetItem(func_2936_call(), 2)
call_5331 = relay.TupleGetItem(func_2937_call(), 2)
var_5339 = relay.var("var_5339", dtype = "float64", shape = (165, 10))#candidate|5339|(165, 10)|var|float64
bop_5340 = relay.equal(call_5330.astype('bool'), var_5339.astype('bool')) # shape=(165, 10)
bop_5343 = relay.equal(call_5331.astype('bool'), var_5339.astype('bool')) # shape=(165, 10)
uop_5346 = relay.asin(bop_5340.astype('float64')) # shape=(165, 10)
uop_5348 = relay.asin(bop_5343.astype('float64')) # shape=(165, 10)
uop_5350 = relay.acosh(uop_5346.astype('float64')) # shape=(165, 10)
uop_5352 = relay.acosh(uop_5348.astype('float64')) # shape=(165, 10)
bop_5359 = relay.greater(uop_5346.astype('bool'), relay.reshape(uop_5350.astype('bool'), relay.shape_of(uop_5346))) # shape=(165, 10)
bop_5362 = relay.greater(uop_5348.astype('bool'), relay.reshape(uop_5352.astype('bool'), relay.shape_of(uop_5348))) # shape=(165, 10)
bop_5368 = relay.bitwise_or(uop_5346.astype('int8'), relay.reshape(uop_5350.astype('int8'), relay.shape_of(uop_5346))) # shape=(165, 10)
bop_5371 = relay.bitwise_or(uop_5348.astype('int8'), relay.reshape(uop_5352.astype('int8'), relay.shape_of(uop_5348))) # shape=(165, 10)
var_5372 = relay.var("var_5372", dtype = "int8", shape = (165, 10))#candidate|5372|(165, 10)|var|int8
bop_5373 = relay.maximum(bop_5368.astype('uint8'), relay.reshape(var_5372.astype('uint8'), relay.shape_of(bop_5368))) # shape=(165, 10)
bop_5376 = relay.maximum(bop_5371.astype('uint8'), relay.reshape(var_5372.astype('uint8'), relay.shape_of(bop_5371))) # shape=(165, 10)
func_4045_call = mod.get_global_var('func_4045')
func_4048_call = mutated_mod.get_global_var('func_4048')
var_5383 = relay.var("var_5383", dtype = "float32", shape = (330,))#candidate|5383|(330,)|var|float32
call_5382 = relay.TupleGetItem(func_4045_call(relay.reshape(var_5383.astype('float32'), [330,])), 1)
call_5384 = relay.TupleGetItem(func_4048_call(relay.reshape(var_5383.astype('float32'), [330,])), 1)
bop_5388 = relay.divide(uop_5350.astype('float32'), relay.reshape(var_5339.astype('float32'), relay.shape_of(uop_5350))) # shape=(165, 10)
bop_5391 = relay.divide(uop_5352.astype('float32'), relay.reshape(var_5339.astype('float32'), relay.shape_of(uop_5352))) # shape=(165, 10)
bop_5394 = relay.minimum(uop_5346.astype('uint8'), relay.reshape(bop_5373.astype('uint8'), relay.shape_of(uop_5346))) # shape=(165, 10)
bop_5397 = relay.minimum(uop_5348.astype('uint8'), relay.reshape(bop_5376.astype('uint8'), relay.shape_of(uop_5348))) # shape=(165, 10)
func_2109_call = mod.get_global_var('func_2109')
func_2112_call = mutated_mod.get_global_var('func_2112')
const_5403 = relay.const([[-10,-1,10,-2,-10,7,-2,-1,-1,-3,-7,7,-9,6,2,-10,-7,-3,-7,-2,-3,-6,-7,6,-1,-10,3,4,2,5,4,-8,8,-7,-6,4,6,-6,7,3,-10,6,2,7,-10,10,10,4,-1,3,-10,9,-8,-2,-7,-1,-8,2,9,-4,4,2,5,-3,10,4,-6,-7,7,7,2,1,-7,10,10,4,1,1,-5,-10,2,-3,8,1,9,9,8,-3,-1,-2,10,-9,3,5,-4,-10,-3,-5,5,8,5,-9,-7,9,-7,1,4,-8,-9,4,-8,-2,-9,1,6,-10,-7,4,-3,-4,-4,8,6,-7,-9,-10,5,-9,10,10,9,7,-1,2,5,-4,10,9,8,-2,-8,5,6,-10,3,-2,-10,-10,1,-4,-7,-7,10,4,-1,4,-9,-5,-10,9,4,6,2,4,-8,-10,-7,-4,3,5,-2,-5,8,4,-4,-1,-6,-2,-5,-2,7,9,-10,-10,-9,-9,4,2,6,1,-10,-8,-1,7,-1,8,10,3,-10,-3,8,10,7,-3,9,-3,-6,7,3,5,10,1,3,-2,-7,-2,8,-6,-5,10,-6,-4,5,-2,-3,2,2,-7,-7,8,5,-8,3,10,6,-3,-2,-5,-8,3,3,7,9,10,3,2,7,1,-6,1,8,6,-3,-4,9,-4,-5,10,5,1],[-8,-3,3,-9,4,2,-4,-1,1,-9,5,3,-4,-3,4,6,5,9,5,6,5,-1,-6,7,-8,-6,-10,10,-3,-3,-4,-9,8,6,5,3,10,1,6,1,-4,6,9,8,-10,-1,7,3,9,1,1,-5,7,7,4,9,9,4,3,2,-2,-8,-4,-8,-2,6,-2,6,-7,-5,3,10,9,-9,-9,-8,3,-4,8,-7,-1,-6,4,-2,-7,1,-1,1,9,4,1,9,-7,1,4,-6,5,-6,7,9,7,3,2,-9,6,-1,5,-2,-2,10,5,1,-9,8,-6,-10,-6,10,9,-1,3,3,-1,-2,10,-10,-9,4,9,4,6,10,-8,-9,10,-3,9,4,-1,-4,-10,7,-5,-5,-2,4,6,-9,6,3,-8,-10,-4,-9,-3,-7,7,-10,4,9,-6,-3,8,-9,10,10,-2,-8,-7,1,-10,-10,-4,-9,8,4,4,-8,-7,-5,-1,-8,-7,7,-1,-3,9,-10,-6,1,9,-7,1,5,10,-7,-7,4,-9,-8,-1,5,-6,3,4,-3,-7,7,-6,8,-2,-9,-9,-3,-3,-3,3,4,-1,-1,-1,9,7,-8,8,-10,-2,-1,1,-1,4,9,-2,-9,2,-9,6,-4,5,5,9,-6,-6,4,-1,-2,-9,-4,-7,-5,3,-5,1,2,-3,-9,-4,-7,-10,-8],[6,-5,4,-7,2,-2,-3,4,8,9,-4,-8,-1,-1,-4,1,-10,6,-8,4,2,-7,-5,-8,-6,6,3,-8,-7,-5,-7,-2,7,-2,-8,6,-4,-2,1,-4,6,7,-2,-4,-6,-1,-7,10,8,10,-8,-5,-9,-3,-8,9,7,-3,-3,-9,6,-9,-10,1,-3,-5,7,-5,-6,7,5,7,-2,-10,-5,-1,8,8,-1,7,9,-4,9,-1,6,-8,3,-3,-4,-7,2,4,8,-8,-2,-2,5,7,5,-1,-7,-4,-4,3,-1,-9,-8,5,-6,6,7,10,6,-8,-7,-2,7,5,2,-9,10,-6,-2,6,-5,7,2,6,5,9,-4,-6,-6,4,1,-10,1,9,8,-3,-10,5,-8,-2,-6,6,-9,-2,-5,2,10,-7,8,6,3,-1,8,7,-8,10,7,5,-10,10,3,-3,3,-6,6,-9,9,-4,-5,-4,9,6,-2,1,-7,-7,-4,-7,-10,2,-5,7,-2,-3,-3,9,-3,-7,7,4,10,6,4,4,6,-2,-6,5,1,4,-6,-5,9,3,9,-10,1,-4,1,6,6,10,-6,-2,4,-10,-1,1,-6,-6,2,-3,-3,-5,-7,-4,1,-6,9,-8,4,-5,-3,-4,9,-4,-7,-3,6,-7,-2,-5,-2,-2,9,-6,-7,7,-9,1,-1,10,-1,-10,-2,-9],[7,9,-7,2,2,8,-3,1,5,10,8,6,3,-6,3,1,-1,1,1,5,-3,3,7,-6,8,10,5,5,4,-5,7,8,6,8,-3,3,8,-2,1,-9,5,5,7,-10,-1,1,10,-8,1,6,-8,1,-4,-3,4,-4,-3,-1,-10,5,-5,-1,-6,-3,-2,-2,-7,-8,-10,6,3,3,10,8,4,-3,-8,7,-1,4,1,-6,2,1,-7,6,-8,7,4,10,-9,-8,-5,-4,5,-2,5,-7,3,7,-3,-1,-5,-1,-6,-8,3,-3,-2,7,-4,-6,-8,-3,8,-3,4,-4,-4,9,-5,4,-4,-6,-1,-6,1,-3,-4,10,-6,-7,-8,-3,-5,2,-9,9,3,-10,8,1,-9,-8,1,-6,-2,-1,-3,3,-5,9,-3,-7,-4,3,4,-3,10,-7,1,8,-4,4,-3,5,-3,-4,-3,-5,2,8,3,1,3,4,9,7,-1,1,7,-4,10,-9,8,9,1,8,-1,9,4,7,-3,7,5,-10,5,5,1,-10,5,1,-1,3,-5,-5,4,-4,-8,5,-10,8,-8,-5,-4,-1,6,-8,-10,-8,-3,-6,7,-6,-3,-10,5,-10,-10,3,10,4,8,3,-5,5,-6,-5,-2,-7,1,8,5,10,-3,-9,8,8,-7,4,-4,2,-9,-2,-9,8,6,5,-3,5],[7,-10,-7,-1,-1,-10,1,6,8,-4,7,-8,-7,-4,-9,8,-3,3,7,6,-6,-5,-8,-10,1,5,6,-10,-10,5,5,7,4,-10,1,-10,-2,-7,-8,-9,1,-6,1,1,-2,1,10,3,-6,-4,9,-8,-1,-5,10,-5,-10,-9,6,-2,-6,6,-9,-9,-4,-3,-1,5,-6,10,-4,8,-7,-7,-6,-3,-2,-8,8,7,4,-6,-3,-4,1,4,10,-1,8,10,-7,-6,-2,9,4,3,-7,1,-9,-6,1,-10,-1,-8,1,3,-2,6,-3,-7,10,-3,8,5,-2,-10,1,6,10,-1,3,-8,2,3,8,4,-8,7,2,-3,-4,-7,-10,-9,8,-3,3,-8,-5,2,-10,5,3,6,-5,10,-2,8,-2,4,4,-3,-9,6,1,-1,-4,1,-10,5,-3,-9,-5,-7,-2,9,10,-5,-2,-5,8,-5,4,-2,-10,2,-5,10,-7,-7,10,5,7,-9,2,1,1,6,10,2,6,-7,6,-1,6,2,-5,8,-8,10,-4,-3,6,2,7,10,-1,-4,-6,-10,6,-10,10,4,8,9,4,-9,-9,-6,9,10,3,-7,-3,-1,8,10,3,5,6,5,7,-10,-7,5,-2,-5,10,-4,-8,10,10,5,3,-5,5,-1,-8,-9,7,10,-8,6,7,-3,-7,-3,4,-10],[-10,-6,-9,-7,7,-1,-1,-4,7,1,2,-1,6,5,3,-6,2,-10,-10,5,5,2,8,9,7,-9,1,-7,-5,-6,10,3,-6,3,10,-3,-6,2,-2,7,-10,-10,8,9,-2,4,-7,-3,8,8,8,2,6,-5,-7,-10,3,-2,-7,-4,8,-2,5,-7,-3,-10,6,-4,7,3,-4,-3,-2,7,7,-10,-9,9,8,-6,3,-4,5,-1,5,-8,-8,-5,-7,-2,4,-9,-4,9,-4,-5,-9,6,-4,8,-3,-2,9,-1,-10,1,7,-8,-8,-5,2,-1,-8,4,-8,-5,1,1,-5,-6,-7,2,9,-5,7,-1,-9,-9,-3,-2,7,1,-5,8,7,8,1,8,-9,6,2,-4,-4,-9,-8,-8,-8,-3,-3,4,6,-4,1,-6,-6,6,-2,8,-5,-2,7,8,-9,8,-3,-2,4,6,9,-6,4,4,6,1,10,-4,3,2,-4,-4,5,-8,3,4,5,8,4,5,-5,-1,10,-3,9,7,-8,-2,6,-1,5,-10,7,-2,-1,3,3,-2,-9,-8,-10,2,5,-2,6,-9,-9,1,-8,-9,10,-6,5,-8,10,-5,-10,-2,-2,5,8,-1,4,4,-7,-4,4,1,-5,-4,-4,9,7,-8,-6,9,8,10,1,5,-7,-6,8,-10,6,-8,-4,-4,-8,10,-5,7],[-8,-5,-3,9,-9,10,-2,-10,8,-9,-7,-3,-5,-1,3,-2,-7,4,-7,-9,-9,6,3,10,-6,-4,-3,-9,4,-7,-8,-10,7,-4,-6,-5,-3,-6,8,6,6,8,8,8,-5,-9,-5,7,-10,6,-3,-10,-1,5,-4,-5,2,10,9,10,-2,-7,7,-8,-5,4,5,-8,-2,-8,-3,-9,-6,-5,-8,1,5,6,1,8,8,8,7,4,9,6,-6,-7,5,-9,6,-2,9,-2,3,8,3,7,-4,-1,-2,4,-3,2,2,8,1,-8,9,-1,-1,4,-7,-6,-3,-3,-4,-4,-6,5,-10,-6,5,1,6,-6,5,1,-4,-4,-3,-3,1,-4,-6,7,-1,6,8,2,3,1,8,1,-8,-9,9,-8,1,-1,2,-2,-2,-1,-8,-6,-10,9,6,2,-3,7,-2,4,8,10,-3,2,-1,-8,7,9,9,-5,-8,-1,7,4,-2,5,-4,-9,-7,6,8,-6,8,-2,3,-3,6,1,3,-5,4,6,-4,8,-10,7,8,10,-1,2,2,5,3,-1,1,-5,5,4,-8,9,5,-5,1,9,-10,6,-8,7,-6,10,-4,4,-8,-9,1,6,3,-8,-9,-8,8,8,-4,-9,-5,8,6,9,2,-10,-5,8,-10,-6,-3,-5,-6,-9,9,-1,-7,-4,-2,-6,-10,-7],[5,-4,-4,-3,5,-10,-2,-1,6,-3,-10,-7,9,-9,10,-5,1,-1,2,-4,3,-7,-2,3,-10,-5,5,-7,5,-3,-1,-9,2,9,-5,2,-6,10,9,8,-2,-2,-4,1,-6,-4,5,-1,-5,-2,3,8,-2,9,-2,1,-1,2,5,-7,-8,-7,-6,1,-1,4,8,5,-10,1,3,-9,6,-2,-3,-9,-1,5,7,3,-2,5,-10,-7,-7,4,10,-6,3,7,-10,8,-5,1,2,3,2,1,8,-2,-8,-7,-10,-7,3,-10,2,-4,-2,10,-10,7,9,-2,7,4,-2,6,-3,4,6,-7,-3,-3,6,8,-6,-8,2,6,5,5,-10,-9,3,-9,7,-5,-8,5,6,2,10,-9,-1,4,-6,5,-1,10,-8,-2,6,-5,-8,10,8,5,3,10,10,2,-2,-3,3,-6,-10,-6,-6,1,-5,-7,3,9,-8,2,3,-6,-2,10,10,-4,4,7,3,3,10,-1,2,1,-10,-9,-4,8,4,1,3,4,-7,7,-10,-10,-10,3,10,3,-4,3,-7,-6,-8,-5,-2,8,10,9,-6,10,9,-8,-9,1,3,-5,-6,3,8,6,-5,-9,-10,6,-9,-1,-2,-1,10,-4,7,-7,-10,6,-6,-10,-7,-7,7,-4,-10,5,2,2,-8,-8,8,8,6,8,8,-7],[4,3,-7,-10,-2,10,-10,7,-1,-5,-2,6,8,-2,-9,3,-2,7,-3,-8,-1,-10,-1,3,4,8,2,4,8,-6,4,2,-6,-5,5,6,4,-1,3,-6,1,-2,7,-2,-1,-4,6,1,7,2,3,-10,-4,-9,-4,-5,-8,7,-5,4,7,-3,6,-6,-3,-4,8,1,-6,10,-7,6,-4,-5,-4,-6,-7,-6,6,3,-2,-6,-3,-4,-1,-1,-9,-6,-10,3,9,4,2,-8,-2,10,2,-6,-2,5,7,2,1,-1,10,-4,7,7,-6,8,10,5,3,-8,-4,-10,9,8,-1,-2,5,2,-3,-1,-3,-10,8,-6,9,-8,7,5,-10,-7,-4,-2,6,-8,2,-2,10,-10,9,7,-10,-2,-3,-2,-2,3,-9,-4,10,7,-1,9,-1,10,-4,10,2,-8,1,-9,10,-10,9,-7,-5,-3,5,8,10,8,4,8,9,2,-10,2,5,1,3,-4,-4,5,-8,5,-2,4,8,4,9,-7,9,9,1,-9,-7,5,10,1,6,10,9,-5,-5,6,7,3,3,1,1,10,-2,1,8,4,10,-1,-7,7,7,5,7,1,9,5,1,2,-4,-7,-7,-6,2,-7,6,-10,9,7,5,-7,-2,-6,10,8,1,6,-4,-6,-10,5,8,8,-3,5,-7,-2,-5,-3]], dtype = "int8")#candidate|5403|(9, 260)|const|int8
call_5402 = relay.TupleGetItem(func_2109_call(relay.reshape(const_5403.astype('int8'), [12, 13, 15])), 0)
call_5404 = relay.TupleGetItem(func_2112_call(relay.reshape(const_5403.astype('int8'), [12, 13, 15])), 0)
output = relay.Tuple([bop_5359,call_5382,var_5383,bop_5388,bop_5394,call_5402,const_5403,])
output2 = relay.Tuple([bop_5362,call_5384,var_5383,bop_5391,bop_5397,call_5404,const_5403,])
func_5407 = relay.Function([var_5339,var_5372,var_5383,], output)
mod['func_5407'] = func_5407
mod = relay.transform.InferType()(mod)
var_5408 = relay.var("var_5408", dtype = "float64", shape = (165, 10))#candidate|5408|(165, 10)|var|float64
var_5409 = relay.var("var_5409", dtype = "int8", shape = (165, 10))#candidate|5409|(165, 10)|var|int8
var_5410 = relay.var("var_5410", dtype = "float32", shape = (330,))#candidate|5410|(330,)|var|float32
output = func_5407(var_5408,var_5409,var_5410,)
func_5411 = relay.Function([var_5408,var_5409,var_5410,], output)
mutated_mod['func_5411'] = func_5411
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5274_call = mod.get_global_var('func_5274')
func_5276_call = mutated_mod.get_global_var('func_5276')
call_5487 = func_5274_call()
call_5488 = func_5274_call()
output = relay.Tuple([call_5487,])
output2 = relay.Tuple([call_5488,])
func_5497 = relay.Function([], output)
mod['func_5497'] = func_5497
mod = relay.transform.InferType()(mod)
mutated_mod['func_5497'] = func_5497
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5497_call = mutated_mod.get_global_var('func_5497')
call_5498 = func_5497_call()
output = call_5498
func_5499 = relay.Function([], output)
mutated_mod['func_5499'] = func_5499
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4447_call = mod.get_global_var('func_4447')
func_4449_call = mutated_mod.get_global_var('func_4449')
call_5515 = func_4447_call()
call_5516 = func_4447_call()
output = call_5515
output2 = call_5516
func_5531 = relay.Function([], output)
mod['func_5531'] = func_5531
mod = relay.transform.InferType()(mod)
output = func_5531()
func_5532 = relay.Function([], output)
mutated_mod['func_5532'] = func_5532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3747_call = mod.get_global_var('func_3747')
func_3748_call = mutated_mod.get_global_var('func_3748')
call_5558 = relay.TupleGetItem(func_3747_call(), 0)
call_5559 = relay.TupleGetItem(func_3748_call(), 0)
output = call_5558
output2 = call_5559
func_5565 = relay.Function([], output)
mod['func_5565'] = func_5565
mod = relay.transform.InferType()(mod)
mutated_mod['func_5565'] = func_5565
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5565_call = mutated_mod.get_global_var('func_5565')
call_5566 = func_5565_call()
output = call_5566
func_5567 = relay.Function([], output)
mutated_mod['func_5567'] = func_5567
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4087_call = mod.get_global_var('func_4087')
func_4088_call = mutated_mod.get_global_var('func_4088')
call_5592 = relay.TupleGetItem(func_4087_call(), 0)
call_5593 = relay.TupleGetItem(func_4088_call(), 0)
func_3968_call = mod.get_global_var('func_3968')
func_3969_call = mutated_mod.get_global_var('func_3969')
call_5596 = relay.TupleGetItem(func_3968_call(), 1)
call_5597 = relay.TupleGetItem(func_3969_call(), 1)
func_5133_call = mod.get_global_var('func_5133')
func_5135_call = mutated_mod.get_global_var('func_5135')
var_5620 = relay.var("var_5620", dtype = "float32", shape = (320,))#candidate|5620|(320,)|var|float32
call_5619 = relay.TupleGetItem(func_5133_call(relay.reshape(var_5620.astype('float32'), [320,])), 3)
call_5621 = relay.TupleGetItem(func_5135_call(relay.reshape(var_5620.astype('float32'), [320,])), 3)
func_4447_call = mod.get_global_var('func_4447')
func_4449_call = mutated_mod.get_global_var('func_4449')
call_5634 = func_4447_call()
call_5635 = func_4447_call()
output = relay.Tuple([call_5592,call_5596,call_5619,var_5620,call_5634,])
output2 = relay.Tuple([call_5593,call_5597,call_5621,var_5620,call_5635,])
func_5639 = relay.Function([var_5620,], output)
mod['func_5639'] = func_5639
mod = relay.transform.InferType()(mod)
mutated_mod['func_5639'] = func_5639
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5640 = relay.var("var_5640", dtype = "float32", shape = (320,))#candidate|5640|(320,)|var|float32
func_5639_call = mutated_mod.get_global_var('func_5639')
call_5641 = func_5639_call(var_5640)
output = call_5641
func_5642 = relay.Function([var_5640], output)
mutated_mod['func_5642'] = func_5642
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5054_call = mod.get_global_var('func_5054')
func_5055_call = mutated_mod.get_global_var('func_5055')
call_5656 = relay.TupleGetItem(func_5054_call(), 0)
call_5657 = relay.TupleGetItem(func_5055_call(), 0)
uop_5664 = relay.tan(call_5656.astype('float32')) # shape=(13, 8, 6)
uop_5666 = relay.tan(call_5657.astype('float32')) # shape=(13, 8, 6)
func_3221_call = mod.get_global_var('func_3221')
func_3222_call = mutated_mod.get_global_var('func_3222')
call_5674 = relay.TupleGetItem(func_3221_call(), 0)
call_5675 = relay.TupleGetItem(func_3222_call(), 0)
func_3010_call = mod.get_global_var('func_3010')
func_3012_call = mutated_mod.get_global_var('func_3012')
call_5690 = relay.TupleGetItem(func_3010_call(), 0)
call_5691 = relay.TupleGetItem(func_3012_call(), 0)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_5702 = func_2345_call()
call_5703 = func_2345_call()
output = relay.Tuple([uop_5664,call_5674,call_5690,call_5702,])
output2 = relay.Tuple([uop_5666,call_5675,call_5691,call_5703,])
func_5713 = relay.Function([], output)
mod['func_5713'] = func_5713
mod = relay.transform.InferType()(mod)
output = func_5713()
func_5714 = relay.Function([], output)
mutated_mod['func_5714'] = func_5714
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4300_call = mod.get_global_var('func_4300')
func_4301_call = mutated_mod.get_global_var('func_4301')
call_5757 = relay.TupleGetItem(func_4300_call(), 0)
call_5758 = relay.TupleGetItem(func_4301_call(), 0)
var_5787 = relay.var("var_5787", dtype = "uint32", shape = (165, 7))#candidate|5787|(165, 7)|var|uint32
bop_5788 = relay.logical_and(call_5757.astype('bool'), var_5787.astype('bool')) # shape=(165, 7)
bop_5791 = relay.logical_and(call_5758.astype('bool'), var_5787.astype('bool')) # shape=(165, 7)
var_5799 = relay.var("var_5799", dtype = "uint32", shape = (165, 10))#candidate|5799|(165, 10)|var|uint32
bop_5800 = relay.not_equal(call_5757.astype('bool'), var_5799.astype('bool')) # shape=(165, 10)
bop_5803 = relay.not_equal(call_5758.astype('bool'), var_5799.astype('bool')) # shape=(165, 10)
output = relay.Tuple([bop_5788,bop_5800,])
output2 = relay.Tuple([bop_5791,bop_5803,])
func_5805 = relay.Function([var_5787,var_5799,], output)
mod['func_5805'] = func_5805
mod = relay.transform.InferType()(mod)
mutated_mod['func_5805'] = func_5805
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5805_call = mutated_mod.get_global_var('func_5805')
var_5807 = relay.var("var_5807", dtype = "uint32", shape = (165, 7))#candidate|5807|(165, 7)|var|uint32
var_5808 = relay.var("var_5808", dtype = "uint32", shape = (165, 10))#candidate|5808|(165, 10)|var|uint32
call_5806 = func_5805_call(var_5807,var_5808,)
output = call_5806
func_5809 = relay.Function([var_5807,var_5808,], output)
mutated_mod['func_5809'] = func_5809
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3259_call = mod.get_global_var('func_3259')
func_3261_call = mutated_mod.get_global_var('func_3261')
call_5831 = relay.TupleGetItem(func_3259_call(), 1)
call_5832 = relay.TupleGetItem(func_3261_call(), 1)
uop_5855 = relay.log2(call_5831.astype('float32')) # shape=(1, 11, 15)
uop_5857 = relay.log2(call_5832.astype('float32')) # shape=(1, 11, 15)
bop_5865 = relay.right_shift(call_5831.astype('uint16'), relay.reshape(uop_5855.astype('uint16'), relay.shape_of(call_5831))) # shape=(1, 11, 15)
bop_5868 = relay.right_shift(call_5832.astype('uint16'), relay.reshape(uop_5857.astype('uint16'), relay.shape_of(call_5832))) # shape=(1, 11, 15)
output = bop_5865
output2 = bop_5868
func_5874 = relay.Function([], output)
mod['func_5874'] = func_5874
mod = relay.transform.InferType()(mod)
output = func_5874()
func_5875 = relay.Function([], output)
mutated_mod['func_5875'] = func_5875
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5874_call = mod.get_global_var('func_5874')
func_5875_call = mutated_mod.get_global_var('func_5875')
call_5899 = func_5874_call()
call_5900 = func_5874_call()
func_3221_call = mod.get_global_var('func_3221')
func_3222_call = mutated_mod.get_global_var('func_3222')
call_5909 = relay.TupleGetItem(func_3221_call(), 0)
call_5910 = relay.TupleGetItem(func_3222_call(), 0)
output = relay.Tuple([call_5899,call_5909,])
output2 = relay.Tuple([call_5900,call_5910,])
func_5913 = relay.Function([], output)
mod['func_5913'] = func_5913
mod = relay.transform.InferType()(mod)
output = func_5913()
func_5914 = relay.Function([], output)
mutated_mod['func_5914'] = func_5914
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3880_call = mod.get_global_var('func_3880')
func_3881_call = mutated_mod.get_global_var('func_3881')
call_5919 = relay.TupleGetItem(func_3880_call(), 0)
call_5920 = relay.TupleGetItem(func_3881_call(), 0)
output = relay.Tuple([call_5919,])
output2 = relay.Tuple([call_5920,])
func_5929 = relay.Function([], output)
mod['func_5929'] = func_5929
mod = relay.transform.InferType()(mod)
mutated_mod['func_5929'] = func_5929
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5929_call = mutated_mod.get_global_var('func_5929')
call_5930 = func_5929_call()
output = call_5930
func_5931 = relay.Function([], output)
mutated_mod['func_5931'] = func_5931
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3508_call = mod.get_global_var('func_3508')
func_3510_call = mutated_mod.get_global_var('func_3510')
call_5940 = func_3508_call()
call_5941 = func_3508_call()
output = relay.Tuple([call_5940,])
output2 = relay.Tuple([call_5941,])
func_5974 = relay.Function([], output)
mod['func_5974'] = func_5974
mod = relay.transform.InferType()(mod)
mutated_mod['func_5974'] = func_5974
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5974_call = mutated_mod.get_global_var('func_5974')
call_5975 = func_5974_call()
output = call_5975
func_5976 = relay.Function([], output)
mutated_mod['func_5976'] = func_5976
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5497_call = mod.get_global_var('func_5497')
func_5499_call = mutated_mod.get_global_var('func_5499')
call_6028 = relay.TupleGetItem(func_5497_call(), 0)
call_6029 = relay.TupleGetItem(func_5499_call(), 0)
output = call_6028
output2 = call_6029
func_6030 = relay.Function([], output)
mod['func_6030'] = func_6030
mod = relay.transform.InferType()(mod)
mutated_mod['func_6030'] = func_6030
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6030_call = mutated_mod.get_global_var('func_6030')
call_6031 = func_6030_call()
output = call_6031
func_6032 = relay.Function([], output)
mutated_mod['func_6032'] = func_6032
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_6055 = func_2269_call()
call_6056 = func_2269_call()
func_4892_call = mod.get_global_var('func_4892')
func_4893_call = mutated_mod.get_global_var('func_4893')
call_6062 = func_4892_call()
call_6063 = func_4892_call()
output = relay.Tuple([call_6055,call_6062,])
output2 = relay.Tuple([call_6056,call_6063,])
func_6068 = relay.Function([], output)
mod['func_6068'] = func_6068
mod = relay.transform.InferType()(mod)
mutated_mod['func_6068'] = func_6068
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6068_call = mutated_mod.get_global_var('func_6068')
call_6069 = func_6068_call()
output = call_6069
func_6070 = relay.Function([], output)
mutated_mod['func_6070'] = func_6070
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5565_call = mod.get_global_var('func_5565')
func_5567_call = mutated_mod.get_global_var('func_5567')
call_6119 = func_5565_call()
call_6120 = func_5565_call()
output = relay.Tuple([call_6119,])
output2 = relay.Tuple([call_6120,])
func_6123 = relay.Function([], output)
mod['func_6123'] = func_6123
mod = relay.transform.InferType()(mod)
mutated_mod['func_6123'] = func_6123
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6123_call = mutated_mod.get_global_var('func_6123')
call_6124 = func_6123_call()
output = call_6124
func_6125 = relay.Function([], output)
mutated_mod['func_6125'] = func_6125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5497_call = mod.get_global_var('func_5497')
func_5499_call = mutated_mod.get_global_var('func_5499')
call_6153 = relay.TupleGetItem(func_5497_call(), 0)
call_6154 = relay.TupleGetItem(func_5499_call(), 0)
var_6164 = relay.var("var_6164", dtype = "float64", shape = (13, 8, 6))#candidate|6164|(13, 8, 6)|var|float64
bop_6165 = relay.greater(call_6153.astype('bool'), relay.reshape(var_6164.astype('bool'), relay.shape_of(call_6153))) # shape=(13, 8, 6)
bop_6168 = relay.greater(call_6154.astype('bool'), relay.reshape(var_6164.astype('bool'), relay.shape_of(call_6154))) # shape=(13, 8, 6)
output = bop_6165
output2 = bop_6168
func_6192 = relay.Function([var_6164,], output)
mod['func_6192'] = func_6192
mod = relay.transform.InferType()(mod)
mutated_mod['func_6192'] = func_6192
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6193 = relay.var("var_6193", dtype = "float64", shape = (13, 8, 6))#candidate|6193|(13, 8, 6)|var|float64
func_6192_call = mutated_mod.get_global_var('func_6192')
call_6194 = func_6192_call(var_6193)
output = call_6194
func_6195 = relay.Function([var_6193], output)
mutated_mod['func_6195'] = func_6195
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6213 = relay.var("var_6213", dtype = "uint32", shape = (3, 12, 11))#candidate|6213|(3, 12, 11)|var|uint32
const_6214 = relay.const([[[3,3,-6,-7,8,-10,-2,-2,7,5,2],[-8,-2,-2,-10,10,-2,7,5,-7,-5,-8],[1,-5,3,-4,-3,7,-5,-10,1,-8,-4],[-1,8,-2,8,-3,7,5,9,-4,-10,-8],[9,-9,1,-3,4,-3,-3,-9,-4,-8,-10],[10,2,4,6,8,1,6,-9,-6,-3,5],[-6,5,-7,-1,-7,8,7,-5,5,6,5],[9,-1,4,6,1,6,-1,10,3,5,9],[5,-2,-7,6,2,-3,10,8,1,-9,-5],[1,4,-3,7,-10,-5,-1,-3,-4,2,-10],[7,2,9,-6,-4,2,-2,9,-8,-10,-1],[5,9,1,-7,8,2,3,-1,-8,5,-5]],[[4,6,2,4,8,1,9,9,-6,-1,6],[10,2,-2,-7,-5,10,-4,7,10,-7,1],[5,-3,8,9,-9,-1,8,-9,-10,-5,-6],[-7,-7,6,-7,2,-10,1,1,4,-1,-5],[10,-2,-8,3,8,-7,-4,-8,4,3,7],[6,5,9,6,-3,-10,9,3,-4,-9,-7],[7,-5,7,7,-3,-3,-2,4,-8,6,-1],[-6,6,-9,-2,-9,-4,-10,-4,7,1,-8],[2,-2,-7,8,5,6,5,-6,2,8,4],[6,-6,-7,-1,-1,-7,5,3,-3,1,-10],[5,-5,-5,-10,2,9,7,4,-3,2,8],[-5,3,9,-9,10,9,8,8,-3,6,-8]],[[-1,2,7,-5,3,8,-10,-10,8,-1,-7],[10,-1,-6,8,1,-8,5,-8,4,10,9],[-9,-9,1,5,-2,-3,-10,7,5,-9,-10],[-2,-5,-2,-8,-7,2,-5,7,-10,7,-10],[-4,-6,7,-6,8,-7,-4,-7,2,9,-9],[6,4,-3,-9,7,1,2,7,-7,6,7],[5,-2,8,-10,6,3,1,-3,8,-4,3],[9,6,6,-1,3,7,-4,7,-1,1,-6],[-9,-5,-9,8,-6,2,4,-5,-1,3,-4],[-4,-3,5,-7,10,-10,-5,-3,10,1,-1],[-2,-9,5,-4,1,9,10,-9,6,5,4],[6,-4,-9,10,9,6,-8,10,-7,7,4]]], dtype = "uint32")#candidate|6214|(3, 12, 11)|const|uint32
bop_6215 = relay.logical_xor(var_6213.astype('uint32'), relay.reshape(const_6214.astype('uint32'), relay.shape_of(var_6213))) # shape=(3, 12, 11)
output = relay.Tuple([bop_6215,])
output2 = relay.Tuple([bop_6215,])
func_6224 = relay.Function([var_6213,], output)
mod['func_6224'] = func_6224
mod = relay.transform.InferType()(mod)
var_6225 = relay.var("var_6225", dtype = "uint32", shape = (3, 12, 11))#candidate|6225|(3, 12, 11)|var|uint32
output = func_6224(var_6225)
func_6226 = relay.Function([var_6225], output)
mutated_mod['func_6226'] = func_6226
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mod.get_global_var('func_4878')
func_4880_call = mutated_mod.get_global_var('func_4880')
call_6234 = func_4878_call()
call_6235 = func_4878_call()
func_4583_call = mod.get_global_var('func_4583')
func_4585_call = mutated_mod.get_global_var('func_4585')
var_6253 = relay.var("var_6253", dtype = "float64", shape = (165,))#candidate|6253|(165,)|var|float64
call_6252 = relay.TupleGetItem(func_4583_call(relay.reshape(var_6253.astype('float64'), [165,])), 2)
call_6254 = relay.TupleGetItem(func_4585_call(relay.reshape(var_6253.astype('float64'), [165,])), 2)
output = relay.Tuple([call_6234,call_6252,var_6253,])
output2 = relay.Tuple([call_6235,call_6254,var_6253,])
func_6261 = relay.Function([var_6253,], output)
mod['func_6261'] = func_6261
mod = relay.transform.InferType()(mod)
mutated_mod['func_6261'] = func_6261
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6262 = relay.var("var_6262", dtype = "float64", shape = (165,))#candidate|6262|(165,)|var|float64
func_6261_call = mutated_mod.get_global_var('func_6261')
call_6263 = func_6261_call(var_6262)
output = call_6263
func_6264 = relay.Function([var_6262], output)
mutated_mod['func_6264'] = func_6264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5163_call = mod.get_global_var('func_5163')
func_5164_call = mutated_mod.get_global_var('func_5164')
call_6290 = relay.TupleGetItem(func_5163_call(), 0)
call_6291 = relay.TupleGetItem(func_5164_call(), 0)
var_6295 = relay.var("var_6295", dtype = "bool", shape = (13, 8, 6))#candidate|6295|(13, 8, 6)|var|bool
bop_6296 = relay.bitwise_or(call_6290.astype('uint8'), relay.reshape(var_6295.astype('uint8'), relay.shape_of(call_6290))) # shape=(13, 8, 6)
bop_6299 = relay.bitwise_or(call_6291.astype('uint8'), relay.reshape(var_6295.astype('uint8'), relay.shape_of(call_6291))) # shape=(13, 8, 6)
func_6123_call = mod.get_global_var('func_6123')
func_6125_call = mutated_mod.get_global_var('func_6125')
call_6309 = relay.TupleGetItem(func_6123_call(), 0)
call_6310 = relay.TupleGetItem(func_6125_call(), 0)
output = relay.Tuple([bop_6296,call_6309,])
output2 = relay.Tuple([bop_6299,call_6310,])
func_6325 = relay.Function([var_6295,], output)
mod['func_6325'] = func_6325
mod = relay.transform.InferType()(mod)
var_6326 = relay.var("var_6326", dtype = "bool", shape = (13, 8, 6))#candidate|6326|(13, 8, 6)|var|bool
output = func_6325(var_6326)
func_6327 = relay.Function([var_6326], output)
mutated_mod['func_6327'] = func_6327
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_6362 = func_2626_call()
call_6363 = func_2626_call()
output = relay.Tuple([call_6362,])
output2 = relay.Tuple([call_6363,])
func_6364 = relay.Function([], output)
mod['func_6364'] = func_6364
mod = relay.transform.InferType()(mod)
output = func_6364()
func_6365 = relay.Function([], output)
mutated_mod['func_6365'] = func_6365
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6377 = relay.var("var_6377", dtype = "float32", shape = (14, 5, 11))#candidate|6377|(14, 5, 11)|var|float32
var_6378 = relay.var("var_6378", dtype = "float32", shape = (14, 5, 11))#candidate|6378|(14, 5, 11)|var|float32
bop_6379 = relay.greater(var_6377.astype('bool'), relay.reshape(var_6378.astype('bool'), relay.shape_of(var_6377))) # shape=(14, 5, 11)
func_4583_call = mod.get_global_var('func_4583')
func_4585_call = mutated_mod.get_global_var('func_4585')
const_6387 = relay.const([0.230991,-6.207520,-8.031948,7.740182,-2.951677,5.794759,-8.314556,-4.354349,-2.163131,6.534191,-5.023419,1.167048,-6.783326,0.320831,7.180690,5.814170,5.074386,2.557126,-2.400084,-8.566663,8.451432,8.005248,-9.960676,2.503680,-9.136643,-2.959376,3.547463,-0.703775,-4.359450,8.931555,-1.968686,-2.347107,-1.568112,-2.449635,4.219081,-5.704701,-3.538095,-5.779348,0.756671,3.994274,-8.341177,-2.279284,3.909474,8.124244,-9.384347,-6.236615,1.275525,-9.488402,-5.882888,3.672156,-8.370540,-0.950578,0.829414,1.503385,-1.907560,-3.744069,-4.638918,-2.591359,1.677452,8.722822,-1.330258,2.903236,8.599917,-6.025111,-1.242737,9.548125,2.850896,6.109251,-3.996236,0.811055,-0.821702,-7.941183,-6.579434,-4.460648,-6.567049,-7.737211,5.497577,2.363932,4.413687,9.210874,7.744182,-8.712350,-8.226256,7.349087,-6.062393,-2.926088,-0.336953,7.373451,3.687003,4.526748,-1.988702,5.477034,8.121183,-6.361364,-9.960220,-5.417192,-3.569802,-9.630530,-1.459799,1.533607,-5.951200,8.262322,-6.053246,0.664738,2.617210,-8.861705,-4.827229,0.001947,-1.951160,5.814617,4.748465,-3.677704,-6.874634,2.424756,-0.076692,-6.225676,-4.084841,4.937282,-6.048737,-2.710214,9.002284,7.628901,-6.009415,0.322516,-8.539493,6.611307,-2.667778,6.529383,-8.241782,-6.914165,-0.605595,2.850930,-9.122233,1.953265,-1.350642,-2.336397,-6.695307,9.055406,9.160683,7.067950,3.596570,0.397378,-5.711912,5.768055,2.075369,5.276405,-6.056813,-9.689033,-2.671691,4.892178,-6.103464,-2.583635,-6.964932,7.765540,2.737185,6.785278,-0.457486,-3.810845,-7.304531,8.599274,5.790046,7.167575,-4.914619,1.004314,2.130207], dtype = "float64")#candidate|6387|(165,)|const|float64
call_6386 = relay.TupleGetItem(func_4583_call(relay.reshape(const_6387.astype('float64'), [165,])), 0)
call_6388 = relay.TupleGetItem(func_4585_call(relay.reshape(const_6387.astype('float64'), [165,])), 0)
var_6390 = relay.var("var_6390", dtype = "float32", shape = (14, 5, 11))#candidate|6390|(14, 5, 11)|var|float32
bop_6391 = relay.bitwise_xor(var_6378.astype('uint32'), relay.reshape(var_6390.astype('uint32'), relay.shape_of(var_6378))) # shape=(14, 5, 11)
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_6405 = func_2626_call()
call_6406 = func_2626_call()
output = relay.Tuple([bop_6379,call_6386,const_6387,bop_6391,call_6405,])
output2 = relay.Tuple([bop_6379,call_6388,const_6387,bop_6391,call_6406,])
func_6408 = relay.Function([var_6377,var_6378,var_6390,], output)
mod['func_6408'] = func_6408
mod = relay.transform.InferType()(mod)
mutated_mod['func_6408'] = func_6408
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6408_call = mutated_mod.get_global_var('func_6408')
var_6410 = relay.var("var_6410", dtype = "float32", shape = (14, 5, 11))#candidate|6410|(14, 5, 11)|var|float32
var_6411 = relay.var("var_6411", dtype = "float32", shape = (14, 5, 11))#candidate|6411|(14, 5, 11)|var|float32
var_6412 = relay.var("var_6412", dtype = "float32", shape = (14, 5, 11))#candidate|6412|(14, 5, 11)|var|float32
call_6409 = func_6408_call(var_6410,var_6411,var_6412,)
output = call_6409
func_6413 = relay.Function([var_6410,var_6411,var_6412,], output)
mutated_mod['func_6413'] = func_6413
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2345_call = mod.get_global_var('func_2345')
func_2347_call = mutated_mod.get_global_var('func_2347')
call_6420 = func_2345_call()
call_6421 = func_2345_call()
output = call_6420
output2 = call_6421
func_6428 = relay.Function([], output)
mod['func_6428'] = func_6428
mod = relay.transform.InferType()(mod)
output = func_6428()
func_6429 = relay.Function([], output)
mutated_mod['func_6429'] = func_6429
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5929_call = mod.get_global_var('func_5929')
func_5931_call = mutated_mod.get_global_var('func_5931')
call_6441 = relay.TupleGetItem(func_5929_call(), 0)
call_6442 = relay.TupleGetItem(func_5931_call(), 0)
output = relay.Tuple([call_6441,])
output2 = relay.Tuple([call_6442,])
func_6448 = relay.Function([], output)
mod['func_6448'] = func_6448
mod = relay.transform.InferType()(mod)
mutated_mod['func_6448'] = func_6448
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6448_call = mutated_mod.get_global_var('func_6448')
call_6449 = func_6448_call()
output = call_6449
func_6450 = relay.Function([], output)
mutated_mod['func_6450'] = func_6450
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5032_call = mod.get_global_var('func_5032')
func_5033_call = mutated_mod.get_global_var('func_5033')
call_6471 = relay.TupleGetItem(func_5032_call(), 0)
call_6472 = relay.TupleGetItem(func_5033_call(), 0)
func_5407_call = mod.get_global_var('func_5407')
func_5411_call = mutated_mod.get_global_var('func_5411')
const_6476 = relay.const([-4.871008,2.618965,0.665241,1.347780,7.617356,-1.490389,-5.613617,-0.837449,-4.360779,-6.957620,9.110238,-3.819386,4.579525,1.769624,-8.843857,3.115252,5.965929,3.255368,-3.918952,-7.684838,-0.648700,-5.596247,1.892546,-6.195226,1.870301,-4.138800,-5.102761,-4.898899,0.566096,-8.363803,-0.120826,3.003296,7.190529,-2.945554,8.981273,8.331227,0.184002,2.453103,-8.487698,-6.349398,-3.453236,-5.641585,3.060249,-3.589933,-1.016610,-1.991406,-6.883709,5.643282,7.962797,5.426025,-5.520633,-9.677074,-4.532666,-6.761871,-9.707812,4.599638,3.986333,2.965422,-9.356564,-1.419854,-4.570938,1.590795,-5.843565,-9.325929,-0.123362,-1.147380,-6.061089,-5.816453,-9.466163,-0.435734,2.145234,8.661565,3.738354,-2.493280,-5.856150,2.686948,7.094013,-1.766909,4.788730,4.648522,-5.170668,-0.935336,9.341659,-1.553848,5.821297,-3.625347,-7.489863,-7.826778,-8.182909,3.012077,3.292638,8.666531,3.875318,-5.714648,2.287005,-5.506678,7.426700,-9.027151,9.035325,1.738957,2.776549,8.902505,3.302318,-2.913572,-1.772389,4.296013,-3.211286,8.960525,-6.141146,-7.844513,3.378869,7.533486,3.380719,8.407226,-0.393377,4.401009,-5.168631,8.810438,-4.825063,2.990057,2.549937,-5.169874,-1.159151,9.895631,9.483598,-8.500631,-3.998794,-6.643104,9.109737,-9.969301,-4.237671,-6.628572,9.245655,-8.414919,9.165836,-8.846782,-8.324146,-7.950347,-0.363104,1.012476,0.753304,1.025094,-5.041174,8.889632,3.956327,4.241170,0.915956,1.884850,-4.084200,7.008948,0.267347,-5.437266,-5.734618,-4.283422,2.204222,0.567600,1.249802,-8.518114,-6.598895,-6.219960,-8.924022,7.701517,1.728075,-8.418195,-3.771102,3.214254,0.172972,-2.854249,-0.698153,3.345558,-0.825986,-8.876164,4.418502,7.135439,-4.499133,4.163656,-6.608997,-8.452642,7.605658,9.138329,-8.455045,-8.472084,-7.532226,-2.869002,5.354267,-8.681071,-2.579825,-6.919593,-3.741754,4.518877,0.210584,8.496833,1.077292,4.352059,-6.217021,-5.918584,1.466458,-9.093897,1.148782,-1.045663,-4.079515,5.903204,5.252135,-5.051449,7.130506,-6.761612,9.635518,-8.979999,6.992168,8.723770,-8.825458,0.284489,-0.999070,-0.753235,-1.914398,1.166061,7.976635,9.423115,-3.371181,-2.546802,2.104063,-2.235363,-8.053942,3.818368,-0.390814,6.400317,-6.408398,-2.689697,4.590020,8.640933,0.760805,-4.467720,9.482473,5.288161,-6.788317,4.646432,-4.391199,-8.485673,7.443048,-2.267713,-2.943873,-1.525125,-0.035947,-2.799677,7.333802,7.388732,-4.071078,-3.107746,9.390867,1.033987,3.906830,4.376482,-9.531143,0.856660,6.010982,6.798098,3.657370,7.027747,-1.848091,9.221517,7.744061,-6.136493,1.309335,9.696836,-0.566153,-4.407554,9.346824,3.419649,4.681927,7.307012,-5.211496,-5.311729,7.383181,-0.443737,8.330268,8.539316,-0.778273,-2.415211,-1.695131,8.999476,-7.990321,9.216861,3.527798,1.635066,3.343686,-4.782609,3.782424,0.705173,-8.838498,-7.470809,-5.180778,-9.666622,3.135491,-3.502535,-2.165074,-2.551516,0.117069,-5.943608,-2.560504,7.684530,9.857830,-7.730617,-1.626409,6.636163,9.852161,2.881693,9.002340,-5.498047,-2.080071,2.124946,-3.722432,-9.262304,9.325962,5.773690,-0.879436,7.350310,-2.796565,5.692966,9.015376,9.685645,-8.178992,-5.485419,-1.345515,6.444770,6.828791,4.034818,-3.940131,9.142248,-2.102239,-4.203321,1.315008,-0.906021,7.836928,3.455207,-7.231626,1.408542,2.828859,2.746274,-9.979272,-4.440656,2.540610,-4.613949,3.267812,1.209059,-9.295657,3.240121,8.234025,2.415205,4.038723,1.586585,0.470473,-0.384456,8.389045,-2.645039,-0.801412,2.773016,-7.168416,-0.354481,-9.285265,7.934916,0.708928,-8.648923,7.751422,4.095768,-6.401146,-0.169072,1.139474,-2.227267,-8.829158,-8.960454,-3.983364,-6.964499,8.819077,-6.329826,-2.503421,-6.612929,-8.087448,-8.535764,-8.005056,-8.956365,8.682710,-6.702337,-9.595870,4.381803,1.278705,5.348560,1.529424,-7.414807,-7.370931,-2.113527,0.595053,-1.222188,-8.553872,4.113060,-5.975467,8.885031,-0.800998,-0.060337,3.004056,-8.984388,-5.519965,-2.812944,2.913445,-1.222570,4.122673,1.188817,-9.599704,9.906854,-7.418808,0.091583,-8.649769,-7.042357,2.840562,7.869619,-0.387049,5.406354,-5.091151,6.992297,8.987033,3.973273,-5.339779,5.374553,0.420791,2.034737,0.203835,-6.306429,-7.267602,-4.930962,-3.554618,-1.829285,4.132470,2.873322,0.762035,-9.281236,-4.522275,3.727716,-2.290552,1.856899,9.369847,2.436886,-4.159628,6.344681,7.892528,-1.728349,4.173994,-4.397404,-6.240139,-1.622340,-3.666757,-0.648425,6.976452,-4.848544,-0.321898,7.666827,-2.905377,-6.418700,-5.894607,7.098880,-8.544171,9.373102,-7.797507,-6.514849,7.468396,-3.717800,4.756982,5.963120,3.245830,-9.499095,1.988896,0.731552,7.080602,-5.908174,4.429316,9.208519,9.658025,-8.868599,-7.327914,4.808843,7.767983,-7.986909,-0.284867,7.263793,9.450397,-1.518566,6.889419,-5.447205,3.689179,9.686469,1.586677,-8.321985,2.718819,-0.464364,-6.692193,-6.153467,-3.669861,-4.651995,-3.772850,-3.333414,-9.435880,-9.828282,-6.065856,-5.635879,-7.196886,5.713712,-4.576847,-5.426619,-2.166217,6.016668,-1.245021,-3.086236,-7.022819,-0.789712,5.320881,-9.603942,7.066831,6.365674,-5.710734,1.731374,1.897585,-2.037911,1.142028,-9.119249,3.295482,-0.075500,4.922967,-6.296750,9.504791,-7.784428,9.008650,-6.368838,1.179210,0.744840,8.541981,-1.238029,4.574966,-4.536527,-7.949045,-3.973519,3.733171,1.279388,1.137647,-9.987116,-0.039955,8.742716,-6.516647,-4.937434,-9.601815,5.501492,9.172196,-7.097708,-6.371526,9.805900,0.501213,-5.343125,-9.955543,9.094296,-5.223594,-2.607621,-3.569120,-7.084116,-9.871295,4.707501,-5.972099,-9.199186,-6.552120,-4.241018,-2.881246,3.347942,4.604058,-3.309491,-8.610117,-3.769462,6.520098,0.022469,-4.672809,-8.079285,8.205906,5.450646,-1.082567,6.087247,4.169271,3.949367,8.541240,2.502363,2.542440,-7.398585,-5.044352,-4.089153,7.815548,4.517155,2.477673,-4.123750,6.571355,8.982651,-7.814761,6.626061,-0.855927,6.514585,8.016015,9.920736,-3.632389,-6.600397,-9.533034,-6.574135,2.760646,9.355709,-8.101674,0.609128,-1.448412,1.733722,2.114766,-5.027257,-0.064119,8.996680,-4.372247,-0.758320,-1.013894,4.264899,4.605030,-9.414307,-1.239585,8.226750,-4.352167,-6.738842,5.103861,3.176878,-2.245046,9.384841,0.068634,7.077896,4.160761,-5.746616,-4.118959,-8.250595,9.974385,-1.281963,-5.802991,-5.913847,-4.603236,4.260696,2.138745,-3.681922,-5.445045,-1.941604,-4.831905,-9.733287,5.066089,9.523985,-8.487913,1.620683,2.168379,2.826468,9.946213,-4.307394,7.230599,-5.555663,-4.918353,-8.837298,-8.937372,-0.622044,-4.646600,-0.366194,6.818816,-3.034701,5.926774,1.924384,6.329638,-7.130978,1.234326,0.892673,1.247699,3.531526,-0.173610,-5.124703,-5.714924,-1.420660,7.560703,-4.711583,-8.378092,4.603353,-3.723683,-5.171901,1.689187,-1.820587,4.369090,9.938100,9.884699,-0.099403,2.698075,-9.599208,6.202884,-2.599591,3.260475,7.285988,6.173898,8.995885,-1.647014,-7.546934,3.681405,-8.935833,-6.019775,4.955264,-2.725938,3.618067,-5.200382,1.118102,-9.032147,7.914522,-8.019419,-9.793338,1.640080,3.645747,9.955284,1.424382,-0.052695,-5.128768,-7.313309,7.808911,8.814567,-2.952504,-9.768364,-3.085505,0.653004,2.266500,-9.091586,-9.631508,1.729587,5.515071,1.318922,1.148018,-1.099665,-7.687681,7.558621,6.631629,-8.689715,2.986259,3.527694,-3.977840,6.124160,-1.405538,4.340083,2.437750,-1.493508,4.477703,3.816052,-9.160566,-4.510710,-8.507832,-9.089482,2.239795,6.856746,0.416446,-3.991539,-1.404675,2.640433,8.605289,5.112436,-2.319792,-0.656843,6.512649,-7.889612,8.557595,-9.304395,4.941907,-6.212416,8.531697,0.762388,-3.784373,-3.743658,0.565309,-9.072969,-7.051862,1.070106,2.961778,2.581418,1.172321,-6.121968,-3.090806,6.206138,1.536089,-0.346201,9.560651,-4.605691,9.037026,-1.953552,-3.733840,-9.817543,-4.672723,2.819899,6.093572,-1.825196,8.903451,7.753279,2.812329,1.669117,-9.876748,-1.763648,7.033538,-5.350772,2.376856,0.598058,2.495155,2.839113,4.563184,6.434545,3.693008,2.864566,9.822570,-6.091323,0.631658,3.920719,-0.175882,-0.904135,-5.560320,-1.101148,4.362319,-8.878038,9.661513,0.133909,-2.234034,5.105725,-3.009791,-1.890388,-8.635359,8.680547,-2.604347,3.370946,-6.943752,-8.565772,-2.200897,-2.951604,-8.570991,-9.941305,-0.228168,-9.875181,2.559354,-0.796098,5.078525,4.587000,-5.149914,7.092764,0.602518,7.225715,-3.333242,0.676795,-2.479675,1.589389,-2.265945,6.581091,5.016510,7.392986,9.143024,-3.252179,3.570806,-9.748801,-4.379737,-5.847886,5.785303,5.560355,-3.847522,-1.782079,0.763375,7.196747,-5.807566,-7.122052,0.914730,-9.628616,-7.909603,0.599252,-2.359478,7.039217,0.862788,-9.180475,3.670838,2.970958,-1.147331,-7.612061,1.380918,4.912366,-8.966704,4.127384,-4.320027,8.638994,-4.979645,-0.943153,-8.839323,-5.074757,8.496437,-3.386528,-2.075107,-0.491890,-9.659261,-7.124210,8.106678,3.419564,-9.765571,5.086937,-3.932066,0.475709,1.340692,7.655426,0.987289,7.704880,-1.305059,4.936896,5.709951,-3.432915,-9.606757,7.170162,-2.899779,-8.842422,5.067755,3.526662,-9.054901,9.719557,-9.814187,9.147963,-9.672932,8.075346,5.639778,5.010474,-1.063514,-5.286122,8.169922,-9.277814,-7.150636,-8.901468,-6.073093,2.775646,-9.935987,-7.503687,7.607951,-7.877264,7.565076,-1.809380,-0.306186,9.531860,2.926577,9.973345,-1.386820,6.149177,-1.514167,-0.881333,9.993371,3.497734,-0.761954,2.140421,-0.253033,5.937689,2.260861,-9.536373,-4.502107,-0.042212,5.774692,-6.479964,-5.475359,-7.096329,1.367172,2.295825,-9.776735,-8.816182,4.838548,-9.298904,6.086190,0.234182,2.945512,-0.063776,7.933372,-4.837673,-6.382228,-9.311752,-6.035518,-6.955186,-6.926471,-3.186644,-7.068756,3.370105,-1.780597,2.780032,-3.897256,-3.591563,-4.046864,7.951477,-4.211627,-4.420805,-4.628059,5.855613,3.690983,-3.755245,1.698202,-5.974505,3.390006,8.558578,0.024313,4.437369,7.192335,-0.585853,-4.707241,-3.852226,5.067356,5.443897,9.791146,-2.857468,-4.804503,-4.498609,5.486707,-3.044378,6.023467,9.337254,-2.599964,-6.104875,-0.011104,-7.154055,-4.332536,2.644519,1.269757,4.207108,3.663224,-8.374830,-5.419197,-0.374278,5.891019,-2.727727,-3.205450,-2.498777,-2.138985,8.144125,8.256667,9.705673,-4.126116,9.588326,3.236847,-4.440475,-3.920278,9.089304,-6.651729,-3.272307,-8.754280,-2.638956,-9.991682,9.837543,1.638321,-4.588460,-9.377285,-8.575738,-6.539931,4.329975,-2.925856,8.221165,-9.631743,8.400365,-4.955284,-8.860384,-3.470069,1.328485,7.356332,1.577132,0.314123,6.358697,6.139131,-3.089750,8.728944,5.005615,-4.098716,-3.219763,8.967356,0.249013,-7.363104,-4.400501,-6.288172,4.216370,3.900635,-5.490437,-4.686094,-5.064256,3.443914,-9.439646,-0.228546,-8.578228,-1.418631,3.189114,-2.698472,4.161337,5.306214,7.408390,1.401358,3.912708,3.320312,-6.864229,-2.061984,2.779059,5.094414,-8.635967,4.385380,-2.756243,-2.463407,-2.859674,-6.762511,9.771794,6.275273,1.852570,4.598568,4.109370,-7.413857,9.924503,4.213312,-5.915207,-8.983202,-2.634443,9.486155,9.815561,6.303128,-4.449340,0.116481,7.247497,-9.611898,5.590484,6.012762,-9.843359,-3.122073,-8.656921,-1.972909,5.254990,-2.369370,7.961375,-5.700416,2.516196,-9.805885,-0.231775,5.732394,-5.628371,-6.044361,4.011162,2.636121,-5.411964,1.828920,8.380385,6.292279,-3.216294,-0.515699,-9.835739,-7.217817,-0.980444,9.421129,-8.550420,-8.335789,4.740571,7.662898,6.013112,-6.165447,-7.786711,-3.045462,-0.498832,-1.367313,6.021093,-3.874311,-5.833323,8.378067,4.480851,5.481165,3.238326,-0.815405,-1.332114,-4.582885,-0.186283,9.580185,-0.459608,-0.573506,-8.997919,-9.106400,-0.613133,3.230639,7.814073,7.788881,9.953551,9.557733,2.434244,1.548052,7.526022,8.500418,5.049766,-7.281380,-6.886727,-5.174235,-3.270926,8.678643,3.688058,9.192027,1.709381,5.735426,8.616620,-1.835401,-7.732008,-8.463564,2.511473,-2.182730,0.324210,-4.600451,0.867751,-8.417544,5.796317,-6.499609,-3.470721,-6.644671,7.317083,-5.554474,-8.613917,3.199027,9.414858,-7.104097,6.226562,0.733250,3.706974,-2.737216,-7.014984,-1.755647,-8.174135,-5.354102,-5.564544,0.585726,-6.906711,-4.140141,-4.744299,6.475705,-4.461432,-3.908667,-4.504131,-4.987276,8.653311,1.182893,7.519042,-2.199823,-9.353882,-7.068293,0.413065,-5.859099,5.038141,-2.643629,-7.243346,0.589280,8.221140,-4.324682,8.358987,7.880896,-2.720701,-5.843168,3.727100,6.876397,4.393579,-1.004940,6.733214,-5.979691,-8.513628,-0.126765,6.322204,3.313573,6.222209,-0.782501,-7.228088,-1.800728,-9.931247,-6.380942,7.620316,-2.064317,3.710473,3.581826,0.227098,2.533328,-9.754320,1.700385,-9.081940,-7.567172,-6.801570,-5.900154,-1.728594,8.759354,-1.085846,-9.637779,-9.050502,-4.124676,-3.746798,-6.884271,-8.730357,4.305806,-7.486745,-5.909919,4.999016,-4.897280,6.298810,-4.646176,5.303784,3.702892,7.005179,7.249482,-1.019928,1.789066,3.945058,-1.725105,2.017371,-7.147117,-6.312712,-0.054444,6.222977,-4.046377,-0.402241,4.628114,-7.700518,8.082698,-4.971266,1.227912,-8.993763,0.565729,3.933739,1.659909,4.044392,-5.636365,-4.089564,8.322569,4.334457,2.202721,-9.090449,-9.350904,7.687577,-4.124473,-0.976634,-3.841795,-1.945953,8.101371,9.304084,5.598249,-4.357363,3.137728,-6.722191,9.541404,-2.179690,5.576273,7.384383,1.532564,4.994734,-3.515171,-3.167230,5.349757,3.398332,-5.389287,9.209232,7.897791,2.343321,3.559318,-2.032489,0.116962,3.197871,9.642699,-3.920936,1.538943,1.609583,-9.730606,-3.076661,-0.561913,-7.707981,-1.153572,-0.507915,4.580793,-6.862034,-3.934776,5.364052,1.510376,-7.623548,3.467738,-6.719471,1.415337,0.153084,3.455922,4.901205,0.726551,-1.366995,7.970597,1.066123,-9.266649,3.029902,-9.206646,-3.835825,4.068058,9.070374,-6.286971,5.302401,3.622475,8.882454,-4.004401,-9.891946,-1.926262,-9.621624,-2.109375,-0.255688,7.670536,6.035939,2.299599,-3.661719,-0.967409,2.188994,2.041885,-2.708310,4.836481,6.344442,-3.184452,5.806588,-2.952258,7.106775,-1.874142,1.522176,9.104307,3.367176,-1.380639,-2.003619,3.011454,3.354922,-0.665371,2.265358,8.590295,-9.841586,9.837579,-8.282256,9.571604,-0.262482,-5.587045,8.951885,-5.555278,-2.058065,-0.249078,3.713425,-8.014158,-3.006626,5.338701,8.851616,-4.773724,-8.472448,5.727755,5.130235,-1.744220,-7.888843,2.040795,2.813164,8.147977,8.576623,-9.758655,9.363299,0.179463,2.674067,-4.842572,-4.283981,-1.742517,-5.555474,6.415832,-1.778999,1.847597,-1.286843,4.112722,-4.062229,7.597719,-7.696723,-8.963661,8.326697,-8.818476,-8.513841,6.664096,9.372359,-9.984163,7.871627,-8.093842,7.151387,9.706043,-0.906604,6.951519,8.006828,-0.143099,-3.546363,4.478341,7.439127,0.061385,-7.991123,-8.069484,-5.828437,4.105088,-4.687648,-3.981088,6.088888,-0.434492,-3.884669,-6.637151,-5.490628,5.869091,-6.363196,-0.849284,-9.850792,2.147465,-4.708575,3.732359,-7.146935,5.234020,-0.707351,2.241122,5.104879,9.483025,2.441023,4.909449,0.702604,1.170395,7.688905,0.027166,8.640776,8.641199,-1.646214,-3.156380,5.057698,0.791923,7.280474,-1.893612,-2.165244,-9.816292,7.316415,-9.747317,4.199010,-3.533607,3.074253,-4.092678,7.963590,6.486710,-5.393250,-9.163590,1.195483,4.845759,-1.911784,4.886143,-4.697277,0.082894,7.553560,-2.478796,1.173913,9.727038,-9.706122,3.675351,5.392592,4.575686,-0.234413,-5.434777,4.154167,6.170078,7.294953,8.127638,-9.616372,6.646072,-2.514895,-3.412504,3.732412,-5.485603,-7.399898,3.979875,-9.538256,9.396785,-1.682359,-5.193331,-4.248523,-6.774392,-2.728573,3.033731,-9.092720,-9.094824,-7.369393,-8.381096,8.204182,2.383844,-0.229419,3.909454,9.624386,1.059887,-2.633987,7.193592,8.200202,-8.552496,8.187700,5.708864,4.613588,-1.741598,-0.623580,7.771730,-0.726123,9.835399,9.030095,8.101278,-4.938542,-8.186587,5.002663,3.288130,6.467022,-7.176528,2.073690,-0.093724,-8.086710,-4.848443,2.373806,-0.712413,-5.572345,-4.972611,-2.475825,-1.719127,6.038512,-2.448472,-4.733369,0.057175,1.358380,1.747662,5.354095,1.736198,-5.898902,4.606177,7.156310,5.875502,0.505748,3.210683,-0.240764,-0.376901,1.716935,-7.895480,-1.567474,3.192306,4.048403,-5.441835,8.306305,-7.810316,5.039510,1.100466,8.032155,-7.426171,7.787511,8.574981,1.236192,5.922185,-6.390644,4.221418,2.477606,-4.829013,4.899966,-3.786460,4.334265,-4.556147,-9.944990,4.413144,5.645486,-5.703203,-3.957977,-3.239422], dtype = "float64")#candidate|6476|(1650,)|const|float64
var_6477 = relay.var("var_6477", dtype = "float32", shape = (330,))#candidate|6477|(330,)|var|float32
call_6475 = relay.TupleGetItem(func_5407_call(relay.reshape(const_6476.astype('float64'), [165, 10]), relay.reshape(const_6476.astype('int8'), [165, 10]), relay.reshape(var_6477.astype('float32'), [330,]), ), 5)
call_6478 = relay.TupleGetItem(func_5411_call(relay.reshape(const_6476.astype('float64'), [165, 10]), relay.reshape(const_6476.astype('int8'), [165, 10]), relay.reshape(var_6477.astype('float32'), [330,]), ), 5)
func_6448_call = mod.get_global_var('func_6448')
func_6450_call = mutated_mod.get_global_var('func_6450')
call_6479 = relay.TupleGetItem(func_6448_call(), 0)
call_6480 = relay.TupleGetItem(func_6450_call(), 0)
output = relay.Tuple([call_6471,call_6475,const_6476,var_6477,call_6479,])
output2 = relay.Tuple([call_6472,call_6478,const_6476,var_6477,call_6480,])
func_6481 = relay.Function([var_6477,], output)
mod['func_6481'] = func_6481
mod = relay.transform.InferType()(mod)
var_6482 = relay.var("var_6482", dtype = "float32", shape = (330,))#candidate|6482|(330,)|var|float32
output = func_6481(var_6482)
func_6483 = relay.Function([var_6482], output)
mutated_mod['func_6483'] = func_6483
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6364_call = mod.get_global_var('func_6364')
func_6365_call = mutated_mod.get_global_var('func_6365')
call_6516 = relay.TupleGetItem(func_6364_call(), 0)
call_6517 = relay.TupleGetItem(func_6365_call(), 0)
output = call_6516
output2 = call_6517
func_6523 = relay.Function([], output)
mod['func_6523'] = func_6523
mod = relay.transform.InferType()(mod)
output = func_6523()
func_6524 = relay.Function([], output)
mutated_mod['func_6524'] = func_6524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5565_call = mod.get_global_var('func_5565')
func_5567_call = mutated_mod.get_global_var('func_5567')
call_6553 = func_5565_call()
call_6554 = func_5565_call()
output = call_6553
output2 = call_6554
func_6555 = relay.Function([], output)
mod['func_6555'] = func_6555
mod = relay.transform.InferType()(mod)
output = func_6555()
func_6556 = relay.Function([], output)
mutated_mod['func_6556'] = func_6556
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4644_call = mod.get_global_var('func_4644')
func_4645_call = mutated_mod.get_global_var('func_4645')
call_6596 = func_4644_call()
call_6597 = func_4644_call()
output = relay.Tuple([call_6596,])
output2 = relay.Tuple([call_6597,])
func_6602 = relay.Function([], output)
mod['func_6602'] = func_6602
mod = relay.transform.InferType()(mod)
output = func_6602()
func_6603 = relay.Function([], output)
mutated_mod['func_6603'] = func_6603
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6602_call = mod.get_global_var('func_6602')
func_6603_call = mutated_mod.get_global_var('func_6603')
call_6615 = relay.TupleGetItem(func_6602_call(), 0)
call_6616 = relay.TupleGetItem(func_6603_call(), 0)
output = relay.Tuple([call_6615,])
output2 = relay.Tuple([call_6616,])
func_6649 = relay.Function([], output)
mod['func_6649'] = func_6649
mod = relay.transform.InferType()(mod)
mutated_mod['func_6649'] = func_6649
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6649_call = mutated_mod.get_global_var('func_6649')
call_6650 = func_6649_call()
output = call_6650
func_6651 = relay.Function([], output)
mutated_mod['func_6651'] = func_6651
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6523_call = mod.get_global_var('func_6523')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_6680 = func_6523_call()
call_6681 = func_6523_call()
output = call_6680
output2 = call_6681
func_6695 = relay.Function([], output)
mod['func_6695'] = func_6695
mod = relay.transform.InferType()(mod)
mutated_mod['func_6695'] = func_6695
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6695_call = mutated_mod.get_global_var('func_6695')
call_6696 = func_6695_call()
output = call_6696
func_6697 = relay.Function([], output)
mutated_mod['func_6697'] = func_6697
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6428_call = mod.get_global_var('func_6428')
func_6429_call = mutated_mod.get_global_var('func_6429')
call_6760 = func_6428_call()
call_6761 = func_6428_call()
func_3449_call = mod.get_global_var('func_3449')
func_3451_call = mutated_mod.get_global_var('func_3451')
call_6779 = func_3449_call()
call_6780 = func_3449_call()
output = relay.Tuple([call_6760,call_6779,])
output2 = relay.Tuple([call_6761,call_6780,])
func_6783 = relay.Function([], output)
mod['func_6783'] = func_6783
mod = relay.transform.InferType()(mod)
output = func_6783()
func_6784 = relay.Function([], output)
mutated_mod['func_6784'] = func_6784
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_6796 = relay.TupleGetItem(func_2447_call(), 2)
call_6797 = relay.TupleGetItem(func_2449_call(), 2)
var_6807 = relay.var("var_6807", dtype = "float32", shape = (1, 11, 15))#candidate|6807|(1, 11, 15)|var|float32
bop_6808 = relay.subtract(call_6796.astype('int64'), relay.reshape(var_6807.astype('int64'), relay.shape_of(call_6796))) # shape=(1, 11, 15)
bop_6811 = relay.subtract(call_6797.astype('int64'), relay.reshape(var_6807.astype('int64'), relay.shape_of(call_6797))) # shape=(1, 11, 15)
output = relay.Tuple([bop_6808,])
output2 = relay.Tuple([bop_6811,])
func_6817 = relay.Function([var_6807,], output)
mod['func_6817'] = func_6817
mod = relay.transform.InferType()(mod)
mutated_mod['func_6817'] = func_6817
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6818 = relay.var("var_6818", dtype = "float32", shape = (1, 11, 15))#candidate|6818|(1, 11, 15)|var|float32
func_6817_call = mutated_mod.get_global_var('func_6817')
call_6819 = func_6817_call(var_6818)
output = call_6819
func_6820 = relay.Function([var_6818], output)
mutated_mod['func_6820'] = func_6820
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4358_call = mod.get_global_var('func_4358')
func_4360_call = mutated_mod.get_global_var('func_4360')
call_6842 = relay.TupleGetItem(func_4358_call(), 0)
call_6843 = relay.TupleGetItem(func_4360_call(), 0)
uop_6859 = relay.sigmoid(call_6842.astype('float64')) # shape=(1, 11, 15)
uop_6861 = relay.sigmoid(call_6843.astype('float64')) # shape=(1, 11, 15)
func_4087_call = mod.get_global_var('func_4087')
func_4088_call = mutated_mod.get_global_var('func_4088')
call_6862 = relay.TupleGetItem(func_4087_call(), 0)
call_6863 = relay.TupleGetItem(func_4088_call(), 0)
uop_6867 = relay.cos(call_6842.astype('float32')) # shape=(1, 11, 15)
uop_6869 = relay.cos(call_6843.astype('float32')) # shape=(1, 11, 15)
func_3645_call = mod.get_global_var('func_3645')
func_3647_call = mutated_mod.get_global_var('func_3647')
call_6874 = relay.TupleGetItem(func_3645_call(), 0)
call_6875 = relay.TupleGetItem(func_3647_call(), 0)
func_3449_call = mod.get_global_var('func_3449')
func_3451_call = mutated_mod.get_global_var('func_3451')
call_6885 = func_3449_call()
call_6886 = func_3449_call()
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_6892 = func_2269_call()
call_6893 = func_2269_call()
output = relay.Tuple([uop_6859,call_6862,uop_6867,call_6874,call_6885,call_6892,])
output2 = relay.Tuple([uop_6861,call_6863,uop_6869,call_6875,call_6886,call_6893,])
func_6910 = relay.Function([], output)
mod['func_6910'] = func_6910
mod = relay.transform.InferType()(mod)
mutated_mod['func_6910'] = func_6910
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6910_call = mutated_mod.get_global_var('func_6910')
call_6911 = func_6910_call()
output = call_6911
func_6912 = relay.Function([], output)
mutated_mod['func_6912'] = func_6912
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3645_call = mod.get_global_var('func_3645')
func_3647_call = mutated_mod.get_global_var('func_3647')
call_6950 = relay.TupleGetItem(func_3645_call(), 1)
call_6951 = relay.TupleGetItem(func_3647_call(), 1)
func_5497_call = mod.get_global_var('func_5497')
func_5499_call = mutated_mod.get_global_var('func_5499')
call_6993 = relay.TupleGetItem(func_5497_call(), 0)
call_6994 = relay.TupleGetItem(func_5499_call(), 0)
func_1568_call = mod.get_global_var('func_1568')
func_1571_call = mutated_mod.get_global_var('func_1571')
const_6998 = relay.const([-8.626661,-7.771548,8.646463,-0.024338,-2.238351,-3.341746,-9.306600,-4.773512,-5.976178,2.460901,6.393481,-3.314905,1.900188,8.719777,5.077701,-7.629194,1.142768,-8.194976,6.507607,-6.312440,-7.558016,-4.001876,7.386609,3.171796,5.138892,-0.120639,-0.233262,3.138603,-9.648472,-6.302342,0.990019,-1.437417,-7.520251,7.836527,2.741744,2.311029,-7.269575,5.215034,8.700778,0.822359,0.434242,6.153721,-8.501757,7.350981,1.541941,3.156392,-6.462436,-7.857565,-6.167190,-0.324548,4.684274,4.543436,-3.790957,4.669790,-3.944550,-8.866213,-3.575264,1.762213,-2.691615,-3.824306,9.556111,-8.359406,1.546964,-2.077906,-6.786413,8.544657,-2.654986,-3.872550,8.345460,-4.466004,-0.512061,5.541969,4.692811,-8.449793,0.133321,5.533108,-2.444793,-7.149177,-5.103058,6.170445,-2.624464,-0.804123,-9.110318,3.197986,1.226859,7.651227,-8.261280,-1.939634,9.423057,3.585193,6.270407,6.956932,-3.862336,3.660696,-6.814561,1.658012,-1.648378,-1.645438,-2.953353,-0.035310,6.058023,-9.729505,0.055215,7.429360,9.862736,5.580559,-2.994477,-3.353159,8.103193,5.182579,-0.003312,-6.180049,7.412247,1.450120,-7.647151,6.205393,1.487412,6.888105,-8.958372,-2.263999,9.660533,5.247643,-4.032502,-7.012757,3.713314,-3.550875,-9.435443,-4.861900,9.432619,-5.969498,-0.460154,6.967372,6.846567,-4.146651,-9.139485,3.847061,-6.292172,5.307942,-5.434181,-8.822605,6.373044,2.297969,7.397705,2.768419,-4.178800,-9.670257,4.282914,-7.467925,-3.171205,5.005056,9.787007,-3.363339,9.114546,6.075669,1.569714,8.092809,-0.293064,0.889646,2.053315,-0.639340,-1.604144,-9.183092,-2.215890,-2.351143,7.151846,6.025561,-5.444767,-5.145158,3.931450,6.180650,-6.114529,-2.589169,7.237105,-5.396902,-2.827141,-6.636366,-8.113210,8.875447,-9.758184,4.642576,9.181515,-7.680688,8.642928,8.626813,-5.767368,4.276629,4.468831,9.144945,8.421000,0.564368,-8.207945,-1.471119,-5.445271,-5.294662,3.233217,-3.205430,-7.789721,-8.876996,-2.554061,9.361556,-3.912701,7.030069,-6.593841,6.546173,-0.121504,3.738266,-1.966186,4.975846,6.657324,0.518230,-0.504282,0.295451,1.471487,-7.594264,8.706312,-8.201454,-9.402972,-6.067210,2.752703,4.025738,-8.685590,-7.855942,-7.430463,-6.168324,0.674079,2.755633,7.904587,9.645775,-6.417629,-9.629350,9.739490,-5.060662,-2.859511,-2.853159,-0.222012,-9.521154,-8.886358,9.302479,-5.670037,2.782056,-2.988111,6.762553,8.021118,-5.311360,-2.218181,-6.326148,4.512482,-6.150275,5.717655,1.044330,-6.050801,-3.793530,0.250017,8.692451,3.498531,3.039368,9.568171,-8.314273,5.043303,2.248728,4.701281,9.415856,-3.964716,6.942412,-9.057412,1.960547,-1.162050,-2.864308,1.228715,0.585792,-8.000420,-3.036684,-0.216444,-8.036031,1.201359,5.315905,9.586429,-6.964844,-5.546659,9.854413,-7.421091,5.592874,5.799312,-6.315966,-4.393479,5.804445,9.197300,-7.844645,-0.251499,6.345441,-7.317568,5.717481,-6.378789,8.664269,7.707109,3.681895,6.587718,-4.449707,-7.735241,-3.288991,-6.789635,8.395405,8.985513,7.047313,9.102647,-4.699384,-9.244153,9.569321,8.839547,5.434251,-0.546272,-9.033995,-5.073664,-9.572700,-8.467019,1.088798,-7.051581,-2.687126,-5.384630,-6.088134], dtype = "float32")#candidate|6998|(320,)|const|float32
call_6997 = relay.TupleGetItem(func_1568_call(relay.reshape(const_6998.astype('float32'), [16, 2, 10])), 0)
call_6999 = relay.TupleGetItem(func_1571_call(relay.reshape(const_6998.astype('float32'), [16, 2, 10])), 0)
output = relay.Tuple([call_6950,call_6993,call_6997,const_6998,])
output2 = relay.Tuple([call_6951,call_6994,call_6999,const_6998,])
func_7001 = relay.Function([], output)
mod['func_7001'] = func_7001
mod = relay.transform.InferType()(mod)
output = func_7001()
func_7002 = relay.Function([], output)
mutated_mod['func_7002'] = func_7002
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6068_call = mod.get_global_var('func_6068')
func_6070_call = mutated_mod.get_global_var('func_6070')
call_7016 = relay.TupleGetItem(func_6068_call(), 1)
call_7017 = relay.TupleGetItem(func_6070_call(), 1)
output = call_7016
output2 = call_7017
func_7020 = relay.Function([], output)
mod['func_7020'] = func_7020
mod = relay.transform.InferType()(mod)
mutated_mod['func_7020'] = func_7020
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7020_call = mutated_mod.get_global_var('func_7020')
call_7021 = func_7020_call()
output = call_7021
func_7022 = relay.Function([], output)
mutated_mod['func_7022'] = func_7022
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5497_call = mod.get_global_var('func_5497')
func_5499_call = mutated_mod.get_global_var('func_5499')
call_7121 = relay.TupleGetItem(func_5497_call(), 0)
call_7122 = relay.TupleGetItem(func_5499_call(), 0)
func_5163_call = mod.get_global_var('func_5163')
func_5164_call = mutated_mod.get_global_var('func_5164')
call_7132 = relay.TupleGetItem(func_5163_call(), 0)
call_7133 = relay.TupleGetItem(func_5164_call(), 0)
output = relay.Tuple([call_7121,call_7132,])
output2 = relay.Tuple([call_7122,call_7133,])
func_7137 = relay.Function([], output)
mod['func_7137'] = func_7137
mod = relay.transform.InferType()(mod)
output = func_7137()
func_7138 = relay.Function([], output)
mutated_mod['func_7138'] = func_7138
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5032_call = mod.get_global_var('func_5032')
func_5033_call = mutated_mod.get_global_var('func_5033')
call_7165 = relay.TupleGetItem(func_5032_call(), 1)
call_7166 = relay.TupleGetItem(func_5033_call(), 1)
uop_7170 = relay.rsqrt(call_7165.astype('float64')) # shape=(1, 11, 15)
uop_7172 = relay.rsqrt(call_7166.astype('float64')) # shape=(1, 11, 15)
func_5274_call = mod.get_global_var('func_5274')
func_5276_call = mutated_mod.get_global_var('func_5276')
call_7176 = func_5274_call()
call_7177 = func_5274_call()
bop_7202 = relay.bitwise_and(uop_7170.astype('uint32'), relay.reshape(call_7165.astype('uint32'), relay.shape_of(uop_7170))) # shape=(1, 11, 15)
bop_7205 = relay.bitwise_and(uop_7172.astype('uint32'), relay.reshape(call_7166.astype('uint32'), relay.shape_of(uop_7172))) # shape=(1, 11, 15)
func_6481_call = mod.get_global_var('func_6481')
func_6483_call = mutated_mod.get_global_var('func_6483')
const_7216 = relay.const([-9.149207,-0.480410,7.811177,-6.241853,-4.301691,-6.475388,2.880548,-6.842603,2.208845,1.356325,-3.414299,-4.003819,-9.345802,-4.114596,-7.037319,-9.916466,-3.167454,9.239344,-4.916810,-5.899951,-9.455032,-4.368332,5.054331,2.166727,-9.930796,-7.775375,8.492369,-4.203650,-2.190494,9.561671,8.025448,-3.398687,0.254891,-2.203733,2.065982,-4.207555,2.103573,3.797827,-4.795596,4.689637,-7.744535,6.024913,-3.015083,1.786332,-7.292974,1.532801,-0.538224,3.232197,6.361763,9.195770,-5.314225,3.942360,-5.179873,-2.473942,2.363021,3.851063,-4.622455,9.914832,1.161593,7.473200,-0.178804,3.391341,-6.112322,-8.588516,-7.146539,7.593184,7.897744,-3.687956,9.417440,-3.881251,-6.403599,-1.047881,-2.257853,7.656707,-1.571118,-9.764536,-2.173638,4.136467,-3.438992,-0.832189,-5.157803,-0.143119,-1.846480,4.452093,7.242169,-6.717980,-5.741541,-5.523909,2.208148,-8.671381,4.372991,-2.102787,-5.881413,-6.802835,2.120558,-1.022409,-4.730141,1.487466,0.161512,6.535253,1.000088,0.830130,-2.440410,-2.583180,4.724122,-3.124561,6.263765,-0.267803,-6.195069,4.571726,-2.435110,7.932207,-5.567489,9.150068,-4.109526,-4.823229,1.456969,5.708031,-8.554834,6.755729,-1.409191,-7.785114,-9.352211,0.782985,0.545547,-9.111045,-9.069129,8.188943,-3.621731,6.806724,8.784044,-7.250771,1.843811,-7.524728,-8.869193,1.442617,9.688792,-0.826888,4.150720,7.154125,-2.029560,-1.856987,7.318729,0.551277,-3.434607,-5.038036,9.869107,-5.594636,-0.188673,-9.236787,-9.541412,7.678477,6.405078,1.065925,-4.824853,6.178495,-9.264100,0.902850,3.651599,-6.574046,0.172362,3.285491,9.137514,1.786104,7.055329,-8.850033,-5.222856,2.097102,-6.646016,-3.162357,8.117153,2.406455,3.015061,-9.676963,-8.185824,-8.890581,1.125118,-6.818606,-0.727770,4.897496,2.346447,6.625266,9.805534,0.667358,-3.973921,-3.811676,9.265576,7.758590,5.161324,-3.727119,-1.573954,1.108297,-4.327305,3.991576,-4.139845,-9.074195,-1.051802,4.672153,5.507464,0.312622,-1.088386,8.188533,-0.746587,-1.008797,-9.450049,5.960450,0.598048,9.709663,-6.380022,-4.760059,9.032795,-5.111070,9.156883,4.930315,-3.604347,-0.906496,1.677515,-8.406889,-0.489250,6.967689,9.751696,-6.986699,8.515145,7.682306,-0.765570,-4.787474,-6.431784,2.975634,-7.745853,-4.928034,-2.462107,8.703577,1.071849,7.665681,-1.050029,-5.600287,1.871357,3.353660,-1.429158,-6.835498,-7.589067,-5.679184,9.754181,-1.008386,6.891419,-6.176784,4.926329,8.074426,2.515098,0.124167,1.648977,-8.666929,-4.903200,0.227645,-6.320645,6.175235,4.701871,4.143151,9.454753,-4.100255,7.690724,-8.773672,9.867030,0.996231,-9.109292,-8.876590,-9.201030,-8.065587,-1.606132,-0.283717,5.770398,-5.475034,2.643158,7.578928,2.417106,1.642612,-3.333406,-0.406005,8.967447,7.875089,-5.407474,7.095892,-9.720902,0.808251,-2.888603,9.218640,3.039934,-7.865219,1.970987,9.627277,5.773314,9.883686,9.838493,9.109034,6.601579,-1.726330,4.650857,7.129807,-2.989604,-8.958790,-4.181777,-5.317521,5.128238,-7.845510,5.433768,-3.014242,0.964018,-4.358523,8.813355,7.406826,-9.844040,-5.769184,-2.728343,2.733930,-6.492903,3.671065,2.955708,-9.546456,-0.394749,-8.041894,-0.122082,-2.898690,-6.209674,-5.609416,6.150538,6.133680,-5.540655,8.868989,6.104343,6.622426], dtype = "float32")#candidate|7216|(330,)|const|float32
call_7215 = relay.TupleGetItem(func_6481_call(relay.reshape(const_7216.astype('float32'), [330,])), 2)
call_7217 = relay.TupleGetItem(func_6483_call(relay.reshape(const_7216.astype('float32'), [330,])), 2)
output = relay.Tuple([call_7176,bop_7202,call_7215,const_7216,])
output2 = relay.Tuple([call_7177,bop_7205,call_7217,const_7216,])
func_7220 = relay.Function([], output)
mod['func_7220'] = func_7220
mod = relay.transform.InferType()(mod)
output = func_7220()
func_7221 = relay.Function([], output)
mutated_mod['func_7221'] = func_7221
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5913_call = mod.get_global_var('func_5913')
func_5914_call = mutated_mod.get_global_var('func_5914')
call_7250 = relay.TupleGetItem(func_5913_call(), 0)
call_7251 = relay.TupleGetItem(func_5914_call(), 0)
func_5054_call = mod.get_global_var('func_5054')
func_5055_call = mutated_mod.get_global_var('func_5055')
call_7258 = relay.TupleGetItem(func_5054_call(), 1)
call_7259 = relay.TupleGetItem(func_5055_call(), 1)
output = relay.Tuple([call_7250,call_7258,])
output2 = relay.Tuple([call_7251,call_7259,])
func_7263 = relay.Function([], output)
mod['func_7263'] = func_7263
mod = relay.transform.InferType()(mod)
output = func_7263()
func_7264 = relay.Function([], output)
mutated_mod['func_7264'] = func_7264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6910_call = mod.get_global_var('func_6910')
func_6912_call = mutated_mod.get_global_var('func_6912')
call_7286 = relay.TupleGetItem(func_6910_call(), 0)
call_7287 = relay.TupleGetItem(func_6912_call(), 0)
output = call_7286
output2 = call_7287
func_7300 = relay.Function([], output)
mod['func_7300'] = func_7300
mod = relay.transform.InferType()(mod)
output = func_7300()
func_7301 = relay.Function([], output)
mutated_mod['func_7301'] = func_7301
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4829_call = mod.get_global_var('func_4829')
func_4830_call = mutated_mod.get_global_var('func_4830')
call_7309 = relay.TupleGetItem(func_4829_call(), 1)
call_7310 = relay.TupleGetItem(func_4830_call(), 1)
func_6428_call = mod.get_global_var('func_6428')
func_6429_call = mutated_mod.get_global_var('func_6429')
call_7313 = func_6428_call()
call_7314 = func_6428_call()
output = relay.Tuple([call_7309,call_7313,])
output2 = relay.Tuple([call_7310,call_7314,])
func_7320 = relay.Function([], output)
mod['func_7320'] = func_7320
mod = relay.transform.InferType()(mod)
output = func_7320()
func_7321 = relay.Function([], output)
mutated_mod['func_7321'] = func_7321
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5974_call = mod.get_global_var('func_5974')
func_5976_call = mutated_mod.get_global_var('func_5976')
call_7379 = relay.TupleGetItem(func_5974_call(), 0)
call_7380 = relay.TupleGetItem(func_5976_call(), 0)
func_2470_call = mod.get_global_var('func_2470')
func_2471_call = mutated_mod.get_global_var('func_2471')
call_7382 = relay.TupleGetItem(func_2470_call(), 0)
call_7383 = relay.TupleGetItem(func_2471_call(), 0)
output = relay.Tuple([call_7379,call_7382,])
output2 = relay.Tuple([call_7380,call_7383,])
func_7385 = relay.Function([], output)
mod['func_7385'] = func_7385
mod = relay.transform.InferType()(mod)
mutated_mod['func_7385'] = func_7385
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7385_call = mutated_mod.get_global_var('func_7385')
call_7386 = func_7385_call()
output = call_7386
func_7387 = relay.Function([], output)
mutated_mod['func_7387'] = func_7387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4447_call = mod.get_global_var('func_4447')
func_4449_call = mutated_mod.get_global_var('func_4449')
call_7453 = func_4447_call()
call_7454 = func_4447_call()
func_5531_call = mod.get_global_var('func_5531')
func_5532_call = mutated_mod.get_global_var('func_5532')
call_7457 = func_5531_call()
call_7458 = func_5531_call()
bop_7459 = relay.power(call_7453.astype('float64'), relay.reshape(call_7457.astype('float64'), relay.shape_of(call_7453))) # shape=(1, 11, 15)
bop_7462 = relay.power(call_7454.astype('float64'), relay.reshape(call_7458.astype('float64'), relay.shape_of(call_7454))) # shape=(1, 11, 15)
output = bop_7459
output2 = bop_7462
func_7493 = relay.Function([], output)
mod['func_7493'] = func_7493
mod = relay.transform.InferType()(mod)
output = func_7493()
func_7494 = relay.Function([], output)
mutated_mod['func_7494'] = func_7494
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_7507 = relay.TupleGetItem(func_2447_call(), 1)
call_7508 = relay.TupleGetItem(func_2449_call(), 1)
func_3221_call = mod.get_global_var('func_3221')
func_3222_call = mutated_mod.get_global_var('func_3222')
call_7532 = relay.TupleGetItem(func_3221_call(), 0)
call_7533 = relay.TupleGetItem(func_3222_call(), 0)
output = relay.Tuple([call_7507,call_7532,])
output2 = relay.Tuple([call_7508,call_7533,])
func_7536 = relay.Function([], output)
mod['func_7536'] = func_7536
mod = relay.transform.InferType()(mod)
output = func_7536()
func_7537 = relay.Function([], output)
mutated_mod['func_7537'] = func_7537
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3449_call = mod.get_global_var('func_3449')
func_3451_call = mutated_mod.get_global_var('func_3451')
call_7543 = func_3449_call()
call_7544 = func_3449_call()
output = call_7543
output2 = call_7544
func_7548 = relay.Function([], output)
mod['func_7548'] = func_7548
mod = relay.transform.InferType()(mod)
output = func_7548()
func_7549 = relay.Function([], output)
mutated_mod['func_7549'] = func_7549
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5309_call = mod.get_global_var('func_5309')
func_5310_call = mutated_mod.get_global_var('func_5310')
call_7553 = relay.TupleGetItem(func_5309_call(), 0)
call_7554 = relay.TupleGetItem(func_5310_call(), 0)
output = call_7553
output2 = call_7554
func_7557 = relay.Function([], output)
mod['func_7557'] = func_7557
mod = relay.transform.InferType()(mod)
output = func_7557()
func_7558 = relay.Function([], output)
mutated_mod['func_7558'] = func_7558
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5929_call = mod.get_global_var('func_5929')
func_5931_call = mutated_mod.get_global_var('func_5931')
call_7559 = relay.TupleGetItem(func_5929_call(), 0)
call_7560 = relay.TupleGetItem(func_5931_call(), 0)
func_6523_call = mod.get_global_var('func_6523')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_7564 = func_6523_call()
call_7565 = func_6523_call()
func_5913_call = mod.get_global_var('func_5913')
func_5914_call = mutated_mod.get_global_var('func_5914')
call_7590 = relay.TupleGetItem(func_5913_call(), 0)
call_7591 = relay.TupleGetItem(func_5914_call(), 0)
bop_7646 = relay.left_shift(call_7559.astype('uint8'), relay.reshape(call_7590.astype('uint8'), relay.shape_of(call_7559))) # shape=(1, 11, 15)
bop_7649 = relay.left_shift(call_7560.astype('uint8'), relay.reshape(call_7591.astype('uint8'), relay.shape_of(call_7560))) # shape=(1, 11, 15)
output = relay.Tuple([call_7564,bop_7646,])
output2 = relay.Tuple([call_7565,bop_7649,])
func_7650 = relay.Function([], output)
mod['func_7650'] = func_7650
mod = relay.transform.InferType()(mod)
mutated_mod['func_7650'] = func_7650
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7650_call = mutated_mod.get_global_var('func_7650')
call_7651 = func_7650_call()
output = call_7651
func_7652 = relay.Function([], output)
mutated_mod['func_7652'] = func_7652
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3111_call = mod.get_global_var('func_3111')
func_3112_call = mutated_mod.get_global_var('func_3112')
call_7701 = relay.TupleGetItem(func_3111_call(), 1)
call_7702 = relay.TupleGetItem(func_3112_call(), 1)
output = relay.Tuple([call_7701,])
output2 = relay.Tuple([call_7702,])
func_7711 = relay.Function([], output)
mod['func_7711'] = func_7711
mod = relay.transform.InferType()(mod)
output = func_7711()
func_7712 = relay.Function([], output)
mutated_mod['func_7712'] = func_7712
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2470_call = mod.get_global_var('func_2470')
func_2471_call = mutated_mod.get_global_var('func_2471')
call_7731 = relay.TupleGetItem(func_2470_call(), 0)
call_7732 = relay.TupleGetItem(func_2471_call(), 0)
uop_7739 = relay.log(call_7731.astype('float32')) # shape=(165, 1)
uop_7741 = relay.log(call_7732.astype('float32')) # shape=(165, 1)
output = relay.Tuple([uop_7739,])
output2 = relay.Tuple([uop_7741,])
func_7746 = relay.Function([], output)
mod['func_7746'] = func_7746
mod = relay.transform.InferType()(mod)
output = func_7746()
func_7747 = relay.Function([], output)
mutated_mod['func_7747'] = func_7747
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6602_call = mod.get_global_var('func_6602')
func_6603_call = mutated_mod.get_global_var('func_6603')
call_7810 = relay.TupleGetItem(func_6602_call(), 0)
call_7811 = relay.TupleGetItem(func_6603_call(), 0)
func_4358_call = mod.get_global_var('func_4358')
func_4360_call = mutated_mod.get_global_var('func_4360')
call_7817 = relay.TupleGetItem(func_4358_call(), 2)
call_7818 = relay.TupleGetItem(func_4360_call(), 2)
const_7825 = relay.const([[[-9.104031,-4.569604,-6.480539,-1.525672,-8.164868,4.663530,6.799824,6.479771,-6.538064,-5.799365,-0.923376,7.197770,-8.565601,-6.172159,-9.324532],[-2.386588,-3.741391,-9.604287,1.772948,0.486698,-5.109026,-1.595320,-6.611615,-0.643407,-2.669500,-5.598057,-3.751273,-2.596250,4.581002,-8.993711],[-0.686620,-0.184305,7.749539,-9.083064,4.948320,-2.305143,-8.627966,-5.696184,-1.424632,2.089226,5.071047,-0.353864,9.230036,-5.103997,4.751773],[5.267697,0.368194,-4.310267,-2.238634,-3.958362,-6.594586,0.838141,8.254597,5.931874,-7.572849,-6.229396,7.855442,9.583287,4.378881,8.552337],[7.024465,0.695443,-3.362224,7.601075,-1.152549,3.075260,6.550430,8.154469,-7.383501,-0.141083,9.005745,-1.725595,1.221214,-2.555058,-7.286605],[-6.199334,-2.516599,-2.167832,8.283989,2.264092,5.240096,7.279910,5.794628,3.795518,6.089824,-8.982048,6.743135,6.571141,-3.232171,1.618308],[5.969792,-2.565578,4.745852,4.790812,2.377698,-7.508449,7.448361,0.383969,-4.699336,-5.026993,-5.371344,0.536196,9.998203,0.504134,-7.429846],[-2.604454,-5.876399,7.996160,-0.666451,-6.422824,8.477549,-3.362211,-5.048757,5.334839,8.489596,3.109387,-1.253281,2.464398,4.416297,7.397874],[7.586546,-8.943118,6.028613,-5.427644,-3.431669,0.122523,7.072216,-0.219430,4.558093,5.840314,9.277677,-5.046932,9.765321,2.151737,-2.891165],[-9.120669,4.373399,5.721390,-9.114183,-7.525212,5.958281,-0.176255,6.291632,-9.811697,-5.573079,4.620332,-9.778979,3.425711,0.283199,3.152648],[0.798061,-8.984469,-6.248042,3.720992,5.854753,7.689247,3.920948,8.180417,-4.316745,0.452923,0.759545,-0.593068,4.623585,9.060557,-9.906386]]], dtype = "float32")#candidate|7825|(1, 11, 15)|const|float32
bop_7826 = relay.floor_mod(call_7817.astype('float64'), relay.reshape(const_7825.astype('float64'), relay.shape_of(call_7817))) # shape=(1, 11, 15)
bop_7829 = relay.floor_mod(call_7818.astype('float64'), relay.reshape(const_7825.astype('float64'), relay.shape_of(call_7818))) # shape=(1, 11, 15)
func_6448_call = mod.get_global_var('func_6448')
func_6450_call = mutated_mod.get_global_var('func_6450')
call_7839 = relay.TupleGetItem(func_6448_call(), 0)
call_7840 = relay.TupleGetItem(func_6450_call(), 0)
output = relay.Tuple([call_7810,bop_7826,call_7839,])
output2 = relay.Tuple([call_7811,bop_7829,call_7840,])
func_7847 = relay.Function([], output)
mod['func_7847'] = func_7847
mod = relay.transform.InferType()(mod)
mutated_mod['func_7847'] = func_7847
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7847_call = mutated_mod.get_global_var('func_7847')
call_7848 = func_7847_call()
output = call_7848
func_7849 = relay.Function([], output)
mutated_mod['func_7849'] = func_7849
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mod.get_global_var('func_4878')
func_4880_call = mutated_mod.get_global_var('func_4880')
call_7865 = func_4878_call()
call_7866 = func_4878_call()
output = relay.Tuple([call_7865,])
output2 = relay.Tuple([call_7866,])
func_7879 = relay.Function([], output)
mod['func_7879'] = func_7879
mod = relay.transform.InferType()(mod)
output = func_7879()
func_7880 = relay.Function([], output)
mutated_mod['func_7880'] = func_7880
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7879_call = mod.get_global_var('func_7879')
func_7880_call = mutated_mod.get_global_var('func_7880')
call_7911 = relay.TupleGetItem(func_7879_call(), 0)
call_7912 = relay.TupleGetItem(func_7880_call(), 0)
func_3111_call = mod.get_global_var('func_3111')
func_3112_call = mutated_mod.get_global_var('func_3112')
call_7922 = relay.TupleGetItem(func_3111_call(), 0)
call_7923 = relay.TupleGetItem(func_3112_call(), 0)
output = relay.Tuple([call_7911,call_7922,])
output2 = relay.Tuple([call_7912,call_7923,])
func_7948 = relay.Function([], output)
mod['func_7948'] = func_7948
mod = relay.transform.InferType()(mod)
mutated_mod['func_7948'] = func_7948
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7948_call = mutated_mod.get_global_var('func_7948')
call_7949 = func_7948_call()
output = call_7949
func_7950 = relay.Function([], output)
mutated_mod['func_7950'] = func_7950
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4892_call = mod.get_global_var('func_4892')
func_4893_call = mutated_mod.get_global_var('func_4893')
call_7980 = func_4892_call()
call_7981 = func_4892_call()
func_6030_call = mod.get_global_var('func_6030')
func_6032_call = mutated_mod.get_global_var('func_6032')
call_7995 = func_6030_call()
call_7996 = func_6030_call()
func_4670_call = mod.get_global_var('func_4670')
func_4671_call = mutated_mod.get_global_var('func_4671')
call_7997 = relay.TupleGetItem(func_4670_call(), 0)
call_7998 = relay.TupleGetItem(func_4671_call(), 0)
output = relay.Tuple([call_7980,call_7995,call_7997,])
output2 = relay.Tuple([call_7981,call_7996,call_7998,])
func_8026 = relay.Function([], output)
mod['func_8026'] = func_8026
mod = relay.transform.InferType()(mod)
output = func_8026()
func_8027 = relay.Function([], output)
mutated_mod['func_8027'] = func_8027
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5565_call = mod.get_global_var('func_5565')
func_5567_call = mutated_mod.get_global_var('func_5567')
call_8044 = func_5565_call()
call_8045 = func_5565_call()
func_5163_call = mod.get_global_var('func_5163')
func_5164_call = mutated_mod.get_global_var('func_5164')
call_8050 = relay.TupleGetItem(func_5163_call(), 0)
call_8051 = relay.TupleGetItem(func_5164_call(), 0)
func_6261_call = mod.get_global_var('func_6261')
func_6264_call = mutated_mod.get_global_var('func_6264')
const_8074 = relay.const([[-0.971918,-4.881324,4.196312,3.522149,4.907081,2.110701,-4.270674,-9.204048,-3.062188,9.311352,-4.300023,-0.008776,-3.713765,9.271175,5.152544],[4.915493,4.204529,-7.651181,-3.895936,-9.561888,9.221826,-9.579279,-4.364028,2.439862,2.484188,-1.105497,7.674552,-8.705611,-3.989890,-9.280806],[3.741296,-8.797929,8.265632,-7.434100,-4.872241,3.662243,-0.199758,2.167870,-5.678952,-2.776215,-8.174161,-5.252428,4.859331,6.754772,-8.872607],[8.771987,-6.606619,-5.109898,-5.356120,4.458212,6.423171,6.510538,2.180407,3.264125,2.217934,0.135733,-5.660593,9.263923,0.866137,-7.312421],[-0.226828,9.717087,1.748460,-2.230399,-0.387764,-4.671016,-8.146285,-4.446192,9.020544,2.900811,8.816110,-1.672266,-1.724270,3.004216,-9.080453],[-6.025515,2.706824,9.400024,0.192343,-4.341009,-6.885001,-6.877591,-8.743143,-6.408884,-7.883885,-0.653007,-5.606366,3.277640,-4.796513,-6.322924],[-8.044167,6.084784,7.699505,-0.447207,-2.458733,-0.109840,-1.026080,6.541999,2.280921,-7.562663,-2.086443,5.394499,6.281501,8.246053,2.519598],[-3.795733,-1.710434,8.254278,7.775188,8.776940,0.303450,-4.045990,-4.502563,-2.448704,1.330626,3.073432,-6.281663,-6.952413,0.915302,6.923764],[-2.509225,8.958149,-2.213267,-0.835551,-3.885594,1.348949,8.245152,8.200254,-1.755044,-2.682202,-5.980455,0.558940,-5.278477,-2.112553,7.815942],[8.852534,-2.713807,2.255720,8.612618,-9.230374,6.884888,7.146226,2.993684,-7.177378,1.490846,5.631893,-3.361484,-0.906464,-4.535129,-5.426579],[-3.604965,9.336559,-3.873421,8.858272,-5.596305,-2.214636,-9.235812,0.482351,-9.787660,0.780505,-0.410582,-8.884386,1.258646,1.808864,1.488205]], dtype = "float64")#candidate|8074|(11, 15)|const|float64
call_8073 = relay.TupleGetItem(func_6261_call(relay.reshape(const_8074.astype('float64'), [165,])), 0)
call_8075 = relay.TupleGetItem(func_6264_call(relay.reshape(const_8074.astype('float64'), [165,])), 0)
func_7263_call = mod.get_global_var('func_7263')
func_7264_call = mutated_mod.get_global_var('func_7264')
call_8081 = relay.TupleGetItem(func_7263_call(), 1)
call_8082 = relay.TupleGetItem(func_7264_call(), 1)
output = relay.Tuple([call_8044,call_8050,call_8073,const_8074,call_8081,])
output2 = relay.Tuple([call_8045,call_8051,call_8075,const_8074,call_8082,])
func_8102 = relay.Function([], output)
mod['func_8102'] = func_8102
mod = relay.transform.InferType()(mod)
mutated_mod['func_8102'] = func_8102
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8102_call = mutated_mod.get_global_var('func_8102')
call_8103 = func_8102_call()
output = call_8103
func_8104 = relay.Function([], output)
mutated_mod['func_8104'] = func_8104
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6123_call = mod.get_global_var('func_6123')
func_6125_call = mutated_mod.get_global_var('func_6125')
call_8110 = relay.TupleGetItem(func_6123_call(), 0)
call_8111 = relay.TupleGetItem(func_6125_call(), 0)
output = call_8110
output2 = call_8111
func_8115 = relay.Function([], output)
mod['func_8115'] = func_8115
mod = relay.transform.InferType()(mod)
output = func_8115()
func_8116 = relay.Function([], output)
mutated_mod['func_8116'] = func_8116
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5032_call = mod.get_global_var('func_5032')
func_5033_call = mutated_mod.get_global_var('func_5033')
call_8150 = relay.TupleGetItem(func_5032_call(), 0)
call_8151 = relay.TupleGetItem(func_5033_call(), 0)
output = relay.Tuple([call_8150,])
output2 = relay.Tuple([call_8151,])
func_8154 = relay.Function([], output)
mod['func_8154'] = func_8154
mod = relay.transform.InferType()(mod)
output = func_8154()
func_8155 = relay.Function([], output)
mutated_mod['func_8155'] = func_8155
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3259_call = mod.get_global_var('func_3259')
func_3261_call = mutated_mod.get_global_var('func_3261')
call_8201 = relay.TupleGetItem(func_3259_call(), 1)
call_8202 = relay.TupleGetItem(func_3261_call(), 1)
output = call_8201
output2 = call_8202
func_8216 = relay.Function([], output)
mod['func_8216'] = func_8216
mod = relay.transform.InferType()(mod)
output = func_8216()
func_8217 = relay.Function([], output)
mutated_mod['func_8217'] = func_8217
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_8246 = func_2626_call()
call_8247 = func_2626_call()
func_5531_call = mod.get_global_var('func_5531')
func_5532_call = mutated_mod.get_global_var('func_5532')
call_8264 = func_5531_call()
call_8265 = func_5531_call()
output = relay.Tuple([call_8246,call_8264,])
output2 = relay.Tuple([call_8247,call_8265,])
func_8279 = relay.Function([], output)
mod['func_8279'] = func_8279
mod = relay.transform.InferType()(mod)
mutated_mod['func_8279'] = func_8279
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8279_call = mutated_mod.get_global_var('func_8279')
call_8280 = func_8279_call()
output = call_8280
func_8281 = relay.Function([], output)
mutated_mod['func_8281'] = func_8281
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8360 = relay.var("var_8360", dtype = "int32", shape = (2, 1, 7))#candidate|8360|(2, 1, 7)|var|int32
var_8361 = relay.var("var_8361", dtype = "int32", shape = (2, 1, 7))#candidate|8361|(2, 1, 7)|var|int32
bop_8362 = relay.logical_xor(var_8360.astype('int32'), relay.reshape(var_8361.astype('int32'), relay.shape_of(var_8360))) # shape=(2, 1, 7)
uop_8367 = relay.sin(var_8360.astype('float32')) # shape=(2, 1, 7)
output = relay.Tuple([bop_8362,uop_8367,])
output2 = relay.Tuple([bop_8362,uop_8367,])
func_8370 = relay.Function([var_8360,var_8361,], output)
mod['func_8370'] = func_8370
mod = relay.transform.InferType()(mod)
var_8371 = relay.var("var_8371", dtype = "int32", shape = (2, 1, 7))#candidate|8371|(2, 1, 7)|var|int32
var_8372 = relay.var("var_8372", dtype = "int32", shape = (2, 1, 7))#candidate|8372|(2, 1, 7)|var|int32
output = func_8370(var_8371,var_8372,)
func_8373 = relay.Function([var_8371,var_8372,], output)
mutated_mod['func_8373'] = func_8373
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_8383 = relay.TupleGetItem(func_2447_call(), 2)
call_8384 = relay.TupleGetItem(func_2449_call(), 2)
func_5032_call = mod.get_global_var('func_5032')
func_5033_call = mutated_mod.get_global_var('func_5033')
call_8394 = relay.TupleGetItem(func_5032_call(), 1)
call_8395 = relay.TupleGetItem(func_5033_call(), 1)
output = relay.Tuple([call_8383,call_8394,])
output2 = relay.Tuple([call_8384,call_8395,])
func_8402 = relay.Function([], output)
mod['func_8402'] = func_8402
mod = relay.transform.InferType()(mod)
output = func_8402()
func_8403 = relay.Function([], output)
mutated_mod['func_8403'] = func_8403
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8441 = relay.var("var_8441", dtype = "float64", shape = (15, 11, 7))#candidate|8441|(15, 11, 7)|var|float64
uop_8442 = relay.atan(var_8441.astype('float64')) # shape=(15, 11, 7)
func_3611_call = mod.get_global_var('func_3611')
func_3612_call = mutated_mod.get_global_var('func_3612')
call_8447 = relay.TupleGetItem(func_3611_call(), 1)
call_8448 = relay.TupleGetItem(func_3612_call(), 1)
uop_8454 = relay.log10(var_8441.astype('float32')) # shape=(15, 11, 7)
func_7263_call = mod.get_global_var('func_7263')
func_7264_call = mutated_mod.get_global_var('func_7264')
call_8482 = relay.TupleGetItem(func_7263_call(), 0)
call_8483 = relay.TupleGetItem(func_7264_call(), 0)
output = relay.Tuple([uop_8442,call_8447,uop_8454,call_8482,])
output2 = relay.Tuple([uop_8442,call_8448,uop_8454,call_8483,])
func_8484 = relay.Function([var_8441,], output)
mod['func_8484'] = func_8484
mod = relay.transform.InferType()(mod)
mutated_mod['func_8484'] = func_8484
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8485 = relay.var("var_8485", dtype = "float64", shape = (15, 11, 7))#candidate|8485|(15, 11, 7)|var|float64
func_8484_call = mutated_mod.get_global_var('func_8484')
call_8486 = func_8484_call(var_8485)
output = call_8486
func_8487 = relay.Function([var_8485], output)
mutated_mod['func_8487'] = func_8487
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2470_call = mod.get_global_var('func_2470')
func_2471_call = mutated_mod.get_global_var('func_2471')
call_8507 = relay.TupleGetItem(func_2470_call(), 1)
call_8508 = relay.TupleGetItem(func_2471_call(), 1)
output = call_8507
output2 = call_8508
func_8515 = relay.Function([], output)
mod['func_8515'] = func_8515
mod = relay.transform.InferType()(mod)
mutated_mod['func_8515'] = func_8515
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8515_call = mutated_mod.get_global_var('func_8515')
call_8516 = func_8515_call()
output = call_8516
func_8517 = relay.Function([], output)
mutated_mod['func_8517'] = func_8517
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4300_call = mod.get_global_var('func_4300')
func_4301_call = mutated_mod.get_global_var('func_4301')
call_8525 = relay.TupleGetItem(func_4300_call(), 0)
call_8526 = relay.TupleGetItem(func_4301_call(), 0)
const_8531 = relay.const([[-8,5,6,4,7,-5,-6,-9,3],[-7,4,2,-8,1,10,-6,-2,2],[-3,2,-8,-6,5,9,3,-10,-7],[-3,9,-9,-9,-5,5,9,-6,8],[9,10,-1,4,4,1,10,-8,-9],[6,-3,-2,-10,8,1,2,2,-6],[3,-7,7,10,-5,4,5,-5,-3],[-7,-6,-3,-3,-9,-8,-7,8,-8],[5,2,-6,5,6,-2,-5,-4,-5],[9,1,-2,6,10,7,-9,-5,2],[5,7,-5,2,9,2,2,-4,1],[2,7,-9,9,7,-9,7,8,7],[2,-5,5,5,-7,2,4,5,-5],[6,-2,-10,-3,5,9,-5,1,-2],[-5,6,5,-2,-2,-10,1,3,-8],[6,-9,5,5,9,-9,-2,7,10],[8,10,-1,8,-4,-7,5,-8,-6],[-2,-2,-7,-1,7,9,-9,9,6],[8,2,-9,8,6,-8,-6,3,1],[-1,3,2,5,-8,1,-4,1,2],[-9,-4,6,-7,-2,2,-4,-6,1],[8,9,8,-1,-10,-10,-2,3,-4],[-8,3,3,3,-8,-4,-9,5,-8],[10,7,4,2,-8,4,6,-5,1],[-6,-7,3,5,2,10,3,1,-1],[9,3,-10,1,8,-7,-6,-3,-9],[-2,8,6,-4,-9,-1,10,-4,9],[-9,-10,-8,5,-9,-7,-3,-7,-5],[-1,4,-5,-2,8,7,10,10,2],[6,-2,-4,-5,9,1,7,-4,4],[7,-2,2,2,5,9,-10,5,-9],[-2,-9,8,-5,-2,5,8,-1,-7],[-2,-2,-3,-6,-7,-6,1,3,-10],[-10,6,-4,7,3,2,9,-10,-3],[-6,-5,-2,-1,10,-3,-7,-5,-6],[-1,3,-10,-3,1,2,6,4,10],[4,-9,7,5,6,4,1,2,9],[-8,-1,-6,4,-10,3,2,-5,-2],[-4,6,-8,-9,-8,-2,-5,1,-9],[10,7,2,3,-7,-7,-1,-5,1],[9,-4,-3,6,-7,7,-4,-1,-8],[-2,9,9,8,6,-9,9,-7,7],[-9,9,9,-4,-2,5,8,-2,7],[-4,3,8,-5,10,-10,-3,9,5],[-7,-5,3,-10,7,9,-3,-9,-3],[10,4,1,6,-4,-3,5,9,-8],[9,-5,-9,-10,-9,3,-6,1,3],[-7,-5,6,-4,-9,-10,-5,-6,7],[9,10,-8,2,-5,7,7,7,-7],[-2,-3,-3,-10,5,-1,1,-4,9],[-5,-8,-8,-6,-1,6,5,10,-1],[-4,3,4,2,3,-8,7,-7,-2],[4,-9,3,6,5,10,8,4,-1],[-5,-6,8,5,7,-4,5,1,4],[9,-3,-7,2,-7,7,7,-1,-4],[-10,8,-9,8,-2,-9,-2,10,5],[-8,-3,3,3,3,6,-6,-4,-4],[9,-10,1,-1,8,-8,-9,1,-3],[1,6,-1,1,9,-2,-10,-4,-3],[-10,6,6,-2,-4,4,-7,3,-8],[8,-2,7,-7,-4,-9,-6,1,-6],[7,1,-1,9,1,3,-6,1,5],[1,-6,3,-2,-4,-2,-2,-8,-10],[-10,-7,1,-10,-9,5,10,-8,-1],[-4,1,-7,-8,-1,2,5,2,-10],[-2,-2,-5,6,4,-4,6,-9,-7],[9,-3,-2,-4,4,-9,-3,-7,3],[-3,-7,-5,-4,-10,8,-7,-3,-9],[-5,3,1,6,-4,-10,-4,10,-1],[-4,-5,-8,-2,-2,-7,-9,4,-2],[4,10,10,7,-4,-5,1,2,2],[9,-4,8,-1,-4,10,9,-5,-4],[-8,8,9,7,-1,-5,8,10,6],[5,-6,2,6,-2,10,-5,8,-2],[-5,6,-9,-2,7,-3,1,-10,-9],[-4,4,6,-3,-4,-4,-9,-7,-6],[6,-5,1,7,6,-10,-10,9,-2],[9,6,8,2,-9,-2,7,-7,4],[10,2,9,-10,8,-4,-6,6,8],[2,-3,1,9,5,10,-6,1,6],[-9,10,6,8,8,-4,9,-10,-8],[-8,-7,-5,-2,-7,6,-2,10,4],[5,5,-7,-4,6,1,-5,3,3],[10,6,10,-1,-8,-4,6,-6,7],[-2,10,-4,-2,-1,10,-10,1,8],[-9,-4,7,-1,7,3,-1,-4,-3],[-3,5,9,-1,-6,6,-6,10,-3],[-5,-1,2,-8,-1,5,1,8,-5],[1,-5,-8,10,7,1,-8,-4,3],[-3,8,-5,7,-2,-2,-1,3,-2],[8,-5,4,2,-6,-9,2,-2,-7],[5,3,-8,-4,-1,-4,8,-7,-6],[8,-10,-6,-3,-4,-9,2,-2,3],[1,8,4,5,5,-2,-2,9,-5],[5,-3,5,-8,10,-3,2,8,-5],[4,-4,-3,-10,-9,1,3,-3,4],[2,6,-6,3,-2,9,-5,7,-2],[6,-9,10,-8,-5,1,1,-3,-5],[6,6,1,3,-8,5,-5,1,-5],[-4,-4,-6,-10,10,3,-10,-5,5],[2,4,-2,-10,-2,-9,-2,2,3],[4,-4,-5,-2,-4,-1,-5,-10,-3],[-7,-7,5,-6,2,6,-5,-7,5],[-5,-8,5,9,4,-6,2,-1,-2],[7,-5,3,2,-2,-6,4,-5,10],[6,10,1,-9,9,9,6,9,-5],[-3,-10,-10,1,8,8,5,-9,4],[-1,10,10,-3,-7,8,-5,-1,-5],[3,-2,-1,1,4,5,10,8,-7],[-1,-7,-3,10,-5,4,9,5,10],[-4,5,3,-4,3,-2,2,-1,10],[3,1,-1,7,4,-3,-7,-5,3],[-10,10,-10,-8,-6,1,-4,-7,10],[1,10,-9,-8,-8,-9,-3,-9,-4],[5,-1,-10,6,5,-8,3,-4,5],[-4,10,-9,4,-7,5,9,-5,1],[-3,9,10,4,-9,6,2,8,-1],[-10,-9,7,-10,1,9,1,9,-9],[-1,4,-1,-7,-10,4,2,-8,1],[-4,-4,-6,-9,4,-1,8,-5,-4],[-5,-9,6,8,-5,10,4,7,-8],[-10,2,-6,-8,-4,9,9,-7,-8],[-2,-10,5,-5,3,-8,6,10,3],[-2,-10,-3,-2,-2,-3,-3,-9,5],[2,-6,3,8,3,9,3,8,-8],[4,-5,1,9,6,7,-3,-1,-6],[2,-6,-1,2,8,7,10,8,-8],[-5,2,-4,-5,2,7,-2,9,3],[-7,-3,-4,3,-2,9,-9,-6,10],[-2,8,-2,-1,3,4,-1,2,6],[-4,9,-9,5,-7,-8,2,1,-5],[4,-7,7,2,2,2,1,-8,-2],[-1,2,-10,4,-4,2,7,-7,-3],[-8,4,1,10,2,4,-3,-2,2],[9,6,10,5,3,4,8,-3,1],[-10,5,7,7,4,-8,5,-2,-1],[8,2,9,9,7,2,3,-7,6],[-10,7,-4,10,-2,-10,-5,-10,10],[-2,-9,-9,6,-4,4,8,-3,-8],[8,6,-10,-3,-5,-3,-4,-5,3],[5,8,2,-9,8,5,-9,-3,3],[1,10,10,-2,8,7,-1,-9,-2],[-3,-3,-3,6,-1,6,4,-1,5],[10,6,-7,9,5,-9,1,8,-2],[10,2,6,-5,-9,-7,-8,4,-4],[8,6,-1,10,6,4,10,5,7],[-2,-4,-9,-5,-9,-2,9,8,3],[2,-1,-3,6,1,7,-3,-10,-10],[-1,7,-4,-4,-9,8,-2,-5,-9],[-10,-4,-6,-8,-10,7,9,-2,9],[7,9,-6,8,-5,10,3,-9,-10],[-8,4,-9,5,-1,8,5,1,-1],[-10,6,-4,-1,6,-6,5,-7,1],[1,5,6,-10,-9,4,-10,1,-2],[-2,-3,-3,3,4,-4,-7,4,-7],[-5,1,9,-6,-2,5,-1,6,-5],[5,-4,9,4,5,8,-8,8,-9],[-7,-8,-1,4,9,-7,9,-4,1],[-5,9,-4,-3,-10,-2,-9,-1,9],[-9,-5,2,-7,-6,-6,-4,5,-2],[-10,1,-7,8,-3,5,4,-6,-4],[-3,-1,-2,5,9,-1,8,5,3],[4,10,-4,-1,8,-7,8,-3,-8],[-8,-5,4,-8,-9,-4,7,-8,5],[-1,-2,6,1,-1,4,3,4,-9]], dtype = "uint32")#candidate|8531|(165, 9)|const|uint32
bop_8532 = relay.right_shift(call_8525.astype('uint16'), const_8531.astype('uint16')) # shape=(165, 9)
bop_8535 = relay.right_shift(call_8526.astype('uint16'), const_8531.astype('uint16')) # shape=(165, 9)
bop_8549 = relay.not_equal(call_8525.astype('bool'), bop_8532.astype('bool')) # shape=(165, 9)
bop_8552 = relay.not_equal(call_8526.astype('bool'), bop_8535.astype('bool')) # shape=(165, 9)
func_7557_call = mod.get_global_var('func_7557')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_8557 = func_7557_call()
call_8558 = func_7557_call()
func_6448_call = mod.get_global_var('func_6448')
func_6450_call = mutated_mod.get_global_var('func_6450')
call_8562 = relay.TupleGetItem(func_6448_call(), 0)
call_8563 = relay.TupleGetItem(func_6450_call(), 0)
output = relay.Tuple([bop_8549,call_8557,call_8562,])
output2 = relay.Tuple([bop_8552,call_8558,call_8563,])
func_8569 = relay.Function([], output)
mod['func_8569'] = func_8569
mod = relay.transform.InferType()(mod)
mutated_mod['func_8569'] = func_8569
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8569_call = mutated_mod.get_global_var('func_8569')
call_8570 = func_8569_call()
output = call_8570
func_8571 = relay.Function([], output)
mutated_mod['func_8571'] = func_8571
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4087_call = mod.get_global_var('func_4087')
func_4088_call = mutated_mod.get_global_var('func_4088')
call_8647 = relay.TupleGetItem(func_4087_call(), 0)
call_8648 = relay.TupleGetItem(func_4088_call(), 0)
func_2968_call = mod.get_global_var('func_2968')
func_2971_call = mutated_mod.get_global_var('func_2971')
var_8654 = relay.var("var_8654", dtype = "float32", shape = (330,))#candidate|8654|(330,)|var|float32
call_8653 = relay.TupleGetItem(func_2968_call(relay.reshape(var_8654.astype('float32'), [165, 2])), 1)
call_8655 = relay.TupleGetItem(func_2971_call(relay.reshape(var_8654.astype('float32'), [165, 2])), 1)
func_3674_call = mod.get_global_var('func_3674')
func_3676_call = mutated_mod.get_global_var('func_3676')
call_8656 = relay.TupleGetItem(func_3674_call(), 2)
call_8657 = relay.TupleGetItem(func_3676_call(), 2)
func_3399_call = mod.get_global_var('func_3399')
func_3402_call = mutated_mod.get_global_var('func_3402')
const_8665 = relay.const([-3,3,8,2,9,-2,-9,2,-3,-5,-9,-5,-8,4,-5,6,-3,-5,-10,7,-8,8,7,-5,6,-5,5,-1,-3,2,10,-5,-5,-6,-9,6,3,-5,8,1,10,-9,7,7,-7,-9,-8,-1,-7,2,1,-5,4,5,10,5,3,6,-4,-2,-5,-7,5,8,7,10,-7,-10,-5,-4,2,-6,3,-7,-8,-9,9,-5,-6,-8,2,8,-3,4,-7,2,8,-6,-3,-10,-3,-3,7,-9,-3,-5,-5,6,-5,-3,-9,-2,4,-9,-1,5,10,-8,-5,1,4,-5,-10,6,-1,8,3,-8,7,3,10,4,5,8,-1,-10,-4,-5,-5,-8,9,10,-5,10,-8,10,2,-8,7,8,5,-4,-4,1,-9,10,6,-1,-8,3,-7,-4,10,-5,9,7,-5,3,8,-1,-7,-7,10,-4,-1,4,1,-7,1,-7,9,-4,-3,-6,-3,9,7,-2,4,-7,4,-4,-1,-5,-5,5,-8,-8,6,-3,-10,-8,8,8,-8,8,-8,7,3,4,-6,-2,7,-5,-6,3,-3,-5,-3,-5,-5,2,-5,-5,-1,-8,5,9,-2,7,3,3,1,6,-8,6,4,-9,5,9,10,-2,7,-8,-8,-8,3,8,9,9,-7,-1,2,-9,-3,-2,-6,-9,-8,4,10,-8,3,-8,-9,10,-3,-6,2,-2,6,7,8,6,10,1,-2,-6,2,9,-2,-9,9,-2,3,-5,7,10,7,1,-6,9,1,4,9,9,10,8,5,2,3,-6,7,-6,-2,2,-3,-5,-8,10,-2,-9,-8,6,9,9,3,-2,1,-7,-9,10,-1,6,6,7,6,-4,4,-8,-6,-7,-4,3,7,10,-8,7,9,-9,9,5,-3,-2,9,-2,-10,-7,-5,2,8,-9,-6,8,-10,-10,-2,-8,6,-1,-1,1,1,-8,6,-10,5,3,-8,7,-7,-10,-4,5,8,4,-1,3,-10,-10,-2,-5,4,8,-8,-1,-2,7,7,5,-9,7,3,-4,10,3,6,8,-5,-1,1,-9,3,10,-7,-7,7,8,5,-5,8,8,-6,-2,-3,4,-7,9,-7,1,-8,-10,-4,5,2,6,-7,-4,1,4,10,-9,10,-6,1,-1,-6,3,3,3,7,-7,-4,-9,-8,-2,-10,-5,3,7,9,-2,-3,6,3,1,-9,-6,9,1,-10,-6,-5,3,2,-9,-10,-7,8,-8,5,2,-8,-8,-6,6,3,8,-5,-4,-1,-10,-6,5,-10,-6,2,8,8,1,-6,-4,9,7,-3,2,5,-6,-7,-6,3,4,2,7,10,6,5,7,1,7,-2,-7,-1,10,3,-6,10,2,-2,1,-7,9,8,5,9,-1,-2,-10,3,-10,-7,-5,-6,6,7,1,-6,-5,8,2,-3,8,5,-8,-7,-7,5,-1,8,-9,9,-9,2,-9,-4,-8,8,-2,-4,-1,9,9,-9,-4,-10,-2,-5,-3,-4,9,-5,-3,-3,-6,-7,1,-7,3,1,-5,-2,-1,9,-6,-8,9,4,-6,10,5,1,5,-6,-7,6,7,2,-7,-2,2,-9,-3,6,9,3,3,-2,5,-7,-7,6,-2,-2,7,-3,-5,-1,-5,-10,-3,2,9,6,-4,-6,-9,4,9,2,3,-7,10,-9,-7,1,3,7,9,-6,8,3,4,-1,-5,-9,10,9,3,5,8,-9,-9,-5,-2,1,-4,-9,2,-1,3,-9,3,-3,7,-6,3,-8,-2,1,5], dtype = "uint32")#candidate|8665|(660,)|const|uint32
call_8664 = func_3399_call(relay.reshape(const_8665.astype('uint32'), [165, 4]))
call_8666 = func_3399_call(relay.reshape(const_8665.astype('uint32'), [165, 4]))
output = relay.Tuple([call_8647,call_8653,var_8654,call_8656,call_8664,const_8665,])
output2 = relay.Tuple([call_8648,call_8655,var_8654,call_8657,call_8666,const_8665,])
func_8667 = relay.Function([var_8654,], output)
mod['func_8667'] = func_8667
mod = relay.transform.InferType()(mod)
var_8668 = relay.var("var_8668", dtype = "float32", shape = (330,))#candidate|8668|(330,)|var|float32
output = func_8667(var_8668)
func_8669 = relay.Function([var_8668], output)
mutated_mod['func_8669'] = func_8669
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3276_call = mod.get_global_var('func_3276')
func_3277_call = mutated_mod.get_global_var('func_3277')
call_8698 = func_3276_call()
call_8699 = func_3276_call()
output = relay.Tuple([call_8698,])
output2 = relay.Tuple([call_8699,])
func_8705 = relay.Function([], output)
mod['func_8705'] = func_8705
mod = relay.transform.InferType()(mod)
output = func_8705()
func_8706 = relay.Function([], output)
mutated_mod['func_8706'] = func_8706
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_8722 = func_2269_call()
call_8723 = func_2269_call()
func_5163_call = mod.get_global_var('func_5163')
func_5164_call = mutated_mod.get_global_var('func_5164')
call_8728 = relay.TupleGetItem(func_5163_call(), 0)
call_8729 = relay.TupleGetItem(func_5164_call(), 0)
func_6030_call = mod.get_global_var('func_6030')
func_6032_call = mutated_mod.get_global_var('func_6032')
call_8734 = func_6030_call()
call_8735 = func_6030_call()
output = relay.Tuple([call_8722,call_8728,call_8734,])
output2 = relay.Tuple([call_8723,call_8729,call_8735,])
func_8749 = relay.Function([], output)
mod['func_8749'] = func_8749
mod = relay.transform.InferType()(mod)
output = func_8749()
func_8750 = relay.Function([], output)
mutated_mod['func_8750'] = func_8750
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7493_call = mod.get_global_var('func_7493')
func_7494_call = mutated_mod.get_global_var('func_7494')
call_8775 = func_7493_call()
call_8776 = func_7493_call()
output = call_8775
output2 = call_8776
func_8777 = relay.Function([], output)
mod['func_8777'] = func_8777
mod = relay.transform.InferType()(mod)
output = func_8777()
func_8778 = relay.Function([], output)
mutated_mod['func_8778'] = func_8778
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4300_call = mod.get_global_var('func_4300')
func_4301_call = mutated_mod.get_global_var('func_4301')
call_8800 = relay.TupleGetItem(func_4300_call(), 0)
call_8801 = relay.TupleGetItem(func_4301_call(), 0)
var_8820 = relay.var("var_8820", dtype = "uint32", shape = (165, 5))#candidate|8820|(165, 5)|var|uint32
bop_8821 = relay.left_shift(call_8800.astype('uint32'), var_8820.astype('uint32')) # shape=(165, 5)
bop_8824 = relay.left_shift(call_8801.astype('uint32'), var_8820.astype('uint32')) # shape=(165, 5)
output = bop_8821
output2 = bop_8824
func_8826 = relay.Function([var_8820,], output)
mod['func_8826'] = func_8826
mod = relay.transform.InferType()(mod)
var_8827 = relay.var("var_8827", dtype = "uint32", shape = (165, 5))#candidate|8827|(165, 5)|var|uint32
output = func_8826(var_8827)
func_8828 = relay.Function([var_8827], output)
mutated_mod['func_8828'] = func_8828
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5235_call = mod.get_global_var('func_5235')
func_5236_call = mutated_mod.get_global_var('func_5236')
call_8836 = relay.TupleGetItem(func_5235_call(), 0)
call_8837 = relay.TupleGetItem(func_5236_call(), 0)
output = call_8836
output2 = call_8837
func_8852 = relay.Function([], output)
mod['func_8852'] = func_8852
mod = relay.transform.InferType()(mod)
mutated_mod['func_8852'] = func_8852
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8852_call = mutated_mod.get_global_var('func_8852')
call_8853 = func_8852_call()
output = call_8853
func_8854 = relay.Function([], output)
mutated_mod['func_8854'] = func_8854
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6649_call = mod.get_global_var('func_6649')
func_6651_call = mutated_mod.get_global_var('func_6651')
call_8863 = relay.TupleGetItem(func_6649_call(), 0)
call_8864 = relay.TupleGetItem(func_6651_call(), 0)
func_5235_call = mod.get_global_var('func_5235')
func_5236_call = mutated_mod.get_global_var('func_5236')
call_8868 = relay.TupleGetItem(func_5235_call(), 0)
call_8869 = relay.TupleGetItem(func_5236_call(), 0)
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_8883 = relay.TupleGetItem(func_2306_call(), 2)
call_8884 = relay.TupleGetItem(func_2308_call(), 2)
output = relay.Tuple([call_8863,call_8868,call_8883,])
output2 = relay.Tuple([call_8864,call_8869,call_8884,])
func_8893 = relay.Function([], output)
mod['func_8893'] = func_8893
mod = relay.transform.InferType()(mod)
output = func_8893()
func_8894 = relay.Function([], output)
mutated_mod['func_8894'] = func_8894
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7385_call = mod.get_global_var('func_7385')
func_7387_call = mutated_mod.get_global_var('func_7387')
call_8895 = relay.TupleGetItem(func_7385_call(), 1)
call_8896 = relay.TupleGetItem(func_7387_call(), 1)
func_4892_call = mod.get_global_var('func_4892')
func_4893_call = mutated_mod.get_global_var('func_4893')
call_8897 = func_4892_call()
call_8898 = func_4892_call()
func_8154_call = mod.get_global_var('func_8154')
func_8155_call = mutated_mod.get_global_var('func_8155')
call_8940 = relay.TupleGetItem(func_8154_call(), 0)
call_8941 = relay.TupleGetItem(func_8155_call(), 0)
uop_8947 = relay.log10(call_8895.astype('float32')) # shape=(165, 1)
uop_8949 = relay.log10(call_8896.astype('float32')) # shape=(165, 1)
func_3221_call = mod.get_global_var('func_3221')
func_3222_call = mutated_mod.get_global_var('func_3222')
call_8950 = relay.TupleGetItem(func_3221_call(), 0)
call_8951 = relay.TupleGetItem(func_3222_call(), 0)
output = relay.Tuple([call_8897,call_8940,uop_8947,call_8950,])
output2 = relay.Tuple([call_8898,call_8941,uop_8949,call_8951,])
func_8959 = relay.Function([], output)
mod['func_8959'] = func_8959
mod = relay.transform.InferType()(mod)
output = func_8959()
func_8960 = relay.Function([], output)
mutated_mod['func_8960'] = func_8960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8515_call = mod.get_global_var('func_8515')
func_8517_call = mutated_mod.get_global_var('func_8517')
call_8975 = func_8515_call()
call_8976 = func_8515_call()
output = call_8975
output2 = call_8976
func_8979 = relay.Function([], output)
mod['func_8979'] = func_8979
mod = relay.transform.InferType()(mod)
mutated_mod['func_8979'] = func_8979
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8979_call = mutated_mod.get_global_var('func_8979')
call_8980 = func_8979_call()
output = call_8980
func_8981 = relay.Function([], output)
mutated_mod['func_8981'] = func_8981
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2840_call = mod.get_global_var('func_2840')
func_2842_call = mutated_mod.get_global_var('func_2842')
call_9003 = func_2840_call()
call_9004 = func_2840_call()
output = call_9003
output2 = call_9004
func_9007 = relay.Function([], output)
mod['func_9007'] = func_9007
mod = relay.transform.InferType()(mod)
mutated_mod['func_9007'] = func_9007
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9007_call = mutated_mod.get_global_var('func_9007')
call_9008 = func_9007_call()
output = call_9008
func_9009 = relay.Function([], output)
mutated_mod['func_9009'] = func_9009
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9085 = relay.var("var_9085", dtype = "float32", shape = (14, 3, 10))#candidate|9085|(14, 3, 10)|var|float32
uop_9086 = relay.erf(var_9085.astype('float32')) # shape=(14, 3, 10)
output = uop_9086
output2 = uop_9086
func_9113 = relay.Function([var_9085,], output)
mod['func_9113'] = func_9113
mod = relay.transform.InferType()(mod)
mutated_mod['func_9113'] = func_9113
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9114 = relay.var("var_9114", dtype = "float32", shape = (14, 3, 10))#candidate|9114|(14, 3, 10)|var|float32
func_9113_call = mutated_mod.get_global_var('func_9113')
call_9115 = func_9113_call(var_9114)
output = call_9115
func_9116 = relay.Function([var_9114], output)
mutated_mod['func_9116'] = func_9116
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7557_call = mod.get_global_var('func_7557')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_9124 = func_7557_call()
call_9125 = func_7557_call()
func_9113_call = mod.get_global_var('func_9113')
func_9116_call = mutated_mod.get_global_var('func_9116')
const_9132 = relay.const([[-3.685658,-4.365799,-8.153976,9.827771,5.207086,-9.346948],[8.522173,2.780979,-0.580229,1.201222,-2.365668,3.409002],[0.110224,8.797120,1.410108,9.862022,2.128664,-3.330026],[8.804282,3.251373,-4.102713,-6.733988,-3.159239,2.871315],[-1.986044,1.064431,-3.825718,4.071914,9.684684,4.284881],[-9.275862,-6.685040,5.486458,0.470761,-8.556841,7.881131],[7.886427,1.085193,-8.201442,-7.178259,5.291571,1.096211],[-6.776656,9.806979,7.108533,1.401917,8.897854,6.644281],[-6.899496,6.102529,-5.067215,-6.229143,-9.931094,0.872104],[-0.670692,4.154787,-0.435038,2.668272,-2.975214,-7.301529],[-0.920038,5.708028,-4.915487,-8.066884,-5.372320,7.902941],[-3.758270,-3.715623,2.491856,5.533756,8.214083,1.223402],[-9.332193,-8.185189,-8.222949,-7.920669,-2.850281,-5.620950],[1.070822,-4.683345,8.065669,-9.615732,5.166716,-5.844619],[-6.937644,-4.475312,8.865479,0.651557,-9.358876,-7.883370],[6.847955,1.935750,-0.198348,-2.064829,-2.738899,4.167525],[-0.337798,-5.443755,-9.509904,4.222338,-5.538891,-6.745907],[4.340411,0.426944,-5.249121,-0.498344,6.283111,9.472261],[-5.965870,9.598778,-2.115203,-7.000034,-9.687056,-0.003991],[6.070214,8.898413,9.584034,4.060523,-1.843086,3.041421],[-8.824953,-7.294760,9.176269,-5.403879,5.653129,4.966801],[-3.566408,-8.200990,-9.528986,-2.977694,-0.599844,1.974463],[7.892689,5.614199,-0.602226,-1.515337,-6.260205,-6.869857],[4.971122,7.562374,-3.965701,-4.481862,-3.476063,2.762490],[-3.084583,7.425408,5.926465,-1.460179,0.210943,-0.825895],[-1.064949,4.188379,2.402662,7.913635,-8.385388,3.382950],[8.229806,8.340576,9.448783,-3.082767,-9.947571,-5.073293],[-4.711253,2.301866,-4.012611,8.154682,-5.699767,-1.546173],[-2.668432,-4.779484,-5.126046,3.603542,-9.654288,-2.655832],[8.265013,7.027561,-3.825491,-6.384217,-2.599595,-1.885584],[2.243381,-3.430685,-1.686534,-0.880047,-4.336183,8.381223],[-2.024303,-5.904765,-2.423771,-4.228340,1.179373,7.263101],[-5.388709,-4.359013,8.295039,7.692325,3.695486,6.554614],[-6.676663,-5.318418,-6.948618,-4.098965,4.570378,6.742667],[5.099977,5.303190,9.119073,-6.781724,-0.198550,4.129886],[1.649826,3.967805,-3.498085,3.943639,-2.670901,9.822326],[1.768156,9.681122,-6.155603,-7.167956,3.512946,-5.539281],[6.898779,-6.062213,4.089856,7.696413,-0.131171,9.640209],[2.477149,-9.354159,7.371559,2.420482,9.072179,4.611706],[5.080952,9.987515,6.478335,-4.381805,-7.338620,9.760990],[-3.684853,-1.127783,2.651915,7.853316,-7.923202,-0.326489],[1.674897,0.731153,-8.624208,-4.690475,-4.465854,-9.940855],[3.780085,-0.516681,4.266907,7.175603,1.320812,3.221709],[-7.783681,6.751742,-2.483789,-7.904788,3.583816,-8.593830],[-6.115924,-0.640615,-6.284865,-8.409698,3.225495,7.017917],[-7.666613,-7.362907,-1.451098,-3.314151,-8.729819,-9.325338],[3.253275,-8.953924,-2.593093,1.370655,0.861261,5.104267],[-9.620144,2.512646,7.543971,8.701034,5.426267,3.079032],[2.899550,-4.472093,9.272898,-6.680754,7.779440,-6.670568],[7.929987,-7.694911,1.200228,-1.644727,-6.961398,2.031854],[-5.240395,9.028273,-0.791659,6.668083,3.244302,3.824892],[-5.863029,8.623911,-5.504149,6.145109,8.127842,-1.213424],[-9.689117,6.799818,-5.686248,-3.069549,5.195334,-3.566743],[-8.863180,1.723086,-8.181676,-1.832816,-9.164410,-7.585554],[2.209881,-8.696251,-4.135008,6.826797,9.113381,4.247252],[1.994798,-8.211737,5.122399,-9.173473,-9.201066,1.467350],[-8.543219,-8.598029,-3.251283,7.752910,-3.184242,-5.726213],[-8.585879,9.450891,-8.244063,5.515302,-2.580655,-4.689522],[5.311551,0.810650,-1.763735,-2.880539,6.490009,8.547505],[6.562715,8.256401,-3.343144,-3.934449,-2.239057,-0.185476],[-3.007809,-3.794645,2.155893,2.202507,-2.191635,5.151359],[7.100277,0.815688,-2.882467,-3.678540,-4.664522,6.744666],[-5.032120,1.907991,-6.086070,5.204582,-5.201187,2.040928],[1.145693,-3.547679,-1.972009,-9.249199,4.162195,-9.523371],[9.839849,1.734774,-0.957596,-2.072256,2.157753,6.936801],[-1.273027,-0.940479,4.835287,-5.177555,-7.420700,-0.862568],[-1.646286,6.975922,-9.816586,2.473027,-4.419026,9.637362],[-8.980971,1.203046,-4.582886,2.305363,-6.342291,6.617680],[5.818290,-2.028182,-0.510980,-0.580430,1.284421,-3.036572],[7.259218,9.512554,-1.260792,9.083624,8.271559,-0.160159]], dtype = "float32")#candidate|9132|(70, 6)|const|float32
call_9131 = func_9113_call(relay.reshape(const_9132.astype('float32'), [14, 3, 10]))
call_9133 = func_9113_call(relay.reshape(const_9132.astype('float32'), [14, 3, 10]))
output = relay.Tuple([call_9124,call_9131,const_9132,])
output2 = relay.Tuple([call_9125,call_9133,const_9132,])
func_9161 = relay.Function([], output)
mod['func_9161'] = func_9161
mod = relay.transform.InferType()(mod)
output = func_9161()
func_9162 = relay.Function([], output)
mutated_mod['func_9162'] = func_9162
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7320_call = mod.get_global_var('func_7320')
func_7321_call = mutated_mod.get_global_var('func_7321')
call_9163 = relay.TupleGetItem(func_7320_call(), 0)
call_9164 = relay.TupleGetItem(func_7321_call(), 0)
var_9171 = relay.var("var_9171", dtype = "float32", shape = (165, 6))#candidate|9171|(165, 6)|var|float32
bop_9172 = relay.not_equal(call_9163.astype('bool'), var_9171.astype('bool')) # shape=(165, 6)
bop_9175 = relay.not_equal(call_9164.astype('bool'), var_9171.astype('bool')) # shape=(165, 6)
output = relay.Tuple([bop_9172,])
output2 = relay.Tuple([bop_9175,])
func_9192 = relay.Function([var_9171,], output)
mod['func_9192'] = func_9192
mod = relay.transform.InferType()(mod)
mutated_mod['func_9192'] = func_9192
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9193 = relay.var("var_9193", dtype = "float32", shape = (165, 6))#candidate|9193|(165, 6)|var|float32
func_9192_call = mutated_mod.get_global_var('func_9192')
call_9194 = func_9192_call(var_9193)
output = call_9194
func_9195 = relay.Function([var_9193], output)
mutated_mod['func_9195'] = func_9195
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7536_call = mod.get_global_var('func_7536')
func_7537_call = mutated_mod.get_global_var('func_7537')
call_9237 = relay.TupleGetItem(func_7536_call(), 0)
call_9238 = relay.TupleGetItem(func_7537_call(), 0)
output = call_9237
output2 = call_9238
func_9244 = relay.Function([], output)
mod['func_9244'] = func_9244
mod = relay.transform.InferType()(mod)
mutated_mod['func_9244'] = func_9244
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9244_call = mutated_mod.get_global_var('func_9244')
call_9245 = func_9244_call()
output = call_9245
func_9246 = relay.Function([], output)
mutated_mod['func_9246'] = func_9246
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6783_call = mod.get_global_var('func_6783')
func_6784_call = mutated_mod.get_global_var('func_6784')
call_9260 = relay.TupleGetItem(func_6783_call(), 0)
call_9261 = relay.TupleGetItem(func_6784_call(), 0)
func_3221_call = mod.get_global_var('func_3221')
func_3222_call = mutated_mod.get_global_var('func_3222')
call_9281 = relay.TupleGetItem(func_3221_call(), 0)
call_9282 = relay.TupleGetItem(func_3222_call(), 0)
output = relay.Tuple([call_9260,call_9281,])
output2 = relay.Tuple([call_9261,call_9282,])
func_9293 = relay.Function([], output)
mod['func_9293'] = func_9293
mod = relay.transform.InferType()(mod)
mutated_mod['func_9293'] = func_9293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9293_call = mutated_mod.get_global_var('func_9293')
call_9294 = func_9293_call()
output = call_9294
func_9295 = relay.Function([], output)
mutated_mod['func_9295'] = func_9295
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4462_call = mod.get_global_var('func_4462')
func_4464_call = mutated_mod.get_global_var('func_4464')
call_9329 = relay.TupleGetItem(func_4462_call(), 0)
call_9330 = relay.TupleGetItem(func_4464_call(), 0)
output = call_9329
output2 = call_9330
func_9335 = relay.Function([], output)
mod['func_9335'] = func_9335
mod = relay.transform.InferType()(mod)
mutated_mod['func_9335'] = func_9335
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9335_call = mutated_mod.get_global_var('func_9335')
call_9336 = func_9335_call()
output = call_9336
func_9337 = relay.Function([], output)
mutated_mod['func_9337'] = func_9337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4087_call = mod.get_global_var('func_4087')
func_4088_call = mutated_mod.get_global_var('func_4088')
call_9389 = relay.TupleGetItem(func_4087_call(), 0)
call_9390 = relay.TupleGetItem(func_4088_call(), 0)
func_8402_call = mod.get_global_var('func_8402')
func_8403_call = mutated_mod.get_global_var('func_8403')
call_9398 = relay.TupleGetItem(func_8402_call(), 1)
call_9399 = relay.TupleGetItem(func_8403_call(), 1)
func_3906_call = mod.get_global_var('func_3906')
func_3907_call = mutated_mod.get_global_var('func_3907')
call_9412 = relay.TupleGetItem(func_3906_call(), 0)
call_9413 = relay.TupleGetItem(func_3907_call(), 0)
func_8279_call = mod.get_global_var('func_8279')
func_8281_call = mutated_mod.get_global_var('func_8281')
call_9425 = relay.TupleGetItem(func_8279_call(), 1)
call_9426 = relay.TupleGetItem(func_8281_call(), 1)
output = relay.Tuple([call_9389,call_9398,call_9412,call_9425,])
output2 = relay.Tuple([call_9390,call_9399,call_9413,call_9426,])
func_9427 = relay.Function([], output)
mod['func_9427'] = func_9427
mod = relay.transform.InferType()(mod)
output = func_9427()
func_9428 = relay.Function([], output)
mutated_mod['func_9428'] = func_9428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6695_call = mod.get_global_var('func_6695')
func_6697_call = mutated_mod.get_global_var('func_6697')
call_9460 = func_6695_call()
call_9461 = func_6695_call()
func_7746_call = mod.get_global_var('func_7746')
func_7747_call = mutated_mod.get_global_var('func_7747')
call_9482 = relay.TupleGetItem(func_7746_call(), 0)
call_9483 = relay.TupleGetItem(func_7747_call(), 0)
output = relay.Tuple([call_9460,call_9482,])
output2 = relay.Tuple([call_9461,call_9483,])
func_9489 = relay.Function([], output)
mod['func_9489'] = func_9489
mod = relay.transform.InferType()(mod)
output = func_9489()
func_9490 = relay.Function([], output)
mutated_mod['func_9490'] = func_9490
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9494 = relay.var("var_9494", dtype = "bool", shape = (11, 8, 6))#candidate|9494|(11, 8, 6)|var|bool
const_9495 = relay.const([[[False,True,True,False,True,True],[False,False,False,False,False,True],[False,True,True,False,False,False],[False,False,True,False,True,False],[True,False,False,False,False,False],[False,False,False,False,False,True],[True,False,True,True,False,False],[False,False,True,True,False,True]],[[True,False,False,False,False,True],[False,True,True,False,True,True],[False,False,True,False,False,True],[False,True,True,True,False,True],[True,False,True,False,True,True],[False,False,False,False,False,False],[True,False,False,False,False,True],[False,False,True,True,True,True]],[[True,True,False,False,False,False],[False,False,False,True,False,True],[True,False,True,True,False,True],[True,True,True,True,False,True],[True,False,False,False,True,True],[False,False,False,False,True,False],[True,True,False,True,False,True],[True,True,True,False,False,False]],[[False,False,True,True,True,True],[True,False,True,True,True,True],[False,True,True,False,True,False],[False,False,True,True,False,False],[False,True,True,True,True,False],[True,True,False,True,True,True],[False,False,False,False,True,True],[True,True,False,False,True,True]],[[True,True,False,False,False,False],[False,False,True,False,False,False],[False,True,False,False,False,True],[True,True,True,True,True,False],[False,False,True,False,False,False],[False,True,True,False,False,False],[False,False,False,True,False,False],[True,False,False,True,False,False]],[[False,False,True,True,True,False],[True,False,False,False,False,True],[False,False,False,False,False,False],[False,False,True,False,True,True],[True,True,False,True,False,False],[True,True,False,True,False,False],[True,False,False,False,False,False],[True,True,True,True,True,True]],[[False,True,False,True,True,True],[False,False,False,False,True,True],[True,True,False,True,False,False],[True,True,False,True,True,True],[False,False,False,True,False,True],[False,False,False,False,True,True],[False,True,False,False,False,True],[True,True,False,True,False,False]],[[False,False,False,False,True,True],[True,True,False,True,False,False],[False,True,False,False,True,True],[False,True,False,False,False,False],[True,True,True,False,True,False],[False,True,False,False,True,True],[False,True,True,False,False,True],[False,True,False,False,True,False]],[[True,True,True,True,True,True],[False,True,True,True,True,False],[True,True,True,True,False,False],[True,False,True,False,False,False],[True,False,True,False,False,False],[False,True,False,True,False,True],[True,False,False,False,False,True],[False,True,True,True,True,True]],[[True,False,True,True,False,True],[True,True,True,False,True,True],[False,True,False,False,True,False],[False,False,True,False,False,True],[False,False,False,True,True,True],[False,False,True,True,True,True],[False,False,True,True,False,False],[False,True,False,False,True,True]],[[False,True,True,True,False,True],[False,False,True,True,True,False],[False,True,False,False,False,False],[True,False,False,False,True,True],[True,True,False,True,True,True],[False,True,True,True,True,True],[False,True,True,True,False,False],[True,True,True,True,True,True]]], dtype = "bool")#candidate|9495|(11, 8, 6)|const|bool
bop_9496 = relay.logical_or(var_9494.astype('bool'), relay.reshape(const_9495.astype('bool'), relay.shape_of(var_9494))) # shape=(11, 8, 6)
func_9293_call = mod.get_global_var('func_9293')
func_9295_call = mutated_mod.get_global_var('func_9295')
call_9500 = relay.TupleGetItem(func_9293_call(), 1)
call_9501 = relay.TupleGetItem(func_9295_call(), 1)
output = relay.Tuple([bop_9496,call_9500,])
output2 = relay.Tuple([bop_9496,call_9501,])
func_9503 = relay.Function([var_9494,], output)
mod['func_9503'] = func_9503
mod = relay.transform.InferType()(mod)
mutated_mod['func_9503'] = func_9503
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9504 = relay.var("var_9504", dtype = "bool", shape = (11, 8, 6))#candidate|9504|(11, 8, 6)|var|bool
func_9503_call = mutated_mod.get_global_var('func_9503')
call_9505 = func_9503_call(var_9504)
output = call_9505
func_9506 = relay.Function([var_9504], output)
mutated_mod['func_9506'] = func_9506
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3645_call = mod.get_global_var('func_3645')
func_3647_call = mutated_mod.get_global_var('func_3647')
call_9514 = relay.TupleGetItem(func_3645_call(), 1)
call_9515 = relay.TupleGetItem(func_3647_call(), 1)
func_4829_call = mod.get_global_var('func_4829')
func_4830_call = mutated_mod.get_global_var('func_4830')
call_9535 = relay.TupleGetItem(func_4829_call(), 1)
call_9536 = relay.TupleGetItem(func_4830_call(), 1)
output = relay.Tuple([call_9514,call_9535,])
output2 = relay.Tuple([call_9515,call_9536,])
func_9547 = relay.Function([], output)
mod['func_9547'] = func_9547
mod = relay.transform.InferType()(mod)
mutated_mod['func_9547'] = func_9547
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9547_call = mutated_mod.get_global_var('func_9547')
call_9548 = func_9547_call()
output = call_9548
func_9549 = relay.Function([], output)
mutated_mod['func_9549'] = func_9549
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8515_call = mod.get_global_var('func_8515')
func_8517_call = mutated_mod.get_global_var('func_8517')
call_9556 = func_8515_call()
call_9557 = func_8515_call()
output = relay.Tuple([call_9556,])
output2 = relay.Tuple([call_9557,])
func_9560 = relay.Function([], output)
mod['func_9560'] = func_9560
mod = relay.transform.InferType()(mod)
mutated_mod['func_9560'] = func_9560
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9560_call = mutated_mod.get_global_var('func_9560')
call_9561 = func_9560_call()
output = call_9561
func_9562 = relay.Function([], output)
mutated_mod['func_9562'] = func_9562
mutated_mod = relay.transform.InferType()(mutated_mod)
const_9609 = relay.const([[[-1.709833,2.392931,-3.785296,9.867733,-2.617715,-5.171733,7.304793],[7.866881,4.308798,2.996746,0.125675,5.443298,-0.137560,-2.405167],[1.835447,-5.682907,6.399089,0.721217,9.576932,7.623361,2.672127],[1.147874,-7.621668,-3.643094,-6.238953,-6.296569,4.390208,1.126707],[-3.517250,6.487552,0.668641,7.391154,2.921935,9.824230,-9.924991],[-5.729608,-7.796957,-2.708884,7.994671,6.385387,-9.703925,6.436049],[2.151103,9.079590,-4.984016,2.276388,4.875001,-9.775085,0.906665],[6.626061,1.778432,3.829865,5.782039,-8.042409,0.418761,-6.344531],[7.782240,1.378645,-1.491547,-1.673796,-1.403819,9.517531,-1.202136]],[[-0.183405,7.962849,6.354150,-9.029489,-2.077477,-3.177513,-3.608878],[-5.598350,6.349290,-0.665288,-9.956109,-4.629838,-9.455745,4.240921],[-3.683255,0.555504,3.602418,-2.688978,6.079361,-9.701945,-7.285057],[-7.151893,-8.547286,8.585280,-3.425564,-3.526253,4.982616,1.352931],[2.251650,0.980462,3.258664,2.510519,9.920528,0.873387,-7.580172],[-2.854086,6.306030,3.592765,-2.094572,7.163473,-3.074847,0.391567],[-8.591883,4.597126,8.056357,4.807870,-4.999971,-6.864420,-0.091858],[-6.269446,4.855952,3.406923,-1.600326,-1.611730,-9.227426,9.680005],[6.502537,-8.379701,-0.709722,-9.487469,-9.970083,-0.515521,-7.788685]],[[-9.603236,-2.120255,9.050807,7.082631,-7.676436,7.957248,-5.352189],[6.466832,-3.111228,5.629368,-9.981526,2.791175,5.788572,4.926858],[-3.181380,-1.748822,-1.184583,1.018277,-3.003525,9.070760,-6.745826],[5.596656,-3.639560,6.094720,-8.426585,4.682487,-1.665726,2.802455],[-0.069611,9.917733,-1.407642,1.286847,-8.848911,-1.799268,2.981540],[-7.852285,-0.057207,0.866995,-0.959835,5.202578,5.254829,3.339695],[4.930370,3.390704,6.664682,-0.819916,8.361008,4.742877,2.857067],[-8.161203,2.904031,-4.999191,2.300341,-2.523324,-1.330568,-6.538320],[-6.387590,5.909030,-7.088230,1.820314,9.936508,7.700813,9.540270]],[[2.120213,-6.484959,4.824681,-7.873404,2.420012,5.385715,2.981827],[2.445501,9.431756,9.097823,-6.600439,-7.187487,-6.366705,2.925450],[-7.286963,-9.534687,3.723903,6.554002,-9.932165,1.552290,8.895231],[0.298042,-3.920702,-3.264504,-8.743926,9.441657,7.210629,-6.983513],[8.870781,7.253799,-4.701356,3.970636,-7.622149,-6.186003,-1.180007],[-8.234687,5.845105,-0.611511,7.471253,6.796351,4.501452,-0.896169],[-6.984028,-1.197999,-8.924858,8.722370,4.501886,2.375349,-1.993899],[-2.556825,0.425780,-2.896937,-5.720586,-4.497456,-1.658936,4.751654],[-3.783082,-6.660077,-3.416445,6.823956,3.964609,5.054420,9.997283]],[[-5.592897,-8.977912,1.326613,-8.387120,-2.827428,-6.071067,-5.704422],[7.742278,-9.439757,0.657322,-2.904793,4.366343,-0.225132,2.902618],[6.694286,-8.712664,-9.028255,-2.805883,-7.339080,2.514175,8.638056],[-8.155351,-3.603535,3.350468,9.692207,-5.407945,-2.103650,6.033235],[-7.884352,-3.055239,-9.415997,2.548239,-2.865772,-5.198453,-8.901487],[8.507773,3.575630,1.817897,0.292228,2.470589,1.467485,1.726683],[3.418691,7.981945,1.410048,-6.378255,-6.725532,-9.068856,3.465610],[-8.652184,-1.674746,-7.732861,8.732290,-9.014784,-7.808274,0.176092],[6.417275,-2.295787,-3.480276,-6.669993,9.918286,9.908716,-2.923868]],[[-8.833085,-1.153969,-5.550922,2.976518,-4.929151,-4.569874,9.455401],[-9.623943,8.225378,6.239194,4.005757,4.386982,1.009875,-9.243941],[-3.980980,-8.216877,-3.457078,4.973597,-4.953844,6.627738,5.412149],[9.681364,9.284284,-8.776918,3.685872,-4.105789,6.089348,-7.709239],[-1.396880,2.401578,3.508565,-2.130081,-8.303213,-8.181120,-2.505591],[7.557029,-2.683552,-2.533191,7.871847,-2.176185,8.869435,1.828457],[-5.418646,7.025889,-2.142976,6.213521,2.297022,5.926131,-1.279893],[-1.850720,-1.549374,-7.147242,-7.357730,-0.812490,0.754734,-2.185229],[4.413603,6.330894,7.996796,-5.341137,7.845606,9.207587,6.541596]],[[-0.563530,3.648612,-5.411667,9.499360,-2.742307,-1.679661,8.984833],[0.928297,-0.309073,2.433244,-9.880550,-0.998411,-9.641179,-9.780830],[-0.116875,-2.130274,0.782542,4.338593,5.634971,9.778511,-1.239304],[-4.889629,0.363500,6.544858,-1.395671,-1.689263,9.474091,-7.743987],[-4.344877,-2.125479,-4.007655,-7.977969,-2.551548,-1.962493,-9.303987],[3.798065,6.427497,-6.702967,7.233365,-9.863297,-9.169364,-9.774009],[5.454143,0.506405,0.629576,1.313765,-6.104747,-1.125367,0.398548],[6.581254,-1.750417,0.041836,-3.144753,-7.433030,8.190333,-1.400188],[3.745461,-1.406251,7.188214,8.196855,7.726816,-5.082100,-0.947821]],[[-0.457037,9.998282,4.990270,-7.563531,1.449108,-6.815666,-6.922985],[-6.743130,7.235588,1.831775,9.704627,1.651518,4.889589,2.052688],[-6.515854,-5.674917,7.810621,-6.212408,7.137418,6.785644,-7.286282],[1.249375,-7.815942,5.843046,4.217826,4.561311,7.088912,1.001865],[8.898728,-6.238322,-5.429622,-1.148331,6.353012,-6.335566,9.927242],[0.779307,9.598380,-8.012247,3.664202,2.325044,-5.091021,1.980772],[9.539200,-8.010042,1.556565,9.332299,-0.875565,8.454348,-4.719259],[-8.390286,-6.887368,6.426406,-5.849946,0.546533,2.549135,2.359154],[0.049529,2.529647,3.533293,9.238708,7.274509,9.753987,-1.326033]],[[6.984480,-4.002635,-9.871696,9.083560,5.870307,9.233917,4.030921],[9.505691,-6.058573,2.951327,-1.967037,7.795222,1.308165,-9.991463],[-4.755520,-6.856599,3.108488,-2.276292,7.669538,-1.616247,4.042299],[7.310630,-7.054438,5.603364,2.939339,1.008090,-6.519071,3.986887],[7.437067,-1.466808,-9.619556,0.647601,4.823491,2.953545,0.543045],[1.184436,2.318037,-3.095138,-9.739389,-0.145249,-5.856443,5.427791],[-6.611036,7.727275,-0.966083,-0.707432,-2.664644,-1.238424,0.463470],[-0.105404,9.616018,0.362797,-6.049979,0.379342,-8.908160,-1.905361],[4.764252,2.825641,-7.325435,2.732873,-5.293830,2.200649,7.251784]],[[-4.601474,2.601411,7.597995,4.151917,5.655903,-1.264859,-2.104199],[-1.160851,-9.116229,-9.045266,8.412754,-0.961018,1.203060,-8.822020],[5.721597,-4.384683,-4.699746,-9.745427,4.182958,4.899724,3.228859],[5.304203,-1.213180,-1.519492,6.745694,-7.774979,7.957642,4.277737],[3.344292,5.386479,9.925702,-3.452110,7.976908,4.514259,-8.836119],[4.315108,2.594043,1.895000,-1.911809,-2.667044,-6.734417,-1.311122],[0.451866,-6.586900,-7.175159,1.707179,-3.498438,7.106354,-3.191119],[-7.183722,2.612239,-6.656275,-5.092374,-0.366283,4.799689,-5.996024],[4.924682,1.769596,-2.117175,9.928850,3.655372,-8.679034,9.124971]],[[8.139515,-8.807497,-9.065076,0.195564,-0.907205,1.621940,-9.315100],[2.949877,-8.757900,6.302674,0.731846,-7.213120,-4.278092,5.967920],[9.444328,3.639154,-4.014171,-3.926628,1.977311,8.804358,5.752149],[4.173540,0.665477,-7.257008,2.276282,9.482683,1.930495,-7.144036],[0.404811,-9.875671,-9.972838,3.115127,0.787791,9.645871,4.334597],[4.152180,9.715713,-8.879812,8.919458,6.156712,1.469357,-7.982498],[-0.450155,-2.523245,-8.037527,-3.997870,-4.414832,-7.922026,5.445106],[3.200251,-9.042187,6.669274,3.168187,4.599635,-1.932723,8.207451],[5.901399,-4.746921,-1.888856,-6.391308,9.109510,2.389283,-9.674885]]], dtype = "float64")#candidate|9609|(11, 9, 7)|const|float64
uop_9610 = relay.acosh(const_9609.astype('float64')) # shape=(11, 9, 7)
func_6481_call = mod.get_global_var('func_6481')
func_6483_call = mutated_mod.get_global_var('func_6483')
const_9622 = relay.const([-8.206481,2.550016,5.194774,-2.113551,2.087732,-0.692103,1.278662,3.626326,5.025975,-3.727837,-9.606213,-9.434558,8.879897,-3.360855,-5.375387,-8.694564,0.976058,6.104854,6.892757,-5.848864,-1.787600,3.537617,-3.917097,-7.596201,-5.803084,9.526807,1.565847,4.312729,-7.659360,6.926327,7.627723,-6.959035,0.146333,-5.614954,3.847951,-7.817651,2.578311,9.638560,-1.462691,9.488209,3.216124,7.436961,-8.402706,3.175590,4.119026,1.218361,2.534484,9.800980,-5.385804,3.111581,-9.385337,5.429150,8.716411,1.877040,-5.098397,-5.236041,3.189431,-3.452711,-2.822184,5.620183,9.257877,2.488301,-6.328469,4.348113,-5.306448,-3.723298,-4.339271,-0.726575,9.938931,3.249641,8.546003,2.429294,-6.984251,-7.812810,3.426532,-3.886634,2.846373,5.575505,-7.801085,-5.160232,6.816447,1.423212,-5.781538,1.179148,-8.378189,-3.398707,-5.595527,-5.249563,4.724881,-4.408418,-0.272857,4.229259,-2.243051,3.009067,-0.378505,2.827411,5.028431,8.739667,-7.215384,0.943991,-7.270178,-8.492933,1.754979,2.031471,-3.216355,3.596040,-6.348949,-5.713102,-5.606215,0.147964,8.545405,-6.866881,1.981451,-9.920478,8.334404,-8.477249,9.835784,-5.672678,-6.593086,-9.926249,6.339978,7.530010,-6.174697,-6.723894,-4.014703,7.978068,-4.273989,-4.498161,-2.122433,-5.671995,-5.708160,7.932049,9.249921,-9.658832,5.974937,-5.203667,-1.978023,-4.392963,1.701842,4.841236,-9.490443,3.855531,7.164011,-0.123153,1.627142,3.202368,-7.142071,0.033438,-7.152248,4.467417,-8.909394,1.937635,7.192129,-3.529473,-7.060284,-0.115106,-6.375448,-8.297320,6.298563,6.225174,3.227428,-8.920458,1.531198,6.167363,4.720893,5.990705,4.272331,0.435317,-1.455382,4.357421,9.790389,4.325255,-2.798121,1.477267,7.237798,-7.424158,2.895638,-7.443518,-5.437084,7.572578,-5.081696,-0.356639,7.236255,-0.105175,0.656406,-4.186945,-5.900217,-9.440860,1.679611,-8.007416,6.942355,1.707994,-6.830884,0.695192,-6.215486,-6.828644,-1.248632,-9.217247,-1.867543,5.889330,-3.019206,1.386892,-9.466490,7.575041,3.262022,-4.833086,-7.304193,-9.995920,8.562045,-0.032321,-1.482448,-0.510728,0.245233,-5.757217,7.886690,2.586322,7.920865,-8.198039,-8.948959,-9.312810,-0.079723,-6.015155,-0.116375,6.024441,6.395248,8.259139,-0.236384,-7.491243,-8.890339,-3.599995,-0.831664,-9.239001,-9.612031,5.919055,-8.159722,-8.337894,-0.605100,-7.071007,0.454802,-8.464831,5.462583,-7.714279,7.842810,8.699433,6.880035,-1.336797,4.769983,-1.716850,3.736740,-4.576849,4.145353,-2.984688,-2.535895,-1.641451,-4.854615,-7.257715,7.097221,-4.413676,2.060273,-5.260206,4.914374,-0.747096,2.361858,-9.003900,9.042089,8.719247,1.617637,-4.127030,-3.229168,-7.877786,-6.406968,-8.991134,8.105257,-1.078736,-1.046063,-8.753305,5.997411,-6.744180,1.042573,-8.363111,9.369379,4.349922,0.658227,-0.618033,-9.891716,2.374018,2.476025,-7.105308,-1.709213,6.301536,-7.441275,-4.755705,1.639254,-5.682139,3.610322,0.858144,-6.763105,6.248915,-7.665915,2.553696,-1.363624,4.171790,-6.780290,4.774406,2.839945,2.702210,-2.386345,5.744845,-5.397762,-3.212951,-6.084971,8.572872,-9.502088,3.845720,-2.376187,5.753134,1.012424,5.033305,2.044495,-3.045973,8.714955,-5.550290,3.470083,0.672008,8.720647,1.900527,3.139514,0.999140,3.854274,5.892081], dtype = "float32")#candidate|9622|(330,)|const|float32
call_9621 = relay.TupleGetItem(func_6481_call(relay.reshape(const_9622.astype('float32'), [330,])), 3)
call_9623 = relay.TupleGetItem(func_6483_call(relay.reshape(const_9622.astype('float32'), [330,])), 3)
func_5274_call = mod.get_global_var('func_5274')
func_5276_call = mutated_mod.get_global_var('func_5276')
call_9625 = func_5274_call()
call_9626 = func_5274_call()
func_2936_call = mod.get_global_var('func_2936')
func_2937_call = mutated_mod.get_global_var('func_2937')
call_9633 = relay.TupleGetItem(func_2936_call(), 0)
call_9634 = relay.TupleGetItem(func_2937_call(), 0)
func_8402_call = mod.get_global_var('func_8402')
func_8403_call = mutated_mod.get_global_var('func_8403')
call_9648 = relay.TupleGetItem(func_8402_call(), 0)
call_9649 = relay.TupleGetItem(func_8403_call(), 0)
uop_9657 = relay.log10(uop_9610.astype('float64')) # shape=(11, 9, 7)
func_8749_call = mod.get_global_var('func_8749')
func_8750_call = mutated_mod.get_global_var('func_8750')
call_9682 = relay.TupleGetItem(func_8749_call(), 0)
call_9683 = relay.TupleGetItem(func_8750_call(), 0)
uop_9703 = relay.log(uop_9610.astype('float64')) # shape=(11, 9, 7)
func_6364_call = mod.get_global_var('func_6364')
func_6365_call = mutated_mod.get_global_var('func_6365')
call_9723 = relay.TupleGetItem(func_6364_call(), 0)
call_9724 = relay.TupleGetItem(func_6365_call(), 0)
func_6649_call = mod.get_global_var('func_6649')
func_6651_call = mutated_mod.get_global_var('func_6651')
call_9741 = relay.TupleGetItem(func_6649_call(), 0)
call_9742 = relay.TupleGetItem(func_6651_call(), 0)
output = relay.Tuple([call_9621,const_9622,call_9625,call_9633,call_9648,uop_9657,call_9682,uop_9703,call_9723,call_9741,])
output2 = relay.Tuple([call_9623,const_9622,call_9626,call_9634,call_9649,uop_9657,call_9683,uop_9703,call_9724,call_9742,])
func_9762 = relay.Function([], output)
mod['func_9762'] = func_9762
mod = relay.transform.InferType()(mod)
mutated_mod['func_9762'] = func_9762
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9762_call = mutated_mod.get_global_var('func_9762')
call_9763 = func_9762_call()
output = call_9763
func_9764 = relay.Function([], output)
mutated_mod['func_9764'] = func_9764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7300_call = mod.get_global_var('func_7300')
func_7301_call = mutated_mod.get_global_var('func_7301')
call_9823 = func_7300_call()
call_9824 = func_7300_call()
func_5163_call = mod.get_global_var('func_5163')
func_5164_call = mutated_mod.get_global_var('func_5164')
call_9830 = relay.TupleGetItem(func_5163_call(), 0)
call_9831 = relay.TupleGetItem(func_5164_call(), 0)
func_1568_call = mod.get_global_var('func_1568')
func_1571_call = mutated_mod.get_global_var('func_1571')
var_9845 = relay.var("var_9845", dtype = "float32", shape = (320,))#candidate|9845|(320,)|var|float32
call_9844 = relay.TupleGetItem(func_1568_call(relay.reshape(var_9845.astype('float32'), [16, 2, 10])), 0)
call_9846 = relay.TupleGetItem(func_1571_call(relay.reshape(var_9845.astype('float32'), [16, 2, 10])), 0)
func_6481_call = mod.get_global_var('func_6481')
func_6483_call = mutated_mod.get_global_var('func_6483')
const_9862 = relay.const([-9.682945,-2.303305,-0.293488,5.694846,-4.711423,9.798826,5.502545,6.395511,5.834874,-4.982360,-2.588878,-5.791554,7.041296,4.492782,4.771890,-3.958245,-5.426066,-9.852103,2.070339,8.453653,-9.312440,-1.654735,5.930674,3.389015,7.243375,-1.654705,6.373610,-1.890460,2.720140,5.724655,1.062868,-0.626059,-4.382088,-2.315500,-1.646267,6.004583,-2.714772,-5.261933,4.070051,-3.625520,5.790943,-8.371775,9.322264,-9.182439,-6.777367,8.271044,8.781997,8.045559,-0.311314,0.734715,-7.166084,-6.991753,9.097239,-6.375434,-4.703846,9.904740,6.981401,-6.287434,-2.655619,5.896485,-6.421273,-9.752529,-7.807822,4.780413,9.501385,6.353392,0.143606,-2.183877,-4.615475,-3.790179,-8.013820,7.497740,3.825566,-4.165635,-2.931897,1.929502,0.116604,-9.321537,2.063540,-6.927508,-9.607614,-4.684749,2.688511,-8.853526,1.472901,-5.606496,9.846727,-9.292109,8.939490,-8.094458,-5.881442,-3.116375,-3.723968,-9.358941,-8.464615,-4.110870,-0.549386,5.883396,-7.058319,-0.168737,-6.778694,1.733392,-8.340853,-8.860088,-5.044103,4.154690,-3.407553,-6.118827,-3.690033,4.871824,-7.143933,7.068663,-5.013906,-1.456997,6.052404,6.767248,-4.313223,9.332582,-7.197899,-2.204908,-1.464741,9.926110,-0.903283,4.137675,-1.965739,8.313768,2.465760,-9.125946,7.902784,-0.214904,3.139152,-5.839491,-9.856458,-1.635163,-1.315172,0.891201,-8.137597,1.701126,1.990751,0.345338,0.498671,-1.527491,3.303498,9.227659,6.913660,3.393638,0.626288,-4.540994,0.368113,-6.191387,-8.888652,4.312038,-8.364282,9.719420,2.438010,-5.434118,3.553773,7.041029,6.524591,-9.828988,-5.989585,0.048174,9.543721,4.765984,-6.835489,-1.823403,-3.068033,4.399801,4.309001,-5.301480,3.797436,9.651688,5.978748,7.282673,7.678316,3.162822,-7.774289,4.591564,0.747734,-1.819833,-6.971774,-6.150364,-7.874183,-5.294778,-6.937572,6.244039,4.851701,-2.865595,8.272317,5.181300,3.820143,4.891983,0.849920,-6.232883,7.523556,-8.140555,2.053784,-0.483813,-5.765851,2.236942,6.306107,-9.064607,-1.664969,4.055226,-6.004911,-7.590305,-0.772723,9.445854,1.444122,-1.613285,2.253237,-1.832556,8.391481,-0.632529,0.445112,-2.352408,-5.695593,1.641939,4.581081,8.988441,2.126615,-7.303363,9.747508,1.611781,4.455001,9.600196,-2.870480,2.895848,4.937154,0.870762,-4.993166,5.325372,-5.012123,7.888945,-2.071142,-5.915780,-1.733950,6.398652,-5.556424,-8.767226,-4.631407,-9.108388,-6.929177,-2.644478,-4.192767,-5.589212,2.668374,0.818835,7.253925,7.874213,2.654366,4.069276,-6.789354,6.596039,-3.765190,-4.236279,-9.815834,0.639838,9.505963,-1.002654,-6.084126,-0.592109,-8.098220,5.635939,-6.308832,9.643356,-0.382880,6.032325,4.996481,-7.023325,4.476389,-9.642665,0.384175,-7.706236,6.631537,-6.226338,1.881741,5.858140,9.345101,8.118866,-9.002424,9.148164,-0.855380,3.761217,-6.295661,2.704325,3.555225,2.637914,7.310099,0.502946,-7.474864,-5.072469,-1.259696,8.859616,4.677302,1.401108,-4.814736,-4.960808,2.206833,-9.160161,8.717219,1.964345,-4.321448,-4.050632,-0.860256,-2.354400,7.368302,5.691352,4.880699,7.370739,9.483365,-8.793672,-6.688991,-2.707426,-9.411811,5.408977,-6.900406,-4.650844,5.474327,7.746967,-5.237538,-9.202304,-1.730829,4.825014,-5.504619,-4.253266,7.418201,4.270038,-6.385501,-1.050782], dtype = "float32")#candidate|9862|(330,)|const|float32
call_9861 = relay.TupleGetItem(func_6481_call(relay.reshape(const_9862.astype('float32'), [330,])), 2)
call_9863 = relay.TupleGetItem(func_6483_call(relay.reshape(const_9862.astype('float32'), [330,])), 2)
output = relay.Tuple([call_9823,call_9830,call_9844,var_9845,call_9861,const_9862,])
output2 = relay.Tuple([call_9824,call_9831,call_9846,var_9845,call_9863,const_9862,])
func_9866 = relay.Function([var_9845,], output)
mod['func_9866'] = func_9866
mod = relay.transform.InferType()(mod)
var_9867 = relay.var("var_9867", dtype = "float32", shape = (320,))#candidate|9867|(320,)|var|float32
output = func_9866(var_9867)
func_9868 = relay.Function([var_9867], output)
mutated_mod['func_9868'] = func_9868
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5974_call = mod.get_global_var('func_5974')
func_5976_call = mutated_mod.get_global_var('func_5976')
call_9962 = relay.TupleGetItem(func_5974_call(), 0)
call_9963 = relay.TupleGetItem(func_5976_call(), 0)
func_6523_call = mod.get_global_var('func_6523')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_9966 = func_6523_call()
call_9967 = func_6523_call()
output = relay.Tuple([call_9962,call_9966,])
output2 = relay.Tuple([call_9963,call_9967,])
func_9988 = relay.Function([], output)
mod['func_9988'] = func_9988
mod = relay.transform.InferType()(mod)
output = func_9988()
func_9989 = relay.Function([], output)
mutated_mod['func_9989'] = func_9989
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2447_call = mod.get_global_var('func_2447')
func_2449_call = mutated_mod.get_global_var('func_2449')
call_10048 = relay.TupleGetItem(func_2447_call(), 2)
call_10049 = relay.TupleGetItem(func_2449_call(), 2)
func_3399_call = mod.get_global_var('func_3399')
func_3402_call = mutated_mod.get_global_var('func_3402')
var_10055 = relay.var("var_10055", dtype = "uint32", shape = (660,))#candidate|10055|(660,)|var|uint32
call_10054 = func_3399_call(relay.reshape(var_10055.astype('uint32'), [165, 4]))
call_10056 = func_3399_call(relay.reshape(var_10055.astype('uint32'), [165, 4]))
var_10058 = relay.var("var_10058", dtype = "int16", shape = (165, 4))#candidate|10058|(165, 4)|var|int16
bop_10059 = relay.multiply(call_10054.astype('int8'), relay.reshape(var_10058.astype('int8'), relay.shape_of(call_10054))) # shape=(165, 4)
bop_10062 = relay.multiply(call_10056.astype('int8'), relay.reshape(var_10058.astype('int8'), relay.shape_of(call_10056))) # shape=(165, 4)
uop_10066 = relay.atanh(call_10054.astype('float64')) # shape=(165, 4)
uop_10068 = relay.atanh(call_10056.astype('float64')) # shape=(165, 4)
func_6481_call = mod.get_global_var('func_6481')
func_6483_call = mutated_mod.get_global_var('func_6483')
var_10070 = relay.var("var_10070", dtype = "float32", shape = (1, 330))#candidate|10070|(1, 330)|var|float32
call_10069 = relay.TupleGetItem(func_6481_call(relay.reshape(var_10070.astype('float32'), [330,])), 4)
call_10071 = relay.TupleGetItem(func_6483_call(relay.reshape(var_10070.astype('float32'), [330,])), 4)
func_5309_call = mod.get_global_var('func_5309')
func_5310_call = mutated_mod.get_global_var('func_5310')
call_10072 = relay.TupleGetItem(func_5309_call(), 0)
call_10073 = relay.TupleGetItem(func_5310_call(), 0)
bop_10082 = relay.greater(uop_10066.astype('bool'), relay.reshape(var_10058.astype('bool'), relay.shape_of(uop_10066))) # shape=(165, 4)
bop_10085 = relay.greater(uop_10068.astype('bool'), relay.reshape(var_10058.astype('bool'), relay.shape_of(uop_10068))) # shape=(165, 4)
output = relay.Tuple([call_10048,var_10055,bop_10059,call_10069,var_10070,call_10072,bop_10082,])
output2 = relay.Tuple([call_10049,var_10055,bop_10062,call_10071,var_10070,call_10073,bop_10085,])
func_10086 = relay.Function([var_10055,var_10058,var_10070,], output)
mod['func_10086'] = func_10086
mod = relay.transform.InferType()(mod)
mutated_mod['func_10086'] = func_10086
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10086_call = mutated_mod.get_global_var('func_10086')
var_10088 = relay.var("var_10088", dtype = "uint32", shape = (660,))#candidate|10088|(660,)|var|uint32
var_10089 = relay.var("var_10089", dtype = "int16", shape = (165, 4))#candidate|10089|(165, 4)|var|int16
var_10090 = relay.var("var_10090", dtype = "float32", shape = (1, 330))#candidate|10090|(1, 330)|var|float32
call_10087 = func_10086_call(var_10088,var_10089,var_10090,)
output = call_10087
func_10091 = relay.Function([var_10088,var_10089,var_10090,], output)
mutated_mod['func_10091'] = func_10091
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4878_call = mod.get_global_var('func_4878')
func_4880_call = mutated_mod.get_global_var('func_4880')
call_10155 = func_4878_call()
call_10156 = func_4878_call()
output = call_10155
output2 = call_10156
func_10164 = relay.Function([], output)
mod['func_10164'] = func_10164
mod = relay.transform.InferType()(mod)
output = func_10164()
func_10165 = relay.Function([], output)
mutated_mod['func_10165'] = func_10165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5874_call = mod.get_global_var('func_5874')
func_5875_call = mutated_mod.get_global_var('func_5875')
call_10176 = func_5874_call()
call_10177 = func_5874_call()
output = call_10176
output2 = call_10177
func_10197 = relay.Function([], output)
mod['func_10197'] = func_10197
mod = relay.transform.InferType()(mod)
output = func_10197()
func_10198 = relay.Function([], output)
mutated_mod['func_10198'] = func_10198
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10256 = relay.var("var_10256", dtype = "int32", shape = (12, 13, 3))#candidate|10256|(12, 13, 3)|var|int32
var_10257 = relay.var("var_10257", dtype = "int32", shape = (12, 13, 3))#candidate|10257|(12, 13, 3)|var|int32
bop_10258 = relay.bitwise_and(var_10256.astype('int32'), relay.reshape(var_10257.astype('int32'), relay.shape_of(var_10256))) # shape=(12, 13, 3)
func_6523_call = mod.get_global_var('func_6523')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_10269 = func_6523_call()
call_10270 = func_6523_call()
func_8979_call = mod.get_global_var('func_8979')
func_8981_call = mutated_mod.get_global_var('func_8981')
call_10283 = func_8979_call()
call_10284 = func_8979_call()
func_7879_call = mod.get_global_var('func_7879')
func_7880_call = mutated_mod.get_global_var('func_7880')
call_10287 = relay.TupleGetItem(func_7879_call(), 0)
call_10288 = relay.TupleGetItem(func_7880_call(), 0)
output = relay.Tuple([bop_10258,call_10269,call_10283,call_10287,])
output2 = relay.Tuple([bop_10258,call_10270,call_10284,call_10288,])
func_10290 = relay.Function([var_10256,var_10257,], output)
mod['func_10290'] = func_10290
mod = relay.transform.InferType()(mod)
var_10291 = relay.var("var_10291", dtype = "int32", shape = (12, 13, 3))#candidate|10291|(12, 13, 3)|var|int32
var_10292 = relay.var("var_10292", dtype = "int32", shape = (12, 13, 3))#candidate|10292|(12, 13, 3)|var|int32
output = func_10290(var_10291,var_10292,)
func_10293 = relay.Function([var_10291,var_10292,], output)
mutated_mod['func_10293'] = func_10293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7711_call = mod.get_global_var('func_7711')
func_7712_call = mutated_mod.get_global_var('func_7712')
call_10308 = relay.TupleGetItem(func_7711_call(), 0)
call_10309 = relay.TupleGetItem(func_7712_call(), 0)
output = call_10308
output2 = call_10309
func_10316 = relay.Function([], output)
mod['func_10316'] = func_10316
mod = relay.transform.InferType()(mod)
mutated_mod['func_10316'] = func_10316
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10316_call = mutated_mod.get_global_var('func_10316')
call_10317 = func_10316_call()
output = call_10317
func_10318 = relay.Function([], output)
mutated_mod['func_10318'] = func_10318
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6523_call = mod.get_global_var('func_6523')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_10376 = func_6523_call()
call_10377 = func_6523_call()
func_2968_call = mod.get_global_var('func_2968')
func_2971_call = mutated_mod.get_global_var('func_2971')
const_10379 = relay.const([[4.639878,3.252759,-6.617161,4.703412,3.910755,4.655081],[-2.222467,-2.864313,-7.347625,-3.223244,5.443039,2.015985],[-6.510016,3.196067,-1.481268,6.654371,-5.532456,-7.277719],[-4.663071,1.442513,-1.721009,9.106152,-6.862481,1.350405],[-1.466990,2.999170,5.079966,-1.856143,5.080251,-1.616143],[-8.056137,3.976476,-5.432152,7.013257,5.180782,-8.785083],[-6.466502,-7.348109,9.688361,0.817728,2.046223,1.392157],[-6.933673,-2.962114,2.084899,0.643204,-7.926313,-1.493629],[-3.457621,0.481531,-4.007764,3.282900,1.770317,2.159358],[-8.843038,-9.371027,2.215058,-2.578492,0.176462,0.046832],[0.009895,3.876060,2.387833,-1.790351,2.682363,8.456671],[7.453124,-0.695236,-3.766358,9.306679,6.768196,-6.411567],[-1.191456,-8.905001,5.061527,-2.026124,-4.692911,-2.493369],[-6.714847,5.323733,-0.619631,4.230654,-7.413930,-0.352609],[-4.330924,9.495195,-0.125567,-7.834153,-2.781357,-0.098952],[9.093676,-5.808745,-5.057155,9.551881,9.984028,4.434852],[-4.290066,3.519948,-4.580881,7.023217,9.385763,-4.009099],[0.389591,-4.868349,5.005471,6.198157,-0.044764,-9.097624],[7.901301,3.497850,6.808787,-7.531668,5.616019,-1.115044],[-3.618145,-2.994941,-3.009853,2.677257,-3.089797,8.179385],[-2.505481,-6.228603,-2.549898,-0.675222,-3.573390,-0.373630],[-2.001028,5.925488,-8.584737,4.295577,-8.748598,-5.405819],[2.035326,-0.425152,-5.052634,5.962483,-4.986773,1.679588],[8.332751,-8.454005,2.118812,6.914807,-7.018139,5.410970],[-2.798060,0.862575,9.038852,0.020257,6.131976,-3.659696],[7.189553,-2.815181,6.076159,-5.420670,0.778356,-7.833146],[6.486282,-6.912451,8.300930,-9.045118,6.874765,-5.896905],[2.471517,1.332154,3.730664,-8.448873,0.109473,-3.430026],[-6.616348,3.817714,-4.712343,-5.918189,8.476707,2.496092],[7.213441,-7.967314,5.925974,7.265446,-2.914503,2.603842],[-5.875612,-0.282102,-1.664396,-5.868355,8.418976,0.541337],[2.075774,8.225382,-3.227532,4.930010,-2.878054,-1.360178],[-7.342184,7.808950,-1.262576,-2.170549,-2.065474,9.998230],[-5.854798,-5.631673,2.053626,3.730674,4.012875,-2.369499],[6.537717,9.131330,1.207014,9.972129,7.250563,6.661831],[0.218547,-1.380411,-8.364696,-6.333245,0.973008,6.396410],[-7.604285,-6.171914,1.997161,-6.862248,-0.684329,7.760615],[2.908047,-7.236896,8.624698,0.007683,7.788323,-4.242235],[7.296600,-1.516961,7.271309,3.686615,-1.222406,-5.453835],[-1.941686,-9.952786,-2.367811,4.879514,-6.356718,1.453929],[9.610140,-0.531206,-1.925108,-1.192485,-8.872390,8.160666],[-0.468860,1.827888,-5.981576,5.092585,-8.409399,1.563370],[7.227337,6.768439,-3.635074,9.254395,2.516499,0.338715],[-6.333315,1.015108,-3.945120,2.522478,1.927258,-2.455119],[-0.940484,4.008681,9.206678,4.335562,3.657296,3.005170],[8.426201,8.505729,-6.284921,9.337120,-4.899661,3.473507],[4.146575,-5.819984,-2.448880,-8.758153,-4.960318,8.746086],[-5.521045,-9.544472,9.416974,-3.057255,-8.591075,2.393314],[-2.355114,6.411736,0.737583,6.688886,0.710377,-6.500081],[-1.023726,-7.150030,-5.418170,7.422684,6.274225,-3.085287],[1.208737,5.469804,-7.155112,-3.191077,9.003351,9.231788],[0.768004,0.467401,-7.882239,-9.248530,-5.423618,8.928215],[-1.718541,-3.964104,-5.518612,2.141709,3.609156,2.243206],[8.091509,-9.210376,-2.803921,-5.589025,-0.139989,-0.838855],[6.672198,-5.136385,-5.366177,-1.269119,-0.977148,-8.722148]], dtype = "float32")#candidate|10379|(55, 6)|const|float32
call_10378 = relay.TupleGetItem(func_2968_call(relay.reshape(const_10379.astype('float32'), [165, 2])), 1)
call_10380 = relay.TupleGetItem(func_2971_call(relay.reshape(const_10379.astype('float32'), [165, 2])), 1)
output = relay.Tuple([call_10376,call_10378,const_10379,])
output2 = relay.Tuple([call_10377,call_10380,const_10379,])
func_10381 = relay.Function([], output)
mod['func_10381'] = func_10381
mod = relay.transform.InferType()(mod)
output = func_10381()
func_10382 = relay.Function([], output)
mutated_mod['func_10382'] = func_10382
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4644_call = mod.get_global_var('func_4644')
func_4645_call = mutated_mod.get_global_var('func_4645')
call_10407 = func_4644_call()
call_10408 = func_4644_call()
output = call_10407
output2 = call_10408
func_10409 = relay.Function([], output)
mod['func_10409'] = func_10409
mod = relay.transform.InferType()(mod)
mutated_mod['func_10409'] = func_10409
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10409_call = mutated_mod.get_global_var('func_10409')
call_10410 = func_10409_call()
output = call_10410
func_10411 = relay.Function([], output)
mutated_mod['func_10411'] = func_10411
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8279_call = mod.get_global_var('func_8279')
func_8281_call = mutated_mod.get_global_var('func_8281')
call_10480 = relay.TupleGetItem(func_8279_call(), 0)
call_10481 = relay.TupleGetItem(func_8281_call(), 0)
output = relay.Tuple([call_10480,])
output2 = relay.Tuple([call_10481,])
func_10549 = relay.Function([], output)
mod['func_10549'] = func_10549
mod = relay.transform.InferType()(mod)
mutated_mod['func_10549'] = func_10549
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10549_call = mutated_mod.get_global_var('func_10549')
call_10550 = func_10549_call()
output = call_10550
func_10551 = relay.Function([], output)
mutated_mod['func_10551'] = func_10551
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2269_call = mod.get_global_var('func_2269')
func_2270_call = mutated_mod.get_global_var('func_2270')
call_10555 = func_2269_call()
call_10556 = func_2269_call()
uop_10559 = relay.sigmoid(call_10555.astype('float64')) # shape=(13, 8, 6)
uop_10561 = relay.sigmoid(call_10556.astype('float64')) # shape=(13, 8, 6)
output = uop_10559
output2 = uop_10561
func_10562 = relay.Function([], output)
mod['func_10562'] = func_10562
mod = relay.transform.InferType()(mod)
mutated_mod['func_10562'] = func_10562
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10562_call = mutated_mod.get_global_var('func_10562')
call_10563 = func_10562_call()
output = call_10563
func_10564 = relay.Function([], output)
mutated_mod['func_10564'] = func_10564
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3276_call = mod.get_global_var('func_3276')
func_3277_call = mutated_mod.get_global_var('func_3277')
call_10569 = func_3276_call()
call_10570 = func_3276_call()
var_10578 = relay.var("var_10578", dtype = "bool", shape = (13, 8, 6))#candidate|10578|(13, 8, 6)|var|bool
bop_10579 = relay.floor_mod(call_10569.astype('float32'), relay.reshape(var_10578.astype('float32'), relay.shape_of(call_10569))) # shape=(13, 8, 6)
bop_10582 = relay.floor_mod(call_10570.astype('float32'), relay.reshape(var_10578.astype('float32'), relay.shape_of(call_10570))) # shape=(13, 8, 6)
output = bop_10579
output2 = bop_10582
func_10588 = relay.Function([var_10578,], output)
mod['func_10588'] = func_10588
mod = relay.transform.InferType()(mod)
var_10589 = relay.var("var_10589", dtype = "bool", shape = (13, 8, 6))#candidate|10589|(13, 8, 6)|var|bool
output = func_10588(var_10589)
func_10590 = relay.Function([var_10589], output)
mutated_mod['func_10590'] = func_10590
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8959_call = mod.get_global_var('func_8959')
func_8960_call = mutated_mod.get_global_var('func_8960')
call_10635 = relay.TupleGetItem(func_8959_call(), 1)
call_10636 = relay.TupleGetItem(func_8960_call(), 1)
output = call_10635
output2 = call_10636
func_10664 = relay.Function([], output)
mod['func_10664'] = func_10664
mod = relay.transform.InferType()(mod)
mutated_mod['func_10664'] = func_10664
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10664_call = mutated_mod.get_global_var('func_10664')
call_10665 = func_10664_call()
output = call_10665
func_10666 = relay.Function([], output)
mutated_mod['func_10666'] = func_10666
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10673 = relay.var("var_10673", dtype = "float64", shape = (16, 16, 1))#candidate|10673|(16, 16, 1)|var|float64
uop_10674 = relay.asin(var_10673.astype('float64')) # shape=(16, 16, 1)
output = uop_10674
output2 = uop_10674
func_10678 = relay.Function([var_10673,], output)
mod['func_10678'] = func_10678
mod = relay.transform.InferType()(mod)
mutated_mod['func_10678'] = func_10678
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10679 = relay.var("var_10679", dtype = "float64", shape = (16, 16, 1))#candidate|10679|(16, 16, 1)|var|float64
func_10678_call = mutated_mod.get_global_var('func_10678')
call_10680 = func_10678_call(var_10679)
output = call_10680
func_10681 = relay.Function([var_10679], output)
mutated_mod['func_10681'] = func_10681
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6428_call = mod.get_global_var('func_6428')
func_6429_call = mutated_mod.get_global_var('func_6429')
call_10693 = func_6428_call()
call_10694 = func_6428_call()
func_8154_call = mod.get_global_var('func_8154')
func_8155_call = mutated_mod.get_global_var('func_8155')
call_10704 = relay.TupleGetItem(func_8154_call(), 0)
call_10705 = relay.TupleGetItem(func_8155_call(), 0)
output = relay.Tuple([call_10693,call_10704,])
output2 = relay.Tuple([call_10694,call_10705,])
func_10711 = relay.Function([], output)
mod['func_10711'] = func_10711
mod = relay.transform.InferType()(mod)
mutated_mod['func_10711'] = func_10711
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10711_call = mutated_mod.get_global_var('func_10711')
call_10712 = func_10711_call()
output = call_10712
func_10713 = relay.Function([], output)
mutated_mod['func_10713'] = func_10713
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7548_call = mod.get_global_var('func_7548')
func_7549_call = mutated_mod.get_global_var('func_7549')
call_10777 = func_7548_call()
call_10778 = func_7548_call()
func_8102_call = mod.get_global_var('func_8102')
func_8104_call = mutated_mod.get_global_var('func_8104')
call_10784 = relay.TupleGetItem(func_8102_call(), 2)
call_10785 = relay.TupleGetItem(func_8104_call(), 2)
uop_10786 = relay.log10(call_10777.astype('float32')) # shape=(16, 14, 14)
uop_10788 = relay.log10(call_10778.astype('float32')) # shape=(16, 14, 14)
output = relay.Tuple([call_10784,uop_10786,])
output2 = relay.Tuple([call_10785,uop_10788,])
func_10793 = relay.Function([], output)
mod['func_10793'] = func_10793
mod = relay.transform.InferType()(mod)
output = func_10793()
func_10794 = relay.Function([], output)
mutated_mod['func_10794'] = func_10794
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5531_call = mod.get_global_var('func_5531')
func_5532_call = mutated_mod.get_global_var('func_5532')
call_10816 = func_5531_call()
call_10817 = func_5531_call()
func_10678_call = mod.get_global_var('func_10678')
func_10681_call = mutated_mod.get_global_var('func_10681')
const_10844 = relay.const([-6.224485,-4.140415,-3.528821,3.173399,5.561886,-7.466641,-1.980770,-4.374511,5.774106,-9.809784,-8.829645,-4.925679,9.053420,5.515046,6.150321,-8.402083,4.220826,6.151113,1.894502,-3.790799,-4.354059,-0.971756,-6.647424,0.786641,0.589732,-8.292413,-9.015717,4.678692,-7.646413,2.405541,6.333106,7.510016,-1.817289,-8.957367,3.795898,-2.089576,3.049354,4.997478,6.505423,-7.852735,-5.455376,-1.418230,8.320768,5.807774,7.658888,-8.810605,-2.683092,4.721651,-5.306370,-8.101936,-1.372200,-6.753383,6.485060,7.515693,-4.169941,8.831825,-7.405069,0.712797,1.636255,2.893872,7.600854,6.598681,9.184207,-7.328728,0.612217,-2.902413,2.767274,9.025322,-0.724320,-4.221498,-1.457973,7.542441,6.082240,2.778371,0.168678,9.325835,-5.517425,-4.137944,6.814465,1.280903,6.852034,-0.374921,-8.777762,3.081318,-5.177608,4.777272,-5.727017,-6.903147,-9.556047,-8.187559,-1.351324,-6.181118,4.005410,3.883105,-7.475735,7.817526,-6.906689,-7.016850,1.927459,5.582347,0.120486,9.416758,8.811540,-3.502637,1.062617,-5.832654,-1.869743,-4.452788,1.384722,3.093714,-5.741626,-7.248034,-4.973230,-2.978614,-2.670945,-0.083304,-1.466175,7.363774,3.274879,1.922714,7.084053,-5.646300,9.068332,5.206366,-1.605754,-3.189426,5.935955,2.809966,1.378030,2.871734,8.188506,-4.496333,2.108910,-1.341252,2.306084,4.247057,2.396229,-1.743768,-8.075115,5.563121,-0.744080,-2.416897,-7.589025,-3.462317,1.880064,-7.053329,4.158050,-0.528207,-4.928490,2.380835,7.137923,-2.406139,-7.156353,7.527771,-2.848181,-5.935112,-8.854853,-0.675300,-1.774378,-3.934918,9.867754,0.887723,2.511553,8.045224,-4.521801,2.820100,-3.635655,-5.169813,4.763394,0.132851,-9.968094,-0.510547,-7.574491,-2.874184,2.211779,-1.495574,0.419917,9.464342,-2.478302,-8.871906,0.890261,-8.033843,-0.170657,0.384866,-0.930936,0.120222,-7.350746,1.989551,7.369224,4.354207,-6.637424,3.815044,8.642103,6.199947,9.347540,-2.127386,3.276788,-9.923318,8.011523,6.146274,5.196279,1.430134,1.470396,-1.849725,-8.810636,6.783048,-1.616356,-6.370578,-6.794021,4.219271,9.311707,-3.772469,-1.773452,-0.254145,-9.045005,1.962929,0.378733,7.941017,8.500969,1.388960,-7.337519,-5.629037,3.619961,-3.434868,-6.927120,8.694197,-6.780627,2.197768,1.902971,-7.912028,7.169945,3.903156,-2.476756,8.431578,-3.591503,6.833285,-3.783929,1.564050,-5.576757,7.059956,1.929388,6.291665,-1.936965,-0.713023,-5.978871,-5.820311,-9.317959,-6.948589,-9.990111,-5.090993,-3.029836,3.837780,-3.262286,-6.525830,6.888485,6.061857], dtype = "float64")#candidate|10844|(256,)|const|float64
call_10843 = func_10678_call(relay.reshape(const_10844.astype('float64'), [16, 16, 1]))
call_10845 = func_10678_call(relay.reshape(const_10844.astype('float64'), [16, 16, 1]))
output = relay.Tuple([call_10816,call_10843,const_10844,])
output2 = relay.Tuple([call_10817,call_10845,const_10844,])
func_10848 = relay.Function([], output)
mod['func_10848'] = func_10848
mod = relay.transform.InferType()(mod)
mutated_mod['func_10848'] = func_10848
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10848_call = mutated_mod.get_global_var('func_10848')
call_10849 = func_10848_call()
output = call_10849
func_10850 = relay.Function([], output)
mutated_mod['func_10850'] = func_10850
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10409_call = mod.get_global_var('func_10409')
func_10411_call = mutated_mod.get_global_var('func_10411')
call_10857 = func_10409_call()
call_10858 = func_10409_call()
func_4087_call = mod.get_global_var('func_4087')
func_4088_call = mutated_mod.get_global_var('func_4088')
call_10870 = relay.TupleGetItem(func_4087_call(), 0)
call_10871 = relay.TupleGetItem(func_4088_call(), 0)
func_9988_call = mod.get_global_var('func_9988')
func_9989_call = mutated_mod.get_global_var('func_9989')
call_10894 = relay.TupleGetItem(func_9988_call(), 1)
call_10895 = relay.TupleGetItem(func_9989_call(), 1)
func_10664_call = mod.get_global_var('func_10664')
func_10666_call = mutated_mod.get_global_var('func_10666')
call_10903 = func_10664_call()
call_10904 = func_10664_call()
func_5309_call = mod.get_global_var('func_5309')
func_5310_call = mutated_mod.get_global_var('func_5310')
call_10919 = relay.TupleGetItem(func_5309_call(), 0)
call_10920 = relay.TupleGetItem(func_5310_call(), 0)
output = relay.Tuple([call_10857,call_10870,call_10894,call_10903,call_10919,])
output2 = relay.Tuple([call_10858,call_10871,call_10895,call_10904,call_10920,])
func_10933 = relay.Function([], output)
mod['func_10933'] = func_10933
mod = relay.transform.InferType()(mod)
output = func_10933()
func_10934 = relay.Function([], output)
mutated_mod['func_10934'] = func_10934
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10958 = relay.var("var_10958", dtype = "uint32", shape = (6, 3, 1))#candidate|10958|(6, 3, 1)|var|uint32
var_10959 = relay.var("var_10959", dtype = "uint32", shape = (6, 3, 5))#candidate|10959|(6, 3, 5)|var|uint32
bop_10960 = relay.maximum(var_10958.astype('uint32'), var_10959.astype('uint32')) # shape=(6, 3, 5)
output = bop_10960
output2 = bop_10960
func_10965 = relay.Function([var_10958,var_10959,], output)
mod['func_10965'] = func_10965
mod = relay.transform.InferType()(mod)
var_10966 = relay.var("var_10966", dtype = "uint32", shape = (6, 3, 1))#candidate|10966|(6, 3, 1)|var|uint32
var_10967 = relay.var("var_10967", dtype = "uint32", shape = (6, 3, 5))#candidate|10967|(6, 3, 5)|var|uint32
output = func_10965(var_10966,var_10967,)
func_10968 = relay.Function([var_10966,var_10967,], output)
mutated_mod['func_10968'] = func_10968
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7385_call = mod.get_global_var('func_7385')
func_7387_call = mutated_mod.get_global_var('func_7387')
call_11037 = relay.TupleGetItem(func_7385_call(), 1)
call_11038 = relay.TupleGetItem(func_7387_call(), 1)
output = call_11037
output2 = call_11038
func_11045 = relay.Function([], output)
mod['func_11045'] = func_11045
mod = relay.transform.InferType()(mod)
mutated_mod['func_11045'] = func_11045
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11045_call = mutated_mod.get_global_var('func_11045')
call_11046 = func_11045_call()
output = call_11046
func_11047 = relay.Function([], output)
mutated_mod['func_11047'] = func_11047
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2470_call = mod.get_global_var('func_2470')
func_2471_call = mutated_mod.get_global_var('func_2471')
call_11093 = relay.TupleGetItem(func_2470_call(), 0)
call_11094 = relay.TupleGetItem(func_2471_call(), 0)
uop_11109 = relay.cos(call_11093.astype('float64')) # shape=(165, 1)
uop_11111 = relay.cos(call_11094.astype('float64')) # shape=(165, 1)
func_8484_call = mod.get_global_var('func_8484')
func_8487_call = mutated_mod.get_global_var('func_8487')
var_11113 = relay.var("var_11113", dtype = "float64", shape = (1155,))#candidate|11113|(1155,)|var|float64
call_11112 = relay.TupleGetItem(func_8484_call(relay.reshape(var_11113.astype('float64'), [15, 11, 7])), 3)
call_11114 = relay.TupleGetItem(func_8487_call(relay.reshape(var_11113.astype('float64'), [15, 11, 7])), 3)
func_5913_call = mod.get_global_var('func_5913')
func_5914_call = mutated_mod.get_global_var('func_5914')
call_11117 = relay.TupleGetItem(func_5913_call(), 0)
call_11118 = relay.TupleGetItem(func_5914_call(), 0)
output = relay.Tuple([uop_11109,call_11112,var_11113,call_11117,])
output2 = relay.Tuple([uop_11111,call_11114,var_11113,call_11118,])
func_11126 = relay.Function([var_11113,], output)
mod['func_11126'] = func_11126
mod = relay.transform.InferType()(mod)
mutated_mod['func_11126'] = func_11126
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11127 = relay.var("var_11127", dtype = "float64", shape = (1155,))#candidate|11127|(1155,)|var|float64
func_11126_call = mutated_mod.get_global_var('func_11126')
call_11128 = func_11126_call(var_11127)
output = call_11128
func_11129 = relay.Function([var_11127], output)
mutated_mod['func_11129'] = func_11129
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10562_call = mod.get_global_var('func_10562')
func_10564_call = mutated_mod.get_global_var('func_10564')
call_11145 = func_10562_call()
call_11146 = func_10562_call()
func_5805_call = mod.get_global_var('func_5805')
func_5809_call = mutated_mod.get_global_var('func_5809')
const_11174 = relay.const([3,1,9,-5,-9,4,3,-6,-4,6,4,8,7,9,5,5,7,5,1,2,3,2,8,6,-2,-7,4,-2,9,8,-7,-3,10,8,-6,-1,-10,4,-3,-8,-3,-1,8,9,-9,3,-2,8,-2,3,-9,-6,-9,7,-1,5,9,10,-3,7,7,-6,6,-1,2,-6,-10,2,-5,1,1,1,-4,-9,1,9,-6,7,10,-10,-1,5,-1,1,5,1,10,8,-4,-10,-3,-10,-3,10,-4,8,-7,7,2,-3,1,-7,-7,-4,-1,5,-5,-2,-2,4,3,1,6,7,7,-7,7,9,8,-6,-10,-5,-5,-5,-9,3,2,-1,2,-6,-9,7,-8,1,-10,7,7,-6,10,1,4,-3,-10,3,-4,10,4,1,-4,10,-9,-7,-10,1,6,-1,-6,7,1,-7,-10,2,6,8,8,-7,6,7,7,-5,-8,3,5,9,9,2,-4,-7,-10,4,4,8,3,5,-1,-5,9,4,-8,-9,-2,-8,7,-9,-10,-8,-4,4,10,-9,10,-2,2,4,-3,-8,-7,-3,4,3,5,-10,-8,8,4,10,9,-4,10,-10,-4,-9,-7,-5,-4,-6,-2,10,9,-7,-3,-6,1,-3,1,-5,6,-3,-4,-5,-7,-9,-5,8,-5,8,1,2,5,4,-1,-10,3,-1,2,-7,-4,7,-3,5,9,8,9,-2,5,2,-5,4,-6,6,10,-6,-10,-8,-7,3,-8,7,-10,2,7,1,6,9,-2,-1,-10,9,-1,3,9,5,-8,3,-1,1,-10,-9,10,2,5,-6,-10,5,9,-9,-5,-6,-7,8,7,-6,-6,7,7,9,1,-6,-8,2,8,-8,6,-3,4,-10,5,-9,-3,6,-6,-1,-8,-7,8,8,1,-9,1,-9,-5,7,7,8,4,1,9,-6,8,7,-5,4,-10,-2,-4,9,9,9,4,7,5,6,9,3,5,5,-5,-5,-9,8,-7,-5,3,-4,5,-2,9,-4,-2,-6,-7,7,10,-6,9,4,-1,6,-5,10,2,-10,-2,9,-1,10,-6,7,1,6,-7,7,1,1,-4,4,3,-6,8,10,10,7,-9,3,10,-1,2,-5,1,-7,-9,2,-6,-6,4,6,-5,10,-7,-3,2,4,-2,-7,8,-2,6,6,2,8,7,-8,7,8,10,-1,-7,-8,-5,-6,8,8,9,8,8,-7,-10,-9,2,-8,-1,7,-3,9,-2,9,-10,-6,2,2,9,-5,2,-3,3,7,10,2,-10,1,5,-4,8,-3,3,8,-5,-9,9,1,3,6,5,7,10,-7,-8,7,10,-6,-7,5,9,1,5,-10,2,-2,-7,-2,6,9,2,-2,9,-7,6,10,-5,-5,-3,-9,-4,-1,9,-5,5,-1,-3,-1,-2,-1,-8,6,-2,-4,-6,9,1,1,7,4,-2,-1,7,9,10,-8,1,-4,4,9,10,-2,-9,-10,8,8,-9,7,1,-7,-6,-1,-8,-1,2,6,7,2,10,-4,-8,-10,-3,4,3,-7,6,-7,3,-9,-7,5,-3,-3,1,-1,2,-5,-6,-1,10,-7,5,1,1,1,6,-3,-4,-2,-4,3,2,-2,-1,-9,-10,7,2,3,9,3,-3,6,3,-4,9,-4,9,3,-1,-1,1,-8,6,-8,9,-2,-8,-2,6,-9,-7,-8,-10,-6,-3,4,5,-9,-5,-7,8,9,-10,6,-8,1,-9,4,9,-2,9,8,-10,-6,-4,1,6,8,2,-4,-1,10,5,1,5,8,-1,-7,-3,-8,-8,9,-3,-2,10,-7,-10,-3,10,8,-9,-9,-3,3,-1,-1,4,-5,-6,1,-2,1,5,6,7,-1,10,-7,6,7,3,-8,-9,-1,9,-4,-8,10,8,9,2,10,-7,5,6,-3,-1,5,4,-8,8,2,7,-1,10,10,9,-3,8,-2,-1,5,-5,-3,-4,2,3,8,-7,-4,-9,10,4,-6,3,-7,4,6,10,-8,10,-8,3,-2,-7,1,3,-5,7,9,9,2,-8,3,-6,6,-1,9,-2,-8,1,6,1,1,3,7,8,7,6,7,1,9,8,9,3,1,-7,8,-8,-7,2,3,3,-7,-10,-2,8,4,-1,7,10,-8,5,-8,-8,4,-9,10,-8,1,-1,-10,4,6,7,-1,-3,8,6,3,-3,4,7,-3,8,5,-9,-8,-9,10,8,-6,10,-9,10,-10,10,-4,-5,1,3,3,-1,6,-3,-7,-10,2,-7,-6,-4,9,-2,10,-1,3,7,7,8,5,4,4,4,-3,6,7,8,1,-8,9,2,-3,-9,4,-6,1,-2,1,9,-7,5,-3,10,5,7,-7,-8,-5,-1,-6,-9,-6,-2,-6,-10,7,9,-8,-6,-8,9,-1,6,-5,6,-3,-10,5,-7,-4,4,-2,-1,-1,-5,1,4,10,9,-6,-7,-7,9,9,-3,-3,-2,1,7,-2,10,-8,-5,-4,-2,-7,-1,-5,8,-6,-5,-9,6,-10,-1,7,6,-8,2,3,-2,4,-7,-6,3,6,-1,-4,-5,1,-9,-9,-4,3,-9,-3,-7,6,5,8,4,-7,1,3,8,-1,-2,1,7,5,10,-1,-4,2,-1,-9,-4,-1,8,10,7,2,-4,-9,-6,-9,10,-7,6,-6,-10,1,1,-9,-7,-4,10,6,-10,-7,9,5,7,-6,1,-2,-8,5,7,8,-10,-8,10,-6,-1,9,2,-3,-5,-4,2,-7,8,-10,5,7,-2,-10,1,5,1,-1,-7,2,3,10,9,-6,9,-2,-3,2,5,8,-7,7,-6,-1,-3,2,-8,-3,-10,-5,-4,7,-7,-1,-10,10,1,-7,8,-7,-2,8,3,-4,10,-6,-8,2,-2,2,1,1,-9,-10,-6,-7,9,-6,-9,-7,-2,5,-4,7,-9,7,-1,3,-7,-9,1,-1,3,5,2,5,3,-5,-9,4,-3,10,-9,4,-8,-1,10,1,1,-7,8,-8,4,-1,-8,-10,5,-5,-5,-2,-1,-3,-5,6,10,9,-7,-10,-2,3,5,-1,3,7,-4,-10,2], dtype = "uint32")#candidate|11174|(1155,)|const|uint32
const_11175 = relay.const([[-3,1,-2,-5,1,1,-9,7,-4,-6,-4,-5,-6,-5,-8],[-9,3,10,8,6,-1,1,1,-4,5,-5,4,1,2,-8],[-8,3,7,-7,-1,4,-9,-1,-3,5,-4,-6,2,-8,-5],[5,5,5,1,7,-4,-5,-6,-3,-3,8,1,-8,3,-7],[4,4,-10,-3,2,5,1,-10,8,7,-4,-9,-8,1,-2],[-4,2,10,-8,7,1,7,-3,10,-2,1,3,-2,6,4],[4,6,5,-8,-9,4,-8,-3,-8,2,-9,6,2,4,-3],[-8,6,1,-2,-4,-5,-10,-7,-3,5,7,-8,-7,-2,10],[7,10,-4,3,-1,4,5,-10,6,-1,1,-4,-10,-3,9],[-6,1,-10,-9,8,3,-10,7,-3,5,1,-10,9,5,-2],[3,-3,-6,-9,9,6,1,-8,-6,-1,-5,-9,9,-6,-9],[-3,8,9,10,-10,-7,-8,-2,9,9,1,4,10,-9,2],[-7,-2,-10,1,-9,6,7,4,-2,9,3,-7,3,2,4],[-2,8,5,3,7,-7,7,9,-5,-6,-4,6,8,7,-1],[-6,1,7,4,-4,-3,6,-6,5,7,6,10,1,1,-10],[10,-7,1,-10,7,8,4,-2,-10,-2,8,-8,-1,-8,8],[9,5,-8,-2,-1,-2,-9,-4,9,-9,1,-10,-10,10,3],[8,-4,10,9,-2,-10,-1,3,1,-9,2,2,1,-2,1],[-6,9,-4,-6,10,-5,-4,-1,-4,-10,7,-5,5,2,-6],[5,6,6,5,-2,1,7,-4,4,-3,10,-6,10,2,1],[6,4,3,1,1,5,1,-9,10,-4,8,4,3,-7,7],[5,-5,-7,-8,-6,-2,-2,1,-1,-5,-8,10,-8,8,-8],[-3,-10,1,-7,-8,7,-4,-4,-10,-7,-1,-7,9,-6,1],[3,6,-4,-3,-5,6,10,2,-4,-10,-9,-8,-3,-4,-5],[2,8,-5,4,-5,-10,2,-10,7,-7,7,-7,-4,3,9],[2,-9,-9,5,4,-4,-3,-8,3,7,2,7,8,-2,-9],[10,-2,2,-3,9,-8,-4,1,2,-5,3,-4,7,-4,-2],[1,2,8,7,2,-9,-8,9,-4,3,-3,-9,1,-6,6],[-5,9,10,-5,9,4,-6,-4,2,-8,-1,3,8,7,-6],[2,-10,3,10,-9,-5,-10,3,-8,2,-2,-8,3,9,-8],[3,-8,-2,-2,-1,3,2,-7,-5,-2,10,10,-8,-2,2],[-4,1,-7,5,7,-10,9,2,-9,-8,4,4,6,10,1],[-7,9,6,-2,5,4,8,5,1,6,4,9,-7,-4,-2],[-1,9,-8,-5,-6,2,4,-5,-9,-5,-6,-9,1,-10,5],[9,3,-5,2,3,-8,8,-4,-3,1,-10,-8,-4,6,-1],[7,6,-7,1,1,-9,-9,-3,2,-6,3,-10,8,8,-9],[5,-1,4,-4,-9,-10,-5,5,-10,3,10,3,-9,-5,4],[-7,9,-2,8,-1,2,-5,-8,5,7,-3,8,-8,-6,-3],[8,1,-10,2,10,4,3,-9,10,-9,5,-4,2,9,5],[-8,6,2,-4,-3,-8,-6,-6,3,2,3,-6,10,8,-5],[5,-8,5,-6,-4,3,8,4,4,-2,-9,-4,1,-2,7],[-6,5,5,3,10,2,1,3,-6,3,5,-2,-7,-5,5],[-8,-4,4,4,-3,-7,6,-5,-3,7,-10,8,-1,6,-3],[8,2,6,-5,3,5,-1,10,-1,8,1,-10,9,-1,9],[-5,-9,3,3,8,-4,-8,5,10,10,-5,5,7,9,6],[-6,-7,10,-2,7,-10,4,-5,-3,6,2,-4,7,8,3],[-5,9,-6,1,-1,-10,7,-9,5,-7,7,10,-8,-5,4],[4,-7,-1,-1,2,9,5,8,-10,5,-1,9,-4,-10,-3],[8,-4,-10,9,7,3,3,-4,1,-1,-1,7,-6,7,1],[-2,9,4,-1,1,2,4,2,-8,9,-9,4,10,-6,-7],[7,4,5,5,10,-4,10,10,3,4,7,-4,-9,2,3],[4,1,8,-7,2,9,-2,1,2,9,-9,1,-1,2,-8],[5,5,-10,-1,-5,6,6,-4,9,-2,4,-7,7,-5,-3],[3,5,-1,-2,3,5,3,5,-10,-3,-3,6,-10,-9,-1],[8,-8,4,7,4,-3,-7,-10,-4,-7,3,-4,9,3,10],[8,-9,-10,-8,9,5,10,-8,4,-1,1,-10,-4,-2,7],[-10,-10,3,-2,-7,4,-10,-5,7,2,-2,-3,-9,-1,1],[-1,-7,9,-2,-3,-1,10,3,2,7,-9,7,3,-8,-5],[4,-1,-10,1,3,-1,-2,6,8,-7,-9,6,-6,-4,-3],[5,-6,8,-9,7,6,-6,1,-4,-9,-6,7,6,8,10],[-8,1,-1,1,-10,2,8,-4,8,-10,1,7,7,-1,-1],[8,-6,-5,-8,7,-7,-5,4,6,9,1,3,10,-1,-4],[-4,4,-9,-6,-7,6,9,1,-3,7,4,-6,8,-4,6],[3,-10,9,6,-8,-8,7,8,-3,4,4,10,4,5,6],[5,3,-6,5,-8,7,7,-3,1,-5,8,2,1,-7,-3],[8,-4,-5,3,-4,-3,7,2,-5,8,7,-1,-5,6,-9],[-4,-9,7,-9,-6,-3,2,8,-2,9,5,7,7,-10,-3],[-2,-5,-7,6,5,9,-10,-8,6,-3,1,1,6,1,10],[5,2,6,-4,-5,4,-7,-4,-5,6,-5,8,6,-5,9],[10,9,6,9,-8,9,8,-8,-4,3,1,-6,4,-2,-8],[6,7,-9,-1,-2,-5,-2,-8,3,5,1,-4,4,10,10],[-9,5,-2,-8,3,3,-1,-10,7,-3,1,-8,-1,-6,-2],[-9,1,-6,6,-5,6,-8,-2,7,2,-4,6,-8,8,-9],[10,-9,10,3,1,-9,-7,5,-3,-1,-4,10,8,-6,3],[5,1,-4,1,-1,7,-9,-6,4,-7,-6,1,-1,-3,-5],[2,10,4,-6,-1,-7,-6,-3,-3,2,5,2,-6,-6,10],[5,-1,-5,9,10,-10,-8,-7,9,-1,1,2,1,4,7],[9,8,-7,3,-6,-5,3,-3,6,10,4,3,-3,-4,-4],[-5,-2,-10,-5,4,7,-6,-3,-1,-2,6,2,-3,-6,4],[-5,10,1,6,-5,7,-10,-4,-3,-3,8,2,1,-7,-2],[4,1,7,-5,7,-5,-2,7,-9,-3,-7,2,-10,-5,-9],[-7,6,-8,-9,-6,-1,-9,6,-10,-8,7,-3,5,3,10],[8,-4,7,-9,-3,1,6,8,7,8,3,1,6,1,9],[-9,1,3,-5,2,-9,-1,-4,8,-9,9,4,7,-9,1],[-10,-4,4,-8,-2,-7,7,6,7,5,2,7,5,8,-2],[1,-9,-4,-2,2,-5,3,-6,-3,2,-10,-3,2,1,-1],[9,3,-5,-3,-9,3,5,-8,-4,6,9,4,-3,10,-6],[-4,-3,5,6,-6,-2,-1,-4,7,-9,8,9,2,8,-3],[-4,-1,4,6,-3,-4,-1,1,-3,-7,-9,4,9,-7,1],[3,-7,-2,-2,10,1,10,9,9,-8,-8,-1,7,10,7],[6,-7,-6,-3,-9,6,6,-2,-7,-9,-9,-4,-1,10,-6],[5,1,-4,-2,7,-9,1,-9,2,-4,-1,-8,-5,5,-10],[-6,-3,-8,-4,-4,-2,-2,-10,-6,6,-3,-4,1,10,5],[-9,7,-6,10,5,-10,1,-10,2,-3,-5,-7,-9,-6,-6],[-3,2,10,-6,9,-6,-8,1,-6,-3,3,-7,-7,-1,-7],[6,4,9,9,4,-7,-6,-5,-5,2,-4,-6,-7,9,-5],[-7,-6,10,-4,-3,6,-1,6,-1,-9,-9,-10,-5,-7,7],[1,-5,-4,6,-4,10,-10,-4,7,1,10,10,-4,-9,9],[5,9,-9,-4,2,-6,10,3,6,1,9,-7,9,6,-6],[-5,7,8,-6,-2,10,3,8,6,-10,-1,-6,10,4,5],[-10,-1,-4,-4,-1,1,6,3,-3,-10,-6,2,1,-9,-5],[-7,7,-4,6,1,4,-1,9,-4,3,-3,-5,10,6,-5],[6,-8,9,-3,-7,10,-8,2,5,10,-2,-8,8,6,-9],[-7,-2,-7,-4,-4,7,-4,7,4,6,1,-7,-4,6,10],[-1,-10,1,-2,10,-10,1,3,2,1,3,5,-10,-6,-8],[-2,5,-4,3,-3,-3,1,-7,-4,-4,-8,-7,-7,-1,-3],[-3,-10,9,5,9,5,1,7,-2,8,6,-3,8,-9,-6],[7,-7,8,-2,-6,-2,-4,6,-2,2,4,-7,-10,8,-3],[-10,-4,9,3,-4,4,-9,-9,-10,1,3,2,4,-5,1],[-7,-10,10,-10,3,-9,9,5,-2,1,9,-1,-5,2,7]], dtype = "uint32")#candidate|11175|(110, 15)|const|uint32
call_11173 = relay.TupleGetItem(func_5805_call(relay.reshape(const_11174.astype('uint32'), [165, 7]), relay.reshape(const_11175.astype('uint32'), [165, 10]), ), 1)
call_11176 = relay.TupleGetItem(func_5809_call(relay.reshape(const_11174.astype('uint32'), [165, 7]), relay.reshape(const_11175.astype('uint32'), [165, 10]), ), 1)
output = relay.Tuple([call_11145,call_11173,const_11174,const_11175,])
output2 = relay.Tuple([call_11146,call_11176,const_11174,const_11175,])
func_11183 = relay.Function([], output)
mod['func_11183'] = func_11183
mod = relay.transform.InferType()(mod)
output = func_11183()
func_11184 = relay.Function([], output)
mutated_mod['func_11184'] = func_11184
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11221 = relay.var("var_11221", dtype = "float32", shape = (6, 2, 10))#candidate|11221|(6, 2, 10)|var|float32
uop_11222 = relay.log10(var_11221.astype('float32')) # shape=(6, 2, 10)
uop_11224 = relay.sigmoid(uop_11222.astype('float32')) # shape=(6, 2, 10)
func_5054_call = mod.get_global_var('func_5054')
func_5055_call = mutated_mod.get_global_var('func_5055')
call_11232 = relay.TupleGetItem(func_5054_call(), 1)
call_11233 = relay.TupleGetItem(func_5055_call(), 1)
func_7137_call = mod.get_global_var('func_7137')
func_7138_call = mutated_mod.get_global_var('func_7138')
call_11238 = relay.TupleGetItem(func_7137_call(), 1)
call_11239 = relay.TupleGetItem(func_7138_call(), 1)
uop_11256 = relay.sinh(uop_11222.astype('float32')) # shape=(6, 2, 10)
func_7536_call = mod.get_global_var('func_7536')
func_7537_call = mutated_mod.get_global_var('func_7537')
call_11264 = relay.TupleGetItem(func_7536_call(), 1)
call_11265 = relay.TupleGetItem(func_7537_call(), 1)
output = relay.Tuple([uop_11224,call_11232,call_11238,uop_11256,call_11264,])
output2 = relay.Tuple([uop_11224,call_11233,call_11239,uop_11256,call_11265,])
func_11268 = relay.Function([var_11221,], output)
mod['func_11268'] = func_11268
mod = relay.transform.InferType()(mod)
var_11269 = relay.var("var_11269", dtype = "float32", shape = (6, 2, 10))#candidate|11269|(6, 2, 10)|var|float32
output = func_11268(var_11269)
func_11270 = relay.Function([var_11269], output)
mutated_mod['func_11270'] = func_11270
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11272 = relay.var("var_11272", dtype = "float32", shape = (2, 7, 15))#candidate|11272|(2, 7, 15)|var|float32
var_11273 = relay.var("var_11273", dtype = "float32", shape = (2, 7, 15))#candidate|11273|(2, 7, 15)|var|float32
bop_11274 = relay.power(var_11272.astype('float32'), relay.reshape(var_11273.astype('float32'), relay.shape_of(var_11272))) # shape=(2, 7, 15)
func_7020_call = mod.get_global_var('func_7020')
func_7022_call = mutated_mod.get_global_var('func_7022')
call_11283 = func_7020_call()
call_11284 = func_7020_call()
output = relay.Tuple([bop_11274,call_11283,])
output2 = relay.Tuple([bop_11274,call_11284,])
func_11286 = relay.Function([var_11272,var_11273,], output)
mod['func_11286'] = func_11286
mod = relay.transform.InferType()(mod)
mutated_mod['func_11286'] = func_11286
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11286_call = mutated_mod.get_global_var('func_11286')
var_11288 = relay.var("var_11288", dtype = "float32", shape = (2, 7, 15))#candidate|11288|(2, 7, 15)|var|float32
var_11289 = relay.var("var_11289", dtype = "float32", shape = (2, 7, 15))#candidate|11289|(2, 7, 15)|var|float32
call_11287 = func_11286_call(var_11288,var_11289,)
output = call_11287
func_11290 = relay.Function([var_11288,var_11289,], output)
mutated_mod['func_11290'] = func_11290
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2936_call = mod.get_global_var('func_2936')
func_2937_call = mutated_mod.get_global_var('func_2937')
call_11330 = relay.TupleGetItem(func_2936_call(), 1)
call_11331 = relay.TupleGetItem(func_2937_call(), 1)
output = call_11330
output2 = call_11331
func_11336 = relay.Function([], output)
mod['func_11336'] = func_11336
mod = relay.transform.InferType()(mod)
output = func_11336()
func_11337 = relay.Function([], output)
mutated_mod['func_11337'] = func_11337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7948_call = mod.get_global_var('func_7948')
func_7950_call = mutated_mod.get_global_var('func_7950')
call_11373 = relay.TupleGetItem(func_7948_call(), 0)
call_11374 = relay.TupleGetItem(func_7950_call(), 0)
output = call_11373
output2 = call_11374
func_11387 = relay.Function([], output)
mod['func_11387'] = func_11387
mod = relay.transform.InferType()(mod)
mutated_mod['func_11387'] = func_11387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11387_call = mutated_mod.get_global_var('func_11387')
call_11388 = func_11387_call()
output = call_11388
func_11389 = relay.Function([], output)
mutated_mod['func_11389'] = func_11389
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10711_call = mod.get_global_var('func_10711')
func_10713_call = mutated_mod.get_global_var('func_10713')
call_11413 = relay.TupleGetItem(func_10711_call(), 0)
call_11414 = relay.TupleGetItem(func_10713_call(), 0)
func_10793_call = mod.get_global_var('func_10793')
func_10794_call = mutated_mod.get_global_var('func_10794')
call_11423 = relay.TupleGetItem(func_10793_call(), 1)
call_11424 = relay.TupleGetItem(func_10794_call(), 1)
func_6364_call = mod.get_global_var('func_6364')
func_6365_call = mutated_mod.get_global_var('func_6365')
call_11468 = relay.TupleGetItem(func_6364_call(), 0)
call_11469 = relay.TupleGetItem(func_6365_call(), 0)
func_4378_call = mod.get_global_var('func_4378')
func_4379_call = mutated_mod.get_global_var('func_4379')
call_11472 = func_4378_call()
call_11473 = func_4378_call()
output = relay.Tuple([call_11413,call_11423,call_11468,call_11472,])
output2 = relay.Tuple([call_11414,call_11424,call_11469,call_11473,])
func_11474 = relay.Function([], output)
mod['func_11474'] = func_11474
mod = relay.transform.InferType()(mod)
mutated_mod['func_11474'] = func_11474
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11474_call = mutated_mod.get_global_var('func_11474')
call_11475 = func_11474_call()
output = call_11475
func_11476 = relay.Function([], output)
mutated_mod['func_11476'] = func_11476
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11045_call = mod.get_global_var('func_11045')
func_11047_call = mutated_mod.get_global_var('func_11047')
call_11587 = func_11045_call()
call_11588 = func_11045_call()
var_11590 = relay.var("var_11590", dtype = "uint32", shape = (165, 14))#candidate|11590|(165, 14)|var|uint32
bop_11591 = relay.less(call_11587.astype('bool'), var_11590.astype('bool')) # shape=(165, 14)
bop_11594 = relay.less(call_11588.astype('bool'), var_11590.astype('bool')) # shape=(165, 14)
output = bop_11591
output2 = bop_11594
func_11599 = relay.Function([var_11590,], output)
mod['func_11599'] = func_11599
mod = relay.transform.InferType()(mod)
mutated_mod['func_11599'] = func_11599
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11600 = relay.var("var_11600", dtype = "uint32", shape = (165, 14))#candidate|11600|(165, 14)|var|uint32
func_11599_call = mutated_mod.get_global_var('func_11599')
call_11601 = func_11599_call(var_11600)
output = call_11601
func_11602 = relay.Function([var_11600], output)
mutated_mod['func_11602'] = func_11602
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3028_call = mod.get_global_var('func_3028')
func_3029_call = mutated_mod.get_global_var('func_3029')
call_11645 = relay.TupleGetItem(func_3028_call(), 0)
call_11646 = relay.TupleGetItem(func_3029_call(), 0)
uop_11670 = relay.rsqrt(call_11645.astype('float64')) # shape=(165, 1)
uop_11672 = relay.rsqrt(call_11646.astype('float64')) # shape=(165, 1)
const_11680 = relay.const([[-0.581291,-7.075760,1.518376,3.271549,-1.193681,-8.030490,-4.164195,-3.985649,-0.317725,-1.615237],[-1.473211,-7.964849,3.863597,2.074147,8.000168,-4.016254,-3.049263,2.598828,-2.760484,-9.554338],[-0.074988,-0.053365,1.181054,-4.153486,-5.992570,-1.196904,-5.191071,-5.349225,-6.493867,7.812302],[-8.288222,-2.470140,-4.844580,-1.179245,-3.987503,3.916158,5.847258,-1.445869,6.197813,6.580772],[5.966836,-0.059766,-7.584104,2.471926,4.727291,0.109170,2.440443,-9.553115,0.435347,-9.667830],[1.538444,6.209433,6.381751,-0.090808,-7.852603,-4.802804,3.999509,1.223847,-7.912623,9.541595],[4.431017,0.883608,-7.716901,8.639718,0.512082,2.445014,1.525605,1.691248,-2.489198,8.222022],[7.450358,4.113921,2.330165,1.552287,3.509206,9.059257,3.331714,7.772805,-8.224331,8.143790],[0.233041,-4.647215,8.253169,9.231082,4.700231,3.391161,8.837175,-9.088433,0.629981,-9.899386],[-0.292912,-0.200462,-8.108093,3.586939,-5.425796,-7.774449,4.032250,-2.959443,4.535030,6.171709],[1.071458,3.240905,4.966089,4.122796,4.652003,6.306421,9.928847,3.212199,-1.679382,-2.799659],[-6.783334,-3.636320,5.971120,-6.166460,-6.640733,-2.230206,-1.255376,-9.364014,4.381357,5.358989],[6.783653,-0.752244,-2.683109,9.502384,-2.347632,7.011282,-0.812977,-5.701316,-6.672934,-7.386697],[-5.595661,-1.321254,3.279728,-8.468390,-9.965218,9.265277,4.589700,-8.271935,-1.234573,-9.515518],[3.475190,4.501674,1.839623,-8.896289,-1.362998,-3.595369,8.097055,-5.769332,-9.439766,2.659608],[-0.658846,-6.263734,-2.951268,3.896018,-5.322104,3.355137,7.846748,-3.392923,-1.734666,-4.026748],[7.142565,-9.852044,-0.496745,2.332469,8.462028,6.649442,-2.521133,2.521813,6.555152,0.387711],[-3.125497,9.069676,2.968345,-5.711130,-1.566066,-6.567799,-5.473120,-1.432408,6.487676,9.689628],[-9.496586,-3.224015,-1.188369,5.404698,-8.887684,-8.684979,2.365641,-1.458630,8.190843,6.398945],[-1.732929,4.459589,-3.182539,7.182618,-5.545643,-9.018575,0.117582,2.068306,4.448220,5.950023],[8.052732,-7.576035,-2.141579,8.190901,-5.869426,7.161162,-8.853158,3.926165,6.233922,2.413261],[7.258361,-1.004579,-0.462573,-0.133739,3.731523,-7.355775,6.706062,7.653619,3.337832,8.065751],[6.756737,-9.148877,-9.555540,-4.465886,-4.736429,8.055307,-6.326249,4.766812,5.702206,-4.545161],[8.931031,6.553850,6.422814,-7.132572,6.522373,-5.221256,2.096169,-3.329948,-9.053565,7.464673],[-4.393443,-1.944496,-3.698297,-4.499986,-4.190656,-5.039116,0.321564,-7.864754,1.290379,6.750996],[4.450304,6.964393,6.019183,-4.993330,2.924601,-2.119165,-7.494587,-4.793700,-4.326284,-1.031886],[7.857840,5.017570,-3.285280,1.885028,-9.902002,-4.140709,7.806188,-5.048572,0.993938,-5.818528],[-6.663143,9.791923,-9.764676,-8.886830,-6.542628,0.594429,8.748189,-7.561931,-8.321342,6.582071],[-6.036803,-3.401281,-9.186095,-7.893996,7.281644,-3.162039,-1.791798,-7.943336,0.749454,0.366567],[7.707465,4.993653,7.841571,-8.175810,5.283986,4.849358,1.294704,5.638093,-2.359832,-2.564787],[6.433622,-9.480574,-1.603696,-0.033000,7.535071,4.721288,-2.221106,2.288984,-4.850518,6.926224],[-9.172923,6.918097,9.273381,6.197091,4.472451,6.662417,-8.780193,-6.697806,4.963004,-2.590209],[-2.164810,3.788039,-9.825363,7.548288,8.239204,-4.374699,3.181395,7.221587,8.724370,-0.766116],[-5.783464,4.400878,8.665122,7.575144,-8.179409,5.811902,8.802869,1.586031,-9.916989,-5.368430],[8.119675,2.690700,5.258699,4.404272,6.140503,4.284464,-4.002867,-7.325663,-0.820093,-8.890427],[1.301911,4.353997,-4.451698,-0.125276,8.124454,-9.987456,3.192100,6.428060,8.919212,3.778162],[1.225720,-2.415820,5.386054,5.075599,2.387059,-7.181317,-6.269679,4.864384,-9.702960,9.137738],[0.070973,6.507428,5.939577,6.438997,3.661900,4.674756,2.628217,-8.158674,-2.619503,-3.178858],[6.088368,-3.099555,-0.166264,0.638053,9.938816,0.976835,-6.557115,4.420663,9.373601,-4.791291],[-1.860668,1.318866,-3.440236,-5.186688,-7.766998,-1.453703,-3.017559,7.173482,-6.338335,4.198579],[5.175045,-7.121891,2.399240,1.847624,-2.106397,-9.646642,6.180413,-0.699035,1.192436,-6.687077],[3.643016,-6.177715,6.562455,5.771458,-4.336135,2.068750,0.510655,9.885764,8.001388,0.739097],[5.074942,-8.077449,-4.695660,-4.238652,-9.041325,2.718237,7.297814,5.246986,0.977652,-2.228951],[5.842260,8.254812,-2.867456,-9.581966,4.451292,7.346230,8.863131,2.280870,4.542859,7.260214],[-9.161290,9.394442,-2.906239,-3.279870,7.123649,0.649370,-5.409073,8.514061,-2.813948,-2.490884],[-8.153838,-1.499516,-5.316163,9.041614,8.033661,4.306468,3.090178,4.652284,0.898354,6.431261],[-7.976763,3.244887,6.870998,7.885847,-2.406466,2.591690,-5.981774,-3.445148,8.098458,-1.641967],[0.153887,-6.706337,-4.407173,-0.975352,6.438459,1.132293,9.145662,-3.295829,5.880533,-7.616837],[8.912920,-0.475763,3.254721,-7.414805,-5.630275,6.393080,-3.358880,-9.073735,8.470709,-1.652155],[-7.376226,-3.467234,6.061945,-3.075728,1.459190,-0.213708,-2.866457,-7.677130,-9.667379,-5.791495],[5.361180,-1.596807,6.481482,-1.204769,7.153826,4.800863,-9.175130,9.405698,-1.417326,2.669050],[-1.498229,0.409643,-9.996150,-3.179996,-0.393259,-5.277323,-9.444270,-6.299205,2.930349,-6.082385],[9.959399,2.037013,-1.663185,9.634089,-6.374390,-3.580402,2.682436,-4.243112,9.339902,-2.972986],[9.438964,7.474957,0.570659,-0.208681,-1.041927,9.261976,-1.051486,-3.617284,-3.814237,-2.801874],[-5.119650,5.421241,-3.844790,9.406898,8.060820,6.623172,-6.322447,-0.703190,-0.945252,8.072493],[-0.160281,8.286324,5.489282,6.258564,4.513031,-1.931006,-1.631080,2.033845,4.252362,-5.206088],[-1.790556,-9.782893,-5.099204,-6.734018,5.888518,6.049492,2.012683,-6.634188,-9.944357,-5.989784],[6.755102,9.951577,-2.619462,-9.182945,-0.935008,-9.971602,4.262837,7.430743,-1.815050,-9.603077],[4.803628,8.875082,-1.196486,4.202814,4.378287,1.009997,8.759869,-5.060603,9.742858,1.191433],[6.836506,9.306319,-8.529614,-0.266597,-6.650624,-6.545778,-1.254967,-5.173537,-3.534557,-6.916347],[8.601761,-6.961832,-3.858714,2.506662,-2.991420,8.228775,-0.960502,-2.241283,-4.524741,2.061501],[9.872397,-6.918133,0.218051,5.091307,6.794410,3.064276,8.029065,1.528870,-6.926392,9.419972],[1.656578,-1.656549,4.854209,3.521036,4.194327,7.698601,-8.298091,1.783800,-5.179867,5.044382],[-5.113734,9.881860,4.033221,8.192146,1.632623,-8.088256,-5.956894,-2.123059,0.954753,6.357186],[4.645797,2.110813,-9.805753,5.487194,0.490198,-5.623108,-0.689879,6.427597,-9.291093,7.230467],[-4.581124,8.936578,5.570439,-9.191229,5.836995,6.536088,-4.646181,-7.984676,0.901177,-9.697293],[1.849731,-6.906583,-3.742148,2.713000,2.046998,-8.479989,-3.942260,-9.437661,3.853894,-1.929865],[-9.048856,2.504947,-0.731696,3.908339,-0.785493,0.480625,6.967813,6.319870,7.015110,-1.521773],[6.574187,-4.202526,-5.981320,6.006626,-9.608104,-5.425205,-0.757195,0.325098,-4.985234,-8.480924],[-2.959860,-7.221481,-2.810709,0.014883,-6.926233,-4.021026,-5.160897,6.082496,2.703684,4.887660],[-8.013142,-1.639954,9.737972,5.491960,-3.890616,-6.398475,4.212199,-5.049721,-6.478133,-0.119137],[-7.219693,5.330608,8.767728,5.120809,7.856837,-0.326793,0.777880,-7.807306,1.345532,-5.317587],[-5.611462,-4.799574,1.008887,4.952512,9.815942,-0.565517,-4.633753,-1.529709,-6.236682,-1.951717],[-9.406695,7.095665,0.218957,2.106874,7.105735,-2.359650,-3.078084,-2.716812,-7.531107,-9.008228],[7.133481,4.800908,-0.295363,5.132750,5.030554,-5.814064,0.084490,1.814931,-2.060411,0.938643],[-4.245813,4.299617,-5.875778,-7.466252,5.819059,-9.036514,8.973296,-4.970465,-6.062631,-1.786317],[8.878227,4.611794,-2.615172,4.639403,3.561285,9.222526,-3.572566,5.918017,-3.819451,2.220946],[-2.901883,-0.625765,7.024558,1.853800,-8.727955,-1.695792,-7.550923,-9.789385,-7.075714,4.214386],[-7.133433,-7.452401,8.105986,-4.064319,6.973737,5.968097,4.631750,-9.539385,-8.280959,-1.169833],[8.410936,-1.463466,0.819828,3.588428,-9.697013,5.347384,5.173732,-8.883684,1.905684,-4.897175],[-5.125795,-5.860024,0.709177,6.578068,-1.029398,-8.870430,-0.233949,-1.795529,-9.525700,9.201102],[-1.806241,6.744254,-0.779238,0.428347,-3.651459,2.081805,2.702930,5.360371,-3.187094,6.821565],[-8.423062,-5.629155,-2.836568,-4.408420,-1.912938,-6.026077,1.708134,-7.820541,7.034668,9.264766],[5.384483,-2.442324,1.057884,4.444655,-4.943906,-9.274511,6.195601,2.904995,5.822142,-7.161072],[-3.791869,9.786897,-1.742280,4.378884,5.190057,-4.076017,2.890965,6.863555,-0.950007,-4.045679],[9.941675,4.805398,-4.113808,1.071784,8.625654,6.375090,-9.651088,7.707609,0.777973,-0.970630],[1.387590,1.813690,6.626620,6.265440,-2.441171,4.855852,8.981712,-1.158908,0.037336,8.504414],[1.982859,-2.579516,6.344078,-1.520264,1.764618,6.210142,3.148060,1.717354,-0.122017,-1.835767],[2.407769,-3.755782,7.691857,-7.279250,-5.693374,8.031520,-4.054490,3.898725,6.944530,-5.592463],[-2.469329,9.020033,1.974536,3.420089,-8.417531,-9.675226,1.345748,-6.057603,4.399709,6.120321],[-4.121859,2.717566,6.071229,3.415590,-6.809067,9.398649,8.568153,0.756432,2.385416,-0.886976],[-5.809375,6.661920,-4.947288,-3.465613,-8.919123,3.658019,-3.213271,-8.810506,-6.505539,-6.106649],[8.000590,5.630528,4.357850,8.957439,7.175919,-2.415118,-3.564279,7.711763,6.464311,-0.182904],[-2.982405,-5.050856,-1.372535,-8.436734,-7.826728,-5.753717,-4.001495,7.901156,-1.753644,-8.062992],[-6.147172,8.393540,2.347848,2.336957,5.468248,-2.767032,-7.054168,-2.625287,0.702288,2.048170],[-9.074834,-9.979830,7.559169,-0.970352,-2.694529,-2.026450,7.189161,-6.680538,-7.748077,3.017304],[1.436368,2.563165,-4.347274,4.159005,-5.279574,-5.860824,-6.208372,0.620019,-0.883204,9.513031],[1.555796,3.132320,1.359896,5.499649,-6.176546,9.635844,-6.071713,6.919860,7.480927,8.653880],[7.434640,-4.571403,-8.937354,8.911492,6.811680,0.261564,-8.215116,5.127257,-0.014610,-0.180764],[5.646217,3.236133,-8.064070,-0.681572,0.566621,-3.223619,0.033145,-0.445399,-3.171211,-4.047852],[-7.929711,-5.515059,5.701694,-4.674827,-5.673428,-8.851409,4.973978,-6.820990,-2.409040,6.842263],[-7.827318,-0.832406,-6.761025,5.981827,-2.756143,-5.843152,6.792530,-1.998970,-5.121960,0.944193],[5.480726,-6.498894,8.901260,-8.560209,6.902308,6.863489,6.354836,-4.927276,-6.236459,6.932177],[9.784784,2.684684,-2.213346,1.996322,-7.461239,-5.277123,-8.693915,-7.523322,8.541496,9.885094],[-1.023297,-2.688955,-7.620142,8.046552,-8.737088,-3.973441,-8.816467,-6.489621,3.069372,3.599346],[-2.357516,2.744685,-6.344202,-1.340979,-7.501547,9.821655,-6.520581,0.131904,-6.846706,7.345418],[8.505638,-7.851149,3.669755,-9.691436,5.782704,7.554380,9.244688,-2.244235,-7.098105,1.886915],[5.372388,-6.697437,-2.691497,-1.504145,-6.727633,3.581509,2.356322,-9.957109,5.811008,6.070899],[-2.576624,-0.647790,3.713209,-9.476585,-7.459407,6.549304,-2.046552,5.907746,8.079283,5.208055],[-6.461157,9.122636,-9.979745,-1.434665,-5.186565,-7.115115,-6.573927,0.272371,-1.572280,-8.967957],[7.413288,-2.957967,4.285411,3.304958,2.404092,-5.614472,2.457112,-7.910486,2.969281,6.981117],[-3.803157,3.086135,4.142007,4.388462,-1.090773,-8.910010,1.471801,5.077671,-6.242459,3.060071],[7.646653,3.904344,1.209472,-6.854661,7.414740,-0.825956,-0.614127,-1.022225,-2.747049,7.345045],[1.902444,4.527765,-0.400654,6.016870,5.420758,-9.788671,6.695118,8.145420,5.487193,6.915340],[-1.204433,3.819621,3.883928,-5.932134,9.271891,-9.354477,2.166538,4.910002,-4.681208,-0.678266],[4.358018,-1.313144,1.466873,2.169064,-4.658907,1.108511,-4.341365,8.171977,-5.025631,-6.473515],[9.027262,8.937812,-2.958451,-4.714325,1.355702,-2.639116,1.796070,6.540602,-6.526891,-4.038871],[-5.097799,6.891198,-9.909048,-6.720728,-0.145390,-0.240469,-4.917643,-7.232861,-2.627415,0.842163],[-6.790124,-1.691533,6.849587,-7.562314,-1.712471,-8.083649,-5.265327,0.142941,-1.854950,3.448492],[-1.260546,-1.492410,4.725328,4.961682,6.886299,-6.732153,-5.527401,9.049808,-4.782542,-7.120429],[-7.178929,8.101005,-5.451914,4.301247,7.167713,-8.051167,-8.342505,-7.551932,4.766025,6.772718],[-4.941174,-9.740448,-8.603681,-8.118168,5.794014,4.041829,5.895738,-4.148928,-6.806677,-5.807544],[1.534710,5.336561,9.517329,8.051594,-4.477684,2.192316,-9.770310,2.905944,-4.738598,-1.905190],[-3.591543,0.600907,-1.667784,-9.071986,-3.861969,-8.607161,4.464505,0.248371,9.014285,2.519224],[-5.867376,4.952067,7.930667,8.931986,-6.593418,6.044064,-6.462635,7.375106,2.334389,9.941891],[-5.229198,3.844321,0.107014,8.601929,3.181237,-7.446441,9.938188,9.783735,2.690533,-4.920594],[-2.464122,-3.130599,4.615567,7.175016,8.980968,-6.016504,1.192255,3.905792,-2.320356,5.820646],[-8.031129,5.089570,9.789914,-2.574263,-1.566693,2.658553,-3.239314,8.572069,2.544477,-7.848525],[8.581627,-8.805863,-9.692752,9.578666,-7.479646,2.385838,5.081138,0.826343,4.176950,2.761885],[-3.856280,-5.623375,-8.445920,-6.441641,-8.942670,5.640808,3.469344,-8.638088,7.187831,5.338917],[9.260697,-3.419285,7.518048,8.860115,3.442929,-8.208505,0.504509,4.457488,-1.109768,8.856990],[-0.818383,-0.650285,3.569886,-3.788793,9.289992,-7.872877,-6.955316,9.853012,-2.305694,-1.650703],[6.371958,-0.220595,1.733211,-8.809118,1.620747,-9.433238,-5.997393,-4.723029,-1.302121,1.517130],[-1.837867,-9.476570,-8.306075,-1.170999,-6.207983,3.365808,-5.673769,3.273400,7.255882,2.190424],[5.757200,-6.789575,1.471636,6.944069,2.564414,8.432442,6.525328,-0.502443,1.827036,-1.438803],[5.463924,0.908625,2.056098,9.078397,-5.970785,-7.453469,2.131929,-3.686512,8.285990,-5.996196],[-8.014130,-5.065346,8.814236,8.519605,4.942243,-3.892432,9.165461,-7.488258,-9.582130,3.850744],[5.944638,2.125395,7.351567,9.624777,0.418957,3.012504,7.726400,9.060045,5.243306,1.260598],[7.942561,7.035030,6.228261,3.372189,-3.532695,-8.826615,-8.603299,-8.753781,6.708209,-4.832439],[8.642532,-0.070640,4.858908,9.237122,9.933251,-2.687948,-8.497161,7.508409,4.126586,-8.002244],[-2.601700,8.827233,-0.244228,-1.873897,2.274183,-6.333596,-7.489707,3.751977,2.244936,-8.188772],[4.859992,9.248819,2.994068,6.840546,2.881874,-8.108878,1.789565,8.831117,8.171596,6.591096],[-9.645430,1.315427,4.663596,1.162760,4.210148,3.946982,-6.882700,-4.527500,6.233960,-3.060082],[3.799988,-9.715559,2.501375,-1.144287,5.458266,6.039645,-1.622235,6.151365,-0.501342,-0.255810],[-4.737766,-2.268582,-9.146791,-0.077936,3.617239,-0.993893,9.606276,0.903291,-7.678914,0.948551],[7.938375,-6.065935,2.728852,0.658645,-2.476117,9.703107,3.412784,1.934880,8.415381,-5.377824],[-1.419585,6.881127,8.085062,-4.724276,9.147611,-1.743757,9.899799,-4.800982,-3.657280,-6.581225],[6.093143,5.257003,7.501159,-7.498029,9.059424,9.672715,2.240237,1.984581,4.458505,6.714603],[-1.253979,-0.811227,-7.855381,-9.158459,-9.451180,7.403891,8.932193,8.967542,2.502190,2.570799],[-0.579850,-0.006573,5.698384,-2.465216,-8.505241,5.962450,7.733582,-9.252383,-9.324592,-3.444486],[8.660770,-2.136455,7.710327,8.925066,0.360142,6.028316,-6.136003,-8.653070,8.215197,-6.934565],[-2.658668,-5.637352,4.402623,3.694024,-8.913277,4.366473,5.571128,-4.037375,8.306403,6.532366],[-5.955633,-1.219805,-9.008356,-7.693792,3.889524,4.097204,8.692920,-4.084806,-5.840817,-4.626688],[6.586135,-4.487813,-1.141617,9.225572,1.252465,-6.153565,5.133751,-4.316679,5.521578,-8.652475],[6.137932,-6.825876,4.602054,-3.638836,-0.499757,-7.700857,-1.487962,-9.355773,5.984354,-1.350805],[-7.121270,-3.316668,8.664653,-3.320278,-2.983611,0.622646,-5.685692,-3.003126,-0.615200,-3.014679],[8.154319,3.482148,3.461947,-4.904396,9.597373,1.144176,-7.663764,-5.106343,-3.419307,-5.661923],[5.341961,8.049295,-7.223855,8.836642,-8.480359,6.982038,3.208419,4.009965,4.072448,3.636100],[-3.152332,-4.476698,0.933117,-6.187868,4.179047,-5.656431,-9.425490,5.140162,2.824782,-2.733234],[-1.045384,1.446327,-0.794742,-7.619707,5.820717,-4.586914,4.379410,-2.255213,5.956516,-7.918623],[4.072484,3.983178,-9.666256,-8.156786,-9.026313,8.259222,6.365125,-7.690681,2.473541,5.596662],[-2.985267,-1.287178,-5.688516,-7.336465,6.003530,9.214659,8.753461,9.416630,4.734021,7.229318],[-0.710085,-0.656680,-7.495184,2.523802,1.115670,-5.643367,-9.348088,0.486078,3.075330,9.027271],[1.270794,6.361349,0.860305,-1.123023,8.000232,-6.453253,3.336185,0.432199,8.797226,6.491598],[2.746933,8.889239,0.779509,-1.107392,-4.828478,0.320896,-1.877412,1.332958,8.581186,-4.967970]], dtype = "float64")#candidate|11680|(165, 10)|const|float64
bop_11681 = relay.floor_mod(uop_11670.astype('float32'), const_11680.astype('float32')) # shape=(165, 10)
bop_11684 = relay.floor_mod(uop_11672.astype('float32'), const_11680.astype('float32')) # shape=(165, 10)
func_10588_call = mod.get_global_var('func_10588')
func_10590_call = mutated_mod.get_global_var('func_10590')
var_11689 = relay.var("var_11689", dtype = "bool", shape = (312, 2))#candidate|11689|(312, 2)|var|bool
call_11688 = func_10588_call(relay.reshape(var_11689.astype('bool'), [13, 8, 6]))
call_11690 = func_10588_call(relay.reshape(var_11689.astype('bool'), [13, 8, 6]))
output = relay.Tuple([bop_11681,call_11688,var_11689,])
output2 = relay.Tuple([bop_11684,call_11690,var_11689,])
func_11693 = relay.Function([var_11689,], output)
mod['func_11693'] = func_11693
mod = relay.transform.InferType()(mod)
mutated_mod['func_11693'] = func_11693
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11694 = relay.var("var_11694", dtype = "bool", shape = (312, 2))#candidate|11694|(312, 2)|var|bool
func_11693_call = mutated_mod.get_global_var('func_11693')
call_11695 = func_11693_call(var_11694)
output = call_11695
func_11696 = relay.Function([var_11694], output)
mutated_mod['func_11696'] = func_11696
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_11731 = relay.TupleGetItem(func_7001_call(), 3)
call_11732 = relay.TupleGetItem(func_7002_call(), 3)
func_5531_call = mod.get_global_var('func_5531')
func_5532_call = mutated_mod.get_global_var('func_5532')
call_11737 = func_5531_call()
call_11738 = func_5531_call()
func_7300_call = mod.get_global_var('func_7300')
func_7301_call = mutated_mod.get_global_var('func_7301')
call_11752 = func_7300_call()
call_11753 = func_7300_call()
output = relay.Tuple([call_11731,call_11737,call_11752,])
output2 = relay.Tuple([call_11732,call_11738,call_11753,])
func_11775 = relay.Function([], output)
mod['func_11775'] = func_11775
mod = relay.transform.InferType()(mod)
output = func_11775()
func_11776 = relay.Function([], output)
mutated_mod['func_11776'] = func_11776
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8959_call = mod.get_global_var('func_8959')
func_8960_call = mutated_mod.get_global_var('func_8960')
call_11786 = relay.TupleGetItem(func_8959_call(), 1)
call_11787 = relay.TupleGetItem(func_8960_call(), 1)
func_5235_call = mod.get_global_var('func_5235')
func_5236_call = mutated_mod.get_global_var('func_5236')
call_11794 = relay.TupleGetItem(func_5235_call(), 0)
call_11795 = relay.TupleGetItem(func_5236_call(), 0)
func_9113_call = mod.get_global_var('func_9113')
func_9116_call = mutated_mod.get_global_var('func_9116')
var_11800 = relay.var("var_11800", dtype = "float32", shape = (420,))#candidate|11800|(420,)|var|float32
call_11799 = func_9113_call(relay.reshape(var_11800.astype('float32'), [14, 3, 10]))
call_11801 = func_9113_call(relay.reshape(var_11800.astype('float32'), [14, 3, 10]))
output = relay.Tuple([call_11786,call_11794,call_11799,var_11800,])
output2 = relay.Tuple([call_11787,call_11795,call_11801,var_11800,])
func_11812 = relay.Function([var_11800,], output)
mod['func_11812'] = func_11812
mod = relay.transform.InferType()(mod)
mutated_mod['func_11812'] = func_11812
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11813 = relay.var("var_11813", dtype = "float32", shape = (420,))#candidate|11813|(420,)|var|float32
func_11812_call = mutated_mod.get_global_var('func_11812')
call_11814 = func_11812_call(var_11813)
output = call_11814
func_11815 = relay.Function([var_11813], output)
mutated_mod['func_11815'] = func_11815
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10549_call = mod.get_global_var('func_10549')
func_10551_call = mutated_mod.get_global_var('func_10551')
call_11834 = relay.TupleGetItem(func_10549_call(), 0)
call_11835 = relay.TupleGetItem(func_10551_call(), 0)
func_5874_call = mod.get_global_var('func_5874')
func_5875_call = mutated_mod.get_global_var('func_5875')
call_11850 = func_5874_call()
call_11851 = func_5874_call()
output = relay.Tuple([call_11834,call_11850,])
output2 = relay.Tuple([call_11835,call_11851,])
func_11861 = relay.Function([], output)
mod['func_11861'] = func_11861
mod = relay.transform.InferType()(mod)
output = func_11861()
func_11862 = relay.Function([], output)
mutated_mod['func_11862'] = func_11862
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4829_call = mod.get_global_var('func_4829')
func_4830_call = mutated_mod.get_global_var('func_4830')
call_11944 = relay.TupleGetItem(func_4829_call(), 0)
call_11945 = relay.TupleGetItem(func_4830_call(), 0)
var_11952 = relay.var("var_11952", dtype = "float64", shape = (13, 8, 6))#candidate|11952|(13, 8, 6)|var|float64
bop_11953 = relay.less(call_11944.astype('bool'), relay.reshape(var_11952.astype('bool'), relay.shape_of(call_11944))) # shape=(13, 8, 6)
bop_11956 = relay.less(call_11945.astype('bool'), relay.reshape(var_11952.astype('bool'), relay.shape_of(call_11945))) # shape=(13, 8, 6)
func_5874_call = mod.get_global_var('func_5874')
func_5875_call = mutated_mod.get_global_var('func_5875')
call_11965 = func_5874_call()
call_11966 = func_5874_call()
output = relay.Tuple([bop_11953,call_11965,])
output2 = relay.Tuple([bop_11956,call_11966,])
func_12003 = relay.Function([var_11952,], output)
mod['func_12003'] = func_12003
mod = relay.transform.InferType()(mod)
var_12004 = relay.var("var_12004", dtype = "float64", shape = (13, 8, 6))#candidate|12004|(13, 8, 6)|var|float64
output = func_12003(var_12004)
func_12005 = relay.Function([var_12004], output)
mutated_mod['func_12005'] = func_12005
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6428_call = mod.get_global_var('func_6428')
func_6429_call = mutated_mod.get_global_var('func_6429')
call_12028 = func_6428_call()
call_12029 = func_6428_call()
func_8569_call = mod.get_global_var('func_8569')
func_8571_call = mutated_mod.get_global_var('func_8571')
call_12032 = relay.TupleGetItem(func_8569_call(), 0)
call_12033 = relay.TupleGetItem(func_8571_call(), 0)
func_6783_call = mod.get_global_var('func_6783')
func_6784_call = mutated_mod.get_global_var('func_6784')
call_12076 = relay.TupleGetItem(func_6783_call(), 1)
call_12077 = relay.TupleGetItem(func_6784_call(), 1)
output = relay.Tuple([call_12028,call_12032,call_12076,])
output2 = relay.Tuple([call_12029,call_12033,call_12077,])
func_12081 = relay.Function([], output)
mod['func_12081'] = func_12081
mod = relay.transform.InferType()(mod)
mutated_mod['func_12081'] = func_12081
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12081_call = mutated_mod.get_global_var('func_12081')
call_12082 = func_12081_call()
output = call_12082
func_12083 = relay.Function([], output)
mutated_mod['func_12083'] = func_12083
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8026_call = mod.get_global_var('func_8026')
func_8027_call = mutated_mod.get_global_var('func_8027')
call_12097 = relay.TupleGetItem(func_8026_call(), 0)
call_12098 = relay.TupleGetItem(func_8027_call(), 0)
func_8026_call = mod.get_global_var('func_8026')
func_8027_call = mutated_mod.get_global_var('func_8027')
call_12110 = relay.TupleGetItem(func_8026_call(), 1)
call_12111 = relay.TupleGetItem(func_8027_call(), 1)
func_8667_call = mod.get_global_var('func_8667')
func_8669_call = mutated_mod.get_global_var('func_8669')
var_12122 = relay.var("var_12122", dtype = "float32", shape = (330,))#candidate|12122|(330,)|var|float32
call_12121 = relay.TupleGetItem(func_8667_call(relay.reshape(var_12122.astype('float32'), [330,])), 5)
call_12123 = relay.TupleGetItem(func_8669_call(relay.reshape(var_12122.astype('float32'), [330,])), 5)
func_8115_call = mod.get_global_var('func_8115')
func_8116_call = mutated_mod.get_global_var('func_8116')
call_12130 = func_8115_call()
call_12131 = func_8115_call()
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_12141 = func_2626_call()
call_12142 = func_2626_call()
output = relay.Tuple([call_12097,call_12110,call_12121,var_12122,call_12130,call_12141,])
output2 = relay.Tuple([call_12098,call_12111,call_12123,var_12122,call_12131,call_12142,])
func_12164 = relay.Function([var_12122,], output)
mod['func_12164'] = func_12164
mod = relay.transform.InferType()(mod)
var_12165 = relay.var("var_12165", dtype = "float32", shape = (330,))#candidate|12165|(330,)|var|float32
output = func_12164(var_12165)
func_12166 = relay.Function([var_12165], output)
mutated_mod['func_12166'] = func_12166
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4484_call = mod.get_global_var('func_4484')
func_4485_call = mutated_mod.get_global_var('func_4485')
call_12170 = relay.TupleGetItem(func_4484_call(), 3)
call_12171 = relay.TupleGetItem(func_4485_call(), 3)
func_7847_call = mod.get_global_var('func_7847')
func_7849_call = mutated_mod.get_global_var('func_7849')
call_12173 = relay.TupleGetItem(func_7847_call(), 1)
call_12174 = relay.TupleGetItem(func_7849_call(), 1)
func_12003_call = mod.get_global_var('func_12003')
func_12005_call = mutated_mod.get_global_var('func_12005')
const_12191 = relay.const([-6.298308,0.783157,-4.265781,-9.608856,9.956599,-8.333582,9.929680,8.038688,-6.263944,7.691786,-2.923016,9.904625,2.734473,-4.443940,-6.053365,-8.722400,4.668143,8.003469,1.303279,0.143999,7.362926,4.350968,-7.083115,6.104812,-7.980217,-9.868005,-4.963307,7.749359,9.041231,-0.563465,9.026869,3.174825,-7.747160,-8.369946,-4.836346,8.622218,1.115297,-9.701478,6.153874,-2.732209,-9.430457,-4.567122,-4.122614,-3.377402,0.694209,5.500337,0.664610,9.598244,6.529377,5.019008,5.335413,0.230739,9.678965,8.502436,3.602119,-1.891608,-8.107307,-4.349488,5.958452,-2.394933,0.197515,5.002920,-9.686484,8.627298,-8.147313,5.581259,4.503379,-6.472787,-5.798767,5.289747,8.324369,8.957661,-7.573305,-6.488124,-4.074505,-7.700960,-3.126623,-8.830892,-0.601626,-2.090398,6.000220,-2.876642,0.594650,6.750602,-4.451314,9.908505,7.974192,0.279867,9.712799,4.119511,2.291094,2.327373,5.828080,-7.118678,5.484082,-0.115009,9.611478,0.430615,8.684469,-5.251001,3.741488,3.868304,5.787636,-9.238301,-9.486267,-2.741656,9.978875,7.245068,-6.146642,-3.548928,-3.613923,-2.721169,-9.797318,-9.192896,-5.001228,2.278985,1.271374,-0.899315,-8.410915,9.049399,-8.788664,-7.075236,7.444615,-1.563744,4.785807,-2.933601,5.588874,3.271666,-0.595794,0.048791,8.901615,9.707962,3.838090,9.037794,-7.012557,-3.941206,-6.640263,3.641346,-4.825293,0.621019,-4.194998,-0.726353,-6.712547,0.824452,7.869696,-5.881896,-3.220237,9.331574,8.910654,3.415075,2.921541,9.729837,-5.342125,-0.319161,-9.479070,-1.414142,8.747021,2.542283,3.119248,-0.560067,2.416354,9.240235,-1.145063,-3.243510,8.753520,-5.637643,4.185061,-0.041336,-5.948538,8.765176,8.705150,6.368741,-0.659212,-7.047396,-9.955200,-4.816277,2.984678,5.583002,9.146268,-0.832179,5.062880,3.276702,-7.853316,-9.687246,-6.955421,4.993339,6.087391,-0.493217,3.778168,4.532037,-4.984324,-0.231592,3.177304,8.153504,7.703598,8.520132,-1.764740,0.114651,9.544710,9.221329,0.190353,0.668832,-2.402281,-6.325112,-0.065851,5.597360,-2.753775,6.045344,4.546921,-4.186180,-9.949527,4.118703,-5.921928,0.229615,-1.430864,-9.450170,4.596743,-6.348232,6.898710,-0.744362,8.112053,-9.691776,3.569596,6.159359,8.109924,7.958907,-9.890677,-7.677658,7.074577,-4.310961,0.633759,-3.286623,-0.586416,-2.647076,3.833008,0.299950,-2.872015,-2.552152,5.417280,-5.195620,6.967162,-0.014759,-7.553009,8.271284,-2.724853,4.555662,-5.008198,8.789158,-2.031115,-4.142620,-0.567159,-2.481776,-7.721271,-9.856365,0.934930,-0.187900,-1.500941,-8.916110,0.059299,-9.913970,7.081201,8.566419,6.252866,-6.920359,-4.975606,-7.979887,-1.668289,8.905455,0.071591,4.268689,-5.020617,-8.308239,-1.997908,3.343646,-6.410315,-5.504908,3.257645,3.639381,-4.681049,1.648566,-3.978562,5.583753,-6.386776,2.031942,-2.915391,-2.956383,-4.805497,7.716903,7.663241,6.384928,-2.546824,1.287159,8.678122,8.003822,-6.252895,0.337382,-6.031181,-0.811806,1.907976,-0.133708,-1.506927,8.094681,1.730997,8.742032,4.632680,-4.473555,-9.061770,-8.624305,-0.128628,3.628708,-9.237112,-2.842479,1.432020,5.271515,-7.081508,-1.607214,5.934788,-7.299234,-7.902239,7.589146,-9.011704,-4.806009,-1.314759,-1.749594,-4.985525,6.147757,-3.615690,9.297556,-6.671599,4.498939,-2.412470,6.371213,3.912293,4.888726,-4.172123,7.520483,-3.837837,8.956978,-6.914348,-2.327365,-4.180031,8.581168,7.790847,-3.345020,-4.565002,-5.525748,-9.250714,-7.181490,4.398447,4.194845,-9.622115,-7.770277,-8.244713,8.282253,-6.795076,2.190497,-0.894131,3.574408,8.884417,8.363047,7.873427,7.271313,-6.359533,8.993206,4.143620,8.782461,-0.102175,-8.701007,6.110300,8.074545,4.679607,-0.270111,-1.204159,7.539114,-5.929461,3.516761,5.982092,8.372575,-4.243915,4.082340,1.355439,3.382441,4.819029,9.019529,-9.499457,-7.833458,8.836521,1.896491,-7.195073,-4.690127,3.052416,7.232071,-7.428057,-8.343966,0.679450,-8.190642,-7.806730,-0.572228,0.175874,7.382299,5.778128,-8.736977,-6.233691,-0.410955,-8.134265,3.397762,-3.720045,-8.799699,6.500106,4.656343,3.111597,-2.641998,4.397666,8.285373,-2.335746,-4.904103,-3.798729,-1.452580,-4.322106,4.953309,7.816257,6.462662,9.325893,-9.584611,-0.732813,-5.891833,7.147392,-1.075443,7.666639,-5.165969,-5.310640,7.231495,3.243497,2.056889,-5.615777,-3.204231,-2.755368,7.568932,-6.060681,-1.713516,5.632918,-8.450358,7.523534,-5.836570,-6.774757,-1.871102,3.529089,7.147201,-6.795625,2.410338,6.410031,-6.580948,8.458446,-3.322824,-0.883025,-6.779340,5.384768,-3.887139,8.747830,0.232622,4.557178,-3.913506,-4.756947,4.272422,6.589828,7.939461,8.173481,-2.743899,-9.584029,-9.898364,6.620176,-1.369961,7.364506,-1.836911,2.335919,-5.643766,4.578715,-7.991969,-5.158918,-4.199209,-0.743018,-2.555018,-1.121044,-8.625630,4.067154,8.651323,2.094728,6.894983,-2.542137,-0.863149,-2.523230,8.092826,0.940383,2.672593,3.755076,8.597748,2.675740,6.206618,-7.936918,-2.927040,-8.662280,6.273761,-1.343384,-3.879094,-2.065324,-1.523581,0.099265,-3.891017,2.496228,-6.687207,-5.524268,-2.210031,-1.561287,3.025076,5.307133,-6.470522,0.292026,-9.167709,8.380287,-6.250181,3.843530,-8.427393,-0.720096,7.683770,-1.096097,4.260068,-9.235320,-2.409261,5.662778,8.081280,-3.821269,5.486224,1.128277,6.300540,-2.531915,-5.644957,-4.887925,5.668624,-6.963298,9.259210,-6.827824,5.119838,-0.020596,5.005031,9.161453,7.903435,0.786814,0.500108,-7.593306,6.936325,-4.404530,-3.134592,-6.931160,-1.197948,-8.348540,9.243527,-3.016369,6.452251,-6.377847,-0.368412,-2.630543,0.190537,-2.062368,-4.972166,1.994964,-7.336270,-6.193473,1.746378,-7.665818,1.044558,6.374807,5.217163,2.412028,-1.006972,-6.654834,9.978638,-4.635143,-8.336152,1.761872,0.793407,-1.876417,-8.136556,-4.803072,3.015053,3.591162,-7.442778,2.761187,-7.412540,-2.798633,-6.352325,-1.241080,8.741086,8.054273,2.409045,5.722754,3.127808,-6.396862,-7.293447,0.110283,4.661310,-2.171605,7.671852,-0.277169,-5.677815,5.116001,8.820065,-7.510803,-3.981295,-1.760133,-9.323021,0.926790,4.768309,2.292231,-0.788734,3.415024,-2.784724,9.105270,4.006234,2.524112,2.685046,-6.765349,-5.975425,2.824082,-7.836310], dtype = "float64")#candidate|12191|(624,)|const|float64
call_12190 = relay.TupleGetItem(func_12003_call(relay.reshape(const_12191.astype('float64'), [13, 8, 6])), 1)
call_12192 = relay.TupleGetItem(func_12005_call(relay.reshape(const_12191.astype('float64'), [13, 8, 6])), 1)
output = relay.Tuple([call_12170,call_12173,call_12190,const_12191,])
output2 = relay.Tuple([call_12171,call_12174,call_12192,const_12191,])
func_12203 = relay.Function([], output)
mod['func_12203'] = func_12203
mod = relay.transform.InferType()(mod)
output = func_12203()
func_12204 = relay.Function([], output)
mutated_mod['func_12204'] = func_12204
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12274 = relay.var("var_12274", dtype = "float32", shape = (12, 15, 2))#candidate|12274|(12, 15, 2)|var|float32
uop_12275 = relay.log(var_12274.astype('float32')) # shape=(12, 15, 2)
output = relay.Tuple([uop_12275,])
output2 = relay.Tuple([uop_12275,])
func_12281 = relay.Function([var_12274,], output)
mod['func_12281'] = func_12281
mod = relay.transform.InferType()(mod)
mutated_mod['func_12281'] = func_12281
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12282 = relay.var("var_12282", dtype = "float32", shape = (12, 15, 2))#candidate|12282|(12, 15, 2)|var|float32
func_12281_call = mutated_mod.get_global_var('func_12281')
call_12283 = func_12281_call(var_12282)
output = call_12283
func_12284 = relay.Function([var_12282], output)
mutated_mod['func_12284'] = func_12284
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3276_call = mod.get_global_var('func_3276')
func_3277_call = mutated_mod.get_global_var('func_3277')
call_12288 = func_3276_call()
call_12289 = func_3276_call()
func_6261_call = mod.get_global_var('func_6261')
func_6264_call = mutated_mod.get_global_var('func_6264')
const_12296 = relay.const([[-8.574937,-0.527790,-5.682231,2.236794,-3.341250,1.213020,7.064759,-9.707471,5.563663,-0.004193,7.010168,-4.579207,-3.635907,9.139997,-8.541622],[9.024377,1.807181,6.529711,1.300741,8.322737,3.930098,-1.381501,-1.829733,-5.847492,4.203948,-6.452165,9.871365,2.719000,-5.756932,5.422349],[-7.097865,4.328495,-1.864327,5.291763,8.313937,-8.630735,3.084239,7.183054,2.970004,-2.981452,-0.821079,4.938779,6.652902,2.525773,6.204936],[-8.131343,-7.980380,6.235271,-4.277072,-8.990182,-2.516285,-0.305519,-5.096229,2.047662,4.819781,-9.062675,-9.743086,-1.179973,-4.944909,5.456310],[-7.814701,1.149586,-0.931090,6.270441,7.579444,-9.013658,-2.580305,-4.644586,9.352673,-3.006986,8.869581,-9.057952,0.780287,4.674404,0.508110],[6.008611,-3.911231,-5.306308,-8.087357,-2.760765,8.989728,5.733693,9.173322,-3.462349,1.985061,-7.375955,-6.875559,7.599854,2.010669,8.873406],[8.806381,-3.500427,-3.583409,-6.021323,-8.929368,-6.319817,-1.224544,-5.815520,4.175870,-5.968318,3.101709,0.833169,4.980758,2.596002,1.742420],[6.638912,-0.010487,5.109337,-4.511726,1.095725,-5.088641,7.534310,6.254150,-7.267851,-9.202796,0.559251,5.834777,0.604800,7.663268,2.215486],[-9.851401,-3.056134,-8.535948,4.995916,9.470329,-4.743182,-9.215628,-9.331974,7.893896,9.782822,2.802129,9.239190,1.861419,-3.770815,-0.191946],[-9.921456,-3.010556,1.373397,-5.370969,-3.696070,4.072279,6.252977,-4.962544,7.993948,-5.515412,4.736284,0.749041,8.366955,-9.034367,-8.539084],[2.429312,9.406810,6.694958,1.295804,2.075266,0.864230,-1.727083,-9.730678,9.733530,-3.535625,-1.120961,6.034674,-3.770813,0.446897,-0.793957]], dtype = "float64")#candidate|12296|(11, 15)|const|float64
call_12295 = relay.TupleGetItem(func_6261_call(relay.reshape(const_12296.astype('float64'), [165,])), 1)
call_12297 = relay.TupleGetItem(func_6264_call(relay.reshape(const_12296.astype('float64'), [165,])), 1)
func_5235_call = mod.get_global_var('func_5235')
func_5236_call = mutated_mod.get_global_var('func_5236')
call_12300 = relay.TupleGetItem(func_5235_call(), 0)
call_12301 = relay.TupleGetItem(func_5236_call(), 0)
output = relay.Tuple([call_12288,call_12295,const_12296,call_12300,])
output2 = relay.Tuple([call_12289,call_12297,const_12296,call_12301,])
func_12302 = relay.Function([], output)
mod['func_12302'] = func_12302
mod = relay.transform.InferType()(mod)
output = func_12302()
func_12303 = relay.Function([], output)
mutated_mod['func_12303'] = func_12303
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11474_call = mod.get_global_var('func_11474')
func_11476_call = mutated_mod.get_global_var('func_11476')
call_12356 = relay.TupleGetItem(func_11474_call(), 1)
call_12357 = relay.TupleGetItem(func_11476_call(), 1)
output = relay.Tuple([call_12356,])
output2 = relay.Tuple([call_12357,])
func_12361 = relay.Function([], output)
mod['func_12361'] = func_12361
mod = relay.transform.InferType()(mod)
output = func_12361()
func_12362 = relay.Function([], output)
mutated_mod['func_12362'] = func_12362
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9762_call = mod.get_global_var('func_9762')
func_9764_call = mutated_mod.get_global_var('func_9764')
call_12375 = relay.TupleGetItem(func_9762_call(), 6)
call_12376 = relay.TupleGetItem(func_9764_call(), 6)
func_8979_call = mod.get_global_var('func_8979')
func_8981_call = mutated_mod.get_global_var('func_8981')
call_12378 = func_8979_call()
call_12379 = func_8979_call()
var_12385 = relay.var("var_12385", dtype = "float64", shape = (165, 14))#candidate|12385|(165, 14)|var|float64
bop_12386 = relay.subtract(call_12378.astype('float32'), var_12385.astype('float32')) # shape=(165, 14)
bop_12389 = relay.subtract(call_12379.astype('float32'), var_12385.astype('float32')) # shape=(165, 14)
uop_12392 = relay.sqrt(bop_12386.astype('float64')) # shape=(165, 14)
uop_12394 = relay.sqrt(bop_12389.astype('float64')) # shape=(165, 14)
func_5565_call = mod.get_global_var('func_5565')
func_5567_call = mutated_mod.get_global_var('func_5567')
call_12401 = func_5565_call()
call_12402 = func_5565_call()
bop_12412 = relay.right_shift(uop_12392.astype('uint32'), relay.reshape(bop_12386.astype('uint32'), relay.shape_of(uop_12392))) # shape=(165, 14)
bop_12415 = relay.right_shift(uop_12394.astype('uint32'), relay.reshape(bop_12389.astype('uint32'), relay.shape_of(uop_12394))) # shape=(165, 14)
uop_12416 = relay.acosh(uop_12392.astype('float32')) # shape=(165, 14)
uop_12418 = relay.acosh(uop_12394.astype('float32')) # shape=(165, 14)
func_3190_call = mod.get_global_var('func_3190')
func_3193_call = mutated_mod.get_global_var('func_3193')
const_12421 = relay.const([-3.855925,-7.235859,-4.357448,3.956709,-9.513599,-1.191229,5.730528,2.228412,7.129331,1.056465,-5.102474,-5.243972,-2.091127,9.941563,4.639122,4.183608,-7.515016,7.407141,-7.019978,-2.206408,-2.084495,-0.835554,2.571772,-5.910255,-4.141155,-8.980225,-9.916081,-4.593851,-2.569182,-0.798852,-1.218273,9.792060,-4.210295,4.495600,-5.822498,2.310951,3.064421,-9.951174,5.256772,1.806802,-6.350584,5.007696,-4.400200,9.556326,6.704424,1.767497,-6.876241,5.855343,2.368238,9.243375,-2.785184,1.124833,-5.467182,5.309831,-1.444522,-0.555182,-4.370043,2.381302,0.886956,8.243731,8.489633,-0.798608,8.418412,-8.383196,5.638401,-0.956312,-5.385626,6.622788,3.024064,7.871212,8.336094,4.154445,4.908983,7.201236,4.950876,9.327334,6.382514,-5.320757,1.803528,4.554167,8.309372,1.438322,3.964722,-6.791143,4.531880,5.916304,9.596724,-5.515783,4.253041,6.533821,-9.990344,4.416377,3.105589,-3.353351,-2.993701,4.475072,-3.434501,-3.752795,0.456046,-9.423211,-4.216753,2.850660,-7.085389,-7.873889,0.224477,6.108614,-3.484501,4.518061,-8.943536,0.608569,-5.915274,-0.284387,6.642661,-3.880511,-4.764504,7.030492,-6.372465,-3.470369,-5.051081,1.128451,0.250933,1.147885,6.376959,6.470355,-2.295351,2.821984,8.813900,2.115124,-2.319333,5.678196,9.681834,9.021092,2.997243,-2.122945,-5.892166,-8.885845,-1.132504,1.457579,-3.430077,-4.036188,8.362645,5.609375,3.137336,0.601952,9.892657,-9.994628,0.974271,-3.432725,-1.336198,-4.892194,-0.860198,-3.364455,-9.458915,0.433091,-9.580118,-4.914357,7.482235,-6.489694,-9.548241,-3.476873,-9.266234,-8.700061,-2.057197,-3.263182,-3.320220,7.266529,3.964343,0.868315,0.168335,3.573601,-1.023158,-1.506006,3.082495,9.610868,-5.885277,5.854151,-7.497849,2.037095,3.835349,0.738697,-3.298533,-8.303334,-6.755179,-8.684525,-6.973306,7.971600,9.483753,-8.069541,-3.598958,-1.647855,1.967787,3.821120,-6.074429,-4.947780,1.446731,9.360950,-7.702437,1.305638,3.406243,7.024829,2.800571,8.542462,-3.221754,-3.604328,7.242239,8.101841,-5.284652,-0.654785,0.996571,-6.011310,6.212225,6.104879,-7.007446,-2.537667,-1.225719,1.162026,5.396423,-0.384547,8.908493,-6.350419,8.373122,8.664933,8.094538,-8.389244,9.715457,5.830935,-8.487622,-8.457450,2.842570,1.085653,-2.059678,-3.500496,3.641200,8.843353,9.569228,3.983650,-3.876511,-9.510887,-8.776938,-3.806270,-4.288514,-6.951222,-4.406951,1.385411,-5.856182,1.242937,1.408020,-7.654140,-0.526125,6.825269,2.601628,0.362910,-8.157887,3.575638,-1.116247,-8.018028,4.225713,-3.186969,3.626195,-4.124435,-2.282440,8.525774,8.017212,-5.349941,1.005458,6.892103,-6.329826,-8.174230,-5.312777,5.573709,-1.382998,9.996505,6.094180,2.288133,2.802104,-3.155039,-8.711488,-1.681101,9.589156,4.107691,-0.693041,8.148297,5.757958,9.122994,-9.129665,4.414546,-1.831349,-9.070603,-7.844077,8.309191,3.383583,6.126839,2.259938,3.149632,-1.442456,3.341823,2.964930,8.537030,6.615563,6.232115,4.306823,-1.592968,8.628428,7.892924,-1.554760,-8.318748,-4.762634,1.787126,1.154903,-0.135910,-5.296948,-6.669790,5.096818,-9.807589,9.331705,-0.723251,-8.137604,-8.405642,9.560867,1.073535,-3.498982,-8.922450,8.018273,-1.546127,-8.859231,-1.234020,1.683258,7.990901,-2.528563,9.396090], dtype = "float32")#candidate|12421|(330,)|const|float32
call_12420 = relay.TupleGetItem(func_3190_call(relay.reshape(const_12421.astype('float32'), [330,])), 2)
call_12422 = relay.TupleGetItem(func_3193_call(relay.reshape(const_12421.astype('float32'), [330,])), 2)
func_7650_call = mod.get_global_var('func_7650')
func_7652_call = mutated_mod.get_global_var('func_7652')
call_12423 = relay.TupleGetItem(func_7650_call(), 1)
call_12424 = relay.TupleGetItem(func_7652_call(), 1)
func_1568_call = mod.get_global_var('func_1568')
func_1571_call = mutated_mod.get_global_var('func_1571')
const_12433 = relay.const([8.555593,-7.172826,-5.988834,-3.015309,0.452792,-1.561651,6.008399,9.192268,-6.920655,0.483048,3.342886,-2.494671,-3.431134,-5.302019,5.754134,-0.634226,9.126655,6.706552,1.205941,-1.399558,3.585275,4.484454,-5.133217,-7.015858,4.561221,4.762889,-7.378032,-1.938344,-0.342183,-9.566559,-2.122418,1.092979,-1.523941,1.566931,-5.044092,-8.523225,-5.825324,-7.592100,-3.799696,-2.948466,-9.666687,-6.374815,3.138819,9.593974,-2.666665,5.180957,-0.952025,-4.283484,8.801223,1.233227,-0.300917,-3.805798,7.068311,7.646860,3.191919,4.490216,8.388007,9.475148,-4.432175,5.076856,-9.870171,2.741462,4.361251,9.564770,3.292293,-6.577070,8.161143,2.081200,2.300381,-9.144561,-8.924257,-5.290350,-5.919678,-1.415985,-1.732194,4.253988,-5.974151,-4.166605,-2.061171,8.233744,-7.159782,9.506601,-7.542759,-2.711294,5.907720,-5.052536,8.715867,-5.099501,-6.832848,-0.575432,-5.461737,-6.672677,1.763096,-4.867997,-0.057935,0.700901,9.175588,-9.899519,8.017005,3.235332,-2.602661,-4.395061,-9.571110,9.698805,0.841525,8.810798,5.462331,9.854927,-7.761608,-4.848157,5.838120,4.880389,6.535668,-8.028884,7.206787,7.148058,3.354057,2.454415,-4.635306,5.352622,-2.531954,5.295749,-6.719632,-8.424230,-3.611868,9.439514,1.807344,-2.861292,8.004296,0.175270,-7.052094,-5.891773,4.520026,3.723905,-8.658273,3.868563,-5.524227,-7.450916,8.583925,3.198094,5.946243,9.036210,-0.789979,5.841715,-0.346841,-7.002471,-8.516696,4.705999,-1.639709,0.961856,5.316607,4.941683,-2.748772,-0.362995,2.170931,1.421551,-2.346838,2.034258,2.265984,-1.037798,0.689336,-1.013459,4.931002,6.067653,7.087503,-9.066177,-1.987762,-8.571916,1.411442,-8.693407,-3.735256,-5.616204,0.692587,0.474187,-5.714570,-7.499475,-1.404465,1.708829,-4.847875,8.958385,-4.022105,-3.071427,-9.231814,4.374263,9.761451,-9.404540,2.512443,0.523695,-8.556974,6.922784,-6.346540,-5.097204,1.255392,2.569782,2.450470,1.722065,-5.523059,-3.515078,-2.595587,2.886326,7.643396,6.196924,-5.118620,1.697924,-1.209594,7.937442,3.107932,9.189665,-5.786768,-4.525845,-2.164329,7.345474,-8.021973,7.318693,9.549250,-1.387864,-9.466905,9.074107,-7.510573,2.517205,-9.477880,-2.312223,-6.265077,-7.857590,-2.181346,-8.107614,-2.301243,8.435341,8.780969,1.904291,3.609577,-3.343765,2.070456,-2.418002,-0.118770,-4.560325,0.647590,-9.867742,0.502784,-9.870576,-0.947220,-1.180514,-9.629526,2.062822,-0.606575,-7.780261,-7.391661,6.196280,-9.319705,-0.012936,6.983141,6.680240,5.792157,-8.181043,-6.757352,-5.425890,-0.705613,5.384166,-0.160903,-6.395897,3.596573,4.813935,9.849722,-7.266168,-2.864498,7.718298,3.650535,-5.346238,-6.394575,7.457386,4.582184,6.613092,-4.497171,-2.050843,5.971498,8.584910,9.367456,5.365034,9.294204,5.336582,-5.004224,5.847604,5.963121,-8.139950,3.463657,4.124840,6.445651,-5.504137,0.157865,-5.803993,0.045252,-2.110770,-8.673697,-5.283751,3.855007,-2.271823,-7.499473,0.362919,2.429138,9.010851,-5.923488,-5.249361,-1.867502,3.076579,5.025656,-4.437580,-2.161300,-3.261089,-9.837826,-0.424612,-8.569674,7.924275,7.419196,-4.693729,-7.383028,0.153361,-4.745036,-3.182055,-5.669218,4.039566], dtype = "float32")#candidate|12433|(320,)|const|float32
call_12432 = relay.TupleGetItem(func_1568_call(relay.reshape(const_12433.astype('float32'), [16, 2, 10])), 0)
call_12434 = relay.TupleGetItem(func_1571_call(relay.reshape(const_12433.astype('float32'), [16, 2, 10])), 0)
func_6448_call = mod.get_global_var('func_6448')
func_6450_call = mutated_mod.get_global_var('func_6450')
call_12443 = relay.TupleGetItem(func_6448_call(), 0)
call_12444 = relay.TupleGetItem(func_6450_call(), 0)
func_8515_call = mod.get_global_var('func_8515')
func_8517_call = mutated_mod.get_global_var('func_8517')
call_12445 = func_8515_call()
call_12446 = func_8515_call()
uop_12448 = relay.cosh(bop_12412.astype('float32')) # shape=(165, 14)
uop_12450 = relay.cosh(bop_12415.astype('float32')) # shape=(165, 14)
func_4484_call = mod.get_global_var('func_4484')
func_4485_call = mutated_mod.get_global_var('func_4485')
call_12453 = relay.TupleGetItem(func_4484_call(), 2)
call_12454 = relay.TupleGetItem(func_4485_call(), 2)
bop_12455 = relay.power(bop_12412.astype('float32'), relay.reshape(uop_12392.astype('float32'), relay.shape_of(bop_12412))) # shape=(165, 14)
bop_12458 = relay.power(bop_12415.astype('float32'), relay.reshape(uop_12394.astype('float32'), relay.shape_of(bop_12415))) # shape=(165, 14)
output = relay.Tuple([call_12375,call_12401,uop_12416,call_12420,const_12421,call_12423,call_12432,const_12433,call_12443,call_12445,uop_12448,call_12453,bop_12455,])
output2 = relay.Tuple([call_12376,call_12402,uop_12418,call_12422,const_12421,call_12424,call_12434,const_12433,call_12444,call_12446,uop_12450,call_12454,bop_12458,])
func_12466 = relay.Function([var_12385,], output)
mod['func_12466'] = func_12466
mod = relay.transform.InferType()(mod)
var_12467 = relay.var("var_12467", dtype = "float64", shape = (165, 14))#candidate|12467|(165, 14)|var|float64
output = func_12466(var_12467)
func_12468 = relay.Function([var_12467], output)
mutated_mod['func_12468'] = func_12468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7137_call = mod.get_global_var('func_7137')
func_7138_call = mutated_mod.get_global_var('func_7138')
call_12478 = relay.TupleGetItem(func_7137_call(), 0)
call_12479 = relay.TupleGetItem(func_7138_call(), 0)
func_6224_call = mod.get_global_var('func_6224')
func_6226_call = mutated_mod.get_global_var('func_6226')
const_12488 = relay.const([-7,-8,-3,-6,-4,10,-2,-4,-8,7,1,-2,-10,-7,-9,4,9,3,-4,8,-3,-5,3,-9,-8,-8,2,-1,4,-9,-6,-9,4,-8,-2,8,7,10,1,-1,-6,9,9,-10,-9,8,-1,2,-8,4,7,7,5,3,5,-8,-3,8,-6,6,9,-3,-10,4,5,10,-1,-7,-4,-4,-4,-1,9,2,-10,-1,2,-9,-8,2,2,9,-9,-2,9,-4,-8,4,4,3,2,-5,9,-9,-1,-4,5,8,10,-8,6,5,-5,-1,3,-5,9,1,7,7,-3,1,-4,1,-9,-4,9,8,6,-4,-3,-6,-10,10,-9,5,8,7,5,6,8,-8,1,10,-5,-8,5,9,-1,3,8,9,4,-7,-5,-2,7,10,7,-5,8,1,7,9,10,5,9,-5,-1,1,-7,1,-4,2,-2,-6,-10,4,-8,5,-4,-10,-4,6,-7,-1,2,8,4,-9,-7,-9,-3,-4,5,-3,-10,5,-5,-9,-8,7,-4,-7,-3,5,5,-6,-6,-1,10,3,6,3,-9,-6,-3,-8,-7,3,3,-9,3,-9,6,1,6,5,2,-5,-8,-9,-5,-8,-3,-2,3,7,5,-5,5,-8,-2,3,10,-6,-1,1,-3,6,-2,-2,-10,-10,-4,7,-5,-10,-7,-2,3,5,-4,-9,5,-10,-6,3,1,10,-10,-7,-1,1,-10,-4,10,8,-4,-10,-4,8,-3,5,-6,-1,3,1,-5,-3,7,9,-7,-3,5,1,-4,-1,-2,10,5,-6,9,4,4,-8,-7,8,3,-2,-5,-10,-4,5,-9,-5,8,3,-1,-1,8,-5,8,6,7,10,3,-2,-10,4,-3,6,-10,-9,7,5,-1,8,-6,-1,-4,-6,10,5,-4,-3,-6,8,-7,-9,9,10,6,9,4,-4,2,7,-5,-4,-9,-6,6,-3,1,5,-7,1,-5,-3,10,-1,-7,-6,1,3,-9,-7,5,5,-1,7,7,9,-8,-5,4,-3,-2,-3,-9,3,7,10,-9,9,7,-7,-4,8,-3,-10,-7,-7,-10,-4], dtype = "uint32")#candidate|12488|(396,)|const|uint32
call_12487 = relay.TupleGetItem(func_6224_call(relay.reshape(const_12488.astype('uint32'), [3, 12, 11])), 0)
call_12489 = relay.TupleGetItem(func_6226_call(relay.reshape(const_12488.astype('uint32'), [3, 12, 11])), 0)
func_9007_call = mod.get_global_var('func_9007')
func_9009_call = mutated_mod.get_global_var('func_9009')
call_12498 = func_9007_call()
call_12499 = func_9007_call()
output = relay.Tuple([call_12478,call_12487,const_12488,call_12498,])
output2 = relay.Tuple([call_12479,call_12489,const_12488,call_12499,])
func_12500 = relay.Function([], output)
mod['func_12500'] = func_12500
mod = relay.transform.InferType()(mod)
mutated_mod['func_12500'] = func_12500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12500_call = mutated_mod.get_global_var('func_12500')
call_12501 = func_12500_call()
output = call_12501
func_12502 = relay.Function([], output)
mutated_mod['func_12502'] = func_12502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8893_call = mod.get_global_var('func_8893')
func_8894_call = mutated_mod.get_global_var('func_8894')
call_12520 = relay.TupleGetItem(func_8893_call(), 2)
call_12521 = relay.TupleGetItem(func_8894_call(), 2)
output = relay.Tuple([call_12520,])
output2 = relay.Tuple([call_12521,])
func_12544 = relay.Function([], output)
mod['func_12544'] = func_12544
mod = relay.transform.InferType()(mod)
mutated_mod['func_12544'] = func_12544
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12544_call = mutated_mod.get_global_var('func_12544')
call_12545 = func_12544_call()
output = call_12545
func_12546 = relay.Function([], output)
mutated_mod['func_12546'] = func_12546
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3508_call = mod.get_global_var('func_3508')
func_3510_call = mutated_mod.get_global_var('func_3510')
call_12668 = func_3508_call()
call_12669 = func_3508_call()
func_6523_call = mod.get_global_var('func_6523')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_12673 = func_6523_call()
call_12674 = func_6523_call()
func_10793_call = mod.get_global_var('func_10793')
func_10794_call = mutated_mod.get_global_var('func_10794')
call_12679 = relay.TupleGetItem(func_10793_call(), 1)
call_12680 = relay.TupleGetItem(func_10794_call(), 1)
func_3157_call = mod.get_global_var('func_3157')
func_3158_call = mutated_mod.get_global_var('func_3158')
call_12683 = relay.TupleGetItem(func_3157_call(), 0)
call_12684 = relay.TupleGetItem(func_3158_call(), 0)
func_8370_call = mod.get_global_var('func_8370')
func_8373_call = mutated_mod.get_global_var('func_8373')
var_12699 = relay.var("var_12699", dtype = "int32", shape = (14,))#candidate|12699|(14,)|var|int32
call_12698 = relay.TupleGetItem(func_8370_call(relay.reshape(var_12699.astype('int32'), [2, 1, 7]), relay.reshape(var_12699.astype('int32'), [2, 1, 7]), ), 0)
call_12700 = relay.TupleGetItem(func_8373_call(relay.reshape(var_12699.astype('int32'), [2, 1, 7]), relay.reshape(var_12699.astype('int32'), [2, 1, 7]), ), 0)
output = relay.Tuple([call_12668,call_12673,call_12679,call_12683,call_12698,var_12699,])
output2 = relay.Tuple([call_12669,call_12674,call_12680,call_12684,call_12700,var_12699,])
func_12701 = relay.Function([var_12699,], output)
mod['func_12701'] = func_12701
mod = relay.transform.InferType()(mod)
var_12702 = relay.var("var_12702", dtype = "int32", shape = (14,))#candidate|12702|(14,)|var|int32
output = func_12701(var_12702)
func_12703 = relay.Function([var_12702], output)
mutated_mod['func_12703'] = func_12703
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8979_call = mod.get_global_var('func_8979')
func_8981_call = mutated_mod.get_global_var('func_8981')
call_12761 = func_8979_call()
call_12762 = func_8979_call()
output = call_12761
output2 = call_12762
func_12764 = relay.Function([], output)
mod['func_12764'] = func_12764
mod = relay.transform.InferType()(mod)
mutated_mod['func_12764'] = func_12764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12764_call = mutated_mod.get_global_var('func_12764')
call_12765 = func_12764_call()
output = call_12765
func_12766 = relay.Function([], output)
mutated_mod['func_12766'] = func_12766
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7385_call = mod.get_global_var('func_7385')
func_7387_call = mutated_mod.get_global_var('func_7387')
call_12792 = relay.TupleGetItem(func_7385_call(), 0)
call_12793 = relay.TupleGetItem(func_7387_call(), 0)
var_12801 = relay.var("var_12801", dtype = "float32", shape = (7, 11, 15))#candidate|12801|(7, 11, 15)|var|float32
bop_12802 = relay.divide(call_12792.astype('float32'), var_12801.astype('float32')) # shape=(7, 11, 15)
bop_12805 = relay.divide(call_12793.astype('float32'), var_12801.astype('float32')) # shape=(7, 11, 15)
output = bop_12802
output2 = bop_12805
func_12806 = relay.Function([var_12801,], output)
mod['func_12806'] = func_12806
mod = relay.transform.InferType()(mod)
var_12807 = relay.var("var_12807", dtype = "float32", shape = (7, 11, 15))#candidate|12807|(7, 11, 15)|var|float32
output = func_12806(var_12807)
func_12808 = relay.Function([var_12807], output)
mutated_mod['func_12808'] = func_12808
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7220_call = mod.get_global_var('func_7220')
func_7221_call = mutated_mod.get_global_var('func_7221')
call_12819 = relay.TupleGetItem(func_7220_call(), 2)
call_12820 = relay.TupleGetItem(func_7221_call(), 2)
output = call_12819
output2 = call_12820
func_12826 = relay.Function([], output)
mod['func_12826'] = func_12826
mod = relay.transform.InferType()(mod)
output = func_12826()
func_12827 = relay.Function([], output)
mutated_mod['func_12827'] = func_12827
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8115_call = mod.get_global_var('func_8115')
func_8116_call = mutated_mod.get_global_var('func_8116')
call_12849 = func_8115_call()
call_12850 = func_8115_call()
func_8279_call = mod.get_global_var('func_8279')
func_8281_call = mutated_mod.get_global_var('func_8281')
call_12854 = relay.TupleGetItem(func_8279_call(), 1)
call_12855 = relay.TupleGetItem(func_8281_call(), 1)
func_7536_call = mod.get_global_var('func_7536')
func_7537_call = mutated_mod.get_global_var('func_7537')
call_12873 = relay.TupleGetItem(func_7536_call(), 0)
call_12874 = relay.TupleGetItem(func_7537_call(), 0)
func_12164_call = mod.get_global_var('func_12164')
func_12166_call = mutated_mod.get_global_var('func_12166')
var_12885 = relay.var("var_12885", dtype = "float32", shape = (330,))#candidate|12885|(330,)|var|float32
call_12884 = relay.TupleGetItem(func_12164_call(relay.reshape(var_12885.astype('float32'), [330,])), 5)
call_12886 = relay.TupleGetItem(func_12166_call(relay.reshape(var_12885.astype('float32'), [330,])), 5)
output = relay.Tuple([call_12849,call_12854,call_12873,call_12884,var_12885,])
output2 = relay.Tuple([call_12850,call_12855,call_12874,call_12886,var_12885,])
func_12887 = relay.Function([var_12885,], output)
mod['func_12887'] = func_12887
mod = relay.transform.InferType()(mod)
var_12888 = relay.var("var_12888", dtype = "float32", shape = (330,))#candidate|12888|(330,)|var|float32
output = func_12887(var_12888)
func_12889 = relay.Function([var_12888], output)
mutated_mod['func_12889'] = func_12889
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4300_call = mod.get_global_var('func_4300')
func_4301_call = mutated_mod.get_global_var('func_4301')
call_12951 = relay.TupleGetItem(func_4300_call(), 0)
call_12952 = relay.TupleGetItem(func_4301_call(), 0)
var_12955 = relay.var("var_12955", dtype = "uint32", shape = (165, 11))#candidate|12955|(165, 11)|var|uint32
bop_12956 = relay.logical_and(call_12951.astype('bool'), var_12955.astype('bool')) # shape=(165, 11)
bop_12959 = relay.logical_and(call_12952.astype('bool'), var_12955.astype('bool')) # shape=(165, 11)
output = bop_12956
output2 = bop_12959
func_12961 = relay.Function([var_12955,], output)
mod['func_12961'] = func_12961
mod = relay.transform.InferType()(mod)
var_12962 = relay.var("var_12962", dtype = "uint32", shape = (165, 11))#candidate|12962|(165, 11)|var|uint32
output = func_12961(var_12962)
func_12963 = relay.Function([var_12962], output)
mutated_mod['func_12963'] = func_12963
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3157_call = mod.get_global_var('func_3157')
func_3158_call = mutated_mod.get_global_var('func_3158')
call_12999 = relay.TupleGetItem(func_3157_call(), 0)
call_13000 = relay.TupleGetItem(func_3158_call(), 0)
output = call_12999
output2 = call_13000
func_13024 = relay.Function([], output)
mod['func_13024'] = func_13024
mod = relay.transform.InferType()(mod)
output = func_13024()
func_13025 = relay.Function([], output)
mutated_mod['func_13025'] = func_13025
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8279_call = mod.get_global_var('func_8279')
func_8281_call = mutated_mod.get_global_var('func_8281')
call_13029 = relay.TupleGetItem(func_8279_call(), 0)
call_13030 = relay.TupleGetItem(func_8281_call(), 0)
output = relay.Tuple([call_13029,])
output2 = relay.Tuple([call_13030,])
func_13040 = relay.Function([], output)
mod['func_13040'] = func_13040
mod = relay.transform.InferType()(mod)
output = func_13040()
func_13041 = relay.Function([], output)
mutated_mod['func_13041'] = func_13041
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8569_call = mod.get_global_var('func_8569')
func_8571_call = mutated_mod.get_global_var('func_8571')
call_13095 = relay.TupleGetItem(func_8569_call(), 2)
call_13096 = relay.TupleGetItem(func_8571_call(), 2)
output = relay.Tuple([call_13095,])
output2 = relay.Tuple([call_13096,])
func_13108 = relay.Function([], output)
mod['func_13108'] = func_13108
mod = relay.transform.InferType()(mod)
output = func_13108()
func_13109 = relay.Function([], output)
mutated_mod['func_13109'] = func_13109
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11183_call = mod.get_global_var('func_11183')
func_11184_call = mutated_mod.get_global_var('func_11184')
call_13124 = relay.TupleGetItem(func_11183_call(), 1)
call_13125 = relay.TupleGetItem(func_11184_call(), 1)
func_9866_call = mod.get_global_var('func_9866')
func_9868_call = mutated_mod.get_global_var('func_9868')
var_13133 = relay.var("var_13133", dtype = "float32", shape = (320,))#candidate|13133|(320,)|var|float32
call_13132 = relay.TupleGetItem(func_9866_call(relay.reshape(var_13133.astype('float32'), [320,])), 1)
call_13134 = relay.TupleGetItem(func_9868_call(relay.reshape(var_13133.astype('float32'), [320,])), 1)
func_12806_call = mod.get_global_var('func_12806')
func_12808_call = mutated_mod.get_global_var('func_12808')
const_13141 = relay.const([[1.649438,3.975041,-0.129351],[-1.882213,-3.753540,-5.774084],[-4.829156,-0.789191,-7.620090],[-5.898642,2.995097,0.692858],[-3.398838,3.468862,9.549106],[-8.374314,1.627577,-7.668746],[-4.641337,6.247429,6.549235],[-1.712541,8.352909,-1.050625],[0.842404,0.956236,-3.360735],[4.448112,9.770302,-0.015928],[-4.974676,-9.692253,-4.236742],[8.769812,1.940194,8.896776],[0.618665,-8.339721,5.724480],[-0.610358,2.432571,7.945123],[-6.570334,-9.551364,-0.980804],[8.698996,3.121292,-3.179693],[-5.147181,-4.632441,-8.381112],[-2.518927,-5.686120,-1.161943],[3.343297,-4.975228,-6.540131],[-8.798541,-9.345594,2.620267],[8.101836,7.652798,-9.170634],[-9.655023,-0.425327,-4.511546],[3.131270,-7.227871,-7.433481],[1.479043,6.508232,-0.689573],[8.227759,-2.516384,-3.324885],[-2.203345,-7.241201,-2.443521],[-5.581257,4.137757,-1.560132],[3.718909,-9.794166,3.362489],[5.630283,-0.637134,-6.766403],[-7.393140,-5.519258,7.244972],[-9.766253,-4.214583,-4.883829],[7.210086,-5.570111,0.259560],[7.372145,-9.456985,-5.910667],[-0.106956,-1.422698,-0.395493],[3.983379,-3.659064,7.428654],[-0.267509,-5.382012,8.867771],[-8.144747,6.442363,0.877074],[8.242955,3.324984,6.337908],[8.330765,2.658729,-7.639890],[-2.372946,0.625519,2.953052],[-2.702009,-0.797809,9.045693],[7.421647,5.476632,-5.857352],[3.099001,5.863011,4.191761],[-7.971662,-4.095402,-6.923174],[1.300249,-6.866632,7.791329],[-2.908122,-5.677107,-0.918470],[-8.933764,3.169146,-1.559525],[-0.698508,2.283158,9.792645],[-1.542146,1.929932,2.204706],[-3.982579,-8.658641,6.443256],[-4.919038,6.655136,0.467767],[-7.320503,-8.131469,4.831648],[3.461140,-8.485044,5.756476],[5.442938,-3.181873,-4.596667],[-2.363481,-3.312957,2.057540],[0.819384,5.711213,-1.912456],[-8.575960,-8.625792,-5.711741],[-2.511826,-1.987575,-5.892617],[-1.765369,0.829979,-4.321223],[-9.486796,-1.635620,3.185400],[4.935017,-8.835858,-7.875358],[7.219088,5.038263,3.033196],[1.205737,-8.325789,-0.300383],[1.311657,-0.623311,9.607746],[-6.529935,-4.162724,5.525678],[-7.434204,-1.710628,4.896576],[-1.872089,4.465630,2.008037],[4.111273,-5.169658,-6.236035],[5.951874,0.829979,-9.859986],[-4.096794,8.703020,-6.150628],[8.875259,0.308556,3.982499],[-3.866327,6.501736,0.278607],[-8.483455,9.857662,-3.496157],[0.643548,0.884630,-8.437841],[-4.554785,-0.659604,7.973456],[-1.149260,0.319025,-4.162787],[-4.625135,-6.222971,-7.366008],[-5.130418,8.338529,-5.601510],[8.679977,3.404735,-4.180428],[0.718236,-9.008246,-5.630416],[-0.076238,-1.248502,-3.243173],[-2.959197,9.237023,-4.188778],[-3.520579,-5.242251,-9.865049],[-6.366028,8.632265,-1.768467],[5.384946,-2.774685,1.927299],[7.739100,3.365312,-9.668090],[-5.601063,-4.883413,1.714750],[2.938770,-6.496843,8.363429],[-0.322407,-9.778242,4.951120],[-8.726777,-9.667761,3.171614],[6.653886,9.258608,-6.529152],[7.203273,-8.554004,2.422183],[-6.037606,-4.944760,-8.032467],[-9.071280,2.599235,-2.455050],[2.975491,3.385366,9.134240],[-3.811200,8.478072,2.778320],[0.821630,-6.594610,6.759464],[5.079977,-3.291396,-1.977073],[-1.176673,-1.302105,3.740365],[-7.151695,1.958831,7.020741],[-3.328094,8.113757,4.124759],[-1.651259,0.798748,4.504596],[-1.907218,3.812206,-2.099590],[6.108423,-8.718035,-5.222377],[0.294446,-0.243580,-5.060845],[4.294039,8.929134,-2.899859],[-4.655455,6.490071,0.146020],[-6.953869,-2.339628,-7.096873],[4.246717,1.070757,9.866183],[5.732808,-7.564699,6.314433],[4.365822,-4.278702,-2.006239],[-8.329606,7.578120,-8.292150],[-2.564715,-6.204169,-5.052238],[4.627319,-4.415050,8.295151],[-3.116210,-0.578554,5.710942],[4.882217,2.488482,3.247773],[-5.362240,-5.949323,-6.200048],[-2.292643,0.152313,3.745294],[7.328923,6.769624,7.600452],[-8.275829,6.176119,-4.597958],[-2.186101,-1.891935,3.426645],[0.811481,6.625535,8.863170],[5.392916,-4.906475,-2.658748],[-9.559698,-2.441937,-2.066500],[9.841522,8.227174,3.708797],[1.255235,1.654180,3.068045],[4.848522,-9.721748,-0.164208],[-1.122898,9.365539,-9.450769],[-6.503372,4.611158,-0.798779],[-9.819248,-8.467832,4.095943],[-3.303613,-0.495946,-6.079158],[-9.649419,-6.699931,-7.371775],[9.651379,-2.236842,7.104246],[-6.813265,-3.613078,-5.704129],[7.565798,-3.432078,-9.805653],[-5.242981,-5.088768,-6.604523],[-1.238483,-3.045630,0.772298],[-7.202416,-6.723685,2.419280],[0.255102,1.047898,5.226639],[5.056845,5.663716,3.576814],[1.165057,-2.560064,-1.791261],[-2.077431,2.425796,5.472037],[5.485540,8.118721,4.382860],[5.123023,8.180290,-8.306227],[-2.697450,5.845523,3.146876],[1.441623,-2.480206,-0.079850],[-9.775524,-4.630246,5.628537],[-7.832681,7.133240,-3.100125],[-6.220881,6.754046,9.927517],[-0.629828,6.587418,1.794172],[-1.632365,0.944574,-5.326367],[2.349202,-2.992079,-0.514043],[-8.557549,-7.706204,2.723764],[-2.056472,-7.714292,6.377986],[1.744671,6.699029,7.821572],[9.012994,4.791305,7.596724],[-3.502379,-6.733394,-1.737470],[-2.216362,4.327843,-5.924911],[-7.802135,-3.159356,-2.149844],[-7.757283,-6.195640,8.652287],[-5.765505,5.985936,8.704116],[8.073521,-8.538000,4.848712],[-9.803190,8.010277,-6.230685],[-2.744939,-4.901035,-5.917148],[-5.318638,-2.239785,-7.901771],[0.330999,-2.494125,6.240216],[1.998087,9.094043,-7.291413],[-4.612426,-3.017645,9.919990],[9.425693,6.975938,-6.509660],[-8.904018,-3.412562,3.319620],[-9.194936,2.728588,-2.252558],[7.388944,1.747096,7.918420],[2.289901,3.243146,1.426430],[-9.947253,-4.952198,-4.937519],[0.112844,-5.668071,3.378245],[3.431479,-6.836127,-8.530462],[1.986364,-7.324363,-1.201541],[-5.753037,3.968436,0.599092],[-7.457982,3.065774,-6.490948],[-7.503868,-2.328452,3.364457],[-3.476878,-2.016851,-0.986504],[9.183215,-7.694544,-6.601658],[2.735217,-4.176504,-1.169695],[8.469394,6.292656,-8.205563],[-1.798108,-5.231745,5.703938],[-7.132573,-5.001559,-3.212476],[1.649340,-9.707087,0.431694],[-5.219245,5.259451,3.595577],[0.778932,9.038301,8.294855],[-0.179389,-2.963243,-0.014061],[-7.536986,4.177456,7.746736],[2.913668,-8.177884,-5.025127],[2.647501,-4.688268,1.479893],[-4.090786,2.438496,-6.944317],[3.957404,-9.838699,6.146217],[8.928329,-0.781531,-0.812019],[-3.507350,-6.490003,7.459833],[-6.028866,-0.721294,3.594418],[-3.179287,-7.435095,1.451200],[-9.830971,3.051536,-1.631035],[-6.998457,-8.710570,7.667945],[-2.485134,0.608039,-8.156469],[-7.458029,0.184137,0.132887],[-6.517365,-6.603367,8.741527],[6.022878,6.219448,7.738534],[9.249252,3.242304,-3.724969],[-0.712503,1.899689,4.089674],[-3.598815,-4.265066,-2.532644],[5.799839,-2.391208,3.780311],[2.930436,5.602576,1.972412],[2.333282,-5.300268,7.877044],[7.486025,-6.901555,4.730444],[-2.137319,0.030905,4.697766],[-8.191808,-7.325476,-7.953023],[7.332452,4.039748,-6.332345],[8.886851,7.956227,6.064301],[-6.431938,9.882063,8.618416],[-1.554406,-9.546731,-3.495753],[-5.640840,-1.716001,6.213017],[-8.347330,0.675723,-3.340037],[1.428552,6.321577,6.873813],[4.437020,9.489864,-8.241642],[4.463545,-8.567325,-7.751200],[8.967789,9.079618,-2.180225],[-7.149517,6.108083,-7.954255],[-1.610503,6.074767,-7.359718],[-2.070275,-5.695738,-8.403259],[-5.396572,-2.045435,-4.631181],[1.679455,8.123568,0.788868],[-5.737954,-7.238071,8.879580],[7.042278,-1.168285,7.049982],[6.545939,-4.797334,5.262994],[5.815197,-1.610126,-7.975266],[-1.267938,-0.649758,4.819940],[6.511556,-6.510046,6.560715],[-6.072318,6.583026,-5.236368],[-3.708290,-5.322640,6.214269],[0.398479,9.069114,-7.137816],[-2.911633,8.765310,-6.870689],[7.903395,-1.808015,-8.686766],[4.650154,-6.139548,2.992717],[-8.923793,6.022039,1.101649],[-5.328296,8.176999,-1.743354],[-4.692385,-8.147708,-1.360638],[-5.947700,3.916970,7.156874],[-3.108458,-4.074335,9.719721],[4.057998,5.837277,-6.133601],[-0.034653,-8.190790,-7.962671],[1.052635,3.159064,-7.283325],[7.432124,5.605306,-3.504410],[-9.145137,-7.341936,1.102217],[-4.591494,0.242918,5.617919],[-2.885825,-7.457690,6.653308],[-5.704567,4.266672,1.269462],[0.691016,-5.865083,8.636185],[3.344842,-6.982926,-5.035720],[7.453683,-9.141083,5.196061],[-1.867640,0.096851,-0.066113],[2.778242,-9.781795,-1.603006],[-0.333516,-6.593978,2.722872],[3.852695,0.126604,-0.427829],[-6.773054,-2.466547,-0.604337],[-7.417334,-0.867904,5.492840],[6.077471,1.867670,-6.646997],[4.085345,6.247674,9.401368],[7.478383,3.318346,-9.884125],[-0.315770,7.224194,-4.867511],[-9.988323,-4.120966,-9.983933],[0.623965,-4.521185,4.939793],[4.690938,8.660033,-8.120860],[7.032147,-3.299548,-9.231253],[-4.117911,0.973217,-2.932068],[3.263790,-5.866535,9.435237],[9.390027,-4.951279,1.290973],[-9.095172,-3.005054,7.148784],[0.094002,-3.474876,0.411246],[-4.642616,-7.154106,1.720630],[1.238607,1.836416,-3.210161],[4.764556,-6.246027,2.225739],[9.636004,-8.761107,6.131879],[0.470154,-2.386304,-0.085297],[-6.974411,5.435331,-9.845064],[9.293140,0.551677,-3.081554],[8.501859,7.089918,5.895235],[1.098860,7.032098,9.513543],[8.420496,1.067287,-1.335490],[6.311826,-4.705911,3.355337],[4.605872,3.139589,-1.381331],[-0.448677,2.528558,2.193463],[-8.223160,9.886267,-6.758702],[7.605977,9.100104,4.123202],[-8.728258,7.084192,8.877193],[-6.826588,6.395041,4.798249],[0.105583,-0.103477,2.058375],[8.217005,-8.102029,3.087795],[8.508568,5.236720,5.479348],[8.510292,4.832308,8.814263],[8.397010,-1.564524,3.980215],[-9.289907,0.055426,0.585895],[-5.100041,4.624253,5.937980],[6.463124,5.545321,-2.405622],[0.484988,-5.089200,-6.031885],[4.420019,1.472501,-8.388116],[7.834419,8.468763,9.961932],[-1.591891,-1.135632,6.894768],[-1.300984,-7.045719,2.616865],[4.751934,-7.367239,8.475782],[2.020212,4.114328,-0.340973],[0.100195,-8.317164,9.031044],[6.618530,-4.408469,3.397263],[8.618393,-9.771494,3.254985],[-1.267958,2.790062,-4.881790],[8.052551,1.735410,2.100552],[7.932647,-8.548505,8.495454],[0.414875,2.506761,-6.034774],[7.290068,-2.355783,-0.497476],[6.122374,-8.994754,1.283325],[-7.790830,-8.165985,9.452671],[6.923593,-2.250136,9.536480],[7.326375,-8.586609,-9.032640],[3.998450,5.294403,9.311423],[9.846386,-4.746844,1.628370],[7.729736,9.563835,-9.479610],[3.636773,0.531816,8.978512],[9.451815,4.696896,0.039717],[4.956491,-9.986793,-3.940640],[-4.579522,-6.757100,-1.892195],[-0.038546,1.348108,5.149365],[4.141015,-7.389887,0.705272],[0.348236,-4.937516,-9.582360],[-9.635442,1.275859,-4.620460],[-9.985323,6.170070,-6.921928],[8.374937,1.414782,-2.437275],[-8.693389,7.421970,-5.770881],[-8.816749,-6.357266,-0.216633],[-8.122617,-5.881541,6.806111],[6.079244,8.300513,3.686382],[-0.802449,-4.054687,4.799457],[5.096852,-2.643954,-1.517293],[1.570555,-3.050392,-5.197328],[-1.161686,5.848252,-1.703000],[-9.326270,1.567127,-1.908525],[5.116569,0.377297,3.769126],[-3.494611,-7.535891,8.246263],[2.547642,1.901491,-8.168895],[-4.025540,-2.250076,6.809676],[3.786813,-8.781554,9.748203],[3.548034,-9.190963,7.014966],[3.158207,-2.463544,-2.822002],[2.684420,-0.785038,-3.174490],[-4.727608,0.260462,-5.092009],[3.562994,-5.073273,-7.213904],[-7.821963,-4.338077,-7.413518],[-3.312464,7.767474,0.464723],[8.805816,6.799574,0.891424],[-2.988404,4.412088,-7.866842],[0.138608,8.218596,-4.208734],[5.056501,7.855089,1.745716],[1.536678,1.560489,-3.591006],[8.778493,2.916982,1.710341],[-5.295374,-2.678535,9.850185],[9.171987,-9.739534,0.008698],[2.610204,-2.008551,-8.721436],[-4.546720,7.132864,5.982826],[5.483870,7.089774,5.223585],[4.162239,9.017517,0.946208],[0.561335,0.304508,9.389004],[-9.360286,7.827028,1.347698],[-8.303217,-1.313892,-4.624694],[0.540412,-6.126336,-4.697227],[1.500982,6.296186,-2.368944],[2.620611,0.633925,6.395759],[5.600911,5.707583,-4.215688],[6.703699,0.260484,1.793783],[7.842843,8.289142,3.044208],[3.829352,0.225672,2.457868],[-3.277559,8.191964,8.023644],[-7.312600,-2.245362,-4.981130],[2.330138,1.453321,1.138299],[-6.481239,5.944659,-0.997421],[4.995753,3.428962,-3.855945],[-4.947911,-9.001477,-0.396269],[8.963047,-5.153053,8.454447],[-3.007700,-8.140266,1.652957],[-1.178327,-5.416155,4.395836]], dtype = "float32")#candidate|13141|(385, 3)|const|float32
call_13140 = func_12806_call(relay.reshape(const_13141.astype('float32'), [7, 11, 15]))
call_13142 = func_12806_call(relay.reshape(const_13141.astype('float32'), [7, 11, 15]))
output = relay.Tuple([call_13124,call_13132,var_13133,call_13140,const_13141,])
output2 = relay.Tuple([call_13125,call_13134,var_13133,call_13142,const_13141,])
func_13150 = relay.Function([var_13133,], output)
mod['func_13150'] = func_13150
mod = relay.transform.InferType()(mod)
mutated_mod['func_13150'] = func_13150
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13151 = relay.var("var_13151", dtype = "float32", shape = (320,))#candidate|13151|(320,)|var|float32
func_13150_call = mutated_mod.get_global_var('func_13150')
call_13152 = func_13150_call(var_13151)
output = call_13152
func_13153 = relay.Function([var_13151], output)
mutated_mod['func_13153'] = func_13153
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5913_call = mod.get_global_var('func_5913')
func_5914_call = mutated_mod.get_global_var('func_5914')
call_13164 = relay.TupleGetItem(func_5913_call(), 0)
call_13165 = relay.TupleGetItem(func_5914_call(), 0)
output = call_13164
output2 = call_13165
func_13174 = relay.Function([], output)
mod['func_13174'] = func_13174
mod = relay.transform.InferType()(mod)
output = func_13174()
func_13175 = relay.Function([], output)
mutated_mod['func_13175'] = func_13175
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13024_call = mod.get_global_var('func_13024')
func_13025_call = mutated_mod.get_global_var('func_13025')
call_13179 = func_13024_call()
call_13180 = func_13024_call()
output = call_13179
output2 = call_13180
func_13183 = relay.Function([], output)
mod['func_13183'] = func_13183
mod = relay.transform.InferType()(mod)
mutated_mod['func_13183'] = func_13183
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13183_call = mutated_mod.get_global_var('func_13183')
call_13184 = func_13183_call()
output = call_13184
func_13185 = relay.Function([], output)
mutated_mod['func_13185'] = func_13185
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3259_call = mod.get_global_var('func_3259')
func_3261_call = mutated_mod.get_global_var('func_3261')
call_13206 = relay.TupleGetItem(func_3259_call(), 2)
call_13207 = relay.TupleGetItem(func_3261_call(), 2)
uop_13213 = relay.atanh(call_13206.astype('float32')) # shape=(165, 1)
uop_13215 = relay.atanh(call_13207.astype('float32')) # shape=(165, 1)
func_8826_call = mod.get_global_var('func_8826')
func_8828_call = mutated_mod.get_global_var('func_8828')
const_13218 = relay.const([-8,-8,-8,2,5,-4,2,-1,-4,3,8,10,-1,8,-10,9,-4,6,-8,-4,4,2,-1,-4,-5,-2,2,-10,-10,-4,-7,-10,-8,7,-7,-8,6,-9,-3,3,-10,3,-10,-9,-1,-1,-6,3,9,9,-8,9,9,2,-10,9,3,4,-5,2,-5,-6,5,-4,-7,10,-4,-9,4,-4,-8,6,7,3,-2,9,9,8,-3,8,-9,-5,-7,5,-6,6,4,-7,2,2,-6,-3,6,-1,-8,-9,7,-10,-8,6,6,10,-5,-8,7,-5,2,-8,-3,-7,7,-8,10,1,-6,2,2,-1,-8,-8,-10,-10,2,3,8,-6,6,1,5,3,-10,1,-8,-1,-3,3,-1,-8,-10,8,-10,5,8,3,-8,5,3,2,-10,10,-9,7,-6,2,-5,-6,-5,-1,4,8,-10,2,1,-5,-6,-2,-7,-6,3,1,-10,-1,5,-10,7,5,-3,3,2,2,-4,-4,3,-4,-1,4,-1,8,8,8,-8,-3,9,-2,3,-8,10,7,-3,-10,7,4,9,-5,10,10,-4,8,8,-4,-7,5,-4,1,-3,-10,6,-8,7,-2,9,-6,7,-8,-7,-4,-5,-10,-3,-6,3,-7,-3,-4,10,-9,9,4,1,-1,-4,-3,-7,-10,5,5,6,-6,8,-9,-5,-9,-2,-2,-7,-3,9,-2,10,-7,9,-2,-5,-4,-8,3,-9,-10,7,8,-7,5,-7,-4,-10,-2,2,-6,4,-10,-4,8,7,-6,1,10,-7,8,3,-10,3,-4,8,4,1,-4,10,8,-9,-4,10,-8,1,10,-8,-9,-4,9,-2,-4,10,-7,10,-8,2,7,7,1,-3,-4,-3,3,-5,-1,-7,1,5,-8,5,-1,-7,1,8,-4,4,2,-2,-7,9,-7,5,6,7,-4,-7,9,7,-9,-3,4,2,5,2,4,-9,8,8,5,-7,6,-6,-9,7,8,5,-7,9,-3,-3,-2,8,6,3,9,-2,5,2,-3,-4,-8,4,-7,7,-3,9,-3,-7,-2,2,-2,6,2,-1,-6,-7,-5,-2,-3,-4,-9,4,-9,5,-1,3,-3,9,7,-10,7,9,-8,6,-10,-10,3,-3,4,4,-6,7,5,5,-9,7,2,-10,7,-4,8,5,7,-6,7,6,-6,-1,10,3,10,-5,-7,5,-3,-10,4,-4,5,-1,9,-4,-2,-8,-10,2,-2,-4,-4,-3,-9,-9,10,3,-5,-8,4,1,-8,6,9,-9,7,-10,-4,7,5,6,1,-3,-6,1,2,3,1,7,9,1,-1,6,-3,9,-1,5,4,10,-6,7,-5,7,2,-5,4,-7,-4,-10,-8,-5,4,4,-8,8,-7,2,-5,-7,-7,-8,-8,-5,7,-1,4,5,6,4,4,-7,-6,1,2,-10,2,-1,4,5,1,8,2,3,-3,-1,10,-7,1,-10,10,1,10,2,-9,-7,3,-8,-9,2,-10,10,-4,-8,7,-7,2,8,-1,-7,-7,3,-10,-4,3,-2,10,-5,-10,-7,-3,-5,2,8,-4,-4,-7,-1,-7,7,-1,-5,2,-3,-4,-1,-5,-3,-2,2,4,-8,-2,-10,-6,-1,6,7,-7,-10,3,8,-2,8,-2,9,-6,-8,8,9,7,-10,-7,10,-9,7,-6,1,7,-1,8,4,-6,2,4,-7,-3,-3,4,-6,-4,5,7,-7,5,-3,7,-9,-4,9,2,9,5,-8,3,-1,9,8,-4,-2,10,-2,-3,-2,-1,4,-6,-1,-3,9,-4,-7,-10,9,-10,1,-6,-9,-5,7,9,-3,4,-8,-4,-5,1,1,4,3,3,-4,-10,-10,-3,3,8,-8,10,7,7,2,3,9,-5,1,-8,-7,-9,5,3,3,6,2,-1,9,3,6,-5,3,-9,8,-1,-8,-1,2,5,-3,-1,6,-8,-10,6,-6,2,1,-8,-1,-3,1,5,7,-1,8,7,-3,-1,-5,10,-10,-5,-4,-1,1,-5,7,8,-10,6,2,-4,-8,8,1,-5,10,1,2,-10,-5,9,-7,-8,7,-4,7,4,2,9,1,4,5,-7,7,-1,-4,-8,7,-9,2,-3,-1,4,-2,7,-8,-5,6,9,-1,10,3,8,4,4,3,4,-6,-9,1,2,-7,-2,8,8,4,-7,-6,6,-4,-5,-8,3,7,-2,10,-8,10,-1,1], dtype = "uint32")#candidate|13218|(825,)|const|uint32
call_13217 = func_8826_call(relay.reshape(const_13218.astype('uint32'), [165, 5]))
call_13219 = func_8826_call(relay.reshape(const_13218.astype('uint32'), [165, 5]))
output = relay.Tuple([uop_13213,call_13217,const_13218,])
output2 = relay.Tuple([uop_13215,call_13219,const_13218,])
func_13220 = relay.Function([], output)
mod['func_13220'] = func_13220
mod = relay.transform.InferType()(mod)
output = func_13220()
func_13221 = relay.Function([], output)
mutated_mod['func_13221'] = func_13221
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6448_call = mod.get_global_var('func_6448')
func_6450_call = mutated_mod.get_global_var('func_6450')
call_13222 = relay.TupleGetItem(func_6448_call(), 0)
call_13223 = relay.TupleGetItem(func_6450_call(), 0)
output = relay.Tuple([call_13222,])
output2 = relay.Tuple([call_13223,])
func_13231 = relay.Function([], output)
mod['func_13231'] = func_13231
mod = relay.transform.InferType()(mod)
mutated_mod['func_13231'] = func_13231
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13231_call = mutated_mod.get_global_var('func_13231')
call_13232 = func_13231_call()
output = call_13232
func_13233 = relay.Function([], output)
mutated_mod['func_13233'] = func_13233
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6555_call = mod.get_global_var('func_6555')
func_6556_call = mutated_mod.get_global_var('func_6556')
call_13268 = func_6555_call()
call_13269 = func_6555_call()
func_13040_call = mod.get_global_var('func_13040')
func_13041_call = mutated_mod.get_global_var('func_13041')
call_13281 = relay.TupleGetItem(func_13040_call(), 0)
call_13282 = relay.TupleGetItem(func_13041_call(), 0)
output = relay.Tuple([call_13268,call_13281,])
output2 = relay.Tuple([call_13269,call_13282,])
func_13284 = relay.Function([], output)
mod['func_13284'] = func_13284
mod = relay.transform.InferType()(mod)
output = func_13284()
func_13285 = relay.Function([], output)
mutated_mod['func_13285'] = func_13285
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12500_call = mod.get_global_var('func_12500')
func_12502_call = mutated_mod.get_global_var('func_12502')
call_13350 = relay.TupleGetItem(func_12500_call(), 0)
call_13351 = relay.TupleGetItem(func_12502_call(), 0)
output = relay.Tuple([call_13350,])
output2 = relay.Tuple([call_13351,])
func_13353 = relay.Function([], output)
mod['func_13353'] = func_13353
mod = relay.transform.InferType()(mod)
output = func_13353()
func_13354 = relay.Function([], output)
mutated_mod['func_13354'] = func_13354
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4484_call = mod.get_global_var('func_4484')
func_4485_call = mutated_mod.get_global_var('func_4485')
call_13367 = relay.TupleGetItem(func_4484_call(), 2)
call_13368 = relay.TupleGetItem(func_4485_call(), 2)
func_12302_call = mod.get_global_var('func_12302')
func_12303_call = mutated_mod.get_global_var('func_12303')
call_13400 = relay.TupleGetItem(func_12302_call(), 1)
call_13401 = relay.TupleGetItem(func_12303_call(), 1)
func_8852_call = mod.get_global_var('func_8852')
func_8854_call = mutated_mod.get_global_var('func_8854')
call_13404 = func_8852_call()
call_13405 = func_8852_call()
func_7493_call = mod.get_global_var('func_7493')
func_7494_call = mutated_mod.get_global_var('func_7494')
call_13407 = func_7493_call()
call_13408 = func_7493_call()
func_5235_call = mod.get_global_var('func_5235')
func_5236_call = mutated_mod.get_global_var('func_5236')
call_13413 = relay.TupleGetItem(func_5235_call(), 0)
call_13414 = relay.TupleGetItem(func_5236_call(), 0)
bop_13427 = relay.logical_xor(call_13413.astype('uint16'), relay.reshape(call_13407.astype('uint16'), relay.shape_of(call_13413))) # shape=(1, 11, 15)
bop_13430 = relay.logical_xor(call_13414.astype('uint16'), relay.reshape(call_13408.astype('uint16'), relay.shape_of(call_13414))) # shape=(1, 11, 15)
output = relay.Tuple([call_13367,call_13400,call_13404,bop_13427,])
output2 = relay.Tuple([call_13368,call_13401,call_13405,bop_13430,])
func_13439 = relay.Function([], output)
mod['func_13439'] = func_13439
mod = relay.transform.InferType()(mod)
mutated_mod['func_13439'] = func_13439
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13439_call = mutated_mod.get_global_var('func_13439')
call_13440 = func_13439_call()
output = call_13440
func_13441 = relay.Function([], output)
mutated_mod['func_13441'] = func_13441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6649_call = mod.get_global_var('func_6649')
func_6651_call = mutated_mod.get_global_var('func_6651')
call_13453 = relay.TupleGetItem(func_6649_call(), 0)
call_13454 = relay.TupleGetItem(func_6651_call(), 0)
output = call_13453
output2 = call_13454
func_13463 = relay.Function([], output)
mod['func_13463'] = func_13463
mod = relay.transform.InferType()(mod)
mutated_mod['func_13463'] = func_13463
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13463_call = mutated_mod.get_global_var('func_13463')
call_13464 = func_13463_call()
output = call_13464
func_13465 = relay.Function([], output)
mutated_mod['func_13465'] = func_13465
mutated_mod = relay.transform.InferType()(mutated_mod)
const_13494 = relay.const([[[7,-2,-6,2,10,2,-6,2],[8,-7,-4,-4,3,-7,-8,-2],[6,2,4,-10,10,4,7,-9],[-6,5,-9,-2,8,9,-2,-1],[-3,-2,8,5,4,-5,-5,-5],[5,3,-2,-6,-4,-4,-8,-7],[-7,1,-1,-5,-6,-5,7,4],[-1,-5,1,1,8,4,-10,8],[1,5,6,8,-10,-4,2,-10],[4,6,-7,-3,-4,-3,-7,4],[-10,2,10,-9,1,-1,1,8],[7,1,2,-10,-2,-1,-4,8],[7,-2,-8,-9,-4,5,-4,-1],[6,-4,7,-5,7,-9,-2,-8],[7,-7,-1,-5,9,-8,-3,-1],[-2,-9,10,-9,1,-9,7,3]],[[-7,10,-9,3,-4,-10,-2,6],[-7,-5,1,6,-4,-5,4,4],[10,-9,8,4,3,-9,-6,-8],[-1,10,7,-4,-10,-1,-10,-6],[-6,7,7,5,7,4,8,6],[7,3,-1,4,-7,8,7,-8],[-8,-8,-8,6,5,-1,-4,-4],[3,2,6,7,-10,-3,-8,-1],[-5,3,9,9,9,-1,-6,-1],[-4,-5,2,6,-7,-10,-7,3],[-9,-5,6,-6,-5,8,-4,2],[-6,10,1,10,2,-2,1,3],[2,10,-4,-4,3,-10,-5,-5],[-1,10,9,-9,2,-4,-7,-4],[-4,8,1,7,-8,-1,1,-5],[-10,-6,7,-2,7,5,-2,4]],[[5,4,-7,-2,-7,-7,10,5],[-9,9,-6,-8,-6,8,1,-5],[-5,-4,1,-7,-10,1,8,-10],[-6,-6,9,-5,6,6,-9,-6],[2,-9,8,3,2,-10,9,9],[8,-8,-7,1,-8,3,-7,-2],[-10,6,-8,-8,5,1,5,-9],[-5,-9,10,6,-8,-5,-9,-8],[1,5,-2,-8,-10,-1,8,9],[7,-6,9,-4,2,-5,-10,7],[6,-9,-6,7,5,-10,-10,-8],[6,-3,-7,-3,-8,-9,-1,10],[-2,-6,-5,4,-1,-4,-3,7],[6,4,6,-2,8,-3,-2,4],[9,2,-3,5,-9,6,-3,1],[10,3,-7,-10,-10,1,5,4]],[[7,9,10,-3,-7,3,1,-1],[1,9,-1,-10,2,-3,-9,3],[2,-6,-8,-5,8,-4,2,-10],[-1,1,-7,-3,4,-8,-2,9],[-2,8,3,-4,-9,-2,6,-6],[-2,-7,7,10,7,-4,-8,2],[-9,-10,4,-5,-2,6,10,5],[6,-3,-3,6,-2,8,5,-1],[-10,9,5,-7,-1,-7,4,5],[5,4,-10,9,-1,3,6,-10],[-5,10,-3,10,-1,-6,-10,-4],[-8,4,-9,1,1,7,8,-4],[6,-4,1,2,-3,-5,-1,10],[1,7,-9,1,-2,7,-4,2],[3,9,-2,-5,3,-7,-3,4],[-1,4,-1,9,-1,-1,7,5]],[[1,-5,-8,7,-10,-6,9,7],[-2,1,-3,-5,7,9,3,-6],[-1,7,-9,1,-9,4,-6,8],[-1,-1,9,9,6,-2,4,-5],[-6,2,-7,9,-1,-3,-8,-7],[10,-3,8,7,-10,4,6,6],[-10,-1,5,-4,-7,-3,8,3],[-8,8,-6,1,-5,-9,2,7],[8,-10,2,-7,-1,-3,10,8],[10,-5,5,4,9,-3,3,-3],[-1,-1,-9,1,1,-10,10,9],[7,8,-10,-2,-10,-9,6,-1],[9,10,-2,-9,-5,-4,-8,-4],[-8,5,-9,-10,3,-9,3,5],[-1,9,4,-8,6,3,-4,-9],[1,4,-4,-6,-4,-3,4,9]],[[3,-3,-6,5,3,-8,-4,3],[4,5,10,2,-8,-2,-2,-2],[-9,-1,5,8,3,7,4,5],[7,-3,-5,2,-9,8,5,8],[6,-2,-7,-3,8,-10,-9,-10],[6,3,10,5,-10,-5,-6,9],[-4,4,-3,2,6,4,8,10],[-9,5,8,9,6,3,6,-3],[4,2,4,-7,-7,-4,4,8],[8,-3,7,4,-5,-5,-8,-1],[-4,10,-6,-8,7,-7,7,8],[-3,4,2,-3,-5,-8,-5,-7],[-10,8,-3,1,10,5,-5,5],[-4,10,-4,-3,-3,6,-7,-8],[-10,-7,5,-7,5,-4,-4,2],[5,4,-7,2,5,8,9,-1]],[[4,-3,5,8,3,4,-1,5],[-8,-7,5,5,-7,6,-8,-6],[6,-5,-1,-2,-5,2,-1,-3],[-10,-4,-2,-7,-1,-5,-9,-3],[-4,5,-3,10,1,3,-2,3],[-7,-9,7,7,10,-6,7,-3],[2,-6,6,3,9,1,2,-5],[2,-9,-9,-8,-10,-7,6,8],[9,2,-10,-3,9,-10,10,4],[-9,-3,-1,7,-5,-10,6,10],[-10,3,5,8,-1,-7,-6,-3],[3,-3,-6,6,5,-4,-2,6],[-7,1,-6,6,-9,-8,-3,10],[-8,-10,5,8,2,1,-8,-7],[8,5,-8,1,5,4,10,-3],[9,3,-9,-4,-6,-6,-1,-9]],[[4,-5,6,-2,3,8,2,-2],[-3,4,9,-5,-10,7,-8,4],[-2,-4,3,9,6,1,-9,8],[9,5,8,1,3,-1,6,-2],[-4,-9,6,5,5,7,-9,5],[-7,-6,-2,-4,8,-5,1,-5],[6,2,-3,-2,-10,-2,6,-9],[-10,7,-1,-7,6,-5,1,-2],[3,-7,-10,5,-9,-1,8,5],[4,-2,-3,-5,-2,8,10,8],[-5,-10,-5,-6,-3,7,-6,9],[-6,-6,9,10,2,7,-7,3],[-2,-4,9,-1,-9,-4,-3,-5],[-4,-8,4,8,-5,6,-10,3],[-4,-8,8,-3,-8,-2,-2,9],[-9,2,-4,-9,-3,-2,-4,4]],[[-3,8,2,8,10,10,-6,9],[6,1,2,-3,-3,-10,10,-4],[8,4,-5,3,-2,-9,-2,6],[-2,1,6,-8,9,-7,-4,3],[3,6,-2,3,-2,2,3,-5],[8,-6,8,-5,-6,7,3,5],[-7,-4,-10,3,-1,7,7,-6],[7,-7,-10,3,5,5,10,-6],[1,-8,-6,4,-5,1,4,-7],[1,-6,-8,-6,-9,-3,-3,5],[-8,8,3,-3,-6,2,-4,-10],[3,-8,7,4,-7,4,-3,-7],[-4,-6,8,7,4,3,-8,-2],[3,2,6,-5,-2,-4,-1,-7],[-7,-6,-2,10,-4,-1,7,5],[-5,-7,4,3,-4,2,-9,2]],[[2,4,3,-8,-4,1,-6,1],[-3,10,2,-3,2,4,6,1],[6,-2,7,5,-10,-5,3,8],[4,-5,-3,5,-6,9,6,10],[5,-2,1,-6,-4,-9,-8,-2],[5,1,8,3,6,5,-2,-6],[6,-1,-5,-10,-7,5,4,-8],[-5,-6,6,8,-1,-3,-8,4],[-7,5,-10,-1,3,-4,3,7],[2,2,3,9,-3,-1,-3,6],[-7,-2,-5,-8,8,7,-6,9],[8,-8,-1,8,-9,-4,-3,-2],[3,-1,-6,-9,3,-6,-2,10],[6,2,-5,1,9,-6,-10,-5],[10,-1,7,3,-6,2,3,10],[10,-9,2,8,-7,-6,-1,-8]],[[-10,-9,1,-8,10,6,2,3],[8,6,3,-1,-6,-5,-1,10],[-6,-8,-1,-5,-6,4,-7,-1],[-10,2,1,-4,-4,6,6,5],[-6,-8,-7,8,1,3,-1,-2],[-1,6,10,1,-1,-9,4,8],[7,7,-6,-9,-10,-7,-7,4],[3,-10,-2,-9,9,-9,-2,-4],[-2,4,7,8,-6,-8,4,-10],[4,4,-2,-10,-10,3,5,-10],[-10,6,8,7,-9,-6,9,-1],[-8,10,7,3,8,-9,5,1],[-4,3,10,-7,-4,-3,-10,7],[-9,-10,-8,4,-8,8,-4,9],[7,1,1,-6,2,-10,-4,-2],[6,1,-6,-10,8,10,-9,10]]], dtype = "int64")#candidate|13494|(11, 16, 8)|const|int64
var_13495 = relay.var("var_13495", dtype = "int64", shape = (11, 16, 8))#candidate|13495|(11, 16, 8)|var|int64
bop_13496 = relay.bitwise_xor(const_13494.astype('int64'), relay.reshape(var_13495.astype('int64'), relay.shape_of(const_13494))) # shape=(11, 16, 8)
var_13509 = relay.var("var_13509", dtype = "int64", shape = (11, 16, 8))#candidate|13509|(11, 16, 8)|var|int64
bop_13510 = relay.less(const_13494.astype('bool'), relay.reshape(var_13509.astype('bool'), relay.shape_of(const_13494))) # shape=(11, 16, 8)
output = relay.Tuple([bop_13496,bop_13510,])
output2 = relay.Tuple([bop_13496,bop_13510,])
func_13516 = relay.Function([var_13495,var_13509,], output)
mod['func_13516'] = func_13516
mod = relay.transform.InferType()(mod)
var_13517 = relay.var("var_13517", dtype = "int64", shape = (11, 16, 8))#candidate|13517|(11, 16, 8)|var|int64
var_13518 = relay.var("var_13518", dtype = "int64", shape = (11, 16, 8))#candidate|13518|(11, 16, 8)|var|int64
output = func_13516(var_13517,var_13518,)
func_13519 = relay.Function([var_13517,var_13518,], output)
mutated_mod['func_13519'] = func_13519
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5565_call = mod.get_global_var('func_5565')
func_5567_call = mutated_mod.get_global_var('func_5567')
call_13675 = func_5565_call()
call_13676 = func_5565_call()
func_6695_call = mod.get_global_var('func_6695')
func_6697_call = mutated_mod.get_global_var('func_6697')
call_13706 = func_6695_call()
call_13707 = func_6695_call()
output = relay.Tuple([call_13675,call_13706,])
output2 = relay.Tuple([call_13676,call_13707,])
func_13726 = relay.Function([], output)
mod['func_13726'] = func_13726
mod = relay.transform.InferType()(mod)
mutated_mod['func_13726'] = func_13726
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13726_call = mutated_mod.get_global_var('func_13726')
call_13727 = func_13726_call()
output = call_13727
func_13728 = relay.Function([], output)
mutated_mod['func_13728'] = func_13728
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7847_call = mod.get_global_var('func_7847')
func_7849_call = mutated_mod.get_global_var('func_7849')
call_13729 = relay.TupleGetItem(func_7847_call(), 2)
call_13730 = relay.TupleGetItem(func_7849_call(), 2)
output = call_13729
output2 = call_13730
func_13737 = relay.Function([], output)
mod['func_13737'] = func_13737
mod = relay.transform.InferType()(mod)
mutated_mod['func_13737'] = func_13737
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13737_call = mutated_mod.get_global_var('func_13737')
call_13738 = func_13737_call()
output = call_13738
func_13739 = relay.Function([], output)
mutated_mod['func_13739'] = func_13739
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6602_call = mod.get_global_var('func_6602')
func_6603_call = mutated_mod.get_global_var('func_6603')
call_13751 = relay.TupleGetItem(func_6602_call(), 0)
call_13752 = relay.TupleGetItem(func_6603_call(), 0)
output = relay.Tuple([call_13751,])
output2 = relay.Tuple([call_13752,])
func_13757 = relay.Function([], output)
mod['func_13757'] = func_13757
mod = relay.transform.InferType()(mod)
mutated_mod['func_13757'] = func_13757
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13757_call = mutated_mod.get_global_var('func_13757')
call_13758 = func_13757_call()
output = call_13758
func_13759 = relay.Function([], output)
mutated_mod['func_13759'] = func_13759
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5713_call = mod.get_global_var('func_5713')
func_5714_call = mutated_mod.get_global_var('func_5714')
call_13768 = relay.TupleGetItem(func_5713_call(), 0)
call_13769 = relay.TupleGetItem(func_5714_call(), 0)
output = relay.Tuple([call_13768,])
output2 = relay.Tuple([call_13769,])
func_13780 = relay.Function([], output)
mod['func_13780'] = func_13780
mod = relay.transform.InferType()(mod)
output = func_13780()
func_13781 = relay.Function([], output)
mutated_mod['func_13781'] = func_13781
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3880_call = mod.get_global_var('func_3880')
func_3881_call = mutated_mod.get_global_var('func_3881')
call_13833 = relay.TupleGetItem(func_3880_call(), 0)
call_13834 = relay.TupleGetItem(func_3881_call(), 0)
output = call_13833
output2 = call_13834
func_13868 = relay.Function([], output)
mod['func_13868'] = func_13868
mod = relay.transform.InferType()(mod)
output = func_13868()
func_13869 = relay.Function([], output)
mutated_mod['func_13869'] = func_13869
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6523_call = mod.get_global_var('func_6523')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_13901 = func_6523_call()
call_13902 = func_6523_call()
output = relay.Tuple([call_13901,])
output2 = relay.Tuple([call_13902,])
func_13903 = relay.Function([], output)
mod['func_13903'] = func_13903
mod = relay.transform.InferType()(mod)
output = func_13903()
func_13904 = relay.Function([], output)
mutated_mod['func_13904'] = func_13904
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10711_call = mod.get_global_var('func_10711')
func_10713_call = mutated_mod.get_global_var('func_10713')
call_13910 = relay.TupleGetItem(func_10711_call(), 1)
call_13911 = relay.TupleGetItem(func_10713_call(), 1)
func_2626_call = mod.get_global_var('func_2626')
func_2627_call = mutated_mod.get_global_var('func_2627')
call_13916 = func_2626_call()
call_13917 = func_2626_call()
func_2306_call = mod.get_global_var('func_2306')
func_2308_call = mutated_mod.get_global_var('func_2308')
call_13922 = relay.TupleGetItem(func_2306_call(), 0)
call_13923 = relay.TupleGetItem(func_2308_call(), 0)
func_4462_call = mod.get_global_var('func_4462')
func_4464_call = mutated_mod.get_global_var('func_4464')
call_13925 = relay.TupleGetItem(func_4462_call(), 0)
call_13926 = relay.TupleGetItem(func_4464_call(), 0)
output = relay.Tuple([call_13910,call_13916,call_13922,call_13925,])
output2 = relay.Tuple([call_13911,call_13917,call_13923,call_13926,])
func_13933 = relay.Function([], output)
mod['func_13933'] = func_13933
mod = relay.transform.InferType()(mod)
mutated_mod['func_13933'] = func_13933
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13933_call = mutated_mod.get_global_var('func_13933')
call_13934 = func_13933_call()
output = call_13934
func_13935 = relay.Function([], output)
mutated_mod['func_13935'] = func_13935
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13994 = relay.var("var_13994", dtype = "int32", shape = (1, 4, 1))#candidate|13994|(1, 4, 1)|var|int32
var_13995 = relay.var("var_13995", dtype = "int32", shape = (8, 4, 2))#candidate|13995|(8, 4, 2)|var|int32
bop_13996 = relay.multiply(var_13994.astype('int32'), var_13995.astype('int32')) # shape=(8, 4, 2)
output = bop_13996
output2 = bop_13996
F = relay.Function([var_13994,var_13995,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_13994,var_13995,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
