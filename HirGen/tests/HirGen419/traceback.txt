==========mod==========
#[version = "0.0.5"]
def @func_7263() -> (Tensor[(13, 8, 5), float32],) {
  %0 = @func_4042() /* ty=Tensor[(13, 8, 5), float64] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %2 = log2(%1) /* ty=Tensor[(13, 8, 5), float32] */;
  (%2,)
}

def @func_7660() -> (Tensor[(16, 6, 12), float64], float64) {
  %3 = @func_5185() /* ty=Tensor[(16, 6, 12), float64] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  %5 = asinh(%4) /* ty=Tensor[(16, 6, 12), float64] */;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  %7 = @func_7148() /* ty=(float64,) */;
  %8 = sin(%6) /* ty=Tensor[(16, 6, 12), float64] */;
  %9 = %7.0;
  (%8, %9)
}

def @func_4335(%var_4307: Tensor[(1, 12, 8), float64], %var_4322: Tensor[(1792), float64]) -> (Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) {
  %10 = @func_4151() /* ty=float64 */;
  %11 = cast(%10, dtype="bool") /* ty=bool */;
  %12 = cast(%var_4307, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %13 = cast(%var_4322, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %14 = reshape(%13, newshape=[64, 28]) /* ty=Tensor[(64, 28), float64] */;
  %15 = @func_3657(%14) /* ty=(float64, Tensor[(8, 14, 16), bool], Tensor[(64, 28), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */;
  %16 = logical_or(%11, %12) /* ty=Tensor[(1, 12, 8), bool] */;
  %17 = %15.2;
  (%16, %17, %var_4322)
}

def @func_7148() -> (float64,) {
  %18 = @func_4552() /* ty=float64 */;
  (%18,)
}

def @func_7860() -> float64 {
  @func_6839() /* ty=float64 */
}

def @func_8746(%var_8673: Tensor[(11, 3, 12), int32], %var_8674: Tensor[(11, 3, 12), int32], %var_8732: float64, %var_8733: Tensor[(42), float64]) -> (Tensor[(11, 3, 12), uint8], Tensor[(11, 3, 12), float32], Tensor[(1078), float32], float64, Tensor[(42), float64], Tensor[(1, 520), int64]) {
  %19 = cast(%var_8674, dtype="int32") /* ty=Tensor[(11, 3, 12), int32] */;
  %20 = shape_of(%var_8673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_8673, dtype="int32") /* ty=Tensor[(11, 3, 12), int32] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %23 = bitwise_or(%21, %22) /* ty=Tensor[(11, 3, 12), int32] */;
  %24 = cast(%var_8674, dtype="uint8") /* ty=Tensor[(11, 3, 12), uint8] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="uint8") /* ty=Tensor[(11, 3, 12), uint8] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %28 = cast(%var_8673, dtype="float32") /* ty=Tensor[(11, 3, 12), float32] */;
  %29 = cast(%var_8732, dtype="float64") /* ty=float64 */;
  %30 = cast(%var_8733, dtype="float64") /* ty=Tensor[(42), float64] */;
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 520), int64] */, dtype="int64") /* ty=Tensor[(1, 520), int64] */;
  %32 = reshape(%29, newshape=[]) /* ty=float64 */;
  %33 = reshape(%30, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %34 = reshape(%31, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), int64] */;
  %35 = @func_5937(%32, %33, %34) /* ty=(Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) */;
  %36 = left_shift(%26, %27) /* ty=Tensor[(11, 3, 12), uint8] */;
  %37 = log2(%28) /* ty=Tensor[(11, 3, 12), float32] */;
  %38 = %35.3;
  (%36, %37, %38, %var_8732, %var_8733, meta[relay.Constant][0] /* ty=Tensor[(1, 520), int64] */)
}

def @func_8958() -> (Tensor[(330), float32],) {
  %39 = @func_8526() /* ty=(float64, float64, Tensor[(2, 15, 11), float32], Tensor[(330), float32]) */;
  %40 = %39.3;
  (%40,)
}

def @main() -> (float64, float64, Tensor[(48, 24), float64]) {
  %41 = @func_8471() /* ty=(float64,) */;
  %42 = @func_8132() /* ty=(float64,) */;
  %43 = @func_4836() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) */;
  %44 = %43.2;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
  %46 = %41.0;
  %47 = %42.0;
  %48 = sin(%45) /* ty=Tensor[(48, 24), float64] */;
  (%46, %47, %48)
}

def @func_5318(%var_5297: uint8, %var_5298: Tensor[(16, 1, 1), uint8]) -> (Tensor[(16, 1, 1), uint8], Tensor[(16, 1, 1), float64], float64) {
  %49 = cast(%var_5297, dtype="uint8") /* ty=uint8 */;
  %50 = cast(%var_5298, dtype="uint8") /* ty=Tensor[(16, 1, 1), uint8] */;
  %51 = cast(%var_5298, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %52 = minimum(%49, %50) /* ty=Tensor[(16, 1, 1), uint8] */;
  %53 = asin(%51) /* ty=Tensor[(16, 1, 1), float64] */;
  %54 = @func_4151() /* ty=float64 */;
  (%52, %53, %54)
}

def @func_541(%var_535: Tensor[(2, 15, 11), float32], %var_536: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), float32] {
  %55 = cast(%var_536, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %56 = shape_of(%var_535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_535, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%57, %58) /* ty=Tensor[(2, 15, 11), float32] */
}

def @func_3887() -> (Tensor[(6, 9, 8), int64],) {
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 9, 8), int64] */, dtype="int64") /* ty=Tensor[(6, 9, 8), int64] */;
  %60 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 8), int64] */, dtype="int64") /* ty=Tensor[(6, 9, 8), int64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %63 = bitwise_and(%61, %62) /* ty=Tensor[(6, 9, 8), int64] */;
  (%63,)
}

def @func_1595(%var_1570: float64, %var_1571: Tensor[(6, 7, 1), float64], %var_1585: Tensor[(1078), float32]) -> (Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) {
  %64 = cast(%var_1570, dtype="float64") /* ty=float64 */;
  %65 = cast(%var_1571, dtype="float64") /* ty=Tensor[(6, 7, 1), float64] */;
  %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %68 = reshape(%66, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %69 = reshape(%67, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %70 = @func_1154(%68, %69) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(98, 1), float32] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %72 = cast(%var_1585, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %73 = reshape(%71, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
  %74 = reshape(%72, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %75 = @func_1206(%73, %74) /* ty=(Tensor[(7, 11, 14), bool],) */;
  %76 = %70.1;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %78 = reshape(%77, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %79 = mod(%64, %65) /* ty=Tensor[(6, 7, 1), float64] */;
  %80 = %75.0;
  %81 = @func_361(%78) /* ty=Tensor[(1, 10, 1), float64] */;
  (%79, %76, meta[relay.Constant][3] /* ty=Tensor[(252), float64] */, %80, meta[relay.Constant][4] /* ty=Tensor[(98, 1), float32] */, %var_1585, %81)
}

def @func_7179(%var_7168: Tensor[(10, 1, 15), float64]) -> Tensor[(10, ?, 15), float64] {
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
  %83 = shape_of(%var_7168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_7168, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%84, %85) /* ty=Tensor[(10, ?, 15), float64] */
}

def @func_4520(%var_4413: Tensor[(8, 15, 9), float64], %var_4418: Tensor[(1, 150), uint64], %var_4424: Tensor[(3, 150), uint64]) -> (Tensor[(8, 15, 9), float64], float64, Tensor[(13, 8, 5), float64], Tensor[(3, 150), int8], float64, Tensor[(3, 5, 10), float32], Tensor[(6, 9, 8), int64], Tensor[(2, 15, 11), float32], Tensor[(5, 66), float32], Tensor[(3, 5, 10), bool]) {
  %86 = cast(1.37508f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %87 = cast(%var_4413, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %88 = cast(%var_4418, dtype="uint64") /* ty=Tensor[(1, 150), uint64] */;
  %89 = cast(%var_4424, dtype="uint64") /* ty=Tensor[(3, 150), uint64] */;
  %90 = logical_xor(%88, %89) /* ty=Tensor[(3, 150), uint64] */;
  %91 = cast(%90, dtype="int8") /* ty=Tensor[(3, 150), int8] */;
  %92 = cast(%var_4418, dtype="int8") /* ty=Tensor[(1, 150), int8] */;
  %93 = @func_4191() /* ty=(float64,) */;
  %94 = cast(1.37508f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
  %95 = cast(%var_4418, dtype="uint64") /* ty=Tensor[(1, 150), uint64] */;
  %96 = reshape(%94, newshape=[]) /* ty=uint64 */;
  %97 = reshape(%95, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), uint64] */;
  %98 = @func_1799(%96, %97) /* ty=Tensor[(3, 5, 10), uint64] */;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
  %100 = sinh(%99) /* ty=Tensor[(3, 5, 10), float64] */;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(3, 5, 10), float32] */;
  %102 = cast(1.37508f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %103 = @func_3887() /* ty=(Tensor[(6, 9, 8), int64],) */;
  %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %106 = reshape(%104, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %107 = reshape(%105, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %108 = cast(%100, dtype="float32") /* ty=Tensor[(3, 5, 10), float32] */;
  %109 = sqrt(%108) /* ty=Tensor[(3, 5, 10), float32] */;
  %110 = cast(%var_4418, dtype="bool") /* ty=Tensor[(1, 150), bool] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="bool") /* ty=Tensor[(3, 5, 10), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %114 = floor_mod(%86, %87) /* ty=Tensor[(8, 15, 9), float64] */;
  %115 = @func_4151() /* ty=float64 */;
  %116 = @func_4042() /* ty=Tensor[(13, 8, 5), float64] */;
  %117 = multiply(%91, %92) /* ty=Tensor[(3, 150), int8] */;
  %118 = %93.0;
  %119 = floor_mod(%101, %102) /* ty=Tensor[(3, 5, 10), float32] */;
  %120 = %103.0;
  %121 = @func_541(%106, %107) /* ty=Tensor[(2, 15, 11), float32] */;
  %122 = not_equal(%112, %113) /* ty=Tensor[(3, 5, 10), bool] */;
  (%114, %115, %116, %117, %118, %119, %120, %121, meta[relay.Constant][6] /* ty=Tensor[(5, 66), float32] */, %122)
}

def @func_7048() -> float64 {
  %123 = @func_6969() /* ty=(float64,) */;
  %123.0
}

def @func_7400() -> Tensor[(13, 8, 5), float64] {
  @func_4807() /* ty=Tensor[(13, 8, 5), float64] */
}

def @func_6109() -> (Tensor[(13, 8, 5), float64],) {
  %124 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %125 = %124.0;
  (%125,)
}

def @func_4130() -> (Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) {
  %126 = cast(meta[relay.Constant][7] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %127 = reshape(%126, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float64] */;
  %128 = @func_3214(%127) /* ty=(Tensor[(9, 11, 15), float64],) */;
  %129 = @func_3691() /* ty=(float64,) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="uint8") /* ty=uint8 */;
  %132 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 12, 1), float64] */, dtype="uint8") /* ty=Tensor[(5, 12, 1), uint8] */;
  %133 = %128.0;
  %134 = bitwise_and(%131, %132) /* ty=Tensor[(5, 12, 1), uint8] */;
  (%133, meta[relay.Constant][7] /* ty=Tensor[(1485), float64] */, %134)
}

def @func_3691() -> (float64,) {
  %135 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %136 = %135.1;
  (%136,)
}

def @func_8076() -> (float64,) {
  %137 = @func_7048() /* ty=float64 */;
  (%137,)
}

def @func_3657(%var_3649: Tensor[(64, 28), float64]) -> (float64, Tensor[(8, 14, 16), bool], Tensor[(64, 28), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
  %138 = @func_3536() /* ty=(float64,) */;
  %139 = cast(%var_3649, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
  %140 = reshape(%139, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float64] */;
  %141 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %142 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %143 = %138.0;
  %144 = @func_2293(%140) /* ty=Tensor[(8, 14, 16), bool] */;
  %145 = %141.3;
  %146 = %142.0;
  (%143, %144, %var_3649, %145, %146)
}

def @func_3933(%var_3910: Tensor[(784), bool], %var_3924: Tensor[(90), int16], %var_3925: Tensor[(12, 30), int16]) -> (float64, Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(10), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(12, 30), int16]) {
  %147 = @func_3536() /* ty=(float64,) */;
  %148 = cast(%var_3910, dtype="bool") /* ty=Tensor[(784), bool] */;
  %149 = cast(meta[relay.Constant][9] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %150 = reshape(%148, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
  %151 = reshape(%149, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %152 = @func_1015(%150, %151) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
  %153 = cast(%var_3924, dtype="int16") /* ty=Tensor[(90), int16] */;
  %154 = cast(%var_3925, dtype="int16") /* ty=Tensor[(12, 30), int16] */;
  %155 = cast(meta[relay.Constant][9] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %156 = reshape(%153, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), int16] */;
  %157 = reshape(%154, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), int16] */;
  %158 = reshape(%155, newshape=[5, 2]) /* ty=Tensor[(5, 2), float64] */;
  %159 = @func_515(%156, %157, %158) /* ty=(Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) */;
  %160 = %147.0;
  %161 = %152.2;
  %162 = %159.0;
  (%160, %161, %var_3910, meta[relay.Constant][9] /* ty=Tensor[(10), float64] */, %162, %var_3924, %var_3925)
}

def @func_5491() -> (float64,) {
  %163 = @func_4552() /* ty=float64 */;
  (%163,)
}

def @func_5765() -> float64 {
  %164 = @func_3691() /* ty=(float64,) */;
  %164.0
}

def @func_5542(%var_5524: Tensor[(15, 12, 3), int8], %var_5525: Tensor[(15, 12, 3), int8], %var_5537: Tensor[(2002), float64]) -> (Tensor[(15, 12, 3), int8], Tensor[(2002, 1), float64], Tensor[(2002), float64]) {
  %165 = cast(%var_5525, dtype="int8") /* ty=Tensor[(15, 12, 3), int8] */;
  %166 = shape_of(%var_5524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_5524, dtype="int8") /* ty=Tensor[(15, 12, 3), int8] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %169 = cast(%var_5537, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %170 = reshape(%169, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
  %171 = @func_5001(%170) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
  %172 = left_shift(%167, %168) /* ty=Tensor[(15, 12, 3), int8] */;
  %173 = %171.2;
  (%172, %173, %var_5537)
}

def @func_4836() -> (Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) {
  %174 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(48, 24), float64] */, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
  %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(48, 24), float64] */, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
  %177 = reshape(%175, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
  %178 = reshape(%176, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
  %179 = @func_3394(%177, %178) /* ty=(Tensor[(16, 6, 12), float64],) */;
  %180 = %174.0;
  %181 = %179.0;
  (%180, %181, meta[relay.Constant][10] /* ty=Tensor[(48, 24), float64] */)
}

def @func_6839() -> float64 {
  %182 = @func_6319() /* ty=(float64,) */;
  %182.0
}

def @func_3214(%var_3209: Tensor[(9, 11, 15), float64]) -> (Tensor[(9, 11, 15), float64],) {
  %183 = cast(%var_3209, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %184 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(9, 11, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %187 = power(%185, %186) /* ty=Tensor[(9, 11, 15), float64] */;
  (%187,)
}

def @func_7693(%var_7676: Tensor[(320, 1), float32]) -> (float64, Tensor[(165, 2), float32], Tensor[(784), bool], Tensor[(2002, 1), float64], Tensor[(320, 1), float64]) {
  %188 = cast(%var_7676, dtype="float32") /* ty=Tensor[(320, 1), float32] */;
  %189 = cast(meta[relay.Constant][12] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %190 = cast(meta[relay.Constant][13] /* ty=Tensor[(2002, 1), float64] */, dtype="float64") /* ty=Tensor[(2002, 1), float64] */;
  %191 = reshape(%188, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float32] */;
  %192 = reshape(%189, newshape=[784]) /* ty=Tensor[(784), bool] */;
  %193 = reshape(%190, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %194 = @func_1743(%191, %192, %193) /* ty=(Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) */;
  %195 = cast(%var_7676, dtype="float64") /* ty=Tensor[(320, 1), float64] */;
  %196 = @func_5887() /* ty=float64 */;
  %197 = %194.7;
  %198 = tan(%195) /* ty=Tensor[(320, 1), float64] */;
  (%196, %197, meta[relay.Constant][12] /* ty=Tensor[(784), bool] */, meta[relay.Constant][13] /* ty=Tensor[(2002, 1), float64] */, %198)
}

def @func_1743(%var_1681: Tensor[(10, 16, 2), float32], %var_1700: Tensor[(784), bool], %var_1712: Tensor[(2002), float64]) -> (Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) {
  %199 = cast(%var_1681, dtype="float32") /* ty=Tensor[(10, 16, 2), float32] */;
  %200 = cast(%var_1700, dtype="bool") /* ty=Tensor[(784), bool] */;
  %201 = cast(meta[relay.Constant][14] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %202 = reshape(%200, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
  %203 = reshape(%201, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %204 = @func_1015(%202, %203) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
  %205 = cast(%var_1712, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %206 = reshape(%205, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %207 = @func_1670(%206) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %208 = cast(meta[relay.Constant][15] /* ty=Tensor[(165, 2), float32] */, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
  %209 = cast(meta[relay.Constant][15] /* ty=Tensor[(165, 2), float32] */, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
  %210 = reshape(%208, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %211 = reshape(%209, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %212 = asin(%199) /* ty=Tensor[(10, 16, 2), float32] */;
  %213 = %204.0;
  %214 = %207.6;
  %215 = @func_541(%210, %211) /* ty=Tensor[(2, 15, 11), float32] */;
  (%212, %213, %var_1700, meta[relay.Constant][14] /* ty=Tensor[(10), float64] */, %214, %var_1712, %215, meta[relay.Constant][15] /* ty=Tensor[(165, 2), float32] */)
}

def @func_4191() -> (float64,) {
  %216 = @func_3536() /* ty=(float64,) */;
  %217 = %216.0;
  (%217,)
}

def @func_3425() -> (Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) {
  %218 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %219 = cast(-3.93595f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %220 = cast(meta[relay.Constant][16] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %221 = cast(meta[relay.Constant][17] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %222 = reshape(%219, newshape=[]) /* ty=float64 */;
  %223 = reshape(%220, newshape=[6, 7, 1]) /* ty=Tensor[(6, 7, 1), float64] */;
  %224 = reshape(%221, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %225 = @func_1595(%222, %223, %224) /* ty=(Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) */;
  %226 = %225.3;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %228 = %218.0;
  %229 = sinh(%227) /* ty=Tensor[(7, 11, 14), float64] */;
  (%228, -3.93595f64 /* ty=float64 */, meta[relay.Constant][16] /* ty=Tensor[(42), float64] */, meta[relay.Constant][17] /* ty=Tensor[(1078), float32] */, %229)
}

def @func_7743(%var_7731: Tensor[(12, 9, 8), float32]) -> (Tensor[(12, 9, 8), float32], float64, float64) {
  %230 = cast(%var_7731, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %231 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(12, 9, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %234 = floor_mod(%232, %233) /* ty=Tensor[(12, 9, 8), float32] */;
  %235 = @func_6839() /* ty=float64 */;
  %236 = @func_4552() /* ty=float64 */;
  (%234, %235, %236)
}

def @func_7911(%var_7891: Tensor[(64, 28), float64]) -> (float64, Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(10, 9, 8), int8], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 12), float64], Tensor[(64, 28), float64]) {
  %237 = cast(meta[relay.Constant][19] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %238 = reshape(%237, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
  %239 = @func_5001(%238) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
  %240 = cast(meta[relay.Constant][20] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %241 = reshape(%240, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
  %242 = @func_4616(%241) /* ty=(Tensor[(10, 9, 8), int8], Tensor[(1, 10, 1), float64], Tensor[(462, 1), float64]) */;
  %243 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 12), float64] */;
  %244 = cast(%var_7891, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
  %245 = reshape(%243, newshape=[1, 12, 8]) /* ty=Tensor[(1, 12, 8), float64] */;
  %246 = reshape(%244, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %247 = @func_4335(%245, %246) /* ty=(Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) */;
  %248 = @func_4552() /* ty=float64 */;
  %249 = %239.2;
  %250 = %242.0;
  %251 = %247.2;
  (%248, %249, meta[relay.Constant][19] /* ty=Tensor[(2002), float64] */, %250, meta[relay.Constant][20] /* ty=Tensor[(462), float64] */, %251, meta[relay.Constant][21] /* ty=Tensor[(8, 12), float64] */, %var_7891)
}

def @func_5887() -> float64 {
  %252 = @func_5491() /* ty=(float64,) */;
  %252.0
}

def @func_3536() -> (float64,) {
  %253 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %254 = %253.1;
  (%254,)
}

def @func_7098() -> (Tensor[(7, 11, 14), float64], float64) {
  %255 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %256 = @func_4905() /* ty=(float64, Tensor[(13, 8, 5), float64]) */;
  %257 = %255.4;
  %258 = %256.0;
  (%257, %258)
}

def @func_6266(%var_6245: Tensor[(1, 10), float64], %var_6255: Tensor[(48, 24), float64]) -> (float64, Tensor[(1, 10), float64], Tensor[(13, 8, 5), float64], Tensor[(48, 24), int32]) {
  %259 = cast(%var_6245, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %260 = reshape(%259, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %261 = @func_3612(%260) /* ty=(float64, Tensor[(1078), float32], Tensor[(?, 10, ?), uint32], Tensor[(8, 98), bool], Tensor[(10), float64], Tensor[(1755), bool]) */;
  %262 = @func_4836() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) */;
  %263 = %262.2;
  %264 = cast(%var_6255, dtype="int32") /* ty=Tensor[(48, 24), int32] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(2), int32] */;
  %266 = cast(%263, dtype="int32") /* ty=Tensor[(48, 24), int32] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %268 = %261.0;
  %269 = @func_4807() /* ty=Tensor[(13, 8, 5), float64] */;
  %270 = add(%266, %267) /* ty=Tensor[(48, 24), int32] */;
  (%268, %var_6245, %269, %270)
}

def @func_4624() -> (Tensor[(13, 8, 5), float64],) {
  %271 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %272 = %271.0;
  (%272,)
}

def @func_3246() -> (Tensor[(13, 8, 5), float64],) {
  %273 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %274 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(13, 8, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %277 = divide(%275, %276) /* ty=Tensor[(13, 8, 5), float64] */;
  (%277,)
}

def @func_4905() -> (float64, Tensor[(13, 8, 5), float64]) {
  %278 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %279 = @func_4552() /* ty=float64 */;
  %280 = %278.0;
  (%279, %280)
}

def @func_2776(%var_2736: Tensor[(7, 4, 8), bool], %var_2737: Tensor[(7, 4, 8), bool], %var_2767: Tensor[(30), float64]) -> (Tensor[(7, 4, 8), float32], Tensor[(2, 15, 11), float32], Tensor[(784), bool], Tensor[(1, 10), float64], Tensor[(1, 3, 10), float64], Tensor[(30), float64]) {
  %281 = cast(%var_2737, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %282 = shape_of(%var_2736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_2736, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %285 = logical_or(%283, %284) /* ty=Tensor[(7, 4, 8), bool] */;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %287 = shape_of(%var_2736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_2736, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %290 = cast(meta[relay.Constant][24] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %291 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %292 = reshape(%290, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
  %293 = reshape(%291, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %294 = @func_1015(%292, %293) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
  %295 = cast(%var_2767, dtype="float64") /* ty=Tensor[(30), float64] */;
  %296 = reshape(%295, newshape=[1, 3, 10]) /* ty=Tensor[(1, 3, 10), float64] */;
  %297 = @func_1032(%296) /* ty=(Tensor[(1, 3, 10), float64],) */;
  %298 = floor_mod(%288, %289) /* ty=Tensor[(7, 4, 8), float32] */;
  %299 = %294.5;
  %300 = %297.0;
  (%298, %299, meta[relay.Constant][24] /* ty=Tensor[(784), bool] */, meta[relay.Constant][25] /* ty=Tensor[(1, 10), float64] */, %300, %var_2767)
}

def @func_6702(%var_6683: Tensor[(2002), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), float64], Tensor[(6, 15, 4), int16], Tensor[(2002), float64], Tensor[(1755), int32], Tensor[(1755), int32], Tensor[(1078), float32]) {
  %301 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %302 = cast(%var_6683, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %303 = reshape(%302, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %304 = @func_1670(%303) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %305 = cast(%var_6683, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %306 = cast(meta[relay.Constant][26] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %307 = cast(meta[relay.Constant][27] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %308 = reshape(%305, newshape=[143, 14]) /* ty=Tensor[(143, 14), float64] */;
  %309 = reshape(%306, newshape=[1755]) /* ty=Tensor[(1755), int32] */;
  %310 = reshape(%307, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %311 = @func_5621(%308, %309, %310) /* ty=(float64, Tensor[(98), float32], Tensor[(143, 14), float64], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */;
  %312 = @func_6015() /* ty=Tensor[(13, 8, 5), float64] */;
  %313 = %301.0;
  %314 = %304.3;
  %315 = %311.4;
  (%312, %313, %314, %var_6683, %315, meta[relay.Constant][26] /* ty=Tensor[(1755), int32] */, meta[relay.Constant][27] /* ty=Tensor[(1078), float32] */)
}

def @func_5068() -> Tensor[(13, 8, 5), int64] {
  %316 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %317 = %316.0;
  %318 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 8, 5), float64] */, dtype="int64") /* ty=Tensor[(13, 8, 5), int64] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="int64") /* ty=Tensor[(13, 8, 5), int64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%320, %321) /* ty=Tensor[(13, 8, 5), int64] */
}

def @func_5127(%var_5108: Tensor[(448, 4), float64], %var_5122: Tensor[(1485), float64]) -> (float64, Tensor[(2, 48), float64], Tensor[(448, 4), float64], Tensor[(1, 12, 8), bool], Tensor[(9, 11, 15), float64], Tensor[(1485), float64]) {
  %322 = @func_4905() /* ty=(float64, Tensor[(13, 8, 5), float64]) */;
  %323 = @func_3536() /* ty=(float64,) */;
  %324 = %323.0;
  %325 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 48), float64] */, dtype="float64") /* ty=Tensor[(2, 48), float64] */;
  %326 = cast(%var_5108, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
  %327 = reshape(%325, newshape=[1, 12, 8]) /* ty=Tensor[(1, 12, 8), float64] */;
  %328 = reshape(%326, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %329 = @func_4335(%327, %328) /* ty=(Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) */;
  %330 = %329.0;
  %331 = cast(%324, dtype="bool") /* ty=bool */;
  %332 = cast(%330, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %333 = cast(%var_5122, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %334 = reshape(%333, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float64] */;
  %335 = @func_3214(%334) /* ty=(Tensor[(9, 11, 15), float64],) */;
  %336 = %322.0;
  %337 = less(%331, %332) /* ty=Tensor[(1, 12, 8), bool] */;
  %338 = %335.0;
  (%336, meta[relay.Constant][29] /* ty=Tensor[(2, 48), float64] */, %var_5108, %337, %338, %var_5122)
}

def @func_1032(%var_1026: Tensor[(1, 3, 10), float64]) -> (Tensor[(1, 3, 10), float64],) {
  %339 = cast(%var_1026, dtype="float64") /* ty=Tensor[(1, 3, 10), float64] */;
  %340 = sinh(%339) /* ty=Tensor[(1, 3, 10), float64] */;
  (%340,)
}

def @func_7135() -> Tensor[(13, 8, 5), float32] {
  %341 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %342 = %341.0;
  %343 = @func_5664() /* ty=float64 */;
  %344 = cast(%342, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %345 = cast(%343, dtype="float32") /* ty=float32 */;
  floor_divide(%344, %345) /* ty=Tensor[(13, 8, 5), float32] */
}

def @func_6502(%var_6469: Tensor[(4, 2), float32], %var_6470: Tensor[(252), float64], %var_6473: Tensor[(25, 6), uint64], %var_6475: Tensor[(1078), float32], %var_6479: Tensor[(462), float64]) -> (float64, Tensor[(3, 5, 10), uint64], Tensor[(4, 2), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(25, 6), uint64], Tensor[(1078), float32], Tensor[(6, 11, 7), float32], Tensor[(462), float64], Tensor[(5, 66), float32], Tensor[(13, 8, 5), bool], Tensor[(42), float64], Tensor[(520, 1), int64]) {
  %346 = @func_3691() /* ty=(float64,) */;
  %347 = cast(%var_6469, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
  %348 = cast(%var_6469, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
  %349 = cast(%var_6470, dtype="float64") /* ty=Tensor[(252), float64] */;
  %350 = cast(meta[relay.Constant][30] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %351 = cast(meta[relay.Constant][31] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %352 = cast(%var_6473, dtype="uint64") /* ty=Tensor[(25, 6), uint64] */;
  %353 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %354 = cast(%var_6475, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %355 = reshape(%347, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %356 = reshape(%348, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %357 = reshape(%349, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %358 = reshape(%350, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %359 = reshape(%351, newshape=[784, 1]) /* ty=Tensor[(784, 1), bool] */;
  %360 = reshape(%352, newshape=[150]) /* ty=Tensor[(150), uint64] */;
  %361 = reshape(%353, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %362 = reshape(%354, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %363 = @func_2087(%355, %356, %357, %358, %359, %360, %361, %362) /* ty=(Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) */;
  %364 = cast(%var_6479, dtype="float64") /* ty=Tensor[(462), float64] */;
  %365 = reshape(%364, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float64] */;
  %366 = @func_3069(%365) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %367 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %368 = %346.0;
  %369 = cast(%368, dtype="float64") /* ty=float64 */;
  %370 = cast(meta[relay.Constant][33] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %371 = cast(meta[relay.Constant][34] /* ty=Tensor[(520, 1), int64] */, dtype="int64") /* ty=Tensor[(520, 1), int64] */;
  %372 = reshape(%369, newshape=[]) /* ty=float64 */;
  %373 = reshape(%370, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %374 = reshape(%371, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), int64] */;
  %375 = @func_5937(%372, %373, %374) /* ty=(Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) */;
  %376 = %363.3;
  %377 = %366.1;
  %378 = log2(%367) /* ty=Tensor[(5, 66), float32] */;
  %379 = %375.4;
  (%368, %376, %var_6469, %var_6470, meta[relay.Constant][30] /* ty=Tensor[(320), float32] */, meta[relay.Constant][31] /* ty=Tensor[(784), bool] */, %var_6473, %var_6475, %377, %var_6479, %378, %379, meta[relay.Constant][33] /* ty=Tensor[(42), float64] */, meta[relay.Constant][34] /* ty=Tensor[(520, 1), int64] */)
}

def @func_2087(%var_1982: Tensor[(1, 8), float32], %var_1983: Tensor[(1, 8), float32], %var_1991: Tensor[(252), float64], %var_2008: Tensor[(320), float32], %var_2009: Tensor[(784, 1), bool], %var_2027: Tensor[(150), uint64], %var_2034: Tensor[(330), float32], %var_2042: Tensor[(1078), float32]) -> (Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) {
  %380 = cast(%var_1983, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
  %381 = shape_of(%var_1982, dtype="int32") /* ty=Tensor[(2), int32] */;
  %382 = cast(%var_1982, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %384 = cast(%var_2008, dtype="float32") /* ty=Tensor[(320), float32] */;
  %385 = cast(%var_2009, dtype="bool") /* ty=Tensor[(784, 1), bool] */;
  %386 = cast(meta[relay.Constant][35] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %387 = reshape(%384, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float32] */;
  %388 = reshape(%385, newshape=[784]) /* ty=Tensor[(784), bool] */;
  %389 = reshape(%386, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %390 = @func_1743(%387, %388, %389) /* ty=(Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) */;
  %391 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %392 = cast(%var_2027, dtype="uint64") /* ty=Tensor[(150), uint64] */;
  %393 = reshape(%391, newshape=[]) /* ty=uint64 */;
  %394 = reshape(%392, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), uint64] */;
  %395 = cast(meta[relay.Constant][35] /* ty=Tensor[(2002), float64] */, dtype="float32") /* ty=Tensor[(2002), float32] */;
  %396 = log(%395) /* ty=Tensor[(2002), float32] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %398 = reshape(%397, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %399 = @func_1670(%398) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %400 = cast(meta[relay.Constant][35] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %401 = reshape(%400, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %402 = @func_1670(%401) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %403 = %399.1;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(98), float32] */;
  %405 = cast(%var_2042, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %406 = reshape(%404, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
  %407 = reshape(%405, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %408 = @func_1206(%406, %407) /* ty=(Tensor[(7, 11, 14), bool],) */;
  %409 = cast(%var_1991, dtype="float32") /* ty=Tensor[(252), float32] */;
  %410 = cast(%var_2009, dtype="float32") /* ty=Tensor[(784, 1), float32] */;
  %411 = cast(meta[relay.Constant][35] /* ty=Tensor[(2002), float64] */, dtype="bool") /* ty=Tensor[(2002), bool] */;
  %412 = shape_of(%396, dtype="int32") /* ty=Tensor[(1), int32] */;
  %413 = cast(%396, dtype="bool") /* ty=Tensor[(2002), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?), bool] */;
  %415 = cast(%var_1991, dtype="float32") /* ty=Tensor[(252), float32] */;
  %416 = log10(%415) /* ty=Tensor[(252), float32] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(252), float64] */;
  %418 = cast(%var_1991, dtype="float64") /* ty=Tensor[(252), float64] */;
  %419 = reshape(%417, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %420 = reshape(%418, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %421 = @func_1154(%419, %420) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %422 = cast(%var_2034, dtype="float32") /* ty=Tensor[(330), float32] */;
  %423 = cast(%var_2034, dtype="float32") /* ty=Tensor[(330), float32] */;
  %424 = reshape(%422, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %425 = reshape(%423, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %426 = @func_541(%424, %425) /* ty=Tensor[(2, 15, 11), float32] */;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %428 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %429 = cast(%var_1991, dtype="float64") /* ty=Tensor[(252), float64] */;
  %430 = cast(%var_1991, dtype="float64") /* ty=Tensor[(252), float64] */;
  %431 = reshape(%429, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %432 = reshape(%430, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %433 = @func_1154(%431, %432) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %434 = %433.2;
  %435 = cast(%var_1991, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %436 = cast(%434, dtype="uint64") /* ty=Tensor[(10, 1), uint64] */;
  %437 = right_shift(%435, %436) /* ty=Tensor[(10, 252), uint64] */;
  %438 = cast(%416, dtype="float32") /* ty=Tensor[(252), float32] */;
  %439 = cast(%437, dtype="float32") /* ty=Tensor[(10, 252), float32] */;
  %440 = power(%438, %439) /* ty=Tensor[(10, 252), float32] */;
  %441 = cast(%440, dtype="uint64") /* ty=Tensor[(10, 252), uint64] */;
  %442 = cast(%416, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %443 = power(%382, %383) /* ty=Tensor[(?, 8), float32] */;
  %444 = %390.3;
  %445 = @func_1799(%393, %394) /* ty=Tensor[(3, 5, 10), uint64] */;
  %446 = %402.5;
  %447 = %408.0;
  %448 = divide(%409, %410) /* ty=Tensor[(784, 252), float32] */;
  %449 = logical_and(%413, %414) /* ty=Tensor[(2002), bool] */;
  %450 = %421.1;
  %451 = mod(%427, %428) /* ty=Tensor[(2, 15, 11), float64] */;
  %452 = bitwise_and(%441, %442) /* ty=Tensor[(10, 252), uint64] */;
  (%443, %444, %var_2008, %445, %var_2027, %403, %var_2034, %446, %447, %var_2042, %448, %449, %450, %451, %452)
}

def @func_7454(%var_7402: Tensor[(7, 6, 5), float64], %var_7417: Tensor[(784, 1), bool], %var_7418: Tensor[(10), float64]) -> (Tensor[(7, 6, 5), float64], Tensor[(1485), float64], Tensor[(2, 15, 11), float32], Tensor[(784, 1), bool], Tensor[(10), float64], Tensor[(13, 8, 5), float64]) {
  %453 = cast(%var_7402, dtype="float64") /* ty=Tensor[(7, 6, 5), float64] */;
  %454 = @func_4130() /* ty=(Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) */;
  %455 = cast(%var_7417, dtype="bool") /* ty=Tensor[(784, 1), bool] */;
  %456 = cast(%var_7418, dtype="float64") /* ty=Tensor[(10), float64] */;
  %457 = reshape(%455, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
  %458 = reshape(%456, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %459 = @func_1015(%457, %458) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
  %460 = asinh(%453) /* ty=Tensor[(7, 6, 5), float64] */;
  %461 = %454.1;
  %462 = %459.5;
  %463 = @func_4964() /* ty=Tensor[(13, 8, 5), float64] */;
  (%460, %461, %462, %var_7417, %var_7418, %463)
}

def @func_5221(%var_5216: Tensor[(12, 7, 8), float64]) -> Tensor[(12, 7, 8), int32] {
  %464 = @func_4191() /* ty=(float64,) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="int32") /* ty=int32 */;
  %467 = cast(%var_5216, dtype="int32") /* ty=Tensor[(12, 7, 8), int32] */;
  logical_xor(%466, %467) /* ty=Tensor[(12, 7, 8), int32] */
}

def @func_6969() -> (float64,) {
  %468 = @func_6839() /* ty=float64 */;
  (%468,)
}

def @func_3355(%var_3289: Tensor[(1, 252), float64], %var_3290: Tensor[(320), float32], %var_3291: Tensor[(784), bool], %var_3292: Tensor[(150), uint64], %var_3293: Tensor[(330), float32], %var_3299: Tensor[(5, 2), float64], %var_3335: Tensor[(13, 8, 5), float64], %var_3353: Tensor[(2002), float64]) -> (Tensor[(98), float32], Tensor[(8), float32], Tensor[(1, 252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(330), float32], Tensor[(5, 2), float64], Tensor[(13, 8, 5), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(1, 10, 1078), bool], Tensor[(360), int16], Tensor[(2002), float64]) {
  %469 = cast(meta[relay.Constant][37] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %470 = cast(meta[relay.Constant][37] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %471 = cast(%var_3289, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
  %472 = cast(%var_3290, dtype="float32") /* ty=Tensor[(320), float32] */;
  %473 = cast(%var_3291, dtype="bool") /* ty=Tensor[(784), bool] */;
  %474 = cast(%var_3292, dtype="uint64") /* ty=Tensor[(150), uint64] */;
  %475 = cast(%var_3293, dtype="float32") /* ty=Tensor[(330), float32] */;
  %476 = cast(meta[relay.Constant][38] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %477 = reshape(%469, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %478 = reshape(%470, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %479 = reshape(%471, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %480 = reshape(%472, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %481 = reshape(%473, newshape=[784, 1]) /* ty=Tensor[(784, 1), bool] */;
  %482 = reshape(%474, newshape=[150]) /* ty=Tensor[(150), uint64] */;
  %483 = reshape(%475, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %484 = reshape(%476, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %485 = @func_2087(%477, %478, %479, %480, %481, %482, %483, %484) /* ty=(Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) */;
  %486 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %487 = %486.0;
  %488 = cast(%var_3335, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %492 = cast(meta[relay.Constant][39] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %493 = reshape(%492, newshape=[1, 3, 10]) /* ty=Tensor[(1, 3, 10), float64] */;
  %494 = @func_1032(%493) /* ty=(Tensor[(1, 3, 10), float64],) */;
  %495 = cast(%var_3299, dtype="float64") /* ty=Tensor[(5, 2), float64] */;
  %496 = reshape(%495, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %497 = @func_361(%496) /* ty=Tensor[(1, 10, 1), float64] */;
  %498 = cast(meta[relay.Constant][38] /* ty=Tensor[(1078), float32] */, dtype="bool") /* ty=Tensor[(1078), bool] */;
  %499 = cast(%497, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
  %500 = cast(%var_3353, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %501 = reshape(%500, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %502 = @func_1670(%501) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %503 = %485.5;
  %504 = floor_mod(%490, %491) /* ty=Tensor[(13, 8, 5), float32] */;
  %505 = %494.0;
  %506 = greater(%498, %499) /* ty=Tensor[(1, 10, 1078), bool] */;
  %507 = %502.5;
  (%503, meta[relay.Constant][37] /* ty=Tensor[(8), float32] */, %var_3289, %var_3290, %var_3291, %var_3292, %var_3293, %var_3299, %504, %505, meta[relay.Constant][39] /* ty=Tensor[(30), float64] */, %506, %507, %var_3353)
}

def @func_8895() -> (float64,) {
  %508 = @func_8335() /* ty=(float64,) */;
  %509 = %508.0;
  (%509,)
}

def @func_5001(%var_4987: Tensor[(2002, 1), float64]) -> (Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) {
  %510 = @func_4964() /* ty=Tensor[(13, 8, 5), float64] */;
  %511 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 8, 5), float64] */, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = cast(%var_4987, dtype="float64") /* ty=Tensor[(2002, 1), float64] */;
  %516 = reshape(%515, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %517 = @func_1670(%516) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %518 = not_equal(%513, %514) /* ty=Tensor[(13, 8, 5), bool] */;
  %519 = %517.3;
  (%518, %519, %var_4987)
}

def @func_8335() -> (float64,) {
  %520 = @func_7954() /* ty=(Tensor[(13, 8, 5), float64], float64) */;
  %521 = %520.1;
  (%521,)
}

def @func_8608(%var_8586: Tensor[(10), float64], %var_8606: Tensor[(2, 192), float32]) -> (float64, Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(2, 180), int16], Tensor[(10), float64], Tensor[(2, 12, 16), float32], Tensor[(2, 192), float32]) {
  %522 = @func_4191() /* ty=(float64,) */;
  %523 = cast(meta[relay.Constant][41] /* ty=Tensor[(90), int16] */, dtype="int16") /* ty=Tensor[(90), int16] */;
  %524 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 180), int16] */, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
  %525 = cast(%var_8586, dtype="float64") /* ty=Tensor[(10), float64] */;
  %526 = reshape(%523, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), int16] */;
  %527 = reshape(%524, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), int16] */;
  %528 = reshape(%525, newshape=[5, 2]) /* ty=Tensor[(5, 2), float64] */;
  %529 = @func_515(%526, %527, %528) /* ty=(Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) */;
  %530 = cast(%var_8606, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
  %531 = reshape(%530, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %532 = @func_5714(%531) /* ty=(Tensor[(2, 12, 16), float32], Tensor[(13, 8, 5), int64]) */;
  %533 = %522.0;
  %534 = %529.0;
  %535 = %532.0;
  (%533, %534, meta[relay.Constant][41] /* ty=Tensor[(90), int16] */, meta[relay.Constant][42] /* ty=Tensor[(2, 180), int16] */, %var_8586, %535, %var_8606)
}

def @func_6991(%var_6984: Tensor[(9, 13, 10), float32], %var_6985: Tensor[(9, 13, 10), float32]) -> Tensor[(9, 13, 10), float32] {
  %536 = cast(%var_6985, dtype="float32") /* ty=Tensor[(9, 13, 10), float32] */;
  %537 = shape_of(%var_6984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%var_6984, dtype="float32") /* ty=Tensor[(9, 13, 10), float32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%538, %539) /* ty=Tensor[(9, 13, 10), float32] */
}

def @func_2132(%var_2118: Tensor[(1, 1, 8), float64]) -> Tensor[(1, 1, 8), float64] {
  %540 = cast(%var_2118, dtype="float64") /* ty=Tensor[(1, 1, 8), float64] */;
  atan(%540) /* ty=Tensor[(1, 1, 8), float64] */
}

def @func_5937(%var_5899: float64, %var_5900: Tensor[(42), float64], %var_5903: Tensor[(13, 8, 5), int64]) -> (Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) {
  %541 = cast(%var_5899, dtype="float64") /* ty=float64 */;
  %542 = cast(%var_5900, dtype="float64") /* ty=Tensor[(42), float64] */;
  %543 = cast(meta[relay.Constant][43] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %544 = reshape(%541, newshape=[]) /* ty=float64 */;
  %545 = reshape(%542, newshape=[6, 7, 1]) /* ty=Tensor[(6, 7, 1), float64] */;
  %546 = reshape(%543, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %547 = @func_1595(%544, %545, %546) /* ty=(Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) */;
  %548 = @func_5068() /* ty=Tensor[(13, 8, 5), int64] */;
  %549 = cast(%var_5903, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %553 = power(%551, %552) /* ty=Tensor[(13, 8, 5), float32] */;
  %554 = cast(%var_5903, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = cast(%553, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %559 = %547.2;
  %560 = less_equal(%556, %557) /* ty=Tensor[(13, 8, 5), bool] */;
  %561 = atanh(%558) /* ty=Tensor[(13, 8, 5), float32] */;
  (%559, %var_5899, %var_5900, meta[relay.Constant][43] /* ty=Tensor[(1078), float32] */, %560, %561)
}

def @func_7982() -> (float64, Tensor[(7, 11, 14), float64]) {
  %562 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %563 = @func_5887() /* ty=float64 */;
  %564 = %562.4;
  (%563, %564)
}

def @func_3442() -> (Tensor[(13, 8, 5), float64],) {
  %565 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %566 = %565.0;
  (%566,)
}

def @func_4011(%var_3980: Tensor[(13, 8, 5), float64]) -> (Tensor[(13, 8, 5), bool],) {
  %567 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %568 = %567.0;
  %569 = cast(%var_3980, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = logical_and(%571, %572) /* ty=Tensor[(13, 8, 5), bool] */;
  %574 = cast(%573, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %575 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%568, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = greater(%576, %577) /* ty=Tensor[(13, 8, 5), bool] */;
  (%578,)
}

def @func_6755() -> (float64,) {
  %579 = @func_5887() /* ty=float64 */;
  (%579,)
}

def @func_1670(%var_1602: Tensor[(14, 13, 11), float64]) -> (Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) {
  %580 = cast(%var_1602, dtype="float64") /* ty=Tensor[(14, 13, 11), float64] */;
  %581 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(14, 13, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 11), float64] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %584 = cast(meta[relay.Constant][45] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %585 = cast(meta[relay.Constant][46] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %586 = reshape(%584, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
  %587 = reshape(%585, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %588 = @func_1206(%586, %587) /* ty=(Tensor[(7, 11, 14), bool],) */;
  %589 = %588.0;
  %590 = cast(meta[relay.Constant][46] /* ty=Tensor[(1078), float32] */, dtype="int32") /* ty=Tensor[(1078), int32] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="int32") /* ty=Tensor[(7, 11, 14), int32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %594 = bitwise_or(%592, %593) /* ty=Tensor[(7, 11, 14), int32] */;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %596 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(1078), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %597 = cast(meta[relay.Constant][46] /* ty=Tensor[(1078), float32] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?), float64] */;
  %599 = cast(meta[relay.Constant][47] /* ty=Tensor[(90), int16] */, dtype="int16") /* ty=Tensor[(90), int16] */;
  %600 = cast(meta[relay.Constant][48] /* ty=Tensor[(360), int16] */, dtype="int16") /* ty=Tensor[(360), int16] */;
  %601 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %602 = reshape(%599, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), int16] */;
  %603 = reshape(%600, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), int16] */;
  %604 = reshape(%601, newshape=[5, 2]) /* ty=Tensor[(5, 2), float64] */;
  %605 = @func_515(%602, %603, %604) /* ty=(Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) */;
  %606 = floor_divide(%582, %583) /* ty=Tensor[(14, 13, 11), float64] */;
  %607 = mod(%597, %598) /* ty=Tensor[(1078), float64] */;
  %608 = %605.0;
  (%606, meta[relay.Constant][45] /* ty=Tensor[(98), float32] */, %607, %608, meta[relay.Constant][47] /* ty=Tensor[(90), int16] */, meta[relay.Constant][48] /* ty=Tensor[(360), int16] */, meta[relay.Constant][49] /* ty=Tensor[(1, 10), float64] */)
}

def @func_5714(%var_5697: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32], Tensor[(13, 8, 5), int64]) {
  %609 = cast(%var_5697, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %610 = sqrt(%609) /* ty=Tensor[(2, 12, 16), float32] */;
  %611 = @func_5068() /* ty=Tensor[(13, 8, 5), int64] */;
  (%610, %611)
}

def @func_6873(%var_6866: int32, %var_6867: Tensor[(12, 16, 16), int32]) -> Tensor[(12, 16, 16), int32] {
  %612 = cast(%var_6866, dtype="int32") /* ty=int32 */;
  %613 = cast(%var_6867, dtype="int32") /* ty=Tensor[(12, 16, 16), int32] */;
  maximum(%612, %613) /* ty=Tensor[(12, 16, 16), int32] */
}

def @func_4151() -> float64 {
  %614 = @func_3536() /* ty=(float64,) */;
  %614.0
}

def @func_8300(%var_8298: Tensor[(1078), float32]) -> (Tensor[(13, 8, 5), float64], Tensor[(1078), float32], Tensor[(1485), float64], Tensor[(80, 4), float32], Tensor[(1078), float32]) {
  %615 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %616 = cast(meta[relay.Constant][50] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %617 = cast(meta[relay.Constant][51] /* ty=Tensor[(80, 4), float32] */, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %618 = cast(%var_8298, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %619 = reshape(%616, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
  %620 = reshape(%617, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %621 = reshape(%618, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %622 = @func_7561(%619, %620, %621) /* ty=(float64, Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(784), bool], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(1078), float32], Tensor[(16, 8, 1), uint8]) */;
  %623 = %615.0;
  %624 = %622.7;
  (%623, %624, meta[relay.Constant][50] /* ty=Tensor[(1485), float64] */, meta[relay.Constant][51] /* ty=Tensor[(80, 4), float32] */, %var_8298)
}

def @func_8501() -> (Tensor[(13, 8, 5), float64], float64) {
  %625 = @func_3536() /* ty=(float64,) */;
  %626 = @func_7400() /* ty=Tensor[(13, 8, 5), float64] */;
  %627 = %625.0;
  (%626, %627)
}

def @func_7578() -> float64 {
  @func_5765() /* ty=float64 */
}

def @func_8767() -> float64 {
  %628 = @func_6319() /* ty=(float64,) */;
  %628.0
}

def @func_8796(%var_8794: Tensor[(2002), float64]) -> (float64, Tensor[(10), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(2002), float64]) {
  %629 = cast(meta[relay.Constant][52] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %630 = cast(meta[relay.Constant][53] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %631 = cast(%var_8794, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %632 = reshape(%629, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float32] */;
  %633 = reshape(%630, newshape=[784]) /* ty=Tensor[(784), bool] */;
  %634 = reshape(%631, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %635 = @func_1743(%632, %633, %634) /* ty=(Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) */;
  %636 = @func_5765() /* ty=float64 */;
  %637 = %635.3;
  (%636, %637, meta[relay.Constant][52] /* ty=Tensor[(320), float32] */, meta[relay.Constant][53] /* ty=Tensor[(784), bool] */, %var_8794)
}

def @func_6811() -> (float64,) {
  %638 = @func_3536() /* ty=(float64,) */;
  %639 = %638.0;
  (%639,)
}

def @func_6910() -> (float64, Tensor[(16, 6, 12), float64]) {
  %640 = @func_5491() /* ty=(float64,) */;
  %641 = %640.0;
  %642 = @func_5185() /* ty=Tensor[(16, 6, 12), float64] */;
  (%641, %642)
}

def @func_8566() -> (float64,) {
  %643 = @func_3691() /* ty=(float64,) */;
  %644 = %643.0;
  (%644,)
}

def @func_8041() -> float64 {
  %645 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %645.1
}

def @func_3011(%var_2965: Tensor[(13, 9, 15), int32], %var_2966: Tensor[(13, 9, 15), int32], %var_2978: float64, %var_2980: Tensor[(539, 2), float32]) -> (Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) {
  %646 = cast(%var_2966, dtype="int32") /* ty=Tensor[(13, 9, 15), int32] */;
  %647 = shape_of(%var_2965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_2965, dtype="int32") /* ty=Tensor[(13, 9, 15), int32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %650 = cast(meta[relay.Constant][55] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %651 = reshape(%650, newshape=[1, 3, 10]) /* ty=Tensor[(1, 3, 10), float64] */;
  %652 = @func_1032(%651) /* ty=(Tensor[(1, 3, 10), float64],) */;
  %653 = cast(meta[relay.Constant][56] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %654 = cast(meta[relay.Constant][56] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %655 = reshape(%653, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %656 = reshape(%654, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %657 = @func_1154(%655, %656) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %658 = cast(%var_2978, dtype="float64") /* ty=float64 */;
  %659 = cast(meta[relay.Constant][54] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %660 = cast(%var_2980, dtype="float32") /* ty=Tensor[(539, 2), float32] */;
  %661 = reshape(%658, newshape=[]) /* ty=float64 */;
  %662 = reshape(%659, newshape=[6, 7, 1]) /* ty=Tensor[(6, 7, 1), float64] */;
  %663 = reshape(%660, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %664 = @func_1595(%661, %662, %663) /* ty=(Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) */;
  %665 = %664.1;
  %666 = cast(meta[relay.Constant][56] /* ty=Tensor[(252), float64] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %667 = cast(%665, dtype="int32") /* ty=Tensor[(1, 10, 1), int32] */;
  %668 = logical_xor(%648, %649) /* ty=Tensor[(13, 9, 15), int32] */;
  %669 = %652.0;
  %670 = %657.0;
  %671 = left_shift(%666, %667) /* ty=Tensor[(1, 10, 252), int32] */;
  (%668, %var_2978, meta[relay.Constant][54] /* ty=Tensor[(42), float64] */, %var_2980, %669, meta[relay.Constant][55] /* ty=Tensor[(30), float64] */, %670, %671)
}

def @func_5341() -> (Tensor[(13, 8, 5), float64],) {
  %672 = @func_4807() /* ty=Tensor[(13, 8, 5), float64] */;
  (%672,)
}

def @func_7466() -> Tensor[(16, 8, 1), int16] {
  %673 = cast(meta[relay.Constant][57] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %674 = cast(meta[relay.Constant][58] /* ty=Tensor[(16, 8, 1), int16] */, dtype="int16") /* ty=Tensor[(16, 8, 1), int16] */;
  bitwise_and(%673, %674) /* ty=Tensor[(16, 8, 1), int16] */
}

def @func_5621(%var_5599: Tensor[(143, 14), float64], %var_5606: Tensor[(1755), int32], %var_5607: Tensor[(1078), float32]) -> (float64, Tensor[(98), float32], Tensor[(143, 14), float64], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
  %675 = cast(%var_5599, dtype="float64") /* ty=Tensor[(143, 14), float64] */;
  %676 = reshape(%675, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %677 = @func_1670(%676) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %678 = cast(%var_5606, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %679 = cast(%var_5606, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %680 = @func_4552() /* ty=float64 */;
  %681 = cast(%680, dtype="float64") /* ty=float64 */;
  %682 = cast(%var_5607, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %683 = reshape(%678, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %684 = reshape(%679, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %685 = reshape(%681, newshape=[]) /* ty=float64 */;
  %686 = reshape(%682, newshape=[539, 2]) /* ty=Tensor[(539, 2), float32] */;
  %687 = @func_3011(%683, %684, %685, %686) /* ty=(Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) */;
  %688 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %689 = %677.1;
  %690 = %687.6;
  %691 = %688.0;
  (%680, %689, %var_5599, %690, %var_5606, %var_5607, %691)
}

def @func_515(%var_501: Tensor[(6, 15, 1), int16], %var_502: Tensor[(6, 15, 4), int16], %var_510: Tensor[(5, 2), float64]) -> (Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) {
  %692 = cast(%var_501, dtype="int16") /* ty=Tensor[(6, 15, 1), int16] */;
  %693 = cast(%var_502, dtype="int16") /* ty=Tensor[(6, 15, 4), int16] */;
  %694 = cast(%var_510, dtype="float64") /* ty=Tensor[(5, 2), float64] */;
  %695 = reshape(%694, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %696 = bitwise_xor(%692, %693) /* ty=Tensor[(6, 15, 4), int16] */;
  %697 = @func_361(%695) /* ty=Tensor[(1, 10, 1), float64] */;
  (%696, %697, %var_510)
}

def @func_5185() -> Tensor[(16, 6, 12), float64] {
  %698 = @func_4836() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) */;
  %699 = %698.1;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  sigmoid(%700) /* ty=Tensor[(16, 6, 12), float64] */
}

def @func_4616(%var_4583: Tensor[(462, 1), float64]) -> (Tensor[(10, 9, 8), int8], Tensor[(1, 10, 1), float64], Tensor[(462, 1), float64]) {
  %701 = cast(meta[relay.Constant][59] /* ty=Tensor[(10, 9, 1), int8] */, dtype="int8") /* ty=Tensor[(10, 9, 1), int8] */;
  %702 = cast(meta[relay.Constant][60] /* ty=Tensor[(10, 9, 8), int8] */, dtype="int8") /* ty=Tensor[(10, 9, 8), int8] */;
  %703 = cast(%var_4583, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
  %704 = reshape(%703, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float64] */;
  %705 = @func_3069(%704) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %706 = minimum(%701, %702) /* ty=Tensor[(10, 9, 8), int8] */;
  %707 = %705.2;
  (%706, %707, %var_4583)
}

def @func_6596(%var_6564: Tensor[(784), bool], %var_6566: Tensor[(360, 1), int16]) -> (Tensor[(13, 8, 5), float64], Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(3, 30), int16], Tensor[(360, 2), float32], Tensor[(13, 8, 5), float64]) {
  %708 = cast(meta[relay.Constant][61] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %709 = reshape(%708, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
  %710 = @func_5001(%709) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
  %711 = cast(%var_6564, dtype="bool") /* ty=Tensor[(784), bool] */;
  %712 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 30), int16] */, dtype="int16") /* ty=Tensor[(3, 30), int16] */;
  %713 = cast(%var_6566, dtype="int16") /* ty=Tensor[(360, 1), int16] */;
  %714 = reshape(%711, newshape=[784]) /* ty=Tensor[(784), bool] */;
  %715 = reshape(%712, newshape=[90]) /* ty=Tensor[(90), int16] */;
  %716 = reshape(%713, newshape=[12, 30]) /* ty=Tensor[(12, 30), int16] */;
  %717 = @func_3933(%714, %715, %716) /* ty=(float64, Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(10), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(12, 30), int16]) */;
  %718 = cast(%var_6566, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
  %719 = cast(meta[relay.Constant][63] /* ty=Tensor[(360, 2), int16] */, dtype="float32") /* ty=Tensor[(360, 2), float32] */;
  %720 = @func_4042() /* ty=Tensor[(13, 8, 5), float64] */;
  %721 = %710.2;
  %722 = %717.1;
  %723 = divide(%718, %719) /* ty=Tensor[(360, 2), float32] */;
  %724 = @func_4807() /* ty=Tensor[(13, 8, 5), float64] */;
  (%720, %721, meta[relay.Constant][61] /* ty=Tensor[(2002), float64] */, %722, %var_6564, meta[relay.Constant][62] /* ty=Tensor[(3, 30), int16] */, %723, %724)
}

def @func_6635(%var_6625: Tensor[(8, 8, 8), float64]) -> Tensor[(8, 8, 8), float64] {
  %725 = cast(%var_6625, dtype="float64") /* ty=Tensor[(8, 8, 8), float64] */;
  tan(%725) /* ty=Tensor[(8, 8, 8), float64] */
}

def @func_8132() -> (float64,) {
  %726 = @func_7860() /* ty=float64 */;
  (%726,)
}

def @func_1206(%var_1182: Tensor[(7, 1, 14), float32], %var_1191: Tensor[(7, 11, 14), float32]) -> (Tensor[(7, 11, 14), bool],) {
  %727 = cast(%var_1182, dtype="float32") /* ty=Tensor[(7, 1, 14), float32] */;
  %728 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(7, 1, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(meta[relay.Constant][64] /* ty=Tensor[(7, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 14), float32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %731 = divide(%729, %730) /* ty=Tensor[(7, ?, 14), float32] */;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(7, ?, 14), float32] */;
  %733 = log2(%732) /* ty=Tensor[(7, ?, 14), float32] */;
  %734 = cast(%733, dtype="bool") /* ty=Tensor[(7, ?, 14), bool] */;
  %735 = cast(%var_1191, dtype="bool") /* ty=Tensor[(7, 11, 14), bool] */;
  %736 = logical_and(%734, %735) /* ty=Tensor[(7, 11, 14), bool] */;
  (%736,)
}

def @func_4807() -> Tensor[(13, 8, 5), float64] {
  %737 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %737.0
}

def @func_2293(%var_2274: Tensor[(8, 14, 16), float64]) -> Tensor[(8, 14, 16), bool] {
  %738 = cast(%var_2274, dtype="float64") /* ty=Tensor[(8, 14, 16), float64] */;
  %739 = asinh(%738) /* ty=Tensor[(8, 14, 16), float64] */;
  %740 = cast(%739, dtype="float64") /* ty=Tensor[(8, 14, 16), float64] */;
  %741 = acos(%740) /* ty=Tensor[(8, 14, 16), float64] */;
  %742 = cast(%var_2274, dtype="bool") /* ty=Tensor[(8, 14, 16), bool] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="bool") /* ty=Tensor[(8, 14, 16), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%744, %745) /* ty=Tensor[(8, 14, 16), bool] */
}

def @func_8526() -> (float64, float64, Tensor[(2, 15, 11), float32], Tensor[(330), float32]) {
  %746 = @func_5491() /* ty=(float64,) */;
  %747 = cast(meta[relay.Constant][65] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %748 = cast(meta[relay.Constant][65] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %749 = reshape(%747, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %750 = reshape(%748, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %751 = %746.0;
  %752 = @func_5765() /* ty=float64 */;
  %753 = @func_541(%749, %750) /* ty=Tensor[(2, 15, 11), float32] */;
  (%751, %752, %753, meta[relay.Constant][65] /* ty=Tensor[(330), float32] */)
}

def @func_4552() -> float64 {
  @func_4151() /* ty=float64 */
}

def @func_1015(%var_969: Tensor[(8, 14, 7), bool], %var_974: Tensor[(1, 10), float64]) -> (Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) {
  %754 = cast(%var_969, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
  %755 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(8, 14, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(meta[relay.Constant][66] /* ty=Tensor[(8, 14, 7), bool] */, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %758 = cast(%var_974, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %759 = reshape(%758, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %760 = @func_361(%759) /* ty=Tensor[(1, 10, 1), float64] */;
  %761 = cast(%var_974, dtype="uint32") /* ty=Tensor[(1, 10), uint32] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%760, dtype="uint32") /* ty=Tensor[(1, 10, 1), uint32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %765 = cast(meta[relay.Constant][66] /* ty=Tensor[(8, 14, 7), bool] */, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %766 = cast(meta[relay.Constant][67] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %767 = cast(meta[relay.Constant][67] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %768 = reshape(%766, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %769 = reshape(%767, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %770 = cast(meta[relay.Constant][67] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %771 = @func_541(%768, %769) /* ty=Tensor[(2, 15, 11), float32] */;
  %772 = cast(%771, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %773 = reshape(%770, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %774 = reshape(%772, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %775 = logical_and(%756, %757) /* ty=Tensor[(8, 14, 7), bool] */;
  %776 = multiply(%763, %764) /* ty=Tensor[(?, 10, ?), uint32] */;
  %777 = atan(%765) /* ty=Tensor[(8, 14, 7), float32] */;
  %778 = @func_541(%773, %774) /* ty=Tensor[(2, 15, 11), float32] */;
  (%775, %776, %777, %771, meta[relay.Constant][67] /* ty=Tensor[(330), float32] */, %778)
}

def @func_6201(%var_6197: Tensor[(2002), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), bool], Tensor[(1, 1, 10), bool], Tensor[(10), int64], Tensor[(16, 1, 1), float64], uint8, Tensor[(16), uint8], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), bool], Tensor[(2002), float64]) {
  %779 = @func_5341() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %780 = %779.0;
  %781 = cast(%780, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %782 = reshape(%781, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %783 = @func_4011(%782) /* ty=(Tensor[(13, 8, 5), bool],) */;
  %784 = cast(meta[relay.Constant][68] /* ty=Tensor[(10), int64] */, dtype="int64") /* ty=Tensor[(10), int64] */;
  %785 = reshape(%784, newshape=[1, 1, 10]) /* ty=Tensor[(1, 1, 10), int64] */;
  %786 = cast(meta[relay.Constant][69] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %787 = cast(meta[relay.Constant][70] /* ty=Tensor[(16), uint8] */, dtype="uint8") /* ty=Tensor[(16), uint8] */;
  %788 = reshape(%786, newshape=[]) /* ty=uint8 */;
  %789 = reshape(%787, newshape=[16, 1, 1]) /* ty=Tensor[(16, 1, 1), uint8] */;
  %790 = @func_5318(%788, %789) /* ty=(Tensor[(16, 1, 1), uint8], Tensor[(16, 1, 1), float64], float64) */;
  %791 = %783.0;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %793 = reshape(%792, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %794 = @func_4011(%793) /* ty=(Tensor[(13, 8, 5), bool],) */;
  %795 = cast(%var_6197, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %796 = reshape(%795, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
  %797 = @func_5001(%796) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
  %798 = @func_1096(%785) /* ty=Tensor[(1, 1, 10), bool] */;
  %799 = %790.1;
  %800 = %794.0;
  %801 = %797.0;
  (%780, %791, %798, meta[relay.Constant][68] /* ty=Tensor[(10), int64] */, %799, meta[relay.Constant][69] /* ty=uint8 */, meta[relay.Constant][70] /* ty=Tensor[(16), uint8] */, %800, %801, %var_6197)
}

def @func_4964() -> Tensor[(13, 8, 5), float64] {
  %802 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %802.0
}

def @func_5262(%var_5242: Tensor[(320), float32], %var_5243: Tensor[(784), bool], %var_5244: Tensor[(150, 1), uint64], %var_5246: Tensor[(1078), float32]) -> (Tensor[(13, 8, 5), float64], Tensor[(3, 5, 10), uint64], Tensor[(1, 8), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150, 1), uint64], Tensor[(330), float32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
  %803 = @func_4905() /* ty=(float64, Tensor[(13, 8, 5), float64]) */;
  %804 = cast(meta[relay.Constant][71] /* ty=Tensor[(1, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
  %805 = cast(meta[relay.Constant][71] /* ty=Tensor[(1, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
  %806 = cast(meta[relay.Constant][72] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %807 = cast(%var_5242, dtype="float32") /* ty=Tensor[(320), float32] */;
  %808 = cast(%var_5243, dtype="bool") /* ty=Tensor[(784), bool] */;
  %809 = cast(%var_5244, dtype="uint64") /* ty=Tensor[(150, 1), uint64] */;
  %810 = cast(meta[relay.Constant][73] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %811 = cast(%var_5246, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %812 = reshape(%804, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %813 = reshape(%805, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %814 = reshape(%806, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %815 = reshape(%807, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %816 = reshape(%808, newshape=[784, 1]) /* ty=Tensor[(784, 1), bool] */;
  %817 = reshape(%809, newshape=[150]) /* ty=Tensor[(150), uint64] */;
  %818 = reshape(%810, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %819 = reshape(%811, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %820 = @func_2087(%812, %813, %814, %815, %816, %817, %818, %819) /* ty=(Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) */;
  %821 = %803.1;
  %822 = %820.3;
  %823 = @func_4964() /* ty=Tensor[(13, 8, 5), float64] */;
  (%821, %822, meta[relay.Constant][71] /* ty=Tensor[(1, 8), float32] */, meta[relay.Constant][72] /* ty=Tensor[(252), float64] */, %var_5242, %var_5243, %var_5244, meta[relay.Constant][73] /* ty=Tensor[(330), float32] */, %var_5246, %823)
}

def @func_6319() -> (float64,) {
  %824 = @func_5765() /* ty=float64 */;
  (%824,)
}

def @func_8471() -> (float64,) {
  %825 = @func_7148() /* ty=(float64,) */;
  %826 = %825.0;
  (%826,)
}

def @func_1799(%var_1791: uint64, %var_1792: Tensor[(3, 5, 10), uint64]) -> Tensor[(3, 5, 10), uint64] {
  %827 = cast(%var_1791, dtype="uint64") /* ty=uint64 */;
  %828 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(3, 5, 10), uint64] */;
  bitwise_and(%827, %828) /* ty=Tensor[(3, 5, 10), uint64] */
}

def @func_5453(%var_5408: Tensor[(64, 28), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(8, 14, 16), bool], float64, Tensor[(64, 28), float32], Tensor[(64, 28), bool], Tensor[(64, 28), float32]) {
  %829 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %830 = cast(meta[relay.Constant][74] /* ty=Tensor[(64, 28), float64] */, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
  %831 = reshape(%830, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float64] */;
  %832 = @func_3536() /* ty=(float64,) */;
  %833 = cast(%var_5408, dtype="int64") /* ty=Tensor[(64, 28), int64] */;
  %834 = shape_of(meta[relay.Constant][74] /* ty=Tensor[(64, 28), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %835 = cast(meta[relay.Constant][74] /* ty=Tensor[(64, 28), float64] */, dtype="int64") /* ty=Tensor[(64, 28), int64] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %837 = minimum(%835, %836) /* ty=Tensor[(64, 28), int64] */;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
  %839 = cosh(%838) /* ty=Tensor[(64, 28), float64] */;
  %840 = cast(meta[relay.Constant][74] /* ty=Tensor[(64, 28), float64] */, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
  %841 = sinh(%840) /* ty=Tensor[(64, 28), float64] */;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(64, 28), float32] */;
  %843 = shape_of(%839, dtype="int32") /* ty=Tensor[(2), int32] */;
  %844 = cast(%839, dtype="float32") /* ty=Tensor[(64, 28), float32] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %846 = cast(%837, dtype="bool") /* ty=Tensor[(64, 28), bool] */;
  %847 = shape_of(%841, dtype="int32") /* ty=Tensor[(2), int32] */;
  %848 = cast(%841, dtype="bool") /* ty=Tensor[(64, 28), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %850 = cast(%837, dtype="float32") /* ty=Tensor[(64, 28), float32] */;
  %851 = %829.0;
  %852 = @func_2293(%831) /* ty=Tensor[(8, 14, 16), bool] */;
  %853 = %832.0;
  %854 = power(%844, %845) /* ty=Tensor[(64, 28), float32] */;
  %855 = greater(%848, %849) /* ty=Tensor[(64, 28), bool] */;
  %856 = sin(%850) /* ty=Tensor[(64, 28), float32] */;
  (%851, %852, %853, %854, %855, %856)
}

def @func_3612(%var_3597: Tensor[(10), float64]) -> (float64, Tensor[(1078), float32], Tensor[(?, 10, ?), uint32], Tensor[(8, 98), bool], Tensor[(10), float64], Tensor[(1755), bool]) {
  %857 = cast(meta[relay.Constant][75] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %858 = cast(meta[relay.Constant][75] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %859 = @func_3536() /* ty=(float64,) */;
  %860 = %859.0;
  %861 = cast(%860, dtype="float64") /* ty=float64 */;
  %862 = cast(meta[relay.Constant][76] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %863 = reshape(%857, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %864 = reshape(%858, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %865 = reshape(%861, newshape=[]) /* ty=float64 */;
  %866 = reshape(%862, newshape=[539, 2]) /* ty=Tensor[(539, 2), float32] */;
  %867 = @func_3011(%863, %864, %865, %866) /* ty=(Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) */;
  %868 = cast(meta[relay.Constant][77] /* ty=Tensor[(8, 98), bool] */, dtype="bool") /* ty=Tensor[(8, 98), bool] */;
  %869 = cast(%var_3597, dtype="float64") /* ty=Tensor[(10), float64] */;
  %870 = reshape(%868, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
  %871 = reshape(%869, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %872 = @func_1015(%870, %871) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
  %873 = cast(meta[relay.Constant][75] /* ty=Tensor[(1755), int32] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
  %874 = cast(%860, dtype="bool") /* ty=bool */;
  %875 = %867.1;
  %876 = %872.1;
  %877 = less_equal(%873, %874) /* ty=Tensor[(1755), bool] */;
  (%875, meta[relay.Constant][76] /* ty=Tensor[(1078), float32] */, %876, meta[relay.Constant][77] /* ty=Tensor[(8, 98), bool] */, %var_3597, %877)
}

def @func_8369() -> (Tensor[(13, 8, 5), float64], Tensor[(7, 11, 14), float64], Tensor[(13, 8, 5), float64]) {
  %878 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %879 = @func_7982() /* ty=(float64, Tensor[(7, 11, 14), float64]) */;
  %880 = %878.0;
  %881 = %879.1;
  %882 = @func_6015() /* ty=Tensor[(13, 8, 5), float64] */;
  (%880, %881, %882)
}

def @func_1154(%var_1137: Tensor[(3, 7, 12), float64], %var_1138: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) {
  %883 = cast(%var_1138, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %884 = shape_of(%var_1137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%var_1137, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %887 = cast(meta[relay.Constant][78] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
  %888 = reshape(%887, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %889 = equal(%885, %886) /* ty=Tensor[(3, 7, 12), bool] */;
  %890 = @func_361(%888) /* ty=Tensor[(1, 10, 1), float64] */;
  (%889, %890, meta[relay.Constant][78] /* ty=Tensor[(10, 1), float64] */)
}

def @func_6437() -> (Tensor[(13, 8, 5), float64],) {
  %891 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %892 = %891.0;
  (%892,)
}

def @func_7561(%var_7510: Tensor[(1485), float64], %var_7542: Tensor[(320), float32], %var_7545: Tensor[(1078), float32]) -> (float64, Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(784), bool], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(1078), float32], Tensor[(16, 8, 1), uint8]) {
  %893 = cast(%var_7510, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %894 = reshape(%893, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float64] */;
  %895 = @func_3214(%894) /* ty=(Tensor[(9, 11, 15), float64],) */;
  %896 = cast(%var_7542, dtype="float32") /* ty=Tensor[(320), float32] */;
  %897 = cast(meta[relay.Constant][79] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %898 = cast(meta[relay.Constant][80] /* ty=Tensor[(150), uint64] */, dtype="uint64") /* ty=Tensor[(150), uint64] */;
  %899 = cast(%var_7545, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %900 = reshape(%896, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %901 = reshape(%897, newshape=[784]) /* ty=Tensor[(784), bool] */;
  %902 = reshape(%898, newshape=[150, 1]) /* ty=Tensor[(150, 1), uint64] */;
  %903 = reshape(%899, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %904 = @func_5262(%900, %901, %902, %903) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(3, 5, 10), uint64], Tensor[(1, 8), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150, 1), uint64], Tensor[(330), float32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */;
  %905 = @func_7466() /* ty=Tensor[(16, 8, 1), int16] */;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(16, 8, 1), float64] */;
  %907 = sinh(%906) /* ty=Tensor[(16, 8, 1), float64] */;
  %908 = @func_3691() /* ty=(float64,) */;
  %909 = %908.0;
  %910 = cast(%907, dtype="uint8") /* ty=Tensor[(16, 8, 1), uint8] */;
  %911 = cast(%909, dtype="uint8") /* ty=uint8 */;
  %912 = @func_5887() /* ty=float64 */;
  %913 = %895.0;
  %914 = %904.5;
  %915 = subtract(%910, %911) /* ty=Tensor[(16, 8, 1), uint8] */;
  (%912, %913, %var_7510, %914, %var_7542, meta[relay.Constant][79] /* ty=Tensor[(784), bool] */, meta[relay.Constant][80] /* ty=Tensor[(150), uint64] */, %var_7545, %915)
}

def @func_3394(%var_3379: Tensor[(16, 6, 12), float64], %var_3380: Tensor[(16, 6, 12), float64]) -> (Tensor[(16, 6, 12), float64],) {
  %916 = cast(%var_3380, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  %917 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %918 = cast(%var_3379, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %920 = floor_divide(%918, %919) /* ty=Tensor[(16, 6, 12), float64] */;
  (%920,)
}

def @func_361(%var_351: Tensor[(1, 10, 1), float64]) -> Tensor[(1, 10, 1), float64] {
  %921 = cast(%var_351, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  log(%921) /* ty=Tensor[(1, 10, 1), float64] */
}

def @func_6015() -> Tensor[(13, 8, 5), float64] {
  %922 = @func_5341() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %922.0
}

def @func_6357() -> Tensor[(13, 8, 5), float64] {
  %923 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %923.0
}

def @func_4391(%var_4364: Tensor[(462), float64], %var_4378: Tensor[(8, 224), float64]) -> (Tensor[(5, 12, 1), uint8], Tensor[(13, 8, 5), float64], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 224), bool], Tensor[(10, 96), int64]) {
  %924 = @func_4130() /* ty=(Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) */;
  %925 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %926 = cast(meta[relay.Constant][81] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %927 = cast(meta[relay.Constant][82] /* ty=Tensor[(8, 224), float64] */, dtype="float64") /* ty=Tensor[(8, 224), float64] */;
  %928 = reshape(%926, newshape=[1, 12, 8]) /* ty=Tensor[(1, 12, 8), float64] */;
  %929 = reshape(%927, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %930 = @func_4335(%928, %929) /* ty=(Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) */;
  %931 = cast(%var_4378, dtype="bool") /* ty=Tensor[(8, 224), bool] */;
  %932 = shape_of(meta[relay.Constant][82] /* ty=Tensor[(8, 224), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %933 = cast(meta[relay.Constant][82] /* ty=Tensor[(8, 224), float64] */, dtype="bool") /* ty=Tensor[(8, 224), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %935 = cast(%var_4364, dtype="float64") /* ty=Tensor[(462), float64] */;
  %936 = reshape(%935, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float64] */;
  %937 = @func_3069(%936) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %938 = %937.3;
  %939 = cast(%938, dtype="int64") /* ty=Tensor[(10, 1), int64] */;
  %940 = cast(meta[relay.Constant][81] /* ty=Tensor[(96), float64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %941 = %924.2;
  %942 = %925.0;
  %943 = %930.2;
  %944 = less_equal(%933, %934) /* ty=Tensor[(8, 224), bool] */;
  %945 = logical_xor(%939, %940) /* ty=Tensor[(10, 96), int64] */;
  (%941, %942, %var_4364, %943, %944, %945)
}

def @func_5664() -> float64 {
  %946 = @func_3691() /* ty=(float64,) */;
  %946.0
}

def @func_3069(%var_3056: Tensor[(6, 11, 7), float64]) -> (Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) {
  %947 = cast(meta[relay.Constant][83] /* ty=Tensor[(6, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
  %948 = shape_of(%var_3056, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%var_3056, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %951 = cast(%var_3056, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
  %952 = cast(meta[relay.Constant][84] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
  %953 = reshape(%952, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %954 = maximum(%949, %950) /* ty=Tensor[(6, 11, 7), float64] */;
  %955 = atanh(%951) /* ty=Tensor[(6, 11, 7), float32] */;
  %956 = @func_361(%953) /* ty=Tensor[(1, 10, 1), float64] */;
  (%954, %955, %956, meta[relay.Constant][84] /* ty=Tensor[(10, 1), float64] */)
}

def @func_7954() -> (Tensor[(13, 8, 5), float64], float64) {
  %957 = @func_5341() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %958 = @func_4191() /* ty=(float64,) */;
  %959 = %957.0;
  %960 = %958.0;
  (%959, %960)
}

def @func_1096(%var_1084: Tensor[(1, 1, 10), int64]) -> Tensor[(1, 1, 10), bool] {
  %961 = cast(-9 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %962 = cast(%var_1084, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
  greater(%961, %962) /* ty=Tensor[(1, 1, 10), bool] */
}

def @func_4042() -> Tensor[(13, 8, 5), float64] {
  %963 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %963.0
}

def @func_7235(%var_7207: Tensor[(16, 12, 13), bool], %var_7208: Tensor[(16, 12, 13), bool]) -> (Tensor[(16, 12, 13), bool], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], float64, Tensor[(539, 2), uint16]) {
  %964 = cast(%var_7208, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %965 = shape_of(%var_7207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%var_7207, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %968 = cast(meta[relay.Constant][85] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %969 = cast(meta[relay.Constant][85] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %970 = cast(-3.26341f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %971 = cast(meta[relay.Constant][86] /* ty=Tensor[(539, 2), float32] */, dtype="float32") /* ty=Tensor[(539, 2), float32] */;
  %972 = reshape(%968, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %973 = reshape(%969, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %974 = reshape(%970, newshape=[]) /* ty=float64 */;
  %975 = reshape(%971, newshape=[539, 2]) /* ty=Tensor[(539, 2), float32] */;
  %976 = @func_3011(%972, %973, %974, %975) /* ty=(Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) */;
  %977 = cast(meta[relay.Constant][87] /* ty=Tensor[(539, 2), float32] */, dtype="uint16") /* ty=Tensor[(539, 2), uint16] */;
  %978 = shape_of(meta[relay.Constant][86] /* ty=Tensor[(539, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %979 = cast(meta[relay.Constant][86] /* ty=Tensor[(539, 2), float32] */, dtype="uint16") /* ty=Tensor[(539, 2), uint16] */;
  %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %981 = logical_and(%966, %967) /* ty=Tensor[(16, 12, 13), bool] */;
  %982 = %976.6;
  %983 = left_shift(%979, %980) /* ty=Tensor[(539, 2), uint16] */;
  (%981, %982, meta[relay.Constant][85] /* ty=Tensor[(1755), int32] */, -3.26341f64 /* ty=float64 */, %983)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7239(%var_7237: Tensor[(16, 12, 13), bool], %var_7238: Tensor[(16, 12, 13), bool]) -> (Tensor[(16, 12, 13), bool], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], float64, Tensor[(539, 2), uint16]) {
  @func_7235(%var_7237, %var_7238) /* ty=(Tensor[(16, 12, 13), bool], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], float64, Tensor[(539, 2), uint16]) */
}

def @func_6599(%var_6597: Tensor[(784), bool], %var_6598: Tensor[(360, 1), int16]) -> (Tensor[(13, 8, 5), float64], Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(3, 30), int16], Tensor[(360, 2), float32], Tensor[(13, 8, 5), float64]) {
  %17 = fn (%var_6564: Tensor[(784), bool], %var_6566: Tensor[(360, 1), int16]) -> (Tensor[(13, 8, 5), float64], Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(3, 30), int16], Tensor[(360, 2), float32], Tensor[(13, 8, 5), float64]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %1 = reshape(%0, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
    %2 = @func_5001(%1) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
    %3 = cast(%var_6564, dtype="bool") /* ty=Tensor[(784), bool] */;
    %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 30), int16] */, dtype="int16") /* ty=Tensor[(3, 30), int16] */;
    %5 = cast(%var_6566, dtype="int16") /* ty=Tensor[(360, 1), int16] */;
    %6 = reshape(%3, newshape=[784]) /* ty=Tensor[(784), bool] */;
    %7 = reshape(%4, newshape=[90]) /* ty=Tensor[(90), int16] */;
    %8 = reshape(%5, newshape=[12, 30]) /* ty=Tensor[(12, 30), int16] */;
    %9 = @func_3933(%6, %7, %8) /* ty=(float64, Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(10), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(12, 30), int16]) */;
    %10 = cast(%var_6566, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
    %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(360, 2), int16] */, dtype="float32") /* ty=Tensor[(360, 2), float32] */;
    %12 = @func_4042() /* ty=Tensor[(13, 8, 5), float64] */;
    %13 = %2.2;
    %14 = %9.1;
    %15 = divide(%10, %11) /* ty=Tensor[(360, 2), float32] */;
    %16 = @func_4807() /* ty=Tensor[(13, 8, 5), float64] */;
    (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(2002), float64] */, %14, %var_6564, meta[relay.Constant][1] /* ty=Tensor[(3, 30), int16] */, %15, %16)
  };
  %17(%var_6597, %var_6598) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(3, 30), int16], Tensor[(360, 2), float32], Tensor[(13, 8, 5), float64]) */
}

def @func_5941(%var_5938: float64, %var_5939: Tensor[(42), float64], %var_5940: Tensor[(13, 8, 5), int64]) -> (Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) {
  %39 = fn (%var_5899: float64, %var_5900: Tensor[(42), float64], %var_5903: Tensor[(13, 8, 5), int64]) -> (Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) {
    %18 = cast(%var_5899, dtype="float64") /* ty=float64 */;
    %19 = cast(%var_5900, dtype="float64") /* ty=Tensor[(42), float64] */;
    %20 = cast(meta[relay.Constant][3] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %21 = reshape(%18, newshape=[]) /* ty=float64 */;
    %22 = reshape(%19, newshape=[6, 7, 1]) /* ty=Tensor[(6, 7, 1), float64] */;
    %23 = reshape(%20, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %24 = @func_1595(%21, %22, %23) /* ty=(Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) */;
    %25 = @func_5068() /* ty=Tensor[(13, 8, 5), int64] */;
    %26 = cast(%var_5903, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %30 = power(%28, %29) /* ty=Tensor[(13, 8, 5), float32] */;
    %31 = cast(%var_5903, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
    %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%30, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %35 = cast(%30, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
    %36 = %24.2;
    %37 = less_equal(%33, %34) /* ty=Tensor[(13, 8, 5), bool] */;
    %38 = atanh(%35) /* ty=Tensor[(13, 8, 5), float32] */;
    (%36, %var_5899, %var_5900, meta[relay.Constant][3] /* ty=Tensor[(1078), float32] */, %37, %38)
  };
  %39(%var_5938, %var_5939, %var_5940) /* ty=(Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) */
}

def @func_8132() -> (float64,) {
  %40 = @func_7860() /* ty=float64 */;
  (%40,)
}

def @func_6910() -> (float64, Tensor[(16, 6, 12), float64]) {
  %41 = @func_5491() /* ty=(float64,) */;
  %42 = %41.0;
  %43 = @func_5185() /* ty=Tensor[(16, 6, 12), float64] */;
  (%42, %43)
}

def @func_8502() -> (Tensor[(13, 8, 5), float64], float64) {
  %47 = fn () -> (Tensor[(13, 8, 5), float64], float64) {
    %44 = @func_3536() /* ty=(float64,) */;
    %45 = @func_7400() /* ty=Tensor[(13, 8, 5), float64] */;
    %46 = %44.0;
    (%45, %46)
  };
  %47() /* ty=(Tensor[(13, 8, 5), float64], float64) */
}

def @func_5131(%var_5129: Tensor[(448, 4), float64], %var_5130: Tensor[(1485), float64]) -> (float64, Tensor[(2, 48), float64], Tensor[(448, 4), float64], Tensor[(1, 12, 8), bool], Tensor[(9, 11, 15), float64], Tensor[(1485), float64]) {
  @func_5127(%var_5129, %var_5130) /* ty=(float64, Tensor[(2, 48), float64], Tensor[(448, 4), float64], Tensor[(1, 12, 8), bool], Tensor[(9, 11, 15), float64], Tensor[(1485), float64]) */
}

def @func_5455(%var_5454: Tensor[(64, 28), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(8, 14, 16), bool], float64, Tensor[(64, 28), float32], Tensor[(64, 28), bool], Tensor[(64, 28), float32]) {
  %76 = fn (%var_5408: Tensor[(64, 28), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(8, 14, 16), bool], float64, Tensor[(64, 28), float32], Tensor[(64, 28), bool], Tensor[(64, 28), float32]) {
    %48 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(64, 28), float64] */, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
    %50 = reshape(%49, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float64] */;
    %51 = @func_3536() /* ty=(float64,) */;
    %52 = cast(%var_5408, dtype="int64") /* ty=Tensor[(64, 28), int64] */;
    %53 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(64, 28), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(64, 28), float64] */, dtype="int64") /* ty=Tensor[(64, 28), int64] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %56 = minimum(%54, %55) /* ty=Tensor[(64, 28), int64] */;
    %57 = cast(%56, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
    %58 = cosh(%57) /* ty=Tensor[(64, 28), float64] */;
    %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(64, 28), float64] */, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
    %60 = sinh(%59) /* ty=Tensor[(64, 28), float64] */;
    %61 = cast(%60, dtype="float32") /* ty=Tensor[(64, 28), float32] */;
    %62 = shape_of(%58, dtype="int32") /* ty=Tensor[(2), int32] */;
    %63 = cast(%58, dtype="float32") /* ty=Tensor[(64, 28), float32] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %65 = cast(%56, dtype="bool") /* ty=Tensor[(64, 28), bool] */;
    %66 = shape_of(%60, dtype="int32") /* ty=Tensor[(2), int32] */;
    %67 = cast(%60, dtype="bool") /* ty=Tensor[(64, 28), bool] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %69 = cast(%56, dtype="float32") /* ty=Tensor[(64, 28), float32] */;
    %70 = %48.0;
    %71 = @func_2293(%50) /* ty=Tensor[(8, 14, 16), bool] */;
    %72 = %51.0;
    %73 = power(%63, %64) /* ty=Tensor[(64, 28), float32] */;
    %74 = greater(%67, %68) /* ty=Tensor[(64, 28), bool] */;
    %75 = sin(%69) /* ty=Tensor[(64, 28), float32] */;
    (%70, %71, %72, %73, %74, %75)
  };
  %76(%var_5454) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(8, 14, 16), bool], float64, Tensor[(64, 28), float32], Tensor[(64, 28), bool], Tensor[(64, 28), float32]) */
}

def @func_5068() -> Tensor[(13, 8, 5), int64] {
  %77 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %78 = %77.0;
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 8, 5), float64] */, dtype="int64") /* ty=Tensor[(13, 8, 5), int64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="int64") /* ty=Tensor[(13, 8, 5), int64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%81, %82) /* ty=Tensor[(13, 8, 5), int64] */
}

def @func_8337() -> (float64,) {
  @func_8335() /* ty=(float64,) */
}

def @func_5666() -> float64 {
  @func_5664() /* ty=float64 */
}

def @func_4906() -> (float64, Tensor[(13, 8, 5), float64]) {
  %86 = fn () -> (float64, Tensor[(13, 8, 5), float64]) {
    %83 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %84 = @func_4552() /* ty=float64 */;
    %85 = %83.0;
    (%84, %85)
  };
  %86() /* ty=(float64, Tensor[(13, 8, 5), float64]) */
}

def @func_6635(%var_6625: Tensor[(8, 8, 8), float64]) -> Tensor[(8, 8, 8), float64] {
  %87 = cast(%var_6625, dtype="float64") /* ty=Tensor[(8, 8, 8), float64] */;
  tan(%87) /* ty=Tensor[(8, 8, 8), float64] */
}

def @func_6269(%var_6267: Tensor[(1, 10), float64], %var_6268: Tensor[(48, 24), float64]) -> (float64, Tensor[(1, 10), float64], Tensor[(13, 8, 5), float64], Tensor[(48, 24), int32]) {
  %100 = fn (%var_6245: Tensor[(1, 10), float64], %var_6255: Tensor[(48, 24), float64]) -> (float64, Tensor[(1, 10), float64], Tensor[(13, 8, 5), float64], Tensor[(48, 24), int32]) {
    %88 = cast(%var_6245, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
    %89 = reshape(%88, newshape=[10]) /* ty=Tensor[(10), float64] */;
    %90 = @func_3612(%89) /* ty=(float64, Tensor[(1078), float32], Tensor[(?, 10, ?), uint32], Tensor[(8, 98), bool], Tensor[(10), float64], Tensor[(1755), bool]) */;
    %91 = @func_4836() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) */;
    %92 = %91.2;
    %93 = cast(%var_6255, dtype="int32") /* ty=Tensor[(48, 24), int32] */;
    %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(2), int32] */;
    %95 = cast(%92, dtype="int32") /* ty=Tensor[(48, 24), int32] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %97 = %90.0;
    %98 = @func_4807() /* ty=Tensor[(13, 8, 5), float64] */;
    %99 = add(%95, %96) /* ty=Tensor[(48, 24), int32] */;
    (%97, %var_6245, %98, %99)
  };
  %100(%var_6267, %var_6268) /* ty=(float64, Tensor[(1, 10), float64], Tensor[(13, 8, 5), float64], Tensor[(48, 24), int32]) */
}

def @func_7181(%var_7180: Tensor[(10, 1, 15), float64]) -> Tensor[(10, ?, 15), float64] {
  %105 = fn (%var_7168: Tensor[(10, 1, 15), float64]) -> Tensor[(10, ?, 15), float64] {
    %101 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
    %102 = shape_of(%var_7168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %103 = cast(%var_7168, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%103, %104) /* ty=Tensor[(10, ?, 15), float64] */
  };
  %105(%var_7180) /* ty=Tensor[(10, ?, 15), float64] */
}

def @func_7914(%var_7912: Tensor[(64, 28), float64]) -> (float64, Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(10, 9, 8), int8], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 12), float64], Tensor[(64, 28), float64]) {
  @func_7911(%var_7912) /* ty=(float64, Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(10, 9, 8), int8], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 12), float64], Tensor[(64, 28), float64]) */
}

def @func_1206(%var_1182: Tensor[(7, 1, 14), float32], %var_1191: Tensor[(7, 11, 14), float32]) -> (Tensor[(7, 11, 14), bool],) {
  %106 = cast(%var_1182, dtype="float32") /* ty=Tensor[(7, 1, 14), float32] */;
  %107 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(7, 1, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 14), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %110 = divide(%108, %109) /* ty=Tensor[(7, ?, 14), float32] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(7, ?, 14), float32] */;
  %112 = log2(%111) /* ty=Tensor[(7, ?, 14), float32] */;
  %113 = cast(%112, dtype="bool") /* ty=Tensor[(7, ?, 14), bool] */;
  %114 = cast(%var_1191, dtype="bool") /* ty=Tensor[(7, 11, 14), bool] */;
  %115 = logical_and(%113, %114) /* ty=Tensor[(7, 11, 14), bool] */;
  (%115,)
}

def @func_7466() -> Tensor[(16, 8, 1), int16] {
  %116 = cast(meta[relay.Constant][8] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 8, 1), int16] */, dtype="int16") /* ty=Tensor[(16, 8, 1), int16] */;
  bitwise_and(%116, %117) /* ty=Tensor[(16, 8, 1), int16] */
}

def @func_5267(%var_5263: Tensor[(320), float32], %var_5264: Tensor[(784), bool], %var_5265: Tensor[(150, 1), uint64], %var_5266: Tensor[(1078), float32]) -> (Tensor[(13, 8, 5), float64], Tensor[(3, 5, 10), uint64], Tensor[(1, 8), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150, 1), uint64], Tensor[(330), float32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
  %139 = fn (%var_5242: Tensor[(320), float32], %var_5243: Tensor[(784), bool], %var_5244: Tensor[(150, 1), uint64], %var_5246: Tensor[(1078), float32]) -> (Tensor[(13, 8, 5), float64], Tensor[(3, 5, 10), uint64], Tensor[(1, 8), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150, 1), uint64], Tensor[(330), float32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
    %118 = @func_4905() /* ty=(float64, Tensor[(13, 8, 5), float64]) */;
    %119 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
    %120 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
    %121 = cast(meta[relay.Constant][11] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
    %122 = cast(%var_5242, dtype="float32") /* ty=Tensor[(320), float32] */;
    %123 = cast(%var_5243, dtype="bool") /* ty=Tensor[(784), bool] */;
    %124 = cast(%var_5244, dtype="uint64") /* ty=Tensor[(150, 1), uint64] */;
    %125 = cast(meta[relay.Constant][12] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %126 = cast(%var_5246, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %127 = reshape(%119, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
    %128 = reshape(%120, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
    %129 = reshape(%121, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %130 = reshape(%122, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %131 = reshape(%123, newshape=[784, 1]) /* ty=Tensor[(784, 1), bool] */;
    %132 = reshape(%124, newshape=[150]) /* ty=Tensor[(150), uint64] */;
    %133 = reshape(%125, newshape=[330]) /* ty=Tensor[(330), float32] */;
    %134 = reshape(%126, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %135 = @func_2087(%127, %128, %129, %130, %131, %132, %133, %134) /* ty=(Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) */;
    %136 = %118.1;
    %137 = %135.3;
    %138 = @func_4964() /* ty=Tensor[(13, 8, 5), float64] */;
    (%136, %137, meta[relay.Constant][10] /* ty=Tensor[(1, 8), float32] */, meta[relay.Constant][11] /* ty=Tensor[(252), float64] */, %var_5242, %var_5243, %var_5244, meta[relay.Constant][12] /* ty=Tensor[(330), float32] */, %var_5246, %138)
  };
  %139(%var_5263, %var_5264, %var_5265, %var_5266) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(3, 5, 10), uint64], Tensor[(1, 8), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150, 1), uint64], Tensor[(330), float32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */
}

def @func_8302(%var_8301: Tensor[(1078), float32]) -> (Tensor[(13, 8, 5), float64], Tensor[(1078), float32], Tensor[(1485), float64], Tensor[(80, 4), float32], Tensor[(1078), float32]) {
  %150 = fn (%var_8298: Tensor[(1078), float32]) -> (Tensor[(13, 8, 5), float64], Tensor[(1078), float32], Tensor[(1485), float64], Tensor[(80, 4), float32], Tensor[(1078), float32]) {
    %140 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %141 = cast(meta[relay.Constant][13] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
    %142 = cast(meta[relay.Constant][14] /* ty=Tensor[(80, 4), float32] */, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
    %143 = cast(%var_8298, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %144 = reshape(%141, newshape=[1485]) /* ty=Tensor[(1485), float64] */;
    %145 = reshape(%142, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %146 = reshape(%143, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %147 = @func_7561(%144, %145, %146) /* ty=(float64, Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(784), bool], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(1078), float32], Tensor[(16, 8, 1), uint8]) */;
    %148 = %140.0;
    %149 = %147.7;
    (%148, %149, meta[relay.Constant][13] /* ty=Tensor[(1485), float64] */, meta[relay.Constant][14] /* ty=Tensor[(80, 4), float32] */, %var_8298)
  };
  %150(%var_8301) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(1078), float32], Tensor[(1485), float64], Tensor[(80, 4), float32], Tensor[(1078), float32]) */
}

def @func_7860() -> float64 {
  @func_6839() /* ty=float64 */
}

def @func_4837() -> (Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) {
  %159 = fn () -> (Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) {
    %151 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
    %152 = cast(meta[relay.Constant][15] /* ty=Tensor[(48, 24), float64] */, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
    %153 = cast(meta[relay.Constant][15] /* ty=Tensor[(48, 24), float64] */, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
    %154 = reshape(%152, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
    %155 = reshape(%153, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
    %156 = @func_3394(%154, %155) /* ty=(Tensor[(16, 6, 12), float64],) */;
    %157 = %151.0;
    %158 = %156.0;
    (%157, %158, meta[relay.Constant][15] /* ty=Tensor[(48, 24), float64] */)
  };
  %159() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) */
}

def @func_8611(%var_8609: Tensor[(10), float64], %var_8610: Tensor[(2, 192), float32]) -> (float64, Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(2, 180), int16], Tensor[(10), float64], Tensor[(2, 12, 16), float32], Tensor[(2, 192), float32]) {
  %174 = fn (%var_8586: Tensor[(10), float64], %var_8606: Tensor[(2, 192), float32]) -> (float64, Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(2, 180), int16], Tensor[(10), float64], Tensor[(2, 12, 16), float32], Tensor[(2, 192), float32]) {
    %160 = @func_4191() /* ty=(float64,) */;
    %161 = cast(meta[relay.Constant][16] /* ty=Tensor[(90), int16] */, dtype="int16") /* ty=Tensor[(90), int16] */;
    %162 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 180), int16] */, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
    %163 = cast(%var_8586, dtype="float64") /* ty=Tensor[(10), float64] */;
    %164 = reshape(%161, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), int16] */;
    %165 = reshape(%162, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), int16] */;
    %166 = reshape(%163, newshape=[5, 2]) /* ty=Tensor[(5, 2), float64] */;
    %167 = @func_515(%164, %165, %166) /* ty=(Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) */;
    %168 = cast(%var_8606, dtype="float32") /* ty=Tensor[(2, 192), float32] */;
    %169 = reshape(%168, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
    %170 = @func_5714(%169) /* ty=(Tensor[(2, 12, 16), float32], Tensor[(13, 8, 5), int64]) */;
    %171 = %160.0;
    %172 = %167.0;
    %173 = %170.0;
    (%171, %172, meta[relay.Constant][16] /* ty=Tensor[(90), int16] */, meta[relay.Constant][17] /* ty=Tensor[(2, 180), int16] */, %var_8586, %173, %var_8606)
  };
  %174(%var_8609, %var_8610) /* ty=(float64, Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(2, 180), int16], Tensor[(10), float64], Tensor[(2, 12, 16), float32], Tensor[(2, 192), float32]) */
}

def @func_6201(%var_6197: Tensor[(2002), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), bool], Tensor[(1, 1, 10), bool], Tensor[(10), int64], Tensor[(16, 1, 1), float64], uint8, Tensor[(16), uint8], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), bool], Tensor[(2002), float64]) {
  %175 = @func_5341() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %178 = reshape(%177, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %179 = @func_4011(%178) /* ty=(Tensor[(13, 8, 5), bool],) */;
  %180 = cast(meta[relay.Constant][18] /* ty=Tensor[(10), int64] */, dtype="int64") /* ty=Tensor[(10), int64] */;
  %181 = reshape(%180, newshape=[1, 1, 10]) /* ty=Tensor[(1, 1, 10), int64] */;
  %182 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %183 = cast(meta[relay.Constant][20] /* ty=Tensor[(16), uint8] */, dtype="uint8") /* ty=Tensor[(16), uint8] */;
  %184 = reshape(%182, newshape=[]) /* ty=uint8 */;
  %185 = reshape(%183, newshape=[16, 1, 1]) /* ty=Tensor[(16, 1, 1), uint8] */;
  %186 = @func_5318(%184, %185) /* ty=(Tensor[(16, 1, 1), uint8], Tensor[(16, 1, 1), float64], float64) */;
  %187 = %179.0;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %189 = reshape(%188, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %190 = @func_4011(%189) /* ty=(Tensor[(13, 8, 5), bool],) */;
  %191 = cast(%var_6197, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %192 = reshape(%191, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
  %193 = @func_5001(%192) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
  %194 = @func_1096(%181) /* ty=Tensor[(1, 1, 10), bool] */;
  %195 = %186.1;
  %196 = %190.0;
  %197 = %193.0;
  (%176, %187, %194, meta[relay.Constant][18] /* ty=Tensor[(10), int64] */, %195, meta[relay.Constant][19] /* ty=uint8 */, meta[relay.Constant][20] /* ty=Tensor[(16), uint8] */, %196, %197, %var_6197)
}

def @func_4394(%var_4392: Tensor[(462), float64], %var_4393: Tensor[(8, 224), float64]) -> (Tensor[(5, 12, 1), uint8], Tensor[(13, 8, 5), float64], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 224), bool], Tensor[(10, 96), int64]) {
  %220 = fn (%var_4364: Tensor[(462), float64], %var_4378: Tensor[(8, 224), float64]) -> (Tensor[(5, 12, 1), uint8], Tensor[(13, 8, 5), float64], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 224), bool], Tensor[(10, 96), int64]) {
    %198 = @func_4130() /* ty=(Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) */;
    %199 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %200 = cast(meta[relay.Constant][21] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %201 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 224), float64] */, dtype="float64") /* ty=Tensor[(8, 224), float64] */;
    %202 = reshape(%200, newshape=[1, 12, 8]) /* ty=Tensor[(1, 12, 8), float64] */;
    %203 = reshape(%201, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
    %204 = @func_4335(%202, %203) /* ty=(Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) */;
    %205 = cast(%var_4378, dtype="bool") /* ty=Tensor[(8, 224), bool] */;
    %206 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(8, 224), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %207 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 224), float64] */, dtype="bool") /* ty=Tensor[(8, 224), bool] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %209 = cast(%var_4364, dtype="float64") /* ty=Tensor[(462), float64] */;
    %210 = reshape(%209, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float64] */;
    %211 = @func_3069(%210) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
    %212 = %211.3;
    %213 = cast(%212, dtype="int64") /* ty=Tensor[(10, 1), int64] */;
    %214 = cast(meta[relay.Constant][21] /* ty=Tensor[(96), float64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
    %215 = %198.2;
    %216 = %199.0;
    %217 = %204.2;
    %218 = less_equal(%207, %208) /* ty=Tensor[(8, 224), bool] */;
    %219 = logical_xor(%213, %214) /* ty=Tensor[(10, 96), int64] */;
    (%215, %216, %var_4364, %217, %218, %219)
  };
  %220(%var_4392, %var_4393) /* ty=(Tensor[(5, 12, 1), uint8], Tensor[(13, 8, 5), float64], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 224), bool], Tensor[(10, 96), int64]) */
}

def @func_515(%var_501: Tensor[(6, 15, 1), int16], %var_502: Tensor[(6, 15, 4), int16], %var_510: Tensor[(5, 2), float64]) -> (Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) {
  %221 = cast(%var_501, dtype="int16") /* ty=Tensor[(6, 15, 1), int16] */;
  %222 = cast(%var_502, dtype="int16") /* ty=Tensor[(6, 15, 4), int16] */;
  %223 = cast(%var_510, dtype="float64") /* ty=Tensor[(5, 2), float64] */;
  %224 = reshape(%223, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %225 = bitwise_xor(%221, %222) /* ty=Tensor[(6, 15, 4), int16] */;
  %226 = @func_361(%224) /* ty=Tensor[(1, 10, 1), float64] */;
  (%225, %226, %var_510)
}

def @func_3216(%var_3215: Tensor[(9, 11, 15), float64]) -> (Tensor[(9, 11, 15), float64],) {
  %232 = fn (%var_3209: Tensor[(9, 11, 15), float64]) -> (Tensor[(9, 11, 15), float64],) {
    %227 = cast(%var_3209, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
    %228 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 11, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 15), float64] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %231 = power(%229, %230) /* ty=Tensor[(9, 11, 15), float64] */;
    (%231,)
  };
  %232(%var_3215) /* ty=(Tensor[(9, 11, 15), float64],) */
}

def @func_8769() -> float64 {
  @func_8767() /* ty=float64 */
}

def @func_5491() -> (float64,) {
  %233 = @func_4552() /* ty=float64 */;
  (%233,)
}

def @func_5889() -> float64 {
  @func_5887() /* ty=float64 */
}

def @func_8796(%var_8794: Tensor[(2002), float64]) -> (float64, Tensor[(10), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(2002), float64]) {
  %234 = cast(meta[relay.Constant][24] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %235 = cast(meta[relay.Constant][25] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %236 = cast(%var_8794, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %237 = reshape(%234, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float32] */;
  %238 = reshape(%235, newshape=[784]) /* ty=Tensor[(784), bool] */;
  %239 = reshape(%236, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
  %240 = @func_1743(%237, %238, %239) /* ty=(Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) */;
  %241 = @func_5765() /* ty=float64 */;
  %242 = %240.3;
  (%241, %242, meta[relay.Constant][24] /* ty=Tensor[(320), float32] */, meta[relay.Constant][25] /* ty=Tensor[(784), bool] */, %var_8794)
}

def @func_5004(%var_5002: Tensor[(2002, 1), float64]) -> (Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) {
  @func_5001(%var_5002) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */
}

def @func_3071(%var_3070: Tensor[(6, 11, 7), float64]) -> (Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) {
  %253 = fn (%var_3056: Tensor[(6, 11, 7), float64]) -> (Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) {
    %243 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
    %244 = shape_of(%var_3056, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%var_3056, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %247 = cast(%var_3056, dtype="float32") /* ty=Tensor[(6, 11, 7), float32] */;
    %248 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
    %249 = reshape(%248, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
    %250 = maximum(%245, %246) /* ty=Tensor[(6, 11, 7), float64] */;
    %251 = atanh(%247) /* ty=Tensor[(6, 11, 7), float32] */;
    %252 = @func_361(%249) /* ty=Tensor[(1, 10, 1), float64] */;
    (%250, %251, %252, meta[relay.Constant][27] /* ty=Tensor[(10, 1), float64] */)
  };
  %253(%var_3070) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */
}

def @func_7743(%var_7731: Tensor[(12, 9, 8), float32]) -> (Tensor[(12, 9, 8), float32], float64, float64) {
  %254 = cast(%var_7731, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %255 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(12, 9, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %258 = floor_mod(%256, %257) /* ty=Tensor[(12, 9, 8), float32] */;
  %259 = @func_6839() /* ty=float64 */;
  %260 = @func_4552() /* ty=float64 */;
  (%258, %259, %260)
}

def @func_8370() -> (Tensor[(13, 8, 5), float64], Tensor[(7, 11, 14), float64], Tensor[(13, 8, 5), float64]) {
  %266 = fn () -> (Tensor[(13, 8, 5), float64], Tensor[(7, 11, 14), float64], Tensor[(13, 8, 5), float64]) {
    %261 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %262 = @func_7982() /* ty=(float64, Tensor[(7, 11, 14), float64]) */;
    %263 = %261.0;
    %264 = %262.1;
    %265 = @func_6015() /* ty=Tensor[(13, 8, 5), float64] */;
    (%263, %264, %265)
  };
  %266() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(7, 11, 14), float64], Tensor[(13, 8, 5), float64]) */
}

def @func_1098(%var_1097: Tensor[(1, 1, 10), int64]) -> Tensor[(1, 1, 10), bool] {
  %269 = fn (%var_1084: Tensor[(1, 1, 10), int64]) -> Tensor[(1, 1, 10), bool] {
    %267 = cast(-9 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %268 = cast(%var_1084, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
    greater(%267, %268) /* ty=Tensor[(1, 1, 10), bool] */
  };
  %269(%var_1097) /* ty=Tensor[(1, 1, 10), bool] */
}

def @func_5716(%var_5715: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32], Tensor[(13, 8, 5), int64]) {
  %273 = fn (%var_5697: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32], Tensor[(13, 8, 5), int64]) {
    %270 = cast(%var_5697, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
    %271 = sqrt(%270) /* ty=Tensor[(2, 12, 16), float32] */;
    %272 = @func_5068() /* ty=Tensor[(13, 8, 5), int64] */;
    (%271, %272)
  };
  %273(%var_5715) /* ty=(Tensor[(2, 12, 16), float32], Tensor[(13, 8, 5), int64]) */
}

def @func_2295(%var_2294: Tensor[(8, 14, 16), float64]) -> Tensor[(8, 14, 16), bool] {
  %282 = fn (%var_2274: Tensor[(8, 14, 16), float64]) -> Tensor[(8, 14, 16), bool] {
    %274 = cast(%var_2274, dtype="float64") /* ty=Tensor[(8, 14, 16), float64] */;
    %275 = asinh(%274) /* ty=Tensor[(8, 14, 16), float64] */;
    %276 = cast(%275, dtype="float64") /* ty=Tensor[(8, 14, 16), float64] */;
    %277 = acos(%276) /* ty=Tensor[(8, 14, 16), float64] */;
    %278 = cast(%var_2274, dtype="bool") /* ty=Tensor[(8, 14, 16), bool] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="bool") /* ty=Tensor[(8, 14, 16), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%280, %281) /* ty=Tensor[(8, 14, 16), bool] */
  };
  %282(%var_2294) /* ty=Tensor[(8, 14, 16), bool] */
}

def @func_3394(%var_3379: Tensor[(16, 6, 12), float64], %var_3380: Tensor[(16, 6, 12), float64]) -> (Tensor[(16, 6, 12), float64],) {
  %283 = cast(%var_3380, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  %284 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_3379, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %287 = floor_divide(%285, %286) /* ty=Tensor[(16, 6, 12), float64] */;
  (%287,)
}

def @func_5070() -> Tensor[(13, 8, 5), int64] {
  @func_5068() /* ty=Tensor[(13, 8, 5), int64] */
}

def @func_7580() -> float64 {
  @func_7578() /* ty=float64 */
}

def @func_1032(%var_1026: Tensor[(1, 3, 10), float64]) -> (Tensor[(1, 3, 10), float64],) {
  %288 = cast(%var_1026, dtype="float64") /* ty=Tensor[(1, 3, 10), float64] */;
  %289 = sinh(%288) /* ty=Tensor[(1, 3, 10), float64] */;
  (%289,)
}

def @func_1670(%var_1602: Tensor[(14, 13, 11), float64]) -> (Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) {
  %290 = cast(%var_1602, dtype="float64") /* ty=Tensor[(14, 13, 11), float64] */;
  %291 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(14, 13, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 11), float64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %294 = cast(meta[relay.Constant][30] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %295 = cast(meta[relay.Constant][31] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %296 = reshape(%294, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
  %297 = reshape(%295, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %298 = @func_1206(%296, %297) /* ty=(Tensor[(7, 11, 14), bool],) */;
  %299 = %298.0;
  %300 = cast(meta[relay.Constant][31] /* ty=Tensor[(1078), float32] */, dtype="int32") /* ty=Tensor[(1078), int32] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="int32") /* ty=Tensor[(7, 11, 14), int32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %304 = bitwise_or(%302, %303) /* ty=Tensor[(7, 11, 14), int32] */;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %306 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(1078), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %307 = cast(meta[relay.Constant][31] /* ty=Tensor[(1078), float32] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?), float64] */;
  %309 = cast(meta[relay.Constant][32] /* ty=Tensor[(90), int16] */, dtype="int16") /* ty=Tensor[(90), int16] */;
  %310 = cast(meta[relay.Constant][33] /* ty=Tensor[(360), int16] */, dtype="int16") /* ty=Tensor[(360), int16] */;
  %311 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %312 = reshape(%309, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), int16] */;
  %313 = reshape(%310, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), int16] */;
  %314 = reshape(%311, newshape=[5, 2]) /* ty=Tensor[(5, 2), float64] */;
  %315 = @func_515(%312, %313, %314) /* ty=(Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) */;
  %316 = floor_divide(%292, %293) /* ty=Tensor[(14, 13, 11), float64] */;
  %317 = mod(%307, %308) /* ty=Tensor[(1078), float64] */;
  %318 = %315.0;
  (%316, meta[relay.Constant][30] /* ty=Tensor[(98), float32] */, %317, %318, meta[relay.Constant][32] /* ty=Tensor[(90), int16] */, meta[relay.Constant][33] /* ty=Tensor[(360), int16] */, meta[relay.Constant][34] /* ty=Tensor[(1, 10), float64] */)
}

def @func_7265() -> (Tensor[(13, 8, 5), float32],) {
  @func_7263() /* ty=(Tensor[(13, 8, 5), float32],) */
}

def @func_541(%var_535: Tensor[(2, 15, 11), float32], %var_536: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), float32] {
  %319 = cast(%var_536, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %320 = shape_of(%var_535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_535, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%321, %322) /* ty=Tensor[(2, 15, 11), float32] */
}

def @func_5766() -> float64 {
  %324 = fn () -> float64 {
    %323 = @func_3691() /* ty=(float64,) */;
    %323.0
  };
  %324() /* ty=float64 */
}

def @func_3398(%var_3396: Tensor[(16, 6, 12), float64], %var_3397: Tensor[(16, 6, 12), float64]) -> (Tensor[(16, 6, 12), float64],) {
  @func_3394(%var_3396, %var_3397) /* ty=(Tensor[(16, 6, 12), float64],) */
}

def @func_1799(%var_1791: uint64, %var_1792: Tensor[(3, 5, 10), uint64]) -> Tensor[(3, 5, 10), uint64] {
  %325 = cast(%var_1791, dtype="uint64") /* ty=uint64 */;
  %326 = cast(%var_1792, dtype="uint64") /* ty=Tensor[(3, 5, 10), uint64] */;
  bitwise_and(%325, %326) /* ty=Tensor[(3, 5, 10), uint64] */
}

def @func_7458(%var_7455: Tensor[(7, 6, 5), float64], %var_7456: Tensor[(784, 1), bool], %var_7457: Tensor[(10), float64]) -> (Tensor[(7, 6, 5), float64], Tensor[(1485), float64], Tensor[(2, 15, 11), float32], Tensor[(784, 1), bool], Tensor[(10), float64], Tensor[(13, 8, 5), float64]) {
  %338 = fn (%var_7402: Tensor[(7, 6, 5), float64], %var_7417: Tensor[(784, 1), bool], %var_7418: Tensor[(10), float64]) -> (Tensor[(7, 6, 5), float64], Tensor[(1485), float64], Tensor[(2, 15, 11), float32], Tensor[(784, 1), bool], Tensor[(10), float64], Tensor[(13, 8, 5), float64]) {
    %327 = cast(%var_7402, dtype="float64") /* ty=Tensor[(7, 6, 5), float64] */;
    %328 = @func_4130() /* ty=(Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) */;
    %329 = cast(%var_7417, dtype="bool") /* ty=Tensor[(784, 1), bool] */;
    %330 = cast(%var_7418, dtype="float64") /* ty=Tensor[(10), float64] */;
    %331 = reshape(%329, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
    %332 = reshape(%330, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
    %333 = @func_1015(%331, %332) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
    %334 = asinh(%327) /* ty=Tensor[(7, 6, 5), float64] */;
    %335 = %328.1;
    %336 = %333.5;
    %337 = @func_4964() /* ty=Tensor[(13, 8, 5), float64] */;
    (%334, %335, %336, %var_7417, %var_7418, %337)
  };
  %338(%var_7455, %var_7456, %var_7457) /* ty=(Tensor[(7, 6, 5), float64], Tensor[(1485), float64], Tensor[(2, 15, 11), float32], Tensor[(784, 1), bool], Tensor[(10), float64], Tensor[(13, 8, 5), float64]) */
}

def @func_3442() -> (Tensor[(13, 8, 5), float64],) {
  %339 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %340 = %339.0;
  (%340,)
}

def @func_3660(%var_3658: Tensor[(64, 28), float64]) -> (float64, Tensor[(8, 14, 16), bool], Tensor[(64, 28), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
  @func_3657(%var_3658) /* ty=(float64, Tensor[(8, 14, 16), bool], Tensor[(64, 28), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */
}

def @func_8335() -> (float64,) {
  %341 = @func_7954() /* ty=(Tensor[(13, 8, 5), float64], float64) */;
  %342 = %341.1;
  (%342,)
}

def @func_7148() -> (float64,) {
  %343 = @func_4552() /* ty=float64 */;
  (%343,)
}

def @func_8043() -> float64 {
  @func_8041() /* ty=float64 */
}

def @func_6812() -> (float64,) {
  %346 = fn () -> (float64,) {
    %344 = @func_3536() /* ty=(float64,) */;
    %345 = %344.0;
    (%345,)
  };
  %346() /* ty=(float64,) */
}

def @func_8897() -> (float64,) {
  @func_8895() /* ty=(float64,) */
}

def @func_5186() -> Tensor[(16, 6, 12), float64] {
  %350 = fn () -> Tensor[(16, 6, 12), float64] {
    %347 = @func_4836() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) */;
    %348 = %347.1;
    %349 = cast(%348, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
    sigmoid(%349) /* ty=Tensor[(16, 6, 12), float64] */
  };
  %350() /* ty=Tensor[(16, 6, 12), float64] */
}

def @func_5321(%var_5319: uint8, %var_5320: Tensor[(16, 1, 1), uint8]) -> (Tensor[(16, 1, 1), uint8], Tensor[(16, 1, 1), float64], float64) {
  %357 = fn (%var_5297: uint8, %var_5298: Tensor[(16, 1, 1), uint8]) -> (Tensor[(16, 1, 1), uint8], Tensor[(16, 1, 1), float64], float64) {
    %351 = cast(%var_5297, dtype="uint8") /* ty=uint8 */;
    %352 = cast(%var_5298, dtype="uint8") /* ty=Tensor[(16, 1, 1), uint8] */;
    %353 = cast(%var_5298, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
    %354 = minimum(%351, %352) /* ty=Tensor[(16, 1, 1), uint8] */;
    %355 = asin(%353) /* ty=Tensor[(16, 1, 1), float64] */;
    %356 = @func_4151() /* ty=float64 */;
    (%354, %355, %356)
  };
  %357(%var_5319, %var_5320) /* ty=(Tensor[(16, 1, 1), uint8], Tensor[(16, 1, 1), float64], float64) */
}

def @func_6502(%var_6469: Tensor[(4, 2), float32], %var_6470: Tensor[(252), float64], %var_6473: Tensor[(25, 6), uint64], %var_6475: Tensor[(1078), float32], %var_6479: Tensor[(462), float64]) -> (float64, Tensor[(3, 5, 10), uint64], Tensor[(4, 2), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(25, 6), uint64], Tensor[(1078), float32], Tensor[(6, 11, 7), float32], Tensor[(462), float64], Tensor[(5, 66), float32], Tensor[(13, 8, 5), bool], Tensor[(42), float64], Tensor[(520, 1), int64]) {
  %358 = @func_3691() /* ty=(float64,) */;
  %359 = cast(%var_6469, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
  %360 = cast(%var_6469, dtype="float32") /* ty=Tensor[(4, 2), float32] */;
  %361 = cast(%var_6470, dtype="float64") /* ty=Tensor[(252), float64] */;
  %362 = cast(meta[relay.Constant][35] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %363 = cast(meta[relay.Constant][36] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %364 = cast(%var_6473, dtype="uint64") /* ty=Tensor[(25, 6), uint64] */;
  %365 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %366 = cast(%var_6475, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %367 = reshape(%359, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %368 = reshape(%360, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
  %369 = reshape(%361, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %370 = reshape(%362, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %371 = reshape(%363, newshape=[784, 1]) /* ty=Tensor[(784, 1), bool] */;
  %372 = reshape(%364, newshape=[150]) /* ty=Tensor[(150), uint64] */;
  %373 = reshape(%365, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %374 = reshape(%366, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %375 = @func_2087(%367, %368, %369, %370, %371, %372, %373, %374) /* ty=(Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) */;
  %376 = cast(%var_6479, dtype="float64") /* ty=Tensor[(462), float64] */;
  %377 = reshape(%376, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float64] */;
  %378 = @func_3069(%377) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %379 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %380 = %358.0;
  %381 = cast(%380, dtype="float64") /* ty=float64 */;
  %382 = cast(meta[relay.Constant][38] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %383 = cast(meta[relay.Constant][39] /* ty=Tensor[(520, 1), int64] */, dtype="int64") /* ty=Tensor[(520, 1), int64] */;
  %384 = reshape(%381, newshape=[]) /* ty=float64 */;
  %385 = reshape(%382, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %386 = reshape(%383, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), int64] */;
  %387 = @func_5937(%384, %385, %386) /* ty=(Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) */;
  %388 = %375.3;
  %389 = %378.1;
  %390 = log2(%379) /* ty=Tensor[(5, 66), float32] */;
  %391 = %387.4;
  (%380, %388, %var_6469, %var_6470, meta[relay.Constant][35] /* ty=Tensor[(320), float32] */, meta[relay.Constant][36] /* ty=Tensor[(784), bool] */, %var_6473, %var_6475, %389, %var_6479, %390, %391, meta[relay.Constant][38] /* ty=Tensor[(42), float64] */, meta[relay.Constant][39] /* ty=Tensor[(520, 1), int64] */)
}

def @func_7235(%var_7207: Tensor[(16, 12, 13), bool], %var_7208: Tensor[(16, 12, 13), bool]) -> (Tensor[(16, 12, 13), bool], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], float64, Tensor[(539, 2), uint16]) {
  %392 = cast(%var_7208, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %393 = shape_of(%var_7207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_7207, dtype="bool") /* ty=Tensor[(16, 12, 13), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = cast(meta[relay.Constant][40] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %397 = cast(meta[relay.Constant][40] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %398 = cast(-3.26341f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %399 = cast(meta[relay.Constant][41] /* ty=Tensor[(539, 2), float32] */, dtype="float32") /* ty=Tensor[(539, 2), float32] */;
  %400 = reshape(%396, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %401 = reshape(%397, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
  %402 = reshape(%398, newshape=[]) /* ty=float64 */;
  %403 = reshape(%399, newshape=[539, 2]) /* ty=Tensor[(539, 2), float32] */;
  %404 = @func_3011(%400, %401, %402, %403) /* ty=(Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) */;
  %405 = cast(meta[relay.Constant][42] /* ty=Tensor[(539, 2), float32] */, dtype="uint16") /* ty=Tensor[(539, 2), uint16] */;
  %406 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(539, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %407 = cast(meta[relay.Constant][41] /* ty=Tensor[(539, 2), float32] */, dtype="uint16") /* ty=Tensor[(539, 2), uint16] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %409 = logical_and(%394, %395) /* ty=Tensor[(16, 12, 13), bool] */;
  %410 = %404.6;
  %411 = left_shift(%407, %408) /* ty=Tensor[(539, 2), uint16] */;
  (%409, %410, meta[relay.Constant][40] /* ty=Tensor[(1755), int32] */, -3.26341f64 /* ty=float64 */, %411)
}

def @func_1157(%var_1155: Tensor[(3, 7, 12), float64], %var_1156: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) {
  %420 = fn (%var_1137: Tensor[(3, 7, 12), float64], %var_1138: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) {
    %412 = cast(%var_1138, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
    %413 = shape_of(%var_1137, dtype="int32") /* ty=Tensor[(3), int32] */;
    %414 = cast(%var_1137, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %416 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
    %417 = reshape(%416, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
    %418 = equal(%414, %415) /* ty=Tensor[(3, 7, 12), bool] */;
    %419 = @func_361(%417) /* ty=Tensor[(1, 10, 1), float64] */;
    (%418, %419, meta[relay.Constant][43] /* ty=Tensor[(10, 1), float64] */)
  };
  %420(%var_1155, %var_1156) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */
}

def @func_1743(%var_1681: Tensor[(10, 16, 2), float32], %var_1700: Tensor[(784), bool], %var_1712: Tensor[(2002), float64]) -> (Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) {
  %421 = cast(%var_1681, dtype="float32") /* ty=Tensor[(10, 16, 2), float32] */;
  %422 = cast(%var_1700, dtype="bool") /* ty=Tensor[(784), bool] */;
  %423 = cast(meta[relay.Constant][44] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %424 = reshape(%422, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
  %425 = reshape(%423, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %426 = @func_1015(%424, %425) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
  %427 = cast(%var_1712, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %428 = reshape(%427, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %429 = @func_1670(%428) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %430 = cast(meta[relay.Constant][45] /* ty=Tensor[(165, 2), float32] */, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
  %431 = cast(meta[relay.Constant][45] /* ty=Tensor[(165, 2), float32] */, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
  %432 = reshape(%430, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %433 = reshape(%431, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %434 = asin(%421) /* ty=Tensor[(10, 16, 2), float32] */;
  %435 = %426.0;
  %436 = %429.6;
  %437 = @func_541(%432, %433) /* ty=Tensor[(2, 15, 11), float32] */;
  (%434, %435, %var_1700, meta[relay.Constant][44] /* ty=Tensor[(10), float64] */, %436, %var_1712, %437, meta[relay.Constant][45] /* ty=Tensor[(165, 2), float32] */)
}

def @func_4524(%var_4521: Tensor[(8, 15, 9), float64], %var_4522: Tensor[(1, 150), uint64], %var_4523: Tensor[(3, 150), uint64]) -> (Tensor[(8, 15, 9), float64], float64, Tensor[(13, 8, 5), float64], Tensor[(3, 150), int8], float64, Tensor[(3, 5, 10), float32], Tensor[(6, 9, 8), int64], Tensor[(2, 15, 11), float32], Tensor[(5, 66), float32], Tensor[(3, 5, 10), bool]) {
  %475 = fn (%var_4413: Tensor[(8, 15, 9), float64], %var_4418: Tensor[(1, 150), uint64], %var_4424: Tensor[(3, 150), uint64]) -> (Tensor[(8, 15, 9), float64], float64, Tensor[(13, 8, 5), float64], Tensor[(3, 150), int8], float64, Tensor[(3, 5, 10), float32], Tensor[(6, 9, 8), int64], Tensor[(2, 15, 11), float32], Tensor[(5, 66), float32], Tensor[(3, 5, 10), bool]) {
    %438 = cast(1.37508f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %439 = cast(%var_4413, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
    %440 = cast(%var_4418, dtype="uint64") /* ty=Tensor[(1, 150), uint64] */;
    %441 = cast(%var_4424, dtype="uint64") /* ty=Tensor[(3, 150), uint64] */;
    %442 = logical_xor(%440, %441) /* ty=Tensor[(3, 150), uint64] */;
    %443 = cast(%442, dtype="int8") /* ty=Tensor[(3, 150), int8] */;
    %444 = cast(%var_4418, dtype="int8") /* ty=Tensor[(1, 150), int8] */;
    %445 = @func_4191() /* ty=(float64,) */;
    %446 = cast(1.37508f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
    %447 = cast(%var_4418, dtype="uint64") /* ty=Tensor[(1, 150), uint64] */;
    %448 = reshape(%446, newshape=[]) /* ty=uint64 */;
    %449 = reshape(%447, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), uint64] */;
    %450 = @func_1799(%448, %449) /* ty=Tensor[(3, 5, 10), uint64] */;
    %451 = cast(%450, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
    %452 = sinh(%451) /* ty=Tensor[(3, 5, 10), float64] */;
    %453 = cast(%452, dtype="float32") /* ty=Tensor[(3, 5, 10), float32] */;
    %454 = cast(1.37508f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
    %455 = @func_3887() /* ty=(Tensor[(6, 9, 8), int64],) */;
    %456 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
    %457 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 66), float32] */, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
    %458 = reshape(%456, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %459 = reshape(%457, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %460 = cast(%452, dtype="float32") /* ty=Tensor[(3, 5, 10), float32] */;
    %461 = sqrt(%460) /* ty=Tensor[(3, 5, 10), float32] */;
    %462 = cast(%var_4418, dtype="bool") /* ty=Tensor[(1, 150), bool] */;
    %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%461, dtype="bool") /* ty=Tensor[(3, 5, 10), bool] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %466 = floor_mod(%438, %439) /* ty=Tensor[(8, 15, 9), float64] */;
    %467 = @func_4151() /* ty=float64 */;
    %468 = @func_4042() /* ty=Tensor[(13, 8, 5), float64] */;
    %469 = multiply(%443, %444) /* ty=Tensor[(3, 150), int8] */;
    %470 = %445.0;
    %471 = floor_mod(%453, %454) /* ty=Tensor[(3, 5, 10), float32] */;
    %472 = %455.0;
    %473 = @func_541(%458, %459) /* ty=Tensor[(2, 15, 11), float32] */;
    %474 = not_equal(%464, %465) /* ty=Tensor[(3, 5, 10), bool] */;
    (%466, %467, %468, %469, %470, %471, %472, %473, meta[relay.Constant][46] /* ty=Tensor[(5, 66), float32] */, %474)
  };
  %475(%var_4521, %var_4522, %var_4523) /* ty=(Tensor[(8, 15, 9), float64], float64, Tensor[(13, 8, 5), float64], Tensor[(3, 150), int8], float64, Tensor[(3, 5, 10), float32], Tensor[(6, 9, 8), int64], Tensor[(2, 15, 11), float32], Tensor[(5, 66), float32], Tensor[(3, 5, 10), bool]) */
}

def @func_7983() -> (float64, Tensor[(7, 11, 14), float64]) {
  %479 = fn () -> (float64, Tensor[(7, 11, 14), float64]) {
    %476 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
    %477 = @func_5887() /* ty=float64 */;
    %478 = %476.4;
    (%477, %478)
  };
  %479() /* ty=(float64, Tensor[(7, 11, 14), float64]) */
}

def @func_3614(%var_3613: Tensor[(10), float64]) -> (float64, Tensor[(1078), float32], Tensor[(?, 10, ?), uint32], Tensor[(8, 98), bool], Tensor[(10), float64], Tensor[(1755), bool]) {
  %501 = fn (%var_3597: Tensor[(10), float64]) -> (float64, Tensor[(1078), float32], Tensor[(?, 10, ?), uint32], Tensor[(8, 98), bool], Tensor[(10), float64], Tensor[(1755), bool]) {
    %480 = cast(meta[relay.Constant][47] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
    %481 = cast(meta[relay.Constant][47] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
    %482 = @func_3536() /* ty=(float64,) */;
    %483 = %482.0;
    %484 = cast(%483, dtype="float64") /* ty=float64 */;
    %485 = cast(meta[relay.Constant][48] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %486 = reshape(%480, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
    %487 = reshape(%481, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
    %488 = reshape(%484, newshape=[]) /* ty=float64 */;
    %489 = reshape(%485, newshape=[539, 2]) /* ty=Tensor[(539, 2), float32] */;
    %490 = @func_3011(%486, %487, %488, %489) /* ty=(Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) */;
    %491 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 98), bool] */, dtype="bool") /* ty=Tensor[(8, 98), bool] */;
    %492 = cast(%var_3597, dtype="float64") /* ty=Tensor[(10), float64] */;
    %493 = reshape(%491, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
    %494 = reshape(%492, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
    %495 = @func_1015(%493, %494) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
    %496 = cast(meta[relay.Constant][47] /* ty=Tensor[(1755), int32] */, dtype="bool") /* ty=Tensor[(1755), bool] */;
    %497 = cast(%483, dtype="bool") /* ty=bool */;
    %498 = %490.1;
    %499 = %495.1;
    %500 = less_equal(%496, %497) /* ty=Tensor[(1755), bool] */;
    (%498, meta[relay.Constant][48] /* ty=Tensor[(1078), float32] */, %499, meta[relay.Constant][49] /* ty=Tensor[(8, 98), bool] */, %var_3597, %500)
  };
  %501(%var_3613) /* ty=(float64, Tensor[(1078), float32], Tensor[(?, 10, ?), uint32], Tensor[(8, 98), bool], Tensor[(10), float64], Tensor[(1755), bool]) */
}

def @func_4964() -> Tensor[(13, 8, 5), float64] {
  %502 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %502.0
}

def @func_6841() -> float64 {
  @func_6839() /* ty=float64 */
}

def @func_4625() -> (Tensor[(13, 8, 5), float64],) {
  %505 = fn () -> (Tensor[(13, 8, 5), float64],) {
    %503 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %504 = %503.0;
    (%504,)
  };
  %505() /* ty=(Tensor[(13, 8, 5), float64],) */
}

def @func_1748(%var_1745: Tensor[(10, 16, 2), float32], %var_1746: Tensor[(784), bool], %var_1747: Tensor[(2002), float64]) -> (Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) {
  @func_1743(%var_1745, %var_1746, %var_1747) /* ty=(Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) */
}

def @func_6970() -> (float64,) {
  %507 = fn () -> (float64,) {
    %506 = @func_6839() /* ty=float64 */;
    (%506,)
  };
  %507() /* ty=(float64,) */
}

def @func_8751(%var_8747: Tensor[(11, 3, 12), int32], %var_8748: Tensor[(11, 3, 12), int32], %var_8749: float64, %var_8750: Tensor[(42), float64]) -> (Tensor[(11, 3, 12), uint8], Tensor[(11, 3, 12), float32], Tensor[(1078), float32], float64, Tensor[(42), float64], Tensor[(1, 520), int64]) {
  %528 = fn (%var_8673: Tensor[(11, 3, 12), int32], %var_8674: Tensor[(11, 3, 12), int32], %var_8732: float64, %var_8733: Tensor[(42), float64]) -> (Tensor[(11, 3, 12), uint8], Tensor[(11, 3, 12), float32], Tensor[(1078), float32], float64, Tensor[(42), float64], Tensor[(1, 520), int64]) {
    %508 = cast(%var_8674, dtype="int32") /* ty=Tensor[(11, 3, 12), int32] */;
    %509 = shape_of(%var_8673, dtype="int32") /* ty=Tensor[(3), int32] */;
    %510 = cast(%var_8673, dtype="int32") /* ty=Tensor[(11, 3, 12), int32] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %512 = bitwise_or(%510, %511) /* ty=Tensor[(11, 3, 12), int32] */;
    %513 = cast(%var_8674, dtype="uint8") /* ty=Tensor[(11, 3, 12), uint8] */;
    %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%512, dtype="uint8") /* ty=Tensor[(11, 3, 12), uint8] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %517 = cast(%var_8673, dtype="float32") /* ty=Tensor[(11, 3, 12), float32] */;
    %518 = cast(%var_8732, dtype="float64") /* ty=float64 */;
    %519 = cast(%var_8733, dtype="float64") /* ty=Tensor[(42), float64] */;
    %520 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 520), int64] */, dtype="int64") /* ty=Tensor[(1, 520), int64] */;
    %521 = reshape(%518, newshape=[]) /* ty=float64 */;
    %522 = reshape(%519, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %523 = reshape(%520, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), int64] */;
    %524 = @func_5937(%521, %522, %523) /* ty=(Tensor[(252), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), float32]) */;
    %525 = left_shift(%515, %516) /* ty=Tensor[(11, 3, 12), uint8] */;
    %526 = log2(%517) /* ty=Tensor[(11, 3, 12), float32] */;
    %527 = %524.3;
    (%525, %526, %527, %var_8732, %var_8733, meta[relay.Constant][50] /* ty=Tensor[(1, 520), int64] */)
  };
  %528(%var_8747, %var_8748, %var_8749, %var_8750) /* ty=(Tensor[(11, 3, 12), uint8], Tensor[(11, 3, 12), float32], Tensor[(1078), float32], float64, Tensor[(42), float64], Tensor[(1, 520), int64]) */
}

def @func_7150() -> (float64,) {
  @func_7148() /* ty=(float64,) */
}

def @func_7137() -> Tensor[(13, 8, 5), float32] {
  @func_7135() /* ty=Tensor[(13, 8, 5), float32] */
}

def @func_8473() -> (float64,) {
  @func_8471() /* ty=(float64,) */
}

def @func_363(%var_362: Tensor[(1, 10, 1), float64]) -> Tensor[(1, 10, 1), float64] {
  %530 = fn (%var_351: Tensor[(1, 10, 1), float64]) -> Tensor[(1, 10, 1), float64] {
    %529 = cast(%var_351, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
    log(%529) /* ty=Tensor[(1, 10, 1), float64] */
  };
  %530(%var_362) /* ty=Tensor[(1, 10, 1), float64] */
}

def @func_6912() -> (float64, Tensor[(16, 6, 12), float64]) {
  @func_6910() /* ty=(float64, Tensor[(16, 6, 12), float64]) */
}

def @func_4552() -> float64 {
  @func_4151() /* ty=float64 */
}

def @func_1035(%var_1033: Tensor[(1, 3, 10), float64]) -> (Tensor[(1, 3, 10), float64],) {
  @func_1032(%var_1033) /* ty=(Tensor[(1, 3, 10), float64],) */
}

def @func_5221(%var_5216: Tensor[(12, 7, 8), float64]) -> Tensor[(12, 7, 8), int32] {
  %531 = @func_4191() /* ty=(float64,) */;
  %532 = %531.0;
  %533 = cast(%532, dtype="int32") /* ty=int32 */;
  %534 = cast(%var_5216, dtype="int32") /* ty=Tensor[(12, 7, 8), int32] */;
  logical_xor(%533, %534) /* ty=Tensor[(12, 7, 8), int32] */
}

def @func_5664() -> float64 {
  %535 = @func_3691() /* ty=(float64,) */;
  %535.0
}

def @func_3247() -> (Tensor[(13, 8, 5), float64],) {
  %541 = fn () -> (Tensor[(13, 8, 5), float64],) {
    %536 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
    %537 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(13, 8, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %538 = cast(meta[relay.Constant][51] /* ty=Tensor[(13, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %540 = divide(%538, %539) /* ty=Tensor[(13, 8, 5), float64] */;
    (%540,)
  };
  %541() /* ty=(Tensor[(13, 8, 5), float64],) */
}

def @func_8041() -> float64 {
  %542 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %542.1
}

def @func_7401() -> Tensor[(13, 8, 5), float64] {
  %543 = fn () -> Tensor[(13, 8, 5), float64] {
    @func_4807() /* ty=Tensor[(13, 8, 5), float64] */
  };
  %543() /* ty=Tensor[(13, 8, 5), float64] */
}

def @func_1018(%var_1016: Tensor[(8, 14, 7), bool], %var_1017: Tensor[(1, 10), float64]) -> (Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) {
  %569 = fn (%var_969: Tensor[(8, 14, 7), bool], %var_974: Tensor[(1, 10), float64]) -> (Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) {
    %544 = cast(%var_969, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
    %545 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(8, 14, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 14, 7), bool] */, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %548 = cast(%var_974, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
    %549 = reshape(%548, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
    %550 = @func_361(%549) /* ty=Tensor[(1, 10, 1), float64] */;
    %551 = cast(%var_974, dtype="uint32") /* ty=Tensor[(1, 10), uint32] */;
    %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%550, dtype="uint32") /* ty=Tensor[(1, 10, 1), uint32] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %555 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 14, 7), bool] */, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
    %556 = cast(meta[relay.Constant][54] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %557 = cast(meta[relay.Constant][54] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %558 = reshape(%556, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %559 = reshape(%557, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %560 = cast(meta[relay.Constant][54] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %561 = @func_541(%558, %559) /* ty=Tensor[(2, 15, 11), float32] */;
    %562 = cast(%561, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
    %563 = reshape(%560, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %564 = reshape(%562, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %565 = logical_and(%546, %547) /* ty=Tensor[(8, 14, 7), bool] */;
    %566 = multiply(%553, %554) /* ty=Tensor[(?, 10, ?), uint32] */;
    %567 = atan(%555) /* ty=Tensor[(8, 14, 7), float32] */;
    %568 = @func_541(%563, %564) /* ty=Tensor[(2, 15, 11), float32] */;
    (%565, %566, %567, %561, meta[relay.Constant][54] /* ty=Tensor[(330), float32] */, %568)
  };
  %569(%var_1016, %var_1017) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */
}

def @func_8527() -> (float64, float64, Tensor[(2, 15, 11), float32], Tensor[(330), float32]) {
  %578 = fn () -> (float64, float64, Tensor[(2, 15, 11), float32], Tensor[(330), float32]) {
    %570 = @func_5491() /* ty=(float64,) */;
    %571 = cast(meta[relay.Constant][55] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %572 = cast(meta[relay.Constant][55] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %573 = reshape(%571, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %574 = reshape(%572, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %575 = %570.0;
    %576 = @func_5765() /* ty=float64 */;
    %577 = @func_541(%573, %574) /* ty=Tensor[(2, 15, 11), float32] */;
    (%575, %576, %577, meta[relay.Constant][55] /* ty=Tensor[(330), float32] */)
  };
  %578() /* ty=(float64, float64, Tensor[(2, 15, 11), float32], Tensor[(330), float32]) */
}

def @func_8895() -> (float64,) {
  %579 = @func_8335() /* ty=(float64,) */;
  %580 = %579.0;
  (%580,)
}

def @func_4618(%var_4617: Tensor[(462, 1), float64]) -> (Tensor[(10, 9, 8), int8], Tensor[(1, 10, 1), float64], Tensor[(462, 1), float64]) {
  %588 = fn (%var_4583: Tensor[(462, 1), float64]) -> (Tensor[(10, 9, 8), int8], Tensor[(1, 10, 1), float64], Tensor[(462, 1), float64]) {
    %581 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 9, 1), int8] */, dtype="int8") /* ty=Tensor[(10, 9, 1), int8] */;
    %582 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 9, 8), int8] */, dtype="int8") /* ty=Tensor[(10, 9, 8), int8] */;
    %583 = cast(%var_4583, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
    %584 = reshape(%583, newshape=[6, 11, 7]) /* ty=Tensor[(6, 11, 7), float64] */;
    %585 = @func_3069(%584) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(6, 11, 7), float32], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
    %586 = minimum(%581, %582) /* ty=Tensor[(10, 9, 8), int8] */;
    %587 = %585.2;
    (%586, %587, %var_4583)
  };
  %588(%var_4617) /* ty=(Tensor[(10, 9, 8), int8], Tensor[(1, 10, 1), float64], Tensor[(462, 1), float64]) */
}

def @func_3426() -> (Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) {
  %601 = fn () -> (Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) {
    %589 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %590 = cast(-3.93595f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %591 = cast(meta[relay.Constant][58] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %592 = cast(meta[relay.Constant][59] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %593 = reshape(%590, newshape=[]) /* ty=float64 */;
    %594 = reshape(%591, newshape=[6, 7, 1]) /* ty=Tensor[(6, 7, 1), float64] */;
    %595 = reshape(%592, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %596 = @func_1595(%593, %594, %595) /* ty=(Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) */;
    %597 = %596.3;
    %598 = cast(%597, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %599 = %589.0;
    %600 = sinh(%598) /* ty=Tensor[(7, 11, 14), float64] */;
    (%599, -3.93595f64 /* ty=float64 */, meta[relay.Constant][58] /* ty=Tensor[(42), float64] */, meta[relay.Constant][59] /* ty=Tensor[(1078), float32] */, %600)
  };
  %601() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */
}

def @func_8567() -> (float64,) {
  %604 = fn () -> (float64,) {
    %602 = @func_3691() /* ty=(float64,) */;
    %603 = %602.0;
    (%603,)
  };
  %604() /* ty=(float64,) */
}

def @func_4044() -> Tensor[(13, 8, 5), float64] {
  @func_4042() /* ty=Tensor[(13, 8, 5), float64] */
}

def @func_8767() -> float64 {
  %605 = @func_6319() /* ty=(float64,) */;
  %605.0
}

def @func_1210(%var_1208: Tensor[(7, 1, 14), float32], %var_1209: Tensor[(7, 11, 14), float32]) -> (Tensor[(7, 11, 14), bool],) {
  @func_1206(%var_1208, %var_1209) /* ty=(Tensor[(7, 11, 14), bool],) */
}

def @func_3537() -> (float64,) {
  %608 = fn () -> (float64,) {
    %606 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
    %607 = %606.1;
    (%607,)
  };
  %608() /* ty=(float64,) */
}

def @func_4807() -> Tensor[(13, 8, 5), float64] {
  %609 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %609.0
}

def @func_3017(%var_3013: Tensor[(13, 9, 15), int32], %var_3014: Tensor[(13, 9, 15), int32], %var_3015: float64, %var_3016: Tensor[(539, 2), float32]) -> (Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) {
  @func_3011(%var_3013, %var_3014, %var_3015, %var_3016) /* ty=(Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) */
}

def @func_6995(%var_6993: Tensor[(9, 13, 10), float32], %var_6994: Tensor[(9, 13, 10), float32]) -> Tensor[(9, 13, 10), float32] {
  @func_6991(%var_6993, %var_6994) /* ty=Tensor[(9, 13, 10), float32] */
}

def @func_6509(%var_6504: Tensor[(4, 2), float32], %var_6505: Tensor[(252), float64], %var_6506: Tensor[(25, 6), uint64], %var_6507: Tensor[(1078), float32], %var_6508: Tensor[(462), float64]) -> (float64, Tensor[(3, 5, 10), uint64], Tensor[(4, 2), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(25, 6), uint64], Tensor[(1078), float32], Tensor[(6, 11, 7), float32], Tensor[(462), float64], Tensor[(5, 66), float32], Tensor[(13, 8, 5), bool], Tensor[(42), float64], Tensor[(520, 1), int64]) {
  @func_6502(%var_6504, %var_6505, %var_6506, %var_6507, %var_6508) /* ty=(float64, Tensor[(3, 5, 10), uint64], Tensor[(4, 2), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(25, 6), uint64], Tensor[(1078), float32], Tensor[(6, 11, 7), float32], Tensor[(462), float64], Tensor[(5, 66), float32], Tensor[(13, 8, 5), bool], Tensor[(42), float64], Tensor[(520, 1), int64]) */
}

def @func_7099() -> (Tensor[(7, 11, 14), float64], float64) {
  %614 = fn () -> (Tensor[(7, 11, 14), float64], float64) {
    %610 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
    %611 = @func_4905() /* ty=(float64, Tensor[(13, 8, 5), float64]) */;
    %612 = %610.4;
    %613 = %611.0;
    (%612, %613)
  };
  %614() /* ty=(Tensor[(7, 11, 14), float64], float64) */
}

def @func_8471() -> (float64,) {
  %615 = @func_7148() /* ty=(float64,) */;
  %616 = %615.0;
  (%616,)
}

def @func_4192() -> (float64,) {
  %619 = fn () -> (float64,) {
    %617 = @func_3536() /* ty=(float64,) */;
    %618 = %617.0;
    (%618,)
  };
  %619() /* ty=(float64,) */
}

def @func_6756() -> (float64,) {
  %621 = fn () -> (float64,) {
    %620 = @func_5887() /* ty=float64 */;
    (%620,)
  };
  %621() /* ty=(float64,) */
}

def @func_3657(%var_3649: Tensor[(64, 28), float64]) -> (float64, Tensor[(8, 14, 16), bool], Tensor[(64, 28), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
  %622 = @func_3536() /* ty=(float64,) */;
  %623 = cast(%var_3649, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
  %624 = reshape(%623, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float64] */;
  %625 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %626 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %627 = %622.0;
  %628 = @func_2293(%624) /* ty=Tensor[(8, 14, 16), bool] */;
  %629 = %625.3;
  %630 = %626.0;
  (%627, %628, %var_3649, %629, %630)
}

def @func_4554() -> float64 {
  @func_4552() /* ty=float64 */
}

def @func_6702(%var_6683: Tensor[(2002), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), float64], Tensor[(6, 15, 4), int16], Tensor[(2002), float64], Tensor[(1755), int32], Tensor[(1755), int32], Tensor[(1078), float32]) {
  %631 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %632 = cast(%var_6683, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %633 = reshape(%632, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %634 = @func_1670(%633) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %635 = cast(%var_6683, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %636 = cast(meta[relay.Constant][60] /* ty=Tensor[(1755), int32] */, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %637 = cast(meta[relay.Constant][61] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %638 = reshape(%635, newshape=[143, 14]) /* ty=Tensor[(143, 14), float64] */;
  %639 = reshape(%636, newshape=[1755]) /* ty=Tensor[(1755), int32] */;
  %640 = reshape(%637, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %641 = @func_5621(%638, %639, %640) /* ty=(float64, Tensor[(98), float32], Tensor[(143, 14), float64], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */;
  %642 = @func_6015() /* ty=Tensor[(13, 8, 5), float64] */;
  %643 = %631.0;
  %644 = %634.3;
  %645 = %641.4;
  (%642, %643, %644, %var_6683, %645, meta[relay.Constant][60] /* ty=Tensor[(1755), int32] */, meta[relay.Constant][61] /* ty=Tensor[(1078), float32] */)
}

def @func_6109() -> (Tensor[(13, 8, 5), float64],) {
  %646 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %647 = %646.0;
  (%647,)
}

def @func_545(%var_543: Tensor[(2, 15, 11), float32], %var_544: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), float32] {
  @func_541(%var_543, %var_544) /* ty=Tensor[(2, 15, 11), float32] */
}

def @func_4013(%var_4012: Tensor[(13, 8, 5), float64]) -> (Tensor[(13, 8, 5), bool],) {
  %660 = fn (%var_3980: Tensor[(13, 8, 5), float64]) -> (Tensor[(13, 8, 5), bool],) {
    %648 = @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %649 = %648.0;
    %650 = cast(%var_3980, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
    %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %652 = cast(%649, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
    %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %654 = logical_and(%652, %653) /* ty=Tensor[(13, 8, 5), bool] */;
    %655 = cast(%654, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
    %656 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%649, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %659 = greater(%657, %658) /* ty=Tensor[(13, 8, 5), bool] */;
    (%659,)
  };
  %660(%var_4012) /* ty=(Tensor[(13, 8, 5), bool],) */
}

def @func_7566(%var_7563: Tensor[(1485), float64], %var_7564: Tensor[(320), float32], %var_7565: Tensor[(1078), float32]) -> (float64, Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(784), bool], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(1078), float32], Tensor[(16, 8, 1), uint8]) {
  @func_7561(%var_7563, %var_7564, %var_7565) /* ty=(float64, Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(784), bool], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(1078), float32], Tensor[(16, 8, 1), uint8]) */
}

def @func_8134() -> (float64,) {
  @func_8132() /* ty=(float64,) */
}

def @func_7746(%var_7744: Tensor[(12, 9, 8), float32]) -> (Tensor[(12, 9, 8), float32], float64, float64) {
  @func_7743(%var_7744) /* ty=(Tensor[(12, 9, 8), float32], float64, float64) */
}

def @func_7955() -> (Tensor[(13, 8, 5), float64], float64) {
  %665 = fn () -> (Tensor[(13, 8, 5), float64], float64) {
    %661 = @func_5341() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %662 = @func_4191() /* ty=(float64,) */;
    %663 = %661.0;
    %664 = %662.0;
    (%663, %664)
  };
  %665() /* ty=(Tensor[(13, 8, 5), float64], float64) */
}

def @func_6839() -> float64 {
  %666 = @func_6319() /* ty=(float64,) */;
  %666.0
}

def @func_4338(%var_4336: Tensor[(1, 12, 8), float64], %var_4337: Tensor[(1792), float64]) -> (Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) {
  %675 = fn (%var_4307: Tensor[(1, 12, 8), float64], %var_4322: Tensor[(1792), float64]) -> (Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) {
    %667 = @func_4151() /* ty=float64 */;
    %668 = cast(%667, dtype="bool") /* ty=bool */;
    %669 = cast(%var_4307, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
    %670 = cast(%var_4322, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %671 = reshape(%670, newshape=[64, 28]) /* ty=Tensor[(64, 28), float64] */;
    %672 = @func_3657(%671) /* ty=(float64, Tensor[(8, 14, 16), bool], Tensor[(64, 28), float64], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */;
    %673 = logical_or(%668, %669) /* ty=Tensor[(1, 12, 8), bool] */;
    %674 = %672.2;
    (%673, %674, %var_4322)
  };
  %675(%var_4336, %var_4337) /* ty=(Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) */
}

def @func_6111() -> (Tensor[(13, 8, 5), float64],) {
  @func_6109() /* ty=(Tensor[(13, 8, 5), float64],) */
}

def @func_4153() -> float64 {
  @func_4151() /* ty=float64 */
}

def @func_5342() -> (Tensor[(13, 8, 5), float64],) {
  %677 = fn () -> (Tensor[(13, 8, 5), float64],) {
    %676 = @func_4807() /* ty=Tensor[(13, 8, 5), float64] */;
    (%676,)
  };
  %677() /* ty=(Tensor[(13, 8, 5), float64],) */
}

def @func_6321() -> (float64,) {
  @func_6319() /* ty=(float64,) */
}

def @func_5625(%var_5622: Tensor[(143, 14), float64], %var_5623: Tensor[(1755), int32], %var_5624: Tensor[(1078), float32]) -> (float64, Tensor[(98), float32], Tensor[(143, 14), float64], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
  %695 = fn (%var_5599: Tensor[(143, 14), float64], %var_5606: Tensor[(1755), int32], %var_5607: Tensor[(1078), float32]) -> (float64, Tensor[(98), float32], Tensor[(143, 14), float64], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) {
    %678 = cast(%var_5599, dtype="float64") /* ty=Tensor[(143, 14), float64] */;
    %679 = reshape(%678, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %680 = @func_1670(%679) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
    %681 = cast(%var_5606, dtype="int32") /* ty=Tensor[(1755), int32] */;
    %682 = cast(%var_5606, dtype="int32") /* ty=Tensor[(1755), int32] */;
    %683 = @func_4552() /* ty=float64 */;
    %684 = cast(%683, dtype="float64") /* ty=float64 */;
    %685 = cast(%var_5607, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %686 = reshape(%681, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
    %687 = reshape(%682, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int32] */;
    %688 = reshape(%684, newshape=[]) /* ty=float64 */;
    %689 = reshape(%685, newshape=[539, 2]) /* ty=Tensor[(539, 2), float32] */;
    %690 = @func_3011(%686, %687, %688, %689) /* ty=(Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) */;
    %691 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %692 = %680.1;
    %693 = %690.6;
    %694 = %691.0;
    (%683, %692, %var_5599, %693, %var_5606, %var_5607, %694)
  };
  %695(%var_5622, %var_5623, %var_5624) /* ty=(float64, Tensor[(98), float32], Tensor[(143, 14), float64], Tensor[(3, 7, 12), bool], Tensor[(1755), int32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */
}

def @func_3691() -> (float64,) {
  %696 = @func_3425() /* ty=(Tensor[(13, 8, 5), float64], float64, Tensor[(42), float64], Tensor[(1078), float32], Tensor[(7, 11, 14), float64]) */;
  %697 = %696.1;
  (%697,)
}

def @func_2134(%var_2133: Tensor[(1, 1, 8), float64]) -> Tensor[(1, 1, 8), float64] {
  %699 = fn (%var_2118: Tensor[(1, 1, 8), float64]) -> Tensor[(1, 1, 8), float64] {
    %698 = cast(%var_2118, dtype="float64") /* ty=Tensor[(1, 1, 8), float64] */;
    atan(%698) /* ty=Tensor[(1, 1, 8), float64] */
  };
  %699(%var_2133) /* ty=Tensor[(1, 1, 8), float64] */
}

def @func_4151() -> float64 {
  %700 = @func_3536() /* ty=(float64,) */;
  %700.0
}

def @func_3938(%var_3935: Tensor[(784), bool], %var_3936: Tensor[(90), int16], %var_3937: Tensor[(12, 30), int16]) -> (float64, Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(10), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(12, 30), int16]) {
  @func_3933(%var_3935, %var_3936, %var_3937) /* ty=(float64, Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(10), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(12, 30), int16]) */
}

def @func_7661() -> (Tensor[(16, 6, 12), float64], float64) {
  %708 = fn () -> (Tensor[(16, 6, 12), float64], float64) {
    %701 = @func_5185() /* ty=Tensor[(16, 6, 12), float64] */;
    %702 = cast(%701, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
    %703 = asinh(%702) /* ty=Tensor[(16, 6, 12), float64] */;
    %704 = cast(%703, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
    %705 = @func_7148() /* ty=(float64,) */;
    %706 = sin(%704) /* ty=Tensor[(16, 6, 12), float64] */;
    %707 = %705.0;
    (%706, %707)
  };
  %708() /* ty=(Tensor[(16, 6, 12), float64], float64) */
}

def @func_8959() -> (Tensor[(330), float32],) {
  %711 = fn () -> (Tensor[(330), float32],) {
    %709 = @func_8526() /* ty=(float64, float64, Tensor[(2, 15, 11), float32], Tensor[(330), float32]) */;
    %710 = %709.3;
    (%710,)
  };
  %711() /* ty=(Tensor[(330), float32],) */
}

def @func_4131() -> (Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) {
  %721 = fn () -> (Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) {
    %712 = cast(meta[relay.Constant][62] /* ty=Tensor[(1485), float64] */, dtype="float64") /* ty=Tensor[(1485), float64] */;
    %713 = reshape(%712, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float64] */;
    %714 = @func_3214(%713) /* ty=(Tensor[(9, 11, 15), float64],) */;
    %715 = @func_3691() /* ty=(float64,) */;
    %716 = %715.0;
    %717 = cast(%716, dtype="uint8") /* ty=uint8 */;
    %718 = cast(meta[relay.Constant][63] /* ty=Tensor[(5, 12, 1), float64] */, dtype="uint8") /* ty=Tensor[(5, 12, 1), uint8] */;
    %719 = %714.0;
    %720 = bitwise_and(%717, %718) /* ty=Tensor[(5, 12, 1), uint8] */;
    (%719, meta[relay.Constant][62] /* ty=Tensor[(1485), float64] */, %720)
  };
  %721() /* ty=(Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(5, 12, 1), uint8]) */
}

def @func_3011(%var_2965: Tensor[(13, 9, 15), int32], %var_2966: Tensor[(13, 9, 15), int32], %var_2978: float64, %var_2980: Tensor[(539, 2), float32]) -> (Tensor[(13, 9, 15), int32], float64, Tensor[(42), float64], Tensor[(539, 2), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(3, 7, 12), bool], Tensor[(1, 10, 252), int32]) {
  %722 = cast(%var_2966, dtype="int32") /* ty=Tensor[(13, 9, 15), int32] */;
  %723 = shape_of(%var_2965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%var_2965, dtype="int32") /* ty=Tensor[(13, 9, 15), int32] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %726 = cast(meta[relay.Constant][65] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %727 = reshape(%726, newshape=[1, 3, 10]) /* ty=Tensor[(1, 3, 10), float64] */;
  %728 = @func_1032(%727) /* ty=(Tensor[(1, 3, 10), float64],) */;
  %729 = cast(meta[relay.Constant][66] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %730 = cast(meta[relay.Constant][66] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %731 = reshape(%729, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %732 = reshape(%730, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %733 = @func_1154(%731, %732) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
  %734 = cast(%var_2978, dtype="float64") /* ty=float64 */;
  %735 = cast(meta[relay.Constant][64] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %736 = cast(%var_2980, dtype="float32") /* ty=Tensor[(539, 2), float32] */;
  %737 = reshape(%734, newshape=[]) /* ty=float64 */;
  %738 = reshape(%735, newshape=[6, 7, 1]) /* ty=Tensor[(6, 7, 1), float64] */;
  %739 = reshape(%736, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %740 = @func_1595(%737, %738, %739) /* ty=(Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) */;
  %741 = %740.1;
  %742 = cast(meta[relay.Constant][66] /* ty=Tensor[(252), float64] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %743 = cast(%741, dtype="int32") /* ty=Tensor[(1, 10, 1), int32] */;
  %744 = logical_xor(%724, %725) /* ty=Tensor[(13, 9, 15), int32] */;
  %745 = %728.0;
  %746 = %733.0;
  %747 = left_shift(%742, %743) /* ty=Tensor[(1, 10, 252), int32] */;
  (%744, %var_2978, meta[relay.Constant][64] /* ty=Tensor[(42), float64] */, %var_2980, %745, meta[relay.Constant][65] /* ty=Tensor[(30), float64] */, %746, %747)
}

def @func_4042() -> Tensor[(13, 8, 5), float64] {
  %748 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %748.0
}

def @func_6016() -> Tensor[(13, 8, 5), float64] {
  %750 = fn () -> Tensor[(13, 8, 5), float64] {
    %749 = @func_5341() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %749.0
  };
  %750() /* ty=Tensor[(13, 8, 5), float64] */
}

def @func_7862() -> float64 {
  @func_7860() /* ty=float64 */
}

def @func_3693() -> (float64,) {
  @func_3691() /* ty=(float64,) */
}

def @func_7911(%var_7891: Tensor[(64, 28), float64]) -> (float64, Tensor[(2002, 1), float64], Tensor[(2002), float64], Tensor[(10, 9, 8), int8], Tensor[(462), float64], Tensor[(1792), float64], Tensor[(8, 12), float64], Tensor[(64, 28), float64]) {
  %751 = cast(meta[relay.Constant][67] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %752 = reshape(%751, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
  %753 = @func_5001(%752) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
  %754 = cast(meta[relay.Constant][68] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %755 = reshape(%754, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
  %756 = @func_4616(%755) /* ty=(Tensor[(10, 9, 8), int8], Tensor[(1, 10, 1), float64], Tensor[(462, 1), float64]) */;
  %757 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 12), float64] */;
  %758 = cast(%var_7891, dtype="float64") /* ty=Tensor[(64, 28), float64] */;
  %759 = reshape(%757, newshape=[1, 12, 8]) /* ty=Tensor[(1, 12, 8), float64] */;
  %760 = reshape(%758, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %761 = @func_4335(%759, %760) /* ty=(Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) */;
  %762 = @func_4552() /* ty=float64 */;
  %763 = %753.2;
  %764 = %756.0;
  %765 = %761.2;
  (%762, %763, meta[relay.Constant][67] /* ty=Tensor[(2002), float64] */, %764, meta[relay.Constant][68] /* ty=Tensor[(462), float64] */, %765, meta[relay.Constant][69] /* ty=Tensor[(8, 12), float64] */, %var_7891)
}

def @func_4809() -> Tensor[(13, 8, 5), float64] {
  @func_4807() /* ty=Tensor[(13, 8, 5), float64] */
}

def @func_1673(%var_1671: Tensor[(14, 13, 11), float64]) -> (Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) {
  @func_1670(%var_1671) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */
}

def @func_2096(%var_2088: Tensor[(1, 8), float32], %var_2089: Tensor[(1, 8), float32], %var_2090: Tensor[(252), float64], %var_2091: Tensor[(320), float32], %var_2092: Tensor[(784, 1), bool], %var_2093: Tensor[(150), uint64], %var_2094: Tensor[(330), float32], %var_2095: Tensor[(1078), float32]) -> (Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) {
  %839 = fn (%var_1982: Tensor[(1, 8), float32], %var_1983: Tensor[(1, 8), float32], %var_1991: Tensor[(252), float64], %var_2008: Tensor[(320), float32], %var_2009: Tensor[(784, 1), bool], %var_2027: Tensor[(150), uint64], %var_2034: Tensor[(330), float32], %var_2042: Tensor[(1078), float32]) -> (Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) {
    %766 = cast(%var_1983, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
    %767 = shape_of(%var_1982, dtype="int32") /* ty=Tensor[(2), int32] */;
    %768 = cast(%var_1982, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %770 = cast(%var_2008, dtype="float32") /* ty=Tensor[(320), float32] */;
    %771 = cast(%var_2009, dtype="bool") /* ty=Tensor[(784, 1), bool] */;
    %772 = cast(meta[relay.Constant][70] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %773 = reshape(%770, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float32] */;
    %774 = reshape(%771, newshape=[784]) /* ty=Tensor[(784), bool] */;
    %775 = reshape(%772, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
    %776 = @func_1743(%773, %774, %775) /* ty=(Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) */;
    %777 = cast(meta[relay.Constant][71] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %778 = cast(%var_2027, dtype="uint64") /* ty=Tensor[(150), uint64] */;
    %779 = reshape(%777, newshape=[]) /* ty=uint64 */;
    %780 = reshape(%778, newshape=[3, 5, 10]) /* ty=Tensor[(3, 5, 10), uint64] */;
    %781 = cast(meta[relay.Constant][70] /* ty=Tensor[(2002), float64] */, dtype="float32") /* ty=Tensor[(2002), float32] */;
    %782 = log(%781) /* ty=Tensor[(2002), float32] */;
    %783 = cast(%782, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %784 = reshape(%783, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %785 = @func_1670(%784) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
    %786 = cast(meta[relay.Constant][70] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %787 = reshape(%786, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %788 = @func_1670(%787) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
    %789 = %785.1;
    %790 = cast(%789, dtype="float32") /* ty=Tensor[(98), float32] */;
    %791 = cast(%var_2042, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %792 = reshape(%790, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
    %793 = reshape(%791, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
    %794 = @func_1206(%792, %793) /* ty=(Tensor[(7, 11, 14), bool],) */;
    %795 = cast(%var_1991, dtype="float32") /* ty=Tensor[(252), float32] */;
    %796 = cast(%var_2009, dtype="float32") /* ty=Tensor[(784, 1), float32] */;
    %797 = cast(meta[relay.Constant][70] /* ty=Tensor[(2002), float64] */, dtype="bool") /* ty=Tensor[(2002), bool] */;
    %798 = shape_of(%782, dtype="int32") /* ty=Tensor[(1), int32] */;
    %799 = cast(%782, dtype="bool") /* ty=Tensor[(2002), bool] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?), bool] */;
    %801 = cast(%var_1991, dtype="float32") /* ty=Tensor[(252), float32] */;
    %802 = log10(%801) /* ty=Tensor[(252), float32] */;
    %803 = cast(%802, dtype="float64") /* ty=Tensor[(252), float64] */;
    %804 = cast(%var_1991, dtype="float64") /* ty=Tensor[(252), float64] */;
    %805 = reshape(%803, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %806 = reshape(%804, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %807 = @func_1154(%805, %806) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
    %808 = cast(%var_2034, dtype="float32") /* ty=Tensor[(330), float32] */;
    %809 = cast(%var_2034, dtype="float32") /* ty=Tensor[(330), float32] */;
    %810 = reshape(%808, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %811 = reshape(%809, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %812 = @func_541(%810, %811) /* ty=Tensor[(2, 15, 11), float32] */;
    %813 = cast(%812, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
    %814 = cast(meta[relay.Constant][71] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
    %815 = cast(%var_1991, dtype="float64") /* ty=Tensor[(252), float64] */;
    %816 = cast(%var_1991, dtype="float64") /* ty=Tensor[(252), float64] */;
    %817 = reshape(%815, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %818 = reshape(%816, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %819 = @func_1154(%817, %818) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
    %820 = %819.2;
    %821 = cast(%var_1991, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %822 = cast(%820, dtype="uint64") /* ty=Tensor[(10, 1), uint64] */;
    %823 = right_shift(%821, %822) /* ty=Tensor[(10, 252), uint64] */;
    %824 = cast(%802, dtype="float32") /* ty=Tensor[(252), float32] */;
    %825 = cast(%823, dtype="float32") /* ty=Tensor[(10, 252), float32] */;
    %826 = power(%824, %825) /* ty=Tensor[(10, 252), float32] */;
    %827 = cast(%826, dtype="uint64") /* ty=Tensor[(10, 252), uint64] */;
    %828 = cast(%802, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %829 = power(%768, %769) /* ty=Tensor[(?, 8), float32] */;
    %830 = %776.3;
    %831 = @func_1799(%779, %780) /* ty=Tensor[(3, 5, 10), uint64] */;
    %832 = %788.5;
    %833 = %794.0;
    %834 = divide(%795, %796) /* ty=Tensor[(784, 252), float32] */;
    %835 = logical_and(%799, %800) /* ty=Tensor[(2002), bool] */;
    %836 = %807.1;
    %837 = mod(%813, %814) /* ty=Tensor[(2, 15, 11), float64] */;
    %838 = bitwise_and(%827, %828) /* ty=Tensor[(10, 252), uint64] */;
    (%829, %830, %var_2008, %831, %var_2027, %789, %var_2034, %832, %833, %var_2042, %834, %835, %836, %837, %838)
  };
  %839(%var_2088, %var_2089, %var_2090, %var_2091, %var_2092, %var_2093, %var_2094, %var_2095) /* ty=(Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) */
}

def @func_6991(%var_6984: Tensor[(9, 13, 10), float32], %var_6985: Tensor[(9, 13, 10), float32]) -> Tensor[(9, 13, 10), float32] {
  %840 = cast(%var_6985, dtype="float32") /* ty=Tensor[(9, 13, 10), float32] */;
  %841 = shape_of(%var_6984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_6984, dtype="float32") /* ty=Tensor[(9, 13, 10), float32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%842, %843) /* ty=Tensor[(9, 13, 10), float32] */
}

def @func_6358() -> Tensor[(13, 8, 5), float64] {
  %845 = fn () -> Tensor[(13, 8, 5), float64] {
    %844 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %844.0
  };
  %845() /* ty=Tensor[(13, 8, 5), float64] */
}

def @func_5224(%var_5222: Tensor[(12, 7, 8), float64]) -> Tensor[(12, 7, 8), int32] {
  @func_5221(%var_5222) /* ty=Tensor[(12, 7, 8), int32] */
}

def @func_7695(%var_7694: Tensor[(320, 1), float32]) -> (float64, Tensor[(165, 2), float32], Tensor[(784), bool], Tensor[(2002, 1), float64], Tensor[(320, 1), float64]) {
  %857 = fn (%var_7676: Tensor[(320, 1), float32]) -> (float64, Tensor[(165, 2), float32], Tensor[(784), bool], Tensor[(2002, 1), float64], Tensor[(320, 1), float64]) {
    %846 = cast(%var_7676, dtype="float32") /* ty=Tensor[(320, 1), float32] */;
    %847 = cast(meta[relay.Constant][72] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
    %848 = cast(meta[relay.Constant][73] /* ty=Tensor[(2002, 1), float64] */, dtype="float64") /* ty=Tensor[(2002, 1), float64] */;
    %849 = reshape(%846, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float32] */;
    %850 = reshape(%847, newshape=[784]) /* ty=Tensor[(784), bool] */;
    %851 = reshape(%848, newshape=[2002]) /* ty=Tensor[(2002), float64] */;
    %852 = @func_1743(%849, %850, %851) /* ty=(Tensor[(10, 16, 2), float32], Tensor[(8, 14, 7), bool], Tensor[(784), bool], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(2002), float64], Tensor[(2, 15, 11), float32], Tensor[(165, 2), float32]) */;
    %853 = cast(%var_7676, dtype="float64") /* ty=Tensor[(320, 1), float64] */;
    %854 = @func_5887() /* ty=float64 */;
    %855 = %852.7;
    %856 = tan(%853) /* ty=Tensor[(320, 1), float64] */;
    (%854, %855, meta[relay.Constant][72] /* ty=Tensor[(784), bool] */, meta[relay.Constant][73] /* ty=Tensor[(2002, 1), float64] */, %856)
  };
  %857(%var_7694) /* ty=(float64, Tensor[(165, 2), float32], Tensor[(784), bool], Tensor[(2002, 1), float64], Tensor[(320, 1), float64]) */
}

def @func_3887() -> (Tensor[(6, 9, 8), int64],) {
  %858 = cast(meta[relay.Constant][75] /* ty=Tensor[(6, 9, 8), int64] */, dtype="int64") /* ty=Tensor[(6, 9, 8), int64] */;
  %859 = shape_of(meta[relay.Constant][74] /* ty=Tensor[(6, 9, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(meta[relay.Constant][74] /* ty=Tensor[(6, 9, 8), int64] */, dtype="int64") /* ty=Tensor[(6, 9, 8), int64] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %862 = bitwise_and(%860, %861) /* ty=Tensor[(6, 9, 8), int64] */;
  (%862,)
}

def @func_7468() -> Tensor[(16, 8, 1), int16] {
  @func_7466() /* ty=Tensor[(16, 8, 1), int16] */
}

def @func_7263() -> (Tensor[(13, 8, 5), float32],) {
  %863 = @func_4042() /* ty=Tensor[(13, 8, 5), float64] */;
  %864 = cast(%863, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %865 = log2(%864) /* ty=Tensor[(13, 8, 5), float32] */;
  (%865,)
}

def @func_8078() -> (float64,) {
  @func_8076() /* ty=(float64,) */
}

def @func_8076() -> (float64,) {
  %866 = @func_7048() /* ty=float64 */;
  (%866,)
}

def @func_1803(%var_1801: uint64, %var_1802: Tensor[(3, 5, 10), uint64]) -> Tensor[(3, 5, 10), uint64] {
  @func_1799(%var_1801, %var_1802) /* ty=Tensor[(3, 5, 10), uint64] */
}

def @func_3364(%var_3356: Tensor[(1, 252), float64], %var_3357: Tensor[(320), float32], %var_3358: Tensor[(784), bool], %var_3359: Tensor[(150), uint64], %var_3360: Tensor[(330), float32], %var_3361: Tensor[(5, 2), float64], %var_3362: Tensor[(13, 8, 5), float64], %var_3363: Tensor[(2002), float64]) -> (Tensor[(98), float32], Tensor[(8), float32], Tensor[(1, 252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(330), float32], Tensor[(5, 2), float64], Tensor[(13, 8, 5), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(1, 10, 1078), bool], Tensor[(360), int16], Tensor[(2002), float64]) {
  %906 = fn (%var_3289: Tensor[(1, 252), float64], %var_3290: Tensor[(320), float32], %var_3291: Tensor[(784), bool], %var_3292: Tensor[(150), uint64], %var_3293: Tensor[(330), float32], %var_3299: Tensor[(5, 2), float64], %var_3335: Tensor[(13, 8, 5), float64], %var_3353: Tensor[(2002), float64]) -> (Tensor[(98), float32], Tensor[(8), float32], Tensor[(1, 252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(330), float32], Tensor[(5, 2), float64], Tensor[(13, 8, 5), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(1, 10, 1078), bool], Tensor[(360), int16], Tensor[(2002), float64]) {
    %867 = cast(meta[relay.Constant][76] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
    %868 = cast(meta[relay.Constant][76] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
    %869 = cast(%var_3289, dtype="float64") /* ty=Tensor[(1, 252), float64] */;
    %870 = cast(%var_3290, dtype="float32") /* ty=Tensor[(320), float32] */;
    %871 = cast(%var_3291, dtype="bool") /* ty=Tensor[(784), bool] */;
    %872 = cast(%var_3292, dtype="uint64") /* ty=Tensor[(150), uint64] */;
    %873 = cast(%var_3293, dtype="float32") /* ty=Tensor[(330), float32] */;
    %874 = cast(meta[relay.Constant][77] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %875 = reshape(%867, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
    %876 = reshape(%868, newshape=[1, 8]) /* ty=Tensor[(1, 8), float32] */;
    %877 = reshape(%869, newshape=[252]) /* ty=Tensor[(252), float64] */;
    %878 = reshape(%870, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %879 = reshape(%871, newshape=[784, 1]) /* ty=Tensor[(784, 1), bool] */;
    %880 = reshape(%872, newshape=[150]) /* ty=Tensor[(150), uint64] */;
    %881 = reshape(%873, newshape=[330]) /* ty=Tensor[(330), float32] */;
    %882 = reshape(%874, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %883 = @func_2087(%875, %876, %877, %878, %879, %880, %881, %882) /* ty=(Tensor[(?, 8), float32], Tensor[(10), float64], Tensor[(320), float32], Tensor[(3, 5, 10), uint64], Tensor[(150), uint64], Tensor[(98), float32], Tensor[(330), float32], Tensor[(360), int16], Tensor[(7, 11, 14), bool], Tensor[(1078), float32], Tensor[(784, 252), float32], Tensor[(2002), bool], Tensor[(1, 10, 1), float64], Tensor[(2, 15, 11), float64], Tensor[(10, 252), uint64]) */;
    %884 = @func_3246() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %885 = %884.0;
    %886 = cast(%var_3335, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
    %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
    %888 = cast(%885, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
    %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %890 = cast(meta[relay.Constant][78] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %891 = reshape(%890, newshape=[1, 3, 10]) /* ty=Tensor[(1, 3, 10), float64] */;
    %892 = @func_1032(%891) /* ty=(Tensor[(1, 3, 10), float64],) */;
    %893 = cast(%var_3299, dtype="float64") /* ty=Tensor[(5, 2), float64] */;
    %894 = reshape(%893, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
    %895 = @func_361(%894) /* ty=Tensor[(1, 10, 1), float64] */;
    %896 = cast(meta[relay.Constant][77] /* ty=Tensor[(1078), float32] */, dtype="bool") /* ty=Tensor[(1078), bool] */;
    %897 = cast(%895, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
    %898 = cast(%var_3353, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %899 = reshape(%898, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
    %900 = @func_1670(%899) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
    %901 = %883.5;
    %902 = floor_mod(%888, %889) /* ty=Tensor[(13, 8, 5), float32] */;
    %903 = %892.0;
    %904 = greater(%896, %897) /* ty=Tensor[(1, 10, 1078), bool] */;
    %905 = %900.5;
    (%901, meta[relay.Constant][76] /* ty=Tensor[(8), float32] */, %var_3289, %var_3290, %var_3291, %var_3292, %var_3293, %var_3299, %902, %903, meta[relay.Constant][78] /* ty=Tensor[(30), float64] */, %904, %905, %var_3353)
  };
  %906(%var_3356, %var_3357, %var_3358, %var_3359, %var_3360, %var_3361, %var_3362, %var_3363) /* ty=(Tensor[(98), float32], Tensor[(8), float32], Tensor[(1, 252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(330), float32], Tensor[(5, 2), float64], Tensor[(13, 8, 5), float32], Tensor[(1, 3, 10), float64], Tensor[(30), float64], Tensor[(1, 10, 1078), bool], Tensor[(360), int16], Tensor[(2002), float64]) */
}

def @func_3444() -> (Tensor[(13, 8, 5), float64],) {
  @func_3442() /* ty=(Tensor[(13, 8, 5), float64],) */
}

def @func_7048() -> float64 {
  %907 = @func_6969() /* ty=(float64,) */;
  %907.0
}

def @func_7578() -> float64 {
  @func_5765() /* ty=float64 */
}

def @func_6876(%var_6874: int32, %var_6875: Tensor[(12, 16, 16), int32]) -> Tensor[(12, 16, 16), int32] {
  %910 = fn (%var_6866: int32, %var_6867: Tensor[(12, 16, 16), int32]) -> Tensor[(12, 16, 16), int32] {
    %908 = cast(%var_6866, dtype="int32") /* ty=int32 */;
    %909 = cast(%var_6867, dtype="int32") /* ty=Tensor[(12, 16, 16), int32] */;
    maximum(%908, %909) /* ty=Tensor[(12, 16, 16), int32] */
  };
  %910(%var_6874, %var_6875) /* ty=Tensor[(12, 16, 16), int32] */
}

def @func_520(%var_517: Tensor[(6, 15, 1), int16], %var_518: Tensor[(6, 15, 4), int16], %var_519: Tensor[(5, 2), float64]) -> (Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) {
  @func_515(%var_517, %var_518, %var_519) /* ty=(Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) */
}

def @func_1599(%var_1596: float64, %var_1597: Tensor[(6, 7, 1), float64], %var_1598: Tensor[(1078), float32]) -> (Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) {
  %929 = fn (%var_1570: float64, %var_1571: Tensor[(6, 7, 1), float64], %var_1585: Tensor[(1078), float32]) -> (Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) {
    %911 = cast(%var_1570, dtype="float64") /* ty=float64 */;
    %912 = cast(%var_1571, dtype="float64") /* ty=Tensor[(6, 7, 1), float64] */;
    %913 = cast(meta[relay.Constant][79] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
    %914 = cast(meta[relay.Constant][79] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
    %915 = reshape(%913, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %916 = reshape(%914, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %917 = @func_1154(%915, %916) /* ty=(Tensor[(3, 7, 12), bool], Tensor[(1, 10, 1), float64], Tensor[(10, 1), float64]) */;
    %918 = cast(meta[relay.Constant][80] /* ty=Tensor[(98, 1), float32] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
    %919 = cast(%var_1585, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %920 = reshape(%918, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
    %921 = reshape(%919, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
    %922 = @func_1206(%920, %921) /* ty=(Tensor[(7, 11, 14), bool],) */;
    %923 = %917.1;
    %924 = cast(%923, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
    %925 = reshape(%924, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
    %926 = mod(%911, %912) /* ty=Tensor[(6, 7, 1), float64] */;
    %927 = %922.0;
    %928 = @func_361(%925) /* ty=Tensor[(1, 10, 1), float64] */;
    (%926, %923, meta[relay.Constant][79] /* ty=Tensor[(252), float64] */, %927, meta[relay.Constant][80] /* ty=Tensor[(98, 1), float32] */, %var_1585, %928)
  };
  %929(%var_1596, %var_1597, %var_1598) /* ty=(Tensor[(6, 7, 1), float64], Tensor[(1, 10, 1), float64], Tensor[(252), float64], Tensor[(7, 11, 14), bool], Tensor[(98, 1), float32], Tensor[(1078), float32], Tensor[(1, 10, 1), float64]) */
}

def @func_3889() -> (Tensor[(6, 9, 8), int64],) {
  @func_3887() /* ty=(Tensor[(6, 9, 8), int64],) */
}

def @func_3933(%var_3910: Tensor[(784), bool], %var_3924: Tensor[(90), int16], %var_3925: Tensor[(12, 30), int16]) -> (float64, Tensor[(8, 14, 7), float32], Tensor[(784), bool], Tensor[(10), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(12, 30), int16]) {
  %930 = @func_3536() /* ty=(float64,) */;
  %931 = cast(%var_3910, dtype="bool") /* ty=Tensor[(784), bool] */;
  %932 = cast(meta[relay.Constant][81] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %933 = reshape(%931, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
  %934 = reshape(%932, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %935 = @func_1015(%933, %934) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
  %936 = cast(%var_3924, dtype="int16") /* ty=Tensor[(90), int16] */;
  %937 = cast(%var_3925, dtype="int16") /* ty=Tensor[(12, 30), int16] */;
  %938 = cast(meta[relay.Constant][81] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %939 = reshape(%936, newshape=[6, 15, 1]) /* ty=Tensor[(6, 15, 1), int16] */;
  %940 = reshape(%937, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), int16] */;
  %941 = reshape(%938, newshape=[5, 2]) /* ty=Tensor[(5, 2), float64] */;
  %942 = @func_515(%939, %940, %941) /* ty=(Tensor[(6, 15, 4), int16], Tensor[(1, 10, 1), float64], Tensor[(5, 2), float64]) */;
  %943 = %930.0;
  %944 = %935.2;
  %945 = %942.0;
  (%943, %944, %var_3910, meta[relay.Constant][81] /* ty=Tensor[(10), float64] */, %945, %var_3924, %var_3925)
}

def @func_5127(%var_5108: Tensor[(448, 4), float64], %var_5122: Tensor[(1485), float64]) -> (float64, Tensor[(2, 48), float64], Tensor[(448, 4), float64], Tensor[(1, 12, 8), bool], Tensor[(9, 11, 15), float64], Tensor[(1485), float64]) {
  %946 = @func_4905() /* ty=(float64, Tensor[(13, 8, 5), float64]) */;
  %947 = @func_3536() /* ty=(float64,) */;
  %948 = %947.0;
  %949 = cast(meta[relay.Constant][82] /* ty=Tensor[(2, 48), float64] */, dtype="float64") /* ty=Tensor[(2, 48), float64] */;
  %950 = cast(%var_5108, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
  %951 = reshape(%949, newshape=[1, 12, 8]) /* ty=Tensor[(1, 12, 8), float64] */;
  %952 = reshape(%950, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %953 = @func_4335(%951, %952) /* ty=(Tensor[(1, 12, 8), bool], Tensor[(64, 28), float64], Tensor[(1792), float64]) */;
  %954 = %953.0;
  %955 = cast(%948, dtype="bool") /* ty=bool */;
  %956 = cast(%954, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %957 = cast(%var_5122, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %958 = reshape(%957, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float64] */;
  %959 = @func_3214(%958) /* ty=(Tensor[(9, 11, 15), float64],) */;
  %960 = %946.0;
  %961 = less(%955, %956) /* ty=Tensor[(1, 12, 8), bool] */;
  %962 = %959.0;
  (%960, meta[relay.Constant][82] /* ty=Tensor[(2, 48), float64] */, %var_5108, %961, %962, %var_5122)
}

def @func_4966() -> Tensor[(13, 8, 5), float64] {
  @func_4964() /* ty=Tensor[(13, 8, 5), float64] */
}

def @func_2780(%var_2777: Tensor[(7, 4, 8), bool], %var_2778: Tensor[(7, 4, 8), bool], %var_2779: Tensor[(30), float64]) -> (Tensor[(7, 4, 8), float32], Tensor[(2, 15, 11), float32], Tensor[(784), bool], Tensor[(1, 10), float64], Tensor[(1, 3, 10), float64], Tensor[(30), float64]) {
  %983 = fn (%var_2736: Tensor[(7, 4, 8), bool], %var_2737: Tensor[(7, 4, 8), bool], %var_2767: Tensor[(30), float64]) -> (Tensor[(7, 4, 8), float32], Tensor[(2, 15, 11), float32], Tensor[(784), bool], Tensor[(1, 10), float64], Tensor[(1, 3, 10), float64], Tensor[(30), float64]) {
    %963 = cast(%var_2737, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
    %964 = shape_of(%var_2736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %965 = cast(%var_2736, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %967 = logical_or(%965, %966) /* ty=Tensor[(7, 4, 8), bool] */;
    %968 = cast(%967, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
    %969 = shape_of(%var_2736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(%var_2736, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %972 = cast(meta[relay.Constant][83] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
    %973 = cast(meta[relay.Constant][84] /* ty=Tensor[(1, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
    %974 = reshape(%972, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), bool] */;
    %975 = reshape(%973, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
    %976 = @func_1015(%974, %975) /* ty=(Tensor[(8, 14, 7), bool], Tensor[(?, 10, ?), uint32], Tensor[(8, 14, 7), float32], Tensor[(2, 15, 11), float32], Tensor[(330), float32], Tensor[(2, 15, 11), float32]) */;
    %977 = cast(%var_2767, dtype="float64") /* ty=Tensor[(30), float64] */;
    %978 = reshape(%977, newshape=[1, 3, 10]) /* ty=Tensor[(1, 3, 10), float64] */;
    %979 = @func_1032(%978) /* ty=(Tensor[(1, 3, 10), float64],) */;
    %980 = floor_mod(%970, %971) /* ty=Tensor[(7, 4, 8), float32] */;
    %981 = %976.5;
    %982 = %979.0;
    (%980, %981, meta[relay.Constant][83] /* ty=Tensor[(784), bool] */, meta[relay.Constant][84] /* ty=Tensor[(1, 10), float64] */, %982, %var_2767)
  };
  %983(%var_2777, %var_2778, %var_2779) /* ty=(Tensor[(7, 4, 8), float32], Tensor[(2, 15, 11), float32], Tensor[(784), bool], Tensor[(1, 10), float64], Tensor[(1, 3, 10), float64], Tensor[(30), float64]) */
}

def @func_7561(%var_7510: Tensor[(1485), float64], %var_7542: Tensor[(320), float32], %var_7545: Tensor[(1078), float32]) -> (float64, Tensor[(9, 11, 15), float64], Tensor[(1485), float64], Tensor[(784), bool], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150), uint64], Tensor[(1078), float32], Tensor[(16, 8, 1), uint8]) {
  %984 = cast(%var_7510, dtype="float64") /* ty=Tensor[(1485), float64] */;
  %985 = reshape(%984, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), float64] */;
  %986 = @func_3214(%985) /* ty=(Tensor[(9, 11, 15), float64],) */;
  %987 = cast(%var_7542, dtype="float32") /* ty=Tensor[(320), float32] */;
  %988 = cast(meta[relay.Constant][85] /* ty=Tensor[(784), bool] */, dtype="bool") /* ty=Tensor[(784), bool] */;
  %989 = cast(meta[relay.Constant][86] /* ty=Tensor[(150), uint64] */, dtype="uint64") /* ty=Tensor[(150), uint64] */;
  %990 = cast(%var_7545, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %991 = reshape(%987, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %992 = reshape(%988, newshape=[784]) /* ty=Tensor[(784), bool] */;
  %993 = reshape(%989, newshape=[150, 1]) /* ty=Tensor[(150, 1), uint64] */;
  %994 = reshape(%990, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %995 = @func_5262(%991, %992, %993, %994) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(3, 5, 10), uint64], Tensor[(1, 8), float32], Tensor[(252), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(150, 1), uint64], Tensor[(330), float32], Tensor[(1078), float32], Tensor[(13, 8, 5), float64]) */;
  %996 = @func_7466() /* ty=Tensor[(16, 8, 1), int16] */;
  %997 = cast(%996, dtype="float64") /* ty=Tensor[(16, 8, 1), float64] */;
  %998 = sinh(%997) /* ty=Tensor[(16, 8, 1), float64] */;
  %999 = @func_3691() /* ty=(float64,) */;
  %1000 = %999.0;
  %1001 = cast(%998, dtype="uint8") /* ty=Tensor[(16, 8, 1), uint8] */;
  %1002 = cast(%1000, dtype="uint8") /* ty=uint8 */;
  %1003 = @func_5887() /* ty=float64 */;
  %1004 = %986.0;
  %1005 = %995.5;
  %1006 = subtract(%1001, %1002) /* ty=Tensor[(16, 8, 1), uint8] */;
  (%1003, %1004, %var_7510, %1005, %var_7542, meta[relay.Constant][85] /* ty=Tensor[(784), bool] */, meta[relay.Constant][86] /* ty=Tensor[(150), uint64] */, %var_7545, %1006)
}

def @func_6705(%var_6703: Tensor[(2002), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), float64], Tensor[(6, 15, 4), int16], Tensor[(2002), float64], Tensor[(1755), int32], Tensor[(1755), int32], Tensor[(1078), float32]) {
  @func_6702(%var_6703) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), float64], Tensor[(6, 15, 4), int16], Tensor[(2002), float64], Tensor[(1755), int32], Tensor[(1755), int32], Tensor[(1078), float32]) */
}

def @func_7135() -> Tensor[(13, 8, 5), float32] {
  %1007 = @func_6437() /* ty=(Tensor[(13, 8, 5), float64],) */;
  %1008 = %1007.0;
  %1009 = @func_5664() /* ty=float64 */;
  %1010 = cast(%1008, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %1011 = cast(%1009, dtype="float32") /* ty=float32 */;
  floor_divide(%1010, %1011) /* ty=Tensor[(13, 8, 5), float32] */
}

def @func_8799(%var_8797: Tensor[(2002), float64]) -> (float64, Tensor[(10), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(2002), float64]) {
  @func_8796(%var_8797) /* ty=(float64, Tensor[(10), float64], Tensor[(320), float32], Tensor[(784), bool], Tensor[(2002), float64]) */
}

def @func_6638(%var_6636: Tensor[(8, 8, 8), float64]) -> Tensor[(8, 8, 8), float64] {
  @func_6635(%var_6636) /* ty=Tensor[(8, 8, 8), float64] */
}

def @func_5001(%var_4987: Tensor[(2002, 1), float64]) -> (Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) {
  %1012 = @func_4964() /* ty=Tensor[(13, 8, 5), float64] */;
  %1013 = cast(meta[relay.Constant][87] /* ty=Tensor[(13, 8, 5), float64] */, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %1014 = shape_of(%1012, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1015 = cast(%1012, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1017 = cast(%var_4987, dtype="float64") /* ty=Tensor[(2002, 1), float64] */;
  %1018 = reshape(%1017, newshape=[14, 13, 11]) /* ty=Tensor[(14, 13, 11), float64] */;
  %1019 = @func_1670(%1018) /* ty=(Tensor[(14, 13, 11), float64], Tensor[(98), float32], Tensor[(1078), float64], Tensor[(6, 15, 4), int16], Tensor[(90), int16], Tensor[(360), int16], Tensor[(1, 10), float64]) */;
  %1020 = not_equal(%1015, %1016) /* ty=Tensor[(13, 8, 5), bool] */;
  %1021 = %1019.3;
  (%1020, %1021, %var_4987)
}

def @func_6438() -> (Tensor[(13, 8, 5), float64],) {
  %1024 = fn () -> (Tensor[(13, 8, 5), float64],) {
    %1022 = @func_4624() /* ty=(Tensor[(13, 8, 5), float64],) */;
    %1023 = %1022.0;
    (%1023,)
  };
  %1024() /* ty=(Tensor[(13, 8, 5), float64],) */
}

def @func_5887() -> float64 {
  %1025 = @func_5491() /* ty=(float64,) */;
  %1025.0
}

def @func_5493() -> (float64,) {
  @func_5491() /* ty=(float64,) */
}

def @func_5546(%var_5543: Tensor[(15, 12, 3), int8], %var_5544: Tensor[(15, 12, 3), int8], %var_5545: Tensor[(2002), float64]) -> (Tensor[(15, 12, 3), int8], Tensor[(2002, 1), float64], Tensor[(2002), float64]) {
  %1035 = fn (%var_5524: Tensor[(15, 12, 3), int8], %var_5525: Tensor[(15, 12, 3), int8], %var_5537: Tensor[(2002), float64]) -> (Tensor[(15, 12, 3), int8], Tensor[(2002, 1), float64], Tensor[(2002), float64]) {
    %1026 = cast(%var_5525, dtype="int8") /* ty=Tensor[(15, 12, 3), int8] */;
    %1027 = shape_of(%var_5524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1028 = cast(%var_5524, dtype="int8") /* ty=Tensor[(15, 12, 3), int8] */;
    %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1030 = cast(%var_5537, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %1031 = reshape(%1030, newshape=[2002, 1]) /* ty=Tensor[(2002, 1), float64] */;
    %1032 = @func_5001(%1031) /* ty=(Tensor[(13, 8, 5), bool], Tensor[(6, 15, 4), int16], Tensor[(2002, 1), float64]) */;
    %1033 = left_shift(%1028, %1029) /* ty=Tensor[(15, 12, 3), int8] */;
    %1034 = %1032.2;
    (%1033, %1034, %var_5537)
  };
  %1035(%var_5543, %var_5544, %var_5545) /* ty=(Tensor[(15, 12, 3), int8], Tensor[(2002, 1), float64], Tensor[(2002), float64]) */
}

def @func_6204(%var_6202: Tensor[(2002), float64]) -> (Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), bool], Tensor[(1, 1, 10), bool], Tensor[(10), int64], Tensor[(16, 1, 1), float64], uint8, Tensor[(16), uint8], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), bool], Tensor[(2002), float64]) {
  @func_6201(%var_6202) /* ty=(Tensor[(13, 8, 5), float64], Tensor[(13, 8, 5), bool], Tensor[(1, 1, 10), bool], Tensor[(10), int64], Tensor[(16, 1, 1), float64], uint8, Tensor[(16), uint8], Tensor[(13, 8, 5), bool], Tensor[(13, 8, 5), bool], Tensor[(2002), float64]) */
}

def @main() -> (float64, float64, Tensor[(48, 24), float64]) {
  %1036 = @func_8473() /* ty=(float64,) */;
  %1037 = @func_8134() /* ty=(float64,) */;
  %1038 = @func_4837() /* ty=(Tensor[(13, 8, 5), float64], Tensor[(16, 6, 12), float64], Tensor[(48, 24), float64]) */;
  %1039 = %1038.2;
  %1040 = cast(%1039, dtype="float64") /* ty=Tensor[(48, 24), float64] */;
  %1041 = %1036.0;
  %1042 = %1037.0;
  %1043 = sin(%1040) /* ty=Tensor[(48, 24), float64] */;
  (%1041, %1042, %1043)
}

def @func_6319() -> (float64,) {
  %1044 = @func_5765() /* ty=float64 */;
  (%1044,)
}

def @func_7050() -> float64 {
  @func_7048() /* ty=float64 */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen419/build/output.py", line 2532, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:15:53] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

