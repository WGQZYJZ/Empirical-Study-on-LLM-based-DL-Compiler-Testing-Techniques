==========mod==========
#[version = "0.0.5"]
def @func_1525(%var_1517: uint8) -> (Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8) {
  %0 = cast(%var_1517, dtype="uint8") /* ty=uint8 */;
  %1 = reshape(%0, newshape=[]) /* ty=uint8 */;
  %2 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  %3 = @func_530(%1) /* ty=Tensor[(9, 8, 9), bool] */;
  (%2, %3, %var_1517)
}

def @func_3508(%var_3496: Tensor[(200), float32]) -> (Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(9, ?, 8), bool]) {
  %4 = cast(%var_3496, dtype="float32") /* ty=Tensor[(200), float32] */;
  %5 = reshape(%4, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
  %6 = @func_1614(%5) /* ty=(Tensor[(100, 2), bool],) */;
  %7 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %9 = cosh(%8) /* ty=Tensor[(9, 1, 8), float64] */;
  %10 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %11 = cast(%10, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %12 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%9, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %15 = %6.0;
  %16 = logical_and(%13, %14) /* ty=Tensor[(9, ?, 8), bool] */;
  (%15, %var_3496, %16)
}

def @func_6771(%var_6768: Tensor[(1008), float64]) -> (Tensor[(9, 9, 8), float32], Tensor[(9, 14, 8), bool], Tensor[(1008), float64]) {
  %17 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %19 = rsqrt(%18) /* ty=Tensor[(9, 9, 8), float64] */;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %21 = cast(%var_6768, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %22 = reshape(%21, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
  %23 = @func_1836(%22) /* ty=(Tensor[(9, 14, 8), bool],) */;
  %24 = tan(%20) /* ty=Tensor[(9, 9, 8), float32] */;
  %25 = %23.0;
  (%24, %25, %var_6768)
}

def @func_8096() -> Tensor[(9, ?, 8), float64] {
  @func_6082() /* ty=Tensor[(9, ?, 8), float64] */
}

def @func_4092(%var_4009: int8, %var_4010: Tensor[(8, 8, 16), int8], %var_4040: Tensor[(1430), uint16]) -> (Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %26 = cast(%var_4009, dtype="int8") /* ty=int8 */;
  %27 = cast(%var_4010, dtype="int8") /* ty=Tensor[(8, 8, 16), int8] */;
  %28 = cast(meta[relay.Constant][0] /* ty=Tensor[(504, 2), float64] */, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %29 = reshape(%28, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
  %30 = @func_1836(%29) /* ty=(Tensor[(9, 14, 8), bool],) */;
  %31 = cast(%var_4040, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(1680), int16] */, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %33 = reshape(%31, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint16] */;
  %34 = reshape(%32, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
  %35 = @func_2338(%33, %34) /* ty=(Tensor[(10, 13, 11), uint16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64]) */;
  %36 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %37 = bitwise_or(%26, %27) /* ty=Tensor[(8, 8, 16), int8] */;
  %38 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  %39 = %30.0;
  %40 = %35.0;
  %41 = %36.0;
  %42 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  (%37, %38, %39, meta[relay.Constant][0] /* ty=Tensor[(504, 2), float64] */, %40, %var_4040, meta[relay.Constant][1] /* ty=Tensor[(1680), int16] */, %41, %42)
}

def @func_3036(%var_3015: Tensor[(50), float32]) -> (Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(80), int16], Tensor[(50), float32], Tensor[(504), float64], Tensor[(100, 2), float32]) {
  %43 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
  %46 = cast(%var_3015, dtype="float32") /* ty=Tensor[(50), float32] */;
  %47 = %43.3;
  %48 = cast(%47, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %50 = reshape(%44, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %51 = reshape(%45, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %52 = reshape(%46, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
  %53 = reshape(%48, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %54 = reshape(%49, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %55 = @func_2612(%50, %51, %52, %53, %54) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
  %56 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %59 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  %60 = %55.6;
  %61 = acosh(%58) /* ty=Tensor[(100, 2), float32] */;
  (%47, %59, %60, meta[relay.Constant][2] /* ty=Tensor[(80), int16] */, %var_3015, meta[relay.Constant][3] /* ty=Tensor[(504), float64] */, %61)
}

def @func_3937() -> (Tensor[(9, 1, 8), float32],) {
  %62 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
  %64 = rsqrt(%63) /* ty=Tensor[(9, 1, 8), float32] */;
  (%64,)
}

def @func_2436() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %65 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %66 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  %67 = %65.3;
  (%66, %67)
}

def @func_5118() -> Tensor[(9, 1, 8), float64] {
  @func_1857() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_9873(%var_9805: int8, %var_9806: Tensor[(1024), int8], %var_9807: Tensor[(1430), uint16]) -> (Tensor[(9, ?, 8), float64], int8, Tensor[(9, 1, 8), float64], Tensor[(11, 8, 1430), float32], Tensor[(1024), float64]) {
  %68 = @func_5390() /* ty=Tensor[(11, 8, 1), float32] */;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %70 = cast(%var_9807, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %71 = cast(%var_9806, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %72 = acosh(%71) /* ty=Tensor[(1024), float32] */;
  %73 = cast(%var_9805, dtype="int8") /* ty=int8 */;
  %74 = cast(%var_9806, dtype="int8") /* ty=Tensor[(1024), int8] */;
  %75 = cast(%var_9807, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
  %76 = reshape(%73, newshape=[]) /* ty=int8 */;
  %77 = reshape(%74, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), int8] */;
  %78 = reshape(%75, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
  %79 = @func_4092(%76, %77, %78) /* ty=(Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="uint64") /* ty=Tensor[(8, 8, 16), uint64] */;
  %82 = shape_of(%72, dtype="int32") /* ty=Tensor[(1), int32] */;
  %83 = cast(%72, dtype="uint64") /* ty=Tensor[(1024), uint64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %85 = right_shift(%83, %84) /* ty=Tensor[(1024), uint64] */;
  %86 = cast(%72, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(1), int32] */;
  %88 = cast(%85, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?), float64] */;
  %90 = @func_8096() /* ty=Tensor[(9, ?, 8), float64] */;
  %91 = @func_5118() /* ty=Tensor[(9, 1, 8), float64] */;
  %92 = floor_divide(%69, %70) /* ty=Tensor[(11, 8, 1430), float32] */;
  %93 = power(%88, %89) /* ty=Tensor[(1024), float64] */;
  (%90, %var_9805, %91, %92, %93)
}

def @func_1486() -> (Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %94 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %95 = %94.3;
  %96 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
  %97 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  (%95, %96, %97)
}

def @func_9670(%var_9664: Tensor[(9, 13, 8), float64]) -> Tensor[(9, 13, 8), bool] {
  %98 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %101 = cast(%var_9664, dtype="bool") /* ty=Tensor[(9, 13, 8), bool] */;
  less_equal(%100, %101) /* ty=Tensor[(9, 13, 8), bool] */
}

def @func_3183() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) {
  %102 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %103 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %104 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  %105 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  %106 = %102.0;
  (%103, %104, %105, %106)
}

def @func_3753() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %107 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %108 = @func_2436() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
  %109 = %107.0;
  %110 = %108.0;
  (%109, %110)
}

def @func_7550() -> Tensor[(9, ?, 8), float64] {
  %111 = @func_7376() /* ty=(Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) */;
  %111.5
}

def @func_6286() -> (Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], int8, Tensor[(1430), uint16], Tensor[(9, 1, 8), float64]) {
  %112 = @func_3989() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %113 = cast(meta[relay.Constant][4] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(1430), uint16] */, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
  %115 = reshape(%113, newshape=[]) /* ty=int8 */;
  %116 = reshape(%114, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
  %117 = @func_5411(%115, %116) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(8, 8, 16), int8], int8, Tensor[(1024), int8], Tensor[(1430), uint16]) */;
  %118 = @func_3829() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %119 = %112.0;
  %120 = %117.4;
  %121 = %118.0;
  (%119, %120, meta[relay.Constant][4] /* ty=int8 */, meta[relay.Constant][5] /* ty=Tensor[(1430), uint16] */, %121)
}

def @func_4673(%var_4660: uint32) -> (Tensor[(10, 4, 13), uint32],) {
  %122 = cast(%var_4660, dtype="uint32") /* ty=uint32 */;
  %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 4, 13), uint32] */, dtype="uint32") /* ty=Tensor[(10, 4, 13), uint32] */;
  %124 = maximum(%122, %123) /* ty=Tensor[(10, 4, 13), uint32] */;
  (%124,)
}

def @func_4578() -> Tensor[(9, 9, 8), bool] {
  %125 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
  %125.0
}

def @func_3814(%var_3805: Tensor[(11, 5, 9), float32]) -> Tensor[(11, 5, 9), float32] {
  %126 = cast(%var_3805, dtype="float32") /* ty=Tensor[(11, 5, 9), float32] */;
  rsqrt(%126) /* ty=Tensor[(11, 5, 9), float32] */
}

def @func_5807() -> Tensor[(9, 1, 8), float64] {
  %127 = @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %127.0
}

def @func_9893(%var_9888: Tensor[(14, 13, 15), float64], %var_9889: Tensor[(14, 13, 15), float64]) -> Tensor[(14, 13, 15), float64] {
  %128 = cast(%var_9889, dtype="float64") /* ty=Tensor[(14, 13, 15), float64] */;
  %129 = shape_of(%var_9888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_9888, dtype="float64") /* ty=Tensor[(14, 13, 15), float64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%130, %131) /* ty=Tensor[(14, 13, 15), float64] */
}

def @func_3645(%var_3636: Tensor[(504, 2), float64]) -> (Tensor[(9, ?, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64]) {
  %132 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %133 = cast(%var_3636, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %134 = reshape(%133, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
  %135 = @func_1836(%134) /* ty=(Tensor[(9, 14, 8), bool],) */;
  %136 = %132.0;
  %137 = %135.0;
  (%136, %137, %var_3636)
}

def @func_2987() -> Tensor[(9, 1, 8), float64] {
  %138 = @func_2870() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %138.0
}

def @func_1836(%var_1826: Tensor[(9, 14, 8), float64]) -> (Tensor[(9, 14, 8), bool],) {
  %139 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  %140 = cast(%139, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %141 = cast(%var_1826, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
  %142 = logical_or(%140, %141) /* ty=Tensor[(9, 14, 8), bool] */;
  (%142,)
}

def @func_6434(%var_6428: Tensor[(11, 8, 8), float32]) -> Tensor[(11, 8, 8), uint32] {
  %143 = @func_6028() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(11, 8, 1), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %144 = %143.1;
  %145 = cast(%144, dtype="uint32") /* ty=Tensor[(11, 8, 1), uint32] */;
  %146 = cast(%var_6428, dtype="uint32") /* ty=Tensor[(11, 8, 8), uint32] */;
  bitwise_and(%145, %146) /* ty=Tensor[(11, 8, 8), uint32] */
}

def @func_4147() -> (Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) {
  %147 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %149 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 9, 8), float64] */, dtype="bool") /* ty=Tensor[(9, 9, 8), bool] */;
  %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 9, 8), float64] */, dtype="bool") /* ty=Tensor[(9, 9, 8), bool] */;
  %151 = cast(%147, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %152 = @func_3753() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %153 = less_equal(%148, %149) /* ty=Tensor[(9, 9, 8), bool] */;
  %154 = less(%150, %151) /* ty=Tensor[(9, 9, 8), bool] */;
  %155 = %152.1;
  (%153, %154, %155)
}

def @func_5898() -> (Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) {
  %156 = @func_5154() /* ty=(Tensor[(50), float32], Tensor[(504, 2), float64], Tensor[(1008), float64]) */;
  %157 = %156.1;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %159 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %160 = reshape(%159, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %161 = @func_1999(%160) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
  %162 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %163 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %164 = cast(meta[relay.Constant][9] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %165 = reshape(%164, newshape=[]) /* ty=uint8 */;
  %166 = cast(meta[relay.Constant][9] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %167 = reshape(%166, newshape=[]) /* ty=uint8 */;
  %168 = exp(%158) /* ty=Tensor[(504, 2), float64] */;
  %169 = %161.0;
  %170 = %162.0;
  %171 = %163.0;
  %172 = @func_530(%165) /* ty=Tensor[(9, 8, 9), bool] */;
  %173 = @func_530(%167) /* ty=Tensor[(9, 8, 9), bool] */;
  (%168, %169, meta[relay.Constant][8] /* ty=Tensor[(504), float64] */, %170, %171, %172, meta[relay.Constant][9] /* ty=uint8 */, %173)
}

def @func_1857() -> Tensor[(9, 1, 8), float64] {
  @func_1097() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5470() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %174 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
  %175 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
  (%174, %175)
}

def @func_2368(%var_2358: Tensor[(11, 7, 16), float32]) -> (Tensor[(11, 7, 16), float32],) {
  %176 = cast(%var_2358, dtype="float32") /* ty=Tensor[(11, 7, 16), float32] */;
  %177 = acosh(%176) /* ty=Tensor[(11, 7, 16), float32] */;
  (%177,)
}

def @func_8744(%var_8693: Tensor[(9, 6, 8), bool], %var_8703: Tensor[(80), int16], %var_8705: Tensor[(504), float64]) -> (Tensor[(5, 4, 10), float32], Tensor[(9, 6, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(80), int16], Tensor[(5, 10), float32], Tensor[(504), float64], Tensor[(9, 1, 8), float64]) {
  %178 = @func_7668() /* ty=(Tensor[(5, 4, 10), float32],) */;
  %179 = @func_5648() /* ty=Tensor[(9, ?, 8), bool] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(9, ?, 8), float32] */;
  %181 = cast(%var_8693, dtype="float32") /* ty=Tensor[(9, 6, 8), float32] */;
  %182 = cast(%var_8703, dtype="int16") /* ty=Tensor[(80), int16] */;
  %183 = cast(%var_8703, dtype="int16") /* ty=Tensor[(80), int16] */;
  %184 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
  %185 = %178.0;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
  %187 = cast(%var_8705, dtype="float64") /* ty=Tensor[(504), float64] */;
  %188 = reshape(%182, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %189 = reshape(%183, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %190 = reshape(%184, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
  %191 = reshape(%186, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %192 = reshape(%187, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %193 = @func_2612(%188, %189, %190, %191, %192) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
  %194 = mod(%180, %181) /* ty=Tensor[(9, 6, 8), float32] */;
  %195 = %193.1;
  %196 = @func_6563() /* ty=Tensor[(9, 1, 8), float64] */;
  (%185, %194, %195, %var_8703, meta[relay.Constant][10] /* ty=Tensor[(5, 10), float32] */, %var_8705, %196)
}

def @func_6198(%var_6193: Tensor[(9, 5, 1), float64]) -> Tensor[(9, 5, 1), float64] {
  %197 = cast(%var_6193, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
  atan(%197) /* ty=Tensor[(9, 5, 1), float64] */
}

def @func_7985() -> (Tensor[(50), float32], Tensor[(9, ?, 8), bool]) {
  %198 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %199 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %200 = %199.0;
  %201 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %204 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%200, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %207 = %198.2;
  %208 = less(%205, %206) /* ty=Tensor[(9, ?, 8), bool] */;
  (%207, %208)
}

def @func_3896(%var_3875: Tensor[(50), float32], %var_3876: Tensor[(50, 4), float32]) -> (Tensor[(9, ?, 8), uint8], Tensor[(504), float64], Tensor[(40, 2), int16], Tensor[(50), float32], Tensor[(50, 4), float32], Tensor[(504), float64], Tensor[(9, ?, 8), uint16], Tensor[(9, 1, 8), float64]) {
  %209 = @func_3524() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %210 = %209.0;
  %211 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
  %212 = cast(%211, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
  %213 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%210, dtype="uint8") /* ty=Tensor[(9, ?, 8), uint8] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %216 = cast(meta[relay.Constant][11] /* ty=Tensor[(40, 2), int16] */, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
  %217 = cast(meta[relay.Constant][11] /* ty=Tensor[(40, 2), int16] */, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
  %218 = cast(%var_3875, dtype="float32") /* ty=Tensor[(50), float32] */;
  %219 = cast(%var_3876, dtype="float32") /* ty=Tensor[(50, 4), float32] */;
  %220 = cast(meta[relay.Constant][12] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %221 = reshape(%216, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %222 = reshape(%217, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %223 = reshape(%218, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
  %224 = reshape(%219, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %225 = reshape(%220, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %226 = @func_2612(%221, %222, %223, %224, %225) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
  %227 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
  %228 = cast(%227, dtype="uint16") /* ty=Tensor[(9, 1, 8), uint16] */;
  %229 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%211, dtype="uint16") /* ty=Tensor[(9, 1, 8), uint16] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %232 = @func_3829() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %233 = right_shift(%214, %215) /* ty=Tensor[(9, ?, 8), uint8] */;
  %234 = %226.5;
  %235 = bitwise_xor(%230, %231) /* ty=Tensor[(9, ?, 8), uint16] */;
  %236 = %232.0;
  (%233, %234, meta[relay.Constant][11] /* ty=Tensor[(40, 2), int16] */, %var_3875, %var_3876, meta[relay.Constant][12] /* ty=Tensor[(504), float64] */, %235, %236)
}

def @func_4654(%var_4644: Tensor[(234), int32]) -> (Tensor[(9, 1, 8), float64], Tensor[(13, 3, 6), bool], Tensor[(234), int32]) {
  %237 = cast(%var_4644, dtype="int32") /* ty=Tensor[(234), int32] */;
  %238 = cast(%var_4644, dtype="int32") /* ty=Tensor[(234), int32] */;
  %239 = reshape(%237, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %240 = reshape(%238, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %241 = @func_1015(%239, %240) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
  %242 = @func_1857() /* ty=Tensor[(9, 1, 8), float64] */;
  %243 = %241.0;
  (%242, %243, %var_4644)
}

def @func_1999(%var_1913: Tensor[(9, 7, 8), float64]) -> (Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) {
  %244 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
  %245 = cast(%244, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %246 = cast(%var_1913, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %248 = cast(%var_1913, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %249 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %250 = cast(%var_1913, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
  %251 = cast(meta[relay.Constant][13] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %252 = cast(meta[relay.Constant][13] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %253 = reshape(%251, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %254 = reshape(%252, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %255 = @func_1015(%253, %254) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
  %256 = logical_or(%245, %246) /* ty=Tensor[(9, 7, 8), bool] */;
  %257 = greater(%247, %248) /* ty=Tensor[(9, 7, 8), bool] */;
  %258 = %249.0;
  %259 = erf(%250) /* ty=Tensor[(9, 7, 8), float32] */;
  %260 = %255.1;
  %261 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  (%256, %257, %258, %259, %260, meta[relay.Constant][13] /* ty=Tensor[(234), int32] */, %261)
}

def @func_5668() -> (Tensor[(50), float32],) {
  %262 = @func_2713() /* ty=(Tensor[(50), float32],) */;
  %263 = %262.0;
  (%263,)
}

def @func_5534() -> Tensor[(9, 1, 8), float64] {
  %264 = @func_2870() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %264.0
}

def @func_1579() -> (Tensor[(9, 1, 8), float64],) {
  %265 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  (%265,)
}

def @func_7920() -> (Tensor[(9, 1, 8), float64],) {
  %266 = @func_2458() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %267 = %266.0;
  (%267,)
}

def @func_9382() -> (Tensor[(6, 3, 11), float32],) {
  %268 = @func_3713() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %269 = %268.1;
  (%269,)
}

def @func_2458() -> (Tensor[(9, 1, 8), float64],) {
  %270 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%270,)
}

def @func_3085() -> Tensor[(9, 1, 8), float64] {
  @func_2987() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_7189() -> (Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(512, 2), uint16]) {
  %271 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %272 = cast(meta[relay.Constant][14] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %273 = cast(meta[relay.Constant][15] /* ty=Tensor[(512, 2), int8] */, dtype="int8") /* ty=Tensor[(512, 2), int8] */;
  %274 = cast(meta[relay.Constant][16] /* ty=Tensor[(1430), uint16] */, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
  %275 = reshape(%272, newshape=[]) /* ty=int8 */;
  %276 = reshape(%273, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), int8] */;
  %277 = reshape(%274, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
  %278 = @func_4092(%275, %276, %277) /* ty=(Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %279 = cast(meta[relay.Constant][15] /* ty=Tensor[(512, 2), int8] */, dtype="uint16") /* ty=Tensor[(512, 2), uint16] */;
  %280 = cast(meta[relay.Constant][14] /* ty=int8 */, dtype="uint16") /* ty=uint16 */;
  %281 = %271.0;
  %282 = %278.1;
  %283 = maximum(%279, %280) /* ty=Tensor[(512, 2), uint16] */;
  (%281, %282, meta[relay.Constant][16] /* ty=Tensor[(1430), uint16] */, %283)
}

def @func_6490() -> (Tensor[(9, 1, 8), float32],) {
  %284 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %285 = %284.0;
  (%285,)
}

def @func_9708() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %286 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %287 = %286.0;
  %288 = @func_8428() /* ty=Tensor[(9, 1, 8), float64] */;
  (%287, %288)
}

def @func_7087() -> (Tensor[(4, 10, 12), float32],) {
  %289 = @func_5107() /* ty=(Tensor[(9, ?, 8), bool], Tensor[(5, 4, 10), float32], Tensor[(9, ?, 8), float64], Tensor[(4, 10, 12), float32]) */;
  %290 = %289.3;
  (%290,)
}

def @func_2113(%var_2103: Tensor[(1680), int16]) -> (Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) {
  %291 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %292 = %291.0;
  %293 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
  %294 = cast(%293, dtype="int16") /* ty=Tensor[(9, 1, 8), int16] */;
  %295 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%292, dtype="int16") /* ty=Tensor[(9, 1, 8), int16] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %298 = cast(%var_2103, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %299 = reshape(%298, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), int16] */;
  %300 = @func_1649(%299) /* ty=(Tensor[(16, 7, 15), int16],) */;
  %301 = add(%296, %297) /* ty=Tensor[(9, ?, 8), int16] */;
  %302 = %300.0;
  (%301, %302, %var_2103)
}

def @func_4401() -> (Tensor[(9, 1, 8), float64],) {
  %303 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %304 = %303.0;
  (%304,)
}

def @func_8306(%var_8199: Tensor[(16, 15, 9), int64], %var_8249: Tensor[(200), float32]) -> (Tensor[(16, 15, 9), bool], Tensor[(9, 1, 8), float64], Tensor[(16, 15, 9), float32], Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(1430), uint16], Tensor[(9, 1, 8), float32]) {
  %305 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 15, 1), int64] */, dtype="bool") /* ty=Tensor[(16, 15, 1), bool] */;
  %306 = cast(%var_8199, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %307 = @func_3966() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %308 = cast(%var_8199, dtype="float32") /* ty=Tensor[(16, 15, 9), float32] */;
  %309 = cast(%var_8249, dtype="float32") /* ty=Tensor[(200), float32] */;
  %310 = reshape(%309, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
  %311 = @func_1614(%310) /* ty=(Tensor[(100, 2), bool],) */;
  %312 = @func_6286() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], int8, Tensor[(1430), uint16], Tensor[(9, 1, 8), float64]) */;
  %313 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %314 = greater_equal(%305, %306) /* ty=Tensor[(16, 15, 9), bool] */;
  %315 = %307.0;
  %316 = log2(%308) /* ty=Tensor[(16, 15, 9), float32] */;
  %317 = %311.0;
  %318 = %312.3;
  %319 = %313.0;
  (%314, %315, %316, %317, %var_8249, %318, %319)
}

def @func_1614(%var_1602: Tensor[(100, 2), float32]) -> (Tensor[(100, 2), bool],) {
  %320 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %321 = %320.3;
  %322 = cast(%var_1602, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(2), int32] */;
  %324 = cast(%321, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %326 = mod(%324, %325) /* ty=Tensor[(100, 2), float32] */;
  %327 = cast(%321, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(2), int32] */;
  %329 = cast(%326, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %331 = less_equal(%329, %330) /* ty=Tensor[(100, 2), bool] */;
  (%331,)
}

def @func_3330(%var_3321: Tensor[(2, 9, 2), float32], %var_3322: Tensor[(2, 9, 2), float32]) -> (Tensor[(2, 9, 2), float32],) {
  %332 = cast(%var_3322, dtype="float32") /* ty=Tensor[(2, 9, 2), float32] */;
  %333 = shape_of(%var_3321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_3321, dtype="float32") /* ty=Tensor[(2, 9, 2), float32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %336 = mod(%334, %335) /* ty=Tensor[(2, 9, 2), float32] */;
  (%336,)
}

def @func_2338(%var_2264: Tensor[(10, 13, 11), uint16], %var_2281: Tensor[(1680), int16]) -> (Tensor[(10, 13, 11), uint16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64]) {
  %337 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 13, 11), uint16] */, dtype="uint16") /* ty=Tensor[(10, 13, 11), uint16] */;
  %338 = shape_of(%var_2264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_2264, dtype="uint16") /* ty=Tensor[(10, 13, 11), uint16] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %341 = cast(%var_2281, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %342 = reshape(%341, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
  %343 = @func_2113(%342) /* ty=(Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) */;
  %344 = multiply(%339, %340) /* ty=Tensor[(10, 13, 11), uint16] */;
  %345 = %343.1;
  %346 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  (%344, %345, %var_2281, %346)
}

def @func_5706() -> (Tensor[(234), int32], Tensor[(9, 1, 8), float64]) {
  %347 = @func_3107() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) */;
  %348 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %349 = %347.1;
  %350 = %348.0;
  (%349, %350)
}

def @func_9302() -> (Tensor[(9, 1, 8), float64],) {
  %351 = @func_5807() /* ty=Tensor[(9, 1, 8), float64] */;
  (%351,)
}

def @func_1174() -> (Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) {
  %352 = cast(meta[relay.Constant][19] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %353 = cast(meta[relay.Constant][20] /* ty=Tensor[(100, 2), float32] */, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %354 = reshape(%352, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), float32] */;
  %355 = reshape(%353, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
  %356 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  %357 = @func_1112(%354, %355) /* ty=Tensor[(5, 4, 10), float32] */;
  (%356, %357, meta[relay.Constant][19] /* ty=Tensor[(50), float32] */, meta[relay.Constant][20] /* ty=Tensor[(100, 2), float32] */)
}

def @func_7376() -> (Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) {
  %358 = @func_5668() /* ty=(Tensor[(50), float32],) */;
  %359 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %361 = sin(%360) /* ty=Tensor[(100, 2), float64] */;
  %362 = cast(%361, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %363 = log2(%362) /* ty=Tensor[(100, 2), float64] */;
  %364 = cast(%361, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(2), int32] */;
  %366 = cast(%363, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %368 = cast(meta[relay.Constant][21] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %369 = reshape(%368, newshape=[]) /* ty=uint8 */;
  %370 = @func_1525(%369) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8) */;
  %371 = @func_5898() /* ty=(Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) */;
  %372 = @func_4362() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %373 = cast(%363, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %374 = acos(%373) /* ty=Tensor[(100, 2), float32] */;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %376 = atan(%375) /* ty=Tensor[(100, 2), float32] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %378 = exp(%377) /* ty=Tensor[(100, 2), float32] */;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %380 = %358.0;
  %381 = floor_divide(%366, %367) /* ty=Tensor[(100, 2), float64] */;
  %382 = %370.0;
  %383 = %371.5;
  %384 = %372.0;
  %385 = cos(%379) /* ty=Tensor[(100, 2), float32] */;
  (%380, %381, %382, meta[relay.Constant][21] /* ty=uint8 */, %383, %384, %385)
}

def @func_9172() -> Tensor[(9, 1, 8), float64] {
  %386 = @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %386.0
}

def @func_1097() -> Tensor[(9, 1, 8), float64] {
  %387 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  cos(%387) /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1708(%var_1681: Tensor[(9, 4, 8), float64]) -> (Tensor[(9, 4, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(9, 3, 8), float64]) {
  %388 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %390 = cast(%var_1681, dtype="float64") /* ty=Tensor[(9, 4, 8), float64] */;
  %391 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %392 = %391.2;
  %393 = cast(%392, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %394 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 12, 8), float64] */, dtype="bool") /* ty=Tensor[(9, 12, 8), bool] */;
  %395 = cast(%388, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %396 = sigmoid(%395) /* ty=Tensor[(9, 1, 8), float64] */;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %398 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %399 = floor_divide(%389, %390) /* ty=Tensor[(9, 4, 8), float64] */;
  %400 = greater(%393, %394) /* ty=Tensor[(9, 12, 8), bool] */;
  %401 = power(%397, %398) /* ty=Tensor[(9, 3, 8), float64] */;
  (%399, %400, %401)
}

def @func_10292() -> (Tensor[(4, 10, 12), float64], Tensor[(9, 8, 9), float64]) {
  %402 = @func_5898() /* ty=(Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) */;
  %403 = %402.7;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(9, 8, 9), float64] */;
  %405 = asin(%404) /* ty=Tensor[(9, 8, 9), float64] */;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  %407 = exp(%406) /* ty=Tensor[(9, 8, 9), float32] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(9, 8, 9), float64] */;
  %409 = @func_6329() /* ty=Tensor[(4, 10, 12), float64] */;
  %410 = sigmoid(%408) /* ty=Tensor[(9, 8, 9), float64] */;
  (%409, %410)
}

def @func_8188(%var_8154: Tensor[(100, 2), float32]) -> (Tensor[(100, 2), bool], Tensor[(100, 2), bool], Tensor[(100, 2), uint16]) {
  %411 = @func_5211() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
  %412 = %411.1;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %414 = log(%413) /* ty=Tensor[(100, 2), float32] */;
  %415 = cast(%412, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(2), int32] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %419 = cast(%var_8154, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %420 = shape_of(%412, dtype="int32") /* ty=Tensor[(2), int32] */;
  %421 = cast(%412, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %423 = cast(meta[relay.Constant][25] /* ty=Tensor[(100, 2), float32] */, dtype="uint16") /* ty=Tensor[(100, 2), uint16] */;
  %424 = shape_of(%412, dtype="int32") /* ty=Tensor[(2), int32] */;
  %425 = cast(%412, dtype="uint16") /* ty=Tensor[(100, 2), uint16] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %427 = greater(%417, %418) /* ty=Tensor[(100, 2), bool] */;
  %428 = equal(%421, %422) /* ty=Tensor[(100, 2), bool] */;
  %429 = bitwise_xor(%425, %426) /* ty=Tensor[(100, 2), uint16] */;
  (%427, %428, %429)
}

def @func_6246() -> (Tensor[(9, 7, 8), float32], Tensor[(9, 1, 8), float32], Tensor[(9, 9, 8), bool]) {
  %430 = @func_3713() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
  %433 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 7, 8), float64] */, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
  %434 = cast(%431, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
  %435 = floor_mod(%432, %433) /* ty=Tensor[(9, 7, 8), float32] */;
  %436 = erf(%434) /* ty=Tensor[(9, 1, 8), float32] */;
  %437 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
  (%435, %436, %437)
}

def @func_5648() -> Tensor[(9, ?, 8), bool] {
  %438 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %439 = %438.2;
  %440 = @func_5470() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %441 = %440.1;
  %442 = cast(%441, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %443 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%439, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%444, %445) /* ty=Tensor[(9, ?, 8), bool] */
}

def @func_9205() -> Tensor[(9, 1, 8), float64] {
  @func_5295() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_8656() -> (Tensor[(9, 1, 8), float64],) {
  %446 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
  (%446,)
}

def @func_9247() -> (Tensor[(9, ?, 8), float64],) {
  %447 = @func_7550() /* ty=Tensor[(9, ?, 8), float64] */;
  (%447,)
}

def @func_5107() -> (Tensor[(9, ?, 8), bool], Tensor[(5, 4, 10), float32], Tensor[(9, ?, 8), float64], Tensor[(4, 10, 12), float32]) {
  %448 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %449 = %448.0;
  %450 = @func_3659() /* ty=Tensor[(9, 1, 8), float64] */;
  %451 = cast(%450, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %452 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%449, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %456 = cast(%449, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %457 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%450, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %460 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
  %463 = less_equal(%453, %454) /* ty=Tensor[(9, ?, 8), bool] */;
  %464 = %455.1;
  %465 = floor_divide(%458, %459) /* ty=Tensor[(9, ?, 8), float64] */;
  %466 = log(%462) /* ty=Tensor[(4, 10, 12), float32] */;
  (%463, %464, %465, %466)
}

def @func_4324() -> Tensor[(9, 1, 8), float64] {
  @func_3085() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5295() -> Tensor[(9, 1, 8), float64] {
  %467 = @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %467.0
}

def @func_6563() -> Tensor[(9, 1, 8), float64] {
  @func_5807() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_7014() -> (Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(1008), float64], Tensor[(50), float32]) {
  %468 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %469 = cast(meta[relay.Constant][27] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %470 = cast(meta[relay.Constant][28] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %471 = reshape(%469, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %472 = reshape(%470, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %473 = @func_5626(%471, %472) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(30, 9), float32], Tensor[(1008), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64]) */;
  %474 = %468.0;
  %475 = %473.6;
  (%474, %475, meta[relay.Constant][27] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][28] /* ty=Tensor[(50), float32] */)
}

def @func_3300() -> (Tensor[(9, 1, 8), float64],) {
  %476 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
  (%476,)
}

def @func_7580() -> (Tensor[(4, 10, 12), float32], Tensor[(9, 1, 8), float32]) {
  %477 = @func_7087() /* ty=(Tensor[(4, 10, 12), float32],) */;
  %478 = @func_6490() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %479 = %477.0;
  %480 = %478.0;
  (%479, %480)
}

def @func_9631() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 9, 8), bool]) {
  %481 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %482 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
  (%481, %482)
}

def @func_7639() -> Tensor[(9, 1, 8), float64] {
  @func_4816() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_9413(%var_9386: Tensor[(10, 9, 11), float64]) -> (Tensor[(10, 9, 11), float64],) {
  %483 = cast(%var_9386, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %484 = acosh(%483) /* ty=Tensor[(10, 9, 11), float64] */;
  (%484,)
}

def @func_8582() -> Tensor[(9, 9, 8), bool] {
  @func_4578() /* ty=Tensor[(9, 9, 8), bool] */
}

def @func_6612() -> (Tensor[(9, 1, 8), float64],) {
  %485 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  (%485,)
}

def @func_123(%var_119: Tensor[(14, 2, 12), float64]) -> Tensor[(14, 2, 12), float64] {
  %486 = cast(%var_119, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  log2(%486) /* ty=Tensor[(14, 2, 12), float64] */
}

def @func_2612(%var_2554: Tensor[(8, 5, 2), int16], %var_2555: Tensor[(8, 5, 2), int16], %var_2570: Tensor[(50, 1), float32], %var_2571: Tensor[(200), float32], %var_2575: Tensor[(504), float64]) -> (Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) {
  %487 = cast(%var_2555, dtype="bool") /* ty=Tensor[(8, 5, 2), bool] */;
  %488 = shape_of(%var_2554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_2554, dtype="bool") /* ty=Tensor[(8, 5, 2), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = cast(meta[relay.Constant][29] /* ty=Tensor[(1232, 1), float32] */, dtype="float32") /* ty=Tensor[(1232, 1), float32] */;
  %492 = reshape(%491, newshape=[11, 7, 16]) /* ty=Tensor[(11, 7, 16), float32] */;
  %493 = @func_2368(%492) /* ty=(Tensor[(11, 7, 16), float32],) */;
  %494 = cast(%var_2575, dtype="float64") /* ty=Tensor[(504), float64] */;
  %495 = reshape(%494, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %496 = @func_1999(%495) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
  %497 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %498 = cast(%var_2570, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
  %499 = cast(%var_2571, dtype="float32") /* ty=Tensor[(200), float32] */;
  %500 = reshape(%498, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), float32] */;
  %501 = reshape(%499, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
  %502 = @func_1112(%500, %501) /* ty=Tensor[(5, 4, 10), float32] */;
  %503 = cast(%var_2571, dtype="bool") /* ty=Tensor[(200), bool] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="bool") /* ty=Tensor[(5, 4, 10), bool] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %507 = greater(%489, %490) /* ty=Tensor[(8, 5, 2), bool] */;
  %508 = %493.0;
  %509 = %496.1;
  %510 = %497.0;
  %511 = equal(%505, %506) /* ty=Tensor[(5, 4, 10), bool] */;
  (%507, %508, meta[relay.Constant][29] /* ty=Tensor[(1232, 1), float32] */, %var_2570, %509, %var_2575, %510, %511)
}

def @func_8417(%var_8415: Tensor[(1, 288), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(1, 288), float64]) {
  %512 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %513 = cast(%var_8415, dtype="float64") /* ty=Tensor[(1, 288), float64] */;
  %514 = reshape(%513, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float64] */;
  %515 = @func_1708(%514) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(9, 3, 8), float64]) */;
  %516 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %517 = %512.0;
  %518 = %515.1;
  (%516, %517, %518, %var_8415)
}

def @func_1720() -> Tensor[(100, 2), float32] {
  %519 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %519.0
}

def @func_1649(%var_1635: Tensor[(16, 7, 15), int16]) -> (Tensor[(16, 7, 15), int16],) {
  %520 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 1, 1), int16] */, dtype="int16") /* ty=Tensor[(16, 1, 1), int16] */;
  %521 = cast(%var_1635, dtype="int16") /* ty=Tensor[(16, 7, 15), int16] */;
  %522 = left_shift(%520, %521) /* ty=Tensor[(16, 7, 15), int16] */;
  (%522,)
}

def @func_2036() -> (Tensor[(9, ?, 8), float64],) {
  %523 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %524 = %523.0;
  %525 = @func_1857() /* ty=Tensor[(9, 1, 8), float64] */;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %527 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%524, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %530 = mod(%528, %529) /* ty=Tensor[(9, ?, 8), float64] */;
  (%530,)
}

def @func_149(%var_140: Tensor[(6, 3, 11), float32]) -> (Tensor[(6, 3, 11), float32],) {
  %531 = cast(%var_140, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
  %532 = tan(%531) /* ty=Tensor[(6, 3, 11), float32] */;
  (%532,)
}

def @func_8428() -> Tensor[(9, 1, 8), float64] {
  %533 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
  %533.2
}

def @func_3781() -> Tensor[(9, 1, 8), float64] {
  @func_3085() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_2499() -> Tensor[(9, 1, 8), float64] {
  @func_1308() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_8017() -> (Tensor[(9, 1, 8), float64],) {
  %534 = @func_5534() /* ty=Tensor[(9, 1, 8), float64] */;
  (%534,)
}

def @func_1308() -> Tensor[(9, 1, 8), float64] {
  @func_1251() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_9954(%var_9914: Tensor[(704), float32], %var_9921: Tensor[(18), uint16], %var_9922: Tensor[(234), int32]) -> (Tensor[(11, 8, 8), uint32], Tensor[(704), float32], Tensor[(18), uint16], Tensor[(18), uint16], Tensor[(234), int32], Tensor[(4, 10, 12), float64], Tensor[(6, 3, 11), float32], Tensor[(200), float32], Tensor[(50, 4), float32], Tensor[(9, 1, 8), float64]) {
  %535 = cast(%var_9914, dtype="float32") /* ty=Tensor[(704), float32] */;
  %536 = reshape(%535, newshape=[11, 8, 8]) /* ty=Tensor[(11, 8, 8), float32] */;
  %537 = cast(%var_9921, dtype="uint16") /* ty=Tensor[(18), uint16] */;
  %538 = cast(%var_9922, dtype="int32") /* ty=Tensor[(234), int32] */;
  %539 = reshape(%537, newshape=[18]) /* ty=Tensor[(18), uint16] */;
  %540 = reshape(%538, newshape=[234]) /* ty=Tensor[(234), int32] */;
  %541 = @func_6364(%539, %540) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(234), bool], Tensor[(18), uint16], Tensor[(234), int32]) */;
  %542 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %543 = @func_9382() /* ty=(Tensor[(6, 3, 11), float32],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
  %546 = cast(meta[relay.Constant][31] /* ty=Tensor[(50, 4), float32] */, dtype="float32") /* ty=Tensor[(50, 4), float32] */;
  %547 = reshape(%546, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %548 = @func_3508(%547) /* ty=(Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(9, ?, 8), bool]) */;
  %549 = @func_6434(%536) /* ty=Tensor[(11, 8, 8), uint32] */;
  %550 = %541.3;
  %551 = %542.0;
  %552 = asin(%545) /* ty=Tensor[(6, 3, 11), float32] */;
  %553 = %548.1;
  %554 = @func_4816() /* ty=Tensor[(9, 1, 8), float64] */;
  (%549, %var_9914, %550, %var_9921, %var_9922, %551, %552, %553, meta[relay.Constant][31] /* ty=Tensor[(50, 4), float32] */, %554)
}

def @func_2870() -> (Tensor[(9, 1, 8), float64],) {
  %555 = @func_2458() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %556 = %555.0;
  (%556,)
}

def @func_1015(%var_1004: Tensor[(13, 3, 6), int32], %var_1005: Tensor[(13, 3, 6), int32]) -> (Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) {
  %557 = cast(%var_1005, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %558 = shape_of(%var_1004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%var_1004, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %561 = cast(%var_1004, dtype="float32") /* ty=Tensor[(13, 3, 6), float32] */;
  %562 = less(%559, %560) /* ty=Tensor[(13, 3, 6), bool] */;
  %563 = asin(%561) /* ty=Tensor[(13, 3, 6), float32] */;
  (%562, %563)
}

def @func_9746() -> Tensor[(9, 1, 8), float64] {
  %564 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %564.2
}

def @func_3524() -> (Tensor[(9, ?, 8), float64],) {
  %565 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %566 = %565.3;
  (%566,)
}

def @func_6041() -> Tensor[(9, 1, 8), float64] {
  %567 = @func_3989() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %567.0
}

def @func_3713() -> (Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %568 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %569 = cast(meta[relay.Constant][32] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %570 = reshape(%569, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), float32] */;
  %571 = @func_149(%570) /* ty=(Tensor[(6, 3, 11), float32],) */;
  %572 = %568.2;
  %573 = %571.0;
  %574 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
  %575 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
  %576 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  (%572, %573, meta[relay.Constant][32] /* ty=Tensor[(198), float32] */, %574, %575, %576)
}

def @func_7789(%var_7695: uint8, %var_7773: Tensor[(1680), int16]) -> (Tensor[(9, ?, 8), bool], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 9, 8), bool], Tensor[(10, 20), float32], Tensor[(512, 2), uint16], Tensor[(9, ?, 8), int16], Tensor[(1680), int16], Tensor[(100, 2), float32]) {
  %577 = cast(%var_7695, dtype="uint8") /* ty=uint8 */;
  %578 = reshape(%577, newshape=[]) /* ty=uint8 */;
  %579 = @func_7189() /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(512, 2), uint16]) */;
  %580 = cast(%var_7773, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %581 = reshape(%580, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
  %582 = @func_2113(%581) /* ty=(Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) */;
  %583 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 20), float32] */, dtype="float32") /* ty=Tensor[(10, 20), float32] */;
  %584 = reshape(%583, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
  %585 = @func_1614(%584) /* ty=(Tensor[(100, 2), bool],) */;
  %586 = %585.0;
  %587 = cast(%586, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %588 = @func_5648() /* ty=Tensor[(9, ?, 8), bool] */;
  %589 = @func_530(%578) /* ty=Tensor[(9, 8, 9), bool] */;
  %590 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
  %591 = %579.3;
  %592 = %582.0;
  %593 = atanh(%587) /* ty=Tensor[(100, 2), float32] */;
  (%588, %589, %var_7695, %590, meta[relay.Constant][33] /* ty=Tensor[(10, 20), float32] */, %591, %592, %var_7773, %593)
}

def @func_4362() -> (Tensor[(9, ?, 8), float64],) {
  %594 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %595 = %594.3;
  (%595,)
}

def @func_1745() -> (Tensor[(9, 1, 8), float64],) {
  %596 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%596,)
}

def @func_2713() -> (Tensor[(50), float32],) {
  %597 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %598 = %597.2;
  (%598,)
}

def @func_4625() -> (Tensor[(9, 1, 8), float64],) {
  %599 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %600 = %599.0;
  (%600,)
}

def @func_4887() -> (Tensor[(4, 10, 12), float64],) {
  %601 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %602 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %605 = power(%603, %604) /* ty=Tensor[(4, 10, 12), float64] */;
  (%605,)
}

def @func_4217(%var_4199: Tensor[(9, 14, 8), float64]) -> (Tensor[(9, 14, 8), int8], Tensor[(9, 1, 8), float64], Tensor[(30, 9), float32], Tensor[(4, 420), int16], Tensor[(168, 2), float64]) {
  %606 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  %607 = cast(%606, dtype="int8") /* ty=Tensor[(9, 1, 8), int8] */;
  %608 = cast(%var_4199, dtype="int8") /* ty=Tensor[(9, 14, 8), int8] */;
  %609 = cast(meta[relay.Constant][36] /* ty=Tensor[(30, 9), float32] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %610 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 420), int16] */, dtype="int16") /* ty=Tensor[(4, 420), int16] */;
  %611 = cast(meta[relay.Constant][38] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
  %612 = reshape(%609, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), float32] */;
  %613 = reshape(%610, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
  %614 = reshape(%611, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %615 = @func_3376(%612, %613, %614) /* ty=(Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) */;
  %616 = bitwise_or(%607, %608) /* ty=Tensor[(9, 14, 8), int8] */;
  %617 = %615.1;
  (%616, %617, meta[relay.Constant][36] /* ty=Tensor[(30, 9), float32] */, meta[relay.Constant][37] /* ty=Tensor[(4, 420), int16] */, meta[relay.Constant][38] /* ty=Tensor[(168, 2), float64] */)
}

def @func_8508(%var_8474: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), bool], Tensor[(9, 1, 8), float32]) {
  %618 = @func_6563() /* ty=Tensor[(9, 1, 8), float64] */;
  %619 = cast(%618, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %620 = cast(%var_8474, dtype="bool") /* ty=Tensor[(9, 12, 8), bool] */;
  %621 = cast(%618, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
  %622 = logical_and(%619, %620) /* ty=Tensor[(9, 12, 8), bool] */;
  %623 = asin(%621) /* ty=Tensor[(9, 1, 8), float32] */;
  (%622, %623)
}

def @func_9649(%var_9644: Tensor[(200), float32], %var_9645: Tensor[(1232), float32]) -> (Tensor[(9, 7, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(200), float32], Tensor[(1232), float32]) {
  %624 = @func_6246() /* ty=(Tensor[(9, 7, 8), float32], Tensor[(9, 1, 8), float32], Tensor[(9, 9, 8), bool]) */;
  %625 = cast(%var_9644, dtype="float32") /* ty=Tensor[(200), float32] */;
  %626 = cast(%var_9645, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %627 = reshape(%625, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
  %628 = reshape(%626, newshape=[1232]) /* ty=Tensor[(1232), float32] */;
  %629 = @func_9002(%627, %628) /* ty=(Tensor[(11, 7, 16), float32], Tensor[(1232), float32], Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32], Tensor[(100, 2), float32]) */;
  %630 = %624.0;
  %631 = %629.0;
  (%630, %631, %var_9644, %var_9645)
}

def @func_8838(%var_8818: Tensor[(80), int16], %var_8819: Tensor[(50, 1), float32], %var_8821: Tensor[(504), float64]) -> (Tensor[(4, 10, 12), float32], Tensor[(50, 1), float32], Tensor[(80), int16], Tensor[(50, 1), float32], Tensor[(200), float32], Tensor[(504), float64]) {
  %632 = @func_7087() /* ty=(Tensor[(4, 10, 12), float32],) */;
  %633 = cast(%var_8818, dtype="int16") /* ty=Tensor[(80), int16] */;
  %634 = cast(%var_8818, dtype="int16") /* ty=Tensor[(80), int16] */;
  %635 = cast(%var_8819, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
  %636 = cast(meta[relay.Constant][39] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %637 = cast(%var_8821, dtype="float64") /* ty=Tensor[(504), float64] */;
  %638 = reshape(%633, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %639 = reshape(%634, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %640 = reshape(%635, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
  %641 = reshape(%636, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %642 = reshape(%637, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %643 = @func_2612(%638, %639, %640, %641, %642) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
  %644 = %632.0;
  %645 = %643.3;
  (%644, %645, %var_8818, %var_8819, meta[relay.Constant][39] /* ty=Tensor[(200), float32] */, %var_8821)
}

def @func_9273() -> (Tensor[(9, 1, 8), float64],) {
  %646 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%646,)
}

def @func_5211() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %647 = @func_2816() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %648 = %647.0;
  %649 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  (%648, %649)
}

def @func_10329() -> (Tensor[(6, 3, 11), float32],) {
  %650 = @func_9382() /* ty=(Tensor[(6, 3, 11), float32],) */;
  %651 = %650.0;
  (%651,)
}

def @func_4988() -> (Tensor[(9, 1, 8), float32], Tensor[(100, 2), float32]) {
  %652 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %653 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %655 = %652.0;
  %656 = sinh(%654) /* ty=Tensor[(100, 2), float32] */;
  (%655, %656)
}

def @func_9234() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float32]) {
  %657 = @func_3829() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %658 = @func_4988() /* ty=(Tensor[(9, 1, 8), float32], Tensor[(100, 2), float32]) */;
  %659 = %657.0;
  %660 = %658.0;
  (%659, %660)
}

def @func_5411(%var_5398: int8, %var_5400: Tensor[(1430), uint16]) -> (Tensor[(9, 9, 8), bool], Tensor[(8, 8, 16), int8], int8, Tensor[(1024), int8], Tensor[(1430), uint16]) {
  %661 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
  %662 = cast(%var_5398, dtype="int8") /* ty=int8 */;
  %663 = cast(meta[relay.Constant][40] /* ty=Tensor[(1024), int8] */, dtype="int8") /* ty=Tensor[(1024), int8] */;
  %664 = cast(%var_5400, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
  %665 = reshape(%662, newshape=[]) /* ty=int8 */;
  %666 = reshape(%663, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), int8] */;
  %667 = reshape(%664, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
  %668 = @func_4092(%665, %666, %667) /* ty=(Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %669 = %661.0;
  %670 = %668.0;
  (%669, %670, %var_5398, meta[relay.Constant][40] /* ty=Tensor[(1024), int8] */, %var_5400)
}

def @func_7436(%var_7395: Tensor[(1680), int16]) -> (Tensor[(9, 1, 8), float64], Tensor[(1680), int16], Tensor[(270), float32], Tensor[(1680), int16], Tensor[(336), float64]) {
  %671 = cast(meta[relay.Constant][41] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %672 = cast(%var_7395, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %673 = cast(meta[relay.Constant][42] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %674 = reshape(%671, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), float32] */;
  %675 = reshape(%672, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
  %676 = reshape(%673, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %677 = @func_3376(%674, %675, %676) /* ty=(Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) */;
  %678 = @func_3781() /* ty=Tensor[(9, 1, 8), float64] */;
  %679 = %677.3;
  (%678, %679, meta[relay.Constant][41] /* ty=Tensor[(270), float32] */, %var_7395, meta[relay.Constant][42] /* ty=Tensor[(336), float64] */)
}

def @func_2177() -> Tensor[(9, 1, 8), float64] {
  @func_1671() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1538() -> (Tensor[(9, 1, 8), float64],) {
  %680 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
  (%680,)
}

def @func_2259(%var_2234: Tensor[(2, 15, 12), float64], %var_2241: Tensor[(336), float64]) -> (Tensor[(2, 15, 12), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(9, 1, 8), float64]) {
  %681 = cast(%var_2234, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
  %682 = cast(%var_2241, dtype="float64") /* ty=Tensor[(336), float64] */;
  %683 = reshape(%682, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %684 = sinh(%681) /* ty=Tensor[(2, 15, 12), float64] */;
  %685 = @func_123(%683) /* ty=Tensor[(14, 2, 12), float64] */;
  %686 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  (%684, %685, %var_2241, %686)
}

def @func_1323() -> Tensor[(9, 1, 8), float64] {
  @func_1251() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_10117() -> Tensor[(9, 1, 8), float64] {
  @func_1251() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1112(%var_1107: Tensor[(5, 1, 10), float32], %var_1108: Tensor[(5, 4, 10), float32]) -> Tensor[(5, 4, 10), float32] {
  %687 = cast(%var_1107, dtype="float32") /* ty=Tensor[(5, 1, 10), float32] */;
  %688 = cast(%var_1108, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
  mod(%687, %688) /* ty=Tensor[(5, 4, 10), float32] */
}

def @func_10183(%var_10169: Tensor[(9, 7, 8), float64], %var_10176: Tensor[(9, 6, 8), float64]) -> (Tensor[(9, 7, 8), uint8], Tensor[(9, 6, 8), bool]) {
  %689 = @func_2816() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
  %692 = cast(%var_10169, dtype="uint8") /* ty=Tensor[(9, 7, 8), uint8] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %694 = cast(%var_10176, dtype="bool") /* ty=Tensor[(9, 6, 8), bool] */;
  %695 = bitwise_xor(%691, %692) /* ty=Tensor[(9, 7, 8), uint8] */;
  %696 = less(%693, %694) /* ty=Tensor[(9, 6, 8), bool] */;
  (%695, %696)
}

def @func_530(%var_525: uint8) -> Tensor[(9, 8, 9), bool] {
  %697 = cast(%var_525, dtype="bool") /* ty=bool */;
  %698 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 8, 9), uint8] */, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  equal(%697, %698) /* ty=Tensor[(9, 8, 9), bool] */
}

def @func_4489(%var_4454: Tensor[(360), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(336), float64], Tensor[(360), float64], Tensor[(2, 168), float64], Tensor[(9, 1, 8), float64]) {
  %699 = cast(%var_4454, dtype="float64") /* ty=Tensor[(360), float64] */;
  %700 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 168), float64] */, dtype="float64") /* ty=Tensor[(2, 168), float64] */;
  %701 = reshape(%699, newshape=[2, 15, 12]) /* ty=Tensor[(2, 15, 12), float64] */;
  %702 = reshape(%700, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %703 = @func_2259(%701, %702) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(9, 1, 8), float64]) */;
  %704 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %705 = %703.2;
  %706 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  (%704, %705, %var_4454, meta[relay.Constant][44] /* ty=Tensor[(2, 168), float64] */, %706)
}

def @func_2816() -> (Tensor[(9, 1, 8), float64],) {
  %707 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%707,)
}

def @func_3966() -> (Tensor[(9, 1, 8), float64],) {
  %708 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %709 = %708.1;
  (%709,)
}

def @func_5789(%var_5767: Tensor[(1, 3, 6), uint16], %var_5782: Tensor[(234), int32]) -> (Tensor[(6, 3, 6), bool], Tensor[(13, 3, 6), bool], Tensor[(234), bool]) {
  %710 = cast(%var_5767, dtype="bool") /* ty=Tensor[(1, 3, 6), bool] */;
  %711 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 3, 6), uint16] */, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %712 = cast(meta[relay.Constant][46] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %713 = cast(meta[relay.Constant][46] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %714 = reshape(%712, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %715 = reshape(%713, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %716 = @func_1015(%714, %715) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
  %717 = cast(%var_5782, dtype="bool") /* ty=Tensor[(234), bool] */;
  %718 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %719 = cast(meta[relay.Constant][46] /* ty=Tensor[(234), int32] */, dtype="bool") /* ty=Tensor[(234), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?), bool] */;
  %721 = greater(%710, %711) /* ty=Tensor[(6, 3, 6), bool] */;
  %722 = %716.0;
  %723 = greater_equal(%719, %720) /* ty=Tensor[(234), bool] */;
  (%721, %722, %723)
}

def @func_9480() -> (Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) {
  %724 = @func_3989() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %725 = @func_8096() /* ty=Tensor[(9, ?, 8), float64] */;
  %726 = %724.0;
  (%725, %726)
}

def @func_9611(%var_9606: Tensor[(360), float64]) -> (Tensor[(50), float32], Tensor[(9, 5, 8), bool], Tensor[(360), float64]) {
  %727 = @func_2713() /* ty=(Tensor[(50), float32],) */;
  %728 = cast(%var_9606, dtype="float64") /* ty=Tensor[(360), float64] */;
  %729 = reshape(%728, newshape=[9, 5, 8]) /* ty=Tensor[(9, 5, 8), float64] */;
  %730 = @func_5324(%729) /* ty=(Tensor[(9, 5, 8), bool],) */;
  %731 = %727.0;
  %732 = %730.0;
  (%731, %732, %var_9606)
}

def @func_5324(%var_5312: Tensor[(9, 5, 8), float64]) -> (Tensor[(9, 5, 8), bool],) {
  %733 = @func_3781() /* ty=Tensor[(9, 1, 8), float64] */;
  %734 = cast(%733, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %735 = cast(%var_5312, dtype="bool") /* ty=Tensor[(9, 5, 8), bool] */;
  %736 = less(%734, %735) /* ty=Tensor[(9, 5, 8), bool] */;
  (%736,)
}

def @func_6028() -> (Tensor[(9, 9, 8), bool], Tensor[(11, 8, 1), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) {
  %737 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
  %738 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %739 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %740 = %737.1;
  %741 = @func_5390() /* ty=Tensor[(11, 8, 1), float32] */;
  %742 = %738.0;
  %743 = %739.0;
  %744 = @func_2987() /* ty=Tensor[(9, 1, 8), float64] */;
  (%740, %741, %742, %743, %744)
}

def @func_6082() -> Tensor[(9, ?, 8), float64] {
  %745 = @func_3524() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %745.0
}

def @func_7262() -> (Tensor[(4, 10, 12), float64],) {
  %746 = @func_6329() /* ty=Tensor[(4, 10, 12), float64] */;
  (%746,)
}

def @func_2949(%var_2908: Tensor[(198), float32], %var_2923: Tensor[(504), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, ?, 8), float64], Tensor[(234), int32], Tensor[(504), float64]) {
  %747 = @func_2816() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %748 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %749 = reshape(%748, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %750 = cast(%var_2908, dtype="float32") /* ty=Tensor[(198), float32] */;
  %751 = reshape(%750, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), float32] */;
  %752 = @func_149(%751) /* ty=(Tensor[(6, 3, 11), float32],) */;
  %753 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %754 = cast(%var_2923, dtype="float64") /* ty=Tensor[(504), float64] */;
  %755 = reshape(%754, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %756 = @func_1999(%755) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
  %757 = %747.0;
  %758 = @func_123(%749) /* ty=Tensor[(14, 2, 12), float64] */;
  %759 = %752.0;
  %760 = %753.0;
  %761 = %756.5;
  (%757, %758, meta[relay.Constant][47] /* ty=Tensor[(336), float64] */, %759, %var_2908, %760, %761, %var_2923)
}

def @func_8367() -> (Tensor[(9, ?, 8), float64], Tensor[(9, ?, 8), float32]) {
  %762 = @func_4362() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %763 = @func_8096() /* ty=Tensor[(9, ?, 8), float64] */;
  %764 = cast(%763, dtype="float32") /* ty=Tensor[(9, ?, 8), float32] */;
  %765 = %762.0;
  %766 = log2(%764) /* ty=Tensor[(9, ?, 8), float32] */;
  (%765, %766)
}

def @func_6364(%var_6351: Tensor[(18), uint16], %var_6352: Tensor[(234), int32]) -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(234), bool], Tensor[(18), uint16], Tensor[(234), int32]) {
  %767 = cast(%var_6351, dtype="uint16") /* ty=Tensor[(18), uint16] */;
  %768 = cast(%var_6352, dtype="int32") /* ty=Tensor[(234), int32] */;
  %769 = reshape(%767, newshape=[1, 3, 6]) /* ty=Tensor[(1, 3, 6), uint16] */;
  %770 = reshape(%768, newshape=[234]) /* ty=Tensor[(234), int32] */;
  %771 = @func_5789(%769, %770) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(13, 3, 6), bool], Tensor[(234), bool]) */;
  %772 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %773 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
  %774 = %771.2;
  (%772, %773, %774, %var_6351, %var_6352)
}

def @func_3989() -> (Tensor[(9, 1, 8), float64],) {
  %775 = @func_3300() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %776 = %775.0;
  (%776,)
}

def @func_5154() -> (Tensor[(50), float32], Tensor[(504, 2), float64], Tensor[(1008), float64]) {
  %777 = @func_2713() /* ty=(Tensor[(50), float32],) */;
  %778 = cast(meta[relay.Constant][48] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %779 = reshape(%778, newshape=[504, 2]) /* ty=Tensor[(504, 2), float64] */;
  %780 = @func_3645(%779) /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64]) */;
  %781 = %777.0;
  %782 = %780.2;
  (%781, %782, meta[relay.Constant][48] /* ty=Tensor[(1008), float64] */)
}

def @func_9350(%var_9332: Tensor[(6, 5, 9), float64]) -> (Tensor[(6, 5, 9), float64], Tensor[(9, 1, 8), float64]) {
  %783 = cast(%var_9332, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %784 = acos(%783) /* ty=Tensor[(6, 5, 9), float64] */;
  %785 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
  (%784, %785)
}

def @func_5390() -> Tensor[(11, 8, 1), float32] {
  %786 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  log2(%786) /* ty=Tensor[(11, 8, 1), float32] */
}

def @func_6329() -> Tensor[(4, 10, 12), float64] {
  %787 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %787.0
}

def @func_3829() -> (Tensor[(9, 1, 8), float64],) {
  %788 = @func_1857() /* ty=Tensor[(9, 1, 8), float64] */;
  (%788,)
}

def @func_3376(%var_3339: Tensor[(15, 6, 3), float32], %var_3366: Tensor[(1680), int16], %var_3373: Tensor[(336), float64]) -> (Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) {
  %789 = cast(%var_3339, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %790 = @func_1538() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %791 = cast(%var_3366, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %792 = reshape(%791, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), int16] */;
  %793 = @func_1649(%792) /* ty=(Tensor[(16, 7, 15), int16],) */;
  %794 = cast(%var_3373, dtype="float64") /* ty=Tensor[(336), float64] */;
  %795 = reshape(%794, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %796 = asin(%789) /* ty=Tensor[(15, 6, 3), float32] */;
  %797 = %790.0;
  %798 = %793.0;
  %799 = @func_123(%795) /* ty=Tensor[(14, 2, 12), float64] */;
  (%796, %797, %798, %var_3366, %799, %var_3373)
}

def @func_7668() -> (Tensor[(5, 4, 10), float32],) {
  %800 = @func_7014() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(1008), float64], Tensor[(50), float32]) */;
  %801 = %800.1;
  (%801,)
}

def @func_3659() -> Tensor[(9, 1, 8), float64] {
  @func_3085() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_6671(%var_6646: Tensor[(9, 6, 8), float64]) -> (Tensor[(9, 6, 8), float64], Tensor[(9, 6, 8), float64]) {
  %802 = @func_5534() /* ty=Tensor[(9, 1, 8), float64] */;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %804 = cast(%var_6646, dtype="float64") /* ty=Tensor[(9, 6, 8), float64] */;
  %805 = cast(%var_6646, dtype="float64") /* ty=Tensor[(9, 6, 8), float64] */;
  %806 = minimum(%803, %804) /* ty=Tensor[(9, 6, 8), float64] */;
  %807 = log10(%805) /* ty=Tensor[(9, 6, 8), float64] */;
  (%806, %807)
}

def @func_9509() -> (Tensor[(9, 14, 11), float64],) {
  %808 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 14, 11), float64] */;
  %809 = erf(%808) /* ty=Tensor[(9, 14, 11), float64] */;
  (%809,)
}

def @func_6497() -> (Tensor[(50), float32],) {
  %810 = @func_5668() /* ty=(Tensor[(50), float32],) */;
  %811 = %810.0;
  (%811,)
}

def @main(%var_10352: Tensor[(20, 108), int64], %var_10353: Tensor[(1, 200), float32]) -> (Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64], Tensor[(20, 108), float32]) {
  %812 = @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %813 = cast(%var_10352, dtype="int64") /* ty=Tensor[(20, 108), int64] */;
  %814 = cast(%var_10353, dtype="float32") /* ty=Tensor[(1, 200), float32] */;
  %815 = reshape(%813, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), int64] */;
  %816 = reshape(%814, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %817 = @func_8306(%815, %816) /* ty=(Tensor[(16, 15, 9), bool], Tensor[(9, 1, 8), float64], Tensor[(16, 15, 9), float32], Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(1430), uint16], Tensor[(9, 1, 8), float32]) */;
  %818 = cast(%var_10352, dtype="float32") /* ty=Tensor[(20, 108), float32] */;
  %819 = %812.0;
  %820 = %817.5;
  %821 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  %822 = sigmoid(%818) /* ty=Tensor[(20, 108), float32] */;
  (%819, %820, %var_10353, %821, %822)
}

def @func_7899() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %823 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %824 = @func_7376() /* ty=(Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) */;
  %825 = %823.0;
  %826 = %824.6;
  (%825, %826)
}

def @func_9002(%var_8966: Tensor[(100, 2), float32], %var_8972: Tensor[(1232), float32]) -> (Tensor[(11, 7, 16), float32], Tensor[(1232), float32], Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32], Tensor[(100, 2), float32]) {
  %827 = cast(%var_8972, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %828 = reshape(%827, newshape=[11, 7, 16]) /* ty=Tensor[(11, 7, 16), float32] */;
  %829 = @func_2368(%828) /* ty=(Tensor[(11, 7, 16), float32],) */;
  %830 = @func_5470() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %831 = @func_7899() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
  %832 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  %833 = cast(%var_8966, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(2), int32] */;
  %835 = cast(%832, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %837 = floor_mod(%835, %836) /* ty=Tensor[(100, 2), float32] */;
  %838 = cast(%837, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %839 = asinh(%838) /* ty=Tensor[(100, 2), float32] */;
  %840 = cast(%839, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %841 = %829.0;
  %842 = %830.0;
  %843 = %831.1;
  %844 = asin(%840) /* ty=Tensor[(100, 2), float32] */;
  (%841, %var_8972, %842, %843, %844)
}

def @func_1251() -> Tensor[(9, 1, 8), float64] {
  %845 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %845.0
}

def @func_1850() -> Tensor[(9, 1, 8), float64] {
  %846 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %846.2
}

def @func_3107() -> (Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) {
  %847 = cast(meta[relay.Constant][51] /* ty=Tensor[(504, 1), float64] */, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %848 = reshape(%847, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %849 = @func_1999(%848) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
  %850 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
  %851 = %849.5;
  (%850, %851, meta[relay.Constant][51] /* ty=Tensor[(504, 1), float64] */)
}

def @func_3422(%var_3403: Tensor[(1, 6, 4), float32], %var_3418: Tensor[(234), int32]) -> (Tensor[(?, 6, 4), float32], Tensor[(1, 6, 4), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32]) {
  %852 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
  %853 = shape_of(%var_3403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%var_3403, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %856 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
  %857 = cast(%var_3418, dtype="int32") /* ty=Tensor[(234), int32] */;
  %858 = cast(%var_3418, dtype="int32") /* ty=Tensor[(234), int32] */;
  %859 = reshape(%857, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %860 = reshape(%858, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %861 = @func_1015(%859, %860) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
  %862 = floor_mod(%854, %855) /* ty=Tensor[(?, 6, 4), float32] */;
  %863 = cosh(%856) /* ty=Tensor[(1, 6, 4), float32] */;
  %864 = %861.1;
  (%862, %863, %864, %var_3418)
}

def @func_8549() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %865 = @func_7899() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
  %866 = %865.0;
  %867 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  (%866, %867)
}

def @func_4816() -> Tensor[(9, 1, 8), float64] {
  %868 = @func_3107() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) */;
  %868.0
}

def @func_3542() -> (Tensor[(9, 1, 8), float64],) {
  %869 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%869,)
}

def @func_5626(%var_5591: Tensor[(1008), float64], %var_5618: Tensor[(50), float32]) -> (Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(30, 9), float32], Tensor[(1008), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64]) {
  %870 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %871 = cast(meta[relay.Constant][53] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %872 = reshape(%871, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %873 = cast(%var_5591, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %874 = reshape(%873, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
  %875 = @func_4217(%874) /* ty=(Tensor[(9, 14, 8), int8], Tensor[(9, 1, 8), float64], Tensor[(30, 9), float32], Tensor[(4, 420), int16], Tensor[(168, 2), float64]) */;
  %876 = cast(%var_5618, dtype="float32") /* ty=Tensor[(50), float32] */;
  %877 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 200), float32] */, dtype="float32") /* ty=Tensor[(1, 200), float32] */;
  %878 = reshape(%876, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), float32] */;
  %879 = reshape(%877, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
  %880 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %881 = %870.0;
  %882 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
  %883 = @func_123(%872) /* ty=Tensor[(14, 2, 12), float64] */;
  %884 = %875.2;
  %885 = @func_1112(%878, %879) /* ty=Tensor[(5, 4, 10), float32] */;
  %886 = %880.0;
  (%881, %882, %883, meta[relay.Constant][53] /* ty=Tensor[(336, 1), float64] */, %884, %var_5591, %885, %var_5618, meta[relay.Constant][54] /* ty=Tensor[(1, 200), float32] */, %886)
}

def @func_1671() -> Tensor[(9, 1, 8), float64] {
  %887 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  sqrt(%888) /* ty=Tensor[(9, 1, 8), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3038(%var_3037: Tensor[(50), float32]) -> (Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(80), int16], Tensor[(50), float32], Tensor[(504), float64], Tensor[(100, 2), float32]) {
  %19 = fn (%var_3015: Tensor[(50), float32]) -> (Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(80), int16], Tensor[(50), float32], Tensor[(504), float64], Tensor[(100, 2), float32]) {
    %0 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(80), int16] */, dtype="int16") /* ty=Tensor[(80), int16] */;
    %3 = cast(%var_3015, dtype="float32") /* ty=Tensor[(50), float32] */;
    %4 = %0.3;
    %5 = cast(%4, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %7 = reshape(%1, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
    %8 = reshape(%2, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
    %9 = reshape(%3, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
    %10 = reshape(%5, newshape=[200]) /* ty=Tensor[(200), float32] */;
    %11 = reshape(%6, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %12 = @func_2612(%7, %8, %9, %10, %11) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
    %13 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %14 = %13.0;
    %15 = cast(%14, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %16 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
    %17 = %12.6;
    %18 = acosh(%15) /* ty=Tensor[(100, 2), float32] */;
    (%4, %16, %17, meta[relay.Constant][0] /* ty=Tensor[(80), int16] */, %var_3015, meta[relay.Constant][1] /* ty=Tensor[(504), float64] */, %18)
  };
  %19(%var_3037) /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(80), int16], Tensor[(50), float32], Tensor[(504), float64], Tensor[(100, 2), float32]) */
}

def @func_6612() -> (Tensor[(9, 1, 8), float64],) {
  %20 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  (%20,)
}

def @func_2870() -> (Tensor[(9, 1, 8), float64],) {
  %21 = @func_2458() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %22 = %21.0;
  (%22,)
}

def @func_8369() -> (Tensor[(9, ?, 8), float64], Tensor[(9, ?, 8), float32]) {
  @func_8367() /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, ?, 8), float32]) */
}

def @func_2177() -> Tensor[(9, 1, 8), float64] {
  @func_1671() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1617(%var_1615: Tensor[(100, 2), float32]) -> (Tensor[(100, 2), bool],) {
  @func_1614(%var_1615) /* ty=(Tensor[(100, 2), bool],) */
}

def @func_3334(%var_3332: Tensor[(2, 9, 2), float32], %var_3333: Tensor[(2, 9, 2), float32]) -> (Tensor[(2, 9, 2), float32],) {
  @func_3330(%var_3332, %var_3333) /* ty=(Tensor[(2, 9, 2), float32],) */
}

def @func_4673(%var_4660: uint32) -> (Tensor[(10, 4, 13), uint32],) {
  %23 = cast(%var_4660, dtype="uint32") /* ty=uint32 */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 4, 13), uint32] */, dtype="uint32") /* ty=Tensor[(10, 4, 13), uint32] */;
  %25 = maximum(%23, %24) /* ty=Tensor[(10, 4, 13), uint32] */;
  (%25,)
}

def @func_6490() -> (Tensor[(9, 1, 8), float32],) {
  %26 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %27 = %26.0;
  (%27,)
}

def @main(%var_10352: Tensor[(20, 108), int64], %var_10353: Tensor[(1, 200), float32]) -> (Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64], Tensor[(20, 108), float32]) {
  %28 = @func_4627() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %29 = cast(%var_10352, dtype="int64") /* ty=Tensor[(20, 108), int64] */;
  %30 = cast(%var_10353, dtype="float32") /* ty=Tensor[(1, 200), float32] */;
  %31 = reshape(%29, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), int64] */;
  %32 = reshape(%30, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %33 = @func_8310(%31, %32) /* ty=(Tensor[(16, 15, 9), bool], Tensor[(9, 1, 8), float64], Tensor[(16, 15, 9), float32], Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(1430), uint16], Tensor[(9, 1, 8), float32]) */;
  %34 = cast(%var_10352, dtype="float32") /* ty=Tensor[(20, 108), float32] */;
  %35 = %28.0;
  %36 = %33.5;
  %37 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  %38 = sigmoid(%34) /* ty=Tensor[(20, 108), float32] */;
  (%35, %36, %var_10353, %37, %38)
}

def @func_5706() -> (Tensor[(234), int32], Tensor[(9, 1, 8), float64]) {
  %39 = @func_3107() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) */;
  %40 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %41 = %39.1;
  %42 = %40.0;
  (%41, %42)
}

def @func_3425(%var_3423: Tensor[(1, 6, 4), float32], %var_3424: Tensor[(234), int32]) -> (Tensor[(?, 6, 4), float32], Tensor[(1, 6, 4), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32]) {
  %56 = fn (%var_3403: Tensor[(1, 6, 4), float32], %var_3418: Tensor[(234), int32]) -> (Tensor[(?, 6, 4), float32], Tensor[(1, 6, 4), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32]) {
    %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
    %44 = shape_of(%var_3403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%var_3403, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
    %48 = cast(%var_3418, dtype="int32") /* ty=Tensor[(234), int32] */;
    %49 = cast(%var_3418, dtype="int32") /* ty=Tensor[(234), int32] */;
    %50 = reshape(%48, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
    %51 = reshape(%49, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
    %52 = @func_1015(%50, %51) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
    %53 = floor_mod(%45, %46) /* ty=Tensor[(?, 6, 4), float32] */;
    %54 = cosh(%47) /* ty=Tensor[(1, 6, 4), float32] */;
    %55 = %52.1;
    (%53, %54, %55, %var_3418)
  };
  %56(%var_3423, %var_3424) /* ty=(Tensor[(?, 6, 4), float32], Tensor[(1, 6, 4), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32]) */
}

def @func_10331() -> (Tensor[(6, 3, 11), float32],) {
  @func_10329() /* ty=(Tensor[(6, 3, 11), float32],) */
}

def @func_5297() -> Tensor[(9, 1, 8), float64] {
  @func_5295() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_4148() -> (Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) {
  %66 = fn () -> (Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) {
    %57 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
    %58 = cast(%57, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 9, 8), float64] */, dtype="bool") /* ty=Tensor[(9, 9, 8), bool] */;
    %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 9, 8), float64] */, dtype="bool") /* ty=Tensor[(9, 9, 8), bool] */;
    %61 = cast(%57, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %62 = @func_3753() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %63 = less_equal(%58, %59) /* ty=Tensor[(9, 9, 8), bool] */;
    %64 = less(%60, %61) /* ty=Tensor[(9, 9, 8), bool] */;
    %65 = %62.1;
    (%63, %64, %65)
  };
  %66() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */
}

def @func_6673(%var_6672: Tensor[(9, 6, 8), float64]) -> (Tensor[(9, 6, 8), float64], Tensor[(9, 6, 8), float64]) {
  %73 = fn (%var_6646: Tensor[(9, 6, 8), float64]) -> (Tensor[(9, 6, 8), float64], Tensor[(9, 6, 8), float64]) {
    %67 = @func_5534() /* ty=Tensor[(9, 1, 8), float64] */;
    %68 = cast(%67, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
    %69 = cast(%var_6646, dtype="float64") /* ty=Tensor[(9, 6, 8), float64] */;
    %70 = cast(%var_6646, dtype="float64") /* ty=Tensor[(9, 6, 8), float64] */;
    %71 = minimum(%68, %69) /* ty=Tensor[(9, 6, 8), float64] */;
    %72 = log10(%70) /* ty=Tensor[(9, 6, 8), float64] */;
    (%71, %72)
  };
  %73(%var_6672) /* ty=(Tensor[(9, 6, 8), float64], Tensor[(9, 6, 8), float64]) */
}

def @func_4889() -> (Tensor[(4, 10, 12), float64],) {
  @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */
}

def @func_3645(%var_3636: Tensor[(504, 2), float64]) -> (Tensor[(9, ?, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64]) {
  %74 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %75 = cast(%var_3636, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
  %76 = reshape(%75, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
  %77 = @func_1836(%76) /* ty=(Tensor[(9, 14, 8), bool],) */;
  %78 = %74.0;
  %79 = %77.0;
  (%78, %79, %var_3636)
}

def @func_3830() -> (Tensor[(9, 1, 8), float64],) {
  %81 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %80 = @func_1857() /* ty=Tensor[(9, 1, 8), float64] */;
    (%80,)
  };
  %81() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_5536() -> Tensor[(9, 1, 8), float64] {
  @func_5534() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_4219(%var_4218: Tensor[(9, 14, 8), float64]) -> (Tensor[(9, 14, 8), int8], Tensor[(9, 1, 8), float64], Tensor[(30, 9), float32], Tensor[(4, 420), int16], Tensor[(168, 2), float64]) {
  %94 = fn (%var_4199: Tensor[(9, 14, 8), float64]) -> (Tensor[(9, 14, 8), int8], Tensor[(9, 1, 8), float64], Tensor[(30, 9), float32], Tensor[(4, 420), int16], Tensor[(168, 2), float64]) {
    %82 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
    %83 = cast(%82, dtype="int8") /* ty=Tensor[(9, 1, 8), int8] */;
    %84 = cast(%var_4199, dtype="int8") /* ty=Tensor[(9, 14, 8), int8] */;
    %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(30, 9), float32] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
    %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 420), int16] */, dtype="int16") /* ty=Tensor[(4, 420), int16] */;
    %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(168, 2), float64] */, dtype="float64") /* ty=Tensor[(168, 2), float64] */;
    %88 = reshape(%85, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), float32] */;
    %89 = reshape(%86, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
    %90 = reshape(%87, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %91 = @func_3376(%88, %89, %90) /* ty=(Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) */;
    %92 = bitwise_or(%83, %84) /* ty=Tensor[(9, 14, 8), int8] */;
    %93 = %91.1;
    (%92, %93, meta[relay.Constant][5] /* ty=Tensor[(30, 9), float32] */, meta[relay.Constant][6] /* ty=Tensor[(4, 420), int16] */, meta[relay.Constant][7] /* ty=Tensor[(168, 2), float64] */)
  };
  %94(%var_4218) /* ty=(Tensor[(9, 14, 8), int8], Tensor[(9, 1, 8), float64], Tensor[(30, 9), float32], Tensor[(4, 420), int16], Tensor[(168, 2), float64]) */
}

def @func_9236() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float32]) {
  @func_9234() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float32]) */
}

def @func_10187(%var_10185: Tensor[(9, 7, 8), float64], %var_10186: Tensor[(9, 6, 8), float64]) -> (Tensor[(9, 7, 8), uint8], Tensor[(9, 6, 8), bool]) {
  @func_10183(%var_10185, %var_10186) /* ty=(Tensor[(9, 7, 8), uint8], Tensor[(9, 6, 8), bool]) */
}

def @func_6084() -> Tensor[(9, ?, 8), float64] {
  @func_6082() /* ty=Tensor[(9, ?, 8), float64] */
}

def @func_5670() -> (Tensor[(50), float32],) {
  @func_5668() /* ty=(Tensor[(50), float32],) */
}

def @func_2438() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  @func_2436() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */
}

def @func_5809() -> Tensor[(9, 1, 8), float64] {
  @func_5807() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1614(%var_1602: Tensor[(100, 2), float32]) -> (Tensor[(100, 2), bool],) {
  %95 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %96 = %95.3;
  %97 = cast(%var_1602, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(2), int32] */;
  %99 = cast(%96, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %101 = mod(%99, %100) /* ty=Tensor[(100, 2), float32] */;
  %102 = cast(%96, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(2), int32] */;
  %104 = cast(%101, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %106 = less_equal(%104, %105) /* ty=Tensor[(100, 2), bool] */;
  (%106,)
}

def @func_533(%var_531: uint8) -> Tensor[(9, 8, 9), bool] {
  @func_530(%var_531) /* ty=Tensor[(9, 8, 9), bool] */
}

def @func_125(%var_124: Tensor[(14, 2, 12), float64]) -> Tensor[(14, 2, 12), float64] {
  %108 = fn (%var_119: Tensor[(14, 2, 12), float64]) -> Tensor[(14, 2, 12), float64] {
    %107 = cast(%var_119, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
    log2(%107) /* ty=Tensor[(14, 2, 12), float64] */
  };
  %108(%var_124) /* ty=Tensor[(14, 2, 12), float64] */
}

def @func_5119() -> Tensor[(9, 1, 8), float64] {
  %109 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_1857() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %109() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_6614() -> (Tensor[(9, 1, 8), float64],) {
  @func_6612() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_9249() -> (Tensor[(9, ?, 8), float64],) {
  @func_9247() /* ty=(Tensor[(9, ?, 8), float64],) */
}

def @func_9614(%var_9612: Tensor[(360), float64]) -> (Tensor[(50), float32], Tensor[(9, 5, 8), bool], Tensor[(360), float64]) {
  @func_9611(%var_9612) /* ty=(Tensor[(50), float32], Tensor[(9, 5, 8), bool], Tensor[(360), float64]) */
}

def @func_3087() -> Tensor[(9, 1, 8), float64] {
  @func_3085() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_8584() -> Tensor[(9, 9, 8), bool] {
  @func_8582() /* ty=Tensor[(9, 9, 8), bool] */
}

def @func_2002(%var_2000: Tensor[(9, 7, 8), float64]) -> (Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) {
  @func_1999(%var_2000) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */
}

def @func_9611(%var_9606: Tensor[(360), float64]) -> (Tensor[(50), float32], Tensor[(9, 5, 8), bool], Tensor[(360), float64]) {
  %110 = @func_2713() /* ty=(Tensor[(50), float32],) */;
  %111 = cast(%var_9606, dtype="float64") /* ty=Tensor[(360), float64] */;
  %112 = reshape(%111, newshape=[9, 5, 8]) /* ty=Tensor[(9, 5, 8), float64] */;
  %113 = @func_5324(%112) /* ty=(Tensor[(9, 5, 8), bool],) */;
  %114 = %110.0;
  %115 = %113.0;
  (%114, %115, %var_9606)
}

def @func_1708(%var_1681: Tensor[(9, 4, 8), float64]) -> (Tensor[(9, 4, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(9, 3, 8), float64]) {
  %116 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %118 = cast(%var_1681, dtype="float64") /* ty=Tensor[(9, 4, 8), float64] */;
  %119 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %120 = %119.2;
  %121 = cast(%120, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 12, 8), float64] */, dtype="bool") /* ty=Tensor[(9, 12, 8), bool] */;
  %123 = cast(%116, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %124 = sigmoid(%123) /* ty=Tensor[(9, 1, 8), float64] */;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %127 = floor_divide(%117, %118) /* ty=Tensor[(9, 4, 8), float64] */;
  %128 = greater(%121, %122) /* ty=Tensor[(9, 12, 8), bool] */;
  %129 = power(%125, %126) /* ty=Tensor[(9, 3, 8), float64] */;
  (%127, %128, %129)
}

def @func_1528(%var_1526: uint8) -> (Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8) {
  @func_1525(%var_1526) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8) */
}

def @func_2370(%var_2369: Tensor[(11, 7, 16), float32]) -> (Tensor[(11, 7, 16), float32],) {
  %132 = fn (%var_2358: Tensor[(11, 7, 16), float32]) -> (Tensor[(11, 7, 16), float32],) {
    %130 = cast(%var_2358, dtype="float32") /* ty=Tensor[(11, 7, 16), float32] */;
    %131 = acosh(%130) /* ty=Tensor[(11, 7, 16), float32] */;
    (%131,)
  };
  %132(%var_2369) /* ty=(Tensor[(11, 7, 16), float32],) */
}

def @func_1309() -> Tensor[(9, 1, 8), float64] {
  %133 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_1251() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %133() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_6773(%var_6772: Tensor[(1008), float64]) -> (Tensor[(9, 9, 8), float32], Tensor[(9, 14, 8), bool], Tensor[(1008), float64]) {
  %143 = fn (%var_6768: Tensor[(1008), float64]) -> (Tensor[(9, 9, 8), float32], Tensor[(9, 14, 8), bool], Tensor[(1008), float64]) {
    %134 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
    %135 = cast(%134, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
    %136 = rsqrt(%135) /* ty=Tensor[(9, 9, 8), float64] */;
    %137 = cast(%136, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
    %138 = cast(%var_6768, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %139 = reshape(%138, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
    %140 = @func_1836(%139) /* ty=(Tensor[(9, 14, 8), bool],) */;
    %141 = tan(%137) /* ty=Tensor[(9, 9, 8), float32] */;
    %142 = %140.0;
    (%141, %142, %var_6768)
  };
  %143(%var_6772) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(9, 14, 8), bool], Tensor[(1008), float64]) */
}

def @func_5708() -> (Tensor[(234), int32], Tensor[(9, 1, 8), float64]) {
  @func_5706() /* ty=(Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */
}

def @func_4363() -> (Tensor[(9, ?, 8), float64],) {
  %146 = fn () -> (Tensor[(9, ?, 8), float64],) {
    %144 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
    %145 = %144.3;
    (%145,)
  };
  %146() /* ty=(Tensor[(9, ?, 8), float64],) */
}

def @func_1673() -> Tensor[(9, 1, 8), float64] {
  @func_1671() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_3524() -> (Tensor[(9, ?, 8), float64],) {
  %147 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %148 = %147.3;
  (%148,)
}

def @func_4580() -> Tensor[(9, 9, 8), bool] {
  @func_4578() /* ty=Tensor[(9, 9, 8), bool] */
}

def @func_3938() -> (Tensor[(9, 1, 8), float32],) {
  %152 = fn () -> (Tensor[(9, 1, 8), float32],) {
    %149 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
    %150 = cast(%149, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
    %151 = rsqrt(%150) /* ty=Tensor[(9, 1, 8), float32] */;
    (%151,)
  };
  %152() /* ty=(Tensor[(9, 1, 8), float32],) */
}

def @func_7089() -> (Tensor[(4, 10, 12), float32],) {
  @func_7087() /* ty=(Tensor[(4, 10, 12), float32],) */
}

def @func_2341(%var_2339: Tensor[(10, 13, 11), uint16], %var_2340: Tensor[(1680), int16]) -> (Tensor[(10, 13, 11), uint16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64]) {
  %163 = fn (%var_2264: Tensor[(10, 13, 11), uint16], %var_2281: Tensor[(1680), int16]) -> (Tensor[(10, 13, 11), uint16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64]) {
    %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 13, 11), uint16] */, dtype="uint16") /* ty=Tensor[(10, 13, 11), uint16] */;
    %154 = shape_of(%var_2264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%var_2264, dtype="uint16") /* ty=Tensor[(10, 13, 11), uint16] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %157 = cast(%var_2281, dtype="int16") /* ty=Tensor[(1680), int16] */;
    %158 = reshape(%157, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
    %159 = @func_2113(%158) /* ty=(Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) */;
    %160 = multiply(%155, %156) /* ty=Tensor[(10, 13, 11), uint16] */;
    %161 = %159.1;
    %162 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
    (%160, %161, %var_2281, %162)
  };
  %163(%var_2339, %var_2340) /* ty=(Tensor[(10, 13, 11), uint16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64]) */
}

def @func_7191() -> (Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(512, 2), uint16]) {
  @func_7189() /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(512, 2), uint16]) */
}

def @func_5211() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %164 = @func_2816() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %165 = %164.0;
  %166 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  (%165, %166)
}

def @func_5156() -> (Tensor[(50), float32], Tensor[(504, 2), float64], Tensor[(1008), float64]) {
  @func_5154() /* ty=(Tensor[(50), float32], Tensor[(504, 2), float64], Tensor[(1008), float64]) */
}

def @func_6364(%var_6351: Tensor[(18), uint16], %var_6352: Tensor[(234), int32]) -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(234), bool], Tensor[(18), uint16], Tensor[(234), int32]) {
  %167 = cast(%var_6351, dtype="uint16") /* ty=Tensor[(18), uint16] */;
  %168 = cast(%var_6352, dtype="int32") /* ty=Tensor[(234), int32] */;
  %169 = reshape(%167, newshape=[1, 3, 6]) /* ty=Tensor[(1, 3, 6), uint16] */;
  %170 = reshape(%168, newshape=[234]) /* ty=Tensor[(234), int32] */;
  %171 = @func_5789(%169, %170) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(13, 3, 6), bool], Tensor[(234), bool]) */;
  %172 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %173 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
  %174 = %171.2;
  (%172, %173, %174, %var_6351, %var_6352)
}

def @func_6498() -> (Tensor[(50), float32],) {
  %177 = fn () -> (Tensor[(50), float32],) {
    %175 = @func_5668() /* ty=(Tensor[(50), float32],) */;
    %176 = %175.0;
    (%176,)
  };
  %177() /* ty=(Tensor[(50), float32],) */
}

def @func_9350(%var_9332: Tensor[(6, 5, 9), float64]) -> (Tensor[(6, 5, 9), float64], Tensor[(9, 1, 8), float64]) {
  %178 = cast(%var_9332, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %179 = acos(%178) /* ty=Tensor[(6, 5, 9), float64] */;
  %180 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
  (%179, %180)
}

def @func_3544() -> (Tensor[(9, 1, 8), float64],) {
  @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_6434(%var_6428: Tensor[(11, 8, 8), float32]) -> Tensor[(11, 8, 8), uint32] {
  %181 = @func_6028() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(11, 8, 1), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %182 = %181.1;
  %183 = cast(%182, dtype="uint32") /* ty=Tensor[(11, 8, 1), uint32] */;
  %184 = cast(%var_6428, dtype="uint32") /* ty=Tensor[(11, 8, 8), uint32] */;
  bitwise_and(%183, %184) /* ty=Tensor[(11, 8, 8), uint32] */
}

def @func_5154() -> (Tensor[(50), float32], Tensor[(504, 2), float64], Tensor[(1008), float64]) {
  %185 = @func_2713() /* ty=(Tensor[(50), float32],) */;
  %186 = cast(meta[relay.Constant][11] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %187 = reshape(%186, newshape=[504, 2]) /* ty=Tensor[(504, 2), float64] */;
  %188 = @func_3645(%187) /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64]) */;
  %189 = %185.0;
  %190 = %188.2;
  (%189, %190, meta[relay.Constant][11] /* ty=Tensor[(1008), float64] */)
}

def @func_3381(%var_3378: Tensor[(15, 6, 3), float32], %var_3379: Tensor[(1680), int16], %var_3380: Tensor[(336), float64]) -> (Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) {
  @func_3376(%var_3378, %var_3379, %var_3380) /* ty=(Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) */
}

def @func_9234() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float32]) {
  %191 = @func_3829() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %192 = @func_4988() /* ty=(Tensor[(9, 1, 8), float32], Tensor[(100, 2), float32]) */;
  %193 = %191.0;
  %194 = %192.0;
  (%193, %194)
}

def @func_1098() -> Tensor[(9, 1, 8), float64] {
  %196 = fn () -> Tensor[(9, 1, 8), float64] {
    %195 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
    cos(%195) /* ty=Tensor[(9, 1, 8), float64] */
  };
  %196() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_7263() -> (Tensor[(4, 10, 12), float64],) {
  %198 = fn () -> (Tensor[(4, 10, 12), float64],) {
    %197 = @func_6329() /* ty=Tensor[(4, 10, 12), float64] */;
    (%197,)
  };
  %198() /* ty=(Tensor[(4, 10, 12), float64],) */
}

def @func_7793(%var_7791: uint8, %var_7792: Tensor[(1680), int16]) -> (Tensor[(9, ?, 8), bool], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 9, 8), bool], Tensor[(10, 20), float32], Tensor[(512, 2), uint16], Tensor[(9, ?, 8), int16], Tensor[(1680), int16], Tensor[(100, 2), float32]) {
  @func_7789(%var_7791, %var_7792) /* ty=(Tensor[(9, ?, 8), bool], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 9, 8), bool], Tensor[(10, 20), float32], Tensor[(512, 2), uint16], Tensor[(9, ?, 8), int16], Tensor[(1680), int16], Tensor[(100, 2), float32]) */
}

def @func_2500() -> Tensor[(9, 1, 8), float64] {
  %199 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_1308() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %199() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5807() -> Tensor[(9, 1, 8), float64] {
  %200 = @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %200.0
}

def @func_8582() -> Tensor[(9, 9, 8), bool] {
  @func_4578() /* ty=Tensor[(9, 9, 8), bool] */
}

def @func_8190(%var_8189: Tensor[(100, 2), float32]) -> (Tensor[(100, 2), bool], Tensor[(100, 2), bool], Tensor[(100, 2), uint16]) {
  %220 = fn (%var_8154: Tensor[(100, 2), float32]) -> (Tensor[(100, 2), bool], Tensor[(100, 2), bool], Tensor[(100, 2), uint16]) {
    %201 = @func_5211() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
    %202 = %201.1;
    %203 = cast(%202, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %204 = log(%203) /* ty=Tensor[(100, 2), float32] */;
    %205 = cast(%202, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(2), int32] */;
    %207 = cast(%204, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %209 = cast(%var_8154, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
    %210 = shape_of(%202, dtype="int32") /* ty=Tensor[(2), int32] */;
    %211 = cast(%202, dtype="bool") /* ty=Tensor[(100, 2), bool] */;
    %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %213 = cast(meta[relay.Constant][13] /* ty=Tensor[(100, 2), float32] */, dtype="uint16") /* ty=Tensor[(100, 2), uint16] */;
    %214 = shape_of(%202, dtype="int32") /* ty=Tensor[(2), int32] */;
    %215 = cast(%202, dtype="uint16") /* ty=Tensor[(100, 2), uint16] */;
    %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %217 = greater(%207, %208) /* ty=Tensor[(100, 2), bool] */;
    %218 = equal(%211, %212) /* ty=Tensor[(100, 2), bool] */;
    %219 = bitwise_xor(%215, %216) /* ty=Tensor[(100, 2), uint16] */;
    (%217, %218, %219)
  };
  %220(%var_8189) /* ty=(Tensor[(100, 2), bool], Tensor[(100, 2), bool], Tensor[(100, 2), uint16]) */
}

def @func_1652(%var_1650: Tensor[(16, 7, 15), int16]) -> (Tensor[(16, 7, 15), int16],) {
  @func_1649(%var_1650) /* ty=(Tensor[(16, 7, 15), int16],) */
}

def @func_2816() -> (Tensor[(9, 1, 8), float64],) {
  %221 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%221,)
}

def @func_4489(%var_4454: Tensor[(360), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(336), float64], Tensor[(360), float64], Tensor[(2, 168), float64], Tensor[(9, 1, 8), float64]) {
  %222 = cast(%var_4454, dtype="float64") /* ty=Tensor[(360), float64] */;
  %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 168), float64] */, dtype="float64") /* ty=Tensor[(2, 168), float64] */;
  %224 = reshape(%222, newshape=[2, 15, 12]) /* ty=Tensor[(2, 15, 12), float64] */;
  %225 = reshape(%223, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %226 = @func_2259(%224, %225) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(9, 1, 8), float64]) */;
  %227 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %228 = %226.2;
  %229 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  (%227, %228, %var_4454, meta[relay.Constant][14] /* ty=Tensor[(2, 168), float64] */, %229)
}

def @func_4325() -> Tensor[(9, 1, 8), float64] {
  %230 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_3085() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %230() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1488() -> (Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_7087() -> (Tensor[(4, 10, 12), float32],) {
  %231 = @func_5107() /* ty=(Tensor[(9, ?, 8), bool], Tensor[(5, 4, 10), float32], Tensor[(9, ?, 8), float64], Tensor[(4, 10, 12), float32]) */;
  %232 = %231.3;
  (%232,)
}

def @func_8419(%var_8418: Tensor[(1, 288), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(1, 288), float64]) {
  %240 = fn (%var_8415: Tensor[(1, 288), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(1, 288), float64]) {
    %233 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
    %234 = cast(%var_8415, dtype="float64") /* ty=Tensor[(1, 288), float64] */;
    %235 = reshape(%234, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float64] */;
    %236 = @func_1708(%235) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(9, 3, 8), float64]) */;
    %237 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
    %238 = %233.0;
    %239 = %236.1;
    (%237, %238, %239, %var_8415)
  };
  %240(%var_8418) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(1, 288), float64]) */
}

def @func_1580() -> (Tensor[(9, 1, 8), float64],) {
  %242 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %241 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
    (%241,)
  };
  %242() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_1525(%var_1517: uint8) -> (Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8) {
  %243 = cast(%var_1517, dtype="uint8") /* ty=uint8 */;
  %244 = reshape(%243, newshape=[]) /* ty=uint8 */;
  %245 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
  %246 = @func_530(%244) /* ty=Tensor[(9, 8, 9), bool] */;
  (%245, %246, %var_1517)
}

def @func_1999(%var_1913: Tensor[(9, 7, 8), float64]) -> (Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) {
  %247 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
  %248 = cast(%247, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %249 = cast(%var_1913, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %250 = cast(%247, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %251 = cast(%var_1913, dtype="bool") /* ty=Tensor[(9, 7, 8), bool] */;
  %252 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %253 = cast(%var_1913, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
  %254 = cast(meta[relay.Constant][15] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %256 = reshape(%254, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %257 = reshape(%255, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
  %258 = @func_1015(%256, %257) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
  %259 = logical_or(%248, %249) /* ty=Tensor[(9, 7, 8), bool] */;
  %260 = greater(%250, %251) /* ty=Tensor[(9, 7, 8), bool] */;
  %261 = %252.0;
  %262 = erf(%253) /* ty=Tensor[(9, 7, 8), float32] */;
  %263 = %258.1;
  %264 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  (%259, %260, %261, %262, %263, meta[relay.Constant][15] /* ty=Tensor[(234), int32] */, %264)
}

def @func_9353(%var_9351: Tensor[(6, 5, 9), float64]) -> (Tensor[(6, 5, 9), float64], Tensor[(9, 1, 8), float64]) {
  @func_9350(%var_9351) /* ty=(Tensor[(6, 5, 9), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_9415(%var_9414: Tensor[(10, 9, 11), float64]) -> (Tensor[(10, 9, 11), float64],) {
  %267 = fn (%var_9386: Tensor[(10, 9, 11), float64]) -> (Tensor[(10, 9, 11), float64],) {
    %265 = cast(%var_9386, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
    %266 = acosh(%265) /* ty=Tensor[(10, 9, 11), float64] */;
    (%266,)
  };
  %267(%var_9414) /* ty=(Tensor[(10, 9, 11), float64],) */
}

def @func_9877(%var_9874: int8, %var_9875: Tensor[(1024), int8], %var_9876: Tensor[(1430), uint16]) -> (Tensor[(9, ?, 8), float64], int8, Tensor[(9, 1, 8), float64], Tensor[(11, 8, 1430), float32], Tensor[(1024), float64]) {
  %294 = fn (%var_9805: int8, %var_9806: Tensor[(1024), int8], %var_9807: Tensor[(1430), uint16]) -> (Tensor[(9, ?, 8), float64], int8, Tensor[(9, 1, 8), float64], Tensor[(11, 8, 1430), float32], Tensor[(1024), float64]) {
    %268 = @func_5390() /* ty=Tensor[(11, 8, 1), float32] */;
    %269 = cast(%268, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
    %270 = cast(%var_9807, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %271 = cast(%var_9806, dtype="float32") /* ty=Tensor[(1024), float32] */;
    %272 = acosh(%271) /* ty=Tensor[(1024), float32] */;
    %273 = cast(%var_9805, dtype="int8") /* ty=int8 */;
    %274 = cast(%var_9806, dtype="int8") /* ty=Tensor[(1024), int8] */;
    %275 = cast(%var_9807, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
    %276 = reshape(%273, newshape=[]) /* ty=int8 */;
    %277 = reshape(%274, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), int8] */;
    %278 = reshape(%275, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
    %279 = @func_4092(%276, %277, %278) /* ty=(Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %280 = %279.0;
    %281 = cast(%280, dtype="uint64") /* ty=Tensor[(8, 8, 16), uint64] */;
    %282 = shape_of(%272, dtype="int32") /* ty=Tensor[(1), int32] */;
    %283 = cast(%272, dtype="uint64") /* ty=Tensor[(1024), uint64] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %285 = right_shift(%283, %284) /* ty=Tensor[(1024), uint64] */;
    %286 = cast(%272, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(1), int32] */;
    %288 = cast(%285, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?), float64] */;
    %290 = @func_8096() /* ty=Tensor[(9, ?, 8), float64] */;
    %291 = @func_5118() /* ty=Tensor[(9, 1, 8), float64] */;
    %292 = floor_divide(%269, %270) /* ty=Tensor[(11, 8, 1430), float32] */;
    %293 = power(%288, %289) /* ty=Tensor[(1024), float64] */;
    (%290, %var_9805, %291, %292, %293)
  };
  %294(%var_9874, %var_9875, %var_9876) /* ty=(Tensor[(9, ?, 8), float64], int8, Tensor[(9, 1, 8), float64], Tensor[(11, 8, 1430), float32], Tensor[(1024), float64]) */
}

def @func_8550() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %298 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
    %295 = @func_7899() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
    %296 = %295.0;
    %297 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */
}

def @func_9275() -> (Tensor[(9, 1, 8), float64],) {
  @func_9273() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_1323() -> Tensor[(9, 1, 8), float64] {
  @func_1251() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5109() -> (Tensor[(9, ?, 8), bool], Tensor[(5, 4, 10), float32], Tensor[(9, ?, 8), float64], Tensor[(4, 10, 12), float32]) {
  @func_5107() /* ty=(Tensor[(9, ?, 8), bool], Tensor[(5, 4, 10), float32], Tensor[(9, ?, 8), float64], Tensor[(4, 10, 12), float32]) */
}

def @func_8430() -> Tensor[(9, 1, 8), float64] {
  @func_8428() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5327(%var_5325: Tensor[(9, 5, 8), float64]) -> (Tensor[(9, 5, 8), bool],) {
  @func_5324(%var_5325) /* ty=(Tensor[(9, 5, 8), bool],) */
}

def @func_6082() -> Tensor[(9, ?, 8), float64] {
  %299 = @func_3524() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %299.0
}

def @func_3714() -> (Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %309 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
    %300 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %301 = cast(meta[relay.Constant][16] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
    %302 = reshape(%301, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), float32] */;
    %303 = @func_149(%302) /* ty=(Tensor[(6, 3, 11), float32],) */;
    %304 = %300.2;
    %305 = %303.0;
    %306 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
    %307 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
    %308 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
    (%304, %305, meta[relay.Constant][16] /* ty=Tensor[(198), float32] */, %306, %307, %308)
  };
  %309() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_1325() -> Tensor[(9, 1, 8), float64] {
  @func_1323() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_4625() -> (Tensor[(9, 1, 8), float64],) {
  %310 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %311 = %310.0;
  (%311,)
}

def @func_6198(%var_6193: Tensor[(9, 5, 1), float64]) -> Tensor[(9, 5, 1), float64] {
  %312 = cast(%var_6193, dtype="float64") /* ty=Tensor[(9, 5, 1), float64] */;
  atan(%312) /* ty=Tensor[(9, 5, 1), float64] */
}

def @func_4402() -> (Tensor[(9, 1, 8), float64],) {
  %315 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %313 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %314 = %313.0;
    (%314,)
  };
  %315() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_4627() -> (Tensor[(9, 1, 8), float64],) {
  @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_9006(%var_9004: Tensor[(100, 2), float32], %var_9005: Tensor[(1232), float32]) -> (Tensor[(11, 7, 16), float32], Tensor[(1232), float32], Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32], Tensor[(100, 2), float32]) {
  @func_9002(%var_9004, %var_9005) /* ty=(Tensor[(11, 7, 16), float32], Tensor[(1232), float32], Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32], Tensor[(100, 2), float32]) */
}

def @func_2262(%var_2260: Tensor[(2, 15, 12), float64], %var_2261: Tensor[(336), float64]) -> (Tensor[(2, 15, 12), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(9, 1, 8), float64]) {
  %322 = fn (%var_2234: Tensor[(2, 15, 12), float64], %var_2241: Tensor[(336), float64]) -> (Tensor[(2, 15, 12), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(9, 1, 8), float64]) {
    %316 = cast(%var_2234, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
    %317 = cast(%var_2241, dtype="float64") /* ty=Tensor[(336), float64] */;
    %318 = reshape(%317, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
    %319 = sinh(%316) /* ty=Tensor[(2, 15, 12), float64] */;
    %320 = @func_123(%318) /* ty=Tensor[(14, 2, 12), float64] */;
    %321 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
    (%319, %320, %var_2241, %321)
  };
  %322(%var_2260, %var_2261) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_7189() -> (Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(512, 2), uint16]) {
  %323 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %324 = cast(meta[relay.Constant][17] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %325 = cast(meta[relay.Constant][18] /* ty=Tensor[(512, 2), int8] */, dtype="int8") /* ty=Tensor[(512, 2), int8] */;
  %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(1430), uint16] */, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
  %327 = reshape(%324, newshape=[]) /* ty=int8 */;
  %328 = reshape(%325, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), int8] */;
  %329 = reshape(%326, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
  %330 = @func_4092(%327, %328, %329) /* ty=(Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %331 = cast(meta[relay.Constant][18] /* ty=Tensor[(512, 2), int8] */, dtype="uint16") /* ty=Tensor[(512, 2), uint16] */;
  %332 = cast(meta[relay.Constant][17] /* ty=int8 */, dtype="uint16") /* ty=uint16 */;
  %333 = %323.0;
  %334 = %330.1;
  %335 = maximum(%331, %332) /* ty=Tensor[(512, 2), uint16] */;
  (%333, %334, meta[relay.Constant][19] /* ty=Tensor[(1430), uint16] */, %335)
}

def @func_1746() -> (Tensor[(9, 1, 8), float64],) {
  %337 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %336 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
    (%336,)
  };
  %337() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_2952(%var_2950: Tensor[(198), float32], %var_2951: Tensor[(504), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, ?, 8), float64], Tensor[(234), int32], Tensor[(504), float64]) {
  %353 = fn (%var_2908: Tensor[(198), float32], %var_2923: Tensor[(504), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, ?, 8), float64], Tensor[(234), int32], Tensor[(504), float64]) {
    %338 = @func_2816() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %339 = cast(meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %340 = reshape(%339, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
    %341 = cast(%var_2908, dtype="float32") /* ty=Tensor[(198), float32] */;
    %342 = reshape(%341, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), float32] */;
    %343 = @func_149(%342) /* ty=(Tensor[(6, 3, 11), float32],) */;
    %344 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
    %345 = cast(%var_2923, dtype="float64") /* ty=Tensor[(504), float64] */;
    %346 = reshape(%345, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
    %347 = @func_1999(%346) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
    %348 = %338.0;
    %349 = @func_123(%340) /* ty=Tensor[(14, 2, 12), float64] */;
    %350 = %343.0;
    %351 = %344.0;
    %352 = %347.5;
    (%348, %349, meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, %350, %var_2908, %351, %352, %var_2923)
  };
  %353(%var_2950, %var_2951) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, ?, 8), float64], Tensor[(234), int32], Tensor[(504), float64]) */
}

def @func_7439(%var_7437: Tensor[(1680), int16]) -> (Tensor[(9, 1, 8), float64], Tensor[(1680), int16], Tensor[(270), float32], Tensor[(1680), int16], Tensor[(336), float64]) {
  @func_7436(%var_7437) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(1680), int16], Tensor[(270), float32], Tensor[(1680), int16], Tensor[(336), float64]) */
}

def @func_3108() -> (Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) {
  %359 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) {
    %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(504, 1), float64] */, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
    %355 = reshape(%354, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
    %356 = @func_1999(%355) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
    %357 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
    %358 = %356.5;
    (%357, %358, meta[relay.Constant][21] /* ty=Tensor[(504, 1), float64] */)
  };
  %359() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) */
}

def @func_6563() -> Tensor[(9, 1, 8), float64] {
  @func_5807() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1649(%var_1635: Tensor[(16, 7, 15), int16]) -> (Tensor[(16, 7, 15), int16],) {
  %360 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 1, 1), int16] */, dtype="int16") /* ty=Tensor[(16, 1, 1), int16] */;
  %361 = cast(%var_1635, dtype="int16") /* ty=Tensor[(16, 7, 15), int16] */;
  %362 = left_shift(%360, %361) /* ty=Tensor[(16, 7, 15), int16] */;
  (%362,)
}

def @func_3966() -> (Tensor[(9, 1, 8), float64],) {
  %363 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
  %364 = %363.1;
  (%364,)
}

def @func_3816(%var_3815: Tensor[(11, 5, 9), float32]) -> Tensor[(11, 5, 9), float32] {
  %366 = fn (%var_3805: Tensor[(11, 5, 9), float32]) -> Tensor[(11, 5, 9), float32] {
    %365 = cast(%var_3805, dtype="float32") /* ty=Tensor[(11, 5, 9), float32] */;
    rsqrt(%365) /* ty=Tensor[(11, 5, 9), float32] */
  };
  %366(%var_3815) /* ty=Tensor[(11, 5, 9), float32] */
}

def @func_6368(%var_6366: Tensor[(18), uint16], %var_6367: Tensor[(234), int32]) -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(234), bool], Tensor[(18), uint16], Tensor[(234), int32]) {
  @func_6364(%var_6366, %var_6367) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(234), bool], Tensor[(18), uint16], Tensor[(234), int32]) */
}

def @func_9302() -> (Tensor[(9, 1, 8), float64],) {
  %367 = @func_5807() /* ty=Tensor[(9, 1, 8), float64] */;
  (%367,)
}

def @func_9710() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  @func_9708() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_9954(%var_9914: Tensor[(704), float32], %var_9921: Tensor[(18), uint16], %var_9922: Tensor[(234), int32]) -> (Tensor[(11, 8, 8), uint32], Tensor[(704), float32], Tensor[(18), uint16], Tensor[(18), uint16], Tensor[(234), int32], Tensor[(4, 10, 12), float64], Tensor[(6, 3, 11), float32], Tensor[(200), float32], Tensor[(50, 4), float32], Tensor[(9, 1, 8), float64]) {
  %368 = cast(%var_9914, dtype="float32") /* ty=Tensor[(704), float32] */;
  %369 = reshape(%368, newshape=[11, 8, 8]) /* ty=Tensor[(11, 8, 8), float32] */;
  %370 = cast(%var_9921, dtype="uint16") /* ty=Tensor[(18), uint16] */;
  %371 = cast(%var_9922, dtype="int32") /* ty=Tensor[(234), int32] */;
  %372 = reshape(%370, newshape=[18]) /* ty=Tensor[(18), uint16] */;
  %373 = reshape(%371, newshape=[234]) /* ty=Tensor[(234), int32] */;
  %374 = @func_6364(%372, %373) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(234), bool], Tensor[(18), uint16], Tensor[(234), int32]) */;
  %375 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %376 = @func_9382() /* ty=(Tensor[(6, 3, 11), float32],) */;
  %377 = %376.0;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
  %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(50, 4), float32] */, dtype="float32") /* ty=Tensor[(50, 4), float32] */;
  %380 = reshape(%379, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %381 = @func_3508(%380) /* ty=(Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(9, ?, 8), bool]) */;
  %382 = @func_6434(%369) /* ty=Tensor[(11, 8, 8), uint32] */;
  %383 = %374.3;
  %384 = %375.0;
  %385 = asin(%378) /* ty=Tensor[(6, 3, 11), float32] */;
  %386 = %381.1;
  %387 = @func_4816() /* ty=Tensor[(9, 1, 8), float64] */;
  (%382, %var_9914, %383, %var_9921, %var_9922, %384, %385, %386, meta[relay.Constant][23] /* ty=Tensor[(50, 4), float32] */, %387)
}

def @func_3968() -> (Tensor[(9, 1, 8), float64],) {
  @func_3966() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_10329() -> (Tensor[(6, 3, 11), float32],) {
  %388 = @func_9382() /* ty=(Tensor[(6, 3, 11), float32],) */;
  %389 = %388.0;
  (%389,)
}

def @func_9708() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %390 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %391 = %390.0;
  %392 = @func_8428() /* ty=Tensor[(9, 1, 8), float64] */;
  (%391, %392)
}

def @func_5668() -> (Tensor[(50), float32],) {
  %393 = @func_2713() /* ty=(Tensor[(50), float32],) */;
  %394 = %393.0;
  (%394,)
}

def @func_7986() -> (Tensor[(50), float32], Tensor[(9, ?, 8), bool]) {
  %406 = fn () -> (Tensor[(50), float32], Tensor[(9, ?, 8), bool]) {
    %395 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
    %396 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
    %397 = %396.0;
    %398 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
    %399 = %398.0;
    %400 = cast(%399, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %401 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%397, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %404 = %395.2;
    %405 = less(%402, %403) /* ty=Tensor[(9, ?, 8), bool] */;
    (%404, %405)
  };
  %406() /* ty=(Tensor[(50), float32], Tensor[(9, ?, 8), bool]) */
}

def @func_2036() -> (Tensor[(9, ?, 8), float64],) {
  %407 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %408 = %407.0;
  %409 = @func_1857() /* ty=Tensor[(9, 1, 8), float64] */;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %411 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%408, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %414 = mod(%412, %413) /* ty=Tensor[(9, ?, 8), float64] */;
  (%414,)
}

def @func_7669() -> (Tensor[(5, 4, 10), float32],) {
  %417 = fn () -> (Tensor[(5, 4, 10), float32],) {
    %415 = @func_7014() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(1008), float64], Tensor[(50), float32]) */;
    %416 = %415.1;
    (%416,)
  };
  %417() /* ty=(Tensor[(5, 4, 10), float32],) */
}

def @func_8838(%var_8818: Tensor[(80), int16], %var_8819: Tensor[(50, 1), float32], %var_8821: Tensor[(504), float64]) -> (Tensor[(4, 10, 12), float32], Tensor[(50, 1), float32], Tensor[(80), int16], Tensor[(50, 1), float32], Tensor[(200), float32], Tensor[(504), float64]) {
  %418 = @func_7087() /* ty=(Tensor[(4, 10, 12), float32],) */;
  %419 = cast(%var_8818, dtype="int16") /* ty=Tensor[(80), int16] */;
  %420 = cast(%var_8818, dtype="int16") /* ty=Tensor[(80), int16] */;
  %421 = cast(%var_8819, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
  %422 = cast(meta[relay.Constant][24] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %423 = cast(%var_8821, dtype="float64") /* ty=Tensor[(504), float64] */;
  %424 = reshape(%419, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %425 = reshape(%420, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
  %426 = reshape(%421, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
  %427 = reshape(%422, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %428 = reshape(%423, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %429 = @func_2612(%424, %425, %426, %427, %428) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
  %430 = %418.0;
  %431 = %429.3;
  (%430, %431, %var_8818, %var_8819, meta[relay.Constant][24] /* ty=Tensor[(200), float32] */, %var_8821)
}

def @func_1721() -> Tensor[(100, 2), float32] {
  %433 = fn () -> Tensor[(100, 2), float32] {
    %432 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %432.0
  };
  %433() /* ty=Tensor[(100, 2), float32] */
}

def @func_6042() -> Tensor[(9, 1, 8), float64] {
  %435 = fn () -> Tensor[(9, 1, 8), float64] {
    %434 = @func_3989() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %434.0
  };
  %435() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1115(%var_1113: Tensor[(5, 1, 10), float32], %var_1114: Tensor[(5, 4, 10), float32]) -> Tensor[(5, 4, 10), float32] {
  %438 = fn (%var_1107: Tensor[(5, 1, 10), float32], %var_1108: Tensor[(5, 4, 10), float32]) -> Tensor[(5, 4, 10), float32] {
    %436 = cast(%var_1107, dtype="float32") /* ty=Tensor[(5, 1, 10), float32] */;
    %437 = cast(%var_1108, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
    mod(%436, %437) /* ty=Tensor[(5, 4, 10), float32] */
  };
  %438(%var_1113, %var_1114) /* ty=Tensor[(5, 4, 10), float32] */
}

def @func_8097() -> Tensor[(9, ?, 8), float64] {
  %439 = fn () -> Tensor[(9, ?, 8), float64] {
    @func_6082() /* ty=Tensor[(9, ?, 8), float64] */
  };
  %439() /* ty=Tensor[(9, ?, 8), float64] */
}

def @func_2818() -> (Tensor[(9, 1, 8), float64],) {
  @func_2816() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_3660() -> Tensor[(9, 1, 8), float64] {
  %440 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_3085() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %440() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5471() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %443 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
    %441 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
    %442 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
    (%441, %442)
  };
  %443() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_4578() -> Tensor[(9, 9, 8), bool] {
  %444 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
  %444.0
}

def @func_2436() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %445 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %446 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  %447 = %445.3;
  (%446, %447)
}

def @func_1486() -> (Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %448 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %449 = %448.3;
  %450 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
  %451 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
  (%449, %450, %451)
}

def @func_8657() -> (Tensor[(9, 1, 8), float64],) {
  %453 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %452 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
    (%452,)
  };
  %453() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_1671() -> Tensor[(9, 1, 8), float64] {
  %454 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  %455 = cast(%454, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  sqrt(%455) /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1018(%var_1016: Tensor[(13, 3, 6), int32], %var_1017: Tensor[(13, 3, 6), int32]) -> (Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) {
  %463 = fn (%var_1004: Tensor[(13, 3, 6), int32], %var_1005: Tensor[(13, 3, 6), int32]) -> (Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) {
    %456 = cast(%var_1005, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
    %457 = shape_of(%var_1004, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%var_1004, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %460 = cast(%var_1004, dtype="float32") /* ty=Tensor[(13, 3, 6), float32] */;
    %461 = less(%458, %459) /* ty=Tensor[(13, 3, 6), bool] */;
    %462 = asin(%460) /* ty=Tensor[(13, 3, 6), float32] */;
    (%461, %462)
  };
  %463(%var_1016, %var_1017) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */
}

def @func_6331() -> Tensor[(4, 10, 12), float64] {
  @func_6329() /* ty=Tensor[(4, 10, 12), float64] */
}

def @func_7436(%var_7395: Tensor[(1680), int16]) -> (Tensor[(9, 1, 8), float64], Tensor[(1680), int16], Tensor[(270), float32], Tensor[(1680), int16], Tensor[(336), float64]) {
  %464 = cast(meta[relay.Constant][25] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %465 = cast(%var_7395, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %466 = cast(meta[relay.Constant][26] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %467 = reshape(%464, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), float32] */;
  %468 = reshape(%465, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
  %469 = reshape(%466, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %470 = @func_3376(%467, %468, %469) /* ty=(Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) */;
  %471 = @func_3781() /* ty=Tensor[(9, 1, 8), float64] */;
  %472 = %470.3;
  (%471, %472, meta[relay.Constant][25] /* ty=Tensor[(270), float32] */, %var_7395, meta[relay.Constant][26] /* ty=Tensor[(336), float64] */)
}

def @func_2618(%var_2613: Tensor[(8, 5, 2), int16], %var_2614: Tensor[(8, 5, 2), int16], %var_2615: Tensor[(50, 1), float32], %var_2616: Tensor[(200), float32], %var_2617: Tensor[(504), float64]) -> (Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) {
  %498 = fn (%var_2554: Tensor[(8, 5, 2), int16], %var_2555: Tensor[(8, 5, 2), int16], %var_2570: Tensor[(50, 1), float32], %var_2571: Tensor[(200), float32], %var_2575: Tensor[(504), float64]) -> (Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) {
    %473 = cast(%var_2555, dtype="bool") /* ty=Tensor[(8, 5, 2), bool] */;
    %474 = shape_of(%var_2554, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%var_2554, dtype="bool") /* ty=Tensor[(8, 5, 2), bool] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %477 = cast(meta[relay.Constant][27] /* ty=Tensor[(1232, 1), float32] */, dtype="float32") /* ty=Tensor[(1232, 1), float32] */;
    %478 = reshape(%477, newshape=[11, 7, 16]) /* ty=Tensor[(11, 7, 16), float32] */;
    %479 = @func_2368(%478) /* ty=(Tensor[(11, 7, 16), float32],) */;
    %480 = cast(%var_2575, dtype="float64") /* ty=Tensor[(504), float64] */;
    %481 = reshape(%480, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
    %482 = @func_1999(%481) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
    %483 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
    %484 = cast(%var_2570, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
    %485 = cast(%var_2571, dtype="float32") /* ty=Tensor[(200), float32] */;
    %486 = reshape(%484, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), float32] */;
    %487 = reshape(%485, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
    %488 = @func_1112(%486, %487) /* ty=Tensor[(5, 4, 10), float32] */;
    %489 = cast(%var_2571, dtype="bool") /* ty=Tensor[(200), bool] */;
    %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
    %491 = cast(%488, dtype="bool") /* ty=Tensor[(5, 4, 10), bool] */;
    %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %493 = greater(%475, %476) /* ty=Tensor[(8, 5, 2), bool] */;
    %494 = %479.0;
    %495 = %482.1;
    %496 = %483.0;
    %497 = equal(%491, %492) /* ty=Tensor[(5, 4, 10), bool] */;
    (%493, %494, meta[relay.Constant][27] /* ty=Tensor[(1232, 1), float32] */, %var_2570, %495, %var_2575, %496, %497)
  };
  %498(%var_2613, %var_2614, %var_2615, %var_2616, %var_2617) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */
}

def @func_8306(%var_8199: Tensor[(16, 15, 9), int64], %var_8249: Tensor[(200), float32]) -> (Tensor[(16, 15, 9), bool], Tensor[(9, 1, 8), float64], Tensor[(16, 15, 9), float32], Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(1430), uint16], Tensor[(9, 1, 8), float32]) {
  %499 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 15, 1), int64] */, dtype="bool") /* ty=Tensor[(16, 15, 1), bool] */;
  %500 = cast(%var_8199, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %501 = @func_3966() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %502 = cast(%var_8199, dtype="float32") /* ty=Tensor[(16, 15, 9), float32] */;
  %503 = cast(%var_8249, dtype="float32") /* ty=Tensor[(200), float32] */;
  %504 = reshape(%503, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
  %505 = @func_1614(%504) /* ty=(Tensor[(100, 2), bool],) */;
  %506 = @func_6286() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], int8, Tensor[(1430), uint16], Tensor[(9, 1, 8), float64]) */;
  %507 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %508 = greater_equal(%499, %500) /* ty=Tensor[(16, 15, 9), bool] */;
  %509 = %501.0;
  %510 = log2(%502) /* ty=Tensor[(16, 15, 9), float32] */;
  %511 = %505.0;
  %512 = %506.3;
  %513 = %507.0;
  (%508, %509, %510, %511, %var_8249, %512, %513)
}

def @func_8018() -> (Tensor[(9, 1, 8), float64],) {
  %515 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %514 = @func_5534() /* ty=Tensor[(9, 1, 8), float64] */;
    (%514,)
  };
  %515() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_3376(%var_3339: Tensor[(15, 6, 3), float32], %var_3366: Tensor[(1680), int16], %var_3373: Tensor[(336), float64]) -> (Tensor[(15, 6, 3), float32], Tensor[(9, 1, 8), float64], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(14, 2, 12), float64], Tensor[(336), float64]) {
  %516 = cast(%var_3339, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %517 = @func_1538() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %518 = cast(%var_3366, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %519 = reshape(%518, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), int16] */;
  %520 = @func_1649(%519) /* ty=(Tensor[(16, 7, 15), int16],) */;
  %521 = cast(%var_3373, dtype="float64") /* ty=Tensor[(336), float64] */;
  %522 = reshape(%521, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
  %523 = asin(%516) /* ty=Tensor[(15, 6, 3), float32] */;
  %524 = %517.0;
  %525 = %520.0;
  %526 = @func_123(%522) /* ty=Tensor[(14, 2, 12), float64] */;
  (%523, %524, %525, %var_3366, %526, %var_3373)
}

def @func_3526() -> (Tensor[(9, ?, 8), float64],) {
  @func_3524() /* ty=(Tensor[(9, ?, 8), float64],) */
}

def @func_1838(%var_1837: Tensor[(9, 14, 8), float64]) -> (Tensor[(9, 14, 8), bool],) {
  %531 = fn (%var_1826: Tensor[(9, 14, 8), float64]) -> (Tensor[(9, 14, 8), bool],) {
    %527 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
    %528 = cast(%527, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %529 = cast(%var_1826, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
    %530 = logical_or(%528, %529) /* ty=Tensor[(9, 14, 8), bool] */;
    (%530,)
  };
  %531(%var_1837) /* ty=(Tensor[(9, 14, 8), bool],) */
}

def @func_2988() -> Tensor[(9, 1, 8), float64] {
  %533 = fn () -> Tensor[(9, 1, 8), float64] {
    %532 = @func_2870() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %532.0
  };
  %533() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_10292() -> (Tensor[(4, 10, 12), float64], Tensor[(9, 8, 9), float64]) {
  %534 = @func_5898() /* ty=(Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) */;
  %535 = %534.7;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(9, 8, 9), float64] */;
  %537 = asin(%536) /* ty=Tensor[(9, 8, 9), float64] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  %539 = exp(%538) /* ty=Tensor[(9, 8, 9), float32] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(9, 8, 9), float64] */;
  %541 = @func_6329() /* ty=Tensor[(4, 10, 12), float64] */;
  %542 = sigmoid(%540) /* ty=Tensor[(9, 8, 9), float64] */;
  (%541, %542)
}

def @func_9304() -> (Tensor[(9, 1, 8), float64],) {
  @func_9302() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_4990() -> (Tensor[(9, 1, 8), float32], Tensor[(100, 2), float32]) {
  @func_4988() /* ty=(Tensor[(9, 1, 8), float32], Tensor[(100, 2), float32]) */
}

def @func_10183(%var_10169: Tensor[(9, 7, 8), float64], %var_10176: Tensor[(9, 6, 8), float64]) -> (Tensor[(9, 7, 8), uint8], Tensor[(9, 6, 8), bool]) {
  %543 = @func_2816() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
  %546 = cast(%var_10169, dtype="uint8") /* ty=Tensor[(9, 7, 8), uint8] */;
  %547 = cast(%544, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %548 = cast(%var_10176, dtype="bool") /* ty=Tensor[(9, 6, 8), bool] */;
  %549 = bitwise_xor(%545, %546) /* ty=Tensor[(9, 7, 8), uint8] */;
  %550 = less(%547, %548) /* ty=Tensor[(9, 6, 8), bool] */;
  (%549, %550)
}

def @func_9959(%var_9956: Tensor[(704), float32], %var_9957: Tensor[(18), uint16], %var_9958: Tensor[(234), int32]) -> (Tensor[(11, 8, 8), uint32], Tensor[(704), float32], Tensor[(18), uint16], Tensor[(18), uint16], Tensor[(234), int32], Tensor[(4, 10, 12), float64], Tensor[(6, 3, 11), float32], Tensor[(200), float32], Tensor[(50, 4), float32], Tensor[(9, 1, 8), float64]) {
  @func_9954(%var_9956, %var_9957, %var_9958) /* ty=(Tensor[(11, 8, 8), uint32], Tensor[(704), float32], Tensor[(18), uint16], Tensor[(18), uint16], Tensor[(234), int32], Tensor[(4, 10, 12), float64], Tensor[(6, 3, 11), float32], Tensor[(200), float32], Tensor[(50, 4), float32], Tensor[(9, 1, 8), float64]) */
}

def @func_9172() -> Tensor[(9, 1, 8), float64] {
  %551 = @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %551.0
}

def @func_9673(%var_9671: Tensor[(9, 13, 8), float64]) -> Tensor[(9, 13, 8), bool] {
  @func_9670(%var_9671) /* ty=Tensor[(9, 13, 8), bool] */
}

def @func_7640() -> Tensor[(9, 1, 8), float64] {
  %552 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_4816() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %552() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_9653(%var_9651: Tensor[(200), float32], %var_9652: Tensor[(1232), float32]) -> (Tensor[(9, 7, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(200), float32], Tensor[(1232), float32]) {
  @func_9649(%var_9651, %var_9652) /* ty=(Tensor[(9, 7, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(200), float32], Tensor[(1232), float32]) */
}

def @func_3330(%var_3321: Tensor[(2, 9, 2), float32], %var_3322: Tensor[(2, 9, 2), float32]) -> (Tensor[(2, 9, 2), float32],) {
  %553 = cast(%var_3322, dtype="float32") /* ty=Tensor[(2, 9, 2), float32] */;
  %554 = shape_of(%var_3321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_3321, dtype="float32") /* ty=Tensor[(2, 9, 2), float32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %557 = mod(%555, %556) /* ty=Tensor[(2, 9, 2), float32] */;
  (%557,)
}

def @func_1539() -> (Tensor[(9, 1, 8), float64],) {
  %559 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %558 = @func_1323() /* ty=Tensor[(9, 1, 8), float64] */;
    (%558,)
  };
  %559() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_9631() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 9, 8), bool]) {
  %560 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
  %561 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
  (%560, %561)
}

def @func_7551() -> Tensor[(9, ?, 8), float64] {
  %563 = fn () -> Tensor[(9, ?, 8), float64] {
    %562 = @func_7376() /* ty=(Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) */;
    %562.5
  };
  %563() /* ty=Tensor[(9, ?, 8), float64] */
}

def @func_4817() -> Tensor[(9, 1, 8), float64] {
  %565 = fn () -> Tensor[(9, 1, 8), float64] {
    %564 = @func_3107() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(234), int32], Tensor[(504, 1), float64]) */;
    %564.0
  };
  %565() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_1857() -> Tensor[(9, 1, 8), float64] {
  @func_1097() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_6201(%var_6199: Tensor[(9, 5, 1), float64]) -> Tensor[(9, 5, 1), float64] {
  @func_6198(%var_6199) /* ty=Tensor[(9, 5, 1), float64] */
}

def @func_8367() -> (Tensor[(9, ?, 8), float64], Tensor[(9, ?, 8), float32]) {
  %566 = @func_4362() /* ty=(Tensor[(9, ?, 8), float64],) */;
  %567 = @func_8096() /* ty=Tensor[(9, ?, 8), float64] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(9, ?, 8), float32] */;
  %569 = %566.0;
  %570 = log2(%568) /* ty=Tensor[(9, ?, 8), float32] */;
  (%569, %570)
}

def @func_7015() -> (Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(1008), float64], Tensor[(50), float32]) {
  %579 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(1008), float64], Tensor[(50), float32]) {
    %571 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %572 = cast(meta[relay.Constant][29] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %573 = cast(meta[relay.Constant][30] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %574 = reshape(%572, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
    %575 = reshape(%573, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %576 = @func_5626(%574, %575) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(30, 9), float32], Tensor[(1008), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64]) */;
    %577 = %571.0;
    %578 = %576.6;
    (%577, %578, meta[relay.Constant][29] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][30] /* ty=Tensor[(50), float32] */)
  };
  %579() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(1008), float64], Tensor[(50), float32]) */
}

def @func_5899() -> (Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) {
  %598 = fn () -> (Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) {
    %580 = @func_5154() /* ty=(Tensor[(50), float32], Tensor[(504, 2), float64], Tensor[(1008), float64]) */;
    %581 = %580.1;
    %582 = cast(%581, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
    %583 = cast(meta[relay.Constant][31] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %584 = reshape(%583, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
    %585 = @func_1999(%584) /* ty=(Tensor[(9, 7, 8), bool], Tensor[(9, 7, 8), bool], Tensor[(9, 1, 8), float64], Tensor[(9, 7, 8), float32], Tensor[(13, 3, 6), float32], Tensor[(234), int32], Tensor[(9, 1, 8), float64]) */;
    %586 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
    %587 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
    %588 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %589 = reshape(%588, newshape=[]) /* ty=uint8 */;
    %590 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %591 = reshape(%590, newshape=[]) /* ty=uint8 */;
    %592 = exp(%582) /* ty=Tensor[(504, 2), float64] */;
    %593 = %585.0;
    %594 = %586.0;
    %595 = %587.0;
    %596 = @func_530(%589) /* ty=Tensor[(9, 8, 9), bool] */;
    %597 = @func_530(%591) /* ty=Tensor[(9, 8, 9), bool] */;
    (%592, %593, meta[relay.Constant][31] /* ty=Tensor[(504), float64] */, %594, %595, %596, meta[relay.Constant][32] /* ty=uint8 */, %597)
  };
  %598() /* ty=(Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) */
}

def @func_9383() -> (Tensor[(6, 3, 11), float32],) {
  %601 = fn () -> (Tensor[(6, 3, 11), float32],) {
    %599 = @func_3713() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %600 = %599.1;
    (%600,)
  };
  %601() /* ty=(Tensor[(6, 3, 11), float32],) */
}

def @func_3542() -> (Tensor[(9, 1, 8), float64],) {
  %602 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%602,)
}

def @func_2714() -> (Tensor[(50), float32],) {
  %605 = fn () -> (Tensor[(50), float32],) {
    %603 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
    %604 = %603.2;
    (%604,)
  };
  %605() /* ty=(Tensor[(50), float32],) */
}

def @func_2179() -> Tensor[(9, 1, 8), float64] {
  @func_2177() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_10118() -> Tensor[(9, 1, 8), float64] {
  %606 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_1251() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %606() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_9649(%var_9644: Tensor[(200), float32], %var_9645: Tensor[(1232), float32]) -> (Tensor[(9, 7, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(200), float32], Tensor[(1232), float32]) {
  %607 = @func_6246() /* ty=(Tensor[(9, 7, 8), float32], Tensor[(9, 1, 8), float32], Tensor[(9, 9, 8), bool]) */;
  %608 = cast(%var_9644, dtype="float32") /* ty=Tensor[(200), float32] */;
  %609 = cast(%var_9645, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %610 = reshape(%608, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
  %611 = reshape(%609, newshape=[1232]) /* ty=Tensor[(1232), float32] */;
  %612 = @func_9002(%610, %611) /* ty=(Tensor[(11, 7, 16), float32], Tensor[(1232), float32], Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32], Tensor[(100, 2), float32]) */;
  %613 = %607.0;
  %614 = %612.0;
  (%613, %614, %var_9644, %var_9645)
}

def @func_2115(%var_2114: Tensor[(1680), int16]) -> (Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) {
  %627 = fn (%var_2103: Tensor[(1680), int16]) -> (Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) {
    %615 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %616 = %615.0;
    %617 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
    %618 = cast(%617, dtype="int16") /* ty=Tensor[(9, 1, 8), int16] */;
    %619 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%616, dtype="int16") /* ty=Tensor[(9, 1, 8), int16] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %622 = cast(%var_2103, dtype="int16") /* ty=Tensor[(1680), int16] */;
    %623 = reshape(%622, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), int16] */;
    %624 = @func_1649(%623) /* ty=(Tensor[(16, 7, 15), int16],) */;
    %625 = add(%620, %621) /* ty=Tensor[(9, ?, 8), int16] */;
    %626 = %624.0;
    (%625, %626, %var_2103)
  };
  %627(%var_2114) /* ty=(Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) */
}

def @func_4988() -> (Tensor[(9, 1, 8), float32], Tensor[(100, 2), float32]) {
  %628 = @func_3937() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %629 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %631 = %628.0;
  %632 = sinh(%630) /* ty=Tensor[(100, 2), float32] */;
  (%631, %632)
}

def @func_3989() -> (Tensor[(9, 1, 8), float64],) {
  %633 = @func_3300() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %634 = %633.0;
  (%634,)
}

def @func_5324(%var_5312: Tensor[(9, 5, 8), float64]) -> (Tensor[(9, 5, 8), bool],) {
  %635 = @func_3781() /* ty=Tensor[(9, 1, 8), float64] */;
  %636 = cast(%635, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %637 = cast(%var_5312, dtype="bool") /* ty=Tensor[(9, 5, 8), bool] */;
  %638 = less(%636, %637) /* ty=Tensor[(9, 5, 8), bool] */;
  (%638,)
}

def @func_3899(%var_3897: Tensor[(50), float32], %var_3898: Tensor[(50, 4), float32]) -> (Tensor[(9, ?, 8), uint8], Tensor[(504), float64], Tensor[(40, 2), int16], Tensor[(50), float32], Tensor[(50, 4), float32], Tensor[(504), float64], Tensor[(9, ?, 8), uint16], Tensor[(9, 1, 8), float64]) {
  %667 = fn (%var_3875: Tensor[(50), float32], %var_3876: Tensor[(50, 4), float32]) -> (Tensor[(9, ?, 8), uint8], Tensor[(504), float64], Tensor[(40, 2), int16], Tensor[(50), float32], Tensor[(50, 4), float32], Tensor[(504), float64], Tensor[(9, ?, 8), uint16], Tensor[(9, 1, 8), float64]) {
    %639 = @func_3524() /* ty=(Tensor[(9, ?, 8), float64],) */;
    %640 = %639.0;
    %641 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
    %642 = cast(%641, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
    %643 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%640, dtype="uint8") /* ty=Tensor[(9, ?, 8), uint8] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %646 = cast(meta[relay.Constant][33] /* ty=Tensor[(40, 2), int16] */, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
    %647 = cast(meta[relay.Constant][33] /* ty=Tensor[(40, 2), int16] */, dtype="int16") /* ty=Tensor[(40, 2), int16] */;
    %648 = cast(%var_3875, dtype="float32") /* ty=Tensor[(50), float32] */;
    %649 = cast(%var_3876, dtype="float32") /* ty=Tensor[(50, 4), float32] */;
    %650 = cast(meta[relay.Constant][34] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %651 = reshape(%646, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
    %652 = reshape(%647, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
    %653 = reshape(%648, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
    %654 = reshape(%649, newshape=[200]) /* ty=Tensor[(200), float32] */;
    %655 = reshape(%650, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %656 = @func_2612(%651, %652, %653, %654, %655) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
    %657 = @func_2499() /* ty=Tensor[(9, 1, 8), float64] */;
    %658 = cast(%657, dtype="uint16") /* ty=Tensor[(9, 1, 8), uint16] */;
    %659 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%641, dtype="uint16") /* ty=Tensor[(9, 1, 8), uint16] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %662 = @func_3829() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %663 = right_shift(%644, %645) /* ty=Tensor[(9, ?, 8), uint8] */;
    %664 = %656.5;
    %665 = bitwise_xor(%660, %661) /* ty=Tensor[(9, ?, 8), uint16] */;
    %666 = %662.0;
    (%663, %664, meta[relay.Constant][33] /* ty=Tensor[(40, 2), int16] */, %var_3875, %var_3876, meta[relay.Constant][34] /* ty=Tensor[(504), float64] */, %665, %666)
  };
  %667(%var_3897, %var_3898) /* ty=(Tensor[(9, ?, 8), uint8], Tensor[(504), float64], Tensor[(40, 2), int16], Tensor[(50), float32], Tensor[(50, 4), float32], Tensor[(504), float64], Tensor[(9, ?, 8), uint16], Tensor[(9, 1, 8), float64]) */
}

def @func_4887() -> (Tensor[(4, 10, 12), float64],) {
  %668 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %669 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(4, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %672 = power(%670, %671) /* ty=Tensor[(4, 10, 12), float64] */;
  (%672,)
}

def @func_7899() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  %673 = @func_1579() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %674 = @func_7376() /* ty=(Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) */;
  %675 = %673.0;
  %676 = %674.6;
  (%675, %676)
}

def @func_3648(%var_3646: Tensor[(504, 2), float64]) -> (Tensor[(9, ?, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64]) {
  @func_3645(%var_3646) /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64]) */
}

def @func_5792(%var_5790: Tensor[(1, 3, 6), uint16], %var_5791: Tensor[(234), int32]) -> (Tensor[(6, 3, 6), bool], Tensor[(13, 3, 6), bool], Tensor[(234), bool]) {
  %691 = fn (%var_5767: Tensor[(1, 3, 6), uint16], %var_5782: Tensor[(234), int32]) -> (Tensor[(6, 3, 6), bool], Tensor[(13, 3, 6), bool], Tensor[(234), bool]) {
    %677 = cast(%var_5767, dtype="bool") /* ty=Tensor[(1, 3, 6), bool] */;
    %678 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 3, 6), uint16] */, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
    %679 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
    %680 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
    %681 = reshape(%679, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
    %682 = reshape(%680, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
    %683 = @func_1015(%681, %682) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
    %684 = cast(%var_5782, dtype="bool") /* ty=Tensor[(234), bool] */;
    %685 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %686 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), int32] */, dtype="bool") /* ty=Tensor[(234), bool] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?), bool] */;
    %688 = greater(%677, %678) /* ty=Tensor[(6, 3, 6), bool] */;
    %689 = %683.0;
    %690 = greater_equal(%686, %687) /* ty=Tensor[(234), bool] */;
    (%688, %689, %690)
  };
  %691(%var_5790, %var_5791) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(13, 3, 6), bool], Tensor[(234), bool]) */
}

def @func_6287() -> (Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], int8, Tensor[(1430), uint16], Tensor[(9, 1, 8), float64]) {
  %702 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], int8, Tensor[(1430), uint16], Tensor[(9, 1, 8), float64]) {
    %692 = @func_3989() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %693 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %694 = cast(meta[relay.Constant][40] /* ty=Tensor[(1430), uint16] */, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
    %695 = reshape(%693, newshape=[]) /* ty=int8 */;
    %696 = reshape(%694, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
    %697 = @func_5411(%695, %696) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(8, 8, 16), int8], int8, Tensor[(1024), int8], Tensor[(1430), uint16]) */;
    %698 = @func_3829() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %699 = %692.0;
    %700 = %697.4;
    %701 = %698.0;
    (%699, %700, meta[relay.Constant][39] /* ty=int8 */, meta[relay.Constant][40] /* ty=Tensor[(1430), uint16] */, %701)
  };
  %702() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], int8, Tensor[(1430), uint16], Tensor[(9, 1, 8), float64]) */
}

def @func_1176() -> (Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) {
  @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */
}

def @func_3301() -> (Tensor[(9, 1, 8), float64],) {
  %704 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %703 = @func_2177() /* ty=Tensor[(9, 1, 8), float64] */;
    (%703,)
  };
  %704() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_6437(%var_6435: Tensor[(11, 8, 8), float32]) -> Tensor[(11, 8, 8), uint32] {
  @func_6434(%var_6435) /* ty=Tensor[(11, 8, 8), uint32] */
}

def @func_5295() -> Tensor[(9, 1, 8), float64] {
  %705 = @func_4625() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %705.0
}

def @func_6247() -> (Tensor[(9, 7, 8), float32], Tensor[(9, 1, 8), float32], Tensor[(9, 9, 8), bool]) {
  %714 = fn () -> (Tensor[(9, 7, 8), float32], Tensor[(9, 1, 8), float32], Tensor[(9, 9, 8), bool]) {
    %706 = @func_3713() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(6, 3, 11), float32], Tensor[(198), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %707 = %706.0;
    %708 = cast(%707, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
    %709 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 7, 8), float64] */, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
    %710 = cast(%707, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
    %711 = floor_mod(%708, %709) /* ty=Tensor[(9, 7, 8), float32] */;
    %712 = erf(%710) /* ty=Tensor[(9, 1, 8), float32] */;
    %713 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
    (%711, %712, %713)
  };
  %714() /* ty=(Tensor[(9, 7, 8), float32], Tensor[(9, 1, 8), float32], Tensor[(9, 9, 8), bool]) */
}

def @func_1851() -> Tensor[(9, 1, 8), float64] {
  %716 = fn () -> Tensor[(9, 1, 8), float64] {
    %715 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %715.2
  };
  %716() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5107() -> (Tensor[(9, ?, 8), bool], Tensor[(5, 4, 10), float32], Tensor[(9, ?, 8), float64], Tensor[(4, 10, 12), float32]) {
  %717 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %718 = %717.0;
  %719 = @func_3659() /* ty=Tensor[(9, 1, 8), float64] */;
  %720 = cast(%719, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %721 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%718, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
  %725 = cast(%718, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %726 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%719, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %729 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %730 = %729.0;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
  %732 = less_equal(%722, %723) /* ty=Tensor[(9, ?, 8), bool] */;
  %733 = %724.1;
  %734 = floor_divide(%727, %728) /* ty=Tensor[(9, ?, 8), float64] */;
  %735 = log(%731) /* ty=Tensor[(4, 10, 12), float32] */;
  (%732, %733, %734, %735)
}

def @func_1859() -> Tensor[(9, 1, 8), float64] {
  @func_1857() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_9273() -> (Tensor[(9, 1, 8), float64],) {
  %736 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
  (%736,)
}

def @func_5649() -> Tensor[(9, ?, 8), bool] {
  %745 = fn () -> Tensor[(9, ?, 8), bool] {
    %737 = @func_1486() /* ty=(Tensor[(100, 2), float32], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %738 = %737.2;
    %739 = @func_5470() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %740 = %739.1;
    %741 = cast(%740, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %742 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
    %743 = cast(%738, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%743, %744) /* ty=Tensor[(9, ?, 8), bool] */
  };
  %745() /* ty=Tensor[(9, ?, 8), bool] */
}

def @func_3184() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) {
  %751 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) {
    %746 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
    %747 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
    %748 = @func_1251() /* ty=Tensor[(9, 1, 8), float64] */;
    %749 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
    %750 = %746.0;
    (%747, %748, %749, %750)
  };
  %751() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */
}

def @func_9670(%var_9664: Tensor[(9, 13, 8), float64]) -> Tensor[(9, 13, 8), bool] {
  %752 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %753 = %752.0;
  %754 = cast(%753, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %755 = cast(%var_9664, dtype="bool") /* ty=Tensor[(9, 13, 8), bool] */;
  less_equal(%754, %755) /* ty=Tensor[(9, 13, 8), bool] */
}

def @func_9896(%var_9894: Tensor[(14, 13, 15), float64], %var_9895: Tensor[(14, 13, 15), float64]) -> Tensor[(14, 13, 15), float64] {
  %760 = fn (%var_9888: Tensor[(14, 13, 15), float64], %var_9889: Tensor[(14, 13, 15), float64]) -> Tensor[(14, 13, 15), float64] {
    %756 = cast(%var_9889, dtype="float64") /* ty=Tensor[(14, 13, 15), float64] */;
    %757 = shape_of(%var_9888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%var_9888, dtype="float64") /* ty=Tensor[(14, 13, 15), float64] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    multiply(%758, %759) /* ty=Tensor[(14, 13, 15), float64] */
  };
  %760(%var_9894, %var_9895) /* ty=Tensor[(14, 13, 15), float64] */
}

def @func_7580() -> (Tensor[(4, 10, 12), float32], Tensor[(9, 1, 8), float32]) {
  %761 = @func_7087() /* ty=(Tensor[(4, 10, 12), float32],) */;
  %762 = @func_6490() /* ty=(Tensor[(9, 1, 8), float32],) */;
  %763 = %761.0;
  %764 = %762.0;
  (%763, %764)
}

def @func_9510() -> (Tensor[(9, 14, 11), float64],) {
  %767 = fn () -> (Tensor[(9, 14, 11), float64],) {
    %765 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 14, 11), float64] */;
    %766 = erf(%765) /* ty=Tensor[(9, 14, 11), float64] */;
    (%766,)
  };
  %767() /* ty=(Tensor[(9, 14, 11), float64],) */
}

def @func_8428() -> Tensor[(9, 1, 8), float64] {
  %768 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
  %768.2
}

def @func_9174() -> Tensor[(9, 1, 8), float64] {
  @func_9172() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_9206() -> Tensor[(9, 1, 8), float64] {
  %769 = fn () -> Tensor[(9, 1, 8), float64] {
    @func_5295() /* ty=Tensor[(9, 1, 8), float64] */
  };
  %769() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_4096(%var_4093: int8, %var_4094: Tensor[(8, 8, 16), int8], %var_4095: Tensor[(1430), uint16]) -> (Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %787 = fn (%var_4009: int8, %var_4010: Tensor[(8, 8, 16), int8], %var_4040: Tensor[(1430), uint16]) -> (Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
    %770 = cast(%var_4009, dtype="int8") /* ty=int8 */;
    %771 = cast(%var_4010, dtype="int8") /* ty=Tensor[(8, 8, 16), int8] */;
    %772 = cast(meta[relay.Constant][43] /* ty=Tensor[(504, 2), float64] */, dtype="float64") /* ty=Tensor[(504, 2), float64] */;
    %773 = reshape(%772, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
    %774 = @func_1836(%773) /* ty=(Tensor[(9, 14, 8), bool],) */;
    %775 = cast(%var_4040, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
    %776 = cast(meta[relay.Constant][44] /* ty=Tensor[(1680), int16] */, dtype="int16") /* ty=Tensor[(1680), int16] */;
    %777 = reshape(%775, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint16] */;
    %778 = reshape(%776, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
    %779 = @func_2338(%777, %778) /* ty=(Tensor[(10, 13, 11), uint16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64]) */;
    %780 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %781 = bitwise_or(%770, %771) /* ty=Tensor[(8, 8, 16), int8] */;
    %782 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
    %783 = %774.0;
    %784 = %779.0;
    %785 = %780.0;
    %786 = @func_1308() /* ty=Tensor[(9, 1, 8), float64] */;
    (%781, %782, %783, meta[relay.Constant][43] /* ty=Tensor[(504, 2), float64] */, %784, %var_4040, meta[relay.Constant][44] /* ty=Tensor[(1680), int16] */, %785, %786)
  };
  %787(%var_4093, %var_4094, %var_4095) /* ty=(Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_1252() -> Tensor[(9, 1, 8), float64] {
  %789 = fn () -> Tensor[(9, 1, 8), float64] {
    %788 = @func_1174() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) */;
    %788.0
  };
  %789() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5213() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  @func_5211() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */
}

def @func_7582() -> (Tensor[(4, 10, 12), float32], Tensor[(9, 1, 8), float32]) {
  @func_7580() /* ty=(Tensor[(4, 10, 12), float32], Tensor[(9, 1, 8), float32]) */
}

def @func_9247() -> (Tensor[(9, ?, 8), float64],) {
  %790 = @func_7550() /* ty=Tensor[(9, ?, 8), float64] */;
  (%790,)
}

def @func_4656(%var_4655: Tensor[(234), int32]) -> (Tensor[(9, 1, 8), float64], Tensor[(13, 3, 6), bool], Tensor[(234), int32]) {
  %798 = fn (%var_4644: Tensor[(234), int32]) -> (Tensor[(9, 1, 8), float64], Tensor[(13, 3, 6), bool], Tensor[(234), int32]) {
    %791 = cast(%var_4644, dtype="int32") /* ty=Tensor[(234), int32] */;
    %792 = cast(%var_4644, dtype="int32") /* ty=Tensor[(234), int32] */;
    %793 = reshape(%791, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
    %794 = reshape(%792, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int32] */;
    %795 = @func_1015(%793, %794) /* ty=(Tensor[(13, 3, 6), bool], Tensor[(13, 3, 6), float32]) */;
    %796 = @func_1857() /* ty=Tensor[(9, 1, 8), float64] */;
    %797 = %795.0;
    (%796, %797, %var_4644)
  };
  %798(%var_4655) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(13, 3, 6), bool], Tensor[(234), int32]) */
}

def @func_9747() -> Tensor[(9, 1, 8), float64] {
  %800 = fn () -> Tensor[(9, 1, 8), float64] {
    %799 = @func_3183() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64]) */;
    %799.2
  };
  %800() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_2038() -> (Tensor[(9, ?, 8), float64],) {
  @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */
}

def @func_5629(%var_5627: Tensor[(1008), float64], %var_5628: Tensor[(50), float32]) -> (Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(30, 9), float32], Tensor[(1008), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64]) {
  %818 = fn (%var_5591: Tensor[(1008), float64], %var_5618: Tensor[(50), float32]) -> (Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(30, 9), float32], Tensor[(1008), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64]) {
    %801 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
    %802 = cast(meta[relay.Constant][45] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
    %803 = reshape(%802, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float64] */;
    %804 = cast(%var_5591, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %805 = reshape(%804, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float64] */;
    %806 = @func_4217(%805) /* ty=(Tensor[(9, 14, 8), int8], Tensor[(9, 1, 8), float64], Tensor[(30, 9), float32], Tensor[(4, 420), int16], Tensor[(168, 2), float64]) */;
    %807 = cast(%var_5618, dtype="float32") /* ty=Tensor[(50), float32] */;
    %808 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 200), float32] */, dtype="float32") /* ty=Tensor[(1, 200), float32] */;
    %809 = reshape(%807, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), float32] */;
    %810 = reshape(%808, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
    %811 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %812 = %801.0;
    %813 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
    %814 = @func_123(%803) /* ty=Tensor[(14, 2, 12), float64] */;
    %815 = %806.2;
    %816 = @func_1112(%809, %810) /* ty=Tensor[(5, 4, 10), float32] */;
    %817 = %811.0;
    (%812, %813, %814, meta[relay.Constant][45] /* ty=Tensor[(336, 1), float64] */, %815, %var_5591, %816, %var_5618, meta[relay.Constant][46] /* ty=Tensor[(1, 200), float32] */, %817)
  };
  %818(%var_5627, %var_5628) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(14, 2, 12), float64], Tensor[(336, 1), float64], Tensor[(30, 9), float32], Tensor[(1008), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(1, 200), float32], Tensor[(9, 1, 8), float64]) */
}

def @func_3781() -> Tensor[(9, 1, 8), float64] {
  @func_3085() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_6565() -> Tensor[(9, 1, 8), float64] {
  @func_6563() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_8310(%var_8308: Tensor[(16, 15, 9), int64], %var_8309: Tensor[(200), float32]) -> (Tensor[(16, 15, 9), bool], Tensor[(9, 1, 8), float64], Tensor[(16, 15, 9), float32], Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(1430), uint16], Tensor[(9, 1, 8), float32]) {
  @func_8306(%var_8308, %var_8309) /* ty=(Tensor[(16, 15, 9), bool], Tensor[(9, 1, 8), float64], Tensor[(16, 15, 9), float32], Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(1430), uint16], Tensor[(9, 1, 8), float32]) */
}

def @func_3991() -> (Tensor[(9, 1, 8), float64],) {
  @func_3989() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_5391() -> Tensor[(11, 8, 1), float32] {
  %820 = fn () -> Tensor[(11, 8, 1), float32] {
    %819 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
    log2(%819) /* ty=Tensor[(11, 8, 1), float32] */
  };
  %820() /* ty=Tensor[(11, 8, 1), float32] */
}

def @func_2459() -> (Tensor[(9, 1, 8), float64],) {
  %822 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %821 = @func_1671() /* ty=Tensor[(9, 1, 8), float64] */;
    (%821,)
  };
  %822() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_8843(%var_8840: Tensor[(80), int16], %var_8841: Tensor[(50, 1), float32], %var_8842: Tensor[(504), float64]) -> (Tensor[(4, 10, 12), float32], Tensor[(50, 1), float32], Tensor[(80), int16], Tensor[(50, 1), float32], Tensor[(200), float32], Tensor[(504), float64]) {
  @func_8838(%var_8840, %var_8841, %var_8842) /* ty=(Tensor[(4, 10, 12), float32], Tensor[(50, 1), float32], Tensor[(80), int16], Tensor[(50, 1), float32], Tensor[(200), float32], Tensor[(504), float64]) */
}

def @func_9481() -> (Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) {
  %826 = fn () -> (Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) {
    %823 = @func_3989() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %824 = @func_8096() /* ty=Tensor[(9, ?, 8), float64] */;
    %825 = %823.0;
    (%824, %825)
  };
  %826() /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_9002(%var_8966: Tensor[(100, 2), float32], %var_8972: Tensor[(1232), float32]) -> (Tensor[(11, 7, 16), float32], Tensor[(1232), float32], Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32], Tensor[(100, 2), float32]) {
  %827 = cast(%var_8972, dtype="float32") /* ty=Tensor[(1232), float32] */;
  %828 = reshape(%827, newshape=[11, 7, 16]) /* ty=Tensor[(11, 7, 16), float32] */;
  %829 = @func_2368(%828) /* ty=(Tensor[(11, 7, 16), float32],) */;
  %830 = @func_5470() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
  %831 = @func_7899() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
  %832 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
  %833 = cast(%var_8966, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(2), int32] */;
  %835 = cast(%832, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %837 = floor_mod(%835, %836) /* ty=Tensor[(100, 2), float32] */;
  %838 = cast(%837, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %839 = asinh(%838) /* ty=Tensor[(100, 2), float32] */;
  %840 = cast(%839, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %841 = %829.0;
  %842 = %830.0;
  %843 = %831.1;
  %844 = asin(%840) /* ty=Tensor[(100, 2), float32] */;
  (%841, %var_8972, %842, %843, %844)
}

def @func_7901() -> (Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) {
  @func_7899() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */
}

def @func_3783() -> Tensor[(9, 1, 8), float64] {
  @func_3781() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_151(%var_150: Tensor[(6, 3, 11), float32]) -> (Tensor[(6, 3, 11), float32],) {
  %847 = fn (%var_140: Tensor[(6, 3, 11), float32]) -> (Tensor[(6, 3, 11), float32],) {
    %845 = cast(%var_140, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
    %846 = tan(%845) /* ty=Tensor[(6, 3, 11), float32] */;
    (%846,)
  };
  %847(%var_150) /* ty=(Tensor[(6, 3, 11), float32],) */
}

def @func_8510(%var_8509: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), bool], Tensor[(9, 1, 8), float32]) {
  %854 = fn (%var_8474: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), bool], Tensor[(9, 1, 8), float32]) {
    %848 = @func_6563() /* ty=Tensor[(9, 1, 8), float64] */;
    %849 = cast(%848, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %850 = cast(%var_8474, dtype="bool") /* ty=Tensor[(9, 12, 8), bool] */;
    %851 = cast(%848, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
    %852 = logical_and(%849, %850) /* ty=Tensor[(9, 12, 8), bool] */;
    %853 = asin(%851) /* ty=Tensor[(9, 1, 8), float32] */;
    (%852, %853)
  };
  %854(%var_8509) /* ty=(Tensor[(9, 12, 8), bool], Tensor[(9, 1, 8), float32]) */
}

def @func_1174() -> (Tensor[(9, 1, 8), float64], Tensor[(5, 4, 10), float32], Tensor[(50), float32], Tensor[(100, 2), float32]) {
  %855 = cast(meta[relay.Constant][48] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %856 = cast(meta[relay.Constant][49] /* ty=Tensor[(100, 2), float32] */, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %857 = reshape(%855, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), float32] */;
  %858 = reshape(%856, newshape=[5, 4, 10]) /* ty=Tensor[(5, 4, 10), float32] */;
  %859 = @func_1097() /* ty=Tensor[(9, 1, 8), float64] */;
  %860 = @func_1112(%857, %858) /* ty=Tensor[(5, 4, 10), float32] */;
  (%859, %860, meta[relay.Constant][48] /* ty=Tensor[(50), float32] */, meta[relay.Constant][49] /* ty=Tensor[(100, 2), float32] */)
}

def @func_9633() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 9, 8), bool]) {
  @func_9631() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 9, 8), bool]) */
}

def @func_4676(%var_4674: uint32) -> (Tensor[(10, 4, 13), uint32],) {
  @func_4673(%var_4674) /* ty=(Tensor[(10, 4, 13), uint32],) */
}

def @func_10294() -> (Tensor[(4, 10, 12), float64], Tensor[(9, 8, 9), float64]) {
  @func_10292() /* ty=(Tensor[(4, 10, 12), float64], Tensor[(9, 8, 9), float64]) */
}

def @func_2872() -> (Tensor[(9, 1, 8), float64],) {
  @func_2870() /* ty=(Tensor[(9, 1, 8), float64],) */
}

def @func_3510(%var_3509: Tensor[(200), float32]) -> (Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(9, ?, 8), bool]) {
  %874 = fn (%var_3496: Tensor[(200), float32]) -> (Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(9, ?, 8), bool]) {
    %861 = cast(%var_3496, dtype="float32") /* ty=Tensor[(200), float32] */;
    %862 = reshape(%861, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
    %863 = @func_1614(%862) /* ty=(Tensor[(100, 2), bool],) */;
    %864 = @func_1850() /* ty=Tensor[(9, 1, 8), float64] */;
    %865 = cast(%864, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
    %866 = cosh(%865) /* ty=Tensor[(9, 1, 8), float64] */;
    %867 = @func_3085() /* ty=Tensor[(9, 1, 8), float64] */;
    %868 = cast(%867, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %869 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%866, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %872 = %863.0;
    %873 = logical_and(%870, %871) /* ty=Tensor[(9, ?, 8), bool] */;
    (%872, %var_3496, %873)
  };
  %874(%var_3509) /* ty=(Tensor[(100, 2), bool], Tensor[(200), float32], Tensor[(9, ?, 8), bool]) */
}

def @func_7789(%var_7695: uint8, %var_7773: Tensor[(1680), int16]) -> (Tensor[(9, ?, 8), bool], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 9, 8), bool], Tensor[(10, 20), float32], Tensor[(512, 2), uint16], Tensor[(9, ?, 8), int16], Tensor[(1680), int16], Tensor[(100, 2), float32]) {
  %875 = cast(%var_7695, dtype="uint8") /* ty=uint8 */;
  %876 = reshape(%875, newshape=[]) /* ty=uint8 */;
  %877 = @func_7189() /* ty=(Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64], Tensor[(1430), uint16], Tensor[(512, 2), uint16]) */;
  %878 = cast(%var_7773, dtype="int16") /* ty=Tensor[(1680), int16] */;
  %879 = reshape(%878, newshape=[1680]) /* ty=Tensor[(1680), int16] */;
  %880 = @func_2113(%879) /* ty=(Tensor[(9, ?, 8), int16], Tensor[(16, 7, 15), int16], Tensor[(1680), int16]) */;
  %881 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 20), float32] */, dtype="float32") /* ty=Tensor[(10, 20), float32] */;
  %882 = reshape(%881, newshape=[100, 2]) /* ty=Tensor[(100, 2), float32] */;
  %883 = @func_1614(%882) /* ty=(Tensor[(100, 2), bool],) */;
  %884 = %883.0;
  %885 = cast(%884, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %886 = @func_5648() /* ty=Tensor[(9, ?, 8), bool] */;
  %887 = @func_530(%876) /* ty=Tensor[(9, 8, 9), bool] */;
  %888 = @func_4578() /* ty=Tensor[(9, 9, 8), bool] */;
  %889 = %877.3;
  %890 = %880.0;
  %891 = atanh(%885) /* ty=Tensor[(100, 2), float32] */;
  (%886, %887, %var_7695, %888, meta[relay.Constant][50] /* ty=Tensor[(10, 20), float32] */, %889, %890, %var_7773, %891)
}

def @func_4492(%var_4490: Tensor[(360), float64]) -> (Tensor[(9, 1, 8), float64], Tensor[(336), float64], Tensor[(360), float64], Tensor[(2, 168), float64], Tensor[(9, 1, 8), float64]) {
  @func_4489(%var_4490) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(336), float64], Tensor[(360), float64], Tensor[(2, 168), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_3754() -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
  %896 = fn () -> (Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) {
    %892 = @func_1745() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %893 = @func_2436() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(100, 2), float32]) */;
    %894 = %892.0;
    %895 = %893.0;
    (%894, %895)
  };
  %896() /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_1711(%var_1709: Tensor[(9, 4, 8), float64]) -> (Tensor[(9, 4, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(9, 3, 8), float64]) {
  @func_1708(%var_1709) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(9, 12, 8), bool], Tensor[(9, 3, 8), float64]) */
}

def @func_3085() -> Tensor[(9, 1, 8), float64] {
  @func_2987() /* ty=Tensor[(9, 1, 8), float64] */
}

def @func_5534() -> Tensor[(9, 1, 8), float64] {
  %897 = @func_2870() /* ty=(Tensor[(9, 1, 8), float64],) */;
  %897.0
}

def @func_6029() -> (Tensor[(9, 9, 8), bool], Tensor[(11, 8, 1), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) {
  %906 = fn () -> (Tensor[(9, 9, 8), bool], Tensor[(11, 8, 1), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) {
    %898 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
    %899 = @func_3542() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %900 = @func_2036() /* ty=(Tensor[(9, ?, 8), float64],) */;
    %901 = %898.1;
    %902 = @func_5390() /* ty=Tensor[(11, 8, 1), float32] */;
    %903 = %899.0;
    %904 = %900.0;
    %905 = @func_2987() /* ty=Tensor[(9, 1, 8), float64] */;
    (%901, %902, %903, %904, %905)
  };
  %906() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(11, 8, 1), float32], Tensor[(9, 1, 8), float64], Tensor[(9, ?, 8), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_7377() -> (Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) {
  %935 = fn () -> (Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) {
    %907 = @func_5668() /* ty=(Tensor[(50), float32],) */;
    %908 = @func_1720() /* ty=Tensor[(100, 2), float32] */;
    %909 = cast(%908, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
    %910 = sin(%909) /* ty=Tensor[(100, 2), float64] */;
    %911 = cast(%910, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
    %912 = log2(%911) /* ty=Tensor[(100, 2), float64] */;
    %913 = cast(%910, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
    %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(2), int32] */;
    %915 = cast(%912, dtype="float64") /* ty=Tensor[(100, 2), float64] */;
    %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %917 = cast(meta[relay.Constant][51] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %918 = reshape(%917, newshape=[]) /* ty=uint8 */;
    %919 = @func_1525(%918) /* ty=(Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8) */;
    %920 = @func_5898() /* ty=(Tensor[(504, 2), float64], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(4, 10, 12), float64], Tensor[(9, 1, 8), float64], Tensor[(9, 8, 9), bool], uint8, Tensor[(9, 8, 9), bool]) */;
    %921 = @func_4362() /* ty=(Tensor[(9, ?, 8), float64],) */;
    %922 = cast(%912, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %923 = acos(%922) /* ty=Tensor[(100, 2), float32] */;
    %924 = cast(%923, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %925 = atan(%924) /* ty=Tensor[(100, 2), float32] */;
    %926 = cast(%925, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %927 = exp(%926) /* ty=Tensor[(100, 2), float32] */;
    %928 = cast(%927, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
    %929 = %907.0;
    %930 = floor_divide(%915, %916) /* ty=Tensor[(100, 2), float64] */;
    %931 = %919.0;
    %932 = %920.5;
    %933 = %921.0;
    %934 = cos(%928) /* ty=Tensor[(100, 2), float32] */;
    (%929, %930, %931, meta[relay.Constant][51] /* ty=uint8 */, %932, %933, %934)
  };
  %935() /* ty=(Tensor[(50), float32], Tensor[(100, 2), float64], Tensor[(9, 1, 8), float64], uint8, Tensor[(9, 8, 9), bool], Tensor[(9, ?, 8), float64], Tensor[(100, 2), float32]) */
}

def @func_8748(%var_8745: Tensor[(9, 6, 8), bool], %var_8746: Tensor[(80), int16], %var_8747: Tensor[(504), float64]) -> (Tensor[(5, 4, 10), float32], Tensor[(9, 6, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(80), int16], Tensor[(5, 10), float32], Tensor[(504), float64], Tensor[(9, 1, 8), float64]) {
  %955 = fn (%var_8693: Tensor[(9, 6, 8), bool], %var_8703: Tensor[(80), int16], %var_8705: Tensor[(504), float64]) -> (Tensor[(5, 4, 10), float32], Tensor[(9, 6, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(80), int16], Tensor[(5, 10), float32], Tensor[(504), float64], Tensor[(9, 1, 8), float64]) {
    %936 = @func_7668() /* ty=(Tensor[(5, 4, 10), float32],) */;
    %937 = @func_5648() /* ty=Tensor[(9, ?, 8), bool] */;
    %938 = cast(%937, dtype="float32") /* ty=Tensor[(9, ?, 8), float32] */;
    %939 = cast(%var_8693, dtype="float32") /* ty=Tensor[(9, 6, 8), float32] */;
    %940 = cast(%var_8703, dtype="int16") /* ty=Tensor[(80), int16] */;
    %941 = cast(%var_8703, dtype="int16") /* ty=Tensor[(80), int16] */;
    %942 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
    %943 = %936.0;
    %944 = cast(%943, dtype="float32") /* ty=Tensor[(5, 4, 10), float32] */;
    %945 = cast(%var_8705, dtype="float64") /* ty=Tensor[(504), float64] */;
    %946 = reshape(%940, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
    %947 = reshape(%941, newshape=[8, 5, 2]) /* ty=Tensor[(8, 5, 2), int16] */;
    %948 = reshape(%942, newshape=[50, 1]) /* ty=Tensor[(50, 1), float32] */;
    %949 = reshape(%944, newshape=[200]) /* ty=Tensor[(200), float32] */;
    %950 = reshape(%945, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %951 = @func_2612(%946, %947, %948, %949, %950) /* ty=(Tensor[(8, 5, 2), bool], Tensor[(11, 7, 16), float32], Tensor[(1232, 1), float32], Tensor[(50, 1), float32], Tensor[(9, 7, 8), bool], Tensor[(504), float64], Tensor[(9, ?, 8), float64], Tensor[(5, 4, 10), bool]) */;
    %952 = mod(%938, %939) /* ty=Tensor[(9, 6, 8), float32] */;
    %953 = %951.1;
    %954 = @func_6563() /* ty=Tensor[(9, 1, 8), float64] */;
    (%943, %952, %953, %var_8703, meta[relay.Constant][52] /* ty=Tensor[(5, 10), float32] */, %var_8705, %954)
  };
  %955(%var_8745, %var_8746, %var_8747) /* ty=(Tensor[(5, 4, 10), float32], Tensor[(9, 6, 8), float32], Tensor[(11, 7, 16), float32], Tensor[(80), int16], Tensor[(5, 10), float32], Tensor[(504), float64], Tensor[(9, 1, 8), float64]) */
}

def @func_5414(%var_5412: int8, %var_5413: Tensor[(1430), uint16]) -> (Tensor[(9, 9, 8), bool], Tensor[(8, 8, 16), int8], int8, Tensor[(1024), int8], Tensor[(1430), uint16]) {
  %966 = fn (%var_5398: int8, %var_5400: Tensor[(1430), uint16]) -> (Tensor[(9, 9, 8), bool], Tensor[(8, 8, 16), int8], int8, Tensor[(1024), int8], Tensor[(1430), uint16]) {
    %956 = @func_4147() /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, 9, 8), bool], Tensor[(9, 1, 8), float64]) */;
    %957 = cast(%var_5398, dtype="int8") /* ty=int8 */;
    %958 = cast(meta[relay.Constant][53] /* ty=Tensor[(1024), int8] */, dtype="int8") /* ty=Tensor[(1024), int8] */;
    %959 = cast(%var_5400, dtype="uint16") /* ty=Tensor[(1430), uint16] */;
    %960 = reshape(%957, newshape=[]) /* ty=int8 */;
    %961 = reshape(%958, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), int8] */;
    %962 = reshape(%959, newshape=[1430]) /* ty=Tensor[(1430), uint16] */;
    %963 = @func_4092(%960, %961, %962) /* ty=(Tensor[(8, 8, 16), int8], Tensor[(9, 1, 8), float64], Tensor[(9, 14, 8), bool], Tensor[(504, 2), float64], Tensor[(10, 13, 11), uint16], Tensor[(1430), uint16], Tensor[(1680), int16], Tensor[(9, 1, 8), float64], Tensor[(9, 1, 8), float64]) */;
    %964 = %956.0;
    %965 = %963.0;
    (%964, %965, %var_5398, meta[relay.Constant][53] /* ty=Tensor[(1024), int8] */, %var_5400)
  };
  %966(%var_5412, %var_5413) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(8, 8, 16), int8], int8, Tensor[(1024), int8], Tensor[(1430), uint16]) */
}

def @func_6329() -> Tensor[(4, 10, 12), float64] {
  %967 = @func_4887() /* ty=(Tensor[(4, 10, 12), float64],) */;
  %967.0
}

def @func_6492() -> (Tensor[(9, 1, 8), float32],) {
  @func_6490() /* ty=(Tensor[(9, 1, 8), float32],) */
}

def @func_530(%var_525: uint8) -> Tensor[(9, 8, 9), bool] {
  %968 = cast(%var_525, dtype="bool") /* ty=bool */;
  %969 = cast(meta[relay.Constant][54] /* ty=Tensor[(9, 8, 9), uint8] */, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  equal(%968, %969) /* ty=Tensor[(9, 8, 9), bool] */
}

def @func_7921() -> (Tensor[(9, 1, 8), float64],) {
  %972 = fn () -> (Tensor[(9, 1, 8), float64],) {
    %970 = @func_2458() /* ty=(Tensor[(9, 1, 8), float64],) */;
    %971 = %970.0;
    (%971,)
  };
  %972() /* ty=(Tensor[(9, 1, 8), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen827/build/output.py", line 3241, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:22:21] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

