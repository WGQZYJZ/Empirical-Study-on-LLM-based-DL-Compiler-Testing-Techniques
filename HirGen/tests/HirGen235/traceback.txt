==========mod==========
#[version = "0.0.5"]
def @func_6459() -> (Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %0 = @func_4486() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) */;
  %1 = @func_5063() /* ty=(Tensor[(14, 4, 15), float32], Tensor[(6, 16, 8), float32]) */;
  %2 = %0.1;
  %3 = @func_3505() /* ty=Tensor[(6, 16, 8), float32] */;
  %4 = %1.1;
  (%2, %3, %4)
}

def @func_6674() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) {
  %5 = @func_3516() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %6 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
  %7 = %5.0;
  %8 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
  %9 = %6.2;
  (%7, %8, %9)
}

def @func_3991() -> Tensor[(6, 16, 8), float32] {
  @func_3274() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_6743() -> Tensor[(6, 16, 8), float32] {
  %10 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
  %10.1
}

def @func_7618() -> (Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) {
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 9, 10), float64] */;
  %12 = sqrt(%11) /* ty=Tensor[(8, 9, 10), float64] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(8, 9, 10), float32] */;
  %14 = atan(%13) /* ty=Tensor[(8, 9, 10), float32] */;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(8, 9, 10), float64] */;
  %16 = rsqrt(%15) /* ty=Tensor[(8, 9, 10), float64] */;
  %17 = cast(%16, dtype="int16") /* ty=Tensor[(8, 9, 10), int16] */;
  %18 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(8, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 9, 10), float64] */, dtype="int16") /* ty=Tensor[(8, 9, 10), int16] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %21 = cast(%16, dtype="float64") /* ty=Tensor[(8, 9, 10), float64] */;
  %22 = bitwise_and(%19, %20) /* ty=Tensor[(8, 9, 10), int16] */;
  %23 = @func_5410() /* ty=Tensor[(6, 16, 8), float32] */;
  %24 = acos(%21) /* ty=Tensor[(8, 9, 10), float64] */;
  (%22, %23, %24)
}

def @func_5375() -> Tensor[(6, 16, 8), float32] {
  @func_3505() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4635() -> (Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) {
  %25 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
  %26 = %25.2;
  %27 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
  (%26, %27)
}

def @func_6246() -> float32 {
  %28 = @func_5259() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
  %28.4
}

def @func_5305() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %29 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %30 = @func_3505() /* ty=Tensor[(6, 16, 8), float32] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  %32 = %29.0;
  %33 = sqrt(%31) /* ty=Tensor[(6, 16, 8), float32] */;
  (%32, %33)
}

def @func_4383() -> Tensor[(6, 16, 8), float32] {
  @func_2140() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_7202(%var_7111: Tensor[(52), uint8]) -> (Tensor[(6, 16, 8), float32], Tensor[(2, 4, 2), float32], Tensor[(52), uint8], Tensor[(416), uint8], Tensor[(780, 1), uint8], Tensor[(?, 924), uint16], Tensor[(8, 11, 13), float64], Tensor[(22, 52), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(?, 924), int64]) {
  %34 = @func_4513() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %35 = cast(%var_7111, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 924), float64] */, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
  %39 = reshape(%35, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %40 = reshape(%36, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), uint8] */;
  %41 = reshape(%37, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint8] */;
  %42 = reshape(%38, newshape=[924, 1]) /* ty=Tensor[(924, 1), float64] */;
  %43 = @func_2563(%39, %40, %41, %42) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 924), float64] */, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
  %45 = acos(%44) /* ty=Tensor[(1, 924), float64] */;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(1, 924), float32] */;
  %47 = asin(%46) /* ty=Tensor[(1, 924), float32] */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 924), float64] */, dtype="uint16") /* ty=Tensor[(1, 924), uint16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(2), int32] */;
  %50 = cast(%47, dtype="uint16") /* ty=Tensor[(1, 924), uint16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(22, 52), float64] */, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %53 = reshape(%52, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float64] */;
  %54 = @func_4186(%53) /* ty=(Tensor[(8, 11, 13), float64], Tensor[(8, 11, 13), float32], Tensor[(8, 11, 13), int16]) */;
  %55 = @func_6297() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %56 = @func_3516() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %57 = cast(%45, dtype="int64") /* ty=Tensor[(1, 924), int64] */;
  %58 = shape_of(%47, dtype="int32") /* ty=Tensor[(2), int32] */;
  %59 = cast(%47, dtype="int64") /* ty=Tensor[(1, 924), int64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %61 = %34.0;
  %62 = %43.3;
  %63 = right_shift(%50, %51) /* ty=Tensor[(?, 924), uint16] */;
  %64 = %54.0;
  %65 = %55.0;
  %66 = %56.0;
  %67 = bitwise_xor(%59, %60) /* ty=Tensor[(?, 924), int64] */;
  (%61, %62, %var_7111, meta[relay.Constant][1] /* ty=Tensor[(416), uint8] */, meta[relay.Constant][2] /* ty=Tensor[(780, 1), uint8] */, %63, %64, meta[relay.Constant][4] /* ty=Tensor[(22, 52), float64] */, %65, %66, %67)
}

def @func_3832() -> Tensor[(6, 16, 8), float32] {
  %68 = @func_3811() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %68.0
}

def @func_5805(%var_5802: float32) -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) {
  %69 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %70 = cast(%var_5802, dtype="float32") /* ty=float32 */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %72 = reshape(%70, newshape=[]) /* ty=float32 */;
  %73 = reshape(%71, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %74 = @func_2436(%72, %73) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
  %75 = %69.0;
  %76 = %74.1;
  (%75, %76, %var_5802, meta[relay.Constant][5] /* ty=Tensor[(30), float32] */)
}

def @func_8033() -> Tensor[(6, 16, 8), float32] {
  @func_5038() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3840(%var_3834: uint64, %var_3835: Tensor[(1, 7, 1), uint64]) -> Tensor[(1, 7, 1), bool] {
  %77 = cast(%var_3834, dtype="bool") /* ty=bool */;
  %78 = cast(%var_3835, dtype="bool") /* ty=Tensor[(1, 7, 1), bool] */;
  greater_equal(%77, %78) /* ty=Tensor[(1, 7, 1), bool] */
}

def @func_7281(%var_7248: Tensor[(192, 4), float32]) -> (Tensor[(10, 1, 3), float64], Tensor[(6, 16, 8), float32], Tensor[(192, 4), float32], Tensor[(6, 16, 8), float32]) {
  %79 = @func_6507() /* ty=(Tensor[(10, 1, 3), float64],) */;
  %80 = cast(%var_7248, dtype="float32") /* ty=Tensor[(192, 4), float32] */;
  %81 = reshape(%80, newshape=[6, 16, 8]) /* ty=Tensor[(6, 16, 8), float32] */;
  %82 = @func_6318(%81) /* ty=(Tensor[(6, 16, 8), float32],) */;
  %83 = %79.0;
  %84 = %82.0;
  %85 = @func_5375() /* ty=Tensor[(6, 16, 8), float32] */;
  (%83, %84, %var_7248, %85)
}

def @func_6093() -> (Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float64]) {
  %86 = @func_4486() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) */;
  %87 = @func_4846() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %88 = %86.1;
  %89 = %87.0;
  (%88, %89)
}

def @func_1027(%var_1015: Tensor[(6, 7, 14), uint64]) -> Tensor[(6, 7, 14), uint64] {
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 7, 14), uint64] */, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %91 = shape_of(%var_1015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_1015, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%92, %93) /* ty=Tensor[(6, 7, 14), uint64] */
}

def @func_7653(%var_7638: Tensor[(364), uint64]) -> (Tensor[(6, 16, 8), float32], Tensor[(14, 13, 2), float64], Tensor[(364), uint64], Tensor[(6, 16, 8), float32]) {
  %94 = @func_7618() /* ty=(Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) */;
  %95 = cast(%var_7638, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %96 = cast(%var_7638, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %97 = cast(%var_7638, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %98 = reshape(%95, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), uint64] */;
  %99 = reshape(%96, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), uint64] */;
  %100 = reshape(%97, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), uint64] */;
  %101 = @func_2932(%98, %99, %100) /* ty=(Tensor[(14, 13, 2), float64],) */;
  %102 = @func_6708() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
  %103 = %94.1;
  %104 = %101.0;
  %105 = %102.2;
  (%103, %104, %var_7638, %105)
}

def @func_2611(%var_2580: Tensor[(70), float32]) -> (Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], float32, Tensor[(588), float64]) {
  %106 = cast(%var_2580, dtype="float32") /* ty=Tensor[(70), float32] */;
  %107 = cast(%var_2580, dtype="float32") /* ty=Tensor[(70), float32] */;
  %108 = reshape(%106, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %109 = reshape(%107, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %110 = @func_2366(%108, %109) /* ty=(Tensor[(5, 7, 2), bool],) */;
  %111 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %114 = reshape(%113, newshape=[7, 12, 7]) /* ty=Tensor[(7, 12, 7), float64] */;
  %115 = @func_634(%114) /* ty=(Tensor[(7, 12, 7), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) */;
  %116 = %110.0;
  %117 = sigmoid(%112) /* ty=Tensor[(6, 16, 8), float32] */;
  %118 = %115.2;
  (%116, %var_2580, %117, %118, meta[relay.Constant][7] /* ty=Tensor[(588), float64] */)
}

def @func_4540() -> (Tensor[(6, 16, 8), float32],) {
  %119 = @func_3811() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %120 = %119.0;
  (%120,)
}

def @func_3133() -> Tensor[(6, 16, 8), float64] {
  @func_2383() /* ty=Tensor[(6, 16, 8), float64] */
}

def @main(%var_8054: float32) -> (Tensor[(7, 10, 13), float32],) {
  %121 = cast(%var_8054, dtype="float32") /* ty=float32 */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %123 = mod(%121, %122) /* ty=Tensor[(7, 10, 13), float32] */;
  (%123,)
}

def @func_6297() -> (Tensor[(6, 16, 8), float64],) {
  %124 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  (%124,)
}

def @func_6148(%var_6101: Tensor[(2, 8, 5), float64], %var_6142: Tensor[(2, 780), float64]) -> (Tensor[(6, 16, 8), float32], Tensor[(2, 8, 5), float32], Tensor[(2, 8, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(2, 780), float64]) {
  %125 = cast(%var_6101, dtype="float64") /* ty=Tensor[(2, 8, 5), float64] */;
  %126 = acos(%125) /* ty=Tensor[(2, 8, 5), float64] */;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(2, 8, 5), float64] */;
  %128 = cosh(%127) /* ty=Tensor[(2, 8, 5), float64] */;
  %129 = cast(%126, dtype="float32") /* ty=Tensor[(2, 8, 5), float32] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="float32") /* ty=Tensor[(2, 8, 5), float32] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %133 = cast(%126, dtype="float32") /* ty=Tensor[(2, 8, 5), float32] */;
  %134 = cast(%var_6142, dtype="float64") /* ty=Tensor[(2, 780), float64] */;
  %135 = cast(%var_6142, dtype="float64") /* ty=Tensor[(2, 780), float64] */;
  %136 = reshape(%134, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
  %137 = reshape(%135, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
  %138 = @func_3224(%136, %137) /* ty=(Tensor[(13, 15, 8), float64],) */;
  %139 = @func_5555() /* ty=Tensor[(6, 16, 8), float32] */;
  %140 = minimum(%131, %132) /* ty=Tensor[(2, 8, 5), float32] */;
  %141 = tan(%133) /* ty=Tensor[(2, 8, 5), float32] */;
  %142 = %138.0;
  (%139, %140, %141, %142, %var_6142)
}

def @func_3437() -> (Tensor[(6, 16, 8), float64],) {
  %143 = @func_2383() /* ty=Tensor[(6, 16, 8), float64] */;
  (%143,)
}

def @func_6970(%var_6936: Tensor[(4, 14, 2), float32], %var_6958: Tensor[(924), float64]) -> (Tensor[(6, 16, 8), float64], Tensor[(10, 3), float32], Tensor[(1, 780), uint8], Tensor[(924), float64], float32, Tensor[(42, 1), float32], Tensor[(4, 14, 2), float64]) {
  %144 = @func_3396() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %145 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 780), uint8] */, dtype="uint8") /* ty=Tensor[(1, 780), uint8] */;
  %146 = cast(%var_6958, dtype="float64") /* ty=Tensor[(924), float64] */;
  %147 = cast(-4.76628f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %148 = cast(meta[relay.Constant][10] /* ty=Tensor[(42, 1), float32] */, dtype="float32") /* ty=Tensor[(42, 1), float32] */;
  %149 = reshape(%145, newshape=[780, 1]) /* ty=Tensor[(780, 1), uint8] */;
  %150 = reshape(%146, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %151 = reshape(%147, newshape=[]) /* ty=float32 */;
  %152 = reshape(%148, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %153 = @func_4444(%149, %150, %151, %152) /* ty=(Tensor[(65), bool], Tensor[(16), int8], Tensor[(416), uint8], Tensor[(924), float64], Tensor[(10, 3), float32], Tensor[(1260), float64], float32, Tensor[(5, 6), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(780, 52), bool], Tensor[(7, 11, 6), float64], Tensor[(42), float32], Tensor[(462), float32]) */;
  %154 = cast(%var_6936, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  %155 = atanh(%154) /* ty=Tensor[(4, 14, 2), float32] */;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(4, 14, 2), float64] */;
  %157 = %144.0;
  %158 = %153.4;
  %159 = sinh(%156) /* ty=Tensor[(4, 14, 2), float64] */;
  (%157, %158, meta[relay.Constant][9] /* ty=Tensor[(1, 780), uint8] */, %var_6958, -4.76628f /* ty=float32 */, meta[relay.Constant][10] /* ty=Tensor[(42, 1), float32] */, %159)
}

def @func_4723(%var_4667: Tensor[(6, 16, 8), float32], %var_4683: Tensor[(672), bool]) -> (Tensor[(6, 16, 8), bool], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(14, 16, 1), bool], Tensor[(6, 16, 8), float32]) {
  %160 = @func_2406() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %161 = %160.0;
  %162 = cast(%var_4667, dtype="bool") /* ty=Tensor[(6, 16, 8), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(6, 16, 8), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = cast(%var_4683, dtype="bool") /* ty=Tensor[(672), bool] */;
  %167 = cast(%var_4683, dtype="bool") /* ty=Tensor[(672), bool] */;
  %168 = reshape(%166, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %169 = reshape(%167, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %170 = cast(%var_4667, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %171 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%161, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %174 = @func_4486() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) */;
  %175 = logical_and(%164, %165) /* ty=Tensor[(6, 16, 8), bool] */;
  %176 = @func_135(%168, %169) /* ty=Tensor[(8, 7, 12), bool] */;
  %177 = divide(%172, %173) /* ty=Tensor[(6, 16, 8), float64] */;
  %178 = @func_4383() /* ty=Tensor[(6, 16, 8), float32] */;
  %179 = %174.3;
  %180 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%175, %176, %var_4683, %177, %178, %179, %180)
}

def @func_7689() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %181 = @func_7618() /* ty=(Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) */;
  %182 = %181.1;
  %183 = @func_6803() /* ty=Tensor[(6, 16, 8), float32] */;
  (%182, %183)
}

def @func_7933() -> (Tensor[(6, 16, 8), float32],) {
  %184 = @func_5305() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
  %185 = %184.1;
  (%185,)
}

def @func_5648(%var_5643: int32, %var_5644: Tensor[(13, 12, 10), int32]) -> Tensor[(13, 12, 10), int32] {
  %186 = cast(%var_5643, dtype="int32") /* ty=int32 */;
  %187 = cast(%var_5644, dtype="int32") /* ty=Tensor[(13, 12, 10), int32] */;
  subtract(%186, %187) /* ty=Tensor[(13, 12, 10), int32] */
}

def @func_7792(%var_7781: Tensor[(6, 15, 10), int64]) -> (Tensor[(6, 15, 10), int64], Tensor[(6, 15, 10), float64], Tensor[(8, 5, 8), float64], Tensor[(320), float64]) {
  %188 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 15, 1), int64] */, dtype="int64") /* ty=Tensor[(6, 15, 1), int64] */;
  %189 = cast(%var_7781, dtype="int64") /* ty=Tensor[(6, 15, 10), int64] */;
  %190 = cast(%var_7781, dtype="float64") /* ty=Tensor[(6, 15, 10), float64] */;
  %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %192 = reshape(%191, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float64] */;
  %193 = @func_4988(%192) /* ty=(Tensor[(8, 5, 8), float64],) */;
  %194 = maximum(%188, %189) /* ty=Tensor[(6, 15, 10), int64] */;
  %195 = log(%190) /* ty=Tensor[(6, 15, 10), float64] */;
  %196 = %193.0;
  (%194, %195, %196, meta[relay.Constant][12] /* ty=Tensor[(320), float64] */)
}

def @func_733(%var_710: Tensor[(2, 12, 3), float64], %var_714: Tensor[(16), int8]) -> (Tensor[(2, 12, 3), float64], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(2, 4, 2), float32]) {
  %197 = cast(%var_710, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  %198 = cast(%var_714, dtype="int8") /* ty=Tensor[(16), int8] */;
  %199 = cast(%var_714, dtype="int8") /* ty=Tensor[(16), int8] */;
  %200 = reshape(%198, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %201 = reshape(%199, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %202 = @func_398(%200, %201) /* ty=(Tensor[(2, 4, 2), float32],) */;
  %203 = %202.0;
  %204 = cast(%203, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
  %205 = cast(%203, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
  %206 = reshape(%204, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %207 = reshape(%205, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %208 = @func_398(%206, %207) /* ty=(Tensor[(2, 4, 2), float32],) */;
  %209 = log10(%197) /* ty=Tensor[(2, 12, 3), float64] */;
  %210 = %208.0;
  (%209, %203, %var_714, %210)
}

def @func_2266(%var_2226: Tensor[(6, 16, 8), float32]) -> (Tensor[(6, 16, 8), int64], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(224), int32]) {
  %211 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %212 = cast(%var_2226, dtype="int64") /* ty=Tensor[(6, 16, 8), int64] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%211, dtype="int64") /* ty=Tensor[(6, 16, 8), int64] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %217 = reshape(%216, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
  %218 = @func_2169(%217) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
  %219 = cast(meta[relay.Constant][13] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %220 = reshape(%219, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
  %221 = @func_2169(%220) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
  %222 = minimum(%214, %215) /* ty=Tensor[(6, 16, 8), int64] */;
  %223 = %218.1;
  %224 = %221.2;
  (%222, %223, meta[relay.Constant][13] /* ty=Tensor[(65), bool] */, %224)
}

def @func_7338() -> Tensor[(6, 16, 8), float64] {
  %225 = @func_6093() /* ty=(Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float64]) */;
  %225.1
}

def @func_4338(%var_4311: Tensor[(294, 2), uint64], %var_4313: Tensor[(6, 7, 14), uint64], %var_4324: Tensor[(294, 2), uint64]) -> (Tensor[(6, 16, 8), float64], Tensor[(6, 7, 14), float32], Tensor[(294, 2), float64]) {
  %226 = cast(%var_4311, dtype="uint64") /* ty=Tensor[(294, 2), uint64] */;
  %227 = reshape(%226, newshape=[6, 7, 14]) /* ty=Tensor[(6, 7, 14), uint64] */;
  %228 = @func_1027(%227) /* ty=Tensor[(6, 7, 14), uint64] */;
  %229 = cast(%var_4313, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %233 = cast(%var_4324, dtype="int32") /* ty=Tensor[(294, 2), int32] */;
  %234 = shape_of(%var_4311, dtype="int32") /* ty=Tensor[(2), int32] */;
  %235 = cast(%var_4311, dtype="int32") /* ty=Tensor[(294, 2), int32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %237 = maximum(%235, %236) /* ty=Tensor[(294, 2), int32] */;
  %238 = cast(%var_4313, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(2), int32] */;
  %240 = cast(%237, dtype="float64") /* ty=Tensor[(294, 2), float64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %242 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  %243 = floor_divide(%231, %232) /* ty=Tensor[(6, 7, 14), float32] */;
  %244 = mod(%240, %241) /* ty=Tensor[(294, 2), float64] */;
  (%242, %243, %244)
}

def @func_5410() -> Tensor[(6, 16, 8), float32] {
  @func_3832() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4513() -> (Tensor[(6, 16, 8), float32],) {
  %245 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%245,)
}

def @func_688(%var_656: Tensor[(14, 11, 6), float64]) -> (Tensor[(14, 11, 6), float32],) {
  %246 = cast(%var_656, dtype="float64") /* ty=Tensor[(14, 11, 6), float64] */;
  %247 = sigmoid(%246) /* ty=Tensor[(14, 11, 6), float64] */;
  %248 = cast(%var_656, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %252 = right_shift(%250, %251) /* ty=Tensor[(14, 11, 6), int8] */;
  %253 = cast(%var_656, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %257 = floor_divide(%255, %256) /* ty=Tensor[(14, 11, 6), float32] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %259 = sqrt(%258) /* ty=Tensor[(14, 11, 6), float32] */;
  (%259,)
}

def @func_2975() -> (Tensor[(6, 16, 8), float32],) {
  %260 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %261 = %260.0;
  (%261,)
}

def @func_4988(%var_4985: Tensor[(8, 5, 8), float64]) -> (Tensor[(8, 5, 8), float64],) {
  %262 = cast(%var_4985, dtype="float64") /* ty=Tensor[(8, 5, 8), float64] */;
  %263 = tan(%262) /* ty=Tensor[(8, 5, 8), float64] */;
  (%263,)
}

def @func_3811() -> (Tensor[(6, 16, 8), float32],) {
  %264 = @func_3274() /* ty=Tensor[(6, 16, 8), float32] */;
  (%264,)
}

def @func_2188() -> (Tensor[(6, 16, 8), float32],) {
  %265 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%265,)
}

def @func_4953() -> (Tensor[(6, 16, 8), float32],) {
  %266 = @func_3991() /* ty=Tensor[(6, 16, 8), float32] */;
  (%266,)
}

def @func_2314() -> Tensor[(6, 16, 8), float32] {
  @func_2140() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_634(%var_587: Tensor[(7, 12, 7), float64]) -> (Tensor[(7, 12, 7), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) {
  %267 = cast(%var_587, dtype="float64") /* ty=Tensor[(7, 12, 7), float64] */;
  %268 = cast(4.25555f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %269 = cast(meta[relay.Constant][14] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %270 = reshape(%268, newshape=[]) /* ty=float32 */;
  %271 = reshape(%269, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %272 = @func_440(%270, %271) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %273 = cos(%267) /* ty=Tensor[(7, 12, 7), float64] */;
  %274 = %272.0;
  (%273, %274, 4.25555f /* ty=float32 */, meta[relay.Constant][14] /* ty=Tensor[(30), float32] */)
}

def @func_5934() -> (Tensor[(6, 16, 8), float32],) {
  %275 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %276 = %275.0;
  (%276,)
}

def @func_4266() -> (Tensor[(6, 16, 8), float32],) {
  %277 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
  (%277,)
}

def @func_2563(%var_2523: Tensor[(4, 1, 13), uint8], %var_2524: Tensor[(4, 8, 13), uint8], %var_2535: Tensor[(4, 15, 13), uint8], %var_2560: Tensor[(924, 1), float64]) -> (Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) {
  %278 = cast(%var_2523, dtype="uint8") /* ty=Tensor[(4, 1, 13), uint8] */;
  %279 = cast(%var_2524, dtype="uint8") /* ty=Tensor[(4, 8, 13), uint8] */;
  %280 = right_shift(%278, %279) /* ty=Tensor[(4, 8, 13), uint8] */;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
  %282 = shape_of(%var_2524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_2524, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %285 = cast(%var_2523, dtype="uint8") /* ty=Tensor[(4, 1, 13), uint8] */;
  %286 = cast(%var_2535, dtype="uint8") /* ty=Tensor[(4, 15, 13), uint8] */;
  %287 = cast(%var_2524, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
  %288 = cast(meta[relay.Constant][15] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
  %289 = cast(meta[relay.Constant][15] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
  %290 = reshape(%288, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %291 = reshape(%289, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %292 = @func_398(%290, %291) /* ty=(Tensor[(2, 4, 2), float32],) */;
  %293 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %294 = cast(%var_2560, dtype="float64") /* ty=Tensor[(924, 1), float64] */;
  %295 = reshape(%294, newshape=[14, 11, 6]) /* ty=Tensor[(14, 11, 6), float64] */;
  %296 = @func_688(%295) /* ty=(Tensor[(14, 11, 6), float32],) */;
  %297 = divide(%283, %284) /* ty=Tensor[(4, 8, 13), float32] */;
  %298 = right_shift(%285, %286) /* ty=Tensor[(4, 15, 13), uint8] */;
  %299 = atanh(%287) /* ty=Tensor[(4, 8, 13), float32] */;
  %300 = %292.0;
  %301 = %293.0;
  %302 = %296.0;
  (%297, %298, %299, %300, meta[relay.Constant][15] /* ty=Tensor[(16), int8] */, %301, %302, %var_2560)
}

def @func_3426() -> (Tensor[(6, 16, 8), float32],) {
  %303 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%303,)
}

def @func_3011() -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) {
  %304 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %305 = cast(meta[relay.Constant][16] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %306 = cast(4.44654f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %307 = cast(meta[relay.Constant][17] /* ty=Tensor[(30, 1), float32] */, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %308 = cast(meta[relay.Constant][16] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %309 = reshape(%305, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %310 = reshape(%306, newshape=[]) /* ty=float32 */;
  %311 = reshape(%307, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %312 = reshape(%308, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %313 = @func_571(%309, %310, %311, %312) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %314 = %304.0;
  %315 = %313.7;
  (%314, %315, meta[relay.Constant][16] /* ty=Tensor[(1260), float64] */, 4.44654f /* ty=float32 */, meta[relay.Constant][17] /* ty=Tensor[(30, 1), float32] */)
}

def @func_2406() -> (Tensor[(6, 16, 8), float32],) {
  %316 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%316,)
}

def @func_3556() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) {
  %317 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %318 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %320 = %317.0;
  %321 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %322 = log2(%319) /* ty=Tensor[(6, 16, 8), float64] */;
  (%320, %321, %322)
}

def @func_2289() -> (Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) {
  %323 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %325 = cast(meta[relay.Constant][18] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %326 = reshape(%325, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
  %327 = @func_2169(%326) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
  %328 = acosh(%324) /* ty=Tensor[(6, 16, 8), float64] */;
  %329 = %327.2;
  (%328, %329, meta[relay.Constant][18] /* ty=Tensor[(65), bool] */)
}

def @func_3487() -> (Tensor[(6, 16, 8), float32],) {
  %330 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  %332 = cosh(%331) /* ty=Tensor[(6, 16, 8), float32] */;
  (%332,)
}

def @func_4186(%var_4156: Tensor[(8, 11, 13), float64]) -> (Tensor[(8, 11, 13), float64], Tensor[(8, 11, 13), float32], Tensor[(8, 11, 13), int16]) {
  %333 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %334 = shape_of(%var_4156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%var_4156, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %337 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 11, 13), float64] */, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  %338 = exp(%337) /* ty=Tensor[(8, 11, 13), float32] */;
  %339 = cast(%var_4156, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %343 = cast(%var_4156, dtype="int16") /* ty=Tensor[(8, 11, 13), int16] */;
  %344 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%338, dtype="int16") /* ty=Tensor[(8, 11, 13), int16] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %347 = minimum(%335, %336) /* ty=Tensor[(8, 11, 13), float64] */;
  %348 = mod(%341, %342) /* ty=Tensor[(8, 11, 13), float32] */;
  %349 = maximum(%345, %346) /* ty=Tensor[(8, 11, 13), int16] */;
  (%347, %348, %349)
}

def @func_3123() -> Tensor[(224), int32] {
  %350 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
  %350.1
}

def @func_4444(%var_4391: Tensor[(780, 1), uint8], %var_4392: Tensor[(924), float64], %var_4398: float32, %var_4432: Tensor[(42), float32]) -> (Tensor[(65), bool], Tensor[(16), int8], Tensor[(416), uint8], Tensor[(924), float64], Tensor[(10, 3), float32], Tensor[(1260), float64], float32, Tensor[(5, 6), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(780, 52), bool], Tensor[(7, 11, 6), float64], Tensor[(42), float32], Tensor[(462), float32]) {
  %351 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
  %352 = cast(meta[relay.Constant][20] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %353 = cast(meta[relay.Constant][21] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %354 = cast(%var_4391, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %355 = cast(%var_4392, dtype="float64") /* ty=Tensor[(924), float64] */;
  %356 = reshape(%352, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %357 = reshape(%353, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), uint8] */;
  %358 = reshape(%354, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint8] */;
  %359 = reshape(%355, newshape=[924, 1]) /* ty=Tensor[(924, 1), float64] */;
  %360 = @func_2563(%356, %357, %358, %359) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) */;
  %361 = cast(meta[relay.Constant][22] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %362 = cast(%var_4398, dtype="float32") /* ty=float32 */;
  %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 6), float32] */;
  %364 = cast(meta[relay.Constant][22] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %365 = reshape(%361, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %366 = reshape(%362, newshape=[]) /* ty=float32 */;
  %367 = reshape(%363, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %368 = reshape(%364, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %369 = @func_571(%365, %366, %367, %368) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %370 = @func_2406() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %371 = cast(meta[relay.Constant][20] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %372 = cast(meta[relay.Constant][21] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %373 = cast(%var_4391, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %374 = cast(%var_4392, dtype="float64") /* ty=Tensor[(924), float64] */;
  %375 = reshape(%371, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %376 = reshape(%372, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), uint8] */;
  %377 = reshape(%373, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint8] */;
  %378 = reshape(%374, newshape=[924, 1]) /* ty=Tensor[(924, 1), float64] */;
  %379 = @func_2563(%375, %376, %377, %378) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) */;
  %380 = cast(%var_4391, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
  %381 = cast(meta[relay.Constant][20] /* ty=Tensor[(52), uint8] */, dtype="bool") /* ty=Tensor[(52), bool] */;
  %382 = cast(%var_4432, dtype="float32") /* ty=Tensor[(42), float32] */;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %384 = reshape(%382, newshape=[7, 1, 6]) /* ty=Tensor[(7, 1, 6), float32] */;
  %385 = reshape(%383, newshape=[7, 11, 6]) /* ty=Tensor[(7, 11, 6), float32] */;
  %386 = @func_4150(%384, %385) /* ty=(Tensor[(7, 11, 6), float64],) */;
  %387 = %351.2;
  %388 = %360.4;
  %389 = %369.2;
  %390 = %370.0;
  %391 = %379.5;
  %392 = greater_equal(%380, %381) /* ty=Tensor[(780, 52), bool] */;
  %393 = %386.0;
  (%387, %388, meta[relay.Constant][21] /* ty=Tensor[(416), uint8] */, %var_4392, %389, meta[relay.Constant][22] /* ty=Tensor[(1260), float64] */, %var_4398, meta[relay.Constant][23] /* ty=Tensor[(5, 6), float32] */, %390, %391, %392, %393, %var_4432, meta[relay.Constant][24] /* ty=Tensor[(462), float32] */)
}

def @func_3516() -> (Tensor[(6, 16, 8), float32],) {
  %394 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %395 = %394.0;
  (%395,)
}

def @func_5194(%var_5192: Tensor[(16), int8]) -> (Tensor[(4, 11, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8]) {
  %396 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 13), float32] */;
  %397 = cast(%var_5192, dtype="int8") /* ty=Tensor[(16), int8] */;
  %398 = cast(%var_5192, dtype="int8") /* ty=Tensor[(16), int8] */;
  %399 = reshape(%397, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %400 = reshape(%398, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
  %401 = @func_398(%399, %400) /* ty=(Tensor[(2, 4, 2), float32],) */;
  %402 = atanh(%396) /* ty=Tensor[(4, 11, 13), float32] */;
  %403 = %401.0;
  (%402, %403, %var_5192)
}

def @func_4663() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %404 = @func_4266() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %405 = @func_3348() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
  %406 = %404.0;
  %407 = %405.1;
  (%406, %407)
}

def @func_1171(%var_1154: uint16, %var_1155: Tensor[(8, 14, 16), uint16]) -> (Tensor[(8, 14, 16), uint16],) {
  %408 = cast(%var_1154, dtype="uint16") /* ty=uint16 */;
  %409 = cast(%var_1155, dtype="uint16") /* ty=Tensor[(8, 14, 16), uint16] */;
  %410 = maximum(%408, %409) /* ty=Tensor[(8, 14, 16), uint16] */;
  (%410,)
}

def @func_5063() -> (Tensor[(14, 4, 15), float32], Tensor[(6, 16, 8), float32]) {
  %411 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  %412 = acos(%411) /* ty=Tensor[(14, 4, 15), float32] */;
  %413 = @func_3353() /* ty=Tensor[(6, 16, 8), float32] */;
  (%412, %413)
}

def @func_7523() -> (Tensor[(7, 15, 10), float64], Tensor[(6, 16, 8), float64]) {
  %414 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %415 = tan(%414) /* ty=Tensor[(7, 15, 10), float64] */;
  %416 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
  (%415, %416)
}

def @func_6867() -> Tensor[(6, 16, 8), float64] {
  %417 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  sin(%419) /* ty=Tensor[(6, 16, 8), float64] */
}

def @func_6803() -> Tensor[(6, 16, 8), float32] {
  @func_3274() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3873() -> Tensor[(6, 16, 8), float64] {
  %420 = @func_3437() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %420.0
}

def @func_4249() -> (Tensor[(6, 16, 8), float64],) {
  %421 = @func_3437() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %422 = %421.0;
  %423 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 16, 8), float64] */, dtype="uint16") /* ty=Tensor[(6, 16, 8), uint16] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="uint16") /* ty=Tensor[(6, 16, 8), uint16] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %427 = maximum(%425, %426) /* ty=Tensor[(6, 16, 8), uint16] */;
  %428 = cast(%427, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %429 = exp(%428) /* ty=Tensor[(6, 16, 8), float64] */;
  (%429,)
}

def @func_6422() -> Tensor[(6, 16, 8), float32] {
  @func_3991() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_6708() -> (Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %430 = @func_6591() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %431 = @func_4266() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %432 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %433 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  %434 = %430.0;
  %435 = %431.0;
  %436 = %432.0;
  %437 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
  (%433, %434, %435, %436, %437)
}

def @func_6192() -> (Tensor[(6, 16, 8), float32],) {
  %438 = @func_3487() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %439 = %438.0;
  (%439,)
}

def @func_2932(%var_2887: Tensor[(14, 13, 2), uint64], %var_2888: Tensor[(14, 13, 2), uint64], %var_2893: Tensor[(14, 13, 2), uint64]) -> (Tensor[(14, 13, 2), float64],) {
  %440 = cast(%var_2888, dtype="uint64") /* ty=Tensor[(14, 13, 2), uint64] */;
  %441 = shape_of(%var_2887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_2887, dtype="uint64") /* ty=Tensor[(14, 13, 2), uint64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %444 = subtract(%442, %443) /* ty=Tensor[(14, 13, 2), uint64] */;
  %445 = cast(%var_2893, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = less_equal(%447, %448) /* ty=Tensor[(14, 13, 2), bool] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %451 = acos(%450) /* ty=Tensor[(14, 13, 2), float64] */;
  (%451,)
}

def @func_6654(%var_6619: Tensor[(7), uint64]) -> (Tensor[(6, 16, 8), float32], uint64, Tensor[(7), uint64], Tensor[(1, 7, 1), float32], Tensor[(6, 16, 8), float32], Tensor[(1, 7, 1), float64]) {
  %452 = @func_4953() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %453 = cast(meta[relay.Constant][29] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %454 = cast(%var_6619, dtype="uint64") /* ty=Tensor[(7), uint64] */;
  %455 = reshape(%453, newshape=[]) /* ty=uint64 */;
  %456 = reshape(%454, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), uint64] */;
  %457 = @func_3840(%455, %456) /* ty=Tensor[(1, 7, 1), bool] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %459 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %460 = cast(%457, dtype="float64") /* ty=Tensor[(1, 7, 1), float64] */;
  %461 = %452.0;
  %462 = log10(%458) /* ty=Tensor[(1, 7, 1), float32] */;
  %463 = %459.0;
  %464 = rsqrt(%460) /* ty=Tensor[(1, 7, 1), float64] */;
  (%461, meta[relay.Constant][29] /* ty=uint64 */, %var_6619, %462, %463, %464)
}

def @func_3505() -> Tensor[(6, 16, 8), float32] {
  @func_3353() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_5352() -> (Tensor[(6, 16, 8), float32],) {
  %465 = @func_3426() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %466 = %465.0;
  (%466,)
}

def @func_4080(%var_4069: Tensor[(18, 70), float64]) -> (Tensor[(6, 16, 8), float64], Tensor[(30, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(65), float32], Tensor[(6, 16, 8), float32], Tensor[(10, 3), float32], Tensor[(18, 70), float64], float32) {
  %467 = @func_3011() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) */;
  %468 = %467.4;
  %469 = @func_3011() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) */;
  %470 = %469.4;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %472 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %473 = cast(%468, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %475 = @func_3301() /* ty=(Tensor[(65), float32],) */;
  %476 = cast(%var_4069, dtype="float64") /* ty=Tensor[(18, 70), float64] */;
  %477 = cast(-3.34467f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %478 = divide(%473, %474) /* ty=Tensor[(30, ?), float64] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(30, ?), float32] */;
  %480 = cast(%var_4069, dtype="float64") /* ty=Tensor[(18, 70), float64] */;
  %481 = reshape(%476, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %482 = reshape(%477, newshape=[]) /* ty=float32 */;
  %483 = reshape(%479, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %484 = reshape(%480, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %485 = @func_571(%481, %482, %483, %484) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %486 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  %487 = @func_2314() /* ty=Tensor[(6, 16, 8), float32] */;
  %488 = %475.0;
  %489 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
  %490 = %485.2;
  (%486, %478, %487, %488, %489, %490, %var_4069, -3.34467f /* ty=float32 */)
}

def @func_6318(%var_6307: Tensor[(6, 16, 8), float32]) -> (Tensor[(6, 16, 8), float32],) {
  %491 = @func_3991() /* ty=Tensor[(6, 16, 8), float32] */;
  %492 = cast(%var_6307, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %496 = floor_mod(%494, %495) /* ty=Tensor[(6, 16, 8), float32] */;
  (%496,)
}

def @func_6591() -> (Tensor[(6, 16, 8), float64],) {
  %497 = @func_2383() /* ty=Tensor[(6, 16, 8), float64] */;
  (%497,)
}

def @func_7303(%var_7289: Tensor[(11, 7, 9), uint64], %var_7290: Tensor[(11, 7, 9), uint64]) -> Tensor[(11, 7, 9), uint64] {
  %498 = cast(%var_7290, dtype="uint64") /* ty=Tensor[(11, 7, 9), uint64] */;
  %499 = shape_of(%var_7289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_7289, dtype="uint64") /* ty=Tensor[(11, 7, 9), uint64] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%500, %501) /* ty=Tensor[(11, 7, 9), uint64] */
}

def @func_5740() -> (Tensor[(6, 16, 8), float32], Tensor[(13, 15, 8), float64], Tensor[(1, 1560), float64]) {
  %502 = @func_3487() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %503 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1560), float64] */, dtype="float64") /* ty=Tensor[(1, 1560), float64] */;
  %504 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1560), float64] */, dtype="float64") /* ty=Tensor[(1, 1560), float64] */;
  %505 = reshape(%503, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
  %506 = reshape(%504, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
  %507 = @func_3224(%505, %506) /* ty=(Tensor[(13, 15, 8), float64],) */;
  %508 = %502.0;
  %509 = %507.0;
  (%508, %509, meta[relay.Constant][30] /* ty=Tensor[(1, 1560), float64] */)
}

def @func_2436(%var_2433: float32, %var_2434: Tensor[(30), float32]) -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) {
  %510 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %511 = cast(meta[relay.Constant][31] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %512 = cast(%var_2433, dtype="float32") /* ty=float32 */;
  %513 = cast(%var_2434, dtype="float32") /* ty=Tensor[(30), float32] */;
  %514 = cast(meta[relay.Constant][31] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %515 = reshape(%511, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %516 = reshape(%512, newshape=[]) /* ty=float32 */;
  %517 = reshape(%513, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %518 = reshape(%514, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %519 = @func_571(%515, %516, %517, %518) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %520 = %510.0;
  %521 = %519.5;
  (%520, %521, meta[relay.Constant][31] /* ty=Tensor[(1260), float64] */, %var_2433, %var_2434)
}

def @func_3274() -> Tensor[(6, 16, 8), float32] {
  %522 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %522.0
}

def @func_571(%var_534: Tensor[(14, 15, 6), float64], %var_539: float32, %var_540: Tensor[(10, 3), float32], %var_545: Tensor[(14, 15, 6), float64]) -> (Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) {
  %523 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %524 = cast(%var_540, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %525 = reshape(%523, newshape=[]) /* ty=float32 */;
  %526 = reshape(%524, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %527 = @func_440(%525, %526) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %528 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %529 = cast(%var_540, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %530 = reshape(%528, newshape=[]) /* ty=float32 */;
  %531 = reshape(%529, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %532 = @func_440(%530, %531) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %533 = cast(%var_534, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
  %534 = sin(%533) /* ty=Tensor[(14, 15, 6), float64] */;
  %535 = cast(%var_545, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %540 = %527.0;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %542 = reshape(%539, newshape=[]) /* ty=float32 */;
  %543 = reshape(%541, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %544 = @func_440(%542, %543) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %545 = cast(%534, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
  %546 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %547 = %544.0;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %549 = reshape(%546, newshape=[]) /* ty=float32 */;
  %550 = reshape(%548, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %551 = @func_440(%549, %550) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %552 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %553 = %551.0;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %555 = reshape(%552, newshape=[]) /* ty=float32 */;
  %556 = reshape(%554, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %557 = @func_440(%555, %556) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %558 = %532.0;
  %559 = less_equal(%537, %538) /* ty=Tensor[(14, 15, 6), bool] */;
  %560 = tan(%545) /* ty=Tensor[(14, 15, 6), float64] */;
  %561 = %557.0;
  (%540, %var_539, %var_540, %558, %559, %547, %560, %553, %561)
}

def @func_7382() -> (Tensor[(1260), float64], Tensor[(6, 16, 8), float64]) {
  %562 = @func_5259() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
  %563 = @func_3396() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %564 = %562.3;
  %565 = %563.0;
  (%564, %565)
}

def @func_7040() -> (Tensor[(6, 16, 8), float32], float32, Tensor[(112, 1), float32], Tensor[(924), float64], Tensor[(13, 12, 10), int32], Tensor[(1560), int32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %566 = cast(meta[relay.Constant][32] /* ty=Tensor[(112, 1), float32] */, dtype="float32") /* ty=Tensor[(112, 1), float32] */;
  %567 = cast(meta[relay.Constant][33] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
  %568 = reshape(%566, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
  %569 = reshape(%567, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %570 = @func_6970(%568, %569) /* ty=(Tensor[(6, 16, 8), float64], Tensor[(10, 3), float32], Tensor[(1, 780), uint8], Tensor[(924), float64], float32, Tensor[(42, 1), float32], Tensor[(4, 14, 2), float64]) */;
  %571 = %570.4;
  %572 = cast(%571, dtype="int32") /* ty=int32 */;
  %573 = cast(meta[relay.Constant][34] /* ty=Tensor[(1560), int32] */, dtype="int32") /* ty=Tensor[(1560), int32] */;
  %574 = reshape(%572, newshape=[]) /* ty=int32 */;
  %575 = reshape(%573, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), int32] */;
  %576 = @func_5875() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %577 = @func_3353() /* ty=Tensor[(6, 16, 8), float32] */;
  %578 = @func_5648(%574, %575) /* ty=Tensor[(13, 12, 10), int32] */;
  %579 = %576.0;
  %580 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
  (%577, %571, meta[relay.Constant][32] /* ty=Tensor[(112, 1), float32] */, meta[relay.Constant][33] /* ty=Tensor[(924), float64] */, %578, meta[relay.Constant][34] /* ty=Tensor[(1560), int32] */, %579, %580)
}

def @func_3396() -> (Tensor[(6, 16, 8), float64],) {
  %581 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  (%581,)
}

def @func_3353() -> Tensor[(6, 16, 8), float32] {
  @func_2140() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_2383() -> Tensor[(6, 16, 8), float64] {
  %582 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
  %582.0
}

def @func_6574() -> Tensor[(6, 16, 8), float32] {
  @func_3274() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4004() -> (Tensor[(6, 16, 8), float32],) {
  %583 = @func_3426() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %584 = %583.0;
  (%584,)
}

def @func_7075(%var_7051: Tensor[(1, 11, 7), float64], %var_7052: Tensor[(6, 11, 7), float64]) -> (Tensor[(6, 11, 7), float64], Tensor[(1, 11, 7), float32]) {
  %585 = cast(%var_7051, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %586 = cast(%var_7052, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
  %587 = cast(%var_7051, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  %588 = power(%585, %586) /* ty=Tensor[(6, 11, 7), float64] */;
  %589 = erf(%587) /* ty=Tensor[(1, 11, 7), float32] */;
  (%588, %589)
}

def @func_5259() -> (Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) {
  %590 = @func_3487() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %591 = cast(meta[relay.Constant][35] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %592 = reshape(%591, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float64] */;
  %593 = @func_4988(%592) /* ty=(Tensor[(8, 5, 8), float64],) */;
  %594 = cast(-8.00539f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %595 = cast(meta[relay.Constant][36] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %596 = reshape(%594, newshape=[]) /* ty=float32 */;
  %597 = reshape(%595, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %598 = @func_2436(%596, %597) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
  %599 = %590.0;
  %600 = %593.0;
  %601 = %598.2;
  (%599, %600, meta[relay.Constant][35] /* ty=Tensor[(320), float64] */, %601, -8.00539f /* ty=float32 */, meta[relay.Constant][36] /* ty=Tensor[(30), float32] */)
}

def @func_3962(%var_3955: Tensor[(72), float64]) -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(2, 4, 2), float32], Tensor[(72), float64], Tensor[(8, 2), int8]) {
  %602 = @func_3426() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %603 = cast(%var_3955, dtype="float64") /* ty=Tensor[(72), float64] */;
  %604 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 2), int8] */, dtype="int8") /* ty=Tensor[(8, 2), int8] */;
  %605 = reshape(%603, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
  %606 = reshape(%604, newshape=[16]) /* ty=Tensor[(16), int8] */;
  %607 = @func_733(%605, %606) /* ty=(Tensor[(2, 12, 3), float64], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(2, 4, 2), float32]) */;
  %608 = %602.0;
  %609 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
  %610 = %607.3;
  (%608, %609, %610, %var_3955, meta[relay.Constant][37] /* ty=Tensor[(8, 2), int8] */)
}

def @func_5586(%var_5577: Tensor[(3, 12, 11), int16], %var_5578: Tensor[(3, 12, 11), int16]) -> (Tensor[(3, 12, 11), int16], Tensor[(2, 15, 11), float32], Tensor[(330), float32]) {
  %611 = cast(%var_5578, dtype="int16") /* ty=Tensor[(3, 12, 11), int16] */;
  %612 = shape_of(%var_5577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_5577, dtype="int16") /* ty=Tensor[(3, 12, 11), int16] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %615 = cast(meta[relay.Constant][38] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %616 = reshape(%615, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %617 = right_shift(%613, %614) /* ty=Tensor[(3, 12, 11), int16] */;
  %618 = @func_958(%616) /* ty=Tensor[(2, 15, 11), float32] */;
  (%617, %618, meta[relay.Constant][38] /* ty=Tensor[(330), float32] */)
}

def @func_2366(%var_2355: Tensor[(5, 7, 2), float32], %var_2356: Tensor[(5, 7, 2), float32]) -> (Tensor[(5, 7, 2), bool],) {
  %619 = cast(%var_2356, dtype="float32") /* ty=Tensor[(5, 7, 2), float32] */;
  %620 = shape_of(%var_2355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%var_2355, dtype="float32") /* ty=Tensor[(5, 7, 2), float32] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %623 = subtract(%621, %622) /* ty=Tensor[(5, 7, 2), float32] */;
  %624 = cast(%623, dtype="bool") /* ty=Tensor[(5, 7, 2), bool] */;
  %625 = shape_of(%var_2355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_2355, dtype="bool") /* ty=Tensor[(5, 7, 2), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %628 = logical_or(%626, %627) /* ty=Tensor[(5, 7, 2), bool] */;
  (%628,)
}

def @func_6483(%var_6481: Tensor[(1, 30), float32]) -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(1, 30), float32]) {
  %629 = @func_3437() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %630 = cast(2.42086f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %631 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %632 = reshape(%630, newshape=[]) /* ty=float32 */;
  %633 = reshape(%631, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %634 = @func_440(%632, %633) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %635 = @func_2314() /* ty=Tensor[(6, 16, 8), float32] */;
  %636 = %629.0;
  %637 = %634.0;
  (%635, %636, %637, 2.42086f /* ty=float32 */, %var_6481)
}

def @func_3224(%var_3212: Tensor[(13, 15, 8), float64], %var_3213: Tensor[(13, 15, 8), float64]) -> (Tensor[(13, 15, 8), float64],) {
  %638 = cast(%var_3213, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %639 = shape_of(%var_3212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%var_3212, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %642 = power(%640, %641) /* ty=Tensor[(13, 15, 8), float64] */;
  (%642,)
}

def @func_5555() -> Tensor[(6, 16, 8), float32] {
  %643 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %643.0
}

def @func_6507() -> (Tensor[(10, 1, 3), float64],) {
  %644 = @func_3898() /* ty=(Tensor[(10, 1, 3), float32],) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %647 = exp(%646) /* ty=Tensor[(10, 1, 3), float64] */;
  (%647,)
}

def @func_2721(%var_2679: Tensor[(5, 12, 6), float64], %var_2711: Tensor[(13, 5), bool]) -> (Tensor[(5, 12, 6), float64], Tensor[(5, 12, 6), float64], Tensor[(14, 16, ?), float64], Tensor[(13, 5), bool]) {
  %648 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
  %649 = cast(%var_2679, dtype="float64") /* ty=Tensor[(5, 12, 6), float64] */;
  %650 = cast(%var_2679, dtype="float64") /* ty=Tensor[(5, 12, 6), float64] */;
  %651 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
  %652 = cast(%var_2711, dtype="bool") /* ty=Tensor[(13, 5), bool] */;
  %653 = reshape(%652, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
  %654 = @func_2169(%653) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
  %655 = floor_mod(%648, %649) /* ty=Tensor[(5, 12, 6), float64] */;
  %656 = divide(%650, %651) /* ty=Tensor[(5, 12, 6), float64] */;
  %657 = %654.1;
  (%655, %656, %657, %var_2711)
}

def @func_7468() -> (Tensor[(924), float64], Tensor[(6, 16, 8), float32], Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %658 = @func_7040() /* ty=(Tensor[(6, 16, 8), float32], float32, Tensor[(112, 1), float32], Tensor[(924), float64], Tensor[(13, 12, 10), int32], Tensor[(1560), int32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
  %659 = cast(meta[relay.Constant][40] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %660 = cast(meta[relay.Constant][40] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %661 = reshape(%659, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %662 = reshape(%660, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %663 = @func_2366(%661, %662) /* ty=(Tensor[(5, 7, 2), bool],) */;
  %664 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
  %665 = %658.3;
  %666 = @func_5038() /* ty=Tensor[(6, 16, 8), float32] */;
  %667 = %663.0;
  %668 = @func_3505() /* ty=Tensor[(6, 16, 8), float32] */;
  %669 = %664.1;
  (%665, %666, %667, meta[relay.Constant][40] /* ty=Tensor[(70), float32] */, %668, %669)
}

def @func_7497() -> Tensor[(6, 16, 8), float64] {
  %670 = @func_6591() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %670.0
}

def @func_4111(%var_4104: Tensor[(4, 14, 1), uint16], %var_4105: Tensor[(4, 14, 9), uint16]) -> (Tensor[(4, 14, 9), uint16], Tensor[(4, 14, 9), float32]) {
  %671 = cast(%var_4104, dtype="uint16") /* ty=Tensor[(4, 14, 1), uint16] */;
  %672 = cast(%var_4105, dtype="uint16") /* ty=Tensor[(4, 14, 9), uint16] */;
  %673 = cast(%var_4105, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %674 = multiply(%671, %672) /* ty=Tensor[(4, 14, 9), uint16] */;
  %675 = erf(%673) /* ty=Tensor[(4, 14, 9), float32] */;
  (%674, %675)
}

def @func_440(%var_429: float32, %var_430: Tensor[(10, 1, 3), float32]) -> (Tensor[(10, 1, 3), float32],) {
  %676 = cast(%var_429, dtype="float32") /* ty=float32 */;
  %677 = cast(%var_430, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %678 = divide(%676, %677) /* ty=Tensor[(10, 1, 3), float32] */;
  (%678,)
}

def @func_4486() -> (Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) {
  %679 = cast(meta[relay.Constant][41] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %680 = reshape(%679, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
  %681 = @func_2169(%680) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
  %682 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %683 = %681.1;
  %684 = cast(%683, dtype="int32") /* ty=Tensor[(14, 16, ?), int32] */;
  %685 = reshape(%682, newshape=[]) /* ty=int32 */;
  %686 = reshape(%684, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), int32] */;
  %687 = @func_1368(%685, %686) /* ty=(Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) */;
  %688 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %689 = %687.1;
  (%688, %683, meta[relay.Constant][41] /* ty=Tensor[(65), bool] */, %689, 8 /* ty=int32 */)
}

def @func_2651() -> (Tensor[(6, 16, 8), float32],) {
  %690 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%690,)
}

def @func_3348() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %691 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %692 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%691, %692)
}

def @func_3898() -> (Tensor[(10, 1, 3), float32],) {
  %693 = @func_3011() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) */;
  %694 = %693.1;
  (%694,)
}

def @func_4846() -> (Tensor[(6, 16, 8), float64],) {
  %695 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
  (%695,)
}

def @func_958(%var_946: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), float32] {
  %696 = cast(%var_946, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  sinh(%696) /* ty=Tensor[(2, 15, 11), float32] */
}

def @func_135(%var_130: Tensor[(8, 7, 12), bool], %var_131: Tensor[(8, 7, 12), bool]) -> Tensor[(8, 7, 12), bool] {
  %697 = cast(%var_131, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %698 = shape_of(%var_130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%var_130, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%699, %700) /* ty=Tensor[(8, 7, 12), bool] */
}

def @func_5875() -> (Tensor[(6, 16, 8), float32],) {
  %701 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %702 = %701.0;
  (%702,)
}

def @func_2140() -> Tensor[(6, 16, 8), float32] {
  %703 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  %704 = atanh(%703) /* ty=Tensor[(6, 16, 8), float32] */;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  rsqrt(%705) /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4150(%var_4128: Tensor[(7, 1, 6), float32], %var_4138: Tensor[(7, 11, 6), float32]) -> (Tensor[(7, 11, 6), float64],) {
  %706 = cast(%var_4128, dtype="float32") /* ty=Tensor[(7, 1, 6), float32] */;
  %707 = exp(%706) /* ty=Tensor[(7, 1, 6), float32] */;
  %708 = cast(%707, dtype="int16") /* ty=Tensor[(7, 1, 6), int16] */;
  %709 = cast(%var_4138, dtype="int16") /* ty=Tensor[(7, 11, 6), int16] */;
  %710 = bitwise_and(%708, %709) /* ty=Tensor[(7, 11, 6), int16] */;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(7, 11, 6), float64] */;
  %712 = asinh(%711) /* ty=Tensor[(7, 11, 6), float64] */;
  (%712,)
}

def @func_2169(%var_2149: Tensor[(13, 5, 1), bool]) -> (Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) {
  %713 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %714 = cast(%var_2149, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %715 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
  %716 = cast(meta[relay.Constant][43] /* ty=Tensor[(224), int32] */, dtype="int32") /* ty=Tensor[(224), int32] */;
  %717 = reshape(%715, newshape=[]) /* ty=int32 */;
  %718 = reshape(%716, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), int32] */;
  %719 = @func_1368(%717, %718) /* ty=(Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) */;
  %720 = cast(%var_2149, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
  %721 = tan(%720) /* ty=Tensor[(13, 5, 1), float32] */;
  %722 = cast(%var_2149, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %726 = logical_or(%713, %714) /* ty=Tensor[(13, 5, 1), bool] */;
  %727 = %719.3;
  %728 = less(%724, %725) /* ty=Tensor[(13, 5, ?), bool] */;
  (%726, %727, meta[relay.Constant][43] /* ty=Tensor[(224), int32] */, %728)
}

def @func_398(%var_380: Tensor[(2, 4, 2), int8], %var_381: Tensor[(2, 4, 2), int8]) -> (Tensor[(2, 4, 2), float32],) {
  %729 = cast(%var_381, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
  %730 = shape_of(%var_380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_380, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %733 = bitwise_xor(%731, %732) /* ty=Tensor[(2, 4, 2), int8] */;
  %734 = cast(%733, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %735 = shape_of(%var_380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_380, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %738 = minimum(%736, %737) /* ty=Tensor[(2, 4, 2), float32] */;
  (%738,)
}

def @func_1274(%var_1269: Tensor[(2, 13, 11), float32], %var_1270: Tensor[(2, 13, 11), float32]) -> Tensor[(2, 13, 11), float32] {
  %739 = cast(%var_1270, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
  %740 = shape_of(%var_1269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_1269, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%741, %742) /* ty=Tensor[(2, 13, 11), float32] */
}

def @func_5038() -> Tensor[(6, 16, 8), float32] {
  %743 = @func_4540() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %743.0
}

def @func_5762(%var_5750: Tensor[(10, 10, 9), float32]) -> (Tensor[(10, 10, 9), float32], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float32]) {
  %744 = cast(%var_5750, dtype="float32") /* ty=Tensor[(10, 10, 9), float32] */;
  %745 = cast(meta[relay.Constant][44] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %746 = cast(meta[relay.Constant][44] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %747 = reshape(%745, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %748 = reshape(%746, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %749 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %750 = asin(%744) /* ty=Tensor[(10, 10, 9), float32] */;
  %751 = @func_135(%747, %748) /* ty=Tensor[(8, 7, 12), bool] */;
  %752 = %749.0;
  (%750, %751, meta[relay.Constant][44] /* ty=Tensor[(672), bool] */, %752)
}

def @func_1368(%var_1310: int32, %var_1311: Tensor[(14, 16, 1), int32]) -> (Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) {
  %753 = cast(meta[relay.Constant][45] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
  %754 = reshape(%753, newshape=[14, 11, 6]) /* ty=Tensor[(14, 11, 6), float64] */;
  %755 = @func_688(%754) /* ty=(Tensor[(14, 11, 6), float32],) */;
  %756 = cast(%var_1310, dtype="bool") /* ty=bool */;
  %757 = cast(%var_1311, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
  %758 = cast(%var_1311, dtype="uint8") /* ty=Tensor[(14, 16, 1), uint8] */;
  %759 = cast(meta[relay.Constant][45] /* ty=Tensor[(924), float64] */, dtype="uint8") /* ty=Tensor[(924), uint8] */;
  %760 = cast(%var_1310, dtype="int32") /* ty=int32 */;
  %761 = cast(%var_1311, dtype="int32") /* ty=Tensor[(14, 16, 1), int32] */;
  %762 = maximum(%760, %761) /* ty=Tensor[(14, 16, 1), int32] */;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(14, 16, 1), float64] */;
  %764 = sqrt(%763) /* ty=Tensor[(14, 16, 1), float64] */;
  %765 = cast(%762, dtype="float64") /* ty=Tensor[(14, 16, 1), float64] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="float64") /* ty=Tensor[(14, 16, 1), float64] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %769 = power(%767, %768) /* ty=Tensor[(14, 16, ?), float64] */;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(14, 16, ?), float64] */;
  %771 = %755.0;
  %772 = greater(%756, %757) /* ty=Tensor[(14, 16, 1), bool] */;
  %773 = bitwise_or(%758, %759) /* ty=Tensor[(14, 16, 924), uint8] */;
  %774 = erf(%770) /* ty=Tensor[(14, 16, ?), float64] */;
  (%771, %772, %773, %774)
}

def @func_3301() -> (Tensor[(65), float32],) {
  %775 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
  %776 = %775.2;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(65), float64] */;
  %778 = sqrt(%777) /* ty=Tensor[(65), float64] */;
  %779 = cast(meta[relay.Constant][46] /* ty=Tensor[(65), float64] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(1), int32] */;
  %781 = cast(%778, dtype="float32") /* ty=Tensor[(65), float32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?), float32] */;
  %783 = floor_divide(%781, %782) /* ty=Tensor[(65), float32] */;
  (%783,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2976() -> (Tensor[(6, 16, 8), float32],) {
  %2 = fn () -> (Tensor[(6, 16, 8), float32],) {
    %0 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3013() -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) {
  @func_3011() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) */
}

def @func_4150(%var_4128: Tensor[(7, 1, 6), float32], %var_4138: Tensor[(7, 11, 6), float32]) -> (Tensor[(7, 11, 6), float64],) {
  %3 = cast(%var_4128, dtype="float32") /* ty=Tensor[(7, 1, 6), float32] */;
  %4 = exp(%3) /* ty=Tensor[(7, 1, 6), float32] */;
  %5 = cast(%4, dtype="int16") /* ty=Tensor[(7, 1, 6), int16] */;
  %6 = cast(%var_4138, dtype="int16") /* ty=Tensor[(7, 11, 6), int16] */;
  %7 = bitwise_and(%5, %6) /* ty=Tensor[(7, 11, 6), int16] */;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(7, 11, 6), float64] */;
  %9 = asinh(%8) /* ty=Tensor[(7, 11, 6), float64] */;
  (%9,)
}

def @func_7041() -> (Tensor[(6, 16, 8), float32], float32, Tensor[(112, 1), float32], Tensor[(924), float64], Tensor[(13, 12, 10), int32], Tensor[(1560), int32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %25 = fn () -> (Tensor[(6, 16, 8), float32], float32, Tensor[(112, 1), float32], Tensor[(924), float64], Tensor[(13, 12, 10), int32], Tensor[(1560), int32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(112, 1), float32] */, dtype="float32") /* ty=Tensor[(112, 1), float32] */;
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
    %12 = reshape(%10, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
    %13 = reshape(%11, newshape=[924]) /* ty=Tensor[(924), float64] */;
    %14 = @func_6970(%12, %13) /* ty=(Tensor[(6, 16, 8), float64], Tensor[(10, 3), float32], Tensor[(1, 780), uint8], Tensor[(924), float64], float32, Tensor[(42, 1), float32], Tensor[(4, 14, 2), float64]) */;
    %15 = %14.4;
    %16 = cast(%15, dtype="int32") /* ty=int32 */;
    %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(1560), int32] */, dtype="int32") /* ty=Tensor[(1560), int32] */;
    %18 = reshape(%16, newshape=[]) /* ty=int32 */;
    %19 = reshape(%17, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), int32] */;
    %20 = @func_5875() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %21 = @func_3353() /* ty=Tensor[(6, 16, 8), float32] */;
    %22 = @func_5648(%18, %19) /* ty=Tensor[(13, 12, 10), int32] */;
    %23 = %20.0;
    %24 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
    (%21, %15, meta[relay.Constant][0] /* ty=Tensor[(112, 1), float32] */, meta[relay.Constant][1] /* ty=Tensor[(924), float64] */, %22, meta[relay.Constant][2] /* ty=Tensor[(1560), int32] */, %23, %24)
  };
  %25() /* ty=(Tensor[(6, 16, 8), float32], float32, Tensor[(112, 1), float32], Tensor[(924), float64], Tensor[(13, 12, 10), int32], Tensor[(1560), int32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_4250() -> (Tensor[(6, 16, 8), float64],) {
  %35 = fn () -> (Tensor[(6, 16, 8), float64],) {
    %26 = @func_3437() /* ty=(Tensor[(6, 16, 8), float64],) */;
    %27 = %26.0;
    %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 16, 8), float64] */, dtype="uint16") /* ty=Tensor[(6, 16, 8), uint16] */;
    %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
    %30 = cast(%27, dtype="uint16") /* ty=Tensor[(6, 16, 8), uint16] */;
    %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %32 = maximum(%30, %31) /* ty=Tensor[(6, 16, 8), uint16] */;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
    %34 = exp(%33) /* ty=Tensor[(6, 16, 8), float64] */;
    (%34,)
  };
  %35() /* ty=(Tensor[(6, 16, 8), float64],) */
}

def @func_7795(%var_7793: Tensor[(6, 15, 10), int64]) -> (Tensor[(6, 15, 10), int64], Tensor[(6, 15, 10), float64], Tensor[(8, 5, 8), float64], Tensor[(320), float64]) {
  @func_7792(%var_7793) /* ty=(Tensor[(6, 15, 10), int64], Tensor[(6, 15, 10), float64], Tensor[(8, 5, 8), float64], Tensor[(320), float64]) */
}

def @func_636(%var_635: Tensor[(7, 12, 7), float64]) -> (Tensor[(7, 12, 7), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) {
  %44 = fn (%var_587: Tensor[(7, 12, 7), float64]) -> (Tensor[(7, 12, 7), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) {
    %36 = cast(%var_587, dtype="float64") /* ty=Tensor[(7, 12, 7), float64] */;
    %37 = cast(4.25555f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %39 = reshape(%37, newshape=[]) /* ty=float32 */;
    %40 = reshape(%38, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
    %41 = @func_440(%39, %40) /* ty=(Tensor[(10, 1, 3), float32],) */;
    %42 = cos(%36) /* ty=Tensor[(7, 12, 7), float64] */;
    %43 = %41.0;
    (%42, %43, 4.25555f /* ty=float32 */, meta[relay.Constant][4] /* ty=Tensor[(30), float32] */)
  };
  %44(%var_635) /* ty=(Tensor[(7, 12, 7), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) */
}

def @func_4385() -> Tensor[(6, 16, 8), float32] {
  @func_4383() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3124() -> Tensor[(224), int32] {
  %46 = fn () -> Tensor[(224), int32] {
    %45 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
    %45.1
  };
  %46() /* ty=Tensor[(224), int32] */
}

def @func_4450(%var_4446: Tensor[(780, 1), uint8], %var_4447: Tensor[(924), float64], %var_4448: float32, %var_4449: Tensor[(42), float32]) -> (Tensor[(65), bool], Tensor[(16), int8], Tensor[(416), uint8], Tensor[(924), float64], Tensor[(10, 3), float32], Tensor[(1260), float64], float32, Tensor[(5, 6), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(780, 52), bool], Tensor[(7, 11, 6), float64], Tensor[(42), float32], Tensor[(462), float32]) {
  @func_4444(%var_4446, %var_4447, %var_4448, %var_4449) /* ty=(Tensor[(65), bool], Tensor[(16), int8], Tensor[(416), uint8], Tensor[(924), float64], Tensor[(10, 3), float32], Tensor[(1260), float64], float32, Tensor[(5, 6), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(780, 52), bool], Tensor[(7, 11, 6), float64], Tensor[(42), float32], Tensor[(462), float32]) */
}

def @func_7468() -> (Tensor[(924), float64], Tensor[(6, 16, 8), float32], Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %47 = @func_7040() /* ty=(Tensor[(6, 16, 8), float32], float32, Tensor[(112, 1), float32], Tensor[(924), float64], Tensor[(13, 12, 10), int32], Tensor[(1560), int32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
  %48 = cast(meta[relay.Constant][5] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %50 = reshape(%48, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %51 = reshape(%49, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %52 = @func_2366(%50, %51) /* ty=(Tensor[(5, 7, 2), bool],) */;
  %53 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
  %54 = %47.3;
  %55 = @func_5038() /* ty=Tensor[(6, 16, 8), float32] */;
  %56 = %52.0;
  %57 = @func_3505() /* ty=Tensor[(6, 16, 8), float32] */;
  %58 = %53.1;
  (%54, %55, %56, meta[relay.Constant][5] /* ty=Tensor[(70), float32] */, %57, %58)
}

def @func_3428() -> (Tensor[(6, 16, 8), float32],) {
  @func_3426() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3302() -> (Tensor[(65), float32],) {
  %68 = fn () -> (Tensor[(65), float32],) {
    %59 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
    %60 = %59.2;
    %61 = cast(%60, dtype="float64") /* ty=Tensor[(65), float64] */;
    %62 = sqrt(%61) /* ty=Tensor[(65), float64] */;
    %63 = cast(meta[relay.Constant][6] /* ty=Tensor[(65), float64] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(1), int32] */;
    %65 = cast(%62, dtype="float32") /* ty=Tensor[(65), float32] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?), float32] */;
    %67 = floor_divide(%65, %66) /* ty=Tensor[(65), float32] */;
    (%67,)
  };
  %68() /* ty=(Tensor[(65), float32],) */
}

def @func_2406() -> (Tensor[(6, 16, 8), float32],) {
  %69 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%69,)
}

def @func_135(%var_130: Tensor[(8, 7, 12), bool], %var_131: Tensor[(8, 7, 12), bool]) -> Tensor[(8, 7, 12), bool] {
  %70 = cast(%var_131, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %71 = shape_of(%var_130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%var_130, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%72, %73) /* ty=Tensor[(8, 7, 12), bool] */
}

def @func_2408() -> (Tensor[(6, 16, 8), float32],) {
  @func_2406() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_6093() -> (Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float64]) {
  %74 = @func_4486() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) */;
  %75 = @func_4846() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %76 = %74.1;
  %77 = %75.0;
  (%76, %77)
}

def @func_443(%var_441: float32, %var_442: Tensor[(10, 1, 3), float32]) -> (Tensor[(10, 1, 3), float32],) {
  %81 = fn (%var_429: float32, %var_430: Tensor[(10, 1, 3), float32]) -> (Tensor[(10, 1, 3), float32],) {
    %78 = cast(%var_429, dtype="float32") /* ty=float32 */;
    %79 = cast(%var_430, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
    %80 = divide(%78, %79) /* ty=Tensor[(10, 1, 3), float32] */;
    (%80,)
  };
  %81(%var_441, %var_442) /* ty=(Tensor[(10, 1, 3), float32],) */
}

def @func_6152(%var_6150: Tensor[(2, 8, 5), float64], %var_6151: Tensor[(2, 780), float64]) -> (Tensor[(6, 16, 8), float32], Tensor[(2, 8, 5), float32], Tensor[(2, 8, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(2, 780), float64]) {
  @func_6148(%var_6150, %var_6151) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(2, 8, 5), float32], Tensor[(2, 8, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(2, 780), float64]) */
}

def @func_3507() -> Tensor[(6, 16, 8), float32] {
  @func_3505() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_5555() -> Tensor[(6, 16, 8), float32] {
  %82 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %82.0
}

def @func_6320(%var_6319: Tensor[(6, 16, 8), float32]) -> (Tensor[(6, 16, 8), float32],) {
  %89 = fn (%var_6307: Tensor[(6, 16, 8), float32]) -> (Tensor[(6, 16, 8), float32],) {
    %83 = @func_3991() /* ty=Tensor[(6, 16, 8), float32] */;
    %84 = cast(%var_6307, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
    %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(%83, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %88 = floor_mod(%86, %87) /* ty=Tensor[(6, 16, 8), float32] */;
    (%88,)
  };
  %89(%var_6319) /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_4342(%var_4339: Tensor[(294, 2), uint64], %var_4340: Tensor[(6, 7, 14), uint64], %var_4341: Tensor[(294, 2), uint64]) -> (Tensor[(6, 16, 8), float64], Tensor[(6, 7, 14), float32], Tensor[(294, 2), float64]) {
  %109 = fn (%var_4311: Tensor[(294, 2), uint64], %var_4313: Tensor[(6, 7, 14), uint64], %var_4324: Tensor[(294, 2), uint64]) -> (Tensor[(6, 16, 8), float64], Tensor[(6, 7, 14), float32], Tensor[(294, 2), float64]) {
    %90 = cast(%var_4311, dtype="uint64") /* ty=Tensor[(294, 2), uint64] */;
    %91 = reshape(%90, newshape=[6, 7, 14]) /* ty=Tensor[(6, 7, 14), uint64] */;
    %92 = @func_1027(%91) /* ty=Tensor[(6, 7, 14), uint64] */;
    %93 = cast(%var_4313, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
    %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%92, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %97 = cast(%var_4324, dtype="int32") /* ty=Tensor[(294, 2), int32] */;
    %98 = shape_of(%var_4311, dtype="int32") /* ty=Tensor[(2), int32] */;
    %99 = cast(%var_4311, dtype="int32") /* ty=Tensor[(294, 2), int32] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %101 = maximum(%99, %100) /* ty=Tensor[(294, 2), int32] */;
    %102 = cast(%var_4313, dtype="float64") /* ty=Tensor[(6, 7, 14), float64] */;
    %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(2), int32] */;
    %104 = cast(%101, dtype="float64") /* ty=Tensor[(294, 2), float64] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %106 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
    %107 = floor_divide(%95, %96) /* ty=Tensor[(6, 7, 14), float32] */;
    %108 = mod(%104, %105) /* ty=Tensor[(294, 2), float64] */;
    (%106, %107, %108)
  };
  %109(%var_4339, %var_4340, %var_4341) /* ty=(Tensor[(6, 16, 8), float64], Tensor[(6, 7, 14), float32], Tensor[(294, 2), float64]) */
}

def @func_4114(%var_4112: Tensor[(4, 14, 1), uint16], %var_4113: Tensor[(4, 14, 9), uint16]) -> (Tensor[(4, 14, 9), uint16], Tensor[(4, 14, 9), float32]) {
  %115 = fn (%var_4104: Tensor[(4, 14, 1), uint16], %var_4105: Tensor[(4, 14, 9), uint16]) -> (Tensor[(4, 14, 9), uint16], Tensor[(4, 14, 9), float32]) {
    %110 = cast(%var_4104, dtype="uint16") /* ty=Tensor[(4, 14, 1), uint16] */;
    %111 = cast(%var_4105, dtype="uint16") /* ty=Tensor[(4, 14, 9), uint16] */;
    %112 = cast(%var_4105, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
    %113 = multiply(%110, %111) /* ty=Tensor[(4, 14, 9), uint16] */;
    %114 = erf(%112) /* ty=Tensor[(4, 14, 9), float32] */;
    (%113, %114)
  };
  %115(%var_4112, %var_4113) /* ty=(Tensor[(4, 14, 9), uint16], Tensor[(4, 14, 9), float32]) */
}

def @func_2141() -> Tensor[(6, 16, 8), float32] {
  %119 = fn () -> Tensor[(6, 16, 8), float32] {
    %116 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
    %117 = atanh(%116) /* ty=Tensor[(6, 16, 8), float32] */;
    %118 = cast(%117, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
    rsqrt(%118) /* ty=Tensor[(6, 16, 8), float32] */
  };
  %119() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4848() -> (Tensor[(6, 16, 8), float64],) {
  @func_4846() /* ty=(Tensor[(6, 16, 8), float64],) */
}

def @func_5259() -> (Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) {
  %120 = @func_3487() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %122 = reshape(%121, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float64] */;
  %123 = @func_4988(%122) /* ty=(Tensor[(8, 5, 8), float64],) */;
  %124 = cast(-8.00539f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %126 = reshape(%124, newshape=[]) /* ty=float32 */;
  %127 = reshape(%125, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %128 = @func_2436(%126, %127) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
  %129 = %120.0;
  %130 = %123.0;
  %131 = %128.2;
  (%129, %130, meta[relay.Constant][8] /* ty=Tensor[(320), float64] */, %131, -8.00539f /* ty=float32 */, meta[relay.Constant][9] /* ty=Tensor[(30), float32] */)
}

def @func_6743() -> Tensor[(6, 16, 8), float32] {
  %132 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
  %132.1
}

def @func_3439() -> (Tensor[(6, 16, 8), float64],) {
  @func_3437() /* ty=(Tensor[(6, 16, 8), float64],) */
}

def @func_3516() -> (Tensor[(6, 16, 8), float32],) {
  %133 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %134 = %133.0;
  (%134,)
}

def @func_4186(%var_4156: Tensor[(8, 11, 13), float64]) -> (Tensor[(8, 11, 13), float64], Tensor[(8, 11, 13), float32], Tensor[(8, 11, 13), int16]) {
  %135 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %136 = shape_of(%var_4156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_4156, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %139 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 11, 13), float64] */, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  %140 = exp(%139) /* ty=Tensor[(8, 11, 13), float32] */;
  %141 = cast(%var_4156, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="float32") /* ty=Tensor[(8, 11, 13), float32] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %145 = cast(%var_4156, dtype="int16") /* ty=Tensor[(8, 11, 13), int16] */;
  %146 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%140, dtype="int16") /* ty=Tensor[(8, 11, 13), int16] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %149 = minimum(%137, %138) /* ty=Tensor[(8, 11, 13), float64] */;
  %150 = mod(%143, %144) /* ty=Tensor[(8, 11, 13), float32] */;
  %151 = maximum(%147, %148) /* ty=Tensor[(8, 11, 13), int16] */;
  (%149, %150, %151)
}

def @func_5261() -> (Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) {
  @func_5259() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) */
}

def @func_4954() -> (Tensor[(6, 16, 8), float32],) {
  %153 = fn () -> (Tensor[(6, 16, 8), float32],) {
    %152 = @func_3991() /* ty=Tensor[(6, 16, 8), float32] */;
    (%152,)
  };
  %153() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_4988(%var_4985: Tensor[(8, 5, 8), float64]) -> (Tensor[(8, 5, 8), float64],) {
  %154 = cast(%var_4985, dtype="float64") /* ty=Tensor[(8, 5, 8), float64] */;
  %155 = tan(%154) /* ty=Tensor[(8, 5, 8), float64] */;
  (%155,)
}

def @func_6867() -> Tensor[(6, 16, 8), float64] {
  %156 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  sin(%158) /* ty=Tensor[(6, 16, 8), float64] */
}

def @func_4540() -> (Tensor[(6, 16, 8), float32],) {
  %159 = @func_3811() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %160 = %159.0;
  (%160,)
}

def @func_2384() -> Tensor[(6, 16, 8), float64] {
  %162 = fn () -> Tensor[(6, 16, 8), float64] {
    %161 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
    %161.0
  };
  %162() /* ty=Tensor[(6, 16, 8), float64] */
}

def @func_7339() -> Tensor[(6, 16, 8), float64] {
  %164 = fn () -> Tensor[(6, 16, 8), float64] {
    %163 = @func_6093() /* ty=(Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float64]) */;
    %163.1
  };
  %164() /* ty=Tensor[(6, 16, 8), float64] */
}

def @func_7382() -> (Tensor[(1260), float64], Tensor[(6, 16, 8), float64]) {
  %165 = @func_5259() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
  %166 = @func_3396() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %167 = %165.3;
  %168 = %166.0;
  (%167, %168)
}

def @func_5651(%var_5649: int32, %var_5650: Tensor[(13, 12, 10), int32]) -> Tensor[(13, 12, 10), int32] {
  %171 = fn (%var_5643: int32, %var_5644: Tensor[(13, 12, 10), int32]) -> Tensor[(13, 12, 10), int32] {
    %169 = cast(%var_5643, dtype="int32") /* ty=int32 */;
    %170 = cast(%var_5644, dtype="int32") /* ty=Tensor[(13, 12, 10), int32] */;
    subtract(%169, %170) /* ty=Tensor[(13, 12, 10), int32] */
  };
  %171(%var_5649, %var_5650) /* ty=Tensor[(13, 12, 10), int32] */
}

def @func_7470() -> (Tensor[(924), float64], Tensor[(6, 16, 8), float32], Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  @func_7468() /* ty=(Tensor[(924), float64], Tensor[(6, 16, 8), float32], Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_8033() -> Tensor[(6, 16, 8), float32] {
  @func_5038() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3228(%var_3226: Tensor[(13, 15, 8), float64], %var_3227: Tensor[(13, 15, 8), float64]) -> (Tensor[(13, 15, 8), float64],) {
  @func_3224(%var_3226, %var_3227) /* ty=(Tensor[(13, 15, 8), float64],) */
}

def @func_5762(%var_5750: Tensor[(10, 10, 9), float32]) -> (Tensor[(10, 10, 9), float32], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float32]) {
  %172 = cast(%var_5750, dtype="float32") /* ty=Tensor[(10, 10, 9), float32] */;
  %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %175 = reshape(%173, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %176 = reshape(%174, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %177 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %178 = asin(%172) /* ty=Tensor[(10, 10, 9), float32] */;
  %179 = @func_135(%175, %176) /* ty=Tensor[(8, 7, 12), bool] */;
  %180 = %177.0;
  (%178, %179, meta[relay.Constant][11] /* ty=Tensor[(672), bool] */, %180)
}

def @func_3398() -> (Tensor[(6, 16, 8), float64],) {
  @func_3396() /* ty=(Tensor[(6, 16, 8), float64],) */
}

def @func_6869() -> Tensor[(6, 16, 8), float64] {
  @func_6867() /* ty=Tensor[(6, 16, 8), float64] */
}

def @main(%var_8054: float32) -> (Tensor[(7, 10, 13), float32],) {
  %181 = cast(%var_8054, dtype="float32") /* ty=float32 */;
  %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %183 = mod(%181, %182) /* ty=Tensor[(7, 10, 13), float32] */;
  (%183,)
}

def @func_4727(%var_4725: Tensor[(6, 16, 8), float32], %var_4726: Tensor[(672), bool]) -> (Tensor[(6, 16, 8), bool], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(14, 16, 1), bool], Tensor[(6, 16, 8), float32]) {
  @func_4723(%var_4725, %var_4726) /* ty=(Tensor[(6, 16, 8), bool], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(14, 16, 1), bool], Tensor[(6, 16, 8), float32]) */
}

def @func_6508() -> (Tensor[(10, 1, 3), float64],) {
  %188 = fn () -> (Tensor[(10, 1, 3), float64],) {
    %184 = @func_3898() /* ty=(Tensor[(10, 1, 3), float32],) */;
    %185 = %184.0;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
    %187 = exp(%186) /* ty=Tensor[(10, 1, 3), float64] */;
    (%187,)
  };
  %188() /* ty=(Tensor[(10, 1, 3), float64],) */
}

def @func_1277(%var_1275: Tensor[(2, 13, 11), float32], %var_1276: Tensor[(2, 13, 11), float32]) -> Tensor[(2, 13, 11), float32] {
  %193 = fn (%var_1269: Tensor[(2, 13, 11), float32], %var_1270: Tensor[(2, 13, 11), float32]) -> Tensor[(2, 13, 11), float32] {
    %189 = cast(%var_1270, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
    %190 = shape_of(%var_1269, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%var_1269, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%191, %192) /* ty=Tensor[(2, 13, 11), float32] */
  };
  %193(%var_1275, %var_1276) /* ty=Tensor[(2, 13, 11), float32] */
}

def @func_398(%var_380: Tensor[(2, 4, 2), int8], %var_381: Tensor[(2, 4, 2), int8]) -> (Tensor[(2, 4, 2), float32],) {
  %194 = cast(%var_381, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
  %195 = shape_of(%var_380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_380, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %198 = bitwise_xor(%196, %197) /* ty=Tensor[(2, 4, 2), int8] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %200 = shape_of(%var_380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_380, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %203 = minimum(%201, %202) /* ty=Tensor[(2, 4, 2), float32] */;
  (%203,)
}

def @func_736(%var_734: Tensor[(2, 12, 3), float64], %var_735: Tensor[(16), int8]) -> (Tensor[(2, 12, 3), float64], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(2, 4, 2), float32]) {
  %218 = fn (%var_710: Tensor[(2, 12, 3), float64], %var_714: Tensor[(16), int8]) -> (Tensor[(2, 12, 3), float64], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(2, 4, 2), float32]) {
    %204 = cast(%var_710, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
    %205 = cast(%var_714, dtype="int8") /* ty=Tensor[(16), int8] */;
    %206 = cast(%var_714, dtype="int8") /* ty=Tensor[(16), int8] */;
    %207 = reshape(%205, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %208 = reshape(%206, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %209 = @func_398(%207, %208) /* ty=(Tensor[(2, 4, 2), float32],) */;
    %210 = %209.0;
    %211 = cast(%210, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
    %212 = cast(%210, dtype="int8") /* ty=Tensor[(2, 4, 2), int8] */;
    %213 = reshape(%211, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %214 = reshape(%212, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %215 = @func_398(%213, %214) /* ty=(Tensor[(2, 4, 2), float32],) */;
    %216 = log10(%204) /* ty=Tensor[(2, 12, 3), float64] */;
    %217 = %215.0;
    (%216, %210, %var_714, %217)
  };
  %218(%var_734, %var_735) /* ty=(Tensor[(2, 12, 3), float64], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(2, 4, 2), float32]) */
}

def @func_6656(%var_6655: Tensor[(7), uint64]) -> (Tensor[(6, 16, 8), float32], uint64, Tensor[(7), uint64], Tensor[(1, 7, 1), float32], Tensor[(6, 16, 8), float32], Tensor[(1, 7, 1), float64]) {
  %232 = fn (%var_6619: Tensor[(7), uint64]) -> (Tensor[(6, 16, 8), float32], uint64, Tensor[(7), uint64], Tensor[(1, 7, 1), float32], Tensor[(6, 16, 8), float32], Tensor[(1, 7, 1), float64]) {
    %219 = @func_4953() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %220 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %221 = cast(%var_6619, dtype="uint64") /* ty=Tensor[(7), uint64] */;
    %222 = reshape(%220, newshape=[]) /* ty=uint64 */;
    %223 = reshape(%221, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), uint64] */;
    %224 = @func_3840(%222, %223) /* ty=Tensor[(1, 7, 1), bool] */;
    %225 = cast(%224, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
    %226 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %227 = cast(%224, dtype="float64") /* ty=Tensor[(1, 7, 1), float64] */;
    %228 = %219.0;
    %229 = log10(%225) /* ty=Tensor[(1, 7, 1), float32] */;
    %230 = %226.0;
    %231 = rsqrt(%227) /* ty=Tensor[(1, 7, 1), float64] */;
    (%228, meta[relay.Constant][13] /* ty=uint64 */, %var_6619, %229, %230, %231)
  };
  %232(%var_6655) /* ty=(Tensor[(6, 16, 8), float32], uint64, Tensor[(7), uint64], Tensor[(1, 7, 1), float32], Tensor[(6, 16, 8), float32], Tensor[(1, 7, 1), float64]) */
}

def @func_5412() -> Tensor[(6, 16, 8), float32] {
  @func_5410() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3992() -> Tensor[(6, 16, 8), float32] {
  %233 = fn () -> Tensor[(6, 16, 8), float32] {
    @func_3274() /* ty=Tensor[(6, 16, 8), float32] */
  };
  %233() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3437() -> (Tensor[(6, 16, 8), float64],) {
  %234 = @func_2383() /* ty=Tensor[(6, 16, 8), float64] */;
  (%234,)
}

def @func_6709() -> (Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %243 = fn () -> (Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
    %235 = @func_6591() /* ty=(Tensor[(6, 16, 8), float64],) */;
    %236 = @func_4266() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %237 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %238 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
    %239 = %235.0;
    %240 = %236.0;
    %241 = %237.0;
    %242 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
    (%238, %239, %240, %241, %242)
  };
  %243() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_3348() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %244 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %245 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%244, %245)
}

def @func_6247() -> float32 {
  %247 = fn () -> float32 {
    %246 = @func_5259() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(8, 5, 8), float64], Tensor[(320), float64], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
    %246.4
  };
  %247() /* ty=float32 */
}

def @func_6591() -> (Tensor[(6, 16, 8), float64],) {
  %248 = @func_2383() /* ty=Tensor[(6, 16, 8), float64] */;
  (%248,)
}

def @func_5586(%var_5577: Tensor[(3, 12, 11), int16], %var_5578: Tensor[(3, 12, 11), int16]) -> (Tensor[(3, 12, 11), int16], Tensor[(2, 15, 11), float32], Tensor[(330), float32]) {
  %249 = cast(%var_5578, dtype="int16") /* ty=Tensor[(3, 12, 11), int16] */;
  %250 = shape_of(%var_5577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%var_5577, dtype="int16") /* ty=Tensor[(3, 12, 11), int16] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %253 = cast(meta[relay.Constant][14] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %254 = reshape(%253, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %255 = right_shift(%251, %252) /* ty=Tensor[(3, 12, 11), int16] */;
  %256 = @func_958(%254) /* ty=Tensor[(2, 15, 11), float32] */;
  (%255, %256, meta[relay.Constant][14] /* ty=Tensor[(330), float32] */)
}

def @func_691(%var_689: Tensor[(14, 11, 6), float64]) -> (Tensor[(14, 11, 6), float32],) {
  @func_688(%var_689) /* ty=(Tensor[(14, 11, 6), float32],) */
}

def @func_5065() -> (Tensor[(14, 4, 15), float32], Tensor[(6, 16, 8), float32]) {
  @func_5063() /* ty=(Tensor[(14, 4, 15), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_3505() -> Tensor[(6, 16, 8), float32] {
  @func_3353() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_6423() -> Tensor[(6, 16, 8), float32] {
  %257 = fn () -> Tensor[(6, 16, 8), float32] {
    @func_3991() /* ty=Tensor[(6, 16, 8), float32] */
  };
  %257() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_2568(%var_2564: Tensor[(4, 1, 13), uint8], %var_2565: Tensor[(4, 8, 13), uint8], %var_2566: Tensor[(4, 15, 13), uint8], %var_2567: Tensor[(924, 1), float64]) -> (Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) {
  %283 = fn (%var_2523: Tensor[(4, 1, 13), uint8], %var_2524: Tensor[(4, 8, 13), uint8], %var_2535: Tensor[(4, 15, 13), uint8], %var_2560: Tensor[(924, 1), float64]) -> (Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) {
    %258 = cast(%var_2523, dtype="uint8") /* ty=Tensor[(4, 1, 13), uint8] */;
    %259 = cast(%var_2524, dtype="uint8") /* ty=Tensor[(4, 8, 13), uint8] */;
    %260 = right_shift(%258, %259) /* ty=Tensor[(4, 8, 13), uint8] */;
    %261 = cast(%260, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
    %262 = shape_of(%var_2524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%var_2524, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %265 = cast(%var_2523, dtype="uint8") /* ty=Tensor[(4, 1, 13), uint8] */;
    %266 = cast(%var_2535, dtype="uint8") /* ty=Tensor[(4, 15, 13), uint8] */;
    %267 = cast(%var_2524, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
    %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
    %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
    %270 = reshape(%268, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %271 = reshape(%269, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %272 = @func_398(%270, %271) /* ty=(Tensor[(2, 4, 2), float32],) */;
    %273 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %274 = cast(%var_2560, dtype="float64") /* ty=Tensor[(924, 1), float64] */;
    %275 = reshape(%274, newshape=[14, 11, 6]) /* ty=Tensor[(14, 11, 6), float64] */;
    %276 = @func_688(%275) /* ty=(Tensor[(14, 11, 6), float32],) */;
    %277 = divide(%263, %264) /* ty=Tensor[(4, 8, 13), float32] */;
    %278 = right_shift(%265, %266) /* ty=Tensor[(4, 15, 13), uint8] */;
    %279 = atanh(%267) /* ty=Tensor[(4, 8, 13), float32] */;
    %280 = %272.0;
    %281 = %273.0;
    %282 = %276.0;
    (%277, %278, %279, %280, meta[relay.Constant][15] /* ty=Tensor[(16), int8] */, %281, %282, %var_2560)
  };
  %283(%var_2564, %var_2565, %var_2566, %var_2567) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) */
}

def @func_4542() -> (Tensor[(6, 16, 8), float32],) {
  @func_4540() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_2290() -> (Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) {
  %291 = fn () -> (Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) {
    %284 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
    %285 = cast(%284, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
    %286 = cast(meta[relay.Constant][16] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
    %287 = reshape(%286, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
    %288 = @func_2169(%287) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
    %289 = acosh(%285) /* ty=Tensor[(6, 16, 8), float64] */;
    %290 = %288.2;
    (%289, %290, meta[relay.Constant][16] /* ty=Tensor[(65), bool] */)
  };
  %291() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */
}

def @func_2316() -> Tensor[(6, 16, 8), float32] {
  @func_2314() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4268() -> (Tensor[(6, 16, 8), float32],) {
  @func_4266() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_5935() -> (Tensor[(6, 16, 8), float32],) {
  %294 = fn () -> (Tensor[(6, 16, 8), float32],) {
    %292 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %293 = %292.0;
    (%293,)
  };
  %294() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3350() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  @func_3348() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_6574() -> Tensor[(6, 16, 8), float32] {
  @func_3274() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_6805() -> Tensor[(6, 16, 8), float32] {
  @func_6803() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3275() -> Tensor[(6, 16, 8), float32] {
  %296 = fn () -> Tensor[(6, 16, 8), float32] {
    %295 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %295.0
  };
  %296() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_139(%var_137: Tensor[(8, 7, 12), bool], %var_138: Tensor[(8, 7, 12), bool]) -> Tensor[(8, 7, 12), bool] {
  @func_135(%var_137, %var_138) /* ty=Tensor[(8, 7, 12), bool] */
}

def @func_3558() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) {
  @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */
}

def @func_7307(%var_7305: Tensor[(11, 7, 9), uint64], %var_7306: Tensor[(11, 7, 9), uint64]) -> Tensor[(11, 7, 9), uint64] {
  @func_7303(%var_7305, %var_7306) /* ty=Tensor[(11, 7, 9), uint64] */
}

def @func_6192() -> (Tensor[(6, 16, 8), float32],) {
  %297 = @func_3487() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %298 = %297.0;
  (%298,)
}

def @func_6298() -> (Tensor[(6, 16, 8), float64],) {
  %300 = fn () -> (Tensor[(6, 16, 8), float64],) {
    %299 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
    (%299,)
  };
  %300() /* ty=(Tensor[(6, 16, 8), float64],) */
}

def @func_5807(%var_5806: float32) -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) {
  %309 = fn (%var_5802: float32) -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) {
    %301 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %302 = cast(%var_5802, dtype="float32") /* ty=float32 */;
    %303 = cast(meta[relay.Constant][17] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %304 = reshape(%302, newshape=[]) /* ty=float32 */;
    %305 = reshape(%303, newshape=[30]) /* ty=Tensor[(30), float32] */;
    %306 = @func_2436(%304, %305) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) */;
    %307 = %301.0;
    %308 = %306.1;
    (%307, %308, %var_5802, meta[relay.Constant][17] /* ty=Tensor[(30), float32] */)
  };
  %309(%var_5806) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) */
}

def @func_7497() -> Tensor[(6, 16, 8), float64] {
  %310 = @func_6591() /* ty=(Tensor[(6, 16, 8), float64],) */;
  %310.0
}

def @func_2653() -> (Tensor[(6, 16, 8), float32],) {
  @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_7619() -> (Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) {
  %325 = fn () -> (Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) {
    %311 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 9, 10), float64] */;
    %312 = sqrt(%311) /* ty=Tensor[(8, 9, 10), float64] */;
    %313 = cast(%312, dtype="float32") /* ty=Tensor[(8, 9, 10), float32] */;
    %314 = atan(%313) /* ty=Tensor[(8, 9, 10), float32] */;
    %315 = cast(%314, dtype="float64") /* ty=Tensor[(8, 9, 10), float64] */;
    %316 = rsqrt(%315) /* ty=Tensor[(8, 9, 10), float64] */;
    %317 = cast(%316, dtype="int16") /* ty=Tensor[(8, 9, 10), int16] */;
    %318 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(8, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 9, 10), float64] */, dtype="int16") /* ty=Tensor[(8, 9, 10), int16] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %321 = cast(%316, dtype="float64") /* ty=Tensor[(8, 9, 10), float64] */;
    %322 = bitwise_and(%319, %320) /* ty=Tensor[(8, 9, 10), int16] */;
    %323 = @func_5410() /* ty=Tensor[(6, 16, 8), float32] */;
    %324 = acos(%321) /* ty=Tensor[(8, 9, 10), float64] */;
    (%322, %323, %324)
  };
  %325() /* ty=(Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) */
}

def @func_7655(%var_7654: Tensor[(364), uint64]) -> (Tensor[(6, 16, 8), float32], Tensor[(14, 13, 2), float64], Tensor[(364), uint64], Tensor[(6, 16, 8), float32]) {
  %338 = fn (%var_7638: Tensor[(364), uint64]) -> (Tensor[(6, 16, 8), float32], Tensor[(14, 13, 2), float64], Tensor[(364), uint64], Tensor[(6, 16, 8), float32]) {
    %326 = @func_7618() /* ty=(Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) */;
    %327 = cast(%var_7638, dtype="uint64") /* ty=Tensor[(364), uint64] */;
    %328 = cast(%var_7638, dtype="uint64") /* ty=Tensor[(364), uint64] */;
    %329 = cast(%var_7638, dtype="uint64") /* ty=Tensor[(364), uint64] */;
    %330 = reshape(%327, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), uint64] */;
    %331 = reshape(%328, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), uint64] */;
    %332 = reshape(%329, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), uint64] */;
    %333 = @func_2932(%330, %331, %332) /* ty=(Tensor[(14, 13, 2), float64],) */;
    %334 = @func_6708() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
    %335 = %326.1;
    %336 = %333.0;
    %337 = %334.2;
    (%335, %336, %var_7638, %337)
  };
  %338(%var_7654) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 13, 2), float64], Tensor[(364), uint64], Tensor[(6, 16, 8), float32]) */
}

def @func_8035() -> Tensor[(6, 16, 8), float32] {
  @func_8033() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4487() -> (Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) {
  %350 = fn () -> (Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) {
    %339 = cast(meta[relay.Constant][19] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
    %340 = reshape(%339, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
    %341 = @func_2169(%340) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
    %342 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %343 = %341.1;
    %344 = cast(%343, dtype="int32") /* ty=Tensor[(14, 16, ?), int32] */;
    %345 = reshape(%342, newshape=[]) /* ty=int32 */;
    %346 = reshape(%344, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), int32] */;
    %347 = @func_1368(%345, %346) /* ty=(Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) */;
    %348 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
    %349 = %347.1;
    (%348, %343, meta[relay.Constant][19] /* ty=Tensor[(65), bool] */, %349, 8 /* ty=int32 */)
  };
  %350() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) */
}

def @func_577(%var_573: Tensor[(14, 15, 6), float64], %var_574: float32, %var_575: Tensor[(10, 3), float32], %var_576: Tensor[(14, 15, 6), float64]) -> (Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) {
  @func_571(%var_573, %var_574, %var_575, %var_576) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */
}

def @func_7792(%var_7781: Tensor[(6, 15, 10), int64]) -> (Tensor[(6, 15, 10), int64], Tensor[(6, 15, 10), float64], Tensor[(8, 5, 8), float64], Tensor[(320), float64]) {
  %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 15, 1), int64] */, dtype="int64") /* ty=Tensor[(6, 15, 1), int64] */;
  %352 = cast(%var_7781, dtype="int64") /* ty=Tensor[(6, 15, 10), int64] */;
  %353 = cast(%var_7781, dtype="float64") /* ty=Tensor[(6, 15, 10), float64] */;
  %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %355 = reshape(%354, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float64] */;
  %356 = @func_4988(%355) /* ty=(Tensor[(8, 5, 8), float64],) */;
  %357 = maximum(%351, %352) /* ty=Tensor[(6, 15, 10), int64] */;
  %358 = log(%353) /* ty=Tensor[(6, 15, 10), float64] */;
  %359 = %356.0;
  (%357, %358, %359, meta[relay.Constant][21] /* ty=Tensor[(320), float64] */)
}

def @func_7303(%var_7289: Tensor[(11, 7, 9), uint64], %var_7290: Tensor[(11, 7, 9), uint64]) -> Tensor[(11, 7, 9), uint64] {
  %360 = cast(%var_7290, dtype="uint64") /* ty=Tensor[(11, 7, 9), uint64] */;
  %361 = shape_of(%var_7289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_7289, dtype="uint64") /* ty=Tensor[(11, 7, 9), uint64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%362, %363) /* ty=Tensor[(11, 7, 9), uint64] */
}

def @func_1030(%var_1028: Tensor[(6, 7, 14), uint64]) -> Tensor[(6, 7, 14), uint64] {
  @func_1027(%var_1028) /* ty=Tensor[(6, 7, 14), uint64] */
}

def @func_571(%var_534: Tensor[(14, 15, 6), float64], %var_539: float32, %var_540: Tensor[(10, 3), float32], %var_545: Tensor[(14, 15, 6), float64]) -> (Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) {
  %364 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %365 = cast(%var_540, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %366 = reshape(%364, newshape=[]) /* ty=float32 */;
  %367 = reshape(%365, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %368 = @func_440(%366, %367) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %369 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %370 = cast(%var_540, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %371 = reshape(%369, newshape=[]) /* ty=float32 */;
  %372 = reshape(%370, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %373 = @func_440(%371, %372) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %374 = cast(%var_534, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
  %375 = sin(%374) /* ty=Tensor[(14, 15, 6), float64] */;
  %376 = cast(%var_545, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %381 = %368.0;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %383 = reshape(%380, newshape=[]) /* ty=float32 */;
  %384 = reshape(%382, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %385 = @func_440(%383, %384) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %386 = cast(%375, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
  %387 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %388 = %385.0;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %390 = reshape(%387, newshape=[]) /* ty=float32 */;
  %391 = reshape(%389, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %392 = @func_440(%390, %391) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %393 = cast(%var_539, dtype="float32") /* ty=float32 */;
  %394 = %392.0;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %396 = reshape(%393, newshape=[]) /* ty=float32 */;
  %397 = reshape(%395, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
  %398 = @func_440(%396, %397) /* ty=(Tensor[(10, 1, 3), float32],) */;
  %399 = %373.0;
  %400 = less_equal(%378, %379) /* ty=Tensor[(14, 15, 6), bool] */;
  %401 = tan(%386) /* ty=Tensor[(14, 15, 6), float64] */;
  %402 = %398.0;
  (%381, %var_539, %var_540, %399, %400, %388, %401, %394, %402)
}

def @func_2611(%var_2580: Tensor[(70), float32]) -> (Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], float32, Tensor[(588), float64]) {
  %403 = cast(%var_2580, dtype="float32") /* ty=Tensor[(70), float32] */;
  %404 = cast(%var_2580, dtype="float32") /* ty=Tensor[(70), float32] */;
  %405 = reshape(%403, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %406 = reshape(%404, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float32] */;
  %407 = @func_2366(%405, %406) /* ty=(Tensor[(5, 7, 2), bool],) */;
  %408 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
  %410 = cast(meta[relay.Constant][22] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %411 = reshape(%410, newshape=[7, 12, 7]) /* ty=Tensor[(7, 12, 7), float64] */;
  %412 = @func_634(%411) /* ty=(Tensor[(7, 12, 7), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(30), float32]) */;
  %413 = %407.0;
  %414 = sigmoid(%409) /* ty=Tensor[(6, 16, 8), float32] */;
  %415 = %412.2;
  (%413, %var_2580, %414, %415, meta[relay.Constant][22] /* ty=Tensor[(588), float64] */)
}

def @func_5063() -> (Tensor[(14, 4, 15), float32], Tensor[(6, 16, 8), float32]) {
  %416 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 4, 15), float32] */;
  %417 = acos(%416) /* ty=Tensor[(14, 4, 15), float32] */;
  %418 = @func_3353() /* ty=Tensor[(6, 16, 8), float32] */;
  (%417, %418)
}

def @func_2269(%var_2267: Tensor[(6, 16, 8), float32]) -> (Tensor[(6, 16, 8), int64], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(224), int32]) {
  @func_2266(%var_2267) /* ty=(Tensor[(6, 16, 8), int64], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(224), int32]) */
}

def @func_5410() -> Tensor[(6, 16, 8), float32] {
  @func_3832() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_2189() -> (Tensor[(6, 16, 8), float32],) {
  %420 = fn () -> (Tensor[(6, 16, 8), float32],) {
    %419 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
    (%419,)
  };
  %420() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_6576() -> Tensor[(6, 16, 8), float32] {
  @func_6574() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_5353() -> (Tensor[(6, 16, 8), float32],) {
  %423 = fn () -> (Tensor[(6, 16, 8), float32],) {
    %421 = @func_3426() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %422 = %421.0;
    (%422,)
  };
  %423() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3396() -> (Tensor[(6, 16, 8), float64],) {
  %424 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  (%424,)
}

def @func_2614(%var_2612: Tensor[(70), float32]) -> (Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], float32, Tensor[(588), float64]) {
  @func_2611(%var_2612) /* ty=(Tensor[(5, 7, 2), bool], Tensor[(70), float32], Tensor[(6, 16, 8), float32], float32, Tensor[(588), float64]) */
}

def @func_4080(%var_4069: Tensor[(18, 70), float64]) -> (Tensor[(6, 16, 8), float64], Tensor[(30, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(65), float32], Tensor[(6, 16, 8), float32], Tensor[(10, 3), float32], Tensor[(18, 70), float64], float32) {
  %425 = @func_3011() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) */;
  %426 = %425.4;
  %427 = @func_3011() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) */;
  %428 = %427.4;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %430 = shape_of(%426, dtype="int32") /* ty=Tensor[(2), int32] */;
  %431 = cast(%426, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %433 = @func_3301() /* ty=(Tensor[(65), float32],) */;
  %434 = cast(%var_4069, dtype="float64") /* ty=Tensor[(18, 70), float64] */;
  %435 = cast(-3.34467f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %436 = divide(%431, %432) /* ty=Tensor[(30, ?), float64] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(30, ?), float32] */;
  %438 = cast(%var_4069, dtype="float64") /* ty=Tensor[(18, 70), float64] */;
  %439 = reshape(%434, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %440 = reshape(%435, newshape=[]) /* ty=float32 */;
  %441 = reshape(%437, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %442 = reshape(%438, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %443 = @func_571(%439, %440, %441, %442) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %444 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  %445 = @func_2314() /* ty=Tensor[(6, 16, 8), float32] */;
  %446 = %433.0;
  %447 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
  %448 = %443.2;
  (%444, %436, %445, %446, %447, %448, %var_4069, -3.34467f /* ty=float32 */)
}

def @func_3353() -> Tensor[(6, 16, 8), float32] {
  @func_2140() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_3426() -> (Tensor[(6, 16, 8), float32],) {
  %449 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%449,)
}

def @func_2266(%var_2226: Tensor[(6, 16, 8), float32]) -> (Tensor[(6, 16, 8), int64], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(224), int32]) {
  %450 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %451 = cast(%var_2226, dtype="int64") /* ty=Tensor[(6, 16, 8), int64] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="int64") /* ty=Tensor[(6, 16, 8), int64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %455 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %456 = reshape(%455, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
  %457 = @func_2169(%456) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
  %458 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %459 = reshape(%458, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
  %460 = @func_2169(%459) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
  %461 = minimum(%453, %454) /* ty=Tensor[(6, 16, 8), int64] */;
  %462 = %457.1;
  %463 = %460.2;
  (%461, %462, meta[relay.Constant][24] /* ty=Tensor[(65), bool] */, %463)
}

def @func_5196(%var_5195: Tensor[(16), int8]) -> (Tensor[(4, 11, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8]) {
  %472 = fn (%var_5192: Tensor[(16), int8]) -> (Tensor[(4, 11, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8]) {
    %464 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 13), float32] */;
    %465 = cast(%var_5192, dtype="int8") /* ty=Tensor[(16), int8] */;
    %466 = cast(%var_5192, dtype="int8") /* ty=Tensor[(16), int8] */;
    %467 = reshape(%465, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %468 = reshape(%466, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), int8] */;
    %469 = @func_398(%467, %468) /* ty=(Tensor[(2, 4, 2), float32],) */;
    %470 = atanh(%464) /* ty=Tensor[(4, 11, 13), float32] */;
    %471 = %469.0;
    (%470, %471, %var_5192)
  };
  %472(%var_5195) /* ty=(Tensor[(4, 11, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8]) */
}

def @func_6485(%var_6484: Tensor[(1, 30), float32]) -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(1, 30), float32]) {
  %482 = fn (%var_6481: Tensor[(1, 30), float32]) -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(1, 30), float32]) {
    %473 = @func_3437() /* ty=(Tensor[(6, 16, 8), float64],) */;
    %474 = cast(2.42086f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %475 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %476 = reshape(%474, newshape=[]) /* ty=float32 */;
    %477 = reshape(%475, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), float32] */;
    %478 = @func_440(%476, %477) /* ty=(Tensor[(10, 1, 3), float32],) */;
    %479 = @func_2314() /* ty=Tensor[(6, 16, 8), float32] */;
    %480 = %473.0;
    %481 = %478.0;
    (%479, %480, %481, 2.42086f /* ty=float32 */, %var_6481)
  };
  %482(%var_6484) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(10, 1, 3), float32], float32, Tensor[(1, 30), float32]) */
}

def @func_3134() -> Tensor[(6, 16, 8), float64] {
  %483 = fn () -> Tensor[(6, 16, 8), float64] {
    @func_2383() /* ty=Tensor[(6, 16, 8), float64] */
  };
  %483() /* ty=Tensor[(6, 16, 8), float64] */
}

def @func_7078(%var_7076: Tensor[(1, 11, 7), float64], %var_7077: Tensor[(6, 11, 7), float64]) -> (Tensor[(6, 11, 7), float64], Tensor[(1, 11, 7), float32]) {
  %489 = fn (%var_7051: Tensor[(1, 11, 7), float64], %var_7052: Tensor[(6, 11, 7), float64]) -> (Tensor[(6, 11, 7), float64], Tensor[(1, 11, 7), float32]) {
    %484 = cast(%var_7051, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
    %485 = cast(%var_7052, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
    %486 = cast(%var_7051, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
    %487 = power(%484, %485) /* ty=Tensor[(6, 11, 7), float64] */;
    %488 = erf(%486) /* ty=Tensor[(1, 11, 7), float32] */;
    (%487, %488)
  };
  %489(%var_7076, %var_7077) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(1, 11, 7), float32]) */
}

def @func_3964(%var_3963: Tensor[(72), float64]) -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(2, 4, 2), float32], Tensor[(72), float64], Tensor[(8, 2), int8]) {
  %499 = fn (%var_3955: Tensor[(72), float64]) -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(2, 4, 2), float32], Tensor[(72), float64], Tensor[(8, 2), int8]) {
    %490 = @func_3426() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %491 = cast(%var_3955, dtype="float64") /* ty=Tensor[(72), float64] */;
    %492 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 2), int8] */, dtype="int8") /* ty=Tensor[(8, 2), int8] */;
    %493 = reshape(%491, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
    %494 = reshape(%492, newshape=[16]) /* ty=Tensor[(16), int8] */;
    %495 = @func_733(%493, %494) /* ty=(Tensor[(2, 12, 3), float64], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(2, 4, 2), float32]) */;
    %496 = %490.0;
    %497 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
    %498 = %495.3;
    (%496, %497, %498, %var_3955, meta[relay.Constant][26] /* ty=Tensor[(8, 2), int8] */)
  };
  %499(%var_3963) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(2, 4, 2), float32], Tensor[(72), float64], Tensor[(8, 2), int8]) */
}

def @func_6095() -> (Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float64]) {
  @func_6093() /* ty=(Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float64]) */
}

def @func_4846() -> (Tensor[(6, 16, 8), float64],) {
  %500 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
  (%500,)
}

def @func_7690() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %504 = fn () -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
    %501 = @func_7618() /* ty=(Tensor[(8, 9, 10), int16], Tensor[(6, 16, 8), float32], Tensor[(8, 9, 10), float64]) */;
    %502 = %501.1;
    %503 = @func_6803() /* ty=Tensor[(6, 16, 8), float32] */;
    (%502, %503)
  };
  %504() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_3874() -> Tensor[(6, 16, 8), float64] {
  %506 = fn () -> Tensor[(6, 16, 8), float64] {
    %505 = @func_3437() /* ty=(Tensor[(6, 16, 8), float64],) */;
    %505.0
  };
  %506() /* ty=Tensor[(6, 16, 8), float64] */
}

def @func_5306() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %512 = fn () -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
    %507 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %508 = @func_3505() /* ty=Tensor[(6, 16, 8), float32] */;
    %509 = cast(%508, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
    %510 = %507.0;
    %511 = sqrt(%509) /* ty=Tensor[(6, 16, 8), float32] */;
    (%510, %511)
  };
  %512() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_7204(%var_7203: Tensor[(52), uint8]) -> (Tensor[(6, 16, 8), float32], Tensor[(2, 4, 2), float32], Tensor[(52), uint8], Tensor[(416), uint8], Tensor[(780, 1), uint8], Tensor[(?, 924), uint16], Tensor[(8, 11, 13), float64], Tensor[(22, 52), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(?, 924), int64]) {
  %547 = fn (%var_7111: Tensor[(52), uint8]) -> (Tensor[(6, 16, 8), float32], Tensor[(2, 4, 2), float32], Tensor[(52), uint8], Tensor[(416), uint8], Tensor[(780, 1), uint8], Tensor[(?, 924), uint16], Tensor[(8, 11, 13), float64], Tensor[(22, 52), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(?, 924), int64]) {
    %513 = @func_4513() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %514 = cast(%var_7111, dtype="uint8") /* ty=Tensor[(52), uint8] */;
    %515 = cast(meta[relay.Constant][27] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
    %516 = cast(meta[relay.Constant][28] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
    %517 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 924), float64] */, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
    %518 = reshape(%514, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
    %519 = reshape(%515, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), uint8] */;
    %520 = reshape(%516, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint8] */;
    %521 = reshape(%517, newshape=[924, 1]) /* ty=Tensor[(924, 1), float64] */;
    %522 = @func_2563(%518, %519, %520, %521) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) */;
    %523 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 924), float64] */, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
    %524 = acos(%523) /* ty=Tensor[(1, 924), float64] */;
    %525 = cast(%524, dtype="float32") /* ty=Tensor[(1, 924), float32] */;
    %526 = asin(%525) /* ty=Tensor[(1, 924), float32] */;
    %527 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 924), float64] */, dtype="uint16") /* ty=Tensor[(1, 924), uint16] */;
    %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(2), int32] */;
    %529 = cast(%526, dtype="uint16") /* ty=Tensor[(1, 924), uint16] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %531 = cast(meta[relay.Constant][30] /* ty=Tensor[(22, 52), float64] */, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
    %532 = reshape(%531, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float64] */;
    %533 = @func_4186(%532) /* ty=(Tensor[(8, 11, 13), float64], Tensor[(8, 11, 13), float32], Tensor[(8, 11, 13), int16]) */;
    %534 = @func_6297() /* ty=(Tensor[(6, 16, 8), float64],) */;
    %535 = @func_3516() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %536 = cast(%524, dtype="int64") /* ty=Tensor[(1, 924), int64] */;
    %537 = shape_of(%526, dtype="int32") /* ty=Tensor[(2), int32] */;
    %538 = cast(%526, dtype="int64") /* ty=Tensor[(1, 924), int64] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %540 = %513.0;
    %541 = %522.3;
    %542 = right_shift(%529, %530) /* ty=Tensor[(?, 924), uint16] */;
    %543 = %533.0;
    %544 = %534.0;
    %545 = %535.0;
    %546 = bitwise_xor(%538, %539) /* ty=Tensor[(?, 924), int64] */;
    (%540, %541, %var_7111, meta[relay.Constant][27] /* ty=Tensor[(416), uint8] */, meta[relay.Constant][28] /* ty=Tensor[(780, 1), uint8] */, %542, %543, meta[relay.Constant][30] /* ty=Tensor[(22, 52), float64] */, %544, %545, %546)
  };
  %547(%var_7203) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(2, 4, 2), float32], Tensor[(52), uint8], Tensor[(416), uint8], Tensor[(780, 1), uint8], Tensor[(?, 924), uint16], Tensor[(8, 11, 13), float64], Tensor[(22, 52), float64], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(?, 924), int64]) */
}

def @func_5765(%var_5763: Tensor[(10, 10, 9), float32]) -> (Tensor[(10, 10, 9), float32], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float32]) {
  @func_5762(%var_5763) /* ty=(Tensor[(10, 10, 9), float32], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float32]) */
}

def @func_3011() -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) {
  %548 = @func_2651() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %549 = cast(meta[relay.Constant][31] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %550 = cast(4.44654f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %551 = cast(meta[relay.Constant][32] /* ty=Tensor[(30, 1), float32] */, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %552 = cast(meta[relay.Constant][31] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %553 = reshape(%549, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %554 = reshape(%550, newshape=[]) /* ty=float32 */;
  %555 = reshape(%551, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %556 = reshape(%552, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %557 = @func_571(%553, %554, %555, %556) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %558 = %548.0;
  %559 = %557.7;
  (%558, %559, meta[relay.Constant][31] /* ty=Tensor[(1260), float64] */, 4.44654f /* ty=float32 */, meta[relay.Constant][32] /* ty=Tensor[(30, 1), float32] */)
}

def @func_4383() -> Tensor[(6, 16, 8), float32] {
  @func_2140() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4515() -> (Tensor[(6, 16, 8), float32],) {
  @func_4513() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3813() -> (Tensor[(6, 16, 8), float32],) {
  @func_3811() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3898() -> (Tensor[(10, 1, 3), float32],) {
  %560 = @func_3011() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30, 1), float32]) */;
  %561 = %560.1;
  (%561,)
}

def @func_6675() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) {
  %567 = fn () -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) {
    %562 = @func_3516() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %563 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
    %564 = %562.0;
    %565 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
    %566 = %563.2;
    (%564, %565, %566)
  };
  %567() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) */
}

def @func_4513() -> (Tensor[(6, 16, 8), float32],) {
  %568 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%568,)
}

def @func_5590(%var_5588: Tensor[(3, 12, 11), int16], %var_5589: Tensor[(3, 12, 11), int16]) -> (Tensor[(3, 12, 11), int16], Tensor[(2, 15, 11), float32], Tensor[(330), float32]) {
  @func_5586(%var_5588, %var_5589) /* ty=(Tensor[(3, 12, 11), int16], Tensor[(2, 15, 11), float32], Tensor[(330), float32]) */
}

def @func_3518() -> (Tensor[(6, 16, 8), float32],) {
  @func_3516() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_4444(%var_4391: Tensor[(780, 1), uint8], %var_4392: Tensor[(924), float64], %var_4398: float32, %var_4432: Tensor[(42), float32]) -> (Tensor[(65), bool], Tensor[(16), int8], Tensor[(416), uint8], Tensor[(924), float64], Tensor[(10, 3), float32], Tensor[(1260), float64], float32, Tensor[(5, 6), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(780, 52), bool], Tensor[(7, 11, 6), float64], Tensor[(42), float32], Tensor[(462), float32]) {
  %569 = @func_2289() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(224), int32], Tensor[(65), bool]) */;
  %570 = cast(meta[relay.Constant][33] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %571 = cast(meta[relay.Constant][34] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %572 = cast(%var_4391, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %573 = cast(%var_4392, dtype="float64") /* ty=Tensor[(924), float64] */;
  %574 = reshape(%570, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %575 = reshape(%571, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), uint8] */;
  %576 = reshape(%572, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint8] */;
  %577 = reshape(%573, newshape=[924, 1]) /* ty=Tensor[(924, 1), float64] */;
  %578 = @func_2563(%574, %575, %576, %577) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) */;
  %579 = cast(meta[relay.Constant][35] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %580 = cast(%var_4398, dtype="float32") /* ty=float32 */;
  %581 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 6), float32] */;
  %582 = cast(meta[relay.Constant][35] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %583 = reshape(%579, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %584 = reshape(%580, newshape=[]) /* ty=float32 */;
  %585 = reshape(%581, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %586 = reshape(%582, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %587 = @func_571(%583, %584, %585, %586) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %588 = @func_2406() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %589 = cast(meta[relay.Constant][33] /* ty=Tensor[(52), uint8] */, dtype="uint8") /* ty=Tensor[(52), uint8] */;
  %590 = cast(meta[relay.Constant][34] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %591 = cast(%var_4391, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %592 = cast(%var_4392, dtype="float64") /* ty=Tensor[(924), float64] */;
  %593 = reshape(%589, newshape=[4, 1, 13]) /* ty=Tensor[(4, 1, 13), uint8] */;
  %594 = reshape(%590, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), uint8] */;
  %595 = reshape(%591, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), uint8] */;
  %596 = reshape(%592, newshape=[924, 1]) /* ty=Tensor[(924, 1), float64] */;
  %597 = @func_2563(%593, %594, %595, %596) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(4, 15, 13), uint8], Tensor[(4, 8, 13), float32], Tensor[(2, 4, 2), float32], Tensor[(16), int8], Tensor[(6, 16, 8), float32], Tensor[(14, 11, 6), float32], Tensor[(924, 1), float64]) */;
  %598 = cast(%var_4391, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
  %599 = cast(meta[relay.Constant][33] /* ty=Tensor[(52), uint8] */, dtype="bool") /* ty=Tensor[(52), bool] */;
  %600 = cast(%var_4432, dtype="float32") /* ty=Tensor[(42), float32] */;
  %601 = cast(meta[relay.Constant][37] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %602 = reshape(%600, newshape=[7, 1, 6]) /* ty=Tensor[(7, 1, 6), float32] */;
  %603 = reshape(%601, newshape=[7, 11, 6]) /* ty=Tensor[(7, 11, 6), float32] */;
  %604 = @func_4150(%602, %603) /* ty=(Tensor[(7, 11, 6), float64],) */;
  %605 = %569.2;
  %606 = %578.4;
  %607 = %587.2;
  %608 = %588.0;
  %609 = %597.5;
  %610 = greater_equal(%598, %599) /* ty=Tensor[(780, 52), bool] */;
  %611 = %604.0;
  (%605, %606, meta[relay.Constant][34] /* ty=Tensor[(416), uint8] */, %var_4392, %607, meta[relay.Constant][35] /* ty=Tensor[(1260), float64] */, %var_4398, meta[relay.Constant][36] /* ty=Tensor[(5, 6), float32] */, %608, %609, %610, %611, %var_4432, meta[relay.Constant][37] /* ty=Tensor[(462), float32] */)
}

def @func_7499() -> Tensor[(6, 16, 8), float64] {
  @func_7497() /* ty=Tensor[(6, 16, 8), float64] */
}

def @func_7284(%var_7282: Tensor[(192, 4), float32]) -> (Tensor[(10, 1, 3), float64], Tensor[(6, 16, 8), float32], Tensor[(192, 4), float32], Tensor[(6, 16, 8), float32]) {
  @func_7281(%var_7282) /* ty=(Tensor[(10, 1, 3), float64], Tensor[(6, 16, 8), float32], Tensor[(192, 4), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_4006() -> (Tensor[(6, 16, 8), float32],) {
  @func_4004() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3843(%var_3841: uint64, %var_3842: Tensor[(1, 7, 1), uint64]) -> Tensor[(1, 7, 1), bool] {
  %614 = fn (%var_3834: uint64, %var_3835: Tensor[(1, 7, 1), uint64]) -> Tensor[(1, 7, 1), bool] {
    %612 = cast(%var_3834, dtype="bool") /* ty=bool */;
    %613 = cast(%var_3835, dtype="bool") /* ty=Tensor[(1, 7, 1), bool] */;
    greater_equal(%612, %613) /* ty=Tensor[(1, 7, 1), bool] */
  };
  %614(%var_3841, %var_3842) /* ty=Tensor[(1, 7, 1), bool] */
}

def @func_5377() -> Tensor[(6, 16, 8), float32] {
  @func_5375() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_5741() -> (Tensor[(6, 16, 8), float32], Tensor[(13, 15, 8), float64], Tensor[(1, 1560), float64]) {
  %623 = fn () -> (Tensor[(6, 16, 8), float32], Tensor[(13, 15, 8), float64], Tensor[(1, 1560), float64]) {
    %615 = @func_3487() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %616 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 1560), float64] */, dtype="float64") /* ty=Tensor[(1, 1560), float64] */;
    %617 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 1560), float64] */, dtype="float64") /* ty=Tensor[(1, 1560), float64] */;
    %618 = reshape(%616, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
    %619 = reshape(%617, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
    %620 = @func_3224(%618, %619) /* ty=(Tensor[(13, 15, 8), float64],) */;
    %621 = %615.0;
    %622 = %620.0;
    (%621, %622, meta[relay.Constant][38] /* ty=Tensor[(1, 1560), float64] */)
  };
  %623() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(13, 15, 8), float64], Tensor[(1, 1560), float64]) */
}

def @func_5038() -> Tensor[(6, 16, 8), float32] {
  %624 = @func_4540() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %624.0
}

def @func_5877() -> (Tensor[(6, 16, 8), float32],) {
  @func_5875() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3556() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) {
  %625 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %626 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %628 = %625.0;
  %629 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  %630 = log2(%627) /* ty=Tensor[(6, 16, 8), float64] */;
  (%628, %629, %630)
}

def @func_2724(%var_2722: Tensor[(5, 12, 6), float64], %var_2723: Tensor[(13, 5), bool]) -> (Tensor[(5, 12, 6), float64], Tensor[(5, 12, 6), float64], Tensor[(14, 16, ?), float64], Tensor[(13, 5), bool]) {
  %641 = fn (%var_2679: Tensor[(5, 12, 6), float64], %var_2711: Tensor[(13, 5), bool]) -> (Tensor[(5, 12, 6), float64], Tensor[(5, 12, 6), float64], Tensor[(14, 16, ?), float64], Tensor[(13, 5), bool]) {
    %631 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
    %632 = cast(%var_2679, dtype="float64") /* ty=Tensor[(5, 12, 6), float64] */;
    %633 = cast(%var_2679, dtype="float64") /* ty=Tensor[(5, 12, 6), float64] */;
    %634 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
    %635 = cast(%var_2711, dtype="bool") /* ty=Tensor[(13, 5), bool] */;
    %636 = reshape(%635, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), bool] */;
    %637 = @func_2169(%636) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */;
    %638 = floor_mod(%631, %632) /* ty=Tensor[(5, 12, 6), float64] */;
    %639 = divide(%633, %634) /* ty=Tensor[(5, 12, 6), float64] */;
    %640 = %637.1;
    (%638, %639, %640, %var_2711)
  };
  %641(%var_2722, %var_2723) /* ty=(Tensor[(5, 12, 6), float64], Tensor[(5, 12, 6), float64], Tensor[(14, 16, ?), float64], Tensor[(13, 5), bool]) */
}

def @func_1174(%var_1172: uint16, %var_1173: Tensor[(8, 14, 16), uint16]) -> (Tensor[(8, 14, 16), uint16],) {
  %645 = fn (%var_1154: uint16, %var_1155: Tensor[(8, 14, 16), uint16]) -> (Tensor[(8, 14, 16), uint16],) {
    %642 = cast(%var_1154, dtype="uint16") /* ty=uint16 */;
    %643 = cast(%var_1155, dtype="uint16") /* ty=Tensor[(8, 14, 16), uint16] */;
    %644 = maximum(%642, %643) /* ty=Tensor[(8, 14, 16), uint16] */;
    (%644,)
  };
  %645(%var_1172, %var_1173) /* ty=(Tensor[(8, 14, 16), uint16],) */
}

def @func_2651() -> (Tensor[(6, 16, 8), float32],) {
  %646 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%646,)
}

def @func_4189(%var_4187: Tensor[(8, 11, 13), float64]) -> (Tensor[(8, 11, 13), float64], Tensor[(8, 11, 13), float32], Tensor[(8, 11, 13), int16]) {
  @func_4186(%var_4187) /* ty=(Tensor[(8, 11, 13), float64], Tensor[(8, 11, 13), float32], Tensor[(8, 11, 13), int16]) */
}

def @func_2370(%var_2368: Tensor[(5, 7, 2), float32], %var_2369: Tensor[(5, 7, 2), float32]) -> (Tensor[(5, 7, 2), bool],) {
  @func_2366(%var_2368, %var_2369) /* ty=(Tensor[(5, 7, 2), bool],) */
}

def @func_4723(%var_4667: Tensor[(6, 16, 8), float32], %var_4683: Tensor[(672), bool]) -> (Tensor[(6, 16, 8), bool], Tensor[(8, 7, 12), bool], Tensor[(672), bool], Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float32], Tensor[(14, 16, 1), bool], Tensor[(6, 16, 8), float32]) {
  %647 = @func_2406() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %648 = %647.0;
  %649 = cast(%var_4667, dtype="bool") /* ty=Tensor[(6, 16, 8), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(6, 16, 8), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = cast(%var_4683, dtype="bool") /* ty=Tensor[(672), bool] */;
  %654 = cast(%var_4683, dtype="bool") /* ty=Tensor[(672), bool] */;
  %655 = reshape(%653, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %656 = reshape(%654, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), bool] */;
  %657 = cast(%var_4667, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %658 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%648, dtype="float64") /* ty=Tensor[(6, 16, 8), float64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %661 = @func_4486() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) */;
  %662 = logical_and(%651, %652) /* ty=Tensor[(6, 16, 8), bool] */;
  %663 = @func_135(%655, %656) /* ty=Tensor[(8, 7, 12), bool] */;
  %664 = divide(%659, %660) /* ty=Tensor[(6, 16, 8), float64] */;
  %665 = @func_4383() /* ty=Tensor[(6, 16, 8), float32] */;
  %666 = %661.3;
  %667 = @func_2140() /* ty=Tensor[(6, 16, 8), float32] */;
  (%662, %663, %var_4683, %664, %665, %666, %667)
}

def @func_6593() -> (Tensor[(6, 16, 8), float64],) {
  @func_6591() /* ty=(Tensor[(6, 16, 8), float64],) */
}

def @func_7281(%var_7248: Tensor[(192, 4), float32]) -> (Tensor[(10, 1, 3), float64], Tensor[(6, 16, 8), float32], Tensor[(192, 4), float32], Tensor[(6, 16, 8), float32]) {
  %668 = @func_6507() /* ty=(Tensor[(10, 1, 3), float64],) */;
  %669 = cast(%var_7248, dtype="float32") /* ty=Tensor[(192, 4), float32] */;
  %670 = reshape(%669, newshape=[6, 16, 8]) /* ty=Tensor[(6, 16, 8), float32] */;
  %671 = @func_6318(%670) /* ty=(Tensor[(6, 16, 8), float32],) */;
  %672 = %668.0;
  %673 = %671.0;
  %674 = @func_5375() /* ty=Tensor[(6, 16, 8), float32] */;
  (%672, %673, %var_7248, %674)
}

def @func_3488() -> (Tensor[(6, 16, 8), float32],) {
  %678 = fn () -> (Tensor[(6, 16, 8), float32],) {
    %675 = @func_3133() /* ty=Tensor[(6, 16, 8), float64] */;
    %676 = cast(%675, dtype="float32") /* ty=Tensor[(6, 16, 8), float32] */;
    %677 = cosh(%676) /* ty=Tensor[(6, 16, 8), float32] */;
    (%677,)
  };
  %678() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3900() -> (Tensor[(10, 1, 3), float32],) {
  @func_3898() /* ty=(Tensor[(10, 1, 3), float32],) */
}

def @func_6973(%var_6971: Tensor[(4, 14, 2), float32], %var_6972: Tensor[(924), float64]) -> (Tensor[(6, 16, 8), float64], Tensor[(10, 3), float32], Tensor[(1, 780), uint8], Tensor[(924), float64], float32, Tensor[(42, 1), float32], Tensor[(4, 14, 2), float64]) {
  %695 = fn (%var_6936: Tensor[(4, 14, 2), float32], %var_6958: Tensor[(924), float64]) -> (Tensor[(6, 16, 8), float64], Tensor[(10, 3), float32], Tensor[(1, 780), uint8], Tensor[(924), float64], float32, Tensor[(42, 1), float32], Tensor[(4, 14, 2), float64]) {
    %679 = @func_3396() /* ty=(Tensor[(6, 16, 8), float64],) */;
    %680 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 780), uint8] */, dtype="uint8") /* ty=Tensor[(1, 780), uint8] */;
    %681 = cast(%var_6958, dtype="float64") /* ty=Tensor[(924), float64] */;
    %682 = cast(-4.76628f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %683 = cast(meta[relay.Constant][41] /* ty=Tensor[(42, 1), float32] */, dtype="float32") /* ty=Tensor[(42, 1), float32] */;
    %684 = reshape(%680, newshape=[780, 1]) /* ty=Tensor[(780, 1), uint8] */;
    %685 = reshape(%681, newshape=[924]) /* ty=Tensor[(924), float64] */;
    %686 = reshape(%682, newshape=[]) /* ty=float32 */;
    %687 = reshape(%683, newshape=[42]) /* ty=Tensor[(42), float32] */;
    %688 = @func_4444(%684, %685, %686, %687) /* ty=(Tensor[(65), bool], Tensor[(16), int8], Tensor[(416), uint8], Tensor[(924), float64], Tensor[(10, 3), float32], Tensor[(1260), float64], float32, Tensor[(5, 6), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(780, 52), bool], Tensor[(7, 11, 6), float64], Tensor[(42), float32], Tensor[(462), float32]) */;
    %689 = cast(%var_6936, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    %690 = atanh(%689) /* ty=Tensor[(4, 14, 2), float32] */;
    %691 = cast(%690, dtype="float64") /* ty=Tensor[(4, 14, 2), float64] */;
    %692 = %679.0;
    %693 = %688.4;
    %694 = sinh(%691) /* ty=Tensor[(4, 14, 2), float64] */;
    (%692, %693, meta[relay.Constant][40] /* ty=Tensor[(1, 780), uint8] */, %var_6958, -4.76628f /* ty=float32 */, meta[relay.Constant][41] /* ty=Tensor[(42, 1), float32] */, %694)
  };
  %695(%var_6971, %var_6972) /* ty=(Tensor[(6, 16, 8), float64], Tensor[(10, 3), float32], Tensor[(1, 780), uint8], Tensor[(924), float64], float32, Tensor[(42, 1), float32], Tensor[(4, 14, 2), float64]) */
}

def @func_2314() -> Tensor[(6, 16, 8), float32] {
  @func_2140() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_1371(%var_1369: int32, %var_1370: Tensor[(14, 16, 1), int32]) -> (Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) {
  %718 = fn (%var_1310: int32, %var_1311: Tensor[(14, 16, 1), int32]) -> (Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) {
    %696 = cast(meta[relay.Constant][42] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
    %697 = reshape(%696, newshape=[14, 11, 6]) /* ty=Tensor[(14, 11, 6), float64] */;
    %698 = @func_688(%697) /* ty=(Tensor[(14, 11, 6), float32],) */;
    %699 = cast(%var_1310, dtype="bool") /* ty=bool */;
    %700 = cast(%var_1311, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
    %701 = cast(%var_1311, dtype="uint8") /* ty=Tensor[(14, 16, 1), uint8] */;
    %702 = cast(meta[relay.Constant][42] /* ty=Tensor[(924), float64] */, dtype="uint8") /* ty=Tensor[(924), uint8] */;
    %703 = cast(%var_1310, dtype="int32") /* ty=int32 */;
    %704 = cast(%var_1311, dtype="int32") /* ty=Tensor[(14, 16, 1), int32] */;
    %705 = maximum(%703, %704) /* ty=Tensor[(14, 16, 1), int32] */;
    %706 = cast(%705, dtype="float64") /* ty=Tensor[(14, 16, 1), float64] */;
    %707 = sqrt(%706) /* ty=Tensor[(14, 16, 1), float64] */;
    %708 = cast(%705, dtype="float64") /* ty=Tensor[(14, 16, 1), float64] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="float64") /* ty=Tensor[(14, 16, 1), float64] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %712 = power(%710, %711) /* ty=Tensor[(14, 16, ?), float64] */;
    %713 = cast(%712, dtype="float64") /* ty=Tensor[(14, 16, ?), float64] */;
    %714 = %698.0;
    %715 = greater(%699, %700) /* ty=Tensor[(14, 16, 1), bool] */;
    %716 = bitwise_or(%701, %702) /* ty=Tensor[(14, 16, 924), uint8] */;
    %717 = erf(%713) /* ty=Tensor[(14, 16, ?), float64] */;
    (%714, %715, %716, %717)
  };
  %718(%var_1369, %var_1370) /* ty=(Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) */
}

def @func_6745() -> Tensor[(6, 16, 8), float32] {
  @func_6743() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_7934() -> (Tensor[(6, 16, 8), float32],) {
  %721 = fn () -> (Tensor[(6, 16, 8), float32],) {
    %719 = @func_5305() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
    %720 = %719.1;
    (%720,)
  };
  %721() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_3355() -> Tensor[(6, 16, 8), float32] {
  @func_3353() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_402(%var_400: Tensor[(2, 4, 2), int8], %var_401: Tensor[(2, 4, 2), int8]) -> (Tensor[(2, 4, 2), float32],) {
  @func_398(%var_400, %var_401) /* ty=(Tensor[(2, 4, 2), float32],) */
}

def @func_7384() -> (Tensor[(1260), float64], Tensor[(6, 16, 8), float64]) {
  @func_7382() /* ty=(Tensor[(1260), float64], Tensor[(6, 16, 8), float64]) */
}

def @func_960(%var_959: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), float32] {
  %723 = fn (%var_946: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), float32] {
    %722 = cast(%var_946, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
    sinh(%722) /* ty=Tensor[(2, 15, 11), float32] */
  };
  %723(%var_959) /* ty=Tensor[(2, 15, 11), float32] */
}

def @func_4266() -> (Tensor[(6, 16, 8), float32],) {
  %724 = @func_3832() /* ty=Tensor[(6, 16, 8), float32] */;
  (%724,)
}

def @func_5557() -> Tensor[(6, 16, 8), float32] {
  @func_5555() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4004() -> (Tensor[(6, 16, 8), float32],) {
  %725 = @func_3426() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %726 = %725.0;
  (%726,)
}

def @func_4636() -> (Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) {
  %730 = fn () -> (Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) {
    %727 = @func_3556() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float64]) */;
    %728 = %727.2;
    %729 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
    (%728, %729)
  };
  %730() /* ty=(Tensor[(6, 16, 8), float64], Tensor[(6, 16, 8), float64]) */
}

def @func_6460() -> (Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %736 = fn () -> (Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
    %731 = @func_4486() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(14, 16, ?), float64], Tensor[(65), bool], Tensor[(14, 16, 1), bool], int32) */;
    %732 = @func_5063() /* ty=(Tensor[(14, 4, 15), float32], Tensor[(6, 16, 8), float32]) */;
    %733 = %731.1;
    %734 = @func_3505() /* ty=Tensor[(6, 16, 8), float32] */;
    %735 = %732.1;
    (%733, %734, %735)
  };
  %736() /* ty=(Tensor[(14, 16, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_4664() -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
  %741 = fn () -> (Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) {
    %737 = @func_4266() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %738 = @func_3348() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */;
    %739 = %737.0;
    %740 = %738.1;
    (%739, %740)
  };
  %741() /* ty=(Tensor[(6, 16, 8), float32], Tensor[(6, 16, 8), float32]) */
}

def @func_5875() -> (Tensor[(6, 16, 8), float32],) {
  %742 = @func_2975() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %743 = %742.0;
  (%743,)
}

def @func_6148(%var_6101: Tensor[(2, 8, 5), float64], %var_6142: Tensor[(2, 780), float64]) -> (Tensor[(6, 16, 8), float32], Tensor[(2, 8, 5), float32], Tensor[(2, 8, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(2, 780), float64]) {
  %744 = cast(%var_6101, dtype="float64") /* ty=Tensor[(2, 8, 5), float64] */;
  %745 = acos(%744) /* ty=Tensor[(2, 8, 5), float64] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(2, 8, 5), float64] */;
  %747 = cosh(%746) /* ty=Tensor[(2, 8, 5), float64] */;
  %748 = cast(%745, dtype="float32") /* ty=Tensor[(2, 8, 5), float32] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="float32") /* ty=Tensor[(2, 8, 5), float32] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %752 = cast(%745, dtype="float32") /* ty=Tensor[(2, 8, 5), float32] */;
  %753 = cast(%var_6142, dtype="float64") /* ty=Tensor[(2, 780), float64] */;
  %754 = cast(%var_6142, dtype="float64") /* ty=Tensor[(2, 780), float64] */;
  %755 = reshape(%753, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
  %756 = reshape(%754, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), float64] */;
  %757 = @func_3224(%755, %756) /* ty=(Tensor[(13, 15, 8), float64],) */;
  %758 = @func_5555() /* ty=Tensor[(6, 16, 8), float32] */;
  %759 = minimum(%750, %751) /* ty=Tensor[(2, 8, 5), float32] */;
  %760 = tan(%752) /* ty=Tensor[(2, 8, 5), float32] */;
  %761 = %757.0;
  (%758, %759, %760, %761, %var_6142)
}

def @func_2936(%var_2933: Tensor[(14, 13, 2), uint64], %var_2934: Tensor[(14, 13, 2), uint64], %var_2935: Tensor[(14, 13, 2), uint64]) -> (Tensor[(14, 13, 2), float64],) {
  %774 = fn (%var_2887: Tensor[(14, 13, 2), uint64], %var_2888: Tensor[(14, 13, 2), uint64], %var_2893: Tensor[(14, 13, 2), uint64]) -> (Tensor[(14, 13, 2), float64],) {
    %762 = cast(%var_2888, dtype="uint64") /* ty=Tensor[(14, 13, 2), uint64] */;
    %763 = shape_of(%var_2887, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(%var_2887, dtype="uint64") /* ty=Tensor[(14, 13, 2), uint64] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %766 = subtract(%764, %765) /* ty=Tensor[(14, 13, 2), uint64] */;
    %767 = cast(%var_2893, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
    %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%766, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %771 = less_equal(%769, %770) /* ty=Tensor[(14, 13, 2), bool] */;
    %772 = cast(%771, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
    %773 = acos(%772) /* ty=Tensor[(14, 13, 2), float64] */;
    (%773,)
  };
  %774(%var_2933, %var_2934, %var_2935) /* ty=(Tensor[(14, 13, 2), float64],) */
}

def @func_4991(%var_4989: Tensor[(8, 5, 8), float64]) -> (Tensor[(8, 5, 8), float64],) {
  @func_4988(%var_4989) /* ty=(Tensor[(8, 5, 8), float64],) */
}

def @func_2436(%var_2433: float32, %var_2434: Tensor[(30), float32]) -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) {
  %775 = @func_2188() /* ty=(Tensor[(6, 16, 8), float32],) */;
  %776 = cast(meta[relay.Constant][43] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %777 = cast(%var_2433, dtype="float32") /* ty=float32 */;
  %778 = cast(%var_2434, dtype="float32") /* ty=Tensor[(30), float32] */;
  %779 = cast(meta[relay.Constant][43] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %780 = reshape(%776, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %781 = reshape(%777, newshape=[]) /* ty=float32 */;
  %782 = reshape(%778, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %783 = reshape(%779, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float64] */;
  %784 = @func_571(%780, %781, %782, %783) /* ty=(Tensor[(10, 1, 3), float32], float32, Tensor[(10, 3), float32], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), bool], Tensor[(10, 1, 3), float32], Tensor[(14, 15, 6), float64], Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float32]) */;
  %785 = %775.0;
  %786 = %784.5;
  (%785, %786, meta[relay.Constant][43] /* ty=Tensor[(1260), float64] */, %var_2433, %var_2434)
}

def @func_3833() -> Tensor[(6, 16, 8), float32] {
  %788 = fn () -> Tensor[(6, 16, 8), float32] {
    %787 = @func_3811() /* ty=(Tensor[(6, 16, 8), float32],) */;
    %787.0
  };
  %788() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_6803() -> Tensor[(6, 16, 8), float32] {
  @func_3274() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_5040() -> Tensor[(6, 16, 8), float32] {
  @func_5038() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_4154(%var_4152: Tensor[(7, 1, 6), float32], %var_4153: Tensor[(7, 11, 6), float32]) -> (Tensor[(7, 11, 6), float64],) {
  @func_4150(%var_4152, %var_4153) /* ty=(Tensor[(7, 11, 6), float64],) */
}

def @func_688(%var_656: Tensor[(14, 11, 6), float64]) -> (Tensor[(14, 11, 6), float32],) {
  %789 = cast(%var_656, dtype="float64") /* ty=Tensor[(14, 11, 6), float64] */;
  %790 = sigmoid(%789) /* ty=Tensor[(14, 11, 6), float64] */;
  %791 = cast(%var_656, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="int8") /* ty=Tensor[(14, 11, 6), int8] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %795 = right_shift(%793, %794) /* ty=Tensor[(14, 11, 6), int8] */;
  %796 = cast(%var_656, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%795, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %800 = floor_divide(%798, %799) /* ty=Tensor[(14, 11, 6), float32] */;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %802 = sqrt(%801) /* ty=Tensor[(14, 11, 6), float32] */;
  (%802,)
}

def @func_5375() -> Tensor[(6, 16, 8), float32] {
  @func_3505() /* ty=Tensor[(6, 16, 8), float32] */
}

def @func_6194() -> (Tensor[(6, 16, 8), float32],) {
  @func_6192() /* ty=(Tensor[(6, 16, 8), float32],) */
}

def @func_2366(%var_2355: Tensor[(5, 7, 2), float32], %var_2356: Tensor[(5, 7, 2), float32]) -> (Tensor[(5, 7, 2), bool],) {
  %803 = cast(%var_2356, dtype="float32") /* ty=Tensor[(5, 7, 2), float32] */;
  %804 = shape_of(%var_2355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_2355, dtype="float32") /* ty=Tensor[(5, 7, 2), float32] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %807 = subtract(%805, %806) /* ty=Tensor[(5, 7, 2), float32] */;
  %808 = cast(%807, dtype="bool") /* ty=Tensor[(5, 7, 2), bool] */;
  %809 = shape_of(%var_2355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%var_2355, dtype="bool") /* ty=Tensor[(5, 7, 2), bool] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %812 = logical_or(%810, %811) /* ty=Tensor[(5, 7, 2), bool] */;
  (%812,)
}

def @func_4083(%var_4081: Tensor[(18, 70), float64]) -> (Tensor[(6, 16, 8), float64], Tensor[(30, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(65), float32], Tensor[(6, 16, 8), float32], Tensor[(10, 3), float32], Tensor[(18, 70), float64], float32) {
  @func_4080(%var_4081) /* ty=(Tensor[(6, 16, 8), float64], Tensor[(30, ?), float64], Tensor[(6, 16, 8), float32], Tensor[(65), float32], Tensor[(6, 16, 8), float32], Tensor[(10, 3), float32], Tensor[(18, 70), float64], float32) */
}

def @func_1027(%var_1015: Tensor[(6, 7, 14), uint64]) -> Tensor[(6, 7, 14), uint64] {
  %813 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 7, 14), uint64] */, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %814 = shape_of(%var_1015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%var_1015, dtype="uint64") /* ty=Tensor[(6, 7, 14), uint64] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%815, %816) /* ty=Tensor[(6, 7, 14), uint64] */
}

def @func_2440(%var_2438: float32, %var_2439: Tensor[(30), float32]) -> (Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) {
  @func_2436(%var_2438, %var_2439) /* ty=(Tensor[(6, 16, 8), float32], Tensor[(10, 1, 3), float32], Tensor[(1260), float64], float32, Tensor[(30), float32]) */
}

def @func_7524() -> (Tensor[(7, 15, 10), float64], Tensor[(6, 16, 8), float64]) {
  %820 = fn () -> (Tensor[(7, 15, 10), float64], Tensor[(6, 16, 8), float64]) {
    %817 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %818 = tan(%817) /* ty=Tensor[(7, 15, 10), float64] */;
    %819 = @func_3873() /* ty=Tensor[(6, 16, 8), float64] */;
    (%818, %819)
  };
  %820() /* ty=(Tensor[(7, 15, 10), float64], Tensor[(6, 16, 8), float64]) */
}

def @func_2171(%var_2170: Tensor[(13, 5, 1), bool]) -> (Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) {
  %837 = fn (%var_2149: Tensor[(13, 5, 1), bool]) -> (Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) {
    %821 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %822 = cast(%var_2149, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
    %823 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
    %824 = cast(meta[relay.Constant][46] /* ty=Tensor[(224), int32] */, dtype="int32") /* ty=Tensor[(224), int32] */;
    %825 = reshape(%823, newshape=[]) /* ty=int32 */;
    %826 = reshape(%824, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), int32] */;
    %827 = @func_1368(%825, %826) /* ty=(Tensor[(14, 11, 6), float32], Tensor[(14, 16, 1), bool], Tensor[(14, 16, 924), uint8], Tensor[(14, 16, ?), float64]) */;
    %828 = cast(%var_2149, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
    %829 = tan(%828) /* ty=Tensor[(13, 5, 1), float32] */;
    %830 = cast(%var_2149, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
    %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
    %832 = cast(%829, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
    %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %834 = logical_or(%821, %822) /* ty=Tensor[(13, 5, 1), bool] */;
    %835 = %827.3;
    %836 = less(%832, %833) /* ty=Tensor[(13, 5, ?), bool] */;
    (%834, %835, meta[relay.Constant][46] /* ty=Tensor[(224), int32] */, %836)
  };
  %837(%var_2170) /* ty=(Tensor[(13, 5, 1), bool], Tensor[(14, 16, ?), float64], Tensor[(224), int32], Tensor[(13, 5, ?), bool]) */
}

def @func_3811() -> (Tensor[(6, 16, 8), float32],) {
  %838 = @func_3274() /* ty=Tensor[(6, 16, 8), float32] */;
  (%838,)
}

def @func_3224(%var_3212: Tensor[(13, 15, 8), float64], %var_3213: Tensor[(13, 15, 8), float64]) -> (Tensor[(13, 15, 8), float64],) {
  %839 = cast(%var_3213, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %840 = shape_of(%var_3212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%var_3212, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %843 = power(%841, %842) /* ty=Tensor[(13, 15, 8), float64] */;
  (%843,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen235/build/output.py:2391: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen235/build/output.py", line 2396, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(910) tvmgen_default_fused_mod_kernel0(float* __restrict__ T_mod, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_mod[(((int)threadIdx.x))] = fmodf(placeholder[(0)], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

