==========mod==========
#[version = "0.0.5"]
def @func_4111(%var_4105: uint32, %var_4106: Tensor[(1716), uint32], %var_4109: Tensor[(12, 30), float64]) -> (Tensor[(12, 10, 9), uint32], Tensor[(15, 8, 6), bool], Tensor[(32), float64], Tensor[(720), int32], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32], Tensor[(15, 12, 2), int64], Tensor[(12, 30), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %2 = reshape(%0, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
  %3 = reshape(%1, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %4 = @func_2651(%2, %3) /* ty=(Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) */;
  %5 = cast(%var_4105, dtype="uint32") /* ty=uint32 */;
  %6 = cast(%var_4106, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
  %7 = reshape(%5, newshape=[]) /* ty=uint32 */;
  %8 = reshape(%6, newshape=[11, 13, 12]) /* ty=Tensor[(11, 13, 12), uint32] */;
  %9 = cast(%var_4109, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
  %10 = cast(%var_4109, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
  %11 = reshape(%9, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %12 = reshape(%10, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %13 = @func_2280(%11, %12) /* ty=(Tensor[(15, 12, 2), int64],) */;
  %14 = @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */;
  %15 = %4.1;
  %16 = @func_2302(%7, %8) /* ty=Tensor[(11, 13, 12), bool] */;
  %17 = %13.0;
  (%14, %15, meta[relay.Constant][0] /* ty=Tensor[(32), float64] */, meta[relay.Constant][1] /* ty=Tensor[(720), int32] */, %16, %var_4105, %var_4106, %17, %var_4109)
}

def @func_2961(%var_2930: Tensor[(3, 1, 13), uint64], %var_2948: Tensor[(3, 2, 13), uint64], %var_2953: Tensor[(819), bool], %var_2954: Tensor[(8, 52), uint64]) -> (Tensor[(3, 14, 13), uint64], Tensor[(3, 2, 13), uint16], Tensor[(8, 4, 13), bool], Tensor[(819), bool], Tensor[(8, 52), uint64]) {
  %18 = cast(%var_2930, dtype="uint64") /* ty=Tensor[(3, 1, 13), uint64] */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 14, 13), uint64] */, dtype="uint64") /* ty=Tensor[(3, 14, 13), uint64] */;
  %20 = cast(%var_2930, dtype="uint16") /* ty=Tensor[(3, 1, 13), uint16] */;
  %21 = cast(%var_2948, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %22 = cast(%var_2953, dtype="bool") /* ty=Tensor[(819), bool] */;
  %23 = cast(%var_2954, dtype="uint64") /* ty=Tensor[(8, 52), uint64] */;
  %24 = reshape(%22, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
  %25 = reshape(%23, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %26 = @func_421(%24, %25) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
  %27 = logical_xor(%18, %19) /* ty=Tensor[(3, 14, 13), uint64] */;
  %28 = add(%20, %21) /* ty=Tensor[(3, 2, 13), uint16] */;
  %29 = %26.6;
  (%27, %28, %29, %var_2953, %var_2954)
}

def @func_3467() -> Tensor[(12, 10, 9), uint32] {
  %30 = @func_2786() /* ty=(Tensor[(16, 4, 1), float64], uint8, Tensor[(12, 10, 9), uint32]) */;
  %30.2
}

def @func_5207() -> (Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(264), float32]) {
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %32 = reshape(%31, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
  %33 = @func_1046(%32) /* ty=(Tensor[(12, 11, 2), float32],) */;
  %34 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %35 = %33.0;
  (%34, %35, meta[relay.Constant][3] /* ty=Tensor[(264), float32] */)
}

def @func_3625(%var_3574: Tensor[(330), float64], %var_3612: Tensor[(720), float32]) -> (Tensor[(16, 4, 1), float64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(720), float32]) {
  %36 = cast(%var_3574, dtype="float64") /* ty=Tensor[(330), float64] */;
  %37 = reshape(%36, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %38 = @func_80(%37) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %39 = cast(%var_3574, dtype="float64") /* ty=Tensor[(330), float64] */;
  %40 = cast(%var_3612, dtype="float32") /* ty=Tensor[(720), float32] */;
  %41 = reshape(%40, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
  %42 = @func_1453(%41) /* ty=(Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) */;
  %43 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %44 = %38.0;
  %45 = atanh(%39) /* ty=Tensor[(330), float64] */;
  %46 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %47 = %42.1;
  (%43, %44, %45, %46, %47, %var_3612)
}

def @func_5077(%var_5035: Tensor[(720), int32], %var_5053: Tensor[(1170), float32], %var_5058: Tensor[(1170), float32], %var_5069: Tensor[(147), float32], %var_5070: Tensor[(2, 416), float64]) -> (Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), uint8], Tensor[(12, 10, 9), bool], Tensor[(32), float64], Tensor[(640), float64], Tensor[(16, 4, 720), float32], Tensor[(1170), bool], Tensor[(1170), int64], Tensor[(147), float32], Tensor[(147), float32], Tensor[(2, 416), float64]) {
  %48 = @func_4845() /* ty=(Tensor[(12, 10, 9), float64],) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="uint32") /* ty=Tensor[(12, 10, 9), uint32] */;
  %51 = reshape(%50, newshape=[12, 10, 9]) /* ty=Tensor[(12, 10, 9), uint32] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %53 = cast(%var_5035, dtype="int32") /* ty=Tensor[(720), int32] */;
  %54 = cast(meta[relay.Constant][5] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %55 = cast(%49, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %56 = reshape(%52, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %57 = reshape(%53, newshape=[720, 1]) /* ty=Tensor[(720, 1), int32] */;
  %58 = reshape(%54, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %59 = reshape(%55, newshape=[12, 10, 9]) /* ty=Tensor[(12, 10, 9), bool] */;
  %60 = @func_3909(%56, %57, %58, %59) /* ty=(Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(12, 11, 2), uint64], Tensor[(819), bool], Tensor[(640), float64], Tensor[(90), int32], Tensor[(12, 10, 9), bool], Tensor[(720, 819), bool]) */;
  %61 = cast(meta[relay.Constant][6] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %62 = reshape(%61, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), float32] */;
  %63 = @func_4382(%62) /* ty=(Tensor[(6, 13, 15), float32], Tensor[(16, 4, ?), uint8]) */;
  %64 = %63.1;
  %65 = cast(%var_5035, dtype="float32") /* ty=Tensor[(720), float32] */;
  %66 = cast(%64, dtype="float32") /* ty=Tensor[(16, 4, ?), float32] */;
  %67 = cast(meta[relay.Constant][6] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %68 = atanh(%67) /* ty=Tensor[(1170), float32] */;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %70 = acos(%69) /* ty=Tensor[(1170), float32] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %72 = log10(%71) /* ty=Tensor[(1170), float32] */;
  %73 = cast(%var_5053, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(1), int32] */;
  %75 = cast(%72, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?), bool] */;
  %77 = cast(%var_5058, dtype="int64") /* ty=Tensor[(1170), int64] */;
  %78 = shape_of(%68, dtype="int32") /* ty=Tensor[(1), int32] */;
  %79 = cast(%68, dtype="int64") /* ty=Tensor[(1170), int64] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?), int64] */;
  %81 = cast(%var_5069, dtype="float32") /* ty=Tensor[(147), float32] */;
  %82 = cast(%var_5070, dtype="float64") /* ty=Tensor[(2, 416), float64] */;
  %83 = reshape(%81, newshape=[147]) /* ty=Tensor[(147), float32] */;
  %84 = reshape(%82, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %85 = @func_5003(%83, %84) /* ty=(Tensor[(12, 10, 9), uint32], Tensor[(16, 4, 1), float64], Tensor[(147), float32], Tensor[(273, 3), bool], Tensor[(165, 2), float64], Tensor[(832), float64], uint8) */;
  %86 = @func_4407(%51) /* ty=Tensor[(12, 10, 9), uint8] */;
  %87 = %60.6;
  %88 = divide(%65, %66) /* ty=Tensor[(16, 4, 720), float32] */;
  %89 = greater_equal(%75, %76) /* ty=Tensor[(1170), bool] */;
  %90 = right_shift(%79, %80) /* ty=Tensor[(1170), int64] */;
  %91 = %85.2;
  (%49, %86, %87, meta[relay.Constant][4] /* ty=Tensor[(32), float64] */, meta[relay.Constant][5] /* ty=Tensor[(640), float64] */, %88, %89, %90, %91, %var_5069, %var_5070)
}

def @func_3355(%var_3290: Tensor[(16, 4, 10), float64], %var_3311: Tensor[(45, 2), int32]) -> (Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) {
  %92 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %93 = %92.0;
  %94 = cast(%93, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %95 = cast(%var_3290, dtype="bool") /* ty=Tensor[(16, 4, 10), bool] */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(45, 2), int32] */, dtype="int32") /* ty=Tensor[(45, 2), int32] */;
  %97 = cast(meta[relay.Constant][8] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %98 = reshape(%96, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %99 = reshape(%97, newshape=[15, 8, 6]) /* ty=Tensor[(15, 8, 6), int32] */;
  %100 = @func_1185(%98, %99) /* ty=(Tensor[(15, 8, 6), bool],) */;
  %101 = cast(%var_3311, dtype="uint64") /* ty=Tensor[(45, 2), uint64] */;
  %102 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(45, 2), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(45, 2), int32] */, dtype="uint64") /* ty=Tensor[(45, 2), uint64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %105 = right_shift(%103, %104) /* ty=Tensor[(45, 2), uint64] */;
  %106 = cast(%var_3311, dtype="int16") /* ty=Tensor[(45, 2), int16] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(2), int32] */;
  %108 = cast(%105, dtype="int16") /* ty=Tensor[(45, 2), int16] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(720), int32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %112 = reshape(%110, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %113 = reshape(%111, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %114 = @func_3124(%112, %113) /* ty=(Tensor[(16, 4, 1), float64], Tensor[(264), float32], Tensor[(819), bool], Tensor[(32), float64], Tensor[(4, 180), uint64]) */;
  %115 = equal(%94, %95) /* ty=Tensor[(16, 4, 10), bool] */;
  %116 = %100.0;
  %117 = minimum(%108, %109) /* ty=Tensor[(45, 2), int16] */;
  %118 = %114.2;
  (%115, %116, meta[relay.Constant][8] /* ty=Tensor[(720), int32] */, %117, %118, meta[relay.Constant][9] /* ty=Tensor[(819), bool] */)
}

def @func_2786() -> (Tensor[(16, 4, 1), float64], uint8, Tensor[(12, 10, 9), uint32]) {
  %119 = cast(meta[relay.Constant][10] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %120 = reshape(%119, newshape=[]) /* ty=uint8 */;
  %121 = @func_1314(%120) /* ty=(Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) */;
  %122 = %121.0;
  %123 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 10, 9), uint8] */, dtype="uint32") /* ty=Tensor[(12, 10, 9), uint32] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="uint32") /* ty=Tensor[(12, 10, 9), uint32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %127 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %128 = bitwise_or(%125, %126) /* ty=Tensor[(12, 10, 9), uint32] */;
  (%127, meta[relay.Constant][10] /* ty=uint8 */, %128)
}

def @func_4036() -> (Tensor[(16, 4, 1), float64],) {
  %129 = @func_2889() /* ty=Tensor[(16, 4, 1), float64] */;
  (%129,)
}

def @func_3672(%var_3657: Tensor[(15, 10, 13), float64]) -> (Tensor[(15, 10, 13), float64], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32]) {
  %130 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
  %131 = shape_of(%var_3657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%var_3657, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %134 = cast(meta[relay.Constant][13] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %135 = cast(meta[relay.Constant][14] /* ty=Tensor[(1716), uint32] */, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
  %136 = reshape(%134, newshape=[]) /* ty=uint32 */;
  %137 = reshape(%135, newshape=[11, 13, 12]) /* ty=Tensor[(11, 13, 12), uint32] */;
  %138 = floor_divide(%132, %133) /* ty=Tensor[(15, 10, 13), float64] */;
  %139 = @func_2302(%136, %137) /* ty=Tensor[(11, 13, 12), bool] */;
  (%138, %139, meta[relay.Constant][13] /* ty=uint32 */, meta[relay.Constant][14] /* ty=Tensor[(1716), uint32] */)
}

def @func_80(%var_62: Tensor[(5, 6, 11), float64]) -> (Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) {
  %140 = cast(%var_62, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %141 = cos(%140) /* ty=Tensor[(5, 6, 11), float64] */;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %143 = cast(%var_62, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
  %144 = cosh(%143) /* ty=Tensor[(5, 6, 11), float32] */;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
  %146 = atan(%142) /* ty=Tensor[(5, 6, 11), float64] */;
  %147 = erf(%145) /* ty=Tensor[(5, 6, 11), float32] */;
  (%146, %147)
}

def @main() -> Tensor[(13, 13, 7), float32] {
  %148 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 7), float32] */;
  sigmoid(%148) /* ty=Tensor[(13, 13, 7), float32] */
}

def @func_3637() -> Tensor[(12, 10, 9), uint32] {
  @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */
}

def @func_1453(%var_1391: Tensor[(4, 12, 15), float32]) -> (Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) {
  %149 = cast(-1.35939f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %150 = cast(%var_1391, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
  %151 = cast(meta[relay.Constant][16] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %152 = reshape(%151, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
  %153 = @func_1046(%152) /* ty=(Tensor[(12, 11, 2), float32],) */;
  %154 = cast(-1.35939f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
  %155 = reshape(%154, newshape=[]) /* ty=uint8 */;
  %156 = @func_1314(%155) /* ty=(Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) */;
  %157 = floor_mod(%149, %150) /* ty=Tensor[(4, 12, 15), float32] */;
  %158 = %153.0;
  %159 = %156.5;
  (%157, %158, meta[relay.Constant][16] /* ty=Tensor[(264), float32] */, %159)
}

def @func_1185(%var_1176: Tensor[(15, 1, 6), int32], %var_1177: Tensor[(15, 8, 6), int32]) -> (Tensor[(15, 8, 6), bool],) {
  %160 = cast(%var_1176, dtype="int32") /* ty=Tensor[(15, 1, 6), int32] */;
  %161 = cast(%var_1177, dtype="int32") /* ty=Tensor[(15, 8, 6), int32] */;
  %162 = minimum(%160, %161) /* ty=Tensor[(15, 8, 6), int32] */;
  %163 = cast(%var_1176, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
  %164 = cast(%162, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
  %165 = logical_and(%163, %164) /* ty=Tensor[(15, 8, 6), bool] */;
  (%165,)
}

def @func_963(%var_955: Tensor[(7, 7, 3), float32]) -> (Tensor[(7, 7, 3), float32],) {
  %166 = cast(%var_955, dtype="float32") /* ty=Tensor[(7, 7, 3), float32] */;
  %167 = log10(%166) /* ty=Tensor[(7, 7, 3), float32] */;
  (%167,)
}

def @func_4681(%var_4668: Tensor[(5, 390), float64]) -> (Tensor[(12, 10, 9), float32], Tensor[(1716), uint32], Tensor[(5, 390), float64], Tensor[(12, 10, 9), uint32]) {
  %168 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  %171 = cast(%var_4668, dtype="float64") /* ty=Tensor[(5, 390), float64] */;
  %172 = reshape(%171, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %173 = @func_3672(%172) /* ty=(Tensor[(15, 10, 13), float64], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32]) */;
  %174 = sin(%170) /* ty=Tensor[(12, 10, 9), float32] */;
  %175 = %173.3;
  %176 = @func_3637() /* ty=Tensor[(12, 10, 9), uint32] */;
  (%174, %175, %var_4668, %176)
}

def @func_5623() -> Tensor[(16, 4, 1), float64] {
  @func_2889() /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_2280(%var_2269: Tensor[(15, 12, 2), float64], %var_2276: Tensor[(15, 12, 2), float64]) -> (Tensor[(15, 12, 2), int64],) {
  %177 = cast(%var_2269, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %178 = acos(%177) /* ty=Tensor[(15, 12, 2), float64] */;
  %179 = cast(%var_2276, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %183 = multiply(%181, %182) /* ty=Tensor[(15, 12, 2), int64] */;
  (%183,)
}

def @func_4761() -> (Tensor[(12, 10, 9), float64],) {
  %184 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
  %185 = %184.1;
  (%185,)
}

def @func_5288(%var_5266: Tensor[(12, 10, 16), float32], %var_5284: Tensor[(10, 117), float32], %var_5286: Tensor[(832), float64]) -> (Tensor[(12, 10, 16), float32], Tensor[(640), float64], Tensor[(720), int32], Tensor[(10, 117), float32], Tensor[(147), float32], Tensor[(832), float64]) {
  %186 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 16), float32] */;
  %187 = shape_of(%var_5266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%var_5266, dtype="float32") /* ty=Tensor[(12, 10, 16), float32] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %190 = cast(meta[relay.Constant][18] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %191 = cast(%var_5284, dtype="float32") /* ty=Tensor[(10, 117), float32] */;
  %192 = cast(%var_5284, dtype="float32") /* ty=Tensor[(10, 117), float32] */;
  %193 = cast(meta[relay.Constant][19] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %194 = cast(%var_5286, dtype="float64") /* ty=Tensor[(832), float64] */;
  %195 = reshape(%190, newshape=[720]) /* ty=Tensor[(720), int32] */;
  %196 = reshape(%191, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %197 = reshape(%192, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %198 = reshape(%193, newshape=[147]) /* ty=Tensor[(147), float32] */;
  %199 = reshape(%194, newshape=[2, 416]) /* ty=Tensor[(2, 416), float64] */;
  %200 = @func_5077(%195, %196, %197, %198, %199) /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), uint8], Tensor[(12, 10, 9), bool], Tensor[(32), float64], Tensor[(640), float64], Tensor[(16, 4, 720), float32], Tensor[(1170), bool], Tensor[(1170), int64], Tensor[(147), float32], Tensor[(147), float32], Tensor[(2, 416), float64]) */;
  %201 = floor_mod(%188, %189) /* ty=Tensor[(12, 10, 16), float32] */;
  %202 = %200.4;
  (%201, %202, meta[relay.Constant][18] /* ty=Tensor[(720), int32] */, %var_5284, meta[relay.Constant][19] /* ty=Tensor[(147), float32] */, %var_5286)
}

def @func_1046(%var_1041: Tensor[(12, 11, 2), float32]) -> (Tensor[(12, 11, 2), float32],) {
  %203 = cast(%var_1041, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %204 = cos(%203) /* ty=Tensor[(12, 11, 2), float32] */;
  (%204,)
}

def @func_5572() -> Tensor[(16, 4, 8), bool] {
  %205 = @func_4036() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %208 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 4, 8), float64] */, dtype="bool") /* ty=Tensor[(16, 4, 8), bool] */;
  equal(%207, %208) /* ty=Tensor[(16, 4, 8), bool] */
}

def @func_2870(%var_2816: Tensor[(819), bool], %var_2839: Tensor[(16, 2), float64], %var_2840: Tensor[(720), int32], %var_2843: Tensor[(360, 2), int32]) -> (Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) {
  %209 = cast(meta[relay.Constant][21] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %210 = cast(%var_2816, dtype="bool") /* ty=Tensor[(819), bool] */;
  %211 = reshape(%209, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %212 = reshape(%210, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %213 = @func_1001(%211, %212) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(7, 12, 2), float64], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(16, 26), uint64]) */;
  %214 = cast(%var_2839, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  %215 = cast(%var_2840, dtype="int32") /* ty=Tensor[(720), int32] */;
  %216 = reshape(%214, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
  %217 = reshape(%215, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %218 = @func_2651(%216, %217) /* ty=(Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) */;
  %219 = %218.3;
  %220 = cast(%var_2843, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(2), int32] */;
  %222 = cast(%219, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %224 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %225 = cast(meta[relay.Constant][21] /* ty=Tensor[(168), float64] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %226 = cast(%224, dtype="uint32") /* ty=Tensor[(16, 4, 1), uint32] */;
  %227 = bitwise_xor(%225, %226) /* ty=Tensor[(16, 4, 168), uint32] */;
  %228 = cast(meta[relay.Constant][21] /* ty=Tensor[(168), float64] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %229 = cast(%224, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %230 = less_equal(%228, %229) /* ty=Tensor[(16, 4, 168), bool] */;
  %231 = cast(%230, dtype="int8") /* ty=Tensor[(16, 4, 168), int8] */;
  %232 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%227, dtype="int8") /* ty=Tensor[(16, 4, 168), int8] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %235 = %213.0;
  %236 = minimum(%222, %223) /* ty=Tensor[(360, 2), float64] */;
  %237 = right_shift(%233, %234) /* ty=Tensor[(16, 4, 168), int8] */;
  (%235, %var_2816, %var_2839, %var_2840, %236, %237)
}

def @func_5154() -> Tensor[(12, 10, 9), float32] {
  %238 = @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  cosh(%239) /* ty=Tensor[(12, 10, 9), float32] */
}

def @func_3124(%var_3083: Tensor[(4, 180), float32], %var_3088: Tensor[(819), bool]) -> (Tensor[(16, 4, 1), float64], Tensor[(264), float32], Tensor[(819), bool], Tensor[(32), float64], Tensor[(4, 180), uint64]) {
  %240 = cast(%var_3083, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %241 = reshape(%240, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
  %242 = @func_1453(%241) /* ty=(Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) */;
  %243 = cast(%var_3088, dtype="bool") /* ty=Tensor[(819), bool] */;
  %244 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %245 = cast(%var_3083, dtype="int32") /* ty=Tensor[(4, 180), int32] */;
  %246 = cast(%var_3083, dtype="int32") /* ty=Tensor[(4, 180), int32] */;
  %247 = reshape(%243, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %248 = reshape(%244, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %249 = reshape(%245, newshape=[720]) /* ty=Tensor[(720), int32] */;
  %250 = reshape(%246, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %251 = @func_2870(%247, %248, %249, %250) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) */;
  %252 = %251.3;
  %253 = cast(%252, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %254 = shape_of(%var_3083, dtype="int32") /* ty=Tensor[(2), int32] */;
  %255 = cast(%var_3083, dtype="uint64") /* ty=Tensor[(4, 180), uint64] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %257 = @func_2889() /* ty=Tensor[(16, 4, 1), float64] */;
  %258 = %242.2;
  %259 = logical_xor(%255, %256) /* ty=Tensor[(4, 180), uint64] */;
  (%257, %258, %var_3088, meta[relay.Constant][22] /* ty=Tensor[(32), float64] */, %259)
}

def @func_2651(%var_2633: Tensor[(4, 1, 8), float64], %var_2638: Tensor[(360, 2), int32]) -> (Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) {
  %260 = cast(%var_2633, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
  %261 = cast(meta[relay.Constant][23] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %262 = cast(%var_2638, dtype="int32") /* ty=Tensor[(360, 2), int32] */;
  %263 = reshape(%261, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %264 = reshape(%262, newshape=[15, 8, 6]) /* ty=Tensor[(15, 8, 6), int32] */;
  %265 = @func_1185(%263, %264) /* ty=(Tensor[(15, 8, 6), bool],) */;
  %266 = asinh(%260) /* ty=Tensor[(4, 1, 8), float64] */;
  %267 = %265.0;
  (%266, %267, meta[relay.Constant][23] /* ty=Tensor[(90), int32] */, %var_2638)
}

def @func_5509() -> Tensor[(12, 10, 9), float64] {
  %268 = @func_4743() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) */;
  %268.1
}

def @func_1314(%var_1268: uint8) -> (Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) {
  %269 = cast(%var_1268, dtype="uint8") /* ty=uint8 */;
  %270 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 10, 9), uint8] */, dtype="uint8") /* ty=Tensor[(12, 10, 9), uint8] */;
  %271 = cast(meta[relay.Constant][25] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %272 = reshape(%271, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %273 = @func_963(%272) /* ty=(Tensor[(7, 7, 3), float32],) */;
  %274 = cast(meta[relay.Constant][26] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %275 = cast(meta[relay.Constant][27] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %276 = reshape(%274, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
  %277 = reshape(%275, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %278 = @func_421(%276, %277) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
  %279 = maximum(%269, %270) /* ty=Tensor[(12, 10, 9), uint8] */;
  %280 = %273.0;
  %281 = %278.10;
  (%279, %280, meta[relay.Constant][25] /* ty=Tensor[(147), float32] */, %281, meta[relay.Constant][26] /* ty=Tensor[(819), bool] */, meta[relay.Constant][27] /* ty=Tensor[(416), uint64] */)
}

def @func_3181(%var_3167: Tensor[(32), float64], %var_3168: Tensor[(720), int32]) -> (Tensor[(15, 8, 16), int32], Tensor[(90), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(15, 8, 16), float64]) {
  %282 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(15, 8, 16), int32] */;
  %283 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(15, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(15, 8, 16), int32] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %286 = cast(%var_3167, dtype="float64") /* ty=Tensor[(32), float64] */;
  %287 = cast(%var_3168, dtype="int32") /* ty=Tensor[(720), int32] */;
  %288 = reshape(%286, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
  %289 = reshape(%287, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %290 = @func_2651(%288, %289) /* ty=(Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) */;
  %291 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 8, 16), int32] */, dtype="float64") /* ty=Tensor[(15, 8, 16), float64] */;
  %292 = maximum(%284, %285) /* ty=Tensor[(15, 8, 16), int32] */;
  %293 = %290.2;
  %294 = acosh(%291) /* ty=Tensor[(15, 8, 16), float64] */;
  (%292, %293, %var_3167, %var_3168, %294)
}

def @func_3240(%var_3193: Tensor[(10, 4, 8), int8], %var_3231: Tensor[(10, 4, 8), int8], %var_3238: Tensor[(147), float32]) -> (Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), int16], Tensor[(7, 7, 3), float32], Tensor[(147), float32]) {
  %295 = cast(%var_3193, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
  %296 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 4, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 4, 8), int8] */, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %299 = bitwise_and(%297, %298) /* ty=Tensor[(10, 4, 8), int8] */;
  %300 = cast(%299, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
  %301 = shape_of(%var_3193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_3193, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %304 = cast(%299, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
  %305 = shape_of(%var_3193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%var_3193, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %308 = bitwise_or(%306, %307) /* ty=Tensor[(10, 4, 8), int8] */;
  %309 = cast(%var_3193, dtype="float64") /* ty=Tensor[(10, 4, 8), float64] */;
  %310 = erf(%309) /* ty=Tensor[(10, 4, 8), float64] */;
  %311 = cast(%310, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
  %312 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%308, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %315 = right_shift(%313, %314) /* ty=Tensor[(10, 4, 8), int8] */;
  %316 = cast(%315, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
  %317 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%308, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = cast(%var_3231, dtype="int16") /* ty=Tensor[(10, 4, 8), int16] */;
  %321 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%315, dtype="int16") /* ty=Tensor[(10, 4, 8), int16] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %324 = cast(%var_3238, dtype="float32") /* ty=Tensor[(147), float32] */;
  %325 = reshape(%324, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %326 = @func_963(%325) /* ty=(Tensor[(7, 7, 3), float32],) */;
  %327 = less_equal(%302, %303) /* ty=Tensor[(10, 4, 8), bool] */;
  %328 = equal(%318, %319) /* ty=Tensor[(10, 4, 8), bool] */;
  %329 = logical_xor(%322, %323) /* ty=Tensor[(10, 4, 8), int16] */;
  %330 = %326.0;
  (%327, %328, %329, %330, %var_3238)
}

def @func_1001(%var_974: Tensor[(7, 12, 2), float64], %var_993: Tensor[(819), bool]) -> (Tensor[(7, 12, 2), float64], Tensor[(7, 12, 2), float64], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(16, 26), uint64]) {
  %331 = cast(%var_974, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %332 = cast(%var_974, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %333 = cast(%var_993, dtype="bool") /* ty=Tensor[(819), bool] */;
  %334 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 26), uint64] */, dtype="uint64") /* ty=Tensor[(16, 26), uint64] */;
  %335 = reshape(%333, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
  %336 = reshape(%334, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %337 = @func_421(%335, %336) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
  %338 = sinh(%331) /* ty=Tensor[(7, 12, 2), float64] */;
  %339 = atanh(%332) /* ty=Tensor[(7, 12, 2), float64] */;
  %340 = %337.8;
  (%338, %339, %340, %var_993, meta[relay.Constant][31] /* ty=Tensor[(16, 26), uint64] */)
}

def @func_2302(%var_2297: uint32, %var_2298: Tensor[(11, 13, 12), uint32]) -> Tensor[(11, 13, 12), bool] {
  %341 = cast(%var_2297, dtype="bool") /* ty=bool */;
  %342 = cast(%var_2298, dtype="bool") /* ty=Tensor[(11, 13, 12), bool] */;
  equal(%341, %342) /* ty=Tensor[(11, 13, 12), bool] */
}

def @func_421(%var_315: Tensor[(9, 7, 13), bool], %var_344: Tensor[(416), uint64]) -> (Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) {
  %343 = cast(meta[relay.Constant][32] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %344 = reshape(%343, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %345 = @func_80(%344) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %346 = cast(%var_315, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %347 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(9, 7, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 7, 13), bool] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = logical_or(%348, %349) /* ty=Tensor[(9, 7, 13), bool] */;
  %351 = cast(%350, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %352 = shape_of(%var_315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%var_315, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %356 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %357 = reshape(%355, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %358 = reshape(%356, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %359 = @func_132(%357, %358) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %360 = %359.1;
  %361 = cast(%360, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %362 = cast(%360, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %363 = reshape(%361, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %364 = reshape(%362, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %365 = @func_132(%363, %364) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %366 = %365.0;
  %367 = cast(%360, dtype="uint8") /* ty=Tensor[(8, 4, 13), uint8] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="uint8") /* ty=Tensor[(8, 4, 13), uint8] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %371 = cast(%366, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %372 = cast(%366, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %373 = reshape(%371, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %374 = reshape(%372, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %375 = @func_132(%373, %374) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %376 = cast(%366, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %377 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %378 = reshape(%376, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %379 = reshape(%377, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %380 = @func_132(%378, %379) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %383 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %384 = reshape(%382, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %385 = reshape(%383, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %386 = @func_132(%384, %385) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %387 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 7, 13), bool] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %388 = shape_of(%var_315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_315, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = not_equal(%389, %390) /* ty=Tensor[(9, 7, 13), bool] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %393 = cosh(%392) /* ty=Tensor[(9, 7, 13), float64] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %395 = %345.1;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %397 = reshape(%396, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %398 = @func_80(%397) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %399 = cast(%393, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %400 = equal(%353, %354) /* ty=Tensor[(9, 7, 13), bool] */;
  %401 = add(%369, %370) /* ty=Tensor[(8, 4, 13), uint8] */;
  %402 = %375.1;
  %403 = %386.1;
  %404 = exp(%394) /* ty=Tensor[(9, 7, 13), float64] */;
  %405 = %398.0;
  %406 = tan(%399) /* ty=Tensor[(9, 7, 13), float64] */;
  (%var_344, %395, meta[relay.Constant][32] /* ty=Tensor[(330), float64] */, %400, %401, %402, %381, %403, %404, %405, %406)
}

def @func_4845() -> (Tensor[(12, 10, 9), float64],) {
  %407 = @func_4761() /* ty=(Tensor[(12, 10, 9), float64],) */;
  %408 = %407.0;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %410 = atanh(%409) /* ty=Tensor[(12, 10, 9), float64] */;
  (%410,)
}

def @func_4208(%var_4122: Tensor[(16, 4, 12), float64], %var_4139: Tensor[(640), float64], %var_4140: Tensor[(90), int32]) -> (Tensor[(16, 4, 12), bool], Tensor[(16, 4, 12), float32], Tensor[(16, 4, 10), bool], Tensor[(640), float64], Tensor[(90), int32]) {
  %411 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %414 = cast(%var_4122, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
  %415 = cast(%var_4122, dtype="float32") /* ty=Tensor[(16, 4, 12), float32] */;
  %416 = cast(%var_4139, dtype="float64") /* ty=Tensor[(640), float64] */;
  %417 = cast(%var_4140, dtype="int32") /* ty=Tensor[(90), int32] */;
  %418 = reshape(%416, newshape=[16, 4, 10]) /* ty=Tensor[(16, 4, 10), float64] */;
  %419 = reshape(%417, newshape=[45, 2]) /* ty=Tensor[(45, 2), int32] */;
  %420 = @func_3355(%418, %419) /* ty=(Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) */;
  %421 = equal(%413, %414) /* ty=Tensor[(16, 4, 12), bool] */;
  %422 = asin(%415) /* ty=Tensor[(16, 4, 12), float32] */;
  %423 = %420.0;
  (%421, %422, %423, %var_4139, %var_4140)
}

def @func_5003(%var_4996: Tensor[(147), float32], %var_4999: Tensor[(832), float64]) -> (Tensor[(12, 10, 9), uint32], Tensor[(16, 4, 1), float64], Tensor[(147), float32], Tensor[(273, 3), bool], Tensor[(165, 2), float64], Tensor[(832), float64], uint8) {
  %424 = cast(%var_4996, dtype="float32") /* ty=Tensor[(147), float32] */;
  %425 = cast(meta[relay.Constant][35] /* ty=Tensor[(273, 3), bool] */, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %426 = cast(meta[relay.Constant][36] /* ty=Tensor[(165, 2), float64] */, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
  %427 = cast(%var_4999, dtype="float64") /* ty=Tensor[(832), float64] */;
  %428 = cast(meta[relay.Constant][37] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %429 = reshape(%424, newshape=[147]) /* ty=Tensor[(147), float32] */;
  %430 = reshape(%425, newshape=[273, 3]) /* ty=Tensor[(273, 3), bool] */;
  %431 = reshape(%426, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %432 = reshape(%427, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %433 = reshape(%428, newshape=[]) /* ty=uint8 */;
  %434 = @func_4968(%429, %430, %431, %432, %433) /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), uint8], Tensor[(8, 4, 13), float64], Tensor[(330), float64], Tensor[(585), float32], Tensor[(273, 3), float64], Tensor[(16, 4, 13), bool], Tensor[(832), float64], Tensor[(819), int8], Tensor[(147), uint32], Tensor[(1080), uint16], Tensor[(16, 4, 1), float64]) */;
  %435 = @func_3792() /* ty=Tensor[(12, 10, 9), uint32] */;
  %436 = %434.11;
  (%435, %436, %var_4996, meta[relay.Constant][35] /* ty=Tensor[(273, 3), bool] */, meta[relay.Constant][36] /* ty=Tensor[(165, 2), float64] */, %var_4999, meta[relay.Constant][37] /* ty=uint8 */)
}

def @func_4796() -> (Tensor[(12, 10, 9), float64],) {
  %437 = @func_4067() /* ty=(Tensor[(12, 10, 9), float64],) */;
  %438 = %437.0;
  (%438,)
}

def @func_5162() -> Tensor[(16, 4, 1), float64] {
  %439 = @func_4743() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) */;
  %439.0
}

def @func_132(%var_110: Tensor[(8, 4, 13), uint64], %var_111: Tensor[(8, 4, 13), uint64]) -> (Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) {
  %440 = cast(%var_111, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %441 = shape_of(%var_110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_110, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = cast(%var_111, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
  %445 = greater_equal(%442, %443) /* ty=Tensor[(8, 4, 13), bool] */;
  %446 = sigmoid(%444) /* ty=Tensor[(8, 4, 13), float64] */;
  (%445, %446)
}

def @func_4018(%var_3998: Tensor[(16, 4, 13), float64], %var_4004: Tensor[(16, 4, 13), float64]) -> (Tensor[(16, 4, 13), float64], Tensor[(16, 4, 13), bool]) {
  %447 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(16, 4, 1), float64] */;
  %450 = cast(%var_3998, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  %451 = cast(%var_4004, dtype="bool") /* ty=Tensor[(16, 4, 13), bool] */;
  %452 = shape_of(%var_3998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_3998, dtype="bool") /* ty=Tensor[(16, 4, 13), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = divide(%449, %450) /* ty=Tensor[(16, 4, 13), float64] */;
  %456 = equal(%453, %454) /* ty=Tensor[(16, 4, 13), bool] */;
  (%455, %456)
}

def @func_4067() -> (Tensor[(12, 10, 9), float64],) {
  %457 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
  %458 = %457.0;
  (%458,)
}

def @func_3909(%var_3858: Tensor[(16, 2), float64], %var_3859: Tensor[(720, 1), int32], %var_3880: Tensor[(640), float64], %var_3893: Tensor[(12, 10, 9), bool]) -> (Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(12, 11, 2), uint64], Tensor[(819), bool], Tensor[(640), float64], Tensor[(90), int32], Tensor[(12, 10, 9), bool], Tensor[(720, 819), bool]) {
  %459 = cast(meta[relay.Constant][38] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %460 = cast(%var_3858, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  %461 = cast(%var_3859, dtype="int32") /* ty=Tensor[(720, 1), int32] */;
  %462 = cast(%var_3859, dtype="int32") /* ty=Tensor[(720, 1), int32] */;
  %463 = reshape(%459, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %464 = reshape(%460, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %465 = reshape(%461, newshape=[720]) /* ty=Tensor[(720), int32] */;
  %466 = reshape(%462, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %467 = @func_2870(%463, %464, %465, %466) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) */;
  %468 = cast(meta[relay.Constant][39] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %469 = reshape(%468, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
  %470 = @func_1046(%469) /* ty=(Tensor[(12, 11, 2), float32],) */;
  %471 = %470.0;
  %472 = cast(meta[relay.Constant][39] /* ty=Tensor[(264), float32] */, dtype="uint64") /* ty=Tensor[(264), uint64] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %476 = cast(%var_3880, dtype="float64") /* ty=Tensor[(640), float64] */;
  %477 = cast(meta[relay.Constant][40] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %478 = reshape(%476, newshape=[16, 4, 10]) /* ty=Tensor[(16, 4, 10), float64] */;
  %479 = reshape(%477, newshape=[45, 2]) /* ty=Tensor[(45, 2), int32] */;
  %480 = @func_3355(%478, %479) /* ty=(Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) */;
  %481 = @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  %483 = rsqrt(%482) /* ty=Tensor[(12, 10, 9), float32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = not_equal(%486, %487) /* ty=Tensor[(12, 10, 9), bool] */;
  %489 = cast(%var_3893, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = cast(meta[relay.Constant][38] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %494 = cast(%var_3859, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
  %495 = %467.1;
  %496 = add(%474, %475) /* ty=Tensor[(12, 11, 2), uint64] */;
  %497 = %480.5;
  %498 = greater_equal(%491, %492) /* ty=Tensor[(12, 10, 9), bool] */;
  %499 = less(%493, %494) /* ty=Tensor[(720, 819), bool] */;
  (%495, %var_3858, %496, %497, %var_3880, meta[relay.Constant][40] /* ty=Tensor[(90), int32] */, %498, %499)
}

def @func_4323() -> (Tensor[(16, 4, ?), uint8], Tensor[(16, 4, ?), bool]) {
  %500 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %501 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 1), float64] */, dtype="uint8") /* ty=Tensor[(16, 4, 1), uint8] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="uint8") /* ty=Tensor[(16, 4, 1), uint8] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %505 = cast(%500, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %506 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 1), float64] */, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = bitwise_or(%503, %504) /* ty=Tensor[(16, 4, ?), uint8] */;
  %510 = greater_equal(%507, %508) /* ty=Tensor[(16, 4, ?), bool] */;
  (%509, %510)
}

def @func_4407(%var_4401: Tensor[(12, 10, 9), uint32]) -> Tensor[(12, 10, 9), uint8] {
  %511 = @func_3792() /* ty=Tensor[(12, 10, 9), uint32] */;
  %512 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(12, 10, 9), uint8] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="uint8") /* ty=Tensor[(12, 10, 9), uint8] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%514, %515) /* ty=Tensor[(12, 10, 9), uint8] */
}

def @func_3009() -> (Tensor[(16, 4, 1), float64],) {
  %516 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  (%516,)
}

def @func_3775() -> (Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) {
  %517 = @func_3637() /* ty=Tensor[(12, 10, 9), uint32] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  %519 = log10(%518) /* ty=Tensor[(12, 10, 9), float32] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %521 = cast(%517, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %522 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%519, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %525 = sigmoid(%520) /* ty=Tensor[(12, 10, 9), float64] */;
  %526 = power(%523, %524) /* ty=Tensor[(12, 10, 9), float64] */;
  (%525, %526)
}

def @func_2762() -> Tensor[(16, 4, 1), float64] {
  %527 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 1), float64] */;
  sin(%527) /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_3792() -> Tensor[(12, 10, 9), uint32] {
  @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */
}

def @func_4473(%var_4442: Tensor[(9, 3, 6), float32], %var_4443: Tensor[(9, 3, 6), float32], %var_4464: Tensor[(13, 3), uint64], %var_4467: Tensor[(8, 52), uint64]) -> (Tensor[(9, 3, 6), int32], Tensor[(9, 3, 6), float32], Tensor[(8, 4, 13), bool], Tensor[(13, 3), uint64], Tensor[(78), uint64], Tensor[(1, 819), bool], Tensor[(8, 52), uint64]) {
  %528 = cast(%var_4443, dtype="int32") /* ty=Tensor[(9, 3, 6), int32] */;
  %529 = shape_of(%var_4442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%var_4442, dtype="int32") /* ty=Tensor[(9, 3, 6), int32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %532 = cast(%var_4443, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
  %533 = shape_of(%var_4442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_4442, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %536 = floor_mod(%534, %535) /* ty=Tensor[(9, 3, 6), float32] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
  %538 = sin(%537) /* ty=Tensor[(9, 3, 6), float32] */;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
  %540 = cast(%var_4464, dtype="uint64") /* ty=Tensor[(13, 3), uint64] */;
  %541 = cast(meta[relay.Constant][43] /* ty=Tensor[(78), uint64] */, dtype="uint64") /* ty=Tensor[(78), uint64] */;
  %542 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 819), bool] */, dtype="bool") /* ty=Tensor[(1, 819), bool] */;
  %543 = cast(%var_4467, dtype="uint64") /* ty=Tensor[(8, 52), uint64] */;
  %544 = reshape(%540, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), uint64] */;
  %545 = reshape(%541, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), uint64] */;
  %546 = reshape(%542, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %547 = reshape(%543, newshape=[8, 52]) /* ty=Tensor[(8, 52), uint64] */;
  %548 = @func_2961(%544, %545, %546, %547) /* ty=(Tensor[(3, 14, 13), uint64], Tensor[(3, 2, 13), uint16], Tensor[(8, 4, 13), bool], Tensor[(819), bool], Tensor[(8, 52), uint64]) */;
  %549 = maximum(%530, %531) /* ty=Tensor[(9, 3, 6), int32] */;
  %550 = sigmoid(%539) /* ty=Tensor[(9, 3, 6), float32] */;
  %551 = %548.2;
  (%549, %550, %551, %var_4464, meta[relay.Constant][43] /* ty=Tensor[(78), uint64] */, meta[relay.Constant][44] /* ty=Tensor[(1, 819), bool] */, %var_4467)
}

def @func_4743() -> (Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) {
  %552 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %553 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
  %554 = %552.0;
  %555 = %553.1;
  (%554, %555)
}

def @func_4968(%var_4903: Tensor[(147), float32], %var_4907: Tensor[(273, 3), bool], %var_4908: Tensor[(330), float64], %var_4928: Tensor[(832), float64], %var_4951: uint8) -> (Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), uint8], Tensor[(8, 4, 13), float64], Tensor[(330), float64], Tensor[(585), float32], Tensor[(273, 3), float64], Tensor[(16, 4, 13), bool], Tensor[(832), float64], Tensor[(819), int8], Tensor[(147), uint32], Tensor[(1080), uint16], Tensor[(16, 4, 1), float64]) {
  %556 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %557 = cast(meta[relay.Constant][45] /* ty=Tensor[(1080), uint32] */, dtype="uint32") /* ty=Tensor[(1080), uint32] */;
  %558 = reshape(%557, newshape=[12, 10, 9]) /* ty=Tensor[(12, 10, 9), uint32] */;
  %559 = cast(%var_4907, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %560 = cast(%var_4908, dtype="float64") /* ty=Tensor[(330), float64] */;
  %561 = cast(meta[relay.Constant][46] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %562 = cast(meta[relay.Constant][46] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %563 = reshape(%559, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %564 = reshape(%560, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %565 = reshape(%561, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %566 = reshape(%562, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %567 = @func_914(%563, %564, %565, %566) /* ty=(Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) */;
  %568 = cast(%var_4907, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %569 = cast(%var_4908, dtype="float64") /* ty=Tensor[(330), float64] */;
  %570 = cast(meta[relay.Constant][46] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %571 = cast(meta[relay.Constant][46] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %572 = reshape(%568, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %573 = reshape(%569, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %574 = reshape(%570, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %575 = reshape(%571, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %576 = @func_914(%572, %573, %574, %575) /* ty=(Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) */;
  %577 = %576.1;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(819), float64] */;
  %579 = shape_of(%var_4907, dtype="int32") /* ty=Tensor[(2), int32] */;
  %580 = cast(%var_4907, dtype="float64") /* ty=Tensor[(273, 3), float64] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %582 = cast(%var_4928, dtype="float64") /* ty=Tensor[(832), float64] */;
  %583 = cast(%var_4928, dtype="float64") /* ty=Tensor[(832), float64] */;
  %584 = reshape(%582, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float64] */;
  %585 = reshape(%583, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float64] */;
  %586 = @func_4018(%584, %585) /* ty=(Tensor[(16, 4, 13), float64], Tensor[(16, 4, 13), bool]) */;
  %587 = cast(%var_4951, dtype="uint8") /* ty=uint8 */;
  %588 = reshape(%587, newshape=[]) /* ty=uint8 */;
  %589 = @func_1314(%588) /* ty=(Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) */;
  %590 = %589.3;
  %591 = cast(%590, dtype="int8") /* ty=Tensor[(9, 7, 13), int8] */;
  %592 = shape_of(%577, dtype="int32") /* ty=Tensor[(1), int32] */;
  %593 = cast(%577, dtype="int8") /* ty=Tensor[(819), int8] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?), int8] */;
  %595 = cast(%var_4903, dtype="float32") /* ty=Tensor[(147), float32] */;
  %596 = reshape(%595, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %597 = @func_963(%596) /* ty=(Tensor[(7, 7, 3), float32],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="uint32") /* ty=Tensor[(7, 7, 3), uint32] */;
  %600 = shape_of(%var_4903, dtype="int32") /* ty=Tensor[(1), int32] */;
  %601 = cast(%var_4903, dtype="uint32") /* ty=Tensor[(147), uint32] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %603 = cast(meta[relay.Constant][45] /* ty=Tensor[(1080), uint32] */, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %604 = cast(%var_4951, dtype="uint16") /* ty=uint16 */;
  %605 = @func_4743() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) */;
  %606 = %556.0;
  %607 = @func_4407(%558) /* ty=Tensor[(12, 10, 9), uint8] */;
  %608 = %567.10;
  %609 = floor_mod(%580, %581) /* ty=Tensor[(273, 3), float64] */;
  %610 = %586.1;
  %611 = add(%593, %594) /* ty=Tensor[(819), int8] */;
  %612 = bitwise_xor(%601, %602) /* ty=Tensor[(147), uint32] */;
  %613 = add(%603, %604) /* ty=Tensor[(1080), uint16] */;
  %614 = %605.0;
  (%606, %607, %608, %var_4908, meta[relay.Constant][46] /* ty=Tensor[(585), float32] */, %609, %610, %var_4928, %611, %612, %613, %614)
}

def @func_4382(%var_4360: Tensor[(6, 13, 15), float32]) -> (Tensor[(6, 13, 15), float32], Tensor[(16, 4, ?), uint8]) {
  %615 = cast(%var_4360, dtype="float32") /* ty=Tensor[(6, 13, 15), float32] */;
  %616 = @func_4323() /* ty=(Tensor[(16, 4, ?), uint8], Tensor[(16, 4, ?), bool]) */;
  %617 = asinh(%615) /* ty=Tensor[(6, 13, 15), float32] */;
  %618 = %616.0;
  (%617, %618)
}

def @func_3704() -> Tensor[(720), int32] {
  %619 = @func_3063() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(16, 4, 1), float64], Tensor[(720), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(819), float64]) */;
  %619.2
}

def @func_2220(%var_2185: Tensor[(10, 1, 8), float64]) -> (Tensor[(8, 4, 13), float64], Tensor[(416), uint64], Tensor[(8, 4, 13), float64], Tensor[(10, ?, 8), uint64]) {
  %620 = cast(meta[relay.Constant][47] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %621 = cast(meta[relay.Constant][47] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %622 = reshape(%620, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %623 = reshape(%621, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %624 = @func_132(%622, %623) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %625 = cast(meta[relay.Constant][47] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %626 = %624.1;
  %627 = cast(%626, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %628 = reshape(%625, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %629 = reshape(%627, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %630 = @func_132(%628, %629) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %631 = cast(%var_2185, dtype="float64") /* ty=Tensor[(10, 1, 8), float64] */;
  %632 = asinh(%631) /* ty=Tensor[(10, 1, 8), float64] */;
  %633 = cast(%var_2185, dtype="uint64") /* ty=Tensor[(10, 1, 8), uint64] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="uint64") /* ty=Tensor[(10, 1, 8), uint64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %637 = %630.1;
  %638 = left_shift(%635, %636) /* ty=Tensor[(10, ?, 8), uint64] */;
  (%626, meta[relay.Constant][47] /* ty=Tensor[(416), uint64] */, %637, %638)
}

def @func_914(%var_857: Tensor[(819), bool], %var_872: Tensor[(330), float64], %var_896: Tensor[(13, 3, 15), float32], %var_907: Tensor[(13, 3, 15), float32]) -> (Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) {
  %639 = cast(%var_857, dtype="bool") /* ty=Tensor[(819), bool] */;
  %640 = cast(meta[relay.Constant][48] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %641 = reshape(%639, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
  %642 = reshape(%640, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %643 = @func_421(%641, %642) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
  %644 = cast(%var_872, dtype="float64") /* ty=Tensor[(330), float64] */;
  %645 = reshape(%644, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %646 = @func_80(%645) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %649 = reshape(%648, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %650 = @func_80(%649) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %651 = cast(%var_857, dtype="bool") /* ty=Tensor[(819), bool] */;
  %652 = cast(meta[relay.Constant][48] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %653 = reshape(%651, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
  %654 = reshape(%652, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %655 = @func_421(%653, %654) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
  %656 = cast(%var_872, dtype="float64") /* ty=Tensor[(330), float64] */;
  %657 = reshape(%656, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %658 = @func_80(%657) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %659 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  %660 = log(%659) /* ty=Tensor[(13, 3, 15), float32] */;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
  %662 = cast(%var_896, dtype="bool") /* ty=Tensor[(13, 3, 15), bool] */;
  %663 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%660, dtype="bool") /* ty=Tensor[(13, 3, 15), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = %655.5;
  %667 = cast(%666, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %668 = cast(meta[relay.Constant][48] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %669 = reshape(%667, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %670 = reshape(%668, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %671 = @func_132(%669, %670) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %672 = cast(%var_907, dtype="int8") /* ty=Tensor[(13, 3, 15), int8] */;
  %673 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%660, dtype="int8") /* ty=Tensor[(13, 3, 15), int8] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %676 = %643.3;
  %677 = %650.0;
  %678 = %658.0;
  %679 = sigmoid(%661) /* ty=Tensor[(13, 3, 15), float64] */;
  %680 = greater_equal(%664, %665) /* ty=Tensor[(13, 3, 15), bool] */;
  %681 = %671.1;
  %682 = bitwise_xor(%674, %675) /* ty=Tensor[(13, 3, 15), int8] */;
  (%676, %var_857, meta[relay.Constant][48] /* ty=Tensor[(416), uint64] */, %647, %var_872, %677, %666, %678, %679, %680, %681, %682)
}

def @func_3063() -> (Tensor[(16, 4, 1), float64], Tensor[(16, 4, 1), float64], Tensor[(720), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(819), float64]) {
  %683 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %684 = cast(meta[relay.Constant][50] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %685 = cast(meta[relay.Constant][51] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %686 = cast(meta[relay.Constant][52] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %687 = cast(meta[relay.Constant][52] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %688 = reshape(%684, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %689 = reshape(%685, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %690 = reshape(%686, newshape=[720]) /* ty=Tensor[(720), int32] */;
  %691 = reshape(%687, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %692 = @func_2870(%688, %689, %690, %691) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) */;
  %693 = cast(meta[relay.Constant][50] /* ty=Tensor[(819), bool] */, dtype="float64") /* ty=Tensor[(819), float64] */;
  %694 = @func_2889() /* ty=Tensor[(16, 4, 1), float64] */;
  %695 = %683.0;
  %696 = %692.3;
  %697 = cos(%693) /* ty=Tensor[(819), float64] */;
  (%694, %695, %696, meta[relay.Constant][51] /* ty=Tensor[(32), float64] */, meta[relay.Constant][52] /* ty=Tensor[(720), int32] */, %697)
}

def @func_2889() -> Tensor[(16, 4, 1), float64] {
  @func_2762() /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_4628(%var_4590: Tensor[(12, 6, 4), bool], %var_4624: Tensor[(360), float64]) -> (Tensor[(12, 6, 4), float64], Tensor[(12, 6, 4), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64]) {
  %698 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 6, 4), bool] */, dtype="float64") /* ty=Tensor[(12, 6, 4), float64] */;
  %699 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(12, 6, 4), bool] */;
  %700 = shape_of(%var_4590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_4590, dtype="bool") /* ty=Tensor[(12, 6, 4), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %703 = logical_and(%701, %702) /* ty=Tensor[(12, 6, 4), bool] */;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
  %705 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(12, 6, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 6, 4), bool] */, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %708 = floor_divide(%706, %707) /* ty=Tensor[(12, 6, 4), float32] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(12, 6, 4), float64] */;
  %710 = cast(%var_4624, dtype="float64") /* ty=Tensor[(360), float64] */;
  %711 = cast(%var_4624, dtype="float64") /* ty=Tensor[(360), float64] */;
  %712 = reshape(%710, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %713 = reshape(%711, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %714 = @func_2280(%712, %713) /* ty=(Tensor[(15, 12, 2), int64],) */;
  %715 = atanh(%698) /* ty=Tensor[(12, 6, 4), float64] */;
  %716 = acosh(%709) /* ty=Tensor[(12, 6, 4), float64] */;
  %717 = %714.0;
  (%715, %716, %717, %var_4624)
}

def @func_5408(%var_5357: Tensor[(14, 4, 2), float32], %var_5382: Tensor[(14, 4, 2), float32], %var_5402: Tensor[(12, 10, 9), float64]) -> (Tensor[(14, 4, 2), int8], Tensor[(12, 10, 9), int64]) {
  %718 = cast(%var_5357, dtype="float32") /* ty=Tensor[(14, 4, 2), float32] */;
  %719 = tan(%718) /* ty=Tensor[(14, 4, 2), float32] */;
  %720 = cast(%var_5382, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %724 = @func_4067() /* ty=(Tensor[(12, 10, 9), float64],) */;
  %725 = %724.0;
  %726 = cast(%var_5402, dtype="int64") /* ty=Tensor[(12, 10, 9), int64] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="int64") /* ty=Tensor[(12, 10, 9), int64] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %730 = add(%722, %723) /* ty=Tensor[(14, 4, 2), int8] */;
  %731 = bitwise_and(%728, %729) /* ty=Tensor[(12, 10, 9), int64] */;
  (%730, %731)
}

def @func_3403(%var_3393: Tensor[(6, 2, 4), float64]) -> (Tensor[(6, 2, 4), float64], Tensor[(6, 2, 4), float32]) {
  %732 = cast(%var_3393, dtype="float64") /* ty=Tensor[(6, 2, 4), float64] */;
  %733 = cast(%var_3393, dtype="float32") /* ty=Tensor[(6, 2, 4), float32] */;
  %734 = rsqrt(%732) /* ty=Tensor[(6, 2, 4), float64] */;
  %735 = log(%733) /* ty=Tensor[(6, 2, 4), float32] */;
  (%734, %735)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2788() -> (Tensor[(16, 4, 1), float64], uint8, Tensor[(12, 10, 9), uint32]) {
  @func_2786() /* ty=(Tensor[(16, 4, 1), float64], uint8, Tensor[(12, 10, 9), uint32]) */
}

def @func_2889() -> Tensor[(16, 4, 1), float64] {
  @func_2762() /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_3244(%var_3241: Tensor[(10, 4, 8), int8], %var_3242: Tensor[(10, 4, 8), int8], %var_3243: Tensor[(147), float32]) -> (Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), int16], Tensor[(7, 7, 3), float32], Tensor[(147), float32]) {
  %36 = fn (%var_3193: Tensor[(10, 4, 8), int8], %var_3231: Tensor[(10, 4, 8), int8], %var_3238: Tensor[(147), float32]) -> (Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), int16], Tensor[(7, 7, 3), float32], Tensor[(147), float32]) {
    %0 = cast(%var_3193, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
    %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 8), int8] */, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %4 = bitwise_and(%2, %3) /* ty=Tensor[(10, 4, 8), int8] */;
    %5 = cast(%4, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
    %6 = shape_of(%var_3193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %7 = cast(%var_3193, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %9 = cast(%4, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
    %10 = shape_of(%var_3193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%var_3193, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %13 = bitwise_or(%11, %12) /* ty=Tensor[(10, 4, 8), int8] */;
    %14 = cast(%var_3193, dtype="float64") /* ty=Tensor[(10, 4, 8), float64] */;
    %15 = erf(%14) /* ty=Tensor[(10, 4, 8), float64] */;
    %16 = cast(%15, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
    %17 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%13, dtype="int8") /* ty=Tensor[(10, 4, 8), int8] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %20 = right_shift(%18, %19) /* ty=Tensor[(10, 4, 8), int8] */;
    %21 = cast(%20, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
    %22 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%13, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %25 = cast(%var_3231, dtype="int16") /* ty=Tensor[(10, 4, 8), int16] */;
    %26 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%20, dtype="int16") /* ty=Tensor[(10, 4, 8), int16] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %29 = cast(%var_3238, dtype="float32") /* ty=Tensor[(147), float32] */;
    %30 = reshape(%29, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
    %31 = @func_963(%30) /* ty=(Tensor[(7, 7, 3), float32],) */;
    %32 = less_equal(%7, %8) /* ty=Tensor[(10, 4, 8), bool] */;
    %33 = equal(%23, %24) /* ty=Tensor[(10, 4, 8), bool] */;
    %34 = logical_xor(%27, %28) /* ty=Tensor[(10, 4, 8), int16] */;
    %35 = %31.0;
    (%32, %33, %34, %35, %var_3238)
  };
  %36(%var_3241, %var_3242, %var_3243) /* ty=(Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), bool], Tensor[(10, 4, 8), int16], Tensor[(7, 7, 3), float32], Tensor[(147), float32]) */
}

def @func_4975(%var_4970: Tensor[(147), float32], %var_4971: Tensor[(273, 3), bool], %var_4972: Tensor[(330), float64], %var_4973: Tensor[(832), float64], %var_4974: uint8) -> (Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), uint8], Tensor[(8, 4, 13), float64], Tensor[(330), float64], Tensor[(585), float32], Tensor[(273, 3), float64], Tensor[(16, 4, 13), bool], Tensor[(832), float64], Tensor[(819), int8], Tensor[(147), uint32], Tensor[(1080), uint16], Tensor[(16, 4, 1), float64]) {
  @func_4968(%var_4970, %var_4971, %var_4972, %var_4973, %var_4974) /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), uint8], Tensor[(8, 4, 13), float64], Tensor[(330), float64], Tensor[(585), float32], Tensor[(273, 3), float64], Tensor[(16, 4, 13), bool], Tensor[(832), float64], Tensor[(819), int8], Tensor[(147), uint32], Tensor[(1080), uint16], Tensor[(16, 4, 1), float64]) */
}

def @func_3776() -> (Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) {
  %47 = fn () -> (Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) {
    %37 = @func_3637() /* ty=Tensor[(12, 10, 9), uint32] */;
    %38 = cast(%37, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
    %39 = log10(%38) /* ty=Tensor[(12, 10, 9), float32] */;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
    %41 = cast(%37, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
    %42 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%39, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %45 = sigmoid(%40) /* ty=Tensor[(12, 10, 9), float64] */;
    %46 = power(%43, %44) /* ty=Tensor[(12, 10, 9), float64] */;
    (%45, %46)
  };
  %47() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */
}

def @func_4968(%var_4903: Tensor[(147), float32], %var_4907: Tensor[(273, 3), bool], %var_4908: Tensor[(330), float64], %var_4928: Tensor[(832), float64], %var_4951: uint8) -> (Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), uint8], Tensor[(8, 4, 13), float64], Tensor[(330), float64], Tensor[(585), float32], Tensor[(273, 3), float64], Tensor[(16, 4, 13), bool], Tensor[(832), float64], Tensor[(819), int8], Tensor[(147), uint32], Tensor[(1080), uint16], Tensor[(16, 4, 1), float64]) {
  %48 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(1080), uint32] */, dtype="uint32") /* ty=Tensor[(1080), uint32] */;
  %50 = reshape(%49, newshape=[12, 10, 9]) /* ty=Tensor[(12, 10, 9), uint32] */;
  %51 = cast(%var_4907, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %52 = cast(%var_4908, dtype="float64") /* ty=Tensor[(330), float64] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %55 = reshape(%51, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %56 = reshape(%52, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %57 = reshape(%53, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %58 = reshape(%54, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %59 = @func_914(%55, %56, %57, %58) /* ty=(Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) */;
  %60 = cast(%var_4907, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %61 = cast(%var_4908, dtype="float64") /* ty=Tensor[(330), float64] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %64 = reshape(%60, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %65 = reshape(%61, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %66 = reshape(%62, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %67 = reshape(%63, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %68 = @func_914(%64, %65, %66, %67) /* ty=(Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) */;
  %69 = %68.1;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(819), float64] */;
  %71 = shape_of(%var_4907, dtype="int32") /* ty=Tensor[(2), int32] */;
  %72 = cast(%var_4907, dtype="float64") /* ty=Tensor[(273, 3), float64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %74 = cast(%var_4928, dtype="float64") /* ty=Tensor[(832), float64] */;
  %75 = cast(%var_4928, dtype="float64") /* ty=Tensor[(832), float64] */;
  %76 = reshape(%74, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float64] */;
  %77 = reshape(%75, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float64] */;
  %78 = @func_4018(%76, %77) /* ty=(Tensor[(16, 4, 13), float64], Tensor[(16, 4, 13), bool]) */;
  %79 = cast(%var_4951, dtype="uint8") /* ty=uint8 */;
  %80 = reshape(%79, newshape=[]) /* ty=uint8 */;
  %81 = @func_1314(%80) /* ty=(Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) */;
  %82 = %81.3;
  %83 = cast(%82, dtype="int8") /* ty=Tensor[(9, 7, 13), int8] */;
  %84 = shape_of(%69, dtype="int32") /* ty=Tensor[(1), int32] */;
  %85 = cast(%69, dtype="int8") /* ty=Tensor[(819), int8] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?), int8] */;
  %87 = cast(%var_4903, dtype="float32") /* ty=Tensor[(147), float32] */;
  %88 = reshape(%87, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %89 = @func_963(%88) /* ty=(Tensor[(7, 7, 3), float32],) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="uint32") /* ty=Tensor[(7, 7, 3), uint32] */;
  %92 = shape_of(%var_4903, dtype="int32") /* ty=Tensor[(1), int32] */;
  %93 = cast(%var_4903, dtype="uint32") /* ty=Tensor[(147), uint32] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %95 = cast(meta[relay.Constant][1] /* ty=Tensor[(1080), uint32] */, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %96 = cast(%var_4951, dtype="uint16") /* ty=uint16 */;
  %97 = @func_4743() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) */;
  %98 = %48.0;
  %99 = @func_4407(%50) /* ty=Tensor[(12, 10, 9), uint8] */;
  %100 = %59.10;
  %101 = floor_mod(%72, %73) /* ty=Tensor[(273, 3), float64] */;
  %102 = %78.1;
  %103 = add(%85, %86) /* ty=Tensor[(819), int8] */;
  %104 = bitwise_xor(%93, %94) /* ty=Tensor[(147), uint32] */;
  %105 = add(%95, %96) /* ty=Tensor[(1080), uint16] */;
  %106 = %97.0;
  (%98, %99, %100, %var_4908, meta[relay.Constant][2] /* ty=Tensor[(585), float32] */, %101, %102, %var_4928, %103, %104, %105, %106)
}

def @func_132(%var_110: Tensor[(8, 4, 13), uint64], %var_111: Tensor[(8, 4, 13), uint64]) -> (Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) {
  %107 = cast(%var_111, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %108 = shape_of(%var_110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%var_110, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %111 = cast(%var_111, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
  %112 = greater_equal(%109, %110) /* ty=Tensor[(8, 4, 13), bool] */;
  %113 = sigmoid(%111) /* ty=Tensor[(8, 4, 13), float64] */;
  (%112, %113)
}

def @func_2651(%var_2633: Tensor[(4, 1, 8), float64], %var_2638: Tensor[(360, 2), int32]) -> (Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) {
  %114 = cast(%var_2633, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
  %115 = cast(meta[relay.Constant][3] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %116 = cast(%var_2638, dtype="int32") /* ty=Tensor[(360, 2), int32] */;
  %117 = reshape(%115, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %118 = reshape(%116, newshape=[15, 8, 6]) /* ty=Tensor[(15, 8, 6), int32] */;
  %119 = @func_1185(%117, %118) /* ty=(Tensor[(15, 8, 6), bool],) */;
  %120 = asinh(%114) /* ty=Tensor[(4, 1, 8), float64] */;
  %121 = %119.0;
  (%120, %121, meta[relay.Constant][3] /* ty=Tensor[(90), int32] */, %var_2638)
}

def @func_4478(%var_4474: Tensor[(9, 3, 6), float32], %var_4475: Tensor[(9, 3, 6), float32], %var_4476: Tensor[(13, 3), uint64], %var_4477: Tensor[(8, 52), uint64]) -> (Tensor[(9, 3, 6), int32], Tensor[(9, 3, 6), float32], Tensor[(8, 4, 13), bool], Tensor[(13, 3), uint64], Tensor[(78), uint64], Tensor[(1, 819), bool], Tensor[(8, 52), uint64]) {
  %146 = fn (%var_4442: Tensor[(9, 3, 6), float32], %var_4443: Tensor[(9, 3, 6), float32], %var_4464: Tensor[(13, 3), uint64], %var_4467: Tensor[(8, 52), uint64]) -> (Tensor[(9, 3, 6), int32], Tensor[(9, 3, 6), float32], Tensor[(8, 4, 13), bool], Tensor[(13, 3), uint64], Tensor[(78), uint64], Tensor[(1, 819), bool], Tensor[(8, 52), uint64]) {
    %122 = cast(%var_4443, dtype="int32") /* ty=Tensor[(9, 3, 6), int32] */;
    %123 = shape_of(%var_4442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%var_4442, dtype="int32") /* ty=Tensor[(9, 3, 6), int32] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %126 = cast(%var_4443, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
    %127 = shape_of(%var_4442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %128 = cast(%var_4442, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
    %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %130 = floor_mod(%128, %129) /* ty=Tensor[(9, 3, 6), float32] */;
    %131 = cast(%130, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
    %132 = sin(%131) /* ty=Tensor[(9, 3, 6), float32] */;
    %133 = cast(%132, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
    %134 = cast(%var_4464, dtype="uint64") /* ty=Tensor[(13, 3), uint64] */;
    %135 = cast(meta[relay.Constant][4] /* ty=Tensor[(78), uint64] */, dtype="uint64") /* ty=Tensor[(78), uint64] */;
    %136 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 819), bool] */, dtype="bool") /* ty=Tensor[(1, 819), bool] */;
    %137 = cast(%var_4467, dtype="uint64") /* ty=Tensor[(8, 52), uint64] */;
    %138 = reshape(%134, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), uint64] */;
    %139 = reshape(%135, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), uint64] */;
    %140 = reshape(%136, newshape=[819]) /* ty=Tensor[(819), bool] */;
    %141 = reshape(%137, newshape=[8, 52]) /* ty=Tensor[(8, 52), uint64] */;
    %142 = @func_2961(%138, %139, %140, %141) /* ty=(Tensor[(3, 14, 13), uint64], Tensor[(3, 2, 13), uint16], Tensor[(8, 4, 13), bool], Tensor[(819), bool], Tensor[(8, 52), uint64]) */;
    %143 = maximum(%124, %125) /* ty=Tensor[(9, 3, 6), int32] */;
    %144 = sigmoid(%133) /* ty=Tensor[(9, 3, 6), float32] */;
    %145 = %142.2;
    (%143, %144, %145, %var_4464, meta[relay.Constant][4] /* ty=Tensor[(78), uint64] */, meta[relay.Constant][5] /* ty=Tensor[(1, 819), bool] */, %var_4467)
  };
  %146(%var_4474, %var_4475, %var_4476, %var_4477) /* ty=(Tensor[(9, 3, 6), int32], Tensor[(9, 3, 6), float32], Tensor[(8, 4, 13), bool], Tensor[(13, 3), uint64], Tensor[(78), uint64], Tensor[(1, 819), bool], Tensor[(8, 52), uint64]) */
}

def @func_4323() -> (Tensor[(16, 4, ?), uint8], Tensor[(16, 4, ?), bool]) {
  %147 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %148 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 4, 1), float64] */, dtype="uint8") /* ty=Tensor[(16, 4, 1), uint8] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="uint8") /* ty=Tensor[(16, 4, 1), uint8] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %152 = cast(%147, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %153 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(16, 4, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 4, 1), float64] */, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %156 = bitwise_or(%150, %151) /* ty=Tensor[(16, 4, ?), uint8] */;
  %157 = greater_equal(%154, %155) /* ty=Tensor[(16, 4, ?), bool] */;
  (%156, %157)
}

def @func_5412(%var_5409: Tensor[(14, 4, 2), float32], %var_5410: Tensor[(14, 4, 2), float32], %var_5411: Tensor[(12, 10, 9), float64]) -> (Tensor[(14, 4, 2), int8], Tensor[(12, 10, 9), int64]) {
  %172 = fn (%var_5357: Tensor[(14, 4, 2), float32], %var_5382: Tensor[(14, 4, 2), float32], %var_5402: Tensor[(12, 10, 9), float64]) -> (Tensor[(14, 4, 2), int8], Tensor[(12, 10, 9), int64]) {
    %158 = cast(%var_5357, dtype="float32") /* ty=Tensor[(14, 4, 2), float32] */;
    %159 = tan(%158) /* ty=Tensor[(14, 4, 2), float32] */;
    %160 = cast(%var_5382, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
    %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(%159, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %164 = @func_4067() /* ty=(Tensor[(12, 10, 9), float64],) */;
    %165 = %164.0;
    %166 = cast(%var_5402, dtype="int64") /* ty=Tensor[(12, 10, 9), int64] */;
    %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %168 = cast(%165, dtype="int64") /* ty=Tensor[(12, 10, 9), int64] */;
    %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %170 = add(%162, %163) /* ty=Tensor[(14, 4, 2), int8] */;
    %171 = bitwise_and(%168, %169) /* ty=Tensor[(12, 10, 9), int64] */;
    (%170, %171)
  };
  %172(%var_5409, %var_5410, %var_5411) /* ty=(Tensor[(14, 4, 2), int8], Tensor[(12, 10, 9), int64]) */
}

def @func_3629(%var_3627: Tensor[(330), float64], %var_3628: Tensor[(720), float32]) -> (Tensor[(16, 4, 1), float64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(720), float32]) {
  @func_3625(%var_3627, %var_3628) /* ty=(Tensor[(16, 4, 1), float64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(720), float32]) */
}

def @func_1317(%var_1315: uint8) -> (Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) {
  @func_1314(%var_1315) /* ty=(Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) */
}

def @func_4385(%var_4383: Tensor[(6, 13, 15), float32]) -> (Tensor[(6, 13, 15), float32], Tensor[(16, 4, ?), uint8]) {
  @func_4382(%var_4383) /* ty=(Tensor[(6, 13, 15), float32], Tensor[(16, 4, ?), uint8]) */
}

def @func_3184(%var_3182: Tensor[(32), float64], %var_3183: Tensor[(720), int32]) -> (Tensor[(15, 8, 16), int32], Tensor[(90), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(15, 8, 16), float64]) {
  %186 = fn (%var_3167: Tensor[(32), float64], %var_3168: Tensor[(720), int32]) -> (Tensor[(15, 8, 16), int32], Tensor[(90), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(15, 8, 16), float64]) {
    %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(15, 8, 16), int32] */;
    %174 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(15, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %175 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(15, 8, 16), int32] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %177 = cast(%var_3167, dtype="float64") /* ty=Tensor[(32), float64] */;
    %178 = cast(%var_3168, dtype="int32") /* ty=Tensor[(720), int32] */;
    %179 = reshape(%177, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
    %180 = reshape(%178, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
    %181 = @func_2651(%179, %180) /* ty=(Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) */;
    %182 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 8, 16), int32] */, dtype="float64") /* ty=Tensor[(15, 8, 16), float64] */;
    %183 = maximum(%175, %176) /* ty=Tensor[(15, 8, 16), int32] */;
    %184 = %181.2;
    %185 = acosh(%182) /* ty=Tensor[(15, 8, 16), float64] */;
    (%183, %184, %var_3167, %var_3168, %185)
  };
  %186(%var_3182, %var_3183) /* ty=(Tensor[(15, 8, 16), int32], Tensor[(90), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(15, 8, 16), float64]) */
}

def @func_4847() -> (Tensor[(12, 10, 9), float64],) {
  @func_4845() /* ty=(Tensor[(12, 10, 9), float64],) */
}

def @func_3637() -> Tensor[(12, 10, 9), uint32] {
  @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */
}

def @func_1048(%var_1047: Tensor[(12, 11, 2), float32]) -> (Tensor[(12, 11, 2), float32],) {
  %189 = fn (%var_1041: Tensor[(12, 11, 2), float32]) -> (Tensor[(12, 11, 2), float32],) {
    %187 = cast(%var_1041, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
    %188 = cos(%187) /* ty=Tensor[(12, 11, 2), float32] */;
    (%188,)
  };
  %189(%var_1047) /* ty=(Tensor[(12, 11, 2), float32],) */
}

def @func_5573() -> Tensor[(16, 4, 8), bool] {
  %194 = fn () -> Tensor[(16, 4, 8), bool] {
    %190 = @func_4036() /* ty=(Tensor[(16, 4, 1), float64],) */;
    %191 = %190.0;
    %192 = cast(%191, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
    %193 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 4, 8), float64] */, dtype="bool") /* ty=Tensor[(16, 4, 8), bool] */;
    equal(%192, %193) /* ty=Tensor[(16, 4, 8), bool] */
  };
  %194() /* ty=Tensor[(16, 4, 8), bool] */
}

def @func_5509() -> Tensor[(12, 10, 9), float64] {
  %195 = @func_4743() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) */;
  %195.1
}

def @func_2870(%var_2816: Tensor[(819), bool], %var_2839: Tensor[(16, 2), float64], %var_2840: Tensor[(720), int32], %var_2843: Tensor[(360, 2), int32]) -> (Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) {
  %196 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %197 = cast(%var_2816, dtype="bool") /* ty=Tensor[(819), bool] */;
  %198 = reshape(%196, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %199 = reshape(%197, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %200 = @func_1001(%198, %199) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(7, 12, 2), float64], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(16, 26), uint64]) */;
  %201 = cast(%var_2839, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  %202 = cast(%var_2840, dtype="int32") /* ty=Tensor[(720), int32] */;
  %203 = reshape(%201, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
  %204 = reshape(%202, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %205 = @func_2651(%203, %204) /* ty=(Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) */;
  %206 = %205.3;
  %207 = cast(%var_2843, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(2), int32] */;
  %209 = cast(%206, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %211 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %212 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float64] */, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %213 = cast(%211, dtype="uint32") /* ty=Tensor[(16, 4, 1), uint32] */;
  %214 = bitwise_xor(%212, %213) /* ty=Tensor[(16, 4, 168), uint32] */;
  %215 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float64] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %216 = cast(%211, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %217 = less_equal(%215, %216) /* ty=Tensor[(16, 4, 168), bool] */;
  %218 = cast(%217, dtype="int8") /* ty=Tensor[(16, 4, 168), int8] */;
  %219 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%214, dtype="int8") /* ty=Tensor[(16, 4, 168), int8] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %222 = %200.0;
  %223 = minimum(%209, %210) /* ty=Tensor[(360, 2), float64] */;
  %224 = right_shift(%220, %221) /* ty=Tensor[(16, 4, 168), int8] */;
  (%222, %var_2816, %var_2839, %var_2840, %223, %224)
}

def @func_919(%var_915: Tensor[(819), bool], %var_916: Tensor[(330), float64], %var_917: Tensor[(13, 3, 15), float32], %var_918: Tensor[(13, 3, 15), float32]) -> (Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) {
  %269 = fn (%var_857: Tensor[(819), bool], %var_872: Tensor[(330), float64], %var_896: Tensor[(13, 3, 15), float32], %var_907: Tensor[(13, 3, 15), float32]) -> (Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) {
    %225 = cast(%var_857, dtype="bool") /* ty=Tensor[(819), bool] */;
    %226 = cast(meta[relay.Constant][11] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %227 = reshape(%225, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
    %228 = reshape(%226, newshape=[416]) /* ty=Tensor[(416), uint64] */;
    %229 = @func_421(%227, %228) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
    %230 = cast(%var_872, dtype="float64") /* ty=Tensor[(330), float64] */;
    %231 = reshape(%230, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
    %232 = @func_80(%231) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
    %233 = %232.0;
    %234 = cast(%233, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
    %235 = reshape(%234, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
    %236 = @func_80(%235) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
    %237 = cast(%var_857, dtype="bool") /* ty=Tensor[(819), bool] */;
    %238 = cast(meta[relay.Constant][11] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %239 = reshape(%237, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
    %240 = reshape(%238, newshape=[416]) /* ty=Tensor[(416), uint64] */;
    %241 = @func_421(%239, %240) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
    %242 = cast(%var_872, dtype="float64") /* ty=Tensor[(330), float64] */;
    %243 = reshape(%242, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
    %244 = @func_80(%243) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
    %245 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
    %246 = log(%245) /* ty=Tensor[(13, 3, 15), float32] */;
    %247 = cast(%246, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
    %248 = cast(%var_896, dtype="bool") /* ty=Tensor[(13, 3, 15), bool] */;
    %249 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(%246, dtype="bool") /* ty=Tensor[(13, 3, 15), bool] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %252 = %241.5;
    %253 = cast(%252, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
    %254 = cast(meta[relay.Constant][11] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %255 = reshape(%253, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
    %256 = reshape(%254, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
    %257 = @func_132(%255, %256) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
    %258 = cast(%var_907, dtype="int8") /* ty=Tensor[(13, 3, 15), int8] */;
    %259 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %260 = cast(%246, dtype="int8") /* ty=Tensor[(13, 3, 15), int8] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %262 = %229.3;
    %263 = %236.0;
    %264 = %244.0;
    %265 = sigmoid(%247) /* ty=Tensor[(13, 3, 15), float64] */;
    %266 = greater_equal(%250, %251) /* ty=Tensor[(13, 3, 15), bool] */;
    %267 = %257.1;
    %268 = bitwise_xor(%260, %261) /* ty=Tensor[(13, 3, 15), int8] */;
    (%262, %var_857, meta[relay.Constant][11] /* ty=Tensor[(416), uint64] */, %233, %var_872, %263, %252, %264, %265, %266, %267, %268)
  };
  %269(%var_915, %var_916, %var_917, %var_918) /* ty=(Tensor[(9, 7, 13), bool], Tensor[(819), bool], Tensor[(416), uint64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(5, 6, 11), float64], Tensor[(8, 4, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(13, 3, 15), float64], Tensor[(13, 3, 15), bool], Tensor[(8, 4, 13), float64], Tensor[(13, 3, 15), int8]) */
}

def @func_4213(%var_4210: Tensor[(16, 4, 12), float64], %var_4211: Tensor[(640), float64], %var_4212: Tensor[(90), int32]) -> (Tensor[(16, 4, 12), bool], Tensor[(16, 4, 12), float32], Tensor[(16, 4, 10), bool], Tensor[(640), float64], Tensor[(90), int32]) {
  @func_4208(%var_4210, %var_4211, %var_4212) /* ty=(Tensor[(16, 4, 12), bool], Tensor[(16, 4, 12), float32], Tensor[(16, 4, 10), bool], Tensor[(640), float64], Tensor[(90), int32]) */
}

def @func_3706() -> Tensor[(720), int32] {
  @func_3704() /* ty=Tensor[(720), int32] */
}

def @func_3403(%var_3393: Tensor[(6, 2, 4), float64]) -> (Tensor[(6, 2, 4), float64], Tensor[(6, 2, 4), float32]) {
  %270 = cast(%var_3393, dtype="float64") /* ty=Tensor[(6, 2, 4), float64] */;
  %271 = cast(%var_3393, dtype="float32") /* ty=Tensor[(6, 2, 4), float32] */;
  %272 = rsqrt(%270) /* ty=Tensor[(6, 2, 4), float64] */;
  %273 = log(%271) /* ty=Tensor[(6, 2, 4), float32] */;
  (%272, %273)
}

def @func_2876(%var_2872: Tensor[(819), bool], %var_2873: Tensor[(16, 2), float64], %var_2874: Tensor[(720), int32], %var_2875: Tensor[(360, 2), int32]) -> (Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) {
  @func_2870(%var_2872, %var_2873, %var_2874, %var_2875) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) */
}

def @func_2786() -> (Tensor[(16, 4, 1), float64], uint8, Tensor[(12, 10, 9), uint32]) {
  %274 = cast(meta[relay.Constant][13] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %275 = reshape(%274, newshape=[]) /* ty=uint8 */;
  %276 = @func_1314(%275) /* ty=(Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) */;
  %277 = %276.0;
  %278 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 10, 9), uint8] */, dtype="uint32") /* ty=Tensor[(12, 10, 9), uint32] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="uint32") /* ty=Tensor[(12, 10, 9), uint32] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %282 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %283 = bitwise_or(%280, %281) /* ty=Tensor[(12, 10, 9), uint32] */;
  (%282, meta[relay.Constant][13] /* ty=uint8 */, %283)
}

def @func_136(%var_134: Tensor[(8, 4, 13), uint64], %var_135: Tensor[(8, 4, 13), uint64]) -> (Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) {
  @func_132(%var_134, %var_135) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */
}

def @func_3355(%var_3290: Tensor[(16, 4, 10), float64], %var_3311: Tensor[(45, 2), int32]) -> (Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) {
  %284 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %287 = cast(%var_3290, dtype="bool") /* ty=Tensor[(16, 4, 10), bool] */;
  %288 = cast(meta[relay.Constant][15] /* ty=Tensor[(45, 2), int32] */, dtype="int32") /* ty=Tensor[(45, 2), int32] */;
  %289 = cast(meta[relay.Constant][16] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %290 = reshape(%288, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), int32] */;
  %291 = reshape(%289, newshape=[15, 8, 6]) /* ty=Tensor[(15, 8, 6), int32] */;
  %292 = @func_1185(%290, %291) /* ty=(Tensor[(15, 8, 6), bool],) */;
  %293 = cast(%var_3311, dtype="uint64") /* ty=Tensor[(45, 2), uint64] */;
  %294 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(45, 2), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %295 = cast(meta[relay.Constant][15] /* ty=Tensor[(45, 2), int32] */, dtype="uint64") /* ty=Tensor[(45, 2), uint64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %297 = right_shift(%295, %296) /* ty=Tensor[(45, 2), uint64] */;
  %298 = cast(%var_3311, dtype="int16") /* ty=Tensor[(45, 2), int16] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(2), int32] */;
  %300 = cast(%297, dtype="int16") /* ty=Tensor[(45, 2), int16] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %302 = cast(meta[relay.Constant][16] /* ty=Tensor[(720), int32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %303 = cast(meta[relay.Constant][17] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %304 = reshape(%302, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %305 = reshape(%303, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %306 = @func_3124(%304, %305) /* ty=(Tensor[(16, 4, 1), float64], Tensor[(264), float32], Tensor[(819), bool], Tensor[(32), float64], Tensor[(4, 180), uint64]) */;
  %307 = equal(%286, %287) /* ty=Tensor[(16, 4, 10), bool] */;
  %308 = %292.0;
  %309 = minimum(%300, %301) /* ty=Tensor[(45, 2), int16] */;
  %310 = %306.2;
  (%307, %308, meta[relay.Constant][16] /* ty=Tensor[(720), int32] */, %309, %310, meta[relay.Constant][17] /* ty=Tensor[(819), bool] */)
}

def @func_2655(%var_2653: Tensor[(4, 1, 8), float64], %var_2654: Tensor[(360, 2), int32]) -> (Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) {
  @func_2651(%var_2653, %var_2654) /* ty=(Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) */
}

def @func_80(%var_62: Tensor[(5, 6, 11), float64]) -> (Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) {
  %311 = cast(%var_62, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %312 = cos(%311) /* ty=Tensor[(5, 6, 11), float64] */;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %314 = cast(%var_62, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
  %315 = cosh(%314) /* ty=Tensor[(5, 6, 11), float32] */;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(5, 6, 11), float32] */;
  %317 = atan(%313) /* ty=Tensor[(5, 6, 11), float64] */;
  %318 = erf(%316) /* ty=Tensor[(5, 6, 11), float32] */;
  (%317, %318)
}

def @func_4743() -> (Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) {
  %319 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %320 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
  %321 = %319.0;
  %322 = %320.1;
  (%321, %322)
}

def @func_3639() -> Tensor[(12, 10, 9), uint32] {
  @func_3637() /* ty=Tensor[(12, 10, 9), uint32] */
}

def @func_3406(%var_3404: Tensor[(6, 2, 4), float64]) -> (Tensor[(6, 2, 4), float64], Tensor[(6, 2, 4), float32]) {
  @func_3403(%var_3404) /* ty=(Tensor[(6, 2, 4), float64], Tensor[(6, 2, 4), float32]) */
}

def @func_2891() -> Tensor[(16, 4, 1), float64] {
  @func_2889() /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_3063() -> (Tensor[(16, 4, 1), float64], Tensor[(16, 4, 1), float64], Tensor[(720), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(819), float64]) {
  %323 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %324 = cast(meta[relay.Constant][18] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %326 = cast(meta[relay.Constant][20] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %327 = cast(meta[relay.Constant][20] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
  %328 = reshape(%324, newshape=[819]) /* ty=Tensor[(819), bool] */;
  %329 = reshape(%325, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %330 = reshape(%326, newshape=[720]) /* ty=Tensor[(720), int32] */;
  %331 = reshape(%327, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
  %332 = @func_2870(%328, %329, %330, %331) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) */;
  %333 = cast(meta[relay.Constant][18] /* ty=Tensor[(819), bool] */, dtype="float64") /* ty=Tensor[(819), float64] */;
  %334 = @func_2889() /* ty=Tensor[(16, 4, 1), float64] */;
  %335 = %323.0;
  %336 = %332.3;
  %337 = cos(%333) /* ty=Tensor[(819), float64] */;
  (%334, %335, %336, meta[relay.Constant][19] /* ty=Tensor[(32), float64] */, meta[relay.Constant][20] /* ty=Tensor[(720), int32] */, %337)
}

def @func_5003(%var_4996: Tensor[(147), float32], %var_4999: Tensor[(832), float64]) -> (Tensor[(12, 10, 9), uint32], Tensor[(16, 4, 1), float64], Tensor[(147), float32], Tensor[(273, 3), bool], Tensor[(165, 2), float64], Tensor[(832), float64], uint8) {
  %338 = cast(%var_4996, dtype="float32") /* ty=Tensor[(147), float32] */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(273, 3), bool] */, dtype="bool") /* ty=Tensor[(273, 3), bool] */;
  %340 = cast(meta[relay.Constant][22] /* ty=Tensor[(165, 2), float64] */, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
  %341 = cast(%var_4999, dtype="float64") /* ty=Tensor[(832), float64] */;
  %342 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %343 = reshape(%338, newshape=[147]) /* ty=Tensor[(147), float32] */;
  %344 = reshape(%339, newshape=[273, 3]) /* ty=Tensor[(273, 3), bool] */;
  %345 = reshape(%340, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %346 = reshape(%341, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %347 = reshape(%342, newshape=[]) /* ty=uint8 */;
  %348 = @func_4968(%343, %344, %345, %346, %347) /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), uint8], Tensor[(8, 4, 13), float64], Tensor[(330), float64], Tensor[(585), float32], Tensor[(273, 3), float64], Tensor[(16, 4, 13), bool], Tensor[(832), float64], Tensor[(819), int8], Tensor[(147), uint32], Tensor[(1080), uint16], Tensor[(16, 4, 1), float64]) */;
  %349 = @func_3792() /* ty=Tensor[(12, 10, 9), uint32] */;
  %350 = %348.11;
  (%349, %350, %var_4996, meta[relay.Constant][21] /* ty=Tensor[(273, 3), bool] */, meta[relay.Constant][22] /* ty=Tensor[(165, 2), float64] */, %var_4999, meta[relay.Constant][23] /* ty=uint8 */)
}

def @func_2762() -> Tensor[(16, 4, 1), float64] {
  %351 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 1), float64] */;
  sin(%351) /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_4382(%var_4360: Tensor[(6, 13, 15), float32]) -> (Tensor[(6, 13, 15), float32], Tensor[(16, 4, ?), uint8]) {
  %352 = cast(%var_4360, dtype="float32") /* ty=Tensor[(6, 13, 15), float32] */;
  %353 = @func_4323() /* ty=(Tensor[(16, 4, ?), uint8], Tensor[(16, 4, ?), bool]) */;
  %354 = asinh(%352) /* ty=Tensor[(6, 13, 15), float32] */;
  %355 = %353.0;
  (%354, %355)
}

def @func_5154() -> Tensor[(12, 10, 9), float32] {
  %356 = @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  cosh(%357) /* ty=Tensor[(12, 10, 9), float32] */
}

def @func_4745() -> (Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) {
  @func_4743() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) */
}

def @func_4018(%var_3998: Tensor[(16, 4, 13), float64], %var_4004: Tensor[(16, 4, 13), float64]) -> (Tensor[(16, 4, 13), float64], Tensor[(16, 4, 13), bool]) {
  %358 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(16, 4, 1), float64] */;
  %361 = cast(%var_3998, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  %362 = cast(%var_4004, dtype="bool") /* ty=Tensor[(16, 4, 13), bool] */;
  %363 = shape_of(%var_3998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_3998, dtype="bool") /* ty=Tensor[(16, 4, 13), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = divide(%360, %361) /* ty=Tensor[(16, 4, 13), float64] */;
  %367 = equal(%364, %365) /* ty=Tensor[(16, 4, 13), bool] */;
  (%366, %367)
}

def @func_4022(%var_4020: Tensor[(16, 4, 13), float64], %var_4021: Tensor[(16, 4, 13), float64]) -> (Tensor[(16, 4, 13), float64], Tensor[(16, 4, 13), bool]) {
  @func_4018(%var_4020, %var_4021) /* ty=(Tensor[(16, 4, 13), float64], Tensor[(16, 4, 13), bool]) */
}

def @func_2280(%var_2269: Tensor[(15, 12, 2), float64], %var_2276: Tensor[(15, 12, 2), float64]) -> (Tensor[(15, 12, 2), int64],) {
  %368 = cast(%var_2269, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %369 = acos(%368) /* ty=Tensor[(15, 12, 2), float64] */;
  %370 = cast(%var_2276, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="int64") /* ty=Tensor[(15, 12, 2), int64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %374 = multiply(%372, %373) /* ty=Tensor[(15, 12, 2), int64] */;
  (%374,)
}

def @func_2220(%var_2185: Tensor[(10, 1, 8), float64]) -> (Tensor[(8, 4, 13), float64], Tensor[(416), uint64], Tensor[(8, 4, 13), float64], Tensor[(10, ?, 8), uint64]) {
  %375 = cast(meta[relay.Constant][25] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %376 = cast(meta[relay.Constant][25] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %377 = reshape(%375, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %378 = reshape(%376, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %379 = @func_132(%377, %378) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %380 = cast(meta[relay.Constant][25] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %381 = %379.1;
  %382 = cast(%381, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %383 = reshape(%380, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %384 = reshape(%382, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %385 = @func_132(%383, %384) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %386 = cast(%var_2185, dtype="float64") /* ty=Tensor[(10, 1, 8), float64] */;
  %387 = asinh(%386) /* ty=Tensor[(10, 1, 8), float64] */;
  %388 = cast(%var_2185, dtype="uint64") /* ty=Tensor[(10, 1, 8), uint64] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="uint64") /* ty=Tensor[(10, 1, 8), uint64] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %392 = %385.1;
  %393 = left_shift(%390, %391) /* ty=Tensor[(10, ?, 8), uint64] */;
  (%381, meta[relay.Constant][25] /* ty=Tensor[(416), uint64] */, %392, %393)
}

def @func_5084(%var_5079: Tensor[(720), int32], %var_5080: Tensor[(1170), float32], %var_5081: Tensor[(1170), float32], %var_5082: Tensor[(147), float32], %var_5083: Tensor[(2, 416), float64]) -> (Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), uint8], Tensor[(12, 10, 9), bool], Tensor[(32), float64], Tensor[(640), float64], Tensor[(16, 4, 720), float32], Tensor[(1170), bool], Tensor[(1170), int64], Tensor[(147), float32], Tensor[(147), float32], Tensor[(2, 416), float64]) {
  @func_5077(%var_5079, %var_5080, %var_5081, %var_5082, %var_5083) /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), uint8], Tensor[(12, 10, 9), bool], Tensor[(32), float64], Tensor[(640), float64], Tensor[(16, 4, 720), float32], Tensor[(1170), bool], Tensor[(1170), int64], Tensor[(147), float32], Tensor[(147), float32], Tensor[(2, 416), float64]) */
}

def @func_4681(%var_4668: Tensor[(5, 390), float64]) -> (Tensor[(12, 10, 9), float32], Tensor[(1716), uint32], Tensor[(5, 390), float64], Tensor[(12, 10, 9), uint32]) {
  %394 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
  %395 = %394.0;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
  %397 = cast(%var_4668, dtype="float64") /* ty=Tensor[(5, 390), float64] */;
  %398 = reshape(%397, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %399 = @func_3672(%398) /* ty=(Tensor[(15, 10, 13), float64], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32]) */;
  %400 = sin(%396) /* ty=Tensor[(12, 10, 9), float32] */;
  %401 = %399.3;
  %402 = @func_3637() /* ty=Tensor[(12, 10, 9), uint32] */;
  (%400, %401, %var_4668, %402)
}

def @func_5156() -> Tensor[(12, 10, 9), float32] {
  @func_5154() /* ty=Tensor[(12, 10, 9), float32] */
}

def @func_1004(%var_1002: Tensor[(7, 12, 2), float64], %var_1003: Tensor[(819), bool]) -> (Tensor[(7, 12, 2), float64], Tensor[(7, 12, 2), float64], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(16, 26), uint64]) {
  %413 = fn (%var_974: Tensor[(7, 12, 2), float64], %var_993: Tensor[(819), bool]) -> (Tensor[(7, 12, 2), float64], Tensor[(7, 12, 2), float64], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(16, 26), uint64]) {
    %403 = cast(%var_974, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
    %404 = cast(%var_974, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
    %405 = cast(%var_993, dtype="bool") /* ty=Tensor[(819), bool] */;
    %406 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 26), uint64] */, dtype="uint64") /* ty=Tensor[(16, 26), uint64] */;
    %407 = reshape(%405, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
    %408 = reshape(%406, newshape=[416]) /* ty=Tensor[(416), uint64] */;
    %409 = @func_421(%407, %408) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
    %410 = sinh(%403) /* ty=Tensor[(7, 12, 2), float64] */;
    %411 = atanh(%404) /* ty=Tensor[(7, 12, 2), float64] */;
    %412 = %409.8;
    (%410, %411, %412, %var_993, meta[relay.Constant][26] /* ty=Tensor[(16, 26), uint64] */)
  };
  %413(%var_1002, %var_1003) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(7, 12, 2), float64], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(16, 26), uint64]) */
}

def @func_3793() -> Tensor[(12, 10, 9), uint32] {
  %414 = fn () -> Tensor[(12, 10, 9), uint32] {
    @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */
  };
  %414() /* ty=Tensor[(12, 10, 9), uint32] */
}

def @func_4407(%var_4401: Tensor[(12, 10, 9), uint32]) -> Tensor[(12, 10, 9), uint8] {
  %415 = @func_3792() /* ty=Tensor[(12, 10, 9), uint32] */;
  %416 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(12, 10, 9), uint8] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="uint8") /* ty=Tensor[(12, 10, 9), uint8] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%418, %419) /* ty=Tensor[(12, 10, 9), uint8] */
}

def @func_3127(%var_3125: Tensor[(4, 180), float32], %var_3126: Tensor[(819), bool]) -> (Tensor[(16, 4, 1), float64], Tensor[(264), float32], Tensor[(819), bool], Tensor[(32), float64], Tensor[(4, 180), uint64]) {
  %440 = fn (%var_3083: Tensor[(4, 180), float32], %var_3088: Tensor[(819), bool]) -> (Tensor[(16, 4, 1), float64], Tensor[(264), float32], Tensor[(819), bool], Tensor[(32), float64], Tensor[(4, 180), uint64]) {
    %420 = cast(%var_3083, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
    %421 = reshape(%420, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
    %422 = @func_1453(%421) /* ty=(Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) */;
    %423 = cast(%var_3088, dtype="bool") /* ty=Tensor[(819), bool] */;
    %424 = cast(meta[relay.Constant][27] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %425 = cast(%var_3083, dtype="int32") /* ty=Tensor[(4, 180), int32] */;
    %426 = cast(%var_3083, dtype="int32") /* ty=Tensor[(4, 180), int32] */;
    %427 = reshape(%423, newshape=[819]) /* ty=Tensor[(819), bool] */;
    %428 = reshape(%424, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
    %429 = reshape(%425, newshape=[720]) /* ty=Tensor[(720), int32] */;
    %430 = reshape(%426, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
    %431 = @func_2870(%427, %428, %429, %430) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) */;
    %432 = %431.3;
    %433 = cast(%432, dtype="uint64") /* ty=Tensor[(720), uint64] */;
    %434 = shape_of(%var_3083, dtype="int32") /* ty=Tensor[(2), int32] */;
    %435 = cast(%var_3083, dtype="uint64") /* ty=Tensor[(4, 180), uint64] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %437 = @func_2889() /* ty=Tensor[(16, 4, 1), float64] */;
    %438 = %422.2;
    %439 = logical_xor(%435, %436) /* ty=Tensor[(4, 180), uint64] */;
    (%437, %438, %var_3088, meta[relay.Constant][27] /* ty=Tensor[(32), float64] */, %439)
  };
  %440(%var_3125, %var_3126) /* ty=(Tensor[(16, 4, 1), float64], Tensor[(264), float32], Tensor[(819), bool], Tensor[(32), float64], Tensor[(4, 180), uint64]) */
}

def @func_1314(%var_1268: uint8) -> (Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) {
  %441 = cast(%var_1268, dtype="uint8") /* ty=uint8 */;
  %442 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 10, 9), uint8] */, dtype="uint8") /* ty=Tensor[(12, 10, 9), uint8] */;
  %443 = cast(meta[relay.Constant][29] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
  %444 = reshape(%443, newshape=[7, 7, 3]) /* ty=Tensor[(7, 7, 3), float32] */;
  %445 = @func_963(%444) /* ty=(Tensor[(7, 7, 3), float32],) */;
  %446 = cast(meta[relay.Constant][30] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %447 = cast(meta[relay.Constant][31] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %448 = reshape(%446, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
  %449 = reshape(%447, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %450 = @func_421(%448, %449) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
  %451 = maximum(%441, %442) /* ty=Tensor[(12, 10, 9), uint8] */;
  %452 = %445.0;
  %453 = %450.10;
  (%451, %452, meta[relay.Constant][29] /* ty=Tensor[(147), float32] */, %453, meta[relay.Constant][30] /* ty=Tensor[(819), bool] */, meta[relay.Constant][31] /* ty=Tensor[(416), uint64] */)
}

def @func_5624() -> Tensor[(16, 4, 1), float64] {
  %454 = fn () -> Tensor[(16, 4, 1), float64] {
    @func_2889() /* ty=Tensor[(16, 4, 1), float64] */
  };
  %454() /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_1188(%var_1186: Tensor[(15, 1, 6), int32], %var_1187: Tensor[(15, 8, 6), int32]) -> (Tensor[(15, 8, 6), bool],) {
  %461 = fn (%var_1176: Tensor[(15, 1, 6), int32], %var_1177: Tensor[(15, 8, 6), int32]) -> (Tensor[(15, 8, 6), bool],) {
    %455 = cast(%var_1176, dtype="int32") /* ty=Tensor[(15, 1, 6), int32] */;
    %456 = cast(%var_1177, dtype="int32") /* ty=Tensor[(15, 8, 6), int32] */;
    %457 = minimum(%455, %456) /* ty=Tensor[(15, 8, 6), int32] */;
    %458 = cast(%var_1176, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
    %459 = cast(%457, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
    %460 = logical_and(%458, %459) /* ty=Tensor[(15, 8, 6), bool] */;
    (%460,)
  };
  %461(%var_1186, %var_1187) /* ty=(Tensor[(15, 8, 6), bool],) */
}

def @func_5163() -> Tensor[(16, 4, 1), float64] {
  %463 = fn () -> Tensor[(16, 4, 1), float64] {
    %462 = @func_4743() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 10, 9), float64]) */;
    %462.0
  };
  %463() /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_2967(%var_2963: Tensor[(3, 1, 13), uint64], %var_2964: Tensor[(3, 2, 13), uint64], %var_2965: Tensor[(819), bool], %var_2966: Tensor[(8, 52), uint64]) -> (Tensor[(3, 14, 13), uint64], Tensor[(3, 2, 13), uint16], Tensor[(8, 4, 13), bool], Tensor[(819), bool], Tensor[(8, 52), uint64]) {
  @func_2961(%var_2963, %var_2964, %var_2965, %var_2966) /* ty=(Tensor[(3, 14, 13), uint64], Tensor[(3, 2, 13), uint16], Tensor[(8, 4, 13), bool], Tensor[(819), bool], Tensor[(8, 52), uint64]) */
}

def @func_4684(%var_4682: Tensor[(5, 390), float64]) -> (Tensor[(12, 10, 9), float32], Tensor[(1716), uint32], Tensor[(5, 390), float64], Tensor[(12, 10, 9), uint32]) {
  @func_4681(%var_4682) /* ty=(Tensor[(12, 10, 9), float32], Tensor[(1716), uint32], Tensor[(5, 390), float64], Tensor[(12, 10, 9), uint32]) */
}

def @func_4797() -> (Tensor[(12, 10, 9), float64],) {
  %466 = fn () -> (Tensor[(12, 10, 9), float64],) {
    %464 = @func_4067() /* ty=(Tensor[(12, 10, 9), float64],) */;
    %465 = %464.0;
    (%465,)
  };
  %466() /* ty=(Tensor[(12, 10, 9), float64],) */
}

def @func_4631(%var_4629: Tensor[(12, 6, 4), bool], %var_4630: Tensor[(360), float64]) -> (Tensor[(12, 6, 4), float64], Tensor[(12, 6, 4), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64]) {
  %487 = fn (%var_4590: Tensor[(12, 6, 4), bool], %var_4624: Tensor[(360), float64]) -> (Tensor[(12, 6, 4), float64], Tensor[(12, 6, 4), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64]) {
    %467 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 6, 4), bool] */, dtype="float64") /* ty=Tensor[(12, 6, 4), float64] */;
    %468 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 6, 4), bool] */, dtype="bool") /* ty=Tensor[(12, 6, 4), bool] */;
    %469 = shape_of(%var_4590, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%var_4590, dtype="bool") /* ty=Tensor[(12, 6, 4), bool] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %472 = logical_and(%470, %471) /* ty=Tensor[(12, 6, 4), bool] */;
    %473 = cast(%472, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
    %474 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(12, 6, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 6, 4), bool] */, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %477 = floor_divide(%475, %476) /* ty=Tensor[(12, 6, 4), float32] */;
    %478 = cast(%477, dtype="float64") /* ty=Tensor[(12, 6, 4), float64] */;
    %479 = cast(%var_4624, dtype="float64") /* ty=Tensor[(360), float64] */;
    %480 = cast(%var_4624, dtype="float64") /* ty=Tensor[(360), float64] */;
    %481 = reshape(%479, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
    %482 = reshape(%480, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
    %483 = @func_2280(%481, %482) /* ty=(Tensor[(15, 12, 2), int64],) */;
    %484 = atanh(%467) /* ty=Tensor[(12, 6, 4), float64] */;
    %485 = acosh(%478) /* ty=Tensor[(12, 6, 4), float64] */;
    %486 = %483.0;
    (%484, %485, %486, %var_4624)
  };
  %487(%var_4629, %var_4630) /* ty=(Tensor[(12, 6, 4), float64], Tensor[(12, 6, 4), float64], Tensor[(15, 12, 2), int64], Tensor[(360), float64]) */
}

def @func_4410(%var_4408: Tensor[(12, 10, 9), uint32]) -> Tensor[(12, 10, 9), uint8] {
  @func_4407(%var_4408) /* ty=Tensor[(12, 10, 9), uint8] */
}

def @func_5007(%var_5005: Tensor[(147), float32], %var_5006: Tensor[(832), float64]) -> (Tensor[(12, 10, 9), uint32], Tensor[(16, 4, 1), float64], Tensor[(147), float32], Tensor[(273, 3), bool], Tensor[(165, 2), float64], Tensor[(832), float64], uint8) {
  @func_5003(%var_5005, %var_5006) /* ty=(Tensor[(12, 10, 9), uint32], Tensor[(16, 4, 1), float64], Tensor[(147), float32], Tensor[(273, 3), bool], Tensor[(165, 2), float64], Tensor[(832), float64], uint8) */
}

def @func_3010() -> (Tensor[(16, 4, 1), float64],) {
  %489 = fn () -> (Tensor[(16, 4, 1), float64],) {
    %488 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
    (%488,)
  };
  %489() /* ty=(Tensor[(16, 4, 1), float64],) */
}

def @func_425(%var_423: Tensor[(9, 7, 13), bool], %var_424: Tensor[(416), uint64]) -> (Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) {
  @func_421(%var_423, %var_424) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */
}

def @func_4068() -> (Tensor[(12, 10, 9), float64],) {
  %492 = fn () -> (Tensor[(12, 10, 9), float64],) {
    %490 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
    %491 = %490.0;
    (%491,)
  };
  %492() /* ty=(Tensor[(12, 10, 9), float64],) */
}

def @main() -> Tensor[(13, 13, 7), float32] {
  %493 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 7), float32] */;
  sigmoid(%493) /* ty=Tensor[(13, 13, 7), float32] */
}

def @func_3065() -> (Tensor[(16, 4, 1), float64], Tensor[(16, 4, 1), float64], Tensor[(720), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(819), float64]) {
  @func_3063() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(16, 4, 1), float64], Tensor[(720), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(819), float64]) */
}

def @func_5292(%var_5289: Tensor[(12, 10, 16), float32], %var_5290: Tensor[(10, 117), float32], %var_5291: Tensor[(832), float64]) -> (Tensor[(12, 10, 16), float32], Tensor[(640), float64], Tensor[(720), int32], Tensor[(10, 117), float32], Tensor[(147), float32], Tensor[(832), float64]) {
  %511 = fn (%var_5266: Tensor[(12, 10, 16), float32], %var_5284: Tensor[(10, 117), float32], %var_5286: Tensor[(832), float64]) -> (Tensor[(12, 10, 16), float32], Tensor[(640), float64], Tensor[(720), int32], Tensor[(10, 117), float32], Tensor[(147), float32], Tensor[(832), float64]) {
    %494 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 16), float32] */;
    %495 = shape_of(%var_5266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(%var_5266, dtype="float32") /* ty=Tensor[(12, 10, 16), float32] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %498 = cast(meta[relay.Constant][35] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
    %499 = cast(%var_5284, dtype="float32") /* ty=Tensor[(10, 117), float32] */;
    %500 = cast(%var_5284, dtype="float32") /* ty=Tensor[(10, 117), float32] */;
    %501 = cast(meta[relay.Constant][36] /* ty=Tensor[(147), float32] */, dtype="float32") /* ty=Tensor[(147), float32] */;
    %502 = cast(%var_5286, dtype="float64") /* ty=Tensor[(832), float64] */;
    %503 = reshape(%498, newshape=[720]) /* ty=Tensor[(720), int32] */;
    %504 = reshape(%499, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %505 = reshape(%500, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %506 = reshape(%501, newshape=[147]) /* ty=Tensor[(147), float32] */;
    %507 = reshape(%502, newshape=[2, 416]) /* ty=Tensor[(2, 416), float64] */;
    %508 = @func_5077(%503, %504, %505, %506, %507) /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), uint8], Tensor[(12, 10, 9), bool], Tensor[(32), float64], Tensor[(640), float64], Tensor[(16, 4, 720), float32], Tensor[(1170), bool], Tensor[(1170), int64], Tensor[(147), float32], Tensor[(147), float32], Tensor[(2, 416), float64]) */;
    %509 = floor_mod(%496, %497) /* ty=Tensor[(12, 10, 16), float32] */;
    %510 = %508.4;
    (%509, %510, meta[relay.Constant][35] /* ty=Tensor[(720), int32] */, %var_5284, meta[relay.Constant][36] /* ty=Tensor[(147), float32] */, %var_5286)
  };
  %511(%var_5289, %var_5290, %var_5291) /* ty=(Tensor[(12, 10, 16), float32], Tensor[(640), float64], Tensor[(720), int32], Tensor[(10, 117), float32], Tensor[(147), float32], Tensor[(832), float64]) */
}

def @func_421(%var_315: Tensor[(9, 7, 13), bool], %var_344: Tensor[(416), uint64]) -> (Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) {
  %512 = cast(meta[relay.Constant][37] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %513 = reshape(%512, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %514 = @func_80(%513) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %515 = cast(%var_315, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %516 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(9, 7, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 7, 13), bool] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = logical_or(%517, %518) /* ty=Tensor[(9, 7, 13), bool] */;
  %520 = cast(%519, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %521 = shape_of(%var_315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_315, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %525 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %526 = reshape(%524, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %527 = reshape(%525, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %528 = @func_132(%526, %527) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %529 = %528.1;
  %530 = cast(%529, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %531 = cast(%529, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %532 = reshape(%530, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %533 = reshape(%531, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %534 = @func_132(%532, %533) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %535 = %534.0;
  %536 = cast(%529, dtype="uint8") /* ty=Tensor[(8, 4, 13), uint8] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="uint8") /* ty=Tensor[(8, 4, 13), uint8] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %540 = cast(%535, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %541 = cast(%535, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %542 = reshape(%540, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %543 = reshape(%541, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %544 = @func_132(%542, %543) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %545 = cast(%535, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %546 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %547 = reshape(%545, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %548 = reshape(%546, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %549 = @func_132(%547, %548) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %550 = %549.0;
  %551 = cast(%550, dtype="uint64") /* ty=Tensor[(8, 4, 13), uint64] */;
  %552 = cast(%var_344, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %553 = reshape(%551, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %554 = reshape(%552, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), uint64] */;
  %555 = @func_132(%553, %554) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %556 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 7, 13), bool] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %557 = shape_of(%var_315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_315, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = not_equal(%558, %559) /* ty=Tensor[(9, 7, 13), bool] */;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %562 = cosh(%561) /* ty=Tensor[(9, 7, 13), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %564 = %514.1;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(5, 6, 11), float64] */;
  %566 = reshape(%565, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %567 = @func_80(%566) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %568 = cast(%562, dtype="float64") /* ty=Tensor[(9, 7, 13), float64] */;
  %569 = equal(%522, %523) /* ty=Tensor[(9, 7, 13), bool] */;
  %570 = add(%538, %539) /* ty=Tensor[(8, 4, 13), uint8] */;
  %571 = %544.1;
  %572 = %555.1;
  %573 = exp(%563) /* ty=Tensor[(9, 7, 13), float64] */;
  %574 = %567.0;
  %575 = tan(%568) /* ty=Tensor[(9, 7, 13), float64] */;
  (%var_344, %564, meta[relay.Constant][37] /* ty=Tensor[(330), float64] */, %569, %570, %571, %550, %572, %573, %574, %575)
}

def @func_2764() -> Tensor[(16, 4, 1), float64] {
  @func_2762() /* ty=Tensor[(16, 4, 1), float64] */
}

def @func_3704() -> Tensor[(720), int32] {
  %576 = @func_3063() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(16, 4, 1), float64], Tensor[(720), int32], Tensor[(32), float64], Tensor[(720), int32], Tensor[(819), float64]) */;
  %576.2
}

def @func_4208(%var_4122: Tensor[(16, 4, 12), float64], %var_4139: Tensor[(640), float64], %var_4140: Tensor[(90), int32]) -> (Tensor[(16, 4, 12), bool], Tensor[(16, 4, 12), float32], Tensor[(16, 4, 10), bool], Tensor[(640), float64], Tensor[(90), int32]) {
  %577 = @func_3009() /* ty=(Tensor[(16, 4, 1), float64],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="bool") /* ty=Tensor[(16, 4, 1), bool] */;
  %580 = cast(%var_4122, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
  %581 = cast(%var_4122, dtype="float32") /* ty=Tensor[(16, 4, 12), float32] */;
  %582 = cast(%var_4139, dtype="float64") /* ty=Tensor[(640), float64] */;
  %583 = cast(%var_4140, dtype="int32") /* ty=Tensor[(90), int32] */;
  %584 = reshape(%582, newshape=[16, 4, 10]) /* ty=Tensor[(16, 4, 10), float64] */;
  %585 = reshape(%583, newshape=[45, 2]) /* ty=Tensor[(45, 2), int32] */;
  %586 = @func_3355(%584, %585) /* ty=(Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) */;
  %587 = equal(%579, %580) /* ty=Tensor[(16, 4, 12), bool] */;
  %588 = asin(%581) /* ty=Tensor[(16, 4, 12), float32] */;
  %589 = %586.0;
  (%587, %588, %589, %var_4139, %var_4140)
}

def @func_5077(%var_5035: Tensor[(720), int32], %var_5053: Tensor[(1170), float32], %var_5058: Tensor[(1170), float32], %var_5069: Tensor[(147), float32], %var_5070: Tensor[(2, 416), float64]) -> (Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), uint8], Tensor[(12, 10, 9), bool], Tensor[(32), float64], Tensor[(640), float64], Tensor[(16, 4, 720), float32], Tensor[(1170), bool], Tensor[(1170), int64], Tensor[(147), float32], Tensor[(147), float32], Tensor[(2, 416), float64]) {
  %590 = @func_4845() /* ty=(Tensor[(12, 10, 9), float64],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="uint32") /* ty=Tensor[(12, 10, 9), uint32] */;
  %593 = reshape(%592, newshape=[12, 10, 9]) /* ty=Tensor[(12, 10, 9), uint32] */;
  %594 = cast(meta[relay.Constant][40] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %595 = cast(%var_5035, dtype="int32") /* ty=Tensor[(720), int32] */;
  %596 = cast(meta[relay.Constant][41] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %597 = cast(%591, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %598 = reshape(%594, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
  %599 = reshape(%595, newshape=[720, 1]) /* ty=Tensor[(720, 1), int32] */;
  %600 = reshape(%596, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %601 = reshape(%597, newshape=[12, 10, 9]) /* ty=Tensor[(12, 10, 9), bool] */;
  %602 = @func_3909(%598, %599, %600, %601) /* ty=(Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(12, 11, 2), uint64], Tensor[(819), bool], Tensor[(640), float64], Tensor[(90), int32], Tensor[(12, 10, 9), bool], Tensor[(720, 819), bool]) */;
  %603 = cast(meta[relay.Constant][42] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %604 = reshape(%603, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), float32] */;
  %605 = @func_4382(%604) /* ty=(Tensor[(6, 13, 15), float32], Tensor[(16, 4, ?), uint8]) */;
  %606 = %605.1;
  %607 = cast(%var_5035, dtype="float32") /* ty=Tensor[(720), float32] */;
  %608 = cast(%606, dtype="float32") /* ty=Tensor[(16, 4, ?), float32] */;
  %609 = cast(meta[relay.Constant][42] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %610 = atanh(%609) /* ty=Tensor[(1170), float32] */;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %612 = acos(%611) /* ty=Tensor[(1170), float32] */;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %614 = log10(%613) /* ty=Tensor[(1170), float32] */;
  %615 = cast(%var_5053, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(1), int32] */;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?), bool] */;
  %619 = cast(%var_5058, dtype="int64") /* ty=Tensor[(1170), int64] */;
  %620 = shape_of(%610, dtype="int32") /* ty=Tensor[(1), int32] */;
  %621 = cast(%610, dtype="int64") /* ty=Tensor[(1170), int64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?), int64] */;
  %623 = cast(%var_5069, dtype="float32") /* ty=Tensor[(147), float32] */;
  %624 = cast(%var_5070, dtype="float64") /* ty=Tensor[(2, 416), float64] */;
  %625 = reshape(%623, newshape=[147]) /* ty=Tensor[(147), float32] */;
  %626 = reshape(%624, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %627 = @func_5003(%625, %626) /* ty=(Tensor[(12, 10, 9), uint32], Tensor[(16, 4, 1), float64], Tensor[(147), float32], Tensor[(273, 3), bool], Tensor[(165, 2), float64], Tensor[(832), float64], uint8) */;
  %628 = @func_4407(%593) /* ty=Tensor[(12, 10, 9), uint8] */;
  %629 = %602.6;
  %630 = divide(%607, %608) /* ty=Tensor[(16, 4, 720), float32] */;
  %631 = greater_equal(%617, %618) /* ty=Tensor[(1170), bool] */;
  %632 = right_shift(%621, %622) /* ty=Tensor[(1170), int64] */;
  %633 = %627.2;
  (%591, %628, %629, meta[relay.Constant][40] /* ty=Tensor[(32), float64] */, meta[relay.Constant][41] /* ty=Tensor[(640), float64] */, %630, %631, %632, %633, %var_5069, %var_5070)
}

def @func_2223(%var_2221: Tensor[(10, 1, 8), float64]) -> (Tensor[(8, 4, 13), float64], Tensor[(416), uint64], Tensor[(8, 4, 13), float64], Tensor[(10, ?, 8), uint64]) {
  @func_2220(%var_2221) /* ty=(Tensor[(8, 4, 13), float64], Tensor[(416), uint64], Tensor[(8, 4, 13), float64], Tensor[(10, ?, 8), uint64]) */
}

def @func_3625(%var_3574: Tensor[(330), float64], %var_3612: Tensor[(720), float32]) -> (Tensor[(16, 4, 1), float64], Tensor[(5, 6, 11), float64], Tensor[(330), float64], Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(720), float32]) {
  %634 = cast(%var_3574, dtype="float64") /* ty=Tensor[(330), float64] */;
  %635 = reshape(%634, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), float64] */;
  %636 = @func_80(%635) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */;
  %637 = cast(%var_3574, dtype="float64") /* ty=Tensor[(330), float64] */;
  %638 = cast(%var_3612, dtype="float32") /* ty=Tensor[(720), float32] */;
  %639 = reshape(%638, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float32] */;
  %640 = @func_1453(%639) /* ty=(Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) */;
  %641 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %642 = %636.0;
  %643 = atanh(%637) /* ty=Tensor[(330), float64] */;
  %644 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
  %645 = %640.1;
  (%641, %642, %643, %644, %645, %var_3612)
}

def @func_2284(%var_2282: Tensor[(15, 12, 2), float64], %var_2283: Tensor[(15, 12, 2), float64]) -> (Tensor[(15, 12, 2), int64],) {
  @func_2280(%var_2282, %var_2283) /* ty=(Tensor[(15, 12, 2), int64],) */
}

def @func_4325() -> (Tensor[(16, 4, ?), uint8], Tensor[(16, 4, ?), bool]) {
  @func_4323() /* ty=(Tensor[(16, 4, ?), uint8], Tensor[(16, 4, ?), bool]) */
}

def @func_3468() -> Tensor[(12, 10, 9), uint32] {
  %647 = fn () -> Tensor[(12, 10, 9), uint32] {
    %646 = @func_2786() /* ty=(Tensor[(16, 4, 1), float64], uint8, Tensor[(12, 10, 9), uint32]) */;
    %646.2
  };
  %647() /* ty=Tensor[(12, 10, 9), uint32] */
}

def @func_5511() -> Tensor[(12, 10, 9), float64] {
  @func_5509() /* ty=Tensor[(12, 10, 9), float64] */
}

def @func_1455(%var_1454: Tensor[(4, 12, 15), float32]) -> (Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) {
  %659 = fn (%var_1391: Tensor[(4, 12, 15), float32]) -> (Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) {
    %648 = cast(-1.35939f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %649 = cast(%var_1391, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
    %650 = cast(meta[relay.Constant][43] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %651 = reshape(%650, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
    %652 = @func_1046(%651) /* ty=(Tensor[(12, 11, 2), float32],) */;
    %653 = cast(-1.35939f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
    %654 = reshape(%653, newshape=[]) /* ty=uint8 */;
    %655 = @func_1314(%654) /* ty=(Tensor[(12, 10, 9), uint8], Tensor[(7, 7, 3), float32], Tensor[(147), float32], Tensor[(9, 7, 13), float64], Tensor[(819), bool], Tensor[(416), uint64]) */;
    %656 = floor_mod(%648, %649) /* ty=Tensor[(4, 12, 15), float32] */;
    %657 = %652.0;
    %658 = %655.5;
    (%656, %657, meta[relay.Constant][43] /* ty=Tensor[(264), float32] */, %658)
  };
  %659(%var_1454) /* ty=(Tensor[(4, 12, 15), float32], Tensor[(12, 11, 2), float32], Tensor[(264), float32], Tensor[(416), uint64]) */
}

def @func_5208() -> (Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(264), float32]) {
  %665 = fn () -> (Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(264), float32]) {
    %660 = cast(meta[relay.Constant][44] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %661 = reshape(%660, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
    %662 = @func_1046(%661) /* ty=(Tensor[(12, 11, 2), float32],) */;
    %663 = @func_2762() /* ty=Tensor[(16, 4, 1), float64] */;
    %664 = %662.0;
    (%663, %664, meta[relay.Constant][44] /* ty=Tensor[(264), float32] */)
  };
  %665() /* ty=(Tensor[(16, 4, 1), float64], Tensor[(12, 11, 2), float32], Tensor[(264), float32]) */
}

def @func_4037() -> (Tensor[(16, 4, 1), float64],) {
  %667 = fn () -> (Tensor[(16, 4, 1), float64],) {
    %666 = @func_2889() /* ty=Tensor[(16, 4, 1), float64] */;
    (%666,)
  };
  %667() /* ty=(Tensor[(16, 4, 1), float64],) */
}

def @func_4762() -> (Tensor[(12, 10, 9), float64],) {
  %670 = fn () -> (Tensor[(12, 10, 9), float64],) {
    %668 = @func_3775() /* ty=(Tensor[(12, 10, 9), float64], Tensor[(12, 10, 9), float64]) */;
    %669 = %668.1;
    (%669,)
  };
  %670() /* ty=(Tensor[(12, 10, 9), float64],) */
}

def @func_3674(%var_3673: Tensor[(15, 10, 13), float64]) -> (Tensor[(15, 10, 13), float64], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32]) {
  %681 = fn (%var_3657: Tensor[(15, 10, 13), float64]) -> (Tensor[(15, 10, 13), float64], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32]) {
    %671 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
    %672 = shape_of(%var_3657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%var_3657, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %675 = cast(meta[relay.Constant][46] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %676 = cast(meta[relay.Constant][47] /* ty=Tensor[(1716), uint32] */, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
    %677 = reshape(%675, newshape=[]) /* ty=uint32 */;
    %678 = reshape(%676, newshape=[11, 13, 12]) /* ty=Tensor[(11, 13, 12), uint32] */;
    %679 = floor_divide(%673, %674) /* ty=Tensor[(15, 10, 13), float64] */;
    %680 = @func_2302(%677, %678) /* ty=Tensor[(11, 13, 12), bool] */;
    (%679, %680, meta[relay.Constant][46] /* ty=uint32 */, meta[relay.Constant][47] /* ty=Tensor[(1716), uint32] */)
  };
  %681(%var_3673) /* ty=(Tensor[(15, 10, 13), float64], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32]) */
}

def @func_2961(%var_2930: Tensor[(3, 1, 13), uint64], %var_2948: Tensor[(3, 2, 13), uint64], %var_2953: Tensor[(819), bool], %var_2954: Tensor[(8, 52), uint64]) -> (Tensor[(3, 14, 13), uint64], Tensor[(3, 2, 13), uint16], Tensor[(8, 4, 13), bool], Tensor[(819), bool], Tensor[(8, 52), uint64]) {
  %682 = cast(%var_2930, dtype="uint64") /* ty=Tensor[(3, 1, 13), uint64] */;
  %683 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 14, 13), uint64] */, dtype="uint64") /* ty=Tensor[(3, 14, 13), uint64] */;
  %684 = cast(%var_2930, dtype="uint16") /* ty=Tensor[(3, 1, 13), uint16] */;
  %685 = cast(%var_2948, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %686 = cast(%var_2953, dtype="bool") /* ty=Tensor[(819), bool] */;
  %687 = cast(%var_2954, dtype="uint64") /* ty=Tensor[(8, 52), uint64] */;
  %688 = reshape(%686, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), bool] */;
  %689 = reshape(%687, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %690 = @func_421(%688, %689) /* ty=(Tensor[(416), uint64], Tensor[(5, 6, 11), float32], Tensor[(330), float64], Tensor[(9, 7, 13), bool], Tensor[(8, 4, 13), uint8], Tensor[(8, 4, 13), float64], Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64], Tensor[(9, 7, 13), float64], Tensor[(5, 6, 11), float64], Tensor[(9, 7, 13), float64]) */;
  %691 = logical_xor(%682, %683) /* ty=Tensor[(3, 14, 13), uint64] */;
  %692 = add(%684, %685) /* ty=Tensor[(3, 2, 13), uint16] */;
  %693 = %690.6;
  (%691, %692, %693, %var_2953, %var_2954)
}

def @func_83(%var_81: Tensor[(5, 6, 11), float64]) -> (Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) {
  @func_80(%var_81) /* ty=(Tensor[(5, 6, 11), float64], Tensor[(5, 6, 11), float32]) */
}

def @func_3914(%var_3910: Tensor[(16, 2), float64], %var_3911: Tensor[(720, 1), int32], %var_3912: Tensor[(640), float64], %var_3913: Tensor[(12, 10, 9), bool]) -> (Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(12, 11, 2), uint64], Tensor[(819), bool], Tensor[(640), float64], Tensor[(90), int32], Tensor[(12, 10, 9), bool], Tensor[(720, 819), bool]) {
  %735 = fn (%var_3858: Tensor[(16, 2), float64], %var_3859: Tensor[(720, 1), int32], %var_3880: Tensor[(640), float64], %var_3893: Tensor[(12, 10, 9), bool]) -> (Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(12, 11, 2), uint64], Tensor[(819), bool], Tensor[(640), float64], Tensor[(90), int32], Tensor[(12, 10, 9), bool], Tensor[(720, 819), bool]) {
    %694 = cast(meta[relay.Constant][49] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
    %695 = cast(%var_3858, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
    %696 = cast(%var_3859, dtype="int32") /* ty=Tensor[(720, 1), int32] */;
    %697 = cast(%var_3859, dtype="int32") /* ty=Tensor[(720, 1), int32] */;
    %698 = reshape(%694, newshape=[819]) /* ty=Tensor[(819), bool] */;
    %699 = reshape(%695, newshape=[16, 2]) /* ty=Tensor[(16, 2), float64] */;
    %700 = reshape(%696, newshape=[720]) /* ty=Tensor[(720), int32] */;
    %701 = reshape(%697, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
    %702 = @func_2870(%698, %699, %700, %701) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(720), int32], Tensor[(360, 2), float64], Tensor[(16, 4, 168), int8]) */;
    %703 = cast(meta[relay.Constant][50] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %704 = reshape(%703, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
    %705 = @func_1046(%704) /* ty=(Tensor[(12, 11, 2), float32],) */;
    %706 = %705.0;
    %707 = cast(meta[relay.Constant][50] /* ty=Tensor[(264), float32] */, dtype="uint64") /* ty=Tensor[(264), uint64] */;
    %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%706, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %711 = cast(%var_3880, dtype="float64") /* ty=Tensor[(640), float64] */;
    %712 = cast(meta[relay.Constant][51] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
    %713 = reshape(%711, newshape=[16, 4, 10]) /* ty=Tensor[(16, 4, 10), float64] */;
    %714 = reshape(%712, newshape=[45, 2]) /* ty=Tensor[(45, 2), int32] */;
    %715 = @func_3355(%713, %714) /* ty=(Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) */;
    %716 = @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */;
    %717 = cast(%716, dtype="float32") /* ty=Tensor[(12, 10, 9), float32] */;
    %718 = rsqrt(%717) /* ty=Tensor[(12, 10, 9), float32] */;
    %719 = cast(%716, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
    %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %721 = cast(%718, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
    %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %723 = not_equal(%721, %722) /* ty=Tensor[(12, 10, 9), bool] */;
    %724 = cast(%var_3893, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
    %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%723, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %728 = cast(meta[relay.Constant][49] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
    %729 = cast(%var_3859, dtype="bool") /* ty=Tensor[(720, 1), bool] */;
    %730 = %702.1;
    %731 = add(%709, %710) /* ty=Tensor[(12, 11, 2), uint64] */;
    %732 = %715.5;
    %733 = greater_equal(%726, %727) /* ty=Tensor[(12, 10, 9), bool] */;
    %734 = less(%728, %729) /* ty=Tensor[(720, 819), bool] */;
    (%730, %var_3858, %731, %732, %var_3880, meta[relay.Constant][51] /* ty=Tensor[(90), int32] */, %733, %734)
  };
  %735(%var_3910, %var_3911, %var_3912, %var_3913) /* ty=(Tensor[(819), bool], Tensor[(16, 2), float64], Tensor[(12, 11, 2), uint64], Tensor[(819), bool], Tensor[(640), float64], Tensor[(90), int32], Tensor[(12, 10, 9), bool], Tensor[(720, 819), bool]) */
}

def @func_965(%var_964: Tensor[(7, 7, 3), float32]) -> (Tensor[(7, 7, 3), float32],) {
  %738 = fn (%var_955: Tensor[(7, 7, 3), float32]) -> (Tensor[(7, 7, 3), float32],) {
    %736 = cast(%var_955, dtype="float32") /* ty=Tensor[(7, 7, 3), float32] */;
    %737 = log10(%736) /* ty=Tensor[(7, 7, 3), float32] */;
    (%737,)
  };
  %738(%var_964) /* ty=(Tensor[(7, 7, 3), float32],) */
}

def @func_3359(%var_3357: Tensor[(16, 4, 10), float64], %var_3358: Tensor[(45, 2), int32]) -> (Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) {
  @func_3355(%var_3357, %var_3358) /* ty=(Tensor[(16, 4, 10), bool], Tensor[(15, 8, 6), bool], Tensor[(720), int32], Tensor[(45, 2), int16], Tensor[(819), bool], Tensor[(819), bool]) */
}

def @func_2305(%var_2303: uint32, %var_2304: Tensor[(11, 13, 12), uint32]) -> Tensor[(11, 13, 12), bool] {
  %741 = fn (%var_2297: uint32, %var_2298: Tensor[(11, 13, 12), uint32]) -> Tensor[(11, 13, 12), bool] {
    %739 = cast(%var_2297, dtype="bool") /* ty=bool */;
    %740 = cast(%var_2298, dtype="bool") /* ty=Tensor[(11, 13, 12), bool] */;
    equal(%739, %740) /* ty=Tensor[(11, 13, 12), bool] */
  };
  %741(%var_2303, %var_2304) /* ty=Tensor[(11, 13, 12), bool] */
}

def @func_4845() -> (Tensor[(12, 10, 9), float64],) {
  %742 = @func_4761() /* ty=(Tensor[(12, 10, 9), float64],) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(12, 10, 9), float64] */;
  %745 = atanh(%744) /* ty=Tensor[(12, 10, 9), float64] */;
  (%745,)
}

def @func_4115(%var_4112: uint32, %var_4113: Tensor[(1716), uint32], %var_4114: Tensor[(12, 30), float64]) -> (Tensor[(12, 10, 9), uint32], Tensor[(15, 8, 6), bool], Tensor[(32), float64], Tensor[(720), int32], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32], Tensor[(15, 12, 2), int64], Tensor[(12, 30), float64]) {
  %764 = fn (%var_4105: uint32, %var_4106: Tensor[(1716), uint32], %var_4109: Tensor[(12, 30), float64]) -> (Tensor[(12, 10, 9), uint32], Tensor[(15, 8, 6), bool], Tensor[(32), float64], Tensor[(720), int32], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32], Tensor[(15, 12, 2), int64], Tensor[(12, 30), float64]) {
    %746 = cast(meta[relay.Constant][52] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %747 = cast(meta[relay.Constant][53] /* ty=Tensor[(720), int32] */, dtype="int32") /* ty=Tensor[(720), int32] */;
    %748 = reshape(%746, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), float64] */;
    %749 = reshape(%747, newshape=[360, 2]) /* ty=Tensor[(360, 2), int32] */;
    %750 = @func_2651(%748, %749) /* ty=(Tensor[(4, 1, 8), float64], Tensor[(15, 8, 6), bool], Tensor[(90), int32], Tensor[(360, 2), int32]) */;
    %751 = cast(%var_4105, dtype="uint32") /* ty=uint32 */;
    %752 = cast(%var_4106, dtype="uint32") /* ty=Tensor[(1716), uint32] */;
    %753 = reshape(%751, newshape=[]) /* ty=uint32 */;
    %754 = reshape(%752, newshape=[11, 13, 12]) /* ty=Tensor[(11, 13, 12), uint32] */;
    %755 = cast(%var_4109, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
    %756 = cast(%var_4109, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
    %757 = reshape(%755, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
    %758 = reshape(%756, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
    %759 = @func_2280(%757, %758) /* ty=(Tensor[(15, 12, 2), int64],) */;
    %760 = @func_3467() /* ty=Tensor[(12, 10, 9), uint32] */;
    %761 = %750.1;
    %762 = @func_2302(%753, %754) /* ty=Tensor[(11, 13, 12), bool] */;
    %763 = %759.0;
    (%760, %761, meta[relay.Constant][52] /* ty=Tensor[(32), float64] */, meta[relay.Constant][53] /* ty=Tensor[(720), int32] */, %762, %var_4105, %var_4106, %763, %var_4109)
  };
  %764(%var_4112, %var_4113, %var_4114) /* ty=(Tensor[(12, 10, 9), uint32], Tensor[(15, 8, 6), bool], Tensor[(32), float64], Tensor[(720), int32], Tensor[(11, 13, 12), bool], uint32, Tensor[(1716), uint32], Tensor[(15, 12, 2), int64], Tensor[(12, 30), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen49/build/output.py:1438: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen49/build/output.py:1443: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  let %x: (GradCell[T], GradCell[T]) = (%l, %r);
  let %x1: GradCell[T] = match (%x) {
    (Zero(_), _) => {
      %r
    },
    (_, Zero(_)) => {
      %l
    },
    _ => {
      let %x2: T = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          let %x5: T = %x4() /* ty=T */;
          %x5
        },
        Zero(%x6: fn () -> T) => {
          let %x7: T = %x6() /* ty=T */;
          %x7
        },
      };
      let %x8: T = match (%r) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          let %x11: T = %x10() /* ty=T */;
          %x11
        },
        Zero(%x12: fn () -> T) => {
          let %x13: T = %x12() /* ty=T */;
          %x13
        },
      };
      let %x14: T = %add(%x2, %x8) /* ty=T */;
      let %x15: GradCell[T] = Raw(%x14) /* ty=GradCell[T] */;
      %x15
    },
  };
  %x1
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  let %x16: T = match (%g) {
    Raw(%x17: T) => {
      %x17
    },
    One(%x18: fn () -> T) => {
      let %x19: T = %x18() /* ty=T */;
      %x19
    },
    Zero(%x20: fn () -> T) => {
      let %x21: T = %x20() /* ty=T */;
      %x21
    },
  };
  %x16
}

def @main() -> (Tensor[(13, 13, 7), float32], ()) {
  let %x22: fn () -> (GradCell[Tensor[(13, 13, 7), float32]], ()) = fn () -> (GradCell[Tensor[(13, 13, 7), float32]], ()) {
    let %x23: Tensor[(13, 13, 7), float32] = meta[relay.Constant][0] /* ty=Tensor[(13, 13, 7), float32] */;
    let %x24: GradCell[Tensor[(13, 13, 7), float32]] = Raw(%x23) /* ty=GradCell[Tensor[(13, 13, 7), float32]] */;
    let %x25: fn () -> Tensor[(13, 13, 7), float32] = fn () -> Tensor[(13, 13, 7), float32] {
      let %x26: Tensor[(13, 13, 7), float32] = meta[relay.Constant][1] /* ty=Tensor[(13, 13, 7), float32] */;
      %x26
    };
    let %x27: GradCell[Tensor[(13, 13, 7), float32]] = One(%x25) /* ty=GradCell[Tensor[(13, 13, 7), float32]] */;
    let %x28: () = ();
    let %x29: (GradCell[Tensor[(13, 13, 7), float32]], ()) = (%x24, %x28);
    %x29
  };
  let %x30: Tensor[(13, 13, 7), float32] = meta[relay.Constant][0] /* ty=Tensor[(13, 13, 7), float32] */;
  let %x31: GradCell[Tensor[(13, 13, 7), float32]] = Raw(%x30) /* ty=GradCell[Tensor[(13, 13, 7), float32]] */;
  let %x32: fn () -> Tensor[(13, 13, 7), float32] = fn () -> Tensor[(13, 13, 7), float32] {
    let %x33: Tensor[(13, 13, 7), float32] = meta[relay.Constant][2] /* ty=Tensor[(13, 13, 7), float32] */;
    %x33
  };
  let %x34: GradCell[Tensor[(13, 13, 7), float32]] = One(%x32) /* ty=GradCell[Tensor[(13, 13, 7), float32]] */;
  let %x35: () = ();
  let %x36: (GradCell[Tensor[(13, 13, 7), float32]], ()) = (%x31, %x35);
  let %x37: () = ();
  let %x38: (Tensor[(13, 13, 7), float32], ()) = (%x30, %x37);
  %x38
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  let %x39: (GradCell[T], GradCell[T]) = (%l1, %r1);
  let %x40: GradCell[T] = match (%x39) {
    (Zero(_), _) => {
      %l1
    },
    (_, Zero(_)) => {
      %r1
    },
    (One(_), _) => {
      %r1
    },
    (_, One(_)) => {
      %l1
    },
    _ => {
      let %x41: T = match (%l1) {
        Raw(%x42: T) => {
          %x42
        },
        One(%x43: fn () -> T) => {
          let %x44: T = %x43() /* ty=T */;
          %x44
        },
        Zero(%x45: fn () -> T) => {
          let %x46: T = %x45() /* ty=T */;
          %x46
        },
      };
      let %x47: T = match (%r1) {
        Raw(%x48: T) => {
          %x48
        },
        One(%x49: fn () -> T) => {
          let %x50: T = %x49() /* ty=T */;
          %x50
        },
        Zero(%x51: fn () -> T) => {
          let %x52: T = %x51() /* ty=T */;
          %x52
        },
      };
      let %x53: T = %multiply(%x41, %x47) /* ty=T */;
      let %x54: GradCell[T] = Raw(%x53) /* ty=GradCell[T] */;
      %x54
    },
  };
  %x40
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen49/build/output.py", line 1468, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  27: TVMFuncCall
  26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  25: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  24: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::relay::Function const&, tvm::runtime::String)
  23: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  22: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::relay::Function, tvm::runtime::String)
  21: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
  20: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
  19: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
  18: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
  17: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
  16: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  15: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  12: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  11: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  10: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  9: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  8: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  7: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  6: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  5: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  4: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  2: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
  1: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/src/ir/module.cc", line 279
TVMError: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------
  Check failed: (it != type_definitions.end()) is false: There is no definition of GradCell
