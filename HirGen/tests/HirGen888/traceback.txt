==========mod==========
#[version = "0.0.5"]
def @func_7707(%var_7651: Tensor[(6, 2, 7), int16], %var_7652: Tensor[(6, 2, 7), int16], %var_7657: Tensor[(273), float64], %var_7683: Tensor[(728), float64]) -> (Tensor[(6, 2, 7), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(6, 2, 7), bool], Tensor[(550), float64], Tensor[(728), float64], Tensor[(5, 6), int16], Tensor[(6, 2, 7), float64]) {
  %0 = cast(%var_7652, dtype="int16") /* ty=Tensor[(6, 2, 7), int16] */;
  %1 = shape_of(%var_7651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_7651, dtype="int16") /* ty=Tensor[(6, 2, 7), int16] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %4 = cast(%var_7657, dtype="float64") /* ty=Tensor[(273), float64] */;
  %5 = reshape(%4, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 2, 7), int16] */, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %7 = shape_of(%var_7651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_7651, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %11 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %12 = reshape(%10, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %13 = reshape(%11, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %14 = @func_3186(%12, %13) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
  %15 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %16 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %17 = reshape(%15, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %18 = reshape(%16, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %19 = @func_3186(%17, %18) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
  %20 = cast(%var_7652, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %21 = bitwise_xor(%2, %3) /* ty=Tensor[(6, 2, 7), int16] */;
  %22 = @func_4349(%5) /* ty=Tensor[(3, 7, 13), float64] */;
  %23 = logical_or(%8, %9) /* ty=Tensor[(6, 2, 7), bool] */;
  %24 = %14.2;
  %25 = %19.4;
  %26 = atan(%20) /* ty=Tensor[(6, 2, 7), float64] */;
  (%21, %22, %var_7657, %23, %24, %var_7683, %25, %26)
}

def @func_13188(%var_13184: Tensor[(180), int16], %var_13185: Tensor[(55, 10), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(55, 10), float64], Tensor[(700), float64]) {
  %27 = @func_11962() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %28 = cast(%var_13184, dtype="int16") /* ty=Tensor[(180), int16] */;
  %29 = cast(%var_13185, dtype="float64") /* ty=Tensor[(55, 10), float64] */;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %31 = reshape(%28, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %32 = reshape(%29, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %33 = reshape(%30, newshape=[700]) /* ty=Tensor[(700), float64] */;
  %34 = @func_10727(%31, %32, %33) /* ty=(Tensor[(810), float64], Tensor[(1, 15, 10), float64], Tensor[(5, 6), int16], Tensor[(728), float64], Tensor[(1, 10, 2), float32], Tensor[(180), int16], Tensor[(550), float64], float64, Tensor[(700), float64], Tensor[(3, 15, 273), float32]) */;
  %35 = %27.0;
  %36 = %34.1;
  (%35, %36, %var_13184, %var_13185, meta[relay.Constant][1] /* ty=Tensor[(700), float64] */)
}

def @func_12272() -> (Tensor[(1, 10, 2), float32],) {
  %37 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%37,)
}

def @func_4696(%var_4692: Tensor[(2, 11, 14), uint32]) -> Tensor[(2, 11, 14), uint32] {
  %38 = cast(%var_4692, dtype="uint32") /* ty=Tensor[(2, 11, 14), uint32] */;
  %39 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2, 11, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(2, 11, 14), uint32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%40, %41) /* ty=Tensor[(2, 11, 14), uint32] */
}

def @func_11120() -> (Tensor[(1, 10, 2), float32],) {
  %42 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %43 = %42.1;
  (%43,)
}

def @func_12792(%var_12755: Tensor[(4), int32], %var_12756: Tensor[(28), int32], %var_12757: Tensor[(5, 110), float64], %var_12778: Tensor[(270), uint64]) -> (Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(5, 110), float64], Tensor[(1, 10, 2), float32], Tensor[(105, 2), uint16], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(270), uint64]) {
  %44 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %45 = cast(%var_12755, dtype="int32") /* ty=Tensor[(4), int32] */;
  %46 = cast(%var_12756, dtype="int32") /* ty=Tensor[(28), int32] */;
  %47 = cast(%var_12757, dtype="float64") /* ty=Tensor[(5, 110), float64] */;
  %48 = reshape(%45, newshape=[1, 2, 2]) /* ty=Tensor[(1, 2, 2), int32] */;
  %49 = reshape(%46, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), int32] */;
  %50 = reshape(%47, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %51 = @func_4080(%48, %49, %50) /* ty=(Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(105, 2), uint16] */, dtype="uint16") /* ty=Tensor[(105, 2), uint16] */;
  %53 = reshape(%52, newshape=[210]) /* ty=Tensor[(210), uint16] */;
  %54 = @func_10806(%53) /* ty=(Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) */;
  %55 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %56 = cast(%var_12778, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %57 = reshape(%56, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %58 = @func_9200(%57) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %59 = %44.0;
  %60 = %51.2;
  %61 = %54.2;
  %62 = %55.0;
  %63 = %58.1;
  (%59, %60, %var_12755, %var_12756, %var_12757, %61, meta[relay.Constant][3] /* ty=Tensor[(105, 2), uint16] */, %62, %63, %var_12778)
}

def @func_12691() -> (Tensor[(210), uint16],) {
  %64 = @func_12105() /* ty=(Tensor[(210), uint16],) */;
  %65 = %64.0;
  (%65,)
}

def @func_12577() -> (Tensor[(3, 15, 1), float64],) {
  %66 = @func_12093() /* ty=Tensor[(3, 15, 1), float64] */;
  (%66,)
}

def @func_16475() -> (Tensor[(2, 3, 5), uint64],) {
  %67 = @func_14948() /* ty=Tensor[(2, 3, 5), uint64] */;
  (%67,)
}

def @func_13170(%var_13165: Tensor[(3, 15, 810), float64]) -> Tensor[(3, 15, 810), uint32] {
  %68 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %69 = %68.0;
  %70 = cast(%var_13165, dtype="uint32") /* ty=Tensor[(3, 15, 810), uint32] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="uint32") /* ty=Tensor[(3, 15, 810), uint32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%72, %73) /* ty=Tensor[(3, 15, 810), uint32] */
}

def @func_5651(%var_5633: Tensor[(10, 9, 9), float64], %var_5641: Tensor[(210), uint16]) -> (Tensor[(10, 9, 9), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 6, 16), uint16], uint16, Tensor[(1, 96), uint16]) {
  %74 = cast(%var_5633, dtype="float64") /* ty=Tensor[(10, 9, 9), float64] */;
  %75 = cast(%var_5641, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %76 = reshape(%75, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %77 = cast(meta[relay.Constant][4] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 96), uint16] */, dtype="uint16") /* ty=Tensor[(1, 96), uint16] */;
  %79 = reshape(%77, newshape=[]) /* ty=uint16 */;
  %80 = reshape(%78, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), uint16] */;
  %81 = sqrt(%74) /* ty=Tensor[(10, 9, 9), float64] */;
  %82 = @func_3197(%76) /* ty=Tensor[(1, 14, 15), bool] */;
  %83 = @func_4447(%79, %80) /* ty=Tensor[(1, 6, 16), uint16] */;
  (%81, %82, %var_5641, %83, meta[relay.Constant][4] /* ty=uint16 */, meta[relay.Constant][5] /* ty=Tensor[(1, 96), uint16] */)
}

def @func_16530() -> (Tensor[(550), float64], Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64], float64) {
  %84 = @func_14707() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) */;
  %85 = @func_14193() /* ty=(Tensor[(48, 2), uint16], Tensor[(3, 15, 810), int16], Tensor[(3, 15, 1), float64]) */;
  %86 = %85.2;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %88 = cast(7.62679f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %89 = reshape(%88, newshape=[]) /* ty=float64 */;
  %90 = @func_8685(%89) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) */;
  %91 = %84.2;
  %92 = acos(%87) /* ty=Tensor[(3, 15, 1), float32] */;
  %93 = %90.0;
  (%91, %92, %93, 7.62679f64 /* ty=float64 */)
}

def @func_13632(%var_13611: Tensor[(270), uint64]) -> (Tensor[(2, 11, 14), uint32], Tensor[(3, 15, 270), bool], Tensor[(1, 10, 2), float32]) {
  %94 = cast(%var_13611, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %95 = reshape(%94, newshape=[270]) /* ty=Tensor[(270), uint64] */;
  %96 = @func_11250(%95) /* ty=(Tensor[(2, 11, 14), uint32], Tensor[(1, 14, 15), bool], Tensor[(105, 2), uint16], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) */;
  %97 = @func_12314() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
  %100 = cast(%var_13611, dtype="bool") /* ty=Tensor[(270), bool] */;
  %101 = @func_11993() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %102 = %96.0;
  %103 = not_equal(%99, %100) /* ty=Tensor[(3, 15, 270), bool] */;
  %104 = %101.0;
  (%102, %103, %104)
}

def @func_6226(%var_6219: Tensor[(5, 6, 14), int64]) -> Tensor[(5, 6, 14), bool] {
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 6, 14), int64] */, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %106 = shape_of(%var_6219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_6219, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%107, %108) /* ty=Tensor[(5, 6, 14), bool] */
}

def @func_11897() -> Tensor[(1, 10, 2), float32] {
  %109 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %109.0
}

def @func_16469() -> (Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) {
  %110 = @func_14498() /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) */;
  %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %112 = reshape(%111, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %113 = %110.1;
  %114 = @func_3197(%112) /* ty=Tensor[(1, 14, 15), bool] */;
  (%113, %114, meta[relay.Constant][7] /* ty=Tensor[(210), uint16] */)
}

def @func_681(%var_640: Tensor[(2, 3, 5), int16], %var_641: Tensor[(2, 3, 5), int16]) -> Tensor[(2, 3, 5), uint64] {
  %115 = cast(%var_641, dtype="int16") /* ty=Tensor[(2, 3, 5), int16] */;
  %116 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_640, dtype="int16") /* ty=Tensor[(2, 3, 5), int16] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %119 = bitwise_or(%117, %118) /* ty=Tensor[(2, 3, 5), int16] */;
  %120 = cast(%var_640, dtype="uint64") /* ty=Tensor[(2, 3, 5), uint64] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="uint64") /* ty=Tensor[(2, 3, 5), uint64] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%122, %123) /* ty=Tensor[(2, 3, 5), uint64] */
}

def @func_11881(%var_11859: Tensor[(1, 225), float32]) -> (Tensor[(1, 15, 10), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(3, 7, 13), float32], Tensor[(1, 225), float32], Tensor[(84), int16]) {
  %124 = cast(meta[relay.Constant][8] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %125 = reshape(%124, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %126 = cast(%var_11859, dtype="float32") /* ty=Tensor[(1, 225), float32] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(84), int16] */, dtype="int16") /* ty=Tensor[(84), int16] */;
  %128 = reshape(%126, newshape=[3, 15, 5]) /* ty=Tensor[(3, 15, 5), float32] */;
  %129 = reshape(%127, newshape=[84]) /* ty=Tensor[(84), int16] */;
  %130 = @func_10884(%128, %129) /* ty=(Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) */;
  %131 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
  %132 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %133 = @func_3197(%125) /* ty=Tensor[(1, 14, 15), bool] */;
  %134 = %130.10;
  (%131, %132, %133, meta[relay.Constant][8] /* ty=Tensor[(210), uint16] */, %134, %var_11859, meta[relay.Constant][9] /* ty=Tensor[(84), int16] */)
}

def @func_15671() -> Tensor[(1, 10, 2), float32] {
  %135 = @func_15220() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %135.0
}

def @func_8430() -> (Tensor[(1, 10, 2), float32],) {
  %136 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  %137 = asinh(%136) /* ty=Tensor[(1, 10, 2), float32] */;
  (%137,)
}

def @func_10576() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) {
  %138 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %139 = cast(meta[relay.Constant][11] /* ty=Tensor[(308), uint32] */, dtype="uint32") /* ty=Tensor[(308), uint32] */;
  %140 = reshape(%139, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %141 = %138.0;
  %142 = @func_4696(%140) /* ty=Tensor[(2, 11, 14), uint32] */;
  (%141, %142, meta[relay.Constant][11] /* ty=Tensor[(308), uint32] */)
}

def @func_17742(%var_17709: Tensor[(1, 550), float64]) -> (Tensor[(11, 10, 5), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 550), float32], Tensor[(4), int32], Tensor[(4), int32], Tensor[(7, 196), bool]) {
  %143 = cast(%var_17709, dtype="float64") /* ty=Tensor[(1, 550), float64] */;
  %144 = reshape(%143, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %145 = @func_16240() /* ty=Tensor[(3, 15, 1), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %147 = cast(%var_17709, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
  %148 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %149 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 196), bool] */, dtype="bool") /* ty=Tensor[(7, 196), bool] */;
  %150 = cast(meta[relay.Constant][13] /* ty=Tensor[(4), int32] */, dtype="int32") /* ty=Tensor[(4), int32] */;
  %151 = cast(%145, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %152 = reshape(%148, newshape=[]) /* ty=bool */;
  %153 = reshape(%149, newshape=[14, 14, 7]) /* ty=Tensor[(14, 14, 7), bool] */;
  %154 = reshape(%150, newshape=[4]) /* ty=Tensor[(4), int32] */;
  %155 = reshape(%151, newshape=[3, 15, 1]) /* ty=Tensor[(3, 15, 1), float64] */;
  %156 = @func_16992(%152, %153, %154, %155) /* ty=(Tensor[(14, 14, 7), bool], Tensor[(15, 9, 6), float64], Tensor[(4), int32], Tensor[(4), int32], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(180, 1), int16], float64, Tensor[(3, 15, ?), uint16]) */;
  %157 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 196), bool] */, dtype="bool") /* ty=Tensor[(7, 196), bool] */;
  %158 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %159 = @func_795(%144) /* ty=Tensor[(11, 10, 5), float64] */;
  %160 = @func_14681() /* ty=Tensor[(1, 10, 2), float32] */;
  %161 = floor_divide(%146, %147) /* ty=Tensor[(3, 15, 550), float32] */;
  %162 = %156.3;
  %163 = less(%157, %158) /* ty=Tensor[(7, 196), bool] */;
  (%159, %160, %161, %162, meta[relay.Constant][13] /* ty=Tensor[(4), int32] */, %163)
}

def @func_16345() -> Tensor[(1, 15, 10), float64] {
  @func_10497() /* ty=Tensor[(1, 15, 10), float64] */
}

def @func_14939() -> Tensor[(1, 10, 2), float32] {
  %164 = @func_14707() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) */;
  %164.1
}

def @func_5995(%var_5959: Tensor[(2, 1, 15), int8], %var_5960: Tensor[(2, 6, 15), int8], %var_5969: Tensor[(2, 6, 15), int8]) -> (Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  %165 = cast(%var_5959, dtype="int8") /* ty=Tensor[(2, 1, 15), int8] */;
  %166 = cast(%var_5960, dtype="int8") /* ty=Tensor[(2, 6, 15), int8] */;
  %167 = cast(%var_5969, dtype="uint16") /* ty=Tensor[(2, 6, 15), uint16] */;
  %168 = shape_of(%var_5960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_5960, dtype="uint16") /* ty=Tensor[(2, 6, 15), uint16] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %171 = cast(meta[relay.Constant][14] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %172 = reshape(%171, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %173 = multiply(%165, %166) /* ty=Tensor[(2, 6, 15), int8] */;
  %174 = maximum(%169, %170) /* ty=Tensor[(2, 6, 15), uint16] */;
  %175 = @func_4349(%172) /* ty=Tensor[(3, 7, 13), float64] */;
  (%173, %174, %175, meta[relay.Constant][14] /* ty=Tensor[(273), float64] */)
}

def @func_11361() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 3, 6), int64], Tensor[(54), int64], Tensor[(550), float64]) {
  %176 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %177 = cast(meta[relay.Constant][15] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %178 = cast(meta[relay.Constant][16] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %179 = cast(meta[relay.Constant][16] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %180 = reshape(%177, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
  %181 = reshape(%178, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %182 = reshape(%179, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %183 = @func_9564(%180, %181, %182) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
  %184 = %176.0;
  %185 = %183.0;
  (%184, %185, meta[relay.Constant][15] /* ty=Tensor[(54), int64] */, meta[relay.Constant][16] /* ty=Tensor[(550), float64] */)
}

def @func_10727(%var_10689: Tensor[(180), int16], %var_10690: Tensor[(550), float64], %var_10692: Tensor[(700), float64]) -> (Tensor[(810), float64], Tensor[(1, 15, 10), float64], Tensor[(5, 6), int16], Tensor[(728), float64], Tensor[(1, 10, 2), float32], Tensor[(180), int16], Tensor[(550), float64], float64, Tensor[(700), float64], Tensor[(3, 15, 273), float32]) {
  %186 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %187 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %188 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %189 = reshape(%187, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %190 = reshape(%188, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %191 = @func_3186(%189, %190) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
  %192 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %193 = %192.1;
  %194 = cast(%var_10689, dtype="int16") /* ty=Tensor[(180), int16] */;
  %195 = cast(%var_10689, dtype="int16") /* ty=Tensor[(180), int16] */;
  %196 = cast(%var_10690, dtype="float64") /* ty=Tensor[(550), float64] */;
  %197 = cast(-3.43402f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %198 = cast(%var_10692, dtype="float64") /* ty=Tensor[(700), float64] */;
  %199 = reshape(%194, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %200 = reshape(%195, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %201 = reshape(%196, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %202 = reshape(%197, newshape=[]) /* ty=float64 */;
  %203 = reshape(%198, newshape=[350, 2]) /* ty=Tensor[(350, 2), float64] */;
  %204 = @func_6952(%199, %200, %201, %202, %203) /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) */;
  %205 = %204.10;
  %206 = cast(%193, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %207 = cast(%205, dtype="float32") /* ty=Tensor[(273), float32] */;
  %208 = %186.0;
  %209 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
  %210 = %191.4;
  %211 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
  %212 = floor_divide(%206, %207) /* ty=Tensor[(3, 15, 273), float32] */;
  (%208, %209, %210, meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, %211, %var_10689, %var_10690, -3.43402f64 /* ty=float64 */, %var_10692, %212)
}

def @func_16200() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64]) {
  %213 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %214 = @func_14498() /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) */;
  %215 = @func_13900() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %216 = %213.0;
  %217 = %214.1;
  %218 = %215.0;
  (%216, %217, %218)
}

def @func_13019() -> (Tensor[(3, 15, 1), float64],) {
  %219 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %220 = %219.1;
  (%220,)
}

def @func_10097(%var_10043: float64, %var_10044: Tensor[(5, 140), float64], %var_10051: Tensor[(550), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(3, 3, 6), float32], Tensor[(54, 1), int64], Tensor[(550), float64], Tensor[(2, 15, 9), uint64], Tensor[(2, 15, 9), uint32], Tensor[(5, 140), float32]) {
  %221 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %222 = cast(%var_10043, dtype="float64") /* ty=float64 */;
  %223 = cast(%var_10044, dtype="float64") /* ty=Tensor[(5, 140), float64] */;
  %224 = reshape(%222, newshape=[]) /* ty=float64 */;
  %225 = reshape(%223, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %226 = cast(meta[relay.Constant][18] /* ty=Tensor[(54, 1), int64] */, dtype="int64") /* ty=Tensor[(54, 1), int64] */;
  %227 = cast(%var_10051, dtype="float64") /* ty=Tensor[(550), float64] */;
  %228 = cast(%var_10051, dtype="float64") /* ty=Tensor[(550), float64] */;
  %229 = reshape(%226, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
  %230 = reshape(%227, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %231 = reshape(%228, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %232 = @func_9564(%229, %230, %231) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
  %233 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
  %236 = reshape(%235, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %237 = @func_9200(%236) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %238 = cast(%var_10044, dtype="float32") /* ty=Tensor[(5, 140), float32] */;
  %239 = %221.0;
  %240 = @func_2330(%224, %225) /* ty=Tensor[(14, 10, 5), bool] */;
  %241 = %232.1;
  %242 = %237.2;
  %243 = atan(%238) /* ty=Tensor[(5, 140), float32] */;
  (%239, %240, %var_10043, %241, meta[relay.Constant][18] /* ty=Tensor[(54, 1), int64] */, %var_10051, %234, %242, %243)
}

def @func_6071(%var_6064: Tensor[(15, 9, 6), float64]) -> Tensor[(15, 9, 6), float64] {
  %244 = cast(%var_6064, dtype="float64") /* ty=Tensor[(15, 9, 6), float64] */;
  acosh(%244) /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_14193() -> (Tensor[(48, 2), uint16], Tensor[(3, 15, 810), int16], Tensor[(3, 15, 1), float64]) {
  %245 = cast(meta[relay.Constant][19] /* ty=Tensor[(48, 2), uint16] */, dtype="uint16") /* ty=Tensor[(48, 2), uint16] */;
  %246 = reshape(%245, newshape=[96]) /* ty=Tensor[(96), uint16] */;
  %247 = @func_9482(%246) /* ty=(Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) */;
  %248 = %247.0;
  %249 = @func_13250() /* ty=Tensor[(3, 15, 1), float64] */;
  %250 = cast(%248, dtype="int16") /* ty=Tensor[(810), int16] */;
  %251 = cast(%249, dtype="int16") /* ty=Tensor[(3, 15, 1), int16] */;
  %252 = bitwise_and(%250, %251) /* ty=Tensor[(3, 15, 810), int16] */;
  %253 = @func_11930() /* ty=Tensor[(3, 15, 1), float64] */;
  (meta[relay.Constant][19] /* ty=Tensor[(48, 2), uint16] */, %252, %253)
}

def @func_8704() -> (Tensor[(1, 10, 2), float32],) {
  %254 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %255 = %254.0;
  (%255,)
}

def @func_15298() -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32]) {
  %256 = @func_15220() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %257 = @func_12093() /* ty=Tensor[(3, 15, 1), float64] */;
  %258 = %256.1;
  (%257, %258)
}

def @func_11157() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %259 = @func_11120() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %260 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %261 = %259.0;
  %262 = %260.0;
  (%261, %262)
}

def @func_11311() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 810), float64], Tensor[(28), int32], Tensor[(4), int32], Tensor[(14, 2), int32]) {
  %263 = @func_10940() /* ty=Tensor[(1, 10, 2), float32] */;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  %265 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %266 = cast(meta[relay.Constant][20] /* ty=Tensor[(4), int32] */, dtype="int32") /* ty=Tensor[(4), int32] */;
  %267 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 2), int32] */;
  %268 = reshape(%266, newshape=[4]) /* ty=Tensor[(4), int32] */;
  %269 = reshape(%267, newshape=[28]) /* ty=Tensor[(28), int32] */;
  %270 = @func_10264(%268, %269) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) */;
  %271 = cos(%264) /* ty=Tensor[(1, 10, 2), float32] */;
  %272 = %265.0;
  %273 = %270.3;
  (%271, %272, %273, meta[relay.Constant][20] /* ty=Tensor[(4), int32] */, meta[relay.Constant][21] /* ty=Tensor[(14, 2), int32] */)
}

def @func_11581() -> (Tensor[(9, 10, 2), bool], Tensor[(1, 10, 2), float32]) {
  %274 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %275 = %274.0;
  %276 = cast(%275, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  %277 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 10, 2), float32] */, dtype="bool") /* ty=Tensor[(9, 10, 2), bool] */;
  %278 = not_equal(%276, %277) /* ty=Tensor[(9, 10, 2), bool] */;
  %279 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%278, %279)
}

def @func_13117() -> (Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) {
  %280 = @func_12548() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %281 = @func_12441() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) */;
  %282 = %280.0;
  %283 = %281.1;
  (%282, %283)
}

def @func_11053(%var_11048: Tensor[(143, 1), float32], %var_11050: bool) -> (Tensor[(270), uint64], Tensor[(1, 10, 2), float64], Tensor[(3, 60), int16], Tensor[(143, 1), float32], Tensor[(208), float32], bool) {
  %284 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %285 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  %287 = cast(%var_11048, dtype="float32") /* ty=Tensor[(143, 1), float32] */;
  %288 = %284.1;
  %289 = cast(%288, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %290 = cast(meta[relay.Constant][23] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %291 = cast(%var_11050, dtype="bool") /* ty=bool */;
  %292 = reshape(%287, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float32] */;
  %293 = reshape(%289, newshape=[270]) /* ty=Tensor[(270), uint64] */;
  %294 = reshape(%290, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %295 = reshape(%291, newshape=[]) /* ty=bool */;
  %296 = @func_10020(%292, %293, %294, %295) /* ty=(Tensor[(1, 180), int16], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(3, 60), int16], Tensor[(?, 13, 11), float32], Tensor[(3, 7, 13), float64], bool, Tensor[(2, 15, 9), uint64]) */;
  %297 = asin(%286) /* ty=Tensor[(1, 10, 2), float64] */;
  %298 = %296.3;
  (%288, %297, %298, %var_11048, meta[relay.Constant][23] /* ty=Tensor[(208), float32] */, %var_11050)
}

def @func_17142(%var_17131: Tensor[(3, 15, 9), float64], %var_17138: Tensor[(270), uint64]) -> (Tensor[(3, 15, 9), bool], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64]) {
  %299 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
  %302 = cast(%var_17131, dtype="bool") /* ty=Tensor[(3, 15, 9), bool] */;
  %303 = cast(%var_17138, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %304 = reshape(%303, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %305 = @func_6155(%304) /* ty=(Tensor[(2, 15, 9), uint64],) */;
  %306 = not_equal(%301, %302) /* ty=Tensor[(3, 15, 9), bool] */;
  %307 = %305.0;
  (%306, %307, %var_17138)
}

def @func_12072(%var_12059: Tensor[(11, 10, 2), float32]) -> (Tensor[(11, 10, 2), bool],) {
  %308 = @func_11962() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %309 = %308.1;
  %310 = cast(%309, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  %311 = cast(%var_12059, dtype="bool") /* ty=Tensor[(11, 10, 2), bool] */;
  %312 = less_equal(%310, %311) /* ty=Tensor[(11, 10, 2), bool] */;
  (%312,)
}

def @func_8450() -> (Tensor[(3, 15, 1), float64],) {
  %313 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %314 = cosh(%313) /* ty=Tensor[(3, 15, 1), float64] */;
  (%314,)
}

def @func_15269() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 5), uint8]) {
  %315 = @func_13644() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %316 = @func_13362() /* ty=(Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) */;
  %317 = %315.0;
  %318 = %316.0;
  (%317, %318)
}

def @func_13362() -> (Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) {
  %319 = @func_12093() /* ty=Tensor[(3, 15, 1), float64] */;
  %320 = cast(%319, dtype="uint8") /* ty=Tensor[(3, 15, 1), uint8] */;
  %321 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 15, 5), float64] */, dtype="uint8") /* ty=Tensor[(3, 15, 5), uint8] */;
  %322 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 15, 5), float64] */, dtype="float32") /* ty=Tensor[(3, 15, 5), float32] */;
  %323 = cast(%319, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %324 = logical_xor(%320, %321) /* ty=Tensor[(3, 15, 5), uint8] */;
  %325 = atan(%322) /* ty=Tensor[(3, 15, 5), float32] */;
  %326 = tan(%323) /* ty=Tensor[(3, 15, 1), float64] */;
  (%324, %325, %326)
}

def @func_10163(%var_10143: Tensor[(30), int16]) -> (Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) {
  %327 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %328 = cast(%var_10143, dtype="int16") /* ty=Tensor[(30), int16] */;
  %329 = cast(%var_10143, dtype="int16") /* ty=Tensor[(30), int16] */;
  %330 = reshape(%328, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %331 = reshape(%329, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %332 = %327.3;
  %333 = @func_681(%330, %331) /* ty=Tensor[(2, 3, 5), uint64] */;
  (%332, %333, %var_10143)
}

def @func_11962() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %334 = @func_11897() /* ty=Tensor[(1, 10, 2), float32] */;
  %335 = @func_11517() /* ty=Tensor[(1, 10, 2), float32] */;
  (%334, %335)
}

def @func_17781() -> (Tensor[(2, 16, 2), float64], Tensor[(64), float64], Tensor[(?, 15, 10), bool]) {
  %336 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %337 = reshape(%336, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float64] */;
  %338 = @func_13462(%337) /* ty=(Tensor[(2, 16, 2), float64], Tensor[(1, 10, 2), float32]) */;
  %339 = @func_16345() /* ty=Tensor[(1, 15, 10), float64] */;
  %340 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%339, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %344 = %338.0;
  %345 = not_equal(%342, %343) /* ty=Tensor[(?, 15, 10), bool] */;
  (%344, meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, %345)
}

def @func_16631() -> (Tensor[(180), int16],) {
  %346 = @func_16045() /* ty=(Tensor[(180), int16], Tensor[(1, 10, 2), float32]) */;
  %347 = %346.0;
  (%347,)
}

def @func_16781() -> Tensor[(1, 10, 2), float32] {
  @func_15671() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_13539(%var_13486: Tensor[(273), float64]) -> (Tensor[(308), uint32], Tensor[(3, 7, 13), bool], Tensor[(3, 15, 1), float64]) {
  %348 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %349 = cast(%var_13486, dtype="float64") /* ty=Tensor[(273), float64] */;
  %350 = reshape(%349, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %351 = @func_4349(%350) /* ty=Tensor[(3, 7, 13), float64] */;
  %352 = cast(%var_13486, dtype="bool") /* ty=Tensor[(273), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(3, 7, 13), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = %348.2;
  %357 = not_equal(%354, %355) /* ty=Tensor[(3, 7, 13), bool] */;
  %358 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%356, %357, %358)
}

def @func_8833() -> (Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) {
  %359 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %360 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 308), uint32] */, dtype="uint32") /* ty=Tensor[(1, 308), uint32] */;
  %361 = reshape(%360, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %362 = %359.4;
  %363 = @func_4696(%361) /* ty=Tensor[(2, 11, 14), uint32] */;
  (%362, %363, meta[relay.Constant][28] /* ty=Tensor[(1, 308), uint32] */)
}

def @func_6155(%var_6142: Tensor[(2, 15, 9), uint64]) -> (Tensor[(2, 15, 9), uint64],) {
  %364 = cast(%var_6142, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
  %365 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(2, 15, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 15, 9), uint64] */, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %368 = logical_xor(%366, %367) /* ty=Tensor[(2, 15, 9), uint64] */;
  (%368,)
}

def @func_15794() -> (Tensor[(3, 15, 1), float64],) {
  %369 = @func_11993() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %370 = %369.1;
  (%370,)
}

def @func_10531() -> Tensor[(1, 10, 2), float32] {
  %371 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %371.0
}

def @func_15916(%var_15903: Tensor[(1, 810), float64], %var_15904: Tensor[(1, 210), uint16]) -> (Tensor[(3, 15, 1), float64], Tensor[(210), uint16], Tensor[(1, 810), float64], Tensor[(1, 210), uint16]) {
  %372 = @func_13900() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %373 = %372.0;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %375 = cast(%var_15903, dtype="float64") /* ty=Tensor[(1, 810), float64] */;
  %376 = cast(%var_15904, dtype="uint16") /* ty=Tensor[(1, 210), uint16] */;
  %377 = reshape(%375, newshape=[10, 9, 9]) /* ty=Tensor[(10, 9, 9), float64] */;
  %378 = reshape(%376, newshape=[210]) /* ty=Tensor[(210), uint16] */;
  %379 = @func_5651(%377, %378) /* ty=(Tensor[(10, 9, 9), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 6, 16), uint16], uint16, Tensor[(1, 96), uint16]) */;
  %380 = sigmoid(%374) /* ty=Tensor[(3, 15, 1), float64] */;
  %381 = %379.2;
  (%380, %381, %var_15903, %var_15904)
}

def @func_10884(%var_10819: Tensor[(3, 15, 5), float32], %var_10845: Tensor[(84), int16]) -> (Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) {
  %382 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %383 = %382.2;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %385 = cast(%var_10819, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
  %386 = cast(%383, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %387 = cast(meta[relay.Constant][30] /* ty=Tensor[(420), int64] */, dtype="int64") /* ty=Tensor[(420), int64] */;
  %388 = reshape(%387, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), int64] */;
  %389 = cast(meta[relay.Constant][30] /* ty=Tensor[(420), int64] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %390 = cast(%383, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
  %391 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %392 = cast(meta[relay.Constant][33] /* ty=Tensor[(308), uint32] */, dtype="uint32") /* ty=Tensor[(308), uint32] */;
  %393 = reshape(%392, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %394 = cast(%var_10845, dtype="int16") /* ty=Tensor[(84), int16] */;
  %395 = cast(%var_10845, dtype="int16") /* ty=Tensor[(84), int16] */;
  %396 = cast(meta[relay.Constant][31] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %397 = cast(meta[relay.Constant][32] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %398 = reshape(%394, newshape=[6, 2, 7]) /* ty=Tensor[(6, 2, 7), int16] */;
  %399 = reshape(%395, newshape=[6, 2, 7]) /* ty=Tensor[(6, 2, 7), int16] */;
  %400 = reshape(%396, newshape=[273]) /* ty=Tensor[(273), float64] */;
  %401 = reshape(%397, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %402 = @func_7707(%398, %399, %400, %401) /* ty=(Tensor[(6, 2, 7), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(6, 2, 7), bool], Tensor[(550), float64], Tensor[(728), float64], Tensor[(5, 6), int16], Tensor[(6, 2, 7), float64]) */;
  %403 = %402.1;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
  %405 = power(%384, %385) /* ty=Tensor[(3, 15, 5), float64] */;
  %406 = sin(%386) /* ty=Tensor[(3, 15, 1), float64] */;
  %407 = @func_6226(%388) /* ty=Tensor[(5, 6, 14), bool] */;
  %408 = less(%389, %390) /* ty=Tensor[(3, 15, 420), bool] */;
  %409 = %391.1;
  %410 = @func_4696(%393) /* ty=Tensor[(2, 11, 14), uint32] */;
  %411 = sigmoid(%404) /* ty=Tensor[(3, 7, 13), float32] */;
  (%405, %406, %407, %var_10845, meta[relay.Constant][31] /* ty=Tensor[(273), float64] */, meta[relay.Constant][32] /* ty=Tensor[(728), float64] */, %408, %409, %410, meta[relay.Constant][33] /* ty=Tensor[(308), uint32] */, %411)
}

def @func_15566() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float32], Tensor[(1, 14, 15), bool]) {
  %412 = @func_13362() /* ty=(Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) */;
  %413 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %414 = %413.1;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %416 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
  %417 = %412.2;
  %418 = exp(%415) /* ty=Tensor[(3, 15, 1), float32] */;
  %419 = %416.1;
  (%417, %418, %419)
}

def @func_11930() -> Tensor[(3, 15, 1), float64] {
  @func_10421() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_13074() -> Tensor[(1, 10, 2), float32] {
  %420 = @func_12272() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %420.0
}

def @func_14256() -> Tensor[(1, 10, 2), float32] {
  %421 = @func_11157() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %421.1
}

def @func_12890() -> Tensor[(15, 9, 6), float64] {
  %422 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %422.3
}

def @func_17007() -> (Tensor[(1, 10, 2), float32],) {
  %423 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
  %424 = %423.1;
  (%424,)
}

def @func_4080(%var_4070: Tensor[(1, 2, 2), int32], %var_4071: Tensor[(7, 2, 2), int32], %var_4077: Tensor[(550), float64]) -> (Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) {
  %425 = cast(%var_4070, dtype="int32") /* ty=Tensor[(1, 2, 2), int32] */;
  %426 = cast(%var_4071, dtype="int32") /* ty=Tensor[(7, 2, 2), int32] */;
  %427 = cast(%var_4077, dtype="float64") /* ty=Tensor[(550), float64] */;
  %428 = reshape(%427, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %429 = bitwise_or(%425, %426) /* ty=Tensor[(7, 2, 2), int32] */;
  %430 = @func_795(%428) /* ty=Tensor[(11, 10, 5), float64] */;
  (%429, %430, %var_4077)
}

def @func_13250() -> Tensor[(3, 15, 1), float64] {
  %431 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %431.0
}

def @func_14469() -> (Tensor[(3, 15, 810), float64], Tensor[(?, 10, 2), int8], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 7, 13), bool], Tensor[(273), float64]) {
  %432 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %433 = @func_10940() /* ty=Tensor[(1, 10, 2), float32] */;
  %434 = @func_12660() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) */;
  %435 = %434.0;
  %436 = cast(%435, dtype="int8") /* ty=Tensor[(1, 10, 2), int8] */;
  %437 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%433, dtype="int8") /* ty=Tensor[(1, 10, 2), int8] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %440 = @func_12577() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %441 = @func_11157() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %442 = cast(meta[relay.Constant][34] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %443 = reshape(%442, newshape=[273]) /* ty=Tensor[(273), float64] */;
  %444 = @func_13539(%443) /* ty=(Tensor[(308), uint32], Tensor[(3, 7, 13), bool], Tensor[(3, 15, 1), float64]) */;
  %445 = %432.0;
  %446 = bitwise_xor(%438, %439) /* ty=Tensor[(?, 10, 2), int8] */;
  %447 = %440.0;
  %448 = %441.0;
  %449 = %444.1;
  (%445, %446, %447, %448, %449, meta[relay.Constant][34] /* ty=Tensor[(273), float64] */)
}

def @func_15366() -> Tensor[(3, 15, 1), float64] {
  @func_13250() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_14615() -> (Tensor[(210), uint16], Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(3, 15, 1), float64]) {
  %450 = @func_14279() /* ty=(Tensor[(210), uint16],) */;
  %451 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %452 = cast(meta[relay.Constant][35] /* ty=Tensor[(4), int32] */, dtype="int32") /* ty=Tensor[(4), int32] */;
  %453 = cast(meta[relay.Constant][36] /* ty=Tensor[(28), int32] */, dtype="int32") /* ty=Tensor[(28), int32] */;
  %454 = cast(meta[relay.Constant][37] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %455 = reshape(%452, newshape=[1, 2, 2]) /* ty=Tensor[(1, 2, 2), int32] */;
  %456 = reshape(%453, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), int32] */;
  %457 = reshape(%454, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %458 = @func_4080(%455, %456, %457) /* ty=(Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) */;
  %459 = @func_14469() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(?, 10, 2), int8], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 7, 13), bool], Tensor[(273), float64]) */;
  %460 = %450.0;
  %461 = %451.0;
  %462 = %458.2;
  %463 = %459.2;
  (%460, %461, %462, meta[relay.Constant][35] /* ty=Tensor[(4), int32] */, meta[relay.Constant][36] /* ty=Tensor[(28), int32] */, meta[relay.Constant][37] /* ty=Tensor[(550), float64] */, %463)
}

def @func_9948() -> (Tensor[(3, 15, 1), float64],) {
  %464 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%464,)
}

def @func_13900() -> (Tensor[(3, 15, 1), float64],) {
  %465 = @func_13250() /* ty=Tensor[(3, 15, 1), float64] */;
  (%465,)
}

def @func_13462(%var_13453: Tensor[(2, 16, 2), float64]) -> (Tensor[(2, 16, 2), float64], Tensor[(1, 10, 2), float32]) {
  %466 = cast(%var_13453, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
  %467 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %468 = atanh(%466) /* ty=Tensor[(2, 16, 2), float64] */;
  %469 = %467.0;
  (%468, %469)
}

def @func_14906() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %470 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
  %471 = %470.1;
  %472 = @func_14321() /* ty=Tensor[(1, 10, 2), float32] */;
  (%471, %472)
}

def @func_15720() -> (Tensor[(550), float64], Tensor[(4, 13, 11), float64]) {
  %473 = @func_15350() /* ty=(Tensor[(550), float64], Tensor[(1, 10, 2), float32]) */;
  %474 = @func_11382() /* ty=(Tensor[(4, 13, 11), float64],) */;
  %475 = %473.0;
  %476 = %474.0;
  (%475, %476)
}

def @func_10020(%var_9962: Tensor[(1, 13, 11), float32], %var_9971: Tensor[(270), uint64], %var_9972: Tensor[(208), float32], %var_10011: bool) -> (Tensor[(1, 180), int16], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(3, 60), int16], Tensor[(?, 13, 11), float32], Tensor[(3, 7, 13), float64], bool, Tensor[(2, 15, 9), uint64]) {
  %477 = cast(%var_9971, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %478 = cast(%var_9972, dtype="float32") /* ty=Tensor[(208), float32] */;
  %479 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 60), int16] */, dtype="int16") /* ty=Tensor[(3, 60), int16] */;
  %480 = reshape(%477, newshape=[270]) /* ty=Tensor[(270), uint64] */;
  %481 = reshape(%478, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %482 = reshape(%479, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
  %483 = @func_9860(%480, %481, %482) /* ty=(Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) */;
  %484 = cast(%var_9962, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %485 = tan(%484) /* ty=Tensor[(1, 13, 11), float32] */;
  %486 = cast(%var_9962, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %490 = floor_divide(%488, %489) /* ty=Tensor[(?, 13, 11), float32] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(?, 13, 11), float64] */;
  %492 = sin(%491) /* ty=Tensor[(?, 13, 11), float64] */;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(?, 13, 11), float32] */;
  %494 = cast(%var_10011, dtype="bool") /* ty=bool */;
  %495 = reshape(%494, newshape=[]) /* ty=bool */;
  %496 = @func_7989(%495) /* ty=(Tensor[(12, 5, 8), bool], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */;
  %497 = cast(%var_9971, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %498 = reshape(%497, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %499 = @func_6155(%498) /* ty=(Tensor[(2, 15, 9), uint64],) */;
  %500 = %483.5;
  %501 = sinh(%493) /* ty=Tensor[(?, 13, 11), float32] */;
  %502 = %496.1;
  %503 = %499.0;
  (%500, %var_9971, %var_9972, meta[relay.Constant][38] /* ty=Tensor[(3, 60), int16] */, %501, %502, %var_10011, %503)
}

def @func_16843() -> (Tensor[(3, 15, 1), float64],) {
  %504 = @func_15485() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) */;
  %505 = %504.3;
  (%505,)
}

def @func_17681() -> (Tensor[(2, 3, 5), uint64],) {
  %506 = @func_17574() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %507 = %506.0;
  (%507,)
}

def @func_18005() -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) {
  %508 = @func_17681() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %509 = @func_16496() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %510 = %508.0;
  %511 = %509.0;
  (%510, %511)
}

def @func_12314() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) {
  %512 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %513 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %514 = %513.0;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(3, 15, 810), float32] */;
  %516 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %517 = %512.1;
  %518 = sqrt(%515) /* ty=Tensor[(3, 15, 810), float32] */;
  %519 = %516.1;
  (%517, %518, %519)
}

def @func_11729(%var_11617: Tensor[(210), uint16], %var_11640: Tensor[(270), uint64], %var_11676: bool, %var_11726: Tensor[(10, 3), int8], %var_11727: Tensor[(180), int8]) -> (Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32], Tensor[(210), uint16], Tensor[(270), uint64], Tensor[(1, 14, 15), bool], bool, Tensor[(13, 11), float32], bool, Tensor[(14, 10, 5), bool], Tensor[(700), float64], Tensor[(?, 10, 2), int64], Tensor[(308), uint32], Tensor[(550), float64], Tensor[(3, 18), int64], Tensor[(550), float64], Tensor[(2, 6, 15), int8], Tensor[(10, 3), int8], Tensor[(180), int8]) {
  %520 = cast(%var_11617, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %521 = reshape(%520, newshape=[210]) /* ty=Tensor[(210), uint16] */;
  %522 = @func_10806(%521) /* ty=(Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) */;
  %523 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
  %524 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 11), float32] */;
  %525 = cast(%var_11676, dtype="bool") /* ty=bool */;
  %526 = reshape(%524, newshape=[143, 1]) /* ty=Tensor[(143, 1), float32] */;
  %527 = reshape(%525, newshape=[]) /* ty=bool */;
  %528 = @func_11053(%526, %527) /* ty=(Tensor[(270), uint64], Tensor[(1, 10, 2), float64], Tensor[(3, 60), int16], Tensor[(143, 1), float32], Tensor[(208), float32], bool) */;
  %529 = %528.5;
  %530 = cast(%529, dtype="float64") /* ty=float64 */;
  %531 = cast(meta[relay.Constant][40] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %532 = reshape(%530, newshape=[]) /* ty=float64 */;
  %533 = reshape(%531, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %534 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  %535 = cast(%var_11640, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %536 = reshape(%535, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %537 = @func_9200(%536) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %538 = %537.1;
  %539 = cast(%538, dtype="int64") /* ty=Tensor[(1, 10, 2), int64] */;
  %540 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%534, dtype="int64") /* ty=Tensor[(1, 10, 2), int64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %543 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %544 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 18), int64] */, dtype="int64") /* ty=Tensor[(3, 18), int64] */;
  %545 = cast(meta[relay.Constant][42] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %546 = cast(meta[relay.Constant][42] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %547 = reshape(%544, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
  %548 = reshape(%545, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %549 = reshape(%546, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %550 = @func_9564(%547, %548, %549) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
  %551 = cast(%var_11726, dtype="int8") /* ty=Tensor[(10, 3), int8] */;
  %552 = cast(%var_11727, dtype="int8") /* ty=Tensor[(180), int8] */;
  %553 = cast(%var_11727, dtype="int8") /* ty=Tensor[(180), int8] */;
  %554 = reshape(%551, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), int8] */;
  %555 = reshape(%552, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
  %556 = reshape(%553, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
  %557 = @func_5995(%554, %555, %556) /* ty=(Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */;
  %558 = @func_11517() /* ty=Tensor[(1, 10, 2), float32] */;
  %559 = %522.3;
  %560 = %523.1;
  %561 = @func_2330(%532, %533) /* ty=Tensor[(14, 10, 5), bool] */;
  %562 = maximum(%541, %542) /* ty=Tensor[(?, 10, 2), int64] */;
  %563 = %543.2;
  %564 = %550.2;
  %565 = %557.0;
  (%558, %559, %var_11617, %var_11640, %560, %529, meta[relay.Constant][39] /* ty=Tensor[(13, 11), float32] */, %var_11676, %561, meta[relay.Constant][40] /* ty=Tensor[(700), float64] */, %562, %563, %564, meta[relay.Constant][41] /* ty=Tensor[(3, 18), int64] */, meta[relay.Constant][42] /* ty=Tensor[(550), float64] */, %565, %var_11726, %var_11727)
}

def @func_16240() -> Tensor[(3, 15, 1), float64] {
  %566 = @func_14089() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(2, 15, 9), uint32], Tensor[(270), uint64]) */;
  %566.0
}

def @func_12041() -> (Tensor[(?, 10, 2), uint8],) {
  %567 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %568 = %567.0;
  %569 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
  %570 = cast(%569, dtype="uint8") /* ty=Tensor[(1, 10, 2), uint8] */;
  %571 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%568, dtype="uint8") /* ty=Tensor[(1, 10, 2), uint8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %574 = minimum(%572, %573) /* ty=Tensor[(?, 10, 2), uint8] */;
  (%574,)
}

def @func_8908() -> (Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) {
  %575 = cast(meta[relay.Constant][43] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %576 = reshape(%575, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %577 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %578 = @func_3197(%576) /* ty=Tensor[(1, 14, 15), bool] */;
  (%577, %578, meta[relay.Constant][43] /* ty=Tensor[(210), uint16] */)
}

def @func_18495() -> (Tensor[(3, 15, 1), float64],) {
  %579 = @func_13900() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %580 = %579.0;
  (%580,)
}

def @func_14707() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) {
  %581 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %582 = cast(meta[relay.Constant][44] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %583 = reshape(%582, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %584 = @func_9730(%583) /* ty=(Tensor[(27, 2), int64], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(208), uint8], Tensor[(15, 9, 6), float64], Tensor[(810), float32]) */;
  %585 = %581.0;
  %586 = %584.2;
  (%585, %586, meta[relay.Constant][44] /* ty=Tensor[(550), float64] */)
}

def @func_15097() -> (Tensor[(3, 15, 1), float32],) {
  %587 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %588 = %587.1;
  (%588,)
}

def @func_17248(%var_17243: Tensor[(3, 15, 96), bool]) -> Tensor[(3, 15, 96), bool] {
  %589 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %590 = %589.0;
  %591 = @func_13410() /* ty=(Tensor[(96), uint16],) */;
  %592 = %591.0;
  %593 = cast(%590, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
  %594 = cast(%592, dtype="bool") /* ty=Tensor[(96), bool] */;
  %595 = equal(%593, %594) /* ty=Tensor[(3, 15, 96), bool] */;
  %596 = cast(%var_17243, dtype="bool") /* ty=Tensor[(3, 15, 96), bool] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="bool") /* ty=Tensor[(3, 15, 96), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%598, %599) /* ty=Tensor[(3, 15, 96), bool] */
}

def @func_15131() -> (Tensor[(96), uint16],) {
  %600 = @func_13117() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) */;
  %601 = %600.1;
  (%601,)
}

def @func_14321() -> Tensor[(1, 10, 2), float32] {
  %602 = @func_12272() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %602.0
}

def @func_8685(%var_8635: float64) -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) {
  %603 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %604 = cast(%var_8635, dtype="float64") /* ty=float64 */;
  %605 = cast(meta[relay.Constant][45] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %606 = reshape(%604, newshape=[]) /* ty=float64 */;
  %607 = reshape(%605, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %608 = cast(meta[relay.Constant][46] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %609 = cast(meta[relay.Constant][46] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %610 = reshape(%608, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %611 = reshape(%609, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %612 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %613 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %614 = %603.0;
  %615 = @func_2330(%606, %607) /* ty=Tensor[(14, 10, 5), bool] */;
  %616 = @func_681(%610, %611) /* ty=Tensor[(2, 3, 5), uint64] */;
  %617 = %612.0;
  (%613, %614, %615, %var_8635, meta[relay.Constant][45] /* ty=Tensor[(700), float64] */, %616, meta[relay.Constant][46] /* ty=Tensor[(30), int16] */, %617)
}

def @func_16294() -> (Tensor[(1, 10, 2), float32], Tensor[(5, 6, 14), bool], Tensor[(420), int64]) {
  %618 = cast(meta[relay.Constant][47] /* ty=Tensor[(420), int64] */, dtype="int64") /* ty=Tensor[(420), int64] */;
  %619 = reshape(%618, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), int64] */;
  %620 = @func_14321() /* ty=Tensor[(1, 10, 2), float32] */;
  %621 = @func_6226(%619) /* ty=Tensor[(5, 6, 14), bool] */;
  (%620, %621, meta[relay.Constant][47] /* ty=Tensor[(420), int64] */)
}

def @func_16677() -> (Tensor[(210), uint16], Tensor[(4, 13, 11), float64]) {
  %622 = @func_12105() /* ty=(Tensor[(210), uint16],) */;
  %623 = %622.0;
  %624 = @func_15872() /* ty=Tensor[(4, 13, 11), float64] */;
  (%623, %624)
}

def @func_12660() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) {
  %625 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %626 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %627 = %625.0;
  %628 = %626.1;
  (%627, %628)
}

def @func_8596() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
  %629 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %630 = %629.0;
  %631 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%630, %631)
}

def @func_9262() -> (Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) {
  %632 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %633 = %632.0;
  %634 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %635 = %634.0;
  %636 = cast(%633, dtype="int32") /* ty=Tensor[(3, 15, 1), int32] */;
  %637 = cast(%635, dtype="int32") /* ty=Tensor[(810), int32] */;
  %638 = minimum(%636, %637) /* ty=Tensor[(3, 15, 810), int32] */;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(3, 15, 810), float64] */;
  %640 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %641 = sin(%639) /* ty=Tensor[(3, 15, 810), float64] */;
  %642 = %640.2;
  (%641, %642)
}

def @func_8866() -> (Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) {
  %643 = cast(meta[relay.Constant][48] /* ty=Tensor[(270), uint64] */, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %644 = reshape(%643, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %645 = @func_6155(%644) /* ty=(Tensor[(2, 15, 9), uint64],) */;
  %646 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %647 = %646.1;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %649 = %645.0;
  %650 = acosh(%648) /* ty=Tensor[(3, 15, 1), float32] */;
  (%649, meta[relay.Constant][48] /* ty=Tensor[(270), uint64] */, %650)
}

def @func_9902() -> (Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) {
  %651 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
  %652 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %653 = %651.2;
  %654 = %652.1;
  (%653, %654)
}

def @func_8728() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) {
  %655 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %656 = cast(meta[relay.Constant][49] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %657 = cast(meta[relay.Constant][49] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %658 = reshape(%656, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %659 = reshape(%657, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %660 = cast(meta[relay.Constant][50] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %661 = reshape(%660, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
  %662 = %655.0;
  %663 = @func_681(%658, %659) /* ty=Tensor[(2, 3, 5), uint64] */;
  %664 = @func_6071(%661) /* ty=Tensor[(15, 9, 6), float64] */;
  (%662, %663, meta[relay.Constant][49] /* ty=Tensor[(30), int16] */, %664, meta[relay.Constant][50] /* ty=Tensor[(810), float64] */)
}

def @func_12350(%var_12332: Tensor[(4), int32]) -> (Tensor[(3, 15, 1), float32], Tensor[(3, 7, 13), float64], Tensor[(4), int32], Tensor[(28), int32]) {
  %665 = @func_12314() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) */;
  %666 = cast(%var_12332, dtype="int32") /* ty=Tensor[(4), int32] */;
  %667 = cast(meta[relay.Constant][51] /* ty=Tensor[(28), int32] */, dtype="int32") /* ty=Tensor[(28), int32] */;
  %668 = reshape(%666, newshape=[4]) /* ty=Tensor[(4), int32] */;
  %669 = reshape(%667, newshape=[28]) /* ty=Tensor[(28), int32] */;
  %670 = @func_10264(%668, %669) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) */;
  %671 = %665.2;
  %672 = %670.7;
  (%671, %672, %var_12332, meta[relay.Constant][51] /* ty=Tensor[(28), int32] */)
}

def @func_12976() -> Tensor[(3, 15, 1), float64] {
  %673 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %673.0
}

def @func_18386() -> (Tensor[(1, 10, 2), float32],) {
  %674 = @func_16360() /* ty=Tensor[(1, 10, 2), float32] */;
  (%674,)
}

def @func_13410() -> (Tensor[(96), uint16],) {
  %675 = @func_13117() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) */;
  %676 = %675.1;
  (%676,)
}

def @func_18576() -> (Tensor[(1, 10, 2), float32],) {
  %677 = @func_16496() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %678 = %677.0;
  (%678,)
}

def @func_7989(%var_7963: bool) -> (Tensor[(12, 5, 8), bool], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  %679 = cast(%var_7963, dtype="bool") /* ty=bool */;
  %680 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 5, 8), bool] */, dtype="bool") /* ty=Tensor[(12, 5, 8), bool] */;
  %681 = cast(meta[relay.Constant][53] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %682 = reshape(%681, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %683 = logical_and(%679, %680) /* ty=Tensor[(12, 5, 8), bool] */;
  %684 = @func_4349(%682) /* ty=Tensor[(3, 7, 13), float64] */;
  (%683, %684, meta[relay.Constant][53] /* ty=Tensor[(273), float64] */)
}

def @func_2330(%var_2300: float64, %var_2301: Tensor[(14, 10, 5), float64]) -> Tensor[(14, 10, 5), bool] {
  %685 = cast(%var_2300, dtype="float64") /* ty=float64 */;
  %686 = cast(%var_2301, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %687 = floor_divide(%685, %686) /* ty=Tensor[(14, 10, 5), float64] */;
  %688 = cast(%var_2300, dtype="bool") /* ty=bool */;
  %689 = cast(%687, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
  less_equal(%688, %689) /* ty=Tensor[(14, 10, 5), bool] */
}

def @func_14681() -> Tensor[(1, 10, 2), float32] {
  %690 = @func_11517() /* ty=Tensor[(1, 10, 2), float32] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  cosh(%691) /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_11799() -> (Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) {
  %692 = cast(meta[relay.Constant][54] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %693 = cast(meta[relay.Constant][54] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %694 = cast(-2.8464f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %695 = cast(meta[relay.Constant][55] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %696 = cast(meta[relay.Constant][56] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %697 = reshape(%692, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %698 = reshape(%693, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %699 = reshape(%694, newshape=[]) /* ty=float64 */;
  %700 = reshape(%695, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
  %701 = reshape(%696, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %702 = @func_9067(%697, %698, %699, %700, %701) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) */;
  %703 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %704 = %703.0;
  %705 = cast(-2.8464f64 /* ty=float64 */, dtype="int16") /* ty=int16 */;
  %706 = cast(%704, dtype="int16") /* ty=Tensor[(1, 10, 2), int16] */;
  %707 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
  %708 = %702.6;
  %709 = multiply(%705, %706) /* ty=Tensor[(1, 10, 2), int16] */;
  (%707, %708, meta[relay.Constant][54] /* ty=Tensor[(208), float32] */, meta[relay.Constant][55] /* ty=Tensor[(180), int16] */, meta[relay.Constant][56] /* ty=Tensor[(550), float64] */, %709)
}

def @func_15220() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %710 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
  %711 = @func_14321() /* ty=Tensor[(1, 10, 2), float32] */;
  (%710, %711)
}

def @func_795(%var_754: Tensor[(11, 10, 5), float64]) -> Tensor[(11, 10, 5), float64] {
  %712 = cast(%var_754, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
  asinh(%712) /* ty=Tensor[(11, 10, 5), float64] */
}

def @func_15141(%var_15138: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), float64],) {
  %713 = cast(%var_15138, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
  %714 = log2(%713) /* ty=Tensor[(9, 12, 8), float64] */;
  (%714,)
}

def @func_14948() -> Tensor[(2, 3, 5), uint64] {
  %715 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %715.1
}

def @func_14979() -> (Tensor[(54), int64],) {
  %716 = @func_11361() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 3, 6), int64], Tensor[(54), int64], Tensor[(550), float64]) */;
  %717 = %716.2;
  (%717,)
}

def @func_10940() -> Tensor[(1, 10, 2), float32] {
  @func_8813() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_18528() -> (Tensor[(3, 15, 1), float64],) {
  %718 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %719 = %718.0;
  (%719,)
}

def @func_15485() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) {
  %720 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %721 = cast(7.47226f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %722 = reshape(%721, newshape=[]) /* ty=float64 */;
  %723 = @func_8685(%722) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) */;
  %724 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %725 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %726 = @func_10531() /* ty=Tensor[(1, 10, 2), float32] */;
  %727 = cast(%726, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  %728 = cast(7.47226f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %729 = %720.1;
  %730 = %723.7;
  %731 = %724.0;
  %732 = %725.1;
  %733 = mod(%727, %728) /* ty=Tensor[(1, 10, 2), float64] */;
  (%729, %730, %731, %732, %733)
}

def @func_15071() -> Tensor[(550), float64] {
  %734 = @func_11799() /* ty=(Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) */;
  %734.1
}

def @func_8476() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
  %735 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %736 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %737 = %735.0;
  %738 = %736.0;
  (%737, %738)
}

def @func_12851() -> (Tensor[(3, 15, 1), float64],) {
  %739 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %740 = %739.1;
  (%740,)
}

def @func_17959() -> Tensor[(1, 10, 2), float32] {
  %741 = @func_17664() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4, 13, 11), float64]) */;
  %741.0
}

def @func_16087() -> Tensor[(15, 9, 6), float64] {
  @func_12890() /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_17664() -> (Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4, 13, 11), float64]) {
  %742 = @func_15720() /* ty=(Tensor[(550), float64], Tensor[(4, 13, 11), float64]) */;
  %743 = @func_11897() /* ty=Tensor[(1, 10, 2), float32] */;
  %744 = %742.0;
  %745 = @func_15872() /* ty=Tensor[(4, 13, 11), float64] */;
  (%743, %744, %745)
}

def @func_17574() -> (Tensor[(2, 3, 5), uint64],) {
  %746 = @func_16795() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %747 = %746.0;
  (%747,)
}

def @func_12548() -> (Tensor[(1, 10, 2), float32],) {
  %748 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%748,)
}

def @func_14498() -> (Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) {
  %749 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %750 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %751 = %749.2;
  %752 = %750.0;
  (%751, %752)
}

def @func_14562(%var_14557: Tensor[(225), float32], %var_14558: Tensor[(84), int16]) -> (Tensor[(8, 10, 2), float64], Tensor[(308), uint32], Tensor[(225), float32], Tensor[(84), int16]) {
  %753 = @func_13117() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  %756 = cast(meta[relay.Constant][57] /* ty=Tensor[(8, 10, 2), float32] */, dtype="float64") /* ty=Tensor[(8, 10, 2), float64] */;
  %757 = cast(%var_14557, dtype="float32") /* ty=Tensor[(225), float32] */;
  %758 = cast(%var_14558, dtype="int16") /* ty=Tensor[(84), int16] */;
  %759 = reshape(%757, newshape=[3, 15, 5]) /* ty=Tensor[(3, 15, 5), float32] */;
  %760 = reshape(%758, newshape=[84]) /* ty=Tensor[(84), int16] */;
  %761 = @func_10884(%759, %760) /* ty=(Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) */;
  %762 = minimum(%755, %756) /* ty=Tensor[(8, 10, 2), float64] */;
  %763 = %761.9;
  (%762, %763, %var_14557, %var_14558)
}

def @func_9482(%var_9472: Tensor[(96), uint16]) -> (Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) {
  %764 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %765 = cast(meta[relay.Constant][58] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %766 = cast(%var_9472, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %767 = reshape(%765, newshape=[]) /* ty=uint16 */;
  %768 = reshape(%766, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), uint16] */;
  %769 = %764.0;
  %770 = @func_4447(%767, %768) /* ty=Tensor[(1, 6, 16), uint16] */;
  (%769, %770, meta[relay.Constant][58] /* ty=uint16 */, %var_9472)
}

def @func_3186(%var_3150: Tensor[(13, 4, 14), float64], %var_3163: Tensor[(13, 4, 14), float64]) -> (Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) {
  %771 = cast(%var_3150, dtype="float64") /* ty=Tensor[(13, 4, 14), float64] */;
  %772 = sigmoid(%771) /* ty=Tensor[(13, 4, 14), float64] */;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(13, 4, 14), float64] */;
  %774 = log(%773) /* ty=Tensor[(13, 4, 14), float64] */;
  %775 = cast(%var_3163, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %779 = cast(meta[relay.Constant][59] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %780 = reshape(%779, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %781 = cast(meta[relay.Constant][60] /* ty=Tensor[(5, 6), int16] */, dtype="int16") /* ty=Tensor[(5, 6), int16] */;
  %782 = cast(meta[relay.Constant][60] /* ty=Tensor[(5, 6), int16] */, dtype="int16") /* ty=Tensor[(5, 6), int16] */;
  %783 = reshape(%781, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %784 = reshape(%782, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %785 = logical_or(%777, %778) /* ty=Tensor[(13, 4, 14), bool] */;
  %786 = @func_795(%780) /* ty=Tensor[(11, 10, 5), float64] */;
  %787 = @func_681(%783, %784) /* ty=Tensor[(2, 3, 5), uint64] */;
  (%785, %786, meta[relay.Constant][59] /* ty=Tensor[(550), float64] */, %787, meta[relay.Constant][60] /* ty=Tensor[(5, 6), int16] */)
}

def @func_11250(%var_11224: Tensor[(270), uint64]) -> (Tensor[(2, 11, 14), uint32], Tensor[(1, 14, 15), bool], Tensor[(105, 2), uint16], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) {
  %788 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %789 = cast(meta[relay.Constant][61] /* ty=Tensor[(105, 2), uint16] */, dtype="uint16") /* ty=Tensor[(105, 2), uint16] */;
  %790 = reshape(%789, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %791 = cast(%var_11224, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %792 = reshape(%791, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %793 = @func_9200(%792) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %794 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %795 = %788.1;
  %796 = cast(%795, dtype="uint32") /* ty=Tensor[(2, 11, 14), uint32] */;
  %797 = reshape(%796, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %798 = @func_3197(%790) /* ty=Tensor[(1, 14, 15), bool] */;
  %799 = %793.0;
  %800 = %794.1;
  %801 = @func_4696(%797) /* ty=Tensor[(2, 11, 14), uint32] */;
  (%795, %798, meta[relay.Constant][61] /* ty=Tensor[(105, 2), uint16] */, %799, %var_11224, %800, %801)
}

def @func_12418(%var_12371: float64, %var_12408: Tensor[(77, 4), uint32], %var_12413: Tensor[(550), float64]) -> (float64, float64, Tensor[(?, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(77, 4), uint32], Tensor[(11, 10, 5), float64], Tensor[(90, 2), int16], Tensor[(550), float64], Tensor[(700), float64]) {
  %802 = cast(%var_12371, dtype="float64") /* ty=float64 */;
  %803 = reshape(%802, newshape=[]) /* ty=float64 */;
  %804 = @func_8685(%803) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) */;
  %805 = @func_12041() /* ty=(Tensor[(?, 10, 2), uint8],) */;
  %806 = %805.0;
  %807 = cast(%806, dtype="float64") /* ty=Tensor[(?, 10, 2), float64] */;
  %808 = sinh(%807) /* ty=Tensor[(?, 10, 2), float64] */;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(?, 10, 2), float32] */;
  %810 = cast(%var_12408, dtype="uint32") /* ty=Tensor[(77, 4), uint32] */;
  %811 = reshape(%810, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %812 = cast(meta[relay.Constant][62] /* ty=Tensor[(90, 2), int16] */, dtype="int16") /* ty=Tensor[(90, 2), int16] */;
  %813 = cast(meta[relay.Constant][62] /* ty=Tensor[(90, 2), int16] */, dtype="int16") /* ty=Tensor[(90, 2), int16] */;
  %814 = cast(%var_12413, dtype="float64") /* ty=Tensor[(550), float64] */;
  %815 = %804.3;
  %816 = cast(%815, dtype="float64") /* ty=float64 */;
  %817 = cast(meta[relay.Constant][63] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %818 = reshape(%812, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %819 = reshape(%813, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %820 = reshape(%814, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %821 = reshape(%816, newshape=[]) /* ty=float64 */;
  %822 = reshape(%817, newshape=[350, 2]) /* ty=Tensor[(350, 2), float64] */;
  %823 = @func_6952(%818, %819, %820, %821, %822) /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) */;
  %824 = erf(%809) /* ty=Tensor[(?, 10, 2), float32] */;
  %825 = @func_4696(%811) /* ty=Tensor[(2, 11, 14), uint32] */;
  %826 = %823.4;
  (%815, %var_12371, %824, %825, %var_12408, %826, meta[relay.Constant][62] /* ty=Tensor[(90, 2), int16] */, %var_12413, meta[relay.Constant][63] /* ty=Tensor[(700), float64] */)
}

def @func_12105() -> (Tensor[(210), uint16],) {
  %827 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
  %828 = %827.2;
  (%828,)
}

def @func_16542() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(96), uint16]) {
  %829 = @func_13410() /* ty=(Tensor[(96), uint16],) */;
  %830 = @func_14962() /* ty=Tensor[(1, 10, 2), float32] */;
  %831 = @func_10421() /* ty=Tensor[(3, 15, 1), float64] */;
  %832 = %829.0;
  (%830, %831, %832)
}

def @func_18044() -> Tensor[(2, 3, 5), uint64] {
  %833 = @func_16475() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %833.0
}

def @func_11382() -> (Tensor[(4, 13, 11), float64],) {
  %834 = cast(meta[relay.Constant][64] /* ty=Tensor[(4, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
  %835 = acos(%834) /* ty=Tensor[(4, 13, 11), float64] */;
  (%835,)
}

def @func_9564(%var_9500: Tensor[(3, 3, 6), int64], %var_9533: Tensor[(275, 2), float64], %var_9547: Tensor[(275, 2), float64]) -> (Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) {
  %836 = cast(%var_9500, dtype="int64") /* ty=Tensor[(3, 3, 6), int64] */;
  %837 = shape_of(meta[relay.Constant][65] /* ty=Tensor[(3, 3, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(meta[relay.Constant][65] /* ty=Tensor[(3, 3, 6), int64] */, dtype="int64") /* ty=Tensor[(3, 3, 6), int64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %840 = cast(meta[relay.Constant][66] /* ty=Tensor[(3, 3, 6), int64] */, dtype="float32") /* ty=Tensor[(3, 3, 6), float32] */;
  %841 = shape_of(%var_9500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_9500, dtype="float32") /* ty=Tensor[(3, 3, 6), float32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %844 = cast(meta[relay.Constant][67] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %845 = cast(meta[relay.Constant][67] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %846 = cast(-7.92648f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %847 = cast(meta[relay.Constant][68] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %848 = cast(%var_9533, dtype="float64") /* ty=Tensor[(275, 2), float64] */;
  %849 = reshape(%844, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %850 = reshape(%845, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %851 = reshape(%846, newshape=[]) /* ty=float64 */;
  %852 = reshape(%847, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
  %853 = reshape(%848, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %854 = @func_9067(%849, %850, %851, %852, %853) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) */;
  %855 = cast(%var_9547, dtype="float64") /* ty=Tensor[(275, 2), float64] */;
  %856 = shape_of(%var_9533, dtype="int32") /* ty=Tensor[(2), int32] */;
  %857 = cast(%var_9533, dtype="float64") /* ty=Tensor[(275, 2), float64] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %859 = cast(%var_9547, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
  %860 = shape_of(%var_9533, dtype="int32") /* ty=Tensor[(2), int32] */;
  %861 = cast(%var_9533, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %863 = minimum(%838, %839) /* ty=Tensor[(3, 3, 6), int64] */;
  %864 = maximum(%842, %843) /* ty=Tensor[(3, 3, 6), float32] */;
  %865 = %854.6;
  %866 = power(%857, %858) /* ty=Tensor[(275, 2), float64] */;
  %867 = less(%861, %862) /* ty=Tensor[(275, 2), bool] */;
  (%863, %864, %865, meta[relay.Constant][67] /* ty=Tensor[(208), float32] */, -7.92648f64 /* ty=float64 */, meta[relay.Constant][68] /* ty=Tensor[(180), int16] */, %866, %867)
}

def @func_16439() -> Tensor[(15, 9, 6), float64] {
  @func_12890() /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_8557() -> Tensor[(3, 15, 1), float64] {
  %868 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %868.0
}

def @func_10421() -> Tensor[(3, 15, 1), float64] {
  %869 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %869.1
}

def @func_9447(%var_9443: Tensor[(273), float64]) -> (Tensor[(3, 15, 1), float64], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  %870 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %871 = cast(%var_9443, dtype="float64") /* ty=Tensor[(273), float64] */;
  %872 = reshape(%871, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %873 = %870.1;
  %874 = @func_4349(%872) /* ty=Tensor[(3, 7, 13), float64] */;
  (%873, %874, %var_9443)
}

def @func_4447(%var_4441: uint16, %var_4442: Tensor[(1, 6, 16), uint16]) -> Tensor[(1, 6, 16), uint16] {
  %875 = cast(%var_4441, dtype="uint16") /* ty=uint16 */;
  %876 = cast(%var_4442, dtype="uint16") /* ty=Tensor[(1, 6, 16), uint16] */;
  left_shift(%875, %876) /* ty=Tensor[(1, 6, 16), uint16] */
}

def @func_17379() -> (Tensor[(3, 15, 810), float32], Tensor[(1, 10, 2), float32]) {
  %877 = @func_12314() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) */;
  %878 = @func_16122() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %879 = %877.1;
  %880 = %878.0;
  (%879, %880)
}

def @func_16076() -> (Tensor[(1, 10, 2), float32],) {
  %881 = @func_11897() /* ty=Tensor[(1, 10, 2), float32] */;
  (%881,)
}

def @func_14831(%var_14824: Tensor[(8, 7, 11), float64]) -> Tensor[(8, 7, 11), float64] {
  %882 = cast(%var_14824, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  sqrt(%882) /* ty=Tensor[(8, 7, 11), float64] */
}

def @func_16496() -> (Tensor[(1, 10, 2), float32],) {
  %883 = @func_14962() /* ty=Tensor[(1, 10, 2), float32] */;
  (%883,)
}

def @func_18229(%var_18212: Tensor[(3, 15, 1), float32]) -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, ?), float64]) {
  %884 = @func_16530() /* ty=(Tensor[(550), float64], Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64], float64) */;
  %885 = %884.1;
  %886 = cast(%var_18212, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(%885, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %890 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
  %891 = power(%888, %889) /* ty=Tensor[(3, 15, ?), float64] */;
  (%890, %891)
}

def @func_18340() -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) {
  %892 = @func_17574() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %893 = %892.0;
  %894 = @func_15671() /* ty=Tensor[(1, 10, 2), float32] */;
  (%893, %894)
}

def @func_18507() -> Tensor[(210), uint16] {
  %895 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
  %895.0
}

def @func_12929(%var_12919: Tensor[(6, 14, 16), float64]) -> (Tensor[(6, 14, 16), float64],) {
  %896 = cast(%var_12919, dtype="float64") /* ty=Tensor[(6, 14, 16), float64] */;
  %897 = tan(%896) /* ty=Tensor[(6, 14, 16), float64] */;
  (%897,)
}

def @func_12803() -> Tensor[(1, 10, 2), float32] {
  @func_11517() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_11517() -> Tensor[(1, 10, 2), float32] {
  %898 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %898.0
}

def @func_15872() -> Tensor[(4, 13, 11), float64] {
  %899 = @func_11382() /* ty=(Tensor[(4, 13, 11), float64],) */;
  %899.0
}

def @func_14279() -> (Tensor[(210), uint16],) {
  %900 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
  %901 = %900.0;
  (%901,)
}

def @func_15376() -> (Tensor[(1, 10, 2), float32],) {
  %902 = @func_10531() /* ty=Tensor[(1, 10, 2), float32] */;
  (%902,)
}

def @func_10806(%var_10773: Tensor[(210), uint16]) -> (Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) {
  %903 = cast(%var_10773, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %904 = reshape(%903, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %905 = @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %906 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %907 = %906.0;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  %909 = sin(%908) /* ty=Tensor[(1, 10, 2), float32] */;
  %910 = cast(%909, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  %911 = acosh(%910) /* ty=Tensor[(1, 10, 2), float64] */;
  %912 = cast(%911, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
  %913 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(%909, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %916 = @func_3197(%904) /* ty=Tensor[(1, 14, 15), bool] */;
  %917 = %905.0;
  %918 = subtract(%914, %915) /* ty=Tensor[(?, 10, 2), uint32] */;
  (%916, %var_10773, %917, %918)
}

def @func_15417() -> (Tensor[(15, 9, 6), float64], Tensor[(1, 10, 2), float32]) {
  %919 = @func_11962() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %920 = @func_12890() /* ty=Tensor[(15, 9, 6), float64] */;
  %921 = %919.0;
  (%920, %921)
}

def @func_16360() -> Tensor[(1, 10, 2), float32] {
  @func_12803() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_9200(%var_9195: Tensor[(2, 15, 9), uint64]) -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) {
  %922 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %923 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %924 = %923.0;
  %925 = cast(%var_9195, dtype="uint32") /* ty=Tensor[(2, 15, 9), uint32] */;
  %926 = shape_of(%924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %927 = cast(%924, dtype="uint32") /* ty=Tensor[(2, 15, 9), uint32] */;
  %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %929 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  %930 = %922.0;
  %931 = left_shift(%927, %928) /* ty=Tensor[(2, 15, 9), uint32] */;
  (%929, %930, %931)
}

def @func_9271() -> (Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) {
  %932 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %933 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %934 = %932.0;
  %935 = %933.0;
  (%934, %935)
}

def @func_17047() -> (Tensor[(1, 10, 2), float32],) {
  %936 = @func_13575() /* ty=Tensor[(1, 10, 2), float32] */;
  (%936,)
}

def @func_4349(%var_4342: Tensor[(3, 7, 13), float64]) -> Tensor[(3, 7, 13), float64] {
  %937 = cast(%var_4342, dtype="float64") /* ty=Tensor[(3, 7, 13), float64] */;
  exp(%937) /* ty=Tensor[(3, 7, 13), float64] */
}

def @func_9067(%var_9039: Tensor[(2, 8, 13), float32], %var_9040: Tensor[(2, 8, 13), float32], %var_9048: float64, %var_9063: Tensor[(1, 180), int16], %var_9064: Tensor[(550), float64]) -> (Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) {
  %938 = cast(%var_9040, dtype="float32") /* ty=Tensor[(2, 8, 13), float32] */;
  %939 = shape_of(%var_9039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %940 = cast(%var_9039, dtype="float32") /* ty=Tensor[(2, 8, 13), float32] */;
  %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %942 = cast(%var_9048, dtype="float64") /* ty=float64 */;
  %943 = cast(meta[relay.Constant][69] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %944 = reshape(%942, newshape=[]) /* ty=float64 */;
  %945 = reshape(%943, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %946 = cast(%var_9063, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
  %947 = cast(%var_9063, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
  %948 = cast(%var_9064, dtype="float64") /* ty=Tensor[(550), float64] */;
  %949 = cast(%var_9048, dtype="float64") /* ty=float64 */;
  %950 = cast(meta[relay.Constant][69] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %951 = reshape(%946, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %952 = reshape(%947, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %953 = reshape(%948, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %954 = reshape(%949, newshape=[]) /* ty=float64 */;
  %955 = reshape(%950, newshape=[350, 2]) /* ty=Tensor[(350, 2), float64] */;
  %956 = @func_6952(%951, %952, %953, %954, %955) /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) */;
  %957 = power(%940, %941) /* ty=Tensor[(2, 8, 13), float32] */;
  %958 = @func_2330(%944, %945) /* ty=Tensor[(14, 10, 5), bool] */;
  %959 = %956.6;
  (%957, %958, %var_9048, meta[relay.Constant][69] /* ty=Tensor[(700), float64] */, %959, %var_9063, %var_9064)
}

def @func_17421(%var_17404: Tensor[(16, 11, 10), uint64], %var_17405: Tensor[(16, 11, 10), uint64]) -> Tensor[(16, 11, 10), uint64] {
  %960 = cast(%var_17405, dtype="uint64") /* ty=Tensor[(16, 11, 10), uint64] */;
  %961 = shape_of(%var_17404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %962 = cast(%var_17404, dtype="uint64") /* ty=Tensor[(16, 11, 10), uint64] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%962, %963) /* ty=Tensor[(16, 11, 10), uint64] */
}

def @func_10611() -> Tensor[(1, 10, 2), float32] {
  %964 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %964.0
}

def @func_12093() -> Tensor[(3, 15, 1), float64] {
  %965 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %965.0
}

def @func_14962() -> Tensor[(1, 10, 2), float32] {
  %966 = @func_13204() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %966.0
}

def @func_9633() -> (Tensor[(1, 10, 2), float32],) {
  %967 = @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %968 = %967.0;
  (%968,)
}

def @func_9860(%var_9820: Tensor[(270), uint64], %var_9847: Tensor[(208), float32], %var_9849: Tensor[(1, 180), int16]) -> (Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) {
  %969 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %970 = cast(meta[relay.Constant][70] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %971 = cast(meta[relay.Constant][70] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %972 = reshape(%970, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %973 = reshape(%971, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %974 = @func_3186(%972, %973) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
  %975 = cast(%var_9820, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %976 = reshape(%975, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %977 = @func_6155(%976) /* ty=(Tensor[(2, 15, 9), uint64],) */;
  %978 = cast(%var_9847, dtype="float32") /* ty=Tensor[(208), float32] */;
  %979 = cast(%var_9847, dtype="float32") /* ty=Tensor[(208), float32] */;
  %980 = cast(-8.84119f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %981 = cast(%var_9849, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
  %982 = %974.1;
  %983 = cast(%982, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
  %984 = reshape(%978, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %985 = reshape(%979, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %986 = reshape(%980, newshape=[]) /* ty=float64 */;
  %987 = reshape(%981, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
  %988 = reshape(%983, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %989 = @func_9067(%984, %985, %986, %987, %988) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) */;
  %990 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %991 = %969.0;
  %992 = %977.0;
  %993 = %989.5;
  %994 = %990.0;
  (%991, %982, meta[relay.Constant][70] /* ty=Tensor[(728), float64] */, %992, %var_9820, %993, %var_9847, -8.84119f64 /* ty=float64 */, %var_9849, %994)
}

def @func_16807() -> Tensor[(54), int64] {
  %995 = @func_14979() /* ty=(Tensor[(54), int64],) */;
  %995.0
}

def @func_13575() -> Tensor[(1, 10, 2), float32] {
  %996 = @func_11993() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %996.0
}

def @func_18157() -> (Tensor[(3, 15, 1), float32],) {
  %997 = @func_15097() /* ty=(Tensor[(3, 15, 1), float32],) */;
  %998 = %997.0;
  (%998,)
}

def @func_11993() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
  %999 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %1000 = @func_10940() /* ty=Tensor[(1, 10, 2), float32] */;
  %1001 = %999.1;
  (%1000, %1001)
}

def @func_16045() -> (Tensor[(180), int16], Tensor[(1, 10, 2), float32]) {
  %1002 = @func_12548() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1003 = @func_14045() /* ty=Tensor[(180), int16] */;
  %1004 = %1002.0;
  (%1003, %1004)
}

def @func_10264(%var_10215: Tensor[(4), int32], %var_10216: Tensor[(28), int32]) -> (Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) {
  %1005 = cast(%var_10215, dtype="int32") /* ty=Tensor[(4), int32] */;
  %1006 = cast(%var_10216, dtype="int32") /* ty=Tensor[(28), int32] */;
  %1007 = cast(meta[relay.Constant][71] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1008 = reshape(%1005, newshape=[1, 2, 2]) /* ty=Tensor[(1, 2, 2), int32] */;
  %1009 = reshape(%1006, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), int32] */;
  %1010 = reshape(%1007, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %1011 = @func_4080(%1008, %1009, %1010) /* ty=(Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) */;
  %1012 = @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1013 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %1014 = cast(meta[relay.Constant][72] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %1015 = reshape(%1014, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %1016 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %1017 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %1018 = %1011.2;
  %1019 = %1012.0;
  %1020 = %1013.2;
  %1021 = @func_4349(%1015) /* ty=Tensor[(3, 7, 13), float64] */;
  %1022 = %1016.2;
  (%1017, %1018, %var_10215, %var_10216, meta[relay.Constant][71] /* ty=Tensor[(550), float64] */, %1019, %1020, %1021, meta[relay.Constant][72] /* ty=Tensor[(273), float64] */, %1022)
}

def @func_16122() -> (Tensor[(1, 10, 2), float32],) {
  %1023 = @func_15376() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1024 = %1023.0;
  (%1024,)
}

def @func_10999(%var_10978: float64, %var_10979: Tensor[(700), float64], %var_10980: Tensor[(550), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32], float64, Tensor[(700), float64], Tensor[(550), float64], Tensor[(11, 10, 5), float64]) {
  %1025 = cast(%var_10978, dtype="float64") /* ty=float64 */;
  %1026 = cast(%var_10979, dtype="float64") /* ty=Tensor[(700), float64] */;
  %1027 = cast(%var_10980, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1028 = reshape(%1025, newshape=[]) /* ty=float64 */;
  %1029 = reshape(%1026, newshape=[5, 140]) /* ty=Tensor[(5, 140), float64] */;
  %1030 = reshape(%1027, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %1031 = @func_10097(%1028, %1029, %1030) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(3, 3, 6), float32], Tensor[(54, 1), int64], Tensor[(550), float64], Tensor[(2, 15, 9), uint64], Tensor[(2, 15, 9), uint32], Tensor[(5, 140), float32]) */;
  %1032 = cast(%var_10980, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1033 = reshape(%1032, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %1034 = @func_10531() /* ty=Tensor[(1, 10, 2), float32] */;
  %1035 = %1031.7;
  %1036 = @func_795(%1033) /* ty=Tensor[(11, 10, 5), float64] */;
  (%1034, %1035, %var_10978, %var_10979, %var_10980, %1036)
}

def @func_18291(%var_18270: Tensor[(15, 10, 2), float32]) -> (Tensor[(15, 10, 2), float64],) {
  %1037 = @func_16045() /* ty=(Tensor[(180), int16], Tensor[(1, 10, 2), float32]) */;
  %1038 = %1037.1;
  %1039 = cast(%1038, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  %1040 = cast(%var_18270, dtype="float64") /* ty=Tensor[(15, 10, 2), float64] */;
  %1041 = mod(%1039, %1040) /* ty=Tensor[(15, 10, 2), float64] */;
  (%1041,)
}

def @func_10497() -> Tensor[(1, 15, 10), float64] {
  %1042 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 10), float64] */;
  asinh(%1042) /* ty=Tensor[(1, 15, 10), float64] */
}

def @func_9011() -> (Tensor[(1, 10, 2), float32],) {
  %1043 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%1043,)
}

def @func_6952(%var_6812: Tensor[(3, 6, 10), int16], %var_6813: Tensor[(3, 6, 10), int16], %var_6861: Tensor[(550), float64], %var_6877: float64, %var_6878: Tensor[(350, 2), float64]) -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) {
  %1044 = cast(meta[relay.Constant][74] /* ty=Tensor[(1, 30), int16] */, dtype="int16") /* ty=Tensor[(1, 30), int16] */;
  %1045 = cast(meta[relay.Constant][74] /* ty=Tensor[(1, 30), int16] */, dtype="int16") /* ty=Tensor[(1, 30), int16] */;
  %1046 = reshape(%1044, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %1047 = reshape(%1045, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %1048 = cast(meta[relay.Constant][75] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %1049 = reshape(%1048, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
  %1050 = cast(%var_6861, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1051 = reshape(%1050, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %1052 = cast(%var_6877, dtype="float64") /* ty=float64 */;
  %1053 = cast(%var_6878, dtype="float64") /* ty=Tensor[(350, 2), float64] */;
  %1054 = reshape(%1052, newshape=[]) /* ty=float64 */;
  %1055 = reshape(%1053, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %1056 = cast(%var_6812, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %1057 = acosh(%1056) /* ty=Tensor[(3, 6, 10), float32] */;
  %1058 = cast(%1057, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %1059 = cast(meta[relay.Constant][74] /* ty=Tensor[(1, 30), int16] */, dtype="int8") /* ty=Tensor[(1, 30), int8] */;
  %1060 = log(%1058) /* ty=Tensor[(3, 6, 10), float32] */;
  %1061 = cast(%1060, dtype="int8") /* ty=Tensor[(3, 6, 10), int8] */;
  %1062 = cast(%var_6813, dtype="int16") /* ty=Tensor[(3, 6, 10), int16] */;
  %1063 = shape_of(%var_6812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1064 = cast(%var_6812, dtype="int16") /* ty=Tensor[(3, 6, 10), int16] */;
  %1065 = dyn.reshape(%1062, %1063, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1066 = bitwise_and(%1064, %1065) /* ty=Tensor[(3, 6, 10), int16] */;
  %1067 = cast(%var_6813, dtype="bool") /* ty=Tensor[(3, 6, 10), bool] */;
  %1068 = shape_of(%1066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1069 = cast(%1066, dtype="bool") /* ty=Tensor[(3, 6, 10), bool] */;
  %1070 = dyn.reshape(%1067, %1068, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1071 = equal(%1069, %1070) /* ty=Tensor[(3, 6, 10), bool] */;
  %1072 = cast(%1071, dtype="uint64") /* ty=Tensor[(3, 6, 10), uint64] */;
  %1073 = shape_of(%1057, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1074 = cast(%1057, dtype="uint64") /* ty=Tensor[(3, 6, 10), uint64] */;
  %1075 = dyn.reshape(%1072, %1073, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1076 = logical_xor(%1074, %1075) /* ty=Tensor[(3, 6, 10), uint64] */;
  %1077 = cast(%1076, dtype="int8") /* ty=Tensor[(3, 6, 10), int8] */;
  %1078 = reshape(%1059, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), int8] */;
  %1079 = reshape(%1061, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
  %1080 = reshape(%1077, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
  %1081 = @func_5995(%1078, %1079, %1080) /* ty=(Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */;
  %1082 = cast(%1076, dtype="float64") /* ty=Tensor[(3, 6, 10), float64] */;
  %1083 = @func_6071(%1049) /* ty=Tensor[(15, 9, 6), float64] */;
  %1084 = cast(%1083, dtype="float64") /* ty=Tensor[(15, 9, 6), float64] */;
  %1085 = reshape(%1084, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
  %1086 = @func_6071(%1085) /* ty=Tensor[(15, 9, 6), float64] */;
  %1087 = cast(%1086, dtype="float64") /* ty=Tensor[(15, 9, 6), float64] */;
  %1088 = reshape(%1087, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
  %1089 = cast(%var_6861, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1090 = reshape(%1089, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %1091 = @func_681(%1046, %1047) /* ty=Tensor[(2, 3, 5), uint64] */;
  %1092 = @func_795(%1051) /* ty=Tensor[(11, 10, 5), float64] */;
  %1093 = @func_2330(%1054, %1055) /* ty=Tensor[(14, 10, 5), bool] */;
  %1094 = %1081.3;
  %1095 = cos(%1082) /* ty=Tensor[(3, 6, 10), float64] */;
  %1096 = @func_6071(%1088) /* ty=Tensor[(15, 9, 6), float64] */;
  %1097 = @func_795(%1090) /* ty=Tensor[(11, 10, 5), float64] */;
  (%1091, meta[relay.Constant][74] /* ty=Tensor[(1, 30), int16] */, %1083, meta[relay.Constant][75] /* ty=Tensor[(810), float64] */, %1092, %var_6861, %1093, %var_6877, %var_6878, %1060, %1094, %1095, %1086, %1096, %1097)
}

def @func_3197(%var_3193: Tensor[(1, 14, 15), uint16]) -> Tensor[(1, 14, 15), bool] {
  %1098 = cast(meta[relay.Constant][76] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %1099 = cast(%var_3193, dtype="bool") /* ty=Tensor[(1, 14, 15), bool] */;
  less_equal(%1098, %1099) /* ty=Tensor[(1, 14, 15), bool] */
}

def @func_8813() -> Tensor[(1, 10, 2), float32] {
  %1100 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1100.0
}

def @func_9730(%var_9667: Tensor[(550), float64]) -> (Tensor[(27, 2), int64], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(208), uint8], Tensor[(15, 9, 6), float64], Tensor[(810), float32]) {
  %1101 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1102 = cast(meta[relay.Constant][77] /* ty=Tensor[(27, 2), int64] */, dtype="int64") /* ty=Tensor[(27, 2), int64] */;
  %1103 = cast(%var_9667, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1104 = cast(%var_9667, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1105 = reshape(%1102, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
  %1106 = reshape(%1103, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %1107 = reshape(%1104, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %1108 = @func_9564(%1105, %1106, %1107) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
  %1109 = %1108.3;
  %1110 = cast(meta[relay.Constant][78] /* ty=Tensor[(208), float32] */, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %1111 = shape_of(%1109, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1112 = cast(%1109, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %1113 = dyn.reshape(%1110, %1111, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %1114 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %1115 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %1116 = %1115.0;
  %1117 = cast(%1116, dtype="float32") /* ty=Tensor[(810), float32] */;
  %1118 = %1101.0;
  %1119 = left_shift(%1112, %1113) /* ty=Tensor[(208), uint8] */;
  %1120 = %1114.3;
  %1121 = tan(%1117) /* ty=Tensor[(810), float32] */;
  (meta[relay.Constant][77] /* ty=Tensor[(27, 2), int64] */, %var_9667, %1118, %1119, %1120, %1121)
}

def @func_12441() -> (Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) {
  %1122 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %1123 = cast(meta[relay.Constant][79] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %1124 = reshape(%1123, newshape=[96]) /* ty=Tensor[(96), uint16] */;
  %1125 = @func_9482(%1124) /* ty=(Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) */;
  %1126 = %1122.1;
  %1127 = %1125.3;
  %1128 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
  (%1126, %1127, meta[relay.Constant][79] /* ty=Tensor[(96), uint16] */, %1128)
}

def @func_15624() -> Tensor[(3, 15, 1), float64] {
  %1129 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %1129.1
}

def @func_16992(%var_16879: bool, %var_16880: Tensor[(14, 14, 7), bool], %var_16944: Tensor[(4), int32], %var_16975: Tensor[(3, 15, 1), float64]) -> (Tensor[(14, 14, 7), bool], Tensor[(15, 9, 6), float64], Tensor[(4), int32], Tensor[(4), int32], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(180, 1), int16], float64, Tensor[(3, 15, ?), uint16]) {
  %1130 = cast(%var_16879, dtype="bool") /* ty=bool */;
  %1131 = cast(%var_16880, dtype="bool") /* ty=Tensor[(14, 14, 7), bool] */;
  %1132 = cast(%var_16944, dtype="int32") /* ty=Tensor[(4), int32] */;
  %1133 = reshape(%1132, newshape=[4]) /* ty=Tensor[(4), int32] */;
  %1134 = @func_12350(%1133) /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 7, 13), float64], Tensor[(4), int32], Tensor[(28), int32]) */;
  %1135 = cast(meta[relay.Constant][80] /* ty=Tensor[(270), uint64] */, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %1136 = cast(meta[relay.Constant][81] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %1137 = cast(meta[relay.Constant][82] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %1138 = reshape(%1135, newshape=[270]) /* ty=Tensor[(270), uint64] */;
  %1139 = reshape(%1136, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %1140 = reshape(%1137, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
  %1141 = @func_9860(%1138, %1139, %1140) /* ty=(Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) */;
  %1142 = @func_13948() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64]) */;
  %1143 = @func_11930() /* ty=Tensor[(3, 15, 1), float64] */;
  %1144 = cast(%var_16975, dtype="uint16") /* ty=Tensor[(3, 15, 1), uint16] */;
  %1145 = shape_of(%1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1146 = cast(%1143, dtype="uint16") /* ty=Tensor[(3, 15, 1), uint16] */;
  %1147 = dyn.reshape(%1144, %1145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1148 = logical_or(%1130, %1131) /* ty=Tensor[(14, 14, 7), bool] */;
  %1149 = @func_16087() /* ty=Tensor[(15, 9, 6), float64] */;
  %1150 = %1134.2;
  %1151 = %1141.9;
  %1152 = %1142.3;
  %1153 = multiply(%1146, %1147) /* ty=Tensor[(3, 15, ?), uint16] */;
  (%1148, %1149, %1150, %var_16944, %1151, meta[relay.Constant][80] /* ty=Tensor[(270), uint64] */, meta[relay.Constant][81] /* ty=Tensor[(208), float32] */, meta[relay.Constant][82] /* ty=Tensor[(180, 1), int16] */, %1152, %1153)
}

def @func_14045() -> Tensor[(180), int16] {
  %1154 = @func_11799() /* ty=(Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) */;
  %1154.3
}

def @func_13948() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64]) {
  %1155 = @func_12577() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %1156 = cast(-4.57786f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1157 = cast(meta[relay.Constant][83] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %1158 = reshape(%1156, newshape=[]) /* ty=float64 */;
  %1159 = reshape(%1157, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %1160 = %1155.0;
  %1161 = @func_12976() /* ty=Tensor[(3, 15, 1), float64] */;
  %1162 = @func_2330(%1158, %1159) /* ty=Tensor[(14, 10, 5), bool] */;
  (%1160, %1161, %1162, -4.57786f64 /* ty=float64 */, meta[relay.Constant][83] /* ty=Tensor[(700), float64] */)
}

def @func_14152(%var_14145: Tensor[(550), float64]) -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(210), uint16], Tensor[(2, 15, 9), uint64], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(550), float64]) {
  %1163 = @func_12441() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) */;
  %1164 = @func_13204() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1165 = %1164.0;
  %1166 = cast(%1165, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  %1167 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
  %1168 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %1169 = cast(meta[relay.Constant][84] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %1170 = cast(%var_14145, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1171 = reshape(%1169, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %1172 = reshape(%1170, newshape=[55, 10]) /* ty=Tensor[(55, 10), float64] */;
  %1173 = @func_13188(%1171, %1172) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(55, 10), float64], Tensor[(700), float64]) */;
  %1174 = %1163.0;
  %1175 = atan(%1166) /* ty=Tensor[(1, 10, 2), float32] */;
  %1176 = %1167.0;
  %1177 = %1168.0;
  %1178 = %1173.1;
  (%1174, %1175, %1176, %1177, %1178, meta[relay.Constant][84] /* ty=Tensor[(180), int16] */, %var_14145)
}

def @func_16795() -> (Tensor[(2, 3, 5), uint64],) {
  %1179 = @func_14948() /* ty=Tensor[(2, 3, 5), uint64] */;
  (%1179,)
}

def @func_15350() -> (Tensor[(550), float64], Tensor[(1, 10, 2), float32]) {
  %1180 = @func_15071() /* ty=Tensor[(550), float64] */;
  %1181 = @func_13074() /* ty=Tensor[(1, 10, 2), float32] */;
  (%1180, %1181)
}

def @func_14089() -> (Tensor[(3, 15, 1), float64], Tensor[(2, 15, 9), uint32], Tensor[(270), uint64]) {
  %1182 = cast(meta[relay.Constant][85] /* ty=Tensor[(270), uint64] */, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %1183 = reshape(%1182, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %1184 = @func_9200(%1183) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %1185 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %1186 = %1184.2;
  (%1185, %1186, meta[relay.Constant][85] /* ty=Tensor[(270), uint64] */)
}

def @func_17325() -> (Tensor[(1, 10, 2), float32],) {
  %1187 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %1188 = %1187.0;
  (%1188,)
}

def @main(%var_18659: Tensor[(3, 15, 1), float64]) -> (Tensor[(3, 15, 96), uint64], Tensor[(3, 15, ?), uint32], Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, ?), int16]) {
  %1189 = @func_12441() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) */;
  %1190 = %1189.1;
  %1191 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %1192 = %1191.0;
  %1193 = cast(%1190, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %1194 = cast(%1192, dtype="uint64") /* ty=Tensor[(3, 15, 1), uint64] */;
  %1195 = cast(%var_18659, dtype="uint32") /* ty=Tensor[(3, 15, 1), uint32] */;
  %1196 = shape_of(%1192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1197 = cast(%1192, dtype="uint32") /* ty=Tensor[(3, 15, 1), uint32] */;
  %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1199 = @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1200 = @func_16496() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1201 = cast(meta[relay.Constant][86] /* ty=Tensor[(3, 15, 1), float64] */, dtype="int16") /* ty=Tensor[(3, 15, 1), int16] */;
  %1202 = shape_of(%1192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1203 = cast(%1192, dtype="int16") /* ty=Tensor[(3, 15, 1), int16] */;
  %1204 = dyn.reshape(%1201, %1202, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1205 = bitwise_or(%1193, %1194) /* ty=Tensor[(3, 15, 96), uint64] */;
  %1206 = bitwise_xor(%1197, %1198) /* ty=Tensor[(3, 15, ?), uint32] */;
  %1207 = %1199.0;
  %1208 = %1200.0;
  %1209 = logical_xor(%1203, %1204) /* ty=Tensor[(3, 15, ?), int16] */;
  (%1205, %1206, %1207, %1208, %1209)
}

def @func_18614() -> (Tensor[(3, 15, 1), float64], Tensor[(270), uint64]) {
  %1210 = @func_15485() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) */;
  %1211 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %1212 = %1210.2;
  %1213 = %1211.1;
  (%1212, %1213)
}

def @func_16702() -> (Tensor[(1, 10, 2), float32], Tensor[(8, 7, 11), float64], Tensor[(154, 4), float64]) {
  %1214 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1215 = cast(meta[relay.Constant][87] /* ty=Tensor[(154, 4), float64] */, dtype="float64") /* ty=Tensor[(154, 4), float64] */;
  %1216 = reshape(%1215, newshape=[8, 7, 11]) /* ty=Tensor[(8, 7, 11), float64] */;
  %1217 = %1214.0;
  %1218 = @func_14831(%1216) /* ty=Tensor[(8, 7, 11), float64] */;
  (%1217, %1218, meta[relay.Constant][87] /* ty=Tensor[(154, 4), float64] */)
}

def @func_13204() -> (Tensor[(1, 10, 2), float32],) {
  %1219 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %1220 = %1219.1;
  (%1220,)
}

def @func_17292(%var_17279: Tensor[(30), int16]) -> (Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) {
  %1221 = cast(%var_17279, dtype="int16") /* ty=Tensor[(30), int16] */;
  %1222 = cast(%var_17279, dtype="int16") /* ty=Tensor[(30), int16] */;
  %1223 = reshape(%1221, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %1224 = reshape(%1222, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %1225 = @func_12890() /* ty=Tensor[(15, 9, 6), float64] */;
  %1226 = @func_681(%1223, %1224) /* ty=Tensor[(2, 3, 5), uint64] */;
  (%1225, %1226, %var_17279)
}

def @func_13644() -> (Tensor[(3, 15, 1), float64],) {
  %1227 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%1227,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3200(%var_3198: Tensor[(1, 14, 15), uint16]) -> Tensor[(1, 14, 15), bool] {
  @func_3197(%var_3198) /* ty=Tensor[(1, 14, 15), bool] */
}

def @func_6958(%var_6953: Tensor[(3, 6, 10), int16], %var_6954: Tensor[(3, 6, 10), int16], %var_6955: Tensor[(550), float64], %var_6956: float64, %var_6957: Tensor[(350, 2), float64]) -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) {
  %54 = fn (%var_6812: Tensor[(3, 6, 10), int16], %var_6813: Tensor[(3, 6, 10), int16], %var_6861: Tensor[(550), float64], %var_6877: float64, %var_6878: Tensor[(350, 2), float64]) -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 30), int16] */, dtype="int16") /* ty=Tensor[(1, 30), int16] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 30), int16] */, dtype="int16") /* ty=Tensor[(1, 30), int16] */;
    %2 = reshape(%0, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
    %3 = reshape(%1, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
    %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
    %5 = reshape(%4, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
    %6 = cast(%var_6861, dtype="float64") /* ty=Tensor[(550), float64] */;
    %7 = reshape(%6, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
    %8 = cast(%var_6877, dtype="float64") /* ty=float64 */;
    %9 = cast(%var_6878, dtype="float64") /* ty=Tensor[(350, 2), float64] */;
    %10 = reshape(%8, newshape=[]) /* ty=float64 */;
    %11 = reshape(%9, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
    %12 = cast(%var_6812, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
    %13 = acosh(%12) /* ty=Tensor[(3, 6, 10), float32] */;
    %14 = cast(%13, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 30), int16] */, dtype="int8") /* ty=Tensor[(1, 30), int8] */;
    %16 = log(%14) /* ty=Tensor[(3, 6, 10), float32] */;
    %17 = cast(%16, dtype="int8") /* ty=Tensor[(3, 6, 10), int8] */;
    %18 = cast(%var_6813, dtype="int16") /* ty=Tensor[(3, 6, 10), int16] */;
    %19 = shape_of(%var_6812, dtype="int32") /* ty=Tensor[(3), int32] */;
    %20 = cast(%var_6812, dtype="int16") /* ty=Tensor[(3, 6, 10), int16] */;
    %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %22 = bitwise_and(%20, %21) /* ty=Tensor[(3, 6, 10), int16] */;
    %23 = cast(%var_6813, dtype="bool") /* ty=Tensor[(3, 6, 10), bool] */;
    %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %25 = cast(%22, dtype="bool") /* ty=Tensor[(3, 6, 10), bool] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %27 = equal(%25, %26) /* ty=Tensor[(3, 6, 10), bool] */;
    %28 = cast(%27, dtype="uint64") /* ty=Tensor[(3, 6, 10), uint64] */;
    %29 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %30 = cast(%13, dtype="uint64") /* ty=Tensor[(3, 6, 10), uint64] */;
    %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %32 = logical_xor(%30, %31) /* ty=Tensor[(3, 6, 10), uint64] */;
    %33 = cast(%32, dtype="int8") /* ty=Tensor[(3, 6, 10), int8] */;
    %34 = reshape(%15, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), int8] */;
    %35 = reshape(%17, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
    %36 = reshape(%33, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
    %37 = @func_5995(%34, %35, %36) /* ty=(Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */;
    %38 = cast(%32, dtype="float64") /* ty=Tensor[(3, 6, 10), float64] */;
    %39 = @func_6071(%5) /* ty=Tensor[(15, 9, 6), float64] */;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(15, 9, 6), float64] */;
    %41 = reshape(%40, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
    %42 = @func_6071(%41) /* ty=Tensor[(15, 9, 6), float64] */;
    %43 = cast(%42, dtype="float64") /* ty=Tensor[(15, 9, 6), float64] */;
    %44 = reshape(%43, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
    %45 = cast(%var_6861, dtype="float64") /* ty=Tensor[(550), float64] */;
    %46 = reshape(%45, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
    %47 = @func_681(%2, %3) /* ty=Tensor[(2, 3, 5), uint64] */;
    %48 = @func_795(%7) /* ty=Tensor[(11, 10, 5), float64] */;
    %49 = @func_2330(%10, %11) /* ty=Tensor[(14, 10, 5), bool] */;
    %50 = %37.3;
    %51 = cos(%38) /* ty=Tensor[(3, 6, 10), float64] */;
    %52 = @func_6071(%44) /* ty=Tensor[(15, 9, 6), float64] */;
    %53 = @func_795(%46) /* ty=Tensor[(11, 10, 5), float64] */;
    (%47, meta[relay.Constant][0] /* ty=Tensor[(1, 30), int16] */, %39, meta[relay.Constant][1] /* ty=Tensor[(810), float64] */, %48, %var_6861, %49, %var_6877, %var_6878, %16, %50, %51, %42, %52, %53)
  };
  %54(%var_6953, %var_6954, %var_6955, %var_6956, %var_6957) /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) */
}

def @func_15487() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) {
  @func_15485() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) */
}

def @func_14980() -> (Tensor[(54), int64],) {
  %57 = fn () -> (Tensor[(54), int64],) {
    %55 = @func_11361() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 3, 6), int64], Tensor[(54), int64], Tensor[(550), float64]) */;
    %56 = %55.2;
    (%56,)
  };
  %57() /* ty=(Tensor[(54), int64],) */
}

def @func_16531() -> (Tensor[(550), float64], Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64], float64) {
  %68 = fn () -> (Tensor[(550), float64], Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64], float64) {
    %58 = @func_14707() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) */;
    %59 = @func_14193() /* ty=(Tensor[(48, 2), uint16], Tensor[(3, 15, 810), int16], Tensor[(3, 15, 1), float64]) */;
    %60 = %59.2;
    %61 = cast(%60, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
    %62 = cast(7.62679f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %63 = reshape(%62, newshape=[]) /* ty=float64 */;
    %64 = @func_8685(%63) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) */;
    %65 = %58.2;
    %66 = acos(%61) /* ty=Tensor[(3, 15, 1), float32] */;
    %67 = %64.0;
    (%65, %66, %67, 7.62679f64 /* ty=float64 */)
  };
  %68() /* ty=(Tensor[(550), float64], Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64], float64) */
}

def @func_9568(%var_9565: Tensor[(3, 3, 6), int64], %var_9566: Tensor[(275, 2), float64], %var_9567: Tensor[(275, 2), float64]) -> (Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) {
  %101 = fn (%var_9500: Tensor[(3, 3, 6), int64], %var_9533: Tensor[(275, 2), float64], %var_9547: Tensor[(275, 2), float64]) -> (Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) {
    %69 = cast(%var_9500, dtype="int64") /* ty=Tensor[(3, 3, 6), int64] */;
    %70 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3, 3, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 3, 6), int64] */, dtype="int64") /* ty=Tensor[(3, 3, 6), int64] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 3, 6), int64] */, dtype="float32") /* ty=Tensor[(3, 3, 6), float32] */;
    %74 = shape_of(%var_9500, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%var_9500, dtype="float32") /* ty=Tensor[(3, 3, 6), float32] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %78 = cast(meta[relay.Constant][4] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %79 = cast(-7.92648f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
    %81 = cast(%var_9533, dtype="float64") /* ty=Tensor[(275, 2), float64] */;
    %82 = reshape(%77, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
    %83 = reshape(%78, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
    %84 = reshape(%79, newshape=[]) /* ty=float64 */;
    %85 = reshape(%80, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
    %86 = reshape(%81, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %87 = @func_9067(%82, %83, %84, %85, %86) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) */;
    %88 = cast(%var_9547, dtype="float64") /* ty=Tensor[(275, 2), float64] */;
    %89 = shape_of(%var_9533, dtype="int32") /* ty=Tensor[(2), int32] */;
    %90 = cast(%var_9533, dtype="float64") /* ty=Tensor[(275, 2), float64] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %92 = cast(%var_9547, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
    %93 = shape_of(%var_9533, dtype="int32") /* ty=Tensor[(2), int32] */;
    %94 = cast(%var_9533, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %96 = minimum(%71, %72) /* ty=Tensor[(3, 3, 6), int64] */;
    %97 = maximum(%75, %76) /* ty=Tensor[(3, 3, 6), float32] */;
    %98 = %87.6;
    %99 = power(%90, %91) /* ty=Tensor[(275, 2), float64] */;
    %100 = less(%94, %95) /* ty=Tensor[(275, 2), bool] */;
    (%96, %97, %98, meta[relay.Constant][4] /* ty=Tensor[(208), float32] */, -7.92648f64 /* ty=float64 */, meta[relay.Constant][5] /* ty=Tensor[(180), int16] */, %99, %100)
  };
  %101(%var_9565, %var_9566, %var_9567) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */
}

def @func_10020(%var_9962: Tensor[(1, 13, 11), float32], %var_9971: Tensor[(270), uint64], %var_9972: Tensor[(208), float32], %var_10011: bool) -> (Tensor[(1, 180), int16], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(3, 60), int16], Tensor[(?, 13, 11), float32], Tensor[(3, 7, 13), float64], bool, Tensor[(2, 15, 9), uint64]) {
  %102 = cast(%var_9971, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %103 = cast(%var_9972, dtype="float32") /* ty=Tensor[(208), float32] */;
  %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 60), int16] */, dtype="int16") /* ty=Tensor[(3, 60), int16] */;
  %105 = reshape(%102, newshape=[270]) /* ty=Tensor[(270), uint64] */;
  %106 = reshape(%103, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %107 = reshape(%104, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
  %108 = @func_9860(%105, %106, %107) /* ty=(Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) */;
  %109 = cast(%var_9962, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %110 = tan(%109) /* ty=Tensor[(1, 13, 11), float32] */;
  %111 = cast(%var_9962, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="float32") /* ty=Tensor[(1, 13, 11), float32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %115 = floor_divide(%113, %114) /* ty=Tensor[(?, 13, 11), float32] */;
  %116 = cast(%115, dtype="float64") /* ty=Tensor[(?, 13, 11), float64] */;
  %117 = sin(%116) /* ty=Tensor[(?, 13, 11), float64] */;
  %118 = cast(%117, dtype="float32") /* ty=Tensor[(?, 13, 11), float32] */;
  %119 = cast(%var_10011, dtype="bool") /* ty=bool */;
  %120 = reshape(%119, newshape=[]) /* ty=bool */;
  %121 = @func_7989(%120) /* ty=(Tensor[(12, 5, 8), bool], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */;
  %122 = cast(%var_9971, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %123 = reshape(%122, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %124 = @func_6155(%123) /* ty=(Tensor[(2, 15, 9), uint64],) */;
  %125 = %108.5;
  %126 = sinh(%118) /* ty=Tensor[(?, 13, 11), float32] */;
  %127 = %121.1;
  %128 = %124.0;
  (%125, %var_9971, %var_9972, meta[relay.Constant][6] /* ty=Tensor[(3, 60), int16] */, %126, %127, %var_10011, %128)
}

def @func_15071() -> Tensor[(550), float64] {
  %129 = @func_11799() /* ty=(Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) */;
  %129.1
}

def @func_11383() -> (Tensor[(4, 13, 11), float64],) {
  %132 = fn () -> (Tensor[(4, 13, 11), float64],) {
    %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
    %131 = acos(%130) /* ty=Tensor[(4, 13, 11), float64] */;
    (%131,)
  };
  %132() /* ty=(Tensor[(4, 13, 11), float64],) */
}

def @func_12977() -> Tensor[(3, 15, 1), float64] {
  %134 = fn () -> Tensor[(3, 15, 1), float64] {
    %133 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %133.0
  };
  %134() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_16631() -> (Tensor[(180), int16],) {
  %135 = @func_16045() /* ty=(Tensor[(180), int16], Tensor[(1, 10, 2), float32]) */;
  %136 = %135.0;
  (%136,)
}

def @func_16633() -> (Tensor[(180), int16],) {
  @func_16631() /* ty=(Tensor[(180), int16],) */
}

def @func_16078() -> (Tensor[(1, 10, 2), float32],) {
  @func_16076() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_14908() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  @func_14906() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */
}

def @func_16477() -> (Tensor[(2, 3, 5), uint64],) {
  @func_16475() /* ty=(Tensor[(2, 3, 5), uint64],) */
}

def @func_12272() -> (Tensor[(1, 10, 2), float32],) {
  %137 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%137,)
}

def @func_17681() -> (Tensor[(2, 3, 5), uint64],) {
  %138 = @func_17574() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %139 = %138.0;
  (%139,)
}

def @func_9013() -> (Tensor[(1, 10, 2), float32],) {
  @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_4699(%var_4697: Tensor[(2, 11, 14), uint32]) -> Tensor[(2, 11, 14), uint32] {
  @func_4696(%var_4697) /* ty=Tensor[(2, 11, 14), uint32] */
}

def @func_14565(%var_14563: Tensor[(225), float32], %var_14564: Tensor[(84), int16]) -> (Tensor[(8, 10, 2), float64], Tensor[(308), uint32], Tensor[(225), float32], Tensor[(84), int16]) {
  %151 = fn (%var_14557: Tensor[(225), float32], %var_14558: Tensor[(84), int16]) -> (Tensor[(8, 10, 2), float64], Tensor[(308), uint32], Tensor[(225), float32], Tensor[(84), int16]) {
    %140 = @func_13117() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) */;
    %141 = %140.0;
    %142 = cast(%141, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
    %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 10, 2), float32] */, dtype="float64") /* ty=Tensor[(8, 10, 2), float64] */;
    %144 = cast(%var_14557, dtype="float32") /* ty=Tensor[(225), float32] */;
    %145 = cast(%var_14558, dtype="int16") /* ty=Tensor[(84), int16] */;
    %146 = reshape(%144, newshape=[3, 15, 5]) /* ty=Tensor[(3, 15, 5), float32] */;
    %147 = reshape(%145, newshape=[84]) /* ty=Tensor[(84), int16] */;
    %148 = @func_10884(%146, %147) /* ty=(Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) */;
    %149 = minimum(%142, %143) /* ty=Tensor[(8, 10, 2), float64] */;
    %150 = %148.9;
    (%149, %150, %var_14557, %var_14558)
  };
  %151(%var_14563, %var_14564) /* ty=(Tensor[(8, 10, 2), float64], Tensor[(308), uint32], Tensor[(225), float32], Tensor[(84), int16]) */
}

def @func_17325() -> (Tensor[(1, 10, 2), float32],) {
  %152 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %153 = %152.0;
  (%153,)
}

def @func_15299() -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32]) {
  %157 = fn () -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32]) {
    %154 = @func_15220() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
    %155 = @func_12093() /* ty=Tensor[(3, 15, 1), float64] */;
    %156 = %154.1;
    (%155, %156)
  };
  %157() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32]) */
}

def @func_18576() -> (Tensor[(1, 10, 2), float32],) {
  %158 = @func_16496() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %159 = %158.0;
  (%159,)
}

def @func_12851() -> (Tensor[(3, 15, 1), float64],) {
  %160 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %161 = %160.1;
  (%161,)
}

def @func_8833() -> (Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) {
  %162 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %163 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 308), uint32] */, dtype="uint32") /* ty=Tensor[(1, 308), uint32] */;
  %164 = reshape(%163, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %165 = %162.4;
  %166 = @func_4696(%164) /* ty=Tensor[(2, 11, 14), uint32] */;
  (%165, %166, meta[relay.Constant][9] /* ty=Tensor[(1, 308), uint32] */)
}

def @func_10026(%var_10022: Tensor[(1, 13, 11), float32], %var_10023: Tensor[(270), uint64], %var_10024: Tensor[(208), float32], %var_10025: bool) -> (Tensor[(1, 180), int16], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(3, 60), int16], Tensor[(?, 13, 11), float32], Tensor[(3, 7, 13), float64], bool, Tensor[(2, 15, 9), uint64]) {
  @func_10020(%var_10022, %var_10023, %var_10024, %var_10025) /* ty=(Tensor[(1, 180), int16], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(3, 60), int16], Tensor[(?, 13, 11), float32], Tensor[(3, 7, 13), float64], bool, Tensor[(2, 15, 9), uint64]) */
}

def @func_15874() -> Tensor[(4, 13, 11), float64] {
  @func_15872() /* ty=Tensor[(4, 13, 11), float64] */
}

def @func_5655(%var_5653: Tensor[(10, 9, 9), float64], %var_5654: Tensor[(210), uint16]) -> (Tensor[(10, 9, 9), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 6, 16), uint16], uint16, Tensor[(1, 96), uint16]) {
  @func_5651(%var_5653, %var_5654) /* ty=(Tensor[(10, 9, 9), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 6, 16), uint16], uint16, Tensor[(1, 96), uint16]) */
}

def @func_16440() -> Tensor[(15, 9, 6), float64] {
  %167 = fn () -> Tensor[(15, 9, 6), float64] {
    @func_12890() /* ty=Tensor[(15, 9, 6), float64] */
  };
  %167() /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_18157() -> (Tensor[(3, 15, 1), float32],) {
  %168 = @func_15097() /* ty=(Tensor[(3, 15, 1), float32],) */;
  %169 = %168.0;
  (%169,)
}

def @func_14831(%var_14824: Tensor[(8, 7, 11), float64]) -> Tensor[(8, 7, 11), float64] {
  %170 = cast(%var_14824, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  sqrt(%170) /* ty=Tensor[(8, 7, 11), float64] */
}

def @func_8813() -> Tensor[(1, 10, 2), float32] {
  %171 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %171.0
}

def @func_12548() -> (Tensor[(1, 10, 2), float32],) {
  %172 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%172,)
}

def @func_16475() -> (Tensor[(2, 3, 5), uint64],) {
  %173 = @func_14948() /* ty=Tensor[(2, 3, 5), uint64] */;
  (%173,)
}

def @main(%var_18659: Tensor[(3, 15, 1), float64]) -> (Tensor[(3, 15, 96), uint64], Tensor[(3, 15, ?), uint32], Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, ?), int16]) {
  %174 = @func_12442() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) */;
  %175 = %174.1;
  %176 = @func_8452() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %177 = %176.0;
  %178 = cast(%175, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %179 = cast(%177, dtype="uint64") /* ty=Tensor[(3, 15, 1), uint64] */;
  %180 = cast(%var_18659, dtype="uint32") /* ty=Tensor[(3, 15, 1), uint32] */;
  %181 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%177, dtype="uint32") /* ty=Tensor[(3, 15, 1), uint32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %184 = @func_9013() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %185 = @func_16497() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 15, 1), float64] */, dtype="int16") /* ty=Tensor[(3, 15, 1), int16] */;
  %187 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%177, dtype="int16") /* ty=Tensor[(3, 15, 1), int16] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %190 = bitwise_or(%178, %179) /* ty=Tensor[(3, 15, 96), uint64] */;
  %191 = bitwise_xor(%182, %183) /* ty=Tensor[(3, 15, ?), uint32] */;
  %192 = %184.0;
  %193 = %185.0;
  %194 = logical_xor(%188, %189) /* ty=Tensor[(3, 15, ?), int16] */;
  (%190, %191, %192, %193, %194)
}

def @func_8688(%var_8686: float64) -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) {
  @func_8685(%var_8686) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) */
}

def @func_15221() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %197 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
    %195 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
    %196 = @func_14321() /* ty=Tensor[(1, 10, 2), float32] */;
    (%195, %196)
  };
  %197() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */
}

def @func_15377() -> (Tensor[(1, 10, 2), float32],) {
  %199 = fn () -> (Tensor[(1, 10, 2), float32],) {
    %198 = @func_10531() /* ty=Tensor[(1, 10, 2), float32] */;
    (%198,)
  };
  %199() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_15872() -> Tensor[(4, 13, 11), float64] {
  %200 = @func_11382() /* ty=(Tensor[(4, 13, 11), float64],) */;
  %200.0
}

def @func_9864(%var_9861: Tensor[(270), uint64], %var_9862: Tensor[(208), float32], %var_9863: Tensor[(1, 180), int16]) -> (Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) {
  %227 = fn (%var_9820: Tensor[(270), uint64], %var_9847: Tensor[(208), float32], %var_9849: Tensor[(1, 180), int16]) -> (Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) {
    %201 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
    %202 = cast(meta[relay.Constant][11] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %204 = reshape(%202, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
    %205 = reshape(%203, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
    %206 = @func_3186(%204, %205) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
    %207 = cast(%var_9820, dtype="uint64") /* ty=Tensor[(270), uint64] */;
    %208 = reshape(%207, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
    %209 = @func_6155(%208) /* ty=(Tensor[(2, 15, 9), uint64],) */;
    %210 = cast(%var_9847, dtype="float32") /* ty=Tensor[(208), float32] */;
    %211 = cast(%var_9847, dtype="float32") /* ty=Tensor[(208), float32] */;
    %212 = cast(-8.84119f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %213 = cast(%var_9849, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
    %214 = %206.1;
    %215 = cast(%214, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
    %216 = reshape(%210, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
    %217 = reshape(%211, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
    %218 = reshape(%212, newshape=[]) /* ty=float64 */;
    %219 = reshape(%213, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
    %220 = reshape(%215, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %221 = @func_9067(%216, %217, %218, %219, %220) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) */;
    %222 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %223 = %201.0;
    %224 = %209.0;
    %225 = %221.5;
    %226 = %222.0;
    (%223, %214, meta[relay.Constant][11] /* ty=Tensor[(728), float64] */, %224, %var_9820, %225, %var_9847, -8.84119f64 /* ty=float64 */, %var_9849, %226)
  };
  %227(%var_9861, %var_9862, %var_9863) /* ty=(Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) */
}

def @func_9073(%var_9068: Tensor[(2, 8, 13), float32], %var_9069: Tensor[(2, 8, 13), float32], %var_9070: float64, %var_9071: Tensor[(1, 180), int16], %var_9072: Tensor[(550), float64]) -> (Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) {
  %250 = fn (%var_9039: Tensor[(2, 8, 13), float32], %var_9040: Tensor[(2, 8, 13), float32], %var_9048: float64, %var_9063: Tensor[(1, 180), int16], %var_9064: Tensor[(550), float64]) -> (Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) {
    %228 = cast(%var_9040, dtype="float32") /* ty=Tensor[(2, 8, 13), float32] */;
    %229 = shape_of(%var_9039, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(%var_9039, dtype="float32") /* ty=Tensor[(2, 8, 13), float32] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %232 = cast(%var_9048, dtype="float64") /* ty=float64 */;
    %233 = cast(meta[relay.Constant][12] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
    %234 = reshape(%232, newshape=[]) /* ty=float64 */;
    %235 = reshape(%233, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
    %236 = cast(%var_9063, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
    %237 = cast(%var_9063, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
    %238 = cast(%var_9064, dtype="float64") /* ty=Tensor[(550), float64] */;
    %239 = cast(%var_9048, dtype="float64") /* ty=float64 */;
    %240 = cast(meta[relay.Constant][12] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
    %241 = reshape(%236, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
    %242 = reshape(%237, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
    %243 = reshape(%238, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %244 = reshape(%239, newshape=[]) /* ty=float64 */;
    %245 = reshape(%240, newshape=[350, 2]) /* ty=Tensor[(350, 2), float64] */;
    %246 = @func_6952(%241, %242, %243, %244, %245) /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) */;
    %247 = power(%230, %231) /* ty=Tensor[(2, 8, 13), float32] */;
    %248 = @func_2330(%234, %235) /* ty=Tensor[(14, 10, 5), bool] */;
    %249 = %246.6;
    (%247, %248, %var_9048, meta[relay.Constant][12] /* ty=Tensor[(700), float64] */, %249, %var_9063, %var_9064)
  };
  %250(%var_9068, %var_9069, %var_9070, %var_9071, %var_9072) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) */
}

def @func_12316() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) {
  @func_12314() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) */
}

def @func_13644() -> (Tensor[(3, 15, 1), float64],) {
  %251 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%251,)
}

def @func_15626() -> Tensor[(3, 15, 1), float64] {
  @func_15624() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_13646() -> (Tensor[(3, 15, 1), float64],) {
  @func_13644() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_11898() -> Tensor[(1, 10, 2), float32] {
  %253 = fn () -> Tensor[(1, 10, 2), float32] {
    %252 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
    %252.0
  };
  %253() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_14683() -> Tensor[(1, 10, 2), float32] {
  @func_14681() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_10102(%var_10099: float64, %var_10100: Tensor[(5, 140), float64], %var_10101: Tensor[(550), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(3, 3, 6), float32], Tensor[(54, 1), int64], Tensor[(550), float64], Tensor[(2, 15, 9), uint64], Tensor[(2, 15, 9), uint32], Tensor[(5, 140), float32]) {
  @func_10097(%var_10099, %var_10100, %var_10101) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(3, 3, 6), float32], Tensor[(54, 1), int64], Tensor[(550), float64], Tensor[(2, 15, 9), uint64], Tensor[(2, 15, 9), uint32], Tensor[(5, 140), float32]) */
}

def @func_12892() -> Tensor[(15, 9, 6), float64] {
  @func_12890() /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_18341() -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) {
  %257 = fn () -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) {
    %254 = @func_17574() /* ty=(Tensor[(2, 3, 5), uint64],) */;
    %255 = %254.0;
    %256 = @func_15671() /* ty=Tensor[(1, 10, 2), float32] */;
    (%255, %256)
  };
  %257() /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) */
}

def @func_8685(%var_8635: float64) -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) {
  %258 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %259 = cast(%var_8635, dtype="float64") /* ty=float64 */;
  %260 = cast(meta[relay.Constant][13] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %261 = reshape(%259, newshape=[]) /* ty=float64 */;
  %262 = reshape(%260, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %263 = cast(meta[relay.Constant][14] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %264 = cast(meta[relay.Constant][14] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %265 = reshape(%263, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %266 = reshape(%264, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %267 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %268 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %269 = %258.0;
  %270 = @func_2330(%261, %262) /* ty=Tensor[(14, 10, 5), bool] */;
  %271 = @func_681(%265, %266) /* ty=Tensor[(2, 3, 5), uint64] */;
  %272 = %267.0;
  (%268, %269, %270, %var_8635, meta[relay.Constant][13] /* ty=Tensor[(700), float64] */, %271, meta[relay.Constant][14] /* ty=Tensor[(30), int16] */, %272)
}

def @func_11120() -> (Tensor[(1, 10, 2), float32],) {
  %273 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %274 = %273.1;
  (%274,)
}

def @func_11962() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %275 = @func_11897() /* ty=Tensor[(1, 10, 2), float32] */;
  %276 = @func_11517() /* ty=Tensor[(1, 10, 2), float32] */;
  (%275, %276)
}

def @func_10808(%var_10807: Tensor[(210), uint16]) -> (Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) {
  %293 = fn (%var_10773: Tensor[(210), uint16]) -> (Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) {
    %277 = cast(%var_10773, dtype="uint16") /* ty=Tensor[(210), uint16] */;
    %278 = reshape(%277, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
    %279 = @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %280 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %281 = %280.0;
    %282 = cast(%281, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
    %283 = sin(%282) /* ty=Tensor[(1, 10, 2), float32] */;
    %284 = cast(%283, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
    %285 = acosh(%284) /* ty=Tensor[(1, 10, 2), float64] */;
    %286 = cast(%285, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
    %287 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %288 = cast(%283, dtype="uint32") /* ty=Tensor[(1, 10, 2), uint32] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %290 = @func_3197(%278) /* ty=Tensor[(1, 14, 15), bool] */;
    %291 = %279.0;
    %292 = subtract(%288, %289) /* ty=Tensor[(?, 10, 2), uint32] */;
    (%290, %var_10773, %291, %292)
  };
  %293(%var_10807) /* ty=(Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) */
}

def @func_11964() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  @func_11962() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */
}

def @func_14089() -> (Tensor[(3, 15, 1), float64], Tensor[(2, 15, 9), uint32], Tensor[(270), uint64]) {
  %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(270), uint64] */, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %295 = reshape(%294, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %296 = @func_9200(%295) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %297 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %298 = %296.2;
  (%297, %298, meta[relay.Constant][15] /* ty=Tensor[(270), uint64] */)
}

def @func_15352() -> (Tensor[(550), float64], Tensor[(1, 10, 2), float32]) {
  @func_15350() /* ty=(Tensor[(550), float64], Tensor[(1, 10, 2), float32]) */
}

def @func_18006() -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) {
  %303 = fn () -> (Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) {
    %299 = @func_17681() /* ty=(Tensor[(2, 3, 5), uint64],) */;
    %300 = @func_16496() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %301 = %299.0;
    %302 = %300.0;
    (%301, %302)
  };
  %303() /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 10, 2), float32]) */
}

def @func_13019() -> (Tensor[(3, 15, 1), float64],) {
  %304 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %305 = %304.1;
  (%305,)
}

def @func_16045() -> (Tensor[(180), int16], Tensor[(1, 10, 2), float32]) {
  %306 = @func_12548() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %307 = @func_14045() /* ty=Tensor[(180), int16] */;
  %308 = %306.0;
  (%307, %308)
}

def @func_14834(%var_14832: Tensor[(8, 7, 11), float64]) -> Tensor[(8, 7, 11), float64] {
  @func_14831(%var_14832) /* ty=Tensor[(8, 7, 11), float64] */
}

def @func_15672() -> Tensor[(1, 10, 2), float32] {
  %310 = fn () -> Tensor[(1, 10, 2), float32] {
    %309 = @func_15220() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
    %309.0
  };
  %310() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_4450(%var_4448: uint16, %var_4449: Tensor[(1, 6, 16), uint16]) -> Tensor[(1, 6, 16), uint16] {
  %313 = fn (%var_4441: uint16, %var_4442: Tensor[(1, 6, 16), uint16]) -> Tensor[(1, 6, 16), uint16] {
    %311 = cast(%var_4441, dtype="uint16") /* ty=uint16 */;
    %312 = cast(%var_4442, dtype="uint16") /* ty=Tensor[(1, 6, 16), uint16] */;
    left_shift(%311, %312) /* ty=Tensor[(1, 6, 16), uint16] */
  };
  %313(%var_4448, %var_4449) /* ty=Tensor[(1, 6, 16), uint16] */
}

def @func_12578() -> (Tensor[(3, 15, 1), float64],) {
  %315 = fn () -> (Tensor[(3, 15, 1), float64],) {
    %314 = @func_12093() /* ty=Tensor[(3, 15, 1), float64] */;
    (%314,)
  };
  %315() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_8477() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
  %320 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
    %316 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %317 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %318 = %316.0;
    %319 = %317.0;
    (%318, %319)
  };
  %320() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */
}

def @func_13021() -> (Tensor[(3, 15, 1), float64],) {
  @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_8596() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
  %321 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %322 = %321.0;
  %323 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%322, %323)
}

def @func_17248(%var_17243: Tensor[(3, 15, 96), bool]) -> Tensor[(3, 15, 96), bool] {
  %324 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %325 = %324.0;
  %326 = @func_13410() /* ty=(Tensor[(96), uint16],) */;
  %327 = %326.0;
  %328 = cast(%325, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
  %329 = cast(%327, dtype="bool") /* ty=Tensor[(96), bool] */;
  %330 = equal(%328, %329) /* ty=Tensor[(3, 15, 96), bool] */;
  %331 = cast(%var_17243, dtype="bool") /* ty=Tensor[(3, 15, 96), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(3, 15, 96), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%333, %334) /* ty=Tensor[(3, 15, 96), bool] */
}

def @func_10533() -> Tensor[(1, 10, 2), float32] {
  @func_10531() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_11883(%var_11882: Tensor[(1, 225), float32]) -> (Tensor[(1, 15, 10), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(3, 7, 13), float32], Tensor[(1, 225), float32], Tensor[(84), int16]) {
  %346 = fn (%var_11859: Tensor[(1, 225), float32]) -> (Tensor[(1, 15, 10), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(3, 7, 13), float32], Tensor[(1, 225), float32], Tensor[(84), int16]) {
    %335 = cast(meta[relay.Constant][16] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
    %336 = reshape(%335, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
    %337 = cast(%var_11859, dtype="float32") /* ty=Tensor[(1, 225), float32] */;
    %338 = cast(meta[relay.Constant][17] /* ty=Tensor[(84), int16] */, dtype="int16") /* ty=Tensor[(84), int16] */;
    %339 = reshape(%337, newshape=[3, 15, 5]) /* ty=Tensor[(3, 15, 5), float32] */;
    %340 = reshape(%338, newshape=[84]) /* ty=Tensor[(84), int16] */;
    %341 = @func_10884(%339, %340) /* ty=(Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) */;
    %342 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
    %343 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
    %344 = @func_3197(%336) /* ty=Tensor[(1, 14, 15), bool] */;
    %345 = %341.10;
    (%342, %343, %344, meta[relay.Constant][16] /* ty=Tensor[(210), uint16] */, %345, %var_11859, meta[relay.Constant][17] /* ty=Tensor[(84), int16] */)
  };
  %346(%var_11882) /* ty=(Tensor[(1, 15, 10), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(3, 7, 13), float32], Tensor[(1, 225), float32], Tensor[(84), int16]) */
}

def @func_13950() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64]) {
  @func_13948() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64]) */
}

def @func_18231(%var_18230: Tensor[(3, 15, 1), float32]) -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, ?), float64]) {
  %355 = fn (%var_18212: Tensor[(3, 15, 1), float32]) -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, ?), float64]) {
    %347 = @func_16530() /* ty=(Tensor[(550), float64], Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64], float64) */;
    %348 = %347.1;
    %349 = cast(%var_18212, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%348, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %353 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
    %354 = power(%351, %352) /* ty=Tensor[(3, 15, ?), float64] */;
    (%353, %354)
  };
  %355(%var_18230) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, ?), float64]) */
}

def @func_795(%var_754: Tensor[(11, 10, 5), float64]) -> Tensor[(11, 10, 5), float64] {
  %356 = cast(%var_754, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
  asinh(%356) /* ty=Tensor[(11, 10, 5), float64] */
}

def @func_8908() -> (Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) {
  %357 = cast(meta[relay.Constant][18] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %358 = reshape(%357, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %359 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %360 = @func_3197(%358) /* ty=Tensor[(1, 14, 15), bool] */;
  (%359, %360, meta[relay.Constant][18] /* ty=Tensor[(210), uint16] */)
}

def @func_8430() -> (Tensor[(1, 10, 2), float32],) {
  %361 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  %362 = asinh(%361) /* ty=Tensor[(1, 10, 2), float32] */;
  (%362,)
}

def @func_14470() -> (Tensor[(3, 15, 810), float64], Tensor[(?, 10, 2), int8], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 7, 13), bool], Tensor[(273), float64]) {
  %381 = fn () -> (Tensor[(3, 15, 810), float64], Tensor[(?, 10, 2), int8], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 7, 13), bool], Tensor[(273), float64]) {
    %363 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
    %364 = @func_10940() /* ty=Tensor[(1, 10, 2), float32] */;
    %365 = @func_12660() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) */;
    %366 = %365.0;
    %367 = cast(%366, dtype="int8") /* ty=Tensor[(1, 10, 2), int8] */;
    %368 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%364, dtype="int8") /* ty=Tensor[(1, 10, 2), int8] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %371 = @func_12577() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %372 = @func_11157() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
    %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
    %374 = reshape(%373, newshape=[273]) /* ty=Tensor[(273), float64] */;
    %375 = @func_13539(%374) /* ty=(Tensor[(308), uint32], Tensor[(3, 7, 13), bool], Tensor[(3, 15, 1), float64]) */;
    %376 = %363.0;
    %377 = bitwise_xor(%369, %370) /* ty=Tensor[(?, 10, 2), int8] */;
    %378 = %371.0;
    %379 = %372.0;
    %380 = %375.1;
    (%376, %377, %378, %379, %380, meta[relay.Constant][20] /* ty=Tensor[(273), float64] */)
  };
  %381() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(?, 10, 2), int8], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 7, 13), bool], Tensor[(273), float64]) */
}

def @func_8835() -> (Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) {
  @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */
}

def @func_12803() -> Tensor[(1, 10, 2), float32] {
  @func_11517() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_13076() -> Tensor[(1, 10, 2), float32] {
  @func_13074() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_13192(%var_13190: Tensor[(180), int16], %var_13191: Tensor[(55, 10), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(55, 10), float64], Tensor[(700), float64]) {
  @func_13188(%var_13190, %var_13191) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(55, 10), float64], Tensor[(700), float64]) */
}

def @func_15132() -> (Tensor[(96), uint16],) {
  %384 = fn () -> (Tensor[(96), uint16],) {
    %382 = @func_13117() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) */;
    %383 = %382.1;
    (%383,)
  };
  %384() /* ty=(Tensor[(96), uint16],) */
}

def @func_7707(%var_7651: Tensor[(6, 2, 7), int16], %var_7652: Tensor[(6, 2, 7), int16], %var_7657: Tensor[(273), float64], %var_7683: Tensor[(728), float64]) -> (Tensor[(6, 2, 7), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(6, 2, 7), bool], Tensor[(550), float64], Tensor[(728), float64], Tensor[(5, 6), int16], Tensor[(6, 2, 7), float64]) {
  %385 = cast(%var_7652, dtype="int16") /* ty=Tensor[(6, 2, 7), int16] */;
  %386 = shape_of(%var_7651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_7651, dtype="int16") /* ty=Tensor[(6, 2, 7), int16] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %389 = cast(%var_7657, dtype="float64") /* ty=Tensor[(273), float64] */;
  %390 = reshape(%389, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %391 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 2, 7), int16] */, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %392 = shape_of(%var_7651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_7651, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %396 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %397 = reshape(%395, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %398 = reshape(%396, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %399 = @func_3186(%397, %398) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
  %400 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %401 = cast(%var_7683, dtype="float64") /* ty=Tensor[(728), float64] */;
  %402 = reshape(%400, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %403 = reshape(%401, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
  %404 = @func_3186(%402, %403) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
  %405 = cast(%var_7652, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %406 = bitwise_xor(%387, %388) /* ty=Tensor[(6, 2, 7), int16] */;
  %407 = @func_4349(%390) /* ty=Tensor[(3, 7, 13), float64] */;
  %408 = logical_or(%393, %394) /* ty=Tensor[(6, 2, 7), bool] */;
  %409 = %399.2;
  %410 = %404.4;
  %411 = atan(%405) /* ty=Tensor[(6, 2, 7), float64] */;
  (%406, %407, %var_7657, %408, %409, %var_7683, %410, %411)
}

def @func_16346() -> Tensor[(1, 15, 10), float64] {
  %412 = fn () -> Tensor[(1, 15, 10), float64] {
    @func_10497() /* ty=Tensor[(1, 15, 10), float64] */
  };
  %412() /* ty=Tensor[(1, 15, 10), float64] */
}

def @func_17959() -> Tensor[(1, 10, 2), float32] {
  %413 = @func_17664() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4, 13, 11), float64]) */;
  %413.0
}

def @func_16797() -> (Tensor[(2, 3, 5), uint64],) {
  @func_16795() /* ty=(Tensor[(2, 3, 5), uint64],) */
}

def @func_16781() -> Tensor[(1, 10, 2), float32] {
  @func_15671() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_14950() -> Tensor[(2, 3, 5), uint64] {
  @func_14948() /* ty=Tensor[(2, 3, 5), uint64] */
}

def @func_13634(%var_13633: Tensor[(270), uint64]) -> (Tensor[(2, 11, 14), uint32], Tensor[(3, 15, 270), bool], Tensor[(1, 10, 2), float32]) {
  %425 = fn (%var_13611: Tensor[(270), uint64]) -> (Tensor[(2, 11, 14), uint32], Tensor[(3, 15, 270), bool], Tensor[(1, 10, 2), float32]) {
    %414 = cast(%var_13611, dtype="uint64") /* ty=Tensor[(270), uint64] */;
    %415 = reshape(%414, newshape=[270]) /* ty=Tensor[(270), uint64] */;
    %416 = @func_11250(%415) /* ty=(Tensor[(2, 11, 14), uint32], Tensor[(1, 14, 15), bool], Tensor[(105, 2), uint16], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) */;
    %417 = @func_12314() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) */;
    %418 = %417.0;
    %419 = cast(%418, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
    %420 = cast(%var_13611, dtype="bool") /* ty=Tensor[(270), bool] */;
    %421 = @func_11993() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %422 = %416.0;
    %423 = not_equal(%419, %420) /* ty=Tensor[(3, 15, 270), bool] */;
    %424 = %421.0;
    (%422, %423, %424)
  };
  %425(%var_13633) /* ty=(Tensor[(2, 11, 14), uint32], Tensor[(3, 15, 270), bool], Tensor[(1, 10, 2), float32]) */
}

def @func_18387() -> (Tensor[(1, 10, 2), float32],) {
  %427 = fn () -> (Tensor[(1, 10, 2), float32],) {
    %426 = @func_16360() /* ty=Tensor[(1, 10, 2), float32] */;
    (%426,)
  };
  %427() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_17574() -> (Tensor[(2, 3, 5), uint64],) {
  %428 = @func_16795() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %429 = %428.0;
  (%429,)
}

def @func_8867() -> (Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) {
  %438 = fn () -> (Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) {
    %430 = cast(meta[relay.Constant][22] /* ty=Tensor[(270), uint64] */, dtype="uint64") /* ty=Tensor[(270), uint64] */;
    %431 = reshape(%430, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
    %432 = @func_6155(%431) /* ty=(Tensor[(2, 15, 9), uint64],) */;
    %433 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %434 = %433.1;
    %435 = cast(%434, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
    %436 = %432.0;
    %437 = acosh(%435) /* ty=Tensor[(3, 15, 1), float32] */;
    (%436, meta[relay.Constant][22] /* ty=Tensor[(270), uint64] */, %437)
  };
  %438() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */
}

def @func_15485() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) {
  %439 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %440 = cast(7.47226f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %441 = reshape(%440, newshape=[]) /* ty=float64 */;
  %442 = @func_8685(%441) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) */;
  %443 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %444 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %445 = @func_10531() /* ty=Tensor[(1, 10, 2), float32] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  %447 = cast(7.47226f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %448 = %439.1;
  %449 = %442.7;
  %450 = %443.0;
  %451 = %444.1;
  %452 = mod(%446, %447) /* ty=Tensor[(1, 10, 2), float64] */;
  (%448, %449, %450, %451, %452)
}

def @func_11801() -> (Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) {
  @func_11799() /* ty=(Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) */
}

def @func_12105() -> (Tensor[(210), uint16],) {
  %453 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
  %454 = %453.2;
  (%454,)
}

def @func_12352(%var_12351: Tensor[(4), int32]) -> (Tensor[(3, 15, 1), float32], Tensor[(3, 7, 13), float64], Tensor[(4), int32], Tensor[(28), int32]) {
  %463 = fn (%var_12332: Tensor[(4), int32]) -> (Tensor[(3, 15, 1), float32], Tensor[(3, 7, 13), float64], Tensor[(4), int32], Tensor[(28), int32]) {
    %455 = @func_12314() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) */;
    %456 = cast(%var_12332, dtype="int32") /* ty=Tensor[(4), int32] */;
    %457 = cast(meta[relay.Constant][23] /* ty=Tensor[(28), int32] */, dtype="int32") /* ty=Tensor[(28), int32] */;
    %458 = reshape(%456, newshape=[4]) /* ty=Tensor[(4), int32] */;
    %459 = reshape(%457, newshape=[28]) /* ty=Tensor[(28), int32] */;
    %460 = @func_10264(%458, %459) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) */;
    %461 = %455.2;
    %462 = %460.7;
    (%461, %462, %var_12332, meta[relay.Constant][23] /* ty=Tensor[(28), int32] */)
  };
  %463(%var_12351) /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 7, 13), float64], Tensor[(4), int32], Tensor[(28), int32]) */
}

def @func_798(%var_796: Tensor[(11, 10, 5), float64]) -> Tensor[(11, 10, 5), float64] {
  @func_795(%var_796) /* ty=Tensor[(11, 10, 5), float64] */
}

def @func_14709() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) {
  @func_14707() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) */
}

def @func_13363() -> (Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) {
  %472 = fn () -> (Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) {
    %464 = @func_12093() /* ty=Tensor[(3, 15, 1), float64] */;
    %465 = cast(%464, dtype="uint8") /* ty=Tensor[(3, 15, 1), uint8] */;
    %466 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 15, 5), float64] */, dtype="uint8") /* ty=Tensor[(3, 15, 5), uint8] */;
    %467 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 15, 5), float64] */, dtype="float32") /* ty=Tensor[(3, 15, 5), float32] */;
    %468 = cast(%464, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %469 = logical_xor(%465, %466) /* ty=Tensor[(3, 15, 5), uint8] */;
    %470 = atan(%467) /* ty=Tensor[(3, 15, 5), float32] */;
    %471 = tan(%468) /* ty=Tensor[(3, 15, 1), float64] */;
    (%469, %470, %471)
  };
  %472() /* ty=(Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) */
}

def @func_10611() -> Tensor[(1, 10, 2), float32] {
  %473 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %473.0
}

def @func_13074() -> Tensor[(1, 10, 2), float32] {
  %474 = @func_12272() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %474.0
}

def @func_16242() -> Tensor[(3, 15, 1), float64] {
  @func_16240() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_13412() -> (Tensor[(96), uint16],) {
  @func_13410() /* ty=(Tensor[(96), uint16],) */
}

def @func_17424(%var_17422: Tensor[(16, 11, 10), uint64], %var_17423: Tensor[(16, 11, 10), uint64]) -> Tensor[(16, 11, 10), uint64] {
  %479 = fn (%var_17404: Tensor[(16, 11, 10), uint64], %var_17405: Tensor[(16, 11, 10), uint64]) -> Tensor[(16, 11, 10), uint64] {
    %475 = cast(%var_17405, dtype="uint64") /* ty=Tensor[(16, 11, 10), uint64] */;
    %476 = shape_of(%var_17404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%var_17404, dtype="uint64") /* ty=Tensor[(16, 11, 10), uint64] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    minimum(%477, %478) /* ty=Tensor[(16, 11, 10), uint64] */
  };
  %479(%var_17422, %var_17423) /* ty=Tensor[(16, 11, 10), uint64] */
}

def @func_14906() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %480 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
  %481 = %480.1;
  %482 = @func_14321() /* ty=Tensor[(1, 10, 2), float32] */;
  (%481, %482)
}

def @func_12423(%var_12420: float64, %var_12421: Tensor[(77, 4), uint32], %var_12422: Tensor[(550), float64]) -> (float64, float64, Tensor[(?, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(77, 4), uint32], Tensor[(11, 10, 5), float64], Tensor[(90, 2), int16], Tensor[(550), float64], Tensor[(700), float64]) {
  @func_12418(%var_12420, %var_12421, %var_12422) /* ty=(float64, float64, Tensor[(?, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(77, 4), uint32], Tensor[(11, 10, 5), float64], Tensor[(90, 2), int16], Tensor[(550), float64], Tensor[(700), float64]) */
}

def @func_15368() -> Tensor[(3, 15, 1), float64] {
  @func_15366() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_16470() -> (Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) {
  %488 = fn () -> (Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) {
    %483 = @func_14498() /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) */;
    %484 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
    %485 = reshape(%484, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
    %486 = %483.1;
    %487 = @func_3197(%485) /* ty=Tensor[(1, 14, 15), bool] */;
    (%486, %487, meta[relay.Constant][25] /* ty=Tensor[(210), uint16] */)
  };
  %488() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */
}

def @func_12074(%var_12073: Tensor[(11, 10, 2), float32]) -> (Tensor[(11, 10, 2), bool],) {
  %494 = fn (%var_12059: Tensor[(11, 10, 2), float32]) -> (Tensor[(11, 10, 2), bool],) {
    %489 = @func_11962() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
    %490 = %489.1;
    %491 = cast(%490, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
    %492 = cast(%var_12059, dtype="bool") /* ty=Tensor[(11, 10, 2), bool] */;
    %493 = less_equal(%491, %492) /* ty=Tensor[(11, 10, 2), bool] */;
    (%493,)
  };
  %494(%var_12073) /* ty=(Tensor[(11, 10, 2), bool],) */
}

def @func_10613() -> Tensor[(1, 10, 2), float32] {
  @func_10611() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_4085(%var_4082: Tensor[(1, 2, 2), int32], %var_4083: Tensor[(7, 2, 2), int32], %var_4084: Tensor[(550), float64]) -> (Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) {
  @func_4080(%var_4082, %var_4083, %var_4084) /* ty=(Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) */
}

def @func_8815() -> Tensor[(1, 10, 2), float32] {
  @func_8813() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_16795() -> (Tensor[(2, 3, 5), uint64],) {
  %495 = @func_14948() /* ty=Tensor[(2, 3, 5), uint64] */;
  (%495,)
}

def @func_17782() -> (Tensor[(2, 16, 2), float64], Tensor[(64), float64], Tensor[(?, 15, 10), bool]) {
  %506 = fn () -> (Tensor[(2, 16, 2), float64], Tensor[(64), float64], Tensor[(?, 15, 10), bool]) {
    %496 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %497 = reshape(%496, newshape=[2, 16, 2]) /* ty=Tensor[(2, 16, 2), float64] */;
    %498 = @func_13462(%497) /* ty=(Tensor[(2, 16, 2), float64], Tensor[(1, 10, 2), float32]) */;
    %499 = @func_16345() /* ty=Tensor[(1, 15, 10), float64] */;
    %500 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%499, dtype="bool") /* ty=Tensor[(1, 15, 10), bool] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %504 = %498.0;
    %505 = not_equal(%502, %503) /* ty=Tensor[(?, 15, 10), bool] */;
    (%504, meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, %505)
  };
  %506() /* ty=(Tensor[(2, 16, 2), float64], Tensor[(64), float64], Tensor[(?, 15, 10), bool]) */
}

def @func_16544() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(96), uint16]) {
  @func_16542() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(96), uint16]) */
}

def @func_15099() -> (Tensor[(3, 15, 1), float32],) {
  @func_15097() /* ty=(Tensor[(3, 15, 1), float32],) */
}

def @func_12792(%var_12755: Tensor[(4), int32], %var_12756: Tensor[(28), int32], %var_12757: Tensor[(5, 110), float64], %var_12778: Tensor[(270), uint64]) -> (Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(5, 110), float64], Tensor[(1, 10, 2), float32], Tensor[(105, 2), uint16], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(270), uint64]) {
  %507 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %508 = cast(%var_12755, dtype="int32") /* ty=Tensor[(4), int32] */;
  %509 = cast(%var_12756, dtype="int32") /* ty=Tensor[(28), int32] */;
  %510 = cast(%var_12757, dtype="float64") /* ty=Tensor[(5, 110), float64] */;
  %511 = reshape(%508, newshape=[1, 2, 2]) /* ty=Tensor[(1, 2, 2), int32] */;
  %512 = reshape(%509, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), int32] */;
  %513 = reshape(%510, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %514 = @func_4080(%511, %512, %513) /* ty=(Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) */;
  %515 = cast(meta[relay.Constant][28] /* ty=Tensor[(105, 2), uint16] */, dtype="uint16") /* ty=Tensor[(105, 2), uint16] */;
  %516 = reshape(%515, newshape=[210]) /* ty=Tensor[(210), uint16] */;
  %517 = @func_10806(%516) /* ty=(Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) */;
  %518 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %519 = cast(%var_12778, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %520 = reshape(%519, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %521 = @func_9200(%520) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %522 = %507.0;
  %523 = %514.2;
  %524 = %517.2;
  %525 = %518.0;
  %526 = %521.1;
  (%522, %523, %var_12755, %var_12756, %var_12757, %524, meta[relay.Constant][28] /* ty=Tensor[(105, 2), uint16] */, %525, %526, %var_12778)
}

def @func_8728() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) {
  %527 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %528 = cast(meta[relay.Constant][29] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %529 = cast(meta[relay.Constant][29] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %530 = reshape(%528, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %531 = reshape(%529, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %532 = cast(meta[relay.Constant][30] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %533 = reshape(%532, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), float64] */;
  %534 = %527.0;
  %535 = @func_681(%530, %531) /* ty=Tensor[(2, 3, 5), uint64] */;
  %536 = @func_6071(%533) /* ty=Tensor[(15, 9, 6), float64] */;
  (%534, %535, meta[relay.Constant][29] /* ty=Tensor[(30), int16] */, %536, meta[relay.Constant][30] /* ty=Tensor[(810), float64] */)
}

def @func_13206() -> (Tensor[(1, 10, 2), float32],) {
  @func_13204() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_9634() -> (Tensor[(1, 10, 2), float32],) {
  %539 = fn () -> (Tensor[(1, 10, 2), float32],) {
    %537 = @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %538 = %537.0;
    (%538,)
  };
  %539() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_12805() -> Tensor[(1, 10, 2), float32] {
  @func_12803() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_10731(%var_10728: Tensor[(180), int16], %var_10729: Tensor[(550), float64], %var_10730: Tensor[(700), float64]) -> (Tensor[(810), float64], Tensor[(1, 15, 10), float64], Tensor[(5, 6), int16], Tensor[(728), float64], Tensor[(1, 10, 2), float32], Tensor[(180), int16], Tensor[(550), float64], float64, Tensor[(700), float64], Tensor[(3, 15, 273), float32]) {
  %567 = fn (%var_10689: Tensor[(180), int16], %var_10690: Tensor[(550), float64], %var_10692: Tensor[(700), float64]) -> (Tensor[(810), float64], Tensor[(1, 15, 10), float64], Tensor[(5, 6), int16], Tensor[(728), float64], Tensor[(1, 10, 2), float32], Tensor[(180), int16], Tensor[(550), float64], float64, Tensor[(700), float64], Tensor[(3, 15, 273), float32]) {
    %540 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
    %541 = cast(meta[relay.Constant][31] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %542 = cast(meta[relay.Constant][31] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %543 = reshape(%541, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
    %544 = reshape(%542, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float64] */;
    %545 = @func_3186(%543, %544) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */;
    %546 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %547 = %546.1;
    %548 = cast(%var_10689, dtype="int16") /* ty=Tensor[(180), int16] */;
    %549 = cast(%var_10689, dtype="int16") /* ty=Tensor[(180), int16] */;
    %550 = cast(%var_10690, dtype="float64") /* ty=Tensor[(550), float64] */;
    %551 = cast(-3.43402f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %552 = cast(%var_10692, dtype="float64") /* ty=Tensor[(700), float64] */;
    %553 = reshape(%548, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
    %554 = reshape(%549, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
    %555 = reshape(%550, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %556 = reshape(%551, newshape=[]) /* ty=float64 */;
    %557 = reshape(%552, newshape=[350, 2]) /* ty=Tensor[(350, 2), float64] */;
    %558 = @func_6952(%553, %554, %555, %556, %557) /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) */;
    %559 = %558.10;
    %560 = cast(%547, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
    %561 = cast(%559, dtype="float32") /* ty=Tensor[(273), float32] */;
    %562 = %540.0;
    %563 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
    %564 = %545.4;
    %565 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
    %566 = floor_divide(%560, %561) /* ty=Tensor[(3, 15, 273), float32] */;
    (%562, %563, %564, meta[relay.Constant][31] /* ty=Tensor[(728), float64] */, %565, %var_10689, %var_10690, -3.43402f64 /* ty=float64 */, %var_10692, %566)
  };
  %567(%var_10728, %var_10729, %var_10730) /* ty=(Tensor[(810), float64], Tensor[(1, 15, 10), float64], Tensor[(5, 6), int16], Tensor[(728), float64], Tensor[(1, 10, 2), float32], Tensor[(180), int16], Tensor[(550), float64], float64, Tensor[(700), float64], Tensor[(3, 15, 273), float32]) */
}

def @func_12692() -> (Tensor[(210), uint16],) {
  %570 = fn () -> (Tensor[(210), uint16],) {
    %568 = @func_12105() /* ty=(Tensor[(210), uint16],) */;
    %569 = %568.0;
    (%569,)
  };
  %570() /* ty=(Tensor[(210), uint16],) */
}

def @func_16047() -> (Tensor[(180), int16], Tensor[(1, 10, 2), float32]) {
  @func_16045() /* ty=(Tensor[(180), int16], Tensor[(1, 10, 2), float32]) */
}

def @func_10499() -> Tensor[(1, 15, 10), float64] {
  @func_10497() /* ty=Tensor[(1, 15, 10), float64] */
}

def @func_15720() -> (Tensor[(550), float64], Tensor[(4, 13, 11), float64]) {
  %571 = @func_15350() /* ty=(Tensor[(550), float64], Tensor[(1, 10, 2), float32]) */;
  %572 = @func_11382() /* ty=(Tensor[(4, 13, 11), float64],) */;
  %573 = %571.0;
  %574 = %572.0;
  (%573, %574)
}

def @func_17145(%var_17143: Tensor[(3, 15, 9), float64], %var_17144: Tensor[(270), uint64]) -> (Tensor[(3, 15, 9), bool], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64]) {
  %584 = fn (%var_17131: Tensor[(3, 15, 9), float64], %var_17138: Tensor[(270), uint64]) -> (Tensor[(3, 15, 9), bool], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64]) {
    %575 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %576 = %575.0;
    %577 = cast(%576, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
    %578 = cast(%var_17131, dtype="bool") /* ty=Tensor[(3, 15, 9), bool] */;
    %579 = cast(%var_17138, dtype="uint64") /* ty=Tensor[(270), uint64] */;
    %580 = reshape(%579, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
    %581 = @func_6155(%580) /* ty=(Tensor[(2, 15, 9), uint64],) */;
    %582 = not_equal(%577, %578) /* ty=Tensor[(3, 15, 9), bool] */;
    %583 = %581.0;
    (%582, %583, %var_17138)
  };
  %584(%var_17143, %var_17144) /* ty=(Tensor[(3, 15, 9), bool], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64]) */
}

def @func_11362() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 3, 6), int64], Tensor[(54), int64], Tensor[(550), float64]) {
  %595 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(3, 3, 6), int64], Tensor[(54), int64], Tensor[(550), float64]) {
    %585 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %586 = cast(meta[relay.Constant][32] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
    %587 = cast(meta[relay.Constant][33] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %588 = cast(meta[relay.Constant][33] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %589 = reshape(%586, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
    %590 = reshape(%587, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
    %591 = reshape(%588, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
    %592 = @func_9564(%589, %590, %591) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
    %593 = %585.0;
    %594 = %592.0;
    (%593, %594, meta[relay.Constant][32] /* ty=Tensor[(54), int64] */, meta[relay.Constant][33] /* ty=Tensor[(550), float64] */)
  };
  %595() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 3, 6), int64], Tensor[(54), int64], Tensor[(550), float64]) */
}

def @func_11581() -> (Tensor[(9, 10, 2), bool], Tensor[(1, 10, 2), float32]) {
  %596 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  %599 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 10, 2), float32] */, dtype="bool") /* ty=Tensor[(9, 10, 2), bool] */;
  %600 = not_equal(%598, %599) /* ty=Tensor[(9, 10, 2), bool] */;
  %601 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%600, %601)
}

def @func_18159() -> (Tensor[(3, 15, 1), float32],) {
  @func_18157() /* ty=(Tensor[(3, 15, 1), float32],) */
}

def @func_11729(%var_11617: Tensor[(210), uint16], %var_11640: Tensor[(270), uint64], %var_11676: bool, %var_11726: Tensor[(10, 3), int8], %var_11727: Tensor[(180), int8]) -> (Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32], Tensor[(210), uint16], Tensor[(270), uint64], Tensor[(1, 14, 15), bool], bool, Tensor[(13, 11), float32], bool, Tensor[(14, 10, 5), bool], Tensor[(700), float64], Tensor[(?, 10, 2), int64], Tensor[(308), uint32], Tensor[(550), float64], Tensor[(3, 18), int64], Tensor[(550), float64], Tensor[(2, 6, 15), int8], Tensor[(10, 3), int8], Tensor[(180), int8]) {
  %602 = cast(%var_11617, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %603 = reshape(%602, newshape=[210]) /* ty=Tensor[(210), uint16] */;
  %604 = @func_10806(%603) /* ty=(Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32]) */;
  %605 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
  %606 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 11), float32] */;
  %607 = cast(%var_11676, dtype="bool") /* ty=bool */;
  %608 = reshape(%606, newshape=[143, 1]) /* ty=Tensor[(143, 1), float32] */;
  %609 = reshape(%607, newshape=[]) /* ty=bool */;
  %610 = @func_11053(%608, %609) /* ty=(Tensor[(270), uint64], Tensor[(1, 10, 2), float64], Tensor[(3, 60), int16], Tensor[(143, 1), float32], Tensor[(208), float32], bool) */;
  %611 = %610.5;
  %612 = cast(%611, dtype="float64") /* ty=float64 */;
  %613 = cast(meta[relay.Constant][36] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %614 = reshape(%612, newshape=[]) /* ty=float64 */;
  %615 = reshape(%613, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %616 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  %617 = cast(%var_11640, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %618 = reshape(%617, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %619 = @func_9200(%618) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %620 = %619.1;
  %621 = cast(%620, dtype="int64") /* ty=Tensor[(1, 10, 2), int64] */;
  %622 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%616, dtype="int64") /* ty=Tensor[(1, 10, 2), int64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %625 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %626 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 18), int64] */, dtype="int64") /* ty=Tensor[(3, 18), int64] */;
  %627 = cast(meta[relay.Constant][38] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %628 = cast(meta[relay.Constant][38] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %629 = reshape(%626, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
  %630 = reshape(%627, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %631 = reshape(%628, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %632 = @func_9564(%629, %630, %631) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
  %633 = cast(%var_11726, dtype="int8") /* ty=Tensor[(10, 3), int8] */;
  %634 = cast(%var_11727, dtype="int8") /* ty=Tensor[(180), int8] */;
  %635 = cast(%var_11727, dtype="int8") /* ty=Tensor[(180), int8] */;
  %636 = reshape(%633, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), int8] */;
  %637 = reshape(%634, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
  %638 = reshape(%635, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), int8] */;
  %639 = @func_5995(%636, %637, %638) /* ty=(Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */;
  %640 = @func_11517() /* ty=Tensor[(1, 10, 2), float32] */;
  %641 = %604.3;
  %642 = %605.1;
  %643 = @func_2330(%614, %615) /* ty=Tensor[(14, 10, 5), bool] */;
  %644 = maximum(%623, %624) /* ty=Tensor[(?, 10, 2), int64] */;
  %645 = %625.2;
  %646 = %632.2;
  %647 = %639.0;
  (%640, %641, %var_11617, %var_11640, %642, %611, meta[relay.Constant][35] /* ty=Tensor[(13, 11), float32] */, %var_11676, %643, meta[relay.Constant][36] /* ty=Tensor[(700), float64] */, %644, %645, %646, meta[relay.Constant][37] /* ty=Tensor[(3, 18), int64] */, meta[relay.Constant][38] /* ty=Tensor[(550), float64] */, %647, %var_11726, %var_11727)
}

def @func_18293(%var_18292: Tensor[(15, 10, 2), float32]) -> (Tensor[(15, 10, 2), float64],) {
  %653 = fn (%var_18270: Tensor[(15, 10, 2), float32]) -> (Tensor[(15, 10, 2), float64],) {
    %648 = @func_16045() /* ty=(Tensor[(180), int16], Tensor[(1, 10, 2), float32]) */;
    %649 = %648.1;
    %650 = cast(%649, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
    %651 = cast(%var_18270, dtype="float64") /* ty=Tensor[(15, 10, 2), float64] */;
    %652 = mod(%650, %651) /* ty=Tensor[(15, 10, 2), float64] */;
    (%652,)
  };
  %653(%var_18292) /* ty=(Tensor[(15, 10, 2), float64],) */
}

def @func_12798(%var_12794: Tensor[(4), int32], %var_12795: Tensor[(28), int32], %var_12796: Tensor[(5, 110), float64], %var_12797: Tensor[(270), uint64]) -> (Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(5, 110), float64], Tensor[(1, 10, 2), float32], Tensor[(105, 2), uint16], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(270), uint64]) {
  @func_12792(%var_12794, %var_12795, %var_12796, %var_12797) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(5, 110), float64], Tensor[(1, 10, 2), float32], Tensor[(105, 2), uint16], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(270), uint64]) */
}

def @func_14091() -> (Tensor[(3, 15, 1), float64], Tensor[(2, 15, 9), uint32], Tensor[(270), uint64]) {
  @func_14089() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(2, 15, 9), uint32], Tensor[(270), uint64]) */
}

def @func_18508() -> Tensor[(210), uint16] {
  %655 = fn () -> Tensor[(210), uint16] {
    %654 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
    %654.0
  };
  %655() /* ty=Tensor[(210), uint16] */
}

def @func_11122() -> (Tensor[(1, 10, 2), float32],) {
  @func_11120() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_5995(%var_5959: Tensor[(2, 1, 15), int8], %var_5960: Tensor[(2, 6, 15), int8], %var_5969: Tensor[(2, 6, 15), int8]) -> (Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  %656 = cast(%var_5959, dtype="int8") /* ty=Tensor[(2, 1, 15), int8] */;
  %657 = cast(%var_5960, dtype="int8") /* ty=Tensor[(2, 6, 15), int8] */;
  %658 = cast(%var_5969, dtype="uint16") /* ty=Tensor[(2, 6, 15), uint16] */;
  %659 = shape_of(%var_5960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_5960, dtype="uint16") /* ty=Tensor[(2, 6, 15), uint16] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %662 = cast(meta[relay.Constant][39] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %663 = reshape(%662, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %664 = multiply(%656, %657) /* ty=Tensor[(2, 6, 15), int8] */;
  %665 = maximum(%660, %661) /* ty=Tensor[(2, 6, 15), uint16] */;
  %666 = @func_4349(%663) /* ty=Tensor[(3, 7, 13), float64] */;
  (%664, %665, %666, meta[relay.Constant][39] /* ty=Tensor[(273), float64] */)
}

def @func_7989(%var_7963: bool) -> (Tensor[(12, 5, 8), bool], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  %667 = cast(%var_7963, dtype="bool") /* ty=bool */;
  %668 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 5, 8), bool] */, dtype="bool") /* ty=Tensor[(12, 5, 8), bool] */;
  %669 = cast(meta[relay.Constant][41] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %670 = reshape(%669, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %671 = logical_and(%667, %668) /* ty=Tensor[(12, 5, 8), bool] */;
  %672 = @func_4349(%670) /* ty=Tensor[(3, 7, 13), float64] */;
  (%671, %672, meta[relay.Constant][41] /* ty=Tensor[(273), float64] */)
}

def @func_14616() -> (Tensor[(210), uint16], Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(3, 15, 1), float64]) {
  %687 = fn () -> (Tensor[(210), uint16], Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(3, 15, 1), float64]) {
    %673 = @func_14279() /* ty=(Tensor[(210), uint16],) */;
    %674 = @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %675 = cast(meta[relay.Constant][42] /* ty=Tensor[(4), int32] */, dtype="int32") /* ty=Tensor[(4), int32] */;
    %676 = cast(meta[relay.Constant][43] /* ty=Tensor[(28), int32] */, dtype="int32") /* ty=Tensor[(28), int32] */;
    %677 = cast(meta[relay.Constant][44] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %678 = reshape(%675, newshape=[1, 2, 2]) /* ty=Tensor[(1, 2, 2), int32] */;
    %679 = reshape(%676, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), int32] */;
    %680 = reshape(%677, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %681 = @func_4080(%678, %679, %680) /* ty=(Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) */;
    %682 = @func_14469() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(?, 10, 2), int8], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 7, 13), bool], Tensor[(273), float64]) */;
    %683 = %673.0;
    %684 = %674.0;
    %685 = %681.2;
    %686 = %682.2;
    (%683, %684, %685, meta[relay.Constant][42] /* ty=Tensor[(4), int32] */, meta[relay.Constant][43] /* ty=Tensor[(28), int32] */, meta[relay.Constant][44] /* ty=Tensor[(550), float64] */, %686)
  };
  %687() /* ty=(Tensor[(210), uint16], Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(3, 15, 1), float64]) */
}

def @func_15097() -> (Tensor[(3, 15, 1), float32],) {
  %688 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %689 = %688.1;
  (%689,)
}

def @func_8598() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
  @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */
}

def @func_10423() -> Tensor[(3, 15, 1), float64] {
  @func_10421() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_18496() -> (Tensor[(3, 15, 1), float64],) {
  %692 = fn () -> (Tensor[(3, 15, 1), float64],) {
    %690 = @func_13900() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %691 = %690.0;
    (%691,)
  };
  %692() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_8557() -> Tensor[(3, 15, 1), float64] {
  %693 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %693.0
}

def @func_18529() -> (Tensor[(3, 15, 1), float64],) {
  %696 = fn () -> (Tensor[(3, 15, 1), float64],) {
    %694 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %695 = %694.0;
    (%695,)
  };
  %696() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_13172(%var_13171: Tensor[(3, 15, 810), float64]) -> Tensor[(3, 15, 810), uint32] {
  %703 = fn (%var_13165: Tensor[(3, 15, 810), float64]) -> Tensor[(3, 15, 810), uint32] {
    %697 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
    %698 = %697.0;
    %699 = cast(%var_13165, dtype="uint32") /* ty=Tensor[(3, 15, 810), uint32] */;
    %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%698, dtype="uint32") /* ty=Tensor[(3, 15, 810), uint32] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    multiply(%701, %702) /* ty=Tensor[(3, 15, 810), uint32] */
  };
  %703(%var_13171) /* ty=Tensor[(3, 15, 810), uint32] */
}

def @func_10887(%var_10885: Tensor[(3, 15, 5), float32], %var_10886: Tensor[(84), int16]) -> (Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) {
  %734 = fn (%var_10819: Tensor[(3, 15, 5), float32], %var_10845: Tensor[(84), int16]) -> (Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) {
    %704 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
    %705 = %704.2;
    %706 = cast(%705, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %707 = cast(%var_10819, dtype="float64") /* ty=Tensor[(3, 15, 5), float64] */;
    %708 = cast(%705, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %709 = cast(meta[relay.Constant][45] /* ty=Tensor[(420), int64] */, dtype="int64") /* ty=Tensor[(420), int64] */;
    %710 = reshape(%709, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), int64] */;
    %711 = cast(meta[relay.Constant][45] /* ty=Tensor[(420), int64] */, dtype="bool") /* ty=Tensor[(420), bool] */;
    %712 = cast(%705, dtype="bool") /* ty=Tensor[(3, 15, 1), bool] */;
    %713 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
    %714 = cast(meta[relay.Constant][48] /* ty=Tensor[(308), uint32] */, dtype="uint32") /* ty=Tensor[(308), uint32] */;
    %715 = reshape(%714, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
    %716 = cast(%var_10845, dtype="int16") /* ty=Tensor[(84), int16] */;
    %717 = cast(%var_10845, dtype="int16") /* ty=Tensor[(84), int16] */;
    %718 = cast(meta[relay.Constant][46] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
    %719 = cast(meta[relay.Constant][47] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %720 = reshape(%716, newshape=[6, 2, 7]) /* ty=Tensor[(6, 2, 7), int16] */;
    %721 = reshape(%717, newshape=[6, 2, 7]) /* ty=Tensor[(6, 2, 7), int16] */;
    %722 = reshape(%718, newshape=[273]) /* ty=Tensor[(273), float64] */;
    %723 = reshape(%719, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %724 = @func_7707(%720, %721, %722, %723) /* ty=(Tensor[(6, 2, 7), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(6, 2, 7), bool], Tensor[(550), float64], Tensor[(728), float64], Tensor[(5, 6), int16], Tensor[(6, 2, 7), float64]) */;
    %725 = %724.1;
    %726 = cast(%725, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
    %727 = power(%706, %707) /* ty=Tensor[(3, 15, 5), float64] */;
    %728 = sin(%708) /* ty=Tensor[(3, 15, 1), float64] */;
    %729 = @func_6226(%710) /* ty=Tensor[(5, 6, 14), bool] */;
    %730 = less(%711, %712) /* ty=Tensor[(3, 15, 420), bool] */;
    %731 = %713.1;
    %732 = @func_4696(%715) /* ty=Tensor[(2, 11, 14), uint32] */;
    %733 = sigmoid(%726) /* ty=Tensor[(3, 7, 13), float32] */;
    (%727, %728, %729, %var_10845, meta[relay.Constant][46] /* ty=Tensor[(273), float64] */, meta[relay.Constant][47] /* ty=Tensor[(728), float64] */, %730, %731, %732, meta[relay.Constant][48] /* ty=Tensor[(308), uint32] */, %733)
  };
  %734(%var_10885, %var_10886) /* ty=(Tensor[(3, 15, 5), float64], Tensor[(3, 15, 1), float64], Tensor[(5, 6, 14), bool], Tensor[(84), int16], Tensor[(273), float64], Tensor[(728), float64], Tensor[(3, 15, 420), bool], Tensor[(3, 15, 1), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32], Tensor[(3, 7, 13), float32]) */
}

def @func_15073() -> Tensor[(550), float64] {
  @func_15071() /* ty=Tensor[(550), float64] */
}

def @func_11799() -> (Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) {
  %735 = cast(meta[relay.Constant][49] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %736 = cast(meta[relay.Constant][49] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %737 = cast(-2.8464f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %738 = cast(meta[relay.Constant][50] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %739 = cast(meta[relay.Constant][51] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %740 = reshape(%735, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %741 = reshape(%736, newshape=[2, 8, 13]) /* ty=Tensor[(2, 8, 13), float32] */;
  %742 = reshape(%737, newshape=[]) /* ty=float64 */;
  %743 = reshape(%738, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
  %744 = reshape(%739, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %745 = @func_9067(%740, %741, %742, %743, %744) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(14, 10, 5), bool], Tensor[(1, 180), int16], Tensor[(550), float64]) */;
  %746 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %747 = %746.0;
  %748 = cast(-2.8464f64 /* ty=float64 */, dtype="int16") /* ty=int16 */;
  %749 = cast(%747, dtype="int16") /* ty=Tensor[(1, 10, 2), int16] */;
  %750 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
  %751 = %745.6;
  %752 = multiply(%748, %749) /* ty=Tensor[(1, 10, 2), int16] */;
  (%750, %751, meta[relay.Constant][49] /* ty=Tensor[(208), float32] */, meta[relay.Constant][50] /* ty=Tensor[(180), int16] */, meta[relay.Constant][51] /* ty=Tensor[(550), float64] */, %752)
}

def @func_15566() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float32], Tensor[(1, 14, 15), bool]) {
  %753 = @func_13362() /* ty=(Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) */;
  %754 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %755 = %754.1;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %757 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
  %758 = %753.2;
  %759 = exp(%756) /* ty=Tensor[(3, 15, 1), float32] */;
  %760 = %757.1;
  (%758, %759, %760)
}

def @func_12890() -> Tensor[(15, 9, 6), float64] {
  %761 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %761.3
}

def @func_11313() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 810), float64], Tensor[(28), int32], Tensor[(4), int32], Tensor[(14, 2), int32]) {
  @func_11311() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 810), float64], Tensor[(28), int32], Tensor[(4), int32], Tensor[(14, 2), int32]) */
}

def @func_13204() -> (Tensor[(1, 10, 2), float32],) {
  %762 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %763 = %762.1;
  (%763,)
}

def @func_8559() -> Tensor[(3, 15, 1), float64] {
  @func_8557() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_14045() -> Tensor[(180), int16] {
  %764 = @func_11799() /* ty=(Tensor[(1, 15, 10), float64], Tensor[(550), float64], Tensor[(208), float32], Tensor[(180), int16], Tensor[(550), float64], Tensor[(1, 10, 2), int16]) */;
  %764.3
}

def @func_17665() -> (Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4, 13, 11), float64]) {
  %769 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4, 13, 11), float64]) {
    %765 = @func_15720() /* ty=(Tensor[(550), float64], Tensor[(4, 13, 11), float64]) */;
    %766 = @func_11897() /* ty=Tensor[(1, 10, 2), float32] */;
    %767 = %765.0;
    %768 = @func_15872() /* ty=Tensor[(4, 13, 11), float64] */;
    (%766, %767, %768)
  };
  %769() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(550), float64], Tensor[(4, 13, 11), float64]) */
}

def @func_10165(%var_10164: Tensor[(30), int16]) -> (Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) {
  %777 = fn (%var_10143: Tensor[(30), int16]) -> (Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) {
    %770 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
    %771 = cast(%var_10143, dtype="int16") /* ty=Tensor[(30), int16] */;
    %772 = cast(%var_10143, dtype="int16") /* ty=Tensor[(30), int16] */;
    %773 = reshape(%771, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
    %774 = reshape(%772, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
    %775 = %770.3;
    %776 = @func_681(%773, %774) /* ty=Tensor[(2, 3, 5), uint64] */;
    (%775, %776, %var_10143)
  };
  %777(%var_10164) /* ty=(Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) */
}

def @func_17047() -> (Tensor[(1, 10, 2), float32],) {
  %778 = @func_13575() /* ty=Tensor[(1, 10, 2), float32] */;
  (%778,)
}

def @func_6071(%var_6064: Tensor[(15, 9, 6), float64]) -> Tensor[(15, 9, 6), float64] {
  %779 = cast(%var_6064, dtype="float64") /* ty=Tensor[(15, 9, 6), float64] */;
  acosh(%779) /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_2333(%var_2331: float64, %var_2332: Tensor[(14, 10, 5), float64]) -> Tensor[(14, 10, 5), bool] {
  %785 = fn (%var_2300: float64, %var_2301: Tensor[(14, 10, 5), float64]) -> Tensor[(14, 10, 5), bool] {
    %780 = cast(%var_2300, dtype="float64") /* ty=float64 */;
    %781 = cast(%var_2301, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
    %782 = floor_divide(%780, %781) /* ty=Tensor[(14, 10, 5), float64] */;
    %783 = cast(%var_2300, dtype="bool") /* ty=bool */;
    %784 = cast(%782, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
    less_equal(%783, %784) /* ty=Tensor[(14, 10, 5), bool] */
  };
  %785(%var_2331, %var_2332) /* ty=Tensor[(14, 10, 5), bool] */
}

def @func_9730(%var_9667: Tensor[(550), float64]) -> (Tensor[(27, 2), int64], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(208), uint8], Tensor[(15, 9, 6), float64], Tensor[(810), float32]) {
  %786 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %787 = cast(meta[relay.Constant][52] /* ty=Tensor[(27, 2), int64] */, dtype="int64") /* ty=Tensor[(27, 2), int64] */;
  %788 = cast(%var_9667, dtype="float64") /* ty=Tensor[(550), float64] */;
  %789 = cast(%var_9667, dtype="float64") /* ty=Tensor[(550), float64] */;
  %790 = reshape(%787, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
  %791 = reshape(%788, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %792 = reshape(%789, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %793 = @func_9564(%790, %791, %792) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
  %794 = %793.3;
  %795 = cast(meta[relay.Constant][53] /* ty=Tensor[(208), float32] */, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(1), int32] */;
  %797 = cast(%794, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %799 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %800 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %801 = %800.0;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(810), float32] */;
  %803 = %786.0;
  %804 = left_shift(%797, %798) /* ty=Tensor[(208), uint8] */;
  %805 = %799.3;
  %806 = tan(%802) /* ty=Tensor[(810), float32] */;
  (meta[relay.Constant][52] /* ty=Tensor[(27, 2), int64] */, %var_9667, %803, %804, %805, %806)
}

def @func_11159() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  @func_11157() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */
}

def @func_14681() -> Tensor[(1, 10, 2), float32] {
  %807 = @func_11517() /* ty=Tensor[(1, 10, 2), float32] */;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  cosh(%808) /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_8910() -> (Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) {
  @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */
}

def @func_6226(%var_6219: Tensor[(5, 6, 14), int64]) -> Tensor[(5, 6, 14), bool] {
  %809 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 6, 14), int64] */, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %810 = shape_of(%var_6219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%var_6219, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%811, %812) /* ty=Tensor[(5, 6, 14), bool] */
}

def @func_4351(%var_4350: Tensor[(3, 7, 13), float64]) -> Tensor[(3, 7, 13), float64] {
  %814 = fn (%var_4342: Tensor[(3, 7, 13), float64]) -> Tensor[(3, 7, 13), float64] {
    %813 = cast(%var_4342, dtype="float64") /* ty=Tensor[(3, 7, 13), float64] */;
    exp(%813) /* ty=Tensor[(3, 7, 13), float64] */
  };
  %814(%var_4350) /* ty=Tensor[(3, 7, 13), float64] */
}

def @func_12442() -> (Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) {
  %822 = fn () -> (Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) {
    %815 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %816 = cast(meta[relay.Constant][55] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
    %817 = reshape(%816, newshape=[96]) /* ty=Tensor[(96), uint16] */;
    %818 = @func_9482(%817) /* ty=(Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) */;
    %819 = %815.1;
    %820 = %818.3;
    %821 = @func_10497() /* ty=Tensor[(1, 15, 10), float64] */;
    (%819, %820, meta[relay.Constant][55] /* ty=Tensor[(96), uint16] */, %821)
  };
  %822() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) */
}

def @func_12274() -> (Tensor[(1, 10, 2), float32],) {
  @func_12272() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_12853() -> (Tensor[(3, 15, 1), float64],) {
  @func_12851() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_16088() -> Tensor[(15, 9, 6), float64] {
  %823 = fn () -> Tensor[(15, 9, 6), float64] {
    @func_12890() /* ty=Tensor[(15, 9, 6), float64] */
  };
  %823() /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_11736(%var_11731: Tensor[(210), uint16], %var_11732: Tensor[(270), uint64], %var_11733: bool, %var_11734: Tensor[(10, 3), int8], %var_11735: Tensor[(180), int8]) -> (Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32], Tensor[(210), uint16], Tensor[(270), uint64], Tensor[(1, 14, 15), bool], bool, Tensor[(13, 11), float32], bool, Tensor[(14, 10, 5), bool], Tensor[(700), float64], Tensor[(?, 10, 2), int64], Tensor[(308), uint32], Tensor[(550), float64], Tensor[(3, 18), int64], Tensor[(550), float64], Tensor[(2, 6, 15), int8], Tensor[(10, 3), int8], Tensor[(180), int8]) {
  @func_11729(%var_11731, %var_11732, %var_11733, %var_11734, %var_11735) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(?, 10, 2), uint32], Tensor[(210), uint16], Tensor[(270), uint64], Tensor[(1, 14, 15), bool], bool, Tensor[(13, 11), float32], bool, Tensor[(14, 10, 5), bool], Tensor[(700), float64], Tensor[(?, 10, 2), int64], Tensor[(308), uint32], Tensor[(550), float64], Tensor[(3, 18), int64], Tensor[(550), float64], Tensor[(2, 6, 15), int8], Tensor[(10, 3), int8], Tensor[(180), int8]) */
}

def @func_12093() -> Tensor[(3, 15, 1), float64] {
  %824 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %824.0
}

def @func_8450() -> (Tensor[(3, 15, 1), float64],) {
  %825 = cast(meta[relay.Constant][56] /* ty=Tensor[(3, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %826 = cosh(%825) /* ty=Tensor[(3, 15, 1), float64] */;
  (%826,)
}

def @func_15624() -> Tensor[(3, 15, 1), float64] {
  %827 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %827.1
}

def @func_18578() -> (Tensor[(1, 10, 2), float32],) {
  @func_18576() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_7713(%var_7709: Tensor[(6, 2, 7), int16], %var_7710: Tensor[(6, 2, 7), int16], %var_7711: Tensor[(273), float64], %var_7712: Tensor[(728), float64]) -> (Tensor[(6, 2, 7), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(6, 2, 7), bool], Tensor[(550), float64], Tensor[(728), float64], Tensor[(5, 6), int16], Tensor[(6, 2, 7), float64]) {
  @func_7707(%var_7709, %var_7710, %var_7711, %var_7712) /* ty=(Tensor[(6, 2, 7), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(6, 2, 7), bool], Tensor[(550), float64], Tensor[(728), float64], Tensor[(5, 6), int16], Tensor[(6, 2, 7), float64]) */
}

def @func_9011() -> (Tensor[(1, 10, 2), float32],) {
  %828 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
  (%828,)
}

def @func_13576() -> Tensor[(1, 10, 2), float32] {
  %830 = fn () -> Tensor[(1, 10, 2), float32] {
    %829 = @func_11993() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %829.0
  };
  %830() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_5651(%var_5633: Tensor[(10, 9, 9), float64], %var_5641: Tensor[(210), uint16]) -> (Tensor[(10, 9, 9), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 6, 16), uint16], uint16, Tensor[(1, 96), uint16]) {
  %831 = cast(%var_5633, dtype="float64") /* ty=Tensor[(10, 9, 9), float64] */;
  %832 = cast(%var_5641, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %833 = reshape(%832, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %834 = cast(meta[relay.Constant][57] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %835 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 96), uint16] */, dtype="uint16") /* ty=Tensor[(1, 96), uint16] */;
  %836 = reshape(%834, newshape=[]) /* ty=uint16 */;
  %837 = reshape(%835, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), uint16] */;
  %838 = sqrt(%831) /* ty=Tensor[(10, 9, 9), float64] */;
  %839 = @func_3197(%833) /* ty=Tensor[(1, 14, 15), bool] */;
  %840 = @func_4447(%836, %837) /* ty=Tensor[(1, 6, 16), uint16] */;
  (%838, %839, %var_5641, %840, meta[relay.Constant][57] /* ty=uint16 */, meta[relay.Constant][58] /* ty=Tensor[(1, 96), uint16] */)
}

def @func_16844() -> (Tensor[(3, 15, 1), float64],) {
  %843 = fn () -> (Tensor[(3, 15, 1), float64],) {
    %841 = @func_15485() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) */;
    %842 = %841.3;
    (%842,)
  };
  %843() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_9262() -> (Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) {
  %844 = @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %845 = %844.0;
  %846 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %847 = %846.0;
  %848 = cast(%845, dtype="int32") /* ty=Tensor[(3, 15, 1), int32] */;
  %849 = cast(%847, dtype="int32") /* ty=Tensor[(810), int32] */;
  %850 = minimum(%848, %849) /* ty=Tensor[(3, 15, 810), int32] */;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(3, 15, 810), float64] */;
  %852 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %853 = sin(%851) /* ty=Tensor[(3, 15, 810), float64] */;
  %854 = %852.2;
  (%853, %854)
}

def @func_10264(%var_10215: Tensor[(4), int32], %var_10216: Tensor[(28), int32]) -> (Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) {
  %855 = cast(%var_10215, dtype="int32") /* ty=Tensor[(4), int32] */;
  %856 = cast(%var_10216, dtype="int32") /* ty=Tensor[(28), int32] */;
  %857 = cast(meta[relay.Constant][59] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %858 = reshape(%855, newshape=[1, 2, 2]) /* ty=Tensor[(1, 2, 2), int32] */;
  %859 = reshape(%856, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), int32] */;
  %860 = reshape(%857, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %861 = @func_4080(%858, %859, %860) /* ty=(Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) */;
  %862 = @func_9011() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %863 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %864 = cast(meta[relay.Constant][60] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %865 = reshape(%864, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %866 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %867 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  %868 = %861.2;
  %869 = %862.0;
  %870 = %863.2;
  %871 = @func_4349(%865) /* ty=Tensor[(3, 7, 13), float64] */;
  %872 = %866.2;
  (%867, %868, %var_10215, %var_10216, meta[relay.Constant][59] /* ty=Tensor[(550), float64] */, %869, %870, %871, meta[relay.Constant][60] /* ty=Tensor[(273), float64] */, %872)
}

def @func_13464(%var_13463: Tensor[(2, 16, 2), float64]) -> (Tensor[(2, 16, 2), float64], Tensor[(1, 10, 2), float32]) {
  %877 = fn (%var_13453: Tensor[(2, 16, 2), float64]) -> (Tensor[(2, 16, 2), float64], Tensor[(1, 10, 2), float32]) {
    %873 = cast(%var_13453, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
    %874 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %875 = atanh(%873) /* ty=Tensor[(2, 16, 2), float64] */;
    %876 = %874.0;
    (%875, %876)
  };
  %877(%var_13463) /* ty=(Tensor[(2, 16, 2), float64], Tensor[(1, 10, 2), float32]) */
}

def @func_18044() -> Tensor[(2, 3, 5), uint64] {
  %878 = @func_16475() /* ty=(Tensor[(2, 3, 5), uint64],) */;
  %878.0
}

def @func_9733(%var_9731: Tensor[(550), float64]) -> (Tensor[(27, 2), int64], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(208), uint8], Tensor[(15, 9, 6), float64], Tensor[(810), float32]) {
  @func_9730(%var_9731) /* ty=(Tensor[(27, 2), int64], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(208), uint8], Tensor[(15, 9, 6), float64], Tensor[(810), float32]) */
}

def @func_6074(%var_6072: Tensor[(15, 9, 6), float64]) -> Tensor[(15, 9, 6), float64] {
  @func_6071(%var_6072) /* ty=Tensor[(15, 9, 6), float64] */
}

def @func_11003(%var_11000: float64, %var_11001: Tensor[(700), float64], %var_11002: Tensor[(550), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32], float64, Tensor[(700), float64], Tensor[(550), float64], Tensor[(11, 10, 5), float64]) {
  %891 = fn (%var_10978: float64, %var_10979: Tensor[(700), float64], %var_10980: Tensor[(550), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32], float64, Tensor[(700), float64], Tensor[(550), float64], Tensor[(11, 10, 5), float64]) {
    %879 = cast(%var_10978, dtype="float64") /* ty=float64 */;
    %880 = cast(%var_10979, dtype="float64") /* ty=Tensor[(700), float64] */;
    %881 = cast(%var_10980, dtype="float64") /* ty=Tensor[(550), float64] */;
    %882 = reshape(%879, newshape=[]) /* ty=float64 */;
    %883 = reshape(%880, newshape=[5, 140]) /* ty=Tensor[(5, 140), float64] */;
    %884 = reshape(%881, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %885 = @func_10097(%882, %883, %884) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(3, 3, 6), float32], Tensor[(54, 1), int64], Tensor[(550), float64], Tensor[(2, 15, 9), uint64], Tensor[(2, 15, 9), uint32], Tensor[(5, 140), float32]) */;
    %886 = cast(%var_10980, dtype="float64") /* ty=Tensor[(550), float64] */;
    %887 = reshape(%886, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
    %888 = @func_10531() /* ty=Tensor[(1, 10, 2), float32] */;
    %889 = %885.7;
    %890 = @func_795(%887) /* ty=Tensor[(11, 10, 5), float64] */;
    (%888, %889, %var_10978, %var_10979, %var_10980, %890)
  };
  %891(%var_11000, %var_11001, %var_11002) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32], float64, Tensor[(700), float64], Tensor[(550), float64], Tensor[(11, 10, 5), float64]) */
}

def @func_11253(%var_11251: Tensor[(270), uint64]) -> (Tensor[(2, 11, 14), uint32], Tensor[(1, 14, 15), bool], Tensor[(105, 2), uint16], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) {
  @func_11250(%var_11251) /* ty=(Tensor[(2, 11, 14), uint32], Tensor[(1, 14, 15), bool], Tensor[(105, 2), uint16], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) */
}

def @func_14193() -> (Tensor[(48, 2), uint16], Tensor[(3, 15, 810), int16], Tensor[(3, 15, 1), float64]) {
  %892 = cast(meta[relay.Constant][61] /* ty=Tensor[(48, 2), uint16] */, dtype="uint16") /* ty=Tensor[(48, 2), uint16] */;
  %893 = reshape(%892, newshape=[96]) /* ty=Tensor[(96), uint16] */;
  %894 = @func_9482(%893) /* ty=(Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) */;
  %895 = %894.0;
  %896 = @func_13250() /* ty=Tensor[(3, 15, 1), float64] */;
  %897 = cast(%895, dtype="int16") /* ty=Tensor[(810), int16] */;
  %898 = cast(%896, dtype="int16") /* ty=Tensor[(3, 15, 1), int16] */;
  %899 = bitwise_and(%897, %898) /* ty=Tensor[(3, 15, 810), int16] */;
  %900 = @func_11930() /* ty=Tensor[(3, 15, 1), float64] */;
  (meta[relay.Constant][61] /* ty=Tensor[(48, 2), uint16] */, %899, %900)
}

def @func_17961() -> Tensor[(1, 10, 2), float32] {
  @func_17959() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_16200() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64]) {
  %901 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %902 = @func_14498() /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) */;
  %903 = @func_13900() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %904 = %901.0;
  %905 = %902.1;
  %906 = %903.0;
  (%904, %905, %906)
}

def @func_16783() -> Tensor[(1, 10, 2), float32] {
  @func_16781() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_10576() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) {
  %907 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %908 = cast(meta[relay.Constant][62] /* ty=Tensor[(308), uint32] */, dtype="uint32") /* ty=Tensor[(308), uint32] */;
  %909 = reshape(%908, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %910 = %907.0;
  %911 = @func_4696(%909) /* ty=Tensor[(2, 11, 14), uint32] */;
  (%910, %911, meta[relay.Constant][62] /* ty=Tensor[(308), uint32] */)
}

def @func_17251(%var_17249: Tensor[(3, 15, 96), bool]) -> Tensor[(3, 15, 96), bool] {
  @func_17248(%var_17249) /* ty=Tensor[(3, 15, 96), bool] */
}

def @func_12418(%var_12371: float64, %var_12408: Tensor[(77, 4), uint32], %var_12413: Tensor[(550), float64]) -> (float64, float64, Tensor[(?, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(77, 4), uint32], Tensor[(11, 10, 5), float64], Tensor[(90, 2), int16], Tensor[(550), float64], Tensor[(700), float64]) {
  %912 = cast(%var_12371, dtype="float64") /* ty=float64 */;
  %913 = reshape(%912, newshape=[]) /* ty=float64 */;
  %914 = @func_8685(%913) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(1, 10, 2), float32]) */;
  %915 = @func_12041() /* ty=(Tensor[(?, 10, 2), uint8],) */;
  %916 = %915.0;
  %917 = cast(%916, dtype="float64") /* ty=Tensor[(?, 10, 2), float64] */;
  %918 = sinh(%917) /* ty=Tensor[(?, 10, 2), float64] */;
  %919 = cast(%918, dtype="float32") /* ty=Tensor[(?, 10, 2), float32] */;
  %920 = cast(%var_12408, dtype="uint32") /* ty=Tensor[(77, 4), uint32] */;
  %921 = reshape(%920, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %922 = cast(meta[relay.Constant][63] /* ty=Tensor[(90, 2), int16] */, dtype="int16") /* ty=Tensor[(90, 2), int16] */;
  %923 = cast(meta[relay.Constant][63] /* ty=Tensor[(90, 2), int16] */, dtype="int16") /* ty=Tensor[(90, 2), int16] */;
  %924 = cast(%var_12413, dtype="float64") /* ty=Tensor[(550), float64] */;
  %925 = %914.3;
  %926 = cast(%925, dtype="float64") /* ty=float64 */;
  %927 = cast(meta[relay.Constant][64] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %928 = reshape(%922, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %929 = reshape(%923, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), int16] */;
  %930 = reshape(%924, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %931 = reshape(%926, newshape=[]) /* ty=float64 */;
  %932 = reshape(%927, newshape=[350, 2]) /* ty=Tensor[(350, 2), float64] */;
  %933 = @func_6952(%928, %929, %930, %931, %932) /* ty=(Tensor[(2, 3, 5), uint64], Tensor[(1, 30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(350, 2), float64], Tensor[(3, 6, 10), float32], Tensor[(273), float64], Tensor[(3, 6, 10), float64], Tensor[(15, 9, 6), float64], Tensor[(15, 9, 6), float64], Tensor[(11, 10, 5), float64]) */;
  %934 = erf(%919) /* ty=Tensor[(?, 10, 2), float32] */;
  %935 = @func_4696(%921) /* ty=Tensor[(2, 11, 14), uint32] */;
  %936 = %933.4;
  (%925, %var_12371, %934, %935, %var_12408, %936, meta[relay.Constant][63] /* ty=Tensor[(90, 2), int16] */, %var_12413, meta[relay.Constant][64] /* ty=Tensor[(700), float64] */)
}

def @func_16497() -> (Tensor[(1, 10, 2), float32],) {
  %938 = fn () -> (Tensor[(1, 10, 2), float32],) {
    %937 = @func_14962() /* ty=Tensor[(1, 10, 2), float32] */;
    (%937,)
  };
  %938() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_14948() -> Tensor[(2, 3, 5), uint64] {
  %939 = @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */;
  %939.1
}

def @func_14499() -> (Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) {
  %944 = fn () -> (Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) {
    %940 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
    %941 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %942 = %940.2;
    %943 = %941.0;
    (%942, %943)
  };
  %944() /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 15, 1), float64]) */
}

def @func_3190(%var_3188: Tensor[(13, 4, 14), float64], %var_3189: Tensor[(13, 4, 14), float64]) -> (Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) {
  @func_3186(%var_3188, %var_3189) /* ty=(Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) */
}

def @func_14154(%var_14153: Tensor[(550), float64]) -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(210), uint16], Tensor[(2, 15, 9), uint64], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(550), float64]) {
  %961 = fn (%var_14145: Tensor[(550), float64]) -> (Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(210), uint16], Tensor[(2, 15, 9), uint64], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(550), float64]) {
    %945 = @func_12441() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) */;
    %946 = @func_13204() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %947 = %946.0;
    %948 = cast(%947, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
    %949 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
    %950 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
    %951 = cast(meta[relay.Constant][65] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
    %952 = cast(%var_14145, dtype="float64") /* ty=Tensor[(550), float64] */;
    %953 = reshape(%951, newshape=[180]) /* ty=Tensor[(180), int16] */;
    %954 = reshape(%952, newshape=[55, 10]) /* ty=Tensor[(55, 10), float64] */;
    %955 = @func_13188(%953, %954) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(55, 10), float64], Tensor[(700), float64]) */;
    %956 = %945.0;
    %957 = atan(%948) /* ty=Tensor[(1, 10, 2), float32] */;
    %958 = %949.0;
    %959 = %950.0;
    %960 = %955.1;
    (%956, %957, %958, %959, %960, meta[relay.Constant][65] /* ty=Tensor[(180), int16] */, %var_14145)
  };
  %961(%var_14153) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float32], Tensor[(210), uint16], Tensor[(2, 15, 9), uint64], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(550), float64]) */
}

def @func_8432() -> (Tensor[(1, 10, 2), float32],) {
  @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_11583() -> (Tensor[(9, 10, 2), bool], Tensor[(1, 10, 2), float32]) {
  @func_11581() /* ty=(Tensor[(9, 10, 2), bool], Tensor[(1, 10, 2), float32]) */
}

def @func_9948() -> (Tensor[(3, 15, 1), float64],) {
  %962 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%962,)
}

def @func_9450(%var_9448: Tensor[(273), float64]) -> (Tensor[(3, 15, 1), float64], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  @func_9447(%var_9448) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */
}

def @func_18615() -> (Tensor[(3, 15, 1), float64], Tensor[(270), uint64]) {
  %967 = fn () -> (Tensor[(3, 15, 1), float64], Tensor[(270), uint64]) {
    %963 = @func_15485() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(1, 10, 2), float64]) */;
    %964 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
    %965 = %963.2;
    %966 = %964.1;
    (%965, %966)
  };
  %967() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(270), uint64]) */
}

def @func_16703() -> (Tensor[(1, 10, 2), float32], Tensor[(8, 7, 11), float64], Tensor[(154, 4), float64]) {
  %973 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(8, 7, 11), float64], Tensor[(154, 4), float64]) {
    %968 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %969 = cast(meta[relay.Constant][66] /* ty=Tensor[(154, 4), float64] */, dtype="float64") /* ty=Tensor[(154, 4), float64] */;
    %970 = reshape(%969, newshape=[8, 7, 11]) /* ty=Tensor[(8, 7, 11), float64] */;
    %971 = %968.0;
    %972 = @func_14831(%970) /* ty=Tensor[(8, 7, 11), float64] */;
    (%971, %972, meta[relay.Constant][66] /* ty=Tensor[(154, 4), float64] */)
  };
  %973() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(8, 7, 11), float64], Tensor[(154, 4), float64]) */
}

def @func_12314() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) {
  %974 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %975 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %976 = %975.0;
  %977 = cast(%976, dtype="float32") /* ty=Tensor[(3, 15, 810), float32] */;
  %978 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
  %979 = %974.1;
  %980 = sqrt(%977) /* ty=Tensor[(3, 15, 810), float32] */;
  %981 = %978.1;
  (%979, %980, %981)
}

def @func_17380() -> (Tensor[(3, 15, 810), float32], Tensor[(1, 10, 2), float32]) {
  %986 = fn () -> (Tensor[(3, 15, 810), float32], Tensor[(1, 10, 2), float32]) {
    %982 = @func_12314() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 810), float32], Tensor[(3, 15, 1), float32]) */;
    %983 = @func_16122() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %984 = %982.1;
    %985 = %983.0;
    (%984, %985)
  };
  %986() /* ty=(Tensor[(3, 15, 810), float32], Tensor[(1, 10, 2), float32]) */
}

def @func_684(%var_682: Tensor[(2, 3, 5), int16], %var_683: Tensor[(2, 3, 5), int16]) -> Tensor[(2, 3, 5), uint64] {
  %996 = fn (%var_640: Tensor[(2, 3, 5), int16], %var_641: Tensor[(2, 3, 5), int16]) -> Tensor[(2, 3, 5), uint64] {
    %987 = cast(%var_641, dtype="int16") /* ty=Tensor[(2, 3, 5), int16] */;
    %988 = shape_of(%var_640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %989 = cast(%var_640, dtype="int16") /* ty=Tensor[(2, 3, 5), int16] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %991 = bitwise_or(%989, %990) /* ty=Tensor[(2, 3, 5), int16] */;
    %992 = cast(%var_640, dtype="uint64") /* ty=Tensor[(2, 3, 5), uint64] */;
    %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
    %994 = cast(%991, dtype="uint64") /* ty=Tensor[(2, 3, 5), uint64] */;
    %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%994, %995) /* ty=Tensor[(2, 3, 5), uint64] */
  };
  %996(%var_682, %var_683) /* ty=Tensor[(2, 3, 5), uint64] */
}

def @func_14323() -> Tensor[(1, 10, 2), float32] {
  @func_14321() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_16807() -> Tensor[(54), int64] {
  %997 = @func_14979() /* ty=(Tensor[(54), int64],) */;
  %997.0
}

def @func_13542(%var_13540: Tensor[(273), float64]) -> (Tensor[(308), uint32], Tensor[(3, 7, 13), bool], Tensor[(3, 15, 1), float64]) {
  @func_13539(%var_13540) /* ty=(Tensor[(308), uint32], Tensor[(3, 7, 13), bool], Tensor[(3, 15, 1), float64]) */
}

def @func_13948() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64]) {
  %998 = @func_12577() /* ty=(Tensor[(3, 15, 1), float64],) */;
  %999 = cast(-4.57786f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1000 = cast(meta[relay.Constant][67] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %1001 = reshape(%999, newshape=[]) /* ty=float64 */;
  %1002 = reshape(%1000, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %1003 = %998.0;
  %1004 = @func_12976() /* ty=Tensor[(3, 15, 1), float64] */;
  %1005 = @func_2330(%1001, %1002) /* ty=Tensor[(14, 10, 5), bool] */;
  (%1003, %1004, %1005, -4.57786f64 /* ty=float64 */, meta[relay.Constant][67] /* ty=Tensor[(700), float64] */)
}

def @func_9482(%var_9472: Tensor[(96), uint16]) -> (Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) {
  %1006 = @func_8833() /* ty=(Tensor[(810), float64], Tensor[(2, 11, 14), uint32], Tensor[(1, 308), uint32]) */;
  %1007 = cast(meta[relay.Constant][68] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1008 = cast(%var_9472, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %1009 = reshape(%1007, newshape=[]) /* ty=uint16 */;
  %1010 = reshape(%1008, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), uint16] */;
  %1011 = %1006.0;
  %1012 = @func_4447(%1009, %1010) /* ty=Tensor[(1, 6, 16), uint16] */;
  (%1011, %1012, meta[relay.Constant][68] /* ty=uint16 */, %var_9472)
}

def @func_10268(%var_10266: Tensor[(4), int32], %var_10267: Tensor[(28), int32]) -> (Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) {
  @func_10264(%var_10266, %var_10267) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) */
}

def @func_3197(%var_3193: Tensor[(1, 14, 15), uint16]) -> Tensor[(1, 14, 15), bool] {
  %1013 = cast(meta[relay.Constant][69] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %1014 = cast(%var_3193, dtype="bool") /* ty=Tensor[(1, 14, 15), bool] */;
  less_equal(%1013, %1014) /* ty=Tensor[(1, 14, 15), bool] */
}

def @func_17294(%var_17293: Tensor[(30), int16]) -> (Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) {
  %1021 = fn (%var_17279: Tensor[(30), int16]) -> (Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) {
    %1015 = cast(%var_17279, dtype="int16") /* ty=Tensor[(30), int16] */;
    %1016 = cast(%var_17279, dtype="int16") /* ty=Tensor[(30), int16] */;
    %1017 = reshape(%1015, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
    %1018 = reshape(%1016, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
    %1019 = @func_12890() /* ty=Tensor[(15, 9, 6), float64] */;
    %1020 = @func_681(%1017, %1018) /* ty=Tensor[(2, 3, 5), uint64] */;
    (%1019, %1020, %var_17279)
  };
  %1021(%var_17293) /* ty=(Tensor[(15, 9, 6), float64], Tensor[(2, 3, 5), uint64], Tensor[(30), int16]) */
}

def @func_16360() -> Tensor[(1, 10, 2), float32] {
  @func_12803() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_16295() -> (Tensor[(1, 10, 2), float32], Tensor[(5, 6, 14), bool], Tensor[(420), int64]) {
  %1026 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(5, 6, 14), bool], Tensor[(420), int64]) {
    %1022 = cast(meta[relay.Constant][70] /* ty=Tensor[(420), int64] */, dtype="int64") /* ty=Tensor[(420), int64] */;
    %1023 = reshape(%1022, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), int64] */;
    %1024 = @func_14321() /* ty=Tensor[(1, 10, 2), float32] */;
    %1025 = @func_6226(%1023) /* ty=Tensor[(5, 6, 14), bool] */;
    (%1024, %1025, meta[relay.Constant][70] /* ty=Tensor[(420), int64] */)
  };
  %1026() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(5, 6, 14), bool], Tensor[(420), int64]) */
}

def @func_15796() -> (Tensor[(3, 15, 1), float64],) {
  @func_15794() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_13117() -> (Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) {
  %1027 = @func_12548() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1028 = @func_12441() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(96), uint16], Tensor[(96), uint16], Tensor[(1, 15, 10), float64]) */;
  %1029 = %1027.0;
  %1030 = %1028.1;
  (%1029, %1030)
}

def @func_11931() -> Tensor[(3, 15, 1), float64] {
  %1031 = fn () -> Tensor[(3, 15, 1), float64] {
    @func_10421() /* ty=Tensor[(3, 15, 1), float64] */
  };
  %1031() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_16542() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(96), uint16]) {
  %1032 = @func_13410() /* ty=(Tensor[(96), uint16],) */;
  %1033 = @func_14962() /* ty=Tensor[(1, 10, 2), float32] */;
  %1034 = @func_10421() /* ty=Tensor[(3, 15, 1), float64] */;
  %1035 = %1032.0;
  (%1033, %1034, %1035)
}

def @func_17008() -> (Tensor[(1, 10, 2), float32],) {
  %1038 = fn () -> (Tensor[(1, 10, 2), float32],) {
    %1036 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
    %1037 = %1036.1;
    (%1037,)
  };
  %1038() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_6229(%var_6227: Tensor[(5, 6, 14), int64]) -> Tensor[(5, 6, 14), bool] {
  @func_6226(%var_6227) /* ty=Tensor[(5, 6, 14), bool] */
}

def @func_16202() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64]) {
  @func_16200() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64]) */
}

def @func_15143(%var_15142: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), float64],) {
  %1041 = fn (%var_15138: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), float64],) {
    %1039 = cast(%var_15138, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
    %1040 = log2(%1039) /* ty=Tensor[(9, 12, 8), float64] */;
    (%1040,)
  };
  %1041(%var_15142) /* ty=(Tensor[(9, 12, 8), float64],) */
}

def @func_16679() -> (Tensor[(210), uint16], Tensor[(4, 13, 11), float64]) {
  @func_16677() /* ty=(Tensor[(210), uint16], Tensor[(4, 13, 11), float64]) */
}

def @func_13119() -> (Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) {
  @func_13117() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) */
}

def @func_4080(%var_4070: Tensor[(1, 2, 2), int32], %var_4071: Tensor[(7, 2, 2), int32], %var_4077: Tensor[(550), float64]) -> (Tensor[(7, 2, 2), int32], Tensor[(11, 10, 5), float64], Tensor[(550), float64]) {
  %1042 = cast(%var_4070, dtype="int32") /* ty=Tensor[(1, 2, 2), int32] */;
  %1043 = cast(%var_4071, dtype="int32") /* ty=Tensor[(7, 2, 2), int32] */;
  %1044 = cast(%var_4077, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1045 = reshape(%1044, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %1046 = bitwise_or(%1042, %1043) /* ty=Tensor[(7, 2, 2), int32] */;
  %1047 = @func_795(%1045) /* ty=Tensor[(11, 10, 5), float64] */;
  (%1046, %1047, %var_4077)
}

def @func_8452() -> (Tensor[(3, 15, 1), float64],) {
  @func_8450() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_7992(%var_7990: bool) -> (Tensor[(12, 5, 8), bool], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  @func_7989(%var_7990) /* ty=(Tensor[(12, 5, 8), bool], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */
}

def @func_14256() -> Tensor[(1, 10, 2), float32] {
  %1048 = @func_11157() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %1048.1
}

def @func_14940() -> Tensor[(1, 10, 2), float32] {
  %1050 = fn () -> Tensor[(1, 10, 2), float32] {
    %1049 = @func_14707() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) */;
    %1049.1
  };
  %1050() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_13188(%var_13184: Tensor[(180), int16], %var_13185: Tensor[(55, 10), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(1, 15, 10), float64], Tensor[(180), int16], Tensor[(55, 10), float64], Tensor[(700), float64]) {
  %1051 = @func_11962() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
  %1052 = cast(%var_13184, dtype="int16") /* ty=Tensor[(180), int16] */;
  %1053 = cast(%var_13185, dtype="float64") /* ty=Tensor[(55, 10), float64] */;
  %1054 = cast(meta[relay.Constant][71] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %1055 = reshape(%1052, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %1056 = reshape(%1053, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %1057 = reshape(%1054, newshape=[700]) /* ty=Tensor[(700), float64] */;
  %1058 = @func_10727(%1055, %1056, %1057) /* ty=(Tensor[(810), float64], Tensor[(1, 15, 10), float64], Tensor[(5, 6), int16], Tensor[(728), float64], Tensor[(1, 10, 2), float32], Tensor[(180), int16], Tensor[(550), float64], float64, Tensor[(700), float64], Tensor[(3, 15, 273), float32]) */;
  %1059 = %1051.0;
  %1060 = %1058.1;
  (%1059, %1060, %var_13184, %var_13185, meta[relay.Constant][71] /* ty=Tensor[(700), float64] */)
}

def @func_14047() -> Tensor[(180), int16] {
  @func_14045() /* ty=Tensor[(180), int16] */
}

def @func_14963() -> Tensor[(1, 10, 2), float32] {
  %1062 = fn () -> Tensor[(1, 10, 2), float32] {
    %1061 = @func_13204() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %1061.0
  };
  %1062() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_13539(%var_13486: Tensor[(273), float64]) -> (Tensor[(308), uint32], Tensor[(3, 7, 13), bool], Tensor[(3, 15, 1), float64]) {
  %1063 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %1064 = cast(%var_13486, dtype="float64") /* ty=Tensor[(273), float64] */;
  %1065 = reshape(%1064, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %1066 = @func_4349(%1065) /* ty=Tensor[(3, 7, 13), float64] */;
  %1067 = cast(%var_13486, dtype="bool") /* ty=Tensor[(273), bool] */;
  %1068 = shape_of(%1066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1069 = cast(%1066, dtype="bool") /* ty=Tensor[(3, 7, 13), bool] */;
  %1070 = dyn.reshape(%1067, %1068, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1071 = %1063.2;
  %1072 = not_equal(%1069, %1070) /* ty=Tensor[(3, 7, 13), bool] */;
  %1073 = @func_8557() /* ty=Tensor[(3, 15, 1), float64] */;
  (%1071, %1072, %1073)
}

def @func_16076() -> (Tensor[(1, 10, 2), float32],) {
  %1074 = @func_11897() /* ty=Tensor[(1, 10, 2), float32] */;
  (%1074,)
}

def @func_15794() -> (Tensor[(3, 15, 1), float64],) {
  %1075 = @func_11993() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %1076 = %1075.1;
  (%1076,)
}

def @func_9950() -> (Tensor[(3, 15, 1), float64],) {
  @func_9948() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_9485(%var_9483: Tensor[(96), uint16]) -> (Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) {
  @func_9482(%var_9483) /* ty=(Tensor[(810), float64], Tensor[(1, 6, 16), uint16], uint16, Tensor[(96), uint16]) */
}

def @func_17327() -> (Tensor[(1, 10, 2), float32],) {
  @func_17325() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_6000(%var_5997: Tensor[(2, 1, 15), int8], %var_5998: Tensor[(2, 6, 15), int8], %var_5999: Tensor[(2, 6, 15), int8]) -> (Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  @func_5995(%var_5997, %var_5998, %var_5999) /* ty=(Tensor[(2, 6, 15), int8], Tensor[(2, 6, 15), uint16], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) */
}

def @func_10578() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) {
  @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */
}

def @func_13251() -> Tensor[(3, 15, 1), float64] {
  %1078 = fn () -> Tensor[(3, 15, 1), float64] {
    %1077 = @func_13019() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %1077.0
  };
  %1078() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_12107() -> (Tensor[(210), uint16],) {
  @func_12105() /* ty=(Tensor[(210), uint16],) */
}

def @func_13410() -> (Tensor[(96), uint16],) {
  %1079 = @func_13117() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(96), uint16]) */;
  %1080 = %1079.1;
  (%1080,)
}

def @func_8705() -> (Tensor[(1, 10, 2), float32],) {
  %1083 = fn () -> (Tensor[(1, 10, 2), float32],) {
    %1081 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %1082 = %1081.0;
    (%1082,)
  };
  %1083() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_12931(%var_12930: Tensor[(6, 14, 16), float64]) -> (Tensor[(6, 14, 16), float64],) {
  %1086 = fn (%var_12919: Tensor[(6, 14, 16), float64]) -> (Tensor[(6, 14, 16), float64],) {
    %1084 = cast(%var_12919, dtype="float64") /* ty=Tensor[(6, 14, 16), float64] */;
    %1085 = tan(%1084) /* ty=Tensor[(6, 14, 16), float64] */;
    (%1085,)
  };
  %1086(%var_12930) /* ty=(Tensor[(6, 14, 16), float64],) */
}

def @func_15270() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 5), uint8]) {
  %1091 = fn () -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 5), uint8]) {
    %1087 = @func_13644() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %1088 = @func_13362() /* ty=(Tensor[(3, 15, 5), uint8], Tensor[(3, 15, 5), float32], Tensor[(3, 15, 1), float64]) */;
    %1089 = %1087.0;
    %1090 = %1088.0;
    (%1089, %1090)
  };
  %1091() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 5), uint8]) */
}

def @func_15568() -> (Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float32], Tensor[(1, 14, 15), bool]) {
  @func_15566() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float32], Tensor[(1, 14, 15), bool]) */
}

def @func_15722() -> (Tensor[(550), float64], Tensor[(4, 13, 11), float64]) {
  @func_15720() /* ty=(Tensor[(550), float64], Tensor[(4, 13, 11), float64]) */
}

def @func_12661() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) {
  %1096 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) {
    %1092 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %1093 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
    %1094 = %1092.0;
    %1095 = %1093.1;
    (%1094, %1095)
  };
  %1096() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) */
}

def @func_14258() -> Tensor[(1, 10, 2), float32] {
  @func_14256() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_16124() -> (Tensor[(1, 10, 2), float32],) {
  @func_16122() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_15350() -> (Tensor[(550), float64], Tensor[(1, 10, 2), float32]) {
  %1097 = @func_15071() /* ty=Tensor[(550), float64] */;
  %1098 = @func_13074() /* ty=Tensor[(1, 10, 2), float32] */;
  (%1097, %1098)
}

def @func_9447(%var_9443: Tensor[(273), float64]) -> (Tensor[(3, 15, 1), float64], Tensor[(3, 7, 13), float64], Tensor[(273), float64]) {
  %1099 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %1100 = cast(%var_9443, dtype="float64") /* ty=Tensor[(273), float64] */;
  %1101 = reshape(%1100, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), float64] */;
  %1102 = %1099.1;
  %1103 = @func_4349(%1101) /* ty=Tensor[(3, 7, 13), float64] */;
  (%1102, %1103, %var_9443)
}

def @func_10497() -> Tensor[(1, 15, 10), float64] {
  %1104 = cast(meta[relay.Constant][72] /* ty=Tensor[(1, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 10), float64] */;
  asinh(%1104) /* ty=Tensor[(1, 15, 10), float64] */
}

def @func_9264() -> (Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) {
  @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */
}

def @func_17683() -> (Tensor[(2, 3, 5), uint64],) {
  @func_17681() /* ty=(Tensor[(2, 3, 5), uint64],) */
}

def @func_10941() -> Tensor[(1, 10, 2), float32] {
  %1105 = fn () -> Tensor[(1, 10, 2), float32] {
    @func_8813() /* ty=Tensor[(1, 10, 2), float32] */
  };
  %1105() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_3186(%var_3150: Tensor[(13, 4, 14), float64], %var_3163: Tensor[(13, 4, 14), float64]) -> (Tensor[(13, 4, 14), bool], Tensor[(11, 10, 5), float64], Tensor[(550), float64], Tensor[(2, 3, 5), uint64], Tensor[(5, 6), int16]) {
  %1106 = cast(%var_3150, dtype="float64") /* ty=Tensor[(13, 4, 14), float64] */;
  %1107 = sigmoid(%1106) /* ty=Tensor[(13, 4, 14), float64] */;
  %1108 = cast(%1107, dtype="float64") /* ty=Tensor[(13, 4, 14), float64] */;
  %1109 = log(%1108) /* ty=Tensor[(13, 4, 14), float64] */;
  %1110 = cast(%var_3163, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
  %1111 = shape_of(%1109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1112 = cast(%1109, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
  %1113 = dyn.reshape(%1110, %1111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1114 = cast(meta[relay.Constant][73] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1115 = reshape(%1114, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
  %1116 = cast(meta[relay.Constant][74] /* ty=Tensor[(5, 6), int16] */, dtype="int16") /* ty=Tensor[(5, 6), int16] */;
  %1117 = cast(meta[relay.Constant][74] /* ty=Tensor[(5, 6), int16] */, dtype="int16") /* ty=Tensor[(5, 6), int16] */;
  %1118 = reshape(%1116, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %1119 = reshape(%1117, newshape=[2, 3, 5]) /* ty=Tensor[(2, 3, 5), int16] */;
  %1120 = logical_or(%1112, %1113) /* ty=Tensor[(13, 4, 14), bool] */;
  %1121 = @func_795(%1115) /* ty=Tensor[(11, 10, 5), float64] */;
  %1122 = @func_681(%1118, %1119) /* ty=Tensor[(2, 3, 5), uint64] */;
  (%1120, %1121, meta[relay.Constant][73] /* ty=Tensor[(550), float64] */, %1122, meta[relay.Constant][74] /* ty=Tensor[(5, 6), int16] */)
}

def @func_11056(%var_11054: Tensor[(143, 1), float32], %var_11055: bool) -> (Tensor[(270), uint64], Tensor[(1, 10, 2), float64], Tensor[(3, 60), int16], Tensor[(143, 1), float32], Tensor[(208), float32], bool) {
  %1138 = fn (%var_11048: Tensor[(143, 1), float32], %var_11050: bool) -> (Tensor[(270), uint64], Tensor[(1, 10, 2), float64], Tensor[(3, 60), int16], Tensor[(143, 1), float32], Tensor[(208), float32], bool) {
    %1123 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
    %1124 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
    %1125 = cast(%1124, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
    %1126 = cast(%var_11048, dtype="float32") /* ty=Tensor[(143, 1), float32] */;
    %1127 = %1123.1;
    %1128 = cast(%1127, dtype="uint64") /* ty=Tensor[(270), uint64] */;
    %1129 = cast(meta[relay.Constant][75] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %1130 = cast(%var_11050, dtype="bool") /* ty=bool */;
    %1131 = reshape(%1126, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float32] */;
    %1132 = reshape(%1128, newshape=[270]) /* ty=Tensor[(270), uint64] */;
    %1133 = reshape(%1129, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %1134 = reshape(%1130, newshape=[]) /* ty=bool */;
    %1135 = @func_10020(%1131, %1132, %1133, %1134) /* ty=(Tensor[(1, 180), int16], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(3, 60), int16], Tensor[(?, 13, 11), float32], Tensor[(3, 7, 13), float64], bool, Tensor[(2, 15, 9), uint64]) */;
    %1136 = asin(%1125) /* ty=Tensor[(1, 10, 2), float64] */;
    %1137 = %1135.3;
    (%1127, %1136, %1137, %var_11048, meta[relay.Constant][75] /* ty=Tensor[(208), float32] */, %var_11050)
  };
  %1138(%var_11054, %var_11055) /* ty=(Tensor[(270), uint64], Tensor[(1, 10, 2), float64], Tensor[(3, 60), int16], Tensor[(143, 1), float32], Tensor[(208), float32], bool) */
}

def @func_15366() -> Tensor[(3, 15, 1), float64] {
  @func_13250() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_16240() -> Tensor[(3, 15, 1), float64] {
  %1139 = @func_14089() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(2, 15, 9), uint32], Tensor[(270), uint64]) */;
  %1139.0
}

def @func_11311() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 810), float64], Tensor[(28), int32], Tensor[(4), int32], Tensor[(14, 2), int32]) {
  %1140 = @func_10940() /* ty=Tensor[(1, 10, 2), float32] */;
  %1141 = cast(%1140, dtype="float32") /* ty=Tensor[(1, 10, 2), float32] */;
  %1142 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %1143 = cast(meta[relay.Constant][76] /* ty=Tensor[(4), int32] */, dtype="int32") /* ty=Tensor[(4), int32] */;
  %1144 = cast(meta[relay.Constant][77] /* ty=Tensor[(14, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 2), int32] */;
  %1145 = reshape(%1143, newshape=[4]) /* ty=Tensor[(4), int32] */;
  %1146 = reshape(%1144, newshape=[28]) /* ty=Tensor[(28), int32] */;
  %1147 = @func_10264(%1145, %1146) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(550), float64], Tensor[(4), int32], Tensor[(28), int32], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(30), int16], Tensor[(3, 7, 13), float64], Tensor[(273), float64], Tensor[(3, 15, 1), float32]) */;
  %1148 = cos(%1141) /* ty=Tensor[(1, 10, 2), float32] */;
  %1149 = %1142.0;
  %1150 = %1147.3;
  (%1148, %1149, %1150, meta[relay.Constant][76] /* ty=Tensor[(4), int32] */, meta[relay.Constant][77] /* ty=Tensor[(14, 2), int32] */)
}

def @func_9202(%var_9201: Tensor[(2, 15, 9), uint64]) -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) {
  %1161 = fn (%var_9195: Tensor[(2, 15, 9), uint64]) -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) {
    %1151 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %1152 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
    %1153 = %1152.0;
    %1154 = cast(%var_9195, dtype="uint32") /* ty=Tensor[(2, 15, 9), uint32] */;
    %1155 = shape_of(%1153, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1156 = cast(%1153, dtype="uint32") /* ty=Tensor[(2, 15, 9), uint32] */;
    %1157 = dyn.reshape(%1154, %1155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1158 = @func_8813() /* ty=Tensor[(1, 10, 2), float32] */;
    %1159 = %1151.0;
    %1160 = left_shift(%1156, %1157) /* ty=Tensor[(2, 15, 9), uint32] */;
    (%1158, %1159, %1160)
  };
  %1161(%var_9201) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */
}

def @func_10531() -> Tensor[(1, 10, 2), float32] {
  %1162 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1162.0
}

def @func_11994() -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
  %1166 = fn () -> (Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) {
    %1163 = @func_8476() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
    %1164 = @func_10940() /* ty=Tensor[(1, 10, 2), float32] */;
    %1165 = %1163.1;
    (%1164, %1165)
  };
  %1166() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */
}

def @func_15418() -> (Tensor[(15, 9, 6), float64], Tensor[(1, 10, 2), float32]) {
  %1170 = fn () -> (Tensor[(15, 9, 6), float64], Tensor[(1, 10, 2), float32]) {
    %1167 = @func_11962() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) */;
    %1168 = @func_12890() /* ty=Tensor[(15, 9, 6), float64] */;
    %1169 = %1167.0;
    (%1168, %1169)
  };
  %1170() /* ty=(Tensor[(15, 9, 6), float64], Tensor[(1, 10, 2), float32]) */
}

def @func_13901() -> (Tensor[(3, 15, 1), float64],) {
  %1172 = fn () -> (Tensor[(3, 15, 1), float64],) {
    %1171 = @func_13250() /* ty=Tensor[(3, 15, 1), float64] */;
    (%1171,)
  };
  %1172() /* ty=(Tensor[(3, 15, 1), float64],) */
}

def @func_12043() -> (Tensor[(?, 10, 2), uint8],) {
  @func_12041() /* ty=(Tensor[(?, 10, 2), uint8],) */
}

def @func_18046() -> Tensor[(2, 3, 5), uint64] {
  @func_18044() /* ty=Tensor[(2, 3, 5), uint64] */
}

def @func_12095() -> Tensor[(3, 15, 1), float64] {
  @func_12093() /* ty=Tensor[(3, 15, 1), float64] */
}

def @func_16809() -> Tensor[(54), int64] {
  @func_16807() /* ty=Tensor[(54), int64] */
}

def @func_11517() -> Tensor[(1, 10, 2), float32] {
  %1173 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1173.0
}

def @func_17744(%var_17743: Tensor[(1, 550), float64]) -> (Tensor[(11, 10, 5), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 550), float32], Tensor[(4), int32], Tensor[(4), int32], Tensor[(7, 196), bool]) {
  %1195 = fn (%var_17709: Tensor[(1, 550), float64]) -> (Tensor[(11, 10, 5), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 550), float32], Tensor[(4), int32], Tensor[(4), int32], Tensor[(7, 196), bool]) {
    %1174 = cast(%var_17709, dtype="float64") /* ty=Tensor[(1, 550), float64] */;
    %1175 = reshape(%1174, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float64] */;
    %1176 = @func_16240() /* ty=Tensor[(3, 15, 1), float64] */;
    %1177 = cast(%1176, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
    %1178 = cast(%var_17709, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
    %1179 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %1180 = cast(meta[relay.Constant][78] /* ty=Tensor[(7, 196), bool] */, dtype="bool") /* ty=Tensor[(7, 196), bool] */;
    %1181 = cast(meta[relay.Constant][79] /* ty=Tensor[(4), int32] */, dtype="int32") /* ty=Tensor[(4), int32] */;
    %1182 = cast(%1176, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %1183 = reshape(%1179, newshape=[]) /* ty=bool */;
    %1184 = reshape(%1180, newshape=[14, 14, 7]) /* ty=Tensor[(14, 14, 7), bool] */;
    %1185 = reshape(%1181, newshape=[4]) /* ty=Tensor[(4), int32] */;
    %1186 = reshape(%1182, newshape=[3, 15, 1]) /* ty=Tensor[(3, 15, 1), float64] */;
    %1187 = @func_16992(%1183, %1184, %1185, %1186) /* ty=(Tensor[(14, 14, 7), bool], Tensor[(15, 9, 6), float64], Tensor[(4), int32], Tensor[(4), int32], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(180, 1), int16], float64, Tensor[(3, 15, ?), uint16]) */;
    %1188 = cast(meta[relay.Constant][78] /* ty=Tensor[(7, 196), bool] */, dtype="bool") /* ty=Tensor[(7, 196), bool] */;
    %1189 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %1190 = @func_795(%1175) /* ty=Tensor[(11, 10, 5), float64] */;
    %1191 = @func_14681() /* ty=Tensor[(1, 10, 2), float32] */;
    %1192 = floor_divide(%1177, %1178) /* ty=Tensor[(3, 15, 550), float32] */;
    %1193 = %1187.3;
    %1194 = less(%1188, %1189) /* ty=Tensor[(7, 196), bool] */;
    (%1190, %1191, %1192, %1193, meta[relay.Constant][79] /* ty=Tensor[(4), int32] */, %1194)
  };
  %1195(%var_17743) /* ty=(Tensor[(11, 10, 5), float64], Tensor[(1, 10, 2), float32], Tensor[(3, 15, 550), float32], Tensor[(4), int32], Tensor[(4), int32], Tensor[(7, 196), bool]) */
}

def @func_6157(%var_6156: Tensor[(2, 15, 9), uint64]) -> (Tensor[(2, 15, 9), uint64],) {
  %1201 = fn (%var_6142: Tensor[(2, 15, 9), uint64]) -> (Tensor[(2, 15, 9), uint64],) {
    %1196 = cast(%var_6142, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
    %1197 = shape_of(meta[relay.Constant][80] /* ty=Tensor[(2, 15, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1198 = cast(meta[relay.Constant][80] /* ty=Tensor[(2, 15, 9), uint64] */, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
    %1199 = dyn.reshape(%1196, %1197, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1200 = logical_xor(%1198, %1199) /* ty=Tensor[(2, 15, 9), uint64] */;
    (%1200,)
  };
  %1201(%var_6156) /* ty=(Tensor[(2, 15, 9), uint64],) */
}

def @func_14321() -> Tensor[(1, 10, 2), float32] {
  %1202 = @func_12272() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1202.0
}

def @func_11519() -> Tensor[(1, 10, 2), float32] {
  @func_11517() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_9272() -> (Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) {
  %1207 = fn () -> (Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) {
    %1203 = @func_9262() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(3, 15, 1), float32]) */;
    %1204 = @func_8430() /* ty=(Tensor[(1, 10, 2), float32],) */;
    %1205 = %1203.0;
    %1206 = %1204.0;
    (%1205, %1206)
  };
  %1207() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */
}

def @func_14195() -> (Tensor[(48, 2), uint16], Tensor[(3, 15, 810), int16], Tensor[(3, 15, 1), float64]) {
  @func_14193() /* ty=(Tensor[(48, 2), uint16], Tensor[(3, 15, 810), int16], Tensor[(3, 15, 1), float64]) */
}

def @func_14280() -> (Tensor[(210), uint16],) {
  %1210 = fn () -> (Tensor[(210), uint16],) {
    %1208 = @func_9902() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */;
    %1209 = %1208.0;
    (%1209,)
  };
  %1210() /* ty=(Tensor[(210), uint16],) */
}

def @func_10097(%var_10043: float64, %var_10044: Tensor[(5, 140), float64], %var_10051: Tensor[(550), float64]) -> (Tensor[(1, 10, 2), float32], Tensor[(14, 10, 5), bool], float64, Tensor[(3, 3, 6), float32], Tensor[(54, 1), int64], Tensor[(550), float64], Tensor[(2, 15, 9), uint64], Tensor[(2, 15, 9), uint32], Tensor[(5, 140), float32]) {
  %1211 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1212 = cast(%var_10043, dtype="float64") /* ty=float64 */;
  %1213 = cast(%var_10044, dtype="float64") /* ty=Tensor[(5, 140), float64] */;
  %1214 = reshape(%1212, newshape=[]) /* ty=float64 */;
  %1215 = reshape(%1213, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %1216 = cast(meta[relay.Constant][81] /* ty=Tensor[(54, 1), int64] */, dtype="int64") /* ty=Tensor[(54, 1), int64] */;
  %1217 = cast(%var_10051, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1218 = cast(%var_10051, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1219 = reshape(%1216, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), int64] */;
  %1220 = reshape(%1217, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %1221 = reshape(%1218, newshape=[275, 2]) /* ty=Tensor[(275, 2), float64] */;
  %1222 = @func_9564(%1219, %1220, %1221) /* ty=(Tensor[(3, 3, 6), int64], Tensor[(3, 3, 6), float32], Tensor[(550), float64], Tensor[(208), float32], float64, Tensor[(180), int16], Tensor[(275, 2), float64], Tensor[(275, 2), bool]) */;
  %1223 = @func_8866() /* ty=(Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(3, 15, 1), float32]) */;
  %1224 = %1223.0;
  %1225 = cast(%1224, dtype="uint64") /* ty=Tensor[(2, 15, 9), uint64] */;
  %1226 = reshape(%1225, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %1227 = @func_9200(%1226) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %1228 = cast(%var_10044, dtype="float32") /* ty=Tensor[(5, 140), float32] */;
  %1229 = %1211.0;
  %1230 = @func_2330(%1214, %1215) /* ty=Tensor[(14, 10, 5), bool] */;
  %1231 = %1222.1;
  %1232 = %1227.2;
  %1233 = atan(%1228) /* ty=Tensor[(5, 140), float32] */;
  (%1229, %1230, %var_10043, %1231, meta[relay.Constant][81] /* ty=Tensor[(54, 1), int64] */, %var_10051, %1224, %1232, %1233)
}

def @func_16677() -> (Tensor[(210), uint16], Tensor[(4, 13, 11), float64]) {
  %1234 = @func_12105() /* ty=(Tensor[(210), uint16],) */;
  %1235 = %1234.0;
  %1236 = @func_15872() /* ty=Tensor[(4, 13, 11), float64] */;
  (%1235, %1236)
}

def @func_9903() -> (Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) {
  %1241 = fn () -> (Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) {
    %1237 = @func_8908() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16]) */;
    %1238 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
    %1239 = %1237.2;
    %1240 = %1238.1;
    (%1239, %1240)
  };
  %1241() /* ty=(Tensor[(210), uint16], Tensor[(1, 10, 2), float32]) */
}

def @func_16997(%var_16993: bool, %var_16994: Tensor[(14, 14, 7), bool], %var_16995: Tensor[(4), int32], %var_16996: Tensor[(3, 15, 1), float64]) -> (Tensor[(14, 14, 7), bool], Tensor[(15, 9, 6), float64], Tensor[(4), int32], Tensor[(4), int32], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(180, 1), int16], float64, Tensor[(3, 15, ?), uint16]) {
  %1266 = fn (%var_16879: bool, %var_16880: Tensor[(14, 14, 7), bool], %var_16944: Tensor[(4), int32], %var_16975: Tensor[(3, 15, 1), float64]) -> (Tensor[(14, 14, 7), bool], Tensor[(15, 9, 6), float64], Tensor[(4), int32], Tensor[(4), int32], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(180, 1), int16], float64, Tensor[(3, 15, ?), uint16]) {
    %1242 = cast(%var_16879, dtype="bool") /* ty=bool */;
    %1243 = cast(%var_16880, dtype="bool") /* ty=Tensor[(14, 14, 7), bool] */;
    %1244 = cast(%var_16944, dtype="int32") /* ty=Tensor[(4), int32] */;
    %1245 = reshape(%1244, newshape=[4]) /* ty=Tensor[(4), int32] */;
    %1246 = @func_12350(%1245) /* ty=(Tensor[(3, 15, 1), float32], Tensor[(3, 7, 13), float64], Tensor[(4), int32], Tensor[(28), int32]) */;
    %1247 = cast(meta[relay.Constant][82] /* ty=Tensor[(270), uint64] */, dtype="uint64") /* ty=Tensor[(270), uint64] */;
    %1248 = cast(meta[relay.Constant][83] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %1249 = cast(meta[relay.Constant][84] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
    %1250 = reshape(%1247, newshape=[270]) /* ty=Tensor[(270), uint64] */;
    %1251 = reshape(%1248, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %1252 = reshape(%1249, newshape=[1, 180]) /* ty=Tensor[(1, 180), int16] */;
    %1253 = @func_9860(%1250, %1251, %1252) /* ty=(Tensor[(810), float64], Tensor[(11, 10, 5), float64], Tensor[(728), float64], Tensor[(2, 15, 9), uint64], Tensor[(270), uint64], Tensor[(1, 180), int16], Tensor[(208), float32], float64, Tensor[(1, 180), int16], Tensor[(1, 10, 2), float32]) */;
    %1254 = @func_13948() /* ty=(Tensor[(3, 15, 1), float64], Tensor[(3, 15, 1), float64], Tensor[(14, 10, 5), bool], float64, Tensor[(700), float64]) */;
    %1255 = @func_11930() /* ty=Tensor[(3, 15, 1), float64] */;
    %1256 = cast(%var_16975, dtype="uint16") /* ty=Tensor[(3, 15, 1), uint16] */;
    %1257 = shape_of(%1255, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1258 = cast(%1255, dtype="uint16") /* ty=Tensor[(3, 15, 1), uint16] */;
    %1259 = dyn.reshape(%1256, %1257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1260 = logical_or(%1242, %1243) /* ty=Tensor[(14, 14, 7), bool] */;
    %1261 = @func_16087() /* ty=Tensor[(15, 9, 6), float64] */;
    %1262 = %1246.2;
    %1263 = %1253.9;
    %1264 = %1254.3;
    %1265 = multiply(%1258, %1259) /* ty=Tensor[(3, 15, ?), uint16] */;
    (%1260, %1261, %1262, %var_16944, %1263, meta[relay.Constant][82] /* ty=Tensor[(270), uint64] */, meta[relay.Constant][83] /* ty=Tensor[(208), float32] */, meta[relay.Constant][84] /* ty=Tensor[(180, 1), int16] */, %1264, %1265)
  };
  %1266(%var_16993, %var_16994, %var_16995, %var_16996) /* ty=(Tensor[(14, 14, 7), bool], Tensor[(15, 9, 6), float64], Tensor[(4), int32], Tensor[(4), int32], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(208), float32], Tensor[(180, 1), int16], float64, Tensor[(3, 15, ?), uint16]) */
}

def @func_17049() -> (Tensor[(1, 10, 2), float32],) {
  @func_17047() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_16122() -> (Tensor[(1, 10, 2), float32],) {
  %1267 = @func_15376() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1268 = %1267.0;
  (%1268,)
}

def @func_16362() -> Tensor[(1, 10, 2), float32] {
  @func_16360() /* ty=Tensor[(1, 10, 2), float32] */
}

def @func_14707() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(550), float64]) {
  %1269 = @func_9633() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1270 = cast(meta[relay.Constant][85] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %1271 = reshape(%1270, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %1272 = @func_9730(%1271) /* ty=(Tensor[(27, 2), int64], Tensor[(550), float64], Tensor[(1, 10, 2), float32], Tensor[(208), uint8], Tensor[(15, 9, 6), float64], Tensor[(810), float32]) */;
  %1273 = %1269.0;
  %1274 = %1272.2;
  (%1273, %1274, meta[relay.Constant][85] /* ty=Tensor[(550), float64] */)
}

def @func_4696(%var_4692: Tensor[(2, 11, 14), uint32]) -> Tensor[(2, 11, 14), uint32] {
  %1275 = cast(%var_4692, dtype="uint32") /* ty=Tensor[(2, 11, 14), uint32] */;
  %1276 = shape_of(meta[relay.Constant][86] /* ty=Tensor[(2, 11, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1277 = cast(meta[relay.Constant][86] /* ty=Tensor[(2, 11, 14), uint32] */, dtype="uint32") /* ty=Tensor[(2, 11, 14), uint32] */;
  %1278 = dyn.reshape(%1275, %1276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%1277, %1278) /* ty=Tensor[(2, 11, 14), uint32] */
}

def @func_15919(%var_15917: Tensor[(1, 810), float64], %var_15918: Tensor[(1, 210), uint16]) -> (Tensor[(3, 15, 1), float64], Tensor[(210), uint16], Tensor[(1, 810), float64], Tensor[(1, 210), uint16]) {
  %1289 = fn (%var_15903: Tensor[(1, 810), float64], %var_15904: Tensor[(1, 210), uint16]) -> (Tensor[(3, 15, 1), float64], Tensor[(210), uint16], Tensor[(1, 810), float64], Tensor[(1, 210), uint16]) {
    %1279 = @func_13900() /* ty=(Tensor[(3, 15, 1), float64],) */;
    %1280 = %1279.0;
    %1281 = cast(%1280, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %1282 = cast(%var_15903, dtype="float64") /* ty=Tensor[(1, 810), float64] */;
    %1283 = cast(%var_15904, dtype="uint16") /* ty=Tensor[(1, 210), uint16] */;
    %1284 = reshape(%1282, newshape=[10, 9, 9]) /* ty=Tensor[(10, 9, 9), float64] */;
    %1285 = reshape(%1283, newshape=[210]) /* ty=Tensor[(210), uint16] */;
    %1286 = @func_5651(%1284, %1285) /* ty=(Tensor[(10, 9, 9), float64], Tensor[(1, 14, 15), bool], Tensor[(210), uint16], Tensor[(1, 6, 16), uint16], uint16, Tensor[(1, 96), uint16]) */;
    %1287 = sigmoid(%1281) /* ty=Tensor[(3, 15, 1), float64] */;
    %1288 = %1286.2;
    (%1287, %1288, %var_15903, %var_15904)
  };
  %1289(%var_15917, %var_15918) /* ty=(Tensor[(3, 15, 1), float64], Tensor[(210), uint16], Tensor[(1, 810), float64], Tensor[(1, 210), uint16]) */
}

def @func_12550() -> (Tensor[(1, 10, 2), float32],) {
  @func_12548() /* ty=(Tensor[(1, 10, 2), float32],) */
}

def @func_17576() -> (Tensor[(2, 3, 5), uint64],) {
  @func_17574() /* ty=(Tensor[(2, 3, 5), uint64],) */
}

def @func_11157() -> (Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32]) {
  %1290 = @func_11120() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1291 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1292 = %1290.0;
  %1293 = %1291.0;
  (%1292, %1293)
}

def @func_11250(%var_11224: Tensor[(270), uint64]) -> (Tensor[(2, 11, 14), uint32], Tensor[(1, 14, 15), bool], Tensor[(105, 2), uint16], Tensor[(1, 10, 2), float32], Tensor[(270), uint64], Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32]) {
  %1294 = @func_10576() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 11, 14), uint32], Tensor[(308), uint32]) */;
  %1295 = cast(meta[relay.Constant][87] /* ty=Tensor[(105, 2), uint16] */, dtype="uint16") /* ty=Tensor[(105, 2), uint16] */;
  %1296 = reshape(%1295, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), uint16] */;
  %1297 = cast(%var_11224, dtype="uint64") /* ty=Tensor[(270), uint64] */;
  %1298 = reshape(%1297, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint64] */;
  %1299 = @func_9200(%1298) /* ty=(Tensor[(1, 10, 2), float32], Tensor[(1, 10, 2), float32], Tensor[(2, 15, 9), uint32]) */;
  %1300 = @func_9271() /* ty=(Tensor[(3, 15, 810), float64], Tensor[(1, 10, 2), float32]) */;
  %1301 = %1294.1;
  %1302 = cast(%1301, dtype="uint32") /* ty=Tensor[(2, 11, 14), uint32] */;
  %1303 = reshape(%1302, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint32] */;
  %1304 = @func_3197(%1296) /* ty=Tensor[(1, 14, 15), bool] */;
  %1305 = %1299.0;
  %1306 = %1300.1;
  %1307 = @func_4696(%1303) /* ty=Tensor[(2, 11, 14), uint32] */;
  (%1301, %1304, meta[relay.Constant][87] /* ty=Tensor[(105, 2), uint16] */, %1305, %var_11224, %1306, %1307)
}

def @func_12041() -> (Tensor[(?, 10, 2), uint8],) {
  %1308 = @func_8704() /* ty=(Tensor[(1, 10, 2), float32],) */;
  %1309 = %1308.0;
  %1310 = @func_10611() /* ty=Tensor[(1, 10, 2), float32] */;
  %1311 = cast(%1310, dtype="uint8") /* ty=Tensor[(1, 10, 2), uint8] */;
  %1312 = shape_of(%1309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1313 = cast(%1309, dtype="uint8") /* ty=Tensor[(1, 10, 2), uint8] */;
  %1314 = dyn.reshape(%1311, %1312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1315 = minimum(%1313, %1314) /* ty=Tensor[(?, 10, 2), uint8] */;
  (%1315,)
}

def @func_8730() -> (Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) {
  @func_8728() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(2, 3, 5), uint64], Tensor[(30), int16], Tensor[(15, 9, 6), float64], Tensor[(810), float64]) */
}

def @func_10421() -> Tensor[(3, 15, 1), float64] {
  %1316 = @func_8596() /* ty=(Tensor[(1, 10, 2), float32], Tensor[(3, 15, 1), float64]) */;
  %1316.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen888/build/output.py", line 4076, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:37:44] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

