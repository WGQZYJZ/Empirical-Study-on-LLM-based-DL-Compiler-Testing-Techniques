==========mod==========
#[version = "0.0.5"]
def @func_7506(%var_7488: Tensor[(14, 2, 6), float32]) -> Tensor[(14, 2, 6), float64] {
  %0 = @func_2160() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %1 = %0.0;
  %2 = cast(%var_7488, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%4, %5) /* ty=Tensor[(14, 2, 6), float64] */
}

def @func_8845() -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) {
  %6 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %7 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %8 = %6.0;
  %9 = %7.0;
  (%8, %9)
}

def @func_1102() -> (Tensor[(6, 5, 10), float32],) {
  %10 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %11 = %10.0;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %13 = log(%12) /* ty=Tensor[(6, 5, 10), float32] */;
  (%13,)
}

def @func_8182() -> Tensor[(14, 2, 6), float32] {
  %14 = @func_7704() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */;
  %14.0
}

def @func_2592(%var_2567: Tensor[(300), int64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) {
  %15 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %16 = cast(%var_2567, dtype="int64") /* ty=Tensor[(300), int64] */;
  %17 = reshape(%16, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int64] */;
  %18 = @func_1446(%17) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) */;
  %19 = cast(%var_2567, dtype="float32") /* ty=Tensor[(300), float32] */;
  %20 = @func_2160() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %21 = @func_2077() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %22 = %15.0;
  %23 = %18.3;
  %24 = log10(%19) /* ty=Tensor[(300), float32] */;
  %25 = %20.0;
  %26 = %21.0;
  (%22, %23, %24, %25, %26)
}

def @func_1013(%var_996: uint8, %var_997: Tensor[(10, 11, 3), uint8]) -> Tensor[(10, 11, 3), bool] {
  %27 = cast(%var_996, dtype="bool") /* ty=bool */;
  %28 = cast(%var_997, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  equal(%27, %28) /* ty=Tensor[(10, 11, 3), bool] */
}

def @func_3131(%var_3129: Tensor[(1600), bool]) -> (Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) {
  %29 = @func_2230() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %30 = %29.0;
  %31 = cast(%30, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %32 = cast(%var_3129, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %33 = reshape(%32, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), bool] */;
  %34 = @func_2377(%33) /* ty=(Tensor[(10, 10, 16), uint64],) */;
  %35 = sigmoid(%31) /* ty=Tensor[(14, 2, 6), float64] */;
  %36 = %34.0;
  (%35, %36, %var_3129)
}

def @func_5660(%var_5627: Tensor[(6, 5, 10), float32], %var_5636: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), bool], Tensor[(1600), float64], Tensor[(1600), float32], Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float32]) {
  %37 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %38 = %37.0;
  %39 = cast(%var_5627, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %43 = cast(%var_5636, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %44 = reshape(%43, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %45 = @func_5600(%44) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) */;
  %46 = %45.1;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %48 = @func_2645() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %49 = @func_4640() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %50 = cast(%var_5636, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %51 = reshape(%50, newshape=[20, 80]) /* ty=Tensor[(20, 80), float64] */;
  %52 = @func_296(%51) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) */;
  %53 = less(%41, %42) /* ty=Tensor[(6, 5, 10), bool] */;
  %54 = rsqrt(%47) /* ty=Tensor[(1600), float32] */;
  %55 = %48.0;
  %56 = %49.0;
  %57 = %52.2;
  (%53, %var_5636, %54, %55, %56, %57)
}

def @func_5750() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), bool]) {
  %58 = @func_5509() /* ty=(Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) */;
  %59 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %60 = %59.2;
  %61 = %58.1;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %63 = reshape(%62, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %64 = @func_5600(%63) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) */;
  %65 = %64.0;
  %66 = cast(%65, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %67 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%60, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %70 = greater_equal(%68, %69) /* ty=Tensor[(6, 5, 10), bool] */;
  (%61, %70)
}

def @func_3849() -> (Tensor[(6, 5, 10), float32],) {
  %71 = @func_1783() /* ty=Tensor[(6, 5, 10), float32] */;
  (%71,)
}

def @func_6378(%var_6371: Tensor[(9, 1, 13), float64]) -> (Tensor[(9, 1, 13), float64],) {
  %72 = cast(%var_6371, dtype="float64") /* ty=Tensor[(9, 1, 13), float64] */;
  %73 = sqrt(%72) /* ty=Tensor[(9, 1, 13), float64] */;
  (%73,)
}

def @func_4723(%var_4674: Tensor[(14, 2, 6), float32]) -> (Tensor[(10, 10, 16), bool], Tensor[(300), int64], Tensor[(14, 2, 6), float64], Tensor[(20, 80), float64], Tensor[(14, 2, 6), float32]) {
  %74 = cast(meta[relay.Constant][0] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
  %75 = reshape(%74, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %76 = @func_2592(%75) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) */;
  %77 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  %78 = cast(%var_4674, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %82 = power(%80, %81) /* ty=Tensor[(14, 2, 6), float64] */;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %84 = sinh(%83) /* ty=Tensor[(14, 2, 6), float64] */;
  %85 = cast(%84, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %86 = log10(%85) /* ty=Tensor[(14, 2, 6), float64] */;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %88 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
  %89 = %76.0;
  %90 = log2(%87) /* ty=Tensor[(14, 2, 6), float64] */;
  %91 = %88.2;
  %92 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  (%89, meta[relay.Constant][0] /* ty=Tensor[(300), int64] */, %90, %91, %92)
}

def @func_2876(%var_2840: Tensor[(6, 3, 11), float32]) -> Tensor[(6, 3, 11), float64] {
  %93 = cast(%var_2840, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
  %94 = atan(%93) /* ty=Tensor[(6, 3, 11), float32] */;
  %95 = cast(%94, dtype="int32") /* ty=Tensor[(6, 3, 11), int32] */;
  %96 = shape_of(%var_2840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_2840, dtype="int32") /* ty=Tensor[(6, 3, 11), int32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %99 = maximum(%97, %98) /* ty=Tensor[(6, 3, 11), int32] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(6, 3, 11), float64] */;
  atanh(%100) /* ty=Tensor[(6, 3, 11), float64] */
}

def @func_8080(%var_8050: Tensor[(11, 15, 4), float64]) -> Tensor[(11, 15, 4), uint32] {
  %101 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 4), float64] */;
  %102 = shape_of(%var_8050, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_8050, dtype="float64") /* ty=Tensor[(11, 15, 4), float64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %105 = divide(%103, %104) /* ty=Tensor[(11, 15, 4), float64] */;
  %106 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 15, 4), float64] */, dtype="uint32") /* ty=Tensor[(11, 15, 4), uint32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="uint32") /* ty=Tensor[(11, 15, 4), uint32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%108, %109) /* ty=Tensor[(11, 15, 4), uint32] */
}

def @func_5004() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) {
  %110 = @func_4466() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %111 = @func_3706() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) */;
  %112 = %110.0;
  %113 = %111.1;
  %114 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
  (%112, %113, %114)
}

def @func_2217() -> (Tensor[(10, 10, 16), bool],) {
  %115 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
  (%115,)
}

def @func_3639() -> (Tensor[(6, 5, 10), bool],) {
  %116 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
  %117 = %116.0;
  (%117,)
}

def @func_4953(%var_4947: Tensor[(7, 14, 16), float64]) -> (Tensor[(7, 14, 16), float32],) {
  %118 = cast(%var_4947, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %119 = tan(%118) /* ty=Tensor[(7, 14, 16), float64] */;
  %120 = cast(%var_4947, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %124 = floor_divide(%122, %123) /* ty=Tensor[(7, 14, 16), float32] */;
  (%124,)
}

def @func_4237() -> (Tensor[(14, 2, 6), int16],) {
  %125 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %127 = sin(%126) /* ty=Tensor[(14, 2, 6), float64] */;
  %128 = cast(%127, dtype="int16") /* ty=Tensor[(14, 2, 6), int16] */;
  %129 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%125, dtype="int16") /* ty=Tensor[(14, 2, 6), int16] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %132 = bitwise_and(%130, %131) /* ty=Tensor[(14, 2, 6), int16] */;
  (%132,)
}

def @func_4859(%var_4847: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), bool],) {
  %133 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %134 = %133.4;
  %135 = cast(%var_4847, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = logical_and(%137, %138) /* ty=Tensor[(10, 10, 16), bool] */;
  (%139,)
}

def @func_6309() -> (Tensor[(2, 2, 12), float64], Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64]) {
  %140 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
  %141 = cast(meta[relay.Constant][3] /* ty=Tensor[(20, 80), float64] */, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %142 = reshape(%141, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %143 = @func_218(%142) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %144 = sqrt(%140) /* ty=Tensor[(2, 2, 12), float64] */;
  %145 = %143.0;
  (%144, %145, meta[relay.Constant][3] /* ty=Tensor[(20, 80), float64] */)
}

def @func_6284() -> (Tensor[(6, 5, 10), float32],) {
  %146 = @func_1783() /* ty=Tensor[(6, 5, 10), float32] */;
  (%146,)
}

def @func_2377(%var_2365: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), uint64],) {
  %147 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
  %148 = cast(%var_2365, dtype="uint64") /* ty=Tensor[(10, 10, 16), uint64] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="uint64") /* ty=Tensor[(10, 10, 16), uint64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %152 = logical_xor(%150, %151) /* ty=Tensor[(10, 10, 16), uint64] */;
  (%152,)
}

def @func_6007(%var_5990: Tensor[(14, 3, 5), uint8], %var_5991: Tensor[(14, 3, 5), uint8]) -> (Tensor[(14, 3, 5), bool], Tensor[(14, 3, 5), float32]) {
  %153 = cast(%var_5991, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
  %154 = shape_of(%var_5990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_5990, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = cast(%var_5991, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
  %158 = less_equal(%155, %156) /* ty=Tensor[(14, 3, 5), bool] */;
  %159 = log10(%157) /* ty=Tensor[(14, 3, 5), float32] */;
  (%158, %159)
}

def @func_4278() -> Tensor[(14, 2, 6), float32] {
  %160 = @func_2091() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %160.0
}

def @func_7902(%var_7852: Tensor[(1600), bool], %var_7895: Tensor[(1600), bool]) -> (Tensor[(14, 2, 6), float64], Tensor[(14, 2, 6), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), bool]) {
  %161 = cast(%var_7852, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %162 = reshape(%161, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %163 = @func_3131(%162) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) */;
  %164 = @func_5509() /* ty=(Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) */;
  %165 = %164.0;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %167 = log(%166) /* ty=Tensor[(14, 2, 6), float64] */;
  %168 = cast(%165, dtype="bool") /* ty=Tensor[(14, 2, 6), bool] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="bool") /* ty=Tensor[(14, 2, 6), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = cast(%var_7895, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %173 = shape_of(%var_7852, dtype="int32") /* ty=Tensor[(1), int32] */;
  %174 = cast(%var_7852, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?), float64] */;
  %176 = @func_5750() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), bool]) */;
  %177 = %163.0;
  %178 = logical_and(%170, %171) /* ty=Tensor[(14, 2, 6), bool] */;
  %179 = floor_divide(%174, %175) /* ty=Tensor[(1600), float64] */;
  %180 = %176.0;
  (%177, %178, %179, %180)
}

def @func_1613(%var_1601: Tensor[(495), uint64], %var_1602: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(495), uint64], Tensor[(1600), float64]) {
  %181 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
  %182 = cast(%var_1601, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %183 = cast(%var_1601, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %184 = cast(%var_1602, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %185 = cast(%var_1602, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %186 = reshape(%182, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %187 = reshape(%183, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %188 = reshape(%184, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %189 = reshape(%185, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %190 = @func_412(%186, %187, %188, %189) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %191 = %181.1;
  %192 = %190.4;
  (%191, %192, %var_1601, %var_1602)
}

def @func_2230() -> (Tensor[(14, 2, 6), float32],) {
  %193 = @func_2160() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %194 = %193.0;
  (%194,)
}

def @func_971() -> Tensor[(10, 10, 16), bool] {
  %195 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %195.1
}

def @func_5509() -> (Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) {
  %196 = @func_4237() /* ty=(Tensor[(14, 2, 6), int16],) */;
  %197 = %196.0;
  %198 = @func_971() /* ty=Tensor[(10, 10, 16), bool] */;
  (%197, %198)
}

def @func_7090() -> (Tensor[(14, 2, 6), float32],) {
  %199 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  (%199,)
}

def @func_1465(%var_1459: Tensor[(15, 7, 13), float64]) -> Tensor[(15, 7, 13), float64] {
  %200 = cast(%var_1459, dtype="float64") /* ty=Tensor[(15, 7, 13), float64] */;
  asinh(%200) /* ty=Tensor[(15, 7, 13), float64] */
}

def @func_5105() -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64]) {
  %201 = @func_3686() /* ty=(Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) */;
  %202 = @func_3386() /* ty=Tensor[(6, 5, 10), int64] */;
  %203 = %201.0;
  (%202, %203)
}

def @func_4466() -> (Tensor[(6, 5, 10), float32],) {
  %204 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %205 = %204.0;
  (%205,)
}

def @func_3797() -> (Tensor[(6, 5, 10), int64],) {
  %206 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %207 = %206.1;
  (%207,)
}

def @func_7055(%var_7040: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), uint16] {
  %208 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %209 = %208.0;
  %210 = cast(%var_7040, dtype="uint16") /* ty=Tensor[(6, 5, 10), uint16] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="uint16") /* ty=Tensor[(6, 5, 10), uint16] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%212, %213) /* ty=Tensor[(6, 5, 10), uint16] */
}

def @func_8571() -> (Tensor[(14, 2, 6), float32], Tensor[(14, 2, 6), float32]) {
  %214 = @func_5945() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %215 = @func_7704() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */;
  %216 = %214.0;
  %217 = %215.0;
  (%216, %217)
}

def @func_3706() -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) {
  %218 = @func_2645() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %219 = @func_3346() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %220 = %218.0;
  %221 = %219.0;
  (%220, %221)
}

def @func_3608(%var_3597: Tensor[(3, 13, 11), float64], %var_3601: Tensor[(1600), float64], %var_3605: Tensor[(495), uint64]) -> (Tensor[(3, 13, 11), float64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(495), uint64]) {
  %222 = cast(%var_3597, dtype="float64") /* ty=Tensor[(3, 13, 11), float64] */;
  %223 = cast(%var_3601, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %224 = reshape(%223, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %225 = @func_66(%224) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %226 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %227 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %228 = cast(%var_3601, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %229 = cast(%var_3601, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %230 = reshape(%226, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %231 = reshape(%227, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %232 = reshape(%228, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %233 = reshape(%229, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %234 = @func_412(%230, %231, %232, %233) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %235 = tan(%222) /* ty=Tensor[(3, 13, 11), float64] */;
  %236 = %225.0;
  %237 = %234.1;
  (%235, %236, %var_3601, %237, %var_3605)
}

def @func_6177(%var_6134: Tensor[(50, 6), int8], %var_6164: Tensor[(50, 6), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(50, 6), uint32]) {
  %238 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %239 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %240 = cast(%var_6134, dtype="int8") /* ty=Tensor[(50, 6), int8] */;
  %241 = reshape(%240, newshape=[300]) /* ty=Tensor[(300), int8] */;
  %242 = @func_4074(%241) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) */;
  %243 = cast(%var_6164, dtype="uint16") /* ty=Tensor[(50, 6), uint16] */;
  %244 = shape_of(%var_6134, dtype="int32") /* ty=Tensor[(2), int32] */;
  %245 = cast(%var_6134, dtype="uint16") /* ty=Tensor[(50, 6), uint16] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %247 = minimum(%245, %246) /* ty=Tensor[(50, 6), uint16] */;
  %248 = cast(%247, dtype="uint32") /* ty=Tensor[(50, 6), uint32] */;
  %249 = shape_of(%var_6134, dtype="int32") /* ty=Tensor[(2), int32] */;
  %250 = cast(%var_6134, dtype="uint32") /* ty=Tensor[(50, 6), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %252 = %238.0;
  %253 = %239.2;
  %254 = %242.1;
  %255 = multiply(%250, %251) /* ty=Tensor[(50, 6), uint32] */;
  (%252, %253, %254, %255)
}

def @func_7175(%var_7171: Tensor[(168), float32]) -> (Tensor[(6, 5, 10), float64], Tensor[(6, 5, 10), int8], Tensor[(14, 2, 6), float64], Tensor[(168), float32]) {
  %256 = @func_6708() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %259 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %260 = cast(%var_7171, dtype="float32") /* ty=Tensor[(168), float32] */;
  %261 = reshape(%260, newshape=[14, 2, 6]) /* ty=Tensor[(14, 2, 6), float32] */;
  %262 = @func_4723(%261) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(300), int64], Tensor[(14, 2, 6), float64], Tensor[(20, 80), float64], Tensor[(14, 2, 6), float32]) */;
  %263 = erf(%258) /* ty=Tensor[(6, 5, 10), float64] */;
  %264 = %259.0;
  %265 = %262.2;
  (%263, %264, %265, %var_7171)
}

def @func_3203(%var_3158: Tensor[(4, 5, 16), uint64], %var_3172: Tensor[(495), uint64], %var_3173: Tensor[(1600), float64], %var_3190: Tensor[(1600), float64]) -> (Tensor[(4, 5, 16), uint64], Tensor[(15, 3, 11), int8], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(1600), float32]) {
  %266 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 5, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 5, 16), uint64] */;
  %267 = shape_of(%var_3158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_3158, dtype="uint64") /* ty=Tensor[(4, 5, 16), uint64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %270 = cast(%var_3172, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %271 = cast(%var_3173, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %272 = reshape(%270, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %273 = reshape(%271, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %274 = @func_559(%272, %273) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %275 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %276 = cast(%var_3190, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %277 = shape_of(%var_3173, dtype="int32") /* ty=Tensor[(1), int32] */;
  %278 = cast(%var_3173, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?), float32] */;
  %280 = bitwise_xor(%268, %269) /* ty=Tensor[(4, 5, 16), uint64] */;
  %281 = %274.8;
  %282 = %275.0;
  %283 = power(%278, %279) /* ty=Tensor[(1600), float32] */;
  (%280, %281, %var_3172, %282, %283)
}

def @func_2160() -> (Tensor[(14, 2, 6), float32],) {
  %284 = @func_2091() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %285 = %284.0;
  (%285,)
}

def @func_8433() -> (Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %286 = @func_3686() /* ty=(Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) */;
  %287 = %286.1;
  %288 = cast(%287, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %289 = reshape(%288, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %290 = @func_2592(%289) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) */;
  %291 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %292 = %290.0;
  %293 = %291.0;
  (%287, %292, %293)
}

def @func_5537(%var_5523: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(7, 14, 16), float32]) {
  %294 = @func_1841() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %295 = cast(%var_5523, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %296 = reshape(%295, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %297 = @func_4953(%296) /* ty=(Tensor[(7, 14, 16), float32],) */;
  %298 = %297.0;
  %299 = cast(%var_5523, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %303 = %294.0;
  %304 = minimum(%301, %302) /* ty=Tensor[(7, 14, 16), float32] */;
  (%303, %304)
}

def @func_6094(%var_6062: Tensor[(1600), float64], %var_6079: Tensor[(20, 80), float32]) -> (Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64], Tensor[(1600), int16], Tensor[(6, 5, 10), int64], Tensor[(1365), float64], Tensor[(20, 80), int8]) {
  %305 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %306 = %305.0;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %308 = cast(%var_6062, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %309 = reshape(%307, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), float32] */;
  %310 = reshape(%308, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %311 = @func_5660(%309, %310) /* ty=(Tensor[(6, 5, 10), bool], Tensor[(1600), float64], Tensor[(1600), float32], Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float32]) */;
  %312 = %311.5;
  %313 = cast(%var_6062, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(2), int32] */;
  %315 = cast(%312, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %317 = cast(%var_6062, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %318 = reshape(%317, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %319 = @func_218(%318) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %320 = cast(meta[relay.Constant][5] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %321 = cast(meta[relay.Constant][5] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %322 = cast(meta[relay.Constant][5] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %323 = reshape(%320, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %324 = reshape(%321, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
  %325 = reshape(%322, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %326 = @func_4764(%323, %324, %325) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) */;
  %327 = cast(%var_6079, dtype="int8") /* ty=Tensor[(20, 80), int8] */;
  %328 = shape_of(%312, dtype="int32") /* ty=Tensor[(2), int32] */;
  %329 = cast(%312, dtype="int8") /* ty=Tensor[(20, 80), int8] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %331 = maximum(%315, %316) /* ty=Tensor[(20, 80), float64] */;
  %332 = %319.2;
  %333 = %326.0;
  %334 = right_shift(%329, %330) /* ty=Tensor[(20, 80), int8] */;
  (%306, %331, %332, %333, meta[relay.Constant][5] /* ty=Tensor[(1365), float64] */, %334)
}

def @func_5977() -> (Tensor[(6, 5, 10), float32],) {
  %335 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %337 = cosh(%336) /* ty=Tensor[(6, 5, 10), float32] */;
  (%337,)
}

def @func_120() -> (Tensor[(6, 5, 10), int64],) {
  %338 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %339 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %342 = bitwise_xor(%340, %341) /* ty=Tensor[(6, 5, 10), int64] */;
  (%342,)
}

def @func_6738() -> Tensor[(10, 10, 16), bool] {
  @func_1231() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_687() -> (Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) {
  %343 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %344 = %343.0;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %346 = cos(%345) /* ty=Tensor[(6, 5, 10), float64] */;
  %347 = cast(%344, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = cast(%344, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %352 = cast(%346, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %353 = asin(%352) /* ty=Tensor[(6, 5, 10), float32] */;
  %354 = cast(meta[relay.Constant][8] /* ty=Tensor[(20, 80), float64] */, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %355 = reshape(%354, newshape=[20, 80]) /* ty=Tensor[(20, 80), float64] */;
  %356 = @func_296(%355) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %359 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%353, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %362 = cast(meta[relay.Constant][8] /* ty=Tensor[(20, 80), float64] */, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %363 = reshape(%362, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %364 = @func_218(%363) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %365 = cast(meta[relay.Constant][9] /* ty=Tensor[(55, 9), uint64] */, dtype="uint64") /* ty=Tensor[(55, 9), uint64] */;
  %366 = cast(meta[relay.Constant][9] /* ty=Tensor[(55, 9), uint64] */, dtype="uint64") /* ty=Tensor[(55, 9), uint64] */;
  %367 = %364.1;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %369 = cast(%367, dtype="int16") /* ty=Tensor[(10, 10, 16), int16] */;
  %370 = reshape(%365, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %371 = reshape(%366, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %372 = reshape(%368, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %373 = reshape(%369, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %374 = @func_412(%370, %371, %372, %373) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %375 = logical_and(%349, %350) /* ty=Tensor[(6, 5, 10), bool] */;
  %376 = acos(%351) /* ty=Tensor[(6, 5, 10), float32] */;
  %377 = minimum(%360, %361) /* ty=Tensor[(6, 5, 10), int8] */;
  %378 = %374.1;
  (%375, %376, meta[relay.Constant][8] /* ty=Tensor[(20, 80), float64] */, %377, %367, %378, meta[relay.Constant][9] /* ty=Tensor[(55, 9), uint64] */)
}

def @func_2335() -> Tensor[(6, 5, 10), float32] {
  %379 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %379.0
}

def @func_8261(%var_8250: Tensor[(15, 2, 8), int32], %var_8251: Tensor[(15, 2, 8), int32]) -> (Tensor[(15, 2, 8), bool], Tensor[(6, 5, 10), float32]) {
  %380 = cast(%var_8251, dtype="bool") /* ty=Tensor[(15, 2, 8), bool] */;
  %381 = shape_of(%var_8250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%var_8250, dtype="bool") /* ty=Tensor[(15, 2, 8), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %384 = @func_7364() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */;
  %385 = equal(%382, %383) /* ty=Tensor[(15, 2, 8), bool] */;
  %386 = %384.0;
  (%385, %386)
}

def @func_2785(%var_2778: Tensor[(12, 8, 2), uint64]) -> (Tensor[(12, 8, 2), uint64],) {
  %387 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %388 = cast(%var_2778, dtype="uint64") /* ty=Tensor[(12, 8, 2), uint64] */;
  %389 = left_shift(%387, %388) /* ty=Tensor[(12, 8, 2), uint64] */;
  (%389,)
}

def @func_5378() -> (Tensor[(495), uint64],) {
  %390 = @func_1763() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) */;
  %391 = %390.2;
  (%391,)
}

def @func_3060(%var_3055: Tensor[(16, 7, 15), int32], %var_3056: Tensor[(16, 7, 15), int32]) -> (Tensor[(16, 7, 15), int32],) {
  %392 = cast(%var_3056, dtype="int32") /* ty=Tensor[(16, 7, 15), int32] */;
  %393 = shape_of(%var_3055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_3055, dtype="int32") /* ty=Tensor[(16, 7, 15), int32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %396 = bitwise_or(%394, %395) /* ty=Tensor[(16, 7, 15), int32] */;
  (%396,)
}

def @func_1849() -> Tensor[(10, 10, 16), bool] {
  %397 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %397.0
}

def @func_3563(%var_3548: Tensor[(192), uint64]) -> (Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), int64]) {
  %398 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %399 = cast(%var_3548, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %400 = reshape(%399, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), uint64] */;
  %401 = @func_2785(%400) /* ty=(Tensor[(12, 8, 2), uint64],) */;
  %402 = %398.0;
  %403 = %401.0;
  %404 = @func_1650() /* ty=Tensor[(6, 5, 10), int64] */;
  (%402, %403, %var_3548, %404)
}

def @func_847() -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  %405 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %407 = cast(meta[relay.Constant][11] /* ty=Tensor[(1600), float64] */, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %408 = reshape(%407, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %409 = @func_66(%408) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %410 = exp(%406) /* ty=Tensor[(6, 5, 10), float32] */;
  %411 = %409.0;
  (%410, %411, meta[relay.Constant][11] /* ty=Tensor[(1600), float64] */)
}

def @func_2645() -> (Tensor[(6, 5, 10), int8],) {
  %412 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %413 = %412.0;
  (%413,)
}

def @main(%var_9001: Tensor[(429), float64], %var_9002: Tensor[(495), uint64], %var_9014: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), bool], Tensor[(429), float64], Tensor[(495), uint64], Tensor[(15, 7, 13), float64], Tensor[(91, 15), float64], Tensor[(10, 10, 16), float64]) {
  %414 = cast(%var_9001, dtype="float64") /* ty=Tensor[(429), float64] */;
  %415 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %416 = %415.1;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %418 = cast(%var_9002, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %419 = reshape(%414, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float64] */;
  %420 = reshape(%417, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %421 = reshape(%418, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %422 = @func_3608(%419, %420, %421) /* ty=(Tensor[(3, 13, 11), float64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(495), uint64]) */;
  %423 = cast(meta[relay.Constant][12] /* ty=Tensor[(91, 15), float64] */, dtype="float64") /* ty=Tensor[(91, 15), float64] */;
  %424 = reshape(%423, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
  %425 = cast(%var_9014, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %426 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%416, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %429 = %422.1;
  %430 = @func_1465(%424) /* ty=Tensor[(15, 7, 13), float64] */;
  %431 = floor_mod(%427, %428) /* ty=Tensor[(10, 10, 16), float64] */;
  (%429, %var_9001, %var_9002, %430, meta[relay.Constant][12] /* ty=Tensor[(91, 15), float64] */, %431)
}

def @func_6405(%var_6401: Tensor[(16, 15, 9), float32]) -> (Tensor[(16, 15, 9), float32],) {
  %432 = cast(%var_6401, dtype="float32") /* ty=Tensor[(16, 15, 9), float32] */;
  %433 = log10(%432) /* ty=Tensor[(16, 15, 9), float32] */;
  (%433,)
}

def @func_7949() -> Tensor[(6, 5, 10), int64] {
  @func_1650() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_7364() -> (Tensor[(6, 5, 10), float32], Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) {
  %434 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %435 = @func_3428() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64]) */;
  %436 = %435.0;
  %437 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 2, 6), float32] */, dtype="uint8") /* ty=Tensor[(14, 2, 6), uint8] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="uint8") /* ty=Tensor[(14, 2, 6), uint8] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %441 = add(%439, %440) /* ty=Tensor[(14, 2, 6), uint8] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(14, 2, 6), float32] */;
  %443 = @func_3849() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %444 = %434.0;
  %445 = cosh(%442) /* ty=Tensor[(14, 2, 6), float32] */;
  %446 = %443.0;
  (%444, %445, %446)
}

def @func_5600(%var_5587: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) {
  %447 = @func_3346() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %448 = cast(%var_5587, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %449 = reshape(%448, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %450 = @func_218(%449) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %451 = %447.0;
  %452 = %450.2;
  (%451, %452, %var_5587)
}

def @func_6255(%var_6248: Tensor[(10, 16, 1), int32], %var_6249: Tensor[(10, 16, 14), int32]) -> Tensor[(10, 16, 14), int32] {
  %453 = cast(%var_6248, dtype="int32") /* ty=Tensor[(10, 16, 1), int32] */;
  %454 = cast(%var_6249, dtype="int32") /* ty=Tensor[(10, 16, 14), int32] */;
  bitwise_and(%453, %454) /* ty=Tensor[(10, 16, 14), int32] */
}

def @func_8535() -> (Tensor[(10, 10, 16), bool],) {
  %455 = @func_6738() /* ty=Tensor[(10, 10, 16), bool] */;
  (%455,)
}

def @func_8932(%var_8924: Tensor[(15, 13, 13), uint64], %var_8925: Tensor[(15, 13, 13), uint64]) -> Tensor[(15, 13, 13), uint64] {
  %456 = cast(%var_8925, dtype="uint64") /* ty=Tensor[(15, 13, 13), uint64] */;
  %457 = shape_of(%var_8924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_8924, dtype="uint64") /* ty=Tensor[(15, 13, 13), uint64] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%458, %459) /* ty=Tensor[(15, 13, 13), uint64] */
}

def @func_1763() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) {
  %460 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %461 = cast(meta[relay.Constant][14] /* ty=Tensor[(495), uint64] */, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %462 = %460.1;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %464 = reshape(%461, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %465 = reshape(%463, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %466 = @func_559(%464, %465) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %467 = cast(meta[relay.Constant][14] /* ty=Tensor[(495), uint64] */, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %468 = cast(%462, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %469 = reshape(%467, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %470 = reshape(%468, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %471 = @func_559(%469, %470) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %472 = %466.7;
  %473 = %471.5;
  (%462, %472, meta[relay.Constant][14] /* ty=Tensor[(495), uint64] */, %473)
}

def @func_1562(%var_1548: Tensor[(330), uint8]) -> (Tensor[(10, 10, 16), bool], Tensor[(10, 11, 3), bool], uint8, Tensor[(330), uint8], Tensor[(6, 5, 10), int64]) {
  %474 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %475 = cast(%var_1548, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %476 = reshape(%474, newshape=[]) /* ty=uint8 */;
  %477 = reshape(%475, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint8] */;
  %478 = @func_1231() /* ty=Tensor[(10, 10, 16), bool] */;
  %479 = @func_1013(%476, %477) /* ty=Tensor[(10, 11, 3), bool] */;
  %480 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  (%478, %479, meta[relay.Constant][15] /* ty=uint8 */, %var_1548, %480)
}

def @func_3686() -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) {
  %481 = @func_1790() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %482 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %483 = %481.0;
  %484 = %482.0;
  (%483, %484)
}

def @func_4258() -> (Tensor[(10, 10, 16), bool],) {
  %485 = @func_1231() /* ty=Tensor[(10, 10, 16), bool] */;
  (%485,)
}

def @func_8339(%var_8333: Tensor[(1, 15, 12), float64], %var_8334: Tensor[(13, 15, 12), float64]) -> (Tensor[(13, 15, 12), bool],) {
  %486 = cast(%var_8333, dtype="bool") /* ty=Tensor[(1, 15, 12), bool] */;
  %487 = cast(%var_8334, dtype="bool") /* ty=Tensor[(13, 15, 12), bool] */;
  %488 = equal(%486, %487) /* ty=Tensor[(13, 15, 12), bool] */;
  (%488,)
}

def @func_3428() -> (Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64]) {
  %489 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %490 = cast(meta[relay.Constant][16] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %491 = reshape(%490, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %492 = @func_3131(%491) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) */;
  %493 = %492.2;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %495 = tan(%494) /* ty=Tensor[(1600), float64] */;
  %496 = cast(%493, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(1), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?), bool] */;
  %500 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %501 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  %502 = %489.0;
  %503 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
  %504 = logical_and(%498, %499) /* ty=Tensor[(1600), bool] */;
  %505 = %500.0;
  (%501, %502, meta[relay.Constant][16] /* ty=Tensor[(1600), bool] */, %503, %504, %505)
}

def @func_4016() -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), uint64]) {
  %506 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %507 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %508 = %506.0;
  %509 = cast(%508, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %510 = reshape(%509, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int8] */;
  %511 = @func_3294(%510) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */;
  %512 = %507.0;
  %513 = @func_2335() /* ty=Tensor[(6, 5, 10), float32] */;
  %514 = %511.3;
  (%508, %512, %513, %514)
}

def @func_1815() -> Tensor[(14, 2, 6), float32] {
  %515 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 6), float32] */;
  acosh(%515) /* ty=Tensor[(14, 2, 6), float32] */
}

def @func_1670() -> (Tensor[(6, 5, 10), float32],) {
  %516 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %517 = %516.0;
  (%517,)
}

def @func_5194(%var_5157: Tensor[(10, 5, 5), uint32], %var_5175: Tensor[(1600), float64]) -> (Tensor[(10, 5, 5), uint32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 5, 5), float64], Tensor[(6, 5, 10), int64]) {
  %518 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 5, 5), uint32] */, dtype="uint32") /* ty=Tensor[(10, 5, 5), uint32] */;
  %519 = shape_of(%var_5157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_5157, dtype="uint32") /* ty=Tensor[(10, 5, 5), uint32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %522 = cast(%var_5175, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %523 = reshape(%522, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %524 = @func_66(%523) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %525 = @func_1790() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %526 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 5, 5), uint32] */, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %527 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %528 = bitwise_xor(%520, %521) /* ty=Tensor[(10, 5, 5), uint32] */;
  %529 = %524.0;
  %530 = %525.0;
  %531 = log2(%526) /* ty=Tensor[(10, 5, 5), float64] */;
  %532 = %527.0;
  (%528, %529, %var_5175, %530, %531, %532)
}

def @func_7829() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(300), int64]) {
  %533 = cast(meta[relay.Constant][19] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
  %534 = reshape(%533, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int64] */;
  %535 = @func_5688() /* ty=Tensor[(10, 10, 16), bool] */;
  %536 = @func_1963(%534) /* ty=Tensor[(6, 5, 10), float64] */;
  (%535, %536, meta[relay.Constant][19] /* ty=Tensor[(300), int64] */)
}

def @func_3346() -> (Tensor[(6, 5, 10), int64],) {
  %537 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %538 = %537.0;
  (%538,)
}

def @func_5427(%var_5401: Tensor[(15, 5, 6), float32], %var_5407: Tensor[(1365), float64]) -> (Tensor[(15, 5, 6), bool], Tensor[(1365), float64], Tensor[(1365), float64]) {
  %539 = cast(%var_5401, dtype="bool") /* ty=Tensor[(15, 5, 6), bool] */;
  %540 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(15, 5, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 5, 6), float32] */, dtype="bool") /* ty=Tensor[(15, 5, 6), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = cast(%var_5407, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %544 = cast(%var_5407, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %545 = cast(%var_5407, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %546 = reshape(%543, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %547 = reshape(%544, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
  %548 = reshape(%545, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %549 = @func_4764(%546, %547, %548) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) */;
  %550 = equal(%541, %542) /* ty=Tensor[(15, 5, 6), bool] */;
  %551 = %549.2;
  (%550, %551, %var_5407)
}

def @func_4587() -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(14, 2, 6), float32]) {
  %552 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %553 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %554 = @func_2230() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %555 = %552.0;
  %556 = %553.0;
  %557 = %554.0;
  (%555, %556, %557)
}

def @func_6817() -> (Tensor[(8, 8, 13), float32], Tensor[(8, 8, 13), float32]) {
  %558 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %559 = atanh(%558) /* ty=Tensor[(8, 8, 13), float64] */;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
  %561 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
  %562 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%559, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %565 = sin(%560) /* ty=Tensor[(8, 8, 13), float32] */;
  %566 = floor_divide(%563, %564) /* ty=Tensor[(8, 8, 13), float32] */;
  (%565, %566)
}

def @func_7264() -> Tensor[(10, 10, 16), bool] {
  %567 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %567.4
}

def @func_6690() -> Tensor[(6, 5, 10), float32] {
  %568 = @func_5004() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) */;
  %568.0
}

def @func_2966(%var_2910: Tensor[(5, 9, 14), int32], %var_2911: Tensor[(5, 9, 14), int32], %var_2915: Tensor[(5, 9, 14), int32]) -> (Tensor[(5, 9, 14), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) {
  %569 = cast(%var_2911, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %570 = shape_of(%var_2910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%var_2910, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %573 = add(%571, %572) /* ty=Tensor[(5, 9, 14), int32] */;
  %574 = cast(%var_2915, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %578 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %579 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %580 = @func_2077() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %581 = bitwise_xor(%576, %577) /* ty=Tensor[(5, 9, 14), int32] */;
  %582 = %578.0;
  %583 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
  %584 = %579.0;
  %585 = %580.0;
  (%581, %582, %583, %584, %585)
}

def @func_482() -> Tensor[(6, 5, 10), int64] {
  %586 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %586.0
}

def @func_5916(%var_5832: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), bool]) {
  %587 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %588 = cast(%var_5832, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %589 = reshape(%588, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %590 = @func_218(%589) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %591 = %587.0;
  %592 = cast(%591, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %593 = reshape(%592, newshape=[300]) /* ty=Tensor[(300), int8] */;
  %594 = @func_4074(%593) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) */;
  %595 = @func_5378() /* ty=(Tensor[(495), uint64],) */;
  %596 = cast(meta[relay.Constant][22] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %597 = reshape(%596, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), uint64] */;
  %598 = @func_2785(%597) /* ty=(Tensor[(12, 8, 2), uint64],) */;
  %599 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %600 = %590.1;
  %601 = %594.1;
  %602 = %595.0;
  %603 = @func_3386() /* ty=Tensor[(6, 5, 10), int64] */;
  %604 = %598.0;
  %605 = %599.2;
  (%591, %600, %var_5832, %601, %602, %603, %604, meta[relay.Constant][22] /* ty=Tensor[(192), uint64] */, %605)
}

def @func_1231() -> Tensor[(10, 10, 16), bool] {
  @func_971() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_296(%var_281: Tensor[(20, 80), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) {
  %606 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %607 = cast(%var_281, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %608 = reshape(%607, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %609 = @func_66(%608) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %610 = %609.0;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %612 = reshape(%611, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %613 = @func_218(%612) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %614 = cast(%610, dtype="float32") /* ty=Tensor[(10, 10, 16), float32] */;
  %615 = shape_of(%var_281, dtype="int32") /* ty=Tensor[(2), int32] */;
  %616 = cast(%var_281, dtype="float32") /* ty=Tensor[(20, 80), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %618 = %606.0;
  %619 = %613.1;
  %620 = power(%616, %617) /* ty=Tensor[(20, 80), float32] */;
  (%618, %619, %620)
}

def @func_2685() -> Tensor[(6, 5, 10), int64] {
  %621 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %621.0
}

def @func_8764() -> (Tensor[(6, 5, 10), int64],) {
  %622 = @func_4885() /* ty=Tensor[(6, 5, 10), int64] */;
  (%622,)
}

def @func_1790() -> (Tensor[(6, 5, 10), int64],) {
  %623 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %624 = %623.0;
  (%624,)
}

def @func_3779() -> Tensor[(14, 2, 6), float32] {
  @func_1815() /* ty=Tensor[(14, 2, 6), float32] */
}

def @func_3083() -> (Tensor[(6, 5, 10), int64],) {
  %625 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %626 = %625.0;
  (%626,)
}

def @func_8955() -> (Tensor[(495), uint64],) {
  %627 = @func_1763() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) */;
  %628 = %627.2;
  (%628,)
}

def @func_2091() -> (Tensor[(14, 2, 6), float32],) {
  %629 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  (%629,)
}

def @func_6725() -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) {
  %630 = @func_4258() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %633 = reshape(%632, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %634 = @func_66(%633) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %635 = %634.0;
  (%631, %635)
}

def @func_7742() -> Tensor[(10, 10, 16), bool] {
  @func_5688() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_4074(%var_4065: Tensor[(300), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) {
  %636 = @func_1841() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %639 = reshape(%638, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %640 = @func_3131(%639) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) */;
  %641 = cast(%var_4065, dtype="int8") /* ty=Tensor[(300), int8] */;
  %642 = reshape(%641, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int8] */;
  %643 = @func_3294(%642) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */;
  %644 = %640.1;
  %645 = %643.3;
  (%637, %644, %645, %var_4065)
}

def @func_801(%var_760: Tensor[(2, 800), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(2, 800), float64], Tensor[(1600), int16], Tensor[(2, 800), float64]) {
  %646 = cast(%var_760, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
  %647 = reshape(%646, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %648 = @func_218(%647) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %649 = %648.1;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %651 = shape_of(%var_760, dtype="int32") /* ty=Tensor[(2), int32] */;
  %652 = cast(%var_760, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %654 = maximum(%652, %653) /* ty=Tensor[(2, 800), float64] */;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
  %656 = reshape(%655, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %657 = @func_218(%656) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %658 = cast(%var_760, dtype="float32") /* ty=Tensor[(2, 800), float32] */;
  %659 = log2(%658) /* ty=Tensor[(2, 800), float32] */;
  %660 = cast(%659, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
  %661 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %662 = %657.2;
  %663 = exp(%660) /* ty=Tensor[(2, 800), float64] */;
  (%661, %654, %662, %663)
}

def @func_4158() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64]) {
  %664 = @func_3849() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %665 = %664.0;
  %666 = cast(%665, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %667 = reshape(%666, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int8] */;
  %668 = @func_3294(%667) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */;
  %669 = @func_3849() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %670 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %671 = %668.1;
  %672 = %669.0;
  %673 = %670.1;
  (%665, %671, %672, %673)
}

def @func_6514() -> (Tensor[(6, 5, 10), float32],) {
  %674 = @func_6284() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %675 = %674.0;
  (%675,)
}

def @func_4640() -> (Tensor[(6, 5, 10), float32],) {
  %676 = @func_1783() /* ty=Tensor[(6, 5, 10), float32] */;
  (%676,)
}

def @func_717() -> (Tensor[(6, 5, 10), int64],) {
  %677 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %678 = %677.0;
  (%678,)
}

def @func_2040() -> (Tensor[(6, 5, 10), int8],) {
  %679 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %680 = %679.0;
  %681 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 5, 10), float32] */, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %685 = left_shift(%683, %684) /* ty=Tensor[(6, 5, 10), int8] */;
  (%685,)
}

def @func_7453(%var_7445: Tensor[(192), uint64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(192), uint64], Tensor[(192), uint64]) {
  %686 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %687 = cast(%var_7445, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %688 = reshape(%687, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %689 = @func_4445(%688) /* ty=(Tensor[(14, 2, 6), int16], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64]) */;
  %690 = @func_5688() /* ty=Tensor[(10, 10, 16), bool] */;
  %691 = %686.0;
  %692 = %689.2;
  (%690, %691, %692, %var_7445)
}

def @func_5297(%var_5293: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64], Tensor[(1600), float64]) {
  %693 = cast(%var_5293, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %694 = reshape(%693, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %695 = @func_218(%694) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %696 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
  %697 = %695.0;
  (%696, %697, %var_5293)
}

def @func_1841() -> (Tensor[(10, 10, 16), bool],) {
  %698 = @func_1084() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %699 = %698.0;
  (%699,)
}

def @func_3590() -> Tensor[(10, 10, 16), bool] {
  @func_971() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_1908() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  %700 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %703 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %704 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %705 = %704.0;
  %706 = cast(%701, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %710 = @func_1763() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) */;
  %711 = cast(meta[relay.Constant][24] /* ty=Tensor[(1600), float64] */, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %712 = reshape(%711, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %713 = @func_218(%712) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %714 = log2(%702) /* ty=Tensor[(6, 5, 10), float32] */;
  %715 = %703.0;
  %716 = less_equal(%708, %709) /* ty=Tensor[(6, 5, 10), bool] */;
  %717 = %710.2;
  %718 = %713.1;
  (%714, %715, %716, %717, %718, meta[relay.Constant][24] /* ty=Tensor[(1600), float64] */)
}

def @func_1139() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %719 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
  %720 = %719.4;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %722 = reshape(%721, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %723 = @func_218(%722) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %724 = %723.0;
  (%720, %724)
}

def @func_5688() -> Tensor[(10, 10, 16), bool] {
  @func_1231() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_1699() -> (Tensor[(6, 5, 10), int64],) {
  %725 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %726 = %725.0;
  (%726,)
}

def @func_8640(%var_8619: Tensor[(250), uint32], %var_8620: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(11, 15, 4), uint32], Tensor[(110, 6), float64], Tensor[(250), uint32], Tensor[(250), uint32], Tensor[(1568), float64]) {
  %727 = cast(meta[relay.Constant][25] /* ty=Tensor[(110, 6), float64] */, dtype="float64") /* ty=Tensor[(110, 6), float64] */;
  %728 = reshape(%727, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float64] */;
  %729 = cast(%var_8619, dtype="uint32") /* ty=Tensor[(250), uint32] */;
  %730 = cast(%var_8620, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %731 = reshape(%729, newshape=[250]) /* ty=Tensor[(250), uint32] */;
  %732 = reshape(%730, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %733 = @func_6613(%731, %732) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(198), float64], Tensor[(10, 5, 5), float64], Tensor[(250), uint32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(1568), float64], Tensor[(6, 5, 10), int8]) */;
  %734 = @func_6738() /* ty=Tensor[(10, 10, 16), bool] */;
  %735 = @func_8080(%728) /* ty=Tensor[(11, 15, 4), uint32] */;
  %736 = %733.3;
  (%734, %735, meta[relay.Constant][25] /* ty=Tensor[(110, 6), float64] */, %736, %var_8619, %var_8620)
}

def @func_3386() -> Tensor[(6, 5, 10), int64] {
  %737 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %737.0
}

def @func_2509() -> (Tensor[(6, 5, 10), int8],) {
  %738 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %739 = %738.0;
  (%739,)
}

def @func_4445(%var_4443: Tensor[(192), uint64]) -> (Tensor[(14, 2, 6), int16], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64]) {
  %740 = @func_4237() /* ty=(Tensor[(14, 2, 6), int16],) */;
  %741 = cast(%var_4443, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %742 = reshape(%741, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), uint64] */;
  %743 = @func_2785(%742) /* ty=(Tensor[(12, 8, 2), uint64],) */;
  %744 = %740.0;
  %745 = %743.0;
  (%744, %745, %var_4443)
}

def @func_4764(%var_4742: Tensor[(1365), float64], %var_4746: Tensor[(15, 7, 13), float64], %var_4754: Tensor[(1365), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) {
  %746 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %747 = cast(%var_4742, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %748 = reshape(%747, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
  %749 = @func_1465(%748) /* ty=Tensor[(15, 7, 13), float64] */;
  %750 = cast(%var_4746, dtype="float64") /* ty=Tensor[(15, 7, 13), float64] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="float64") /* ty=Tensor[(15, 7, 13), float64] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %754 = cast(%var_4754, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %755 = shape_of(%var_4742, dtype="int32") /* ty=Tensor[(1), int32] */;
  %756 = cast(%var_4742, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?), float64] */;
  %758 = %746.0;
  %759 = floor_divide(%752, %753) /* ty=Tensor[(15, 7, 13), float64] */;
  %760 = maximum(%756, %757) /* ty=Tensor[(1365), float64] */;
  (%758, %759, %760)
}

def @func_1963(%var_1949: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), float64] {
  %761 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %762 = cast(%var_1949, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%764, %765) /* ty=Tensor[(6, 5, 10), float64] */
}

def @func_7776(%var_7771: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), float64] {
  %766 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %767 = %766.0;
  %768 = cast(%var_7771, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%770, %771) /* ty=Tensor[(6, 5, 10), float64] */
}

def @func_559(%var_509: Tensor[(495), uint64], %var_510: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) {
  %772 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %773 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %774 = cast(%var_510, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %775 = cast(%var_510, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %776 = reshape(%772, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %777 = reshape(%773, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %778 = reshape(%774, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %779 = reshape(%775, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %780 = @func_412(%776, %777, %778, %779) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %781 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %783 = asinh(%782) /* ty=Tensor[(6, 5, 10), float32] */;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %785 = cast(%var_510, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %786 = reshape(%785, newshape=[20, 80]) /* ty=Tensor[(20, 80), float64] */;
  %787 = @func_296(%786) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) */;
  %788 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %789 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %790 = %787.2;
  %791 = cast(%790, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %792 = cast(%var_510, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %793 = reshape(%788, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %794 = reshape(%789, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %795 = reshape(%791, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %796 = reshape(%792, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %797 = @func_412(%793, %794, %795, %796) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %798 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %799 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %800 = %797.4;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %802 = cast(%790, dtype="int16") /* ty=Tensor[(20, 80), int16] */;
  %803 = reshape(%798, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %804 = reshape(%799, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %805 = reshape(%801, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %806 = reshape(%802, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %807 = @func_412(%803, %804, %805, %806) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %808 = cast(%783, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %809 = rsqrt(%808) /* ty=Tensor[(6, 5, 10), float32] */;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %811 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %812 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %813 = cast(%var_510, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %814 = cast(%790, dtype="int16") /* ty=Tensor[(20, 80), int16] */;
  %815 = reshape(%811, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %816 = reshape(%812, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %817 = reshape(%813, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %818 = reshape(%814, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %819 = @func_412(%815, %816, %817, %818) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %820 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %821 = %780.5;
  %822 = atanh(%784) /* ty=Tensor[(6, 5, 10), float64] */;
  %823 = %807.4;
  %824 = sin(%810) /* ty=Tensor[(6, 5, 10), float64] */;
  %825 = %819.2;
  %826 = %820.0;
  (%821, %var_509, %var_510, %822, %790, %800, %823, %824, %825, %826)
}

def @func_2203() -> (Tensor[(6, 5, 10), int64],) {
  %827 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %828 = %827.0;
  (%828,)
}

def @func_1084() -> (Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  %829 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %830 = @func_971() /* ty=Tensor[(10, 10, 16), bool] */;
  %831 = %829.2;
  (%830, %831)
}

def @func_66(%var_37: Tensor[(10, 10, 16), float64]) -> (Tensor[(10, 10, 16), bool],) {
  %832 = cast(%var_37, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %833 = cos(%832) /* ty=Tensor[(10, 10, 16), float64] */;
  %834 = cast(%833, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %835 = shape_of(%var_37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_37, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %838 = less_equal(%836, %837) /* ty=Tensor[(10, 10, 16), bool] */;
  (%838,)
}

def @func_8530() -> (Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool]) {
  %839 = @func_5812() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %840 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %841 = %839.0;
  %842 = %840.1;
  (%841, %842)
}

def @func_4885() -> Tensor[(6, 5, 10), int64] {
  %843 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %843.0
}

def @func_3294(%var_3243: Tensor[(6, 5, 10), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) {
  %844 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %845 = %844.0;
  %846 = cast(%var_3243, dtype="int32") /* ty=Tensor[(6, 5, 10), int32] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%845, dtype="int32") /* ty=Tensor[(6, 5, 10), int32] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %850 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %851 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
  %852 = cast(%851, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %853 = reshape(%852, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), bool] */;
  %854 = @func_2377(%853) /* ty=(Tensor[(10, 10, 16), uint64],) */;
  %855 = multiply(%848, %849) /* ty=Tensor[(6, 5, 10), int32] */;
  %856 = %850.0;
  %857 = %854.0;
  (%851, %855, %856, %857)
}

def @func_5354() -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %858 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %859 = %858.0;
  %860 = cast(%859, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %861 = reshape(%860, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), bool] */;
  %862 = @func_4859(%861) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %863 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %864 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %865 = %862.0;
  %866 = %863.0;
  %867 = %864.0;
  (%859, %865, %866, %867)
}

def @func_3462(%var_3454: Tensor[(495), uint64]) -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64]) {
  %868 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %869 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %870 = %868.0;
  %871 = cast(%870, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %872 = reshape(%871, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int64] */;
  %873 = @func_1446(%872) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) */;
  %874 = cast(%var_3454, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %875 = %873.0;
  %876 = cast(%875, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %877 = reshape(%874, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %878 = reshape(%876, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %879 = @func_559(%877, %878) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %880 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %881 = %869.0;
  %882 = %879.7;
  %883 = %880.0;
  (%870, %881, %875, %882, %var_3454, %883)
}

def @func_1650() -> Tensor[(6, 5, 10), int64] {
  @func_482() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_7704() -> (Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) {
  %884 = @func_7090() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %885 = @func_6514() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %886 = %884.0;
  %887 = %885.0;
  (%886, %887)
}

def @func_412(%var_329: Tensor[(15, 3, 11), uint64], %var_330: Tensor[(15, 3, 11), uint64], %var_355: Tensor[(1600), float64], %var_400: Tensor[(1600), int16]) -> (Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %888 = cast(%var_355, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %889 = reshape(%888, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %890 = @func_218(%889) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %891 = %890.2;
  %892 = cast(%891, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %893 = reshape(%892, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %894 = @func_218(%893) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %895 = cast(%var_330, dtype="uint64") /* ty=Tensor[(15, 3, 11), uint64] */;
  %896 = shape_of(%var_329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%var_329, dtype="uint64") /* ty=Tensor[(15, 3, 11), uint64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %899 = bitwise_or(%897, %898) /* ty=Tensor[(15, 3, 11), uint64] */;
  %900 = cast(%899, dtype="int16") /* ty=Tensor[(15, 3, 11), int16] */;
  %901 = shape_of(%var_330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(%var_330, dtype="int16") /* ty=Tensor[(15, 3, 11), int16] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %904 = subtract(%902, %903) /* ty=Tensor[(15, 3, 11), int16] */;
  %905 = cast(%899, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %909 = cast(%var_400, dtype="uint16") /* ty=Tensor[(1600), uint16] */;
  %910 = shape_of(%891, dtype="int32") /* ty=Tensor[(1), int32] */;
  %911 = cast(%891, dtype="uint16") /* ty=Tensor[(1600), uint16] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %913 = cast(%var_355, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %914 = reshape(%913, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %915 = @func_66(%914) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %916 = cast(%var_400, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %917 = reshape(%916, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %918 = @func_218(%917) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %919 = %894.0;
  %920 = left_shift(%907, %908) /* ty=Tensor[(15, 3, 11), int8] */;
  %921 = subtract(%911, %912) /* ty=Tensor[(1600), uint16] */;
  %922 = %915.0;
  %923 = %918.0;
  (%var_355, %919, %920, %921, %922, %923)
}

def @func_6641() -> (Tensor[(6, 5, 10), int64],) {
  %924 = @func_5354() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %925 = %924.3;
  (%925,)
}

def @func_7603() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32]) {
  %926 = @func_5977() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %927 = @func_5977() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %928 = %926.0;
  %929 = %927.0;
  (%928, %929)
}

def @func_7414() -> (Tensor[(14, 2, 6), float32],) {
  %930 = @func_2091() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %931 = %930.0;
  (%931,)
}

def @func_218(%var_175: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) {
  %932 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %933 = cast(%var_175, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %934 = reshape(%933, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %935 = @func_66(%934) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %936 = cast(%var_175, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %937 = reshape(%936, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %938 = @func_66(%937) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %939 = %938.0;
  %940 = cast(%939, dtype="int16") /* ty=Tensor[(10, 10, 16), int16] */;
  %941 = shape_of(%var_175, dtype="int32") /* ty=Tensor[(1), int32] */;
  %942 = cast(%var_175, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?), int16] */;
  %944 = %932.0;
  %945 = %935.0;
  %946 = maximum(%942, %943) /* ty=Tensor[(1600), int16] */;
  (%944, %945, %946)
}

def @func_872() -> (Tensor[(6, 5, 10), int64],) {
  %947 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %948 = %947.0;
  (%948,)
}

def @func_5945() -> (Tensor[(14, 2, 6), float32],) {
  %949 = @func_3779() /* ty=Tensor[(14, 2, 6), float32] */;
  (%949,)
}

def @func_2077() -> (Tensor[(10, 10, 16), bool],) {
  %950 = @func_1841() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %951 = %950.0;
  (%951,)
}

def @func_7285() -> (Tensor[(10, 10, 16), bool], Tensor[(14, 2, 6), float32]) {
  %952 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
  %953 = @func_3779() /* ty=Tensor[(14, 2, 6), float32] */;
  (%952, %953)
}

def @func_1446(%var_1441: Tensor[(6, 5, 10), int64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) {
  %954 = @func_971() /* ty=Tensor[(10, 10, 16), bool] */;
  %955 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 10, 16), bool] */, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%954, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %959 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %960 = %959.1;
  %961 = cast(%960, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %962 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %963 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %964 = %963.0;
  %965 = cast(%var_1441, dtype="uint64") /* ty=Tensor[(6, 5, 10), uint64] */;
  %966 = shape_of(%964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %967 = cast(%964, dtype="uint64") /* ty=Tensor[(6, 5, 10), uint64] */;
  %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %969 = logical_or(%957, %958) /* ty=Tensor[(10, 10, 16), bool] */;
  %970 = sqrt(%961) /* ty=Tensor[(6, 5, 10), float32] */;
  %971 = %962.0;
  %972 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %973 = bitwise_and(%967, %968) /* ty=Tensor[(6, 5, 10), uint64] */;
  (%969, %970, %971, %972, %973)
}

def @func_6708() -> (Tensor[(6, 5, 10), int64],) {
  %974 = @func_5004() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) */;
  %975 = %974.1;
  (%975,)
}

def @func_6613(%var_6578: Tensor[(250), uint32], %var_6593: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(198), float64], Tensor[(10, 5, 5), float64], Tensor[(250), uint32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(1568), float64], Tensor[(6, 5, 10), int8]) {
  %976 = @func_2077() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %977 = cast(meta[relay.Constant][27] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %978 = reshape(%977, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), float32] */;
  %979 = @func_2876(%978) /* ty=Tensor[(6, 3, 11), float64] */;
  %980 = cast(%979, dtype="float64") /* ty=Tensor[(6, 3, 11), float64] */;
  %981 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(198), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %982 = cast(meta[relay.Constant][27] /* ty=Tensor[(198), float32] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?), float64] */;
  %984 = cast(%var_6578, dtype="uint32") /* ty=Tensor[(250), uint32] */;
  %985 = %976.0;
  %986 = cast(%985, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %987 = reshape(%984, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint32] */;
  %988 = reshape(%986, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %989 = @func_5194(%987, %988) /* ty=(Tensor[(10, 5, 5), uint32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 5, 5), float64], Tensor[(6, 5, 10), int64]) */;
  %990 = cast(%var_6593, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %991 = reshape(%990, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %992 = @func_5537(%991) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(7, 14, 16), float32]) */;
  %993 = @func_4587() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(14, 2, 6), float32]) */;
  %994 = minimum(%982, %983) /* ty=Tensor[(198), float64] */;
  %995 = %989.4;
  %996 = @func_5688() /* ty=Tensor[(10, 10, 16), bool] */;
  %997 = @func_3590() /* ty=Tensor[(10, 10, 16), bool] */;
  %998 = %992.0;
  %999 = %993.0;
  (%985, %994, %995, %var_6578, %996, %997, %998, %var_6593, %999)
}

def @func_6939(%var_6912: Tensor[(2, 4, 11), float32]) -> (Tensor[(2, 4, 11), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) {
  %1000 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 11), float32] */;
  %1001 = acos(%1000) /* ty=Tensor[(2, 4, 11), float32] */;
  %1002 = cast(%var_6912, dtype="uint16") /* ty=Tensor[(2, 4, 11), uint16] */;
  %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1004 = cast(%1001, dtype="uint16") /* ty=Tensor[(2, 4, 11), uint16] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1006 = add(%1004, %1005) /* ty=Tensor[(2, 4, 11), uint16] */;
  %1007 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 4, 11), uint16] */, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1006, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1011 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %1012 = cast(%1011, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %1013 = reshape(%1012, newshape=[300]) /* ty=Tensor[(300), int8] */;
  %1014 = @func_4074(%1013) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) */;
  %1015 = power(%1009, %1010) /* ty=Tensor[(2, 4, 11), float64] */;
  %1016 = %1014.1;
  (%1015, %1011, %1016)
}

def @func_8710() -> Tensor[(10, 10, 16), bool] {
  @func_7264() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_5812() -> (Tensor[(6, 5, 10), int8],) {
  %1017 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %1018 = %1017.0;
  (%1018,)
}

def @func_1783() -> Tensor[(6, 5, 10), float32] {
  %1019 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %1019.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7779(%var_7777: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), float64] {
  @func_7776(%var_7777) /* ty=Tensor[(6, 5, 10), float64] */
}

def @func_1765() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) {
  @func_1763() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) */
}

def @func_8261(%var_8250: Tensor[(15, 2, 8), int32], %var_8251: Tensor[(15, 2, 8), int32]) -> (Tensor[(15, 2, 8), bool], Tensor[(6, 5, 10), float32]) {
  %0 = cast(%var_8251, dtype="bool") /* ty=Tensor[(15, 2, 8), bool] */;
  %1 = shape_of(%var_8250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_8250, dtype="bool") /* ty=Tensor[(15, 2, 8), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = @func_7364() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */;
  %5 = equal(%2, %3) /* ty=Tensor[(15, 2, 8), bool] */;
  %6 = %4.0;
  (%5, %6)
}

def @func_3565(%var_3564: Tensor[(192), uint64]) -> (Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), int64]) {
  %14 = fn (%var_3548: Tensor[(192), uint64]) -> (Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), int64]) {
    %7 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %8 = cast(%var_3548, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %9 = reshape(%8, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), uint64] */;
    %10 = @func_2785(%9) /* ty=(Tensor[(12, 8, 2), uint64],) */;
    %11 = %7.0;
    %12 = %10.0;
    %13 = @func_1650() /* ty=Tensor[(6, 5, 10), int64] */;
    (%11, %12, %var_3548, %13)
  };
  %14(%var_3564) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), int64]) */
}

def @func_1792() -> (Tensor[(6, 5, 10), int64],) {
  @func_1790() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_6259(%var_6257: Tensor[(10, 16, 1), int32], %var_6258: Tensor[(10, 16, 14), int32]) -> Tensor[(10, 16, 14), int32] {
  @func_6255(%var_6257, %var_6258) /* ty=Tensor[(10, 16, 14), int32] */
}

def @func_7055(%var_7040: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), uint16] {
  %15 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %16 = %15.0;
  %17 = cast(%var_7040, dtype="uint16") /* ty=Tensor[(6, 5, 10), uint16] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="uint16") /* ty=Tensor[(6, 5, 10), uint16] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%19, %20) /* ty=Tensor[(6, 5, 10), uint16] */
}

def @func_7902(%var_7852: Tensor[(1600), bool], %var_7895: Tensor[(1600), bool]) -> (Tensor[(14, 2, 6), float64], Tensor[(14, 2, 6), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), bool]) {
  %21 = cast(%var_7852, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %22 = reshape(%21, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %23 = @func_3131(%22) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) */;
  %24 = @func_5509() /* ty=(Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) */;
  %25 = %24.0;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %27 = log(%26) /* ty=Tensor[(14, 2, 6), float64] */;
  %28 = cast(%25, dtype="bool") /* ty=Tensor[(14, 2, 6), bool] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(14, 2, 6), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = cast(%var_7895, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %33 = shape_of(%var_7852, dtype="int32") /* ty=Tensor[(1), int32] */;
  %34 = cast(%var_7852, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?), float64] */;
  %36 = @func_5750() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), bool]) */;
  %37 = %23.0;
  %38 = logical_and(%30, %31) /* ty=Tensor[(14, 2, 6), bool] */;
  %39 = floor_divide(%34, %35) /* ty=Tensor[(1600), float64] */;
  %40 = %36.0;
  (%37, %38, %39, %40)
}

def @func_7704() -> (Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) {
  %41 = @func_7090() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %42 = @func_6514() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %43 = %41.0;
  %44 = %42.0;
  (%43, %44)
}

def @func_3346() -> (Tensor[(6, 5, 10), int64],) {
  %45 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %46 = %45.0;
  (%46,)
}

def @func_3613(%var_3610: Tensor[(3, 13, 11), float64], %var_3611: Tensor[(1600), float64], %var_3612: Tensor[(495), uint64]) -> (Tensor[(3, 13, 11), float64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(495), uint64]) {
  @func_3608(%var_3610, %var_3611, %var_3612) /* ty=(Tensor[(3, 13, 11), float64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(495), uint64]) */
}

def @func_5947() -> (Tensor[(14, 2, 6), float32],) {
  @func_5945() /* ty=(Tensor[(14, 2, 6), float32],) */
}

def @func_6939(%var_6912: Tensor[(2, 4, 11), float32]) -> (Tensor[(2, 4, 11), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) {
  %47 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 11), float32] */;
  %48 = acos(%47) /* ty=Tensor[(2, 4, 11), float32] */;
  %49 = cast(%var_6912, dtype="uint16") /* ty=Tensor[(2, 4, 11), uint16] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%48, dtype="uint16") /* ty=Tensor[(2, 4, 11), uint16] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %53 = add(%51, %52) /* ty=Tensor[(2, 4, 11), uint16] */;
  %54 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 4, 11), uint16] */, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %58 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %59 = cast(%58, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %60 = reshape(%59, newshape=[300]) /* ty=Tensor[(300), int8] */;
  %61 = @func_4074(%60) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) */;
  %62 = power(%56, %57) /* ty=Tensor[(2, 4, 11), float64] */;
  %63 = %61.1;
  (%62, %58, %63)
}

def @func_8712() -> Tensor[(10, 10, 16), bool] {
  @func_8710() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_2647() -> (Tensor[(6, 5, 10), int8],) {
  @func_2645() /* ty=(Tensor[(6, 5, 10), int8],) */
}

def @func_8265(%var_8263: Tensor[(15, 2, 8), int32], %var_8264: Tensor[(15, 2, 8), int32]) -> (Tensor[(15, 2, 8), bool], Tensor[(6, 5, 10), float32]) {
  @func_8261(%var_8263, %var_8264) /* ty=(Tensor[(15, 2, 8), bool], Tensor[(6, 5, 10), float32]) */
}

def @func_559(%var_509: Tensor[(495), uint64], %var_510: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) {
  %64 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %65 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %66 = cast(%var_510, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %67 = cast(%var_510, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %68 = reshape(%64, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %69 = reshape(%65, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %70 = reshape(%66, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %71 = reshape(%67, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %72 = @func_412(%68, %69, %70, %71) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %73 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %75 = asinh(%74) /* ty=Tensor[(6, 5, 10), float32] */;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %77 = cast(%var_510, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %78 = reshape(%77, newshape=[20, 80]) /* ty=Tensor[(20, 80), float64] */;
  %79 = @func_296(%78) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) */;
  %80 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %81 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %82 = %79.2;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %84 = cast(%var_510, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %85 = reshape(%80, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %86 = reshape(%81, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %87 = reshape(%83, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %88 = reshape(%84, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %89 = @func_412(%85, %86, %87, %88) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %90 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %91 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %92 = %89.4;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %94 = cast(%82, dtype="int16") /* ty=Tensor[(20, 80), int16] */;
  %95 = reshape(%90, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %96 = reshape(%91, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %97 = reshape(%93, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %98 = reshape(%94, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %99 = @func_412(%95, %96, %97, %98) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %100 = cast(%75, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %101 = rsqrt(%100) /* ty=Tensor[(6, 5, 10), float32] */;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %103 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %104 = cast(%var_509, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %105 = cast(%var_510, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %106 = cast(%82, dtype="int16") /* ty=Tensor[(20, 80), int16] */;
  %107 = reshape(%103, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %108 = reshape(%104, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %109 = reshape(%105, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %110 = reshape(%106, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %111 = @func_412(%107, %108, %109, %110) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %112 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %113 = %72.5;
  %114 = atanh(%76) /* ty=Tensor[(6, 5, 10), float64] */;
  %115 = %99.4;
  %116 = sin(%102) /* ty=Tensor[(6, 5, 10), float64] */;
  %117 = %111.2;
  %118 = %112.0;
  (%113, %var_509, %var_510, %114, %82, %92, %115, %116, %117, %118)
}

def @func_7743() -> Tensor[(10, 10, 16), bool] {
  %119 = fn () -> Tensor[(10, 10, 16), bool] {
    @func_5688() /* ty=Tensor[(10, 10, 16), bool] */
  };
  %119() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_3429() -> (Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64]) {
  %137 = fn () -> (Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64]) {
    %120 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %121 = cast(meta[relay.Constant][2] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
    %122 = reshape(%121, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
    %123 = @func_3131(%122) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) */;
    %124 = %123.2;
    %125 = cast(%124, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %126 = tan(%125) /* ty=Tensor[(1600), float64] */;
    %127 = cast(%124, dtype="bool") /* ty=Tensor[(1600), bool] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(1), int32] */;
    %129 = cast(%126, dtype="bool") /* ty=Tensor[(1600), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?), bool] */;
    %131 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %132 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
    %133 = %120.0;
    %134 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
    %135 = logical_and(%129, %130) /* ty=Tensor[(1600), bool] */;
    %136 = %131.0;
    (%132, %133, meta[relay.Constant][2] /* ty=Tensor[(1600), bool] */, %134, %135, %136)
  };
  %137() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64]) */
}

def @func_6380(%var_6379: Tensor[(9, 1, 13), float64]) -> (Tensor[(9, 1, 13), float64],) {
  %140 = fn (%var_6371: Tensor[(9, 1, 13), float64]) -> (Tensor[(9, 1, 13), float64],) {
    %138 = cast(%var_6371, dtype="float64") /* ty=Tensor[(9, 1, 13), float64] */;
    %139 = sqrt(%138) /* ty=Tensor[(9, 1, 13), float64] */;
    (%139,)
  };
  %140(%var_6379) /* ty=(Tensor[(9, 1, 13), float64],) */
}

def @func_5297(%var_5293: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64], Tensor[(1600), float64]) {
  %141 = cast(%var_5293, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %142 = reshape(%141, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %143 = @func_218(%142) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %144 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
  %145 = %143.0;
  (%144, %145, %var_5293)
}

def @func_7092() -> (Tensor[(14, 2, 6), float32],) {
  @func_7090() /* ty=(Tensor[(14, 2, 6), float32],) */
}

def @func_2203() -> (Tensor[(6, 5, 10), int64],) {
  %146 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %147 = %146.0;
  (%147,)
}

def @func_4953(%var_4947: Tensor[(7, 14, 16), float64]) -> (Tensor[(7, 14, 16), float32],) {
  %148 = cast(%var_4947, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %149 = tan(%148) /* ty=Tensor[(7, 14, 16), float64] */;
  %150 = cast(%var_4947, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %154 = floor_divide(%152, %153) /* ty=Tensor[(7, 14, 16), float32] */;
  (%154,)
}

def @func_3388() -> Tensor[(6, 5, 10), int64] {
  @func_3386() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_69(%var_67: Tensor[(10, 10, 16), float64]) -> (Tensor[(10, 10, 16), bool],) {
  @func_66(%var_67) /* ty=(Tensor[(10, 10, 16), bool],) */
}

def @func_6643() -> (Tensor[(6, 5, 10), int64],) {
  @func_6641() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_7605() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32]) {
  @func_7603() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32]) */
}

def @func_1784() -> Tensor[(6, 5, 10), float32] {
  %156 = fn () -> Tensor[(6, 5, 10), float32] {
    %155 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %155.0
  };
  %156() /* ty=Tensor[(6, 5, 10), float32] */
}

def @func_4260() -> (Tensor[(10, 10, 16), bool],) {
  @func_4258() /* ty=(Tensor[(10, 10, 16), bool],) */
}

def @func_220(%var_219: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) {
  %172 = fn (%var_175: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) {
    %157 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %158 = cast(%var_175, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %159 = reshape(%158, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
    %160 = @func_66(%159) /* ty=(Tensor[(10, 10, 16), bool],) */;
    %161 = cast(%var_175, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %162 = reshape(%161, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
    %163 = @func_66(%162) /* ty=(Tensor[(10, 10, 16), bool],) */;
    %164 = %163.0;
    %165 = cast(%164, dtype="int16") /* ty=Tensor[(10, 10, 16), int16] */;
    %166 = shape_of(%var_175, dtype="int32") /* ty=Tensor[(1), int32] */;
    %167 = cast(%var_175, dtype="int16") /* ty=Tensor[(1600), int16] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?), int16] */;
    %169 = %157.0;
    %170 = %160.0;
    %171 = maximum(%167, %168) /* ty=Tensor[(1600), int16] */;
    (%169, %170, %171)
  };
  %172(%var_219) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */
}

def @func_5540(%var_5538: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(7, 14, 16), float32]) {
  @func_5537(%var_5538) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(7, 14, 16), float32]) */
}

def @func_3209(%var_3205: Tensor[(4, 5, 16), uint64], %var_3206: Tensor[(495), uint64], %var_3207: Tensor[(1600), float64], %var_3208: Tensor[(1600), float64]) -> (Tensor[(4, 5, 16), uint64], Tensor[(15, 3, 11), int8], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(1600), float32]) {
  @func_3203(%var_3205, %var_3206, %var_3207, %var_3208) /* ty=(Tensor[(4, 5, 16), uint64], Tensor[(15, 3, 11), int8], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(1600), float32]) */
}

def @func_6725() -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) {
  %173 = @func_4258() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %174 = %173.0;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %176 = reshape(%175, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %177 = @func_66(%176) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %178 = %177.0;
  (%174, %178)
}

def @func_5813() -> (Tensor[(6, 5, 10), int8],) {
  %181 = fn () -> (Tensor[(6, 5, 10), int8],) {
    %179 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
    %180 = %179.0;
    (%180,)
  };
  %181() /* ty=(Tensor[(6, 5, 10), int8],) */
}

def @func_6180(%var_6178: Tensor[(50, 6), int8], %var_6179: Tensor[(50, 6), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(50, 6), uint32]) {
  %200 = fn (%var_6134: Tensor[(50, 6), int8], %var_6164: Tensor[(50, 6), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(50, 6), uint32]) {
    %182 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
    %183 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
    %184 = cast(%var_6134, dtype="int8") /* ty=Tensor[(50, 6), int8] */;
    %185 = reshape(%184, newshape=[300]) /* ty=Tensor[(300), int8] */;
    %186 = @func_4074(%185) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) */;
    %187 = cast(%var_6164, dtype="uint16") /* ty=Tensor[(50, 6), uint16] */;
    %188 = shape_of(%var_6134, dtype="int32") /* ty=Tensor[(2), int32] */;
    %189 = cast(%var_6134, dtype="uint16") /* ty=Tensor[(50, 6), uint16] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %191 = minimum(%189, %190) /* ty=Tensor[(50, 6), uint16] */;
    %192 = cast(%191, dtype="uint32") /* ty=Tensor[(50, 6), uint32] */;
    %193 = shape_of(%var_6134, dtype="int32") /* ty=Tensor[(2), int32] */;
    %194 = cast(%var_6134, dtype="uint32") /* ty=Tensor[(50, 6), uint32] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %196 = %182.0;
    %197 = %183.2;
    %198 = %186.1;
    %199 = multiply(%194, %195) /* ty=Tensor[(50, 6), uint32] */;
    (%196, %197, %198, %199)
  };
  %200(%var_6178, %var_6179) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(50, 6), uint32]) */
}

def @func_688() -> (Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) {
  %237 = fn () -> (Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) {
    %201 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %202 = %201.0;
    %203 = cast(%202, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
    %204 = cos(%203) /* ty=Tensor[(6, 5, 10), float64] */;
    %205 = cast(%202, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%204, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %209 = cast(%202, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
    %210 = cast(%204, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
    %211 = asin(%210) /* ty=Tensor[(6, 5, 10), float32] */;
    %212 = cast(meta[relay.Constant][3] /* ty=Tensor[(20, 80), float64] */, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
    %213 = reshape(%212, newshape=[20, 80]) /* ty=Tensor[(20, 80), float64] */;
    %214 = @func_296(%213) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) */;
    %215 = %214.0;
    %216 = cast(%215, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
    %217 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
    %218 = cast(%211, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %220 = cast(meta[relay.Constant][3] /* ty=Tensor[(20, 80), float64] */, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
    %221 = reshape(%220, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %222 = @func_218(%221) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
    %223 = cast(meta[relay.Constant][4] /* ty=Tensor[(55, 9), uint64] */, dtype="uint64") /* ty=Tensor[(55, 9), uint64] */;
    %224 = cast(meta[relay.Constant][4] /* ty=Tensor[(55, 9), uint64] */, dtype="uint64") /* ty=Tensor[(55, 9), uint64] */;
    %225 = %222.1;
    %226 = cast(%225, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
    %227 = cast(%225, dtype="int16") /* ty=Tensor[(10, 10, 16), int16] */;
    %228 = reshape(%223, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
    %229 = reshape(%224, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
    %230 = reshape(%226, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %231 = reshape(%227, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
    %232 = @func_412(%228, %229, %230, %231) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
    %233 = logical_and(%207, %208) /* ty=Tensor[(6, 5, 10), bool] */;
    %234 = acos(%209) /* ty=Tensor[(6, 5, 10), float32] */;
    %235 = minimum(%218, %219) /* ty=Tensor[(6, 5, 10), int8] */;
    %236 = %232.1;
    (%233, %234, meta[relay.Constant][3] /* ty=Tensor[(20, 80), float64] */, %235, %225, %236, meta[relay.Constant][4] /* ty=Tensor[(55, 9), uint64] */)
  };
  %237() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */
}

def @func_7776(%var_7771: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), float64] {
  %238 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %239 = %238.0;
  %240 = cast(%var_7771, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%242, %243) /* ty=Tensor[(6, 5, 10), float64] */
}

def @func_5005() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) {
  %249 = fn () -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) {
    %244 = @func_4466() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %245 = @func_3706() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) */;
    %246 = %244.0;
    %247 = %245.1;
    %248 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
    (%246, %247, %248)
  };
  %249() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) */
}

def @func_2079() -> (Tensor[(10, 10, 16), bool],) {
  @func_2077() /* ty=(Tensor[(10, 10, 16), bool],) */
}

def @func_6408(%var_6406: Tensor[(16, 15, 9), float32]) -> (Tensor[(16, 15, 9), float32],) {
  @func_6405(%var_6406) /* ty=(Tensor[(16, 15, 9), float32],) */
}

def @func_1141() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */
}

def @func_120() -> (Tensor[(6, 5, 10), int64],) {
  %250 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %251 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %254 = bitwise_xor(%252, %253) /* ty=Tensor[(6, 5, 10), int64] */;
  (%254,)
}

def @func_2219() -> (Tensor[(10, 10, 16), bool],) {
  @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */
}

def @func_2971(%var_2968: Tensor[(5, 9, 14), int32], %var_2969: Tensor[(5, 9, 14), int32], %var_2970: Tensor[(5, 9, 14), int32]) -> (Tensor[(5, 9, 14), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) {
  @func_2966(%var_2968, %var_2969, %var_2970) /* ty=(Tensor[(5, 9, 14), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) */
}

def @func_3386() -> Tensor[(6, 5, 10), int64] {
  %255 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %255.0
}

def @func_3639() -> (Tensor[(6, 5, 10), bool],) {
  %256 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
  %257 = %256.0;
  (%257,)
}

def @func_971() -> Tensor[(10, 10, 16), bool] {
  %258 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %258.1
}

def @func_5689() -> Tensor[(10, 10, 16), bool] {
  %259 = fn () -> Tensor[(10, 10, 16), bool] {
    @func_1231() /* ty=Tensor[(10, 10, 16), bool] */
  };
  %259() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_8537() -> (Tensor[(10, 10, 16), bool],) {
  @func_8535() /* ty=(Tensor[(10, 10, 16), bool],) */
}

def @func_1467(%var_1466: Tensor[(15, 7, 13), float64]) -> Tensor[(15, 7, 13), float64] {
  %261 = fn (%var_1459: Tensor[(15, 7, 13), float64]) -> Tensor[(15, 7, 13), float64] {
    %260 = cast(%var_1459, dtype="float64") /* ty=Tensor[(15, 7, 13), float64] */;
    asinh(%260) /* ty=Tensor[(15, 7, 13), float64] */
  };
  %261(%var_1466) /* ty=Tensor[(15, 7, 13), float64] */
}

def @func_5511() -> (Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) {
  @func_5509() /* ty=(Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) */
}

def @func_7829() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(300), int64]) {
  %262 = cast(meta[relay.Constant][7] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
  %263 = reshape(%262, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int64] */;
  %264 = @func_5688() /* ty=Tensor[(10, 10, 16), bool] */;
  %265 = @func_1963(%263) /* ty=Tensor[(6, 5, 10), float64] */;
  (%264, %265, meta[relay.Constant][7] /* ty=Tensor[(300), int64] */)
}

def @func_3608(%var_3597: Tensor[(3, 13, 11), float64], %var_3601: Tensor[(1600), float64], %var_3605: Tensor[(495), uint64]) -> (Tensor[(3, 13, 11), float64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(495), uint64]) {
  %266 = cast(%var_3597, dtype="float64") /* ty=Tensor[(3, 13, 11), float64] */;
  %267 = cast(%var_3601, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %268 = reshape(%267, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %269 = @func_66(%268) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %270 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %271 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %272 = cast(%var_3601, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %273 = cast(%var_3601, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %274 = reshape(%270, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %275 = reshape(%271, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
  %276 = reshape(%272, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %277 = reshape(%273, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %278 = @func_412(%274, %275, %276, %277) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %279 = tan(%266) /* ty=Tensor[(3, 13, 11), float64] */;
  %280 = %269.0;
  %281 = %278.1;
  (%279, %280, %var_3601, %281, %var_3605)
}

def @func_6255(%var_6248: Tensor[(10, 16, 1), int32], %var_6249: Tensor[(10, 16, 14), int32]) -> Tensor[(10, 16, 14), int32] {
  %282 = cast(%var_6248, dtype="int32") /* ty=Tensor[(10, 16, 1), int32] */;
  %283 = cast(%var_6249, dtype="int32") /* ty=Tensor[(10, 16, 14), int32] */;
  bitwise_and(%282, %283) /* ty=Tensor[(10, 16, 14), int32] */
}

def @func_2876(%var_2840: Tensor[(6, 3, 11), float32]) -> Tensor[(6, 3, 11), float64] {
  %284 = cast(%var_2840, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
  %285 = atan(%284) /* ty=Tensor[(6, 3, 11), float32] */;
  %286 = cast(%285, dtype="int32") /* ty=Tensor[(6, 3, 11), int32] */;
  %287 = shape_of(%var_2840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_2840, dtype="int32") /* ty=Tensor[(6, 3, 11), int32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %290 = maximum(%288, %289) /* ty=Tensor[(6, 3, 11), int32] */;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(6, 3, 11), float64] */;
  atanh(%291) /* ty=Tensor[(6, 3, 11), float64] */
}

def @func_5537(%var_5523: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(7, 14, 16), float32]) {
  %292 = @func_1841() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %293 = cast(%var_5523, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %294 = reshape(%293, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %295 = @func_4953(%294) /* ty=(Tensor[(7, 14, 16), float32],) */;
  %296 = %295.0;
  %297 = cast(%var_5523, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %301 = %292.0;
  %302 = minimum(%299, %300) /* ty=Tensor[(7, 14, 16), float32] */;
  (%301, %302)
}

def @func_1085() -> (Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  %306 = fn () -> (Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
    %303 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
    %304 = @func_971() /* ty=Tensor[(10, 10, 16), bool] */;
    %305 = %303.2;
    (%304, %305)
  };
  %306() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */
}

def @func_8846() -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) {
  %311 = fn () -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) {
    %307 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
    %308 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %309 = %307.0;
    %310 = %308.0;
    (%309, %310)
  };
  %311() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) */
}

def @func_122() -> (Tensor[(6, 5, 10), int64],) {
  @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_1564(%var_1563: Tensor[(330), uint8]) -> (Tensor[(10, 10, 16), bool], Tensor[(10, 11, 3), bool], uint8, Tensor[(330), uint8], Tensor[(6, 5, 10), int64]) {
  %319 = fn (%var_1548: Tensor[(330), uint8]) -> (Tensor[(10, 10, 16), bool], Tensor[(10, 11, 3), bool], uint8, Tensor[(330), uint8], Tensor[(6, 5, 10), int64]) {
    %312 = cast(meta[relay.Constant][8] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %313 = cast(%var_1548, dtype="uint8") /* ty=Tensor[(330), uint8] */;
    %314 = reshape(%312, newshape=[]) /* ty=uint8 */;
    %315 = reshape(%313, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint8] */;
    %316 = @func_1231() /* ty=Tensor[(10, 10, 16), bool] */;
    %317 = @func_1013(%314, %315) /* ty=Tensor[(10, 11, 3), bool] */;
    %318 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
    (%316, %317, meta[relay.Constant][8] /* ty=uint8 */, %var_1548, %318)
  };
  %319(%var_1563) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 11, 3), bool], uint8, Tensor[(330), uint8], Tensor[(6, 5, 10), int64]) */
}

def @func_1651() -> Tensor[(6, 5, 10), int64] {
  %320 = fn () -> Tensor[(6, 5, 10), int64] {
    @func_482() /* ty=Tensor[(6, 5, 10), int64] */
  };
  %320() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_4447(%var_4446: Tensor[(192), uint64]) -> (Tensor[(14, 2, 6), int16], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64]) {
  %327 = fn (%var_4443: Tensor[(192), uint64]) -> (Tensor[(14, 2, 6), int16], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64]) {
    %321 = @func_4237() /* ty=(Tensor[(14, 2, 6), int16],) */;
    %322 = cast(%var_4443, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %323 = reshape(%322, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), uint64] */;
    %324 = @func_2785(%323) /* ty=(Tensor[(12, 8, 2), uint64],) */;
    %325 = %321.0;
    %326 = %324.0;
    (%325, %326, %var_4443)
  };
  %327(%var_4446) /* ty=(Tensor[(14, 2, 6), int16], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64]) */
}

def @func_6641() -> (Tensor[(6, 5, 10), int64],) {
  %328 = @func_5354() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
  %329 = %328.3;
  (%329,)
}

def @func_4018() -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), uint64]) {
  @func_4016() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), uint64]) */
}

def @func_8434() -> (Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %338 = fn () -> (Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
    %330 = @func_3686() /* ty=(Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) */;
    %331 = %330.1;
    %332 = cast(%331, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
    %333 = reshape(%332, newshape=[300]) /* ty=Tensor[(300), int64] */;
    %334 = @func_2592(%333) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) */;
    %335 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %336 = %334.0;
    %337 = %335.0;
    (%331, %336, %337)
  };
  %338() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */
}

def @func_4640() -> (Tensor[(6, 5, 10), float32],) {
  %339 = @func_1783() /* ty=Tensor[(6, 5, 10), float32] */;
  (%339,)
}

def @func_2217() -> (Tensor[(10, 10, 16), bool],) {
  %340 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
  (%340,)
}

def @func_4467() -> (Tensor[(6, 5, 10), float32],) {
  %343 = fn () -> (Tensor[(6, 5, 10), float32],) {
    %341 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
    %342 = %341.0;
    (%342,)
  };
  %343() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_1448(%var_1447: Tensor[(6, 5, 10), int64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) {
  %364 = fn (%var_1441: Tensor[(6, 5, 10), int64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) {
    %344 = @func_971() /* ty=Tensor[(10, 10, 16), bool] */;
    %345 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 10, 16), bool] */, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
    %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%344, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %349 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
    %350 = %349.1;
    %351 = cast(%350, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
    %352 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %353 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %354 = %353.0;
    %355 = cast(%var_1441, dtype="uint64") /* ty=Tensor[(6, 5, 10), uint64] */;
    %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%354, dtype="uint64") /* ty=Tensor[(6, 5, 10), uint64] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %359 = logical_or(%347, %348) /* ty=Tensor[(10, 10, 16), bool] */;
    %360 = sqrt(%351) /* ty=Tensor[(6, 5, 10), float32] */;
    %361 = %352.0;
    %362 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
    %363 = bitwise_and(%357, %358) /* ty=Tensor[(6, 5, 10), uint64] */;
    (%359, %360, %361, %362, %363)
  };
  %364(%var_1447) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) */
}

def @func_5194(%var_5157: Tensor[(10, 5, 5), uint32], %var_5175: Tensor[(1600), float64]) -> (Tensor[(10, 5, 5), uint32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 5, 5), float64], Tensor[(6, 5, 10), int64]) {
  %365 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 5, 5), uint32] */, dtype="uint32") /* ty=Tensor[(10, 5, 5), uint32] */;
  %366 = shape_of(%var_5157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_5157, dtype="uint32") /* ty=Tensor[(10, 5, 5), uint32] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %369 = cast(%var_5175, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %370 = reshape(%369, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %371 = @func_66(%370) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %372 = @func_1790() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %373 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 5, 5), uint32] */, dtype="float64") /* ty=Tensor[(10, 5, 5), float64] */;
  %374 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %375 = bitwise_xor(%367, %368) /* ty=Tensor[(10, 5, 5), uint32] */;
  %376 = %371.0;
  %377 = %372.0;
  %378 = log2(%373) /* ty=Tensor[(10, 5, 5), float64] */;
  %379 = %374.0;
  (%375, %376, %var_5175, %377, %378, %379)
}

def @func_2205() -> (Tensor[(6, 5, 10), int64],) {
  @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_6818() -> (Tensor[(8, 8, 13), float32], Tensor[(8, 8, 13), float32]) {
  %389 = fn () -> (Tensor[(8, 8, 13), float32], Tensor[(8, 8, 13), float32]) {
    %380 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
    %381 = atanh(%380) /* ty=Tensor[(8, 8, 13), float64] */;
    %382 = cast(%381, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
    %383 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
    %384 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%381, dtype="float32") /* ty=Tensor[(8, 8, 13), float32] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %387 = sin(%382) /* ty=Tensor[(8, 8, 13), float32] */;
    %388 = floor_divide(%385, %386) /* ty=Tensor[(8, 8, 13), float32] */;
    (%387, %388)
  };
  %389() /* ty=(Tensor[(8, 8, 13), float32], Tensor[(8, 8, 13), float32]) */
}

def @func_3064(%var_3062: Tensor[(16, 7, 15), int32], %var_3063: Tensor[(16, 7, 15), int32]) -> (Tensor[(16, 7, 15), int32],) {
  @func_3060(%var_3062, %var_3063) /* ty=(Tensor[(16, 7, 15), int32],) */
}

def @func_718() -> (Tensor[(6, 5, 10), int64],) {
  %392 = fn () -> (Tensor[(6, 5, 10), int64],) {
    %390 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %391 = %390.0;
    (%391,)
  };
  %392() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_4279() -> Tensor[(14, 2, 6), float32] {
  %394 = fn () -> Tensor[(14, 2, 6), float32] {
    %393 = @func_2091() /* ty=(Tensor[(14, 2, 6), float32],) */;
    %393.0
  };
  %394() /* ty=Tensor[(14, 2, 6), float32] */
}

def @func_2092() -> (Tensor[(14, 2, 6), float32],) {
  %396 = fn () -> (Tensor[(14, 2, 6), float32],) {
    %395 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
    (%395,)
  };
  %396() /* ty=(Tensor[(14, 2, 6), float32],) */
}

def @func_3348() -> (Tensor[(6, 5, 10), int64],) {
  @func_3346() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_1670() -> (Tensor[(6, 5, 10), float32],) {
  %397 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %398 = %397.0;
  (%398,)
}

def @func_5509() -> (Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) {
  %399 = @func_4237() /* ty=(Tensor[(14, 2, 6), int16],) */;
  %400 = %399.0;
  %401 = @func_971() /* ty=Tensor[(10, 10, 16), bool] */;
  (%400, %401)
}

def @func_4861(%var_4860: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), bool],) {
  %409 = fn (%var_4847: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), bool],) {
    %402 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
    %403 = %402.4;
    %404 = cast(%var_4847, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
    %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %406 = cast(%403, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %408 = logical_and(%406, %407) /* ty=Tensor[(10, 10, 16), bool] */;
    (%408,)
  };
  %409(%var_4860) /* ty=(Tensor[(10, 10, 16), bool],) */
}

def @func_1233() -> Tensor[(10, 10, 16), bool] {
  @func_1231() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_1139() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %410 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
  %411 = %410.4;
  %412 = cast(%411, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %413 = reshape(%412, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %414 = @func_218(%413) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %415 = %414.0;
  (%411, %415)
}

def @func_5945() -> (Tensor[(14, 2, 6), float32],) {
  %416 = @func_3779() /* ty=Tensor[(14, 2, 6), float32] */;
  (%416,)
}

def @func_7509(%var_7507: Tensor[(14, 2, 6), float32]) -> Tensor[(14, 2, 6), float64] {
  @func_7506(%var_7507) /* ty=Tensor[(14, 2, 6), float64] */
}

def @func_2511() -> (Tensor[(6, 5, 10), int8],) {
  @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */
}

def @func_1843() -> (Tensor[(10, 10, 16), bool],) {
  @func_1841() /* ty=(Tensor[(10, 10, 16), bool],) */
}

def @func_418(%var_414: Tensor[(15, 3, 11), uint64], %var_415: Tensor[(15, 3, 11), uint64], %var_416: Tensor[(1600), float64], %var_417: Tensor[(1600), int16]) -> (Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  @func_412(%var_414, %var_415, %var_416, %var_417) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */
}

def @func_6709() -> (Tensor[(6, 5, 10), int64],) {
  %419 = fn () -> (Tensor[(6, 5, 10), int64],) {
    %417 = @func_5004() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) */;
    %418 = %417.1;
    (%418,)
  };
  %419() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_7831() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(300), int64]) {
  @func_7829() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(300), int64]) */
}

def @func_5660(%var_5627: Tensor[(6, 5, 10), float32], %var_5636: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), bool], Tensor[(1600), float64], Tensor[(1600), float32], Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float32]) {
  %420 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %421 = %420.0;
  %422 = cast(%var_5627, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %426 = cast(%var_5636, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %427 = reshape(%426, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %428 = @func_5600(%427) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) */;
  %429 = %428.1;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %431 = @func_2645() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %432 = @func_4640() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %433 = cast(%var_5636, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %434 = reshape(%433, newshape=[20, 80]) /* ty=Tensor[(20, 80), float64] */;
  %435 = @func_296(%434) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) */;
  %436 = less(%424, %425) /* ty=Tensor[(6, 5, 10), bool] */;
  %437 = rsqrt(%430) /* ty=Tensor[(1600), float32] */;
  %438 = %431.0;
  %439 = %432.0;
  %440 = %435.2;
  (%436, %var_5636, %437, %438, %439, %440)
}

def @func_2335() -> Tensor[(6, 5, 10), float32] {
  %441 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %441.0
}

def @func_8640(%var_8619: Tensor[(250), uint32], %var_8620: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(11, 15, 4), uint32], Tensor[(110, 6), float64], Tensor[(250), uint32], Tensor[(250), uint32], Tensor[(1568), float64]) {
  %442 = cast(meta[relay.Constant][12] /* ty=Tensor[(110, 6), float64] */, dtype="float64") /* ty=Tensor[(110, 6), float64] */;
  %443 = reshape(%442, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float64] */;
  %444 = cast(%var_8619, dtype="uint32") /* ty=Tensor[(250), uint32] */;
  %445 = cast(%var_8620, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %446 = reshape(%444, newshape=[250]) /* ty=Tensor[(250), uint32] */;
  %447 = reshape(%445, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %448 = @func_6613(%446, %447) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(198), float64], Tensor[(10, 5, 5), float64], Tensor[(250), uint32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(1568), float64], Tensor[(6, 5, 10), int8]) */;
  %449 = @func_6738() /* ty=Tensor[(10, 10, 16), bool] */;
  %450 = @func_8080(%443) /* ty=Tensor[(11, 15, 4), uint32] */;
  %451 = %448.3;
  (%449, %450, meta[relay.Constant][12] /* ty=Tensor[(110, 6), float64] */, %451, %var_8619, %var_8620)
}

def @func_6727() -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) {
  @func_6725() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) */
}

def @func_7266() -> Tensor[(10, 10, 16), bool] {
  @func_7264() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_7415() -> (Tensor[(14, 2, 6), float32],) {
  %454 = fn () -> (Tensor[(14, 2, 6), float32],) {
    %452 = @func_2091() /* ty=(Tensor[(14, 2, 6), float32],) */;
    %453 = %452.0;
    (%453,)
  };
  %454() /* ty=(Tensor[(14, 2, 6), float32],) */
}

def @func_7950() -> Tensor[(6, 5, 10), int64] {
  %455 = fn () -> Tensor[(6, 5, 10), int64] {
    @func_1650() /* ty=Tensor[(6, 5, 10), int64] */
  };
  %455() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_4956(%var_4954: Tensor[(7, 14, 16), float64]) -> (Tensor[(7, 14, 16), float32],) {
  @func_4953(%var_4954) /* ty=(Tensor[(7, 14, 16), float32],) */
}

def @func_4768(%var_4765: Tensor[(1365), float64], %var_4766: Tensor[(15, 7, 13), float64], %var_4767: Tensor[(1365), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) {
  %471 = fn (%var_4742: Tensor[(1365), float64], %var_4746: Tensor[(15, 7, 13), float64], %var_4754: Tensor[(1365), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) {
    %456 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %457 = cast(%var_4742, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %458 = reshape(%457, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
    %459 = @func_1465(%458) /* ty=Tensor[(15, 7, 13), float64] */;
    %460 = cast(%var_4746, dtype="float64") /* ty=Tensor[(15, 7, 13), float64] */;
    %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%459, dtype="float64") /* ty=Tensor[(15, 7, 13), float64] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %464 = cast(%var_4754, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %465 = shape_of(%var_4742, dtype="int32") /* ty=Tensor[(1), int32] */;
    %466 = cast(%var_4742, dtype="float64") /* ty=Tensor[(1365), float64] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?), float64] */;
    %468 = %456.0;
    %469 = floor_divide(%462, %463) /* ty=Tensor[(15, 7, 13), float64] */;
    %470 = maximum(%466, %467) /* ty=Tensor[(1365), float64] */;
    (%468, %469, %470)
  };
  %471(%var_4765, %var_4766, %var_4767) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) */
}

def @func_7906(%var_7904: Tensor[(1600), bool], %var_7905: Tensor[(1600), bool]) -> (Tensor[(14, 2, 6), float64], Tensor[(14, 2, 6), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), bool]) {
  @func_7902(%var_7904, %var_7905) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(14, 2, 6), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), bool]) */
}

def @func_7365() -> (Tensor[(6, 5, 10), float32], Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) {
  %485 = fn () -> (Tensor[(6, 5, 10), float32], Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) {
    %472 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %473 = @func_3428() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64], Tensor[(1600), bool], Tensor[(6, 5, 10), int64]) */;
    %474 = %473.0;
    %475 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 2, 6), float32] */, dtype="uint8") /* ty=Tensor[(14, 2, 6), uint8] */;
    %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%474, dtype="uint8") /* ty=Tensor[(14, 2, 6), uint8] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %479 = add(%477, %478) /* ty=Tensor[(14, 2, 6), uint8] */;
    %480 = cast(%479, dtype="float32") /* ty=Tensor[(14, 2, 6), float32] */;
    %481 = @func_3849() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %482 = %472.0;
    %483 = cosh(%480) /* ty=Tensor[(14, 2, 6), float32] */;
    %484 = %481.0;
    (%482, %483, %484)
  };
  %485() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */
}

def @func_3462(%var_3454: Tensor[(495), uint64]) -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64]) {
  %486 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %487 = @func_2203() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %488 = %486.0;
  %489 = cast(%488, dtype="int64") /* ty=Tensor[(6, 5, 10), int64] */;
  %490 = reshape(%489, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int64] */;
  %491 = @func_1446(%490) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) */;
  %492 = cast(%var_3454, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %493 = %491.0;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %495 = reshape(%492, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %496 = reshape(%494, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %497 = @func_559(%495, %496) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %498 = @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %499 = %487.0;
  %500 = %497.7;
  %501 = %498.0;
  (%488, %499, %493, %500, %var_3454, %501)
}

def @func_1817() -> Tensor[(14, 2, 6), float32] {
  @func_1815() /* ty=Tensor[(14, 2, 6), float32] */
}

def @func_296(%var_281: Tensor[(20, 80), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) {
  %502 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %503 = cast(%var_281, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %504 = reshape(%503, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %505 = @func_66(%504) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %506 = %505.0;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %508 = reshape(%507, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %509 = @func_218(%508) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %510 = cast(%506, dtype="float32") /* ty=Tensor[(10, 10, 16), float32] */;
  %511 = shape_of(%var_281, dtype="int32") /* ty=Tensor[(2), int32] */;
  %512 = cast(%var_281, dtype="float32") /* ty=Tensor[(20, 80), float32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %514 = %502.0;
  %515 = %509.1;
  %516 = power(%512, %513) /* ty=Tensor[(20, 80), float32] */;
  (%514, %515, %516)
}

def @func_6515() -> (Tensor[(6, 5, 10), float32],) {
  %519 = fn () -> (Tensor[(6, 5, 10), float32],) {
    %517 = @func_6284() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %518 = %517.0;
    (%518,)
  };
  %519() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_8710() -> Tensor[(10, 10, 16), bool] {
  @func_7264() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_563(%var_561: Tensor[(495), uint64], %var_562: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) {
  @func_559(%var_561, %var_562) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */
}

def @func_2879(%var_2877: Tensor[(6, 3, 11), float32]) -> Tensor[(6, 3, 11), float64] {
  @func_2876(%var_2877) /* ty=Tensor[(6, 3, 11), float64] */
}

def @func_4159() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64]) {
  %530 = fn () -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64]) {
    %520 = @func_3849() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %521 = %520.0;
    %522 = cast(%521, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
    %523 = reshape(%522, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int8] */;
    %524 = @func_3294(%523) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */;
    %525 = @func_3849() /* ty=(Tensor[(6, 5, 10), float32],) */;
    %526 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
    %527 = %524.1;
    %528 = %525.0;
    %529 = %526.1;
    (%521, %527, %528, %529)
  };
  %530() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64]) */
}

def @func_3465(%var_3463: Tensor[(495), uint64]) -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64]) {
  @func_3462(%var_3463) /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64]) */
}

def @func_299(%var_297: Tensor[(20, 80), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) {
  @func_296(%var_297) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(20, 80), float32]) */
}

def @func_7264() -> Tensor[(10, 10, 16), bool] {
  %531 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %531.4
}

def @func_5300(%var_5298: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64], Tensor[(1600), float64]) {
  @func_5297(%var_5298) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64], Tensor[(1600), float64]) */
}

def @func_2160() -> (Tensor[(14, 2, 6), float32],) {
  %532 = @func_2091() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %533 = %532.0;
  (%533,)
}

def @func_6405(%var_6401: Tensor[(16, 15, 9), float32]) -> (Tensor[(16, 15, 9), float32],) {
  %534 = cast(%var_6401, dtype="float32") /* ty=Tensor[(16, 15, 9), float32] */;
  %535 = log10(%534) /* ty=Tensor[(16, 15, 9), float32] */;
  (%535,)
}

def @func_5198(%var_5196: Tensor[(10, 5, 5), uint32], %var_5197: Tensor[(1600), float64]) -> (Tensor[(10, 5, 5), uint32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 5, 5), float64], Tensor[(6, 5, 10), int64]) {
  @func_5194(%var_5196, %var_5197) /* ty=(Tensor[(10, 5, 5), uint32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 5, 5), float64], Tensor[(6, 5, 10), int64]) */
}

def @func_2162() -> (Tensor[(14, 2, 6), float32],) {
  @func_2160() /* ty=(Tensor[(14, 2, 6), float32],) */
}

def @func_1672() -> (Tensor[(6, 5, 10), float32],) {
  @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_2077() -> (Tensor[(10, 10, 16), bool],) {
  %536 = @func_1841() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %537 = %536.0;
  (%537,)
}

def @func_5380() -> (Tensor[(495), uint64],) {
  @func_5378() /* ty=(Tensor[(495), uint64],) */
}

def @func_8535() -> (Tensor[(10, 10, 16), bool],) {
  %538 = @func_6738() /* ty=Tensor[(10, 10, 16), bool] */;
  (%538,)
}

def @func_8932(%var_8924: Tensor[(15, 13, 13), uint64], %var_8925: Tensor[(15, 13, 13), uint64]) -> Tensor[(15, 13, 13), uint64] {
  %539 = cast(%var_8925, dtype="uint64") /* ty=Tensor[(15, 13, 13), uint64] */;
  %540 = shape_of(%var_8924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_8924, dtype="uint64") /* ty=Tensor[(15, 13, 13), uint64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%541, %542) /* ty=Tensor[(15, 13, 13), uint64] */
}

def @func_4237() -> (Tensor[(14, 2, 6), int16],) {
  %543 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %545 = sin(%544) /* ty=Tensor[(14, 2, 6), float64] */;
  %546 = cast(%545, dtype="int16") /* ty=Tensor[(14, 2, 6), int16] */;
  %547 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%543, dtype="int16") /* ty=Tensor[(14, 2, 6), int16] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %550 = bitwise_and(%548, %549) /* ty=Tensor[(14, 2, 6), int16] */;
  (%550,)
}

def @func_1965(%var_1964: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), float64] {
  %556 = fn (%var_1949: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), float64] {
    %551 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
    %552 = cast(%var_1949, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
    %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%551, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%554, %555) /* ty=Tensor[(6, 5, 10), float64] */
  };
  %556(%var_1964) /* ty=Tensor[(6, 5, 10), float64] */
}

def @func_1016(%var_1014: uint8, %var_1015: Tensor[(10, 11, 3), uint8]) -> Tensor[(10, 11, 3), bool] {
  %559 = fn (%var_996: uint8, %var_997: Tensor[(10, 11, 3), uint8]) -> Tensor[(10, 11, 3), bool] {
    %557 = cast(%var_996, dtype="bool") /* ty=bool */;
    %558 = cast(%var_997, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
    equal(%557, %558) /* ty=Tensor[(10, 11, 3), bool] */
  };
  %559(%var_1014, %var_1015) /* ty=Tensor[(10, 11, 3), bool] */
}

def @func_4076(%var_4075: Tensor[(300), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) {
  %570 = fn (%var_4065: Tensor[(300), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) {
    %560 = @func_1841() /* ty=(Tensor[(10, 10, 16), bool],) */;
    %561 = %560.0;
    %562 = cast(%561, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
    %563 = reshape(%562, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
    %564 = @func_3131(%563) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) */;
    %565 = cast(%var_4065, dtype="int8") /* ty=Tensor[(300), int8] */;
    %566 = reshape(%565, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int8] */;
    %567 = @func_3294(%566) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */;
    %568 = %564.1;
    %569 = %567.3;
    (%561, %568, %569, %var_4065)
  };
  %570(%var_4075) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) */
}

def @func_1616(%var_1614: Tensor[(495), uint64], %var_1615: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(495), uint64], Tensor[(1600), float64]) {
  %583 = fn (%var_1601: Tensor[(495), uint64], %var_1602: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(495), uint64], Tensor[(1600), float64]) {
    %571 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
    %572 = cast(%var_1601, dtype="uint64") /* ty=Tensor[(495), uint64] */;
    %573 = cast(%var_1601, dtype="uint64") /* ty=Tensor[(495), uint64] */;
    %574 = cast(%var_1602, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %575 = cast(%var_1602, dtype="int16") /* ty=Tensor[(1600), int16] */;
    %576 = reshape(%572, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
    %577 = reshape(%573, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), uint64] */;
    %578 = reshape(%574, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %579 = reshape(%575, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
    %580 = @func_412(%576, %577, %578, %579) /* ty=(Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
    %581 = %571.1;
    %582 = %580.4;
    (%581, %582, %var_1601, %var_1602)
  };
  %583(%var_1614, %var_1615) /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(495), uint64], Tensor[(1600), float64]) */
}

def @func_5664(%var_5662: Tensor[(6, 5, 10), float32], %var_5663: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), bool], Tensor[(1600), float64], Tensor[(1600), float32], Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float32]) {
  @func_5660(%var_5662, %var_5663) /* ty=(Tensor[(6, 5, 10), bool], Tensor[(1600), float64], Tensor[(1600), float32], Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float32]) */
}

def @func_3707() -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) {
  %588 = fn () -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) {
    %584 = @func_2645() /* ty=(Tensor[(6, 5, 10), int8],) */;
    %585 = @func_3346() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %586 = %584.0;
    %587 = %585.0;
    (%586, %587)
  };
  %588() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64]) */
}

def @func_849() -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */
}

def @func_6942(%var_6940: Tensor[(2, 4, 11), float32]) -> (Tensor[(2, 4, 11), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) {
  @func_6939(%var_6940) /* ty=(Tensor[(2, 4, 11), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */
}

def @func_5750() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), bool]) {
  %589 = @func_5509() /* ty=(Tensor[(14, 2, 6), int16], Tensor[(10, 10, 16), bool]) */;
  %590 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %591 = %590.2;
  %592 = %589.1;
  %593 = cast(%592, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %594 = reshape(%593, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %595 = @func_5600(%594) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %598 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%591, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = greater_equal(%599, %600) /* ty=Tensor[(6, 5, 10), bool] */;
  (%592, %601)
}

def @func_6285() -> (Tensor[(6, 5, 10), float32],) {
  %603 = fn () -> (Tensor[(6, 5, 10), float32],) {
    %602 = @func_1783() /* ty=Tensor[(6, 5, 10), float32] */;
    (%602,)
  };
  %603() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_483() -> Tensor[(6, 5, 10), int64] {
  %605 = fn () -> Tensor[(6, 5, 10), int64] {
    %604 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %604.0
  };
  %605() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_6692() -> Tensor[(6, 5, 10), float32] {
  @func_6690() /* ty=Tensor[(6, 5, 10), float32] */
}

def @func_2966(%var_2910: Tensor[(5, 9, 14), int32], %var_2911: Tensor[(5, 9, 14), int32], %var_2915: Tensor[(5, 9, 14), int32]) -> (Tensor[(5, 9, 14), int32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool]) {
  %606 = cast(%var_2911, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %607 = shape_of(%var_2910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%var_2910, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %610 = add(%608, %609) /* ty=Tensor[(5, 9, 14), int32] */;
  %611 = cast(%var_2915, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="int32") /* ty=Tensor[(5, 9, 14), int32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %615 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %616 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %617 = @func_2077() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %618 = bitwise_xor(%613, %614) /* ty=Tensor[(5, 9, 14), int32] */;
  %619 = %615.0;
  %620 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
  %621 = %616.0;
  %622 = %617.0;
  (%618, %619, %620, %621, %622)
}

def @func_5427(%var_5401: Tensor[(15, 5, 6), float32], %var_5407: Tensor[(1365), float64]) -> (Tensor[(15, 5, 6), bool], Tensor[(1365), float64], Tensor[(1365), float64]) {
  %623 = cast(%var_5401, dtype="bool") /* ty=Tensor[(15, 5, 6), bool] */;
  %624 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(15, 5, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 5, 6), float32] */, dtype="bool") /* ty=Tensor[(15, 5, 6), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %627 = cast(%var_5407, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %628 = cast(%var_5407, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %629 = cast(%var_5407, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %630 = reshape(%627, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %631 = reshape(%628, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
  %632 = reshape(%629, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %633 = @func_4764(%630, %631, %632) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) */;
  %634 = equal(%625, %626) /* ty=Tensor[(15, 5, 6), bool] */;
  %635 = %633.2;
  (%634, %635, %var_5407)
}

def @func_1850() -> Tensor[(10, 10, 16), bool] {
  %637 = fn () -> Tensor[(10, 10, 16), bool] {
    %636 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
    %636.0
  };
  %637() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_7286() -> (Tensor[(10, 10, 16), bool], Tensor[(14, 2, 6), float32]) {
  %640 = fn () -> (Tensor[(10, 10, 16), bool], Tensor[(14, 2, 6), float32]) {
    %638 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
    %639 = @func_3779() /* ty=Tensor[(14, 2, 6), float32] */;
    (%638, %639)
  };
  %640() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(14, 2, 6), float32]) */
}

def @func_8183() -> Tensor[(14, 2, 6), float32] {
  %642 = fn () -> Tensor[(14, 2, 6), float32] {
    %641 = @func_7704() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */;
    %641.0
  };
  %642() /* ty=Tensor[(14, 2, 6), float32] */
}

def @func_6309() -> (Tensor[(2, 2, 12), float64], Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64]) {
  %643 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
  %644 = cast(meta[relay.Constant][16] /* ty=Tensor[(20, 80), float64] */, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %645 = reshape(%644, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %646 = @func_218(%645) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %647 = sqrt(%643) /* ty=Tensor[(2, 2, 12), float64] */;
  %648 = %646.0;
  (%647, %648, meta[relay.Constant][16] /* ty=Tensor[(20, 80), float64] */)
}

def @func_4725(%var_4724: Tensor[(14, 2, 6), float32]) -> (Tensor[(10, 10, 16), bool], Tensor[(300), int64], Tensor[(14, 2, 6), float64], Tensor[(20, 80), float64], Tensor[(14, 2, 6), float32]) {
  %668 = fn (%var_4674: Tensor[(14, 2, 6), float32]) -> (Tensor[(10, 10, 16), bool], Tensor[(300), int64], Tensor[(14, 2, 6), float64], Tensor[(20, 80), float64], Tensor[(14, 2, 6), float32]) {
    %649 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
    %650 = reshape(%649, newshape=[300]) /* ty=Tensor[(300), int64] */;
    %651 = @func_2592(%650) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) */;
    %652 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
    %653 = cast(%var_4674, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
    %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %655 = cast(%652, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
    %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %657 = power(%655, %656) /* ty=Tensor[(14, 2, 6), float64] */;
    %658 = cast(%657, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
    %659 = sinh(%658) /* ty=Tensor[(14, 2, 6), float64] */;
    %660 = cast(%659, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
    %661 = log10(%660) /* ty=Tensor[(14, 2, 6), float64] */;
    %662 = cast(%661, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
    %663 = @func_687() /* ty=(Tensor[(6, 5, 10), bool], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float64], Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(55, 9), uint64]) */;
    %664 = %651.0;
    %665 = log2(%662) /* ty=Tensor[(14, 2, 6), float64] */;
    %666 = %663.2;
    %667 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
    (%664, meta[relay.Constant][17] /* ty=Tensor[(300), int64] */, %665, %666, %667)
  };
  %668(%var_4724) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(300), int64], Tensor[(14, 2, 6), float64], Tensor[(20, 80), float64], Tensor[(14, 2, 6), float32]) */
}

def @func_3592() -> Tensor[(10, 10, 16), bool] {
  @func_3590() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_4239() -> (Tensor[(14, 2, 6), int16],) {
  @func_4237() /* ty=(Tensor[(14, 2, 6), int16],) */
}

def @func_6740() -> Tensor[(10, 10, 16), bool] {
  @func_6738() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_4642() -> (Tensor[(6, 5, 10), float32],) {
  @func_4640() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_4886() -> Tensor[(6, 5, 10), int64] {
  %670 = fn () -> Tensor[(6, 5, 10), int64] {
    %669 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %669.0
  };
  %670() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_847() -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  %671 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %673 = cast(meta[relay.Constant][18] /* ty=Tensor[(1600), float64] */, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %674 = reshape(%673, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %675 = @func_66(%674) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %676 = exp(%672) /* ty=Tensor[(6, 5, 10), float32] */;
  %677 = %675.0;
  (%676, %677, meta[relay.Constant][18] /* ty=Tensor[(1600), float64] */)
}

def @func_973() -> Tensor[(10, 10, 16), bool] {
  @func_971() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_4258() -> (Tensor[(10, 10, 16), bool],) {
  %678 = @func_1231() /* ty=Tensor[(10, 10, 16), bool] */;
  (%678,)
}

def @func_3060(%var_3055: Tensor[(16, 7, 15), int32], %var_3056: Tensor[(16, 7, 15), int32]) -> (Tensor[(16, 7, 15), int32],) {
  %679 = cast(%var_3056, dtype="int32") /* ty=Tensor[(16, 7, 15), int32] */;
  %680 = shape_of(%var_3055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%var_3055, dtype="int32") /* ty=Tensor[(16, 7, 15), int32] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %683 = bitwise_or(%681, %682) /* ty=Tensor[(16, 7, 15), int32] */;
  (%683,)
}

def @func_2042() -> (Tensor[(6, 5, 10), int8],) {
  @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */
}

def @func_5918(%var_5917: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), bool]) {
  %703 = fn (%var_5832: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), bool]) {
    %684 = @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %685 = cast(%var_5832, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %686 = reshape(%685, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %687 = @func_218(%686) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
    %688 = %684.0;
    %689 = cast(%688, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
    %690 = reshape(%689, newshape=[300]) /* ty=Tensor[(300), int8] */;
    %691 = @func_4074(%690) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), uint64], Tensor[(10, 10, 16), uint64], Tensor[(300), int8]) */;
    %692 = @func_5378() /* ty=(Tensor[(495), uint64],) */;
    %693 = cast(meta[relay.Constant][19] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %694 = reshape(%693, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), uint64] */;
    %695 = @func_2785(%694) /* ty=(Tensor[(12, 8, 2), uint64],) */;
    %696 = @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
    %697 = %687.1;
    %698 = %691.1;
    %699 = %692.0;
    %700 = @func_3386() /* ty=Tensor[(6, 5, 10), int64] */;
    %701 = %695.0;
    %702 = %696.2;
    (%688, %697, %var_5832, %698, %699, %700, %701, meta[relay.Constant][19] /* ty=Tensor[(192), uint64] */, %702)
  };
  %703(%var_5917) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(10, 10, 16), uint64], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64], Tensor[(6, 5, 10), bool]) */
}

def @func_2509() -> (Tensor[(6, 5, 10), int8],) {
  %704 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %705 = %704.0;
  (%705,)
}

def @func_2787(%var_2786: Tensor[(12, 8, 2), uint64]) -> (Tensor[(12, 8, 2), uint64],) {
  %709 = fn (%var_2778: Tensor[(12, 8, 2), uint64]) -> (Tensor[(12, 8, 2), uint64],) {
    %706 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %707 = cast(%var_2778, dtype="uint64") /* ty=Tensor[(12, 8, 2), uint64] */;
    %708 = left_shift(%706, %707) /* ty=Tensor[(12, 8, 2), uint64] */;
    (%708,)
  };
  %709(%var_2786) /* ty=(Tensor[(12, 8, 2), uint64],) */
}

def @func_5431(%var_5429: Tensor[(15, 5, 6), float32], %var_5430: Tensor[(1365), float64]) -> (Tensor[(15, 5, 6), bool], Tensor[(1365), float64], Tensor[(1365), float64]) {
  @func_5427(%var_5429, %var_5430) /* ty=(Tensor[(15, 5, 6), bool], Tensor[(1365), float64], Tensor[(1365), float64]) */
}

def @func_3780() -> Tensor[(14, 2, 6), float32] {
  %710 = fn () -> Tensor[(14, 2, 6), float32] {
    @func_1815() /* ty=Tensor[(14, 2, 6), float32] */
  };
  %710() /* ty=Tensor[(14, 2, 6), float32] */
}

def @func_1699() -> (Tensor[(6, 5, 10), int64],) {
  %711 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %712 = %711.0;
  (%712,)
}

def @func_2337() -> Tensor[(6, 5, 10), float32] {
  @func_2335() /* ty=Tensor[(6, 5, 10), float32] */
}

def @func_1763() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) {
  %713 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %714 = cast(meta[relay.Constant][21] /* ty=Tensor[(495), uint64] */, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %715 = %713.1;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %717 = reshape(%714, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %718 = reshape(%716, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %719 = @func_559(%717, %718) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %720 = cast(meta[relay.Constant][21] /* ty=Tensor[(495), uint64] */, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %721 = cast(%715, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %722 = reshape(%720, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %723 = reshape(%721, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %724 = @func_559(%722, %723) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %725 = %719.7;
  %726 = %724.5;
  (%715, %725, meta[relay.Constant][21] /* ty=Tensor[(495), uint64] */, %726)
}

def @func_1910() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  @func_1908() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */
}

def @func_8082(%var_8081: Tensor[(11, 15, 4), float64]) -> Tensor[(11, 15, 4), uint32] {
  %736 = fn (%var_8050: Tensor[(11, 15, 4), float64]) -> Tensor[(11, 15, 4), uint32] {
    %727 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 4), float64] */;
    %728 = shape_of(%var_8050, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(%var_8050, dtype="float64") /* ty=Tensor[(11, 15, 4), float64] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %731 = divide(%729, %730) /* ty=Tensor[(11, 15, 4), float64] */;
    %732 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 15, 4), float64] */, dtype="uint32") /* ty=Tensor[(11, 15, 4), uint32] */;
    %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
    %734 = cast(%731, dtype="uint32") /* ty=Tensor[(11, 15, 4), uint32] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_xor(%734, %735) /* ty=Tensor[(11, 15, 4), uint32] */
  };
  %736(%var_8081) /* ty=Tensor[(11, 15, 4), uint32] */
}

def @func_8530() -> (Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool]) {
  %737 = @func_5812() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %738 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %739 = %737.0;
  %740 = %738.1;
  (%739, %740)
}

def @func_5752() -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), bool]) {
  @func_5750() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), bool]) */
}

def @func_3590() -> Tensor[(10, 10, 16), bool] {
  @func_971() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_7506(%var_7488: Tensor[(14, 2, 6), float32]) -> Tensor[(14, 2, 6), float64] {
  %741 = @func_2160() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %742 = %741.0;
  %743 = cast(%var_7488, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%745, %746) /* ty=Tensor[(14, 2, 6), float64] */
}

def @func_5107() -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64]) {
  @func_5105() /* ty=(Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64]) */
}

def @func_3798() -> (Tensor[(6, 5, 10), int64],) {
  %749 = fn () -> (Tensor[(6, 5, 10), int64],) {
    %747 = @func_1139() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */;
    %748 = %747.1;
    (%748,)
  };
  %749() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_8764() -> (Tensor[(6, 5, 10), int64],) {
  %750 = @func_4885() /* ty=Tensor[(6, 5, 10), int64] */;
  (%750,)
}

def @func_7706() -> (Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) {
  @func_7704() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */
}

def @func_8766() -> (Tensor[(6, 5, 10), int64],) {
  @func_8764() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_1908() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), bool], Tensor[(495), uint64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) {
  %751 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %752 = %751.0;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %754 = @func_1102() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %755 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %756 = %755.0;
  %757 = cast(%752, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(6, 5, 10), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = @func_1763() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) */;
  %762 = cast(meta[relay.Constant][23] /* ty=Tensor[(1600), float64] */, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %763 = reshape(%762, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %764 = @func_218(%763) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %765 = log2(%753) /* ty=Tensor[(6, 5, 10), float32] */;
  %766 = %754.0;
  %767 = less_equal(%759, %760) /* ty=Tensor[(6, 5, 10), bool] */;
  %768 = %761.2;
  %769 = %764.1;
  (%765, %766, %767, %768, %769, meta[relay.Constant][23] /* ty=Tensor[(1600), float64] */)
}

def @func_2594(%var_2593: Tensor[(300), int64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) {
  %782 = fn (%var_2567: Tensor[(300), int64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) {
    %770 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
    %771 = cast(%var_2567, dtype="int64") /* ty=Tensor[(300), int64] */;
    %772 = reshape(%771, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int64] */;
    %773 = @func_1446(%772) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), uint64]) */;
    %774 = cast(%var_2567, dtype="float32") /* ty=Tensor[(300), float32] */;
    %775 = @func_2160() /* ty=(Tensor[(14, 2, 6), float32],) */;
    %776 = @func_2077() /* ty=(Tensor[(10, 10, 16), bool],) */;
    %777 = %770.0;
    %778 = %773.3;
    %779 = log10(%774) /* ty=Tensor[(300), float32] */;
    %780 = %775.0;
    %781 = %776.0;
    (%777, %778, %779, %780, %781)
  };
  %782(%var_2593) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(300), float32], Tensor[(14, 2, 6), float32], Tensor[(10, 10, 16), bool]) */
}

def @func_1841() -> (Tensor[(10, 10, 16), bool],) {
  %783 = @func_1084() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %784 = %783.0;
  (%784,)
}

def @func_3203(%var_3158: Tensor[(4, 5, 16), uint64], %var_3172: Tensor[(495), uint64], %var_3173: Tensor[(1600), float64], %var_3190: Tensor[(1600), float64]) -> (Tensor[(4, 5, 16), uint64], Tensor[(15, 3, 11), int8], Tensor[(495), uint64], Tensor[(6, 5, 10), int64], Tensor[(1600), float32]) {
  %785 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 5, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 5, 16), uint64] */;
  %786 = shape_of(%var_3158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_3158, dtype="uint64") /* ty=Tensor[(4, 5, 16), uint64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %789 = cast(%var_3172, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %790 = cast(%var_3173, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %791 = reshape(%789, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %792 = reshape(%790, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %793 = @func_559(%791, %792) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(495), uint64], Tensor[(1600), float64], Tensor[(6, 5, 10), float64], Tensor[(20, 80), float32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(15, 3, 11), int8], Tensor[(6, 5, 10), int64]) */;
  %794 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %795 = cast(%var_3190, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %796 = shape_of(%var_3173, dtype="int32") /* ty=Tensor[(1), int32] */;
  %797 = cast(%var_3173, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), float32] */;
  %799 = bitwise_xor(%787, %788) /* ty=Tensor[(4, 5, 16), uint64] */;
  %800 = %793.8;
  %801 = %794.0;
  %802 = power(%797, %798) /* ty=Tensor[(1600), float32] */;
  (%799, %800, %var_3172, %801, %802)
}

def @func_4589() -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(14, 2, 6), float32]) {
  @func_4587() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(14, 2, 6), float32]) */
}

def @func_7455(%var_7454: Tensor[(192), uint64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(192), uint64], Tensor[(192), uint64]) {
  %810 = fn (%var_7445: Tensor[(192), uint64]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(192), uint64], Tensor[(192), uint64]) {
    %803 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %804 = cast(%var_7445, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %805 = reshape(%804, newshape=[192]) /* ty=Tensor[(192), uint64] */;
    %806 = @func_4445(%805) /* ty=(Tensor[(14, 2, 6), int16], Tensor[(12, 8, 2), uint64], Tensor[(192), uint64]) */;
    %807 = @func_5688() /* ty=Tensor[(10, 10, 16), bool] */;
    %808 = %803.0;
    %809 = %806.2;
    (%807, %808, %809, %var_7445)
  };
  %810(%var_7454) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64], Tensor[(192), uint64], Tensor[(192), uint64]) */
}

def @func_3641() -> (Tensor[(6, 5, 10), bool],) {
  @func_3639() /* ty=(Tensor[(6, 5, 10), bool],) */
}

def @func_2231() -> (Tensor[(14, 2, 6), float32],) {
  %813 = fn () -> (Tensor[(14, 2, 6), float32],) {
    %811 = @func_2160() /* ty=(Tensor[(14, 2, 6), float32],) */;
    %812 = %811.0;
    (%812,)
  };
  %813() /* ty=(Tensor[(14, 2, 6), float32],) */
}

def @func_3085() -> (Tensor[(6, 5, 10), int64],) {
  @func_3083() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_6738() -> Tensor[(10, 10, 16), bool] {
  @func_1231() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_2379(%var_2378: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), uint64],) {
  %820 = fn (%var_2365: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), uint64],) {
    %814 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
    %815 = cast(%var_2365, dtype="uint64") /* ty=Tensor[(10, 10, 16), uint64] */;
    %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
    %817 = cast(%814, dtype="uint64") /* ty=Tensor[(10, 10, 16), uint64] */;
    %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %819 = logical_xor(%817, %818) /* ty=Tensor[(10, 10, 16), uint64] */;
    (%819,)
  };
  %820(%var_2378) /* ty=(Tensor[(10, 10, 16), uint64],) */
}

def @func_66(%var_37: Tensor[(10, 10, 16), float64]) -> (Tensor[(10, 10, 16), bool],) {
  %821 = cast(%var_37, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %822 = cos(%821) /* ty=Tensor[(10, 10, 16), float64] */;
  %823 = cast(%822, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %824 = shape_of(%var_37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_37, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = less_equal(%825, %826) /* ty=Tensor[(10, 10, 16), bool] */;
  (%827,)
}

def @func_6616(%var_6614: Tensor[(250), uint32], %var_6615: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(198), float64], Tensor[(10, 5, 5), float64], Tensor[(250), uint32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(1568), float64], Tensor[(6, 5, 10), int8]) {
  %852 = fn (%var_6578: Tensor[(250), uint32], %var_6593: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(198), float64], Tensor[(10, 5, 5), float64], Tensor[(250), uint32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(1568), float64], Tensor[(6, 5, 10), int8]) {
    %828 = @func_2077() /* ty=(Tensor[(10, 10, 16), bool],) */;
    %829 = cast(meta[relay.Constant][25] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
    %830 = reshape(%829, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), float32] */;
    %831 = @func_2876(%830) /* ty=Tensor[(6, 3, 11), float64] */;
    %832 = cast(%831, dtype="float64") /* ty=Tensor[(6, 3, 11), float64] */;
    %833 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(198), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %834 = cast(meta[relay.Constant][25] /* ty=Tensor[(198), float32] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?), float64] */;
    %836 = cast(%var_6578, dtype="uint32") /* ty=Tensor[(250), uint32] */;
    %837 = %828.0;
    %838 = cast(%837, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
    %839 = reshape(%836, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint32] */;
    %840 = reshape(%838, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %841 = @func_5194(%839, %840) /* ty=(Tensor[(10, 5, 5), uint32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(10, 5, 5), float64], Tensor[(6, 5, 10), int64]) */;
    %842 = cast(%var_6593, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %843 = reshape(%842, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %844 = @func_5537(%843) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(7, 14, 16), float32]) */;
    %845 = @func_4587() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(14, 2, 6), float32]) */;
    %846 = minimum(%834, %835) /* ty=Tensor[(198), float64] */;
    %847 = %841.4;
    %848 = @func_5688() /* ty=Tensor[(10, 10, 16), bool] */;
    %849 = @func_3590() /* ty=Tensor[(10, 10, 16), bool] */;
    %850 = %844.0;
    %851 = %845.0;
    (%837, %846, %847, %var_6578, %848, %849, %850, %var_6593, %851)
  };
  %852(%var_6614, %var_6615) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(198), float64], Tensor[(10, 5, 5), float64], Tensor[(250), uint32], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(1568), float64], Tensor[(6, 5, 10), int8]) */
}

def @func_3131(%var_3129: Tensor[(1600), bool]) -> (Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) {
  %853 = @func_2230() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %854 = %853.0;
  %855 = cast(%854, dtype="float64") /* ty=Tensor[(14, 2, 6), float64] */;
  %856 = cast(%var_3129, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %857 = reshape(%856, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), bool] */;
  %858 = @func_2377(%857) /* ty=(Tensor[(10, 10, 16), uint64],) */;
  %859 = sigmoid(%855) /* ty=Tensor[(14, 2, 6), float64] */;
  %860 = %858.0;
  (%859, %860, %var_3129)
}

def @func_3687() -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) {
  %865 = fn () -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) {
    %861 = @func_1790() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %862 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
    %863 = %861.0;
    %864 = %862.0;
    (%863, %864)
  };
  %865() /* ty=(Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) */
}

def @func_5355() -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %876 = fn () -> (Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
    %866 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
    %867 = %866.0;
    %868 = cast(%867, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
    %869 = reshape(%868, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), bool] */;
    %870 = @func_4859(%869) /* ty=(Tensor[(10, 10, 16), bool],) */;
    %871 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
    %872 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %873 = %870.0;
    %874 = %871.0;
    %875 = %872.0;
    (%867, %873, %874, %875)
  };
  %876() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) */
}

def @func_6094(%var_6062: Tensor[(1600), float64], %var_6079: Tensor[(20, 80), float32]) -> (Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64], Tensor[(1600), int16], Tensor[(6, 5, 10), int64], Tensor[(1365), float64], Tensor[(20, 80), int8]) {
  %877 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %878 = %877.0;
  %879 = cast(%878, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
  %880 = cast(%var_6062, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %881 = reshape(%879, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), float32] */;
  %882 = reshape(%880, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %883 = @func_5660(%881, %882) /* ty=(Tensor[(6, 5, 10), bool], Tensor[(1600), float64], Tensor[(1600), float32], Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), float32], Tensor[(20, 80), float32]) */;
  %884 = %883.5;
  %885 = cast(%var_6062, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(2), int32] */;
  %887 = cast(%884, dtype="float64") /* ty=Tensor[(20, 80), float64] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %889 = cast(%var_6062, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %890 = reshape(%889, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %891 = @func_218(%890) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %892 = cast(meta[relay.Constant][26] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %893 = cast(meta[relay.Constant][26] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %894 = cast(meta[relay.Constant][26] /* ty=Tensor[(1365), float64] */, dtype="float64") /* ty=Tensor[(1365), float64] */;
  %895 = reshape(%892, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %896 = reshape(%893, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
  %897 = reshape(%894, newshape=[1365]) /* ty=Tensor[(1365), float64] */;
  %898 = @func_4764(%895, %896, %897) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(15, 7, 13), float64], Tensor[(1365), float64]) */;
  %899 = cast(%var_6079, dtype="int8") /* ty=Tensor[(20, 80), int8] */;
  %900 = shape_of(%884, dtype="int32") /* ty=Tensor[(2), int32] */;
  %901 = cast(%884, dtype="int8") /* ty=Tensor[(20, 80), int8] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %903 = maximum(%887, %888) /* ty=Tensor[(20, 80), float64] */;
  %904 = %891.2;
  %905 = %898.0;
  %906 = right_shift(%901, %902) /* ty=Tensor[(20, 80), int8] */;
  (%878, %903, %904, %905, meta[relay.Constant][26] /* ty=Tensor[(1365), float64] */, %906)
}

def @func_8644(%var_8642: Tensor[(250), uint32], %var_8643: Tensor[(1568), float64]) -> (Tensor[(10, 10, 16), bool], Tensor[(11, 15, 4), uint32], Tensor[(110, 6), float64], Tensor[(250), uint32], Tensor[(250), uint32], Tensor[(1568), float64]) {
  @func_8640(%var_8642, %var_8643) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(11, 15, 4), uint32], Tensor[(110, 6), float64], Tensor[(250), uint32], Tensor[(250), uint32], Tensor[(1568), float64]) */
}

def @func_5378() -> (Tensor[(495), uint64],) {
  %907 = @func_1763() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) */;
  %908 = %907.2;
  (%908,)
}

def @func_6010(%var_6008: Tensor[(14, 3, 5), uint8], %var_6009: Tensor[(14, 3, 5), uint8]) -> (Tensor[(14, 3, 5), bool], Tensor[(14, 3, 5), float32]) {
  %916 = fn (%var_5990: Tensor[(14, 3, 5), uint8], %var_5991: Tensor[(14, 3, 5), uint8]) -> (Tensor[(14, 3, 5), bool], Tensor[(14, 3, 5), float32]) {
    %909 = cast(%var_5991, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
    %910 = shape_of(%var_5990, dtype="int32") /* ty=Tensor[(3), int32] */;
    %911 = cast(%var_5990, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
    %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %913 = cast(%var_5991, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
    %914 = less_equal(%911, %912) /* ty=Tensor[(14, 3, 5), bool] */;
    %915 = log10(%913) /* ty=Tensor[(14, 3, 5), float32] */;
    (%914, %915)
  };
  %916(%var_6008, %var_6009) /* ty=(Tensor[(14, 3, 5), bool], Tensor[(14, 3, 5), float32]) */
}

def @func_1701() -> (Tensor[(6, 5, 10), int64],) {
  @func_1699() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_7178(%var_7176: Tensor[(168), float32]) -> (Tensor[(6, 5, 10), float64], Tensor[(6, 5, 10), int8], Tensor[(14, 2, 6), float64], Tensor[(168), float32]) {
  @func_7175(%var_7176) /* ty=(Tensor[(6, 5, 10), float64], Tensor[(6, 5, 10), int8], Tensor[(14, 2, 6), float64], Tensor[(168), float32]) */
}

def @func_5978() -> (Tensor[(6, 5, 10), float32],) {
  %920 = fn () -> (Tensor[(6, 5, 10), float32],) {
    %917 = @func_2685() /* ty=Tensor[(6, 5, 10), int64] */;
    %918 = cast(%917, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
    %919 = cosh(%918) /* ty=Tensor[(6, 5, 10), float32] */;
    (%919,)
  };
  %920() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_7603() -> (Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), float32]) {
  %921 = @func_5977() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %922 = @func_5977() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %923 = %921.0;
  %924 = %922.0;
  (%923, %924)
}

def @func_5602(%var_5601: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) {
  %931 = fn (%var_5587: Tensor[(1600), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) {
    %925 = @func_3346() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %926 = cast(%var_5587, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %927 = reshape(%926, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %928 = @func_218(%927) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
    %929 = %925.0;
    %930 = %928.2;
    (%929, %930, %var_5587)
  };
  %931(%var_5601) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(1600), int16], Tensor[(1600), float64]) */
}

def @func_6690() -> Tensor[(6, 5, 10), float32] {
  %932 = @func_5004() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool]) */;
  %932.0
}

def @main(%var_9001: Tensor[(429), float64], %var_9002: Tensor[(495), uint64], %var_9014: Tensor[(10, 10, 16), bool]) -> (Tensor[(10, 10, 16), bool], Tensor[(429), float64], Tensor[(495), uint64], Tensor[(15, 7, 13), float64], Tensor[(91, 15), float64], Tensor[(10, 10, 16), float64]) {
  %933 = cast(%var_9001, dtype="float64") /* ty=Tensor[(429), float64] */;
  %934 = @func_847() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %935 = %934.1;
  %936 = cast(%935, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %937 = cast(%var_9002, dtype="uint64") /* ty=Tensor[(495), uint64] */;
  %938 = reshape(%933, newshape=[3, 13, 11]) /* ty=Tensor[(3, 13, 11), float64] */;
  %939 = reshape(%936, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %940 = reshape(%937, newshape=[495]) /* ty=Tensor[(495), uint64] */;
  %941 = @func_3613(%938, %939, %940) /* ty=(Tensor[(3, 13, 11), float64], Tensor[(10, 10, 16), bool], Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(495), uint64]) */;
  %942 = cast(meta[relay.Constant][27] /* ty=Tensor[(91, 15), float64] */, dtype="float64") /* ty=Tensor[(91, 15), float64] */;
  %943 = reshape(%942, newshape=[15, 7, 13]) /* ty=Tensor[(15, 7, 13), float64] */;
  %944 = @func_849() /* ty=(Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(1600), float64]) */;
  %945 = %944.1;
  %946 = cast(%var_9014, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %947 = shape_of(%945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%945, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %950 = %941.1;
  %951 = @func_1465(%943) /* ty=Tensor[(15, 7, 13), float64] */;
  %952 = floor_mod(%948, %949) /* ty=Tensor[(10, 10, 16), float64] */;
  (%950, %var_9001, %var_9002, %951, meta[relay.Constant][27] /* ty=Tensor[(91, 15), float64] */, %952)
}

def @func_1231() -> Tensor[(10, 10, 16), bool] {
  @func_971() /* ty=Tensor[(10, 10, 16), bool] */
}

def @func_803(%var_802: Tensor[(2, 800), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(2, 800), float64], Tensor[(1600), int16], Tensor[(2, 800), float64]) {
  %971 = fn (%var_760: Tensor[(2, 800), float64]) -> (Tensor[(6, 5, 10), int64], Tensor[(2, 800), float64], Tensor[(1600), int16], Tensor[(2, 800), float64]) {
    %953 = cast(%var_760, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
    %954 = reshape(%953, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %955 = @func_218(%954) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
    %956 = %955.1;
    %957 = cast(%956, dtype="float64") /* ty=Tensor[(10, 10, 16), float64] */;
    %958 = shape_of(%var_760, dtype="int32") /* ty=Tensor[(2), int32] */;
    %959 = cast(%var_760, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
    %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %961 = maximum(%959, %960) /* ty=Tensor[(2, 800), float64] */;
    %962 = cast(%961, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
    %963 = reshape(%962, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
    %964 = @func_218(%963) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
    %965 = cast(%var_760, dtype="float32") /* ty=Tensor[(2, 800), float32] */;
    %966 = log2(%965) /* ty=Tensor[(2, 800), float32] */;
    %967 = cast(%966, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
    %968 = @func_482() /* ty=Tensor[(6, 5, 10), int64] */;
    %969 = %964.2;
    %970 = exp(%967) /* ty=Tensor[(2, 800), float64] */;
    (%968, %961, %969, %970)
  };
  %971(%var_802) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(2, 800), float64], Tensor[(1600), int16], Tensor[(2, 800), float64]) */
}

def @func_8956() -> (Tensor[(495), uint64],) {
  %974 = fn () -> (Tensor[(495), uint64],) {
    %972 = @func_1763() /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float64], Tensor[(495), uint64], Tensor[(10, 10, 16), bool]) */;
    %973 = %972.2;
    (%973,)
  };
  %974() /* ty=(Tensor[(495), uint64],) */
}

def @func_8572() -> (Tensor[(14, 2, 6), float32], Tensor[(14, 2, 6), float32]) {
  %979 = fn () -> (Tensor[(14, 2, 6), float32], Tensor[(14, 2, 6), float32]) {
    %975 = @func_5945() /* ty=(Tensor[(14, 2, 6), float32],) */;
    %976 = @func_7704() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(6, 5, 10), float32]) */;
    %977 = %975.0;
    %978 = %976.0;
    (%977, %978)
  };
  %979() /* ty=(Tensor[(14, 2, 6), float32], Tensor[(14, 2, 6), float32]) */
}

def @func_7058(%var_7056: Tensor[(6, 5, 10), int64]) -> Tensor[(6, 5, 10), uint16] {
  @func_7055(%var_7056) /* ty=Tensor[(6, 5, 10), uint16] */
}

def @func_8936(%var_8934: Tensor[(15, 13, 13), uint64], %var_8935: Tensor[(15, 13, 13), uint64]) -> Tensor[(15, 13, 13), uint64] {
  @func_8932(%var_8934, %var_8935) /* ty=Tensor[(15, 13, 13), uint64] */
}

def @func_2645() -> (Tensor[(6, 5, 10), int8],) {
  %980 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %981 = %980.0;
  (%981,)
}

def @func_7090() -> (Tensor[(14, 2, 6), float32],) {
  %982 = @func_1815() /* ty=Tensor[(14, 2, 6), float32] */;
  (%982,)
}

def @func_4016() -> (Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), float32], Tensor[(10, 10, 16), uint64]) {
  %983 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %984 = @func_2217() /* ty=(Tensor[(10, 10, 16), bool],) */;
  %985 = %983.0;
  %986 = cast(%985, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %987 = reshape(%986, newshape=[6, 5, 10]) /* ty=Tensor[(6, 5, 10), int8] */;
  %988 = @func_3294(%987) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */;
  %989 = %984.0;
  %990 = @func_2335() /* ty=Tensor[(6, 5, 10), float32] */;
  %991 = %988.3;
  (%985, %989, %990, %991)
}

def @func_873() -> (Tensor[(6, 5, 10), int64],) {
  %994 = fn () -> (Tensor[(6, 5, 10), int64],) {
    %992 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %993 = %992.0;
    (%993,)
  };
  %994() /* ty=(Tensor[(6, 5, 10), int64],) */
}

def @func_3083() -> (Tensor[(6, 5, 10), int64],) {
  %995 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %996 = %995.0;
  (%996,)
}

def @func_7175(%var_7171: Tensor[(168), float32]) -> (Tensor[(6, 5, 10), float64], Tensor[(6, 5, 10), int8], Tensor[(14, 2, 6), float64], Tensor[(168), float32]) {
  %997 = @func_6708() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %998 = %997.0;
  %999 = cast(%998, dtype="float64") /* ty=Tensor[(6, 5, 10), float64] */;
  %1000 = @func_2040() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %1001 = cast(%var_7171, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1002 = reshape(%1001, newshape=[14, 2, 6]) /* ty=Tensor[(14, 2, 6), float32] */;
  %1003 = @func_4723(%1002) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(300), int64], Tensor[(14, 2, 6), float64], Tensor[(20, 80), float64], Tensor[(14, 2, 6), float32]) */;
  %1004 = erf(%999) /* ty=Tensor[(6, 5, 10), float64] */;
  %1005 = %1000.0;
  %1006 = %1003.2;
  (%1004, %1005, %1006, %var_7171)
}

def @func_8342(%var_8340: Tensor[(1, 15, 12), float64], %var_8341: Tensor[(13, 15, 12), float64]) -> (Tensor[(13, 15, 12), bool],) {
  %1010 = fn (%var_8333: Tensor[(1, 15, 12), float64], %var_8334: Tensor[(13, 15, 12), float64]) -> (Tensor[(13, 15, 12), bool],) {
    %1007 = cast(%var_8333, dtype="bool") /* ty=Tensor[(1, 15, 12), bool] */;
    %1008 = cast(%var_8334, dtype="bool") /* ty=Tensor[(13, 15, 12), bool] */;
    %1009 = equal(%1007, %1008) /* ty=Tensor[(13, 15, 12), bool] */;
    (%1009,)
  };
  %1010(%var_8340, %var_8341) /* ty=(Tensor[(13, 15, 12), bool],) */
}

def @func_1103() -> (Tensor[(6, 5, 10), float32],) {
  %1015 = fn () -> (Tensor[(6, 5, 10), float32],) {
    %1011 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %1012 = %1011.0;
    %1013 = cast(%1012, dtype="float32") /* ty=Tensor[(6, 5, 10), float32] */;
    %1014 = log(%1013) /* ty=Tensor[(6, 5, 10), float32] */;
    (%1014,)
  };
  %1015() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_8532() -> (Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool]) {
  @func_8530() /* ty=(Tensor[(6, 5, 10), int8], Tensor[(10, 10, 16), bool]) */
}

def @func_6098(%var_6096: Tensor[(1600), float64], %var_6097: Tensor[(20, 80), float32]) -> (Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64], Tensor[(1600), int16], Tensor[(6, 5, 10), int64], Tensor[(1365), float64], Tensor[(20, 80), int8]) {
  @func_6094(%var_6096, %var_6097) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64], Tensor[(1600), int16], Tensor[(6, 5, 10), int64], Tensor[(1365), float64], Tensor[(20, 80), int8]) */
}

def @func_2686() -> Tensor[(6, 5, 10), int64] {
  %1017 = fn () -> Tensor[(6, 5, 10), int64] {
    %1016 = @func_872() /* ty=(Tensor[(6, 5, 10), int64],) */;
    %1016.0
  };
  %1017() /* ty=Tensor[(6, 5, 10), int64] */
}

def @func_3294(%var_3243: Tensor[(6, 5, 10), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) {
  %1018 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %1019 = %1018.0;
  %1020 = cast(%var_3243, dtype="int32") /* ty=Tensor[(6, 5, 10), int32] */;
  %1021 = shape_of(%1019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1022 = cast(%1019, dtype="int32") /* ty=Tensor[(6, 5, 10), int32] */;
  %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1024 = @func_120() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %1025 = @func_1849() /* ty=Tensor[(10, 10, 16), bool] */;
  %1026 = cast(%1025, dtype="bool") /* ty=Tensor[(10, 10, 16), bool] */;
  %1027 = reshape(%1026, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), bool] */;
  %1028 = @func_2377(%1027) /* ty=(Tensor[(10, 10, 16), uint64],) */;
  %1029 = multiply(%1022, %1023) /* ty=Tensor[(6, 5, 10), int32] */;
  %1030 = %1024.0;
  %1031 = %1028.0;
  (%1025, %1029, %1030, %1031)
}

def @func_6311() -> (Tensor[(2, 2, 12), float64], Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64]) {
  @func_6309() /* ty=(Tensor[(2, 2, 12), float64], Tensor[(6, 5, 10), int64], Tensor[(20, 80), float64]) */
}

def @func_3850() -> (Tensor[(6, 5, 10), float32],) {
  %1033 = fn () -> (Tensor[(6, 5, 10), float32],) {
    %1032 = @func_1783() /* ty=Tensor[(6, 5, 10), float32] */;
    (%1032,)
  };
  %1033() /* ty=(Tensor[(6, 5, 10), float32],) */
}

def @func_4587() -> (Tensor[(6, 5, 10), int8], Tensor[(6, 5, 10), int64], Tensor[(14, 2, 6), float32]) {
  %1034 = @func_2509() /* ty=(Tensor[(6, 5, 10), int8],) */;
  %1035 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %1036 = @func_2230() /* ty=(Tensor[(14, 2, 6), float32],) */;
  %1037 = %1034.0;
  %1038 = %1035.0;
  %1039 = %1036.0;
  (%1037, %1038, %1039)
}

def @func_2040() -> (Tensor[(6, 5, 10), int8],) {
  %1040 = @func_1670() /* ty=(Tensor[(6, 5, 10), float32],) */;
  %1041 = %1040.0;
  %1042 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 5, 10), float32] */, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %1043 = shape_of(%1041, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1044 = cast(%1041, dtype="int8") /* ty=Tensor[(6, 5, 10), int8] */;
  %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1046 = left_shift(%1044, %1045) /* ty=Tensor[(6, 5, 10), int8] */;
  (%1046,)
}

def @func_1815() -> Tensor[(14, 2, 6), float32] {
  %1047 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 6), float32] */;
  acosh(%1047) /* ty=Tensor[(14, 2, 6), float32] */
}

def @func_3297(%var_3295: Tensor[(6, 5, 10), int8]) -> (Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) {
  @func_3294(%var_3295) /* ty=(Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int32], Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), uint64]) */
}

def @func_5105() -> (Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int64]) {
  %1048 = @func_3686() /* ty=(Tensor[(6, 5, 10), int64], Tensor[(6, 5, 10), int8]) */;
  %1049 = @func_3386() /* ty=Tensor[(6, 5, 10), int64] */;
  %1050 = %1048.0;
  (%1049, %1050)
}

def @func_3134(%var_3132: Tensor[(1600), bool]) -> (Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) {
  @func_3131(%var_3132) /* ty=(Tensor[(14, 2, 6), float64], Tensor[(10, 10, 16), uint64], Tensor[(1600), bool]) */
}

def @func_412(%var_329: Tensor[(15, 3, 11), uint64], %var_330: Tensor[(15, 3, 11), uint64], %var_355: Tensor[(1600), float64], %var_400: Tensor[(1600), int16]) -> (Tensor[(1600), float64], Tensor[(6, 5, 10), int64], Tensor[(15, 3, 11), int8], Tensor[(1600), uint16], Tensor[(10, 10, 16), bool], Tensor[(6, 5, 10), int64]) {
  %1051 = cast(%var_355, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %1052 = reshape(%1051, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %1053 = @func_218(%1052) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %1054 = %1053.2;
  %1055 = cast(%1054, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %1056 = reshape(%1055, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %1057 = @func_218(%1056) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %1058 = cast(%var_330, dtype="uint64") /* ty=Tensor[(15, 3, 11), uint64] */;
  %1059 = shape_of(%var_329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1060 = cast(%var_329, dtype="uint64") /* ty=Tensor[(15, 3, 11), uint64] */;
  %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1062 = bitwise_or(%1060, %1061) /* ty=Tensor[(15, 3, 11), uint64] */;
  %1063 = cast(%1062, dtype="int16") /* ty=Tensor[(15, 3, 11), int16] */;
  %1064 = shape_of(%var_330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1065 = cast(%var_330, dtype="int16") /* ty=Tensor[(15, 3, 11), int16] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1067 = subtract(%1065, %1066) /* ty=Tensor[(15, 3, 11), int16] */;
  %1068 = cast(%1062, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %1069 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1070 = cast(%1067, dtype="int8") /* ty=Tensor[(15, 3, 11), int8] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1072 = cast(%var_400, dtype="uint16") /* ty=Tensor[(1600), uint16] */;
  %1073 = shape_of(%1054, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1074 = cast(%1054, dtype="uint16") /* ty=Tensor[(1600), uint16] */;
  %1075 = dyn.reshape(%1072, %1073, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %1076 = cast(%var_355, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %1077 = reshape(%1076, newshape=[10, 10, 16]) /* ty=Tensor[(10, 10, 16), float64] */;
  %1078 = @func_66(%1077) /* ty=(Tensor[(10, 10, 16), bool],) */;
  %1079 = cast(%var_400, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %1080 = reshape(%1079, newshape=[1600]) /* ty=Tensor[(1600), float64] */;
  %1081 = @func_218(%1080) /* ty=(Tensor[(6, 5, 10), int64], Tensor[(10, 10, 16), bool], Tensor[(1600), int16]) */;
  %1082 = %1057.0;
  %1083 = left_shift(%1070, %1071) /* ty=Tensor[(15, 3, 11), int8] */;
  %1084 = subtract(%1074, %1075) /* ty=Tensor[(1600), uint16] */;
  %1085 = %1078.0;
  %1086 = %1081.0;
  (%var_355, %1082, %1083, %1084, %1085, %1086)
}

def @func_1790() -> (Tensor[(6, 5, 10), int64],) {
  %1087 = @func_717() /* ty=(Tensor[(6, 5, 10), int64],) */;
  %1088 = %1087.0;
  (%1088,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen435/build/output.py", line 3051, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:17:23] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

