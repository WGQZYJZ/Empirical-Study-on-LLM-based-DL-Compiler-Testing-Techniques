==========mod==========
#[version = "0.0.5"]
def @func_4542() -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
  %0 = @func_1940() /* ty=Tensor[(7, 6, 3), float64] */;
  %1 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %2 = %1.4;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %4 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%0, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %7 = floor_divide(%5, %6) /* ty=Tensor[(7, 6, 3), float32] */;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %9 = reshape(%8, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %10 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
  %11 = @func_1280(%9) /* ty=Tensor[(7, 6, 3), float32] */;
  (%7, %10, %11)
}

def @func_1809() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %12 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %15 = reshape(%13, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %16 = reshape(%14, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %17 = @func_335(%15, %16) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
  %18 = %12.0;
  %19 = %17.0;
  %20 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %21 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(220), uint64] */, %20, %21)
}

def @func_8316() -> (Tensor[(7, 6, 3), float64], Tensor[(220), float64]) {
  %22 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %23 = %22.2;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(220), float64] */;
  %25 = cos(%24) /* ty=Tensor[(220), float64] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(220), float64] */;
  %27 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  %28 = erf(%26) /* ty=Tensor[(220), float64] */;
  (%27, %28)
}

def @func_7486() -> Tensor[(13, 14, 14), bool] {
  %29 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %29.0
}

def @func_7835() -> (Tensor[(312), float32],) {
  %30 = @func_5547() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) */;
  %31 = %30.2;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(312), float32] */;
  %33 = sin(%32) /* ty=Tensor[(312), float32] */;
  (%33,)
}

def @func_2180() -> (Tensor[(7, 6, 3), float64],) {
  %34 = @func_1940() /* ty=Tensor[(7, 6, 3), float64] */;
  (%34,)
}

def @func_3760(%var_3748: Tensor[(312), bool], %var_3749: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %35 = cast(%var_3748, dtype="bool") /* ty=Tensor[(312), bool] */;
  %36 = cast(%var_3749, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %37 = reshape(%35, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %38 = reshape(%36, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %39 = @func_2901(%37, %38) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(7, 6, 3), float32], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %40 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %41 = %39.0;
  (%40, %41, %var_3748, %var_3749)
}

def @func_2311() -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) {
  %42 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %43 = %42.0;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %45 = reshape(%44, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %46 = @func_1875(%45) /* ty=(Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
  %47 = %46.2;
  (%43, %47)
}

def @func_335(%var_279: Tensor[(2, 11, 10), uint64], %var_280: Tensor[(2, 11, 10), uint64]) -> (Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) {
  %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %51 = reshape(%48, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %52 = reshape(%49, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %53 = reshape(%50, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %54 = @func_231(%51, %52, %53) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
  %55 = cast(%var_280, dtype="uint64") /* ty=Tensor[(2, 11, 10), uint64] */;
  %56 = shape_of(%var_279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_279, dtype="uint64") /* ty=Tensor[(2, 11, 10), uint64] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %59 = multiply(%57, %58) /* ty=Tensor[(2, 11, 10), uint64] */;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %61 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %62 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %63 = %54.1;
  %64 = cast(%63, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %65 = reshape(%61, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %66 = reshape(%62, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %67 = reshape(%64, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %68 = @func_231(%65, %66, %67) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(2548), uint64] */, dtype="float32") /* ty=Tensor[(2548), float32] */;
  %70 = erf(%69) /* ty=Tensor[(2548), float32] */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(2548), float32] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(1), int32] */;
  %73 = cast(%70, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %75 = exp(%60) /* ty=Tensor[(2, 11, 10), float32] */;
  %76 = %68.1;
  %77 = logical_xor(%73, %74) /* ty=Tensor[(2548), uint64] */;
  (%63, meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, %75, %76, %77)
}

def @func_3607(%var_3571: Tensor[(13, 14, 14), bool], %var_3601: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(220), float64], Tensor[(630), uint8], Tensor[(13, 14, 14), int64], Tensor[(13, 14, 14), float64], Tensor[(312), bool], Tensor[(312), bool]) {
  %78 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(220), uint64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %80 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(220), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(220), uint64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), float64] */;
  %83 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %86 = reshape(%84, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %87 = reshape(%85, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %88 = @func_335(%86, %87) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
  %89 = %88.0;
  %90 = cast(%var_3571, dtype="int64") /* ty=Tensor[(13, 14, 14), int64] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="int64") /* ty=Tensor[(13, 14, 14), int64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %94 = cast(%var_3571, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %95 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%89, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %98 = cast(%var_3601, dtype="bool") /* ty=Tensor[(312), bool] */;
  %99 = reshape(%98, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %100 = @func_1540(%99) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
  %101 = %78.0;
  %102 = mod(%81, %82) /* ty=Tensor[(220), float64] */;
  %103 = %83.0;
  %104 = bitwise_and(%92, %93) /* ty=Tensor[(13, 14, 14), int64] */;
  %105 = mod(%96, %97) /* ty=Tensor[(13, 14, 14), float64] */;
  %106 = %100.3;
  (%101, %102, %103, %104, %105, %106, %var_3601)
}

def @func_3837() -> Tensor[(7, 6, 3), float64] {
  %107 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  cosh(%108) /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_5470() -> (Tensor[(7, 6, 3), float64],) {
  %109 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  (%109,)
}

def @func_2873(%var_2867: Tensor[(768), float32]) -> (Tensor[(630), uint8], Tensor[(4, 16, 12), bool], Tensor[(768), float32]) {
  %110 = cast(%var_2867, dtype="float32") /* ty=Tensor[(768), float32] */;
  %111 = cast(%var_2867, dtype="float32") /* ty=Tensor[(768), float32] */;
  %112 = reshape(%110, newshape=[4, 16, 12]) /* ty=Tensor[(4, 16, 12), float32] */;
  %113 = reshape(%111, newshape=[4, 16, 12]) /* ty=Tensor[(4, 16, 12), float32] */;
  %114 = @func_2218() /* ty=Tensor[(630), uint8] */;
  %115 = @func_2760(%112, %113) /* ty=Tensor[(4, 16, 12), bool] */;
  (%114, %115, %var_2867)
}

def @func_7769() -> Tensor[(7, 6, 3), float32] {
  %116 = @func_4599() /* ty=(Tensor[(7, 6, 3), float32],) */;
  %116.0
}

def @func_4154() -> Tensor[(7, 6, 3), float64] {
  @func_3837() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_7697(%var_7659: Tensor[(312), bool]) -> (Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(10, 63), uint8]) {
  %117 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %118 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %120 = reshape(%119, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %121 = @func_4031(%120) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %122 = cast(%var_7659, dtype="bool") /* ty=Tensor[(312), bool] */;
  %123 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(312), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?), bool] */;
  %126 = %117.1;
  %127 = cast(%126, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %128 = reshape(%127, newshape=[7, 364]) /* ty=Tensor[(7, 364), bool] */;
  %129 = @func_4183(%128) /* ty=(Tensor[(10, 63), uint8], Tensor[(13, 14, 14), bool], Tensor[(7, 364), bool]) */;
  %130 = %118.0;
  %131 = %121.1;
  %132 = logical_and(%124, %125) /* ty=Tensor[(312), bool] */;
  %133 = %129.0;
  (%126, %130, %131, %132, %133)
}

def @func_4759() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) {
  %134 = @func_2311() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %135 = @func_4542() /* ty=(Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
  %136 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %137 = %136.0;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %139 = cast(meta[relay.Constant][7] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %140 = reshape(%139, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %141 = @func_3370(%140) /* ty=(Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) */;
  %142 = %134.1;
  %143 = %135.1;
  %144 = cos(%138) /* ty=Tensor[(7, 6, 3), float64] */;
  %145 = %141.0;
  (%142, %143, %144, %145, meta[relay.Constant][7] /* ty=Tensor[(240), float32] */)
}

def @func_6352() -> (Tensor[(7, 6, 3), float64],) {
  %146 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %147 = %146.0;
  (%147,)
}

def @func_6971() -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64]) {
  %148 = @func_5737() /* ty=(Tensor[(7, 6, 3), float32],) */;
  %149 = %148.0;
  %150 = @func_3837() /* ty=Tensor[(7, 6, 3), float64] */;
  (%149, %150)
}

def @func_7345() -> (Tensor[(7, 6, 3), float32],) {
  %151 = @func_5737() /* ty=(Tensor[(7, 6, 3), float32],) */;
  %152 = %151.0;
  (%152,)
}

def @func_1372(%var_1335: uint16, %var_1336: Tensor[(8, 140), uint16], %var_1343: Tensor[(312), bool], %var_1344: Tensor[(2548), uint64], %var_1362: Tensor[(7, 6, 3), float64]) -> (Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) {
  %153 = cast(%var_1335, dtype="uint16") /* ty=uint16 */;
  %154 = cast(%var_1336, dtype="uint16") /* ty=Tensor[(8, 140), uint16] */;
  %155 = reshape(%153, newshape=[]) /* ty=uint16 */;
  %156 = reshape(%154, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %157 = cast(%var_1343, dtype="bool") /* ty=Tensor[(312), bool] */;
  %158 = cast(%var_1343, dtype="bool") /* ty=Tensor[(312), bool] */;
  %159 = cast(%var_1344, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %160 = reshape(%157, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %161 = reshape(%158, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %162 = reshape(%159, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %163 = @func_231(%160, %161, %162) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
  %164 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %165 = %164.0;
  %166 = cast(%var_1362, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = cast(%var_1362, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %171 = reshape(%170, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %172 = @func_381(%155, %156) /* ty=Tensor[(14, 10, 8), uint16] */;
  %173 = %163.3;
  %174 = less_equal(%168, %169) /* ty=Tensor[(7, 6, 3), bool] */;
  %175 = @func_1280(%171) /* ty=Tensor[(7, 6, 3), float32] */;
  (%172, %var_1335, %var_1336, %173, %var_1343, %var_1344, %174, %175)
}

def @func_6489(%var_6427: Tensor[(4, 3, 4), float64], %var_6463: Tensor[(126), float64], %var_6464: Tensor[(1120), uint16]) -> (Tensor[(4, 3, 4), float64], Tensor[(630), uint8], Tensor[(13, 8, 3), float32], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(3, 104), bool], Tensor[(2548), uint64]) {
  %176 = cast(%var_6427, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
  %177 = exp(%176) /* ty=Tensor[(4, 3, 4), float64] */;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
  %179 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %180 = cast(%var_6463, dtype="float64") /* ty=Tensor[(126), float64] */;
  %181 = cast(%var_6464, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %182 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 104), bool] */, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
  %183 = cast(meta[relay.Constant][9] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %184 = reshape(%180, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %185 = reshape(%181, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %186 = reshape(%182, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %187 = reshape(%183, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %188 = @func_1118(%184, %185, %186, %187) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %189 = sinh(%178) /* ty=Tensor[(4, 3, 4), float64] */;
  %190 = %179.0;
  %191 = %188.6;
  (%189, %190, %191, %var_6463, %var_6464, meta[relay.Constant][8] /* ty=Tensor[(3, 104), bool] */, meta[relay.Constant][9] /* ty=Tensor[(2548), uint64] */)
}

def @func_4479(%var_4460: Tensor[(8, 3, 11), float32], %var_4472: Tensor[(312), bool]) -> (Tensor[(8, 3, 11), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %192 = cast(%var_4460, dtype="float32") /* ty=Tensor[(8, 3, 11), float32] */;
  %193 = cast(%var_4472, dtype="bool") /* ty=Tensor[(312), bool] */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %195 = reshape(%193, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %196 = reshape(%194, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %197 = @func_3760(%195, %196) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %198 = rsqrt(%192) /* ty=Tensor[(8, 3, 11), float32] */;
  %199 = %197.2;
  (%198, %199, %var_4472, meta[relay.Constant][10] /* ty=Tensor[(2548), uint64] */)
}

def @func_924() -> (Tensor[(7, 6, 3), float64],) {
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 6, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %201 = atanh(%200) /* ty=Tensor[(7, 6, 3), float64] */;
  (%201,)
}

def @func_1302() -> Tensor[(7, 6, 3), float64] {
  %202 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %202.0
}

def @func_2204(%var_2196: Tensor[(630), uint8]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) {
  %203 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %204 = cast(%var_2196, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %205 = cast(meta[relay.Constant][12] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %206 = reshape(%204, newshape=[630, 1]) /* ty=Tensor[(630, 1), uint8] */;
  %207 = reshape(%205, newshape=[2548, 1]) /* ty=Tensor[(2548, 1), uint64] */;
  %208 = @func_1628(%206, %207) /* ty=(Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) */;
  %209 = %203.0;
  %210 = %208.3;
  (%209, %210, %var_2196, meta[relay.Constant][12] /* ty=Tensor[(2548), uint64] */)
}

def @func_3380() -> (Tensor[(630), uint8],) {
  %211 = @func_2218() /* ty=Tensor[(630), uint8] */;
  (%211,)
}

def @func_2475() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) {
  %212 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %213 = %212.0;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 6, 3), float64] */, dtype="uint64") /* ty=Tensor[(7, 6, 3), uint64] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="uint64") /* ty=Tensor[(7, 6, 3), uint64] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %218 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %219 = multiply(%216, %217) /* ty=Tensor[(7, 6, 3), uint64] */;
  (%218, %219)
}

def @func_5970(%var_5907: Tensor[(3, 5, 7), float64]) -> (Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) {
  %220 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 5, 7), float64] */, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
  %221 = shape_of(%var_5907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_5907, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = @func_5095() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %225 = cast(meta[relay.Constant][15] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %226 = reshape(%225, newshape=[630]) /* ty=Tensor[(630), uint8] */;
  %227 = @func_2204(%226) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
  %228 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %229 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %230 = not_equal(%222, %223) /* ty=Tensor[(3, 5, 7), bool] */;
  %231 = %224.0;
  %232 = %227.3;
  %233 = %228.0;
  %234 = %229.0;
  (%230, %231, %232, meta[relay.Constant][15] /* ty=Tensor[(630), uint8] */, %233, %234)
}

def @func_7081(%var_7011: Tensor[(240), float32], %var_7037: Tensor[(1, 2548), bool], %var_7047: Tensor[(24, 2), float64], %var_7048: Tensor[(1120), uint16], %var_7057: Tensor[(24, 2), float64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(1, 2548), bool], Tensor[(8, 30), int16], Tensor[(3, 104), bool], Tensor[(1120), uint16], Tensor[(24, 2), bool], Tensor[(24, 2), int16]) {
  %235 = @func_5816() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16], Tensor[(7, 6, 3), float64]) */;
  %236 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
  %237 = cast(%var_7037, dtype="bool") /* ty=Tensor[(1, 2548), bool] */;
  %238 = reshape(%237, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
  %239 = @func_3016(%238) /* ty=(Tensor[(13, 14, 14), bool],) */;
  %240 = cast(%var_7011, dtype="float32") /* ty=Tensor[(240), float32] */;
  %241 = reshape(%240, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %242 = @func_3370(%241) /* ty=(Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) */;
  %243 = %242.2;
  %244 = cast(%var_7011, dtype="int16") /* ty=Tensor[(240), int16] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(2), int32] */;
  %246 = cast(%243, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %248 = cast(%var_7047, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %249 = %235.3;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %251 = cast(%var_7048, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %252 = reshape(%248, newshape=[4, 3, 4]) /* ty=Tensor[(4, 3, 4), float64] */;
  %253 = reshape(%250, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %254 = reshape(%251, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %255 = @func_6489(%252, %253, %254) /* ty=(Tensor[(4, 3, 4), float64], Tensor[(630), uint8], Tensor[(13, 8, 3), float32], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(3, 104), bool], Tensor[(2548), uint64]) */;
  %256 = cast(meta[relay.Constant][16] /* ty=Tensor[(24, 2), float64] */, dtype="bool") /* ty=Tensor[(24, 2), bool] */;
  %257 = shape_of(%var_7047, dtype="int32") /* ty=Tensor[(2), int32] */;
  %258 = cast(%var_7047, dtype="bool") /* ty=Tensor[(24, 2), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %260 = cast(%var_7057, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
  %261 = shape_of(%var_7047, dtype="int32") /* ty=Tensor[(2), int32] */;
  %262 = cast(%var_7047, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %264 = %236.0;
  %265 = %239.0;
  %266 = multiply(%246, %247) /* ty=Tensor[(8, 30), int16] */;
  %267 = %255.5;
  %268 = less(%258, %259) /* ty=Tensor[(24, 2), bool] */;
  %269 = maximum(%262, %263) /* ty=Tensor[(24, 2), int16] */;
  (%249, %264, %265, %var_7037, %266, %267, %var_7048, %268, %269)
}

def @func_8020() -> (Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) {
  %270 = @func_5267() /* ty=(Tensor[(7, 6, 3), bool],) */;
  %271 = @func_5761() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) */;
  %272 = cast(meta[relay.Constant][17] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %273 = reshape(%272, newshape=[220]) /* ty=Tensor[(220), uint64] */;
  %274 = @func_3333(%273) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
  %275 = %270.0;
  %276 = %271.2;
  %277 = %274.1;
  (%275, %276, %277, meta[relay.Constant][17] /* ty=Tensor[(220), uint64] */)
}

def @func_1875(%var_1855: Tensor[(7, 6, 3), float64]) -> (Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) {
  %278 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %279 = %278.0;
  %280 = cast(%var_1855, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %284 = greater(%282, %283) /* ty=Tensor[(7, 6, 3), bool] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %286 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %287 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %288 = cast(meta[relay.Constant][19] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %289 = reshape(%286, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %290 = reshape(%287, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %291 = reshape(%288, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %292 = @func_1419(%289, %290, %291) /* ty=(Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) */;
  %293 = sin(%285) /* ty=Tensor[(7, 6, 3), float32] */;
  %294 = %292.5;
  (%293, %294, meta[relay.Constant][18] /* ty=Tensor[(630), uint8] */, meta[relay.Constant][19] /* ty=Tensor[(2548), uint64] */)
}

def @func_8036() -> (Tensor[(7, 6, 3), float64],) {
  %295 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
  %296 = %295.0;
  (%296,)
}

def @func_6742() -> Tensor[(7, 6, 3), float64] {
  @func_6585() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_3055(%var_3031: Tensor[(2, 11, 11), uint8], %var_3032: Tensor[(2, 11, 11), uint8]) -> (Tensor[(2, 11, 11), uint8],) {
  %297 = cast(%var_3032, dtype="uint8") /* ty=Tensor[(2, 11, 11), uint8] */;
  %298 = shape_of(%var_3031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%var_3031, dtype="uint8") /* ty=Tensor[(2, 11, 11), uint8] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %301 = minimum(%299, %300) /* ty=Tensor[(2, 11, 11), uint8] */;
  (%301,)
}

def @func_3277(%var_3235: uint16, %var_3236: Tensor[(1120), uint16], %var_3237: Tensor[(312), bool], %var_3238: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) {
  %302 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %303 = %302.0;
  %304 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  %305 = cast(%304, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
  %306 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%303, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %309 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
  %310 = cast(%var_3235, dtype="uint16") /* ty=uint16 */;
  %311 = cast(%var_3236, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %312 = cast(%var_3237, dtype="bool") /* ty=Tensor[(312), bool] */;
  %313 = cast(%var_3238, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %314 = %309.0;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %316 = reshape(%310, newshape=[]) /* ty=uint16 */;
  %317 = reshape(%311, newshape=[8, 140]) /* ty=Tensor[(8, 140), uint16] */;
  %318 = reshape(%312, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %319 = reshape(%313, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %320 = reshape(%315, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %321 = @func_1372(%316, %317, %318, %319, %320) /* ty=(Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) */;
  %322 = cast(%var_3235, dtype="uint16") /* ty=uint16 */;
  %323 = cast(%var_3236, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %324 = reshape(%322, newshape=[]) /* ty=uint16 */;
  %325 = reshape(%323, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %326 = bitwise_or(%307, %308) /* ty=Tensor[(7, 6, 3), int8] */;
  %327 = %321.4;
  %328 = @func_381(%324, %325) /* ty=Tensor[(14, 10, 8), uint16] */;
  (%326, %314, %327, %var_3235, %var_3236, %var_3237, %var_3238, %328)
}

def @func_5547() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) {
  %329 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %330 = @func_3866() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(312), bool]) */;
  %331 = %330.2;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(312), float64] */;
  %333 = %329.0;
  %334 = @func_5078() /* ty=Tensor[(7, 6, 3), float64] */;
  %335 = erf(%332) /* ty=Tensor[(312), float64] */;
  (%333, %334, %335)
}

def @func_6561() -> (Tensor[(630), uint8],) {
  %336 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %337 = %336.1;
  (%337,)
}

def @func_6643(%var_6623: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(312), bool]) {
  %338 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %339 = %338.0;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %341 = cast(%var_6623, dtype="bool") /* ty=Tensor[(312), bool] */;
  %342 = reshape(%341, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %343 = @func_5651(%342) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) */;
  %344 = log2(%340) /* ty=Tensor[(7, 6, 3), float64] */;
  %345 = %343.1;
  (%344, %345, %var_6623)
}

def @func_3074() -> (Tensor[(630), uint8],) {
  %346 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %347 = %346.1;
  (%347,)
}

def @func_2162() -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) {
  %348 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %350 = reshape(%349, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %351 = @func_1875(%350) /* ty=(Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
  %352 = %351.2;
  (%348, %352)
}

def @func_6655() -> (Tensor[(7, 6, 3), bool], Tensor[(13, 14, 14), uint64], Tensor[(14, 182), uint64]) {
  %353 = @func_5267() /* ty=(Tensor[(7, 6, 3), bool],) */;
  %354 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 182), uint64] */, dtype="uint64") /* ty=Tensor[(14, 182), uint64] */;
  %355 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 182), uint64] */, dtype="uint64") /* ty=Tensor[(14, 182), uint64] */;
  %356 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 182), uint64] */, dtype="uint64") /* ty=Tensor[(14, 182), uint64] */;
  %357 = reshape(%354, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %358 = reshape(%355, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %359 = reshape(%356, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %360 = @func_163(%357, %358, %359) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %361 = %353.0;
  %362 = %360.1;
  (%361, %362, meta[relay.Constant][20] /* ty=Tensor[(14, 182), uint64] */)
}

def @func_7436(%var_7432: Tensor[(9, 16, 15), float32]) -> (Tensor[(9, 16, 15), float32],) {
  %363 = cast(%var_7432, dtype="float32") /* ty=Tensor[(9, 16, 15), float32] */;
  %364 = atanh(%363) /* ty=Tensor[(9, 16, 15), float32] */;
  (%364,)
}

def @func_1709(%var_1671: Tensor[(7, 6, 3), float64], %var_1687: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) {
  %365 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %366 = cast(%var_1671, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %370 = cast(%var_1687, dtype="bool") /* ty=Tensor[(312), bool] */;
  %371 = reshape(%370, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %372 = @func_1540(%371) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
  %373 = %372.1;
  %374 = cast(%var_1687, dtype="int16") /* ty=Tensor[(312), int16] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %378 = greater_equal(%368, %369) /* ty=Tensor[(7, 6, 3), bool] */;
  %379 = minimum(%376, %377) /* ty=Tensor[(13, 8, 3), int16] */;
  (%378, %379)
}

def @func_2376(%var_2352: Tensor[(126), float64], %var_2354: Tensor[(312), bool], %var_2355: Tensor[(2548), uint64]) -> (Tensor[(14, 15, 11), float32], Tensor[(7, 6, 3), float64], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %380 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 15, 11), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 11), float32] */;
  %381 = cast(%var_2352, dtype="float64") /* ty=Tensor[(126), float64] */;
  %382 = cast(meta[relay.Constant][22] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %383 = cast(%var_2354, dtype="bool") /* ty=Tensor[(312), bool] */;
  %384 = cast(%var_2355, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %385 = reshape(%381, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %386 = reshape(%382, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %387 = reshape(%383, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %388 = reshape(%384, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %389 = @func_1118(%385, %386, %387, %388) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %390 = tan(%380) /* ty=Tensor[(14, 15, 11), float32] */;
  %391 = %389.4;
  (%390, %391, %var_2352, meta[relay.Constant][22] /* ty=Tensor[(1120), uint16] */, %var_2354, %var_2355)
}

def @func_4315() -> (Tensor[(7, 6, 3), float64],) {
  %392 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
  (%392,)
}

def @func_1229() -> Tensor[(7, 6, 3), float64] {
  %393 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  sqrt(%395) /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_6585() -> Tensor[(7, 6, 3), float64] {
  %396 = @func_4086() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) */;
  %396.1
}

def @func_7872() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) {
  %397 = @func_4759() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) */;
  %398 = @func_5095() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %399 = %397.3;
  %400 = %398.0;
  (%399, %400)
}

def @func_1540(%var_1533: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) {
  %401 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %403 = cast(meta[relay.Constant][23] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %404 = cast(%var_1533, dtype="bool") /* ty=Tensor[(312), bool] */;
  %405 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 364), uint64] */, dtype="uint64") /* ty=Tensor[(7, 364), uint64] */;
  %406 = reshape(%402, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %407 = reshape(%403, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %408 = reshape(%404, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %409 = reshape(%405, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %410 = @func_1118(%406, %407, %408, %409) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %411 = %410.6;
  (%401, %411, meta[relay.Constant][23] /* ty=Tensor[(1120), uint16] */, %var_1533, meta[relay.Constant][24] /* ty=Tensor[(7, 364), uint64] */)
}

def @func_828(%var_793: Tensor[(6, 16, 6), int8], %var_804: uint16, %var_819: Tensor[(2548), uint64]) -> (Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) {
  %412 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 16, 6), int8] */, dtype="bool") /* ty=Tensor[(6, 16, 6), bool] */;
  %413 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_793, dtype="bool") /* ty=Tensor[(6, 16, 6), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = cast(%var_804, dtype="uint16") /* ty=uint16 */;
  %417 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 280), uint16] */, dtype="uint16") /* ty=Tensor[(4, 280), uint16] */;
  %418 = reshape(%416, newshape=[]) /* ty=uint16 */;
  %419 = reshape(%417, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %420 = cast(%var_804, dtype="uint16") /* ty=uint16 */;
  %421 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 280), uint16] */, dtype="uint16") /* ty=Tensor[(4, 280), uint16] */;
  %422 = reshape(%420, newshape=[]) /* ty=uint16 */;
  %423 = reshape(%421, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %424 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %425 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %426 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %427 = reshape(%424, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %428 = reshape(%425, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %429 = reshape(%426, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %430 = @func_163(%427, %428, %429) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %433 = cast(%431, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %434 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %435 = reshape(%432, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %436 = reshape(%433, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %437 = reshape(%434, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %438 = @func_163(%435, %436, %437) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %439 = equal(%414, %415) /* ty=Tensor[(6, 16, 6), bool] */;
  %440 = @func_381(%418, %419) /* ty=Tensor[(14, 10, 8), uint16] */;
  %441 = @func_381(%422, %423) /* ty=Tensor[(14, 10, 8), uint16] */;
  %442 = %438.0;
  (%439, %440, %var_804, meta[relay.Constant][26] /* ty=Tensor[(4, 280), uint16] */, %441, %431, %var_819, %442)
}

def @func_2534(%var_2498: Tensor[(240), float32], %var_2502: Tensor[(630), uint8]) -> (Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) {
  %443 = cast(%var_2498, dtype="float32") /* ty=Tensor[(240), float32] */;
  %444 = reshape(%443, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %445 = cast(%var_2502, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %446 = reshape(%445, newshape=[630]) /* ty=Tensor[(630), uint8] */;
  %447 = @func_2204(%446) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
  %448 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %449 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %450 = @func_1953(%444) /* ty=Tensor[(16, 1, 15), float32] */;
  %451 = %447.2;
  %452 = %448.1;
  (%449, %450, %var_2498, %451, %var_2502, %452)
}

def @func_2760(%var_2745: Tensor[(4, 16, 12), float32], %var_2746: Tensor[(4, 16, 12), float32]) -> Tensor[(4, 16, 12), bool] {
  %453 = cast(%var_2746, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %454 = shape_of(%var_2745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_2745, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%455, %456) /* ty=Tensor[(4, 16, 12), bool] */
}

def @main(%var_8582: Tensor[(312), bool], %var_8583: Tensor[(2548), uint64], %var_8589: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), bool]) {
  %457 = cast(%var_8582, dtype="bool") /* ty=Tensor[(312), bool] */;
  %458 = cast(%var_8583, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %459 = reshape(%457, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %460 = reshape(%458, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %461 = @func_3314(%459, %460) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %462 = cast(%var_8589, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %463 = shape_of(%var_8583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %464 = cast(%var_8583, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?), bool] */;
  %466 = @func_7737() /* ty=Tensor[(7, 6, 3), bool] */;
  %467 = %461.0;
  %468 = greater_equal(%464, %465) /* ty=Tensor[(2548), bool] */;
  (%466, %467, %var_8582, %468)
}

def @func_4987() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %469 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %470 = @func_2218() /* ty=Tensor[(630), uint8] */;
  %471 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %472 = %469.0;
  (%470, %471, %472)
}

def @func_5816() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16], Tensor[(7, 6, 3), float64]) {
  %473 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %474 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
  %475 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %476 = %473.1;
  %477 = @func_4337() /* ty=Tensor[(7, 6, 3), float64] */;
  %478 = %474.3;
  %479 = %475.0;
  (%476, %477, %478, %479)
}

def @func_6533() -> Tensor[(240), float32] {
  %480 = @func_6322() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) */;
  %480.2
}

def @func_8144() -> (Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), float64]) {
  %481 = @func_6655() /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 14, 14), uint64], Tensor[(14, 182), uint64]) */;
  %482 = %481.1;
  %483 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
  (%482, %483)
}

def @func_231(%var_187: Tensor[(13, 8, 3), bool], %var_188: Tensor[(13, 8, 3), bool], %var_197: Tensor[(2548), uint64]) -> (Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) {
  %484 = cast(%var_188, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %485 = shape_of(%var_187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_187, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %489 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %490 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %491 = reshape(%488, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %492 = reshape(%489, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %493 = reshape(%490, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %494 = @func_163(%491, %492, %493) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %495 = %494.0;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %497 = exp(%496) /* ty=Tensor[(13, 14, 14), float32] */;
  %498 = cast(%var_197, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = cast(%var_187, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %503 = shape_of(%var_188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_188, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %506 = cast(%497, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %507 = cast(%495, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %508 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %509 = reshape(%506, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %510 = reshape(%507, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %511 = reshape(%508, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %512 = @func_163(%509, %510, %511) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %513 = logical_and(%486, %487) /* ty=Tensor[(13, 8, 3), bool] */;
  %514 = logical_or(%500, %501) /* ty=Tensor[(13, 14, 14), bool] */;
  %515 = subtract(%504, %505) /* ty=Tensor[(13, 8, 3), float32] */;
  %516 = %512.1;
  (%513, %514, %515, %516)
}

def @func_2945() -> (Tensor[(7, 6, 3), float64],) {
  %517 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %518 = %517.0;
  (%518,)
}

def @func_3314(%var_3309: Tensor[(312), bool], %var_3310: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %519 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %522 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 560), uint16] */, dtype="uint16") /* ty=Tensor[(2, 560), uint16] */;
  %523 = cast(%var_3309, dtype="bool") /* ty=Tensor[(312), bool] */;
  %524 = cast(%var_3310, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %525 = reshape(%521, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %526 = reshape(%522, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %527 = reshape(%523, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %528 = reshape(%524, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %529 = @func_1118(%525, %526, %527, %528) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %530 = %529.0;
  (%520, %530, meta[relay.Constant][27] /* ty=Tensor[(2, 560), uint16] */, %var_3309, %var_3310)
}

def @func_7126() -> (Tensor[(7, 6, 3), float64],) {
  %531 = @func_2586() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %532 = %531.0;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %534 = rsqrt(%533) /* ty=Tensor[(7, 6, 3), float64] */;
  (%534,)
}

def @func_2218() -> Tensor[(630), uint8] {
  %535 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %535.1
}

def @func_7289(%var_7272: Tensor[(240), float32]) -> (Tensor[(630), uint8], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) {
  %536 = cast(%var_7272, dtype="float32") /* ty=Tensor[(240), float32] */;
  %537 = reshape(%536, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %538 = @func_2218() /* ty=Tensor[(630), uint8] */;
  %539 = @func_1953(%537) /* ty=Tensor[(16, 1, 15), float32] */;
  %540 = @func_6210() /* ty=Tensor[(7, 6, 3), float64] */;
  (%538, %539, %var_7272, %540)
}

def @func_4595() -> Tensor[(7, 6, 3), int64] {
  %541 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %542 = %541.0;
  %543 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="int64") /* ty=Tensor[(7, 6, 3), int64] */;
  %546 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%542, dtype="int64") /* ty=Tensor[(7, 6, 3), int64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%547, %548) /* ty=Tensor[(7, 6, 3), int64] */
}

def @func_2065(%var_2024: Tensor[(10, 63), uint8], %var_2025: Tensor[(2548), uint64], %var_2048: Tensor[(576), int8]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32], Tensor[(1120), uint16], Tensor[(10, 63), uint8], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16], Tensor[(576), int8], uint16) {
  %549 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %550 = %549.0;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %552 = cast(%var_2024, dtype="uint8") /* ty=Tensor[(10, 63), uint8] */;
  %553 = cast(%var_2025, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %554 = reshape(%552, newshape=[630, 1]) /* ty=Tensor[(630, 1), uint8] */;
  %555 = reshape(%553, newshape=[2548, 1]) /* ty=Tensor[(2548, 1), uint64] */;
  %556 = @func_1628(%554, %555) /* ty=(Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) */;
  %557 = cast(%var_2048, dtype="int8") /* ty=Tensor[(576), int8] */;
  %558 = cast(meta[relay.Constant][28] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %559 = cast(%var_2025, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %560 = reshape(%557, newshape=[6, 16, 6]) /* ty=Tensor[(6, 16, 6), int8] */;
  %561 = reshape(%558, newshape=[]) /* ty=uint16 */;
  %562 = reshape(%559, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %563 = @func_828(%560, %561, %562) /* ty=(Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) */;
  %564 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %565 = acos(%551) /* ty=Tensor[(7, 6, 3), float32] */;
  %566 = %556.0;
  %567 = %563.4;
  (%564, %565, %566, %var_2024, %var_2025, %567, %var_2048, meta[relay.Constant][28] /* ty=uint16 */)
}

def @func_5267() -> (Tensor[(7, 6, 3), bool],) {
  %568 = @func_1929() /* ty=(Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64]) */;
  %569 = %568.0;
  (%569,)
}

def @func_6997() -> (Tensor[(6, 4, 8), float64],) {
  %570 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
  %571 = exp(%570) /* ty=Tensor[(6, 4, 8), float64] */;
  (%571,)
}

def @func_1581(%var_1556: Tensor[(7, 6, 3), float64]) -> (Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) {
  %572 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %573 = cast(%var_1556, dtype="int32") /* ty=Tensor[(7, 6, 3), int32] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="int32") /* ty=Tensor[(7, 6, 3), int32] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %577 = cast(%572, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %578 = atan(%577) /* ty=Tensor[(7, 6, 3), float64] */;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %580 = erf(%579) /* ty=Tensor[(7, 6, 3), float64] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %582 = subtract(%575, %576) /* ty=Tensor[(7, 6, 3), int32] */;
  %583 = tan(%581) /* ty=Tensor[(7, 6, 3), float32] */;
  (%582, %583)
}

def @func_7802() -> (Tensor[(13, 14, 14), float32], Tensor[(13, 14, 14), float64]) {
  %584 = @func_7486() /* ty=Tensor[(13, 14, 14), bool] */;
  %585 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 14, 14), bool] */, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %589 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 14, 14), bool] */, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %590 = floor_mod(%587, %588) /* ty=Tensor[(13, 14, 14), float32] */;
  %591 = acosh(%589) /* ty=Tensor[(13, 14, 14), float64] */;
  (%590, %591)
}

def @func_7728(%var_7725: Tensor[(240), float32]) -> (Tensor[(13, 14, 14), bool], Tensor[(630), uint8], Tensor[(240), float32], Tensor[(630), uint8]) {
  %592 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %593 = cast(%var_7725, dtype="float32") /* ty=Tensor[(240), float32] */;
  %594 = cast(meta[relay.Constant][31] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %595 = reshape(%593, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %596 = reshape(%594, newshape=[630]) /* ty=Tensor[(630), uint8] */;
  %597 = @func_2534(%595, %596) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) */;
  %598 = %592.0;
  %599 = %597.5;
  (%598, %599, %var_7725, meta[relay.Constant][31] /* ty=Tensor[(630), uint8] */)
}

def @func_5761() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) {
  %600 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %601 = cast(meta[relay.Constant][32] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %602 = cast(meta[relay.Constant][33] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %603 = reshape(%601, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %604 = reshape(%602, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %605 = @func_1709(%603, %604) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
  %606 = %600.0;
  %607 = %605.0;
  (%606, %607, meta[relay.Constant][32] /* ty=Tensor[(126), float64] */, meta[relay.Constant][33] /* ty=Tensor[(312), bool] */)
}

def @func_6322() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) {
  %608 = @func_5078() /* ty=Tensor[(7, 6, 3), float64] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %610 = @func_4759() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) */;
  %611 = @func_5180() /* ty=Tensor[(7, 6, 3), float64] */;
  %612 = asin(%609) /* ty=Tensor[(7, 6, 3), float64] */;
  %613 = %610.4;
  %614 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  (%611, %612, %613, %614)
}

def @func_4785() -> (Tensor[(7, 6, 3), float64],) {
  %615 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %616 = %615.0;
  (%616,)
}

def @func_8231() -> Tensor[(220), float32] {
  %617 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
  %618 = %617.2;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(220), float32] */;
  sigmoid(%619) /* ty=Tensor[(220), float32] */
}

def @func_2586() -> (Tensor[(7, 6, 3), float64],) {
  %620 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %621 = %620.0;
  (%621,)
}

def @func_5180() -> Tensor[(7, 6, 3), float64] {
  %622 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %622.0
}

def @func_2187() -> (Tensor[(13, 14, 14), bool],) {
  %623 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %624 = %623.1;
  (%624,)
}

def @func_4337() -> Tensor[(7, 6, 3), float64] {
  %625 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %625.3
}

def @func_6039() -> (Tensor[(576), bool], Tensor[(576), int8], Tensor[(13, 14, 14), float64]) {
  %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %627 = reshape(%626, newshape=[576]) /* ty=Tensor[(576), int8] */;
  %628 = @func_3527(%627) /* ty=(Tensor[(576), bool], Tensor[(13, 14, 14), float64]) */;
  %629 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %630 = %629.0;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %632 = %628.0;
  %633 = log2(%631) /* ty=Tensor[(13, 14, 14), float64] */;
  (%632, meta[relay.Constant][34] /* ty=Tensor[(576), int8] */, %633)
}

def @func_5737() -> (Tensor[(7, 6, 3), float32],) {
  %634 = @func_4542() /* ty=(Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
  %635 = %634.2;
  (%635,)
}

def @func_2259() -> Tensor[(7, 6, 3), float64] {
  %636 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %636.0
}

def @func_1118(%var_1060: Tensor[(7, 6, 3), float64], %var_1075: Tensor[(1120), uint16], %var_1093: Tensor[(312, 1), bool], %var_1095: Tensor[(13, 14, 14), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) {
  %637 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %638 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %639 = cast(%var_1075, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %640 = reshape(%638, newshape=[]) /* ty=uint16 */;
  %641 = reshape(%639, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %642 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %643 = %642.0;
  %644 = cast(%var_1060, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = logical_or(%646, %647) /* ty=Tensor[(7, 6, 3), bool] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %650 = cast(%var_1093, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
  %651 = cast(%var_1093, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
  %652 = cast(meta[relay.Constant][36] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %653 = reshape(%650, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %654 = reshape(%651, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %655 = reshape(%652, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %656 = @func_231(%653, %654, %655) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
  %657 = cast(meta[relay.Constant][36] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %658 = cast(meta[relay.Constant][36] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %659 = cast(meta[relay.Constant][36] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %660 = reshape(%657, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %661 = reshape(%658, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %662 = reshape(%659, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %663 = @func_163(%660, %661, %662) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %664 = %663.1;
  %665 = cast(%var_1095, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %669 = %637.0;
  %670 = @func_381(%640, %641) /* ty=Tensor[(14, 10, 8), uint16] */;
  %671 = sinh(%649) /* ty=Tensor[(7, 6, 3), float64] */;
  %672 = %656.2;
  %673 = minimum(%667, %668) /* ty=Tensor[(13, 14, 14), uint16] */;
  (%669, %670, meta[relay.Constant][35] /* ty=uint16 */, %var_1075, %671, meta[relay.Constant][36] /* ty=Tensor[(2548), uint64] */, %672, %var_1093, %673)
}

def @func_1929() -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64]) {
  %674 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %675 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 6, 3), float64] */, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %680 = logical_and(%677, %678) /* ty=Tensor[(7, 6, 3), bool] */;
  %681 = %679.0;
  (%680, %681)
}

def @func_3527(%var_3509: Tensor[(576), int8]) -> (Tensor[(576), bool], Tensor[(13, 14, 14), float64]) {
  %682 = @func_3459() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) */;
  %683 = %682.3;
  %684 = cast(%var_3509, dtype="bool") /* ty=Tensor[(576), bool] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(1), int32] */;
  %686 = cast(%683, dtype="bool") /* ty=Tensor[(576), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?), bool] */;
  %688 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %689 = %688.0;
  %690 = cast(%689, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %691 = equal(%686, %687) /* ty=Tensor[(576), bool] */;
  %692 = erf(%690) /* ty=Tensor[(13, 14, 14), float64] */;
  (%691, %692)
}

def @func_8453(%var_8446: Tensor[(6, 4, 8), float64]) -> Tensor[(6, 4, 8), bool] {
  %693 = @func_6997() /* ty=(Tensor[(6, 4, 8), float64],) */;
  %694 = %693.0;
  %695 = cast(%var_8446, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%697, %698) /* ty=Tensor[(6, 4, 8), bool] */
}

def @func_6952() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16]) {
  %699 = @func_6561() /* ty=(Tensor[(630), uint8],) */;
  %700 = cast(meta[relay.Constant][38] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %701 = reshape(%700, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %702 = @func_5245(%701) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 14, 13), float64], Tensor[(2548), float64], Tensor[(2548), uint64], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(630), uint8], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) */;
  %703 = %699.0;
  %704 = %702.9;
  (%703, %704, meta[relay.Constant][38] /* ty=Tensor[(1120), uint16] */)
}

def @func_4031(%var_4019: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %705 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
  %706 = cast(%var_4019, dtype="bool") /* ty=Tensor[(312), bool] */;
  %707 = cast(meta[relay.Constant][39] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %708 = reshape(%706, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %709 = reshape(%707, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %710 = @func_3314(%708, %709) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %711 = %705.0;
  %712 = %710.1;
  (%711, %712, %var_4019, meta[relay.Constant][39] /* ty=Tensor[(2548), uint64] */)
}

def @func_3999(%var_3986: Tensor[(10, 63), uint8], %var_3992: Tensor[(242), uint8]) -> (Tensor[(10, 63), bool], Tensor[(2, 11, 11), uint8], Tensor[(242), uint8]) {
  %713 = @func_3459() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) */;
  %714 = %713.1;
  %715 = cast(%var_3986, dtype="bool") /* ty=Tensor[(10, 63), bool] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(2), int32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(10, 63), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %719 = cast(%var_3992, dtype="uint8") /* ty=Tensor[(242), uint8] */;
  %720 = cast(%var_3992, dtype="uint8") /* ty=Tensor[(242), uint8] */;
  %721 = reshape(%719, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint8] */;
  %722 = reshape(%720, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint8] */;
  %723 = @func_3055(%721, %722) /* ty=(Tensor[(2, 11, 11), uint8],) */;
  %724 = not_equal(%717, %718) /* ty=Tensor[(10, 63), bool] */;
  %725 = %723.0;
  (%724, %725, %var_3992)
}

def @func_3459() -> (Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) {
  %726 = @func_2414() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %727 = cast(meta[relay.Constant][40] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %728 = cast(meta[relay.Constant][41] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %729 = cast(meta[relay.Constant][42] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %730 = reshape(%727, newshape=[10, 63]) /* ty=Tensor[(10, 63), uint8] */;
  %731 = reshape(%728, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %732 = reshape(%729, newshape=[576]) /* ty=Tensor[(576), int8] */;
  %733 = @func_2065(%730, %731, %732) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32], Tensor[(1120), uint16], Tensor[(10, 63), uint8], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16], Tensor[(576), int8], uint16) */;
  %734 = cast(meta[relay.Constant][43] /* ty=Tensor[(2548), uint64] */, dtype="int64") /* ty=Tensor[(2548), int64] */;
  %735 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(2548), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %736 = cast(meta[relay.Constant][41] /* ty=Tensor[(2548), uint64] */, dtype="int64") /* ty=Tensor[(2548), int64] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?), int64] */;
  %738 = %726.1;
  %739 = %733.3;
  %740 = minimum(%736, %737) /* ty=Tensor[(2548), int64] */;
  (%738, %739, meta[relay.Constant][40] /* ty=Tensor[(630), uint8] */, meta[relay.Constant][42] /* ty=Tensor[(576), int8] */, %740)
}

def @func_6694(%var_6692: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) {
  %741 = @func_5267() /* ty=(Tensor[(7, 6, 3), bool],) */;
  %742 = %741.0;
  %743 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 6, 3), bool] */, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %747 = cast(%742, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %748 = cast(%var_6692, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %749 = reshape(%748, newshape=[220]) /* ty=Tensor[(220), uint64] */;
  %750 = @func_3333(%749) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
  %751 = less(%745, %746) /* ty=Tensor[(7, 6, 3), bool] */;
  %752 = exp(%747) /* ty=Tensor[(7, 6, 3), float32] */;
  %753 = %750.0;
  (%751, %752, %753, %var_6692)
}

def @func_8419() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %754 = @func_5180() /* ty=Tensor[(7, 6, 3), float64] */;
  %755 = cast(%754, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %756 = @func_5552() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %757 = acosh(%755) /* ty=Tensor[(7, 6, 3), float64] */;
  %758 = %756.0;
  (%757, %758)
}

def @func_5078() -> Tensor[(7, 6, 3), float64] {
  %759 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %759.0
}

def @func_7253(%var_7185: Tensor[(13, 1, 4), float32], %var_7204: Tensor[(126), float64], %var_7233: Tensor[(105, 1), float64]) -> (Tensor[(13, ?, 4), bool], Tensor[(7, 6, 3), float32], Tensor[(126), float64], Tensor[(13, ?, 4), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(105, 1), float64], Tensor[(7, 6, 3), float64]) {
  %760 = cast(%var_7185, dtype="float32") /* ty=Tensor[(13, 1, 4), float32] */;
  %761 = sin(%760) /* ty=Tensor[(13, 1, 4), float32] */;
  %762 = cast(%var_7185, dtype="uint8") /* ty=Tensor[(13, 1, 4), uint8] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="uint8") /* ty=Tensor[(13, 1, 4), uint8] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %766 = bitwise_and(%764, %765) /* ty=Tensor[(13, ?, 4), uint8] */;
  %767 = cast(%761, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="bool") /* ty=Tensor[(13, ?, 4), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = cast(%var_7204, dtype="float64") /* ty=Tensor[(126), float64] */;
  %772 = reshape(%771, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %773 = cast(%766, dtype="float32") /* ty=Tensor[(13, ?, 4), float32] */;
  %774 = cast(meta[relay.Constant][45] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %775 = reshape(%774, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %776 = @func_6643(%775) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(312), bool]) */;
  %777 = cast(%var_7233, dtype="float64") /* ty=Tensor[(105, 1), float64] */;
  %778 = reshape(%777, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %779 = @func_5970(%778) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %780 = @func_6857() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
  %781 = logical_or(%769, %770) /* ty=Tensor[(13, ?, 4), bool] */;
  %782 = @func_1280(%772) /* ty=Tensor[(7, 6, 3), float32] */;
  %783 = exp(%773) /* ty=Tensor[(13, ?, 4), float32] */;
  %784 = %776.2;
  %785 = %779.2;
  %786 = %780.0;
  (%781, %782, %var_7204, %783, %784, meta[relay.Constant][45] /* ty=Tensor[(312), bool] */, %785, %var_7233, %786)
}

def @func_4142(%var_4095: Tensor[(312), bool], %var_4096: Tensor[(2548), uint64], %var_4128: uint16) -> (Tensor[(630), uint8], Tensor[(13, 14, 14), uint16], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(13, 14, 14), bool], Tensor[(312), bool], uint16, Tensor[(312), bool], Tensor[(220), uint64], Tensor[(16, 1, 15), float32], Tensor[(1, 240), float32]) {
  %787 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %788 = cast(meta[relay.Constant][46] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %789 = cast(meta[relay.Constant][47] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %790 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
  %791 = cast(%var_4096, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %792 = reshape(%788, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %793 = reshape(%789, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %794 = reshape(%790, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %795 = reshape(%791, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %796 = @func_1118(%792, %793, %794, %795) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %797 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
  %798 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
  %799 = %796.8;
  %800 = cast(%799, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %801 = reshape(%797, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %802 = reshape(%798, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %803 = reshape(%800, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %804 = @func_231(%801, %802, %803) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
  %805 = cast(%var_4128, dtype="uint16") /* ty=uint16 */;
  %806 = cast(meta[relay.Constant][47] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %807 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
  %808 = cast(%799, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %809 = reshape(%805, newshape=[]) /* ty=uint16 */;
  %810 = reshape(%806, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %811 = reshape(%807, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %812 = reshape(%808, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %813 = @func_3277(%809, %810, %811, %812) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) */;
  %814 = cast(meta[relay.Constant][48] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %815 = cast(meta[relay.Constant][48] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %816 = reshape(%814, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %817 = reshape(%815, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %818 = @func_335(%816, %817) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
  %819 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
  %820 = reshape(%819, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %821 = %787.1;
  %822 = %804.1;
  %823 = %813.5;
  %824 = %818.1;
  %825 = @func_1953(%820) /* ty=Tensor[(16, 1, 15), float32] */;
  (%821, %799, meta[relay.Constant][46] /* ty=Tensor[(126), float64] */, meta[relay.Constant][47] /* ty=Tensor[(1120), uint16] */, %var_4095, %var_4096, %822, %823, %var_4128, %824, meta[relay.Constant][48] /* ty=Tensor[(220), uint64] */, %825, meta[relay.Constant][49] /* ty=Tensor[(1, 240), float32] */)
}

def @func_3677() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
  %826 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %827 = cast(%826, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %828 = reshape(%827, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %829 = @func_1280(%828) /* ty=Tensor[(7, 6, 3), float32] */;
  (%826, %829)
}

def @func_3370(%var_3355: Tensor[(8, 30), float32]) -> (Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) {
  %830 = @func_2311() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %831 = cast(%var_3355, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %832 = %830.1;
  %833 = cast(%832, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %834 = reshape(%831, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %835 = reshape(%833, newshape=[630]) /* ty=Tensor[(630), uint8] */;
  %836 = @func_2534(%834, %835) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) */;
  %837 = %836.5;
  (%832, %837, %var_3355)
}

def @func_7574() -> (Tensor[(240), float32],) {
  %838 = @func_6533() /* ty=Tensor[(240), float32] */;
  (%838,)
}

def @func_4400(%var_4396: Tensor[(2548), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint32]) {
  %839 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %840 = cast(meta[relay.Constant][50] /* ty=Tensor[(2548), bool] */, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %841 = reshape(%840, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
  %842 = @func_3016(%841) /* ty=(Tensor[(13, 14, 14), bool],) */;
  %843 = cast(%var_4396, dtype="uint32") /* ty=Tensor[(2548), uint32] */;
  %844 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(2548), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %845 = cast(meta[relay.Constant][50] /* ty=Tensor[(2548), bool] */, dtype="uint32") /* ty=Tensor[(2548), uint32] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %847 = %839.4;
  %848 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
  %849 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %850 = %842.0;
  %851 = bitwise_and(%845, %846) /* ty=Tensor[(2548), uint32] */;
  (%847, %848, %849, %850, %851)
}

def @func_6046() -> (Tensor[(7, 6, 3), float64],) {
  %852 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
  (%852,)
}

def @func_8200(%var_8192: Tensor[(312), bool], %var_8198: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), int16], Tensor[(312), bool], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) {
  %853 = @func_2586() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %854 = %853.0;
  %855 = cast(%854, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %856 = cast(%var_8192, dtype="bool") /* ty=Tensor[(312), bool] */;
  %857 = reshape(%855, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %858 = reshape(%856, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %859 = @func_1709(%857, %858) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
  %860 = cast(%var_8198, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %861 = reshape(%860, newshape=[220]) /* ty=Tensor[(220), uint64] */;
  %862 = @func_3333(%861) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
  %863 = %859.1;
  %864 = %862.0;
  (%854, %863, %var_8192, %864, %var_8198)
}

def @func_6401(%var_6387: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), float32],) {
  %865 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %866 = %865.0;
  %867 = cast(%var_6387, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%866, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %871 = divide(%869, %870) /* ty=Tensor[(13, 14, 14), float32] */;
  (%871,)
}

def @func_4599() -> (Tensor[(7, 6, 3), float32],) {
  %872 = @func_3677() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
  %873 = %872.1;
  (%873,)
}

def @func_3333(%var_3329: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) {
  %874 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %875 = %874.0;
  %876 = cast(%875, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %877 = cast(%var_3329, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %878 = cast(%var_3329, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %879 = reshape(%877, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %880 = reshape(%878, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %881 = @func_335(%879, %880) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
  %882 = log(%876) /* ty=Tensor[(7, 6, 3), float64] */;
  %883 = %881.0;
  (%882, %883, %var_3329)
}

def @func_5552() -> (Tensor[(7, 6, 3), float64],) {
  %884 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
  (%884,)
}

def @func_6368(%var_6362: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %885 = @func_4987() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %886 = cast(%var_6362, dtype="bool") /* ty=Tensor[(312), bool] */;
  %887 = cast(meta[relay.Constant][51] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %888 = reshape(%886, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %889 = reshape(%887, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %890 = @func_3760(%888, %889) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %891 = %885.2;
  %892 = %890.3;
  (%891, %892, %var_6362, meta[relay.Constant][51] /* ty=Tensor[(2548), uint64] */)
}

def @func_997() -> (Tensor[(7, 6, 3), float64],) {
  %893 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %894 = %893.0;
  (%894,)
}

def @func_1247() -> Tensor[(7, 6, 3), float64] {
  %895 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %895.0
}

def @func_5245(%var_5216: Tensor[(1120), uint16]) -> (Tensor[(7, 6, 3), float64], Tensor[(14, 14, 13), float64], Tensor[(2548), float64], Tensor[(2548), uint64], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(630), uint8], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) {
  %896 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %897 = cast(meta[relay.Constant][52] /* ty=Tensor[(2548), float64] */, dtype="float64") /* ty=Tensor[(2548), float64] */;
  %898 = reshape(%897, newshape=[14, 14, 13]) /* ty=Tensor[(14, 14, 13), float64] */;
  %899 = cast(meta[relay.Constant][53] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %900 = cast(%var_5216, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %901 = cast(meta[relay.Constant][54] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %902 = @func_3843(%898) /* ty=Tensor[(14, 14, 13), float64] */;
  %903 = cast(%902, dtype="uint64") /* ty=Tensor[(14, 14, 13), uint64] */;
  %904 = reshape(%899, newshape=[]) /* ty=uint16 */;
  %905 = reshape(%900, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %906 = reshape(%901, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %907 = reshape(%903, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %908 = @func_3277(%904, %905, %906, %907) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) */;
  %909 = %896.0;
  %910 = cast(%909, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %911 = cast(meta[relay.Constant][54] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %912 = cast(meta[relay.Constant][52] /* ty=Tensor[(2548), float64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %913 = reshape(%910, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %914 = reshape(%911, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %915 = reshape(%912, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %916 = @func_2376(%913, %914, %915) /* ty=(Tensor[(14, 15, 11), float32], Tensor[(7, 6, 3), float64], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %917 = %908.6;
  %918 = @func_2218() /* ty=Tensor[(630), uint8] */;
  %919 = %916.4;
  %920 = @func_4337() /* ty=Tensor[(7, 6, 3), float64] */;
  (%909, %902, meta[relay.Constant][52] /* ty=Tensor[(2548), float64] */, %917, meta[relay.Constant][53] /* ty=uint16 */, %var_5216, meta[relay.Constant][54] /* ty=Tensor[(312), bool] */, %918, %919, %920)
}

def @func_7503() -> Tensor[(7, 6, 3), float64] {
  %921 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %921.0
}

def @func_6210() -> Tensor[(7, 6, 3), float64] {
  @func_5078() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_1628(%var_1615: Tensor[(630, 1), uint8], %var_1616: Tensor[(2548, 1), uint64]) -> (Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) {
  %922 = cast(%var_1615, dtype="uint8") /* ty=Tensor[(630, 1), uint8] */;
  %923 = cast(%var_1615, dtype="uint8") /* ty=Tensor[(630, 1), uint8] */;
  %924 = cast(%var_1616, dtype="uint64") /* ty=Tensor[(2548, 1), uint64] */;
  %925 = reshape(%922, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %926 = reshape(%923, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %927 = reshape(%924, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %928 = @func_1419(%925, %926, %927) /* ty=(Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) */;
  %929 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %930 = cast(%929, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %931 = %928.2;
  %932 = log10(%930) /* ty=Tensor[(7, 6, 3), float64] */;
  (%931, %var_1615, %var_1616, %932)
}

def @func_3199(%var_3158: Tensor[(312, 1), bool], %var_3172: Tensor[(768), float32]) -> (Tensor[(7, 6, 3), float64], Tensor[(312, ?), int16], Tensor[(4, 16, 12), bool], Tensor[(768), float32], Tensor[(7, 6, 3), bool]) {
  %933 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %934 = cast(%933, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %935 = cast(%var_3158, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
  %936 = reshape(%934, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %937 = reshape(%935, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %938 = @func_1709(%936, %937) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
  %939 = %938.1;
  %940 = cast(%939, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
  %941 = shape_of(%var_3158, dtype="int32") /* ty=Tensor[(2), int32] */;
  %942 = cast(%var_3158, dtype="int16") /* ty=Tensor[(312, 1), int16] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %944 = cast(%var_3172, dtype="float32") /* ty=Tensor[(768), float32] */;
  %945 = reshape(%944, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %946 = @func_2873(%945) /* ty=(Tensor[(630), uint8], Tensor[(4, 16, 12), bool], Tensor[(768), float32]) */;
  %947 = cast(%933, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %948 = cast(%939, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %949 = reshape(%947, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %950 = reshape(%948, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %951 = @func_1709(%949, %950) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
  %952 = right_shift(%942, %943) /* ty=Tensor[(312, ?), int16] */;
  %953 = %946.1;
  %954 = %951.0;
  (%933, %952, %953, %var_3172, %954)
}

def @func_1940() -> Tensor[(7, 6, 3), float64] {
  @func_1302() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_1280(%var_1264: Tensor[(7, 6, 3), float64]) -> Tensor[(7, 6, 3), float32] {
  %955 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %956 = cast(%var_1264, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%958, %959) /* ty=Tensor[(7, 6, 3), float32] */
}

def @func_4086() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) {
  %960 = @func_3380() /* ty=(Tensor[(630), uint8],) */;
  %961 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
  %962 = %960.0;
  %963 = %961.0;
  (%962, %963)
}

def @func_7326() -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %964 = @func_4599() /* ty=(Tensor[(7, 6, 3), float32],) */;
  %965 = @func_5470() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %966 = @func_5547() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) */;
  %967 = %964.0;
  %968 = %965.0;
  %969 = %966.1;
  %970 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  (%967, %968, %969, %970)
}

def @func_7532(%var_7510: Tensor[(13, 13, 1), uint8], %var_7518: Tensor[(220), uint64]) -> (Tensor[(13, 13, 1), uint8], Tensor[(7, 6, 3), float64], Tensor[(220), uint64], Tensor[(630), uint8]) {
  %971 = cast(meta[relay.Constant][55] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %972 = cast(%var_7510, dtype="uint8") /* ty=Tensor[(13, 13, 1), uint8] */;
  %973 = cast(%var_7518, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %974 = reshape(%973, newshape=[220]) /* ty=Tensor[(220), uint64] */;
  %975 = @func_3333(%974) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
  %976 = @func_4987() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %977 = minimum(%971, %972) /* ty=Tensor[(13, 13, 1), uint8] */;
  %978 = %975.0;
  %979 = %976.0;
  (%977, %978, %var_7518, %979)
}

def @func_5603() -> Tensor[(13, 14, 14), float32] {
  %980 = @func_5139() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %981 = %980.0;
  %982 = cast(%981, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  log(%982) /* ty=Tensor[(13, 14, 14), float32] */
}

def @func_4183(%var_4175: Tensor[(7, 364), bool]) -> (Tensor[(10, 63), uint8], Tensor[(13, 14, 14), bool], Tensor[(7, 364), bool]) {
  %983 = @func_3459() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) */;
  %984 = cast(%var_4175, dtype="bool") /* ty=Tensor[(7, 364), bool] */;
  %985 = reshape(%984, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
  %986 = @func_3016(%985) /* ty=(Tensor[(13, 14, 14), bool],) */;
  %987 = %983.1;
  %988 = %986.0;
  (%987, %988, %var_4175)
}

def @func_2663() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), int32]) {
  %989 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %990 = %989.0;
  %991 = cast(%990, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %992 = cast(%990, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %993 = cast(%990, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %994 = reshape(%991, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %995 = reshape(%992, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %996 = reshape(%993, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %997 = @func_163(%994, %995, %996) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %998 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %999 = cast(%998, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1000 = reshape(%999, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1001 = @func_1581(%1000) /* ty=(Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) */;
  %1002 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %1003 = %997.1;
  %1004 = %1001.0;
  (%1002, %990, %998, %1003, %1004)
}

def @func_8264() -> (Tensor[(220), uint64], Tensor[(7, 6, 3), float64]) {
  %1005 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %1006 = %1005.2;
  %1007 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
  (%1006, %1007)
}

def @func_3843(%var_3840: Tensor[(14, 14, 13), float64]) -> Tensor[(14, 14, 13), float64] {
  %1008 = cast(%var_3840, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  sin(%1008) /* ty=Tensor[(14, 14, 13), float64] */
}

def @func_3866() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(312), bool]) {
  %1009 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %1010 = cast(meta[relay.Constant][56] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1011 = reshape(%1010, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1012 = @func_1540(%1011) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
  %1013 = %1009.0;
  %1014 = %1012.1;
  (%1013, %1014, meta[relay.Constant][56] /* ty=Tensor[(312), bool] */)
}

def @func_1419(%var_1387: Tensor[(5, 14, 9), uint8], %var_1388: Tensor[(5, 14, 9), uint8], %var_1396: Tensor[(2548), uint64]) -> (Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) {
  %1015 = cast(%var_1388, dtype="uint8") /* ty=Tensor[(5, 14, 9), uint8] */;
  %1016 = shape_of(%var_1387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1017 = cast(%var_1387, dtype="uint8") /* ty=Tensor[(5, 14, 9), uint8] */;
  %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1019 = cast(meta[relay.Constant][60] /* ty=Tensor[(144, 4), int8] */, dtype="int8") /* ty=Tensor[(144, 4), int8] */;
  %1020 = cast(meta[relay.Constant][61] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1021 = cast(%var_1396, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %1022 = reshape(%1019, newshape=[6, 16, 6]) /* ty=Tensor[(6, 16, 6), int8] */;
  %1023 = reshape(%1020, newshape=[]) /* ty=uint16 */;
  %1024 = reshape(%1021, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %1025 = @func_828(%1022, %1023, %1024) /* ty=(Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) */;
  %1026 = %1025.2;
  %1027 = cast(%1026, dtype="uint16") /* ty=uint16 */;
  %1028 = cast(meta[relay.Constant][58] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %1029 = reshape(%1027, newshape=[]) /* ty=uint16 */;
  %1030 = reshape(%1028, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %1031 = cast(meta[relay.Constant][57] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1032 = cast(meta[relay.Constant][58] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %1033 = cast(meta[relay.Constant][59] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1034 = cast(%var_1396, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %1035 = reshape(%1031, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1036 = reshape(%1032, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %1037 = reshape(%1033, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %1038 = reshape(%1034, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %1039 = @func_1118(%1035, %1036, %1037, %1038) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %1040 = %1039.7;
  %1041 = cast(%var_1396, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %1042 = cast(%1040, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
  %1043 = bitwise_and(%1017, %1018) /* ty=Tensor[(5, 14, 9), uint8] */;
  %1044 = @func_381(%1029, %1030) /* ty=Tensor[(14, 10, 8), uint16] */;
  %1045 = less(%1041, %1042) /* ty=Tensor[(312, 2548), bool] */;
  (%1043, meta[relay.Constant][57] /* ty=Tensor[(126), float64] */, meta[relay.Constant][58] /* ty=Tensor[(1120), uint16] */, meta[relay.Constant][59] /* ty=Tensor[(312), bool] */, %1026, meta[relay.Constant][60] /* ty=Tensor[(144, 4), int8] */, meta[relay.Constant][61] /* ty=uint16 */, %1044, %1045)
}

def @func_2901(%var_2896: Tensor[(312), bool], %var_2897: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(7, 6, 3), float32], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %1046 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %1047 = cast(meta[relay.Constant][62] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1048 = cast(meta[relay.Constant][63] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %1049 = cast(%var_2896, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1050 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %1051 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  %1052 = cast(%1051, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1053 = reshape(%1047, newshape=[]) /* ty=uint16 */;
  %1054 = reshape(%1048, newshape=[8, 140]) /* ty=Tensor[(8, 140), uint16] */;
  %1055 = reshape(%1049, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1056 = reshape(%1050, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %1057 = reshape(%1052, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1058 = @func_1372(%1053, %1054, %1055, %1056, %1057) /* ty=(Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) */;
  %1059 = %1046.1;
  %1060 = %1058.7;
  (%1051, %1059, %1060, meta[relay.Constant][62] /* ty=uint16 */, meta[relay.Constant][63] /* ty=Tensor[(1120), uint16] */, %var_2896, %var_2897)
}

def @func_8106() -> Tensor[(7, 6, 3), float64] {
  %1061 = @func_2414() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %1061.0
}

def @func_2414() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %1062 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %1063 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %1064 = %1062.0;
  (%1063, %1064)
}

def @func_6857() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
  %1065 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %1066 = cast(%1065, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1067 = reshape(%1066, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1068 = @func_1581(%1067) /* ty=(Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) */;
  %1069 = %1068.1;
  %1070 = cast(%1069, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %1071 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
  %1072 = sigmoid(%1070) /* ty=Tensor[(7, 6, 3), float32] */;
  (%1071, %1065, %1072)
}

def @func_4831() -> Tensor[(7, 6, 3), float64] {
  @func_3837() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_4691(%var_4649: uint64, %var_4673: Tensor[(240), float32], %var_4682: Tensor[(3, 42), float64]) -> (Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), int32], Tensor[(3, 42), float64], Tensor[(4, ?, 14), float64], Tensor[(7, 6, 3), float32]) {
  %1073 = cast(%var_4673, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1074 = reshape(%1073, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %1075 = cast(%var_4682, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %1076 = reshape(%1075, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1077 = @func_1581(%1076) /* ty=(Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) */;
  %1078 = cast(%var_4649, dtype="uint64") /* ty=uint64 */;
  %1079 = cast(meta[relay.Constant][64] /* ty=Tensor[(4, 1, 14), uint64] */, dtype="uint64") /* ty=Tensor[(4, 1, 14), uint64] */;
  %1080 = add(%1078, %1079) /* ty=Tensor[(4, 1, 14), uint64] */;
  %1081 = cast(%1080, dtype="float64") /* ty=Tensor[(4, 1, 14), float64] */;
  %1082 = rsqrt(%1081) /* ty=Tensor[(4, 1, 14), float64] */;
  %1083 = cast(%1080, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1085 = cast(%1082, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1087 = divide(%1085, %1086) /* ty=Tensor[(4, ?, 14), float32] */;
  %1088 = cast(%1087, dtype="float64") /* ty=Tensor[(4, ?, 14), float64] */;
  %1089 = @func_3677() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
  %1090 = @func_1953(%1074) /* ty=Tensor[(16, 1, 15), float32] */;
  %1091 = %1077.0;
  %1092 = cos(%1088) /* ty=Tensor[(4, ?, 14), float64] */;
  %1093 = %1089.1;
  (%1090, %var_4673, %1091, %var_4682, %1092, %1093)
}

def @func_4454() -> (Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) {
  %1094 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %1095 = %1094.0;
  %1096 = @func_2218() /* ty=Tensor[(630), uint8] */;
  (%1095, %1096)
}

def @func_5441(%var_5386: Tensor[(7, 6, 3), float64], %var_5439: Tensor[(2548), bool]) -> (Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2548), bool]) {
  %1097 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %1098 = cast(%var_5386, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
  %1099 = shape_of(%1097, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1100 = cast(%1097, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
  %1101 = dyn.reshape(%1098, %1099, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1102 = cast(%var_5439, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %1103 = reshape(%1102, newshape=[2548]) /* ty=Tensor[(2548), bool] */;
  %1104 = @func_4400(%1103) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint32]) */;
  %1105 = right_shift(%1100, %1101) /* ty=Tensor[(7, 6, 3), int8] */;
  %1106 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
  %1107 = %1104.2;
  (%1105, %1106, %1107, %var_5439)
}

def @func_3016(%var_3009: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), bool],) {
  %1108 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %1109 = %1108.0;
  %1110 = cast(%var_3009, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %1111 = shape_of(%1109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1112 = cast(%1109, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %1113 = dyn.reshape(%1110, %1111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1114 = less(%1112, %1113) /* ty=Tensor[(13, 14, 14), bool] */;
  (%1114,)
}

def @func_5139() -> (Tensor[(13, 14, 14), bool],) {
  %1115 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %1116 = %1115.0;
  (%1116,)
}

def @func_5651(%var_5643: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) {
  %1117 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %1118 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %1119 = cast(%var_5643, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1120 = reshape(%1119, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1121 = @func_4031(%1120) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %1122 = %1117.0;
  %1123 = %1118.0;
  %1124 = %1121.3;
  %1125 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  (%1122, %1123, %1124, %var_5643, %1125)
}

def @func_5095() -> (Tensor[(7, 6, 3), float64],) {
  %1126 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  (%1126,)
}

def @func_6420() -> (Tensor[(12, 8, 10), int64],) {
  %1127 = cast(meta[relay.Constant][66] /* ty=Tensor[(12, 8, 10), int64] */, dtype="int64") /* ty=Tensor[(12, 8, 10), int64] */;
  %1128 = shape_of(meta[relay.Constant][65] /* ty=Tensor[(12, 8, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1129 = cast(meta[relay.Constant][65] /* ty=Tensor[(12, 8, 10), int64] */, dtype="int64") /* ty=Tensor[(12, 8, 10), int64] */;
  %1130 = dyn.reshape(%1127, %1128, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1131 = left_shift(%1129, %1130) /* ty=Tensor[(12, 8, 10), int64] */;
  (%1131,)
}

def @func_8553(%var_8508: Tensor[(1120, 1), uint16], %var_8509: Tensor[(312), bool], %var_8510: Tensor[(2548), uint64]) -> (Tensor[(11, 16, 8), float64], Tensor[(7, 6, 3), float64], uint16, Tensor[(1120, 1), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(3, 5, 7), bool], Tensor[(105), float64], Tensor[(7, 6, 3), float32]) {
  %1132 = cast(meta[relay.Constant][67] /* ty=Tensor[(11, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
  %1133 = cast(meta[relay.Constant][68] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1134 = cast(%var_8508, dtype="uint16") /* ty=Tensor[(1120, 1), uint16] */;
  %1135 = cast(%var_8509, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1136 = cast(%var_8510, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %1137 = reshape(%1133, newshape=[]) /* ty=uint16 */;
  %1138 = reshape(%1134, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %1139 = reshape(%1135, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1140 = reshape(%1136, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %1141 = @func_3277(%1137, %1138, %1139, %1140) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) */;
  %1142 = cast(meta[relay.Constant][69] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
  %1143 = reshape(%1142, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %1144 = @func_5970(%1143) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %1145 = exp(%1132) /* ty=Tensor[(11, 16, 8), float64] */;
  %1146 = %1141.1;
  %1147 = %1144.0;
  %1148 = @func_7769() /* ty=Tensor[(7, 6, 3), float32] */;
  (%1145, %1146, meta[relay.Constant][68] /* ty=uint16 */, %var_8508, %var_8509, %var_8510, %1147, meta[relay.Constant][69] /* ty=Tensor[(105), float64] */, %1148)
}

def @func_1953(%var_1944: Tensor[(16, 1, 15), float32]) -> Tensor[(16, 1, 15), float32] {
  %1149 = cast(-8.19329f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1150 = cast(%var_1944, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
  divide(%1149, %1150) /* ty=Tensor[(16, 1, 15), float32] */
}

def @func_163(%var_152: Tensor[(13, 14, 14), uint64], %var_153: Tensor[(13, 14, 14), uint64], %var_158: Tensor[(13, 14, 14), uint64]) -> (Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) {
  %1151 = cast(%var_153, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1152 = shape_of(%var_152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1153 = cast(%var_152, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1154 = dyn.reshape(%1151, %1152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1155 = cast(%var_158, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1156 = shape_of(%var_152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1157 = cast(%var_152, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1158 = dyn.reshape(%1155, %1156, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1159 = maximum(%1153, %1154) /* ty=Tensor[(13, 14, 14), uint64] */;
  %1160 = multiply(%1157, %1158) /* ty=Tensor[(13, 14, 14), uint64] */;
  (%1159, %1160)
}

def @func_381(%var_358: uint16, %var_359: Tensor[(14, 10, 8), uint16]) -> Tensor[(14, 10, 8), uint16] {
  %1161 = cast(%var_358, dtype="uint16") /* ty=uint16 */;
  %1162 = cast(%var_359, dtype="uint16") /* ty=Tensor[(14, 10, 8), uint16] */;
  %1163 = logical_xor(%1161, %1162) /* ty=Tensor[(14, 10, 8), uint16] */;
  %1164 = cast(%1163, dtype="uint16") /* ty=Tensor[(14, 10, 8), uint16] */;
  %1165 = shape_of(%var_359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1166 = cast(%var_359, dtype="uint16") /* ty=Tensor[(14, 10, 8), uint16] */;
  %1167 = dyn.reshape(%1164, %1165, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%1166, %1167) /* ty=Tensor[(14, 10, 8), uint16] */
}

def @func_8090(%var_8074: Tensor[(12, 14, 16), float64], %var_8075: Tensor[(12, 14, 16), float64]) -> (Tensor[(12, 14, 16), float64], Tensor[(9, 16, 15), float32], Tensor[(2160), float32]) {
  %1168 = cast(%var_8075, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
  %1169 = shape_of(%var_8074, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1170 = cast(%var_8074, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
  %1171 = dyn.reshape(%1168, %1169, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1172 = cast(meta[relay.Constant][70] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %1173 = reshape(%1172, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float32] */;
  %1174 = @func_7436(%1173) /* ty=(Tensor[(9, 16, 15), float32],) */;
  %1175 = maximum(%1170, %1171) /* ty=Tensor[(12, 14, 16), float64] */;
  %1176 = %1174.0;
  (%1175, %1176, meta[relay.Constant][70] /* ty=Tensor[(2160), float32] */)
}

def @func_8340() -> (Tensor[(220), uint64], Tensor[(7, 6, 3), bool]) {
  %1177 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
  %1178 = %1177.2;
  %1179 = @func_7737() /* ty=Tensor[(7, 6, 3), bool] */;
  (%1178, %1179)
}

def @func_7737() -> Tensor[(7, 6, 3), bool] {
  %1180 = @func_5761() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) */;
  %1180.1
}

def @func_4890() -> (Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) {
  %1181 = cast(meta[relay.Constant][71] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %1182 = cast(meta[relay.Constant][71] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %1183 = reshape(%1181, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %1184 = reshape(%1182, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %1185 = @func_335(%1183, %1184) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
  %1186 = %1185.1;
  %1187 = cast(%1186, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1188 = reshape(%1187, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1189 = @func_1540(%1188) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
  %1190 = @func_4337() /* ty=Tensor[(7, 6, 3), float64] */;
  %1191 = %1189.2;
  (%1190, %1186, meta[relay.Constant][71] /* ty=Tensor[(220), uint64] */, %1191)
}

def @func_7958(%var_7909: Tensor[(630), uint8], %var_7910: Tensor[(1, 2548), uint64], %var_7938: Tensor[(312), bool], %var_7952: Tensor[(4, 280), uint16]) -> (Tensor[(7, 6, 3), bool], Tensor[(630), uint8], Tensor[(9, 16, 15), float32], Tensor[(2160), float32], Tensor[(1, 2548), int16], Tensor[(?, 2548), bool], Tensor[(312), bool], Tensor[(132, 2), float32], Tensor[(312), bool], Tensor[(9, 16, 15), float32], Tensor[(7, 6, 3), float64], Tensor[(4, 280), uint16]) {
  %1192 = cast(meta[relay.Constant][72] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %1193 = reshape(%1192, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float32] */;
  %1194 = @func_7436(%1193) /* ty=(Tensor[(9, 16, 15), float32],) */;
  %1195 = cast(%var_7909, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %1196 = cast(%var_7909, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %1197 = cast(%var_7910, dtype="uint64") /* ty=Tensor[(1, 2548), uint64] */;
  %1198 = reshape(%1195, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %1199 = reshape(%1196, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %1200 = reshape(%1197, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %1201 = @func_1419(%1198, %1199, %1200) /* ty=(Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) */;
  %1202 = %1201.6;
  %1203 = cast(%var_7910, dtype="int16") /* ty=Tensor[(1, 2548), int16] */;
  %1204 = cast(%1202, dtype="int16") /* ty=int16 */;
  %1205 = cast(%var_7910, dtype="float64") /* ty=Tensor[(1, 2548), float64] */;
  %1206 = exp(%1205) /* ty=Tensor[(1, 2548), float64] */;
  %1207 = cast(%1206, dtype="bool") /* ty=Tensor[(1, 2548), bool] */;
  %1208 = shape_of(%var_7910, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1209 = cast(%var_7910, dtype="bool") /* ty=Tensor[(1, 2548), bool] */;
  %1210 = dyn.reshape(%1207, %1208, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1211 = cast(meta[relay.Constant][73] /* ty=Tensor[(132, 2), float32] */, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %1212 = cast(%var_7938, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1213 = reshape(%1211, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float32] */;
  %1214 = reshape(%1212, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1215 = @func_4479(%1213, %1214) /* ty=(Tensor[(8, 3, 11), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %1216 = cast(meta[relay.Constant][72] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %1217 = reshape(%1216, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float32] */;
  %1218 = @func_7436(%1217) /* ty=(Tensor[(9, 16, 15), float32],) */;
  %1219 = @func_7737() /* ty=Tensor[(7, 6, 3), bool] */;
  %1220 = cast(%1219, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1221 = cast(%var_7952, dtype="uint16") /* ty=Tensor[(4, 280), uint16] */;
  %1222 = %1215.1;
  %1223 = cast(%1222, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1224 = logical_or(%1209, %1210) /* ty=Tensor[(?, 2548), bool] */;
  %1225 = cast(%1224, dtype="uint64") /* ty=Tensor[(?, 2548), uint64] */;
  %1226 = reshape(%1220, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1227 = reshape(%1221, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %1228 = reshape(%1223, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %1229 = reshape(%1225, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %1230 = @func_1118(%1226, %1227, %1228, %1229) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %1231 = %1194.0;
  %1232 = bitwise_and(%1203, %1204) /* ty=Tensor[(1, 2548), int16] */;
  %1233 = %1218.0;
  %1234 = %1230.0;
  (%1219, %var_7909, %1231, meta[relay.Constant][72] /* ty=Tensor[(2160), float32] */, %1232, %1224, %1222, meta[relay.Constant][73] /* ty=Tensor[(132, 2), float32] */, %var_7938, %1233, %1234, %var_7952)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8106() -> Tensor[(7, 6, 3), float64] {
  %0 = @func_2414() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %0.0
}

def @func_5763() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) {
  @func_5761() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) */
}

def @func_8231() -> Tensor[(220), float32] {
  %1 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
  %2 = %1.2;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(220), float32] */;
  sigmoid(%3) /* ty=Tensor[(220), float32] */
}

def @func_6040() -> (Tensor[(576), bool], Tensor[(576), int8], Tensor[(13, 14, 14), float64]) {
  %12 = fn () -> (Tensor[(576), bool], Tensor[(576), int8], Tensor[(13, 14, 14), float64]) {
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
    %5 = reshape(%4, newshape=[576]) /* ty=Tensor[(576), int8] */;
    %6 = @func_3527(%5) /* ty=(Tensor[(576), bool], Tensor[(13, 14, 14), float64]) */;
    %7 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
    %8 = %7.0;
    %9 = cast(%8, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
    %10 = %6.0;
    %11 = log2(%9) /* ty=Tensor[(13, 14, 14), float64] */;
    (%10, meta[relay.Constant][0] /* ty=Tensor[(576), int8] */, %11)
  };
  %12() /* ty=(Tensor[(576), bool], Tensor[(576), int8], Tensor[(13, 14, 14), float64]) */
}

def @func_7347() -> (Tensor[(7, 6, 3), float32],) {
  @func_7345() /* ty=(Tensor[(7, 6, 3), float32],) */
}

def @func_5139() -> (Tensor[(13, 14, 14), bool],) {
  %13 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %14 = %13.0;
  (%14,)
}

def @func_6420() -> (Tensor[(12, 8, 10), int64],) {
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 8, 10), int64] */, dtype="int64") /* ty=Tensor[(12, 8, 10), int64] */;
  %16 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(12, 8, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 8, 10), int64] */, dtype="int64") /* ty=Tensor[(12, 8, 10), int64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %19 = left_shift(%17, %18) /* ty=Tensor[(12, 8, 10), int64] */;
  (%19,)
}

def @func_4086() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) {
  %20 = @func_3380() /* ty=(Tensor[(630), uint8],) */;
  %21 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
  %22 = %20.0;
  %23 = %21.0;
  (%22, %23)
}

def @func_3282(%var_3278: uint16, %var_3279: Tensor[(1120), uint16], %var_3280: Tensor[(312), bool], %var_3281: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) {
  %51 = fn (%var_3235: uint16, %var_3236: Tensor[(1120), uint16], %var_3237: Tensor[(312), bool], %var_3238: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) {
    %24 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
    %25 = %24.0;
    %26 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
    %27 = cast(%26, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
    %28 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %29 = cast(%25, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %31 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
    %32 = cast(%var_3235, dtype="uint16") /* ty=uint16 */;
    %33 = cast(%var_3236, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %34 = cast(%var_3237, dtype="bool") /* ty=Tensor[(312), bool] */;
    %35 = cast(%var_3238, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %36 = %31.0;
    %37 = cast(%36, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %38 = reshape(%32, newshape=[]) /* ty=uint16 */;
    %39 = reshape(%33, newshape=[8, 140]) /* ty=Tensor[(8, 140), uint16] */;
    %40 = reshape(%34, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %41 = reshape(%35, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %42 = reshape(%37, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %43 = @func_1372(%38, %39, %40, %41, %42) /* ty=(Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) */;
    %44 = cast(%var_3235, dtype="uint16") /* ty=uint16 */;
    %45 = cast(%var_3236, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %46 = reshape(%44, newshape=[]) /* ty=uint16 */;
    %47 = reshape(%45, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
    %48 = bitwise_or(%29, %30) /* ty=Tensor[(7, 6, 3), int8] */;
    %49 = %43.4;
    %50 = @func_381(%46, %47) /* ty=Tensor[(14, 10, 8), uint16] */;
    (%48, %36, %49, %var_3235, %var_3236, %var_3237, %var_3238, %50)
  };
  %51(%var_3278, %var_3279, %var_3280, %var_3281) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) */
}

def @func_4317() -> (Tensor[(7, 6, 3), float64],) {
  @func_4315() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_4403(%var_4401: Tensor[(2548), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint32]) {
  @func_4400(%var_4401) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint32]) */
}

def @func_7700(%var_7698: Tensor[(312), bool]) -> (Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(10, 63), uint8]) {
  @func_7697(%var_7698) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(10, 63), uint8]) */
}

def @func_1303() -> Tensor[(7, 6, 3), float64] {
  %53 = fn () -> Tensor[(7, 6, 3), float64] {
    %52 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %52.0
  };
  %53() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_3846(%var_3844: Tensor[(14, 14, 13), float64]) -> Tensor[(14, 14, 13), float64] {
  @func_3843(%var_3844) /* ty=Tensor[(14, 14, 13), float64] */
}

def @func_5549() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) {
  @func_5547() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) */
}

def @func_2537(%var_2535: Tensor[(240), float32], %var_2536: Tensor[(630), uint8]) -> (Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) {
  %64 = fn (%var_2498: Tensor[(240), float32], %var_2502: Tensor[(630), uint8]) -> (Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) {
    %54 = cast(%var_2498, dtype="float32") /* ty=Tensor[(240), float32] */;
    %55 = reshape(%54, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
    %56 = cast(%var_2502, dtype="uint8") /* ty=Tensor[(630), uint8] */;
    %57 = reshape(%56, newshape=[630]) /* ty=Tensor[(630), uint8] */;
    %58 = @func_2204(%57) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
    %59 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
    %60 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
    %61 = @func_1953(%55) /* ty=Tensor[(16, 1, 15), float32] */;
    %62 = %58.2;
    %63 = %59.1;
    (%60, %61, %var_2498, %62, %var_2502, %63)
  };
  %64(%var_2535, %var_2536) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) */
}

def @func_5738() -> (Tensor[(7, 6, 3), float32],) {
  %67 = fn () -> (Tensor[(7, 6, 3), float32],) {
    %65 = @func_4542() /* ty=(Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
    %66 = %65.2;
    (%66,)
  };
  %67() /* ty=(Tensor[(7, 6, 3), float32],) */
}

def @func_5654(%var_5652: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) {
  @func_5651(%var_5652) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) */
}

def @func_3459() -> (Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) {
  %68 = @func_2414() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %72 = reshape(%69, newshape=[10, 63]) /* ty=Tensor[(10, 63), uint8] */;
  %73 = reshape(%70, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %74 = reshape(%71, newshape=[576]) /* ty=Tensor[(576), int8] */;
  %75 = @func_2065(%72, %73, %74) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32], Tensor[(1120), uint16], Tensor[(10, 63), uint8], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16], Tensor[(576), int8], uint16) */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(2548), uint64] */, dtype="int64") /* ty=Tensor[(2548), int64] */;
  %77 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2548), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %78 = cast(meta[relay.Constant][4] /* ty=Tensor[(2548), uint64] */, dtype="int64") /* ty=Tensor[(2548), int64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?), int64] */;
  %80 = %68.1;
  %81 = %75.3;
  %82 = minimum(%78, %79) /* ty=Tensor[(2548), int64] */;
  (%80, %81, meta[relay.Constant][3] /* ty=Tensor[(630), uint8] */, meta[relay.Constant][5] /* ty=Tensor[(576), int8] */, %82)
}

def @func_7127() -> (Tensor[(7, 6, 3), float64],) {
  %87 = fn () -> (Tensor[(7, 6, 3), float64],) {
    %83 = @func_2586() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %84 = %83.0;
    %85 = cast(%84, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %86 = rsqrt(%85) /* ty=Tensor[(7, 6, 3), float64] */;
    (%86,)
  };
  %87() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_7258(%var_7255: Tensor[(13, 1, 4), float32], %var_7256: Tensor[(126), float64], %var_7257: Tensor[(105, 1), float64]) -> (Tensor[(13, ?, 4), bool], Tensor[(7, 6, 3), float32], Tensor[(126), float64], Tensor[(13, ?, 4), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(105, 1), float64], Tensor[(7, 6, 3), float64]) {
  @func_7253(%var_7255, %var_7256, %var_7257) /* ty=(Tensor[(13, ?, 4), bool], Tensor[(7, 6, 3), float32], Tensor[(126), float64], Tensor[(13, ?, 4), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(105, 1), float64], Tensor[(7, 6, 3), float64]) */
}

def @func_6953() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16]) {
  %94 = fn () -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16]) {
    %88 = @func_6561() /* ty=(Tensor[(630), uint8],) */;
    %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %90 = reshape(%89, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %91 = @func_5245(%90) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 14, 13), float64], Tensor[(2548), float64], Tensor[(2548), uint64], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(630), uint8], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) */;
    %92 = %88.0;
    %93 = %91.9;
    (%92, %93, meta[relay.Constant][7] /* ty=Tensor[(1120), uint16] */)
  };
  %94() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16]) */
}

def @func_2163() -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) {
  %100 = fn () -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) {
    %95 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
    %96 = cast(%95, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %97 = reshape(%96, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %98 = @func_1875(%97) /* ty=(Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
    %99 = %98.2;
    (%95, %99)
  };
  %100() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */
}

def @func_828(%var_793: Tensor[(6, 16, 6), int8], %var_804: uint16, %var_819: Tensor[(2548), uint64]) -> (Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) {
  %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 16, 6), int8] */, dtype="bool") /* ty=Tensor[(6, 16, 6), bool] */;
  %102 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_793, dtype="bool") /* ty=Tensor[(6, 16, 6), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = cast(%var_804, dtype="uint16") /* ty=uint16 */;
  %106 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 280), uint16] */, dtype="uint16") /* ty=Tensor[(4, 280), uint16] */;
  %107 = reshape(%105, newshape=[]) /* ty=uint16 */;
  %108 = reshape(%106, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %109 = cast(%var_804, dtype="uint16") /* ty=uint16 */;
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 280), uint16] */, dtype="uint16") /* ty=Tensor[(4, 280), uint16] */;
  %111 = reshape(%109, newshape=[]) /* ty=uint16 */;
  %112 = reshape(%110, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %113 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %114 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %115 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %116 = reshape(%113, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %117 = reshape(%114, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %118 = reshape(%115, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %119 = @func_163(%116, %117, %118) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %120 = %119.0;
  %121 = cast(%120, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %122 = cast(%120, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %123 = cast(%var_819, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %124 = reshape(%121, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %125 = reshape(%122, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %126 = reshape(%123, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %127 = @func_163(%124, %125, %126) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %128 = equal(%103, %104) /* ty=Tensor[(6, 16, 6), bool] */;
  %129 = @func_381(%107, %108) /* ty=Tensor[(14, 10, 8), uint16] */;
  %130 = @func_381(%111, %112) /* ty=Tensor[(14, 10, 8), uint16] */;
  %131 = %127.0;
  (%128, %129, %var_804, meta[relay.Constant][9] /* ty=Tensor[(4, 280), uint16] */, %130, %120, %var_819, %131)
}

def @func_6422() -> (Tensor[(12, 8, 10), int64],) {
  @func_6420() /* ty=(Tensor[(12, 8, 10), int64],) */
}

def @func_1543(%var_1541: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) {
  @func_1540(%var_1541) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */
}

def @func_1877(%var_1876: Tensor[(7, 6, 3), float64]) -> (Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) {
  %149 = fn (%var_1855: Tensor[(7, 6, 3), float64]) -> (Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) {
    %132 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %133 = %132.0;
    %134 = cast(%var_1855, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%133, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %138 = greater(%136, %137) /* ty=Tensor[(7, 6, 3), bool] */;
    %139 = cast(%138, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %140 = cast(meta[relay.Constant][10] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
    %141 = cast(meta[relay.Constant][10] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
    %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %143 = reshape(%140, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
    %144 = reshape(%141, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
    %145 = reshape(%142, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %146 = @func_1419(%143, %144, %145) /* ty=(Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) */;
    %147 = sin(%139) /* ty=Tensor[(7, 6, 3), float32] */;
    %148 = %146.5;
    (%147, %148, meta[relay.Constant][10] /* ty=Tensor[(630), uint8] */, meta[relay.Constant][11] /* ty=Tensor[(2548), uint64] */)
  };
  %149(%var_1876) /* ty=(Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) */
}

def @func_4003(%var_4001: Tensor[(10, 63), uint8], %var_4002: Tensor[(242), uint8]) -> (Tensor[(10, 63), bool], Tensor[(2, 11, 11), uint8], Tensor[(242), uint8]) {
  @func_3999(%var_4001, %var_4002) /* ty=(Tensor[(10, 63), bool], Tensor[(2, 11, 11), uint8], Tensor[(242), uint8]) */
}

def @func_2475() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) {
  %150 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %151 = %150.0;
  %152 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 6, 3), float64] */, dtype="uint64") /* ty=Tensor[(7, 6, 3), uint64] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="uint64") /* ty=Tensor[(7, 6, 3), uint64] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %156 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %157 = multiply(%154, %155) /* ty=Tensor[(7, 6, 3), uint64] */;
  (%156, %157)
}

def @func_6998() -> (Tensor[(6, 4, 8), float64],) {
  %160 = fn () -> (Tensor[(6, 4, 8), float64],) {
    %158 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
    %159 = exp(%158) /* ty=Tensor[(6, 4, 8), float64] */;
    (%159,)
  };
  %160() /* ty=(Tensor[(6, 4, 8), float64],) */
}

def @func_4482(%var_4480: Tensor[(8, 3, 11), float32], %var_4481: Tensor[(312), bool]) -> (Tensor[(8, 3, 11), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %169 = fn (%var_4460: Tensor[(8, 3, 11), float32], %var_4472: Tensor[(312), bool]) -> (Tensor[(8, 3, 11), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64]) {
    %161 = cast(%var_4460, dtype="float32") /* ty=Tensor[(8, 3, 11), float32] */;
    %162 = cast(%var_4472, dtype="bool") /* ty=Tensor[(312), bool] */;
    %163 = cast(meta[relay.Constant][14] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %164 = reshape(%162, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %165 = reshape(%163, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %166 = @func_3760(%164, %165) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
    %167 = rsqrt(%161) /* ty=Tensor[(8, 3, 11), float32] */;
    %168 = %166.2;
    (%167, %168, %var_4472, meta[relay.Constant][14] /* ty=Tensor[(2548), uint64] */)
  };
  %169(%var_4480, %var_4481) /* ty=(Tensor[(8, 3, 11), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64]) */
}

def @func_4891() -> (Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) {
  %181 = fn () -> (Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) {
    %170 = cast(meta[relay.Constant][15] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %171 = cast(meta[relay.Constant][15] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %172 = reshape(%170, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %173 = reshape(%171, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %174 = @func_335(%172, %173) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
    %175 = %174.1;
    %176 = cast(%175, dtype="bool") /* ty=Tensor[(312), bool] */;
    %177 = reshape(%176, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %178 = @func_1540(%177) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
    %179 = @func_4337() /* ty=Tensor[(7, 6, 3), float64] */;
    %180 = %178.2;
    (%179, %175, meta[relay.Constant][15] /* ty=Tensor[(220), uint64] */, %180)
  };
  %181() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */
}

def @func_833(%var_830: Tensor[(6, 16, 6), int8], %var_831: uint16, %var_832: Tensor[(2548), uint64]) -> (Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) {
  @func_828(%var_830, %var_831, %var_832) /* ty=(Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) */
}

def @func_6047() -> (Tensor[(7, 6, 3), float64],) {
  %183 = fn () -> (Tensor[(7, 6, 3), float64],) {
    %182 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
    (%182,)
  };
  %183() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_1282(%var_1281: Tensor[(7, 6, 3), float64]) -> Tensor[(7, 6, 3), float32] {
  %189 = fn (%var_1264: Tensor[(7, 6, 3), float64]) -> Tensor[(7, 6, 3), float32] {
    %184 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
    %185 = cast(%var_1264, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %187 = cast(%184, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%187, %188) /* ty=Tensor[(7, 6, 3), float32] */
  };
  %189(%var_1281) /* ty=Tensor[(7, 6, 3), float32] */
}

def @func_1810() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %200 = fn () -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
    %190 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %191 = cast(meta[relay.Constant][16] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %192 = cast(meta[relay.Constant][16] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %193 = reshape(%191, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %194 = reshape(%192, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %195 = @func_335(%193, %194) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
    %196 = %190.0;
    %197 = %195.0;
    %198 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
    %199 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
    (%196, %197, meta[relay.Constant][16] /* ty=Tensor[(220), uint64] */, %198, %199)
  };
  %200() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */
}

def @func_1942() -> Tensor[(7, 6, 3), float64] {
  @func_1940() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_1713(%var_1711: Tensor[(7, 6, 3), float64], %var_1712: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) {
  @func_1709(%var_1711, %var_1712) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */
}

def @func_2380(%var_2377: Tensor[(126), float64], %var_2378: Tensor[(312), bool], %var_2379: Tensor[(2548), uint64]) -> (Tensor[(14, 15, 11), float32], Tensor[(7, 6, 3), float64], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %213 = fn (%var_2352: Tensor[(126), float64], %var_2354: Tensor[(312), bool], %var_2355: Tensor[(2548), uint64]) -> (Tensor[(14, 15, 11), float32], Tensor[(7, 6, 3), float64], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
    %201 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 15, 11), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 11), float32] */;
    %202 = cast(%var_2352, dtype="float64") /* ty=Tensor[(126), float64] */;
    %203 = cast(meta[relay.Constant][18] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %204 = cast(%var_2354, dtype="bool") /* ty=Tensor[(312), bool] */;
    %205 = cast(%var_2355, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %206 = reshape(%202, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %207 = reshape(%203, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %208 = reshape(%204, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
    %209 = reshape(%205, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %210 = @func_1118(%206, %207, %208, %209) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
    %211 = tan(%201) /* ty=Tensor[(14, 15, 11), float32] */;
    %212 = %210.4;
    (%211, %212, %var_2352, meta[relay.Constant][18] /* ty=Tensor[(1120), uint16] */, %var_2354, %var_2355)
  };
  %213(%var_2377, %var_2378, %var_2379) /* ty=(Tensor[(14, 15, 11), float32], Tensor[(7, 6, 3), float64], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */
}

def @func_7731(%var_7729: Tensor[(240), float32]) -> (Tensor[(13, 14, 14), bool], Tensor[(630), uint8], Tensor[(240), float32], Tensor[(630), uint8]) {
  @func_7728(%var_7729) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8], Tensor[(240), float32], Tensor[(630), uint8]) */
}

def @func_7505() -> Tensor[(7, 6, 3), float64] {
  @func_7503() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_6696(%var_6695: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) {
  %227 = fn (%var_6692: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) {
    %214 = @func_5267() /* ty=(Tensor[(7, 6, 3), bool],) */;
    %215 = %214.0;
    %216 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 6, 3), bool] */, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
    %218 = cast(%215, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %220 = cast(%215, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %221 = cast(%var_6692, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %222 = reshape(%221, newshape=[220]) /* ty=Tensor[(220), uint64] */;
    %223 = @func_3333(%222) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
    %224 = less(%218, %219) /* ty=Tensor[(7, 6, 3), bool] */;
    %225 = exp(%220) /* ty=Tensor[(7, 6, 3), float32] */;
    %226 = %223.0;
    (%224, %225, %226, %var_6692)
  };
  %227(%var_6695) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) */
}

def @func_236(%var_233: Tensor[(13, 8, 3), bool], %var_234: Tensor[(13, 8, 3), bool], %var_235: Tensor[(2548), uint64]) -> (Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) {
  @func_231(%var_233, %var_234, %var_235) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */
}

def @func_4034(%var_4032: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  @func_4031(%var_4032) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */
}

def @func_3607(%var_3571: Tensor[(13, 14, 14), bool], %var_3601: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(220), float64], Tensor[(630), uint8], Tensor[(13, 14, 14), int64], Tensor[(13, 14, 14), float64], Tensor[(312), bool], Tensor[(312), bool]) {
  %228 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %229 = cast(meta[relay.Constant][21] /* ty=Tensor[(220), uint64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %230 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(220), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %231 = cast(meta[relay.Constant][20] /* ty=Tensor[(220), uint64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?), float64] */;
  %233 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %234 = cast(meta[relay.Constant][20] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %235 = cast(meta[relay.Constant][20] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %236 = reshape(%234, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %237 = reshape(%235, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
  %238 = @func_335(%236, %237) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
  %239 = %238.0;
  %240 = cast(%var_3571, dtype="int64") /* ty=Tensor[(13, 14, 14), int64] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="int64") /* ty=Tensor[(13, 14, 14), int64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %244 = cast(%var_3571, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %245 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%239, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %248 = cast(%var_3601, dtype="bool") /* ty=Tensor[(312), bool] */;
  %249 = reshape(%248, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %250 = @func_1540(%249) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
  %251 = %228.0;
  %252 = mod(%231, %232) /* ty=Tensor[(220), float64] */;
  %253 = %233.0;
  %254 = bitwise_and(%242, %243) /* ty=Tensor[(13, 14, 14), int64] */;
  %255 = mod(%246, %247) /* ty=Tensor[(13, 14, 14), float64] */;
  %256 = %250.3;
  (%251, %252, %253, %254, %255, %256, %var_3601)
}

def @func_4596() -> Tensor[(7, 6, 3), int64] {
  %265 = fn () -> Tensor[(7, 6, 3), int64] {
    %257 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %258 = %257.0;
    %259 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %260 = %259.0;
    %261 = cast(%260, dtype="int64") /* ty=Tensor[(7, 6, 3), int64] */;
    %262 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%258, dtype="int64") /* ty=Tensor[(7, 6, 3), int64] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    logical_xor(%263, %264) /* ty=Tensor[(7, 6, 3), int64] */
  };
  %265() /* ty=Tensor[(7, 6, 3), int64] */
}

def @func_2207(%var_2205: Tensor[(630), uint8]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) {
  @func_2204(%var_2205) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) */
}

def @func_7804() -> (Tensor[(13, 14, 14), float32], Tensor[(13, 14, 14), float64]) {
  @func_7802() /* ty=(Tensor[(13, 14, 14), float32], Tensor[(13, 14, 14), float64]) */
}

def @func_231(%var_187: Tensor[(13, 8, 3), bool], %var_188: Tensor[(13, 8, 3), bool], %var_197: Tensor[(2548), uint64]) -> (Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) {
  %266 = cast(%var_188, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %267 = shape_of(%var_187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_187, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %271 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %272 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %273 = reshape(%270, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %274 = reshape(%271, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %275 = reshape(%272, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %276 = @func_163(%273, %274, %275) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %279 = exp(%278) /* ty=Tensor[(13, 14, 14), float32] */;
  %280 = cast(%var_197, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %284 = cast(%var_187, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %285 = shape_of(%var_188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_188, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %288 = cast(%279, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %289 = cast(%277, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %290 = cast(%var_197, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %291 = reshape(%288, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %292 = reshape(%289, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %293 = reshape(%290, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %294 = @func_163(%291, %292, %293) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %295 = logical_and(%268, %269) /* ty=Tensor[(13, 8, 3), bool] */;
  %296 = logical_or(%282, %283) /* ty=Tensor[(13, 14, 14), bool] */;
  %297 = subtract(%286, %287) /* ty=Tensor[(13, 8, 3), float32] */;
  %298 = %294.1;
  (%295, %296, %297, %298)
}

def @func_1419(%var_1387: Tensor[(5, 14, 9), uint8], %var_1388: Tensor[(5, 14, 9), uint8], %var_1396: Tensor[(2548), uint64]) -> (Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) {
  %299 = cast(%var_1388, dtype="uint8") /* ty=Tensor[(5, 14, 9), uint8] */;
  %300 = shape_of(%var_1387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%var_1387, dtype="uint8") /* ty=Tensor[(5, 14, 9), uint8] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %303 = cast(meta[relay.Constant][25] /* ty=Tensor[(144, 4), int8] */, dtype="int8") /* ty=Tensor[(144, 4), int8] */;
  %304 = cast(meta[relay.Constant][26] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %305 = cast(%var_1396, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %306 = reshape(%303, newshape=[6, 16, 6]) /* ty=Tensor[(6, 16, 6), int8] */;
  %307 = reshape(%304, newshape=[]) /* ty=uint16 */;
  %308 = reshape(%305, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %309 = @func_828(%306, %307, %308) /* ty=(Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) */;
  %310 = %309.2;
  %311 = cast(%310, dtype="uint16") /* ty=uint16 */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %313 = reshape(%311, newshape=[]) /* ty=uint16 */;
  %314 = reshape(%312, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %315 = cast(meta[relay.Constant][22] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %316 = cast(meta[relay.Constant][23] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %317 = cast(meta[relay.Constant][24] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %318 = cast(%var_1396, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %319 = reshape(%315, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %320 = reshape(%316, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %321 = reshape(%317, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %322 = reshape(%318, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %323 = @func_1118(%319, %320, %321, %322) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %324 = %323.7;
  %325 = cast(%var_1396, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %326 = cast(%324, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
  %327 = bitwise_and(%301, %302) /* ty=Tensor[(5, 14, 9), uint8] */;
  %328 = @func_381(%313, %314) /* ty=Tensor[(14, 10, 8), uint16] */;
  %329 = less(%325, %326) /* ty=Tensor[(312, 2548), bool] */;
  (%327, meta[relay.Constant][22] /* ty=Tensor[(126), float64] */, meta[relay.Constant][23] /* ty=Tensor[(1120), uint16] */, meta[relay.Constant][24] /* ty=Tensor[(312), bool] */, %310, meta[relay.Constant][25] /* ty=Tensor[(144, 4), int8] */, meta[relay.Constant][26] /* ty=uint16 */, %328, %329)
}

def @func_1123(%var_1119: Tensor[(7, 6, 3), float64], %var_1120: Tensor[(1120), uint16], %var_1121: Tensor[(312, 1), bool], %var_1122: Tensor[(13, 14, 14), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) {
  %367 = fn (%var_1060: Tensor[(7, 6, 3), float64], %var_1075: Tensor[(1120), uint16], %var_1093: Tensor[(312, 1), bool], %var_1095: Tensor[(13, 14, 14), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) {
    %330 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %331 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %332 = cast(%var_1075, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %333 = reshape(%331, newshape=[]) /* ty=uint16 */;
    %334 = reshape(%332, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
    %335 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %336 = %335.0;
    %337 = cast(%var_1060, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%336, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %341 = logical_or(%339, %340) /* ty=Tensor[(7, 6, 3), bool] */;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %343 = cast(%var_1093, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
    %344 = cast(%var_1093, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
    %345 = cast(meta[relay.Constant][28] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %346 = reshape(%343, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %347 = reshape(%344, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %348 = reshape(%345, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %349 = @func_231(%346, %347, %348) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
    %350 = cast(meta[relay.Constant][28] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %351 = cast(meta[relay.Constant][28] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %352 = cast(meta[relay.Constant][28] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %353 = reshape(%350, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %354 = reshape(%351, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %355 = reshape(%352, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %356 = @func_163(%353, %354, %355) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
    %357 = %356.1;
    %358 = cast(%var_1095, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
    %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %360 = cast(%357, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %362 = %330.0;
    %363 = @func_381(%333, %334) /* ty=Tensor[(14, 10, 8), uint16] */;
    %364 = sinh(%342) /* ty=Tensor[(7, 6, 3), float64] */;
    %365 = %349.2;
    %366 = minimum(%360, %361) /* ty=Tensor[(13, 14, 14), uint16] */;
    (%362, %363, meta[relay.Constant][27] /* ty=uint16 */, %var_1075, %364, meta[relay.Constant][28] /* ty=Tensor[(2548), uint64] */, %365, %var_1093, %366)
  };
  %367(%var_1119, %var_1120, %var_1121, %var_1122) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */
}

def @func_7802() -> (Tensor[(13, 14, 14), float32], Tensor[(13, 14, 14), float64]) {
  %368 = @func_7486() /* ty=Tensor[(13, 14, 14), bool] */;
  %369 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 14, 14), bool] */, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %373 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 14, 14), bool] */, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %374 = floor_mod(%371, %372) /* ty=Tensor[(13, 14, 14), float32] */;
  %375 = acosh(%373) /* ty=Tensor[(13, 14, 14), float64] */;
  (%374, %375)
}

def @func_7292(%var_7290: Tensor[(240), float32]) -> (Tensor[(630), uint8], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) {
  @func_7289(%var_7290) /* ty=(Tensor[(630), uint8], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) */
}

def @func_2875(%var_2874: Tensor[(768), float32]) -> (Tensor[(630), uint8], Tensor[(4, 16, 12), bool], Tensor[(768), float32]) {
  %382 = fn (%var_2867: Tensor[(768), float32]) -> (Tensor[(630), uint8], Tensor[(4, 16, 12), bool], Tensor[(768), float32]) {
    %376 = cast(%var_2867, dtype="float32") /* ty=Tensor[(768), float32] */;
    %377 = cast(%var_2867, dtype="float32") /* ty=Tensor[(768), float32] */;
    %378 = reshape(%376, newshape=[4, 16, 12]) /* ty=Tensor[(4, 16, 12), float32] */;
    %379 = reshape(%377, newshape=[4, 16, 12]) /* ty=Tensor[(4, 16, 12), float32] */;
    %380 = @func_2218() /* ty=Tensor[(630), uint8] */;
    %381 = @func_2760(%378, %379) /* ty=Tensor[(4, 16, 12), bool] */;
    (%380, %381, %var_2867)
  };
  %382(%var_2874) /* ty=(Tensor[(630), uint8], Tensor[(4, 16, 12), bool], Tensor[(768), float32]) */
}

def @func_8146() -> (Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), float64]) {
  @func_8144() /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), float64]) */
}

def @func_2947() -> (Tensor[(7, 6, 3), float64],) {
  @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_4785() -> (Tensor[(7, 6, 3), float64],) {
  %383 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %384 = %383.0;
  (%384,)
}

def @func_2181() -> (Tensor[(7, 6, 3), float64],) {
  %386 = fn () -> (Tensor[(7, 6, 3), float64],) {
    %385 = @func_1940() /* ty=Tensor[(7, 6, 3), float64] */;
    (%385,)
  };
  %386() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_6212() -> Tensor[(7, 6, 3), float64] {
  @func_6210() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_1248() -> Tensor[(7, 6, 3), float64] {
  %388 = fn () -> Tensor[(7, 6, 3), float64] {
    %387 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %387.0
  };
  %388() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_8264() -> (Tensor[(220), uint64], Tensor[(7, 6, 3), float64]) {
  %389 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %390 = %389.2;
  %391 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
  (%390, %391)
}

def @func_1628(%var_1615: Tensor[(630, 1), uint8], %var_1616: Tensor[(2548, 1), uint64]) -> (Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) {
  %392 = cast(%var_1615, dtype="uint8") /* ty=Tensor[(630, 1), uint8] */;
  %393 = cast(%var_1615, dtype="uint8") /* ty=Tensor[(630, 1), uint8] */;
  %394 = cast(%var_1616, dtype="uint64") /* ty=Tensor[(2548, 1), uint64] */;
  %395 = reshape(%392, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %396 = reshape(%393, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %397 = reshape(%394, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %398 = @func_1419(%395, %396, %397) /* ty=(Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) */;
  %399 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %400 = cast(%399, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %401 = %398.2;
  %402 = log10(%400) /* ty=Tensor[(7, 6, 3), float64] */;
  (%401, %var_1615, %var_1616, %402)
}

def @func_2069(%var_2066: Tensor[(10, 63), uint8], %var_2067: Tensor[(2548), uint64], %var_2068: Tensor[(576), int8]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32], Tensor[(1120), uint16], Tensor[(10, 63), uint8], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16], Tensor[(576), int8], uint16) {
  %422 = fn (%var_2024: Tensor[(10, 63), uint8], %var_2025: Tensor[(2548), uint64], %var_2048: Tensor[(576), int8]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32], Tensor[(1120), uint16], Tensor[(10, 63), uint8], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16], Tensor[(576), int8], uint16) {
    %403 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %404 = %403.0;
    %405 = cast(%404, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %406 = cast(%var_2024, dtype="uint8") /* ty=Tensor[(10, 63), uint8] */;
    %407 = cast(%var_2025, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %408 = reshape(%406, newshape=[630, 1]) /* ty=Tensor[(630, 1), uint8] */;
    %409 = reshape(%407, newshape=[2548, 1]) /* ty=Tensor[(2548, 1), uint64] */;
    %410 = @func_1628(%408, %409) /* ty=(Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) */;
    %411 = cast(%var_2048, dtype="int8") /* ty=Tensor[(576), int8] */;
    %412 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %413 = cast(%var_2025, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %414 = reshape(%411, newshape=[6, 16, 6]) /* ty=Tensor[(6, 16, 6), int8] */;
    %415 = reshape(%412, newshape=[]) /* ty=uint16 */;
    %416 = reshape(%413, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %417 = @func_828(%414, %415, %416) /* ty=(Tensor[(6, 16, 6), bool], Tensor[(14, 10, 8), uint16], uint16, Tensor[(4, 280), uint16], Tensor[(14, 10, 8), uint16], Tensor[(13, 14, 14), uint64], Tensor[(2548), uint64], Tensor[(13, 14, 14), uint64]) */;
    %418 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
    %419 = acos(%405) /* ty=Tensor[(7, 6, 3), float32] */;
    %420 = %410.0;
    %421 = %417.4;
    (%418, %419, %420, %var_2024, %var_2025, %421, %var_2048, meta[relay.Constant][30] /* ty=uint16 */)
  };
  %422(%var_2066, %var_2067, %var_2068) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32], Tensor[(1120), uint16], Tensor[(10, 63), uint8], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16], Tensor[(576), int8], uint16) */
}

def @func_6534() -> Tensor[(240), float32] {
  %424 = fn () -> Tensor[(240), float32] {
    %423 = @func_6322() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) */;
    %423.2
  };
  %424() /* ty=Tensor[(240), float32] */
}

def @func_2312() -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) {
  %431 = fn () -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) {
    %425 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %426 = %425.0;
    %427 = cast(%426, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %428 = reshape(%427, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %429 = @func_1875(%428) /* ty=(Tensor[(7, 6, 3), float32], Tensor[(144, 4), int8], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
    %430 = %429.2;
    (%426, %430)
  };
  %431() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */
}

def @func_1632(%var_1630: Tensor[(630, 1), uint8], %var_1631: Tensor[(2548, 1), uint64]) -> (Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) {
  @func_1628(%var_1630, %var_1631) /* ty=(Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) */
}

def @func_3529(%var_3528: Tensor[(576), int8]) -> (Tensor[(576), bool], Tensor[(13, 14, 14), float64]) {
  %443 = fn (%var_3509: Tensor[(576), int8]) -> (Tensor[(576), bool], Tensor[(13, 14, 14), float64]) {
    %432 = @func_3459() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) */;
    %433 = %432.3;
    %434 = cast(%var_3509, dtype="bool") /* ty=Tensor[(576), bool] */;
    %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(1), int32] */;
    %436 = cast(%433, dtype="bool") /* ty=Tensor[(576), bool] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?), bool] */;
    %438 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
    %439 = %438.0;
    %440 = cast(%439, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
    %441 = equal(%436, %437) /* ty=Tensor[(576), bool] */;
    %442 = erf(%440) /* ty=Tensor[(13, 14, 14), float64] */;
    (%441, %442)
  };
  %443(%var_3528) /* ty=(Tensor[(576), bool], Tensor[(13, 14, 14), float64]) */
}

def @func_7738() -> Tensor[(7, 6, 3), bool] {
  %445 = fn () -> Tensor[(7, 6, 3), bool] {
    %444 = @func_5761() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) */;
    %444.1
  };
  %445() /* ty=Tensor[(7, 6, 3), bool] */
}

def @func_8090(%var_8074: Tensor[(12, 14, 16), float64], %var_8075: Tensor[(12, 14, 16), float64]) -> (Tensor[(12, 14, 16), float64], Tensor[(9, 16, 15), float32], Tensor[(2160), float32]) {
  %446 = cast(%var_8075, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
  %447 = shape_of(%var_8074, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_8074, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %450 = cast(meta[relay.Constant][31] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %451 = reshape(%450, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float32] */;
  %452 = @func_7436(%451) /* ty=(Tensor[(9, 16, 15), float32],) */;
  %453 = maximum(%448, %449) /* ty=Tensor[(12, 14, 16), float64] */;
  %454 = %452.0;
  (%453, %454, meta[relay.Constant][31] /* ty=Tensor[(2160), float32] */)
}

def @func_8203(%var_8201: Tensor[(312), bool], %var_8202: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), int16], Tensor[(312), bool], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) {
  %467 = fn (%var_8192: Tensor[(312), bool], %var_8198: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), int16], Tensor[(312), bool], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) {
    %455 = @func_2586() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %456 = %455.0;
    %457 = cast(%456, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %458 = cast(%var_8192, dtype="bool") /* ty=Tensor[(312), bool] */;
    %459 = reshape(%457, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %460 = reshape(%458, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %461 = @func_1709(%459, %460) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
    %462 = cast(%var_8198, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %463 = reshape(%462, newshape=[220]) /* ty=Tensor[(220), uint64] */;
    %464 = @func_3333(%463) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
    %465 = %461.1;
    %466 = %464.0;
    (%456, %465, %var_8192, %466, %var_8198)
  };
  %467(%var_8201, %var_8202) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), int16], Tensor[(312), bool], Tensor[(7, 6, 3), float64], Tensor[(220), uint64]) */
}

def @func_7697(%var_7659: Tensor[(312), bool]) -> (Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(10, 63), uint8]) {
  %468 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %469 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %470 = cast(meta[relay.Constant][32] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %471 = reshape(%470, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %472 = @func_4031(%471) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %473 = cast(%var_7659, dtype="bool") /* ty=Tensor[(312), bool] */;
  %474 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(312), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %475 = cast(meta[relay.Constant][32] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?), bool] */;
  %477 = %468.1;
  %478 = cast(%477, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %479 = reshape(%478, newshape=[7, 364]) /* ty=Tensor[(7, 364), bool] */;
  %480 = @func_4183(%479) /* ty=(Tensor[(10, 63), uint8], Tensor[(13, 14, 14), bool], Tensor[(7, 364), bool]) */;
  %481 = %469.0;
  %482 = %472.1;
  %483 = logical_and(%475, %476) /* ty=Tensor[(312), bool] */;
  %484 = %480.0;
  (%477, %481, %482, %483, %484)
}

def @func_997() -> (Tensor[(7, 6, 3), float64],) {
  %485 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %486 = %485.0;
  (%486,)
}

def @func_4146(%var_4143: Tensor[(312), bool], %var_4144: Tensor[(2548), uint64], %var_4145: uint16) -> (Tensor[(630), uint8], Tensor[(13, 14, 14), uint16], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(13, 14, 14), bool], Tensor[(312), bool], uint16, Tensor[(312), bool], Tensor[(220), uint64], Tensor[(16, 1, 15), float32], Tensor[(1, 240), float32]) {
  %526 = fn (%var_4095: Tensor[(312), bool], %var_4096: Tensor[(2548), uint64], %var_4128: uint16) -> (Tensor[(630), uint8], Tensor[(13, 14, 14), uint16], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(13, 14, 14), bool], Tensor[(312), bool], uint16, Tensor[(312), bool], Tensor[(220), uint64], Tensor[(16, 1, 15), float32], Tensor[(1, 240), float32]) {
    %487 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
    %488 = cast(meta[relay.Constant][33] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %489 = cast(meta[relay.Constant][34] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %490 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
    %491 = cast(%var_4096, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %492 = reshape(%488, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %493 = reshape(%489, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %494 = reshape(%490, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
    %495 = reshape(%491, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %496 = @func_1118(%492, %493, %494, %495) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
    %497 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
    %498 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
    %499 = %496.8;
    %500 = cast(%499, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
    %501 = reshape(%497, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %502 = reshape(%498, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %503 = reshape(%500, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %504 = @func_231(%501, %502, %503) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
    %505 = cast(%var_4128, dtype="uint16") /* ty=uint16 */;
    %506 = cast(meta[relay.Constant][34] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %507 = cast(%var_4095, dtype="bool") /* ty=Tensor[(312), bool] */;
    %508 = cast(%499, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
    %509 = reshape(%505, newshape=[]) /* ty=uint16 */;
    %510 = reshape(%506, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %511 = reshape(%507, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %512 = reshape(%508, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %513 = @func_3277(%509, %510, %511, %512) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) */;
    %514 = cast(meta[relay.Constant][35] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %515 = cast(meta[relay.Constant][35] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %516 = reshape(%514, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %517 = reshape(%515, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %518 = @func_335(%516, %517) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
    %519 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
    %520 = reshape(%519, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
    %521 = %487.1;
    %522 = %504.1;
    %523 = %513.5;
    %524 = %518.1;
    %525 = @func_1953(%520) /* ty=Tensor[(16, 1, 15), float32] */;
    (%521, %499, meta[relay.Constant][33] /* ty=Tensor[(126), float64] */, meta[relay.Constant][34] /* ty=Tensor[(1120), uint16] */, %var_4095, %var_4096, %522, %523, %var_4128, %524, meta[relay.Constant][35] /* ty=Tensor[(220), uint64] */, %525, meta[relay.Constant][36] /* ty=Tensor[(1, 240), float32] */)
  };
  %526(%var_4143, %var_4144, %var_4145) /* ty=(Tensor[(630), uint8], Tensor[(13, 14, 14), uint16], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(13, 14, 14), bool], Tensor[(312), bool], uint16, Tensor[(312), bool], Tensor[(220), uint64], Tensor[(16, 1, 15), float32], Tensor[(1, 240), float32]) */
}

def @func_4987() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %527 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %528 = @func_2218() /* ty=Tensor[(630), uint8] */;
  %529 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %530 = %527.0;
  (%528, %529, %530)
}

def @func_2204(%var_2196: Tensor[(630), uint8]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) {
  %531 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %532 = cast(%var_2196, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %533 = cast(meta[relay.Constant][37] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %534 = reshape(%532, newshape=[630, 1]) /* ty=Tensor[(630, 1), uint8] */;
  %535 = reshape(%533, newshape=[2548, 1]) /* ty=Tensor[(2548, 1), uint64] */;
  %536 = @func_1628(%534, %535) /* ty=(Tensor[(1120), uint16], Tensor[(630, 1), uint8], Tensor[(2548, 1), uint64], Tensor[(7, 6, 3), float64]) */;
  %537 = %531.0;
  %538 = %536.3;
  (%537, %538, %var_2196, meta[relay.Constant][37] /* ty=Tensor[(2548), uint64] */)
}

def @func_6587() -> Tensor[(7, 6, 3), float64] {
  @func_6585() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_6646(%var_6644: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(312), bool]) {
  @func_6643(%var_6644) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(312), bool]) */
}

def @func_5182() -> Tensor[(7, 6, 3), float64] {
  @func_5180() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_7576() -> (Tensor[(240), float32],) {
  @func_7574() /* ty=(Tensor[(240), float32],) */
}

def @func_7964(%var_7960: Tensor[(630), uint8], %var_7961: Tensor[(1, 2548), uint64], %var_7962: Tensor[(312), bool], %var_7963: Tensor[(4, 280), uint16]) -> (Tensor[(7, 6, 3), bool], Tensor[(630), uint8], Tensor[(9, 16, 15), float32], Tensor[(2160), float32], Tensor[(1, 2548), int16], Tensor[(?, 2548), bool], Tensor[(312), bool], Tensor[(132, 2), float32], Tensor[(312), bool], Tensor[(9, 16, 15), float32], Tensor[(7, 6, 3), float64], Tensor[(4, 280), uint16]) {
  @func_7958(%var_7960, %var_7961, %var_7962, %var_7963) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(630), uint8], Tensor[(9, 16, 15), float32], Tensor[(2160), float32], Tensor[(1, 2548), int16], Tensor[(?, 2548), bool], Tensor[(312), bool], Tensor[(132, 2), float32], Tensor[(312), bool], Tensor[(9, 16, 15), float32], Tensor[(7, 6, 3), float64], Tensor[(4, 280), uint16]) */
}

def @func_2261() -> Tensor[(7, 6, 3), float64] {
  @func_2259() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_7536(%var_7534: Tensor[(13, 13, 1), uint8], %var_7535: Tensor[(220), uint64]) -> (Tensor[(13, 13, 1), uint8], Tensor[(7, 6, 3), float64], Tensor[(220), uint64], Tensor[(630), uint8]) {
  @func_7532(%var_7534, %var_7535) /* ty=(Tensor[(13, 13, 1), uint8], Tensor[(7, 6, 3), float64], Tensor[(220), uint64], Tensor[(630), uint8]) */
}

def @func_4760() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) {
  %551 = fn () -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) {
    %539 = @func_2311() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
    %540 = @func_4542() /* ty=(Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
    %541 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %542 = %541.0;
    %543 = cast(%542, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %544 = cast(meta[relay.Constant][38] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %545 = reshape(%544, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %546 = @func_3370(%545) /* ty=(Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) */;
    %547 = %539.1;
    %548 = %540.1;
    %549 = cos(%543) /* ty=Tensor[(7, 6, 3), float64] */;
    %550 = %546.0;
    (%547, %548, %549, %550, meta[relay.Constant][38] /* ty=Tensor[(240), float32] */)
  };
  %551() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) */
}

def @func_5141() -> (Tensor[(13, 14, 14), bool],) {
  @func_5139() /* ty=(Tensor[(13, 14, 14), bool],) */
}

def @func_6323() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) {
  %559 = fn () -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) {
    %552 = @func_5078() /* ty=Tensor[(7, 6, 3), float64] */;
    %553 = cast(%552, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %554 = @func_4759() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) */;
    %555 = @func_5180() /* ty=Tensor[(7, 6, 3), float64] */;
    %556 = asin(%553) /* ty=Tensor[(7, 6, 3), float64] */;
    %557 = %554.4;
    %558 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
    (%555, %556, %557, %558)
  };
  %559() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) */
}

def @func_7574() -> (Tensor[(240), float32],) {
  %560 = @func_6533() /* ty=Tensor[(240), float32] */;
  (%560,)
}

def @func_5603() -> Tensor[(13, 14, 14), float32] {
  %561 = @func_5139() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  log(%563) /* ty=Tensor[(13, 14, 14), float32] */
}

def @func_8316() -> (Tensor[(7, 6, 3), float64], Tensor[(220), float64]) {
  %564 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %565 = %564.2;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(220), float64] */;
  %567 = cos(%566) /* ty=Tensor[(220), float64] */;
  %568 = cast(%567, dtype="float64") /* ty=Tensor[(220), float64] */;
  %569 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  %570 = erf(%568) /* ty=Tensor[(220), float64] */;
  (%569, %570)
}

def @func_8456(%var_8454: Tensor[(6, 4, 8), float64]) -> Tensor[(6, 4, 8), bool] {
  @func_8453(%var_8454) /* ty=Tensor[(6, 4, 8), bool] */
}

def @func_1583(%var_1582: Tensor[(7, 6, 3), float64]) -> (Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) {
  %583 = fn (%var_1556: Tensor[(7, 6, 3), float64]) -> (Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) {
    %571 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
    %572 = cast(%var_1556, dtype="int32") /* ty=Tensor[(7, 6, 3), int32] */;
    %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%571, dtype="int32") /* ty=Tensor[(7, 6, 3), int32] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %576 = cast(%571, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %577 = atan(%576) /* ty=Tensor[(7, 6, 3), float64] */;
    %578 = cast(%577, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %579 = erf(%578) /* ty=Tensor[(7, 6, 3), float64] */;
    %580 = cast(%579, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %581 = subtract(%574, %575) /* ty=Tensor[(7, 6, 3), int32] */;
    %582 = tan(%580) /* ty=Tensor[(7, 6, 3), float32] */;
    (%581, %582)
  };
  %583(%var_1582) /* ty=(Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) */
}

def @func_8557(%var_8554: Tensor[(1120, 1), uint16], %var_8555: Tensor[(312), bool], %var_8556: Tensor[(2548), uint64]) -> (Tensor[(11, 16, 8), float64], Tensor[(7, 6, 3), float64], uint16, Tensor[(1120, 1), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(3, 5, 7), bool], Tensor[(105), float64], Tensor[(7, 6, 3), float32]) {
  %601 = fn (%var_8508: Tensor[(1120, 1), uint16], %var_8509: Tensor[(312), bool], %var_8510: Tensor[(2548), uint64]) -> (Tensor[(11, 16, 8), float64], Tensor[(7, 6, 3), float64], uint16, Tensor[(1120, 1), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(3, 5, 7), bool], Tensor[(105), float64], Tensor[(7, 6, 3), float32]) {
    %584 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
    %585 = cast(meta[relay.Constant][40] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %586 = cast(%var_8508, dtype="uint16") /* ty=Tensor[(1120, 1), uint16] */;
    %587 = cast(%var_8509, dtype="bool") /* ty=Tensor[(312), bool] */;
    %588 = cast(%var_8510, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %589 = reshape(%585, newshape=[]) /* ty=uint16 */;
    %590 = reshape(%586, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %591 = reshape(%587, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %592 = reshape(%588, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %593 = @func_3277(%589, %590, %591, %592) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) */;
    %594 = cast(meta[relay.Constant][41] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
    %595 = reshape(%594, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
    %596 = @func_5970(%595) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
    %597 = exp(%584) /* ty=Tensor[(11, 16, 8), float64] */;
    %598 = %593.1;
    %599 = %596.0;
    %600 = @func_7769() /* ty=Tensor[(7, 6, 3), float32] */;
    (%597, %598, meta[relay.Constant][40] /* ty=uint16 */, %var_8508, %var_8509, %var_8510, %599, meta[relay.Constant][41] /* ty=Tensor[(105), float64] */, %600)
  };
  %601(%var_8554, %var_8555, %var_8556) /* ty=(Tensor[(11, 16, 8), float64], Tensor[(7, 6, 3), float64], uint16, Tensor[(1120, 1), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(3, 5, 7), bool], Tensor[(105), float64], Tensor[(7, 6, 3), float32]) */
}

def @func_7253(%var_7185: Tensor[(13, 1, 4), float32], %var_7204: Tensor[(126), float64], %var_7233: Tensor[(105, 1), float64]) -> (Tensor[(13, ?, 4), bool], Tensor[(7, 6, 3), float32], Tensor[(126), float64], Tensor[(13, ?, 4), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(105, 1), float64], Tensor[(7, 6, 3), float64]) {
  %602 = cast(%var_7185, dtype="float32") /* ty=Tensor[(13, 1, 4), float32] */;
  %603 = sin(%602) /* ty=Tensor[(13, 1, 4), float32] */;
  %604 = cast(%var_7185, dtype="uint8") /* ty=Tensor[(13, 1, 4), uint8] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="uint8") /* ty=Tensor[(13, 1, 4), uint8] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %608 = bitwise_and(%606, %607) /* ty=Tensor[(13, ?, 4), uint8] */;
  %609 = cast(%603, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="bool") /* ty=Tensor[(13, ?, 4), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %613 = cast(%var_7204, dtype="float64") /* ty=Tensor[(126), float64] */;
  %614 = reshape(%613, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %615 = cast(%608, dtype="float32") /* ty=Tensor[(13, ?, 4), float32] */;
  %616 = cast(meta[relay.Constant][42] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %617 = reshape(%616, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %618 = @func_6643(%617) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(312), bool]) */;
  %619 = cast(%var_7233, dtype="float64") /* ty=Tensor[(105, 1), float64] */;
  %620 = reshape(%619, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %621 = @func_5970(%620) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %622 = @func_6857() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
  %623 = logical_or(%611, %612) /* ty=Tensor[(13, ?, 4), bool] */;
  %624 = @func_1280(%614) /* ty=Tensor[(7, 6, 3), float32] */;
  %625 = exp(%615) /* ty=Tensor[(13, ?, 4), float32] */;
  %626 = %618.2;
  %627 = %621.2;
  %628 = %622.0;
  (%623, %624, %var_7204, %625, %626, meta[relay.Constant][42] /* ty=Tensor[(312), bool] */, %627, %var_7233, %628)
}

def @func_8038() -> (Tensor[(7, 6, 3), float64],) {
  @func_8036() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_3837() -> Tensor[(7, 6, 3), float64] {
  %629 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  cosh(%630) /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_8144() -> (Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), float64]) {
  %631 = @func_6655() /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 14, 14), uint64], Tensor[(14, 182), uint64]) */;
  %632 = %631.1;
  %633 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
  (%632, %633)
}

def @func_3055(%var_3031: Tensor[(2, 11, 11), uint8], %var_3032: Tensor[(2, 11, 11), uint8]) -> (Tensor[(2, 11, 11), uint8],) {
  %634 = cast(%var_3032, dtype="uint8") /* ty=Tensor[(2, 11, 11), uint8] */;
  %635 = shape_of(%var_3031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_3031, dtype="uint8") /* ty=Tensor[(2, 11, 11), uint8] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %638 = minimum(%636, %637) /* ty=Tensor[(2, 11, 11), uint8] */;
  (%638,)
}

def @func_3373(%var_3371: Tensor[(8, 30), float32]) -> (Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) {
  @func_3370(%var_3371) /* ty=(Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) */
}

def @func_6493(%var_6490: Tensor[(4, 3, 4), float64], %var_6491: Tensor[(126), float64], %var_6492: Tensor[(1120), uint16]) -> (Tensor[(4, 3, 4), float64], Tensor[(630), uint8], Tensor[(13, 8, 3), float32], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(3, 104), bool], Tensor[(2548), uint64]) {
  %655 = fn (%var_6427: Tensor[(4, 3, 4), float64], %var_6463: Tensor[(126), float64], %var_6464: Tensor[(1120), uint16]) -> (Tensor[(4, 3, 4), float64], Tensor[(630), uint8], Tensor[(13, 8, 3), float32], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(3, 104), bool], Tensor[(2548), uint64]) {
    %639 = cast(%var_6427, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
    %640 = exp(%639) /* ty=Tensor[(4, 3, 4), float64] */;
    %641 = cast(%640, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
    %642 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
    %643 = cast(%var_6463, dtype="float64") /* ty=Tensor[(126), float64] */;
    %644 = cast(%var_6464, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %645 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 104), bool] */, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
    %646 = cast(meta[relay.Constant][44] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %647 = reshape(%643, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %648 = reshape(%644, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %649 = reshape(%645, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
    %650 = reshape(%646, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %651 = @func_1118(%647, %648, %649, %650) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
    %652 = sinh(%641) /* ty=Tensor[(4, 3, 4), float64] */;
    %653 = %642.0;
    %654 = %651.6;
    (%652, %653, %654, %var_6463, %var_6464, meta[relay.Constant][43] /* ty=Tensor[(3, 104), bool] */, meta[relay.Constant][44] /* ty=Tensor[(2548), uint64] */)
  };
  %655(%var_6490, %var_6491, %var_6492) /* ty=(Tensor[(4, 3, 4), float64], Tensor[(630), uint8], Tensor[(13, 8, 3), float32], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(3, 104), bool], Tensor[(2548), uint64]) */
}

def @func_4400(%var_4396: Tensor[(2548), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint32]) {
  %656 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %657 = cast(meta[relay.Constant][45] /* ty=Tensor[(2548), bool] */, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %658 = reshape(%657, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
  %659 = @func_3016(%658) /* ty=(Tensor[(13, 14, 14), bool],) */;
  %660 = cast(%var_4396, dtype="uint32") /* ty=Tensor[(2548), uint32] */;
  %661 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(2548), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %662 = cast(meta[relay.Constant][45] /* ty=Tensor[(2548), bool] */, dtype="uint32") /* ty=Tensor[(2548), uint32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %664 = %656.4;
  %665 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
  %666 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %667 = %659.0;
  %668 = bitwise_and(%662, %663) /* ty=Tensor[(2548), uint32] */;
  (%664, %665, %666, %667, %668)
}

def @func_6656() -> (Tensor[(7, 6, 3), bool], Tensor[(13, 14, 14), uint64], Tensor[(14, 182), uint64]) {
  %679 = fn () -> (Tensor[(7, 6, 3), bool], Tensor[(13, 14, 14), uint64], Tensor[(14, 182), uint64]) {
    %669 = @func_5267() /* ty=(Tensor[(7, 6, 3), bool],) */;
    %670 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 182), uint64] */, dtype="uint64") /* ty=Tensor[(14, 182), uint64] */;
    %671 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 182), uint64] */, dtype="uint64") /* ty=Tensor[(14, 182), uint64] */;
    %672 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 182), uint64] */, dtype="uint64") /* ty=Tensor[(14, 182), uint64] */;
    %673 = reshape(%670, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %674 = reshape(%671, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %675 = reshape(%672, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %676 = @func_163(%673, %674, %675) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
    %677 = %669.0;
    %678 = %676.1;
    (%677, %678, meta[relay.Constant][46] /* ty=Tensor[(14, 182), uint64] */)
  };
  %679() /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 14, 14), uint64], Tensor[(14, 182), uint64]) */
}

def @func_7436(%var_7432: Tensor[(9, 16, 15), float32]) -> (Tensor[(9, 16, 15), float32],) {
  %680 = cast(%var_7432, dtype="float32") /* ty=Tensor[(9, 16, 15), float32] */;
  %681 = atanh(%680) /* ty=Tensor[(9, 16, 15), float32] */;
  (%681,)
}

def @func_3678() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
  %686 = fn () -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
    %682 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
    %683 = cast(%682, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %684 = reshape(%683, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %685 = @func_1280(%684) /* ty=Tensor[(7, 6, 3), float32] */;
    (%682, %685)
  };
  %686() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */
}

def @func_4186(%var_4184: Tensor[(7, 364), bool]) -> (Tensor[(10, 63), uint8], Tensor[(13, 14, 14), bool], Tensor[(7, 364), bool]) {
  @func_4183(%var_4184) /* ty=(Tensor[(10, 63), uint8], Tensor[(13, 14, 14), bool], Tensor[(7, 364), bool]) */
}

def @func_168(%var_165: Tensor[(13, 14, 14), uint64], %var_166: Tensor[(13, 14, 14), uint64], %var_167: Tensor[(13, 14, 14), uint64]) -> (Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) {
  @func_163(%var_165, %var_166, %var_167) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */
}

def @func_5079() -> Tensor[(7, 6, 3), float64] {
  %688 = fn () -> Tensor[(7, 6, 3), float64] {
    %687 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %687.0
  };
  %688() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_1372(%var_1335: uint16, %var_1336: Tensor[(8, 140), uint16], %var_1343: Tensor[(312), bool], %var_1344: Tensor[(2548), uint64], %var_1362: Tensor[(7, 6, 3), float64]) -> (Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) {
  %689 = cast(%var_1335, dtype="uint16") /* ty=uint16 */;
  %690 = cast(%var_1336, dtype="uint16") /* ty=Tensor[(8, 140), uint16] */;
  %691 = reshape(%689, newshape=[]) /* ty=uint16 */;
  %692 = reshape(%690, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint16] */;
  %693 = cast(%var_1343, dtype="bool") /* ty=Tensor[(312), bool] */;
  %694 = cast(%var_1343, dtype="bool") /* ty=Tensor[(312), bool] */;
  %695 = cast(%var_1344, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %696 = reshape(%693, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %697 = reshape(%694, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
  %698 = reshape(%695, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %699 = @func_231(%696, %697, %698) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
  %700 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %701 = %700.0;
  %702 = cast(%var_1362, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %706 = cast(%var_1362, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %707 = reshape(%706, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %708 = @func_381(%691, %692) /* ty=Tensor[(14, 10, 8), uint16] */;
  %709 = %699.3;
  %710 = less_equal(%704, %705) /* ty=Tensor[(7, 6, 3), bool] */;
  %711 = @func_1280(%707) /* ty=Tensor[(7, 6, 3), float32] */;
  (%708, %var_1335, %var_1336, %709, %var_1343, %var_1344, %710, %711)
}

def @func_1424(%var_1421: Tensor[(5, 14, 9), uint8], %var_1422: Tensor[(5, 14, 9), uint8], %var_1423: Tensor[(2548), uint64]) -> (Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) {
  @func_1419(%var_1421, %var_1422, %var_1423) /* ty=(Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) */
}

def @func_999() -> (Tensor[(7, 6, 3), float64],) {
  @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_4155() -> Tensor[(7, 6, 3), float64] {
  %712 = fn () -> Tensor[(7, 6, 3), float64] {
    @func_3837() /* ty=Tensor[(7, 6, 3), float64] */
  };
  %712() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_5547() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) {
  %713 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %714 = @func_3866() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(312), bool]) */;
  %715 = %714.2;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(312), float64] */;
  %717 = %713.0;
  %718 = @func_5078() /* ty=Tensor[(7, 6, 3), float64] */;
  %719 = erf(%716) /* ty=Tensor[(312), float64] */;
  (%717, %718, %719)
}

def @func_925() -> (Tensor[(7, 6, 3), float64],) {
  %722 = fn () -> (Tensor[(7, 6, 3), float64],) {
    %720 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 6, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %721 = atanh(%720) /* ty=Tensor[(7, 6, 3), float64] */;
    (%721,)
  };
  %722() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_2220() -> Tensor[(630), uint8] {
  @func_2218() /* ty=Tensor[(630), uint8] */
}

def @func_385(%var_383: uint16, %var_384: Tensor[(14, 10, 8), uint16]) -> Tensor[(14, 10, 8), uint16] {
  @func_381(%var_383, %var_384) /* ty=Tensor[(14, 10, 8), uint16] */
}

def @func_7769() -> Tensor[(7, 6, 3), float32] {
  %723 = @func_4599() /* ty=(Tensor[(7, 6, 3), float32],) */;
  %723.0
}

def @func_4832() -> Tensor[(7, 6, 3), float64] {
  %724 = fn () -> Tensor[(7, 6, 3), float64] {
    @func_3837() /* ty=Tensor[(7, 6, 3), float64] */
  };
  %724() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_5269() -> (Tensor[(7, 6, 3), bool],) {
  @func_5267() /* ty=(Tensor[(7, 6, 3), bool],) */
}

def @func_6972() -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64]) {
  %728 = fn () -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64]) {
    %725 = @func_5737() /* ty=(Tensor[(7, 6, 3), float32],) */;
    %726 = %725.0;
    %727 = @func_3837() /* ty=Tensor[(7, 6, 3), float64] */;
    (%726, %727)
  };
  %728() /* ty=(Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64]) */
}

def @func_2665() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), int32]) {
  @func_2663() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), int32]) */
}

def @func_5180() -> Tensor[(7, 6, 3), float64] {
  %729 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %729.0
}

def @func_7771() -> Tensor[(7, 6, 3), float32] {
  @func_7769() /* ty=Tensor[(7, 6, 3), float32] */
}

def @func_7289(%var_7272: Tensor[(240), float32]) -> (Tensor[(630), uint8], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), float64]) {
  %730 = cast(%var_7272, dtype="float32") /* ty=Tensor[(240), float32] */;
  %731 = reshape(%730, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %732 = @func_2218() /* ty=Tensor[(630), uint8] */;
  %733 = @func_1953(%731) /* ty=Tensor[(16, 1, 15), float32] */;
  %734 = @func_6210() /* ty=Tensor[(7, 6, 3), float64] */;
  (%732, %733, %var_7272, %734)
}

def @func_4338() -> Tensor[(7, 6, 3), float64] {
  %736 = fn () -> Tensor[(7, 6, 3), float64] {
    %735 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
    %735.3
  };
  %736() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_6401(%var_6387: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), float32],) {
  %737 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %738 = %737.0;
  %739 = cast(%var_6387, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %743 = divide(%741, %742) /* ty=Tensor[(13, 14, 14), float32] */;
  (%743,)
}

def @func_8036() -> (Tensor[(7, 6, 3), float64],) {
  %744 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
  %745 = %744.0;
  (%745,)
}

def @func_5472() -> (Tensor[(7, 6, 3), float64],) {
  @func_5470() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_8233() -> Tensor[(220), float32] {
  @func_8231() /* ty=Tensor[(220), float32] */
}

def @func_7532(%var_7510: Tensor[(13, 13, 1), uint8], %var_7518: Tensor[(220), uint64]) -> (Tensor[(13, 13, 1), uint8], Tensor[(7, 6, 3), float64], Tensor[(220), uint64], Tensor[(630), uint8]) {
  %746 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %747 = cast(%var_7510, dtype="uint8") /* ty=Tensor[(13, 13, 1), uint8] */;
  %748 = cast(%var_7518, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %749 = reshape(%748, newshape=[220]) /* ty=Tensor[(220), uint64] */;
  %750 = @func_3333(%749) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
  %751 = @func_4987() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %752 = minimum(%746, %747) /* ty=Tensor[(13, 13, 1), uint8] */;
  %753 = %750.0;
  %754 = %751.0;
  (%752, %753, %var_7518, %754)
}

def @func_3075() -> (Tensor[(630), uint8],) {
  %757 = fn () -> (Tensor[(630), uint8],) {
    %755 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
    %756 = %755.1;
    (%756,)
  };
  %757() /* ty=(Tensor[(630), uint8],) */
}

def @func_1940() -> Tensor[(7, 6, 3), float64] {
  @func_1302() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_5761() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) {
  %758 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
  %759 = cast(meta[relay.Constant][49] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %760 = cast(meta[relay.Constant][50] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %761 = reshape(%759, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %762 = reshape(%760, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %763 = @func_1709(%761, %762) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
  %764 = %758.0;
  %765 = %763.0;
  (%764, %765, meta[relay.Constant][49] /* ty=Tensor[(126), float64] */, meta[relay.Constant][50] /* ty=Tensor[(312), bool] */)
}

def @func_4456() -> (Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) {
  @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */
}

def @func_7327() -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %773 = fn () -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
    %766 = @func_4599() /* ty=(Tensor[(7, 6, 3), float32],) */;
    %767 = @func_5470() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %768 = @func_5547() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) */;
    %769 = %766.0;
    %770 = %767.0;
    %771 = %768.1;
    %772 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
    (%769, %770, %771, %772)
  };
  %773() /* ty=(Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */
}

def @func_2414() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %774 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %775 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %776 = %774.0;
  (%775, %776)
}

def @func_8021() -> (Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) {
  %785 = fn () -> (Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) {
    %777 = @func_5267() /* ty=(Tensor[(7, 6, 3), bool],) */;
    %778 = @func_5761() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(312), bool]) */;
    %779 = cast(meta[relay.Constant][51] /* ty=Tensor[(220), uint64] */, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %780 = reshape(%779, newshape=[220]) /* ty=Tensor[(220), uint64] */;
    %781 = @func_3333(%780) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */;
    %782 = %777.0;
    %783 = %778.2;
    %784 = %781.1;
    (%782, %783, %784, meta[relay.Constant][51] /* ty=Tensor[(220), uint64] */)
  };
  %785() /* ty=(Tensor[(7, 6, 3), bool], Tensor[(126), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */
}

def @func_7873() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) {
  %790 = fn () -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) {
    %786 = @func_4759() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(240), float32]) */;
    %787 = @func_5095() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %788 = %786.3;
    %789 = %787.0;
    (%788, %789)
  };
  %790() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) */
}

def @func_7087(%var_7082: Tensor[(240), float32], %var_7083: Tensor[(1, 2548), bool], %var_7084: Tensor[(24, 2), float64], %var_7085: Tensor[(1120), uint16], %var_7086: Tensor[(24, 2), float64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(1, 2548), bool], Tensor[(8, 30), int16], Tensor[(3, 104), bool], Tensor[(1120), uint16], Tensor[(24, 2), bool], Tensor[(24, 2), int16]) {
  %826 = fn (%var_7011: Tensor[(240), float32], %var_7037: Tensor[(1, 2548), bool], %var_7047: Tensor[(24, 2), float64], %var_7048: Tensor[(1120), uint16], %var_7057: Tensor[(24, 2), float64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(1, 2548), bool], Tensor[(8, 30), int16], Tensor[(3, 104), bool], Tensor[(1120), uint16], Tensor[(24, 2), bool], Tensor[(24, 2), int16]) {
    %791 = @func_5816() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16], Tensor[(7, 6, 3), float64]) */;
    %792 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
    %793 = cast(%var_7037, dtype="bool") /* ty=Tensor[(1, 2548), bool] */;
    %794 = reshape(%793, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
    %795 = @func_3016(%794) /* ty=(Tensor[(13, 14, 14), bool],) */;
    %796 = cast(%var_7011, dtype="float32") /* ty=Tensor[(240), float32] */;
    %797 = reshape(%796, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %798 = @func_3370(%797) /* ty=(Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) */;
    %799 = %798.2;
    %800 = cast(%var_7011, dtype="int16") /* ty=Tensor[(240), int16] */;
    %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(2), int32] */;
    %802 = cast(%799, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %804 = cast(%var_7047, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
    %805 = %791.3;
    %806 = cast(%805, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %807 = cast(%var_7048, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %808 = reshape(%804, newshape=[4, 3, 4]) /* ty=Tensor[(4, 3, 4), float64] */;
    %809 = reshape(%806, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %810 = reshape(%807, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %811 = @func_6489(%808, %809, %810) /* ty=(Tensor[(4, 3, 4), float64], Tensor[(630), uint8], Tensor[(13, 8, 3), float32], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(3, 104), bool], Tensor[(2548), uint64]) */;
    %812 = cast(meta[relay.Constant][52] /* ty=Tensor[(24, 2), float64] */, dtype="bool") /* ty=Tensor[(24, 2), bool] */;
    %813 = shape_of(%var_7047, dtype="int32") /* ty=Tensor[(2), int32] */;
    %814 = cast(%var_7047, dtype="bool") /* ty=Tensor[(24, 2), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %816 = cast(%var_7057, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
    %817 = shape_of(%var_7047, dtype="int32") /* ty=Tensor[(2), int32] */;
    %818 = cast(%var_7047, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %820 = %792.0;
    %821 = %795.0;
    %822 = multiply(%802, %803) /* ty=Tensor[(8, 30), int16] */;
    %823 = %811.5;
    %824 = less(%814, %815) /* ty=Tensor[(24, 2), bool] */;
    %825 = maximum(%818, %819) /* ty=Tensor[(24, 2), int16] */;
    (%805, %820, %821, %var_7037, %822, %823, %var_7048, %824, %825)
  };
  %826(%var_7082, %var_7083, %var_7084, %var_7085, %var_7086) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(1, 2548), bool], Tensor[(8, 30), int16], Tensor[(3, 104), bool], Tensor[(1120), uint16], Tensor[(24, 2), bool], Tensor[(24, 2), int16]) */
}

def @func_3461() -> (Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) {
  @func_3459() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) */
}

def @func_4787() -> (Tensor[(7, 6, 3), float64],) {
  @func_4785() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_5553() -> (Tensor[(7, 6, 3), float64],) {
  %828 = fn () -> (Tensor[(7, 6, 3), float64],) {
    %827 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
    (%827,)
  };
  %828() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_3999(%var_3986: Tensor[(10, 63), uint8], %var_3992: Tensor[(242), uint8]) -> (Tensor[(10, 63), bool], Tensor[(2, 11, 11), uint8], Tensor[(242), uint8]) {
  %829 = @func_3459() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) */;
  %830 = %829.1;
  %831 = cast(%var_3986, dtype="bool") /* ty=Tensor[(10, 63), bool] */;
  %832 = shape_of(%830, dtype="int32") /* ty=Tensor[(2), int32] */;
  %833 = cast(%830, dtype="bool") /* ty=Tensor[(10, 63), bool] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %835 = cast(%var_3992, dtype="uint8") /* ty=Tensor[(242), uint8] */;
  %836 = cast(%var_3992, dtype="uint8") /* ty=Tensor[(242), uint8] */;
  %837 = reshape(%835, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint8] */;
  %838 = reshape(%836, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint8] */;
  %839 = @func_3055(%837, %838) /* ty=(Tensor[(2, 11, 11), uint8],) */;
  %840 = not_equal(%833, %834) /* ty=Tensor[(10, 63), bool] */;
  %841 = %839.0;
  (%840, %841, %var_3992)
}

def @func_7345() -> (Tensor[(7, 6, 3), float32],) {
  %842 = @func_5737() /* ty=(Tensor[(7, 6, 3), float32],) */;
  %843 = %842.0;
  (%843,)
}

def @func_3843(%var_3840: Tensor[(14, 14, 13), float64]) -> Tensor[(14, 14, 13), float64] {
  %844 = cast(%var_3840, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  sin(%844) /* ty=Tensor[(14, 14, 13), float64] */
}

def @func_6744() -> Tensor[(7, 6, 3), float64] {
  @func_6742() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_4031(%var_4019: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %845 = @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */;
  %846 = cast(%var_4019, dtype="bool") /* ty=Tensor[(312), bool] */;
  %847 = cast(meta[relay.Constant][53] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %848 = reshape(%846, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %849 = reshape(%847, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %850 = @func_3314(%848, %849) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %851 = %845.0;
  %852 = %850.1;
  (%851, %852, %var_4019, meta[relay.Constant][53] /* ty=Tensor[(2548), uint64] */)
}

def @func_8108() -> Tensor[(7, 6, 3), float64] {
  @func_8106() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_7487() -> Tensor[(13, 14, 14), bool] {
  %854 = fn () -> Tensor[(13, 14, 14), bool] {
    %853 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
    %853.0
  };
  %854() /* ty=Tensor[(13, 14, 14), bool] */
}

def @func_6857() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
  %855 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %857 = reshape(%856, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %858 = @func_1581(%857) /* ty=(Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) */;
  %859 = %858.1;
  %860 = cast(%859, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
  %861 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
  %862 = sigmoid(%860) /* ty=Tensor[(7, 6, 3), float32] */;
  (%861, %855, %862)
}

def @func_5972(%var_5971: Tensor[(3, 5, 7), float64]) -> (Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) {
  %878 = fn (%var_5907: Tensor[(3, 5, 7), float64]) -> (Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) {
    %863 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 5, 7), float64] */, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
    %864 = shape_of(%var_5907, dtype="int32") /* ty=Tensor[(3), int32] */;
    %865 = cast(%var_5907, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
    %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %867 = @func_5095() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %868 = cast(meta[relay.Constant][55] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
    %869 = reshape(%868, newshape=[630]) /* ty=Tensor[(630), uint8] */;
    %870 = @func_2204(%869) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(2548), uint64]) */;
    %871 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
    %872 = @func_3074() /* ty=(Tensor[(630), uint8],) */;
    %873 = not_equal(%865, %866) /* ty=Tensor[(3, 5, 7), bool] */;
    %874 = %867.0;
    %875 = %870.3;
    %876 = %871.0;
    %877 = %872.0;
    (%873, %874, %875, meta[relay.Constant][55] /* ty=Tensor[(630), uint8] */, %876, %877)
  };
  %878(%var_5971) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(630), uint8], Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */
}

def @func_8094(%var_8092: Tensor[(12, 14, 16), float64], %var_8093: Tensor[(12, 14, 16), float64]) -> (Tensor[(12, 14, 16), float64], Tensor[(9, 16, 15), float32], Tensor[(2160), float32]) {
  @func_8090(%var_8092, %var_8093) /* ty=(Tensor[(12, 14, 16), float64], Tensor[(9, 16, 15), float32], Tensor[(2160), float32]) */
}

def @func_1709(%var_1671: Tensor[(7, 6, 3), float64], %var_1687: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) {
  %879 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %880 = cast(%var_1671, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %884 = cast(%var_1687, dtype="bool") /* ty=Tensor[(312), bool] */;
  %885 = reshape(%884, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %886 = @func_1540(%885) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
  %887 = %886.1;
  %888 = cast(%var_1687, dtype="int16") /* ty=Tensor[(312), int16] */;
  %889 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(%887, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %892 = greater_equal(%882, %883) /* ty=Tensor[(7, 6, 3), bool] */;
  %893 = minimum(%890, %891) /* ty=Tensor[(13, 8, 3), int16] */;
  (%892, %893)
}

def @func_6742() -> Tensor[(7, 6, 3), float64] {
  @func_6585() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_2763(%var_2761: Tensor[(4, 16, 12), float32], %var_2762: Tensor[(4, 16, 12), float32]) -> Tensor[(4, 16, 12), bool] {
  %898 = fn (%var_2745: Tensor[(4, 16, 12), float32], %var_2746: Tensor[(4, 16, 12), float32]) -> Tensor[(4, 16, 12), bool] {
    %894 = cast(%var_2746, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
    %895 = shape_of(%var_2745, dtype="int32") /* ty=Tensor[(3), int32] */;
    %896 = cast(%var_2745, dtype="bool") /* ty=Tensor[(4, 16, 12), bool] */;
    %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%896, %897) /* ty=Tensor[(4, 16, 12), bool] */
  };
  %898(%var_2761, %var_2762) /* ty=Tensor[(4, 16, 12), bool] */
}

def @func_6368(%var_6362: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %899 = @func_4987() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
  %900 = cast(%var_6362, dtype="bool") /* ty=Tensor[(312), bool] */;
  %901 = cast(meta[relay.Constant][56] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %902 = reshape(%900, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %903 = reshape(%901, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %904 = @func_3760(%902, %903) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %905 = %899.2;
  %906 = %904.3;
  (%905, %906, %var_6362, meta[relay.Constant][56] /* ty=Tensor[(2548), uint64] */)
}

def @func_3839() -> Tensor[(7, 6, 3), float64] {
  @func_3837() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_1955(%var_1954: Tensor[(16, 1, 15), float32]) -> Tensor[(16, 1, 15), float32] {
  %909 = fn (%var_1944: Tensor[(16, 1, 15), float32]) -> Tensor[(16, 1, 15), float32] {
    %907 = cast(-8.19329f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %908 = cast(%var_1944, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
    divide(%907, %908) /* ty=Tensor[(16, 1, 15), float32] */
  };
  %909(%var_1954) /* ty=Tensor[(16, 1, 15), float32] */
}

def @func_5470() -> (Tensor[(7, 6, 3), float64],) {
  %910 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  (%910,)
}

def @func_6562() -> (Tensor[(630), uint8],) {
  %913 = fn () -> (Tensor[(630), uint8],) {
    %911 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
    %912 = %911.1;
    (%912,)
  };
  %913() /* ty=(Tensor[(630), uint8],) */
}

def @func_4454() -> (Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) {
  %914 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %915 = %914.0;
  %916 = @func_2218() /* ty=Tensor[(630), uint8] */;
  (%915, %916)
}

def @func_381(%var_358: uint16, %var_359: Tensor[(14, 10, 8), uint16]) -> Tensor[(14, 10, 8), uint16] {
  %917 = cast(%var_358, dtype="uint16") /* ty=uint16 */;
  %918 = cast(%var_359, dtype="uint16") /* ty=Tensor[(14, 10, 8), uint16] */;
  %919 = logical_xor(%917, %918) /* ty=Tensor[(14, 10, 8), uint16] */;
  %920 = cast(%919, dtype="uint16") /* ty=Tensor[(14, 10, 8), uint16] */;
  %921 = shape_of(%var_359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %922 = cast(%var_359, dtype="uint16") /* ty=Tensor[(14, 10, 8), uint16] */;
  %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%922, %923) /* ty=Tensor[(14, 10, 8), uint16] */
}

def @func_5247(%var_5246: Tensor[(1120), uint16]) -> (Tensor[(7, 6, 3), float64], Tensor[(14, 14, 13), float64], Tensor[(2548), float64], Tensor[(2548), uint64], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(630), uint8], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) {
  %949 = fn (%var_5216: Tensor[(1120), uint16]) -> (Tensor[(7, 6, 3), float64], Tensor[(14, 14, 13), float64], Tensor[(2548), float64], Tensor[(2548), uint64], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(630), uint8], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) {
    %924 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
    %925 = cast(meta[relay.Constant][57] /* ty=Tensor[(2548), float64] */, dtype="float64") /* ty=Tensor[(2548), float64] */;
    %926 = reshape(%925, newshape=[14, 14, 13]) /* ty=Tensor[(14, 14, 13), float64] */;
    %927 = cast(meta[relay.Constant][58] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %928 = cast(%var_5216, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %929 = cast(meta[relay.Constant][59] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %930 = @func_3843(%926) /* ty=Tensor[(14, 14, 13), float64] */;
    %931 = cast(%930, dtype="uint64") /* ty=Tensor[(14, 14, 13), uint64] */;
    %932 = reshape(%927, newshape=[]) /* ty=uint16 */;
    %933 = reshape(%928, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %934 = reshape(%929, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %935 = reshape(%931, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %936 = @func_3277(%932, %933, %934, %935) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(312), bool], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(14, 10, 8), uint16]) */;
    %937 = %924.0;
    %938 = cast(%937, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %939 = cast(meta[relay.Constant][59] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %940 = cast(meta[relay.Constant][57] /* ty=Tensor[(2548), float64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %941 = reshape(%938, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %942 = reshape(%939, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %943 = reshape(%940, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %944 = @func_2376(%941, %942, %943) /* ty=(Tensor[(14, 15, 11), float32], Tensor[(7, 6, 3), float64], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
    %945 = %936.6;
    %946 = @func_2218() /* ty=Tensor[(630), uint8] */;
    %947 = %944.4;
    %948 = @func_4337() /* ty=Tensor[(7, 6, 3), float64] */;
    (%937, %930, meta[relay.Constant][57] /* ty=Tensor[(2548), float64] */, %945, meta[relay.Constant][58] /* ty=uint16 */, %var_5216, meta[relay.Constant][59] /* ty=Tensor[(312), bool] */, %946, %947, %948)
  };
  %949(%var_5246) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 14, 13), float64], Tensor[(2548), float64], Tensor[(2548), uint64], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(630), uint8], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) */
}

def @func_3866() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(312), bool]) {
  %950 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %951 = cast(meta[relay.Constant][60] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %952 = reshape(%951, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %953 = @func_1540(%952) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) */;
  %954 = %950.0;
  %955 = %953.1;
  (%954, %955, meta[relay.Constant][60] /* ty=Tensor[(312), bool] */)
}

def @func_5605() -> Tensor[(13, 14, 14), float32] {
  @func_5603() /* ty=Tensor[(13, 14, 14), float32] */
}

def @func_1930() -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64]) {
  %964 = fn () -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64]) {
    %956 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
    %957 = cast(meta[relay.Constant][61] /* ty=Tensor[(7, 6, 3), float64] */, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %958 = shape_of(%956, dtype="int32") /* ty=Tensor[(3), int32] */;
    %959 = cast(%956, dtype="bool") /* ty=Tensor[(7, 6, 3), bool] */;
    %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %961 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %962 = logical_and(%959, %960) /* ty=Tensor[(7, 6, 3), bool] */;
    %963 = %961.0;
    (%962, %963)
  };
  %964() /* ty=(Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64]) */
}

def @func_5817() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16], Tensor[(7, 6, 3), float64]) {
  %972 = fn () -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16], Tensor[(7, 6, 3), float64]) {
    %965 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
    %966 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
    %967 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %968 = %965.1;
    %969 = @func_4337() /* ty=Tensor[(7, 6, 3), float64] */;
    %970 = %966.3;
    %971 = %967.0;
    (%968, %969, %970, %971)
  };
  %972() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(1120), uint16], Tensor[(7, 6, 3), float64]) */
}

def @func_6404(%var_6402: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), float32],) {
  @func_6401(%var_6402) /* ty=(Tensor[(13, 14, 14), float32],) */
}

def @func_3868() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(312), bool]) {
  @func_3866() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(312), bool]) */
}

def @func_2259() -> Tensor[(7, 6, 3), float64] {
  %973 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %973.0
}

def @func_4183(%var_4175: Tensor[(7, 364), bool]) -> (Tensor[(10, 63), uint8], Tensor[(13, 14, 14), bool], Tensor[(7, 364), bool]) {
  %974 = @func_3459() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(10, 63), uint8], Tensor[(630), uint8], Tensor[(576), int8], Tensor[(2548), int64]) */;
  %975 = cast(%var_4175, dtype="bool") /* ty=Tensor[(7, 364), bool] */;
  %976 = reshape(%975, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
  %977 = @func_3016(%976) /* ty=(Tensor[(13, 14, 14), bool],) */;
  %978 = %974.1;
  %979 = %977.0;
  (%978, %979, %var_4175)
}

def @func_2663() -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), uint64], Tensor[(7, 6, 3), int32]) {
  %980 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %981 = %980.0;
  %982 = cast(%981, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %983 = cast(%981, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %984 = cast(%981, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %985 = reshape(%982, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %986 = reshape(%983, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %987 = reshape(%984, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %988 = @func_163(%985, %986, %987) /* ty=(Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) */;
  %989 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  %990 = cast(%989, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %991 = reshape(%990, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %992 = @func_1581(%991) /* ty=(Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) */;
  %993 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
  %994 = %988.1;
  %995 = %992.0;
  (%993, %981, %989, %994, %995)
}

def @func_2416() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  @func_2414() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */
}

def @func_2218() -> Tensor[(630), uint8] {
  %996 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %996.1
}

def @func_3018(%var_3017: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), bool],) {
  %1004 = fn (%var_3009: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), bool],) {
    %997 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
    %998 = %997.0;
    %999 = cast(%var_3009, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
    %1000 = shape_of(%998, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1001 = cast(%998, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
    %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1003 = less(%1001, %1002) /* ty=Tensor[(13, 14, 14), bool] */;
    (%1003,)
  };
  %1004(%var_3017) /* ty=(Tensor[(13, 14, 14), bool],) */
}

def @func_6371(%var_6369: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  @func_6368(%var_6369) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(2548), uint64]) */
}

def @func_6210() -> Tensor[(7, 6, 3), float64] {
  @func_5078() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_2945() -> (Tensor[(7, 6, 3), float64],) {
  %1005 = @func_2180() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %1006 = %1005.0;
  (%1006,)
}

def @func_4600() -> (Tensor[(7, 6, 3), float32],) {
  %1009 = fn () -> (Tensor[(7, 6, 3), float32],) {
    %1007 = @func_3677() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
    %1008 = %1007.1;
    (%1008,)
  };
  %1009() /* ty=(Tensor[(7, 6, 3), float32],) */
}

def @func_7728(%var_7725: Tensor[(240), float32]) -> (Tensor[(13, 14, 14), bool], Tensor[(630), uint8], Tensor[(240), float32], Tensor[(630), uint8]) {
  %1010 = @func_4454() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(630), uint8]) */;
  %1011 = cast(%var_7725, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1012 = cast(meta[relay.Constant][62] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %1013 = reshape(%1011, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %1014 = reshape(%1012, newshape=[630]) /* ty=Tensor[(630), uint8] */;
  %1015 = @func_2534(%1013, %1014) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) */;
  %1016 = %1010.0;
  %1017 = %1015.5;
  (%1016, %1017, %var_7725, meta[relay.Constant][62] /* ty=Tensor[(630), uint8] */)
}

def @func_6585() -> Tensor[(7, 6, 3), float64] {
  %1018 = @func_4086() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) */;
  %1018.1
}

def @func_6352() -> (Tensor[(7, 6, 3), float64],) {
  %1019 = @func_997() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %1020 = %1019.0;
  (%1020,)
}

def @func_6354() -> (Tensor[(7, 6, 3), float64],) {
  @func_6352() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @main(%var_8582: Tensor[(312), bool], %var_8583: Tensor[(2548), uint64], %var_8589: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), bool]) {
  %1021 = cast(%var_8582, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1022 = cast(%var_8583, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %1023 = reshape(%1021, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1024 = reshape(%1022, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %1025 = @func_3317(%1023, %1024) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %1026 = cast(%var_8589, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %1027 = shape_of(%var_8583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1028 = cast(%var_8583, dtype="bool") /* ty=Tensor[(2548), bool] */;
  %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1030 = @func_7737() /* ty=Tensor[(7, 6, 3), bool] */;
  %1031 = %1025.0;
  %1032 = greater_equal(%1028, %1029) /* ty=Tensor[(2548), bool] */;
  (%1030, %1031, %var_8582, %1032)
}

def @func_3381() -> (Tensor[(630), uint8],) {
  %1034 = fn () -> (Tensor[(630), uint8],) {
    %1033 = @func_2218() /* ty=Tensor[(630), uint8] */;
    (%1033,)
  };
  %1034() /* ty=(Tensor[(630), uint8],) */
}

def @func_3059(%var_3057: Tensor[(2, 11, 11), uint8], %var_3058: Tensor[(2, 11, 11), uint8]) -> (Tensor[(2, 11, 11), uint8],) {
  @func_3055(%var_3057, %var_3058) /* ty=(Tensor[(2, 11, 11), uint8],) */
}

def @func_6859() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
  @func_6857() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */
}

def @func_163(%var_152: Tensor[(13, 14, 14), uint64], %var_153: Tensor[(13, 14, 14), uint64], %var_158: Tensor[(13, 14, 14), uint64]) -> (Tensor[(13, 14, 14), uint64], Tensor[(13, 14, 14), uint64]) {
  %1035 = cast(%var_153, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1036 = shape_of(%var_152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1037 = cast(%var_152, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1038 = dyn.reshape(%1035, %1036, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1039 = cast(%var_158, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1040 = shape_of(%var_152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1041 = cast(%var_152, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
  %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1043 = maximum(%1037, %1038) /* ty=Tensor[(13, 14, 14), uint64] */;
  %1044 = multiply(%1041, %1042) /* ty=Tensor[(13, 14, 14), uint64] */;
  (%1043, %1044)
}

def @func_2188() -> (Tensor[(13, 14, 14), bool],) {
  %1047 = fn () -> (Tensor[(13, 14, 14), bool],) {
    %1045 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
    %1046 = %1045.1;
    (%1046,)
  };
  %1047() /* ty=(Tensor[(13, 14, 14), bool],) */
}

def @func_4543() -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
  %1060 = fn () -> (Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) {
    %1048 = @func_1940() /* ty=Tensor[(7, 6, 3), float64] */;
    %1049 = @func_1809() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */;
    %1050 = %1049.4;
    %1051 = cast(%1050, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %1052 = shape_of(%1048, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1053 = cast(%1048, dtype="float32") /* ty=Tensor[(7, 6, 3), float32] */;
    %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1055 = floor_divide(%1053, %1054) /* ty=Tensor[(7, 6, 3), float32] */;
    %1056 = cast(%1055, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %1057 = reshape(%1056, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %1058 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
    %1059 = @func_1280(%1057) /* ty=Tensor[(7, 6, 3), float32] */;
    (%1055, %1058, %1059)
  };
  %1060() /* ty=(Tensor[(7, 6, 3), float32], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */
}

def @func_5444(%var_5442: Tensor[(7, 6, 3), float64], %var_5443: Tensor[(2548), bool]) -> (Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2548), bool]) {
  %1072 = fn (%var_5386: Tensor[(7, 6, 3), float64], %var_5439: Tensor[(2548), bool]) -> (Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2548), bool]) {
    %1061 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
    %1062 = cast(%var_5386, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
    %1063 = shape_of(%1061, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1064 = cast(%1061, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
    %1065 = dyn.reshape(%1062, %1063, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1066 = cast(%var_5439, dtype="bool") /* ty=Tensor[(2548), bool] */;
    %1067 = reshape(%1066, newshape=[2548]) /* ty=Tensor[(2548), bool] */;
    %1068 = @func_4400(%1067) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint32]) */;
    %1069 = right_shift(%1064, %1065) /* ty=Tensor[(7, 6, 3), int8] */;
    %1070 = @func_4831() /* ty=Tensor[(7, 6, 3), float64] */;
    %1071 = %1068.2;
    (%1069, %1070, %1071, %var_5439)
  };
  %1072(%var_5442, %var_5443) /* ty=(Tensor[(7, 6, 3), int8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2548), bool]) */
}

def @func_8420() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  %1078 = fn () -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
    %1073 = @func_5180() /* ty=Tensor[(7, 6, 3), float64] */;
    %1074 = cast(%1073, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %1075 = @func_5552() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %1076 = acosh(%1074) /* ty=Tensor[(7, 6, 3), float64] */;
    %1077 = %1075.0;
    (%1076, %1077)
  };
  %1078() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */
}

def @func_3370(%var_3355: Tensor[(8, 30), float32]) -> (Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(8, 30), float32]) {
  %1079 = @func_2311() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %1080 = cast(%var_3355, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %1081 = %1079.1;
  %1082 = cast(%1081, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %1083 = reshape(%1080, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %1084 = reshape(%1082, newshape=[630]) /* ty=Tensor[(630), uint8] */;
  %1085 = @func_2534(%1083, %1084) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(630), uint8], Tensor[(630), uint8], Tensor[(630), uint8]) */;
  %1086 = %1085.5;
  (%1081, %1086, %var_3355)
}

def @func_8266() -> (Tensor[(220), uint64], Tensor[(7, 6, 3), float64]) {
  @func_8264() /* ty=(Tensor[(220), uint64], Tensor[(7, 6, 3), float64]) */
}

def @func_4315() -> (Tensor[(7, 6, 3), float64],) {
  %1087 = @func_4154() /* ty=Tensor[(7, 6, 3), float64] */;
  (%1087,)
}

def @func_7503() -> Tensor[(7, 6, 3), float64] {
  %1088 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %1088.0
}

def @func_2587() -> (Tensor[(7, 6, 3), float64],) {
  %1091 = fn () -> (Tensor[(7, 6, 3), float64],) {
    %1089 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %1090 = %1089.0;
    (%1090,)
  };
  %1091() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_7439(%var_7437: Tensor[(9, 16, 15), float32]) -> (Tensor[(9, 16, 15), float32],) {
  @func_7436(%var_7437) /* ty=(Tensor[(9, 16, 15), float32],) */
}

def @func_2905(%var_2903: Tensor[(312), bool], %var_2904: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(7, 6, 3), float32], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
  @func_2901(%var_2903, %var_2904) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(7, 6, 3), float32], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */
}

def @func_1379(%var_1374: uint16, %var_1375: Tensor[(8, 140), uint16], %var_1376: Tensor[(312), bool], %var_1377: Tensor[(2548), uint64], %var_1378: Tensor[(7, 6, 3), float64]) -> (Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) {
  @func_1372(%var_1374, %var_1375, %var_1376, %var_1377, %var_1378) /* ty=(Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) */
}

def @func_5096() -> (Tensor[(7, 6, 3), float64],) {
  %1093 = fn () -> (Tensor[(7, 6, 3), float64],) {
    %1092 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
    (%1092,)
  };
  %1093() /* ty=(Tensor[(7, 6, 3), float64],) */
}

def @func_3317(%var_3315: Tensor[(312), bool], %var_3316: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %1106 = fn (%var_3309: Tensor[(312), bool], %var_3310: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
    %1094 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %1095 = %1094.0;
    %1096 = cast(%1095, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %1097 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 560), uint16] */, dtype="uint16") /* ty=Tensor[(2, 560), uint16] */;
    %1098 = cast(%var_3309, dtype="bool") /* ty=Tensor[(312), bool] */;
    %1099 = cast(%var_3310, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %1100 = reshape(%1096, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %1101 = reshape(%1097, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
    %1102 = reshape(%1098, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
    %1103 = reshape(%1099, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
    %1104 = @func_1118(%1100, %1101, %1102, %1103) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
    %1105 = %1104.0;
    (%1095, %1105, meta[relay.Constant][63] /* ty=Tensor[(2, 560), uint16] */, %var_3309, %var_3310)
  };
  %1106(%var_3315, %var_3316) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(2, 560), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */
}

def @func_3335(%var_3334: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) {
  %1117 = fn (%var_3329: Tensor[(220), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) {
    %1107 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %1108 = %1107.0;
    %1109 = cast(%1108, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %1110 = cast(%var_3329, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %1111 = cast(%var_3329, dtype="uint64") /* ty=Tensor[(220), uint64] */;
    %1112 = reshape(%1110, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %1113 = reshape(%1111, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), uint64] */;
    %1114 = @func_335(%1112, %1113) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */;
    %1115 = log(%1109) /* ty=Tensor[(7, 6, 3), float64] */;
    %1116 = %1114.0;
    (%1115, %1116, %var_3329)
  };
  %1117(%var_3334) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(220), uint64]) */
}

def @func_2477() -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) {
  @func_2475() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), uint64]) */
}

def @func_1230() -> Tensor[(7, 6, 3), float64] {
  %1121 = fn () -> Tensor[(7, 6, 3), float64] {
    %1118 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
    %1119 = %1118.0;
    %1120 = cast(%1119, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    sqrt(%1120) /* ty=Tensor[(7, 6, 3), float64] */
  };
  %1121() /* ty=Tensor[(7, 6, 3), float64] */
}

def @func_1540(%var_1533: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(7, 364), uint64]) {
  %1122 = @func_1247() /* ty=Tensor[(7, 6, 3), float64] */;
  %1123 = cast(%1122, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1124 = cast(meta[relay.Constant][64] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %1125 = cast(%var_1533, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1126 = cast(meta[relay.Constant][65] /* ty=Tensor[(7, 364), uint64] */, dtype="uint64") /* ty=Tensor[(7, 364), uint64] */;
  %1127 = reshape(%1123, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1128 = reshape(%1124, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %1129 = reshape(%1125, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %1130 = reshape(%1126, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %1131 = @func_1118(%1127, %1128, %1129, %1130) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %1132 = %1131.6;
  (%1122, %1132, meta[relay.Constant][64] /* ty=Tensor[(1120), uint16] */, %var_1533, meta[relay.Constant][65] /* ty=Tensor[(7, 364), uint64] */)
}

def @func_5651(%var_5643: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) {
  %1133 = @func_924() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %1134 = @func_2187() /* ty=(Tensor[(13, 14, 14), bool],) */;
  %1135 = cast(%var_5643, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1136 = reshape(%1135, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1137 = @func_4031(%1136) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %1138 = %1133.0;
  %1139 = %1134.0;
  %1140 = %1137.3;
  %1141 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
  (%1138, %1139, %1140, %var_5643, %1141)
}

def @func_2901(%var_2896: Tensor[(312), bool], %var_2897: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(7, 6, 3), float32], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %1142 = @func_2162() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8]) */;
  %1143 = cast(meta[relay.Constant][66] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1144 = cast(meta[relay.Constant][67] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %1145 = cast(%var_2896, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1146 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
  %1147 = @func_2259() /* ty=Tensor[(7, 6, 3), float64] */;
  %1148 = cast(%1147, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1149 = reshape(%1143, newshape=[]) /* ty=uint16 */;
  %1150 = reshape(%1144, newshape=[8, 140]) /* ty=Tensor[(8, 140), uint16] */;
  %1151 = reshape(%1145, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1152 = reshape(%1146, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %1153 = reshape(%1148, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1154 = @func_1372(%1149, %1150, %1151, %1152, %1153) /* ty=(Tensor[(14, 10, 8), uint16], uint16, Tensor[(8, 140), uint16], Tensor[(13, 14, 14), uint64], Tensor[(312), bool], Tensor[(2548), uint64], Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float32]) */;
  %1155 = %1142.1;
  %1156 = %1154.7;
  (%1147, %1155, %1156, meta[relay.Constant][66] /* ty=uint16 */, meta[relay.Constant][67] /* ty=Tensor[(1120), uint16] */, %var_2896, %var_2897)
}

def @func_7836() -> (Tensor[(312), float32],) {
  %1161 = fn () -> (Tensor[(312), float32],) {
    %1157 = @func_5547() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(312), float64]) */;
    %1158 = %1157.2;
    %1159 = cast(%1158, dtype="float32") /* ty=Tensor[(312), float32] */;
    %1160 = sin(%1159) /* ty=Tensor[(312), float32] */;
    (%1160,)
  };
  %1161() /* ty=(Tensor[(312), float32],) */
}

def @func_6643(%var_6623: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(312), bool]) {
  %1162 = @func_2945() /* ty=(Tensor[(7, 6, 3), float64],) */;
  %1163 = %1162.0;
  %1164 = cast(%1163, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1165 = cast(%var_6623, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1166 = reshape(%1165, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1167 = @func_5651(%1166) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64], Tensor[(312), bool], Tensor[(7, 6, 3), float64]) */;
  %1168 = log2(%1164) /* ty=Tensor[(7, 6, 3), float64] */;
  %1169 = %1167.1;
  (%1168, %1169, %var_6623)
}

def @func_7958(%var_7909: Tensor[(630), uint8], %var_7910: Tensor[(1, 2548), uint64], %var_7938: Tensor[(312), bool], %var_7952: Tensor[(4, 280), uint16]) -> (Tensor[(7, 6, 3), bool], Tensor[(630), uint8], Tensor[(9, 16, 15), float32], Tensor[(2160), float32], Tensor[(1, 2548), int16], Tensor[(?, 2548), bool], Tensor[(312), bool], Tensor[(132, 2), float32], Tensor[(312), bool], Tensor[(9, 16, 15), float32], Tensor[(7, 6, 3), float64], Tensor[(4, 280), uint16]) {
  %1170 = cast(meta[relay.Constant][68] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %1171 = reshape(%1170, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float32] */;
  %1172 = @func_7436(%1171) /* ty=(Tensor[(9, 16, 15), float32],) */;
  %1173 = cast(%var_7909, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %1174 = cast(%var_7909, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %1175 = cast(%var_7910, dtype="uint64") /* ty=Tensor[(1, 2548), uint64] */;
  %1176 = reshape(%1173, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %1177 = reshape(%1174, newshape=[5, 14, 9]) /* ty=Tensor[(5, 14, 9), uint8] */;
  %1178 = reshape(%1175, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
  %1179 = @func_1419(%1176, %1177, %1178) /* ty=(Tensor[(5, 14, 9), uint8], Tensor[(126), float64], Tensor[(1120), uint16], Tensor[(312), bool], uint16, Tensor[(144, 4), int8], uint16, Tensor[(14, 10, 8), uint16], Tensor[(312, 2548), bool]) */;
  %1180 = %1179.6;
  %1181 = cast(%var_7910, dtype="int16") /* ty=Tensor[(1, 2548), int16] */;
  %1182 = cast(%1180, dtype="int16") /* ty=int16 */;
  %1183 = cast(%var_7910, dtype="float64") /* ty=Tensor[(1, 2548), float64] */;
  %1184 = exp(%1183) /* ty=Tensor[(1, 2548), float64] */;
  %1185 = cast(%1184, dtype="bool") /* ty=Tensor[(1, 2548), bool] */;
  %1186 = shape_of(%var_7910, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1187 = cast(%var_7910, dtype="bool") /* ty=Tensor[(1, 2548), bool] */;
  %1188 = dyn.reshape(%1185, %1186, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1189 = cast(meta[relay.Constant][69] /* ty=Tensor[(132, 2), float32] */, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %1190 = cast(%var_7938, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1191 = reshape(%1189, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float32] */;
  %1192 = reshape(%1190, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %1193 = @func_4479(%1191, %1192) /* ty=(Tensor[(8, 3, 11), float32], Tensor[(312), bool], Tensor[(312), bool], Tensor[(2548), uint64]) */;
  %1194 = cast(meta[relay.Constant][68] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %1195 = reshape(%1194, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float32] */;
  %1196 = @func_7436(%1195) /* ty=(Tensor[(9, 16, 15), float32],) */;
  %1197 = @func_7737() /* ty=Tensor[(7, 6, 3), bool] */;
  %1198 = cast(%1197, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
  %1199 = cast(%var_7952, dtype="uint16") /* ty=Tensor[(4, 280), uint16] */;
  %1200 = %1193.1;
  %1201 = cast(%1200, dtype="bool") /* ty=Tensor[(312), bool] */;
  %1202 = logical_or(%1187, %1188) /* ty=Tensor[(?, 2548), bool] */;
  %1203 = cast(%1202, dtype="uint64") /* ty=Tensor[(?, 2548), uint64] */;
  %1204 = reshape(%1198, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
  %1205 = reshape(%1199, newshape=[1120]) /* ty=Tensor[(1120), uint16] */;
  %1206 = reshape(%1201, newshape=[312, 1]) /* ty=Tensor[(312, 1), bool] */;
  %1207 = reshape(%1203, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint64] */;
  %1208 = @func_1118(%1204, %1205, %1206, %1207) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(14, 10, 8), uint16], uint16, Tensor[(1120), uint16], Tensor[(7, 6, 3), float64], Tensor[(2548), uint64], Tensor[(13, 8, 3), float32], Tensor[(312, 1), bool], Tensor[(13, 14, 14), uint16]) */;
  %1209 = %1172.0;
  %1210 = bitwise_and(%1181, %1182) /* ty=Tensor[(1, 2548), int16] */;
  %1211 = %1196.0;
  %1212 = %1208.0;
  (%1197, %var_7909, %1209, meta[relay.Constant][68] /* ty=Tensor[(2160), float32] */, %1210, %1202, %1200, meta[relay.Constant][69] /* ty=Tensor[(132, 2), float32] */, %var_7938, %1211, %1212, %var_7952)
}

def @func_4695(%var_4692: uint64, %var_4693: Tensor[(240), float32], %var_4694: Tensor[(3, 42), float64]) -> (Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), int32], Tensor[(3, 42), float64], Tensor[(4, ?, 14), float64], Tensor[(7, 6, 3), float32]) {
  %1234 = fn (%var_4649: uint64, %var_4673: Tensor[(240), float32], %var_4682: Tensor[(3, 42), float64]) -> (Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), int32], Tensor[(3, 42), float64], Tensor[(4, ?, 14), float64], Tensor[(7, 6, 3), float32]) {
    %1213 = cast(%var_4673, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1214 = reshape(%1213, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
    %1215 = cast(%var_4682, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
    %1216 = reshape(%1215, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %1217 = @func_1581(%1216) /* ty=(Tensor[(7, 6, 3), int32], Tensor[(7, 6, 3), float32]) */;
    %1218 = cast(%var_4649, dtype="uint64") /* ty=uint64 */;
    %1219 = cast(meta[relay.Constant][70] /* ty=Tensor[(4, 1, 14), uint64] */, dtype="uint64") /* ty=Tensor[(4, 1, 14), uint64] */;
    %1220 = add(%1218, %1219) /* ty=Tensor[(4, 1, 14), uint64] */;
    %1221 = cast(%1220, dtype="float64") /* ty=Tensor[(4, 1, 14), float64] */;
    %1222 = rsqrt(%1221) /* ty=Tensor[(4, 1, 14), float64] */;
    %1223 = cast(%1220, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
    %1224 = shape_of(%1222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1225 = cast(%1222, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
    %1226 = dyn.reshape(%1223, %1224, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1227 = divide(%1225, %1226) /* ty=Tensor[(4, ?, 14), float32] */;
    %1228 = cast(%1227, dtype="float64") /* ty=Tensor[(4, ?, 14), float64] */;
    %1229 = @func_3677() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float32]) */;
    %1230 = @func_1953(%1214) /* ty=Tensor[(16, 1, 15), float32] */;
    %1231 = %1217.0;
    %1232 = cos(%1228) /* ty=Tensor[(4, ?, 14), float64] */;
    %1233 = %1229.1;
    (%1230, %var_4673, %1231, %var_4682, %1232, %1233)
  };
  %1234(%var_4692, %var_4693, %var_4694) /* ty=(Tensor[(16, 1, 15), float32], Tensor[(240), float32], Tensor[(7, 6, 3), int32], Tensor[(3, 42), float64], Tensor[(4, ?, 14), float64], Tensor[(7, 6, 3), float32]) */
}

def @func_3202(%var_3200: Tensor[(312, 1), bool], %var_3201: Tensor[(768), float32]) -> (Tensor[(7, 6, 3), float64], Tensor[(312, ?), int16], Tensor[(4, 16, 12), bool], Tensor[(768), float32], Tensor[(7, 6, 3), bool]) {
  %1257 = fn (%var_3158: Tensor[(312, 1), bool], %var_3172: Tensor[(768), float32]) -> (Tensor[(7, 6, 3), float64], Tensor[(312, ?), int16], Tensor[(4, 16, 12), bool], Tensor[(768), float32], Tensor[(7, 6, 3), bool]) {
    %1235 = @func_1302() /* ty=Tensor[(7, 6, 3), float64] */;
    %1236 = cast(%1235, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %1237 = cast(%var_3158, dtype="bool") /* ty=Tensor[(312, 1), bool] */;
    %1238 = reshape(%1236, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %1239 = reshape(%1237, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %1240 = @func_1709(%1238, %1239) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
    %1241 = %1240.1;
    %1242 = cast(%1241, dtype="int16") /* ty=Tensor[(13, 8, 3), int16] */;
    %1243 = shape_of(%var_3158, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1244 = cast(%var_3158, dtype="int16") /* ty=Tensor[(312, 1), int16] */;
    %1245 = dyn.reshape(%1242, %1243, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %1246 = cast(%var_3172, dtype="float32") /* ty=Tensor[(768), float32] */;
    %1247 = reshape(%1246, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %1248 = @func_2873(%1247) /* ty=(Tensor[(630), uint8], Tensor[(4, 16, 12), bool], Tensor[(768), float32]) */;
    %1249 = cast(%1235, dtype="float64") /* ty=Tensor[(7, 6, 3), float64] */;
    %1250 = cast(%1241, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
    %1251 = reshape(%1249, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float64] */;
    %1252 = reshape(%1250, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %1253 = @func_1709(%1251, %1252) /* ty=(Tensor[(7, 6, 3), bool], Tensor[(13, 8, 3), int16]) */;
    %1254 = right_shift(%1244, %1245) /* ty=Tensor[(312, ?), int16] */;
    %1255 = %1248.1;
    %1256 = %1253.0;
    (%1235, %1254, %1255, %var_3172, %1256)
  };
  %1257(%var_3200, %var_3201) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312, ?), int16], Tensor[(4, 16, 12), bool], Tensor[(768), float32], Tensor[(7, 6, 3), bool]) */
}

def @func_8318() -> (Tensor[(7, 6, 3), float64], Tensor[(220), float64]) {
  @func_8316() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(220), float64]) */
}

def @func_5267() -> (Tensor[(7, 6, 3), bool],) {
  %1258 = @func_1929() /* ty=(Tensor[(7, 6, 3), bool], Tensor[(7, 6, 3), float64]) */;
  %1259 = %1258.0;
  (%1259,)
}

def @func_4989() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) {
  @func_4987() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64]) */
}

def @func_8453(%var_8446: Tensor[(6, 4, 8), float64]) -> Tensor[(6, 4, 8), bool] {
  %1260 = @func_6997() /* ty=(Tensor[(6, 4, 8), float64],) */;
  %1261 = %1260.0;
  %1262 = cast(%var_8446, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %1263 = shape_of(%1261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1264 = cast(%1261, dtype="bool") /* ty=Tensor[(6, 4, 8), bool] */;
  %1265 = dyn.reshape(%1262, %1263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%1264, %1265) /* ty=Tensor[(6, 4, 8), bool] */
}

def @func_4088() -> (Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) {
  @func_4086() /* ty=(Tensor[(630), uint8], Tensor[(7, 6, 3), float64]) */
}

def @func_8341() -> (Tensor[(220), uint64], Tensor[(7, 6, 3), bool]) {
  %1269 = fn () -> (Tensor[(220), uint64], Tensor[(7, 6, 3), bool]) {
    %1266 = @func_4890() /* ty=(Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(220), uint64], Tensor[(1120), uint16]) */;
    %1267 = %1266.2;
    %1268 = @func_7737() /* ty=Tensor[(7, 6, 3), bool] */;
    (%1267, %1268)
  };
  %1269() /* ty=(Tensor[(220), uint64], Tensor[(7, 6, 3), bool]) */
}

def @func_3611(%var_3609: Tensor[(13, 14, 14), bool], %var_3610: Tensor[(312), bool]) -> (Tensor[(7, 6, 3), float64], Tensor[(220), float64], Tensor[(630), uint8], Tensor[(13, 14, 14), int64], Tensor[(13, 14, 14), float64], Tensor[(312), bool], Tensor[(312), bool]) {
  @func_3607(%var_3609, %var_3610) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(220), float64], Tensor[(630), uint8], Tensor[(13, 14, 14), int64], Tensor[(13, 14, 14), float64], Tensor[(312), bool], Tensor[(312), bool]) */
}

def @func_3763(%var_3761: Tensor[(312), bool], %var_3762: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) {
  %1277 = fn (%var_3748: Tensor[(312), bool], %var_3749: Tensor[(2548), uint64]) -> (Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) {
    %1270 = cast(%var_3748, dtype="bool") /* ty=Tensor[(312), bool] */;
    %1271 = cast(%var_3749, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %1272 = reshape(%1270, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %1273 = reshape(%1271, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %1274 = @func_2901(%1272, %1273) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(630), uint8], Tensor[(7, 6, 3), float32], uint16, Tensor[(1120), uint16], Tensor[(312), bool], Tensor[(2548), uint64]) */;
    %1275 = @func_1229() /* ty=Tensor[(7, 6, 3), float64] */;
    %1276 = %1274.0;
    (%1275, %1276, %var_3748, %var_3749)
  };
  %1277(%var_3761, %var_3762) /* ty=(Tensor[(7, 6, 3), float64], Tensor[(7, 6, 3), float64], Tensor[(312), bool], Tensor[(2548), uint64]) */
}

def @func_338(%var_336: Tensor[(2, 11, 10), uint64], %var_337: Tensor[(2, 11, 10), uint64]) -> (Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) {
  %1308 = fn (%var_279: Tensor[(2, 11, 10), uint64], %var_280: Tensor[(2, 11, 10), uint64]) -> (Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) {
    %1278 = cast(meta[relay.Constant][71] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %1279 = cast(meta[relay.Constant][71] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %1280 = cast(meta[relay.Constant][72] /* ty=Tensor[(2548), uint64] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %1281 = reshape(%1278, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %1282 = reshape(%1279, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %1283 = reshape(%1280, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %1284 = @func_231(%1281, %1282, %1283) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
    %1285 = cast(%var_280, dtype="uint64") /* ty=Tensor[(2, 11, 10), uint64] */;
    %1286 = shape_of(%var_279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1287 = cast(%var_279, dtype="uint64") /* ty=Tensor[(2, 11, 10), uint64] */;
    %1288 = dyn.reshape(%1285, %1286, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1289 = multiply(%1287, %1288) /* ty=Tensor[(2, 11, 10), uint64] */;
    %1290 = cast(%1289, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
    %1291 = cast(meta[relay.Constant][71] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %1292 = cast(meta[relay.Constant][71] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %1293 = %1284.1;
    %1294 = cast(%1293, dtype="uint64") /* ty=Tensor[(13, 14, 14), uint64] */;
    %1295 = reshape(%1291, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %1296 = reshape(%1292, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), bool] */;
    %1297 = reshape(%1294, newshape=[2548]) /* ty=Tensor[(2548), uint64] */;
    %1298 = @func_231(%1295, %1296, %1297) /* ty=(Tensor[(13, 8, 3), bool], Tensor[(13, 14, 14), bool], Tensor[(13, 8, 3), float32], Tensor[(13, 14, 14), uint64]) */;
    %1299 = cast(meta[relay.Constant][72] /* ty=Tensor[(2548), uint64] */, dtype="float32") /* ty=Tensor[(2548), float32] */;
    %1300 = erf(%1299) /* ty=Tensor[(2548), float32] */;
    %1301 = cast(meta[relay.Constant][73] /* ty=Tensor[(2548), float32] */, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %1302 = shape_of(%1300, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1303 = cast(%1300, dtype="uint64") /* ty=Tensor[(2548), uint64] */;
    %1304 = dyn.reshape(%1301, %1302, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %1305 = exp(%1290) /* ty=Tensor[(2, 11, 10), float32] */;
    %1306 = %1298.1;
    %1307 = logical_xor(%1303, %1304) /* ty=Tensor[(2548), uint64] */;
    (%1293, meta[relay.Constant][71] /* ty=Tensor[(312), bool] */, %1305, %1306, %1307)
  };
  %1308(%var_336, %var_337) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(312), bool], Tensor[(2, 11, 10), float32], Tensor[(13, 14, 14), bool], Tensor[(2548), uint64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen334/build/output.py", line 3244, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:08:02] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

