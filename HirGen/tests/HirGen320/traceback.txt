==========mod==========
#[version = "0.0.5"]
def @func_6424() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(455, 2), float32], Tensor[(504), int16]) {
  %0 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %5 = reshape(%1, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %6 = reshape(%2, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %7 = reshape(%3, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %8 = reshape(%4, newshape=[12, 42]) /* ty=Tensor[(12, 42), int16] */;
  %9 = @func_733(%5, %6, %7, %8) /* ty=(Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) */;
  %10 = @func_4574() /* ty=Tensor[(10, 11, 12), int64] */;
  %11 = %0.1;
  %12 = %9.3;
  (%10, %11, %12, meta[relay.Constant][0] /* ty=Tensor[(455, 2), float32] */, meta[relay.Constant][1] /* ty=Tensor[(504), int16] */)
}

def @func_6900(%var_6894: Tensor[(91, 10), float32]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(91, 10), float32], Tensor[(504), int16]) {
  %13 = @func_3562() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %14 = @func_3562() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %15 = cast(%var_6894, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %16 = cast(%var_6894, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %17 = cast(%var_6894, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %19 = reshape(%15, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %20 = reshape(%16, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %21 = reshape(%17, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %22 = reshape(%18, newshape=[12, 42]) /* ty=Tensor[(12, 42), int16] */;
  %23 = @func_733(%19, %20, %21, %22) /* ty=(Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) */;
  %24 = %13.0;
  %25 = %14.0;
  %26 = %23.3;
  (%24, %25, %26, %var_6894, meta[relay.Constant][2] /* ty=Tensor[(504), int16] */)
}

def @func_2860() -> (Tensor[(10, 11, 12), int64],) {
  %27 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %28 = %27.1;
  (%28,)
}

def @func_5644() -> (Tensor[(9, 14, 6), int16], Tensor[(10, 11, 12), int64]) {
  %29 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %30 = @func_1882() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %31 = %29.0;
  %32 = %30.0;
  (%31, %32)
}

def @func_3889() -> (Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) {
  %33 = @func_3649() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(2, 768), float32], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %34 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %35 = %33.4;
  %36 = %34.0;
  %37 = @func_1672() /* ty=Tensor[(9, 3, 2), bool] */;
  (%35, %36, %37)
}

def @func_1842() -> Tensor[(10, 11, 12), float64] {
  %38 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
  %39 = %38.1;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  log10(%40) /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_2374() -> Tensor[(10, 11, 12), int64] {
  %41 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %41.0
}

def @func_733(%var_693: Tensor[(13, 7, 10), float32], %var_694: Tensor[(13, 7, 10), float32], %var_703: Tensor[(13, 7, 10), float32], %var_716: Tensor[(12, 42), int16]) -> (Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) {
  %42 = cast(%var_694, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
  %43 = atanh(%42) /* ty=Tensor[(13, 7, 10), float32] */;
  %44 = cast(%var_703, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %48 = cast(%var_716, dtype="int16") /* ty=Tensor[(12, 42), int16] */;
  %49 = reshape(%48, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %50 = @func_486(%49) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %51 = cast(%var_694, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
  %52 = shape_of(%var_693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_693, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %55 = floor_divide(%53, %54) /* ty=Tensor[(13, 7, 10), float32] */;
  %56 = cast(%55, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
  %57 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%43, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %60 = power(%46, %47) /* ty=Tensor[(13, 7, 10), float32] */;
  %61 = %50.0;
  %62 = logical_or(%58, %59) /* ty=Tensor[(13, 7, 10), bool] */;
  %63 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  (%60, %61, %var_716, %62, %63)
}

def @func_5100() -> (Tensor[(10, 11, 12), int64],) {
  %64 = @func_875() /* ty=Tensor[(10, 11, 12), int64] */;
  (%64,)
}

def @func_1252(%var_1246: Tensor[(10, 10, 3), float64]) -> Tensor[(10, 10, 3), float64] {
  %65 = cast(%var_1246, dtype="float64") /* ty=Tensor[(10, 10, 3), float64] */;
  log(%65) /* ty=Tensor[(10, 10, 3), float64] */
}

def @func_5696() -> (Tensor[(10, 11, 12), float32], Tensor[(10, 11, 12), float64], Tensor[(9, 3, 2), bool]) {
  %66 = @func_2638() /* ty=(Tensor[(10, 11, 12), float32],) */;
  %67 = %66.0;
  %68 = @func_5441() /* ty=Tensor[(10, 11, 12), float64] */;
  %69 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
  (%67, %68, %69)
}

def @func_5282() -> Tensor[(10, 11, 12), float32] {
  %70 = @func_2638() /* ty=(Tensor[(10, 11, 12), float32],) */;
  %70.0
}

def @func_4738() -> Tensor[(9, 8, 5), bool] {
  %71 = @func_3799() /* ty=(Tensor[(9, 8, 5), bool],) */;
  %71.0
}

def @func_4550() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 14, 6), float64]) {
  %72 = @func_2860() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %73 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %74 = %72.0;
  %75 = %73.1;
  (%74, %75)
}

def @func_3562() -> (Tensor[(10, 11, 12), int64],) {
  %76 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %77 = %76.2;
  (%77,)
}

def @func_5501(%var_5465: Tensor[(504), int16]) -> (Tensor[(504), bool], Tensor[(504), int16]) {
  %78 = @func_5309() /* ty=Tensor[(504), int16] */;
  %79 = cast(%var_5465, dtype="bool") /* ty=Tensor[(504), bool] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(%78, dtype="bool") /* ty=Tensor[(504), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), bool] */;
  %83 = cast(%78, dtype="int16") /* ty=Tensor[(504), int16] */;
  %84 = reshape(%83, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %85 = @func_590(%84) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) */;
  %86 = greater_equal(%81, %82) /* ty=Tensor[(504), bool] */;
  %87 = %85.3;
  (%86, %87)
}

def @func_5397(%var_5380: int32, %var_5381: Tensor[(150), int32]) -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(9, 8, 5), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 3, 5), int32], int32, Tensor[(150), int32]) {
  %88 = @func_3889() /* ty=(Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) */;
  %89 = @func_1727() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %90 = cast(%var_5380, dtype="int32") /* ty=int32 */;
  %91 = cast(%var_5381, dtype="int32") /* ty=Tensor[(150), int32] */;
  %92 = reshape(%90, newshape=[]) /* ty=int32 */;
  %93 = reshape(%91, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), int32] */;
  %94 = @func_1704(%92, %93) /* ty=(Tensor[(10, 3, 5), int32],) */;
  %95 = @func_4499() /* ty=Tensor[(10, 11, 12), int64] */;
  %96 = %88.2;
  %97 = @func_4738() /* ty=Tensor[(9, 8, 5), bool] */;
  %98 = %89.1;
  %99 = %94.0;
  (%95, %96, %97, %98, %99, %var_5380, %var_5381)
}

def @func_1981(%var_1913: Tensor[(10, 11, 12), int64], %var_1955: Tensor[(300), float64], %var_1963: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64], Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(504), int16]) {
  %100 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %101 = cast(%var_1913, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %105 = cast(%var_1913, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %106 = cast(%100, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %107 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %108 = cast(%var_1955, dtype="float64") /* ty=Tensor[(300), float64] */;
  %109 = reshape(%108, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float64] */;
  %110 = cast(%var_1963, dtype="int16") /* ty=Tensor[(504), int16] */;
  %111 = reshape(%110, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %112 = @func_1521(%111) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(1, 504), int16], Tensor[(504), int16]) */;
  %113 = logical_xor(%103, %104) /* ty=Tensor[(10, 11, 12), int64] */;
  %114 = cos(%105) /* ty=Tensor[(10, 11, 12), float64] */;
  %115 = sqrt(%106) /* ty=Tensor[(10, 11, 12), float64] */;
  %116 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  %117 = %107.3;
  %118 = @func_1252(%109) /* ty=Tensor[(10, 10, 3), float64] */;
  %119 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  %120 = %112.3;
  (%113, %114, %115, %116, %117, %118, %var_1955, %119, %120, %var_1963)
}

def @func_1614() -> (Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) {
  %121 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 6), float32] */;
  %122 = cosh(%121) /* ty=Tensor[(9, 14, 6), float32] */;
  %123 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 14, 6), float32] */, dtype="int16") /* ty=Tensor[(9, 14, 6), int16] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="int16") /* ty=Tensor[(9, 14, 6), int16] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %127 = cast(%122, dtype="float64") /* ty=Tensor[(9, 14, 6), float64] */;
  %128 = bitwise_and(%125, %126) /* ty=Tensor[(9, 14, 6), int16] */;
  %129 = sin(%127) /* ty=Tensor[(9, 14, 6), float64] */;
  (%128, %129)
}

def @func_780() -> (Tensor[(9, 3, 2), bool],) {
  %130 = @func_769() /* ty=Tensor[(9, 3, 2), bool] */;
  (%130,)
}

def @func_363() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) {
  %131 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %132 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %133 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %134 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %135 = %131.0;
  %136 = %132.0;
  %137 = %133.0;
  %138 = %134.0;
  (%135, %136, %137, %138)
}

def @func_2233(%var_2215: float32, %var_2216: Tensor[(5, 14, 5), float32]) -> (Tensor[(5, 14, 5), float32], Tensor[(10, 11, 12), int64], Tensor[(1, 1320), int64]) {
  %139 = cast(%var_2215, dtype="float32") /* ty=float32 */;
  %140 = cast(%var_2216, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %141 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1320), int64] */, dtype="int64") /* ty=Tensor[(1, 1320), int64] */;
  %142 = reshape(%141, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %143 = @func_436(%142) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
  %144 = floor_mod(%139, %140) /* ty=Tensor[(5, 14, 5), float32] */;
  %145 = %143.0;
  (%144, %145, meta[relay.Constant][4] /* ty=Tensor[(1, 1320), int64] */)
}

def @func_3799() -> (Tensor[(9, 8, 5), bool],) {
  %146 = @func_3344() /* ty=(Tensor[(9, 8, 5), bool],) */;
  %147 = %146.0;
  (%147,)
}

def @func_2638() -> (Tensor[(10, 11, 12), float32],) {
  %148 = @func_1842() /* ty=Tensor[(10, 11, 12), float64] */;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
  %150 = cosh(%149) /* ty=Tensor[(10, 11, 12), float32] */;
  (%150,)
}

def @func_4223(%var_4171: Tensor[(8, 1, 12), float64], %var_4189: Tensor[(1, 1320), int64]) -> (Tensor[(8, 1, 12), float64], Tensor[(8, 1, 12), float64], Tensor[(11, 1320), int16], Tensor[(?, 1320), float32]) {
  %151 = cast(%var_4171, dtype="float64") /* ty=Tensor[(8, 1, 12), float64] */;
  %152 = cast(%var_4171, dtype="float64") /* ty=Tensor[(8, 1, 12), float64] */;
  %153 = cast(%var_4189, dtype="int64") /* ty=Tensor[(1, 1320), int64] */;
  %154 = reshape(%153, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %155 = @func_436(%154) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
  %156 = %155.2;
  %157 = cast(%156, dtype="uint32") /* ty=Tensor[(10, 11, 12), uint32] */;
  %158 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(2), int32] */;
  %159 = cast(%var_4189, dtype="uint32") /* ty=Tensor[(1, 1320), uint32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %161 = bitwise_or(%159, %160) /* ty=Tensor[(?, 1320), uint32] */;
  %162 = cast(%161, dtype="int16") /* ty=Tensor[(?, 1320), int16] */;
  %163 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 1320), uint32] */, dtype="int16") /* ty=Tensor[(11, 1320), int16] */;
  %164 = cast(%161, dtype="float32") /* ty=Tensor[(?, 1320), float32] */;
  %165 = asin(%151) /* ty=Tensor[(8, 1, 12), float64] */;
  %166 = rsqrt(%152) /* ty=Tensor[(8, 1, 12), float64] */;
  %167 = right_shift(%162, %163) /* ty=Tensor[(11, 1320), int16] */;
  %168 = log10(%164) /* ty=Tensor[(?, 1320), float32] */;
  (%165, %166, %167, %168)
}

def @func_3250() -> (Tensor[(9, 14, 6), float64],) {
  %169 = @func_3072() /* ty=Tensor[(9, 14, 6), float64] */;
  (%169,)
}

def @func_5893() -> Tensor[(10, 11, 12), int64] {
  %170 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %170.0
}

def @func_4374(%var_4335: Tensor[(9, 11, 7), float64]) -> Tensor[(9, 11, 7), float64] {
  %171 = cast(%var_4335, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %172 = log10(%171) /* ty=Tensor[(9, 11, 7), float64] */;
  %173 = cast(%var_4335, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %177 = add(%175, %176) /* ty=Tensor[(9, 11, 7), float64] */;
  %178 = cast(%172, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %182 = multiply(%180, %181) /* ty=Tensor[(9, 11, 7), int16] */;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %184 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%177, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%185, %186) /* ty=Tensor[(9, 11, 7), float64] */
}

def @func_6547() -> (Tensor[(9, 8, 5), float64],) {
  %187 = @func_5086() /* ty=Tensor[(9, 8, 5), bool] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(9, 8, 5), float64] */;
  %189 = log2(%188) /* ty=Tensor[(9, 8, 5), float64] */;
  (%189,)
}

def @func_4043() -> (Tensor[(9, 14, 6), int16], Tensor[(504), int16], Tensor[(9, 3, 2), float32]) {
  %190 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %191 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %192 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
  %193 = %190.0;
  %194 = %191.3;
  %195 = %192.0;
  (%193, %194, %195)
}

def @func_6714() -> (Tensor[(10, 11, 12), float64], Tensor[(9, 14, 6), float64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) {
  %196 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %198 = @func_3250() /* ty=(Tensor[(9, 14, 6), float64],) */;
  %199 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %200 = exp(%197) /* ty=Tensor[(10, 11, 12), float64] */;
  %201 = %198.0;
  %202 = @func_6333() /* ty=Tensor[(9, 3, 2), float32] */;
  %203 = @func_4574() /* ty=Tensor[(10, 11, 12), int64] */;
  %204 = %199.0;
  (%200, %201, %202, %203, %204)
}

def @func_375() -> Tensor[(10, 11, 12), int64] {
  %205 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %205.2
}

def @func_6597() -> (Tensor[(504), int16], Tensor[(10, 11, 12), int16], Tensor[(1320), int64]) {
  %206 = cast(meta[relay.Constant][6] /* ty=Tensor[(1320), int64] */, dtype="int64") /* ty=Tensor[(1320), int64] */;
  %207 = reshape(%206, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %208 = @func_3776(%207) /* ty=(Tensor[(10, 11, 12), int16],) */;
  %209 = @func_5309() /* ty=Tensor[(504), int16] */;
  %210 = %208.0;
  (%209, %210, meta[relay.Constant][6] /* ty=Tensor[(1320), int64] */)
}

def @func_1352() -> Tensor[(9, 3, 2), float32] {
  %211 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %211.2
}

def @func_1466() -> Tensor[(9, 3, 2), bool] {
  @func_769() /* ty=Tensor[(9, 3, 2), bool] */
}

def @func_3415(%var_3407: Tensor[(36, 14), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(910), float32], Tensor[(36, 14), int16]) {
  %212 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %213 = cast(meta[relay.Constant][7] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %214 = cast(meta[relay.Constant][7] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %215 = cast(meta[relay.Constant][7] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %216 = cast(%var_3407, dtype="int16") /* ty=Tensor[(36, 14), int16] */;
  %217 = reshape(%213, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %218 = reshape(%214, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %219 = reshape(%215, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %220 = reshape(%216, newshape=[12, 42]) /* ty=Tensor[(12, 42), int16] */;
  %221 = @func_733(%217, %218, %219, %220) /* ty=(Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) */;
  %222 = @func_2374() /* ty=Tensor[(10, 11, 12), int64] */;
  %223 = %212.0;
  %224 = %221.3;
  (%222, %223, %224, meta[relay.Constant][7] /* ty=Tensor[(910), float32] */, %var_3407)
}

def @func_6461() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %225 = @func_3224() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %226 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %227 = %225.0;
  %228 = %226.0;
  (%227, %228)
}

def @func_7125(%var_7090: uint16, %var_7091: Tensor[(1, 14, 3), uint16]) -> (Tensor[(10, 11, 12), float64], Tensor[(?, 14, 3), bool], Tensor[(?, 14, 3), bool], Tensor[(1, 14, 3), float64]) {
  %229 = @func_4697() /* ty=(Tensor[(10, 11, 12), float64],) */;
  %230 = cast(%var_7090, dtype="uint16") /* ty=uint16 */;
  %231 = cast(%var_7091, dtype="uint16") /* ty=Tensor[(1, 14, 3), uint16] */;
  %232 = subtract(%230, %231) /* ty=Tensor[(1, 14, 3), uint16] */;
  %233 = cast(%var_7090, dtype="float64") /* ty=float64 */;
  %234 = cast(%232, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
  %235 = divide(%233, %234) /* ty=Tensor[(1, 14, 3), float64] */;
  %236 = cast(%232, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = cast(%235, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
  %241 = shape_of(%var_7091, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_7091, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = cast(%235, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
  %245 = %229.0;
  %246 = logical_or(%238, %239) /* ty=Tensor[(?, 14, 3), bool] */;
  %247 = less_equal(%242, %243) /* ty=Tensor[(?, 14, 3), bool] */;
  %248 = asinh(%244) /* ty=Tensor[(1, 14, 3), float64] */;
  (%245, %246, %247, %248)
}

def @func_2101() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %249 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %250 = @func_1672() /* ty=Tensor[(9, 3, 2), bool] */;
  %251 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  (%249, %250, %251)
}

def @func_2969(%var_2936: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64]) {
  %252 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  %253 = cast(%var_2936, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %258 = less_equal(%255, %256) /* ty=Tensor[(10, 11, 12), bool] */;
  %259 = %257.0;
  (%258, %259)
}

def @func_6976() -> (Tensor[(9, 3, 2), float32],) {
  %260 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
  %261 = %260.0;
  (%261,)
}

def @func_4881(%var_4792: Tensor[(2, 11, 15), float64], %var_4793: Tensor[(2, 11, 15), float64]) -> (Tensor[(2, 11, 15), float64], Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), uint64], Tensor[(9, 3, 2), float32]) {
  %262 = cast(%var_4793, dtype="float64") /* ty=Tensor[(2, 11, 15), float64] */;
  %263 = shape_of(%var_4792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%var_4792, dtype="float64") /* ty=Tensor[(2, 11, 15), float64] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %266 = @func_4064() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %267 = @func_4148() /* ty=(Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) */;
  %268 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %269 = reshape(%268, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %270 = @func_1189(%269) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(9, 7, 8), int16]) */;
  %271 = %270.1;
  %272 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 7, 8), int16] */, dtype="uint64") /* ty=Tensor[(9, 7, 8), uint64] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="uint64") /* ty=Tensor[(9, 7, 8), uint64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %276 = mod(%264, %265) /* ty=Tensor[(2, 11, 15), float64] */;
  %277 = %266.0;
  %278 = %267.1;
  %279 = bitwise_and(%274, %275) /* ty=Tensor[(9, 7, 8), uint64] */;
  %280 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
  (%276, meta[relay.Constant][8] /* ty=Tensor[(504), int16] */, %277, %278, %279, %280)
}

def @func_1521(%var_1518: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(1, 504), int16], Tensor[(504), int16]) {
  %281 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
  %282 = cast(%var_1518, dtype="int16") /* ty=Tensor[(504), int16] */;
  %283 = reshape(%282, newshape=[1, 504]) /* ty=Tensor[(1, 504), int16] */;
  %284 = @func_665(%283) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) */;
  %285 = %281.1;
  %286 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %287 = %284.2;
  (%285, %286, %287, %var_1518)
}

def @func_6611(%var_6599: Tensor[(12, 5, 11), float32]) -> (Tensor[(12, 5, 11), float32], Tensor[(10, 11, 12), int64]) {
  %288 = cast(%var_6599, dtype="float32") /* ty=Tensor[(12, 5, 11), float32] */;
  %289 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %290 = sigmoid(%288) /* ty=Tensor[(12, 5, 11), float32] */;
  %291 = %289.1;
  (%290, %291)
}

def @func_3447(%var_3443: Tensor[(16, 13, 2), float32]) -> Tensor[(16, 13, 2), float32] {
  %292 = cast(%var_3443, dtype="float32") /* ty=Tensor[(16, 13, 2), float32] */;
  atanh(%292) /* ty=Tensor[(16, 13, 2), float32] */
}

def @func_3674() -> Tensor[(9, 14, 6), float64] {
  @func_3072() /* ty=Tensor[(9, 14, 6), float64] */
}

def @func_2844(%var_2808: Tensor[(16, 8, 16), uint32], %var_2809: Tensor[(16, 8, 16), uint32], %var_2824: Tensor[(1536), float32], %var_2825: Tensor[(6, 84), int16]) -> (Tensor[(16, 8, 16), uint32], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(1536), float32], Tensor[(6, 84), int16], Tensor[(10, 11, 12), int64]) {
  %293 = cast(%var_2809, dtype="uint32") /* ty=Tensor[(16, 8, 16), uint32] */;
  %294 = shape_of(%var_2808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_2808, dtype="uint32") /* ty=Tensor[(16, 8, 16), uint32] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %297 = @func_2137() /* ty=(Tensor[(10, 11, 12), float64],) */;
  %298 = cast(%var_2824, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %299 = cast(%var_2824, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %300 = cast(%var_2825, dtype="int16") /* ty=Tensor[(6, 84), int16] */;
  %301 = reshape(%298, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float32] */;
  %302 = reshape(%299, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %303 = reshape(%300, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %304 = @func_2463(%301, %302, %303) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) */;
  %305 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %306 = maximum(%295, %296) /* ty=Tensor[(16, 8, 16), uint32] */;
  %307 = %297.0;
  %308 = %304.0;
  %309 = %305.0;
  (%306, %307, %308, %var_2824, %var_2825, %309)
}

def @func_6234(%var_6164: Tensor[(9, 8, 5), bool], %var_6208: Tensor[(9, 8, 5), bool]) -> (Tensor[(9, 3, 2), float32], Tensor[(9, 3, 2), float32], Tensor[(504), int16], Tensor[(10, 11, 12), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), float32], Tensor[(10, 11, 12), bool]) {
  %310 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
  %311 = @func_4738() /* ty=Tensor[(9, 8, 5), bool] */;
  %312 = cast(%var_6164, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = greater(%314, %315) /* ty=Tensor[(9, 8, 5), bool] */;
  %317 = cast(%316, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %318 = shape_of(%var_6164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_6164, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = cast(%var_6208, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %322 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%311, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(%var_6164, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
  %326 = @func_5193() /* ty=(Tensor[(10, 11, 12), bool],) */;
  %327 = %310.0;
  %328 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
  %329 = @func_5309() /* ty=Tensor[(504), int16] */;
  %330 = @func_1842() /* ty=Tensor[(10, 11, 12), float64] */;
  %331 = greater_equal(%319, %320) /* ty=Tensor[(9, 8, 5), bool] */;
  %332 = not_equal(%323, %324) /* ty=Tensor[(9, 8, 5), bool] */;
  %333 = sin(%325) /* ty=Tensor[(9, 8, 5), float32] */;
  %334 = %326.0;
  (%327, %328, %329, %330, %331, %332, %333, %334)
}

def @func_3211() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64]) {
  %335 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %336 = %335.2;
  %337 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  (%336, %337)
}

def @func_5193() -> (Tensor[(10, 11, 12), bool],) {
  %338 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %339 = %338.2;
  (%339,)
}

def @func_5184(%var_5153: Tensor[(2, 11, 16), uint16], %var_5154: Tensor[(2, 11, 16), uint16]) -> (Tensor[(2, 11, 16), bool], Tensor[(2, 11, 16), float64], Tensor[(2, 11, 16), int16]) {
  %340 = cast(%var_5154, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
  %341 = shape_of(%var_5153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_5153, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %344 = greater_equal(%342, %343) /* ty=Tensor[(2, 11, 16), bool] */;
  %345 = cast(%344, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
  %346 = shape_of(%var_5153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_5153, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %349 = less_equal(%347, %348) /* ty=Tensor[(2, 11, 16), bool] */;
  %350 = cast(%349, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
  %351 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%344, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = cast(%var_5154, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %355 = cast(%var_5153, dtype="int16") /* ty=Tensor[(2, 11, 16), int16] */;
  %356 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%349, dtype="int16") /* ty=Tensor[(2, 11, 16), int16] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %359 = equal(%352, %353) /* ty=Tensor[(2, 11, 16), bool] */;
  %360 = cosh(%354) /* ty=Tensor[(2, 11, 16), float64] */;
  %361 = bitwise_xor(%357, %358) /* ty=Tensor[(2, 11, 16), int16] */;
  (%359, %360, %361)
}

def @func_5309() -> Tensor[(504), int16] {
  %362 = @func_3110() /* ty=(Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) */;
  %362.0
}

def @main(%var_7169: Tensor[(300), float64], %var_7184: Tensor[(9, 8, 5), float32]) -> (Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), float64], Tensor[(9, 8, 5), int16]) {
  %363 = cast(%var_7169, dtype="float64") /* ty=Tensor[(300), float64] */;
  %364 = reshape(%363, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float64] */;
  %365 = @func_2137() /* ty=(Tensor[(10, 11, 12), float64],) */;
  %366 = @func_5054() /* ty=Tensor[(9, 8, 5), float32] */;
  %367 = cast(%var_7184, dtype="int16") /* ty=Tensor[(9, 8, 5), int16] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="int16") /* ty=Tensor[(9, 8, 5), int16] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %371 = @func_1252(%364) /* ty=Tensor[(10, 10, 3), float64] */;
  %372 = %365.0;
  %373 = bitwise_or(%369, %370) /* ty=Tensor[(9, 8, 5), int16] */;
  (%371, %var_7169, %372, %373)
}

def @func_6643() -> (Tensor[(9, 3, 2), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 3, 2), bool]) {
  %374 = @func_6333() /* ty=Tensor[(9, 3, 2), float32] */;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
  %376 = @func_3799() /* ty=(Tensor[(9, 8, 5), bool],) */;
  %377 = @func_3224() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %378 = atan(%375) /* ty=Tensor[(9, 3, 2), float64] */;
  %379 = %376.0;
  %380 = %377.0;
  (%378, %379, %380)
}

def @func_4499() -> Tensor[(10, 11, 12), int64] {
  %381 = @func_1882() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %381.0
}

def @func_5441() -> Tensor[(10, 11, 12), float64] {
  @func_1842() /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_486(%var_476: Tensor[(9, 7, 8), int16]) -> (Tensor[(9, 7, 8), int16],) {
  %382 = cast(%var_476, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
  %383 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(9, 7, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 7, 8), int16] */, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %386 = subtract(%384, %385) /* ty=Tensor[(9, 7, 8), int16] */;
  (%386,)
}

def @func_2137() -> (Tensor[(10, 11, 12), float64],) {
  %387 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  (%387,)
}

def @func_2912() -> (Tensor[(9, 3, 2), float32],) {
  %388 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %391 = asinh(%390) /* ty=Tensor[(9, 3, 2), float32] */;
  (%391,)
}

def @func_5054() -> Tensor[(9, 8, 5), float32] {
  %392 = @func_3344() /* ty=(Tensor[(9, 8, 5), bool],) */;
  %393 = %392.0;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
  log(%394) /* ty=Tensor[(9, 8, 5), float32] */
}

def @func_875() -> Tensor[(10, 11, 12), int64] {
  %395 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %395.2
}

def @func_3776(%var_3756: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), int16],) {
  %396 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
  %397 = %396.1;
  %398 = cast(%var_3756, dtype="int16") /* ty=Tensor[(10, 11, 12), int16] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="int16") /* ty=Tensor[(10, 11, 12), int16] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %402 = subtract(%400, %401) /* ty=Tensor[(10, 11, 12), int16] */;
  (%402,)
}

def @func_665(%var_662: Tensor[(1, 504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) {
  %403 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %404 = cast(%var_662, dtype="int16") /* ty=Tensor[(1, 504), int16] */;
  %405 = reshape(%404, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %406 = @func_590(%405) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) */;
  %407 = %403.0;
  %408 = %406.4;
  (%407, %408, %var_662)
}

def @func_436(%var_390: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) {
  %409 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %410 = %409.0;
  %411 = cast(%var_390, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %415 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %416 = cast(%var_390, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
  %417 = atan(%416) /* ty=Tensor[(10, 11, 12), float32] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
  %419 = add(%413, %414) /* ty=Tensor[(10, 11, 12), int64] */;
  %420 = %415.2;
  %421 = acosh(%418) /* ty=Tensor[(10, 11, 12), float32] */;
  (%419, %420, %421)
}

def @func_1882() -> (Tensor[(10, 11, 12), int64],) {
  %422 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %423 = %422.3;
  (%423,)
}

def @func_1401() -> Tensor[(10, 11, 12), float64] {
  %424 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  acos(%425) /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_1672() -> Tensor[(9, 3, 2), bool] {
  %426 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %426.0
}

def @func_4772() -> (Tensor[(9, 3, 2), bool], Tensor[(9, 14, 6), float64]) {
  %427 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %428 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
  %429 = %427.1;
  (%428, %429)
}

def @func_3489(%var_3474: Tensor[(14, 2, 7), uint64], %var_3475: Tensor[(14, 2, 7), uint64]) -> (Tensor[(14, 2, 7), uint64], Tensor[(9, 3, 2), float32]) {
  %430 = cast(%var_3475, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
  %431 = shape_of(%var_3474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_3474, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %434 = left_shift(%432, %433) /* ty=Tensor[(14, 2, 7), uint64] */;
  %435 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
  (%434, %435)
}

def @func_3072() -> Tensor[(9, 14, 6), float64] {
  %436 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %436.1
}

def @func_5577(%var_5529: Tensor[(13, 15, 12), float32]) -> (Tensor[(9, 3, 2), float32], Tensor[(13, 15, 12), float32]) {
  %437 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
  %438 = cast(%var_5529, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %439 = erf(%438) /* ty=Tensor[(13, 15, 12), float32] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %441 = %437.0;
  %442 = exp(%440) /* ty=Tensor[(13, 15, 12), float32] */;
  (%441, %442)
}

def @func_4064() -> (Tensor[(10, 11, 12), int64],) {
  %443 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %444 = %443.2;
  (%444,)
}

def @func_4148() -> (Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) {
  %445 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %446 = %445.2;
  %447 = cast(%446, dtype="bool") /* ty=Tensor[(1, 504), bool] */;
  %448 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 504), float32] */, dtype="bool") /* ty=Tensor[(14, 504), bool] */;
  %449 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
  %450 = @func_3110() /* ty=(Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) */;
  %451 = @func_2495() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %452 = equal(%447, %448) /* ty=Tensor[(14, 504), bool] */;
  %453 = %449.1;
  %454 = %450.0;
  %455 = %451.0;
  (%452, %453, %454, %455)
}

def @func_2701() -> Tensor[(9, 3, 2), float32] {
  @func_1352() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_3344() -> (Tensor[(9, 8, 5), bool],) {
  %456 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
  %457 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 8, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %460 = floor_mod(%458, %459) /* ty=Tensor[(9, 8, 5), float32] */;
  %461 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 8, 5), float32] */, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %465 = logical_or(%463, %464) /* ty=Tensor[(9, 8, 5), bool] */;
  (%465,)
}

def @func_4574() -> Tensor[(10, 11, 12), int64] {
  %466 = @func_3562() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %466.0
}

def @func_2495() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %467 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %468 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %469 = %467.0;
  %470 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  %471 = @func_1672() /* ty=Tensor[(9, 3, 2), bool] */;
  %472 = %468.1;
  (%469, %470, %471, %472)
}

def @func_590(%var_561: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) {
  %473 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %474 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %475 = %474.0;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
  %477 = rsqrt(%476) /* ty=Tensor[(10, 11, 12), float32] */;
  %478 = cast(%475, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %479 = reshape(%478, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %480 = @func_436(%479) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
  %481 = %480.2;
  %482 = cast(%481, dtype="uint32") /* ty=Tensor[(10, 11, 12), uint32] */;
  %483 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%477, dtype="uint32") /* ty=Tensor[(10, 11, 12), uint32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %486 = cast(%var_561, dtype="int16") /* ty=Tensor[(504), int16] */;
  %487 = reshape(%486, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %488 = @func_486(%487) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %489 = cast(%477, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %490 = sinh(%489) /* ty=Tensor[(10, 11, 12), float64] */;
  %491 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = equal(%493, %494) /* ty=Tensor[(10, 11, 12), bool] */;
  %496 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = %488.0;
  %501 = cast(%500, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
  %502 = reshape(%501, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %503 = @func_486(%502) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %504 = %473.0;
  %505 = bitwise_xor(%484, %485) /* ty=Tensor[(10, 11, 12), uint32] */;
  %506 = less(%498, %499) /* ty=Tensor[(10, 11, 12), bool] */;
  %507 = %503.0;
  (%504, %505, %500, %var_561, %506, %507)
}

def @func_2332(%var_2317: float32) -> (Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64], float32, Tensor[(175, 2), float32]) {
  %508 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %509 = %508.3;
  %510 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 11, 12), int64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = cast(%var_2317, dtype="float32") /* ty=float32 */;
  %515 = cast(meta[relay.Constant][16] /* ty=Tensor[(175, 2), float32] */, dtype="float32") /* ty=Tensor[(175, 2), float32] */;
  %516 = reshape(%514, newshape=[]) /* ty=float32 */;
  %517 = reshape(%515, newshape=[5, 14, 5]) /* ty=Tensor[(5, 14, 5), float32] */;
  %518 = @func_2233(%516, %517) /* ty=(Tensor[(5, 14, 5), float32], Tensor[(10, 11, 12), int64], Tensor[(1, 1320), int64]) */;
  %519 = greater(%512, %513) /* ty=Tensor[(10, 11, 12), bool] */;
  %520 = %518.1;
  (%519, %520, %var_2317, meta[relay.Constant][16] /* ty=Tensor[(175, 2), float32] */)
}

def @func_849() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) {
  %521 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %522 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %523 = %522.0;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %525 = atanh(%524) /* ty=Tensor[(10, 11, 12), float64] */;
  %526 = cast(%525, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %527 = reshape(%526, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %528 = @func_436(%527) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
  %529 = %521.3;
  %530 = %528.1;
  (%529, %525, %530)
}

def @func_1793() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) {
  %531 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %532 = cast(meta[relay.Constant][17] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %533 = reshape(%532, newshape=[1, 504]) /* ty=Tensor[(1, 504), int16] */;
  %534 = @func_665(%533) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) */;
  %535 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %536 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
  %537 = %531.0;
  %538 = %534.1;
  %539 = %535.1;
  (%536, %537, %538, meta[relay.Constant][17] /* ty=Tensor[(504), int16] */, %539)
}

def @func_2463(%var_2408: Tensor[(8, 16, 12), float32], %var_2443: Tensor[(8, 16, 12), float64], %var_2454: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) {
  %540 = cast(%var_2408, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %541 = sinh(%540) /* ty=Tensor[(8, 16, 12), float32] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %543 = cast(%var_2454, dtype="int16") /* ty=Tensor[(504), int16] */;
  %544 = reshape(%543, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %545 = @func_590(%544) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) */;
  %546 = cast(%541, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
  %547 = log(%546) /* ty=Tensor[(8, 16, 12), float64] */;
  %548 = cast(%var_2443, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = greater(%550, %551) /* ty=Tensor[(8, 16, 12), bool] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %554 = log2(%553) /* ty=Tensor[(8, 16, 12), float32] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %556 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  %557 = sqrt(%542) /* ty=Tensor[(8, 16, 12), float32] */;
  %558 = %545.0;
  %559 = asinh(%555) /* ty=Tensor[(8, 16, 12), float32] */;
  (%556, %557, %558, %var_2454, %559)
}

def @func_4471() -> Tensor[(9, 3, 2), float32] {
  @func_2701() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_1205() -> (Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) {
  %560 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %561 = %560.2;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
  %563 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %564 = log(%562) /* ty=Tensor[(9, 3, 2), float64] */;
  %565 = %563.0;
  (%564, %565)
}

def @func_285() -> (Tensor[(10, 11, 12), int64],) {
  %566 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %567 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(10, 11, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %570 = left_shift(%568, %569) /* ty=Tensor[(10, 11, 12), int64] */;
  (%570,)
}

def @func_3727(%var_3714: Tensor[(1536), float32]) -> (Tensor[(1, 504), float32], Tensor[(8, 16, 12), float32], Tensor[(1536), float32]) {
  %571 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %572 = cast(%var_3714, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %573 = cast(%var_3714, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %574 = %571.2;
  %575 = cast(%574, dtype="int16") /* ty=Tensor[(1, 504), int16] */;
  %576 = reshape(%572, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float32] */;
  %577 = reshape(%573, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %578 = reshape(%575, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %579 = @func_2463(%576, %577, %578) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) */;
  %580 = %579.1;
  (%574, %580, %var_3714)
}

def @func_3110() -> (Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) {
  %581 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %582 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %583 = %581.3;
  %584 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
  %585 = %582.1;
  (%583, %584, %585)
}

def @func_4298(%var_4243: Tensor[(5, 13, 5), float32]) -> (Tensor[(5, 13, 5), float32], Tensor[(5, 13, 5), bool], Tensor[(9, 3, 2), float32], Tensor[(5, 13, 5), float32]) {
  %586 = cast(%var_4243, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
  %587 = asinh(%586) /* ty=Tensor[(5, 13, 5), float32] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(5, 13, 5), float64] */;
  %589 = atanh(%588) /* ty=Tensor[(5, 13, 5), float64] */;
  %590 = cast(%var_4243, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %594 = cast(%589, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %595 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%587, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %598 = cast(%587, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
  %599 = floor_divide(%592, %593) /* ty=Tensor[(5, 13, 5), float32] */;
  %600 = equal(%596, %597) /* ty=Tensor[(5, 13, 5), bool] */;
  %601 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
  %602 = tan(%598) /* ty=Tensor[(5, 13, 5), float32] */;
  (%599, %600, %601, %602)
}

def @func_6128(%var_6015: Tensor[(1320), int64]) -> (Tensor[(10, 11, 12), int64], Tensor[(1320), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), uint64]) {
  %603 = cast(%var_6015, dtype="int64") /* ty=Tensor[(1320), int64] */;
  %604 = reshape(%603, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %605 = @func_2969(%604) /* ty=(Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64]) */;
  %606 = @func_3889() /* ty=(Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) */;
  %607 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
  %608 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
  %609 = cast(%608, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
  %610 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%607, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %613 = %605.1;
  %614 = @func_2374() /* ty=Tensor[(10, 11, 12), int64] */;
  %615 = @func_2374() /* ty=Tensor[(10, 11, 12), int64] */;
  %616 = %606.1;
  %617 = subtract(%611, %612) /* ty=Tensor[(9, 3, 2), uint64] */;
  (%613, %var_6015, %614, %615, %616, %617)
}

def @func_1189(%var_1169: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(9, 7, 8), int16]) {
  %618 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %619 = cast(%var_1169, dtype="int16") /* ty=Tensor[(504), int16] */;
  %620 = reshape(%619, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %621 = @func_486(%620) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %622 = %621.0;
  %623 = cast(%622, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
  %624 = reshape(%623, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %625 = @func_486(%624) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %626 = %618.0;
  %627 = %625.0;
  (%626, %622, %var_1169, %627)
}

def @func_769() -> Tensor[(9, 3, 2), bool] {
  %628 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 3, 2), bool] */, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %629 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 2), bool] */, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%630, %631) /* ty=Tensor[(9, 3, 2), bool] */
}

def @func_6942() -> (Tensor[(10, 11, 12), int64], Tensor[(5, 13, 5), bool], Tensor[(325), float32]) {
  %632 = @func_4550() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 14, 6), float64]) */;
  %633 = cast(meta[relay.Constant][22] /* ty=Tensor[(325), float32] */, dtype="float32") /* ty=Tensor[(325), float32] */;
  %634 = reshape(%633, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
  %635 = @func_4298(%634) /* ty=(Tensor[(5, 13, 5), float32], Tensor[(5, 13, 5), bool], Tensor[(9, 3, 2), float32], Tensor[(5, 13, 5), float32]) */;
  %636 = %632.0;
  %637 = %635.1;
  (%636, %637, meta[relay.Constant][22] /* ty=Tensor[(325), float32] */)
}

def @func_899() -> (Tensor[(10, 15, 5), float32], Tensor[(10, 11, 12), int64]) {
  %638 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 5), float32] */;
  %639 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %640 = asin(%638) /* ty=Tensor[(10, 15, 5), float32] */;
  %641 = %639.1;
  (%640, %641)
}

def @func_2604(%var_2564: Tensor[(2, 252), int16], %var_2580: Tensor[(300), float64]) -> (Tensor[(9, 3, 2), float32], Tensor[(2, 252), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(300), float64], Tensor[(504), int16], Tensor[(2, 252), bool], Tensor[(9, 3, 2), bool]) {
  %642 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %643 = %642.1;
  %644 = cast(%var_2564, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %648 = @func_1882() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %649 = %648.0;
  %650 = cast(%649, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %651 = cast(%var_2580, dtype="float64") /* ty=Tensor[(300), float64] */;
  %652 = cast(%643, dtype="int16") /* ty=Tensor[(2, 252), int16] */;
  %653 = reshape(%650, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %654 = reshape(%651, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %655 = reshape(%652, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %656 = @func_1981(%653, %654, %655) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64], Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(504), int16]) */;
  %657 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %658 = cast(%var_2564, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %659 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
  %660 = cast(%643, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %662 = greater_equal(%660, %661) /* ty=Tensor[(2, 252), bool] */;
  %663 = cast(%643, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(2), int32] */;
  %665 = cast(%662, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %667 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %668 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
  %669 = equal(%646, %647) /* ty=Tensor[(2, 252), bool] */;
  %670 = %656.0;
  %671 = %657.3;
  %672 = not_equal(%665, %666) /* ty=Tensor[(2, 252), bool] */;
  %673 = %667.0;
  (%668, %669, %649, %670, %var_2580, %671, %672, %673)
}

def @func_1727() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %674 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %675 = @func_769() /* ty=Tensor[(9, 3, 2), bool] */;
  %676 = %674.3;
  (%675, %676)
}

def @func_1240() -> Tensor[(10, 11, 12), int64] {
  %677 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %677.0
}

def @func_1290() -> (Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) {
  %678 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %679 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 252), int16] */, dtype="int16") /* ty=Tensor[(2, 252), int16] */;
  %680 = reshape(%679, newshape=[1, 504]) /* ty=Tensor[(1, 504), int16] */;
  %681 = @func_665(%680) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) */;
  %682 = %681.2;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(1, 504), float32] */;
  %684 = %678.0;
  %685 = log10(%683) /* ty=Tensor[(1, 504), float32] */;
  (%684, meta[relay.Constant][24] /* ty=Tensor[(2, 252), int16] */, %685)
}

def @func_4697() -> (Tensor[(10, 11, 12), float64],) {
  %686 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %688 = tan(%687) /* ty=Tensor[(10, 11, 12), float64] */;
  (%688,)
}

def @func_5086() -> Tensor[(9, 8, 5), bool] {
  %689 = @func_3799() /* ty=(Tensor[(9, 8, 5), bool],) */;
  %689.0
}

def @func_3586(%var_3576: Tensor[(8, 6, 16), int64], %var_3577: Tensor[(8, 6, 16), int64]) -> (Tensor[(8, 6, 16), bool], Tensor[(10, 11, 12), int64]) {
  %690 = cast(%var_3577, dtype="bool") /* ty=Tensor[(8, 6, 16), bool] */;
  %691 = shape_of(%var_3576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%var_3576, dtype="bool") /* ty=Tensor[(8, 6, 16), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = greater_equal(%692, %693) /* ty=Tensor[(8, 6, 16), bool] */;
  %695 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  (%694, %695)
}

def @func_4900(%var_4890: Tensor[(9, 16, 9), float32]) -> Tensor[(9, 16, 9), float32] {
  %696 = cast(%var_4890, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
  tan(%696) /* ty=Tensor[(9, 16, 9), float32] */
}

def @func_3224() -> (Tensor[(9, 3, 2), bool],) {
  %697 = @func_2495() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %698 = %697.2;
  (%698,)
}

def @func_1704(%var_1677: int32, %var_1678: Tensor[(10, 3, 5), int32]) -> (Tensor[(10, 3, 5), int32],) {
  %699 = cast(%var_1677, dtype="int32") /* ty=int32 */;
  %700 = cast(%var_1678, dtype="int32") /* ty=Tensor[(10, 3, 5), int32] */;
  %701 = bitwise_xor(%699, %700) /* ty=Tensor[(10, 3, 5), int32] */;
  (%701,)
}

def @func_5912() -> Tensor[(9, 3, 2), float32] {
  @func_1352() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_3649() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(2, 768), float32], Tensor[(504), int16], Tensor[(2, 252), int16]) {
  %702 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
  %703 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 768), float32] */, dtype="float32") /* ty=Tensor[(2, 768), float32] */;
  %704 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 768), float32] */, dtype="float64") /* ty=Tensor[(2, 768), float64] */;
  %705 = cast(meta[relay.Constant][26] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %706 = reshape(%703, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float32] */;
  %707 = reshape(%704, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %708 = reshape(%705, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %709 = @func_2463(%706, %707, %708) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) */;
  %710 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %711 = %702.1;
  %712 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  %713 = %709.0;
  %714 = %710.4;
  (%711, %712, %713, meta[relay.Constant][25] /* ty=Tensor[(2, 768), float32] */, meta[relay.Constant][26] /* ty=Tensor[(504), int16] */, %714)
}

def @func_6480() -> (Tensor[(9, 3, 2), float32],) {
  %715 = @func_3110() /* ty=(Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) */;
  %716 = %715.1;
  (%716,)
}

def @func_988() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) {
  %717 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %718 = %717.0;
  %719 = cast(%718, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %720 = erf(%719) /* ty=Tensor[(9, 3, 2), float32] */;
  %721 = cast(%718, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %725 = maximum(%723, %724) /* ty=Tensor[(9, 3, 2), float32] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %727 = sin(%726) /* ty=Tensor[(9, 3, 2), float32] */;
  %728 = cast(%720, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %732 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %733 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %734 = floor_divide(%730, %731) /* ty=Tensor[(9, 3, 2), float32] */;
  %735 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  (%732, %733, %734, %735)
}

def @func_2751() -> (Tensor[(10, 11, 12), int64],) {
  %736 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %737 = %736.2;
  (%737,)
}

def @func_5953(%var_5938: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float64],) {
  %738 = cast(%var_5938, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %739 = cos(%738) /* ty=Tensor[(9, 10, 10), float32] */;
  %740 = cast(%739, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
  %741 = sin(%740) /* ty=Tensor[(9, 10, 10), float64] */;
  (%741,)
}

def @func_6333() -> Tensor[(9, 3, 2), float32] {
  %742 = @func_4043() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(504), int16], Tensor[(9, 3, 2), float32]) */;
  %742.2
}

def @func_4163() -> (Tensor[(10, 11, 12), int64],) {
  %743 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  (%743,)
}

def @func_5859(%var_5813: Tensor[(75, 2), int32]) -> (Tensor[(9, 3, 2), bool], Tensor[(10, 3, 5), int32], int32, Tensor[(75, 2), int32], Tensor[(10, 11, 12), int64]) {
  %744 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %745 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %746 = cast(%var_5813, dtype="int32") /* ty=Tensor[(75, 2), int32] */;
  %747 = reshape(%745, newshape=[]) /* ty=int32 */;
  %748 = reshape(%746, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), int32] */;
  %749 = @func_1704(%747, %748) /* ty=(Tensor[(10, 3, 5), int32],) */;
  %750 = @func_3211() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64]) */;
  %751 = %744.1;
  %752 = %749.0;
  %753 = %750.0;
  (%751, %752, 6 /* ty=int32 */, %var_5813, %753)
}

def @func_6299(%var_6258: Tensor[(16, 8, 15), float32]) -> (Tensor[(16, 8, 15), float32], Tensor[(10, 11, 12), float64], Tensor[(504), int16], Tensor[(330), float64], Tensor[(9, 3, 2), bool]) {
  %754 = cast(%var_6258, dtype="float32") /* ty=Tensor[(16, 8, 15), float32] */;
  %755 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %756 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %757 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %758 = reshape(%756, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), float64] */;
  %759 = reshape(%757, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), float64] */;
  %760 = @func_4881(%758, %759) /* ty=(Tensor[(2, 11, 15), float64], Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), uint64], Tensor[(9, 3, 2), float32]) */;
  %761 = @func_3224() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %762 = log(%754) /* ty=Tensor[(16, 8, 15), float32] */;
  %763 = %755.1;
  %764 = %760.1;
  %765 = %761.0;
  (%762, %763, %764, meta[relay.Constant][27] /* ty=Tensor[(330), float64] */, %765)
}

def @func_3960() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) {
  %766 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %767 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %768 = @func_2638() /* ty=(Tensor[(10, 11, 12), float32],) */;
  %769 = %766.0;
  %770 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
  %771 = %767.0;
  %772 = %768.0;
  (%769, %770, %771, %772)
}

def @func_6531() -> Tensor[(9, 3, 2), bool] {
  %773 = @func_4148() /* ty=(Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) */;
  %773.3
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6644() -> (Tensor[(9, 3, 2), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 3, 2), bool]) {
  %7 = fn () -> (Tensor[(9, 3, 2), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 3, 2), bool]) {
    %0 = @func_6333() /* ty=Tensor[(9, 3, 2), float32] */;
    %1 = cast(%0, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
    %2 = @func_3799() /* ty=(Tensor[(9, 8, 5), bool],) */;
    %3 = @func_3224() /* ty=(Tensor[(9, 3, 2), bool],) */;
    %4 = atan(%1) /* ty=Tensor[(9, 3, 2), float64] */;
    %5 = %2.0;
    %6 = %3.0;
    (%4, %5, %6)
  };
  %7() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 3, 2), bool]) */
}

def @func_1729() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  @func_1727() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */
}

def @func_2849(%var_2845: Tensor[(16, 8, 16), uint32], %var_2846: Tensor[(16, 8, 16), uint32], %var_2847: Tensor[(1536), float32], %var_2848: Tensor[(6, 84), int16]) -> (Tensor[(16, 8, 16), uint32], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(1536), float32], Tensor[(6, 84), int16], Tensor[(10, 11, 12), int64]) {
  %25 = fn (%var_2808: Tensor[(16, 8, 16), uint32], %var_2809: Tensor[(16, 8, 16), uint32], %var_2824: Tensor[(1536), float32], %var_2825: Tensor[(6, 84), int16]) -> (Tensor[(16, 8, 16), uint32], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(1536), float32], Tensor[(6, 84), int16], Tensor[(10, 11, 12), int64]) {
    %8 = cast(%var_2809, dtype="uint32") /* ty=Tensor[(16, 8, 16), uint32] */;
    %9 = shape_of(%var_2808, dtype="int32") /* ty=Tensor[(3), int32] */;
    %10 = cast(%var_2808, dtype="uint32") /* ty=Tensor[(16, 8, 16), uint32] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %12 = @func_2137() /* ty=(Tensor[(10, 11, 12), float64],) */;
    %13 = cast(%var_2824, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %14 = cast(%var_2824, dtype="float64") /* ty=Tensor[(1536), float64] */;
    %15 = cast(%var_2825, dtype="int16") /* ty=Tensor[(6, 84), int16] */;
    %16 = reshape(%13, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float32] */;
    %17 = reshape(%14, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
    %18 = reshape(%15, newshape=[504]) /* ty=Tensor[(504), int16] */;
    %19 = @func_2463(%16, %17, %18) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) */;
    %20 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
    %21 = maximum(%10, %11) /* ty=Tensor[(16, 8, 16), uint32] */;
    %22 = %12.0;
    %23 = %19.0;
    %24 = %20.0;
    (%21, %22, %23, %var_2824, %var_2825, %24)
  };
  %25(%var_2845, %var_2846, %var_2847, %var_2848) /* ty=(Tensor[(16, 8, 16), uint32], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(1536), float32], Tensor[(6, 84), int16], Tensor[(10, 11, 12), int64]) */
}

def @func_4885(%var_4883: Tensor[(2, 11, 15), float64], %var_4884: Tensor[(2, 11, 15), float64]) -> (Tensor[(2, 11, 15), float64], Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), uint64], Tensor[(9, 3, 2), float32]) {
  @func_4881(%var_4883, %var_4884) /* ty=(Tensor[(2, 11, 15), float64], Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), uint64], Tensor[(9, 3, 2), float32]) */
}

def @func_363() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) {
  %26 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %27 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %28 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %29 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %30 = %26.0;
  %31 = %27.0;
  %32 = %28.0;
  %33 = %29.0;
  (%30, %31, %32, %33)
}

def @func_4881(%var_4792: Tensor[(2, 11, 15), float64], %var_4793: Tensor[(2, 11, 15), float64]) -> (Tensor[(2, 11, 15), float64], Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), uint64], Tensor[(9, 3, 2), float32]) {
  %34 = cast(%var_4793, dtype="float64") /* ty=Tensor[(2, 11, 15), float64] */;
  %35 = shape_of(%var_4792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%var_4792, dtype="float64") /* ty=Tensor[(2, 11, 15), float64] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %38 = @func_4064() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %39 = @func_4148() /* ty=(Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) */;
  %40 = cast(meta[relay.Constant][0] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %41 = reshape(%40, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %42 = @func_1189(%41) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(9, 7, 8), int16]) */;
  %43 = %42.1;
  %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 7, 8), int16] */, dtype="uint64") /* ty=Tensor[(9, 7, 8), uint64] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="uint64") /* ty=Tensor[(9, 7, 8), uint64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %48 = mod(%36, %37) /* ty=Tensor[(2, 11, 15), float64] */;
  %49 = %38.0;
  %50 = %39.1;
  %51 = bitwise_and(%46, %47) /* ty=Tensor[(9, 7, 8), uint64] */;
  %52 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
  (%48, meta[relay.Constant][0] /* ty=Tensor[(504), int16] */, %49, %50, %51, %52)
}

def @func_6333() -> Tensor[(9, 3, 2), float32] {
  %53 = @func_4043() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(504), int16], Tensor[(9, 3, 2), float32]) */;
  %53.2
}

def @func_2496() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %60 = fn () -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
    %54 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
    %55 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
    %56 = %54.0;
    %57 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
    %58 = @func_1672() /* ty=Tensor[(9, 3, 2), bool] */;
    %59 = %55.1;
    (%56, %57, %58, %59)
  };
  %60() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */
}

def @func_4064() -> (Tensor[(10, 11, 12), int64],) {
  %61 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %62 = %61.2;
  (%62,)
}

def @func_2233(%var_2215: float32, %var_2216: Tensor[(5, 14, 5), float32]) -> (Tensor[(5, 14, 5), float32], Tensor[(10, 11, 12), int64], Tensor[(1, 1320), int64]) {
  %63 = cast(%var_2215, dtype="float32") /* ty=float32 */;
  %64 = cast(%var_2216, dtype="float32") /* ty=Tensor[(5, 14, 5), float32] */;
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 1320), int64] */, dtype="int64") /* ty=Tensor[(1, 1320), int64] */;
  %66 = reshape(%65, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %67 = @func_436(%66) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
  %68 = floor_mod(%63, %64) /* ty=Tensor[(5, 14, 5), float32] */;
  %69 = %67.0;
  (%68, %69, meta[relay.Constant][2] /* ty=Tensor[(1, 1320), int64] */)
}

def @func_2137() -> (Tensor[(10, 11, 12), float64],) {
  %70 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  (%70,)
}

def @func_2638() -> (Tensor[(10, 11, 12), float32],) {
  %71 = @func_1842() /* ty=Tensor[(10, 11, 12), float64] */;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
  %73 = cosh(%72) /* ty=Tensor[(10, 11, 12), float32] */;
  (%73,)
}

def @func_3962() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) {
  @func_3960() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */
}

def @func_1403() -> Tensor[(10, 11, 12), float64] {
  @func_1401() /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_4044() -> (Tensor[(9, 14, 6), int16], Tensor[(504), int16], Tensor[(9, 3, 2), float32]) {
  %80 = fn () -> (Tensor[(9, 14, 6), int16], Tensor[(504), int16], Tensor[(9, 3, 2), float32]) {
    %74 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
    %75 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
    %76 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
    %77 = %74.0;
    %78 = %75.3;
    %79 = %76.0;
    (%77, %78, %79)
  };
  %80() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(504), int16], Tensor[(9, 3, 2), float32]) */
}

def @func_5311() -> Tensor[(504), int16] {
  @func_5309() /* ty=Tensor[(504), int16] */
}

def @func_4550() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 14, 6), float64]) {
  %81 = @func_2860() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %82 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %83 = %81.0;
  %84 = %82.1;
  (%83, %84)
}

def @func_6548() -> (Tensor[(9, 8, 5), float64],) {
  %88 = fn () -> (Tensor[(9, 8, 5), float64],) {
    %85 = @func_5086() /* ty=Tensor[(9, 8, 5), bool] */;
    %86 = cast(%85, dtype="float64") /* ty=Tensor[(9, 8, 5), float64] */;
    %87 = log2(%86) /* ty=Tensor[(9, 8, 5), float64] */;
    (%87,)
  };
  %88() /* ty=(Tensor[(9, 8, 5), float64],) */
}

def @func_5912() -> Tensor[(9, 3, 2), float32] {
  @func_1352() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_6976() -> (Tensor[(9, 3, 2), float32],) {
  %89 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
  %90 = %89.0;
  (%90,)
}

def @func_5309() -> Tensor[(504), int16] {
  %91 = @func_3110() /* ty=(Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) */;
  %91.0
}

def @func_1793() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) {
  %92 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %94 = reshape(%93, newshape=[1, 504]) /* ty=Tensor[(1, 504), int16] */;
  %95 = @func_665(%94) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) */;
  %96 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %97 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
  %98 = %92.0;
  %99 = %95.1;
  %100 = %96.1;
  (%97, %98, %99, meta[relay.Constant][3] /* ty=Tensor[(504), int16] */, %100)
}

def @func_3225() -> (Tensor[(9, 3, 2), bool],) {
  %103 = fn () -> (Tensor[(9, 3, 2), bool],) {
    %101 = @func_2495() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
    %102 = %101.2;
    (%102,)
  };
  %103() /* ty=(Tensor[(9, 3, 2), bool],) */
}

def @func_3891() -> (Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) {
  @func_3889() /* ty=(Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) */
}

def @func_3889() -> (Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) {
  %104 = @func_3649() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(2, 768), float32], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %105 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %106 = %104.4;
  %107 = %105.0;
  %108 = @func_1672() /* ty=Tensor[(9, 3, 2), bool] */;
  (%106, %107, %108)
}

def @func_3730(%var_3728: Tensor[(1536), float32]) -> (Tensor[(1, 504), float32], Tensor[(8, 16, 12), float32], Tensor[(1536), float32]) {
  @func_3727(%var_3728) /* ty=(Tensor[(1, 504), float32], Tensor[(8, 16, 12), float32], Tensor[(1536), float32]) */
}

def @func_2702() -> Tensor[(9, 3, 2), float32] {
  %109 = fn () -> Tensor[(9, 3, 2), float32] {
    @func_1352() /* ty=Tensor[(9, 3, 2), float32] */
  };
  %109() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_3111() -> (Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) {
  %115 = fn () -> (Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) {
    %110 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
    %111 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
    %112 = %110.3;
    %113 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
    %114 = %111.1;
    (%112, %113, %114)
  };
  %115() /* ty=(Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) */
}

def @func_877() -> Tensor[(10, 11, 12), int64] {
  @func_875() /* ty=Tensor[(10, 11, 12), int64] */
}

def @func_1240() -> Tensor[(10, 11, 12), int64] {
  %116 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %116.0
}

def @func_4500() -> Tensor[(10, 11, 12), int64] {
  %118 = fn () -> Tensor[(10, 11, 12), int64] {
    %117 = @func_1882() /* ty=(Tensor[(10, 11, 12), int64],) */;
    %117.0
  };
  %118() /* ty=Tensor[(10, 11, 12), int64] */
}

def @func_4148() -> (Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) {
  %119 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %120 = %119.2;
  %121 = cast(%120, dtype="bool") /* ty=Tensor[(1, 504), bool] */;
  %122 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 504), float32] */, dtype="bool") /* ty=Tensor[(14, 504), bool] */;
  %123 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
  %124 = @func_3110() /* ty=(Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) */;
  %125 = @func_2495() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %126 = equal(%121, %122) /* ty=Tensor[(14, 504), bool] */;
  %127 = %123.1;
  %128 = %124.0;
  %129 = %125.0;
  (%126, %127, %128, %129)
}

def @func_2332(%var_2317: float32) -> (Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64], float32, Tensor[(175, 2), float32]) {
  %130 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %131 = %130.3;
  %132 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 11, 12), int64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = cast(%var_2317, dtype="float32") /* ty=float32 */;
  %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(175, 2), float32] */, dtype="float32") /* ty=Tensor[(175, 2), float32] */;
  %138 = reshape(%136, newshape=[]) /* ty=float32 */;
  %139 = reshape(%137, newshape=[5, 14, 5]) /* ty=Tensor[(5, 14, 5), float32] */;
  %140 = @func_2233(%138, %139) /* ty=(Tensor[(5, 14, 5), float32], Tensor[(10, 11, 12), int64], Tensor[(1, 1320), int64]) */;
  %141 = greater(%134, %135) /* ty=Tensor[(10, 11, 12), bool] */;
  %142 = %140.1;
  (%141, %142, %var_2317, meta[relay.Constant][6] /* ty=Tensor[(175, 2), float32] */)
}

def @func_3590(%var_3588: Tensor[(8, 6, 16), int64], %var_3589: Tensor[(8, 6, 16), int64]) -> (Tensor[(8, 6, 16), bool], Tensor[(10, 11, 12), int64]) {
  @func_3586(%var_3588, %var_3589) /* ty=(Tensor[(8, 6, 16), bool], Tensor[(10, 11, 12), int64]) */
}

def @func_5400(%var_5398: int32, %var_5399: Tensor[(150), int32]) -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(9, 8, 5), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 3, 5), int32], int32, Tensor[(150), int32]) {
  %155 = fn (%var_5380: int32, %var_5381: Tensor[(150), int32]) -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(9, 8, 5), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 3, 5), int32], int32, Tensor[(150), int32]) {
    %143 = @func_3889() /* ty=(Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) */;
    %144 = @func_1727() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
    %145 = cast(%var_5380, dtype="int32") /* ty=int32 */;
    %146 = cast(%var_5381, dtype="int32") /* ty=Tensor[(150), int32] */;
    %147 = reshape(%145, newshape=[]) /* ty=int32 */;
    %148 = reshape(%146, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), int32] */;
    %149 = @func_1704(%147, %148) /* ty=(Tensor[(10, 3, 5), int32],) */;
    %150 = @func_4499() /* ty=Tensor[(10, 11, 12), int64] */;
    %151 = %143.2;
    %152 = @func_4738() /* ty=Tensor[(9, 8, 5), bool] */;
    %153 = %144.1;
    %154 = %149.0;
    (%150, %151, %152, %153, %154, %var_5380, %var_5381)
  };
  %155(%var_5398, %var_5399) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(9, 8, 5), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 3, 5), int32], int32, Tensor[(150), int32]) */
}

def @func_770() -> Tensor[(9, 3, 2), bool] {
  %160 = fn () -> Tensor[(9, 3, 2), bool] {
    %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 3, 2), bool] */, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
    %157 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(9, 3, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %158 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 3, 2), bool] */, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
    %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%158, %159) /* ty=Tensor[(9, 3, 2), bool] */
  };
  %160() /* ty=Tensor[(9, 3, 2), bool] */
}

def @func_5443() -> Tensor[(10, 11, 12), float64] {
  @func_5441() /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_1401() -> Tensor[(10, 11, 12), float64] {
  %161 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  acos(%162) /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_2468(%var_2465: Tensor[(8, 16, 12), float32], %var_2466: Tensor[(8, 16, 12), float64], %var_2467: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) {
  @func_2463(%var_2465, %var_2466, %var_2467) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) */
}

def @func_738(%var_734: Tensor[(13, 7, 10), float32], %var_735: Tensor[(13, 7, 10), float32], %var_736: Tensor[(13, 7, 10), float32], %var_737: Tensor[(12, 42), int16]) -> (Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) {
  %185 = fn (%var_693: Tensor[(13, 7, 10), float32], %var_694: Tensor[(13, 7, 10), float32], %var_703: Tensor[(13, 7, 10), float32], %var_716: Tensor[(12, 42), int16]) -> (Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) {
    %163 = cast(%var_694, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
    %164 = atanh(%163) /* ty=Tensor[(13, 7, 10), float32] */;
    %165 = cast(%var_703, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
    %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %167 = cast(%164, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %169 = cast(%var_716, dtype="int16") /* ty=Tensor[(12, 42), int16] */;
    %170 = reshape(%169, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
    %171 = @func_486(%170) /* ty=(Tensor[(9, 7, 8), int16],) */;
    %172 = cast(%var_694, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
    %173 = shape_of(%var_693, dtype="int32") /* ty=Tensor[(3), int32] */;
    %174 = cast(%var_693, dtype="float32") /* ty=Tensor[(13, 7, 10), float32] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %176 = floor_divide(%174, %175) /* ty=Tensor[(13, 7, 10), float32] */;
    %177 = cast(%176, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
    %178 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(%164, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %181 = power(%167, %168) /* ty=Tensor[(13, 7, 10), float32] */;
    %182 = %171.0;
    %183 = logical_or(%179, %180) /* ty=Tensor[(13, 7, 10), bool] */;
    %184 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
    (%181, %182, %var_716, %183, %184)
  };
  %185(%var_734, %var_735, %var_736, %var_737) /* ty=(Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) */
}

def @func_4740() -> Tensor[(9, 8, 5), bool] {
  @func_4738() /* ty=Tensor[(9, 8, 5), bool] */
}

def @func_667(%var_666: Tensor[(1, 504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) {
  %192 = fn (%var_662: Tensor[(1, 504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) {
    %186 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
    %187 = cast(%var_662, dtype="int16") /* ty=Tensor[(1, 504), int16] */;
    %188 = reshape(%187, newshape=[504]) /* ty=Tensor[(504), int16] */;
    %189 = @func_590(%188) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) */;
    %190 = %186.0;
    %191 = %189.4;
    (%190, %191, %var_662)
  };
  %192(%var_666) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) */
}

def @func_3418(%var_3416: Tensor[(36, 14), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(910), float32], Tensor[(36, 14), int16]) {
  @func_3415(%var_3416) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(910), float32], Tensor[(36, 14), int16]) */
}

def @func_4574() -> Tensor[(10, 11, 12), int64] {
  %193 = @func_3562() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %193.0
}

def @func_6335() -> Tensor[(9, 3, 2), float32] {
  @func_6333() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_1523(%var_1522: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(1, 504), int16], Tensor[(504), int16]) {
  %201 = fn (%var_1518: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(1, 504), int16], Tensor[(504), int16]) {
    %194 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
    %195 = cast(%var_1518, dtype="int16") /* ty=Tensor[(504), int16] */;
    %196 = reshape(%195, newshape=[1, 504]) /* ty=Tensor[(1, 504), int16] */;
    %197 = @func_665(%196) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) */;
    %198 = %194.1;
    %199 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
    %200 = %197.2;
    (%198, %199, %200, %var_1518)
  };
  %201(%var_1522) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(1, 504), int16], Tensor[(504), int16]) */
}

def @func_3415(%var_3407: Tensor[(36, 14), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(910), float32], Tensor[(36, 14), int16]) {
  %202 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %203 = cast(meta[relay.Constant][9] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %204 = cast(meta[relay.Constant][9] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %205 = cast(meta[relay.Constant][9] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %206 = cast(%var_3407, dtype="int16") /* ty=Tensor[(36, 14), int16] */;
  %207 = reshape(%203, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %208 = reshape(%204, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %209 = reshape(%205, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %210 = reshape(%206, newshape=[12, 42]) /* ty=Tensor[(12, 42), int16] */;
  %211 = @func_733(%207, %208, %209, %210) /* ty=(Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) */;
  %212 = @func_2374() /* ty=Tensor[(10, 11, 12), int64] */;
  %213 = %202.0;
  %214 = %211.3;
  (%212, %213, %214, meta[relay.Constant][9] /* ty=Tensor[(910), float32] */, %var_3407)
}

def @func_6715() -> (Tensor[(10, 11, 12), float64], Tensor[(9, 14, 6), float64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) {
  %224 = fn () -> (Tensor[(10, 11, 12), float64], Tensor[(9, 14, 6), float64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) {
    %215 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
    %216 = cast(%215, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
    %217 = @func_3250() /* ty=(Tensor[(9, 14, 6), float64],) */;
    %218 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
    %219 = exp(%216) /* ty=Tensor[(10, 11, 12), float64] */;
    %220 = %217.0;
    %221 = @func_6333() /* ty=Tensor[(9, 3, 2), float32] */;
    %222 = @func_4574() /* ty=Tensor[(10, 11, 12), int64] */;
    %223 = %218.0;
    (%219, %220, %221, %222, %223)
  };
  %224() /* ty=(Tensor[(10, 11, 12), float64], Tensor[(9, 14, 6), float64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) */
}

def @func_6944() -> (Tensor[(10, 11, 12), int64], Tensor[(5, 13, 5), bool], Tensor[(325), float32]) {
  @func_6942() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(5, 13, 5), bool], Tensor[(325), float32]) */
}

def @func_1843() -> Tensor[(10, 11, 12), float64] {
  %228 = fn () -> Tensor[(10, 11, 12), float64] {
    %225 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
    %226 = %225.1;
    %227 = cast(%226, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
    log10(%227) /* ty=Tensor[(10, 11, 12), float64] */
  };
  %228() /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_3344() -> (Tensor[(9, 8, 5), bool],) {
  %229 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
  %230 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(9, 8, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %233 = floor_mod(%231, %232) /* ty=Tensor[(9, 8, 5), float32] */;
  %234 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 8, 5), float32] */, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = logical_or(%236, %237) /* ty=Tensor[(9, 8, 5), bool] */;
  (%238,)
}

def @func_1242() -> Tensor[(10, 11, 12), int64] {
  @func_1240() /* ty=Tensor[(10, 11, 12), int64] */
}

def @func_4738() -> Tensor[(9, 8, 5), bool] {
  %239 = @func_3799() /* ty=(Tensor[(9, 8, 5), bool],) */;
  %239.0
}

def @func_2375() -> Tensor[(10, 11, 12), int64] {
  %241 = fn () -> Tensor[(10, 11, 12), int64] {
    %240 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
    %240.0
  };
  %241() /* ty=Tensor[(10, 11, 12), int64] */
}

def @func_6978() -> (Tensor[(9, 3, 2), float32],) {
  @func_6976() /* ty=(Tensor[(9, 3, 2), float32],) */
}

def @func_7128(%var_7126: uint16, %var_7127: Tensor[(1, 14, 3), uint16]) -> (Tensor[(10, 11, 12), float64], Tensor[(?, 14, 3), bool], Tensor[(?, 14, 3), bool], Tensor[(1, 14, 3), float64]) {
  %262 = fn (%var_7090: uint16, %var_7091: Tensor[(1, 14, 3), uint16]) -> (Tensor[(10, 11, 12), float64], Tensor[(?, 14, 3), bool], Tensor[(?, 14, 3), bool], Tensor[(1, 14, 3), float64]) {
    %242 = @func_4697() /* ty=(Tensor[(10, 11, 12), float64],) */;
    %243 = cast(%var_7090, dtype="uint16") /* ty=uint16 */;
    %244 = cast(%var_7091, dtype="uint16") /* ty=Tensor[(1, 14, 3), uint16] */;
    %245 = subtract(%243, %244) /* ty=Tensor[(1, 14, 3), uint16] */;
    %246 = cast(%var_7090, dtype="float64") /* ty=float64 */;
    %247 = cast(%245, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
    %248 = divide(%246, %247) /* ty=Tensor[(1, 14, 3), float64] */;
    %249 = cast(%245, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
    %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %251 = cast(%248, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %253 = cast(%248, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
    %254 = shape_of(%var_7091, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%var_7091, dtype="bool") /* ty=Tensor[(1, 14, 3), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %257 = cast(%248, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
    %258 = %242.0;
    %259 = logical_or(%251, %252) /* ty=Tensor[(?, 14, 3), bool] */;
    %260 = less_equal(%255, %256) /* ty=Tensor[(?, 14, 3), bool] */;
    %261 = asinh(%257) /* ty=Tensor[(1, 14, 3), float64] */;
    (%258, %259, %260, %261)
  };
  %262(%var_7126, %var_7127) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(?, 14, 3), bool], Tensor[(?, 14, 3), bool], Tensor[(1, 14, 3), float64]) */
}

def @func_375() -> Tensor[(10, 11, 12), int64] {
  %263 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %263.2
}

def @func_3074() -> Tensor[(9, 14, 6), float64] {
  @func_3072() /* ty=Tensor[(9, 14, 6), float64] */
}

def @func_6611(%var_6599: Tensor[(12, 5, 11), float32]) -> (Tensor[(12, 5, 11), float32], Tensor[(10, 11, 12), int64]) {
  %264 = cast(%var_6599, dtype="float32") /* ty=Tensor[(12, 5, 11), float32] */;
  %265 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %266 = sigmoid(%264) /* ty=Tensor[(12, 5, 11), float32] */;
  %267 = %265.1;
  (%266, %267)
}

def @func_6531() -> Tensor[(9, 3, 2), bool] {
  %268 = @func_4148() /* ty=(Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) */;
  %268.3
}

def @func_6598() -> (Tensor[(504), int16], Tensor[(10, 11, 12), int16], Tensor[(1320), int64]) {
  %274 = fn () -> (Tensor[(504), int16], Tensor[(10, 11, 12), int16], Tensor[(1320), int64]) {
    %269 = cast(meta[relay.Constant][12] /* ty=Tensor[(1320), int64] */, dtype="int64") /* ty=Tensor[(1320), int64] */;
    %270 = reshape(%269, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
    %271 = @func_3776(%270) /* ty=(Tensor[(10, 11, 12), int16],) */;
    %272 = @func_5309() /* ty=Tensor[(504), int16] */;
    %273 = %271.0;
    (%272, %273, meta[relay.Constant][12] /* ty=Tensor[(1320), int64] */)
  };
  %274() /* ty=(Tensor[(504), int16], Tensor[(10, 11, 12), int16], Tensor[(1320), int64]) */
}

def @func_2608(%var_2606: Tensor[(2, 252), int16], %var_2607: Tensor[(300), float64]) -> (Tensor[(9, 3, 2), float32], Tensor[(2, 252), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(300), float64], Tensor[(504), int16], Tensor[(2, 252), bool], Tensor[(9, 3, 2), bool]) {
  @func_2604(%var_2606, %var_2607) /* ty=(Tensor[(9, 3, 2), float32], Tensor[(2, 252), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(300), float64], Tensor[(504), int16], Tensor[(2, 252), bool], Tensor[(9, 3, 2), bool]) */
}

def @func_4576() -> Tensor[(10, 11, 12), int64] {
  @func_4574() /* ty=Tensor[(10, 11, 12), int64] */
}

def @func_3492(%var_3490: Tensor[(14, 2, 7), uint64], %var_3491: Tensor[(14, 2, 7), uint64]) -> (Tensor[(14, 2, 7), uint64], Tensor[(9, 3, 2), float32]) {
  %281 = fn (%var_3474: Tensor[(14, 2, 7), uint64], %var_3475: Tensor[(14, 2, 7), uint64]) -> (Tensor[(14, 2, 7), uint64], Tensor[(9, 3, 2), float32]) {
    %275 = cast(%var_3475, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
    %276 = shape_of(%var_3474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%var_3474, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %279 = left_shift(%277, %278) /* ty=Tensor[(14, 2, 7), uint64] */;
    %280 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
    (%279, %280)
  };
  %281(%var_3490, %var_3491) /* ty=(Tensor[(14, 2, 7), uint64], Tensor[(9, 3, 2), float32]) */
}

def @func_6425() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(455, 2), float32], Tensor[(504), int16]) {
  %295 = fn () -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(455, 2), float32], Tensor[(504), int16]) {
    %282 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
    %283 = cast(meta[relay.Constant][13] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
    %284 = cast(meta[relay.Constant][13] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
    %285 = cast(meta[relay.Constant][13] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
    %286 = cast(meta[relay.Constant][14] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
    %287 = reshape(%283, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
    %288 = reshape(%284, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
    %289 = reshape(%285, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
    %290 = reshape(%286, newshape=[12, 42]) /* ty=Tensor[(12, 42), int16] */;
    %291 = @func_733(%287, %288, %289, %290) /* ty=(Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) */;
    %292 = @func_4574() /* ty=Tensor[(10, 11, 12), int64] */;
    %293 = %282.1;
    %294 = %291.3;
    (%292, %293, %294, meta[relay.Constant][13] /* ty=Tensor[(455, 2), float32] */, meta[relay.Constant][14] /* ty=Tensor[(504), int16] */)
  };
  %295() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(455, 2), float32], Tensor[(504), int16]) */
}

def @func_4697() -> (Tensor[(10, 11, 12), float64],) {
  %296 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %298 = tan(%297) /* ty=Tensor[(10, 11, 12), float64] */;
  (%298,)
}

def @func_5645() -> (Tensor[(9, 14, 6), int16], Tensor[(10, 11, 12), int64]) {
  %303 = fn () -> (Tensor[(9, 14, 6), int16], Tensor[(10, 11, 12), int64]) {
    %299 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
    %300 = @func_1882() /* ty=(Tensor[(10, 11, 12), int64],) */;
    %301 = %299.0;
    %302 = %300.0;
    (%301, %302)
  };
  %303() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(10, 11, 12), int64]) */
}

def @func_488(%var_487: Tensor[(9, 7, 8), int16]) -> (Tensor[(9, 7, 8), int16],) {
  %309 = fn (%var_476: Tensor[(9, 7, 8), int16]) -> (Tensor[(9, 7, 8), int16],) {
    %304 = cast(%var_476, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
    %305 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(9, 7, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 7, 8), int16] */, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %308 = subtract(%306, %307) /* ty=Tensor[(9, 7, 8), int16] */;
    (%308,)
  };
  %309(%var_487) /* ty=(Tensor[(9, 7, 8), int16],) */
}

def @func_5101() -> (Tensor[(10, 11, 12), int64],) {
  %311 = fn () -> (Tensor[(10, 11, 12), int64],) {
    %310 = @func_875() /* ty=Tensor[(10, 11, 12), int64] */;
    (%310,)
  };
  %311() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_2139() -> (Tensor[(10, 11, 12), float64],) {
  @func_2137() /* ty=(Tensor[(10, 11, 12), float64],) */
}

def @func_6237(%var_6235: Tensor[(9, 8, 5), bool], %var_6236: Tensor[(9, 8, 5), bool]) -> (Tensor[(9, 3, 2), float32], Tensor[(9, 3, 2), float32], Tensor[(504), int16], Tensor[(10, 11, 12), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), float32], Tensor[(10, 11, 12), bool]) {
  %337 = fn (%var_6164: Tensor[(9, 8, 5), bool], %var_6208: Tensor[(9, 8, 5), bool]) -> (Tensor[(9, 3, 2), float32], Tensor[(9, 3, 2), float32], Tensor[(504), int16], Tensor[(10, 11, 12), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), float32], Tensor[(10, 11, 12), bool]) {
    %312 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
    %313 = @func_4738() /* ty=Tensor[(9, 8, 5), bool] */;
    %314 = cast(%var_6164, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
    %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(%313, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %318 = greater(%316, %317) /* ty=Tensor[(9, 8, 5), bool] */;
    %319 = cast(%318, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
    %320 = shape_of(%var_6164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%var_6164, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %323 = cast(%var_6208, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
    %324 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %325 = cast(%313, dtype="bool") /* ty=Tensor[(9, 8, 5), bool] */;
    %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %327 = cast(%var_6164, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
    %328 = @func_5193() /* ty=(Tensor[(10, 11, 12), bool],) */;
    %329 = %312.0;
    %330 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
    %331 = @func_5309() /* ty=Tensor[(504), int16] */;
    %332 = @func_1842() /* ty=Tensor[(10, 11, 12), float64] */;
    %333 = greater_equal(%321, %322) /* ty=Tensor[(9, 8, 5), bool] */;
    %334 = not_equal(%325, %326) /* ty=Tensor[(9, 8, 5), bool] */;
    %335 = sin(%327) /* ty=Tensor[(9, 8, 5), float32] */;
    %336 = %328.0;
    (%329, %330, %331, %332, %333, %334, %335, %336)
  };
  %337(%var_6235, %var_6236) /* ty=(Tensor[(9, 3, 2), float32], Tensor[(9, 3, 2), float32], Tensor[(504), int16], Tensor[(10, 11, 12), float64], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), bool], Tensor[(9, 8, 5), float32], Tensor[(10, 11, 12), bool]) */
}

def @func_4552() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 14, 6), float64]) {
  @func_4550() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 14, 6), float64]) */
}

def @func_2101() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %338 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
  %339 = @func_1672() /* ty=Tensor[(9, 3, 2), bool] */;
  %340 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  (%338, %339, %340)
}

def @func_438(%var_437: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) {
  %354 = fn (%var_390: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) {
    %341 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
    %342 = %341.0;
    %343 = cast(%var_390, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %345 = cast(%342, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %347 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
    %348 = cast(%var_390, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
    %349 = atan(%348) /* ty=Tensor[(10, 11, 12), float32] */;
    %350 = cast(%349, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
    %351 = add(%345, %346) /* ty=Tensor[(10, 11, 12), int64] */;
    %352 = %347.2;
    %353 = acosh(%350) /* ty=Tensor[(10, 11, 12), float32] */;
    (%351, %352, %353)
  };
  %354(%var_437) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */
}

def @func_5195() -> (Tensor[(10, 11, 12), bool],) {
  @func_5193() /* ty=(Tensor[(10, 11, 12), bool],) */
}

def @func_1467() -> Tensor[(9, 3, 2), bool] {
  %355 = fn () -> Tensor[(9, 3, 2), bool] {
    @func_769() /* ty=Tensor[(9, 3, 2), bool] */
  };
  %355() /* ty=Tensor[(9, 3, 2), bool] */
}

def @func_5577(%var_5529: Tensor[(13, 15, 12), float32]) -> (Tensor[(9, 3, 2), float32], Tensor[(13, 15, 12), float32]) {
  %356 = @func_2912() /* ty=(Tensor[(9, 3, 2), float32],) */;
  %357 = cast(%var_5529, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %358 = erf(%357) /* ty=Tensor[(13, 15, 12), float32] */;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %360 = %356.0;
  %361 = exp(%359) /* ty=Tensor[(13, 15, 12), float32] */;
  (%360, %361)
}

def @func_3779(%var_3777: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), int16],) {
  @func_3776(%var_3777) /* ty=(Tensor[(10, 11, 12), int16],) */
}

def @func_2913() -> (Tensor[(9, 3, 2), float32],) {
  %366 = fn () -> (Tensor[(9, 3, 2), float32],) {
    %362 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
    %363 = %362.0;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
    %365 = asinh(%364) /* ty=Tensor[(9, 3, 2), float32] */;
    (%365,)
  };
  %366() /* ty=(Tensor[(9, 3, 2), float32],) */
}

def @func_4900(%var_4890: Tensor[(9, 16, 9), float32]) -> Tensor[(9, 16, 9), float32] {
  %367 = cast(%var_4890, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
  tan(%367) /* ty=Tensor[(9, 16, 9), float32] */
}

def @func_1884() -> (Tensor[(10, 11, 12), int64],) {
  @func_1882() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_5284() -> Tensor[(10, 11, 12), float32] {
  @func_5282() /* ty=Tensor[(10, 11, 12), float32] */
}

def @func_2335(%var_2333: float32) -> (Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64], float32, Tensor[(175, 2), float32]) {
  @func_2332(%var_2333) /* ty=(Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64], float32, Tensor[(175, 2), float32]) */
}

def @func_5914() -> Tensor[(9, 3, 2), float32] {
  @func_5912() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_1254(%var_1253: Tensor[(10, 10, 3), float64]) -> Tensor[(10, 10, 3), float64] {
  %369 = fn (%var_1246: Tensor[(10, 10, 3), float64]) -> Tensor[(10, 10, 3), float64] {
    %368 = cast(%var_1246, dtype="float64") /* ty=Tensor[(10, 10, 3), float64] */;
    log(%368) /* ty=Tensor[(10, 10, 3), float64] */
  };
  %369(%var_1253) /* ty=Tensor[(10, 10, 3), float64] */
}

def @func_989() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) {
  %389 = fn () -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) {
    %370 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
    %371 = %370.0;
    %372 = cast(%371, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
    %373 = erf(%372) /* ty=Tensor[(9, 3, 2), float32] */;
    %374 = cast(%371, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %378 = maximum(%376, %377) /* ty=Tensor[(9, 3, 2), float32] */;
    %379 = cast(%378, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
    %380 = sin(%379) /* ty=Tensor[(9, 3, 2), float32] */;
    %381 = cast(%373, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %385 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
    %386 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
    %387 = floor_divide(%383, %384) /* ty=Tensor[(9, 3, 2), float32] */;
    %388 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
    (%385, %386, %387, %388)
  };
  %389() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */
}

def @func_5056() -> Tensor[(9, 8, 5), float32] {
  @func_5054() /* ty=Tensor[(9, 8, 5), float32] */
}

def @func_2640() -> (Tensor[(10, 11, 12), float32],) {
  @func_2638() /* ty=(Tensor[(10, 11, 12), float32],) */
}

def @func_1985(%var_1982: Tensor[(10, 11, 12), int64], %var_1983: Tensor[(300), float64], %var_1984: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64], Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(504), int16]) {
  %411 = fn (%var_1913: Tensor[(10, 11, 12), int64], %var_1955: Tensor[(300), float64], %var_1963: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64], Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(504), int16]) {
    %390 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
    %391 = cast(%var_1913, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%390, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %395 = cast(%var_1913, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
    %396 = cast(%390, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
    %397 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
    %398 = cast(%var_1955, dtype="float64") /* ty=Tensor[(300), float64] */;
    %399 = reshape(%398, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float64] */;
    %400 = cast(%var_1963, dtype="int16") /* ty=Tensor[(504), int16] */;
    %401 = reshape(%400, newshape=[504]) /* ty=Tensor[(504), int16] */;
    %402 = @func_1521(%401) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(1, 504), int16], Tensor[(504), int16]) */;
    %403 = logical_xor(%393, %394) /* ty=Tensor[(10, 11, 12), int64] */;
    %404 = cos(%395) /* ty=Tensor[(10, 11, 12), float64] */;
    %405 = sqrt(%396) /* ty=Tensor[(10, 11, 12), float64] */;
    %406 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
    %407 = %397.3;
    %408 = @func_1252(%399) /* ty=Tensor[(10, 10, 3), float64] */;
    %409 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
    %410 = %402.3;
    (%403, %404, %405, %406, %407, %408, %var_1955, %409, %410, %var_1963)
  };
  %411(%var_1982, %var_1983, %var_1984) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64], Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(504), int16]) */
}

def @func_3650() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(2, 768), float32], Tensor[(504), int16], Tensor[(2, 252), int16]) {
  %425 = fn () -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(2, 768), float32], Tensor[(504), int16], Tensor[(2, 252), int16]) {
    %412 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
    %413 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 768), float32] */, dtype="float32") /* ty=Tensor[(2, 768), float32] */;
    %414 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 768), float32] */, dtype="float64") /* ty=Tensor[(2, 768), float64] */;
    %415 = cast(meta[relay.Constant][17] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
    %416 = reshape(%413, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float32] */;
    %417 = reshape(%414, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
    %418 = reshape(%415, newshape=[504]) /* ty=Tensor[(504), int16] */;
    %419 = @func_2463(%416, %417, %418) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) */;
    %420 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
    %421 = %412.1;
    %422 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
    %423 = %419.0;
    %424 = %420.4;
    (%421, %422, %423, meta[relay.Constant][16] /* ty=Tensor[(2, 768), float32] */, meta[relay.Constant][17] /* ty=Tensor[(504), int16] */, %424)
  };
  %425() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(2, 768), float32], Tensor[(504), int16], Tensor[(2, 252), int16]) */
}

def @func_3727(%var_3714: Tensor[(1536), float32]) -> (Tensor[(1, 504), float32], Tensor[(8, 16, 12), float32], Tensor[(1536), float32]) {
  %426 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %427 = cast(%var_3714, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %428 = cast(%var_3714, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %429 = %426.2;
  %430 = cast(%429, dtype="int16") /* ty=Tensor[(1, 504), int16] */;
  %431 = reshape(%427, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float32] */;
  %432 = reshape(%428, newshape=[8, 16, 12]) /* ty=Tensor[(8, 16, 12), float64] */;
  %433 = reshape(%430, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %434 = @func_2463(%431, %432, %433) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) */;
  %435 = %434.1;
  (%429, %435, %var_3714)
}

def @func_2463(%var_2408: Tensor[(8, 16, 12), float32], %var_2443: Tensor[(8, 16, 12), float64], %var_2454: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), float64], Tensor[(8, 16, 12), float32], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(8, 16, 12), float32]) {
  %436 = cast(%var_2408, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %437 = sinh(%436) /* ty=Tensor[(8, 16, 12), float32] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %439 = cast(%var_2454, dtype="int16") /* ty=Tensor[(504), int16] */;
  %440 = reshape(%439, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %441 = @func_590(%440) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) */;
  %442 = cast(%437, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
  %443 = log(%442) /* ty=Tensor[(8, 16, 12), float64] */;
  %444 = cast(%var_2443, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(8, 16, 12), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = greater(%446, %447) /* ty=Tensor[(8, 16, 12), bool] */;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %450 = log2(%449) /* ty=Tensor[(8, 16, 12), float32] */;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(8, 16, 12), float32] */;
  %452 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  %453 = sqrt(%438) /* ty=Tensor[(8, 16, 12), float32] */;
  %454 = %441.0;
  %455 = asinh(%451) /* ty=Tensor[(8, 16, 12), float32] */;
  (%452, %453, %454, %var_2454, %455)
}

def @func_2972(%var_2970: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64]) {
  @func_2969(%var_2970) /* ty=(Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64]) */
}

def @func_899() -> (Tensor[(10, 15, 5), float32], Tensor[(10, 11, 12), int64]) {
  %456 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 5), float32] */;
  %457 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %458 = asin(%456) /* ty=Tensor[(10, 15, 5), float32] */;
  %459 = %457.1;
  (%458, %459)
}

def @func_2751() -> (Tensor[(10, 11, 12), int64],) {
  %460 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %461 = %460.2;
  (%461,)
}

def @func_3346() -> (Tensor[(9, 8, 5), bool],) {
  @func_3344() /* ty=(Tensor[(9, 8, 5), bool],) */
}

def @func_4699() -> (Tensor[(10, 11, 12), float64],) {
  @func_4697() /* ty=(Tensor[(10, 11, 12), float64],) */
}

def @func_3800() -> (Tensor[(9, 8, 5), bool],) {
  %464 = fn () -> (Tensor[(9, 8, 5), bool],) {
    %462 = @func_3344() /* ty=(Tensor[(9, 8, 5), bool],) */;
    %463 = %462.0;
    (%463,)
  };
  %464() /* ty=(Tensor[(9, 8, 5), bool],) */
}

def @func_5087() -> Tensor[(9, 8, 5), bool] {
  %466 = fn () -> Tensor[(9, 8, 5), bool] {
    %465 = @func_3799() /* ty=(Tensor[(9, 8, 5), bool],) */;
    %465.0
  };
  %466() /* ty=Tensor[(9, 8, 5), bool] */
}

def @func_901() -> (Tensor[(10, 15, 5), float32], Tensor[(10, 11, 12), int64]) {
  @func_899() /* ty=(Tensor[(10, 15, 5), float32], Tensor[(10, 11, 12), int64]) */
}

def @func_4473() -> Tensor[(9, 3, 2), float32] {
  @func_4471() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_3213() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64]) {
  @func_3211() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64]) */
}

def @func_5282() -> Tensor[(10, 11, 12), float32] {
  %467 = @func_2638() /* ty=(Tensor[(10, 11, 12), float32],) */;
  %467.0
}

def @func_851() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) {
  @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */
}

def @func_5861(%var_5860: Tensor[(75, 2), int32]) -> (Tensor[(9, 3, 2), bool], Tensor[(10, 3, 5), int32], int32, Tensor[(75, 2), int32], Tensor[(10, 11, 12), int64]) {
  %478 = fn (%var_5813: Tensor[(75, 2), int32]) -> (Tensor[(9, 3, 2), bool], Tensor[(10, 3, 5), int32], int32, Tensor[(75, 2), int32], Tensor[(10, 11, 12), int64]) {
    %468 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
    %469 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %470 = cast(%var_5813, dtype="int32") /* ty=Tensor[(75, 2), int32] */;
    %471 = reshape(%469, newshape=[]) /* ty=int32 */;
    %472 = reshape(%470, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), int32] */;
    %473 = @func_1704(%471, %472) /* ty=(Tensor[(10, 3, 5), int32],) */;
    %474 = @func_3211() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64]) */;
    %475 = %468.1;
    %476 = %473.0;
    %477 = %474.0;
    (%475, %476, 6 /* ty=int32 */, %var_5813, %477)
  };
  %478(%var_5860) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 3, 5), int32], int32, Tensor[(75, 2), int32], Tensor[(10, 11, 12), int64]) */
}

def @func_6480() -> (Tensor[(9, 3, 2), float32],) {
  %479 = @func_3110() /* ty=(Tensor[(504), int16], Tensor[(9, 3, 2), float32], Tensor[(9, 14, 6), float64]) */;
  %480 = %479.1;
  (%480,)
}

def @func_4773() -> (Tensor[(9, 3, 2), bool], Tensor[(9, 14, 6), float64]) {
  %484 = fn () -> (Tensor[(9, 3, 2), bool], Tensor[(9, 14, 6), float64]) {
    %481 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
    %482 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
    %483 = %481.1;
    (%482, %483)
  };
  %484() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 14, 6), float64]) */
}

def @func_6462() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %489 = fn () -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
    %485 = @func_3224() /* ty=(Tensor[(9, 3, 2), bool],) */;
    %486 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
    %487 = %485.0;
    %488 = %486.0;
    (%487, %488)
  };
  %489() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */
}

def @func_5697() -> (Tensor[(10, 11, 12), float32], Tensor[(10, 11, 12), float64], Tensor[(9, 3, 2), bool]) {
  %494 = fn () -> (Tensor[(10, 11, 12), float32], Tensor[(10, 11, 12), float64], Tensor[(9, 3, 2), bool]) {
    %490 = @func_2638() /* ty=(Tensor[(10, 11, 12), float32],) */;
    %491 = %490.0;
    %492 = @func_5441() /* ty=Tensor[(10, 11, 12), float64] */;
    %493 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
    (%491, %492, %493)
  };
  %494() /* ty=(Tensor[(10, 11, 12), float32], Tensor[(10, 11, 12), float64], Tensor[(9, 3, 2), bool]) */
}

def @func_5956(%var_5954: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float64],) {
  @func_5953(%var_5954) /* ty=(Tensor[(9, 10, 10), float64],) */
}

def @func_5580(%var_5578: Tensor[(13, 15, 12), float32]) -> (Tensor[(9, 3, 2), float32], Tensor[(13, 15, 12), float32]) {
  @func_5577(%var_5578) /* ty=(Tensor[(9, 3, 2), float32], Tensor[(13, 15, 12), float32]) */
}

def @func_2604(%var_2564: Tensor[(2, 252), int16], %var_2580: Tensor[(300), float64]) -> (Tensor[(9, 3, 2), float32], Tensor[(2, 252), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(300), float64], Tensor[(504), int16], Tensor[(2, 252), bool], Tensor[(9, 3, 2), bool]) {
  %495 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
  %496 = %495.1;
  %497 = cast(%var_2564, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(2), int32] */;
  %499 = cast(%496, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %501 = @func_1882() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %502 = %501.0;
  %503 = cast(%502, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %504 = cast(%var_2580, dtype="float64") /* ty=Tensor[(300), float64] */;
  %505 = cast(%496, dtype="int16") /* ty=Tensor[(2, 252), int16] */;
  %506 = reshape(%503, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %507 = reshape(%504, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %508 = reshape(%505, newshape=[504]) /* ty=Tensor[(504), int16] */;
  %509 = @func_1981(%506, %507, %508) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64], Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(504), int16]) */;
  %510 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %511 = cast(%var_2564, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %512 = shape_of(%496, dtype="int32") /* ty=Tensor[(2), int32] */;
  %513 = cast(%496, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %515 = greater_equal(%513, %514) /* ty=Tensor[(2, 252), bool] */;
  %516 = cast(%496, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(2), int32] */;
  %518 = cast(%515, dtype="bool") /* ty=Tensor[(2, 252), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %520 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %521 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
  %522 = equal(%499, %500) /* ty=Tensor[(2, 252), bool] */;
  %523 = %509.0;
  %524 = %510.3;
  %525 = not_equal(%518, %519) /* ty=Tensor[(2, 252), bool] */;
  %526 = %520.0;
  (%521, %522, %502, %523, %var_2580, %524, %525, %526)
}

def @func_1673() -> Tensor[(9, 3, 2), bool] {
  %528 = fn () -> Tensor[(9, 3, 2), bool] {
    %527 = @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */;
    %527.0
  };
  %528() /* ty=Tensor[(9, 3, 2), bool] */
}

def @func_781() -> (Tensor[(9, 3, 2), bool],) {
  %530 = fn () -> (Tensor[(9, 3, 2), bool],) {
    %529 = @func_769() /* ty=Tensor[(9, 3, 2), bool] */;
    (%529,)
  };
  %530() /* ty=(Tensor[(9, 3, 2), bool],) */
}

def @func_3563() -> (Tensor[(10, 11, 12), int64],) {
  %533 = fn () -> (Tensor[(10, 11, 12), int64],) {
    %531 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
    %532 = %531.2;
    (%532,)
  };
  %533() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_4471() -> Tensor[(9, 3, 2), float32] {
  @func_2701() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_1189(%var_1169: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(9, 7, 8), int16]) {
  %534 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %535 = cast(%var_1169, dtype="int16") /* ty=Tensor[(504), int16] */;
  %536 = reshape(%535, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %537 = @func_486(%536) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %538 = %537.0;
  %539 = cast(%538, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
  %540 = reshape(%539, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %541 = @func_486(%540) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %542 = %534.0;
  %543 = %541.0;
  (%542, %538, %var_1169, %543)
}

def @func_1206() -> (Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) {
  %550 = fn () -> (Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) {
    %544 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
    %545 = %544.2;
    %546 = cast(%545, dtype="float64") /* ty=Tensor[(9, 3, 2), float64] */;
    %547 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
    %548 = log(%546) /* ty=Tensor[(9, 3, 2), float64] */;
    %549 = %547.0;
    (%548, %549)
  };
  %550() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */
}

def @func_4374(%var_4335: Tensor[(9, 11, 7), float64]) -> Tensor[(9, 11, 7), float64] {
  %551 = cast(%var_4335, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %552 = log10(%551) /* ty=Tensor[(9, 11, 7), float64] */;
  %553 = cast(%var_4335, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%552, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %557 = add(%555, %556) /* ty=Tensor[(9, 11, 7), float64] */;
  %558 = cast(%552, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="int16") /* ty=Tensor[(9, 11, 7), int16] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %562 = multiply(%560, %561) /* ty=Tensor[(9, 11, 7), int16] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %564 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%557, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%565, %566) /* ty=Tensor[(9, 11, 7), float64] */
}

def @func_365() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) {
  @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */
}

def @func_1352() -> Tensor[(9, 3, 2), float32] {
  %567 = @func_988() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), float32], Tensor[(10, 11, 12), int64]) */;
  %567.2
}

def @func_6301(%var_6300: Tensor[(16, 8, 15), float32]) -> (Tensor[(16, 8, 15), float32], Tensor[(10, 11, 12), float64], Tensor[(504), int16], Tensor[(330), float64], Tensor[(9, 3, 2), bool]) {
  %580 = fn (%var_6258: Tensor[(16, 8, 15), float32]) -> (Tensor[(16, 8, 15), float32], Tensor[(10, 11, 12), float64], Tensor[(504), int16], Tensor[(330), float64], Tensor[(9, 3, 2), bool]) {
    %568 = cast(%var_6258, dtype="float32") /* ty=Tensor[(16, 8, 15), float32] */;
    %569 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
    %570 = cast(meta[relay.Constant][19] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %571 = cast(meta[relay.Constant][19] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %572 = reshape(%570, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), float64] */;
    %573 = reshape(%571, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), float64] */;
    %574 = @func_4881(%572, %573) /* ty=(Tensor[(2, 11, 15), float64], Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), uint64], Tensor[(9, 3, 2), float32]) */;
    %575 = @func_3224() /* ty=(Tensor[(9, 3, 2), bool],) */;
    %576 = log(%568) /* ty=Tensor[(16, 8, 15), float32] */;
    %577 = %569.1;
    %578 = %574.1;
    %579 = %575.0;
    (%576, %577, %578, meta[relay.Constant][19] /* ty=Tensor[(330), float64] */, %579)
  };
  %580(%var_6300) /* ty=(Tensor[(16, 8, 15), float32], Tensor[(10, 11, 12), float64], Tensor[(504), int16], Tensor[(330), float64], Tensor[(9, 3, 2), bool]) */
}

def @func_849() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) {
  %581 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %582 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %583 = %582.0;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %585 = atanh(%584) /* ty=Tensor[(10, 11, 12), float64] */;
  %586 = cast(%585, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %587 = reshape(%586, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %588 = @func_436(%587) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
  %589 = %581.3;
  %590 = %588.1;
  (%589, %585, %590)
}

def @func_6614(%var_6612: Tensor[(12, 5, 11), float32]) -> (Tensor[(12, 5, 11), float32], Tensor[(10, 11, 12), int64]) {
  @func_6611(%var_6612) /* ty=(Tensor[(12, 5, 11), float32], Tensor[(10, 11, 12), int64]) */
}

def @func_1704(%var_1677: int32, %var_1678: Tensor[(10, 3, 5), int32]) -> (Tensor[(10, 3, 5), int32],) {
  %591 = cast(%var_1677, dtype="int32") /* ty=int32 */;
  %592 = cast(%var_1678, dtype="int32") /* ty=Tensor[(10, 3, 5), int32] */;
  %593 = bitwise_xor(%591, %592) /* ty=Tensor[(10, 3, 5), int32] */;
  (%593,)
}

def @func_1354() -> Tensor[(9, 3, 2), float32] {
  @func_1352() /* ty=Tensor[(9, 3, 2), float32] */
}

def @func_2103() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */
}

def @func_5503(%var_5502: Tensor[(504), int16]) -> (Tensor[(504), bool], Tensor[(504), int16]) {
  %604 = fn (%var_5465: Tensor[(504), int16]) -> (Tensor[(504), bool], Tensor[(504), int16]) {
    %594 = @func_5309() /* ty=Tensor[(504), int16] */;
    %595 = cast(%var_5465, dtype="bool") /* ty=Tensor[(504), bool] */;
    %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(1), int32] */;
    %597 = cast(%594, dtype="bool") /* ty=Tensor[(504), bool] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?), bool] */;
    %599 = cast(%594, dtype="int16") /* ty=Tensor[(504), int16] */;
    %600 = reshape(%599, newshape=[504]) /* ty=Tensor[(504), int16] */;
    %601 = @func_590(%600) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) */;
    %602 = greater_equal(%597, %598) /* ty=Tensor[(504), bool] */;
    %603 = %601.3;
    (%602, %603)
  };
  %604(%var_5502) /* ty=(Tensor[(504), bool], Tensor[(504), int16]) */
}

def @func_5894() -> Tensor[(10, 11, 12), int64] {
  %606 = fn () -> Tensor[(10, 11, 12), int64] {
    %605 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
    %605.0
  };
  %606() /* ty=Tensor[(10, 11, 12), int64] */
}

def @func_5441() -> Tensor[(10, 11, 12), float64] {
  @func_1842() /* ty=Tensor[(10, 11, 12), float64] */
}

def @func_2969(%var_2936: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64]) {
  %607 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  %608 = cast(%var_2936, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = @func_2101() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) */;
  %613 = less_equal(%610, %611) /* ty=Tensor[(10, 11, 12), bool] */;
  %614 = %612.0;
  (%613, %614)
}

def @func_6903(%var_6901: Tensor[(91, 10), float32]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(91, 10), float32], Tensor[(504), int16]) {
  @func_6900(%var_6901) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(91, 10), float32], Tensor[(504), int16]) */
}

def @func_5187(%var_5185: Tensor[(2, 11, 16), uint16], %var_5186: Tensor[(2, 11, 16), uint16]) -> (Tensor[(2, 11, 16), bool], Tensor[(2, 11, 16), float64], Tensor[(2, 11, 16), int16]) {
  %637 = fn (%var_5153: Tensor[(2, 11, 16), uint16], %var_5154: Tensor[(2, 11, 16), uint16]) -> (Tensor[(2, 11, 16), bool], Tensor[(2, 11, 16), float64], Tensor[(2, 11, 16), int16]) {
    %615 = cast(%var_5154, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
    %616 = shape_of(%var_5153, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(%var_5153, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %619 = greater_equal(%617, %618) /* ty=Tensor[(2, 11, 16), bool] */;
    %620 = cast(%619, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
    %621 = shape_of(%var_5153, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%var_5153, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %624 = less_equal(%622, %623) /* ty=Tensor[(2, 11, 16), bool] */;
    %625 = cast(%624, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
    %626 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%619, dtype="bool") /* ty=Tensor[(2, 11, 16), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = cast(%var_5154, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
    %630 = cast(%var_5153, dtype="int16") /* ty=Tensor[(2, 11, 16), int16] */;
    %631 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%624, dtype="int16") /* ty=Tensor[(2, 11, 16), int16] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %634 = equal(%627, %628) /* ty=Tensor[(2, 11, 16), bool] */;
    %635 = cosh(%629) /* ty=Tensor[(2, 11, 16), float64] */;
    %636 = bitwise_xor(%632, %633) /* ty=Tensor[(2, 11, 16), int16] */;
    (%634, %635, %636)
  };
  %637(%var_5185, %var_5186) /* ty=(Tensor[(2, 11, 16), bool], Tensor[(2, 11, 16), float64], Tensor[(2, 11, 16), int16]) */
}

def @main(%var_7169: Tensor[(300), float64], %var_7184: Tensor[(9, 8, 5), float32]) -> (Tensor[(10, 10, 3), float64], Tensor[(300), float64], Tensor[(10, 11, 12), float64], Tensor[(9, 8, 5), int16]) {
  %638 = cast(%var_7169, dtype="float64") /* ty=Tensor[(300), float64] */;
  %639 = reshape(%638, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float64] */;
  %640 = @func_2139() /* ty=(Tensor[(10, 11, 12), float64],) */;
  %641 = @func_5054() /* ty=Tensor[(9, 8, 5), float32] */;
  %642 = cast(%var_7184, dtype="int16") /* ty=Tensor[(9, 8, 5), int16] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="int16") /* ty=Tensor[(9, 8, 5), int16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %646 = @func_1252(%639) /* ty=Tensor[(10, 10, 3), float64] */;
  %647 = %640.0;
  %648 = bitwise_or(%644, %645) /* ty=Tensor[(9, 8, 5), int16] */;
  (%646, %var_7169, %647, %648)
}

def @func_4150() -> (Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) {
  @func_4148() /* ty=(Tensor[(14, 504), bool], Tensor[(10, 11, 12), int64], Tensor[(504), int16], Tensor[(9, 3, 2), bool]) */
}

def @func_1290() -> (Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) {
  %649 = @func_780() /* ty=(Tensor[(9, 3, 2), bool],) */;
  %650 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 252), int16] */, dtype="int16") /* ty=Tensor[(2, 252), int16] */;
  %651 = reshape(%650, newshape=[1, 504]) /* ty=Tensor[(1, 504), int16] */;
  %652 = @func_665(%651) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(1, 504), int16]) */;
  %653 = %652.2;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(1, 504), float32] */;
  %655 = %649.0;
  %656 = log10(%654) /* ty=Tensor[(1, 504), float32] */;
  (%655, meta[relay.Constant][20] /* ty=Tensor[(2, 252), int16] */, %656)
}

def @func_4300(%var_4299: Tensor[(5, 13, 5), float32]) -> (Tensor[(5, 13, 5), float32], Tensor[(5, 13, 5), bool], Tensor[(9, 3, 2), float32], Tensor[(5, 13, 5), float32]) {
  %674 = fn (%var_4243: Tensor[(5, 13, 5), float32]) -> (Tensor[(5, 13, 5), float32], Tensor[(5, 13, 5), bool], Tensor[(9, 3, 2), float32], Tensor[(5, 13, 5), float32]) {
    %657 = cast(%var_4243, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
    %658 = asinh(%657) /* ty=Tensor[(5, 13, 5), float32] */;
    %659 = cast(%658, dtype="float64") /* ty=Tensor[(5, 13, 5), float64] */;
    %660 = atanh(%659) /* ty=Tensor[(5, 13, 5), float64] */;
    %661 = cast(%var_4243, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
    %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%660, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %665 = cast(%660, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
    %666 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%658, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %669 = cast(%658, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
    %670 = floor_divide(%663, %664) /* ty=Tensor[(5, 13, 5), float32] */;
    %671 = equal(%667, %668) /* ty=Tensor[(5, 13, 5), bool] */;
    %672 = @func_2701() /* ty=Tensor[(9, 3, 2), float32] */;
    %673 = tan(%669) /* ty=Tensor[(5, 13, 5), float32] */;
    (%670, %671, %672, %673)
  };
  %674(%var_4299) /* ty=(Tensor[(5, 13, 5), float32], Tensor[(5, 13, 5), bool], Tensor[(9, 3, 2), float32], Tensor[(5, 13, 5), float32]) */
}

def @func_2753() -> (Tensor[(10, 11, 12), int64],) {
  @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_3211() -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64]) {
  %675 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %676 = %675.2;
  %677 = @func_1401() /* ty=Tensor[(10, 11, 12), float64] */;
  (%676, %677)
}

def @func_4066() -> (Tensor[(10, 11, 12), int64],) {
  @func_4064() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_3674() -> Tensor[(9, 14, 6), float64] {
  @func_3072() /* ty=Tensor[(9, 14, 6), float64] */
}

def @func_3776(%var_3756: Tensor[(10, 11, 12), int64]) -> (Tensor[(10, 11, 12), int16],) {
  %678 = @func_1205() /* ty=(Tensor[(9, 3, 2), float64], Tensor[(10, 11, 12), int64]) */;
  %679 = %678.1;
  %680 = cast(%var_3756, dtype="int16") /* ty=Tensor[(10, 11, 12), int16] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%679, dtype="int16") /* ty=Tensor[(10, 11, 12), int16] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %684 = subtract(%682, %683) /* ty=Tensor[(10, 11, 12), int16] */;
  (%684,)
}

def @func_1292() -> (Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) {
  @func_1290() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(2, 252), int16], Tensor[(1, 504), float32]) */
}

def @func_5953(%var_5938: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float64],) {
  %685 = cast(%var_5938, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %686 = cos(%685) /* ty=Tensor[(9, 10, 10), float32] */;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
  %688 = sin(%687) /* ty=Tensor[(9, 10, 10), float64] */;
  (%688,)
}

def @func_2237(%var_2235: float32, %var_2236: Tensor[(5, 14, 5), float32]) -> (Tensor[(5, 14, 5), float32], Tensor[(10, 11, 12), int64], Tensor[(1, 1320), int64]) {
  @func_2233(%var_2235, %var_2236) /* ty=(Tensor[(5, 14, 5), float32], Tensor[(10, 11, 12), int64], Tensor[(1, 1320), int64]) */
}

def @func_4226(%var_4224: Tensor[(8, 1, 12), float64], %var_4225: Tensor[(1, 1320), int64]) -> (Tensor[(8, 1, 12), float64], Tensor[(8, 1, 12), float64], Tensor[(11, 1320), int16], Tensor[(?, 1320), float32]) {
  %707 = fn (%var_4171: Tensor[(8, 1, 12), float64], %var_4189: Tensor[(1, 1320), int64]) -> (Tensor[(8, 1, 12), float64], Tensor[(8, 1, 12), float64], Tensor[(11, 1320), int16], Tensor[(?, 1320), float32]) {
    %689 = cast(%var_4171, dtype="float64") /* ty=Tensor[(8, 1, 12), float64] */;
    %690 = cast(%var_4171, dtype="float64") /* ty=Tensor[(8, 1, 12), float64] */;
    %691 = cast(%var_4189, dtype="int64") /* ty=Tensor[(1, 1320), int64] */;
    %692 = reshape(%691, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
    %693 = @func_436(%692) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
    %694 = %693.2;
    %695 = cast(%694, dtype="uint32") /* ty=Tensor[(10, 11, 12), uint32] */;
    %696 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(2), int32] */;
    %697 = cast(%var_4189, dtype="uint32") /* ty=Tensor[(1, 1320), uint32] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %699 = bitwise_or(%697, %698) /* ty=Tensor[(?, 1320), uint32] */;
    %700 = cast(%699, dtype="int16") /* ty=Tensor[(?, 1320), int16] */;
    %701 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 1320), uint32] */, dtype="int16") /* ty=Tensor[(11, 1320), int16] */;
    %702 = cast(%699, dtype="float32") /* ty=Tensor[(?, 1320), float32] */;
    %703 = asin(%689) /* ty=Tensor[(8, 1, 12), float64] */;
    %704 = rsqrt(%690) /* ty=Tensor[(8, 1, 12), float64] */;
    %705 = right_shift(%700, %701) /* ty=Tensor[(11, 1320), int16] */;
    %706 = log10(%702) /* ty=Tensor[(?, 1320), float32] */;
    (%703, %704, %705, %706)
  };
  %707(%var_4224, %var_4225) /* ty=(Tensor[(8, 1, 12), float64], Tensor[(8, 1, 12), float64], Tensor[(11, 1320), int16], Tensor[(?, 1320), float32]) */
}

def @func_4903(%var_4901: Tensor[(9, 16, 9), float32]) -> Tensor[(9, 16, 9), float32] {
  @func_4900(%var_4901) /* ty=Tensor[(9, 16, 9), float32] */
}

def @func_1616() -> (Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) {
  @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */
}

def @func_3250() -> (Tensor[(9, 14, 6), float64],) {
  %708 = @func_3072() /* ty=Tensor[(9, 14, 6), float64] */;
  (%708,)
}

def @func_6900(%var_6894: Tensor[(91, 10), float32]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(13, 7, 10), bool], Tensor[(91, 10), float32], Tensor[(504), int16]) {
  %709 = @func_3562() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %710 = @func_3562() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %711 = cast(%var_6894, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %712 = cast(%var_6894, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %713 = cast(%var_6894, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %714 = cast(meta[relay.Constant][22] /* ty=Tensor[(504), int16] */, dtype="int16") /* ty=Tensor[(504), int16] */;
  %715 = reshape(%711, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %716 = reshape(%712, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %717 = reshape(%713, newshape=[13, 7, 10]) /* ty=Tensor[(13, 7, 10), float32] */;
  %718 = reshape(%714, newshape=[12, 42]) /* ty=Tensor[(12, 42), int16] */;
  %719 = @func_733(%715, %716, %717, %718) /* ty=(Tensor[(13, 7, 10), float32], Tensor[(9, 7, 8), int16], Tensor[(12, 42), int16], Tensor[(13, 7, 10), bool], Tensor[(10, 11, 12), int64]) */;
  %720 = %709.0;
  %721 = %710.0;
  %722 = %719.3;
  (%720, %721, %722, %var_6894, meta[relay.Constant][22] /* ty=Tensor[(504), int16] */)
}

def @func_1614() -> (Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) {
  %723 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 6), float32] */;
  %724 = cosh(%723) /* ty=Tensor[(9, 14, 6), float32] */;
  %725 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 14, 6), float32] */, dtype="int16") /* ty=Tensor[(9, 14, 6), int16] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="int16") /* ty=Tensor[(9, 14, 6), int16] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %729 = cast(%724, dtype="float64") /* ty=Tensor[(9, 14, 6), float64] */;
  %730 = bitwise_and(%727, %728) /* ty=Tensor[(9, 14, 6), int16] */;
  %731 = sin(%729) /* ty=Tensor[(9, 14, 6), float64] */;
  (%730, %731)
}

def @func_593(%var_591: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) {
  @func_590(%var_591) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) */
}

def @func_6482() -> (Tensor[(9, 3, 2), float32],) {
  @func_6480() /* ty=(Tensor[(9, 3, 2), float32],) */
}

def @func_875() -> Tensor[(10, 11, 12), int64] {
  %732 = @func_849() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float64], Tensor[(10, 11, 12), int64]) */;
  %732.2
}

def @func_3072() -> Tensor[(9, 14, 6), float64] {
  %733 = @func_1614() /* ty=(Tensor[(9, 14, 6), int16], Tensor[(9, 14, 6), float64]) */;
  %733.1
}

def @func_3449(%var_3448: Tensor[(16, 13, 2), float32]) -> Tensor[(16, 13, 2), float32] {
  %735 = fn (%var_3443: Tensor[(16, 13, 2), float32]) -> Tensor[(16, 13, 2), float32] {
    %734 = cast(%var_3443, dtype="float32") /* ty=Tensor[(16, 13, 2), float32] */;
    atanh(%734) /* ty=Tensor[(16, 13, 2), float32] */
  };
  %735(%var_3448) /* ty=Tensor[(16, 13, 2), float32] */
}

def @func_6130(%var_6129: Tensor[(1320), int64]) -> (Tensor[(10, 11, 12), int64], Tensor[(1320), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), uint64]) {
  %751 = fn (%var_6015: Tensor[(1320), int64]) -> (Tensor[(10, 11, 12), int64], Tensor[(1320), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), uint64]) {
    %736 = cast(%var_6015, dtype="int64") /* ty=Tensor[(1320), int64] */;
    %737 = reshape(%736, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
    %738 = @func_2969(%737) /* ty=(Tensor[(10, 11, 12), bool], Tensor[(10, 11, 12), int64]) */;
    %739 = @func_3889() /* ty=(Tensor[(504), int16], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool]) */;
    %740 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
    %741 = @func_1352() /* ty=Tensor[(9, 3, 2), float32] */;
    %742 = cast(%741, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
    %743 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%740, dtype="uint64") /* ty=Tensor[(9, 3, 2), uint64] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %746 = %738.1;
    %747 = @func_2374() /* ty=Tensor[(10, 11, 12), int64] */;
    %748 = @func_2374() /* ty=Tensor[(10, 11, 12), int64] */;
    %749 = %739.1;
    %750 = subtract(%744, %745) /* ty=Tensor[(9, 3, 2), uint64] */;
    (%746, %var_6015, %747, %748, %749, %750)
  };
  %751(%var_6129) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(1320), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), uint64]) */
}

def @func_377() -> Tensor[(10, 11, 12), int64] {
  @func_375() /* ty=Tensor[(10, 11, 12), int64] */
}

def @func_1708(%var_1706: int32, %var_1707: Tensor[(10, 3, 5), int32]) -> (Tensor[(10, 3, 5), int32],) {
  @func_1704(%var_1706, %var_1707) /* ty=(Tensor[(10, 3, 5), int32],) */
}

def @func_590(%var_561: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), uint32], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(10, 11, 12), bool], Tensor[(9, 7, 8), int16]) {
  %752 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %753 = @func_285() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(10, 11, 12), float32] */;
  %756 = rsqrt(%755) /* ty=Tensor[(10, 11, 12), float32] */;
  %757 = cast(%754, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %758 = reshape(%757, newshape=[10, 11, 12]) /* ty=Tensor[(10, 11, 12), int64] */;
  %759 = @func_436(%758) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) */;
  %760 = %759.2;
  %761 = cast(%760, dtype="uint32") /* ty=Tensor[(10, 11, 12), uint32] */;
  %762 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%756, dtype="uint32") /* ty=Tensor[(10, 11, 12), uint32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %765 = cast(%var_561, dtype="int16") /* ty=Tensor[(504), int16] */;
  %766 = reshape(%765, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %767 = @func_486(%766) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %768 = cast(%756, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %769 = sinh(%768) /* ty=Tensor[(10, 11, 12), float64] */;
  %770 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %774 = equal(%772, %773) /* ty=Tensor[(10, 11, 12), bool] */;
  %775 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %779 = %767.0;
  %780 = cast(%779, dtype="int16") /* ty=Tensor[(9, 7, 8), int16] */;
  %781 = reshape(%780, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int16] */;
  %782 = @func_486(%781) /* ty=(Tensor[(9, 7, 8), int16],) */;
  %783 = %752.0;
  %784 = bitwise_xor(%763, %764) /* ty=Tensor[(10, 11, 12), uint32] */;
  %785 = less(%777, %778) /* ty=Tensor[(10, 11, 12), bool] */;
  %786 = %782.0;
  (%783, %784, %779, %var_561, %785, %786)
}

def @func_6942() -> (Tensor[(10, 11, 12), int64], Tensor[(5, 13, 5), bool], Tensor[(325), float32]) {
  %787 = @func_4550() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 14, 6), float64]) */;
  %788 = cast(meta[relay.Constant][25] /* ty=Tensor[(325), float32] */, dtype="float32") /* ty=Tensor[(325), float32] */;
  %789 = reshape(%788, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
  %790 = @func_4298(%789) /* ty=(Tensor[(5, 13, 5), float32], Tensor[(5, 13, 5), bool], Tensor[(9, 3, 2), float32], Tensor[(5, 13, 5), float32]) */;
  %791 = %787.0;
  %792 = %790.1;
  (%791, %792, meta[relay.Constant][25] /* ty=Tensor[(325), float32] */)
}

def @func_3960() -> (Tensor[(10, 11, 12), int64], Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), float32]) {
  %793 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %794 = @func_2751() /* ty=(Tensor[(10, 11, 12), int64],) */;
  %795 = @func_2638() /* ty=(Tensor[(10, 11, 12), float32],) */;
  %796 = %793.0;
  %797 = @func_1466() /* ty=Tensor[(9, 3, 2), bool] */;
  %798 = %794.0;
  %799 = %795.0;
  (%796, %797, %798, %799)
}

def @func_1882() -> (Tensor[(10, 11, 12), int64],) {
  %800 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %801 = %800.3;
  (%801,)
}

def @func_2861() -> (Tensor[(10, 11, 12), int64],) {
  %804 = fn () -> (Tensor[(10, 11, 12), int64],) {
    %802 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
    %803 = %802.1;
    (%803,)
  };
  %804() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_3676() -> Tensor[(9, 14, 6), float64] {
  @func_3674() /* ty=Tensor[(9, 14, 6), float64] */
}

def @func_5193() -> (Tensor[(10, 11, 12), bool],) {
  %805 = @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */;
  %806 = %805.2;
  (%806,)
}

def @func_1192(%var_1190: Tensor[(504), int16]) -> (Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(9, 7, 8), int16]) {
  @func_1189(%var_1190) /* ty=(Tensor[(10, 11, 12), int64], Tensor[(9, 7, 8), int16], Tensor[(504), int16], Tensor[(9, 7, 8), int16]) */
}

def @func_1727() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64]) {
  %807 = @func_363() /* ty=(Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), int64]) */;
  %808 = @func_769() /* ty=Tensor[(9, 3, 2), bool] */;
  %809 = %807.3;
  (%808, %809)
}

def @func_4164() -> (Tensor[(10, 11, 12), int64],) {
  %811 = fn () -> (Tensor[(10, 11, 12), int64],) {
    %810 = @func_375() /* ty=Tensor[(10, 11, 12), int64] */;
    (%810,)
  };
  %811() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_6533() -> Tensor[(9, 3, 2), bool] {
  @func_6531() /* ty=Tensor[(9, 3, 2), bool] */
}

def @func_4377(%var_4375: Tensor[(9, 11, 7), float64]) -> Tensor[(9, 11, 7), float64] {
  @func_4374(%var_4375) /* ty=Tensor[(9, 11, 7), float64] */
}

def @func_3586(%var_3576: Tensor[(8, 6, 16), int64], %var_3577: Tensor[(8, 6, 16), int64]) -> (Tensor[(8, 6, 16), bool], Tensor[(10, 11, 12), int64]) {
  %812 = cast(%var_3577, dtype="bool") /* ty=Tensor[(8, 6, 16), bool] */;
  %813 = shape_of(%var_3576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%var_3576, dtype="bool") /* ty=Tensor[(8, 6, 16), bool] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %816 = greater_equal(%814, %815) /* ty=Tensor[(8, 6, 16), bool] */;
  %817 = @func_1240() /* ty=Tensor[(10, 11, 12), int64] */;
  (%816, %817)
}

def @func_3252() -> (Tensor[(9, 14, 6), float64],) {
  @func_3250() /* ty=(Tensor[(9, 14, 6), float64],) */
}

def @func_1795() -> (Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) {
  @func_1793() /* ty=(Tensor[(9, 3, 2), bool], Tensor[(10, 11, 12), int64], Tensor[(10, 11, 12), bool], Tensor[(504), int16], Tensor[(2, 252), int16]) */
}

def @func_286() -> (Tensor[(10, 11, 12), int64],) {
  %823 = fn () -> (Tensor[(10, 11, 12), int64],) {
    %818 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %819 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(10, 11, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %822 = left_shift(%820, %821) /* ty=Tensor[(10, 11, 12), int64] */;
    (%822,)
  };
  %823() /* ty=(Tensor[(10, 11, 12), int64],) */
}

def @func_5054() -> Tensor[(9, 8, 5), float32] {
  %824 = @func_3344() /* ty=(Tensor[(9, 8, 5), bool],) */;
  %825 = %824.0;
  %826 = cast(%825, dtype="float32") /* ty=Tensor[(9, 8, 5), float32] */;
  log(%826) /* ty=Tensor[(9, 8, 5), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen320/build/output.py", line 2420, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:06:46] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

