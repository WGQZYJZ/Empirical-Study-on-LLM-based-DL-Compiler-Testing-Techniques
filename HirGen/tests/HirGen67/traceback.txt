==========mod==========
#[version = "0.0.5"]
def @func_5165() -> Tensor[(1920), float32] {
  %0 = @func_4100() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) */;
  %0.1
}

def @func_2969(%var_2964: Tensor[(8, 4, 11), int64]) -> Tensor[(8, 4, 11), int64] {
  %1 = cast(%var_2964, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %2 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%3, %4) /* ty=Tensor[(8, 4, 11), int64] */
}

def @func_5605() -> (Tensor[(4, 6, 14), float32],) {
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 14), float32] */;
  %6 = acos(%5) /* ty=Tensor[(4, 6, 14), float32] */;
  (%6,)
}

def @func_3304() -> Tensor[(14, 3, 6), float32] {
  @func_3055() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_3846() -> (Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(80, 1), float64], float32, Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64]) {
  %7 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %8 = cast(meta[relay.Constant][2] /* ty=Tensor[(80, 1), float64] */, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %9 = cast(-0.243979f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %10 = reshape(%8, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %11 = reshape(%9, newshape=[]) /* ty=float32 */;
  %12 = @func_1573(%10, %11) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %13 = %7.0;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %15 = reshape(%14, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %16 = @func_2066(%15) /* ty=(Tensor[(14, 3, 6), float32],) */;
  %17 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %18 = @func_3228() /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) */;
  %19 = %12.3;
  %20 = %16.0;
  %21 = %17.0;
  %22 = %18.0;
  (%13, %19, meta[relay.Constant][2] /* ty=Tensor[(80, 1), float64] */, -0.243979f /* ty=float32 */, %20, %21, %22)
}

def @func_2468() -> Tensor[(14, 3, 6), float64] {
  %23 = @func_2223() /* ty=Tensor[(14, 3, 6), float32] */;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  acos(%24) /* ty=Tensor[(14, 3, 6), float64] */
}

def @func_4470(%var_4410: Tensor[(450), uint64], %var_4411: float32, %var_4440: Tensor[(112), float32]) -> (Tensor[(14, 3, 6), float64], Tensor[(3360), float32], float32, Tensor[(14, 3, 6), uint64], Tensor[(4, 28), float32], Tensor[(112), float32], Tensor[(450), float32], Tensor[(14, 3, 6), float64], Tensor[(1920), int64]) {
  %25 = @func_3088() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) */;
  %26 = cast(%var_4410, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %27 = cast(%var_4411, dtype="float32") /* ty=float32 */;
  %28 = reshape(%26, newshape=[10, 45]) /* ty=Tensor[(10, 45), uint64] */;
  %29 = reshape(%27, newshape=[]) /* ty=float32 */;
  %30 = @func_2689(%28, %29) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) */;
  %31 = @func_4266() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %32 = cast(%var_4411, dtype="float32") /* ty=float32 */;
  %33 = cast(%var_4440, dtype="float32") /* ty=Tensor[(112), float32] */;
  %34 = reshape(%32, newshape=[]) /* ty=float32 */;
  %35 = reshape(%33, newshape=[4, 28]) /* ty=Tensor[(4, 28), float32] */;
  %36 = @func_4012(%34, %35) /* ty=(float32, Tensor[(1430), bool], Tensor[(4, 28), float32], Tensor[(675), float32], Tensor[(10, 13, 11), bool], Tensor[(14, 3, 6), int8]) */;
  %37 = cast(%var_4410, dtype="float64") /* ty=Tensor[(450), float64] */;
  %38 = sinh(%37) /* ty=Tensor[(450), float64] */;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(450), float32] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %41 = sin(%39) /* ty=Tensor[(450), float32] */;
  %42 = cast(%41, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %43 = reshape(%40, newshape=[2, 960]) /* ty=Tensor[(2, 960), int64] */;
  %44 = reshape(%42, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %45 = @func_3344(%43, %44) /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 960), int64], float32, Tensor[(1680, 2), float32], Tensor[(450), uint64], Tensor[(14, 3, 6), float32]) */;
  %46 = %25.1;
  %47 = %30.4;
  %48 = %31.0;
  %49 = %36.2;
  %50 = %45.0;
  (%46, %47, %var_4411, %48, %49, %var_4440, %41, %50, meta[relay.Constant][3] /* ty=Tensor[(1920), int64] */)
}

def @func_5571() -> Tensor[(15, 13, 5), float32] {
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
  sigmoid(%51) /* ty=Tensor[(15, 13, 5), float32] */
}

def @func_1135() -> (Tensor[(14, 3, 6), float32],) {
  %52 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  (%52,)
}

def @func_4227() -> (Tensor[(11, 16, 5), float32], Tensor[(14, 3, 6), float32]) {
  %53 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
  %54 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %57 = mod(%55, %56) /* ty=Tensor[(11, 16, 5), float32] */;
  %58 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
  (%57, %58)
}

def @func_5896(%var_5858: Tensor[(56), uint32]) -> (Tensor[(10, 13, 11), bool], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64], Tensor[(7, 1, 8), float64]) {
  %59 = @func_2127() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) */;
  %60 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %61 = @func_3769() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) */;
  %62 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %63 = cast(%var_5858, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %64 = reshape(%62, newshape=[]) /* ty=uint32 */;
  %65 = reshape(%63, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint32] */;
  %66 = @func_4718(%64, %65) /* ty=(Tensor[(7, 1, 8), uint32],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(7, 1, 8), float32] */;
  %69 = sinh(%68) /* ty=Tensor[(7, 1, 8), float32] */;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(7, 1, 8), float64] */;
  %71 = %59.1;
  %72 = %60.2;
  %73 = %61.1;
  %74 = acosh(%70) /* ty=Tensor[(7, 1, 8), float64] */;
  (%71, meta[relay.Constant][7] /* ty=uint32 */, %var_5858, %72, %73, %74)
}

def @func_3961(%var_3933: Tensor[(15, 3, 2), int64], %var_3934: Tensor[(15, 3, 2), int64], %var_3953: Tensor[(15, 3, 2), int64]) -> (Tensor[(15, 3, 2), bool], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(15, 3, 2), bool]) {
  %75 = cast(%var_3934, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %76 = shape_of(%var_3933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_3933, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = cast(%var_3953, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %80 = shape_of(%var_3933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%var_3933, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = less(%77, %78) /* ty=Tensor[(15, 3, 2), bool] */;
  %84 = @func_3304() /* ty=Tensor[(14, 3, 6), float32] */;
  %85 = @func_2092() /* ty=Tensor[(14, 3, 6), float32] */;
  %86 = greater_equal(%81, %82) /* ty=Tensor[(15, 3, 2), bool] */;
  (%83, %84, %85, %86)
}

def @func_2092() -> Tensor[(14, 3, 6), float32] {
  %87 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %87.0
}

def @func_3769() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) {
  %88 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %89 = @func_3228() /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) */;
  %90 = %88.0;
  %91 = %89.0;
  (%90, %91)
}

def @func_4366() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %92 = @func_4227() /* ty=(Tensor[(11, 16, 5), float32], Tensor[(14, 3, 6), float32]) */;
  %93 = %92.1;
  %94 = @func_4253() /* ty=Tensor[(14, 3, 6), float32] */;
  %95 = @func_2846() /* ty=Tensor[(14, 3, 6), float64] */;
  (%93, %94, %95)
}

def @func_5120() -> (Tensor[(14, 3, 6), float64], Tensor[(9, 11), bool], Tensor[(11, 9), bool]) {
  %96 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %97 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 9), bool] */, dtype="bool") /* ty=Tensor[(11, 9), bool] */;
  %98 = reshape(%97, newshape=[9, 11]) /* ty=Tensor[(9, 11), bool] */;
  %99 = %96.0;
  %100 = @func_3569(%98) /* ty=Tensor[(9, 11), bool] */;
  (%99, %100, meta[relay.Constant][8] /* ty=Tensor[(11, 9), bool] */)
}

def @func_1538() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %101 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %102 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %103 = %101.0;
  %104 = %102.0;
  (%103, %104)
}

def @func_139(%var_120: float32, %var_121: Tensor[(16, 15, 14), float32]) -> Tensor[(16, 15, 14), float32] {
  %105 = cast(%var_120, dtype="float32") /* ty=float32 */;
  %106 = cast(%var_121, dtype="float32") /* ty=Tensor[(16, 15, 14), float32] */;
  divide(%105, %106) /* ty=Tensor[(16, 15, 14), float32] */
}

def @func_4673(%var_4643: Tensor[(112), float32], %var_4644: Tensor[(675), float32]) -> (Tensor[(14, 3, 6), uint64], Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64], Tensor[(12, 15, 6), float32], Tensor[(1080), float32], float32) {
  %107 = @func_4266() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %108 = cast(%var_4643, dtype="float32") /* ty=Tensor[(112), float32] */;
  %109 = cast(%var_4644, dtype="float32") /* ty=Tensor[(675), float32] */;
  %110 = reshape(%108, newshape=[14, 8]) /* ty=Tensor[(14, 8), float32] */;
  %111 = reshape(%109, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %112 = @func_713(%110, %111) /* ty=(Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) */;
  %113 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), uint64] */, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %114 = reshape(%113, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), uint64] */;
  %115 = @func_1423(%114) /* ty=(Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) */;
  %116 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %117 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %118 = cast(0.269795f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), uint64] */, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %120 = reshape(%116, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %121 = reshape(%117, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %122 = reshape(%118, newshape=[]) /* ty=float32 */;
  %123 = reshape(%119, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %124 = @func_2790(%120, %121, %122, %123) /* ty=(Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) */;
  %125 = %107.0;
  %126 = %112.2;
  %127 = %115.0;
  %128 = %124.0;
  (%125, %126, %var_4643, %var_4644, %127, meta[relay.Constant][9] /* ty=Tensor[(450), uint64] */, %128, meta[relay.Constant][10] /* ty=Tensor[(1080), float32] */, 0.269795f /* ty=float32 */)
}

def @func_5562() -> (Tensor[(5, 3, 6), bool], Tensor[(1920), float32], Tensor[(5, 3, 6), float32]) {
  %129 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 1, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 1, 6), bool] */;
  %130 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 3, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 3, 6), bool] */;
  %131 = @func_4100() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) */;
  %132 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 3, 6), bool] */, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %133 = logical_or(%129, %130) /* ty=Tensor[(5, 3, 6), bool] */;
  %134 = %131.1;
  %135 = sqrt(%132) /* ty=Tensor[(5, 3, 6), float32] */;
  (%133, %134, %135)
}

def @func_2956(%var_2918: Tensor[(16, 14, 1), float32]) -> (Tensor[(112), float32], Tensor[(225, 3), float32], Tensor[(572, 40), bool], Tensor[(16, 14, ?), bool], Tensor[(16, 14, 1), float32]) {
  %136 = cast(meta[relay.Constant][13] /* ty=Tensor[(225, 3), float32] */, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %137 = cast(meta[relay.Constant][13] /* ty=Tensor[(225, 3), float32] */, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %138 = cast(meta[relay.Constant][14] /* ty=Tensor[(572, 40), bool] */, dtype="bool") /* ty=Tensor[(572, 40), bool] */;
  %139 = reshape(%136, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %140 = reshape(%137, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %141 = reshape(%138, newshape=[16, 1430]) /* ty=Tensor[(16, 1430), bool] */;
  %142 = @func_2318(%139, %140, %141) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) */;
  %143 = cast(%var_2918, dtype="float32") /* ty=Tensor[(16, 14, 1), float32] */;
  %144 = atan(%143) /* ty=Tensor[(16, 14, 1), float32] */;
  %145 = cast(%144, dtype="bool") /* ty=Tensor[(16, 14, 1), bool] */;
  %146 = shape_of(%var_2918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%var_2918, dtype="bool") /* ty=Tensor[(16, 14, 1), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = cast(%144, dtype="float32") /* ty=Tensor[(16, 14, 1), float32] */;
  %150 = exp(%149) /* ty=Tensor[(16, 14, 1), float32] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(16, 14, 1), float32] */;
  %152 = %142.3;
  %153 = less(%147, %148) /* ty=Tensor[(16, 14, ?), bool] */;
  %154 = atanh(%151) /* ty=Tensor[(16, 14, 1), float32] */;
  (%152, meta[relay.Constant][13] /* ty=Tensor[(225, 3), float32] */, meta[relay.Constant][14] /* ty=Tensor[(572, 40), bool] */, %153, %154)
}

def @func_4968() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
  %155 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %156 = @func_4034() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %157 = %155.0;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %159 = reshape(%158, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %160 = @func_2066(%159) /* ty=(Tensor[(14, 3, 6), float32],) */;
  %161 = %156.0;
  %162 = %160.0;
  (%157, %161, %162)
}

def @func_247(%var_226: Tensor[(4, 6, 14), float32], %var_237: Tensor[(420, 8), float32]) -> (Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) {
  %163 = cast(%var_226, dtype="float32") /* ty=Tensor[(4, 6, 14), float32] */;
  %164 = cast(-5.18955f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %165 = cast(%var_237, dtype="float32") /* ty=Tensor[(420, 8), float32] */;
  %166 = reshape(%164, newshape=[]) /* ty=float32 */;
  %167 = reshape(%165, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %168 = sinh(%163) /* ty=Tensor[(4, 6, 14), float32] */;
  %169 = @func_139(%166, %167) /* ty=Tensor[(16, 15, 14), float32] */;
  (%168, %169, -5.18955f /* ty=float32 */, %var_237)
}

def @func_1866(%var_1848: Tensor[(6, 10, 5), uint32], %var_1849: Tensor[(6, 10, 5), uint32]) -> (Tensor[(6, 10, 5), int8], Tensor[(6, 10, 5), float64]) {
  %170 = cast(%var_1849, dtype="uint32") /* ty=Tensor[(6, 10, 5), uint32] */;
  %171 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_1848, dtype="uint32") /* ty=Tensor[(6, 10, 5), uint32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %174 = bitwise_xor(%172, %173) /* ty=Tensor[(6, 10, 5), uint32] */;
  %175 = cast(%174, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
  %176 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_1848, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %179 = cast(%var_1849, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %180 = acos(%179) /* ty=Tensor[(6, 10, 5), float64] */;
  %181 = cast(%180, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %182 = bitwise_or(%177, %178) /* ty=Tensor[(6, 10, 5), int8] */;
  %183 = acosh(%181) /* ty=Tensor[(6, 10, 5), float64] */;
  (%182, %183)
}

def @func_2587() -> Tensor[(14, 3, 6), uint64] {
  %184 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %185 = %184.0;
  %186 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 3, 6), float64] */, dtype="uint64") /* ty=Tensor[(14, 3, 6), uint64] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="uint64") /* ty=Tensor[(14, 3, 6), uint64] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%188, %189) /* ty=Tensor[(14, 3, 6), uint64] */
}

def @func_4100() -> (Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) {
  %190 = @func_3088() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) */;
  %191 = @func_3228() /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) */;
  %192 = %190.2;
  %193 = %191.1;
  (%192, %193)
}

def @func_3914(%var_3856: Tensor[(13, 7, 5), uint8], %var_3884: Tensor[(1, 1430), bool], %var_3886: Tensor[(675), float32]) -> (Tensor[(13, 7, 5), bool], Tensor[(14, 3, 6), float64], Tensor[(13, 7, 5), bool], float32, Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(13, 7, 5), int64], Tensor[(13, 7, 5), float32]) {
  %194 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %195 = cast(%var_3856, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %196 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %197 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %198 = cast(%var_3856, dtype="uint8") /* ty=Tensor[(13, 7, 5), uint8] */;
  %199 = bitwise_or(%197, %198) /* ty=Tensor[(13, 7, 5), uint8] */;
  %200 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %201 = cast(%199, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %202 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
  %203 = cast(%var_3884, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %204 = cast(meta[relay.Constant][17] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %205 = cast(%var_3886, dtype="float32") /* ty=Tensor[(675), float32] */;
  %206 = reshape(%202, newshape=[]) /* ty=float32 */;
  %207 = reshape(%203, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %208 = reshape(%204, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %209 = reshape(%205, newshape=[675, 1]) /* ty=Tensor[(675, 1), float32] */;
  %210 = @func_1209(%206, %207, %208, %209) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) */;
  %211 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 7, 5), uint8] */, dtype="int64") /* ty=Tensor[(13, 7, 5), int64] */;
  %212 = shape_of(%var_3856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_3856, dtype="int64") /* ty=Tensor[(13, 7, 5), int64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %215 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 7, 5), uint8] */, dtype="float32") /* ty=Tensor[(13, 7, 5), float32] */;
  %216 = equal(%194, %195) /* ty=Tensor[(13, 7, 5), bool] */;
  %217 = %196.0;
  %218 = not_equal(%200, %201) /* ty=Tensor[(13, 7, 5), bool] */;
  %219 = %210.2;
  %220 = right_shift(%213, %214) /* ty=Tensor[(13, 7, 5), int64] */;
  %221 = asin(%215) /* ty=Tensor[(13, 7, 5), float32] */;
  (%216, %217, %218, %219, %var_3884, meta[relay.Constant][17] /* ty=Tensor[(112), float32] */, %var_3886, %220, %221)
}

def @func_2216() -> (Tensor[(14, 3, 6), float64],) {
  %222 = @func_1679() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %223 = %222.0;
  (%223,)
}

def @func_4863(%var_4833: float64, %var_4834: Tensor[(14, 3, 14), float64]) -> Tensor[(14, 3, 14), uint8] {
  %224 = cast(%var_4833, dtype="float64") /* ty=float64 */;
  %225 = cast(%var_4834, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %226 = divide(%224, %225) /* ty=Tensor[(14, 3, 14), float64] */;
  %227 = cast(%var_4833, dtype="uint8") /* ty=uint8 */;
  %228 = cast(%226, dtype="uint8") /* ty=Tensor[(14, 3, 14), uint8] */;
  add(%227, %228) /* ty=Tensor[(14, 3, 14), uint8] */
}

def @func_5713() -> Tensor[(14, 3, 6), float32] {
  %229 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %229.0
}

def @func_4935(%var_4930: int8, %var_4931: Tensor[(15, 12, 16), int8]) -> Tensor[(15, 12, 16), int8] {
  %230 = cast(%var_4930, dtype="int8") /* ty=int8 */;
  %231 = cast(%var_4931, dtype="int8") /* ty=Tensor[(15, 12, 16), int8] */;
  right_shift(%230, %231) /* ty=Tensor[(15, 12, 16), int8] */
}

def @func_1423(%var_1400: Tensor[(5, 6, 15), uint64]) -> (Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) {
  %232 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="uint64") /* ty=Tensor[(5, 6, 15), uint64] */;
  %233 = shape_of(%var_1400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_1400, dtype="uint64") /* ty=Tensor[(5, 6, 15), uint64] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %236 = cast(%var_1400, dtype="bool") /* ty=Tensor[(5, 6, 15), bool] */;
  %237 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="bool") /* ty=Tensor[(5, 6, 15), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %241 = bitwise_or(%234, %235) /* ty=Tensor[(5, 6, 15), uint64] */;
  %242 = not_equal(%238, %239) /* ty=Tensor[(5, 6, 15), bool] */;
  %243 = sin(%240) /* ty=Tensor[(5, 6, 15), float32] */;
  (%241, %242, %243)
}

def @func_3262() -> (Tensor[(14, 3, 6), float32],) {
  %244 = @func_3001() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */;
  %245 = %244.0;
  (%245,)
}

def @func_1748(%var_1727: Tensor[(10, 12, 16), int64], %var_1728: Tensor[(10, 12, 16), int64]) -> (Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) {
  %246 = cast(%var_1727, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  %247 = cast(%var_1728, dtype="float32") /* ty=Tensor[(10, 12, 16), float32] */;
  %248 = tan(%247) /* ty=Tensor[(10, 12, 16), float32] */;
  %249 = cast(%var_1728, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %250 = shape_of(%var_1727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%var_1727, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %253 = bitwise_xor(%251, %252) /* ty=Tensor[(10, 12, 16), int64] */;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  %255 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%248, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %258 = acos(%246) /* ty=Tensor[(10, 12, 16), float64] */;
  %259 = mod(%256, %257) /* ty=Tensor[(10, 12, 16), float64] */;
  (%258, %259)
}

def @func_5823() -> Tensor[(1920), float64] {
  %260 = @func_4100() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) */;
  %261 = %260.1;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(1920), float64] */;
  sin(%262) /* ty=Tensor[(1920), float64] */
}

def @func_3055() -> Tensor[(14, 3, 6), float32] {
  %263 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %263.0
}

def @func_3344(%var_3325: Tensor[(2, 960), int64], %var_3332: Tensor[(450), uint64]) -> (Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 960), int64], float32, Tensor[(1680, 2), float32], Tensor[(450), uint64], Tensor[(14, 3, 6), float32]) {
  %264 = cast(%var_3325, dtype="int64") /* ty=Tensor[(2, 960), int64] */;
  %265 = cast(%var_3325, dtype="int64") /* ty=Tensor[(2, 960), int64] */;
  %266 = reshape(%264, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %267 = reshape(%265, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %268 = @func_1748(%266, %267) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
  %269 = cast(meta[relay.Constant][20] /* ty=Tensor[(1680, 2), float32] */, dtype="float32") /* ty=Tensor[(1680, 2), float32] */;
  %270 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %271 = reshape(%269, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %272 = reshape(%270, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %273 = @func_1923(%271, %272) /* ty=(Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) */;
  %274 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %275 = @func_2846() /* ty=Tensor[(14, 3, 6), float64] */;
  %276 = %268.0;
  %277 = %273.1;
  %278 = %274.0;
  (%275, %276, %var_3325, %277, meta[relay.Constant][20] /* ty=Tensor[(1680, 2), float32] */, %var_3332, %278)
}

def @func_2405(%var_2400: Tensor[(1920), int64]) -> (Tensor[(14, 3, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) {
  %279 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %280 = %279.0;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %282 = cast(%var_2400, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %283 = cast(%var_2400, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %284 = reshape(%282, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %285 = reshape(%283, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %286 = @func_1748(%284, %285) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
  %287 = log(%281) /* ty=Tensor[(14, 3, 6), float32] */;
  %288 = %286.1;
  (%287, %288, %var_2400)
}

def @func_713(%var_677: Tensor[(14, 8), float32], %var_693: Tensor[(675), float32]) -> (Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) {
  %289 = cast(%var_677, dtype="float32") /* ty=Tensor[(14, 8), float32] */;
  %290 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 1430), bool] */, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %291 = cast(%var_693, dtype="float32") /* ty=Tensor[(675), float32] */;
  %292 = reshape(%290, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %293 = reshape(%291, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
  %294 = @func_651(%292, %293) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) */;
  %295 = sin(%289) /* ty=Tensor[(14, 8), float32] */;
  %296 = %294.0;
  (%295, %296, meta[relay.Constant][21] /* ty=Tensor[(1, 1430), bool] */, %var_693)
}

def @func_5737() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %297 = @func_3174() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) */;
  %298 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %299 = %298.1;
  %300 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %302 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%299, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %305 = %297.1;
  %306 = floor_mod(%303, %304) /* ty=Tensor[(14, 3, 6), float64] */;
  (%305, %306)
}

def @func_2066(%var_2052: Tensor[(14, 3, 6), float32]) -> (Tensor[(14, 3, 6), float32],) {
  %307 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
  %308 = cast(%var_2052, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %312 = power(%310, %311) /* ty=Tensor[(14, 3, 6), float32] */;
  (%312,)
}

def @func_1679() -> (Tensor[(14, 3, 6), float64],) {
  %313 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %314 = %313.0;
  (%314,)
}

def @func_3001() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
  %315 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %316 = %315.0;
  %317 = @func_2092() /* ty=Tensor[(14, 3, 6), float32] */;
  (%316, %317)
}

def @func_2318(%var_2258: Tensor[(675), float32], %var_2302: Tensor[(675), float32], %var_2306: Tensor[(16, 1430), bool]) -> (Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) {
  %318 = cast(meta[relay.Constant][22] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %319 = cast(%var_2258, dtype="float32") /* ty=Tensor[(675), float32] */;
  %320 = reshape(%318, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %321 = reshape(%319, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
  %322 = @func_651(%320, %321) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) */;
  %323 = cast(%var_2302, dtype="bool") /* ty=Tensor[(675), bool] */;
  %324 = shape_of(%var_2258, dtype="int32") /* ty=Tensor[(1), int32] */;
  %325 = cast(%var_2258, dtype="bool") /* ty=Tensor[(675), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?), bool] */;
  %327 = cast(meta[relay.Constant][23] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %328 = %322.2;
  %329 = cast(%328, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %330 = reshape(%327, newshape=[14, 8]) /* ty=Tensor[(14, 8), float32] */;
  %331 = reshape(%329, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %332 = @func_713(%330, %331) /* ty=(Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) */;
  %333 = %332.2;
  %334 = cast(%333, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %335 = cast(%var_2306, dtype="bool") /* ty=Tensor[(16, 1430), bool] */;
  %336 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %337 = greater(%325, %326) /* ty=Tensor[(675), bool] */;
  %338 = logical_and(%334, %335) /* ty=Tensor[(16, 1430), bool] */;
  (%336, %328, meta[relay.Constant][22] /* ty=Tensor[(1430), bool] */, meta[relay.Constant][23] /* ty=Tensor[(112), float32] */, %337, %338)
}

def @func_1078() -> (Tensor[(14, 3, 6), float32],) {
  %339 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %340 = atan(%339) /* ty=Tensor[(14, 3, 6), float64] */;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %342 = log10(%341) /* ty=Tensor[(14, 3, 6), float32] */;
  (%342,)
}

def @func_3088() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) {
  %343 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %344 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %345 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %346 = %343.1;
  %347 = %344.0;
  (%345, %346, %347)
}

def @func_4156(%var_4150: Tensor[(2, 15, 5), float64]) -> Tensor[(2, 15, 5), float64] {
  %348 = cast(%var_4150, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  erf(%348) /* ty=Tensor[(2, 15, 5), float64] */
}

def @func_1341() -> (Tensor[(14, 3, 6), float32],) {
  %349 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  (%349,)
}

def @func_4012(%var_3982: float32, %var_3984: Tensor[(4, 28), float32]) -> (float32, Tensor[(1430), bool], Tensor[(4, 28), float32], Tensor[(675), float32], Tensor[(10, 13, 11), bool], Tensor[(14, 3, 6), int8]) {
  %350 = cast(%var_3982, dtype="float32") /* ty=float32 */;
  %351 = cast(meta[relay.Constant][25] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %352 = cast(%var_3984, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %353 = cast(meta[relay.Constant][26] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %354 = reshape(%350, newshape=[]) /* ty=float32 */;
  %355 = reshape(%351, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %356 = reshape(%352, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %357 = reshape(%353, newshape=[675, 1]) /* ty=Tensor[(675, 1), float32] */;
  %358 = @func_1209(%354, %355, %356, %357) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) */;
  %359 = cast(meta[relay.Constant][25] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %360 = cast(meta[relay.Constant][25] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %361 = reshape(%359, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %362 = reshape(%360, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %363 = @func_478(%361, %362) /* ty=(Tensor[(10, 13, 11), bool],) */;
  %364 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %365 = cast(%364, dtype="int8") /* ty=Tensor[(14, 3, 6), int8] */;
  %366 = cast(%var_3982, dtype="int8") /* ty=int8 */;
  %367 = %358.2;
  %368 = %363.0;
  %369 = subtract(%365, %366) /* ty=Tensor[(14, 3, 6), int8] */;
  (%367, meta[relay.Constant][25] /* ty=Tensor[(1430), bool] */, %var_3984, meta[relay.Constant][26] /* ty=Tensor[(675), float32] */, %368, %369)
}

def @func_5095(%var_5082: Tensor[(5, 7, 8), int64]) -> (Tensor[(5, 7, 8), bool],) {
  %370 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 7, 8), int64] */, dtype="int64") /* ty=Tensor[(5, 7, 8), int64] */;
  %371 = shape_of(%var_5082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_5082, dtype="int64") /* ty=Tensor[(5, 7, 8), int64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %374 = multiply(%372, %373) /* ty=Tensor[(5, 7, 8), int64] */;
  %375 = cast(%var_5082, dtype="bool") /* ty=Tensor[(5, 7, 8), bool] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="bool") /* ty=Tensor[(5, 7, 8), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = greater(%377, %378) /* ty=Tensor[(5, 7, 8), bool] */;
  (%379,)
}

def @func_5395() -> Tensor[(14, 3, 6), float32] {
  @func_3304() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_5205(%var_5183: Tensor[(14, 13, 8), float32], %var_5190: int8) -> (Tensor[(15, 12, 16), int8], Tensor[(2880), int8], Tensor[(14, 13, 8), int16]) {
  %380 = cast(%var_5190, dtype="int8") /* ty=int8 */;
  %381 = cast(meta[relay.Constant][28] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %382 = reshape(%380, newshape=[]) /* ty=int8 */;
  %383 = reshape(%381, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), int8] */;
  %384 = cast(%var_5183, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %385 = tan(%384) /* ty=Tensor[(14, 13, 8), float32] */;
  %386 = cast(%var_5190, dtype="uint8") /* ty=uint8 */;
  %387 = cast(%var_5183, dtype="uint8") /* ty=Tensor[(14, 13, 8), uint8] */;
  %388 = maximum(%386, %387) /* ty=Tensor[(14, 13, 8), uint8] */;
  %389 = cast(%388, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %390 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%385, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %393 = @func_4935(%382, %383) /* ty=Tensor[(15, 12, 16), int8] */;
  %394 = bitwise_and(%391, %392) /* ty=Tensor[(14, 13, 8), int16] */;
  (%393, meta[relay.Constant][28] /* ty=Tensor[(2880), int8] */, %394)
}

def @func_2223() -> Tensor[(14, 3, 6), float32] {
  %395 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %395.0
}

def @func_5379(%var_5363: Tensor[(13, 1, 14), uint32], %var_5364: Tensor[(13, 10, 14), uint32]) -> (Tensor[(13, 10, 14), uint32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64], Tensor[(5, 6, 15), float32], Tensor[(450), uint64]) {
  %396 = cast(%var_5363, dtype="uint32") /* ty=Tensor[(13, 1, 14), uint32] */;
  %397 = cast(%var_5364, dtype="uint32") /* ty=Tensor[(13, 10, 14), uint32] */;
  %398 = cast(meta[relay.Constant][29] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %399 = cast(meta[relay.Constant][29] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %400 = reshape(%398, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %401 = reshape(%399, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %402 = @func_1748(%400, %401) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
  %403 = cast(meta[relay.Constant][30] /* ty=Tensor[(450), uint64] */, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %404 = reshape(%403, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), uint64] */;
  %405 = @func_1423(%404) /* ty=(Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) */;
  %406 = subtract(%396, %397) /* ty=Tensor[(13, 10, 14), uint32] */;
  %407 = %402.0;
  %408 = %405.2;
  (%406, %407, meta[relay.Constant][29] /* ty=Tensor[(1920), int64] */, %408, meta[relay.Constant][30] /* ty=Tensor[(450), uint64] */)
}

def @func_478(%var_471: Tensor[(10, 13, 11), bool], %var_472: Tensor[(10, 13, 11), bool]) -> (Tensor[(10, 13, 11), bool],) {
  %409 = cast(%var_472, dtype="bool") /* ty=Tensor[(10, 13, 11), bool] */;
  %410 = shape_of(%var_471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_471, dtype="bool") /* ty=Tensor[(10, 13, 11), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = logical_or(%411, %412) /* ty=Tensor[(10, 13, 11), bool] */;
  (%413,)
}

def @func_1209(%var_1161: float32, %var_1164: Tensor[(1430), bool], %var_1201: Tensor[(112), float32], %var_1202: Tensor[(675, 1), float32]) -> (Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) {
  %414 = cast(%var_1161, dtype="float32") /* ty=float32 */;
  %415 = reshape(%414, newshape=[]) /* ty=float32 */;
  %416 = @func_401(%415) /* ty=(Tensor[(15, 1, 8), float64], Tensor[(420, 8), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(16, 15, 14), float32], float32) */;
  %417 = cast(%var_1164, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %418 = cast(%var_1164, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %419 = reshape(%417, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %420 = reshape(%418, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %421 = @func_478(%419, %420) /* ty=(Tensor[(10, 13, 11), bool],) */;
  %422 = cast(%var_1201, dtype="float32") /* ty=Tensor[(112), float32] */;
  %423 = cast(%var_1202, dtype="float32") /* ty=Tensor[(675, 1), float32] */;
  %424 = reshape(%422, newshape=[14, 8]) /* ty=Tensor[(14, 8), float32] */;
  %425 = reshape(%423, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %426 = @func_713(%424, %425) /* ty=(Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) */;
  %427 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %428 = %416.3;
  %429 = %421.0;
  %430 = %426.1;
  (%427, %428, %var_1161, %429, %var_1164, %430, %var_1201, %var_1202)
}

def @func_3569(%var_3560: Tensor[(9, 11), bool]) -> Tensor[(9, 11), bool] {
  %431 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 11), bool] */, dtype="bool") /* ty=Tensor[(9, 11), bool] */;
  %432 = shape_of(%var_3560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %433 = cast(%var_3560, dtype="bool") /* ty=Tensor[(9, 11), bool] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_and(%433, %434) /* ty=Tensor[(9, 11), bool] */
}

def @func_3228() -> (Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) {
  %435 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %436 = %435.2;
  %437 = cast(meta[relay.Constant][32] /* ty=Tensor[(1920), int64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(1), int32] */;
  %439 = cast(%436, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?), float64] */;
  %441 = power(%439, %440) /* ty=Tensor[(1920), float64] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %443 = @func_2587() /* ty=Tensor[(14, 3, 6), uint64] */;
  %444 = log10(%442) /* ty=Tensor[(1920), float32] */;
  (%443, %444)
}

def @func_1653(%var_1609: Tensor[(14, 3, 6), float32], %var_1622: Tensor[(14, 3, 6), float32], %var_1644: Tensor[(3360), float32]) -> (Tensor[(14, 3, 6), bool], Tensor[(14, 3, 6), int16], Tensor[(16, 15, 14), float32], Tensor[(336), float32], Tensor[(3360), float32]) {
  %445 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %446 = %445.0;
  %447 = cast(%var_1609, dtype="bool") /* ty=Tensor[(14, 3, 6), bool] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="bool") /* ty=Tensor[(14, 3, 6), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = cast(%var_1622, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
  %452 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%446, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %455 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %456 = cast(%var_1644, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %457 = reshape(%455, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), float32] */;
  %458 = reshape(%456, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
  %459 = @func_247(%457, %458) /* ty=(Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) */;
  %460 = greater_equal(%449, %450) /* ty=Tensor[(14, 3, 6), bool] */;
  %461 = bitwise_or(%453, %454) /* ty=Tensor[(14, 3, 6), int16] */;
  %462 = %459.1;
  (%460, %461, %462, meta[relay.Constant][33] /* ty=Tensor[(336), float32] */, %var_1644)
}

def @func_3174() -> (Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) {
  %463 = @func_2846() /* ty=Tensor[(14, 3, 6), float64] */;
  %464 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  (%463, %464)
}

def @func_2513() -> (Tensor[(14, 3, 6), float32],) {
  %465 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
  (%465,)
}

def @func_5232() -> (Tensor[(1920), int64],) {
  %466 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %467 = %466.2;
  (%467,)
}

def @func_5669() -> (Tensor[(14, 3, 6), uint64],) {
  %468 = @func_4266() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %469 = %468.0;
  (%469,)
}

def @main(%var_5986: Tensor[(840, 4), float64]) -> (Tensor[(14, 3, 6), float64], Tensor[(16, 15, 14), float32], Tensor[(14, 3, 6), uint64], Tensor[(1920), float32], Tensor[(10, 12, 16), float64], Tensor[(840, 4), int64], Tensor[(840, 4), float32]) {
  %470 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %473 = cast(%471, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %474 = cast(meta[relay.Constant][34] /* ty=Tensor[(840, 4), float32] */, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %475 = reshape(%472, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %476 = reshape(%473, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %477 = reshape(%474, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %478 = @func_1653(%475, %476, %477) /* ty=(Tensor[(14, 3, 6), bool], Tensor[(14, 3, 6), int16], Tensor[(16, 15, 14), float32], Tensor[(336), float32], Tensor[(3360), float32]) */;
  %479 = @func_5697() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %480 = @func_5165() /* ty=Tensor[(1920), float32] */;
  %481 = cast(%480, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %482 = reshape(%481, newshape=[1920]) /* ty=Tensor[(1920), int64] */;
  %483 = @func_2405(%482) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %484 = cast(meta[relay.Constant][34] /* ty=Tensor[(840, 4), float32] */, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %485 = rsqrt(%484) /* ty=Tensor[(840, 4), float32] */;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(840, 4), float64] */;
  %487 = asinh(%486) /* ty=Tensor[(840, 4), float64] */;
  %488 = cast(%var_5986, dtype="int64") /* ty=Tensor[(840, 4), int64] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(2), int32] */;
  %490 = cast(%487, dtype="int64") /* ty=Tensor[(840, 4), int64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %492 = cast(%485, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %493 = %478.2;
  %494 = %479.0;
  %495 = %483.1;
  %496 = logical_xor(%490, %491) /* ty=Tensor[(840, 4), int64] */;
  %497 = atanh(%492) /* ty=Tensor[(840, 4), float32] */;
  (%471, %493, %494, %480, %495, %496, %497)
}

def @func_2373() -> (Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) {
  %498 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %499 = cast(meta[relay.Constant][35] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %500 = cast(meta[relay.Constant][35] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %501 = reshape(%499, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %502 = reshape(%500, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %503 = @func_1748(%501, %502) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
  %504 = %498.0;
  %505 = %503.0;
  (%504, %505, meta[relay.Constant][35] /* ty=Tensor[(1920), int64] */)
}

def @func_3684() -> Tensor[(14, 3, 6), float32] {
  %506 = @func_3262() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %506.0
}

def @func_2567(%var_2545: Tensor[(13, 5, 4), float64], %var_2559: Tensor[(13, 5, 4), float64]) -> (Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), bool]) {
  %507 = cast(%var_2545, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %508 = tan(%507) /* ty=Tensor[(13, 5, 4), float64] */;
  %509 = cast(%508, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %510 = cast(%var_2559, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
  %511 = shape_of(%var_2545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_2545, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = cos(%509) /* ty=Tensor[(13, 5, 4), float64] */;
  %515 = less(%512, %513) /* ty=Tensor[(13, 5, 4), bool] */;
  (%514, %515)
}

def @func_2689(%var_2660: Tensor[(10, 45), uint64], %var_2673: float32) -> (Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) {
  %516 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %517 = cast(meta[relay.Constant][36] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %518 = cast(%var_2660, dtype="uint64") /* ty=Tensor[(10, 45), uint64] */;
  %519 = reshape(%517, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %520 = reshape(%518, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %521 = @func_1923(%519, %520) /* ty=(Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) */;
  %522 = cast(meta[relay.Constant][37] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %523 = cast(%var_2673, dtype="float32") /* ty=float32 */;
  %524 = reshape(%522, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %525 = reshape(%523, newshape=[]) /* ty=float32 */;
  %526 = @func_1573(%524, %525) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %527 = %516.0;
  %528 = %521.3;
  %529 = %526.3;
  (%527, %528, meta[relay.Constant][36] /* ty=Tensor[(3360), float32] */, %var_2660, %529, meta[relay.Constant][37] /* ty=Tensor[(80), float64] */, %var_2673)
}

def @func_1505() -> (Tensor[(14, 3, 6), float64],) {
  %530 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %532 = sin(%531) /* ty=Tensor[(14, 3, 6), float64] */;
  (%532,)
}

def @func_1517() -> (Tensor[(14, 3, 6), float32],) {
  %533 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %534 = %533.0;
  (%534,)
}

def @func_2846() -> Tensor[(14, 3, 6), float64] {
  %535 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %535.0
}

def @func_401(%var_396: float32) -> (Tensor[(15, 1, 8), float64], Tensor[(420, 8), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(16, 15, 14), float32], float32) {
  %536 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 8), float64] */;
  %537 = cast(meta[relay.Constant][39] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %538 = cast(meta[relay.Constant][40] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %539 = reshape(%537, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), float32] */;
  %540 = reshape(%538, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
  %541 = @func_247(%539, %540) /* ty=(Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) */;
  %542 = cast(%var_396, dtype="float32") /* ty=float32 */;
  %543 = %541.3;
  %544 = cast(%543, dtype="float32") /* ty=Tensor[(420, 8), float32] */;
  %545 = reshape(%542, newshape=[]) /* ty=float32 */;
  %546 = reshape(%544, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %547 = tan(%536) /* ty=Tensor[(15, 1, 8), float64] */;
  %548 = @func_139(%545, %546) /* ty=Tensor[(16, 15, 14), float32] */;
  (%547, %543, meta[relay.Constant][39] /* ty=Tensor[(336), float32] */, meta[relay.Constant][40] /* ty=Tensor[(3360), float32] */, %548, %var_396)
}

def @func_4266() -> (Tensor[(14, 3, 6), uint64],) {
  %549 = @func_2587() /* ty=Tensor[(14, 3, 6), uint64] */;
  (%549,)
}

def @func_5352(%var_5331: Tensor[(5, 1, 5), float64]) -> (Tensor[(5, 1, 5), float64], Tensor[(14, 3, 6), float32]) {
  %550 = cast(%var_5331, dtype="float64") /* ty=Tensor[(5, 1, 5), float64] */;
  %551 = @func_4034() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %552 = cosh(%550) /* ty=Tensor[(5, 1, 5), float64] */;
  %553 = %551.0;
  (%552, %553)
}

def @func_5134(%var_5127: bool, %var_5128: Tensor[(9, 10, 16), bool]) -> Tensor[(9, 10, 16), bool] {
  %554 = cast(%var_5127, dtype="bool") /* ty=bool */;
  %555 = cast(%var_5128, dtype="bool") /* ty=Tensor[(9, 10, 16), bool] */;
  logical_and(%554, %555) /* ty=Tensor[(9, 10, 16), bool] */
}

def @func_5156() -> (Tensor[(14, 3, 6), float32],) {
  %556 = @func_2513() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %557 = %556.0;
  (%557,)
}

def @func_4034() -> (Tensor[(14, 3, 6), float32],) {
  %558 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %559 = %558.0;
  (%559,)
}

def @func_2790(%var_2746: Tensor[(12, 15, 6), float32], %var_2747: Tensor[(12, 15, 6), float32], %var_2757: float32, %var_2778: Tensor[(450), uint64]) -> (Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) {
  %560 = cast(%var_2747, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
  %561 = shape_of(%var_2746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_2746, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %564 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %565 = cast(meta[relay.Constant][41] /* ty=Tensor[(40, 2), float64] */, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
  %566 = cast(%var_2757, dtype="float32") /* ty=float32 */;
  %567 = reshape(%565, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %568 = reshape(%566, newshape=[]) /* ty=float32 */;
  %569 = @func_1573(%567, %568) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %570 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %571 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %572 = cast(%var_2778, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %573 = cast(%var_2757, dtype="float32") /* ty=float32 */;
  %574 = reshape(%572, newshape=[10, 45]) /* ty=Tensor[(10, 45), uint64] */;
  %575 = reshape(%573, newshape=[]) /* ty=float32 */;
  %576 = @func_2689(%574, %575) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) */;
  %577 = @func_2127() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) */;
  %578 = power(%562, %563) /* ty=Tensor[(12, 15, 6), float32] */;
  %579 = %564.0;
  %580 = %569.3;
  %581 = %570.0;
  %582 = %571.1;
  %583 = %576.3;
  %584 = %577.2;
  (%578, %579, %580, meta[relay.Constant][41] /* ty=Tensor[(40, 2), float64] */, %var_2757, %581, %582, %583, %var_2778, %584)
}

def @func_5510(%var_5492: Tensor[(1, 2, 16), float32]) -> (Tensor[(1, 2, 16), float32],) {
  %585 = cast(%var_5492, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %586 = exp(%585) /* ty=Tensor[(1, 2, 16), float32] */;
  (%586,)
}

def @func_5922() -> (Tensor[(15, 13, 5), float32], Tensor[(14, 3, 6), float32]) {
  %587 = @func_3001() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */;
  %588 = @func_5571() /* ty=Tensor[(15, 13, 5), float32] */;
  %589 = %587.1;
  (%588, %589)
}

def @func_2194() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
  %590 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %591 = %590.0;
  %592 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
  (%591, %592)
}

def @func_1573(%var_1556: Tensor[(5, 16, 1), float64], %var_1569: float32) -> (Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) {
  %593 = cast(%var_1556, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %594 = cast(%var_1569, dtype="float32") /* ty=float32 */;
  %595 = cast(meta[relay.Constant][42] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %596 = reshape(%594, newshape=[]) /* ty=float32 */;
  %597 = reshape(%595, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %598 = sin(%593) /* ty=Tensor[(5, 16, 1), float64] */;
  %599 = @func_139(%596, %597) /* ty=Tensor[(16, 15, 14), float32] */;
  (%598, %599, %var_1569, meta[relay.Constant][42] /* ty=Tensor[(3360), float32] */)
}

def @func_1464() -> Tensor[(14, 3, 6), float32] {
  %600 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %600.0
}

def @func_4253() -> Tensor[(14, 3, 6), float32] {
  %601 = @func_2194() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */;
  %601.0
}

def @func_5793(%var_5751: Tensor[(16, 1, 4), uint8], %var_5752: Tensor[(16, 1, 4), uint8]) -> (Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(16, 13, 4), bool], Tensor[(16, ?, 4), float64]) {
  %602 = cast(meta[relay.Constant][43] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %603 = cast(meta[relay.Constant][43] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %604 = reshape(%602, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %605 = reshape(%603, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %606 = @func_478(%604, %605) /* ty=(Tensor[(10, 13, 11), bool],) */;
  %607 = cast(%var_5751, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %608 = log2(%607) /* ty=Tensor[(16, 1, 4), float32] */;
  %609 = cast(%var_5752, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %610 = shape_of(%var_5751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_5751, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %613 = greater_equal(%611, %612) /* ty=Tensor[(16, ?, 4), bool] */;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(16, ?, 4), float32] */;
  %615 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%608, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %618 = multiply(%616, %617) /* ty=Tensor[(16, ?, 4), float32] */;
  %619 = cast(%618, dtype="bool") /* ty=Tensor[(16, ?, 4), bool] */;
  %620 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(16, 13, 4), bool] */;
  %621 = cast(%608, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %622 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%618, dtype="float64") /* ty=Tensor[(16, ?, 4), float64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %625 = %606.0;
  %626 = not_equal(%619, %620) /* ty=Tensor[(16, 13, 4), bool] */;
  %627 = mod(%623, %624) /* ty=Tensor[(16, ?, 4), float64] */;
  (%625, meta[relay.Constant][43] /* ty=Tensor[(1430), bool] */, %626, %627)
}

def @func_5697() -> (Tensor[(14, 3, 6), uint64],) {
  %628 = @func_3769() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) */;
  %629 = %628.1;
  (%629,)
}

def @func_4761(%var_4728: Tensor[(675), float32], %var_4731: Tensor[(22880), bool]) -> (Tensor[(14, 3, 6), uint64], Tensor[(675), float32], Tensor[(22880), float32], Tensor[(15, 5, 9), float64]) {
  %630 = cast(%var_4731, dtype="bool") /* ty=Tensor[(22880), bool] */;
  %631 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(22880), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %632 = cast(meta[relay.Constant][45] /* ty=Tensor[(22880), bool] */, dtype="bool") /* ty=Tensor[(22880), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?), bool] */;
  %634 = equal(%632, %633) /* ty=Tensor[(22880), bool] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(22880), float32] */;
  %636 = cast(%var_4728, dtype="float32") /* ty=Tensor[(675), float32] */;
  %637 = cast(%var_4728, dtype="float32") /* ty=Tensor[(675), float32] */;
  %638 = cast(meta[relay.Constant][45] /* ty=Tensor[(22880), bool] */, dtype="bool") /* ty=Tensor[(22880), bool] */;
  %639 = reshape(%636, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %640 = reshape(%637, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %641 = reshape(%638, newshape=[16, 1430]) /* ty=Tensor[(16, 1430), bool] */;
  %642 = @func_2318(%639, %640, %641) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) */;
  %643 = %642.1;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %645 = @func_2587() /* ty=Tensor[(14, 3, 6), uint64] */;
  %646 = log(%635) /* ty=Tensor[(22880), float32] */;
  %647 = erf(%644) /* ty=Tensor[(15, 5, 9), float64] */;
  (%645, %var_4728, %646, %647)
}

def @func_5031(%var_5013: Tensor[(56), uint32]) -> (Tensor[(14, 3, 6), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(800), float32], Tensor[(7, 1, 8), uint32], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float32]) {
  %648 = @func_2468() /* ty=Tensor[(14, 3, 6), float64] */;
  %649 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 3, 6), float64] */, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %653 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %654 = cast(meta[relay.Constant][47] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %655 = reshape(%654, newshape=[10, 16, 5]) /* ty=Tensor[(10, 16, 5), float32] */;
  %656 = @func_3750(%655) /* ty=(Tensor[(10, 16, 5), float32], Tensor[(14, 3, 6), float32]) */;
  %657 = cast(meta[relay.Constant][48] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %658 = cast(%var_5013, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %659 = reshape(%657, newshape=[]) /* ty=uint32 */;
  %660 = reshape(%658, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint32] */;
  %661 = @func_4718(%659, %660) /* ty=(Tensor[(7, 1, 8), uint32],) */;
  %662 = @func_3174() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) */;
  %663 = add(%651, %652) /* ty=Tensor[(14, 3, 6), uint32] */;
  %664 = atanh(%653) /* ty=Tensor[(14, 3, 6), float64] */;
  %665 = %656.1;
  %666 = %661.0;
  %667 = %662.1;
  (%663, %664, %665, meta[relay.Constant][47] /* ty=Tensor[(800), float32] */, %666, meta[relay.Constant][48] /* ty=uint32 */, %var_5013, %667)
}

def @func_5319(%var_5289: Tensor[(1080), float32], %var_5291: Tensor[(450), uint64], %var_5317: Tensor[(80), float64]) -> (Tensor[(14, 3, 6), float32], Tensor[(9, 11), bool], Tensor[(14, 3, 6), float64], Tensor[(1080), float32], float32, Tensor[(450), uint64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(5, 16, 1), float64], Tensor[(80), float64]) {
  %668 = @func_5120() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(9, 11), bool], Tensor[(11, 9), bool]) */;
  %669 = cast(%var_5289, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %670 = cast(%var_5289, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %671 = cast(2.11391f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %672 = cast(%var_5291, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %673 = reshape(%669, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %674 = reshape(%670, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %675 = reshape(%671, newshape=[]) /* ty=float32 */;
  %676 = reshape(%672, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %677 = @func_2790(%673, %674, %675, %676) /* ty=(Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) */;
  %678 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %679 = cast(%var_5317, dtype="float64") /* ty=Tensor[(80), float64] */;
  %680 = cast(2.11391f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %681 = reshape(%679, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %682 = reshape(%680, newshape=[]) /* ty=float32 */;
  %683 = @func_1573(%681, %682) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %684 = @func_2092() /* ty=Tensor[(14, 3, 6), float32] */;
  %685 = %668.1;
  %686 = %677.6;
  %687 = %678.0;
  %688 = @func_4253() /* ty=Tensor[(14, 3, 6), float32] */;
  %689 = %683.0;
  (%684, %685, %686, %var_5289, 2.11391f /* ty=float32 */, %var_5291, %687, %688, %689, %var_5317)
}

def @func_5479(%var_5446: Tensor[(3360), float32], %var_5447: Tensor[(1, 450), uint64]) -> (Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], float32, Tensor[(3360), float32], Tensor[(1, 450), uint64]) {
  %690 = @func_5156() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %691 = %690.0;
  %692 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 3, 6), float32] */, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %696 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %697 = cast(%var_5446, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %698 = cast(%var_5447, dtype="uint64") /* ty=Tensor[(1, 450), uint64] */;
  %699 = reshape(%697, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %700 = reshape(%698, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %701 = @func_1923(%699, %700) /* ty=(Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) */;
  %702 = divide(%694, %695) /* ty=Tensor[(14, 3, 6), float64] */;
  %703 = %696.0;
  %704 = %701.1;
  (%702, %703, %704, %var_5446, %var_5447)
}

def @func_5837(%var_5833: Tensor[(3, 11, 4), int8]) -> Tensor[(3, 11, 4), bool] {
  %705 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 11, 1), int8] */, dtype="bool") /* ty=Tensor[(3, 11, 1), bool] */;
  %706 = cast(%var_5833, dtype="bool") /* ty=Tensor[(3, 11, 4), bool] */;
  greater(%705, %706) /* ty=Tensor[(3, 11, 4), bool] */
}

def @func_651(%var_632: Tensor[(1430), bool], %var_638: Tensor[(15, 5, 9), float32]) -> (Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) {
  %707 = cast(%var_632, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %708 = cast(%var_632, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %709 = reshape(%707, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %710 = reshape(%708, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %711 = @func_478(%709, %710) /* ty=(Tensor[(10, 13, 11), bool],) */;
  %712 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %713 = tan(%712) /* ty=Tensor[(15, 5, 9), float32] */;
  %714 = cast(%var_638, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %718 = %711.0;
  %719 = multiply(%716, %717) /* ty=Tensor[(15, 5, 9), uint64] */;
  (%718, %var_632, %719)
}

def @func_4773() -> (Tensor[(1920), int64],) {
  %720 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %721 = %720.2;
  (%721,)
}

def @func_1123() -> Tensor[(14, 3, 6), float32] {
  %722 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %722.0
}

def @func_1923(%var_1883: Tensor[(3360), float32], %var_1897: Tensor[(450), uint64]) -> (Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) {
  %723 = @func_1679() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %724 = cast(-8.34421f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %725 = cast(%var_1883, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %726 = reshape(%724, newshape=[]) /* ty=float32 */;
  %727 = reshape(%725, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %728 = @func_139(%726, %727) /* ty=Tensor[(16, 15, 14), float32] */;
  %729 = cast(%728, dtype="int8") /* ty=Tensor[(16, 15, 14), int8] */;
  %730 = shape_of(%var_1883, dtype="int32") /* ty=Tensor[(1), int32] */;
  %731 = cast(%var_1883, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?), int8] */;
  %733 = cast(%var_1897, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %734 = reshape(%733, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), uint64] */;
  %735 = @func_1423(%734) /* ty=(Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) */;
  %736 = %723.0;
  %737 = logical_xor(%731, %732) /* ty=Tensor[(3360), int8] */;
  %738 = %735.0;
  (%736, -8.34421f /* ty=float32 */, %737, %738, %var_1897)
}

def @func_3526(%var_3467: float32, %var_3468: Tensor[(3360), float32]) -> (Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(16, 15, 14), float64], Tensor[(14, 3, 6), float32]) {
  %739 = cast(%var_3467, dtype="float32") /* ty=float32 */;
  %740 = cast(%var_3468, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %741 = reshape(%739, newshape=[]) /* ty=float32 */;
  %742 = reshape(%740, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %743 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %744 = @func_2223() /* ty=Tensor[(14, 3, 6), float32] */;
  %745 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %746 = %745.0;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %748 = sqrt(%747) /* ty=Tensor[(14, 3, 6), float32] */;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %750 = sigmoid(%749) /* ty=Tensor[(14, 3, 6), float32] */;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %752 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%744, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %755 = cast(%var_3467, dtype="float32") /* ty=float32 */;
  %756 = cast(%var_3468, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %757 = reshape(%755, newshape=[]) /* ty=float32 */;
  %758 = reshape(%756, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %759 = @func_139(%757, %758) /* ty=Tensor[(16, 15, 14), float32] */;
  %760 = cast(%759, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %761 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %762 = @func_139(%741, %742) /* ty=Tensor[(16, 15, 14), float32] */;
  %763 = %743.0;
  %764 = floor_divide(%753, %754) /* ty=Tensor[(14, 3, 6), float32] */;
  %765 = @func_3055() /* ty=Tensor[(14, 3, 6), float32] */;
  %766 = asin(%760) /* ty=Tensor[(16, 15, 14), float64] */;
  %767 = %761.0;
  (%762, %var_3467, %var_3468, %763, %764, %765, %766, %767)
}

def @func_1991() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %768 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %769 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %770 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %771 = %768.0;
  %772 = %769.0;
  %773 = %770.0;
  (%771, %772, %773)
}

def @func_2127() -> (Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) {
  %774 = @func_1517() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %775 = cast(meta[relay.Constant][52] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %776 = cast(meta[relay.Constant][52] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %777 = reshape(%775, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %778 = reshape(%776, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %779 = @func_478(%777, %778) /* ty=(Tensor[(10, 13, 11), bool],) */;
  %780 = %774.0;
  %781 = %779.0;
  (%780, %781, meta[relay.Constant][52] /* ty=Tensor[(1430), bool] */)
}

def @func_3750(%var_3725: Tensor[(10, 16, 5), float32]) -> (Tensor[(10, 16, 5), float32], Tensor[(14, 3, 6), float32]) {
  %782 = cast(%var_3725, dtype="float32") /* ty=Tensor[(10, 16, 5), float32] */;
  %783 = @func_3262() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %784 = cosh(%782) /* ty=Tensor[(10, 16, 5), float32] */;
  %785 = %783.0;
  (%784, %785)
}

def @func_2891(%var_2888: Tensor[(15, 13, 4), float32]) -> Tensor[(15, 13, 4), float32] {
  %786 = cast(%var_2888, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  sqrt(%786) /* ty=Tensor[(15, 13, 4), float32] */
}

def @func_4718(%var_4702: uint32, %var_4703: Tensor[(7, 1, 8), uint32]) -> (Tensor[(7, 1, 8), uint32],) {
  %787 = cast(%var_4702, dtype="uint32") /* ty=uint32 */;
  %788 = cast(%var_4703, dtype="uint32") /* ty=Tensor[(7, 1, 8), uint32] */;
  %789 = subtract(%787, %788) /* ty=Tensor[(7, 1, 8), uint32] */;
  (%789,)
}

def @func_4906() -> (Tensor[(14, 3, 6), float64],) {
  %790 = @func_1679() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %791 = %790.0;
  (%791,)
}

def @func_5059() -> (Tensor[(13, 14, 2), int32],) {
  %792 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
  %793 = atanh(%792) /* ty=Tensor[(13, 14, 2), float32] */;
  %794 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 14, 2), float32] */, dtype="int32") /* ty=Tensor[(13, 14, 2), int32] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%793, dtype="int32") /* ty=Tensor[(13, 14, 2), int32] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %798 = logical_xor(%796, %797) /* ty=Tensor[(13, 14, 2), int32] */;
  (%798,)
}

def @func_4789() -> Tensor[(14, 3, 6), float64] {
  @func_2468() /* ty=Tensor[(14, 3, 6), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5571() -> Tensor[(15, 13, 5), float32] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
  sigmoid(%0) /* ty=Tensor[(15, 13, 5), float32] */
}

def @func_3685() -> Tensor[(14, 3, 6), float32] {
  %2 = fn () -> Tensor[(14, 3, 6), float32] {
    %1 = @func_3262() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %1.0
  };
  %2() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_5134(%var_5127: bool, %var_5128: Tensor[(9, 10, 16), bool]) -> Tensor[(9, 10, 16), bool] {
  %3 = cast(%var_5127, dtype="bool") /* ty=bool */;
  %4 = cast(%var_5128, dtype="bool") /* ty=Tensor[(9, 10, 16), bool] */;
  logical_and(%3, %4) /* ty=Tensor[(9, 10, 16), bool] */
}

def @func_5379(%var_5363: Tensor[(13, 1, 14), uint32], %var_5364: Tensor[(13, 10, 14), uint32]) -> (Tensor[(13, 10, 14), uint32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64], Tensor[(5, 6, 15), float32], Tensor[(450), uint64]) {
  %5 = cast(%var_5363, dtype="uint32") /* ty=Tensor[(13, 1, 14), uint32] */;
  %6 = cast(%var_5364, dtype="uint32") /* ty=Tensor[(13, 10, 14), uint32] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %9 = reshape(%7, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %10 = reshape(%8, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
  %11 = @func_1748(%9, %10) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(450), uint64] */, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %13 = reshape(%12, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), uint64] */;
  %14 = @func_1423(%13) /* ty=(Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) */;
  %15 = subtract(%5, %6) /* ty=Tensor[(13, 10, 14), uint32] */;
  %16 = %11.0;
  %17 = %14.2;
  (%15, %16, meta[relay.Constant][1] /* ty=Tensor[(1920), int64] */, %17, meta[relay.Constant][2] /* ty=Tensor[(450), uint64] */)
}

def @func_5573() -> Tensor[(15, 13, 5), float32] {
  @func_5571() /* ty=Tensor[(15, 13, 5), float32] */
}

def @func_4774() -> (Tensor[(1920), int64],) {
  %20 = fn () -> (Tensor[(1920), int64],) {
    %18 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
    %19 = %18.2;
    (%19,)
  };
  %20() /* ty=(Tensor[(1920), int64],) */
}

def @func_143(%var_141: float32, %var_142: Tensor[(16, 15, 14), float32]) -> Tensor[(16, 15, 14), float32] {
  @func_139(%var_141, %var_142) /* ty=Tensor[(16, 15, 14), float32] */
}

def @func_1866(%var_1848: Tensor[(6, 10, 5), uint32], %var_1849: Tensor[(6, 10, 5), uint32]) -> (Tensor[(6, 10, 5), int8], Tensor[(6, 10, 5), float64]) {
  %21 = cast(%var_1849, dtype="uint32") /* ty=Tensor[(6, 10, 5), uint32] */;
  %22 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_1848, dtype="uint32") /* ty=Tensor[(6, 10, 5), uint32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %25 = bitwise_xor(%23, %24) /* ty=Tensor[(6, 10, 5), uint32] */;
  %26 = cast(%25, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
  %27 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%var_1848, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %30 = cast(%var_1849, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %31 = acos(%30) /* ty=Tensor[(6, 10, 5), float64] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %33 = bitwise_or(%28, %29) /* ty=Tensor[(6, 10, 5), int8] */;
  %34 = acosh(%32) /* ty=Tensor[(6, 10, 5), float64] */;
  (%33, %34)
}

def @func_4156(%var_4150: Tensor[(2, 15, 5), float64]) -> Tensor[(2, 15, 5), float64] {
  %35 = cast(%var_4150, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  erf(%35) /* ty=Tensor[(2, 15, 5), float64] */
}

def @func_3002() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
  %39 = fn () -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
    %36 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %37 = %36.0;
    %38 = @func_2092() /* ty=Tensor[(14, 3, 6), float32] */;
    (%37, %38)
  };
  %39() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */
}

def @func_5097(%var_5096: Tensor[(5, 7, 8), int64]) -> (Tensor[(5, 7, 8), bool],) {
  %50 = fn (%var_5082: Tensor[(5, 7, 8), int64]) -> (Tensor[(5, 7, 8), bool],) {
    %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 7, 8), int64] */, dtype="int64") /* ty=Tensor[(5, 7, 8), int64] */;
    %41 = shape_of(%var_5082, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%var_5082, dtype="int64") /* ty=Tensor[(5, 7, 8), int64] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %44 = multiply(%42, %43) /* ty=Tensor[(5, 7, 8), int64] */;
    %45 = cast(%var_5082, dtype="bool") /* ty=Tensor[(5, 7, 8), bool] */;
    %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%44, dtype="bool") /* ty=Tensor[(5, 7, 8), bool] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %49 = greater(%47, %48) /* ty=Tensor[(5, 7, 8), bool] */;
    (%49,)
  };
  %50(%var_5096) /* ty=(Tensor[(5, 7, 8), bool],) */
}

def @func_3530(%var_3528: float32, %var_3529: Tensor[(3360), float32]) -> (Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(16, 15, 14), float64], Tensor[(14, 3, 6), float32]) {
  @func_3526(%var_3528, %var_3529) /* ty=(Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(16, 15, 14), float64], Tensor[(14, 3, 6), float32]) */
}

def @func_2093() -> Tensor[(14, 3, 6), float32] {
  %52 = fn () -> Tensor[(14, 3, 6), float32] {
    %51 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
    %51.0
  };
  %52() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_713(%var_677: Tensor[(14, 8), float32], %var_693: Tensor[(675), float32]) -> (Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) {
  %53 = cast(%var_677, dtype="float32") /* ty=Tensor[(14, 8), float32] */;
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1430), bool] */, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %55 = cast(%var_693, dtype="float32") /* ty=Tensor[(675), float32] */;
  %56 = reshape(%54, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %57 = reshape(%55, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
  %58 = @func_651(%56, %57) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) */;
  %59 = sin(%53) /* ty=Tensor[(14, 8), float32] */;
  %60 = %58.0;
  (%59, %60, meta[relay.Constant][4] /* ty=Tensor[(1, 1430), bool] */, %var_693)
}

def @func_1343() -> (Tensor[(14, 3, 6), float32],) {
  @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_651(%var_632: Tensor[(1430), bool], %var_638: Tensor[(15, 5, 9), float32]) -> (Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) {
  %61 = cast(%var_632, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %62 = cast(%var_632, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %63 = reshape(%61, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %64 = reshape(%62, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %65 = @func_478(%63, %64) /* ty=(Tensor[(10, 13, 11), bool],) */;
  %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %67 = tan(%66) /* ty=Tensor[(15, 5, 9), float32] */;
  %68 = cast(%var_638, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="uint64") /* ty=Tensor[(15, 5, 9), uint64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %72 = %65.0;
  %73 = multiply(%70, %71) /* ty=Tensor[(15, 5, 9), uint64] */;
  (%72, %var_632, %73)
}

def @func_139(%var_120: float32, %var_121: Tensor[(16, 15, 14), float32]) -> Tensor[(16, 15, 14), float32] {
  %74 = cast(%var_120, dtype="float32") /* ty=float32 */;
  %75 = cast(%var_121, dtype="float32") /* ty=Tensor[(16, 15, 14), float32] */;
  divide(%74, %75) /* ty=Tensor[(16, 15, 14), float32] */
}

def @func_3347(%var_3345: Tensor[(2, 960), int64], %var_3346: Tensor[(450), uint64]) -> (Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 960), int64], float32, Tensor[(1680, 2), float32], Tensor[(450), uint64], Tensor[(14, 3, 6), float32]) {
  %91 = fn (%var_3325: Tensor[(2, 960), int64], %var_3332: Tensor[(450), uint64]) -> (Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 960), int64], float32, Tensor[(1680, 2), float32], Tensor[(450), uint64], Tensor[(14, 3, 6), float32]) {
    %76 = cast(%var_3325, dtype="int64") /* ty=Tensor[(2, 960), int64] */;
    %77 = cast(%var_3325, dtype="int64") /* ty=Tensor[(2, 960), int64] */;
    %78 = reshape(%76, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
    %79 = reshape(%77, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
    %80 = @func_1748(%78, %79) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
    %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(1680, 2), float32] */, dtype="float32") /* ty=Tensor[(1680, 2), float32] */;
    %82 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(450), uint64] */;
    %83 = reshape(%81, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
    %84 = reshape(%82, newshape=[450]) /* ty=Tensor[(450), uint64] */;
    %85 = @func_1923(%83, %84) /* ty=(Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) */;
    %86 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
    %87 = @func_2846() /* ty=Tensor[(14, 3, 6), float64] */;
    %88 = %80.0;
    %89 = %85.1;
    %90 = %86.0;
    (%87, %88, %var_3325, %89, meta[relay.Constant][6] /* ty=Tensor[(1680, 2), float32] */, %var_3332, %90)
  };
  %91(%var_3345, %var_3346) /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 960), int64], float32, Tensor[(1680, 2), float32], Tensor[(450), uint64], Tensor[(14, 3, 6), float32]) */
}

def @func_5823() -> Tensor[(1920), float64] {
  %92 = @func_4100() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) */;
  %93 = %92.1;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(1920), float64] */;
  sin(%94) /* ty=Tensor[(1920), float64] */
}

def @func_5739() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  @func_5737() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */
}

def @func_1123() -> Tensor[(14, 3, 6), float32] {
  %95 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %95.0
}

def @func_2588() -> Tensor[(14, 3, 6), uint64] {
  %102 = fn () -> Tensor[(14, 3, 6), uint64] {
    %96 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %97 = %96.0;
    %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 3, 6), float64] */, dtype="uint64") /* ty=Tensor[(14, 3, 6), uint64] */;
    %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%97, dtype="uint64") /* ty=Tensor[(14, 3, 6), uint64] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    maximum(%100, %101) /* ty=Tensor[(14, 3, 6), uint64] */
  };
  %102() /* ty=Tensor[(14, 3, 6), uint64] */
}

def @func_1136() -> (Tensor[(14, 3, 6), float32],) {
  %104 = fn () -> (Tensor[(14, 3, 6), float32],) {
    %103 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
    (%103,)
  };
  %104() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_2969(%var_2964: Tensor[(8, 4, 11), int64]) -> Tensor[(8, 4, 11), int64] {
  %105 = cast(%var_2964, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %106 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 4, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 4, 11), int64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%107, %108) /* ty=Tensor[(8, 4, 11), int64] */
}

def @func_1752(%var_1750: Tensor[(10, 12, 16), int64], %var_1751: Tensor[(10, 12, 16), int64]) -> (Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) {
  @func_1748(%var_1750, %var_1751) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */
}

def @func_5157() -> (Tensor[(14, 3, 6), float32],) {
  %111 = fn () -> (Tensor[(14, 3, 6), float32],) {
    %109 = @func_2513() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %110 = %109.0;
    (%110,)
  };
  %111() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_1658(%var_1655: Tensor[(14, 3, 6), float32], %var_1656: Tensor[(14, 3, 6), float32], %var_1657: Tensor[(3360), float32]) -> (Tensor[(14, 3, 6), bool], Tensor[(14, 3, 6), int16], Tensor[(16, 15, 14), float32], Tensor[(336), float32], Tensor[(3360), float32]) {
  @func_1653(%var_1655, %var_1656, %var_1657) /* ty=(Tensor[(14, 3, 6), bool], Tensor[(14, 3, 6), int16], Tensor[(16, 15, 14), float32], Tensor[(336), float32], Tensor[(3360), float32]) */
}

def @func_2796(%var_2792: Tensor[(12, 15, 6), float32], %var_2793: Tensor[(12, 15, 6), float32], %var_2794: float32, %var_2795: Tensor[(450), uint64]) -> (Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) {
  @func_2790(%var_2792, %var_2793, %var_2794, %var_2795) /* ty=(Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) */
}

def @func_4673(%var_4643: Tensor[(112), float32], %var_4644: Tensor[(675), float32]) -> (Tensor[(14, 3, 6), uint64], Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64], Tensor[(12, 15, 6), float32], Tensor[(1080), float32], float32) {
  %112 = @func_4266() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %113 = cast(%var_4643, dtype="float32") /* ty=Tensor[(112), float32] */;
  %114 = cast(%var_4644, dtype="float32") /* ty=Tensor[(675), float32] */;
  %115 = reshape(%113, newshape=[14, 8]) /* ty=Tensor[(14, 8), float32] */;
  %116 = reshape(%114, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %117 = @func_713(%115, %116) /* ty=(Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), uint64] */, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %119 = reshape(%118, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), uint64] */;
  %120 = @func_1423(%119) /* ty=(Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) */;
  %121 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %122 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %123 = cast(0.269795f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), uint64] */, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %125 = reshape(%121, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %126 = reshape(%122, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %127 = reshape(%123, newshape=[]) /* ty=float32 */;
  %128 = reshape(%124, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %129 = @func_2790(%125, %126, %127, %128) /* ty=(Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) */;
  %130 = %112.0;
  %131 = %117.2;
  %132 = %120.0;
  %133 = %129.0;
  (%130, %131, %var_4643, %var_4644, %132, meta[relay.Constant][9] /* ty=Tensor[(450), uint64] */, %133, meta[relay.Constant][10] /* ty=Tensor[(1080), float32] */, 0.269795f /* ty=float32 */)
}

def @func_2847() -> Tensor[(14, 3, 6), float64] {
  %135 = fn () -> Tensor[(14, 3, 6), float64] {
    %134 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %134.0
  };
  %135() /* ty=Tensor[(14, 3, 6), float64] */
}

def @func_2216() -> (Tensor[(14, 3, 6), float64],) {
  %136 = @func_1679() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %137 = %136.0;
  (%137,)
}

def @func_4016(%var_4014: float32, %var_4015: Tensor[(4, 28), float32]) -> (float32, Tensor[(1430), bool], Tensor[(4, 28), float32], Tensor[(675), float32], Tensor[(10, 13, 11), bool], Tensor[(14, 3, 6), int8]) {
  @func_4012(%var_4014, %var_4015) /* ty=(float32, Tensor[(1430), bool], Tensor[(4, 28), float32], Tensor[(675), float32], Tensor[(10, 13, 11), bool], Tensor[(14, 3, 6), int8]) */
}

def @func_4791() -> Tensor[(14, 3, 6), float64] {
  @func_4789() /* ty=Tensor[(14, 3, 6), float64] */
}

def @func_4765(%var_4763: Tensor[(675), float32], %var_4764: Tensor[(22880), bool]) -> (Tensor[(14, 3, 6), uint64], Tensor[(675), float32], Tensor[(22880), float32], Tensor[(15, 5, 9), float64]) {
  @func_4761(%var_4763, %var_4764) /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(675), float32], Tensor[(22880), float32], Tensor[(15, 5, 9), float64]) */
}

def @func_5714() -> Tensor[(14, 3, 6), float32] {
  %139 = fn () -> Tensor[(14, 3, 6), float32] {
    %138 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %138.0
  };
  %139() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_3769() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) {
  %140 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %141 = @func_3228() /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) */;
  %142 = %140.0;
  %143 = %141.0;
  (%142, %143)
}

def @func_1125() -> Tensor[(14, 3, 6), float32] {
  @func_1123() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_4035() -> (Tensor[(14, 3, 6), float32],) {
  %146 = fn () -> (Tensor[(14, 3, 6), float32],) {
    %144 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %145 = %144.0;
    (%145,)
  };
  %146() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_5233() -> (Tensor[(1920), int64],) {
  %149 = fn () -> (Tensor[(1920), int64],) {
    %147 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
    %148 = %147.2;
    (%148,)
  };
  %149() /* ty=(Tensor[(1920), int64],) */
}

def @func_1577(%var_1575: Tensor[(5, 16, 1), float64], %var_1576: float32) -> (Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) {
  @func_1573(%var_1575, %var_1576) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */
}

def @func_5606() -> (Tensor[(4, 6, 14), float32],) {
  %152 = fn () -> (Tensor[(4, 6, 14), float32],) {
    %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 14), float32] */;
    %151 = acos(%150) /* ty=Tensor[(4, 6, 14), float32] */;
    (%151,)
  };
  %152() /* ty=(Tensor[(4, 6, 14), float32],) */
}

def @func_481(%var_479: Tensor[(10, 13, 11), bool], %var_480: Tensor[(10, 13, 11), bool]) -> (Tensor[(10, 13, 11), bool],) {
  %158 = fn (%var_471: Tensor[(10, 13, 11), bool], %var_472: Tensor[(10, 13, 11), bool]) -> (Tensor[(10, 13, 11), bool],) {
    %153 = cast(%var_472, dtype="bool") /* ty=Tensor[(10, 13, 11), bool] */;
    %154 = shape_of(%var_471, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%var_471, dtype="bool") /* ty=Tensor[(10, 13, 11), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %157 = logical_or(%155, %156) /* ty=Tensor[(10, 13, 11), bool] */;
    (%157,)
  };
  %158(%var_479, %var_480) /* ty=(Tensor[(10, 13, 11), bool],) */
}

def @func_4475(%var_4472: Tensor[(450), uint64], %var_4473: float32, %var_4474: Tensor[(112), float32]) -> (Tensor[(14, 3, 6), float64], Tensor[(3360), float32], float32, Tensor[(14, 3, 6), uint64], Tensor[(4, 28), float32], Tensor[(112), float32], Tensor[(450), float32], Tensor[(14, 3, 6), float64], Tensor[(1920), int64]) {
  @func_4470(%var_4472, %var_4473, %var_4474) /* ty=(Tensor[(14, 3, 6), float64], Tensor[(3360), float32], float32, Tensor[(14, 3, 6), uint64], Tensor[(4, 28), float32], Tensor[(112), float32], Tensor[(450), float32], Tensor[(14, 3, 6), float64], Tensor[(1920), int64]) */
}

def @func_5671() -> (Tensor[(14, 3, 6), uint64],) {
  @func_5669() /* ty=(Tensor[(14, 3, 6), uint64],) */
}

def @func_1507() -> (Tensor[(14, 3, 6), float64],) {
  @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */
}

def @func_2469() -> Tensor[(14, 3, 6), float64] {
  %161 = fn () -> Tensor[(14, 3, 6), float64] {
    %159 = @func_2223() /* ty=Tensor[(14, 3, 6), float32] */;
    %160 = cast(%159, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
    acos(%160) /* ty=Tensor[(14, 3, 6), float64] */
  };
  %161() /* ty=Tensor[(14, 3, 6), float64] */
}

def @func_2318(%var_2258: Tensor[(675), float32], %var_2302: Tensor[(675), float32], %var_2306: Tensor[(16, 1430), bool]) -> (Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) {
  %162 = cast(meta[relay.Constant][12] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %163 = cast(%var_2258, dtype="float32") /* ty=Tensor[(675), float32] */;
  %164 = reshape(%162, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %165 = reshape(%163, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float32] */;
  %166 = @func_651(%164, %165) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) */;
  %167 = cast(%var_2302, dtype="bool") /* ty=Tensor[(675), bool] */;
  %168 = shape_of(%var_2258, dtype="int32") /* ty=Tensor[(1), int32] */;
  %169 = cast(%var_2258, dtype="bool") /* ty=Tensor[(675), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?), bool] */;
  %171 = cast(meta[relay.Constant][13] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %172 = %166.2;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %174 = reshape(%171, newshape=[14, 8]) /* ty=Tensor[(14, 8), float32] */;
  %175 = reshape(%173, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %176 = @func_713(%174, %175) /* ty=(Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) */;
  %177 = %176.2;
  %178 = cast(%177, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %179 = cast(%var_2306, dtype="bool") /* ty=Tensor[(16, 1430), bool] */;
  %180 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %181 = greater(%169, %170) /* ty=Tensor[(675), bool] */;
  %182 = logical_and(%178, %179) /* ty=Tensor[(16, 1430), bool] */;
  (%180, %172, meta[relay.Constant][12] /* ty=Tensor[(1430), bool] */, meta[relay.Constant][13] /* ty=Tensor[(112), float32] */, %181, %182)
}

def @func_4159(%var_4157: Tensor[(2, 15, 5), float64]) -> Tensor[(2, 15, 5), float64] {
  @func_4156(%var_4157) /* ty=Tensor[(2, 15, 5), float64] */
}

def @func_5737() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %183 = @func_3174() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) */;
  %184 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %185 = %184.1;
  %186 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %188 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%185, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %191 = %183.1;
  %192 = floor_mod(%189, %190) /* ty=Tensor[(14, 3, 6), float64] */;
  (%191, %192)
}

def @func_5395() -> Tensor[(14, 3, 6), float32] {
  @func_3304() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_4012(%var_3982: float32, %var_3984: Tensor[(4, 28), float32]) -> (float32, Tensor[(1430), bool], Tensor[(4, 28), float32], Tensor[(675), float32], Tensor[(10, 13, 11), bool], Tensor[(14, 3, 6), int8]) {
  %193 = cast(%var_3982, dtype="float32") /* ty=float32 */;
  %194 = cast(meta[relay.Constant][14] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %195 = cast(%var_3984, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %196 = cast(meta[relay.Constant][15] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %197 = reshape(%193, newshape=[]) /* ty=float32 */;
  %198 = reshape(%194, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %199 = reshape(%195, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %200 = reshape(%196, newshape=[675, 1]) /* ty=Tensor[(675, 1), float32] */;
  %201 = @func_1209(%197, %198, %199, %200) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) */;
  %202 = cast(meta[relay.Constant][14] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %203 = cast(meta[relay.Constant][14] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %204 = reshape(%202, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %205 = reshape(%203, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
  %206 = @func_478(%204, %205) /* ty=(Tensor[(10, 13, 11), bool],) */;
  %207 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  %208 = cast(%207, dtype="int8") /* ty=Tensor[(14, 3, 6), int8] */;
  %209 = cast(%var_3982, dtype="int8") /* ty=int8 */;
  %210 = %201.2;
  %211 = %206.0;
  %212 = subtract(%208, %209) /* ty=Tensor[(14, 3, 6), int8] */;
  (%210, meta[relay.Constant][14] /* ty=Tensor[(1430), bool] */, %var_3984, meta[relay.Constant][15] /* ty=Tensor[(675), float32] */, %211, %212)
}

def @func_3569(%var_3560: Tensor[(9, 11), bool]) -> Tensor[(9, 11), bool] {
  %213 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 11), bool] */, dtype="bool") /* ty=Tensor[(9, 11), bool] */;
  %214 = shape_of(%var_3560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %215 = cast(%var_3560, dtype="bool") /* ty=Tensor[(9, 11), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_and(%215, %216) /* ty=Tensor[(9, 11), bool] */
}

def @func_2407(%var_2406: Tensor[(1920), int64]) -> (Tensor[(14, 3, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) {
  %227 = fn (%var_2400: Tensor[(1920), int64]) -> (Tensor[(14, 3, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) {
    %217 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %218 = %217.0;
    %219 = cast(%218, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
    %220 = cast(%var_2400, dtype="int64") /* ty=Tensor[(1920), int64] */;
    %221 = cast(%var_2400, dtype="int64") /* ty=Tensor[(1920), int64] */;
    %222 = reshape(%220, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
    %223 = reshape(%221, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
    %224 = @func_1748(%222, %223) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
    %225 = log(%219) /* ty=Tensor[(14, 3, 6), float32] */;
    %226 = %224.1;
    (%225, %226, %var_2400)
  };
  %227(%var_2406) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */
}

def @func_3056() -> Tensor[(14, 3, 6), float32] {
  %229 = fn () -> Tensor[(14, 3, 6), float32] {
    %228 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %228.0
  };
  %229() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_3752(%var_3751: Tensor[(10, 16, 5), float32]) -> (Tensor[(10, 16, 5), float32], Tensor[(14, 3, 6), float32]) {
  %234 = fn (%var_3725: Tensor[(10, 16, 5), float32]) -> (Tensor[(10, 16, 5), float32], Tensor[(14, 3, 6), float32]) {
    %230 = cast(%var_3725, dtype="float32") /* ty=Tensor[(10, 16, 5), float32] */;
    %231 = @func_3262() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %232 = cosh(%230) /* ty=Tensor[(10, 16, 5), float32] */;
    %233 = %231.0;
    (%232, %233)
  };
  %234(%var_3751) /* ty=(Tensor[(10, 16, 5), float32], Tensor[(14, 3, 6), float32]) */
}

def @func_5205(%var_5183: Tensor[(14, 13, 8), float32], %var_5190: int8) -> (Tensor[(15, 12, 16), int8], Tensor[(2880), int8], Tensor[(14, 13, 8), int16]) {
  %235 = cast(%var_5190, dtype="int8") /* ty=int8 */;
  %236 = cast(meta[relay.Constant][17] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %237 = reshape(%235, newshape=[]) /* ty=int8 */;
  %238 = reshape(%236, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), int8] */;
  %239 = cast(%var_5183, dtype="float32") /* ty=Tensor[(14, 13, 8), float32] */;
  %240 = tan(%239) /* ty=Tensor[(14, 13, 8), float32] */;
  %241 = cast(%var_5190, dtype="uint8") /* ty=uint8 */;
  %242 = cast(%var_5183, dtype="uint8") /* ty=Tensor[(14, 13, 8), uint8] */;
  %243 = maximum(%241, %242) /* ty=Tensor[(14, 13, 8), uint8] */;
  %244 = cast(%243, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %245 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%240, dtype="int16") /* ty=Tensor[(14, 13, 8), int16] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %248 = @func_4935(%237, %238) /* ty=Tensor[(15, 12, 16), int8] */;
  %249 = bitwise_and(%246, %247) /* ty=Tensor[(14, 13, 8), int16] */;
  (%248, meta[relay.Constant][17] /* ty=Tensor[(2880), int8] */, %249)
}

def @func_1923(%var_1883: Tensor[(3360), float32], %var_1897: Tensor[(450), uint64]) -> (Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) {
  %250 = @func_1679() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %251 = cast(-8.34421f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %252 = cast(%var_1883, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %253 = reshape(%251, newshape=[]) /* ty=float32 */;
  %254 = reshape(%252, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %255 = @func_139(%253, %254) /* ty=Tensor[(16, 15, 14), float32] */;
  %256 = cast(%255, dtype="int8") /* ty=Tensor[(16, 15, 14), int8] */;
  %257 = shape_of(%var_1883, dtype="int32") /* ty=Tensor[(1), int32] */;
  %258 = cast(%var_1883, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?), int8] */;
  %260 = cast(%var_1897, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %261 = reshape(%260, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), uint64] */;
  %262 = @func_1423(%261) /* ty=(Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) */;
  %263 = %250.0;
  %264 = logical_xor(%258, %259) /* ty=Tensor[(3360), int8] */;
  %265 = %262.0;
  (%263, -8.34421f /* ty=float32 */, %264, %265, %var_1897)
}

def @func_4761(%var_4728: Tensor[(675), float32], %var_4731: Tensor[(22880), bool]) -> (Tensor[(14, 3, 6), uint64], Tensor[(675), float32], Tensor[(22880), float32], Tensor[(15, 5, 9), float64]) {
  %266 = cast(%var_4731, dtype="bool") /* ty=Tensor[(22880), bool] */;
  %267 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(22880), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(22880), bool] */, dtype="bool") /* ty=Tensor[(22880), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?), bool] */;
  %270 = equal(%268, %269) /* ty=Tensor[(22880), bool] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(22880), float32] */;
  %272 = cast(%var_4728, dtype="float32") /* ty=Tensor[(675), float32] */;
  %273 = cast(%var_4728, dtype="float32") /* ty=Tensor[(675), float32] */;
  %274 = cast(meta[relay.Constant][18] /* ty=Tensor[(22880), bool] */, dtype="bool") /* ty=Tensor[(22880), bool] */;
  %275 = reshape(%272, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %276 = reshape(%273, newshape=[675]) /* ty=Tensor[(675), float32] */;
  %277 = reshape(%274, newshape=[16, 1430]) /* ty=Tensor[(16, 1430), bool] */;
  %278 = @func_2318(%275, %276, %277) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) */;
  %279 = %278.1;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %281 = @func_2587() /* ty=Tensor[(14, 3, 6), uint64] */;
  %282 = log(%271) /* ty=Tensor[(22880), float32] */;
  %283 = erf(%280) /* ty=Tensor[(15, 5, 9), float64] */;
  (%281, %var_4728, %282, %283)
}

def @func_1214(%var_1210: float32, %var_1211: Tensor[(1430), bool], %var_1212: Tensor[(112), float32], %var_1213: Tensor[(675, 1), float32]) -> (Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) {
  %301 = fn (%var_1161: float32, %var_1164: Tensor[(1430), bool], %var_1201: Tensor[(112), float32], %var_1202: Tensor[(675, 1), float32]) -> (Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) {
    %284 = cast(%var_1161, dtype="float32") /* ty=float32 */;
    %285 = reshape(%284, newshape=[]) /* ty=float32 */;
    %286 = @func_401(%285) /* ty=(Tensor[(15, 1, 8), float64], Tensor[(420, 8), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(16, 15, 14), float32], float32) */;
    %287 = cast(%var_1164, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %288 = cast(%var_1164, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %289 = reshape(%287, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
    %290 = reshape(%288, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
    %291 = @func_478(%289, %290) /* ty=(Tensor[(10, 13, 11), bool],) */;
    %292 = cast(%var_1201, dtype="float32") /* ty=Tensor[(112), float32] */;
    %293 = cast(%var_1202, dtype="float32") /* ty=Tensor[(675, 1), float32] */;
    %294 = reshape(%292, newshape=[14, 8]) /* ty=Tensor[(14, 8), float32] */;
    %295 = reshape(%293, newshape=[675]) /* ty=Tensor[(675), float32] */;
    %296 = @func_713(%294, %295) /* ty=(Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) */;
    %297 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
    %298 = %286.3;
    %299 = %291.0;
    %300 = %296.1;
    (%297, %298, %var_1161, %299, %var_1164, %300, %var_1201, %var_1202)
  };
  %301(%var_1210, %var_1211, %var_1212, %var_1213) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) */
}

def @func_717(%var_715: Tensor[(14, 8), float32], %var_716: Tensor[(675), float32]) -> (Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) {
  @func_713(%var_715, %var_716) /* ty=(Tensor[(14, 8), float32], Tensor[(10, 13, 11), bool], Tensor[(1, 1430), bool], Tensor[(675), float32]) */
}

def @func_3914(%var_3856: Tensor[(13, 7, 5), uint8], %var_3884: Tensor[(1, 1430), bool], %var_3886: Tensor[(675), float32]) -> (Tensor[(13, 7, 5), bool], Tensor[(14, 3, 6), float64], Tensor[(13, 7, 5), bool], float32, Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(13, 7, 5), int64], Tensor[(13, 7, 5), float32]) {
  %302 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %303 = cast(%var_3856, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %304 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %305 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %306 = cast(%var_3856, dtype="uint8") /* ty=Tensor[(13, 7, 5), uint8] */;
  %307 = bitwise_or(%305, %306) /* ty=Tensor[(13, 7, 5), uint8] */;
  %308 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %309 = cast(%307, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %310 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
  %311 = cast(%var_3884, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %312 = cast(meta[relay.Constant][20] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %313 = cast(%var_3886, dtype="float32") /* ty=Tensor[(675), float32] */;
  %314 = reshape(%310, newshape=[]) /* ty=float32 */;
  %315 = reshape(%311, newshape=[1430]) /* ty=Tensor[(1430), bool] */;
  %316 = reshape(%312, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %317 = reshape(%313, newshape=[675, 1]) /* ty=Tensor[(675, 1), float32] */;
  %318 = @func_1209(%314, %315, %316, %317) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(3360), float32], float32, Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(10, 13, 11), bool], Tensor[(112), float32], Tensor[(675, 1), float32]) */;
  %319 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 7, 5), uint8] */, dtype="int64") /* ty=Tensor[(13, 7, 5), int64] */;
  %320 = shape_of(%var_3856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_3856, dtype="int64") /* ty=Tensor[(13, 7, 5), int64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 7, 5), uint8] */, dtype="float32") /* ty=Tensor[(13, 7, 5), float32] */;
  %324 = equal(%302, %303) /* ty=Tensor[(13, 7, 5), bool] */;
  %325 = %304.0;
  %326 = not_equal(%308, %309) /* ty=Tensor[(13, 7, 5), bool] */;
  %327 = %318.2;
  %328 = right_shift(%321, %322) /* ty=Tensor[(13, 7, 5), int64] */;
  %329 = asin(%323) /* ty=Tensor[(13, 7, 5), float32] */;
  (%324, %325, %326, %327, %var_3884, meta[relay.Constant][20] /* ty=Tensor[(112), float32] */, %var_3886, %328, %329)
}

def @func_5483(%var_5481: Tensor[(3360), float32], %var_5482: Tensor[(1, 450), uint64]) -> (Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], float32, Tensor[(3360), float32], Tensor[(1, 450), uint64]) {
  @func_5479(%var_5481, %var_5482) /* ty=(Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], float32, Tensor[(3360), float32], Tensor[(1, 450), uint64]) */
}

def @func_4677(%var_4675: Tensor[(112), float32], %var_4676: Tensor[(675), float32]) -> (Tensor[(14, 3, 6), uint64], Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64], Tensor[(12, 15, 6), float32], Tensor[(1080), float32], float32) {
  @func_4673(%var_4675, %var_4676) /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64], Tensor[(12, 15, 6), float32], Tensor[(1080), float32], float32) */
}

def @func_5324(%var_5321: Tensor[(1080), float32], %var_5322: Tensor[(450), uint64], %var_5323: Tensor[(80), float64]) -> (Tensor[(14, 3, 6), float32], Tensor[(9, 11), bool], Tensor[(14, 3, 6), float64], Tensor[(1080), float32], float32, Tensor[(450), uint64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(5, 16, 1), float64], Tensor[(80), float64]) {
  @func_5319(%var_5321, %var_5322, %var_5323) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(9, 11), bool], Tensor[(14, 3, 6), float64], Tensor[(1080), float32], float32, Tensor[(450), uint64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(5, 16, 1), float64], Tensor[(80), float64]) */
}

def @main(%var_5986: Tensor[(840, 4), float64]) -> (Tensor[(14, 3, 6), float64], Tensor[(16, 15, 14), float32], Tensor[(14, 3, 6), uint64], Tensor[(1920), float32], Tensor[(10, 12, 16), float64], Tensor[(840, 4), int64], Tensor[(840, 4), float32]) {
  %330 = @func_2218() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %331 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %332 = %331.0;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %334 = cast(%332, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %335 = cast(meta[relay.Constant][22] /* ty=Tensor[(840, 4), float32] */, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %336 = reshape(%333, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %337 = reshape(%334, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %338 = reshape(%335, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %339 = @func_1658(%336, %337, %338) /* ty=(Tensor[(14, 3, 6), bool], Tensor[(14, 3, 6), int16], Tensor[(16, 15, 14), float32], Tensor[(336), float32], Tensor[(3360), float32]) */;
  %340 = @func_5698() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %341 = @func_5165() /* ty=Tensor[(1920), float32] */;
  %342 = cast(%341, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %343 = reshape(%342, newshape=[1920]) /* ty=Tensor[(1920), int64] */;
  %344 = @func_2407(%343) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %345 = cast(meta[relay.Constant][22] /* ty=Tensor[(840, 4), float32] */, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %346 = rsqrt(%345) /* ty=Tensor[(840, 4), float32] */;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(840, 4), float64] */;
  %348 = asinh(%347) /* ty=Tensor[(840, 4), float64] */;
  %349 = cast(%var_5986, dtype="int64") /* ty=Tensor[(840, 4), int64] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
  %351 = cast(%348, dtype="int64") /* ty=Tensor[(840, 4), int64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %353 = cast(%346, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %354 = %330.0;
  %355 = %339.2;
  %356 = %340.0;
  %357 = @func_5165() /* ty=Tensor[(1920), float32] */;
  %358 = %344.1;
  %359 = logical_xor(%351, %352) /* ty=Tensor[(840, 4), int64] */;
  %360 = atanh(%353) /* ty=Tensor[(840, 4), float32] */;
  (%354, %355, %356, %357, %358, %359, %360)
}

def @func_5121() -> (Tensor[(14, 3, 6), float64], Tensor[(9, 11), bool], Tensor[(11, 9), bool]) {
  %366 = fn () -> (Tensor[(14, 3, 6), float64], Tensor[(9, 11), bool], Tensor[(11, 9), bool]) {
    %361 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %362 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 9), bool] */, dtype="bool") /* ty=Tensor[(11, 9), bool] */;
    %363 = reshape(%362, newshape=[9, 11]) /* ty=Tensor[(9, 11), bool] */;
    %364 = %361.0;
    %365 = @func_3569(%363) /* ty=Tensor[(9, 11), bool] */;
    (%364, %365, meta[relay.Constant][23] /* ty=Tensor[(11, 9), bool] */)
  };
  %366() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(9, 11), bool], Tensor[(11, 9), bool]) */
}

def @func_1464() -> Tensor[(14, 3, 6), float32] {
  %367 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %367.0
}

def @func_1466() -> Tensor[(14, 3, 6), float32] {
  @func_1464() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_2570(%var_2568: Tensor[(13, 5, 4), float64], %var_2569: Tensor[(13, 5, 4), float64]) -> (Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), bool]) {
  %377 = fn (%var_2545: Tensor[(13, 5, 4), float64], %var_2559: Tensor[(13, 5, 4), float64]) -> (Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), bool]) {
    %368 = cast(%var_2545, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
    %369 = tan(%368) /* ty=Tensor[(13, 5, 4), float64] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
    %371 = cast(%var_2559, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
    %372 = shape_of(%var_2545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %373 = cast(%var_2545, dtype="bool") /* ty=Tensor[(13, 5, 4), bool] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %375 = cos(%370) /* ty=Tensor[(13, 5, 4), float64] */;
    %376 = less(%373, %374) /* ty=Tensor[(13, 5, 4), bool] */;
    (%375, %376)
  };
  %377(%var_2568, %var_2569) /* ty=(Tensor[(13, 5, 4), float64], Tensor[(13, 5, 4), bool]) */
}

def @func_1518() -> (Tensor[(14, 3, 6), float32],) {
  %380 = fn () -> (Tensor[(14, 3, 6), float32],) {
    %378 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %379 = %378.0;
    (%379,)
  };
  %380() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_2689(%var_2660: Tensor[(10, 45), uint64], %var_2673: float32) -> (Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) {
  %381 = @func_1078() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %382 = cast(meta[relay.Constant][24] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %383 = cast(%var_2660, dtype="uint64") /* ty=Tensor[(10, 45), uint64] */;
  %384 = reshape(%382, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %385 = reshape(%383, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %386 = @func_1923(%384, %385) /* ty=(Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) */;
  %387 = cast(meta[relay.Constant][25] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %388 = cast(%var_2673, dtype="float32") /* ty=float32 */;
  %389 = reshape(%387, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %390 = reshape(%388, newshape=[]) /* ty=float32 */;
  %391 = @func_1573(%389, %390) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %392 = %381.0;
  %393 = %386.3;
  %394 = %391.3;
  (%392, %393, meta[relay.Constant][24] /* ty=Tensor[(3360), float32] */, %var_2660, %394, meta[relay.Constant][25] /* ty=Tensor[(80), float64] */, %var_2673)
}

def @func_4721(%var_4719: uint32, %var_4720: Tensor[(7, 1, 8), uint32]) -> (Tensor[(7, 1, 8), uint32],) {
  %398 = fn (%var_4702: uint32, %var_4703: Tensor[(7, 1, 8), uint32]) -> (Tensor[(7, 1, 8), uint32],) {
    %395 = cast(%var_4702, dtype="uint32") /* ty=uint32 */;
    %396 = cast(%var_4703, dtype="uint32") /* ty=Tensor[(7, 1, 8), uint32] */;
    %397 = subtract(%395, %396) /* ty=Tensor[(7, 1, 8), uint32] */;
    (%397,)
  };
  %398(%var_4719, %var_4720) /* ty=(Tensor[(7, 1, 8), uint32],) */
}

def @func_3176() -> (Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) {
  @func_3174() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) */
}

def @func_4267() -> (Tensor[(14, 3, 6), uint64],) {
  %400 = fn () -> (Tensor[(14, 3, 6), uint64],) {
    %399 = @func_2587() /* ty=Tensor[(14, 3, 6), uint64] */;
    (%399,)
  };
  %400() /* ty=(Tensor[(14, 3, 6), uint64],) */
}

def @func_3264() -> (Tensor[(14, 3, 6), float32],) {
  @func_3262() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_3526(%var_3467: float32, %var_3468: Tensor[(3360), float32]) -> (Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(16, 15, 14), float64], Tensor[(14, 3, 6), float32]) {
  %401 = cast(%var_3467, dtype="float32") /* ty=float32 */;
  %402 = cast(%var_3468, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %403 = reshape(%401, newshape=[]) /* ty=float32 */;
  %404 = reshape(%402, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %405 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %406 = @func_2223() /* ty=Tensor[(14, 3, 6), float32] */;
  %407 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %408 = %407.0;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %410 = sqrt(%409) /* ty=Tensor[(14, 3, 6), float32] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %412 = sigmoid(%411) /* ty=Tensor[(14, 3, 6), float32] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %414 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%406, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %417 = cast(%var_3467, dtype="float32") /* ty=float32 */;
  %418 = cast(%var_3468, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %419 = reshape(%417, newshape=[]) /* ty=float32 */;
  %420 = reshape(%418, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %421 = @func_139(%419, %420) /* ty=Tensor[(16, 15, 14), float32] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %423 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %424 = @func_139(%403, %404) /* ty=Tensor[(16, 15, 14), float32] */;
  %425 = %405.0;
  %426 = floor_divide(%415, %416) /* ty=Tensor[(14, 3, 6), float32] */;
  %427 = @func_3055() /* ty=Tensor[(14, 3, 6), float32] */;
  %428 = asin(%422) /* ty=Tensor[(16, 15, 14), float64] */;
  %429 = %423.0;
  (%424, %var_3467, %var_3468, %425, %426, %427, %428, %429)
}

def @func_4789() -> Tensor[(14, 3, 6), float64] {
  @func_2468() /* ty=Tensor[(14, 3, 6), float64] */
}

def @func_655(%var_653: Tensor[(1430), bool], %var_654: Tensor[(15, 5, 9), float32]) -> (Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) {
  @func_651(%var_653, %var_654) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(15, 5, 9), uint64]) */
}

def @func_5513(%var_5511: Tensor[(1, 2, 16), float32]) -> (Tensor[(1, 2, 16), float32],) {
  @func_5510(%var_5511) /* ty=(Tensor[(1, 2, 16), float32],) */
}

def @func_5796(%var_5794: Tensor[(16, 1, 4), uint8], %var_5795: Tensor[(16, 1, 4), uint8]) -> (Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(16, 13, 4), bool], Tensor[(16, ?, 4), float64]) {
  %456 = fn (%var_5751: Tensor[(16, 1, 4), uint8], %var_5752: Tensor[(16, 1, 4), uint8]) -> (Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(16, 13, 4), bool], Tensor[(16, ?, 4), float64]) {
    %430 = cast(meta[relay.Constant][26] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %431 = cast(meta[relay.Constant][26] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %432 = reshape(%430, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
    %433 = reshape(%431, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
    %434 = @func_478(%432, %433) /* ty=(Tensor[(10, 13, 11), bool],) */;
    %435 = cast(%var_5751, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    %436 = log2(%435) /* ty=Tensor[(16, 1, 4), float32] */;
    %437 = cast(%var_5752, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
    %438 = shape_of(%var_5751, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%var_5751, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %441 = greater_equal(%439, %440) /* ty=Tensor[(16, ?, 4), bool] */;
    %442 = cast(%441, dtype="float32") /* ty=Tensor[(16, ?, 4), float32] */;
    %443 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%436, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %446 = multiply(%444, %445) /* ty=Tensor[(16, ?, 4), float32] */;
    %447 = cast(%446, dtype="bool") /* ty=Tensor[(16, ?, 4), bool] */;
    %448 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(16, 13, 4), bool] */;
    %449 = cast(%436, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
    %450 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %451 = cast(%446, dtype="float64") /* ty=Tensor[(16, ?, 4), float64] */;
    %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %453 = %434.0;
    %454 = not_equal(%447, %448) /* ty=Tensor[(16, 13, 4), bool] */;
    %455 = mod(%451, %452) /* ty=Tensor[(16, ?, 4), float64] */;
    (%453, meta[relay.Constant][26] /* ty=Tensor[(1430), bool] */, %454, %455)
  };
  %456(%var_5794, %var_5795) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(1430), bool], Tensor[(16, 13, 4), bool], Tensor[(16, ?, 4), float64]) */
}

def @func_5825() -> Tensor[(1920), float64] {
  @func_5823() /* ty=Tensor[(1920), float64] */
}

def @func_2972(%var_2970: Tensor[(8, 4, 11), int64]) -> Tensor[(8, 4, 11), int64] {
  @func_2969(%var_2970) /* ty=Tensor[(8, 4, 11), int64] */
}

def @func_5896(%var_5858: Tensor[(56), uint32]) -> (Tensor[(10, 13, 11), bool], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64], Tensor[(7, 1, 8), float64]) {
  %457 = @func_2127() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) */;
  %458 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %459 = @func_3769() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) */;
  %460 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %461 = cast(%var_5858, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %462 = reshape(%460, newshape=[]) /* ty=uint32 */;
  %463 = reshape(%461, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint32] */;
  %464 = @func_4718(%462, %463) /* ty=(Tensor[(7, 1, 8), uint32],) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(7, 1, 8), float32] */;
  %467 = sinh(%466) /* ty=Tensor[(7, 1, 8), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(7, 1, 8), float64] */;
  %469 = %457.1;
  %470 = %458.2;
  %471 = %459.1;
  %472 = acosh(%468) /* ty=Tensor[(7, 1, 8), float64] */;
  (%469, meta[relay.Constant][28] /* ty=uint32 */, %var_5858, %470, %471, %472)
}

def @func_5899(%var_5897: Tensor[(56), uint32]) -> (Tensor[(10, 13, 11), bool], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64], Tensor[(7, 1, 8), float64]) {
  @func_5896(%var_5897) /* ty=(Tensor[(10, 13, 11), bool], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64], Tensor[(7, 1, 8), float64]) */
}

def @func_1653(%var_1609: Tensor[(14, 3, 6), float32], %var_1622: Tensor[(14, 3, 6), float32], %var_1644: Tensor[(3360), float32]) -> (Tensor[(14, 3, 6), bool], Tensor[(14, 3, 6), int16], Tensor[(16, 15, 14), float32], Tensor[(336), float32], Tensor[(3360), float32]) {
  %473 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %474 = %473.0;
  %475 = cast(%var_1609, dtype="bool") /* ty=Tensor[(14, 3, 6), bool] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="bool") /* ty=Tensor[(14, 3, 6), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = cast(%var_1622, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
  %480 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%474, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %483 = cast(meta[relay.Constant][29] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %484 = cast(%var_1644, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %485 = reshape(%483, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), float32] */;
  %486 = reshape(%484, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
  %487 = @func_247(%485, %486) /* ty=(Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) */;
  %488 = greater_equal(%477, %478) /* ty=Tensor[(14, 3, 6), bool] */;
  %489 = bitwise_or(%481, %482) /* ty=Tensor[(14, 3, 6), int16] */;
  %490 = %487.1;
  (%488, %489, %490, meta[relay.Constant][29] /* ty=Tensor[(336), float32] */, %var_1644)
}

def @func_5383(%var_5381: Tensor[(13, 1, 14), uint32], %var_5382: Tensor[(13, 10, 14), uint32]) -> (Tensor[(13, 10, 14), uint32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64], Tensor[(5, 6, 15), float32], Tensor[(450), uint64]) {
  @func_5379(%var_5381, %var_5382) /* ty=(Tensor[(13, 10, 14), uint32], Tensor[(10, 12, 16), float64], Tensor[(1920), int64], Tensor[(5, 6, 15), float32], Tensor[(450), uint64]) */
}

def @func_4907() -> (Tensor[(14, 3, 6), float64],) {
  %493 = fn () -> (Tensor[(14, 3, 6), float64],) {
    %491 = @func_1679() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %492 = %491.0;
    (%492,)
  };
  %493() /* ty=(Tensor[(14, 3, 6), float64],) */
}

def @func_4367() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %498 = fn () -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
    %494 = @func_4227() /* ty=(Tensor[(11, 16, 5), float32], Tensor[(14, 3, 6), float32]) */;
    %495 = %494.1;
    %496 = @func_4253() /* ty=Tensor[(14, 3, 6), float32] */;
    %497 = @func_2846() /* ty=Tensor[(14, 3, 6), float64] */;
    (%495, %496, %497)
  };
  %498() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */
}

def @func_3771() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) {
  @func_3769() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) */
}

def @func_5060() -> (Tensor[(13, 14, 2), int32],) {
  %506 = fn () -> (Tensor[(13, 14, 2), int32],) {
    %499 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
    %500 = atanh(%499) /* ty=Tensor[(13, 14, 2), float32] */;
    %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 14, 2), float32] */, dtype="int32") /* ty=Tensor[(13, 14, 2), int32] */;
    %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
    %503 = cast(%500, dtype="int32") /* ty=Tensor[(13, 14, 2), int32] */;
    %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %505 = logical_xor(%503, %504) /* ty=Tensor[(13, 14, 2), int32] */;
    (%505,)
  };
  %506() /* ty=(Tensor[(13, 14, 2), int32],) */
}

def @func_1748(%var_1727: Tensor[(10, 12, 16), int64], %var_1728: Tensor[(10, 12, 16), int64]) -> (Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) {
  %507 = cast(%var_1727, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  %508 = cast(%var_1728, dtype="float32") /* ty=Tensor[(10, 12, 16), float32] */;
  %509 = tan(%508) /* ty=Tensor[(10, 12, 16), float32] */;
  %510 = cast(%var_1728, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %511 = shape_of(%var_1727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_1727, dtype="int64") /* ty=Tensor[(10, 12, 16), int64] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %514 = bitwise_xor(%512, %513) /* ty=Tensor[(10, 12, 16), int64] */;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  %516 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%509, dtype="float64") /* ty=Tensor[(10, 12, 16), float64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %519 = acos(%507) /* ty=Tensor[(10, 12, 16), float64] */;
  %520 = mod(%517, %518) /* ty=Tensor[(10, 12, 16), float64] */;
  (%519, %520)
}

def @func_2893(%var_2892: Tensor[(15, 13, 4), float32]) -> Tensor[(15, 13, 4), float32] {
  %522 = fn (%var_2888: Tensor[(15, 13, 4), float32]) -> Tensor[(15, 13, 4), float32] {
    %521 = cast(%var_2888, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
    sqrt(%521) /* ty=Tensor[(15, 13, 4), float32] */
  };
  %522(%var_2892) /* ty=Tensor[(15, 13, 4), float32] */
}

def @func_250(%var_248: Tensor[(4, 6, 14), float32], %var_249: Tensor[(420, 8), float32]) -> (Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) {
  %530 = fn (%var_226: Tensor[(4, 6, 14), float32], %var_237: Tensor[(420, 8), float32]) -> (Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) {
    %523 = cast(%var_226, dtype="float32") /* ty=Tensor[(4, 6, 14), float32] */;
    %524 = cast(-5.18955f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %525 = cast(%var_237, dtype="float32") /* ty=Tensor[(420, 8), float32] */;
    %526 = reshape(%524, newshape=[]) /* ty=float32 */;
    %527 = reshape(%525, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
    %528 = sinh(%523) /* ty=Tensor[(4, 6, 14), float32] */;
    %529 = @func_139(%526, %527) /* ty=Tensor[(16, 15, 14), float32] */;
    (%528, %529, -5.18955f /* ty=float32 */, %var_237)
  };
  %530(%var_248, %var_249) /* ty=(Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) */
}

def @func_2958(%var_2957: Tensor[(16, 14, 1), float32]) -> (Tensor[(112), float32], Tensor[(225, 3), float32], Tensor[(572, 40), bool], Tensor[(16, 14, ?), bool], Tensor[(16, 14, 1), float32]) {
  %550 = fn (%var_2918: Tensor[(16, 14, 1), float32]) -> (Tensor[(112), float32], Tensor[(225, 3), float32], Tensor[(572, 40), bool], Tensor[(16, 14, ?), bool], Tensor[(16, 14, 1), float32]) {
    %531 = cast(meta[relay.Constant][31] /* ty=Tensor[(225, 3), float32] */, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
    %532 = cast(meta[relay.Constant][31] /* ty=Tensor[(225, 3), float32] */, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
    %533 = cast(meta[relay.Constant][32] /* ty=Tensor[(572, 40), bool] */, dtype="bool") /* ty=Tensor[(572, 40), bool] */;
    %534 = reshape(%531, newshape=[675]) /* ty=Tensor[(675), float32] */;
    %535 = reshape(%532, newshape=[675]) /* ty=Tensor[(675), float32] */;
    %536 = reshape(%533, newshape=[16, 1430]) /* ty=Tensor[(16, 1430), bool] */;
    %537 = @func_2318(%534, %535, %536) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) */;
    %538 = cast(%var_2918, dtype="float32") /* ty=Tensor[(16, 14, 1), float32] */;
    %539 = atan(%538) /* ty=Tensor[(16, 14, 1), float32] */;
    %540 = cast(%539, dtype="bool") /* ty=Tensor[(16, 14, 1), bool] */;
    %541 = shape_of(%var_2918, dtype="int32") /* ty=Tensor[(3), int32] */;
    %542 = cast(%var_2918, dtype="bool") /* ty=Tensor[(16, 14, 1), bool] */;
    %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %544 = cast(%539, dtype="float32") /* ty=Tensor[(16, 14, 1), float32] */;
    %545 = exp(%544) /* ty=Tensor[(16, 14, 1), float32] */;
    %546 = cast(%545, dtype="float32") /* ty=Tensor[(16, 14, 1), float32] */;
    %547 = %537.3;
    %548 = less(%542, %543) /* ty=Tensor[(16, 14, ?), bool] */;
    %549 = atanh(%546) /* ty=Tensor[(16, 14, 1), float32] */;
    (%547, meta[relay.Constant][31] /* ty=Tensor[(225, 3), float32] */, meta[relay.Constant][32] /* ty=Tensor[(572, 40), bool] */, %548, %549)
  };
  %550(%var_2957) /* ty=(Tensor[(112), float32], Tensor[(225, 3), float32], Tensor[(572, 40), bool], Tensor[(16, 14, ?), bool], Tensor[(16, 14, 1), float32]) */
}

def @func_3965(%var_3962: Tensor[(15, 3, 2), int64], %var_3963: Tensor[(15, 3, 2), int64], %var_3964: Tensor[(15, 3, 2), int64]) -> (Tensor[(15, 3, 2), bool], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(15, 3, 2), bool]) {
  %563 = fn (%var_3933: Tensor[(15, 3, 2), int64], %var_3934: Tensor[(15, 3, 2), int64], %var_3953: Tensor[(15, 3, 2), int64]) -> (Tensor[(15, 3, 2), bool], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(15, 3, 2), bool]) {
    %551 = cast(%var_3934, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %552 = shape_of(%var_3933, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%var_3933, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %555 = cast(%var_3953, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %556 = shape_of(%var_3933, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%var_3933, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %559 = less(%553, %554) /* ty=Tensor[(15, 3, 2), bool] */;
    %560 = @func_3304() /* ty=Tensor[(14, 3, 6), float32] */;
    %561 = @func_2092() /* ty=Tensor[(14, 3, 6), float32] */;
    %562 = greater_equal(%557, %558) /* ty=Tensor[(15, 3, 2), bool] */;
    (%559, %560, %561, %562)
  };
  %563(%var_3962, %var_3963, %var_3964) /* ty=(Tensor[(15, 3, 2), bool], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(15, 3, 2), bool]) */
}

def @func_4970() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
  @func_4968() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */
}

def @func_2066(%var_2052: Tensor[(14, 3, 6), float32]) -> (Tensor[(14, 3, 6), float32],) {
  %564 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
  %565 = cast(%var_2052, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %569 = power(%567, %568) /* ty=Tensor[(14, 3, 6), float32] */;
  (%569,)
}

def @func_4470(%var_4410: Tensor[(450), uint64], %var_4411: float32, %var_4440: Tensor[(112), float32]) -> (Tensor[(14, 3, 6), float64], Tensor[(3360), float32], float32, Tensor[(14, 3, 6), uint64], Tensor[(4, 28), float32], Tensor[(112), float32], Tensor[(450), float32], Tensor[(14, 3, 6), float64], Tensor[(1920), int64]) {
  %570 = @func_3088() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) */;
  %571 = cast(%var_4410, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %572 = cast(%var_4411, dtype="float32") /* ty=float32 */;
  %573 = reshape(%571, newshape=[10, 45]) /* ty=Tensor[(10, 45), uint64] */;
  %574 = reshape(%572, newshape=[]) /* ty=float32 */;
  %575 = @func_2689(%573, %574) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) */;
  %576 = @func_4266() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %577 = cast(%var_4411, dtype="float32") /* ty=float32 */;
  %578 = cast(%var_4440, dtype="float32") /* ty=Tensor[(112), float32] */;
  %579 = reshape(%577, newshape=[]) /* ty=float32 */;
  %580 = reshape(%578, newshape=[4, 28]) /* ty=Tensor[(4, 28), float32] */;
  %581 = @func_4012(%579, %580) /* ty=(float32, Tensor[(1430), bool], Tensor[(4, 28), float32], Tensor[(675), float32], Tensor[(10, 13, 11), bool], Tensor[(14, 3, 6), int8]) */;
  %582 = cast(%var_4410, dtype="float64") /* ty=Tensor[(450), float64] */;
  %583 = sinh(%582) /* ty=Tensor[(450), float64] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(450), float32] */;
  %585 = cast(meta[relay.Constant][33] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
  %586 = sin(%584) /* ty=Tensor[(450), float32] */;
  %587 = cast(%586, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %588 = reshape(%585, newshape=[2, 960]) /* ty=Tensor[(2, 960), int64] */;
  %589 = reshape(%587, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %590 = @func_3344(%588, %589) /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(2, 960), int64], float32, Tensor[(1680, 2), float32], Tensor[(450), uint64], Tensor[(14, 3, 6), float32]) */;
  %591 = %570.1;
  %592 = %575.4;
  %593 = %576.0;
  %594 = %581.2;
  %595 = %590.0;
  (%591, %592, %var_4411, %593, %594, %var_4440, %586, %595, meta[relay.Constant][33] /* ty=Tensor[(1920), int64] */)
}

def @func_2790(%var_2746: Tensor[(12, 15, 6), float32], %var_2747: Tensor[(12, 15, 6), float32], %var_2757: float32, %var_2778: Tensor[(450), uint64]) -> (Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) {
  %596 = cast(%var_2747, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
  %597 = shape_of(%var_2746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%var_2746, dtype="float32") /* ty=Tensor[(12, 15, 6), float32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %600 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %601 = cast(meta[relay.Constant][34] /* ty=Tensor[(40, 2), float64] */, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
  %602 = cast(%var_2757, dtype="float32") /* ty=float32 */;
  %603 = reshape(%601, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %604 = reshape(%602, newshape=[]) /* ty=float32 */;
  %605 = @func_1573(%603, %604) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %606 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %607 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %608 = cast(%var_2778, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %609 = cast(%var_2757, dtype="float32") /* ty=float32 */;
  %610 = reshape(%608, newshape=[10, 45]) /* ty=Tensor[(10, 45), uint64] */;
  %611 = reshape(%609, newshape=[]) /* ty=float32 */;
  %612 = @func_2689(%610, %611) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) */;
  %613 = @func_2127() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) */;
  %614 = power(%598, %599) /* ty=Tensor[(12, 15, 6), float32] */;
  %615 = %600.0;
  %616 = %605.3;
  %617 = %606.0;
  %618 = %607.1;
  %619 = %612.3;
  %620 = %613.2;
  (%614, %615, %616, meta[relay.Constant][34] /* ty=Tensor[(40, 2), float64] */, %var_2757, %617, %618, %619, %var_2778, %620)
}

def @func_2224() -> Tensor[(14, 3, 6), float32] {
  %622 = fn () -> Tensor[(14, 3, 6), float32] {
    %621 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %621.0
  };
  %622() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_3229() -> (Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) {
  %633 = fn () -> (Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) {
    %623 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
    %624 = %623.2;
    %625 = cast(meta[relay.Constant][35] /* ty=Tensor[(1920), int64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(1), int32] */;
    %627 = cast(%624, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?), float64] */;
    %629 = power(%627, %628) /* ty=Tensor[(1920), float64] */;
    %630 = cast(%629, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %631 = @func_2587() /* ty=Tensor[(14, 3, 6), uint64] */;
    %632 = log10(%630) /* ty=Tensor[(1920), float32] */;
    (%631, %632)
  };
  %633() /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) */
}

def @func_1927(%var_1925: Tensor[(3360), float32], %var_1926: Tensor[(450), uint64]) -> (Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) {
  @func_1923(%var_1925, %var_1926) /* ty=(Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) */
}

def @func_5033(%var_5032: Tensor[(56), uint32]) -> (Tensor[(14, 3, 6), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(800), float32], Tensor[(7, 1, 8), uint32], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float32]) {
  %654 = fn (%var_5013: Tensor[(56), uint32]) -> (Tensor[(14, 3, 6), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(800), float32], Tensor[(7, 1, 8), uint32], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float32]) {
    %634 = @func_2468() /* ty=Tensor[(14, 3, 6), float64] */;
    %635 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 3, 6), float64] */, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
    %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
    %637 = cast(%634, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %639 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
    %640 = cast(meta[relay.Constant][37] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
    %641 = reshape(%640, newshape=[10, 16, 5]) /* ty=Tensor[(10, 16, 5), float32] */;
    %642 = @func_3750(%641) /* ty=(Tensor[(10, 16, 5), float32], Tensor[(14, 3, 6), float32]) */;
    %643 = cast(meta[relay.Constant][38] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %644 = cast(%var_5013, dtype="uint32") /* ty=Tensor[(56), uint32] */;
    %645 = reshape(%643, newshape=[]) /* ty=uint32 */;
    %646 = reshape(%644, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), uint32] */;
    %647 = @func_4718(%645, %646) /* ty=(Tensor[(7, 1, 8), uint32],) */;
    %648 = @func_3174() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) */;
    %649 = add(%637, %638) /* ty=Tensor[(14, 3, 6), uint32] */;
    %650 = atanh(%639) /* ty=Tensor[(14, 3, 6), float64] */;
    %651 = %642.1;
    %652 = %647.0;
    %653 = %648.1;
    (%649, %650, %651, meta[relay.Constant][37] /* ty=Tensor[(800), float32] */, %652, meta[relay.Constant][38] /* ty=uint32 */, %var_5013, %653)
  };
  %654(%var_5032) /* ty=(Tensor[(14, 3, 6), uint32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32], Tensor[(800), float32], Tensor[(7, 1, 8), uint32], uint32, Tensor[(56), uint32], Tensor[(14, 3, 6), float32]) */
}

def @func_2323(%var_2320: Tensor[(675), float32], %var_2321: Tensor[(675), float32], %var_2322: Tensor[(16, 1430), bool]) -> (Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) {
  @func_2318(%var_2320, %var_2321, %var_2322) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(15, 5, 9), uint64], Tensor[(1430), bool], Tensor[(112), float32], Tensor[(675), bool], Tensor[(16, 1430), bool]) */
}

def @func_5138(%var_5136: bool, %var_5137: Tensor[(9, 10, 16), bool]) -> Tensor[(9, 10, 16), bool] {
  @func_5134(%var_5136, %var_5137) /* ty=Tensor[(9, 10, 16), bool] */
}

def @func_4968() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
  %655 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %656 = @func_4034() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %657 = %655.0;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %659 = reshape(%658, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %660 = @func_2066(%659) /* ty=(Tensor[(14, 3, 6), float32],) */;
  %661 = %656.0;
  %662 = %660.0;
  (%657, %661, %662)
}

def @func_2218() -> (Tensor[(14, 3, 6), float64],) {
  @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */
}

def @func_5669() -> (Tensor[(14, 3, 6), uint64],) {
  %663 = @func_4266() /* ty=(Tensor[(14, 3, 6), uint64],) */;
  %664 = %663.0;
  (%664,)
}

def @func_1079() -> (Tensor[(14, 3, 6), float32],) {
  %669 = fn () -> (Tensor[(14, 3, 6), float32],) {
    %665 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
    %666 = atan(%665) /* ty=Tensor[(14, 3, 6), float64] */;
    %667 = cast(%666, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
    %668 = log10(%667) /* ty=Tensor[(14, 3, 6), float32] */;
    (%668,)
  };
  %669() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_5209(%var_5207: Tensor[(14, 13, 8), float32], %var_5208: int8) -> (Tensor[(15, 12, 16), int8], Tensor[(2880), int8], Tensor[(14, 13, 8), int16]) {
  @func_5205(%var_5207, %var_5208) /* ty=(Tensor[(15, 12, 16), int8], Tensor[(2880), int8], Tensor[(14, 13, 8), int16]) */
}

def @func_5479(%var_5446: Tensor[(3360), float32], %var_5447: Tensor[(1, 450), uint64]) -> (Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], float32, Tensor[(3360), float32], Tensor[(1, 450), uint64]) {
  %670 = @func_5156() /* ty=(Tensor[(14, 3, 6), float32],) */;
  %671 = %670.0;
  %672 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 3, 6), float32] */, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %676 = @func_2216() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %677 = cast(%var_5446, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %678 = cast(%var_5447, dtype="uint64") /* ty=Tensor[(1, 450), uint64] */;
  %679 = reshape(%677, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %680 = reshape(%678, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %681 = @func_1923(%679, %680) /* ty=(Tensor[(14, 3, 6), float64], float32, Tensor[(3360), int8], Tensor[(5, 6, 15), uint64], Tensor[(450), uint64]) */;
  %682 = divide(%674, %675) /* ty=Tensor[(14, 3, 6), float64] */;
  %683 = %676.0;
  %684 = %681.1;
  (%682, %683, %684, %var_5446, %var_5447)
}

def @func_1573(%var_1556: Tensor[(5, 16, 1), float64], %var_1569: float32) -> (Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) {
  %685 = cast(%var_1556, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %686 = cast(%var_1569, dtype="float32") /* ty=float32 */;
  %687 = cast(meta[relay.Constant][41] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %688 = reshape(%686, newshape=[]) /* ty=float32 */;
  %689 = reshape(%687, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
  %690 = sin(%685) /* ty=Tensor[(5, 16, 1), float64] */;
  %691 = @func_139(%688, %689) /* ty=Tensor[(16, 15, 14), float32] */;
  (%690, %691, %var_1569, meta[relay.Constant][41] /* ty=Tensor[(3360), float32] */)
}

def @func_1680() -> (Tensor[(14, 3, 6), float64],) {
  %694 = fn () -> (Tensor[(14, 3, 6), float64],) {
    %692 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %693 = %692.0;
    (%693,)
  };
  %694() /* ty=(Tensor[(14, 3, 6), float64],) */
}

def @func_2514() -> (Tensor[(14, 3, 6), float32],) {
  %696 = fn () -> (Tensor[(14, 3, 6), float32],) {
    %695 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
    (%695,)
  };
  %696() /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_4866(%var_4864: float64, %var_4865: Tensor[(14, 3, 14), float64]) -> Tensor[(14, 3, 14), uint8] {
  %702 = fn (%var_4833: float64, %var_4834: Tensor[(14, 3, 14), float64]) -> Tensor[(14, 3, 14), uint8] {
    %697 = cast(%var_4833, dtype="float64") /* ty=float64 */;
    %698 = cast(%var_4834, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
    %699 = divide(%697, %698) /* ty=Tensor[(14, 3, 14), float64] */;
    %700 = cast(%var_4833, dtype="uint8") /* ty=uint8 */;
    %701 = cast(%699, dtype="uint8") /* ty=Tensor[(14, 3, 14), uint8] */;
    add(%700, %701) /* ty=Tensor[(14, 3, 14), uint8] */
  };
  %702(%var_4864, %var_4865) /* ty=Tensor[(14, 3, 14), uint8] */
}

def @func_2374() -> (Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) {
  %711 = fn () -> (Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) {
    %703 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %704 = cast(meta[relay.Constant][42] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
    %705 = cast(meta[relay.Constant][42] /* ty=Tensor[(1920), int64] */, dtype="int64") /* ty=Tensor[(1920), int64] */;
    %706 = reshape(%704, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
    %707 = reshape(%705, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), int64] */;
    %708 = @func_1748(%706, %707) /* ty=(Tensor[(10, 12, 16), float64], Tensor[(10, 12, 16), float64]) */;
    %709 = %703.0;
    %710 = %708.0;
    (%709, %710, meta[relay.Constant][42] /* ty=Tensor[(1920), int64] */)
  };
  %711() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */
}

def @func_5563() -> (Tensor[(5, 3, 6), bool], Tensor[(1920), float32], Tensor[(5, 3, 6), float32]) {
  %719 = fn () -> (Tensor[(5, 3, 6), bool], Tensor[(1920), float32], Tensor[(5, 3, 6), float32]) {
    %712 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 1, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 1, 6), bool] */;
    %713 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 3, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 3, 6), bool] */;
    %714 = @func_4100() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) */;
    %715 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 3, 6), bool] */, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
    %716 = logical_or(%712, %713) /* ty=Tensor[(5, 3, 6), bool] */;
    %717 = %714.1;
    %718 = sqrt(%715) /* ty=Tensor[(5, 3, 6), float32] */;
    (%716, %717, %718)
  };
  %719() /* ty=(Tensor[(5, 3, 6), bool], Tensor[(1920), float32], Tensor[(5, 3, 6), float32]) */
}

def @func_4102() -> (Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) {
  @func_4100() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) */
}

def @func_1341() -> (Tensor[(14, 3, 6), float32],) {
  %720 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  (%720,)
}

def @func_1505() -> (Tensor[(14, 3, 6), float64],) {
  %721 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(14, 3, 6), float64] */;
  %723 = sin(%722) /* ty=Tensor[(14, 3, 6), float64] */;
  (%723,)
}

def @func_3089() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) {
  %729 = fn () -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) {
    %724 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
    %725 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %726 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
    %727 = %724.1;
    %728 = %725.0;
    (%726, %727, %728)
  };
  %729() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) */
}

def @func_5166() -> Tensor[(1920), float32] {
  %731 = fn () -> Tensor[(1920), float32] {
    %730 = @func_4100() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) */;
    %730.1
  };
  %731() /* ty=Tensor[(1920), float32] */
}

def @func_2693(%var_2691: Tensor[(10, 45), uint64], %var_2692: float32) -> (Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) {
  @func_2689(%var_2691, %var_2692) /* ty=(Tensor[(14, 3, 6), float32], Tensor[(5, 6, 15), uint64], Tensor[(3360), float32], Tensor[(10, 45), uint64], Tensor[(3360), float32], Tensor[(80), float64], float32) */
}

def @func_3848() -> (Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(80, 1), float64], float32, Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64]) {
  @func_3846() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(80, 1), float64], float32, Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64]) */
}

def @func_2195() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
  %735 = fn () -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) {
    %732 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %733 = %732.0;
    %734 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
    (%733, %734)
  };
  %735() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */
}

def @func_403(%var_402: float32) -> (Tensor[(15, 1, 8), float64], Tensor[(420, 8), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(16, 15, 14), float32], float32) {
  %749 = fn (%var_396: float32) -> (Tensor[(15, 1, 8), float64], Tensor[(420, 8), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(16, 15, 14), float32], float32) {
    %736 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 8), float64] */;
    %737 = cast(meta[relay.Constant][46] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %738 = cast(meta[relay.Constant][47] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %739 = reshape(%737, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), float32] */;
    %740 = reshape(%738, newshape=[420, 8]) /* ty=Tensor[(420, 8), float32] */;
    %741 = @func_247(%739, %740) /* ty=(Tensor[(4, 6, 14), float32], Tensor[(16, 15, 14), float32], float32, Tensor[(420, 8), float32]) */;
    %742 = cast(%var_396, dtype="float32") /* ty=float32 */;
    %743 = %741.3;
    %744 = cast(%743, dtype="float32") /* ty=Tensor[(420, 8), float32] */;
    %745 = reshape(%742, newshape=[]) /* ty=float32 */;
    %746 = reshape(%744, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), float32] */;
    %747 = tan(%736) /* ty=Tensor[(15, 1, 8), float64] */;
    %748 = @func_139(%745, %746) /* ty=Tensor[(16, 15, 14), float32] */;
    (%747, %743, meta[relay.Constant][46] /* ty=Tensor[(336), float32] */, meta[relay.Constant][47] /* ty=Tensor[(3360), float32] */, %748, %var_396)
  };
  %749(%var_402) /* ty=(Tensor[(15, 1, 8), float64], Tensor[(420, 8), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(16, 15, 14), float32], float32) */
}

def @func_4228() -> (Tensor[(11, 16, 5), float32], Tensor[(14, 3, 6), float32]) {
  %756 = fn () -> (Tensor[(11, 16, 5), float32], Tensor[(14, 3, 6), float32]) {
    %750 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
    %751 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %754 = mod(%752, %753) /* ty=Tensor[(11, 16, 5), float32] */;
    %755 = @func_1464() /* ty=Tensor[(14, 3, 6), float32] */;
    (%754, %755)
  };
  %756() /* ty=(Tensor[(11, 16, 5), float32], Tensor[(14, 3, 6), float32]) */
}

def @func_5397() -> Tensor[(14, 3, 6), float32] {
  @func_5395() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_5839(%var_5838: Tensor[(3, 11, 4), int8]) -> Tensor[(3, 11, 4), bool] {
  %759 = fn (%var_5833: Tensor[(3, 11, 4), int8]) -> Tensor[(3, 11, 4), bool] {
    %757 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 11, 1), int8] */, dtype="bool") /* ty=Tensor[(3, 11, 1), bool] */;
    %758 = cast(%var_5833, dtype="bool") /* ty=Tensor[(3, 11, 4), bool] */;
    greater(%757, %758) /* ty=Tensor[(3, 11, 4), bool] */
  };
  %759(%var_5838) /* ty=Tensor[(3, 11, 4), bool] */
}

def @func_1870(%var_1868: Tensor[(6, 10, 5), uint32], %var_1869: Tensor[(6, 10, 5), uint32]) -> (Tensor[(6, 10, 5), int8], Tensor[(6, 10, 5), float64]) {
  @func_1866(%var_1868, %var_1869) /* ty=(Tensor[(6, 10, 5), int8], Tensor[(6, 10, 5), float64]) */
}

def @func_1425(%var_1424: Tensor[(5, 6, 15), uint64]) -> (Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) {
  %772 = fn (%var_1400: Tensor[(5, 6, 15), uint64]) -> (Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) {
    %760 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="uint64") /* ty=Tensor[(5, 6, 15), uint64] */;
    %761 = shape_of(%var_1400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %762 = cast(%var_1400, dtype="uint64") /* ty=Tensor[(5, 6, 15), uint64] */;
    %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %764 = cast(%var_1400, dtype="bool") /* ty=Tensor[(5, 6, 15), bool] */;
    %765 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %766 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="bool") /* ty=Tensor[(5, 6, 15), bool] */;
    %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %768 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 6, 15), uint64] */, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
    %769 = bitwise_or(%762, %763) /* ty=Tensor[(5, 6, 15), uint64] */;
    %770 = not_equal(%766, %767) /* ty=Tensor[(5, 6, 15), bool] */;
    %771 = sin(%768) /* ty=Tensor[(5, 6, 15), float32] */;
    (%769, %770, %771)
  };
  %772(%var_1424) /* ty=(Tensor[(5, 6, 15), uint64], Tensor[(5, 6, 15), bool], Tensor[(5, 6, 15), float32]) */
}

def @func_5319(%var_5289: Tensor[(1080), float32], %var_5291: Tensor[(450), uint64], %var_5317: Tensor[(80), float64]) -> (Tensor[(14, 3, 6), float32], Tensor[(9, 11), bool], Tensor[(14, 3, 6), float64], Tensor[(1080), float32], float32, Tensor[(450), uint64], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(5, 16, 1), float64], Tensor[(80), float64]) {
  %773 = @func_5120() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(9, 11), bool], Tensor[(11, 9), bool]) */;
  %774 = cast(%var_5289, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %775 = cast(%var_5289, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %776 = cast(2.11391f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %777 = cast(%var_5291, dtype="uint64") /* ty=Tensor[(450), uint64] */;
  %778 = reshape(%774, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %779 = reshape(%775, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), float32] */;
  %780 = reshape(%776, newshape=[]) /* ty=float32 */;
  %781 = reshape(%777, newshape=[450]) /* ty=Tensor[(450), uint64] */;
  %782 = @func_2790(%778, %779, %780, %781) /* ty=(Tensor[(12, 15, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(40, 2), float64], float32, Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64], Tensor[(10, 45), uint64], Tensor[(450), uint64], Tensor[(1430), bool]) */;
  %783 = @func_1991() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
  %784 = cast(%var_5317, dtype="float64") /* ty=Tensor[(80), float64] */;
  %785 = cast(2.11391f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %786 = reshape(%784, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %787 = reshape(%785, newshape=[]) /* ty=float32 */;
  %788 = @func_1573(%786, %787) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %789 = @func_2092() /* ty=Tensor[(14, 3, 6), float32] */;
  %790 = %773.1;
  %791 = %782.6;
  %792 = %783.0;
  %793 = @func_4253() /* ty=Tensor[(14, 3, 6), float32] */;
  %794 = %788.0;
  (%789, %790, %791, %var_5289, 2.11391f /* ty=float32 */, %var_5291, %792, %793, %794, %var_5317)
}

def @func_5354(%var_5353: Tensor[(5, 1, 5), float64]) -> (Tensor[(5, 1, 5), float64], Tensor[(14, 3, 6), float32]) {
  %799 = fn (%var_5331: Tensor[(5, 1, 5), float64]) -> (Tensor[(5, 1, 5), float64], Tensor[(14, 3, 6), float32]) {
    %795 = cast(%var_5331, dtype="float64") /* ty=Tensor[(5, 1, 5), float64] */;
    %796 = @func_4034() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %797 = cosh(%795) /* ty=Tensor[(5, 1, 5), float64] */;
    %798 = %796.0;
    (%797, %798)
  };
  %799(%var_5353) /* ty=(Tensor[(5, 1, 5), float64], Tensor[(14, 3, 6), float32]) */
}

def @func_1539() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %804 = fn () -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
    %800 = @func_1135() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %801 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %802 = %800.0;
    %803 = %801.0;
    (%802, %803)
  };
  %804() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */
}

def @func_3572(%var_3570: Tensor[(9, 11), bool]) -> Tensor[(9, 11), bool] {
  @func_3569(%var_3570) /* ty=Tensor[(9, 11), bool] */
}

def @func_3919(%var_3916: Tensor[(13, 7, 5), uint8], %var_3917: Tensor[(1, 1430), bool], %var_3918: Tensor[(675), float32]) -> (Tensor[(13, 7, 5), bool], Tensor[(14, 3, 6), float64], Tensor[(13, 7, 5), bool], float32, Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(13, 7, 5), int64], Tensor[(13, 7, 5), float32]) {
  @func_3914(%var_3916, %var_3917, %var_3918) /* ty=(Tensor[(13, 7, 5), bool], Tensor[(14, 3, 6), float64], Tensor[(13, 7, 5), bool], float32, Tensor[(1, 1430), bool], Tensor[(112), float32], Tensor[(675), float32], Tensor[(13, 7, 5), int64], Tensor[(13, 7, 5), float32]) */
}

def @func_3304() -> Tensor[(14, 3, 6), float32] {
  @func_3055() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_3174() -> (Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float32]) {
  %805 = @func_2846() /* ty=Tensor[(14, 3, 6), float64] */;
  %806 = @func_1123() /* ty=Tensor[(14, 3, 6), float32] */;
  (%805, %806)
}

def @func_2128() -> (Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) {
  %815 = fn () -> (Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) {
    %807 = @func_1517() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %808 = cast(meta[relay.Constant][52] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %809 = cast(meta[relay.Constant][52] /* ty=Tensor[(1430), bool] */, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %810 = reshape(%808, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
    %811 = reshape(%809, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), bool] */;
    %812 = @func_478(%810, %811) /* ty=(Tensor[(10, 13, 11), bool],) */;
    %813 = %807.0;
    %814 = %812.0;
    (%813, %814, meta[relay.Constant][52] /* ty=Tensor[(1430), bool] */)
  };
  %815() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(10, 13, 11), bool], Tensor[(1430), bool]) */
}

def @func_2069(%var_2067: Tensor[(14, 3, 6), float32]) -> (Tensor[(14, 3, 6), float32],) {
  @func_2066(%var_2067) /* ty=(Tensor[(14, 3, 6), float32],) */
}

def @func_4254() -> Tensor[(14, 3, 6), float32] {
  %817 = fn () -> Tensor[(14, 3, 6), float32] {
    %816 = @func_2194() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */;
    %816.0
  };
  %817() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_3846() -> (Tensor[(14, 3, 6), float64], Tensor[(3360), float32], Tensor[(80, 1), float64], float32, Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), uint64]) {
  %818 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
  %819 = cast(meta[relay.Constant][53] /* ty=Tensor[(80, 1), float64] */, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %820 = cast(-0.243979f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %821 = reshape(%819, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), float64] */;
  %822 = reshape(%820, newshape=[]) /* ty=float32 */;
  %823 = @func_1573(%821, %822) /* ty=(Tensor[(5, 16, 1), float64], Tensor[(16, 15, 14), float32], float32, Tensor[(3360), float32]) */;
  %824 = %818.0;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %826 = reshape(%825, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), float32] */;
  %827 = @func_2066(%826) /* ty=(Tensor[(14, 3, 6), float32],) */;
  %828 = @func_2373() /* ty=(Tensor[(14, 3, 6), float64], Tensor[(10, 12, 16), float64], Tensor[(1920), int64]) */;
  %829 = @func_3228() /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) */;
  %830 = %823.3;
  %831 = %827.0;
  %832 = %828.0;
  %833 = %829.0;
  (%824, %830, meta[relay.Constant][53] /* ty=Tensor[(80, 1), float64] */, -0.243979f /* ty=float32 */, %831, %832, %833)
}

def @func_4938(%var_4936: int8, %var_4937: Tensor[(15, 12, 16), int8]) -> Tensor[(15, 12, 16), int8] {
  %836 = fn (%var_4930: int8, %var_4931: Tensor[(15, 12, 16), int8]) -> Tensor[(15, 12, 16), int8] {
    %834 = cast(%var_4930, dtype="int8") /* ty=int8 */;
    %835 = cast(%var_4931, dtype="int8") /* ty=Tensor[(15, 12, 16), int8] */;
    right_shift(%834, %835) /* ty=Tensor[(15, 12, 16), int8] */
  };
  %836(%var_4936, %var_4937) /* ty=Tensor[(15, 12, 16), int8] */
}

def @func_1992() -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
  %843 = fn () -> (Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) {
    %837 = @func_1538() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */;
    %838 = @func_1341() /* ty=(Tensor[(14, 3, 6), float32],) */;
    %839 = @func_1505() /* ty=(Tensor[(14, 3, 6), float64],) */;
    %840 = %837.0;
    %841 = %838.0;
    %842 = %839.0;
    (%840, %841, %842)
  };
  %843() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64]) */
}

def @func_4100() -> (Tensor[(14, 3, 6), float64], Tensor[(1920), float32]) {
  %844 = @func_3088() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float64], Tensor[(14, 3, 6), float64]) */;
  %845 = @func_3228() /* ty=(Tensor[(14, 3, 6), uint64], Tensor[(1920), float32]) */;
  %846 = %844.2;
  %847 = %845.1;
  (%846, %847)
}

def @func_5923() -> (Tensor[(15, 13, 5), float32], Tensor[(14, 3, 6), float32]) {
  %851 = fn () -> (Tensor[(15, 13, 5), float32], Tensor[(14, 3, 6), float32]) {
    %848 = @func_3001() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */;
    %849 = @func_5571() /* ty=Tensor[(15, 13, 5), float32] */;
    %850 = %848.1;
    (%849, %850)
  };
  %851() /* ty=(Tensor[(15, 13, 5), float32], Tensor[(14, 3, 6), float32]) */
}

def @func_3306() -> Tensor[(14, 3, 6), float32] {
  @func_3304() /* ty=Tensor[(14, 3, 6), float32] */
}

def @func_3262() -> (Tensor[(14, 3, 6), float32],) {
  %852 = @func_3001() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), float32]) */;
  %853 = %852.0;
  (%853,)
}

def @func_5698() -> (Tensor[(14, 3, 6), uint64],) {
  %856 = fn () -> (Tensor[(14, 3, 6), uint64],) {
    %854 = @func_3769() /* ty=(Tensor[(14, 3, 6), float32], Tensor[(14, 3, 6), uint64]) */;
    %855 = %854.1;
    (%855,)
  };
  %856() /* ty=(Tensor[(14, 3, 6), uint64],) */
}

def @func_5510(%var_5492: Tensor[(1, 2, 16), float32]) -> (Tensor[(1, 2, 16), float32],) {
  %857 = cast(%var_5492, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %858 = exp(%857) /* ty=Tensor[(1, 2, 16), float32] */;
  (%858,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen67/build/output.py", line 2152, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:47:29] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

