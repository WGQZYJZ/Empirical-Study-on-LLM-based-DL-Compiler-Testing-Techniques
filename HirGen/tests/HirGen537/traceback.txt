==========mod==========
#[version = "0.0.5"]
def @func_4184(%var_4166: Tensor[(15, 8, 3), float32]) -> Tensor[(15, 8, 3), float32] {
  %0 = cast(%var_4166, dtype="float32") /* ty=Tensor[(15, 8, 3), float32] */;
  rsqrt(%0) /* ty=Tensor[(15, 8, 3), float32] */
}

def @func_3911(%var_3889: int8) -> (Tensor[(12, 2, 4), float64], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8]) {
  %1 = cast(%var_3889, dtype="int8") /* ty=int8 */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %3 = reshape(%1, newshape=[]) /* ty=int8 */;
  %4 = reshape(%2, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %5 = @func_152(%3, %4) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %6 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
  %7 = %5.0;
  (%6, %7, %var_3889, meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */)
}

def @func_7239(%var_7133: uint32, %var_7134: Tensor[(6, 2, 7), uint32], %var_7181: Tensor[(196), float32]) -> (int8, Tensor[(1008), int16], Tensor[(7, 7, 4), float32], Tensor[(196), float32], Tensor[(6, 2, 7), bool]) {
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %9 = reshape(%8, newshape=[1008]) /* ty=Tensor[(1008), int16] */;
  %10 = @func_5930(%9) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(2, 504), int16], int8, Tensor[(1008), int16], Tensor[(546), float64], Tensor[(22, 4), int64]) */;
  %11 = cast(%var_7181, dtype="float32") /* ty=Tensor[(196), float32] */;
  %12 = reshape(%11, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %13 = @func_4291(%12) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %14 = cast(%var_7134, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %15 = exp(%14) /* ty=Tensor[(6, 2, 7), float64] */;
  %16 = cast(%15, dtype="uint32") /* ty=Tensor[(6, 2, 7), uint32] */;
  %17 = shape_of(%var_7134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_7134, dtype="uint32") /* ty=Tensor[(6, 2, 7), uint32] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %20 = bitwise_and(%18, %19) /* ty=Tensor[(6, 2, 7), uint32] */;
  %21 = cast(%var_7133, dtype="bool") /* ty=bool */;
  %22 = cast(%var_7134, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %23 = equal(%21, %22) /* ty=Tensor[(6, 2, 7), bool] */;
  %24 = cast(%23, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %25 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%20, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = %10.2;
  %29 = %13.1;
  %30 = less(%26, %27) /* ty=Tensor[(6, 2, 7), bool] */;
  (%28, meta[relay.Constant][1] /* ty=Tensor[(1008), int16] */, %29, %var_7181, %30)
}

def @func_6936(%var_6925: Tensor[(10, 4, 6), float32]) -> (Tensor[(10, 4, 6), bool],) {
  %31 = cast(%var_6925, dtype="float32") /* ty=Tensor[(10, 4, 6), float32] */;
  %32 = acos(%31) /* ty=Tensor[(10, 4, 6), float32] */;
  %33 = cast(%var_6925, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = equal(%35, %36) /* ty=Tensor[(10, 4, 6), bool] */;
  (%37,)
}

def @func_4949() -> (Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) {
  %38 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %41 = reshape(%39, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %42 = reshape(%40, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %43 = @func_2460(%41, %42) /* ty=(Tensor[(15, 5, 16), float64],) */;
  %44 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %47 = reshape(%45, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %48 = reshape(%46, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %49 = %38.0;
  %50 = %43.0;
  %51 = %44.2;
  %52 = @func_1460(%47, %48) /* ty=Tensor[(7, 3, 14), uint8] */;
  (%49, %50, meta[relay.Constant][2] /* ty=Tensor[(1200), float64] */, %51, %52, meta[relay.Constant][3] /* ty=Tensor[(294), float64] */)
}

def @func_590(%var_580: Tensor[(13, 7, 6), float64]) -> (Tensor[(13, 7, 6), float64],) {
  %53 = cast(%var_580, dtype="float64") /* ty=Tensor[(13, 7, 6), float64] */;
  %54 = tan(%53) /* ty=Tensor[(13, 7, 6), float64] */;
  (%54,)
}

def @func_7126() -> (Tensor[(7, 7, 4), int16],) {
  %55 = @func_5756() /* ty=Tensor[(7, 7, 4), int16] */;
  (%55,)
}

def @func_6306(%var_6298: int64, %var_6299: Tensor[(88), int64], %var_6300: Tensor[(12, 50), uint64]) -> (Tensor[(7, 7, 4), float32], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(12, 50), uint64]) {
  %56 = @func_4043() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %57 = cast(%var_6298, dtype="int64") /* ty=int64 */;
  %58 = cast(%var_6299, dtype="int64") /* ty=Tensor[(88), int64] */;
  %59 = cast(%var_6300, dtype="uint64") /* ty=Tensor[(12, 50), uint64] */;
  %60 = reshape(%57, newshape=[]) /* ty=int64 */;
  %61 = reshape(%58, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %62 = reshape(%59, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %63 = @func_1888(%60, %61, %62) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %64 = %56.0;
  %65 = %63.4;
  (%64, %65, %var_6298, %var_6299, %var_6300)
}

def @func_4827(%var_4822: Tensor[(2, 11, 14), float64]) -> Tensor[(2, 11, 14), float64] {
  %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %67 = shape_of(%var_4822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_4822, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%68, %69) /* ty=Tensor[(2, 11, 14), float64] */
}

def @func_7080() -> Tensor[(8, 15, 5), bool] {
  %70 = @func_6514() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) */;
  %70.1
}

def @func_5646(%var_5637: Tensor[(12, 2, 4), float64]) -> (Tensor[(12, 2, 4), bool],) {
  %71 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %72 = %71.0;
  %73 = cast(%var_5637, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %77 = not_equal(%75, %76) /* ty=Tensor[(12, 2, 4), bool] */;
  (%77,)
}

def @func_1582(%var_1554: Tensor[(8, 15, 5), uint64], %var_1559: Tensor[(8, 15, 5), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) {
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 15, 5), uint64] */, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %79 = shape_of(%var_1554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_1554, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %82 = cast(%var_1559, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %83 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(8, 15, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 15, 5), uint64] */, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = multiply(%80, %81) /* ty=Tensor[(8, 15, 5), uint64] */;
  %87 = not_equal(%84, %85) /* ty=Tensor[(8, 15, 5), bool] */;
  (%86, %87)
}

def @func_6863() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float64]) {
  %88 = @func_4070() /* ty=Tensor[(7, 7, 4), float32] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %90 = log10(%89) /* ty=Tensor[(7, 7, 4), float32] */;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %92 = reshape(%91, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %93 = @func_2842(%92) /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %94 = %93.0;
  (%90, %94)
}

def @func_5802(%var_5786: Tensor[(15, 63), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(480, 8), bool], Tensor[(480), int16], Tensor[(15, 63), float64]) {
  %95 = @func_3676() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %97 = cast(%var_5786, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %98 = reshape(%96, newshape=[480, 1]) /* ty=Tensor[(480, 1), int16] */;
  %99 = reshape(%97, newshape=[945]) /* ty=Tensor[(945), float64] */;
  %100 = @func_5362(%98, %99) /* ty=(Tensor[(7, 3, 14), uint8], Tensor[(12, 5, 8), int16], Tensor[(480, 8), bool], Tensor[(9, 15, 7), float32], Tensor[(945), float64], Tensor[(12, 5, 8), int16]) */;
  %101 = %95.0;
  %102 = %100.2;
  (%101, %102, meta[relay.Constant][6] /* ty=Tensor[(480), int16] */, %var_5786)
}

def @func_2842(%var_2824: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) {
  %103 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %104 = cast(%var_2824, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %108 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %110 = divide(%106, %107) /* ty=Tensor[(7, 7, 4), float64] */;
  %111 = erf(%109) /* ty=Tensor[(7, 7, 4), float32] */;
  (%110, %111)
}

def @func_4291(%var_4243: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %112 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %113 = cast(%var_4243, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %117 = floor_divide(%115, %116) /* ty=Tensor[(7, 7, 4), float32] */;
  %118 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  (%117, %118)
}

def @func_2460(%var_2444: Tensor[(15, 5, 16), float64], %var_2445: Tensor[(15, 5, 16), float64]) -> (Tensor[(15, 5, 16), float64],) {
  %119 = cast(%var_2445, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
  %120 = shape_of(%var_2444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_2444, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %123 = floor_mod(%121, %122) /* ty=Tensor[(15, 5, 16), float64] */;
  (%123,)
}

def @func_7038() -> (Tensor[(7, 7, 4), float32],) {
  %124 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %125 = %124.1;
  (%125,)
}

def @func_2894() -> (Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) {
  %126 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %127 = cast(meta[relay.Constant][7] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %128 = cast(meta[relay.Constant][7] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %129 = reshape(%127, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %130 = reshape(%128, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %131 = @func_1582(%129, %130) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) */;
  %132 = %126.1;
  %133 = %131.1;
  (%132, %133, meta[relay.Constant][7] /* ty=Tensor[(600), uint64] */)
}

def @func_4393() -> Tensor[(7, 7, 4), float32] {
  %134 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %134.1
}

def @func_290(%var_286: Tensor[(10, 8, 2), float64]) -> Tensor[(10, 8, 2), float64] {
  %135 = cast(-5.27698f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %136 = cast(%var_286, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  floor_mod(%135, %136) /* ty=Tensor[(10, 8, 2), float64] */
}

def @main(%var_7591: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 195), int64], Tensor[(13, 7, 15), uint16]) {
  %137 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %138 = cast(%var_7591, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %139 = reshape(%138, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
  %140 = @func_3078(%139) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) */;
  %141 = %140.1;
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 7, 15), bool] */, dtype="uint16") /* ty=Tensor[(13, 7, 15), uint16] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="uint16") /* ty=Tensor[(13, 7, 15), uint16] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %146 = %137.0;
  %147 = multiply(%144, %145) /* ty=Tensor[(13, 7, 15), uint16] */;
  (%146, %var_7591, %147)
}

def @func_5428(%var_5416: Tensor[(40, 2), uint8], %var_5417: Tensor[(660), uint16], %var_5418: int8) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32], Tensor[(10, 8, 2), float64], Tensor[(40, 2), uint8], Tensor[(660), uint16], int8, Tensor[(84, 2), int8], Tensor[(7, 7, 4), float32]) {
  %148 = @func_4949() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */;
  %149 = %148.0;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %151 = reshape(%150, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %152 = @func_4291(%151) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %153 = cast(%var_5416, dtype="uint8") /* ty=Tensor[(40, 2), uint8] */;
  %154 = cast(%var_5416, dtype="uint8") /* ty=Tensor[(40, 2), uint8] */;
  %155 = cast(%var_5417, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %156 = cast(%var_5418, dtype="int8") /* ty=int8 */;
  %157 = cast(meta[relay.Constant][9] /* ty=Tensor[(84, 2), int8] */, dtype="int8") /* ty=Tensor[(84, 2), int8] */;
  %158 = reshape(%153, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %159 = reshape(%154, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %160 = reshape(%155, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %161 = reshape(%156, newshape=[]) /* ty=int8 */;
  %162 = reshape(%157, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %163 = @func_782(%158, %159, %160, %161, %162) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) */;
  %164 = %152.0;
  %165 = %163.8;
  %166 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  (%149, %164, %165, %var_5416, %var_5417, %var_5418, meta[relay.Constant][9] /* ty=Tensor[(84, 2), int8] */, %166)
}

def @func_7046() -> (Tensor[(7, 7, 4), int16],) {
  %167 = @func_5603() /* ty=(Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) */;
  %168 = %167.0;
  (%168,)
}

def @func_3078(%var_3065: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) {
  %169 = cast(%var_3065, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %170 = cast(%var_3065, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %171 = reshape(%169, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
  %172 = reshape(%170, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
  %173 = cast(%var_3065, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
  %174 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  %175 = @func_3033(%171, %172) /* ty=Tensor[(13, 7, 15), bool] */;
  %176 = asinh(%173) /* ty=Tensor[(7, 195), float32] */;
  (%174, %175, %176)
}

def @func_782(%var_685: Tensor[(4, 4, 5), uint8], %var_686: Tensor[(4, 4, 5), uint8], %var_702: Tensor[(660), uint16], %var_726: int8, %var_731: Tensor[(168), int8]) -> (Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) {
  %177 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %178 = shape_of(%var_685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%var_685, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = cast(%var_702, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %182 = cast(%var_702, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %183 = reshape(%181, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %184 = reshape(%182, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %185 = @func_448(%183, %184) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %187 = reshape(%186, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %188 = @func_590(%187) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %189 = cast(%var_726, dtype="int8") /* ty=int8 */;
  %190 = %185.4;
  %191 = cast(%190, dtype="int8") /* ty=Tensor[(14, 5, 16), int8] */;
  %192 = reshape(%189, newshape=[]) /* ty=int8 */;
  %193 = reshape(%191, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %194 = @func_152(%192, %193) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %195 = cast(%var_731, dtype="int8") /* ty=Tensor[(168), int8] */;
  %196 = cast(%var_731, dtype="int8") /* ty=Tensor[(168), int8] */;
  %197 = reshape(%195, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %198 = reshape(%196, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %199 = @func_567(%197, %198) /* ty=(Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) */;
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 20), float64] */, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %201 = reshape(%200, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %202 = cast(%var_685, dtype="float32") /* ty=Tensor[(4, 4, 5), float32] */;
  %203 = tan(%202) /* ty=Tensor[(4, 4, 5), float32] */;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(4, 4, 5), float64] */;
  %205 = acosh(%204) /* ty=Tensor[(4, 4, 5), float64] */;
  %206 = cast(%205, dtype="int32") /* ty=Tensor[(4, 4, 5), int32] */;
  %207 = cast(%var_726, dtype="int32") /* ty=int32 */;
  %208 = greater(%179, %180) /* ty=Tensor[(4, 4, 5), bool] */;
  %209 = %188.0;
  %210 = %194.0;
  %211 = %199.0;
  %212 = @func_290(%201) /* ty=Tensor[(10, 8, 2), float64] */;
  %213 = logical_xor(%206, %207) /* ty=Tensor[(4, 4, 5), int32] */;
  (%208, %190, %var_702, %209, meta[relay.Constant][10] /* ty=Tensor[(546), float64] */, %210, %211, %var_731, %212, meta[relay.Constant][11] /* ty=Tensor[(8, 20), float64] */, %213)
}

def @func_4070() -> Tensor[(7, 7, 4), float32] {
  %214 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %215 = %214.1;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  asinh(%216) /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_3537(%var_3526: Tensor[(1365), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 195), float32], Tensor[(1365), int64]) {
  %217 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %218 = %217.0;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %220 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %221 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %222 = reshape(%221, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %223 = cast(%var_3526, dtype="int64") /* ty=Tensor[(1365), int64] */;
  %224 = reshape(%223, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
  %225 = @func_3078(%224) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) */;
  %226 = tan(%219) /* ty=Tensor[(7, 7, 4), float32] */;
  %227 = %220.1;
  %228 = @func_290(%222) /* ty=Tensor[(10, 8, 2), float64] */;
  %229 = %225.2;
  (%226, %227, %228, meta[relay.Constant][12] /* ty=Tensor[(160), float64] */, %229, %var_3526)
}

def @func_4665(%var_4581: Tensor[(6, 12, 14), int16], %var_4586: Tensor[(6, 12, 14), int16], %var_4602: Tensor[(6, 12, 14), int16], %var_4647: Tensor[(88), int64], %var_4649: Tensor[(91, 6), float64]) -> (Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) {
  %230 = cast(%var_4586, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
  %231 = shape_of(%var_4581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_4581, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = cast(%var_4581, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
  %235 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 12, 14), int16] */, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %238 = bitwise_xor(%236, %237) /* ty=Tensor[(6, 12, 14), int16] */;
  %239 = cast(%var_4586, dtype="uint64") /* ty=Tensor[(6, 12, 14), uint64] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="uint64") /* ty=Tensor[(6, 12, 14), uint64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %243 = add(%241, %242) /* ty=Tensor[(6, 12, 14), uint64] */;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %245 = cast(%var_4602, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %246 = shape_of(%var_4586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_4586, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %249 = power(%247, %248) /* ty=Tensor[(6, 12, 14), float64] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %251 = @func_4393() /* ty=Tensor[(7, 7, 4), float32] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %253 = cast(%var_4647, dtype="int64") /* ty=Tensor[(88), int64] */;
  %254 = cast(meta[relay.Constant][14] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %255 = cast(%var_4649, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %256 = reshape(%252, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %257 = reshape(%253, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %258 = reshape(%254, newshape=[4, 192]) /* ty=Tensor[(4, 192), float64] */;
  %259 = reshape(%255, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %260 = @func_3602(%256, %257, %258, %259) /* ty=(Tensor[(7, 7, 4), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(660), uint16], Tensor[(88), int64], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 2, 12), bool], Tensor[(13, 7, 6), float64], Tensor[(4, 192), float64], Tensor[(546), float64], Tensor[(1120), int8]) */;
  %261 = less(%232, %233) /* ty=Tensor[(6, 12, 14), bool] */;
  %262 = acos(%244) /* ty=Tensor[(6, 12, 14), float64] */;
  %263 = sin(%250) /* ty=Tensor[(6, 12, 14), float64] */;
  %264 = %260.5;
  (%261, %251, %262, %263, %264, %var_4647, meta[relay.Constant][14] /* ty=Tensor[(768), float64] */, %var_4649)
}

def @func_7395() -> Tensor[(504), uint64] {
  %265 = @func_6179() /* ty=(Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) */;
  %265.3
}

def @func_7289(%var_7275: Tensor[(12, 2, 4), float64]) -> (Tensor[(12, 2, 4), float64], Tensor[(12, 2, 4), float64]) {
  %266 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %267 = %266.0;
  %268 = cast(%var_7275, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %272 = @func_6514() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) */;
  %273 = power(%270, %271) /* ty=Tensor[(12, 2, 4), float64] */;
  %274 = %272.0;
  (%273, %274)
}

def @func_1460(%var_1419: Tensor[(7, 3, 14), float64], %var_1448: Tensor[(7, 3, 14), float64]) -> Tensor[(7, 3, 14), uint8] {
  %275 = cast(%var_1419, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %276 = acos(%275) /* ty=Tensor[(7, 3, 14), float64] */;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %278 = log(%277) /* ty=Tensor[(7, 3, 14), float64] */;
  %279 = cast(%var_1448, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %280 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%276, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %283 = minimum(%281, %282) /* ty=Tensor[(7, 3, 14), uint8] */;
  %284 = cast(%283, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %285 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%278, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = less_equal(%286, %287) /* ty=Tensor[(7, 3, 14), bool] */;
  %289 = cast(%var_1448, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%291, %292) /* ty=Tensor[(7, 3, 14), uint8] */
}

def @func_7380() -> (Tensor[(7, 7, 4), float32],) {
  %293 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %294 = %293.1;
  (%294,)
}

def @func_4749() -> (Tensor[(7, 7, 4), float32],) {
  %295 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %296 = %295.0;
  (%296,)
}

def @func_5864() -> (Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32], Tensor[(2, 11, 14), float64], Tensor[(1, 308), float64], Tensor[(12, 5, 8), int16], Tensor[(480), int16]) {
  %297 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %298 = %297.0;
  %299 = cast(%298, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %300 = @func_4043() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %301 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 308), float64] */, dtype="float64") /* ty=Tensor[(1, 308), float64] */;
  %302 = reshape(%301, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
  %303 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %304 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %305 = reshape(%303, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %306 = reshape(%304, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %307 = @func_4517(%305, %306) /* ty=(Tensor[(12, 5, 8), int16],) */;
  %308 = log2(%299) /* ty=Tensor[(7, 7, 4), float64] */;
  %309 = %300.0;
  %310 = @func_4827(%302) /* ty=Tensor[(2, 11, 14), float64] */;
  %311 = %307.0;
  (%308, %309, %310, meta[relay.Constant][15] /* ty=Tensor[(1, 308), float64] */, %311, meta[relay.Constant][16] /* ty=Tensor[(480), int16] */)
}

def @func_5187() -> (Tensor[(8, 15, 5), bool],) {
  %312 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %313 = %312.1;
  (%313,)
}

def @func_3453(%var_3405: Tensor[(80, 1), uint8], %var_3407: int8, %var_3447: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(8, 20), float64], Tensor[(660), uint16], int8, Tensor[(80, 168), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), int64]) {
  %314 = cast(%var_3405, dtype="uint8") /* ty=Tensor[(80, 1), uint8] */;
  %315 = cast(%var_3405, dtype="uint8") /* ty=Tensor[(80, 1), uint8] */;
  %316 = cast(meta[relay.Constant][17] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %317 = cast(%var_3407, dtype="int8") /* ty=int8 */;
  %318 = cast(meta[relay.Constant][18] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %319 = reshape(%314, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %320 = reshape(%315, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %321 = reshape(%316, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %322 = reshape(%317, newshape=[]) /* ty=int8 */;
  %323 = reshape(%318, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %324 = @func_782(%319, %320, %321, %322, %323) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) */;
  %325 = cast(meta[relay.Constant][18] /* ty=Tensor[(168), int8] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %326 = cast(%var_3405, dtype="float32") /* ty=Tensor[(80, 1), float32] */;
  %327 = cast(%var_3447, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %328 = cast(%var_3447, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %329 = reshape(%327, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
  %330 = reshape(%328, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
  %331 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  %332 = %324.9;
  %333 = mod(%325, %326) /* ty=Tensor[(80, 168), float32] */;
  %334 = @func_3033(%329, %330) /* ty=Tensor[(13, 7, 15), bool] */;
  (%331, %332, meta[relay.Constant][17] /* ty=Tensor[(660), uint16] */, %var_3407, %333, %334, %var_3447)
}

def @func_3676() -> (Tensor[(7, 7, 4), float32],) {
  %335 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %336 = %335.0;
  (%336,)
}

def @func_5603() -> (Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) {
  %337 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %338 = %337.0;
  %339 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 7, 4), float32] */, dtype="int16") /* ty=Tensor[(7, 7, 4), int16] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="int16") /* ty=Tensor[(7, 7, 4), int16] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %343 = logical_xor(%341, %342) /* ty=Tensor[(7, 7, 4), int16] */;
  %344 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  (%343, %344)
}

def @func_2702() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %345 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %346 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  (%345, %346)
}

def @func_6012(%var_5977: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), bool], Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %347 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %348 = cast(%var_5977, dtype="float64") /* ty=Tensor[(546), float64] */;
  %349 = reshape(%348, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %350 = @func_590(%349) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %351 = %350.0;
  %352 = cast(%var_5977, dtype="bool") /* ty=Tensor[(546), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(13, 7, 6), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = @func_5498() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %357 = @func_4434() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %358 = %347.1;
  %359 = not_equal(%354, %355) /* ty=Tensor[(13, 7, 6), bool] */;
  %360 = %356.1;
  %361 = %357.0;
  (%358, %359, %360, %361)
}

def @func_1888(%var_1812: int64, %var_1813: Tensor[(11, 8, 1), int64], %var_1880: Tensor[(600), uint64]) -> (Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) {
  %362 = cast(%var_1812, dtype="bool") /* ty=bool */;
  %363 = cast(%var_1813, dtype="bool") /* ty=Tensor[(11, 8, 1), bool] */;
  %364 = cast(%var_1812, dtype="float64") /* ty=float64 */;
  %365 = cast(%var_1813, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
  %366 = cast(meta[relay.Constant][21] /* ty=Tensor[(294, 1), float64] */, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %367 = cast(meta[relay.Constant][21] /* ty=Tensor[(294, 1), float64] */, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %368 = reshape(%366, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %369 = reshape(%367, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %370 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %371 = reshape(%370, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), uint64] */;
  %372 = @func_1538(%371) /* ty=(Tensor[(6, 2, 10), int16], Tensor[(6, 2, 10), float32]) */;
  %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %374 = reshape(%373, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %375 = @func_1242(%374) /* ty=(Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) */;
  %376 = %375.1;
  %377 = cast(%376, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
  %378 = cast(%var_1812, dtype="bool") /* ty=bool */;
  %379 = cast(%var_1880, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %380 = cast(%var_1880, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %381 = reshape(%379, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %382 = reshape(%380, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %383 = @func_1582(%381, %382) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) */;
  %384 = less_equal(%362, %363) /* ty=Tensor[(11, 8, 1), bool] */;
  %385 = floor_mod(%364, %365) /* ty=Tensor[(11, 8, 1), float64] */;
  %386 = @func_1460(%368, %369) /* ty=Tensor[(7, 3, 14), uint8] */;
  %387 = %372.0;
  %388 = logical_and(%377, %378) /* ty=Tensor[(9, 15, 7), bool] */;
  %389 = %383.1;
  (%384, %385, meta[relay.Constant][20] /* ty=Tensor[(945), float64] */, %386, meta[relay.Constant][21] /* ty=Tensor[(294, 1), float64] */, %387, meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, %388, %389, %var_1880)
}

def @func_3851() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %390 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %391 = %390.0;
  %392 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  (%391, %392)
}

def @func_6074(%var_6017: Tensor[(6, 1, 1), float64]) -> (Tensor[(6, ?, ?), uint8], Tensor[(6, ?, ?), bool], Tensor[(945), float64], int64, Tensor[(88), int64], Tensor[(600), uint64]) {
  %393 = cast(%var_6017, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %394 = cosh(%393) /* ty=Tensor[(6, 1, 1), float64] */;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %396 = sin(%395) /* ty=Tensor[(6, 1, 1), float64] */;
  %397 = cast(%394, dtype="uint16") /* ty=Tensor[(6, 1, 1), uint16] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="uint16") /* ty=Tensor[(6, 1, 1), uint16] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %401 = bitwise_and(%399, %400) /* ty=Tensor[(6, ?, ?), uint16] */;
  %402 = cast(%401, dtype="uint8") /* ty=Tensor[(6, ?, ?), uint8] */;
  %403 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%394, dtype="uint8") /* ty=Tensor[(6, 1, 1), uint8] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %406 = cast(%394, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %407 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%396, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %410 = mod(%408, %409) /* ty=Tensor[(6, ?, ?), float64] */;
  %411 = cast(%410, dtype="bool") /* ty=Tensor[(6, ?, ?), bool] */;
  %412 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%401, dtype="bool") /* ty=Tensor[(6, ?, ?), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %416 = cast(meta[relay.Constant][23] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
  %417 = cast(meta[relay.Constant][24] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %418 = reshape(%415, newshape=[]) /* ty=int64 */;
  %419 = reshape(%416, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %420 = reshape(%417, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %421 = @func_1888(%418, %419, %420) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %422 = left_shift(%404, %405) /* ty=Tensor[(6, ?, ?), uint8] */;
  %423 = greater(%413, %414) /* ty=Tensor[(6, ?, ?), bool] */;
  %424 = %421.2;
  (%422, %423, %424, -6 /* ty=int64 */, meta[relay.Constant][23] /* ty=Tensor[(88), int64] */, meta[relay.Constant][24] /* ty=Tensor[(600), uint64] */)
}

def @func_2656() -> Tensor[(7, 7, 4), float32] {
  %425 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  log(%426) /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_5498() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %427 = @func_4434() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %428 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %429 = %428.1;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %431 = %427.0;
  %432 = sinh(%430) /* ty=Tensor[(7, 7, 4), float32] */;
  (%431, %432)
}

def @func_3710() -> Tensor[(12, 2, 4), float64] {
  %433 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  acos(%433) /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_3153(%var_3082: Tensor[(16, 16, 3), float64], %var_3116: Tensor[(546), float64], %var_3122: Tensor[(660), uint16], %var_3124: Tensor[(42, 4), int8], %var_3133: Tensor[(1120), int8]) -> (Tensor[(13, 7, 6), float64], Tensor[(546), bool], Tensor[(8, 20), float64], Tensor[(80), uint8], Tensor[(660), uint16], int8, Tensor[(42, 4), int8], Tensor[(14, 5, 16), int8], Tensor[(1120), int8], Tensor[(16, 16, 3), float32], Tensor[(7, 7, 4), float32]) {
  %434 = cast(meta[relay.Constant][26] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %435 = reshape(%434, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %436 = @func_590(%435) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %437 = cast(%var_3116, dtype="bool") /* ty=Tensor[(546), bool] */;
  %438 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(546), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %439 = cast(meta[relay.Constant][26] /* ty=Tensor[(546), float64] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?), bool] */;
  %441 = cast(meta[relay.Constant][27] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %442 = cast(meta[relay.Constant][27] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %443 = cast(%var_3122, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %444 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %445 = cast(%var_3124, dtype="int8") /* ty=Tensor[(42, 4), int8] */;
  %446 = reshape(%441, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %447 = reshape(%442, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %448 = reshape(%443, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %449 = reshape(%444, newshape=[]) /* ty=int8 */;
  %450 = reshape(%445, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %451 = @func_782(%446, %447, %448, %449, %450) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) */;
  %452 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %453 = cast(%var_3133, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %454 = reshape(%452, newshape=[]) /* ty=int8 */;
  %455 = reshape(%453, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %456 = @func_152(%454, %455) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %457 = cast(%var_3082, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
  %458 = cos(%457) /* ty=Tensor[(16, 16, 3), float64] */;
  %459 = cast(%458, dtype="int16") /* ty=Tensor[(16, 16, 3), int16] */;
  %460 = shape_of(%var_3082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%var_3082, dtype="int16") /* ty=Tensor[(16, 16, 3), int16] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %463 = bitwise_and(%461, %462) /* ty=Tensor[(16, 16, 3), int16] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
  %465 = %436.0;
  %466 = not_equal(%439, %440) /* ty=Tensor[(546), bool] */;
  %467 = %451.9;
  %468 = %456.0;
  %469 = rsqrt(%464) /* ty=Tensor[(16, 16, 3), float32] */;
  %470 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  (%465, %466, %467, meta[relay.Constant][27] /* ty=Tensor[(80), uint8] */, %var_3122, meta[relay.Constant][28] /* ty=int8 */, %var_3124, %468, %var_3133, %469, %470)
}

def @func_3602(%var_3546: Tensor[(7, 7, 4), float32], %var_3563: Tensor[(88), int64], %var_3594: Tensor[(4, 192), float64], %var_3595: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(660), uint16], Tensor[(88), int64], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 2, 12), bool], Tensor[(13, 7, 6), float64], Tensor[(4, 192), float64], Tensor[(546), float64], Tensor[(1120), int8]) {
  %471 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  %472 = cast(%var_3546, dtype="uint64") /* ty=Tensor[(7, 7, 4), uint64] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="uint64") /* ty=Tensor[(7, 7, 4), uint64] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %477 = cast(meta[relay.Constant][29] /* ty=Tensor[(945), float64] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %478 = cast(meta[relay.Constant][29] /* ty=Tensor[(945), float64] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %479 = cast(meta[relay.Constant][30] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %480 = cast(%var_3563, dtype="int64") /* ty=Tensor[(88), int64] */;
  %481 = cast(meta[relay.Constant][29] /* ty=Tensor[(945), float64] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %482 = reshape(%476, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %483 = reshape(%477, newshape=[15, 63]) /* ty=Tensor[(15, 63), float32] */;
  %484 = reshape(%478, newshape=[15, 63]) /* ty=Tensor[(15, 63), float32] */;
  %485 = reshape(%479, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %486 = reshape(%480, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %487 = reshape(%481, newshape=[15, 63]) /* ty=Tensor[(15, 63), float32] */;
  %488 = @func_3335(%482, %483, %484, %485, %486, %487) /* ty=(Tensor[(600), uint64], Tensor[(15, 5, 16), float64], Tensor[(300, 4), float64], Tensor[(15, 5, 16), float64], Tensor[(9, 15, 7), float64], Tensor[(7, 7, 4), float32], Tensor[(15, 63), float32], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(11, 8, 1), bool], int64, Tensor[(88), int64], Tensor[(7, 7, 4), float64], Tensor[(15, 63), bool], Tensor[(15, 63), float64]) */;
  %489 = cast(meta[relay.Constant][31] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %490 = reshape(%489, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %491 = cast(meta[relay.Constant][32] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %492 = cast(meta[relay.Constant][32] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %493 = reshape(%491, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %494 = reshape(%492, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %495 = @func_567(%493, %494) /* ty=(Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) */;
  %496 = %495.0;
  %497 = cast(meta[relay.Constant][32] /* ty=Tensor[(168), int8] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %501 = cast(%var_3594, dtype="float64") /* ty=Tensor[(4, 192), float64] */;
  %502 = cast(%var_3595, dtype="float64") /* ty=Tensor[(546), float64] */;
  %503 = cast(meta[relay.Constant][30] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %504 = cast(%496, dtype="int8") /* ty=Tensor[(7, 2, 12), int8] */;
  %505 = cast(meta[relay.Constant][33] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %506 = reshape(%501, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float64] */;
  %507 = reshape(%502, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %508 = reshape(%503, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %509 = reshape(%504, newshape=[42, 4]) /* ty=Tensor[(42, 4), int8] */;
  %510 = reshape(%505, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %511 = @func_3153(%506, %507, %508, %509, %510) /* ty=(Tensor[(13, 7, 6), float64], Tensor[(546), bool], Tensor[(8, 20), float64], Tensor[(80), uint8], Tensor[(660), uint16], int8, Tensor[(42, 4), int8], Tensor[(14, 5, 16), int8], Tensor[(1120), int8], Tensor[(16, 16, 3), float32], Tensor[(7, 7, 4), float32]) */;
  %512 = multiply(%474, %475) /* ty=Tensor[(7, 7, 4), uint64] */;
  %513 = %488.4;
  %514 = @func_290(%490) /* ty=Tensor[(10, 8, 2), float64] */;
  %515 = greater_equal(%499, %500) /* ty=Tensor[(7, 2, 12), bool] */;
  %516 = %511.0;
  (%512, %513, meta[relay.Constant][29] /* ty=Tensor[(945), float64] */, meta[relay.Constant][30] /* ty=Tensor[(660), uint16] */, %var_3563, %514, meta[relay.Constant][31] /* ty=Tensor[(160), float64] */, %515, %516, %var_3594, %var_3595, meta[relay.Constant][33] /* ty=Tensor[(1120), int8] */)
}

def @func_5756() -> Tensor[(7, 7, 4), int16] {
  %517 = @func_5603() /* ty=(Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) */;
  %517.0
}

def @func_7436(%var_7424: int8, %var_7425: Tensor[(1365), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), bool], Tensor[(96), float64], Tensor[(7, 7, 4), int16], Tensor[(8, 20), float64], Tensor[(80), uint8], int8, Tensor[(1365), int64]) {
  %518 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %519 = cast(meta[relay.Constant][34] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %520 = reshape(%519, newshape=[12, 2, 4]) /* ty=Tensor[(12, 2, 4), float64] */;
  %521 = @func_5646(%520) /* ty=(Tensor[(12, 2, 4), bool],) */;
  %522 = @func_5603() /* ty=(Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) */;
  %523 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %524 = cast(%var_7424, dtype="int8") /* ty=int8 */;
  %525 = cast(%var_7425, dtype="int64") /* ty=Tensor[(1365), int64] */;
  %526 = reshape(%523, newshape=[80, 1]) /* ty=Tensor[(80, 1), uint8] */;
  %527 = reshape(%524, newshape=[]) /* ty=int8 */;
  %528 = reshape(%525, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
  %529 = @func_3453(%526, %527, %528) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 20), float64], Tensor[(660), uint16], int8, Tensor[(80, 168), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), int64]) */;
  %530 = %518.1;
  %531 = %521.0;
  %532 = %522.0;
  %533 = %529.1;
  (%530, %531, meta[relay.Constant][34] /* ty=Tensor[(96), float64] */, %532, %533, meta[relay.Constant][35] /* ty=Tensor[(80), uint8] */, %var_7424, %var_7425)
}

def @func_4022(%var_4013: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
  %534 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %535 = cast(%var_4013, dtype="float64") /* ty=Tensor[(546), float64] */;
  %536 = reshape(%535, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %537 = @func_590(%536) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %538 = %534.0;
  %539 = %537.0;
  (%538, %539, %var_4013)
}

def @func_5557(%var_5555: Tensor[(546), float64]) -> (Tensor[(600), uint64], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
  %540 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %541 = cast(%var_5555, dtype="float64") /* ty=Tensor[(546), float64] */;
  %542 = reshape(%541, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %543 = @func_590(%542) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %544 = %540.2;
  %545 = %543.0;
  (%544, %545, %var_5555)
}

def @func_4434() -> (Tensor[(7, 7, 4), float32],) {
  %546 = @func_4070() /* ty=Tensor[(7, 7, 4), float32] */;
  (%546,)
}

def @func_6690() -> Tensor[(7, 7, 4), float32] {
  %547 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %547.1
}

def @func_5007(%var_4960: int8, %var_4980: Tensor[(2, 504), int16], %var_4982: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) {
  %548 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %549 = cast(%var_4980, dtype="int16") /* ty=Tensor[(2, 504), int16] */;
  %550 = cast(%var_4980, dtype="int16") /* ty=Tensor[(2, 504), int16] */;
  %551 = cast(%var_4980, dtype="int16") /* ty=Tensor[(2, 504), int16] */;
  %552 = cast(meta[relay.Constant][37] /* ty=Tensor[(22, 4), int64] */, dtype="int64") /* ty=Tensor[(22, 4), int64] */;
  %553 = cast(%var_4982, dtype="float64") /* ty=Tensor[(546), float64] */;
  %554 = reshape(%549, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %555 = reshape(%550, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %556 = reshape(%551, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %557 = reshape(%552, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %558 = reshape(%553, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %559 = @func_4665(%554, %555, %556, %557, %558) /* ty=(Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) */;
  %560 = cast(%var_4960, dtype="int8") /* ty=int8 */;
  %561 = cast(meta[relay.Constant][36] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %562 = reshape(%560, newshape=[]) /* ty=int8 */;
  %563 = reshape(%561, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %564 = @func_152(%562, %563) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(14, 5, 16), float64] */;
  %567 = %548.0;
  %568 = %559.3;
  %569 = cos(%566) /* ty=Tensor[(14, 5, 16), float64] */;
  (%567, %var_4960, meta[relay.Constant][36] /* ty=Tensor[(1120), int8] */, %568, %var_4980, meta[relay.Constant][37] /* ty=Tensor[(22, 4), int64] */, %var_4982, %569)
}

def @func_7349() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %570 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %571 = %570.1;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %573 = sigmoid(%572) /* ty=Tensor[(7, 7, 4), float32] */;
  %574 = cast(%573, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %575 = reshape(%574, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %576 = @func_2842(%575) /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %577 = %576.1;
  (%573, %577)
}

def @func_6179() -> (Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) {
  %578 = @func_5864() /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32], Tensor[(2, 11, 14), float64], Tensor[(1, 308), float64], Tensor[(12, 5, 8), int16], Tensor[(480), int16]) */;
  %579 = %578.1;
  %580 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 4), float32] */, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = cast(meta[relay.Constant][39] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %585 = cast(meta[relay.Constant][40] /* ty=Tensor[(504), uint64] */, dtype="uint64") /* ty=Tensor[(504), uint64] */;
  %586 = reshape(%584, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), uint64] */;
  %587 = reshape(%585, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), uint64] */;
  %588 = @func_3954(%586, %587) /* ty=(Tensor[(4, 14, 9), bool], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) */;
  %589 = logical_or(%582, %583) /* ty=Tensor[(7, 7, 4), bool] */;
  %590 = %588.1;
  (%589, %590, meta[relay.Constant][39] /* ty=Tensor[(56), uint64] */, meta[relay.Constant][40] /* ty=Tensor[(504), uint64] */)
}

def @func_567(%var_547: Tensor[(7, 2, 12), int8], %var_548: Tensor[(7, 2, 12), int8]) -> (Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) {
  %591 = cast(%var_548, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %592 = shape_of(%var_547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_547, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %595 = cast(%var_547, dtype="float64") /* ty=Tensor[(7, 2, 12), float64] */;
  %596 = rsqrt(%595) /* ty=Tensor[(7, 2, 12), float64] */;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(7, 2, 12), float64] */;
  %598 = less(%593, %594) /* ty=Tensor[(7, 2, 12), bool] */;
  %599 = log(%597) /* ty=Tensor[(7, 2, 12), float64] */;
  (%598, %599)
}

def @func_4043() -> (Tensor[(7, 7, 4), float32],) {
  %600 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %601 = %600.1;
  (%601,)
}

def @func_6514() -> (Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) {
  %602 = @func_5187() /* ty=(Tensor[(8, 15, 5), bool],) */;
  %603 = @func_6206() /* ty=Tensor[(12, 2, 4), float64] */;
  %604 = %602.0;
  (%603, %604)
}

def @func_6612(%var_6568: Tensor[(308), float64], %var_6572: Tensor[(7, 42), float64]) -> (Tensor[(56), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(7, 3, 14), uint8], Tensor[(7, 42), float64], Tensor[(11, 8, 10), bool], Tensor[(880), uint64]) {
  %605 = @func_6179() /* ty=(Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) */;
  %606 = cast(%var_6568, dtype="float64") /* ty=Tensor[(308), float64] */;
  %607 = reshape(%606, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
  %608 = cast(%var_6572, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
  %609 = cast(%var_6572, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
  %610 = reshape(%608, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %611 = reshape(%609, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %612 = cast(meta[relay.Constant][41] /* ty=Tensor[(880), uint64] */, dtype="uint64") /* ty=Tensor[(880), uint64] */;
  %613 = cast(meta[relay.Constant][41] /* ty=Tensor[(880), uint64] */, dtype="uint64") /* ty=Tensor[(880), uint64] */;
  %614 = reshape(%612, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), uint64] */;
  %615 = reshape(%613, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), uint64] */;
  %616 = %605.2;
  %617 = @func_4827(%607) /* ty=Tensor[(2, 11, 14), float64] */;
  %618 = @func_1460(%610, %611) /* ty=Tensor[(7, 3, 14), uint8] */;
  %619 = @func_2347(%614, %615) /* ty=Tensor[(11, 8, 10), bool] */;
  (%616, %617, %var_6568, %618, %var_6572, %619, meta[relay.Constant][41] /* ty=Tensor[(880), uint64] */)
}

def @func_7511(%var_7492: int64) -> (Tensor[(7, 7, 4), float32], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(11, 8, 1), float32], Tensor[(7, 7, 4), float32], Tensor[(294), float64]) {
  %620 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %621 = cast(%var_7492, dtype="int64") /* ty=int64 */;
  %622 = cast(meta[relay.Constant][42] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
  %623 = cast(meta[relay.Constant][43] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %624 = reshape(%621, newshape=[]) /* ty=int64 */;
  %625 = reshape(%622, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %626 = reshape(%623, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %627 = @func_1888(%624, %625, %626) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %628 = %627.1;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %630 = cast(meta[relay.Constant][43] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %631 = cast(meta[relay.Constant][44] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %632 = reshape(%630, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %633 = reshape(%631, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %634 = @func_5287(%632, %633) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), float64], Tensor[(88), int64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */;
  %635 = %620.0;
  %636 = cosh(%629) /* ty=Tensor[(11, 8, 1), float32] */;
  %637 = %634.0;
  (%635, %var_7492, meta[relay.Constant][42] /* ty=Tensor[(88), int64] */, meta[relay.Constant][43] /* ty=Tensor[(600), uint64] */, %636, %637, meta[relay.Constant][44] /* ty=Tensor[(294), float64] */)
}

def @func_152(%var_134: int8, %var_135: Tensor[(14, 5, 16), int8]) -> (Tensor[(14, 5, 16), int8],) {
  %638 = cast(%var_134, dtype="int8") /* ty=int8 */;
  %639 = cast(%var_135, dtype="int8") /* ty=Tensor[(14, 5, 16), int8] */;
  %640 = bitwise_and(%638, %639) /* ty=Tensor[(14, 5, 16), int8] */;
  (%640,)
}

def @func_2347(%var_2342: Tensor[(11, 8, 10), uint64], %var_2343: Tensor[(11, 8, 10), uint64]) -> Tensor[(11, 8, 10), bool] {
  %641 = cast(%var_2343, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %642 = shape_of(%var_2342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_2342, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%643, %644) /* ty=Tensor[(11, 8, 10), bool] */
}

def @func_6147(%var_6124: Tensor[(660, 1), uint16], %var_6125: int8, %var_6136: Tensor[(6), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(660), uint16], int8, Tensor[(660, 80), float64], int64, Tensor[(6), float64]) {
  %645 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %646 = cast(meta[relay.Constant][45] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %647 = cast(%var_6124, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
  %648 = cast(%var_6125, dtype="int8") /* ty=int8 */;
  %649 = reshape(%646, newshape=[40, 2]) /* ty=Tensor[(40, 2), uint8] */;
  %650 = reshape(%647, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %651 = reshape(%648, newshape=[]) /* ty=int8 */;
  %652 = @func_5428(%649, %650, %651) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32], Tensor[(10, 8, 2), float64], Tensor[(40, 2), uint8], Tensor[(660), uint16], int8, Tensor[(84, 2), int8], Tensor[(7, 7, 4), float32]) */;
  %653 = cast(meta[relay.Constant][45] /* ty=Tensor[(80), uint8] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %654 = cast(%var_6124, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %655 = cast(%var_6136, dtype="float64") /* ty=Tensor[(6), float64] */;
  %656 = reshape(%655, newshape=[6, 1, 1]) /* ty=Tensor[(6, 1, 1), float64] */;
  %657 = @func_6074(%656) /* ty=(Tensor[(6, ?, ?), uint8], Tensor[(6, ?, ?), bool], Tensor[(945), float64], int64, Tensor[(88), int64], Tensor[(600), uint64]) */;
  %658 = %645.0;
  %659 = %652.4;
  %660 = mod(%653, %654) /* ty=Tensor[(660, 80), float64] */;
  %661 = %657.3;
  (%658, %659, %var_6125, %660, %661, %var_6136)
}

def @func_4108() -> (Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) {
  %662 = @func_3676() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %663 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
  %664 = %662.0;
  (%663, %664)
}

def @func_448(%var_422: Tensor[(6, 10, 11), uint16], %var_423: Tensor[(6, 10, 11), uint16]) -> (Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) {
  %665 = cast(%var_423, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %666 = shape_of(%var_422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%var_422, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = cast(meta[relay.Constant][46] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %670 = cast(meta[relay.Constant][47] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %671 = reshape(%669, newshape=[]) /* ty=int8 */;
  %672 = reshape(%670, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %673 = @func_152(%671, %672) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %674 = cast(meta[relay.Constant][46] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %675 = %673.0;
  %676 = cast(%675, dtype="int8") /* ty=Tensor[(14, 5, 16), int8] */;
  %677 = reshape(%674, newshape=[]) /* ty=int8 */;
  %678 = reshape(%676, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %679 = @func_152(%677, %678) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %680 = greater(%667, %668) /* ty=Tensor[(6, 10, 11), bool] */;
  %681 = %679.0;
  (%680, %675, meta[relay.Constant][46] /* ty=int8 */, meta[relay.Constant][47] /* ty=Tensor[(1120), int8] */, %681)
}

def @func_6221() -> (Tensor[(7, 7, 4), float32],) {
  %682 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  (%682,)
}

def @func_6464() -> (Tensor[(12, 2, 4), float64], Tensor[(7, 195), int64], Tensor[(7, 195), float32]) {
  %683 = cast(meta[relay.Constant][48] /* ty=Tensor[(7, 195), int64] */, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %684 = reshape(%683, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
  %685 = @func_3078(%684) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) */;
  %686 = %685.2;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
  %688 = @func_6206() /* ty=Tensor[(12, 2, 4), float64] */;
  %689 = atanh(%687) /* ty=Tensor[(7, 195), float32] */;
  (%688, meta[relay.Constant][48] /* ty=Tensor[(7, 195), int64] */, %689)
}

def @func_7013(%var_6999: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), bool], Tensor[(7, 7, 4), float32]) {
  %690 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %691 = %690.1;
  %692 = cast(%var_6999, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %697 = not_equal(%694, %695) /* ty=Tensor[(7, 7, 4), bool] */;
  %698 = %696.0;
  (%697, %698)
}

def @func_5930(%var_5913: Tensor[(1008), int16]) -> (Tensor[(7, 7, 4), float32], Tensor[(2, 504), int16], int8, Tensor[(1008), int16], Tensor[(546), float64], Tensor[(22, 4), int64]) {
  %699 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %700 = cast(meta[relay.Constant][49] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %701 = cast(%var_5913, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %702 = cast(meta[relay.Constant][50] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %703 = reshape(%700, newshape=[]) /* ty=int8 */;
  %704 = reshape(%701, newshape=[2, 504]) /* ty=Tensor[(2, 504), int16] */;
  %705 = reshape(%702, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %706 = @func_5007(%703, %704, %705) /* ty=(Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) */;
  %707 = cast(meta[relay.Constant][49] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %708 = cast(%var_5913, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %709 = cast(meta[relay.Constant][50] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %710 = reshape(%707, newshape=[]) /* ty=int8 */;
  %711 = reshape(%708, newshape=[2, 504]) /* ty=Tensor[(2, 504), int16] */;
  %712 = reshape(%709, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %713 = @func_5007(%710, %711, %712) /* ty=(Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) */;
  %714 = %699.1;
  %715 = %706.4;
  %716 = %713.5;
  (%714, %715, meta[relay.Constant][49] /* ty=int8 */, %var_5913, meta[relay.Constant][50] /* ty=Tensor[(546), float64] */, %716)
}

def @func_3033(%var_3011: Tensor[(13, 7, 15), int64], %var_3012: Tensor[(13, 7, 15), int64]) -> Tensor[(13, 7, 15), bool] {
  %717 = cast(%var_3012, dtype="int64") /* ty=Tensor[(13, 7, 15), int64] */;
  %718 = shape_of(%var_3011, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%var_3011, dtype="int64") /* ty=Tensor[(13, 7, 15), int64] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %721 = maximum(%719, %720) /* ty=Tensor[(13, 7, 15), int64] */;
  %722 = cast(meta[relay.Constant][51] /* ty=Tensor[(13, 7, 15), int64] */, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%724, %725) /* ty=Tensor[(13, 7, 15), bool] */
}

def @func_3335(%var_3245: Tensor[(15, 63), float64], %var_3275: Tensor[(15, 63), float32], %var_3280: Tensor[(15, 63), float32], %var_3306: Tensor[(660), uint16], %var_3314: Tensor[(88), int64], %var_3317: Tensor[(15, 63), float32]) -> (Tensor[(600), uint64], Tensor[(15, 5, 16), float64], Tensor[(300, 4), float64], Tensor[(15, 5, 16), float64], Tensor[(9, 15, 7), float64], Tensor[(7, 7, 4), float32], Tensor[(15, 63), float32], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(11, 8, 1), bool], int64, Tensor[(88), int64], Tensor[(7, 7, 4), float64], Tensor[(15, 63), bool], Tensor[(15, 63), float64]) {
  %726 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %727 = cast(meta[relay.Constant][52] /* ty=Tensor[(300, 4), float64] */, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %728 = cast(meta[relay.Constant][52] /* ty=Tensor[(300, 4), float64] */, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %729 = reshape(%727, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %730 = reshape(%728, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %731 = @func_2460(%729, %730) /* ty=(Tensor[(15, 5, 16), float64],) */;
  %732 = cast(meta[relay.Constant][52] /* ty=Tensor[(300, 4), float64] */, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %733 = %731.0;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
  %735 = reshape(%732, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %736 = reshape(%734, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %737 = @func_2460(%735, %736) /* ty=(Tensor[(15, 5, 16), float64],) */;
  %738 = cast(%var_3245, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %739 = reshape(%738, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %740 = @func_1242(%739) /* ty=(Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) */;
  %741 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %743 = cast(%var_3245, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %744 = erf(%743) /* ty=Tensor[(15, 63), float32] */;
  %745 = cast(%var_3275, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(2), int32] */;
  %747 = cast(%744, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %749 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %750 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %751 = reshape(%749, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %752 = reshape(%750, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %753 = @func_448(%751, %752) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) */;
  %754 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %755 = cast(%var_3314, dtype="int64") /* ty=Tensor[(88), int64] */;
  %756 = %726.2;
  %757 = cast(%756, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %758 = reshape(%754, newshape=[]) /* ty=int64 */;
  %759 = reshape(%755, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %760 = reshape(%757, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %761 = @func_1888(%758, %759, %760) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %762 = sqrt(%742) /* ty=Tensor[(7, 7, 4), float32] */;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %764 = reshape(%763, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %765 = @func_2842(%764) /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %766 = cast(%var_3280, dtype="int64") /* ty=Tensor[(15, 63), int64] */;
  %767 = shape_of(%744, dtype="int32") /* ty=Tensor[(2), int32] */;
  %768 = cast(%744, dtype="int64") /* ty=Tensor[(15, 63), int64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %770 = minimum(%768, %769) /* ty=Tensor[(15, 63), int64] */;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %772 = log(%771) /* ty=Tensor[(15, 63), float32] */;
  %773 = cast(%var_3317, dtype="uint32") /* ty=Tensor[(15, 63), uint32] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(2), int32] */;
  %775 = cast(%772, dtype="uint32") /* ty=Tensor[(15, 63), uint32] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %777 = multiply(%775, %776) /* ty=Tensor[(15, 63), uint32] */;
  %778 = cast(%777, dtype="bool") /* ty=Tensor[(15, 63), bool] */;
  %779 = shape_of(%772, dtype="int32") /* ty=Tensor[(2), int32] */;
  %780 = cast(%772, dtype="bool") /* ty=Tensor[(15, 63), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %782 = cast(%var_3317, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %783 = shape_of(%772, dtype="int32") /* ty=Tensor[(2), int32] */;
  %784 = cast(%772, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %786 = %737.0;
  %787 = %740.0;
  %788 = add(%747, %748) /* ty=Tensor[(15, 63), float32] */;
  %789 = %753.4;
  %790 = %761.0;
  %791 = %765.0;
  %792 = greater(%780, %781) /* ty=Tensor[(15, 63), bool] */;
  %793 = power(%784, %785) /* ty=Tensor[(15, 63), float64] */;
  (%756, %733, meta[relay.Constant][52] /* ty=Tensor[(300, 4), float64] */, %786, %787, %762, %788, %789, %var_3306, %790, 3 /* ty=int64 */, %var_3314, %791, %792, %793)
}

def @func_4364(%var_4345: Tensor[(88), int64], %var_4346: Tensor[(600), uint64]) -> (Tensor[(12, 2, 4), float64], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(12, 2, 4), float64]) {
  %794 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %795 = cast(%var_4345, dtype="int64") /* ty=Tensor[(88), int64] */;
  %796 = cast(%var_4346, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %797 = reshape(%794, newshape=[]) /* ty=int64 */;
  %798 = reshape(%795, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %799 = reshape(%796, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %800 = @func_1888(%797, %798, %799) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %801 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  %803 = tan(%802) /* ty=Tensor[(12, 2, 4), float64] */;
  %804 = cast(%801, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %808 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
  %809 = %800.4;
  %810 = add(%806, %807) /* ty=Tensor[(12, 2, 4), float64] */;
  (%808, %809, -1 /* ty=int64 */, %var_4345, %var_4346, %810)
}

def @func_5728() -> (Tensor[(7, 7, 4), float32],) {
  %811 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %812 = %811.0;
  (%812,)
}

def @func_5362(%var_5318: Tensor[(480, 1), int16], %var_5349: Tensor[(945), float64]) -> (Tensor[(7, 3, 14), uint8], Tensor[(12, 5, 8), int16], Tensor[(480, 8), bool], Tensor[(9, 15, 7), float32], Tensor[(945), float64], Tensor[(12, 5, 8), int16]) {
  %813 = @func_4949() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */;
  %814 = cast(%var_5318, dtype="int16") /* ty=Tensor[(480, 1), int16] */;
  %815 = cast(%var_5318, dtype="int16") /* ty=Tensor[(480, 1), int16] */;
  %816 = reshape(%814, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %817 = reshape(%815, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %818 = @func_4517(%816, %817) /* ty=(Tensor[(12, 5, 8), int16],) */;
  %819 = cast(%var_5318, dtype="float64") /* ty=Tensor[(480, 1), float64] */;
  %820 = sinh(%819) /* ty=Tensor[(480, 1), float64] */;
  %821 = cast(%820, dtype="bool") /* ty=Tensor[(480, 1), bool] */;
  %822 = cast(meta[relay.Constant][53] /* ty=Tensor[(480, 8), float64] */, dtype="bool") /* ty=Tensor[(480, 8), bool] */;
  %823 = cast(%var_5349, dtype="float64") /* ty=Tensor[(945), float64] */;
  %824 = reshape(%823, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %825 = @func_1242(%824) /* ty=(Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) */;
  %826 = %818.0;
  %827 = cast(%826, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
  %828 = cast(%826, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
  %829 = reshape(%827, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %830 = reshape(%828, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %831 = @func_4517(%829, %830) /* ty=(Tensor[(12, 5, 8), int16],) */;
  %832 = %813.4;
  %833 = logical_and(%821, %822) /* ty=Tensor[(480, 8), bool] */;
  %834 = %825.1;
  %835 = %831.0;
  (%832, %826, %833, %834, %var_5349, %835)
}

def @func_6286(%var_6278: Tensor[(3, 7, 3), int32], %var_6279: Tensor[(3, 7, 3), int32]) -> (Tensor[(3, 7, 3), int32],) {
  %836 = cast(%var_6279, dtype="int32") /* ty=Tensor[(3, 7, 3), int32] */;
  %837 = shape_of(%var_6278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%var_6278, dtype="int32") /* ty=Tensor[(3, 7, 3), int32] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %840 = minimum(%838, %839) /* ty=Tensor[(3, 7, 3), int32] */;
  (%840,)
}

def @func_6990(%var_6984: Tensor[(3, 10, 1), float32]) -> (Tensor[(3, 10, 1), float32],) {
  %841 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 1), float32] */;
  %842 = cast(%var_6984, dtype="float32") /* ty=Tensor[(3, 10, 1), float32] */;
  %843 = divide(%841, %842) /* ty=Tensor[(3, 10, 1), float32] */;
  (%843,)
}

def @func_7538(%var_7516: Tensor[(7, 15, 14), float64], %var_7520: Tensor[(7, 15, 14), float64], %var_7532: Tensor[(7, 15, 14), uint64]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 15, 14), bool]) {
  %844 = @func_6221() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %845 = cast(%var_7516, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %846 = cosh(%845) /* ty=Tensor[(7, 15, 14), float64] */;
  %847 = cast(%var_7520, dtype="uint64") /* ty=Tensor[(7, 15, 14), uint64] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="uint64") /* ty=Tensor[(7, 15, 14), uint64] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %851 = minimum(%849, %850) /* ty=Tensor[(7, 15, 14), uint64] */;
  %852 = cast(%var_7532, dtype="bool") /* ty=Tensor[(7, 15, 14), bool] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%851, dtype="bool") /* ty=Tensor[(7, 15, 14), bool] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %856 = %844.0;
  %857 = equal(%854, %855) /* ty=Tensor[(7, 15, 14), bool] */;
  (%856, %857)
}

def @func_2630() -> Tensor[(7, 7, 4), float32] {
  %858 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  acos(%858) /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_5287(%var_5280: Tensor[(600), uint64], %var_5283: Tensor[(294), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), float64], Tensor[(88), int64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) {
  %859 = cast(meta[relay.Constant][56] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
  %860 = cast(%var_5280, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %861 = reshape(%859, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %862 = reshape(%860, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %863 = @func_4364(%861, %862) /* ty=(Tensor[(12, 2, 4), float64], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(12, 2, 4), float64]) */;
  %864 = cast(%var_5283, dtype="float64") /* ty=Tensor[(294), float64] */;
  %865 = cast(%var_5283, dtype="float64") /* ty=Tensor[(294), float64] */;
  %866 = reshape(%864, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %867 = reshape(%865, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %868 = @func_4070() /* ty=Tensor[(7, 7, 4), float32] */;
  %869 = %863.5;
  %870 = @func_1460(%866, %867) /* ty=Tensor[(7, 3, 14), uint8] */;
  (%868, %869, meta[relay.Constant][56] /* ty=Tensor[(88), int64] */, %var_5280, %870, %var_5283)
}

def @func_3954(%var_3936: Tensor[(4, 14, 1), uint64], %var_3937: Tensor[(4, 14, 9), uint64]) -> (Tensor[(4, 14, 9), bool], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
  %871 = cast(%var_3936, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %872 = cast(%var_3937, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
  %873 = cast(meta[relay.Constant][57] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %874 = reshape(%873, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %875 = @func_590(%874) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %876 = greater(%871, %872) /* ty=Tensor[(4, 14, 9), bool] */;
  %877 = %875.0;
  (%876, %877, meta[relay.Constant][57] /* ty=Tensor[(546), float64] */)
}

def @func_4723(%var_4711: Tensor[(1008), int16]) -> (Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(1008), int16], Tensor[(88), int64], Tensor[(1, 546), float64]) {
  %878 = @func_4434() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %879 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %880 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %881 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %882 = cast(meta[relay.Constant][58] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
  %883 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 546), float64] */, dtype="float64") /* ty=Tensor[(1, 546), float64] */;
  %884 = reshape(%879, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %885 = reshape(%880, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %886 = reshape(%881, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %887 = reshape(%882, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %888 = reshape(%883, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %889 = @func_4665(%884, %885, %886, %887, %888) /* ty=(Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) */;
  %890 = %878.0;
  %891 = %889.3;
  (%890, %891, %var_4711, meta[relay.Constant][58] /* ty=Tensor[(88), int64] */, meta[relay.Constant][59] /* ty=Tensor[(1, 546), float64] */)
}

def @func_1242(%var_1215: Tensor[(9, 15, 7), float64]) -> (Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) {
  %892 = cast(%var_1215, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %893 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(9, 15, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(meta[relay.Constant][60] /* ty=Tensor[(9, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %896 = cast(meta[relay.Constant][60] /* ty=Tensor[(9, 15, 7), float64] */, dtype="float32") /* ty=Tensor[(9, 15, 7), float32] */;
  %897 = floor_divide(%894, %895) /* ty=Tensor[(9, 15, 7), float64] */;
  %898 = acos(%896) /* ty=Tensor[(9, 15, 7), float32] */;
  (%897, %898)
}

def @func_1538(%var_1516: Tensor[(6, 2, 10), uint64]) -> (Tensor[(6, 2, 10), int16], Tensor[(6, 2, 10), float32]) {
  %899 = cast(meta[relay.Constant][61] /* ty=Tensor[(6, 2, 10), uint64] */, dtype="uint64") /* ty=Tensor[(6, 2, 10), uint64] */;
  %900 = shape_of(%var_1516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%var_1516, dtype="uint64") /* ty=Tensor[(6, 2, 10), uint64] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %903 = bitwise_and(%901, %902) /* ty=Tensor[(6, 2, 10), uint64] */;
  %904 = cast(%var_1516, dtype="int16") /* ty=Tensor[(6, 2, 10), int16] */;
  %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(%903, dtype="int16") /* ty=Tensor[(6, 2, 10), int16] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %908 = cast(meta[relay.Constant][61] /* ty=Tensor[(6, 2, 10), uint64] */, dtype="float32") /* ty=Tensor[(6, 2, 10), float32] */;
  %909 = add(%906, %907) /* ty=Tensor[(6, 2, 10), int16] */;
  %910 = cos(%908) /* ty=Tensor[(6, 2, 10), float32] */;
  (%909, %910)
}

def @func_4517(%var_4501: Tensor[(12, 5, 8), int16], %var_4502: Tensor[(12, 5, 8), int16]) -> (Tensor[(12, 5, 8), int16],) {
  %911 = cast(%var_4502, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
  %912 = shape_of(%var_4501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%var_4501, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %915 = bitwise_or(%913, %914) /* ty=Tensor[(12, 5, 8), int16] */;
  (%915,)
}

def @func_6206() -> Tensor[(12, 2, 4), float64] {
  @func_3710() /* ty=Tensor[(12, 2, 4), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6179() -> (Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) {
  %0 = @func_5864() /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32], Tensor[(2, 11, 14), float64], Tensor[(1, 308), float64], Tensor[(12, 5, 8), int16], Tensor[(480), int16]) */;
  %1 = %0.1;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 7, 4), float32] */, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %7 = cast(meta[relay.Constant][2] /* ty=Tensor[(504), uint64] */, dtype="uint64") /* ty=Tensor[(504), uint64] */;
  %8 = reshape(%6, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), uint64] */;
  %9 = reshape(%7, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), uint64] */;
  %10 = @func_3954(%8, %9) /* ty=(Tensor[(4, 14, 9), bool], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) */;
  %11 = logical_or(%4, %5) /* ty=Tensor[(7, 7, 4), bool] */;
  %12 = %10.1;
  (%11, %12, meta[relay.Constant][1] /* ty=Tensor[(56), uint64] */, meta[relay.Constant][2] /* ty=Tensor[(504), uint64] */)
}

def @func_5605() -> (Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) {
  @func_5603() /* ty=(Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) */
}

def @func_3343(%var_3337: Tensor[(15, 63), float64], %var_3338: Tensor[(15, 63), float32], %var_3339: Tensor[(15, 63), float32], %var_3340: Tensor[(660), uint16], %var_3341: Tensor[(88), int64], %var_3342: Tensor[(15, 63), float32]) -> (Tensor[(600), uint64], Tensor[(15, 5, 16), float64], Tensor[(300, 4), float64], Tensor[(15, 5, 16), float64], Tensor[(9, 15, 7), float64], Tensor[(7, 7, 4), float32], Tensor[(15, 63), float32], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(11, 8, 1), bool], int64, Tensor[(88), int64], Tensor[(7, 7, 4), float64], Tensor[(15, 63), bool], Tensor[(15, 63), float64]) {
  @func_3335(%var_3337, %var_3338, %var_3339, %var_3340, %var_3341, %var_3342) /* ty=(Tensor[(600), uint64], Tensor[(15, 5, 16), float64], Tensor[(300, 4), float64], Tensor[(15, 5, 16), float64], Tensor[(9, 15, 7), float64], Tensor[(7, 7, 4), float32], Tensor[(15, 63), float32], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(11, 8, 1), bool], int64, Tensor[(88), int64], Tensor[(7, 7, 4), float64], Tensor[(15, 63), bool], Tensor[(15, 63), float64]) */
}

def @func_6690() -> Tensor[(7, 7, 4), float32] {
  %13 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %13.1
}

def @func_5930(%var_5913: Tensor[(1008), int16]) -> (Tensor[(7, 7, 4), float32], Tensor[(2, 504), int16], int8, Tensor[(1008), int16], Tensor[(546), float64], Tensor[(22, 4), int64]) {
  %14 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %15 = cast(meta[relay.Constant][3] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %16 = cast(%var_5913, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %17 = cast(meta[relay.Constant][4] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %18 = reshape(%15, newshape=[]) /* ty=int8 */;
  %19 = reshape(%16, newshape=[2, 504]) /* ty=Tensor[(2, 504), int16] */;
  %20 = reshape(%17, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %21 = @func_5007(%18, %19, %20) /* ty=(Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) */;
  %22 = cast(meta[relay.Constant][3] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %23 = cast(%var_5913, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %24 = cast(meta[relay.Constant][4] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %25 = reshape(%22, newshape=[]) /* ty=int8 */;
  %26 = reshape(%23, newshape=[2, 504]) /* ty=Tensor[(2, 504), int16] */;
  %27 = reshape(%24, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %28 = @func_5007(%25, %26, %27) /* ty=(Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) */;
  %29 = %14.1;
  %30 = %21.4;
  %31 = %28.5;
  (%29, %30, meta[relay.Constant][3] /* ty=int8 */, %var_5913, meta[relay.Constant][4] /* ty=Tensor[(546), float64] */, %31)
}

def @func_3080(%var_3079: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) {
  %40 = fn (%var_3065: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) {
    %32 = cast(%var_3065, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
    %33 = cast(%var_3065, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
    %34 = reshape(%32, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
    %35 = reshape(%33, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
    %36 = cast(%var_3065, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
    %37 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
    %38 = @func_3033(%34, %35) /* ty=Tensor[(13, 7, 15), bool] */;
    %39 = asinh(%36) /* ty=Tensor[(7, 195), float32] */;
    (%37, %38, %39)
  };
  %40(%var_3079) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) */
}

def @func_6012(%var_5977: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), bool], Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %41 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %42 = cast(%var_5977, dtype="float64") /* ty=Tensor[(546), float64] */;
  %43 = reshape(%42, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %44 = @func_590(%43) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %45 = %44.0;
  %46 = cast(%var_5977, dtype="bool") /* ty=Tensor[(546), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(13, 7, 6), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = @func_5498() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %51 = @func_4434() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %52 = %41.1;
  %53 = not_equal(%48, %49) /* ty=Tensor[(13, 7, 6), bool] */;
  %54 = %50.1;
  %55 = %51.0;
  (%52, %53, %54, %55)
}

def @func_2842(%var_2824: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) {
  %56 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %57 = cast(%var_2824, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %61 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %62 = cast(%61, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %63 = divide(%59, %60) /* ty=Tensor[(7, 7, 4), float64] */;
  %64 = erf(%62) /* ty=Tensor[(7, 7, 4), float32] */;
  (%63, %64)
}

def @func_6290(%var_6288: Tensor[(3, 7, 3), int32], %var_6289: Tensor[(3, 7, 3), int32]) -> (Tensor[(3, 7, 3), int32],) {
  @func_6286(%var_6288, %var_6289) /* ty=(Tensor[(3, 7, 3), int32],) */
}

def @func_3711() -> Tensor[(12, 2, 4), float64] {
  %66 = fn () -> Tensor[(12, 2, 4), float64] {
    %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
    acos(%65) /* ty=Tensor[(12, 2, 4), float64] */
  };
  %66() /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_6939(%var_6937: Tensor[(10, 4, 6), float32]) -> (Tensor[(10, 4, 6), bool],) {
  @func_6936(%var_6937) /* ty=(Tensor[(10, 4, 6), bool],) */
}

def @func_7543(%var_7540: Tensor[(7, 15, 14), float64], %var_7541: Tensor[(7, 15, 14), float64], %var_7542: Tensor[(7, 15, 14), uint64]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 15, 14), bool]) {
  @func_7538(%var_7540, %var_7541, %var_7542) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 15, 14), bool]) */
}

def @func_7038() -> (Tensor[(7, 7, 4), float32],) {
  %67 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %68 = %67.1;
  (%68,)
}

def @func_5187() -> (Tensor[(8, 15, 5), bool],) {
  %69 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %70 = %69.1;
  (%70,)
}

def @func_570(%var_568: Tensor[(7, 2, 12), int8], %var_569: Tensor[(7, 2, 12), int8]) -> (Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) {
  %80 = fn (%var_547: Tensor[(7, 2, 12), int8], %var_548: Tensor[(7, 2, 12), int8]) -> (Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) {
    %71 = cast(%var_548, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
    %72 = shape_of(%var_547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_547, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %75 = cast(%var_547, dtype="float64") /* ty=Tensor[(7, 2, 12), float64] */;
    %76 = rsqrt(%75) /* ty=Tensor[(7, 2, 12), float64] */;
    %77 = cast(%76, dtype="float64") /* ty=Tensor[(7, 2, 12), float64] */;
    %78 = less(%73, %74) /* ty=Tensor[(7, 2, 12), bool] */;
    %79 = log(%77) /* ty=Tensor[(7, 2, 12), float64] */;
    (%78, %79)
  };
  %80(%var_568, %var_569) /* ty=(Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) */
}

def @func_4393() -> Tensor[(7, 7, 4), float32] {
  %81 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %81.1
}

def @func_5804(%var_5803: Tensor[(15, 63), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(480, 8), bool], Tensor[(480), int16], Tensor[(15, 63), float64]) {
  %90 = fn (%var_5786: Tensor[(15, 63), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(480, 8), bool], Tensor[(480), int16], Tensor[(15, 63), float64]) {
    %82 = @func_3676() /* ty=(Tensor[(7, 7, 4), float32],) */;
    %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
    %84 = cast(%var_5786, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
    %85 = reshape(%83, newshape=[480, 1]) /* ty=Tensor[(480, 1), int16] */;
    %86 = reshape(%84, newshape=[945]) /* ty=Tensor[(945), float64] */;
    %87 = @func_5362(%85, %86) /* ty=(Tensor[(7, 3, 14), uint8], Tensor[(12, 5, 8), int16], Tensor[(480, 8), bool], Tensor[(9, 15, 7), float32], Tensor[(945), float64], Tensor[(12, 5, 8), int16]) */;
    %88 = %82.0;
    %89 = %87.2;
    (%88, %89, meta[relay.Constant][6] /* ty=Tensor[(480), int16] */, %var_5786)
  };
  %90(%var_5803) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(480, 8), bool], Tensor[(480), int16], Tensor[(15, 63), float64]) */
}

def @func_6310(%var_6307: int64, %var_6308: Tensor[(88), int64], %var_6309: Tensor[(12, 50), uint64]) -> (Tensor[(7, 7, 4), float32], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(12, 50), uint64]) {
  %101 = fn (%var_6298: int64, %var_6299: Tensor[(88), int64], %var_6300: Tensor[(12, 50), uint64]) -> (Tensor[(7, 7, 4), float32], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(12, 50), uint64]) {
    %91 = @func_4043() /* ty=(Tensor[(7, 7, 4), float32],) */;
    %92 = cast(%var_6298, dtype="int64") /* ty=int64 */;
    %93 = cast(%var_6299, dtype="int64") /* ty=Tensor[(88), int64] */;
    %94 = cast(%var_6300, dtype="uint64") /* ty=Tensor[(12, 50), uint64] */;
    %95 = reshape(%92, newshape=[]) /* ty=int64 */;
    %96 = reshape(%93, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
    %97 = reshape(%94, newshape=[600]) /* ty=Tensor[(600), uint64] */;
    %98 = @func_1888(%95, %96, %97) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
    %99 = %91.0;
    %100 = %98.4;
    (%99, %100, %var_6298, %var_6299, %var_6300)
  };
  %101(%var_6307, %var_6308, %var_6309) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(12, 50), uint64]) */
}

def @func_3911(%var_3889: int8) -> (Tensor[(12, 2, 4), float64], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8]) {
  %102 = cast(%var_3889, dtype="int8") /* ty=int8 */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %104 = reshape(%102, newshape=[]) /* ty=int8 */;
  %105 = reshape(%103, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %106 = @func_152(%104, %105) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %107 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
  %108 = %106.0;
  (%107, %108, %var_3889, meta[relay.Constant][7] /* ty=Tensor[(1120), int8] */)
}

def @func_7040() -> (Tensor[(7, 7, 4), float32],) {
  @func_7038() /* ty=(Tensor[(7, 7, 4), float32],) */
}

def @func_6465() -> (Tensor[(12, 2, 4), float64], Tensor[(7, 195), int64], Tensor[(7, 195), float32]) {
  %116 = fn () -> (Tensor[(12, 2, 4), float64], Tensor[(7, 195), int64], Tensor[(7, 195), float32]) {
    %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 195), int64] */, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
    %110 = reshape(%109, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
    %111 = @func_3078(%110) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) */;
    %112 = %111.2;
    %113 = cast(%112, dtype="float32") /* ty=Tensor[(7, 195), float32] */;
    %114 = @func_6206() /* ty=Tensor[(12, 2, 4), float64] */;
    %115 = atanh(%113) /* ty=Tensor[(7, 195), float32] */;
    (%114, meta[relay.Constant][8] /* ty=Tensor[(7, 195), int64] */, %115)
  };
  %116() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 195), int64], Tensor[(7, 195), float32]) */
}

def @func_7440(%var_7438: int8, %var_7439: Tensor[(1365), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), bool], Tensor[(96), float64], Tensor[(7, 7, 4), int16], Tensor[(8, 20), float64], Tensor[(80), uint8], int8, Tensor[(1365), int64]) {
  @func_7436(%var_7438, %var_7439) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), bool], Tensor[(96), float64], Tensor[(7, 7, 4), int16], Tensor[(8, 20), float64], Tensor[(80), uint8], int8, Tensor[(1365), int64]) */
}

def @func_451(%var_449: Tensor[(6, 10, 11), uint16], %var_450: Tensor[(6, 10, 11), uint16]) -> (Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) {
  %134 = fn (%var_422: Tensor[(6, 10, 11), uint16], %var_423: Tensor[(6, 10, 11), uint16]) -> (Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) {
    %117 = cast(%var_423, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
    %118 = shape_of(%var_422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%var_422, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %121 = cast(meta[relay.Constant][9] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %122 = cast(meta[relay.Constant][10] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %123 = reshape(%121, newshape=[]) /* ty=int8 */;
    %124 = reshape(%122, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
    %125 = @func_152(%123, %124) /* ty=(Tensor[(14, 5, 16), int8],) */;
    %126 = cast(meta[relay.Constant][9] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %127 = %125.0;
    %128 = cast(%127, dtype="int8") /* ty=Tensor[(14, 5, 16), int8] */;
    %129 = reshape(%126, newshape=[]) /* ty=int8 */;
    %130 = reshape(%128, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
    %131 = @func_152(%129, %130) /* ty=(Tensor[(14, 5, 16), int8],) */;
    %132 = greater(%119, %120) /* ty=Tensor[(6, 10, 11), bool] */;
    %133 = %131.0;
    (%132, %127, meta[relay.Constant][9] /* ty=int8 */, meta[relay.Constant][10] /* ty=Tensor[(1120), int8] */, %133)
  };
  %134(%var_449, %var_450) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) */
}

def @func_1893(%var_1890: int64, %var_1891: Tensor[(11, 8, 1), int64], %var_1892: Tensor[(600), uint64]) -> (Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) {
  @func_1888(%var_1890, %var_1891, %var_1892) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */
}

def @func_5189() -> (Tensor[(8, 15, 5), bool],) {
  @func_5187() /* ty=(Tensor[(8, 15, 5), bool],) */
}

def @func_4749() -> (Tensor[(7, 7, 4), float32],) {
  %135 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %136 = %135.0;
  (%136,)
}

def @func_7015(%var_7014: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), bool], Tensor[(7, 7, 4), float32]) {
  %146 = fn (%var_6999: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), bool], Tensor[(7, 7, 4), float32]) {
    %137 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %138 = %137.1;
    %139 = cast(%var_6999, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
    %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
    %141 = cast(%138, dtype="bool") /* ty=Tensor[(7, 7, 4), bool] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %143 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
    %144 = not_equal(%141, %142) /* ty=Tensor[(7, 7, 4), bool] */;
    %145 = %143.0;
    (%144, %145)
  };
  %146(%var_7014) /* ty=(Tensor[(7, 7, 4), bool], Tensor[(7, 7, 4), float32]) */
}

def @func_3602(%var_3546: Tensor[(7, 7, 4), float32], %var_3563: Tensor[(88), int64], %var_3594: Tensor[(4, 192), float64], %var_3595: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(660), uint16], Tensor[(88), int64], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 2, 12), bool], Tensor[(13, 7, 6), float64], Tensor[(4, 192), float64], Tensor[(546), float64], Tensor[(1120), int8]) {
  %147 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  %148 = cast(%var_3546, dtype="uint64") /* ty=Tensor[(7, 7, 4), uint64] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="uint64") /* ty=Tensor[(7, 7, 4), uint64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %152 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %153 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float64] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float64] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %155 = cast(meta[relay.Constant][12] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %156 = cast(%var_3563, dtype="int64") /* ty=Tensor[(88), int64] */;
  %157 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float64] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %158 = reshape(%152, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %159 = reshape(%153, newshape=[15, 63]) /* ty=Tensor[(15, 63), float32] */;
  %160 = reshape(%154, newshape=[15, 63]) /* ty=Tensor[(15, 63), float32] */;
  %161 = reshape(%155, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %162 = reshape(%156, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %163 = reshape(%157, newshape=[15, 63]) /* ty=Tensor[(15, 63), float32] */;
  %164 = @func_3335(%158, %159, %160, %161, %162, %163) /* ty=(Tensor[(600), uint64], Tensor[(15, 5, 16), float64], Tensor[(300, 4), float64], Tensor[(15, 5, 16), float64], Tensor[(9, 15, 7), float64], Tensor[(7, 7, 4), float32], Tensor[(15, 63), float32], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(11, 8, 1), bool], int64, Tensor[(88), int64], Tensor[(7, 7, 4), float64], Tensor[(15, 63), bool], Tensor[(15, 63), float64]) */;
  %165 = cast(meta[relay.Constant][13] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %166 = reshape(%165, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %167 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %168 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %169 = reshape(%167, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %170 = reshape(%168, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %171 = @func_567(%169, %170) /* ty=(Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) */;
  %172 = %171.0;
  %173 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), int8] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = cast(%var_3594, dtype="float64") /* ty=Tensor[(4, 192), float64] */;
  %178 = cast(%var_3595, dtype="float64") /* ty=Tensor[(546), float64] */;
  %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %180 = cast(%172, dtype="int8") /* ty=Tensor[(7, 2, 12), int8] */;
  %181 = cast(meta[relay.Constant][15] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %182 = reshape(%177, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float64] */;
  %183 = reshape(%178, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %184 = reshape(%179, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %185 = reshape(%180, newshape=[42, 4]) /* ty=Tensor[(42, 4), int8] */;
  %186 = reshape(%181, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %187 = @func_3153(%182, %183, %184, %185, %186) /* ty=(Tensor[(13, 7, 6), float64], Tensor[(546), bool], Tensor[(8, 20), float64], Tensor[(80), uint8], Tensor[(660), uint16], int8, Tensor[(42, 4), int8], Tensor[(14, 5, 16), int8], Tensor[(1120), int8], Tensor[(16, 16, 3), float32], Tensor[(7, 7, 4), float32]) */;
  %188 = multiply(%150, %151) /* ty=Tensor[(7, 7, 4), uint64] */;
  %189 = %164.4;
  %190 = @func_290(%166) /* ty=Tensor[(10, 8, 2), float64] */;
  %191 = greater_equal(%175, %176) /* ty=Tensor[(7, 2, 12), bool] */;
  %192 = %187.0;
  (%188, %189, meta[relay.Constant][11] /* ty=Tensor[(945), float64] */, meta[relay.Constant][12] /* ty=Tensor[(660), uint16] */, %var_3563, %190, meta[relay.Constant][13] /* ty=Tensor[(160), float64] */, %191, %192, %var_3594, %var_3595, meta[relay.Constant][15] /* ty=Tensor[(1120), int8] */)
}

def @func_4108() -> (Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) {
  %193 = @func_3676() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %194 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
  %195 = %193.0;
  (%194, %195)
}

def @func_4665(%var_4581: Tensor[(6, 12, 14), int16], %var_4586: Tensor[(6, 12, 14), int16], %var_4602: Tensor[(6, 12, 14), int16], %var_4647: Tensor[(88), int64], %var_4649: Tensor[(91, 6), float64]) -> (Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) {
  %196 = cast(%var_4586, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
  %197 = shape_of(%var_4581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_4581, dtype="bool") /* ty=Tensor[(6, 12, 14), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = cast(%var_4581, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
  %201 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(6, 12, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 12, 14), int16] */, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %204 = bitwise_xor(%202, %203) /* ty=Tensor[(6, 12, 14), int16] */;
  %205 = cast(%var_4586, dtype="uint64") /* ty=Tensor[(6, 12, 14), uint64] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="uint64") /* ty=Tensor[(6, 12, 14), uint64] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %209 = add(%207, %208) /* ty=Tensor[(6, 12, 14), uint64] */;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %211 = cast(%var_4602, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %212 = shape_of(%var_4586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_4586, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %215 = power(%213, %214) /* ty=Tensor[(6, 12, 14), float64] */;
  %216 = cast(%215, dtype="float64") /* ty=Tensor[(6, 12, 14), float64] */;
  %217 = @func_4393() /* ty=Tensor[(7, 7, 4), float32] */;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %219 = cast(%var_4647, dtype="int64") /* ty=Tensor[(88), int64] */;
  %220 = cast(meta[relay.Constant][17] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %221 = cast(%var_4649, dtype="float64") /* ty=Tensor[(91, 6), float64] */;
  %222 = reshape(%218, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %223 = reshape(%219, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %224 = reshape(%220, newshape=[4, 192]) /* ty=Tensor[(4, 192), float64] */;
  %225 = reshape(%221, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %226 = @func_3602(%222, %223, %224, %225) /* ty=(Tensor[(7, 7, 4), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(660), uint16], Tensor[(88), int64], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 2, 12), bool], Tensor[(13, 7, 6), float64], Tensor[(4, 192), float64], Tensor[(546), float64], Tensor[(1120), int8]) */;
  %227 = less(%198, %199) /* ty=Tensor[(6, 12, 14), bool] */;
  %228 = acos(%210) /* ty=Tensor[(6, 12, 14), float64] */;
  %229 = sin(%216) /* ty=Tensor[(6, 12, 14), float64] */;
  %230 = %226.5;
  (%227, %217, %228, %229, %230, %var_4647, meta[relay.Constant][17] /* ty=Tensor[(768), float64] */, %var_4649)
}

def @func_1242(%var_1215: Tensor[(9, 15, 7), float64]) -> (Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) {
  %231 = cast(%var_1215, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %232 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(9, 15, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %235 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 15, 7), float64] */, dtype="float32") /* ty=Tensor[(9, 15, 7), float32] */;
  %236 = floor_divide(%233, %234) /* ty=Tensor[(9, 15, 7), float64] */;
  %237 = acos(%235) /* ty=Tensor[(9, 15, 7), float32] */;
  (%236, %237)
}

def @func_1464(%var_1462: Tensor[(7, 3, 14), float64], %var_1463: Tensor[(7, 3, 14), float64]) -> Tensor[(7, 3, 14), uint8] {
  @func_1460(%var_1462, %var_1463) /* ty=Tensor[(7, 3, 14), uint8] */
}

def @func_5649(%var_5647: Tensor[(12, 2, 4), float64]) -> (Tensor[(12, 2, 4), bool],) {
  @func_5646(%var_5647) /* ty=(Tensor[(12, 2, 4), bool],) */
}

def @func_3458(%var_3455: Tensor[(80, 1), uint8], %var_3456: int8, %var_3457: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(8, 20), float64], Tensor[(660), uint16], int8, Tensor[(80, 168), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), int64]) {
  @func_3453(%var_3455, %var_3456, %var_3457) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 20), float64], Tensor[(660), uint16], int8, Tensor[(80, 168), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), int64]) */
}

def @func_6992(%var_6991: Tensor[(3, 10, 1), float32]) -> (Tensor[(3, 10, 1), float32],) {
  %241 = fn (%var_6984: Tensor[(3, 10, 1), float32]) -> (Tensor[(3, 10, 1), float32],) {
    %238 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 1), float32] */;
    %239 = cast(%var_6984, dtype="float32") /* ty=Tensor[(3, 10, 1), float32] */;
    %240 = divide(%238, %239) /* ty=Tensor[(3, 10, 1), float32] */;
    (%240,)
  };
  %241(%var_6991) /* ty=(Tensor[(3, 10, 1), float32],) */
}

def @func_1888(%var_1812: int64, %var_1813: Tensor[(11, 8, 1), int64], %var_1880: Tensor[(600), uint64]) -> (Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) {
  %242 = cast(%var_1812, dtype="bool") /* ty=bool */;
  %243 = cast(%var_1813, dtype="bool") /* ty=Tensor[(11, 8, 1), bool] */;
  %244 = cast(%var_1812, dtype="float64") /* ty=float64 */;
  %245 = cast(%var_1813, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
  %246 = cast(meta[relay.Constant][21] /* ty=Tensor[(294, 1), float64] */, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %247 = cast(meta[relay.Constant][21] /* ty=Tensor[(294, 1), float64] */, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %248 = reshape(%246, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %249 = reshape(%247, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
  %250 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %251 = reshape(%250, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), uint64] */;
  %252 = @func_1538(%251) /* ty=(Tensor[(6, 2, 10), int16], Tensor[(6, 2, 10), float32]) */;
  %253 = cast(meta[relay.Constant][20] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %254 = reshape(%253, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %255 = @func_1242(%254) /* ty=(Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) */;
  %256 = %255.1;
  %257 = cast(%256, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
  %258 = cast(%var_1812, dtype="bool") /* ty=bool */;
  %259 = cast(%var_1880, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %260 = cast(%var_1880, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %261 = reshape(%259, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %262 = reshape(%260, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %263 = @func_1582(%261, %262) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) */;
  %264 = less_equal(%242, %243) /* ty=Tensor[(11, 8, 1), bool] */;
  %265 = floor_mod(%244, %245) /* ty=Tensor[(11, 8, 1), float64] */;
  %266 = @func_1460(%248, %249) /* ty=Tensor[(7, 3, 14), uint8] */;
  %267 = %252.0;
  %268 = logical_and(%257, %258) /* ty=Tensor[(9, 15, 7), bool] */;
  %269 = %263.1;
  (%264, %265, meta[relay.Constant][20] /* ty=Tensor[(945), float64] */, %266, meta[relay.Constant][21] /* ty=Tensor[(294, 1), float64] */, %267, meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, %268, %269, %var_1880)
}

def @func_7292(%var_7290: Tensor[(12, 2, 4), float64]) -> (Tensor[(12, 2, 4), float64], Tensor[(12, 2, 4), float64]) {
  @func_7289(%var_7290) /* ty=(Tensor[(12, 2, 4), float64], Tensor[(12, 2, 4), float64]) */
}

def @func_4726(%var_4724: Tensor[(1008), int16]) -> (Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(1008), int16], Tensor[(88), int64], Tensor[(1, 546), float64]) {
  @func_4723(%var_4724) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(1008), int16], Tensor[(88), int64], Tensor[(1, 546), float64]) */
}

def @func_2631() -> Tensor[(7, 7, 4), float32] {
  %271 = fn () -> Tensor[(7, 7, 4), float32] {
    %270 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    acos(%270) /* ty=Tensor[(7, 7, 4), float32] */
  };
  %271() /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_6015(%var_6013: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), bool], Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  @func_6012(%var_6013) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), bool], Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */
}

def @func_6936(%var_6925: Tensor[(10, 4, 6), float32]) -> (Tensor[(10, 4, 6), bool],) {
  %272 = cast(%var_6925, dtype="float32") /* ty=Tensor[(10, 4, 6), float32] */;
  %273 = acos(%272) /* ty=Tensor[(10, 4, 6), float32] */;
  %274 = cast(%var_6925, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = equal(%276, %277) /* ty=Tensor[(10, 4, 6), bool] */;
  (%278,)
}

def @func_155(%var_153: int8, %var_154: Tensor[(14, 5, 16), int8]) -> (Tensor[(14, 5, 16), int8],) {
  %282 = fn (%var_134: int8, %var_135: Tensor[(14, 5, 16), int8]) -> (Tensor[(14, 5, 16), int8],) {
    %279 = cast(%var_134, dtype="int8") /* ty=int8 */;
    %280 = cast(%var_135, dtype="int8") /* ty=Tensor[(14, 5, 16), int8] */;
    %281 = bitwise_and(%279, %280) /* ty=Tensor[(14, 5, 16), int8] */;
    (%281,)
  };
  %282(%var_153, %var_154) /* ty=(Tensor[(14, 5, 16), int8],) */
}

def @func_4435() -> (Tensor[(7, 7, 4), float32],) {
  %284 = fn () -> (Tensor[(7, 7, 4), float32],) {
    %283 = @func_4070() /* ty=Tensor[(7, 7, 4), float32] */;
    (%283,)
  };
  %284() /* ty=(Tensor[(7, 7, 4), float32],) */
}

def @func_2896() -> (Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) {
  @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */
}

def @func_5499() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %291 = fn () -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
    %285 = @func_4434() /* ty=(Tensor[(7, 7, 4), float32],) */;
    %286 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
    %287 = %286.1;
    %288 = cast(%287, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %289 = %285.0;
    %290 = sinh(%288) /* ty=Tensor[(7, 7, 4), float32] */;
    (%289, %290)
  };
  %291() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */
}

def @func_7395() -> Tensor[(504), uint64] {
  %292 = @func_6179() /* ty=(Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) */;
  %292.3
}

def @func_3335(%var_3245: Tensor[(15, 63), float64], %var_3275: Tensor[(15, 63), float32], %var_3280: Tensor[(15, 63), float32], %var_3306: Tensor[(660), uint16], %var_3314: Tensor[(88), int64], %var_3317: Tensor[(15, 63), float32]) -> (Tensor[(600), uint64], Tensor[(15, 5, 16), float64], Tensor[(300, 4), float64], Tensor[(15, 5, 16), float64], Tensor[(9, 15, 7), float64], Tensor[(7, 7, 4), float32], Tensor[(15, 63), float32], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(11, 8, 1), bool], int64, Tensor[(88), int64], Tensor[(7, 7, 4), float64], Tensor[(15, 63), bool], Tensor[(15, 63), float64]) {
  %293 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %294 = cast(meta[relay.Constant][24] /* ty=Tensor[(300, 4), float64] */, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %295 = cast(meta[relay.Constant][24] /* ty=Tensor[(300, 4), float64] */, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %296 = reshape(%294, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %297 = reshape(%295, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %298 = @func_2460(%296, %297) /* ty=(Tensor[(15, 5, 16), float64],) */;
  %299 = cast(meta[relay.Constant][24] /* ty=Tensor[(300, 4), float64] */, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %300 = %298.0;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
  %302 = reshape(%299, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %303 = reshape(%301, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
  %304 = @func_2460(%302, %303) /* ty=(Tensor[(15, 5, 16), float64],) */;
  %305 = cast(%var_3245, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %306 = reshape(%305, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %307 = @func_1242(%306) /* ty=(Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) */;
  %308 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %310 = cast(%var_3245, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %311 = erf(%310) /* ty=Tensor[(15, 63), float32] */;
  %312 = cast(%var_3275, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(2), int32] */;
  %314 = cast(%311, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %316 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %317 = cast(%var_3306, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %318 = reshape(%316, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %319 = reshape(%317, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %320 = @func_448(%318, %319) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) */;
  %321 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %322 = cast(%var_3314, dtype="int64") /* ty=Tensor[(88), int64] */;
  %323 = %293.2;
  %324 = cast(%323, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %325 = reshape(%321, newshape=[]) /* ty=int64 */;
  %326 = reshape(%322, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %327 = reshape(%324, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %328 = @func_1888(%325, %326, %327) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %329 = sqrt(%309) /* ty=Tensor[(7, 7, 4), float32] */;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
  %331 = reshape(%330, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %332 = @func_2842(%331) /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %333 = cast(%var_3280, dtype="int64") /* ty=Tensor[(15, 63), int64] */;
  %334 = shape_of(%311, dtype="int32") /* ty=Tensor[(2), int32] */;
  %335 = cast(%311, dtype="int64") /* ty=Tensor[(15, 63), int64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %337 = minimum(%335, %336) /* ty=Tensor[(15, 63), int64] */;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(15, 63), float32] */;
  %339 = log(%338) /* ty=Tensor[(15, 63), float32] */;
  %340 = cast(%var_3317, dtype="uint32") /* ty=Tensor[(15, 63), uint32] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(2), int32] */;
  %342 = cast(%339, dtype="uint32") /* ty=Tensor[(15, 63), uint32] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %344 = multiply(%342, %343) /* ty=Tensor[(15, 63), uint32] */;
  %345 = cast(%344, dtype="bool") /* ty=Tensor[(15, 63), bool] */;
  %346 = shape_of(%339, dtype="int32") /* ty=Tensor[(2), int32] */;
  %347 = cast(%339, dtype="bool") /* ty=Tensor[(15, 63), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %349 = cast(%var_3317, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %350 = shape_of(%339, dtype="int32") /* ty=Tensor[(2), int32] */;
  %351 = cast(%339, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %353 = %304.0;
  %354 = %307.0;
  %355 = add(%314, %315) /* ty=Tensor[(15, 63), float32] */;
  %356 = %320.4;
  %357 = %328.0;
  %358 = %332.0;
  %359 = greater(%347, %348) /* ty=Tensor[(15, 63), bool] */;
  %360 = power(%351, %352) /* ty=Tensor[(15, 63), float64] */;
  (%323, %300, meta[relay.Constant][24] /* ty=Tensor[(300, 4), float64] */, %353, %354, %329, %355, %356, %var_3306, %357, 3 /* ty=int64 */, %var_3314, %358, %359, %360)
}

def @func_5366(%var_5364: Tensor[(480, 1), int16], %var_5365: Tensor[(945), float64]) -> (Tensor[(7, 3, 14), uint8], Tensor[(12, 5, 8), int16], Tensor[(480, 8), bool], Tensor[(9, 15, 7), float32], Tensor[(945), float64], Tensor[(12, 5, 8), int16]) {
  @func_5362(%var_5364, %var_5365) /* ty=(Tensor[(7, 3, 14), uint8], Tensor[(12, 5, 8), int16], Tensor[(480, 8), bool], Tensor[(9, 15, 7), float32], Tensor[(945), float64], Tensor[(12, 5, 8), int16]) */
}

def @func_3539(%var_3538: Tensor[(1365), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 195), float32], Tensor[(1365), int64]) {
  %374 = fn (%var_3526: Tensor[(1365), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 195), float32], Tensor[(1365), int64]) {
    %361 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
    %362 = %361.0;
    %363 = cast(%362, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %364 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
    %365 = cast(meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %366 = reshape(%365, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
    %367 = cast(%var_3526, dtype="int64") /* ty=Tensor[(1365), int64] */;
    %368 = reshape(%367, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
    %369 = @func_3078(%368) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) */;
    %370 = tan(%363) /* ty=Tensor[(7, 7, 4), float32] */;
    %371 = %364.1;
    %372 = @func_290(%366) /* ty=Tensor[(10, 8, 2), float64] */;
    %373 = %369.2;
    (%370, %371, %372, meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, %373, %var_3526)
  };
  %374(%var_3538) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 195), float32], Tensor[(1365), int64]) */
}

def @func_6516() -> (Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) {
  @func_6514() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) */
}

def @func_1540(%var_1539: Tensor[(6, 2, 10), uint64]) -> (Tensor[(6, 2, 10), int16], Tensor[(6, 2, 10), float32]) {
  %387 = fn (%var_1516: Tensor[(6, 2, 10), uint64]) -> (Tensor[(6, 2, 10), int16], Tensor[(6, 2, 10), float32]) {
    %375 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 2, 10), uint64] */, dtype="uint64") /* ty=Tensor[(6, 2, 10), uint64] */;
    %376 = shape_of(%var_1516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %377 = cast(%var_1516, dtype="uint64") /* ty=Tensor[(6, 2, 10), uint64] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %379 = bitwise_and(%377, %378) /* ty=Tensor[(6, 2, 10), uint64] */;
    %380 = cast(%var_1516, dtype="int16") /* ty=Tensor[(6, 2, 10), int16] */;
    %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%379, dtype="int16") /* ty=Tensor[(6, 2, 10), int16] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %384 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 2, 10), uint64] */, dtype="float32") /* ty=Tensor[(6, 2, 10), float32] */;
    %385 = add(%382, %383) /* ty=Tensor[(6, 2, 10), int16] */;
    %386 = cos(%384) /* ty=Tensor[(6, 2, 10), float32] */;
    (%385, %386)
  };
  %387(%var_1539) /* ty=(Tensor[(6, 2, 10), int16], Tensor[(6, 2, 10), float32]) */
}

def @func_789(%var_784: Tensor[(4, 4, 5), uint8], %var_785: Tensor[(4, 4, 5), uint8], %var_786: Tensor[(660), uint16], %var_787: int8, %var_788: Tensor[(168), int8]) -> (Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) {
  @func_782(%var_784, %var_785, %var_786, %var_787, %var_788) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) */
}

def @func_7397() -> Tensor[(504), uint64] {
  @func_7395() /* ty=Tensor[(504), uint64] */
}

def @func_7239(%var_7133: uint32, %var_7134: Tensor[(6, 2, 7), uint32], %var_7181: Tensor[(196), float32]) -> (int8, Tensor[(1008), int16], Tensor[(7, 7, 4), float32], Tensor[(196), float32], Tensor[(6, 2, 7), bool]) {
  %388 = cast(meta[relay.Constant][27] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %389 = reshape(%388, newshape=[1008]) /* ty=Tensor[(1008), int16] */;
  %390 = @func_5930(%389) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(2, 504), int16], int8, Tensor[(1008), int16], Tensor[(546), float64], Tensor[(22, 4), int64]) */;
  %391 = cast(%var_7181, dtype="float32") /* ty=Tensor[(196), float32] */;
  %392 = reshape(%391, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
  %393 = @func_4291(%392) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %394 = cast(%var_7134, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %395 = exp(%394) /* ty=Tensor[(6, 2, 7), float64] */;
  %396 = cast(%395, dtype="uint32") /* ty=Tensor[(6, 2, 7), uint32] */;
  %397 = shape_of(%var_7134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_7134, dtype="uint32") /* ty=Tensor[(6, 2, 7), uint32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %400 = bitwise_and(%398, %399) /* ty=Tensor[(6, 2, 7), uint32] */;
  %401 = cast(%var_7133, dtype="bool") /* ty=bool */;
  %402 = cast(%var_7134, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %403 = equal(%401, %402) /* ty=Tensor[(6, 2, 7), bool] */;
  %404 = cast(%403, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %405 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%400, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = %390.2;
  %409 = %393.1;
  %410 = less(%406, %407) /* ty=Tensor[(6, 2, 7), bool] */;
  (%408, meta[relay.Constant][27] /* ty=Tensor[(1008), int16] */, %409, %var_7181, %410)
}

def @func_2657() -> Tensor[(7, 7, 4), float32] {
  %413 = fn () -> Tensor[(7, 7, 4), float32] {
    %411 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
    %412 = cast(%411, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    log(%412) /* ty=Tensor[(7, 7, 4), float32] */
  };
  %413() /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_290(%var_286: Tensor[(10, 8, 2), float64]) -> Tensor[(10, 8, 2), float64] {
  %414 = cast(-5.27698f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %415 = cast(%var_286, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  floor_mod(%414, %415) /* ty=Tensor[(10, 8, 2), float64] */
}

def @func_5290(%var_5288: Tensor[(600), uint64], %var_5289: Tensor[(294), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), float64], Tensor[(88), int64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) {
  %428 = fn (%var_5280: Tensor[(600), uint64], %var_5283: Tensor[(294), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), float64], Tensor[(88), int64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) {
    %416 = cast(meta[relay.Constant][28] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
    %417 = cast(%var_5280, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %418 = reshape(%416, newshape=[88]) /* ty=Tensor[(88), int64] */;
    %419 = reshape(%417, newshape=[600]) /* ty=Tensor[(600), uint64] */;
    %420 = @func_4364(%418, %419) /* ty=(Tensor[(12, 2, 4), float64], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(12, 2, 4), float64]) */;
    %421 = cast(%var_5283, dtype="float64") /* ty=Tensor[(294), float64] */;
    %422 = cast(%var_5283, dtype="float64") /* ty=Tensor[(294), float64] */;
    %423 = reshape(%421, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %424 = reshape(%422, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %425 = @func_4070() /* ty=Tensor[(7, 7, 4), float32] */;
    %426 = %420.5;
    %427 = @func_1460(%423, %424) /* ty=Tensor[(7, 3, 14), uint8] */;
    (%425, %426, meta[relay.Constant][28] /* ty=Tensor[(88), int64] */, %var_5280, %427, %var_5283)
  };
  %428(%var_5288, %var_5289) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), float64], Tensor[(88), int64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */
}

def @func_3851() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %429 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %430 = %429.0;
  %431 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  (%430, %431)
}

def @func_7047() -> (Tensor[(7, 7, 4), int16],) {
  %434 = fn () -> (Tensor[(7, 7, 4), int16],) {
    %432 = @func_5603() /* ty=(Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) */;
    %433 = %432.0;
    (%433,)
  };
  %434() /* ty=(Tensor[(7, 7, 4), int16],) */
}

def @func_2845(%var_2843: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) {
  @func_2842(%var_2843) /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) */
}

def @func_7127() -> (Tensor[(7, 7, 4), int16],) {
  %436 = fn () -> (Tensor[(7, 7, 4), int16],) {
    %435 = @func_5756() /* ty=Tensor[(7, 7, 4), int16] */;
    (%435,)
  };
  %436() /* ty=(Tensor[(7, 7, 4), int16],) */
}

def @func_4672(%var_4667: Tensor[(6, 12, 14), int16], %var_4668: Tensor[(6, 12, 14), int16], %var_4669: Tensor[(6, 12, 14), int16], %var_4670: Tensor[(88), int64], %var_4671: Tensor[(91, 6), float64]) -> (Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) {
  @func_4665(%var_4667, %var_4668, %var_4669, %var_4670, %var_4671) /* ty=(Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) */
}

def @func_7382() -> (Tensor[(7, 7, 4), float32],) {
  @func_7380() /* ty=(Tensor[(7, 7, 4), float32],) */
}

def @func_4044() -> (Tensor[(7, 7, 4), float32],) {
  %439 = fn () -> (Tensor[(7, 7, 4), float32],) {
    %437 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %438 = %437.1;
    (%438,)
  };
  %439() /* ty=(Tensor[(7, 7, 4), float32],) */
}

def @func_4186(%var_4185: Tensor[(15, 8, 3), float32]) -> Tensor[(15, 8, 3), float32] {
  %441 = fn (%var_4166: Tensor[(15, 8, 3), float32]) -> Tensor[(15, 8, 3), float32] {
    %440 = cast(%var_4166, dtype="float32") /* ty=Tensor[(15, 8, 3), float32] */;
    rsqrt(%440) /* ty=Tensor[(15, 8, 3), float32] */
  };
  %441(%var_4185) /* ty=Tensor[(15, 8, 3), float32] */
}

def @func_5933(%var_5931: Tensor[(1008), int16]) -> (Tensor[(7, 7, 4), float32], Tensor[(2, 504), int16], int8, Tensor[(1008), int16], Tensor[(546), float64], Tensor[(22, 4), int64]) {
  @func_5930(%var_5931) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(2, 504), int16], int8, Tensor[(1008), int16], Tensor[(546), float64], Tensor[(22, 4), int64]) */
}

def @func_5603() -> (Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) {
  %442 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %443 = %442.0;
  %444 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 7, 4), float32] */, dtype="int16") /* ty=Tensor[(7, 7, 4), int16] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="int16") /* ty=Tensor[(7, 7, 4), int16] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %448 = logical_xor(%446, %447) /* ty=Tensor[(7, 7, 4), int16] */;
  %449 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
  (%448, %449)
}

def @func_6077(%var_6075: Tensor[(6, 1, 1), float64]) -> (Tensor[(6, ?, ?), uint8], Tensor[(6, ?, ?), bool], Tensor[(945), float64], int64, Tensor[(88), int64], Tensor[(600), uint64]) {
  @func_6074(%var_6075) /* ty=(Tensor[(6, ?, ?), uint8], Tensor[(6, ?, ?), bool], Tensor[(945), float64], int64, Tensor[(88), int64], Tensor[(600), uint64]) */
}

def @func_3957(%var_3955: Tensor[(4, 14, 1), uint64], %var_3956: Tensor[(4, 14, 9), uint64]) -> (Tensor[(4, 14, 9), bool], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
  %457 = fn (%var_3936: Tensor[(4, 14, 1), uint64], %var_3937: Tensor[(4, 14, 9), uint64]) -> (Tensor[(4, 14, 9), bool], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
    %450 = cast(%var_3936, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
    %451 = cast(%var_3937, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
    %452 = cast(meta[relay.Constant][30] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
    %453 = reshape(%452, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
    %454 = @func_590(%453) /* ty=(Tensor[(13, 7, 6), float64],) */;
    %455 = greater(%450, %451) /* ty=Tensor[(4, 14, 9), bool] */;
    %456 = %454.0;
    (%455, %456, meta[relay.Constant][30] /* ty=Tensor[(546), float64] */)
  };
  %457(%var_3955, %var_3956) /* ty=(Tensor[(4, 14, 9), bool], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) */
}

def @func_6864() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float64]) {
  %465 = fn () -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float64]) {
    %458 = @func_4070() /* ty=Tensor[(7, 7, 4), float32] */;
    %459 = cast(%458, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %460 = log10(%459) /* ty=Tensor[(7, 7, 4), float32] */;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %462 = reshape(%461, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
    %463 = @func_2842(%462) /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) */;
    %464 = %463.0;
    (%460, %464)
  };
  %465() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float64]) */
}

def @func_4367(%var_4365: Tensor[(88), int64], %var_4366: Tensor[(600), uint64]) -> (Tensor[(12, 2, 4), float64], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(12, 2, 4), float64]) {
  %483 = fn (%var_4345: Tensor[(88), int64], %var_4346: Tensor[(600), uint64]) -> (Tensor[(12, 2, 4), float64], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(12, 2, 4), float64]) {
    %466 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %467 = cast(%var_4345, dtype="int64") /* ty=Tensor[(88), int64] */;
    %468 = cast(%var_4346, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %469 = reshape(%466, newshape=[]) /* ty=int64 */;
    %470 = reshape(%467, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
    %471 = reshape(%468, newshape=[600]) /* ty=Tensor[(600), uint64] */;
    %472 = @func_1888(%469, %470, %471) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
    %473 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
    %474 = cast(%473, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
    %475 = tan(%474) /* ty=Tensor[(12, 2, 4), float64] */;
    %476 = cast(%473, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%475, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %480 = @func_3710() /* ty=Tensor[(12, 2, 4), float64] */;
    %481 = %472.4;
    %482 = add(%478, %479) /* ty=Tensor[(12, 2, 4), float64] */;
    (%480, %481, -1 /* ty=int64 */, %var_4345, %var_4346, %482)
  };
  %483(%var_4365, %var_4366) /* ty=(Tensor[(12, 2, 4), float64], Tensor[(294, 1), float64], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(12, 2, 4), float64]) */
}

def @func_4071() -> Tensor[(7, 7, 4), float32] {
  %487 = fn () -> Tensor[(7, 7, 4), float32] {
    %484 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %485 = %484.1;
    %486 = cast(%485, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    asinh(%486) /* ty=Tensor[(7, 7, 4), float32] */
  };
  %487() /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_7082() -> Tensor[(8, 15, 5), bool] {
  @func_7080() /* ty=Tensor[(8, 15, 5), bool] */
}

def @main(%var_7591: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 195), int64], Tensor[(13, 7, 15), uint16]) {
  %488 = @func_3853() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %489 = cast(%var_7591, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %490 = reshape(%489, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
  %491 = @func_3080(%490) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), float32]) */;
  %492 = %491.1;
  %493 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 7, 15), bool] */, dtype="uint16") /* ty=Tensor[(13, 7, 15), uint16] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="uint16") /* ty=Tensor[(13, 7, 15), uint16] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %497 = %488.0;
  %498 = multiply(%495, %496) /* ty=Tensor[(13, 7, 15), uint16] */;
  (%497, %var_7591, %498)
}

def @func_293(%var_291: Tensor[(10, 8, 2), float64]) -> Tensor[(10, 8, 2), float64] {
  @func_290(%var_291) /* ty=Tensor[(10, 8, 2), float64] */
}

def @func_7538(%var_7516: Tensor[(7, 15, 14), float64], %var_7520: Tensor[(7, 15, 14), float64], %var_7532: Tensor[(7, 15, 14), uint64]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 15, 14), bool]) {
  %499 = @func_6221() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %500 = cast(%var_7516, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %501 = cosh(%500) /* ty=Tensor[(7, 15, 14), float64] */;
  %502 = cast(%var_7520, dtype="uint64") /* ty=Tensor[(7, 15, 14), uint64] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="uint64") /* ty=Tensor[(7, 15, 14), uint64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %506 = minimum(%504, %505) /* ty=Tensor[(7, 15, 14), uint64] */;
  %507 = cast(%var_7532, dtype="bool") /* ty=Tensor[(7, 15, 14), bool] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="bool") /* ty=Tensor[(7, 15, 14), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = %499.0;
  %512 = equal(%509, %510) /* ty=Tensor[(7, 15, 14), bool] */;
  (%511, %512)
}

def @func_4024(%var_4023: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
  %519 = fn (%var_4013: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
    %513 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %514 = cast(%var_4013, dtype="float64") /* ty=Tensor[(546), float64] */;
    %515 = reshape(%514, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
    %516 = @func_590(%515) /* ty=(Tensor[(13, 7, 6), float64],) */;
    %517 = %513.0;
    %518 = %516.0;
    (%517, %518, %var_4013)
  };
  %519(%var_4023) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) */
}

def @func_4950() -> (Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) {
  %535 = fn () -> (Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) {
    %520 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
    %521 = cast(meta[relay.Constant][32] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %522 = cast(meta[relay.Constant][32] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %523 = reshape(%521, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
    %524 = reshape(%522, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), float64] */;
    %525 = @func_2460(%523, %524) /* ty=(Tensor[(15, 5, 16), float64],) */;
    %526 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
    %527 = cast(meta[relay.Constant][33] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
    %528 = cast(meta[relay.Constant][33] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
    %529 = reshape(%527, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %530 = reshape(%528, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %531 = %520.0;
    %532 = %525.0;
    %533 = %526.2;
    %534 = @func_1460(%529, %530) /* ty=Tensor[(7, 3, 14), uint8] */;
    (%531, %532, meta[relay.Constant][32] /* ty=Tensor[(1200), float64] */, %533, %534, meta[relay.Constant][33] /* ty=Tensor[(294), float64] */)
  };
  %535() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */
}

def @func_3914(%var_3912: int8) -> (Tensor[(12, 2, 4), float64], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8]) {
  @func_3911(%var_3912) /* ty=(Tensor[(12, 2, 4), float64], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8]) */
}

def @func_5560(%var_5558: Tensor[(546), float64]) -> (Tensor[(600), uint64], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
  @func_5557(%var_5558) /* ty=(Tensor[(600), uint64], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) */
}

def @func_4110() -> (Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) {
  @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */
}

def @func_3159(%var_3154: Tensor[(16, 16, 3), float64], %var_3155: Tensor[(546), float64], %var_3156: Tensor[(660), uint16], %var_3157: Tensor[(42, 4), int8], %var_3158: Tensor[(1120), int8]) -> (Tensor[(13, 7, 6), float64], Tensor[(546), bool], Tensor[(8, 20), float64], Tensor[(80), uint8], Tensor[(660), uint16], int8, Tensor[(42, 4), int8], Tensor[(14, 5, 16), int8], Tensor[(1120), int8], Tensor[(16, 16, 3), float32], Tensor[(7, 7, 4), float32]) {
  %573 = fn (%var_3082: Tensor[(16, 16, 3), float64], %var_3116: Tensor[(546), float64], %var_3122: Tensor[(660), uint16], %var_3124: Tensor[(42, 4), int8], %var_3133: Tensor[(1120), int8]) -> (Tensor[(13, 7, 6), float64], Tensor[(546), bool], Tensor[(8, 20), float64], Tensor[(80), uint8], Tensor[(660), uint16], int8, Tensor[(42, 4), int8], Tensor[(14, 5, 16), int8], Tensor[(1120), int8], Tensor[(16, 16, 3), float32], Tensor[(7, 7, 4), float32]) {
    %536 = cast(meta[relay.Constant][34] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
    %537 = reshape(%536, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
    %538 = @func_590(%537) /* ty=(Tensor[(13, 7, 6), float64],) */;
    %539 = cast(%var_3116, dtype="bool") /* ty=Tensor[(546), bool] */;
    %540 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(546), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %541 = cast(meta[relay.Constant][34] /* ty=Tensor[(546), float64] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?), bool] */;
    %543 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %544 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %545 = cast(%var_3122, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %546 = cast(meta[relay.Constant][36] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %547 = cast(%var_3124, dtype="int8") /* ty=Tensor[(42, 4), int8] */;
    %548 = reshape(%543, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
    %549 = reshape(%544, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
    %550 = reshape(%545, newshape=[660]) /* ty=Tensor[(660), uint16] */;
    %551 = reshape(%546, newshape=[]) /* ty=int8 */;
    %552 = reshape(%547, newshape=[168]) /* ty=Tensor[(168), int8] */;
    %553 = @func_782(%548, %549, %550, %551, %552) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) */;
    %554 = cast(meta[relay.Constant][36] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %555 = cast(%var_3133, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %556 = reshape(%554, newshape=[]) /* ty=int8 */;
    %557 = reshape(%555, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
    %558 = @func_152(%556, %557) /* ty=(Tensor[(14, 5, 16), int8],) */;
    %559 = cast(%var_3082, dtype="float64") /* ty=Tensor[(16, 16, 3), float64] */;
    %560 = cos(%559) /* ty=Tensor[(16, 16, 3), float64] */;
    %561 = cast(%560, dtype="int16") /* ty=Tensor[(16, 16, 3), int16] */;
    %562 = shape_of(%var_3082, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%var_3082, dtype="int16") /* ty=Tensor[(16, 16, 3), int16] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %565 = bitwise_and(%563, %564) /* ty=Tensor[(16, 16, 3), int16] */;
    %566 = cast(%565, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
    %567 = %538.0;
    %568 = not_equal(%541, %542) /* ty=Tensor[(546), bool] */;
    %569 = %553.9;
    %570 = %558.0;
    %571 = rsqrt(%566) /* ty=Tensor[(16, 16, 3), float32] */;
    %572 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
    (%567, %568, %569, meta[relay.Constant][35] /* ty=Tensor[(80), uint8] */, %var_3122, meta[relay.Constant][36] /* ty=int8 */, %var_3124, %570, %var_3133, %571, %572)
  };
  %573(%var_3154, %var_3155, %var_3156, %var_3157, %var_3158) /* ty=(Tensor[(13, 7, 6), float64], Tensor[(546), bool], Tensor[(8, 20), float64], Tensor[(80), uint8], Tensor[(660), uint16], int8, Tensor[(42, 4), int8], Tensor[(14, 5, 16), int8], Tensor[(1120), int8], Tensor[(16, 16, 3), float32], Tensor[(7, 7, 4), float32]) */
}

def @func_4830(%var_4828: Tensor[(2, 11, 14), float64]) -> Tensor[(2, 11, 14), float64] {
  @func_4827(%var_4828) /* ty=Tensor[(2, 11, 14), float64] */
}

def @func_1586(%var_1584: Tensor[(8, 15, 5), uint64], %var_1585: Tensor[(8, 15, 5), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) {
  @func_1582(%var_1584, %var_1585) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) */
}

def @func_782(%var_685: Tensor[(4, 4, 5), uint8], %var_686: Tensor[(4, 4, 5), uint8], %var_702: Tensor[(660), uint16], %var_726: int8, %var_731: Tensor[(168), int8]) -> (Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) {
  %574 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %575 = shape_of(%var_685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_685, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = cast(%var_702, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %579 = cast(%var_702, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %580 = reshape(%578, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %581 = reshape(%579, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), uint16] */;
  %582 = @func_448(%580, %581) /* ty=(Tensor[(6, 10, 11), bool], Tensor[(14, 5, 16), int8], int8, Tensor[(1120), int8], Tensor[(14, 5, 16), int8]) */;
  %583 = cast(meta[relay.Constant][37] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %584 = reshape(%583, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %585 = @func_590(%584) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %586 = cast(%var_726, dtype="int8") /* ty=int8 */;
  %587 = %582.4;
  %588 = cast(%587, dtype="int8") /* ty=Tensor[(14, 5, 16), int8] */;
  %589 = reshape(%586, newshape=[]) /* ty=int8 */;
  %590 = reshape(%588, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
  %591 = @func_152(%589, %590) /* ty=(Tensor[(14, 5, 16), int8],) */;
  %592 = cast(%var_731, dtype="int8") /* ty=Tensor[(168), int8] */;
  %593 = cast(%var_731, dtype="int8") /* ty=Tensor[(168), int8] */;
  %594 = reshape(%592, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %595 = reshape(%593, newshape=[7, 2, 12]) /* ty=Tensor[(7, 2, 12), int8] */;
  %596 = @func_567(%594, %595) /* ty=(Tensor[(7, 2, 12), bool], Tensor[(7, 2, 12), float64]) */;
  %597 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 20), float64] */, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %598 = reshape(%597, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %599 = cast(%var_685, dtype="float32") /* ty=Tensor[(4, 4, 5), float32] */;
  %600 = tan(%599) /* ty=Tensor[(4, 4, 5), float32] */;
  %601 = cast(%600, dtype="float64") /* ty=Tensor[(4, 4, 5), float64] */;
  %602 = acosh(%601) /* ty=Tensor[(4, 4, 5), float64] */;
  %603 = cast(%602, dtype="int32") /* ty=Tensor[(4, 4, 5), int32] */;
  %604 = cast(%var_726, dtype="int32") /* ty=int32 */;
  %605 = greater(%576, %577) /* ty=Tensor[(4, 4, 5), bool] */;
  %606 = %585.0;
  %607 = %591.0;
  %608 = %596.0;
  %609 = @func_290(%598) /* ty=Tensor[(10, 8, 2), float64] */;
  %610 = logical_xor(%603, %604) /* ty=Tensor[(4, 4, 5), int32] */;
  (%605, %587, %var_702, %606, meta[relay.Constant][37] /* ty=Tensor[(546), float64] */, %607, %608, %var_731, %609, meta[relay.Constant][38] /* ty=Tensor[(8, 20), float64] */, %610)
}

def @func_5011(%var_5008: int8, %var_5009: Tensor[(2, 504), int16], %var_5010: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) {
  %633 = fn (%var_4960: int8, %var_4980: Tensor[(2, 504), int16], %var_4982: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) {
    %611 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %612 = cast(%var_4980, dtype="int16") /* ty=Tensor[(2, 504), int16] */;
    %613 = cast(%var_4980, dtype="int16") /* ty=Tensor[(2, 504), int16] */;
    %614 = cast(%var_4980, dtype="int16") /* ty=Tensor[(2, 504), int16] */;
    %615 = cast(meta[relay.Constant][40] /* ty=Tensor[(22, 4), int64] */, dtype="int64") /* ty=Tensor[(22, 4), int64] */;
    %616 = cast(%var_4982, dtype="float64") /* ty=Tensor[(546), float64] */;
    %617 = reshape(%612, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
    %618 = reshape(%613, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
    %619 = reshape(%614, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
    %620 = reshape(%615, newshape=[88]) /* ty=Tensor[(88), int64] */;
    %621 = reshape(%616, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
    %622 = @func_4665(%617, %618, %619, %620, %621) /* ty=(Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) */;
    %623 = cast(%var_4960, dtype="int8") /* ty=int8 */;
    %624 = cast(meta[relay.Constant][39] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %625 = reshape(%623, newshape=[]) /* ty=int8 */;
    %626 = reshape(%624, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), int8] */;
    %627 = @func_152(%625, %626) /* ty=(Tensor[(14, 5, 16), int8],) */;
    %628 = %627.0;
    %629 = cast(%628, dtype="float64") /* ty=Tensor[(14, 5, 16), float64] */;
    %630 = %611.0;
    %631 = %622.3;
    %632 = cos(%629) /* ty=Tensor[(14, 5, 16), float64] */;
    (%630, %var_4960, meta[relay.Constant][39] /* ty=Tensor[(1120), int8] */, %631, %var_4980, meta[relay.Constant][40] /* ty=Tensor[(22, 4), int64] */, %var_4982, %632)
  };
  %633(%var_5008, %var_5009, %var_5010) /* ty=(Tensor[(7, 7, 4), float32], int8, Tensor[(1120), int8], Tensor[(6, 12, 14), float64], Tensor[(2, 504), int16], Tensor[(22, 4), int64], Tensor[(546), float64], Tensor[(14, 5, 16), float64]) */
}

def @func_4520(%var_4518: Tensor[(12, 5, 8), int16], %var_4519: Tensor[(12, 5, 8), int16]) -> (Tensor[(12, 5, 8), int16],) {
  %639 = fn (%var_4501: Tensor[(12, 5, 8), int16], %var_4502: Tensor[(12, 5, 8), int16]) -> (Tensor[(12, 5, 8), int16],) {
    %634 = cast(%var_4502, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
    %635 = shape_of(%var_4501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %636 = cast(%var_4501, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %638 = bitwise_or(%636, %637) /* ty=Tensor[(12, 5, 8), int16] */;
    (%638,)
  };
  %639(%var_4518, %var_4519) /* ty=(Tensor[(12, 5, 8), int16],) */
}

def @func_7380() -> (Tensor[(7, 7, 4), float32],) {
  %640 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %641 = %640.1;
  (%641,)
}

def @func_5432(%var_5429: Tensor[(40, 2), uint8], %var_5430: Tensor[(660), uint16], %var_5431: int8) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32], Tensor[(10, 8, 2), float64], Tensor[(40, 2), uint8], Tensor[(660), uint16], int8, Tensor[(84, 2), int8], Tensor[(7, 7, 4), float32]) {
  %661 = fn (%var_5416: Tensor[(40, 2), uint8], %var_5417: Tensor[(660), uint16], %var_5418: int8) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32], Tensor[(10, 8, 2), float64], Tensor[(40, 2), uint8], Tensor[(660), uint16], int8, Tensor[(84, 2), int8], Tensor[(7, 7, 4), float32]) {
    %642 = @func_4949() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */;
    %643 = %642.0;
    %644 = cast(%643, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %645 = reshape(%644, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
    %646 = @func_4291(%645) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %647 = cast(%var_5416, dtype="uint8") /* ty=Tensor[(40, 2), uint8] */;
    %648 = cast(%var_5416, dtype="uint8") /* ty=Tensor[(40, 2), uint8] */;
    %649 = cast(%var_5417, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %650 = cast(%var_5418, dtype="int8") /* ty=int8 */;
    %651 = cast(meta[relay.Constant][41] /* ty=Tensor[(84, 2), int8] */, dtype="int8") /* ty=Tensor[(84, 2), int8] */;
    %652 = reshape(%647, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
    %653 = reshape(%648, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
    %654 = reshape(%649, newshape=[660]) /* ty=Tensor[(660), uint16] */;
    %655 = reshape(%650, newshape=[]) /* ty=int8 */;
    %656 = reshape(%651, newshape=[168]) /* ty=Tensor[(168), int8] */;
    %657 = @func_782(%652, %653, %654, %655, %656) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) */;
    %658 = %646.0;
    %659 = %657.8;
    %660 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
    (%643, %658, %659, %var_5416, %var_5417, %var_5418, meta[relay.Constant][41] /* ty=Tensor[(84, 2), int8] */, %660)
  };
  %661(%var_5429, %var_5430, %var_5431) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32], Tensor[(10, 8, 2), float64], Tensor[(40, 2), uint8], Tensor[(660), uint16], int8, Tensor[(84, 2), int8], Tensor[(7, 7, 4), float32]) */
}

def @func_6208() -> Tensor[(12, 2, 4), float64] {
  @func_6206() /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_7436(%var_7424: int8, %var_7425: Tensor[(1365), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), bool], Tensor[(96), float64], Tensor[(7, 7, 4), int16], Tensor[(8, 20), float64], Tensor[(80), uint8], int8, Tensor[(1365), int64]) {
  %662 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %663 = cast(meta[relay.Constant][42] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %664 = reshape(%663, newshape=[12, 2, 4]) /* ty=Tensor[(12, 2, 4), float64] */;
  %665 = @func_5646(%664) /* ty=(Tensor[(12, 2, 4), bool],) */;
  %666 = @func_5603() /* ty=(Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) */;
  %667 = cast(meta[relay.Constant][43] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %668 = cast(%var_7424, dtype="int8") /* ty=int8 */;
  %669 = cast(%var_7425, dtype="int64") /* ty=Tensor[(1365), int64] */;
  %670 = reshape(%667, newshape=[80, 1]) /* ty=Tensor[(80, 1), uint8] */;
  %671 = reshape(%668, newshape=[]) /* ty=int8 */;
  %672 = reshape(%669, newshape=[7, 195]) /* ty=Tensor[(7, 195), int64] */;
  %673 = @func_3453(%670, %671, %672) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 20), float64], Tensor[(660), uint16], int8, Tensor[(80, 168), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), int64]) */;
  %674 = %662.1;
  %675 = %665.0;
  %676 = %666.0;
  %677 = %673.1;
  (%674, %675, meta[relay.Constant][42] /* ty=Tensor[(96), float64] */, %676, %677, meta[relay.Constant][43] /* ty=Tensor[(80), uint8] */, %var_7424, %var_7425)
}

def @func_3853() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */
}

def @func_6615(%var_6613: Tensor[(308), float64], %var_6614: Tensor[(7, 42), float64]) -> (Tensor[(56), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(7, 3, 14), uint8], Tensor[(7, 42), float64], Tensor[(11, 8, 10), bool], Tensor[(880), uint64]) {
  %693 = fn (%var_6568: Tensor[(308), float64], %var_6572: Tensor[(7, 42), float64]) -> (Tensor[(56), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(7, 3, 14), uint8], Tensor[(7, 42), float64], Tensor[(11, 8, 10), bool], Tensor[(880), uint64]) {
    %678 = @func_6179() /* ty=(Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) */;
    %679 = cast(%var_6568, dtype="float64") /* ty=Tensor[(308), float64] */;
    %680 = reshape(%679, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
    %681 = cast(%var_6572, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
    %682 = cast(%var_6572, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
    %683 = reshape(%681, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %684 = reshape(%682, newshape=[7, 3, 14]) /* ty=Tensor[(7, 3, 14), float64] */;
    %685 = cast(meta[relay.Constant][44] /* ty=Tensor[(880), uint64] */, dtype="uint64") /* ty=Tensor[(880), uint64] */;
    %686 = cast(meta[relay.Constant][44] /* ty=Tensor[(880), uint64] */, dtype="uint64") /* ty=Tensor[(880), uint64] */;
    %687 = reshape(%685, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), uint64] */;
    %688 = reshape(%686, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), uint64] */;
    %689 = %678.2;
    %690 = @func_4827(%680) /* ty=Tensor[(2, 11, 14), float64] */;
    %691 = @func_1460(%683, %684) /* ty=Tensor[(7, 3, 14), uint8] */;
    %692 = @func_2347(%687, %688) /* ty=Tensor[(11, 8, 10), bool] */;
    (%689, %690, %var_6568, %691, %var_6572, %692, meta[relay.Constant][44] /* ty=Tensor[(880), uint64] */)
  };
  %693(%var_6613, %var_6614) /* ty=(Tensor[(56), uint64], Tensor[(2, 11, 14), float64], Tensor[(308), float64], Tensor[(7, 3, 14), uint8], Tensor[(7, 42), float64], Tensor[(11, 8, 10), bool], Tensor[(880), uint64]) */
}

def @func_3676() -> (Tensor[(7, 7, 4), float32],) {
  %694 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %695 = %694.0;
  (%695,)
}

def @func_7289(%var_7275: Tensor[(12, 2, 4), float64]) -> (Tensor[(12, 2, 4), float64], Tensor[(12, 2, 4), float64]) {
  %696 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %697 = %696.0;
  %698 = cast(%var_7275, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %702 = @func_6514() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) */;
  %703 = power(%700, %701) /* ty=Tensor[(12, 2, 4), float64] */;
  %704 = %702.0;
  (%703, %704)
}

def @func_4827(%var_4822: Tensor[(2, 11, 14), float64]) -> Tensor[(2, 11, 14), float64] {
  %705 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %706 = shape_of(%var_4822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%var_4822, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%707, %708) /* ty=Tensor[(2, 11, 14), float64] */
}

def @func_2463(%var_2461: Tensor[(15, 5, 16), float64], %var_2462: Tensor[(15, 5, 16), float64]) -> (Tensor[(15, 5, 16), float64],) {
  %714 = fn (%var_2444: Tensor[(15, 5, 16), float64], %var_2445: Tensor[(15, 5, 16), float64]) -> (Tensor[(15, 5, 16), float64],) {
    %709 = cast(%var_2445, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
    %710 = shape_of(%var_2444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %711 = cast(%var_2444, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
    %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %713 = floor_mod(%711, %712) /* ty=Tensor[(15, 5, 16), float64] */;
    (%713,)
  };
  %714(%var_2461, %var_2462) /* ty=(Tensor[(15, 5, 16), float64],) */
}

def @func_2350(%var_2348: Tensor[(11, 8, 10), uint64], %var_2349: Tensor[(11, 8, 10), uint64]) -> Tensor[(11, 8, 10), bool] {
  %719 = fn (%var_2342: Tensor[(11, 8, 10), uint64], %var_2343: Tensor[(11, 8, 10), uint64]) -> Tensor[(11, 8, 10), bool] {
    %715 = cast(%var_2343, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
    %716 = shape_of(%var_2342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %717 = cast(%var_2342, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
    %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%717, %718) /* ty=Tensor[(11, 8, 10), bool] */
  };
  %719(%var_2348, %var_2349) /* ty=Tensor[(11, 8, 10), bool] */
}

def @func_6206() -> Tensor[(12, 2, 4), float64] {
  @func_3710() /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_3453(%var_3405: Tensor[(80, 1), uint8], %var_3407: int8, %var_3447: Tensor[(7, 195), int64]) -> (Tensor[(7, 7, 4), float32], Tensor[(8, 20), float64], Tensor[(660), uint16], int8, Tensor[(80, 168), float32], Tensor[(13, 7, 15), bool], Tensor[(7, 195), int64]) {
  %720 = cast(%var_3405, dtype="uint8") /* ty=Tensor[(80, 1), uint8] */;
  %721 = cast(%var_3405, dtype="uint8") /* ty=Tensor[(80, 1), uint8] */;
  %722 = cast(meta[relay.Constant][46] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %723 = cast(%var_3407, dtype="int8") /* ty=int8 */;
  %724 = cast(meta[relay.Constant][47] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %725 = reshape(%720, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %726 = reshape(%721, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), uint8] */;
  %727 = reshape(%722, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %728 = reshape(%723, newshape=[]) /* ty=int8 */;
  %729 = reshape(%724, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %730 = @func_782(%725, %726, %727, %728, %729) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(14, 5, 16), int8], Tensor[(660), uint16], Tensor[(13, 7, 6), float64], Tensor[(546), float64], Tensor[(14, 5, 16), int8], Tensor[(7, 2, 12), bool], Tensor[(168), int8], Tensor[(10, 8, 2), float64], Tensor[(8, 20), float64], Tensor[(4, 4, 5), int32]) */;
  %731 = cast(meta[relay.Constant][47] /* ty=Tensor[(168), int8] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %732 = cast(%var_3405, dtype="float32") /* ty=Tensor[(80, 1), float32] */;
  %733 = cast(%var_3447, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %734 = cast(%var_3447, dtype="int64") /* ty=Tensor[(7, 195), int64] */;
  %735 = reshape(%733, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
  %736 = reshape(%734, newshape=[13, 7, 15]) /* ty=Tensor[(13, 7, 15), int64] */;
  %737 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
  %738 = %730.9;
  %739 = mod(%731, %732) /* ty=Tensor[(80, 168), float32] */;
  %740 = @func_3033(%735, %736) /* ty=Tensor[(13, 7, 15), bool] */;
  (%737, %738, meta[relay.Constant][46] /* ty=Tensor[(660), uint16] */, %var_3407, %739, %740, %var_3447)
}

def @func_5557(%var_5555: Tensor[(546), float64]) -> (Tensor[(600), uint64], Tensor[(13, 7, 6), float64], Tensor[(546), float64]) {
  %741 = @func_2894() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %742 = cast(%var_5555, dtype="float64") /* ty=Tensor[(546), float64] */;
  %743 = reshape(%742, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), float64] */;
  %744 = @func_590(%743) /* ty=(Tensor[(13, 7, 6), float64],) */;
  %745 = %741.2;
  %746 = %744.0;
  (%745, %746, %var_5555)
}

def @func_7511(%var_7492: int64) -> (Tensor[(7, 7, 4), float32], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(11, 8, 1), float32], Tensor[(7, 7, 4), float32], Tensor[(294), float64]) {
  %747 = @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %748 = cast(%var_7492, dtype="int64") /* ty=int64 */;
  %749 = cast(meta[relay.Constant][48] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
  %750 = cast(meta[relay.Constant][49] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %751 = reshape(%748, newshape=[]) /* ty=int64 */;
  %752 = reshape(%749, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %753 = reshape(%750, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %754 = @func_1888(%751, %752, %753) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %755 = %754.1;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %757 = cast(meta[relay.Constant][49] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %758 = cast(meta[relay.Constant][50] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %759 = reshape(%757, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %760 = reshape(%758, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %761 = @func_5287(%759, %760) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(12, 2, 4), float64], Tensor[(88), int64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */;
  %762 = %747.0;
  %763 = cosh(%756) /* ty=Tensor[(11, 8, 1), float32] */;
  %764 = %761.0;
  (%762, %var_7492, meta[relay.Constant][48] /* ty=Tensor[(88), int64] */, meta[relay.Constant][49] /* ty=Tensor[(600), uint64] */, %763, %764, meta[relay.Constant][50] /* ty=Tensor[(294), float64] */)
}

def @func_6692() -> Tensor[(7, 7, 4), float32] {
  @func_6690() /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_6074(%var_6017: Tensor[(6, 1, 1), float64]) -> (Tensor[(6, ?, ?), uint8], Tensor[(6, ?, ?), bool], Tensor[(945), float64], int64, Tensor[(88), int64], Tensor[(600), uint64]) {
  %765 = cast(%var_6017, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %766 = cosh(%765) /* ty=Tensor[(6, 1, 1), float64] */;
  %767 = cast(%766, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %768 = sin(%767) /* ty=Tensor[(6, 1, 1), float64] */;
  %769 = cast(%766, dtype="uint16") /* ty=Tensor[(6, 1, 1), uint16] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="uint16") /* ty=Tensor[(6, 1, 1), uint16] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %773 = bitwise_and(%771, %772) /* ty=Tensor[(6, ?, ?), uint16] */;
  %774 = cast(%773, dtype="uint8") /* ty=Tensor[(6, ?, ?), uint8] */;
  %775 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%766, dtype="uint8") /* ty=Tensor[(6, 1, 1), uint8] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %778 = cast(%766, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %779 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%768, dtype="float64") /* ty=Tensor[(6, 1, 1), float64] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %782 = mod(%780, %781) /* ty=Tensor[(6, ?, ?), float64] */;
  %783 = cast(%782, dtype="bool") /* ty=Tensor[(6, ?, ?), bool] */;
  %784 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%773, dtype="bool") /* ty=Tensor[(6, ?, ?), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %787 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %788 = cast(meta[relay.Constant][51] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
  %789 = cast(meta[relay.Constant][52] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %790 = reshape(%787, newshape=[]) /* ty=int64 */;
  %791 = reshape(%788, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), int64] */;
  %792 = reshape(%789, newshape=[600]) /* ty=Tensor[(600), uint64] */;
  %793 = @func_1888(%790, %791, %792) /* ty=(Tensor[(11, 8, 1), bool], Tensor[(11, 8, 1), float64], Tensor[(945), float64], Tensor[(7, 3, 14), uint8], Tensor[(294, 1), float64], Tensor[(6, 2, 10), int16], Tensor[(120), uint64], Tensor[(9, 15, 7), bool], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) */;
  %794 = left_shift(%776, %777) /* ty=Tensor[(6, ?, ?), uint8] */;
  %795 = greater(%785, %786) /* ty=Tensor[(6, ?, ?), bool] */;
  %796 = %793.2;
  (%794, %795, %796, -6 /* ty=int64 */, meta[relay.Constant][51] /* ty=Tensor[(88), int64] */, meta[relay.Constant][52] /* ty=Tensor[(600), uint64] */)
}

def @func_5362(%var_5318: Tensor[(480, 1), int16], %var_5349: Tensor[(945), float64]) -> (Tensor[(7, 3, 14), uint8], Tensor[(12, 5, 8), int16], Tensor[(480, 8), bool], Tensor[(9, 15, 7), float32], Tensor[(945), float64], Tensor[(12, 5, 8), int16]) {
  %797 = @func_4949() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(15, 5, 16), float64], Tensor[(1200), float64], Tensor[(600), uint64], Tensor[(7, 3, 14), uint8], Tensor[(294), float64]) */;
  %798 = cast(%var_5318, dtype="int16") /* ty=Tensor[(480, 1), int16] */;
  %799 = cast(%var_5318, dtype="int16") /* ty=Tensor[(480, 1), int16] */;
  %800 = reshape(%798, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %801 = reshape(%799, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %802 = @func_4517(%800, %801) /* ty=(Tensor[(12, 5, 8), int16],) */;
  %803 = cast(%var_5318, dtype="float64") /* ty=Tensor[(480, 1), float64] */;
  %804 = sinh(%803) /* ty=Tensor[(480, 1), float64] */;
  %805 = cast(%804, dtype="bool") /* ty=Tensor[(480, 1), bool] */;
  %806 = cast(meta[relay.Constant][53] /* ty=Tensor[(480, 8), float64] */, dtype="bool") /* ty=Tensor[(480, 8), bool] */;
  %807 = cast(%var_5349, dtype="float64") /* ty=Tensor[(945), float64] */;
  %808 = reshape(%807, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %809 = @func_1242(%808) /* ty=(Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) */;
  %810 = %802.0;
  %811 = cast(%810, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
  %812 = cast(%810, dtype="int16") /* ty=Tensor[(12, 5, 8), int16] */;
  %813 = reshape(%811, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %814 = reshape(%812, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %815 = @func_4517(%813, %814) /* ty=(Tensor[(12, 5, 8), int16],) */;
  %816 = %797.4;
  %817 = logical_and(%805, %806) /* ty=Tensor[(480, 8), bool] */;
  %818 = %809.1;
  %819 = %815.0;
  (%816, %810, %817, %818, %var_5349, %819)
}

def @func_4293(%var_4292: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %827 = fn (%var_4243: Tensor[(7, 7, 4), float32]) -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
    %820 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
    %821 = cast(%var_4243, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%820, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %825 = floor_divide(%823, %824) /* ty=Tensor[(7, 7, 4), float32] */;
    %826 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
    (%825, %826)
  };
  %827(%var_4292) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */
}

def @func_6181() -> (Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) {
  @func_6179() /* ty=(Tensor[(7, 7, 4), bool], Tensor[(13, 7, 6), float64], Tensor[(56), uint64], Tensor[(504), uint64]) */
}

def @func_592(%var_591: Tensor[(13, 7, 6), float64]) -> (Tensor[(13, 7, 6), float64],) {
  %830 = fn (%var_580: Tensor[(13, 7, 6), float64]) -> (Tensor[(13, 7, 6), float64],) {
    %828 = cast(%var_580, dtype="float64") /* ty=Tensor[(13, 7, 6), float64] */;
    %829 = tan(%828) /* ty=Tensor[(13, 7, 6), float64] */;
    (%829,)
  };
  %830(%var_591) /* ty=(Tensor[(13, 7, 6), float64],) */
}

def @func_4751() -> (Tensor[(7, 7, 4), float32],) {
  @func_4749() /* ty=(Tensor[(7, 7, 4), float32],) */
}

def @func_5646(%var_5637: Tensor[(12, 2, 4), float64]) -> (Tensor[(12, 2, 4), bool],) {
  %831 = @func_4108() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(7, 7, 4), float32]) */;
  %832 = %831.0;
  %833 = cast(%var_5637, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="bool") /* ty=Tensor[(12, 2, 4), bool] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %837 = not_equal(%835, %836) /* ty=Tensor[(12, 2, 4), bool] */;
  (%837,)
}

def @func_3036(%var_3034: Tensor[(13, 7, 15), int64], %var_3035: Tensor[(13, 7, 15), int64]) -> Tensor[(13, 7, 15), bool] {
  %847 = fn (%var_3011: Tensor[(13, 7, 15), int64], %var_3012: Tensor[(13, 7, 15), int64]) -> Tensor[(13, 7, 15), bool] {
    %838 = cast(%var_3012, dtype="int64") /* ty=Tensor[(13, 7, 15), int64] */;
    %839 = shape_of(%var_3011, dtype="int32") /* ty=Tensor[(3), int32] */;
    %840 = cast(%var_3011, dtype="int64") /* ty=Tensor[(13, 7, 15), int64] */;
    %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %842 = maximum(%840, %841) /* ty=Tensor[(13, 7, 15), int64] */;
    %843 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 7, 15), int64] */, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
    %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
    %845 = cast(%842, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
    %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%845, %846) /* ty=Tensor[(13, 7, 15), bool] */
  };
  %847(%var_3034, %var_3035) /* ty=Tensor[(13, 7, 15), bool] */
}

def @func_4723(%var_4711: Tensor[(1008), int16]) -> (Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(1008), int16], Tensor[(88), int64], Tensor[(1, 546), float64]) {
  %848 = @func_4434() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %849 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %850 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %851 = cast(%var_4711, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %852 = cast(meta[relay.Constant][55] /* ty=Tensor[(88), int64] */, dtype="int64") /* ty=Tensor[(88), int64] */;
  %853 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 546), float64] */, dtype="float64") /* ty=Tensor[(1, 546), float64] */;
  %854 = reshape(%849, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %855 = reshape(%850, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %856 = reshape(%851, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %857 = reshape(%852, newshape=[88]) /* ty=Tensor[(88), int64] */;
  %858 = reshape(%853, newshape=[91, 6]) /* ty=Tensor[(91, 6), float64] */;
  %859 = @func_4665(%854, %855, %856, %857, %858) /* ty=(Tensor[(6, 12, 14), bool], Tensor[(7, 7, 4), float32], Tensor[(6, 12, 14), float64], Tensor[(6, 12, 14), float64], Tensor[(10, 8, 2), float64], Tensor[(88), int64], Tensor[(768), float64], Tensor[(91, 6), float64]) */;
  %860 = %848.0;
  %861 = %859.3;
  (%860, %861, %var_4711, meta[relay.Constant][55] /* ty=Tensor[(88), int64] */, meta[relay.Constant][56] /* ty=Tensor[(1, 546), float64] */)
}

def @func_1460(%var_1419: Tensor[(7, 3, 14), float64], %var_1448: Tensor[(7, 3, 14), float64]) -> Tensor[(7, 3, 14), uint8] {
  %862 = cast(%var_1419, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %863 = acos(%862) /* ty=Tensor[(7, 3, 14), float64] */;
  %864 = cast(%863, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %865 = log(%864) /* ty=Tensor[(7, 3, 14), float64] */;
  %866 = cast(%var_1448, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %867 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%863, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %870 = minimum(%868, %869) /* ty=Tensor[(7, 3, 14), uint8] */;
  %871 = cast(%870, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %872 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%865, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %875 = less_equal(%873, %874) /* ty=Tensor[(7, 3, 14), bool] */;
  %876 = cast(%var_1448, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%875, dtype="uint8") /* ty=Tensor[(7, 3, 14), uint8] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%878, %879) /* ty=Tensor[(7, 3, 14), uint8] */
}

def @func_6152(%var_6149: Tensor[(660, 1), uint16], %var_6150: int8, %var_6151: Tensor[(6), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(660), uint16], int8, Tensor[(660, 80), float64], int64, Tensor[(6), float64]) {
  @func_6147(%var_6149, %var_6150, %var_6151) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(660), uint16], int8, Tensor[(660, 80), float64], int64, Tensor[(6), float64]) */
}

def @func_3608(%var_3604: Tensor[(7, 7, 4), float32], %var_3605: Tensor[(88), int64], %var_3606: Tensor[(4, 192), float64], %var_3607: Tensor[(546), float64]) -> (Tensor[(7, 7, 4), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(660), uint16], Tensor[(88), int64], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 2, 12), bool], Tensor[(13, 7, 6), float64], Tensor[(4, 192), float64], Tensor[(546), float64], Tensor[(1120), int8]) {
  @func_3602(%var_3604, %var_3605, %var_3606, %var_3607) /* ty=(Tensor[(7, 7, 4), uint64], Tensor[(9, 15, 7), float64], Tensor[(945), float64], Tensor[(660), uint16], Tensor[(88), int64], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(7, 2, 12), bool], Tensor[(13, 7, 6), float64], Tensor[(4, 192), float64], Tensor[(546), float64], Tensor[(1120), int8]) */
}

def @func_6147(%var_6124: Tensor[(660, 1), uint16], %var_6125: int8, %var_6136: Tensor[(6), float64]) -> (Tensor[(7, 7, 4), float32], Tensor[(660), uint16], int8, Tensor[(660, 80), float64], int64, Tensor[(6), float64]) {
  %880 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %881 = cast(meta[relay.Constant][57] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %882 = cast(%var_6124, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
  %883 = cast(%var_6125, dtype="int8") /* ty=int8 */;
  %884 = reshape(%881, newshape=[40, 2]) /* ty=Tensor[(40, 2), uint8] */;
  %885 = reshape(%882, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %886 = reshape(%883, newshape=[]) /* ty=int8 */;
  %887 = @func_5428(%884, %885, %886) /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32], Tensor[(10, 8, 2), float64], Tensor[(40, 2), uint8], Tensor[(660), uint16], int8, Tensor[(84, 2), int8], Tensor[(7, 7, 4), float32]) */;
  %888 = cast(meta[relay.Constant][57] /* ty=Tensor[(80), uint8] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %889 = cast(%var_6124, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %890 = cast(%var_6136, dtype="float64") /* ty=Tensor[(6), float64] */;
  %891 = reshape(%890, newshape=[6, 1, 1]) /* ty=Tensor[(6, 1, 1), float64] */;
  %892 = @func_6074(%891) /* ty=(Tensor[(6, ?, ?), uint8], Tensor[(6, ?, ?), bool], Tensor[(945), float64], int64, Tensor[(88), int64], Tensor[(600), uint64]) */;
  %893 = %880.0;
  %894 = %887.4;
  %895 = mod(%888, %889) /* ty=Tensor[(660, 80), float64] */;
  %896 = %892.3;
  (%893, %894, %var_6125, %895, %896, %var_6136)
}

def @func_6286(%var_6278: Tensor[(3, 7, 3), int32], %var_6279: Tensor[(3, 7, 3), int32]) -> (Tensor[(3, 7, 3), int32],) {
  %897 = cast(%var_6279, dtype="int32") /* ty=Tensor[(3, 7, 3), int32] */;
  %898 = shape_of(%var_6278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%var_6278, dtype="int32") /* ty=Tensor[(3, 7, 3), int32] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %901 = minimum(%899, %900) /* ty=Tensor[(3, 7, 3), int32] */;
  (%901,)
}

def @func_2703() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %904 = fn () -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
    %902 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
    %903 = @func_2630() /* ty=Tensor[(7, 7, 4), float32] */;
    (%902, %903)
  };
  %904() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */
}

def @func_1582(%var_1554: Tensor[(8, 15, 5), uint64], %var_1559: Tensor[(8, 15, 5), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) {
  %905 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 15, 5), uint64] */, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %906 = shape_of(%var_1554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%var_1554, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %909 = cast(%var_1559, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %910 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(8, 15, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 15, 5), uint64] */, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %913 = multiply(%907, %908) /* ty=Tensor[(8, 15, 5), uint64] */;
  %914 = not_equal(%911, %912) /* ty=Tensor[(8, 15, 5), bool] */;
  (%913, %914)
}

def @func_5864() -> (Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32], Tensor[(2, 11, 14), float64], Tensor[(1, 308), float64], Tensor[(12, 5, 8), int16], Tensor[(480), int16]) {
  %915 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %916 = %915.0;
  %917 = cast(%916, dtype="float64") /* ty=Tensor[(7, 7, 4), float64] */;
  %918 = @func_4043() /* ty=(Tensor[(7, 7, 4), float32],) */;
  %919 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 308), float64] */, dtype="float64") /* ty=Tensor[(1, 308), float64] */;
  %920 = reshape(%919, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), float64] */;
  %921 = cast(meta[relay.Constant][60] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %922 = cast(meta[relay.Constant][60] /* ty=Tensor[(480), int16] */, dtype="int16") /* ty=Tensor[(480), int16] */;
  %923 = reshape(%921, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %924 = reshape(%922, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), int16] */;
  %925 = @func_4517(%923, %924) /* ty=(Tensor[(12, 5, 8), int16],) */;
  %926 = log2(%917) /* ty=Tensor[(7, 7, 4), float64] */;
  %927 = %918.0;
  %928 = @func_4827(%920) /* ty=Tensor[(2, 11, 14), float64] */;
  %929 = %925.0;
  (%926, %927, %928, meta[relay.Constant][59] /* ty=Tensor[(1, 308), float64] */, %929, meta[relay.Constant][60] /* ty=Tensor[(480), int16] */)
}

def @func_4395() -> Tensor[(7, 7, 4), float32] {
  @func_4393() /* ty=Tensor[(7, 7, 4), float32] */
}

def @func_7244(%var_7241: uint32, %var_7242: Tensor[(6, 2, 7), uint32], %var_7243: Tensor[(196), float32]) -> (int8, Tensor[(1008), int16], Tensor[(7, 7, 4), float32], Tensor[(196), float32], Tensor[(6, 2, 7), bool]) {
  @func_7239(%var_7241, %var_7242, %var_7243) /* ty=(int8, Tensor[(1008), int16], Tensor[(7, 7, 4), float32], Tensor[(196), float32], Tensor[(6, 2, 7), bool]) */
}

def @func_5757() -> Tensor[(7, 7, 4), int16] {
  %931 = fn () -> Tensor[(7, 7, 4), int16] {
    %930 = @func_5603() /* ty=(Tensor[(7, 7, 4), int16], Tensor[(7, 7, 4), float32]) */;
    %930.0
  };
  %931() /* ty=Tensor[(7, 7, 4), int16] */
}

def @func_1245(%var_1243: Tensor[(9, 15, 7), float64]) -> (Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) {
  @func_1242(%var_1243) /* ty=(Tensor[(9, 15, 7), float64], Tensor[(9, 15, 7), float32]) */
}

def @func_7080() -> Tensor[(8, 15, 5), bool] {
  %932 = @func_6514() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) */;
  %932.1
}

def @func_3678() -> (Tensor[(7, 7, 4), float32],) {
  @func_3676() /* ty=(Tensor[(7, 7, 4), float32],) */
}

def @func_5729() -> (Tensor[(7, 7, 4), float32],) {
  %935 = fn () -> (Tensor[(7, 7, 4), float32],) {
    %933 = @func_3851() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %934 = %933.0;
    (%934,)
  };
  %935() /* ty=(Tensor[(7, 7, 4), float32],) */
}

def @func_7350() -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
  %944 = fn () -> (Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) {
    %936 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
    %937 = %936.1;
    %938 = cast(%937, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %939 = sigmoid(%938) /* ty=Tensor[(7, 7, 4), float32] */;
    %940 = cast(%939, dtype="float32") /* ty=Tensor[(7, 7, 4), float32] */;
    %941 = reshape(%940, newshape=[7, 7, 4]) /* ty=Tensor[(7, 7, 4), float32] */;
    %942 = @func_2842(%941) /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32]) */;
    %943 = %942.1;
    (%939, %943)
  };
  %944() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */
}

def @func_7514(%var_7512: int64) -> (Tensor[(7, 7, 4), float32], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(11, 8, 1), float32], Tensor[(7, 7, 4), float32], Tensor[(294), float64]) {
  @func_7511(%var_7512) /* ty=(Tensor[(7, 7, 4), float32], int64, Tensor[(88), int64], Tensor[(600), uint64], Tensor[(11, 8, 1), float32], Tensor[(7, 7, 4), float32], Tensor[(294), float64]) */
}

def @func_2894() -> (Tensor[(7, 7, 4), float32], Tensor[(8, 15, 5), bool], Tensor[(600), uint64]) {
  %945 = @func_2702() /* ty=(Tensor[(7, 7, 4), float32], Tensor[(7, 7, 4), float32]) */;
  %946 = cast(meta[relay.Constant][61] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %947 = cast(meta[relay.Constant][61] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %948 = reshape(%946, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %949 = reshape(%947, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %950 = @func_1582(%948, %949) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), bool]) */;
  %951 = %945.1;
  %952 = %950.1;
  (%951, %952, meta[relay.Constant][61] /* ty=Tensor[(600), uint64] */)
}

def @func_5866() -> (Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32], Tensor[(2, 11, 14), float64], Tensor[(1, 308), float64], Tensor[(12, 5, 8), int16], Tensor[(480), int16]) {
  @func_5864() /* ty=(Tensor[(7, 7, 4), float64], Tensor[(7, 7, 4), float32], Tensor[(2, 11, 14), float64], Tensor[(1, 308), float64], Tensor[(12, 5, 8), int16], Tensor[(480), int16]) */
}

def @func_6514() -> (Tensor[(12, 2, 4), float64], Tensor[(8, 15, 5), bool]) {
  %953 = @func_5187() /* ty=(Tensor[(8, 15, 5), bool],) */;
  %954 = @func_6206() /* ty=Tensor[(12, 2, 4), float64] */;
  %955 = %953.0;
  (%954, %955)
}

def @func_6222() -> (Tensor[(7, 7, 4), float32],) {
  %957 = fn () -> (Tensor[(7, 7, 4), float32],) {
    %956 = @func_2656() /* ty=Tensor[(7, 7, 4), float32] */;
    (%956,)
  };
  %957() /* ty=(Tensor[(7, 7, 4), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen537/build/output.py", line 2004, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:29:31] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

