==========mod==========
#[version = "0.0.5"]
def @func_10894() -> (Tensor[(5, 10, 5), bool], Tensor[(539), float32]) {
  %0 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %2 = reshape(%1, newshape=[11, 49]) /* ty=Tensor[(11, 49), uint8] */;
  %3 = @func_5235(%2) /* ty=(Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) */;
  %4 = %3.2;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
  %6 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(539), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(539), uint8] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?), float32] */;
  %9 = %0.0;
  %10 = mod(%7, %8) /* ty=Tensor[(539), float32] */;
  (%9, %10)
}

def @func_7882() -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(252), float64]) {
  %11 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %13 = reshape(%12, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %14 = @func_7383(%13) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
  %15 = %11.0;
  %16 = %14.1;
  (%15, %16, meta[relay.Constant][1] /* ty=Tensor[(252), float64] */)
}

def @func_8356(%var_8336: Tensor[(2304), int8]) -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], float64, Tensor[(2304), int8], Tensor[(7, 4, 9), float64]) {
  %17 = cast(-0.760556f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %18 = cast(%var_8336, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %19 = reshape(%17, newshape=[]) /* ty=float64 */;
  %20 = reshape(%18, newshape=[2304]) /* ty=Tensor[(2304), int8] */;
  %21 = @func_938(%19, %20) /* ty=(Tensor[(4, 1, 6), float64], Tensor[(4, 1, 6), float32], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */;
  %22 = @func_6884() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %23 = @func_5021() /* ty=Tensor[(7, 4, 9), float64] */;
  %24 = @func_4067() /* ty=Tensor[(5, 10, 5), bool] */;
  %25 = %21.4;
  %26 = %22.1;
  (%23, %24, %25, -0.760556f64 /* ty=float64 */, %var_8336, %26)
}

def @func_12910() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %27 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %28 = @func_11284() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %29 = %27.1;
  %30 = %28.0;
  (%29, %30)
}

def @func_13745(%var_13682: Tensor[(250), bool]) -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), uint8], Tensor[(250), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(2304), int8], Tensor[(1, 96), uint16]) {
  %31 = @func_6956() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %32 = cast(%var_13682, dtype="bool") /* ty=Tensor[(250), bool] */;
  %33 = cast(%var_13682, dtype="bool") /* ty=Tensor[(250), bool] */;
  %34 = reshape(%32, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %35 = reshape(%33, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %36 = @func_2364(%34, %35) /* ty=(Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) */;
  %37 = cast(%var_13682, dtype="float64") /* ty=Tensor[(250), float64] */;
  %38 = %31.0;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %40 = reshape(%39, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %41 = @func_7383(%40) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
  %42 = @func_12801() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 96), uint16] */, dtype="uint16") /* ty=Tensor[(1, 96), uint16] */;
  %44 = reshape(%43, newshape=[96, 1]) /* ty=Tensor[(96, 1), uint16] */;
  %45 = @func_9479(%44) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(2, 8, 6), uint16], Tensor[(96, 1), uint16], Tensor[(7, 4, 9), uint16], Tensor[(11, 13, 5), float64], Tensor[(900), float32]) */;
  %46 = %36.1;
  %47 = cos(%37) /* ty=Tensor[(250), float64] */;
  %48 = %41.1;
  %49 = %42.1;
  %50 = %45.1;
  (%38, %46, %47, %48, %49, %50, meta[relay.Constant][2] /* ty=Tensor[(1, 96), uint16] */)
}

def @func_15611() -> (Tensor[(7, 4, 9), float64],) {
  %51 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %52 = %51.1;
  (%52,)
}

def @func_9528() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %53 = @func_8175() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %54 = %53.0;
  %55 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
  (%54, %55)
}

def @func_10258() -> Tensor[(33, 4), float32] {
  %56 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %57 = %56.2;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(33, 4), float64] */;
  %59 = sqrt(%58) /* ty=Tensor[(33, 4), float64] */;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(33, 4), float32] */;
  cosh(%60) /* ty=Tensor[(33, 4), float32] */
}

def @func_7343() -> Tensor[(7, 4, 9), float64] {
  %61 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %61.1
}

def @func_8553() -> (Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) {
  %62 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %63 = %62.3;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %65 = @func_7814() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %66 = erf(%64) /* ty=Tensor[(2304), float64] */;
  %67 = %65.6;
  (%66, %67)
}

def @func_16208() -> (Tensor[(7, 4, 9), float64], Tensor[(539, 1), uint8]) {
  %68 = @func_13437() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) */;
  %69 = @func_10430() /* ty=Tensor[(7, 4, 9), float64] */;
  %70 = %68.2;
  (%69, %70)
}

def @func_7861() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) {
  %71 = @func_6027() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %72 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 16), uint64] */, dtype="uint64") /* ty=Tensor[(2, 16), uint64] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %75 = reshape(%73, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
  %76 = reshape(%74, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
  %77 = @func_6518(%75, %76) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
  %78 = %71.0;
  %79 = %72.0;
  %80 = %77.1;
  (%78, %79, %80, meta[relay.Constant][3] /* ty=Tensor[(2, 16), uint64] */, meta[relay.Constant][4] /* ty=Tensor[(416), uint64] */)
}

def @func_12697(%var_12680: int32) -> (Tensor[(6, 1, 14), int32], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64]) {
  %81 = cast(%var_12680, dtype="int32") /* ty=int32 */;
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 1, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 1, 14), int32] */;
  %83 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %84 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %85 = bitwise_xor(%81, %82) /* ty=Tensor[(6, 1, 14), int32] */;
  %86 = %83.0;
  %87 = %84.1;
  (%85, %86, %87)
}

def @func_9192() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %88 = @func_8525() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %89 = @func_7306() /* ty=Tensor[(7, 4, 9), float64] */;
  %90 = %88.3;
  (%89, %90)
}

def @func_16165() -> Tensor[(132), uint8] {
  %91 = @func_15151() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(132), uint8]) */;
  %91.2
}

def @func_15805(%var_15785: Tensor[(6, 11, 15), float32]) -> (Tensor[(6, 11, 15), float32],) {
  %92 = cast(%var_15785, dtype="float32") /* ty=Tensor[(6, 11, 15), float32] */;
  %93 = acosh(%92) /* ty=Tensor[(6, 11, 15), float32] */;
  (%93,)
}

def @func_9554() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %94 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
  %95 = @func_3488() /* ty=Tensor[(7, 4, 9), float64] */;
  %96 = %94.0;
  (%95, %96)
}

def @func_9417() -> Tensor[(7, 4, 9), uint16] {
  %97 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %97.0
}

def @func_8255() -> Tensor[(7, 4, 9), float64] {
  %98 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %98.0
}

def @func_14883() -> (Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), bool]) {
  %99 = @func_8671() /* ty=(Tensor[(5, 10, 5), float64],) */;
  %100 = @func_12201() /* ty=(Tensor[(7, 4, 9), bool],) */;
  %101 = %99.0;
  %102 = %100.0;
  (%101, %102)
}

def @func_8277() -> (Tensor[(7, 4, 9), float64],) {
  %103 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
  (%103,)
}

def @func_11626() -> (Tensor[(7, 11, 7), uint8], Tensor[(7, 4, 9), float64]) {
  %104 = @func_6165() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) */;
  %105 = @func_11284() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %106 = %104.1;
  %107 = %105.0;
  (%106, %107)
}

def @func_15853() -> (Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8], Tensor[(132), uint8]) {
  %108 = @func_15188() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(8, 8, 12), float64]) */;
  %109 = cast(meta[relay.Constant][6] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %110 = reshape(%109, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint8] */;
  %111 = @func_11470(%110) /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) */;
  %112 = %108.0;
  %113 = %111.4;
  (%112, %113, meta[relay.Constant][6] /* ty=Tensor[(132), uint8] */)
}

def @func_16093() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %114 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %115 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %116 = @func_9632() /* ty=Tensor[(7, 4, 9), float64] */;
  %117 = %114.0;
  %118 = %115.0;
  (%116, %117, %118)
}

def @func_16438() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
  %119 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
  %120 = @func_8012() /* ty=Tensor[(7, 4, 9), uint16] */;
  %121 = %119.0;
  (%120, %121)
}

def @func_14920() -> Tensor[(75), float32] {
  @func_13318() /* ty=Tensor[(75), float32] */
}

def @func_17181() -> (Tensor[(7, 11, 7), uint8],) {
  %122 = @func_6165() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) */;
  %123 = %122.1;
  (%123,)
}

def @func_6096() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %124 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %125 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %126 = %124.3;
  %127 = %125.0;
  (%126, %127)
}

def @func_2427() -> Tensor[(7, 4, 9), float64] {
  %128 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %128.1
}

def @func_16966() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %129 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %130 = @func_9417() /* ty=Tensor[(7, 4, 9), uint16] */;
  %131 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  %132 = %129.0;
  (%130, %131, %132)
}

def @func_5021() -> Tensor[(7, 4, 9), float64] {
  %133 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %133.0
}

def @func_14640() -> (Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) {
  %134 = @func_13895() /* ty=Tensor[(33, 4), float32] */;
  %135 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
  (%134, %135)
}

def @func_12953() -> Tensor[(7, 4, 9), float64] {
  %136 = @func_8175() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %136.0
}

def @func_9055() -> Tensor[(7, 4, 9), float32] {
  %137 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %137.0
}

def @func_6027() -> (Tensor[(7, 4, 9), float64],) {
  %138 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %139 = %138.0;
  (%139,)
}

def @func_4295() -> (Tensor[(7, 4, 9), float32],) {
  %140 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %142 = log2(%141) /* ty=Tensor[(7, 4, 9), float32] */;
  (%142,)
}

def @func_2068() -> (Tensor[(7, 4, 9), float64],) {
  %143 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  (%143,)
}

def @func_10841() -> Tensor[(7, 4, 9), float64] {
  %144 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %144.0
}

def @func_9776() -> Tensor[(7, 4, 9), float32] {
  %145 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %145.0
}

def @func_1931() -> (Tensor[(7, 4, 9), uint16],) {
  %146 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %149 = log10(%148) /* ty=Tensor[(7, 4, 9), float64] */;
  %150 = cast(%147, dtype="uint16") /* ty=Tensor[(7, 4, 9), uint16] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="uint16") /* ty=Tensor[(7, 4, 9), uint16] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %154 = logical_xor(%152, %153) /* ty=Tensor[(7, 4, 9), uint16] */;
  (%154,)
}

def @func_5596() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %155 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %156 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
  %157 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %158 = %155.0;
  (%156, %157, %158)
}

def @func_14651() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %159 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %160 = @func_5154() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) */;
  %161 = @func_10746() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */;
  %162 = %159.0;
  %163 = %160.1;
  %164 = %161.0;
  (%162, %163, %164)
}

def @func_1549() -> (Tensor[(5, 10, 5), bool],) {
  %165 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 10, 5), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %167 = logical_and(%165, %166) /* ty=Tensor[(5, 10, 5), bool] */;
  (%167,)
}

def @func_14852() -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(390), float64]) {
  %168 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %169 = %168.0;
  %170 = @func_6010() /* ty=Tensor[(2304), int8] */;
  %171 = @func_12094() /* ty=Tensor[(390), float64] */;
  (%169, %170, %171)
}

def @func_5940() -> Tensor[(7, 4, 9), float64] {
  @func_3488() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_3028() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %172 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %173 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
  %174 = %172.0;
  (%173, %174)
}

def @func_4046(%var_3990: Tensor[(539), uint8], %var_4025: Tensor[(539), float64]) -> (Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) {
  %175 = cast(%var_3990, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %176 = cast(%var_3990, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %177 = reshape(%175, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %178 = reshape(%176, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %179 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %180 = cast(%var_3990, dtype="float64") /* ty=Tensor[(539), float64] */;
  %181 = sin(%180) /* ty=Tensor[(539), float64] */;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(539), float64] */;
  %183 = acos(%182) /* ty=Tensor[(539), float64] */;
  %184 = cast(%var_4025, dtype="int64") /* ty=Tensor[(539), int64] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(%183, dtype="int64") /* ty=Tensor[(539), int64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), int64] */;
  %188 = bitwise_or(%186, %187) /* ty=Tensor[(539), int64] */;
  %189 = cast(%183, dtype="int16") /* ty=Tensor[(539), int16] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(1), int32] */;
  %191 = cast(%188, dtype="int16") /* ty=Tensor[(539), int16] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?), int16] */;
  %193 = @func_2764() /* ty=Tensor[(7, 4, 9), float32] */;
  %194 = @func_320(%177, %178) /* ty=Tensor[(7, 11, 7), uint8] */;
  %195 = %179.0;
  %196 = bitwise_xor(%191, %192) /* ty=Tensor[(539), int16] */;
  (%193, %194, %195, %196)
}

def @func_8588() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
  %197 = @func_7045() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
  %198 = @func_8012() /* ty=Tensor[(7, 4, 9), uint16] */;
  %199 = %197.0;
  (%198, %199)
}

def @func_3303() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %200 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %201 = %200.0;
  %202 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  (%201, %202)
}

def @func_9726() -> (Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %203 = @func_8671() /* ty=(Tensor[(5, 10, 5), float64],) */;
  %204 = @func_7619() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %205 = @func_7953() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %206 = %203.0;
  %207 = %204.0;
  %208 = %205.3;
  (%206, %207, %208)
}

def @func_320(%var_313: Tensor[(7, 11, 7), uint8], %var_314: Tensor[(7, 11, 7), uint8]) -> Tensor[(7, 11, 7), uint8] {
  %209 = cast(%var_314, dtype="uint8") /* ty=Tensor[(7, 11, 7), uint8] */;
  %210 = shape_of(%var_313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_313, dtype="uint8") /* ty=Tensor[(7, 11, 7), uint8] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%211, %212) /* ty=Tensor[(7, 11, 7), uint8] */
}

def @func_6115() -> (Tensor[(7, 4, 9), float64],) {
  %213 = @func_6027() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %214 = %213.0;
  (%214,)
}

def @func_1982() -> Tensor[(7, 4, 9), float32] {
  %215 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %216 = %215.1;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  erf(%217) /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_10277(%var_10271: Tensor[(539), uint8]) -> (Tensor[(2304), int8], Tensor[(539), int16], Tensor[(539), uint8]) {
  %218 = cast(%var_10271, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %219 = cast(%var_10271, dtype="float64") /* ty=Tensor[(539), float64] */;
  %220 = reshape(%218, newshape=[539]) /* ty=Tensor[(539), uint8] */;
  %221 = reshape(%219, newshape=[539]) /* ty=Tensor[(539), float64] */;
  %222 = @func_4046(%220, %221) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) */;
  %223 = @func_4510() /* ty=Tensor[(2304), int8] */;
  %224 = %222.3;
  (%223, %224, %var_10271)
}

def @func_1457() -> (Tensor[(7, 4, 9), float64],) {
  %225 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %226 = tan(%225) /* ty=Tensor[(7, 4, 9), float64] */;
  (%226,)
}

def @func_208(%var_129: Tensor[(16, 16, 9), int8]) -> (Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) {
  %227 = cast(%var_129, dtype="uint8") /* ty=Tensor[(16, 16, 9), uint8] */;
  %228 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 1, 9), int8] */, dtype="uint8") /* ty=Tensor[(1, 1, 9), uint8] */;
  %229 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 1, 9), int8] */, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
  %230 = cast(%var_129, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
  %231 = not_equal(%229, %230) /* ty=Tensor[(16, 16, 9), bool] */;
  %232 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 16, 9), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = right_shift(%227, %228) /* ty=Tensor[(16, 16, 9), uint8] */;
  %237 = logical_or(%234, %235) /* ty=Tensor[(16, 16, 9), bool] */;
  (%236, %237)
}

def @func_10108(%var_10023: Tensor[(11, 13, 5), float64], %var_10055: Tensor[(416), uint64]) -> (Tensor[(11, 13, 5), float32], Tensor[(120, 2), float64], Tensor[(4, 8), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(11, 13, 5), uint8]) {
  %238 = @func_8571() /* ty=(Tensor[(11, 13, 5), float64],) */;
  %239 = %238.0;
  %240 = cast(%var_10023, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %244 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 8), uint64] */, dtype="uint64") /* ty=Tensor[(4, 8), uint64] */;
  %245 = cast(%var_10055, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %246 = reshape(%244, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
  %247 = reshape(%245, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
  %248 = @func_6518(%246, %247) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
  %249 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %250 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %251 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %252 = reshape(%251, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %253 = @func_2835(%252) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) */;
  %254 = @func_8277() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %255 = cast(%239, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %256 = acos(%255) /* ty=Tensor[(11, 13, 5), float64] */;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %258 = cos(%257) /* ty=Tensor[(11, 13, 5), float32] */;
  %259 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 13, 5), float32] */, dtype="uint8") /* ty=Tensor[(11, 13, 5), uint8] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="uint8") /* ty=Tensor[(11, 13, 5), uint8] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %263 = floor_mod(%242, %243) /* ty=Tensor[(11, 13, 5), float32] */;
  %264 = %248.2;
  %265 = %249.0;
  %266 = %250.0;
  %267 = %253.3;
  %268 = %254.0;
  %269 = @func_7701() /* ty=Tensor[(7, 4, 9), bool] */;
  %270 = bitwise_and(%261, %262) /* ty=Tensor[(11, 13, 5), uint8] */;
  (%263, %264, meta[relay.Constant][11] /* ty=Tensor[(4, 8), uint64] */, %var_10055, %265, %266, %267, meta[relay.Constant][12] /* ty=Tensor[(336), float64] */, %268, %269, %270)
}

def @func_16141() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %271 = @func_8588() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %272 = @func_2764() /* ty=Tensor[(7, 4, 9), float32] */;
  %273 = %271.1;
  (%272, %273)
}

def @func_13895() -> Tensor[(33, 4), float32] {
  @func_12814() /* ty=Tensor[(33, 4), float32] */
}

def @func_298(%var_280: Tensor[(1, 15, 16), float64]) -> Tensor[(1, 15, 16), float64] {
  %274 = cast(%var_280, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  atanh(%274) /* ty=Tensor[(1, 15, 16), float64] */
}

def @func_13817() -> (Tensor[(7, 4, 9), float64],) {
  %275 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %276 = %275.0;
  (%276,)
}

def @func_2364(%var_2332: Tensor[(5, 10, 5), bool], %var_2346: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) {
  %277 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %278 = %277.0;
  %279 = cast(%var_2332, dtype="int8") /* ty=Tensor[(5, 10, 5), int8] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="int8") /* ty=Tensor[(5, 10, 5), int8] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %283 = cast(%var_2346, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
  %284 = shape_of(%var_2332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_2332, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %287 = add(%281, %282) /* ty=Tensor[(5, 10, 5), int8] */;
  %288 = maximum(%285, %286) /* ty=Tensor[(5, 10, 5), uint8] */;
  (%287, %288)
}

def @func_14431() -> (Tensor[(2304), int8], Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float64]) {
  %289 = @func_12993() /* ty=(Tensor[(2304), int8],) */;
  %290 = @func_13535() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %291 = %289.0;
  %292 = @func_6980() /* ty=Tensor[(5, 10, 5), float32] */;
  %293 = %290.0;
  (%291, %292, %293)
}

def @func_15536(%var_15511: Tensor[(900), float32]) -> (Tensor[(7, 4, 9), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(16, 16, 9), uint8]) {
  %294 = cast(%var_15511, dtype="float32") /* ty=Tensor[(900), float32] */;
  %295 = reshape(%294, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %296 = @func_6428(%295) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) */;
  %297 = @func_11517() /* ty=(Tensor[(16, 16, 9), uint8],) */;
  %298 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
  %299 = %296.0;
  %300 = %297.0;
  (%298, %299, %var_15511, %300)
}

def @func_11284() -> (Tensor[(7, 4, 9), float64],) {
  %301 = @func_7343() /* ty=Tensor[(7, 4, 9), float64] */;
  (%301,)
}

def @func_8969() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) {
  %302 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %303 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %304 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %305 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %306 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %307 = @func_7861() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) */;
  %308 = %302.0;
  %309 = @func_7343() /* ty=Tensor[(7, 4, 9), float64] */;
  %310 = %303.0;
  %311 = %304.2;
  %312 = %305.0;
  %313 = %306.0;
  %314 = %307.1;
  (%308, %309, %310, %311, %312, %313, %314)
}

def @func_15585() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) {
  %315 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %316 = @func_15107() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %317 = %316.0;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
  %319 = %315.0;
  %320 = acosh(%318) /* ty=Tensor[(5, 10, 5), float64] */;
  (%319, %320)
}

def @func_16717() -> (Tensor[(80), float64],) {
  %321 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %322 = %321.3;
  (%322,)
}

def @func_12616() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %323 = @func_7953() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %324 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %325 = %323.5;
  %326 = %324.2;
  %327 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
  (%325, %326, %327)
}

def @func_5739() -> (Tensor[(5, 10, 5), bool],) {
  %328 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %329 = %328.0;
  (%329,)
}

def @func_17101(%var_17096: Tensor[(336), float64]) -> (Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64]) {
  %330 = @func_8671() /* ty=(Tensor[(5, 10, 5), float64],) */;
  %331 = cast(%var_17096, dtype="float64") /* ty=Tensor[(336), float64] */;
  %332 = cast(meta[relay.Constant][14] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %333 = reshape(%331, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %334 = reshape(%332, newshape=[4032]) /* ty=Tensor[(4032), float64] */;
  %335 = @func_6469(%333, %334) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(5, 10, 5), bool]) */;
  %336 = @func_8482() /* ty=Tensor[(1, 15, 16), float64] */;
  %337 = %330.0;
  %338 = %335.1;
  (%336, %337, %338, %var_17096, meta[relay.Constant][14] /* ty=Tensor[(4032), float64] */)
}

def @func_3488() -> Tensor[(7, 4, 9), float64] {
  %339 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %339.0
}

def @func_4368() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
  %340 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %341 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %342 = %340.0;
  %343 = %341.0;
  (%342, %343)
}

def @func_12993() -> (Tensor[(2304), int8],) {
  %344 = @func_4510() /* ty=Tensor[(2304), int8] */;
  (%344,)
}

def @func_3334() -> (Tensor[(7, 4, 9), float64],) {
  %345 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %346 = %345.0;
  (%346,)
}

def @func_5174() -> (Tensor[(7, 4, 9), uint16],) {
  %347 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %348 = %347.0;
  (%348,)
}

def @func_7701() -> Tensor[(7, 4, 9), bool] {
  %349 = @func_4670() /* ty=(Tensor[(7, 4, 9), bool],) */;
  %349.0
}

def @func_4880(%var_4865: Tensor[(2, 8, 6), uint16], %var_4866: Tensor[(2, 8, 6), uint16]) -> Tensor[(2, 8, 6), uint16] {
  %350 = cast(%var_4866, dtype="uint16") /* ty=Tensor[(2, 8, 6), uint16] */;
  %351 = shape_of(%var_4865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_4865, dtype="uint16") /* ty=Tensor[(2, 8, 6), uint16] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%352, %353) /* ty=Tensor[(2, 8, 6), uint16] */
}

def @func_12876() -> (Tensor[(132), uint8], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) {
  %354 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
  %355 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %356 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %357 = %354.2;
  %358 = %355.0;
  %359 = %356.4;
  (%357, %358, %359)
}

def @func_4494(%var_4483: Tensor[(240), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) {
  %360 = cast(%var_4483, dtype="float64") /* ty=Tensor[(240), float64] */;
  %361 = reshape(%360, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %362 = cast(meta[relay.Constant][15] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %363 = cast(meta[relay.Constant][15] /* ty=Tensor[(539), uint8] */, dtype="float64") /* ty=Tensor[(539), float64] */;
  %364 = reshape(%362, newshape=[539]) /* ty=Tensor[(539), uint8] */;
  %365 = reshape(%363, newshape=[539]) /* ty=Tensor[(539), float64] */;
  %366 = @func_4046(%364, %365) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) */;
  %367 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  %368 = @func_298(%361) /* ty=Tensor[(1, 15, 16), float64] */;
  %369 = %366.1;
  (%367, %368, %var_4483, %369, meta[relay.Constant][15] /* ty=Tensor[(539), uint8] */)
}

def @func_10430() -> Tensor[(7, 4, 9), float64] {
  @func_5369() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_5369() -> Tensor[(7, 4, 9), float64] {
  %370 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %370.0
}

def @func_7306() -> Tensor[(7, 4, 9), float64] {
  %371 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %371.0
}

def @func_9479(%var_9466: Tensor[(96, 1), uint16]) -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(2, 8, 6), uint16], Tensor[(96, 1), uint16], Tensor[(7, 4, 9), uint16], Tensor[(11, 13, 5), float64], Tensor[(900), float32]) {
  %372 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %373 = cast(%var_9466, dtype="uint16") /* ty=Tensor[(96, 1), uint16] */;
  %374 = cast(%var_9466, dtype="uint16") /* ty=Tensor[(96, 1), uint16] */;
  %375 = reshape(%373, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), uint16] */;
  %376 = reshape(%374, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), uint16] */;
  %377 = cast(meta[relay.Constant][16] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %378 = reshape(%377, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %379 = @func_6428(%378) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) */;
  %380 = %372.4;
  %381 = @func_6596() /* ty=Tensor[(2304), int8] */;
  %382 = @func_4880(%375, %376) /* ty=Tensor[(2, 8, 6), uint16] */;
  %383 = @func_8012() /* ty=Tensor[(7, 4, 9), uint16] */;
  %384 = %379.1;
  (%380, %381, %382, %var_9466, %383, %384, meta[relay.Constant][16] /* ty=Tensor[(900), float32] */)
}

def @func_17734() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %385 = @func_3028() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
  %386 = @func_6165() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) */;
  %387 = @func_8525() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %388 = %385.1;
  %389 = %386.0;
  %390 = %387.2;
  (%388, %389, %390)
}

def @func_10513(%var_10488: Tensor[(252), float32]) -> (Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(252), float32]) {
  %391 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %392 = cast(%var_10488, dtype="float32") /* ty=Tensor[(252), float32] */;
  %393 = reshape(%392, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float32] */;
  %394 = @func_6239(%393) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
  %395 = %391.0;
  %396 = %394.3;
  (%395, %396, %var_10488)
}

def @func_5899(%var_5867: Tensor[(336, 1), float64], %var_5876: Tensor[(336, 12), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) {
  %397 = cast(meta[relay.Constant][17] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %398 = reshape(%397, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
  %399 = @func_208(%398) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
  %400 = cast(%var_5867, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %401 = reshape(%400, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %402 = @func_2835(%401) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) */;
  %403 = cast(%var_5867, dtype="int64") /* ty=Tensor[(336, 1), int64] */;
  %404 = cast(%var_5876, dtype="int64") /* ty=Tensor[(336, 12), int64] */;
  %405 = @func_4067() /* ty=Tensor[(5, 10, 5), bool] */;
  %406 = %399.1;
  %407 = %402.0;
  %408 = multiply(%403, %404) /* ty=Tensor[(336, 12), int64] */;
  (%405, %406, meta[relay.Constant][17] /* ty=Tensor[(2304), int8] */, %407, %408)
}

def @func_2229() -> Tensor[(7, 4, 9), float64] {
  %409 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %409.0
}

def @func_7383(%var_7373: Tensor[(7, 4, 9), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) {
  %410 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %411 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %412 = %411.1;
  %413 = cast(%var_7373, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %417 = %410.0;
  %418 = subtract(%415, %416) /* ty=Tensor[(7, 4, 9), float32] */;
  (%417, %418)
}

def @func_8509() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %419 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %420 = %419.0;
  %421 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
  (%420, %421)
}

def @func_11011() -> Tensor[(8, 8, 12), float64] {
  %422 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
  erf(%422) /* ty=Tensor[(8, 8, 12), float64] */
}

def @func_5235(%var_5224: Tensor[(11, 49), uint8]) -> (Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) {
  %423 = cast(%var_5224, dtype="uint8") /* ty=Tensor[(11, 49), uint8] */;
  %424 = cast(%var_5224, dtype="uint8") /* ty=Tensor[(11, 49), uint8] */;
  %425 = reshape(%423, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %426 = reshape(%424, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %427 = cast(meta[relay.Constant][19] /* ty=Tensor[(250), bool] */, dtype="bool") /* ty=Tensor[(250), bool] */;
  %428 = cast(meta[relay.Constant][19] /* ty=Tensor[(250), bool] */, dtype="bool") /* ty=Tensor[(250), bool] */;
  %429 = reshape(%427, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %430 = reshape(%428, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %431 = @func_2364(%429, %430) /* ty=(Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) */;
  %432 = @func_4510() /* ty=Tensor[(2304), int8] */;
  %433 = @func_320(%425, %426) /* ty=Tensor[(7, 11, 7), uint8] */;
  %434 = %431.0;
  (%432, %433, %var_5224, %434, meta[relay.Constant][19] /* ty=Tensor[(250), bool] */)
}

def @func_17290() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %435 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %436 = @func_11223() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %437 = %435.0;
  %438 = %436.2;
  (%437, %438)
}

def @func_938(%var_867: float64, %var_889: Tensor[(2304), int8]) -> (Tensor[(4, 1, 6), float64], Tensor[(4, 1, 6), float32], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) {
  %439 = cast(%var_867, dtype="float64") /* ty=float64 */;
  %440 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(4, 1, 6), float64] */;
  %441 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 1, 6), float64] */, dtype="float32") /* ty=Tensor[(4, 1, 6), float32] */;
  %442 = cast(%var_867, dtype="float32") /* ty=float32 */;
  %443 = cast(%var_889, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %444 = reshape(%443, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
  %445 = @func_208(%444) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
  %446 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 240), float64] */, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %447 = reshape(%446, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %448 = power(%439, %440) /* ty=Tensor[(4, 1, 6), float64] */;
  %449 = divide(%441, %442) /* ty=Tensor[(4, 1, 6), float32] */;
  %450 = %445.0;
  %451 = @func_298(%447) /* ty=Tensor[(1, 15, 16), float64] */;
  (%448, %449, %450, %var_889, %451, meta[relay.Constant][21] /* ty=Tensor[(1, 240), float64] */)
}

def @func_14494(%var_14486: Tensor[(252), float64]) -> (Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(252), float64]) {
  %452 = @func_11517() /* ty=(Tensor[(16, 16, 9), uint8],) */;
  %453 = cast(%var_14486, dtype="float64") /* ty=Tensor[(252), float64] */;
  %454 = reshape(%453, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %455 = @func_4107(%454) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) */;
  %456 = %452.0;
  %457 = %455.1;
  (%456, %457, %var_14486)
}

def @func_6641() -> Tensor[(7, 4, 9), float64] {
  @func_2427() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_3632() -> (Tensor[(7, 4, 9), float64],) {
  %458 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %459 = %458.0;
  (%459,)
}

def @func_17561(%var_17543: Tensor[(11, 14, 13), int8], %var_17544: Tensor[(11, 14, 13), int8]) -> (Tensor[(11, 14, 13), int8],) {
  %460 = cast(%var_17544, dtype="int8") /* ty=Tensor[(11, 14, 13), int8] */;
  %461 = shape_of(%var_17543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_17543, dtype="int8") /* ty=Tensor[(11, 14, 13), int8] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %464 = multiply(%462, %463) /* ty=Tensor[(11, 14, 13), int8] */;
  (%464,)
}

def @func_4107(%var_4093: Tensor[(7, 4, 9), float64]) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) {
  %465 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  %466 = cast(%var_4093, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %471 = logical_or(%468, %469) /* ty=Tensor[(7, 4, 9), bool] */;
  %472 = %470.0;
  (%471, %472)
}

def @func_4067() -> Tensor[(5, 10, 5), bool] {
  %473 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %473.0
}

def @func_15899() -> (Tensor[(7, 4, 9), float64],) {
  %474 = @func_14852() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(390), float64]) */;
  %475 = %474.0;
  (%475,)
}

def @func_13318() -> Tensor[(75), float32] {
  %476 = @func_12154() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) */;
  %476.5
}

def @func_12371() -> (Tensor[(75), float32], Tensor[(7, 4, 9), float32]) {
  %477 = @func_12154() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) */;
  %478 = %477.5;
  %479 = @func_11814() /* ty=Tensor[(7, 4, 9), float32] */;
  (%478, %479)
}

def @func_14719(%var_14671: Tensor[(6, 42), float64], %var_14685: Tensor[(6, 42), float64], %var_14697: Tensor[(6, 42), float64]) -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(6, 42), bool], Tensor[(6, 42), float64], Tensor[(7, 4, 9), float64]) {
  %480 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %481 = cast(%var_14671, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %482 = reshape(%481, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %483 = @func_7383(%482) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
  %484 = cast(%var_14671, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %485 = tan(%484) /* ty=Tensor[(6, 42), float64] */;
  %486 = cast(%var_14685, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(2), int32] */;
  %488 = cast(%485, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %490 = cast(%var_14697, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %491 = shape_of(%var_14685, dtype="int32") /* ty=Tensor[(2), int32] */;
  %492 = cast(%var_14685, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %494 = @func_5488() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %495 = %480.0;
  %496 = %483.1;
  %497 = greater_equal(%488, %489) /* ty=Tensor[(6, 42), bool] */;
  %498 = divide(%492, %493) /* ty=Tensor[(6, 42), float64] */;
  %499 = %494.0;
  (%495, %496, %497, %498, %499)
}

def @func_3086(%var_3038: Tensor[(11, 4, 3), uint8]) -> (Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) {
  %500 = cast(%var_3038, dtype="uint8") /* ty=Tensor[(11, 4, 3), uint8] */;
  %501 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="uint8") /* ty=Tensor[(11, 4, 3), uint8] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %504 = cast(%var_3038, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  %505 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %508 = add(%502, %503) /* ty=Tensor[(11, 4, 3), uint8] */;
  %509 = floor_divide(%506, %507) /* ty=Tensor[(11, 4, 3), float64] */;
  %510 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
  (%508, %509, %510)
}

def @func_6980() -> Tensor[(5, 10, 5), float32] {
  %511 = @func_5739() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  asin(%513) /* ty=Tensor[(5, 10, 5), float32] */
}

def @func_4826() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) {
  %514 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %515 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %516 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %517 = %516.4;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  %519 = tan(%518) /* ty=Tensor[(1, 15, 16), float64] */;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(1, 15, 16), float32] */;
  %521 = sinh(%520) /* ty=Tensor[(1, 15, 16), float32] */;
  %522 = cast(%521, dtype="int16") /* ty=Tensor[(1, 15, 16), int16] */;
  %523 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%519, dtype="int16") /* ty=Tensor[(1, 15, 16), int16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %526 = cast(meta[relay.Constant][23] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %527 = reshape(%526, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
  %528 = @func_208(%527) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
  %529 = %514.0;
  %530 = %515.1;
  %531 = left_shift(%524, %525) /* ty=Tensor[(?, 15, 16), int16] */;
  %532 = %528.1;
  (%529, %530, %531, %532, meta[relay.Constant][23] /* ty=Tensor[(2304), int8] */)
}

def @func_3532() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16]) {
  %533 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %534 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %535 = %533.0;
  %536 = %534.0;
  (%535, %536)
}

def @func_12585() -> (Tensor[(7, 4, 9), float32],) {
  %537 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  (%537,)
}

def @func_9030() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %538 = @func_8553() /* ty=(Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) */;
  %539 = @func_8525() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %540 = %538.1;
  %541 = %539.1;
  (%540, %541)
}

def @func_15237() -> Tensor[(7, 4, 9), float64] {
  %542 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %542.0
}

def @func_10352(%var_10319: Tensor[(15, 12, 12), float32], %var_10320: Tensor[(15, 12, 12), float32], %var_10326: Tensor[(15, 12, 12), bool], %var_10337: Tensor[(75), float32]) -> (Tensor[(15, 12, 12), uint32], Tensor[(240), float64], Tensor[(80), float64], Tensor[(75), float32], Tensor[(7, 4, 9), float64]) {
  %543 = cast(%var_10320, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
  %544 = shape_of(%var_10319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_10319, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = greater(%545, %546) /* ty=Tensor[(15, 12, 12), bool] */;
  %548 = cast(%var_10326, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %552 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %553 = cast(%var_10337, dtype="float32") /* ty=Tensor[(75), float32] */;
  %554 = reshape(%553, newshape=[75]) /* ty=Tensor[(75), float32] */;
  %555 = @func_3762(%554) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 1, 16), float64], Tensor[(80), float64]) */;
  %556 = bitwise_or(%550, %551) /* ty=Tensor[(15, 12, 12), uint32] */;
  %557 = %552.2;
  %558 = %555.7;
  %559 = @func_6641() /* ty=Tensor[(7, 4, 9), float64] */;
  (%556, %557, %558, %var_10337, %559)
}

def @func_16741() -> (Tensor[(390), float64], Tensor[(7, 4, 9), float64]) {
  %560 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %561 = @func_12094() /* ty=Tensor[(390), float64] */;
  %562 = %560.0;
  (%561, %562)
}

def @func_705(%var_691: Tensor[(12, 4, 7), float64]) -> Tensor[(12, 4, 7), float64] {
  %563 = cast(%var_691, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
  log10(%563) /* ty=Tensor[(12, 4, 7), float64] */
}

def @func_12548() -> (Tensor[(8, 8, 12), float64], Tensor[(7, 4, 9), float64]) {
  %564 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %565 = @func_11011() /* ty=Tensor[(8, 8, 12), float64] */;
  %566 = %564.0;
  (%565, %566)
}

def @func_7953() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %567 = @func_7882() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(252), float64]) */;
  %568 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %569 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %570 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
  %571 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  %572 = @func_5369() /* ty=Tensor[(7, 4, 9), float64] */;
  %573 = %567.1;
  %574 = %568.0;
  %575 = %569.0;
  (%570, %571, %572, %573, %574, %575)
}

def @func_6337() -> (Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) {
  %576 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %577 = cast(meta[relay.Constant][24] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %578 = reshape(%577, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
  %579 = @func_3086(%578) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
  %580 = %576.0;
  %581 = %579.1;
  (%580, %581, meta[relay.Constant][24] /* ty=Tensor[(132), uint8] */)
}

def @func_8428() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %582 = @func_6435() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %583 = @func_5521() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %584 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %585 = %582.0;
  %586 = %583.1;
  %587 = %584.0;
  (%585, %586, %587)
}

def @func_8012() -> Tensor[(7, 4, 9), uint16] {
  %588 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %588.0
}

def @func_14597(%var_14547: Tensor[(336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(4032), bool], Tensor[(33, 4), uint64]) {
  %589 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %590 = cast(%var_14547, dtype="float64") /* ty=Tensor[(336), float64] */;
  %591 = cast(meta[relay.Constant][26] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %592 = cast(meta[relay.Constant][25] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %593 = reshape(%590, newshape=[8, 42]) /* ty=Tensor[(8, 42), float64] */;
  %594 = reshape(%591, newshape=[132]) /* ty=Tensor[(132), uint8] */;
  %595 = reshape(%592, newshape=[4032]) /* ty=Tensor[(4032), float64] */;
  %596 = @func_11152(%593, %594, %595) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(8, 42), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8], Tensor[(2304), int8], Tensor[(4032), int32], Tensor[(4032), float64], Tensor[(4032), int8]) */;
  %597 = %596.9;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %599 = log10(%598) /* ty=Tensor[(4032), float64] */;
  %600 = cast(%597, dtype="bool") /* ty=Tensor[(4032), bool] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(1), int32] */;
  %602 = cast(%599, dtype="bool") /* ty=Tensor[(4032), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?), bool] */;
  %604 = cast(meta[relay.Constant][26] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %605 = reshape(%604, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint8] */;
  %606 = @func_11470(%605) /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) */;
  %607 = %606.4;
  %608 = cast(meta[relay.Constant][26] /* ty=Tensor[(132), uint8] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(2), int32] */;
  %610 = cast(%607, dtype="uint64") /* ty=Tensor[(33, 4), uint64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %612 = %589.0;
  %613 = logical_and(%602, %603) /* ty=Tensor[(4032), bool] */;
  %614 = multiply(%610, %611) /* ty=Tensor[(33, 4), uint64] */;
  (%612, %var_14547, meta[relay.Constant][25] /* ty=Tensor[(4032), float64] */, %613, %614)
}

def @func_15424() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) {
  %615 = @func_14651() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %616 = @func_14651() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %617 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %618 = @func_10765() /* ty=(Tensor[(2304), int8],) */;
  %619 = %615.0;
  %620 = %616.1;
  %621 = %617.2;
  %622 = @func_14741() /* ty=Tensor[(7, 4, 9), float64] */;
  %623 = %618.0;
  (%619, %620, %621, %622, %623)
}

def @func_8064() -> (Tensor[(2304), int8],) {
  %624 = @func_4510() /* ty=Tensor[(2304), int8] */;
  (%624,)
}

def @func_1828() -> Tensor[(7, 4, 9), float64] {
  %625 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %625.0
}

def @func_13193() -> (Tensor[(14, 2, 3), float32], Tensor[(14, 2, 3), float32]) {
  %626 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %627 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 2, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %630 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %631 = maximum(%628, %629) /* ty=Tensor[(14, 2, 3), float32] */;
  %632 = log2(%630) /* ty=Tensor[(14, 2, 3), float32] */;
  (%631, %632)
}

def @func_11736() -> (Tensor[(7, 4, 9), uint16],) {
  %633 = @func_5174() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %634 = %633.0;
  (%634,)
}

def @func_3977(%var_3932: Tensor[(10, 16, 6), float64]) -> (Tensor[(10, 16, 6), float64], Tensor[(10, 16, 6), float32]) {
  %635 = cast(%var_3932, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
  %636 = cast(%var_3932, dtype="float32") /* ty=Tensor[(10, 16, 6), float32] */;
  %637 = cosh(%635) /* ty=Tensor[(10, 16, 6), float64] */;
  %638 = erf(%636) /* ty=Tensor[(10, 16, 6), float32] */;
  (%637, %638)
}

def @func_6851() -> (Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) {
  %639 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %640 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %641 = cast(meta[relay.Constant][29] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %642 = reshape(%641, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %643 = @func_6428(%642) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) */;
  %644 = @func_5154() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) */;
  %645 = %639.2;
  %646 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %647 = %640.0;
  %648 = %643.0;
  %649 = %644.2;
  (%645, %646, %647, %648, meta[relay.Constant][29] /* ty=Tensor[(900), float32] */, %649)
}

def @func_15107() -> (Tensor[(5, 10, 5), bool],) {
  %650 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %651 = %650.0;
  (%651,)
}

def @func_12477() -> Tensor[(7, 4, 9), float64] {
  %652 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %652.0
}

def @func_3873() -> Tensor[(7, 4, 9), float32] {
  %653 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %654 = %653.1;
  %655 = @func_3028() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %658 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%654, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%659, %660) /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_1394(%var_1379: Tensor[(1, 12, 3), float32]) -> Tensor[(1, 12, 3), float32] {
  %661 = cast(2.51503f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %662 = cast(%var_1379, dtype="float32") /* ty=Tensor[(1, 12, 3), float32] */;
  add(%661, %662) /* ty=Tensor[(1, 12, 3), float32] */
}

def @func_10746() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) {
  %663 = @func_6096() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
  %664 = @func_8969() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) */;
  %665 = %664.5;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
  %667 = %663.0;
  %668 = tan(%666) /* ty=Tensor[(5, 10, 5), float64] */;
  (%667, %668)
}

def @func_3346() -> (Tensor[(7, 4, 9), float32],) {
  %669 = @func_2764() /* ty=Tensor[(7, 4, 9), float32] */;
  (%669,)
}

def @func_7100() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %670 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %671 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  %672 = %670.0;
  (%671, %672)
}

def @func_12814() -> Tensor[(33, 4), float32] {
  %673 = @func_10258() /* ty=Tensor[(33, 4), float32] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(33, 4), float32] */;
  sigmoid(%674) /* ty=Tensor[(33, 4), float32] */
}

def @func_13387() -> (Tensor[(7, 4, 9), float64], Tensor[(390), float64]) {
  %675 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %676 = %675.0;
  %677 = @func_12094() /* ty=Tensor[(390), float64] */;
  (%676, %677)
}

def @func_12154() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) {
  %678 = @func_3532() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16]) */;
  %679 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 84), float64] */, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %680 = reshape(%679, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %681 = @func_7198(%680) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 336), int16]) */;
  %682 = cast(meta[relay.Constant][31] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %683 = cast(meta[relay.Constant][31] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %684 = reshape(%682, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %685 = reshape(%683, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %686 = @func_2527(%684, %685) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) */;
  %687 = %678.0;
  %688 = @func_9417() /* ty=Tensor[(7, 4, 9), uint16] */;
  %689 = %681.3;
  %690 = %686.1;
  (%687, %688, %689, meta[relay.Constant][30] /* ty=Tensor[(4, 84), float64] */, %690, meta[relay.Constant][31] /* ty=Tensor[(75), float32] */)
}

def @func_13943() -> (Tensor[(1, 15, 16), float64],) {
  %691 = @func_8482() /* ty=Tensor[(1, 15, 16), float64] */;
  (%691,)
}

def @func_17370() -> (Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64]) {
  %692 = @func_13895() /* ty=Tensor[(33, 4), float32] */;
  %693 = cast(meta[relay.Constant][32] /* ty=Tensor[(33, 4), float32] */, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(2), int32] */;
  %695 = cast(%692, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %697 = @func_12876() /* ty=(Tensor[(132), uint8], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) */;
  %698 = greater_equal(%695, %696) /* ty=Tensor[(33, 4), bool] */;
  %699 = %697.1;
  (%698, %699)
}

def @func_3762(%var_3729: Tensor[(75), float32]) -> (Tensor[(7, 4, 9), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 1, 16), float64], Tensor[(80), float64]) {
  %700 = cast(%var_3729, dtype="float32") /* ty=Tensor[(75), float32] */;
  %701 = cast(%var_3729, dtype="float32") /* ty=Tensor[(75), float32] */;
  %702 = reshape(%700, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %703 = reshape(%701, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %704 = @func_2527(%702, %703) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) */;
  %705 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %706 = @func_3632() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %707 = cast(meta[relay.Constant][33] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %708 = reshape(%707, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
  %709 = @func_3388(%708) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
  %710 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  %711 = %704.0;
  %712 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  %713 = %705.0;
  %714 = %706.0;
  %715 = %709.0;
  (%710, %711, %var_3729, %712, %713, %714, %715, meta[relay.Constant][33] /* ty=Tensor[(80), float64] */)
}

def @func_3584() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %716 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %717 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %718 = %716.0;
  %719 = %717.0;
  (%718, %719)
}

def @func_15043() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(250), int64], Tensor[(250, 1), bool], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %720 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %721 = @func_12548() /* ty=(Tensor[(8, 8, 12), float64], Tensor[(7, 4, 9), float64]) */;
  %722 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %723 = @func_8428() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %724 = %722.0;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %726 = reshape(%725, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %727 = @func_14494(%726) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(252), float64]) */;
  %728 = cast(meta[relay.Constant][34] /* ty=Tensor[(250, 1), bool] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
  %729 = cast(meta[relay.Constant][34] /* ty=Tensor[(250, 1), bool] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
  %730 = reshape(%728, newshape=[250]) /* ty=Tensor[(250), bool] */;
  %731 = reshape(%729, newshape=[250]) /* ty=Tensor[(250), bool] */;
  %732 = @func_4985(%730, %731) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32], Tensor[(250), int64]) */;
  %733 = @func_7211() /* ty=Tensor[(7, 4, 9), float64] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %735 = reshape(%734, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %736 = @func_7383(%735) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
  %737 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %738 = %720.0;
  %739 = %721.1;
  %740 = %723.0;
  %741 = @func_10841() /* ty=Tensor[(7, 4, 9), float64] */;
  %742 = %727.1;
  %743 = %732.6;
  %744 = %736.0;
  %745 = %737.1;
  (%738, %739, %724, %740, %733, %741, %742, %743, meta[relay.Constant][34] /* ty=Tensor[(250, 1), bool] */, %744, %745)
}

def @func_4985(%var_4919: Tensor[(250), bool], %var_4962: Tensor[(250), bool]) -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32], Tensor[(250), int64]) {
  %746 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %747 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %748 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %749 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %750 = cast(%var_4919, dtype="bool") /* ty=Tensor[(250), bool] */;
  %751 = cast(%var_4919, dtype="bool") /* ty=Tensor[(250), bool] */;
  %752 = reshape(%750, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %753 = reshape(%751, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %754 = @func_2364(%752, %753) /* ty=(Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) */;
  %755 = %754.0;
  %756 = cast(%var_4962, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %757 = shape_of(%var_4919, dtype="int32") /* ty=Tensor[(1), int32] */;
  %758 = cast(%var_4919, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %760 = maximum(%758, %759) /* ty=Tensor[(250), uint64] */;
  %761 = cast(%760, dtype="bool") /* ty=Tensor[(250), bool] */;
  %762 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%755, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %765 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %766 = cast(%var_4919, dtype="int64") /* ty=Tensor[(250), int64] */;
  %767 = shape_of(%760, dtype="int32") /* ty=Tensor[(1), int32] */;
  %768 = cast(%760, dtype="int64") /* ty=Tensor[(250), int64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?), int64] */;
  %770 = %746.0;
  %771 = %747.0;
  %772 = %748.0;
  %773 = %749.0;
  %774 = greater(%763, %764) /* ty=Tensor[(5, 10, 5), bool] */;
  %775 = %765.0;
  %776 = add(%768, %769) /* ty=Tensor[(250), int64] */;
  (%770, %771, %772, %773, %774, %775, %776)
}

def @func_11882(%var_11870: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float32]) {
  %777 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %778 = %777.0;
  %779 = cast(%var_11870, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%778, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %783 = mod(%781, %782) /* ty=Tensor[(5, 10, 5), float32] */;
  %784 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  (%783, %784)
}

def @func_15943() -> (Tensor[(7, 4, 9), uint16],) {
  %785 = @func_11736() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %786 = %785.0;
  (%786,)
}

def @func_11517() -> (Tensor[(16, 16, 9), uint8],) {
  %787 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %788 = %787.2;
  (%788,)
}

def @func_5280(%var_5269: Tensor[(33, 4), uint8]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) {
  %789 = cast(%var_5269, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
  %790 = reshape(%789, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
  %791 = @func_3086(%790) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
  %792 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
  %793 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  %794 = %791.2;
  (%792, %793, %794, %var_5269)
}

def @func_8571() -> (Tensor[(11, 13, 5), float64],) {
  %795 = @func_4308() /* ty=Tensor[(11, 13, 5), float64] */;
  (%795,)
}

def @func_15188() -> (Tensor[(7, 4, 9), float64], Tensor[(8, 8, 12), float64]) {
  %796 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %797 = @func_11011() /* ty=Tensor[(8, 8, 12), float64] */;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
  %799 = %796.0;
  %800 = exp(%798) /* ty=Tensor[(8, 8, 12), float64] */;
  (%799, %800)
}

def @func_4510() -> Tensor[(2304), int8] {
  %801 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %801.3
}

def @func_16493() -> (Tensor[(7, 4, 9), float64], Tensor[(33, 4), float32]) {
  %802 = @func_9554() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %803 = @func_14640() /* ty=(Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) */;
  %804 = %802.1;
  %805 = %803.0;
  (%804, %805)
}

def @func_6861() -> (Tensor[(5, 10, 5), bool],) {
  %806 = @func_6096() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
  %807 = %806.1;
  (%807,)
}

def @func_15314() -> (Tensor[(33, 4), float32],) {
  %808 = @func_10258() /* ty=Tensor[(33, 4), float32] */;
  (%808,)
}

def @func_10765() -> (Tensor[(2304), int8],) {
  %809 = @func_6596() /* ty=Tensor[(2304), int8] */;
  (%809,)
}

def @func_5927() -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) {
  %810 = cast(meta[relay.Constant][35] /* ty=Tensor[(33, 4), uint8] */, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
  %811 = reshape(%810, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
  %812 = @func_3086(%811) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
  %813 = @func_4308() /* ty=Tensor[(11, 13, 5), float64] */;
  %814 = %812.2;
  (%813, %814, meta[relay.Constant][35] /* ty=Tensor[(33, 4), uint8] */)
}

def @func_16564() -> (Tensor[(2304), int8],) {
  %815 = @func_6596() /* ty=Tensor[(2304), int8] */;
  (%815,)
}

def @func_15151() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(132), uint8]) {
  %816 = @func_13437() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) */;
  %817 = cast(meta[relay.Constant][36] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %818 = reshape(%817, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
  %819 = @func_3086(%818) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
  %820 = %816.3;
  %821 = %819.2;
  (%820, %821, meta[relay.Constant][36] /* ty=Tensor[(132), uint8] */)
}

def @func_13535() -> (Tensor[(7, 4, 9), float64],) {
  %822 = @func_7953() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %823 = %822.1;
  (%823,)
}

def @func_17540() -> (Tensor[(33, 4), bool],) {
  %824 = @func_17370() /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64]) */;
  %825 = %824.0;
  (%825,)
}

def @func_6056() -> (Tensor[(7, 4, 9), float64],) {
  %826 = @func_5021() /* ty=Tensor[(7, 4, 9), float64] */;
  (%826,)
}

def @func_6884() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %827 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %828 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
  %829 = %827.1;
  (%828, %829)
}

def @func_15727() -> Tensor[(7, 4, 9), float64] {
  %830 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %830.0
}

def @func_8671() -> (Tensor[(5, 10, 5), float64],) {
  %831 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %832 = %831.0;
  %833 = cast(%832, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
  %834 = log(%833) /* ty=Tensor[(5, 10, 5), float64] */;
  (%834,)
}

def @func_5073() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %835 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %836 = %835.0;
  %837 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  (%836, %837)
}

def @main() -> Tensor[(33, 4), int16] {
  %838 = @func_14640() /* ty=(Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) */;
  %839 = %838.0;
  %840 = cast(meta[relay.Constant][37] /* ty=Tensor[(33, 4), float32] */, dtype="int16") /* ty=Tensor[(33, 4), int16] */;
  %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(2), int32] */;
  %842 = cast(%839, dtype="int16") /* ty=Tensor[(33, 4), int16] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  left_shift(%842, %843) /* ty=Tensor[(33, 4), int16] */
}

def @func_7568() -> (Tensor[(7, 4, 9), float64],) {
  %844 = @func_2427() /* ty=Tensor[(7, 4, 9), float64] */;
  (%844,)
}

def @func_8175() -> (Tensor[(7, 4, 9), float64],) {
  %845 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
  (%845,)
}

def @func_6956() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %846 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %847 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %848 = %846.0;
  %849 = %847.0;
  (%848, %849)
}

def @func_2675() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) {
  %850 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %851 = cast(meta[relay.Constant][38] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %852 = reshape(%851, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
  %853 = @func_208(%852) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
  %854 = %850.0;
  %855 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %856 = %853.0;
  (%854, %855, %856, meta[relay.Constant][38] /* ty=Tensor[(2304), int8] */)
}

def @func_10317() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) {
  %857 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %858 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
  %859 = @func_9632() /* ty=Tensor[(7, 4, 9), float64] */;
  %860 = %857.0;
  (%858, %859, %860)
}

def @func_7027() -> Tensor[(7, 4, 9), float64] {
  %861 = @func_6956() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %861.0
}

def @func_5199() -> Tensor[(7, 4, 9), float64] {
  @func_2229() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_6165() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) {
  %862 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %863 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 120), float64] */, dtype="float64") /* ty=Tensor[(2, 120), float64] */;
  %864 = reshape(%863, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %865 = @func_4494(%864) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
  %866 = %862.0;
  %867 = %865.3;
  (%866, %867, meta[relay.Constant][39] /* ty=Tensor[(2, 120), float64] */)
}

def @func_17507() -> Tensor[(7, 4, 9), float64] {
  %868 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %868.0
}

def @func_5521() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %869 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %870 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %871 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
  %872 = %869.0;
  %873 = %870.0;
  (%871, %872, %873)
}

def @func_1893() -> (Tensor[(7, 4, 9), float64],) {
  %874 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  (%874,)
}

def @func_6596() -> Tensor[(2304), int8] {
  @func_6010() /* ty=Tensor[(2304), int8] */
}

def @func_16869(%var_16811: Tensor[(252), float32], %var_16829: Tensor[(336), float64]) -> (Tensor[(2304), int8], Tensor[(7, 4, 9), bool], Tensor[(252), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %875 = @func_8064() /* ty=(Tensor[(2304), int8],) */;
  %876 = cast(%var_16811, dtype="float32") /* ty=Tensor[(252), float32] */;
  %877 = reshape(%876, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float32] */;
  %878 = @func_6239(%877) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
  %879 = cast(%var_16829, dtype="float64") /* ty=Tensor[(336), float64] */;
  %880 = cast(meta[relay.Constant][40] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %881 = reshape(%879, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
  %882 = reshape(%880, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
  %883 = @func_5899(%881, %882) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
  %884 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %885 = @func_15585() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */;
  %886 = %875.0;
  %887 = %878.0;
  %888 = %883.3;
  %889 = %884.0;
  %890 = %885.0;
  %891 = @func_6641() /* ty=Tensor[(7, 4, 9), float64] */;
  (%886, %887, %var_16811, %888, %var_16829, meta[relay.Constant][40] /* ty=Tensor[(4032), float64] */, %889, %890, %891)
}

def @func_16396() -> (Tensor[(7, 4, 9), uint16],) {
  %892 = @func_15943() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %893 = %892.0;
  (%893,)
}

def @func_15698() -> (Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64]) {
  %894 = @func_7861() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) */;
  %895 = @func_5216() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) */;
  %896 = %895.0;
  %897 = cast(%896, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
  %898 = %894.2;
  %899 = log2(%897) /* ty=Tensor[(5, 10, 5), float64] */;
  (%898, %899)
}

def @func_4670() -> (Tensor[(7, 4, 9), bool],) {
  %900 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %901 = %900.0;
  %902 = @func_3488() /* ty=Tensor[(7, 4, 9), float64] */;
  %903 = cast(%902, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %904 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%901, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %907 = less(%905, %906) /* ty=Tensor[(7, 4, 9), bool] */;
  (%907,)
}

def @func_17435() -> (Tensor[(7, 4, 9), float32],) {
  %908 = @func_5073() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
  %909 = %908.0;
  (%909,)
}

def @func_4308() -> Tensor[(11, 13, 5), float64] {
  %910 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  exp(%910) /* ty=Tensor[(11, 13, 5), float64] */
}

def @func_11814() -> Tensor[(7, 4, 9), float32] {
  %911 = @func_6956() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %911.1
}

def @func_17645() -> Tensor[(7, 4, 9), float64] {
  @func_3895() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_6469(%var_6450: Tensor[(336), float64], %var_6451: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(5, 10, 5), bool]) {
  %912 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %913 = @func_3028() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
  %914 = cast(%var_6450, dtype="float64") /* ty=Tensor[(336), float64] */;
  %915 = cast(%var_6451, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %916 = reshape(%914, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
  %917 = reshape(%915, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
  %918 = @func_5899(%916, %917) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
  %919 = @func_5739() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %920 = %912.0;
  %921 = %913.1;
  %922 = %918.3;
  %923 = %919.0;
  (%920, %921, %922, %var_6450, %var_6451, %923)
}

def @func_6428(%var_6353: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) {
  %924 = cast(%var_6353, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %925 = exp(%924) /* ty=Tensor[(9, 10, 10), float32] */;
  %926 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %927 = shape_of(%925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %928 = cast(%925, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %930 = subtract(%928, %929) /* ty=Tensor[(9, 10, 10), float32] */;
  %931 = @func_4308() /* ty=Tensor[(11, 13, 5), float64] */;
  (%930, %931)
}

def @func_17700() -> (Tensor[(7, 4, 9), float32],) {
  %932 = @func_11814() /* ty=Tensor[(7, 4, 9), float32] */;
  (%932,)
}

def @func_14139() -> Tensor[(7, 4, 9), float64] {
  @func_2427() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9863() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %933 = @func_7343() /* ty=Tensor[(7, 4, 9), float64] */;
  %934 = @func_7306() /* ty=Tensor[(7, 4, 9), float64] */;
  (%933, %934)
}

def @func_14741() -> Tensor[(7, 4, 9), float64] {
  %935 = @func_13817() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %935.0
}

def @func_6518(%var_6501: Tensor[(1, 16, 2), uint64], %var_6502: Tensor[(13, 16, 2), uint64]) -> (Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) {
  %936 = cast(%var_6501, dtype="uint64") /* ty=Tensor[(1, 16, 2), uint64] */;
  %937 = cast(%var_6502, dtype="uint64") /* ty=Tensor[(13, 16, 2), uint64] */;
  %938 = cast(meta[relay.Constant][43] /* ty=Tensor[(120, 2), float64] */, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
  %939 = reshape(%938, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %940 = @func_4494(%939) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
  %941 = bitwise_and(%936, %937) /* ty=Tensor[(13, 16, 2), uint64] */;
  %942 = %940.1;
  (%941, %942, meta[relay.Constant][43] /* ty=Tensor[(120, 2), float64] */)
}

def @func_815(%var_795: float64, %var_796: Tensor[(2, 15, 13), float64], %var_801: Tensor[(1, 240), float64]) -> (Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) {
  %943 = cast(%var_795, dtype="float64") /* ty=float64 */;
  %944 = cast(%var_796, dtype="float64") /* ty=Tensor[(2, 15, 13), float64] */;
  %945 = cast(%var_801, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %946 = reshape(%945, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %947 = floor_mod(%943, %944) /* ty=Tensor[(2, 15, 13), float64] */;
  %948 = @func_298(%946) /* ty=Tensor[(1, 15, 16), float64] */;
  (%947, %948, %var_801)
}

def @func_8525() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %949 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %950 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
  %951 = %950.0;
  %952 = cast(%951, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %953 = reshape(%952, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %954 = @func_4107(%953) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) */;
  %955 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %956 = %949.0;
  %957 = %954.1;
  %958 = %955.0;
  (%956, %951, %957, %958)
}

def @func_5488() -> (Tensor[(7, 4, 9), float64],) {
  %959 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %960 = %959.0;
  (%960,)
}

def @func_7619() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %961 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %962 = %961.1;
  %963 = @func_5940() /* ty=Tensor[(7, 4, 9), float64] */;
  (%962, %963)
}

def @func_9632() -> Tensor[(7, 4, 9), float64] {
  %964 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %964.0
}

def @func_12267() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %965 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %966 = %965.0;
  %967 = @func_10174() /* ty=Tensor[(7, 4, 9), float32] */;
  (%966, %967)
}

def @func_17882() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %968 = @func_7814() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %969 = @func_14139() /* ty=Tensor[(7, 4, 9), float64] */;
  %970 = %968.5;
  (%969, %970)
}

def @func_7211() -> Tensor[(7, 4, 9), float64] {
  @func_1828() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_6737() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %971 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %972 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %973 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %974 = %971.0;
  %975 = %972.0;
  %976 = %973.0;
  (%974, %975, %976)
}

def @func_11964(%var_11956: Tensor[(36, 1), float32], %var_11961: Tensor[(336), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(1, 12, 3), float32], Tensor[(36, 1), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64]) {
  %977 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %978 = cast(%var_11956, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %979 = reshape(%978, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), float32] */;
  %980 = cast(%var_11961, dtype="float64") /* ty=Tensor[(336), float64] */;
  %981 = reshape(%980, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %982 = @func_2835(%981) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) */;
  %983 = %977.0;
  %984 = @func_1394(%979) /* ty=Tensor[(1, 12, 3), float32] */;
  %985 = %982.0;
  (%983, %984, %var_11956, %985, %var_11961)
}

def @func_5154() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) {
  %986 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %987 = cast(meta[relay.Constant][44] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %988 = cast(meta[relay.Constant][44] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %989 = reshape(%987, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %990 = reshape(%988, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %991 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %992 = %986.0;
  %993 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  %994 = @func_320(%989, %990) /* ty=Tensor[(7, 11, 7), uint8] */;
  %995 = %991.0;
  (%992, %993, %994, meta[relay.Constant][44] /* ty=Tensor[(539), uint8] */, %995)
}

def @func_12201() -> (Tensor[(7, 4, 9), bool],) {
  %996 = @func_7701() /* ty=Tensor[(7, 4, 9), bool] */;
  (%996,)
}

def @func_15958() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(416), uint64], Tensor[(336), float64], Tensor[(48, 84), float64]) {
  %997 = cast(meta[relay.Constant][45] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %998 = cast(meta[relay.Constant][46] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %999 = cast(meta[relay.Constant][47] /* ty=Tensor[(48, 84), float64] */, dtype="float64") /* ty=Tensor[(48, 84), float64] */;
  %1000 = reshape(%997, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %1001 = reshape(%998, newshape=[24, 14]) /* ty=Tensor[(24, 14), float64] */;
  %1002 = reshape(%999, newshape=[4032]) /* ty=Tensor[(4032), float64] */;
  %1003 = @func_7454(%1000, %1001, %1002) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(24, 14), float64], Tensor[(4032), float64], float64, Tensor[(240), float64]) */;
  %1004 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
  %1005 = %1003.0;
  (%1004, %1005, meta[relay.Constant][45] /* ty=Tensor[(416), uint64] */, meta[relay.Constant][46] /* ty=Tensor[(336), float64] */, meta[relay.Constant][47] /* ty=Tensor[(48, 84), float64] */)
}

def @func_6010() -> Tensor[(2304), int8] {
  @func_4510() /* ty=Tensor[(2304), int8] */
}

def @func_7592(%var_7582: Tensor[(32), uint64]) -> (Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(8, 52), uint64], Tensor[(7, 4, 9), float64], Tensor[(20, 4), float64], Tensor[(7, 4, 9), float64]) {
  %1006 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1007 = cast(%var_7582, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %1008 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 52), uint64] */, dtype="uint64") /* ty=Tensor[(8, 52), uint64] */;
  %1009 = reshape(%1007, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
  %1010 = reshape(%1008, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
  %1011 = @func_6518(%1009, %1010) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
  %1012 = cast(meta[relay.Constant][49] /* ty=Tensor[(20, 4), float64] */, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
  %1013 = reshape(%1012, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
  %1014 = @func_3388(%1013) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
  %1015 = @func_6435() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1016 = %1006.0;
  %1017 = %1011.2;
  %1018 = %1014.1;
  %1019 = %1015.0;
  (%1016, %1017, %var_7582, meta[relay.Constant][48] /* ty=Tensor[(8, 52), uint64] */, %1018, meta[relay.Constant][49] /* ty=Tensor[(20, 4), float64] */, %1019)
}

def @func_13437() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) {
  %1020 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %1021 = cast(meta[relay.Constant][50] /* ty=Tensor[(539, 1), uint8] */, dtype="uint8") /* ty=Tensor[(539, 1), uint8] */;
  %1022 = reshape(%1021, newshape=[11, 49]) /* ty=Tensor[(11, 49), uint8] */;
  %1023 = @func_5235(%1022) /* ty=(Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) */;
  %1024 = @func_8553() /* ty=(Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) */;
  %1025 = %1020.0;
  %1026 = %1023.1;
  %1027 = %1024.1;
  (%1025, %1026, meta[relay.Constant][50] /* ty=Tensor[(539, 1), uint8] */, %1027)
}

def @func_7539(%var_7517: Tensor[(1, 15, 16), float64]) -> Tensor[(?, 15, 16), uint32] {
  %1028 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %1029 = %1028.1;
  %1030 = cast(%var_7517, dtype="uint32") /* ty=Tensor[(1, 15, 16), uint32] */;
  %1031 = shape_of(%1029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1032 = cast(%1029, dtype="uint32") /* ty=Tensor[(1, 15, 16), uint32] */;
  %1033 = dyn.reshape(%1030, %1031, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%1032, %1033) /* ty=Tensor[(?, 15, 16), uint32] */
}

def @func_9337() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float32], Tensor[(132), uint8]) {
  %1034 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
  %1035 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %1036 = @func_6980() /* ty=Tensor[(5, 10, 5), float32] */;
  %1037 = %1034.2;
  (%1035, %1036, %1037)
}

def @func_5659() -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1038 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1039 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %1040 = cast(meta[relay.Constant][51] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %1041 = reshape(%1040, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
  %1042 = @func_3388(%1041) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
  %1043 = %1038.0;
  %1044 = %1039.4;
  %1045 = %1042.0;
  %1046 = @func_2427() /* ty=Tensor[(7, 4, 9), float64] */;
  %1047 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
  (%1043, %1044, %1045, meta[relay.Constant][51] /* ty=Tensor[(80), float64] */, %1046, %1047)
}

def @func_13514(%var_13500: Tensor[(16, 240), float64]) -> (Tensor[(16, 240), float64], Tensor[(16, 240), int8]) {
  %1048 = @func_7814() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1049 = %1048.1;
  %1050 = cast(%1049, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %1051 = cast(%var_13500, dtype="float64") /* ty=Tensor[(16, 240), float64] */;
  %1052 = cast(%var_13500, dtype="int8") /* ty=Tensor[(16, 240), int8] */;
  %1053 = cast(%1049, dtype="int8") /* ty=Tensor[(1, 240), int8] */;
  %1054 = mod(%1050, %1051) /* ty=Tensor[(16, 240), float64] */;
  %1055 = add(%1052, %1053) /* ty=Tensor[(16, 240), int8] */;
  (%1054, %1055)
}

def @func_3895() -> Tensor[(7, 4, 9), float64] {
  @func_2229() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_7454(%var_7408: Tensor[(416), uint64], %var_7418: Tensor[(24, 14), float64], %var_7419: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(24, 14), float64], Tensor[(4032), float64], float64, Tensor[(240), float64]) {
  %1056 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1057 = cast(meta[relay.Constant][52] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %1058 = cast(%var_7408, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %1059 = reshape(%1057, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
  %1060 = reshape(%1058, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
  %1061 = @func_6518(%1059, %1060) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
  %1062 = cast(%var_7418, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %1063 = cast(%var_7419, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %1064 = reshape(%1062, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
  %1065 = reshape(%1063, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
  %1066 = @func_5899(%1064, %1065) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
  %1067 = @func_5216() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) */;
  %1068 = @func_6851() /* ty=(Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) */;
  %1069 = %1056.0;
  %1070 = %1061.2;
  %1071 = %1066.3;
  %1072 = %1067.2;
  %1073 = %1068.0;
  (%1069, %1070, meta[relay.Constant][52] /* ty=Tensor[(32), uint64] */, %var_7408, %1071, %var_7418, %var_7419, %1072, %1073)
}

def @func_7198(%var_7173: Tensor[(1, 336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 336), int16]) {
  %1074 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1075 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %1076 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1077 = cast(%var_7173, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %1078 = reshape(%1077, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float64] */;
  %1079 = @func_705(%1078) /* ty=Tensor[(12, 4, 7), float64] */;
  %1080 = cast(%1079, dtype="int16") /* ty=Tensor[(12, 4, 7), int16] */;
  %1081 = shape_of(%var_7173, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1082 = cast(%var_7173, dtype="int16") /* ty=Tensor[(1, 336), int16] */;
  %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1084 = %1074.1;
  %1085 = %1075.0;
  %1086 = %1076.0;
  %1087 = logical_xor(%1082, %1083) /* ty=Tensor[(?, 336), int16] */;
  (%1084, %1085, %1086, %1087)
}

def @func_2764() -> Tensor[(7, 4, 9), float32] {
  @func_1982() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_2269(%var_2266: Tensor[(240), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(2, 15, 13), float64], float64, Tensor[(1, 390), float64], Tensor[(240), float64]) {
  %1088 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1089 = cast(-1.71345f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1090 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 390), float64] */, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
  %1091 = cast(%var_2266, dtype="float64") /* ty=Tensor[(240), float64] */;
  %1092 = reshape(%1089, newshape=[]) /* ty=float64 */;
  %1093 = reshape(%1090, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float64] */;
  %1094 = reshape(%1091, newshape=[1, 240]) /* ty=Tensor[(1, 240), float64] */;
  %1095 = @func_815(%1092, %1093, %1094) /* ty=(Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */;
  %1096 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %1097 = %1088.0;
  %1098 = %1095.0;
  (%1096, %1097, %1098, -1.71345f64 /* ty=float64 */, meta[relay.Constant][53] /* ty=Tensor[(1, 390), float64] */, %var_2266)
}

def @func_3388(%var_3352: Tensor[(5, 1, 16), float64]) -> (Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) {
  %1099 = cast(%var_3352, dtype="float64") /* ty=Tensor[(5, 1, 16), float64] */;
  %1100 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 240), float64] */, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %1101 = reshape(%1100, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %1102 = @func_2269(%1101) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(2, 15, 13), float64], float64, Tensor[(1, 390), float64], Tensor[(240), float64]) */;
  %1103 = sqrt(%1099) /* ty=Tensor[(5, 1, 16), float64] */;
  %1104 = %1102.0;
  (%1103, %1104, meta[relay.Constant][54] /* ty=Tensor[(1, 240), float64] */)
}

def @func_10559() -> Tensor[(7, 4, 9), float64] {
  %1105 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1105.0
}

def @func_16289(%var_16247: Tensor[(5, 7, 16), float64]) -> (Tensor[(5, 7, 16), bool], Tensor[(7, 4, 9), float64], Tensor[(5, 7, 16), float32]) {
  %1106 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1107 = %1106.2;
  %1108 = cast(%1107, dtype="bool") /* ty=Tensor[(5, 1, 16), bool] */;
  %1109 = cast(%var_16247, dtype="bool") /* ty=Tensor[(5, 7, 16), bool] */;
  %1110 = @func_14640() /* ty=(Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) */;
  %1111 = cast(%var_16247, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
  %1112 = cast(%1107, dtype="float32") /* ty=Tensor[(5, 1, 16), float32] */;
  %1113 = not_equal(%1108, %1109) /* ty=Tensor[(5, 7, 16), bool] */;
  %1114 = %1110.1;
  %1115 = mod(%1111, %1112) /* ty=Tensor[(5, 7, 16), float32] */;
  (%1113, %1114, %1115)
}

def @func_12801() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) {
  %1116 = @func_6851() /* ty=(Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) */;
  %1117 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %1118 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  %1119 = %1116.5;
  %1120 = %1117.1;
  (%1118, %1119, %1120)
}

def @func_17793() -> (Tensor[(2304), int8],) {
  %1121 = @func_16564() /* ty=(Tensor[(2304), int8],) */;
  %1122 = %1121.0;
  (%1122,)
}

def @func_16641() -> Tensor[(7, 4, 9), float64] {
  @func_9632() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_14446() -> (Tensor[(7, 4, 9), float64],) {
  %1123 = @func_10317() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) */;
  %1124 = %1123.0;
  (%1124,)
}

def @func_15340() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1125 = @func_8588() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %1126 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1127 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1128 = %1125.0;
  %1129 = %1126.0;
  %1130 = %1127.0;
  (%1128, %1129, %1130)
}

def @func_11152(%var_11094: Tensor[(8, 42), float64], %var_11105: Tensor[(132), uint8], %var_11127: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(8, 42), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8], Tensor[(2304), int8], Tensor[(4032), int32], Tensor[(4032), float64], Tensor[(4032), int8]) {
  %1131 = @func_6884() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1132 = cast(%var_11094, dtype="float64") /* ty=Tensor[(8, 42), float64] */;
  %1133 = cast(meta[relay.Constant][55] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %1134 = reshape(%1132, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
  %1135 = reshape(%1133, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
  %1136 = @func_5899(%1134, %1135) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
  %1137 = cast(%var_11105, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %1138 = reshape(%1137, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
  %1139 = @func_3086(%1138) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
  %1140 = cast(%var_11127, dtype="int32") /* ty=Tensor[(4032), int32] */;
  %1141 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(4032), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1142 = cast(meta[relay.Constant][55] /* ty=Tensor[(4032), float64] */, dtype="int32") /* ty=Tensor[(4032), int32] */;
  %1143 = dyn.reshape(%1140, %1141, newshape=[]) /* ty=Tensor[(?), int32] */;
  %1144 = cast(meta[relay.Constant][56] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %1145 = reshape(%1144, newshape=[2304]) /* ty=Tensor[(2304), int8] */;
  %1146 = @func_8356(%1145) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], float64, Tensor[(2304), int8], Tensor[(7, 4, 9), float64]) */;
  %1147 = %1146.3;
  %1148 = cast(%1147, dtype="float64") /* ty=float64 */;
  %1149 = cast(meta[relay.Constant][55] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %1150 = cast(%var_11127, dtype="float32") /* ty=Tensor[(4032), float32] */;
  %1151 = asin(%1150) /* ty=Tensor[(4032), float32] */;
  %1152 = cast(%1151, dtype="int8") /* ty=Tensor[(4032), int8] */;
  %1153 = cast(%1147, dtype="int8") /* ty=int8 */;
  %1154 = @func_6641() /* ty=Tensor[(7, 4, 9), float64] */;
  %1155 = %1131.0;
  %1156 = %1136.0;
  %1157 = %1139.1;
  %1158 = multiply(%1142, %1143) /* ty=Tensor[(4032), int32] */;
  %1159 = floor_mod(%1148, %1149) /* ty=Tensor[(4032), float64] */;
  %1160 = right_shift(%1152, %1153) /* ty=Tensor[(4032), int8] */;
  (%1154, %1155, %1156, %var_11094, %1157, %var_11105, meta[relay.Constant][56] /* ty=Tensor[(2304), int8] */, %1158, %1159, %1160)
}

def @func_2527(%var_2489: Tensor[(5, 3, 5), float32], %var_2490: Tensor[(5, 3, 5), float32]) -> (Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) {
  %1161 = cast(%var_2490, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
  %1162 = shape_of(%var_2489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1163 = cast(%var_2489, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
  %1164 = dyn.reshape(%1161, %1162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1165 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %1166 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1167 = cast(%var_2489, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
  %1168 = power(%1163, %1164) /* ty=Tensor[(5, 3, 5), float32] */;
  %1169 = %1165.0;
  %1170 = %1166.0;
  %1171 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %1172 = atan(%1167) /* ty=Tensor[(5, 3, 5), float32] */;
  (%1168, %1169, %1170, %1171, %1172)
}

def @func_2835(%var_2821: Tensor[(336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) {
  %1173 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1174 = cast(%var_2821, dtype="float64") /* ty=Tensor[(336), float64] */;
  %1175 = reshape(%1174, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float64] */;
  %1176 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1177 = %1173.0;
  %1178 = @func_705(%1175) /* ty=Tensor[(12, 4, 7), float64] */;
  %1179 = %1176.0;
  (%1177, %1178, %var_2821, %1179)
}

def @func_12094() -> Tensor[(390), float64] {
  %1180 = @func_5216() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) */;
  %1180.3
}

def @func_7045() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %1181 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %1182 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
  %1183 = %1181.1;
  (%1182, %1183)
}

def @func_13258(%var_13204: Tensor[(10, 4, 15), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(10, 4, 15), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %1184 = @func_11284() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1185 = @func_12993() /* ty=(Tensor[(2304), int8],) */;
  %1186 = cast(%var_13204, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %1187 = log10(%1186) /* ty=Tensor[(10, 4, 15), float64] */;
  %1188 = cast(%var_13204, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %1189 = exp(%1188) /* ty=Tensor[(10, 4, 15), float64] */;
  %1190 = cast(%1189, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %1191 = shape_of(%1187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1192 = cast(%1187, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %1193 = dyn.reshape(%1190, %1191, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1194 = @func_10317() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) */;
  %1195 = %1184.0;
  %1196 = %1185.0;
  %1197 = minimum(%1192, %1193) /* ty=Tensor[(10, 4, 15), float64] */;
  %1198 = %1194.0;
  %1199 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
  (%1195, %1196, %1197, %1198, %1199)
}

def @func_10174() -> Tensor[(7, 4, 9), float32] {
  @func_2764() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_8482() -> Tensor[(1, 15, 16), float64] {
  %1200 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %1200.4
}

def @func_1524() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1201 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1202 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1203 = %1201.0;
  %1204 = %1202.0;
  (%1203, %1204)
}

def @func_11772() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %1205 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %1206 = @func_8175() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1207 = %1205.0;
  %1208 = %1206.0;
  (%1207, %1208)
}

def @func_11470(%var_11379: Tensor[(33, 4), uint8]) -> (Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) {
  %1209 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %1210 = %1209.2;
  %1211 = cast(%var_11379, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %1212 = shape_of(%1210, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1213 = cast(%1210, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %1214 = dyn.reshape(%1211, %1212, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1215 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1216 = %1215.1;
  %1217 = cast(%1216, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %1218 = @func_8509() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %1219 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1220 = cast(meta[relay.Constant][57] /* ty=Tensor[(33, 4), uint8] */, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
  %1221 = shape_of(%var_11379, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1222 = cast(%var_11379, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
  %1223 = dyn.reshape(%1220, %1221, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1224 = logical_or(%1213, %1214) /* ty=Tensor[(33, 4), bool] */;
  %1225 = acos(%1217) /* ty=Tensor[(7, 4, 9), float64] */;
  %1226 = %1218.1;
  %1227 = %1219.0;
  %1228 = maximum(%1222, %1223) /* ty=Tensor[(33, 4), uint8] */;
  (%1224, %1225, %1226, %1227, %1228)
}

def @func_13476() -> (Tensor[(2304), int8], Tensor[(7, 4, 9), float32], Tensor[(5, 10, 5), bool]) {
  %1229 = @func_8064() /* ty=(Tensor[(2304), int8],) */;
  %1230 = @func_5596() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
  %1231 = @func_8969() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) */;
  %1232 = %1229.0;
  %1233 = %1230.0;
  %1234 = %1231.5;
  (%1232, %1233, %1234)
}

def @func_17686() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1235 = @func_12801() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) */;
  %1236 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1237 = @func_14073() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1238 = %1235.2;
  %1239 = %1236.0;
  %1240 = %1237.0;
  (%1238, %1239, %1240)
}

def @func_6435() -> (Tensor[(7, 4, 9), float64],) {
  %1241 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
  (%1241,)
}

def @func_16907() -> (Tensor[(5, 10, 5), float64],) {
  %1242 = @func_15585() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */;
  %1243 = %1242.1;
  (%1243,)
}

def @func_9151(%var_9094: Tensor[(210), float32]) -> (Tensor[(7, 4, 9), float64], Tensor[(210), float32], Tensor[(539), uint8], Tensor[(539), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1244 = cast(%var_9094, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1245 = cast(meta[relay.Constant][58] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %1246 = cast(%var_9094, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1247 = reshape(%1244, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float32] */;
  %1248 = reshape(%1245, newshape=[539]) /* ty=Tensor[(539), uint8] */;
  %1249 = reshape(%1246, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float32] */;
  %1250 = @func_4200(%1247, %1248, %1249) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(7, 4, 9), float64], Tensor[(7, 15, 2), bool]) */;
  %1251 = %1250.1;
  %1252 = cast(%1251, dtype="float32") /* ty=Tensor[(539), float32] */;
  %1253 = @func_6884() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1254 = @func_8588() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %1255 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  %1256 = sinh(%1252) /* ty=Tensor[(539), float32] */;
  %1257 = @func_7306() /* ty=Tensor[(7, 4, 9), float64] */;
  %1258 = %1253.0;
  %1259 = %1254.1;
  (%1255, %var_9094, meta[relay.Constant][58] /* ty=Tensor[(539), uint8] */, %1256, %1257, %1258, %1259)
}

def @func_2051() -> Tensor[(7, 4, 9), float32] {
  @func_1982() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_2591() -> (Tensor[(5, 10, 5), bool],) {
  %1260 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %1261 = %1260.0;
  (%1261,)
}

def @func_11223() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %1262 = @func_8428() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1263 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %1264 = @func_7211() /* ty=Tensor[(7, 4, 9), float64] */;
  %1265 = %1262.1;
  %1266 = %1263.0;
  (%1264, %1265, %1266)
}

def @func_14073() -> (Tensor[(7, 4, 9), float64],) {
  %1267 = @func_9632() /* ty=Tensor[(7, 4, 9), float64] */;
  (%1267,)
}

def @func_7252() -> (Tensor[(16, 16, 9), bool],) {
  %1268 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %1269 = %1268.3;
  (%1269,)
}

def @func_15080() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1270 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %1271 = @func_8428() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1272 = %1270.0;
  %1273 = %1271.2;
  %1274 = @func_2427() /* ty=Tensor[(7, 4, 9), float64] */;
  (%1272, %1273, %1274)
}

def @func_4754() -> (Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) {
  %1275 = @func_4670() /* ty=(Tensor[(7, 4, 9), bool],) */;
  %1276 = cast(meta[relay.Constant][59] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %1277 = reshape(%1276, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %1278 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1279 = @func_298(%1277) /* ty=Tensor[(1, 15, 16), float64] */;
  %1280 = cast(%1279, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  %1281 = reshape(%1280, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %1282 = %1275.0;
  %1283 = %1278.0;
  %1284 = @func_298(%1281) /* ty=Tensor[(1, 15, 16), float64] */;
  (%1282, %1279, meta[relay.Constant][59] /* ty=Tensor[(240), float64] */, %1283, %1284)
}

def @func_13077(%var_13062: Tensor[(5, 10, 5), float32]) -> (Tensor[(1, 15, 16), float64], Tensor[(2304), int8], Tensor[(5, 10, 5), uint8]) {
  %1285 = @func_5596() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
  %1286 = %1285.2;
  %1287 = cast(%1286, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %1288 = cos(%1287) /* ty=Tensor[(5, 10, 5), float32] */;
  %1289 = cast(%var_13062, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
  %1290 = shape_of(%1288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1291 = cast(%1288, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
  %1292 = dyn.reshape(%1289, %1290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1293 = @func_8482() /* ty=Tensor[(1, 15, 16), float64] */;
  %1294 = @func_4510() /* ty=Tensor[(2304), int8] */;
  %1295 = bitwise_or(%1291, %1292) /* ty=Tensor[(5, 10, 5), uint8] */;
  (%1293, %1294, %1295)
}

def @func_7814() -> (Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1296 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %1297 = cast(meta[relay.Constant][60] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %1298 = reshape(%1297, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
  %1299 = @func_3388(%1298) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
  %1300 = @func_5488() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1301 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %1302 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1303 = %1296.0;
  %1304 = %1299.2;
  %1305 = %1300.0;
  %1306 = %1301.3;
  %1307 = @func_5369() /* ty=Tensor[(7, 4, 9), float64] */;
  %1308 = %1302.0;
  (%1303, %1304, meta[relay.Constant][60] /* ty=Tensor[(80), float64] */, %1305, %1306, %1307, %1308)
}

def @func_6239(%var_6206: Tensor[(7, 4, 9), float32]) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) {
  %1309 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
  %1310 = cast(%var_6206, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %1311 = shape_of(%1309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1312 = cast(%1309, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %1313 = dyn.reshape(%1310, %1311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1314 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1315 = cast(meta[relay.Constant][61] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %1316 = cast(meta[relay.Constant][61] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %1317 = reshape(%1315, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %1318 = reshape(%1316, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %1319 = equal(%1312, %1313) /* ty=Tensor[(7, 4, 9), bool] */;
  %1320 = %1314.0;
  %1321 = @func_320(%1317, %1318) /* ty=Tensor[(7, 11, 7), uint8] */;
  (%1319, %1320, %1321, meta[relay.Constant][61] /* ty=Tensor[(539), uint8] */)
}

def @func_5216() -> (Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) {
  %1322 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %1323 = cast(-1.20043f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1324 = cast(meta[relay.Constant][62] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %1325 = cast(meta[relay.Constant][63] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %1326 = reshape(%1323, newshape=[]) /* ty=float64 */;
  %1327 = reshape(%1324, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float64] */;
  %1328 = reshape(%1325, newshape=[1, 240]) /* ty=Tensor[(1, 240), float64] */;
  %1329 = @func_815(%1326, %1327, %1328) /* ty=(Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */;
  %1330 = %1322.0;
  %1331 = %1329.2;
  (%1330, %1331, -1.20043f64 /* ty=float64 */, meta[relay.Constant][62] /* ty=Tensor[(390), float64] */, meta[relay.Constant][63] /* ty=Tensor[(240), float64] */)
}

def @func_4200(%var_4158: Tensor[(7, 15, 2), float32], %var_4172: Tensor[(539), uint8], %var_4191: Tensor[(7, 15, 2), float32]) -> (Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(7, 4, 9), float64], Tensor[(7, 15, 2), bool]) {
  %1332 = cast(%var_4172, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %1333 = cast(%var_4172, dtype="float64") /* ty=Tensor[(539), float64] */;
  %1334 = reshape(%1332, newshape=[539]) /* ty=Tensor[(539), uint8] */;
  %1335 = reshape(%1333, newshape=[539]) /* ty=Tensor[(539), float64] */;
  %1336 = @func_4046(%1334, %1335) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) */;
  %1337 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1338 = cast(%var_4158, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
  %1339 = rsqrt(%1338) /* ty=Tensor[(7, 15, 2), float32] */;
  %1340 = cast(%var_4191, dtype="bool") /* ty=Tensor[(7, 15, 2), bool] */;
  %1341 = shape_of(%1339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1342 = cast(%1339, dtype="bool") /* ty=Tensor[(7, 15, 2), bool] */;
  %1343 = dyn.reshape(%1340, %1341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1344 = %1336.2;
  %1345 = %1337.0;
  %1346 = greater_equal(%1342, %1343) /* ty=Tensor[(7, 15, 2), bool] */;
  (%1344, %var_4172, %1345, %1346)
}

def @func_2617() -> Tensor[(7, 4, 9), float64] {
  @func_2229() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_1588() -> (Tensor[(7, 4, 9), float64],) {
  %1347 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1348 = %1347.0;
  (%1348,)
}

def @func_4899() -> (Tensor[(7, 4, 9), float64],) {
  %1349 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1350 = %1349.0;
  (%1350,)
}

def @func_2454() -> (Tensor[(7, 4, 9), float64],) {
  %1351 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1352 = %1351.0;
  (%1352,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_12269() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  @func_12267() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_2454() -> (Tensor[(7, 4, 9), float64],) {
  %0 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_5075() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  @func_5073() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_6167() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) {
  @func_6165() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) */
}

def @func_3634() -> (Tensor[(7, 4, 9), float64],) {
  @func_3632() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_12479() -> Tensor[(7, 4, 9), float64] {
  @func_12477() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_13319() -> Tensor[(75), float32] {
  %3 = fn () -> Tensor[(75), float32] {
    %2 = @func_12154() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) */;
    %2.5
  };
  %3() /* ty=Tensor[(75), float32] */
}

def @func_16143() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  @func_16141() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_11156(%var_11153: Tensor[(8, 42), float64], %var_11154: Tensor[(132), uint8], %var_11155: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(8, 42), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8], Tensor[(2304), int8], Tensor[(4032), int32], Tensor[(4032), float64], Tensor[(4032), int8]) {
  %34 = fn (%var_11094: Tensor[(8, 42), float64], %var_11105: Tensor[(132), uint8], %var_11127: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(8, 42), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8], Tensor[(2304), int8], Tensor[(4032), int32], Tensor[(4032), float64], Tensor[(4032), int8]) {
    %4 = @func_6884() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %5 = cast(%var_11094, dtype="float64") /* ty=Tensor[(8, 42), float64] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
    %7 = reshape(%5, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
    %8 = reshape(%6, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
    %9 = @func_5899(%7, %8) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
    %10 = cast(%var_11105, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %11 = reshape(%10, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
    %12 = @func_3086(%11) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
    %13 = cast(%var_11127, dtype="int32") /* ty=Tensor[(4032), int32] */;
    %14 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4032), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(4032), float64] */, dtype="int32") /* ty=Tensor[(4032), int32] */;
    %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?), int32] */;
    %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
    %18 = reshape(%17, newshape=[2304]) /* ty=Tensor[(2304), int8] */;
    %19 = @func_8356(%18) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], float64, Tensor[(2304), int8], Tensor[(7, 4, 9), float64]) */;
    %20 = %19.3;
    %21 = cast(%20, dtype="float64") /* ty=float64 */;
    %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
    %23 = cast(%var_11127, dtype="float32") /* ty=Tensor[(4032), float32] */;
    %24 = asin(%23) /* ty=Tensor[(4032), float32] */;
    %25 = cast(%24, dtype="int8") /* ty=Tensor[(4032), int8] */;
    %26 = cast(%20, dtype="int8") /* ty=int8 */;
    %27 = @func_6641() /* ty=Tensor[(7, 4, 9), float64] */;
    %28 = %4.0;
    %29 = %9.0;
    %30 = %12.1;
    %31 = multiply(%15, %16) /* ty=Tensor[(4032), int32] */;
    %32 = floor_mod(%21, %22) /* ty=Tensor[(4032), float64] */;
    %33 = right_shift(%25, %26) /* ty=Tensor[(4032), int8] */;
    (%27, %28, %29, %var_11094, %30, %var_11105, meta[relay.Constant][1] /* ty=Tensor[(2304), int8] */, %31, %32, %33)
  };
  %34(%var_11153, %var_11154, %var_11155) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(8, 42), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8], Tensor[(2304), int8], Tensor[(4032), int32], Tensor[(4032), float64], Tensor[(4032), int8]) */
}

def @func_8256() -> Tensor[(7, 4, 9), float64] {
  %36 = fn () -> Tensor[(7, 4, 9), float64] {
    %35 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %35.0
  };
  %36() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_15586() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) {
  %43 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) {
    %37 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %38 = @func_15107() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %39 = %38.0;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
    %41 = %37.0;
    %42 = acosh(%40) /* ty=Tensor[(5, 10, 5), float64] */;
    (%41, %42)
  };
  %43() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */
}

def @func_5523() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_5521() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_16565() -> (Tensor[(2304), int8],) {
  %45 = fn () -> (Tensor[(2304), int8],) {
    %44 = @func_6596() /* ty=Tensor[(2304), int8] */;
    (%44,)
  };
  %45() /* ty=(Tensor[(2304), int8],) */
}

def @func_2592() -> (Tensor[(5, 10, 5), bool],) {
  %48 = fn () -> (Tensor[(5, 10, 5), bool],) {
    %46 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %47 = %46.0;
    (%47,)
  };
  %48() /* ty=(Tensor[(5, 10, 5), bool],) */
}

def @func_2428() -> Tensor[(7, 4, 9), float64] {
  %50 = fn () -> Tensor[(7, 4, 9), float64] {
    %49 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %49.1
  };
  %50() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_4985(%var_4919: Tensor[(250), bool], %var_4962: Tensor[(250), bool]) -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32], Tensor[(250), int64]) {
  %51 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %52 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %53 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %54 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %55 = cast(%var_4919, dtype="bool") /* ty=Tensor[(250), bool] */;
  %56 = cast(%var_4919, dtype="bool") /* ty=Tensor[(250), bool] */;
  %57 = reshape(%55, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %58 = reshape(%56, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %59 = @func_2364(%57, %58) /* ty=(Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) */;
  %60 = %59.0;
  %61 = cast(%var_4962, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %62 = shape_of(%var_4919, dtype="int32") /* ty=Tensor[(1), int32] */;
  %63 = cast(%var_4919, dtype="uint64") /* ty=Tensor[(250), uint64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %65 = maximum(%63, %64) /* ty=Tensor[(250), uint64] */;
  %66 = cast(%65, dtype="bool") /* ty=Tensor[(250), bool] */;
  %67 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%60, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %70 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %71 = cast(%var_4919, dtype="int64") /* ty=Tensor[(250), int64] */;
  %72 = shape_of(%65, dtype="int32") /* ty=Tensor[(1), int32] */;
  %73 = cast(%65, dtype="int64") /* ty=Tensor[(250), int64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?), int64] */;
  %75 = %51.0;
  %76 = %52.0;
  %77 = %53.0;
  %78 = %54.0;
  %79 = greater(%68, %69) /* ty=Tensor[(5, 10, 5), bool] */;
  %80 = %70.0;
  %81 = add(%73, %74) /* ty=Tensor[(250), int64] */;
  (%75, %76, %77, %78, %79, %80, %81)
}

def @func_15045() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(250), int64], Tensor[(250, 1), bool], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  @func_15043() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(250), int64], Tensor[(250, 1), bool], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */
}

def @func_13517(%var_13515: Tensor[(16, 240), float64]) -> (Tensor[(16, 240), float64], Tensor[(16, 240), int8]) {
  @func_13514(%var_13515) /* ty=(Tensor[(16, 240), float64], Tensor[(16, 240), int8]) */
}

def @func_4510() -> Tensor[(2304), int8] {
  %82 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %82.3
}

def @func_15081() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %88 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %83 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
    %84 = @func_8428() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %85 = %83.0;
    %86 = %84.2;
    %87 = @func_2427() /* ty=Tensor[(7, 4, 9), float64] */;
    (%85, %86, %87)
  };
  %88() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_5942() -> Tensor[(7, 4, 9), float64] {
  @func_5940() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9338() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float32], Tensor[(132), uint8]) {
  %93 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float32], Tensor[(132), uint8]) {
    %89 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
    %90 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
    %91 = @func_6980() /* ty=Tensor[(5, 10, 5), float32] */;
    %92 = %89.2;
    (%90, %91, %92)
  };
  %93() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float32], Tensor[(132), uint8]) */
}

def @func_8554() -> (Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) {
  %100 = fn () -> (Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) {
    %94 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
    %95 = %94.3;
    %96 = cast(%95, dtype="float64") /* ty=Tensor[(2304), float64] */;
    %97 = @func_7814() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %98 = erf(%96) /* ty=Tensor[(2304), float64] */;
    %99 = %97.6;
    (%98, %99)
  };
  %100() /* ty=(Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_14922() -> Tensor[(75), float32] {
  @func_14920() /* ty=Tensor[(75), float32] */
}

def @func_15729() -> Tensor[(7, 4, 9), float64] {
  @func_15727() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_17103(%var_17102: Tensor[(336), float64]) -> (Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64]) {
  %110 = fn (%var_17096: Tensor[(336), float64]) -> (Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64]) {
    %101 = @func_8671() /* ty=(Tensor[(5, 10, 5), float64],) */;
    %102 = cast(%var_17096, dtype="float64") /* ty=Tensor[(336), float64] */;
    %103 = cast(meta[relay.Constant][2] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
    %104 = reshape(%102, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %105 = reshape(%103, newshape=[4032]) /* ty=Tensor[(4032), float64] */;
    %106 = @func_6469(%104, %105) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(5, 10, 5), bool]) */;
    %107 = @func_8482() /* ty=Tensor[(1, 15, 16), float64] */;
    %108 = %101.0;
    %109 = %106.1;
    (%107, %108, %109, %var_17096, meta[relay.Constant][2] /* ty=Tensor[(4032), float64] */)
  };
  %110(%var_17102) /* ty=(Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64]) */
}

def @func_3303() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %111 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %112 = %111.0;
  %113 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  (%112, %113)
}

def @func_13945() -> (Tensor[(1, 15, 16), float64],) {
  @func_13943() /* ty=(Tensor[(1, 15, 16), float64],) */
}

def @func_6597() -> Tensor[(2304), int8] {
  %114 = fn () -> Tensor[(2304), int8] {
    @func_6010() /* ty=Tensor[(2304), int8] */
  };
  %114() /* ty=Tensor[(2304), int8] */
}

def @func_2070() -> (Tensor[(7, 4, 9), float64],) {
  @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_4310() -> Tensor[(11, 13, 5), float64] {
  @func_4308() /* ty=Tensor[(11, 13, 5), float64] */
}

def @func_5235(%var_5224: Tensor[(11, 49), uint8]) -> (Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) {
  %115 = cast(%var_5224, dtype="uint8") /* ty=Tensor[(11, 49), uint8] */;
  %116 = cast(%var_5224, dtype="uint8") /* ty=Tensor[(11, 49), uint8] */;
  %117 = reshape(%115, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %118 = reshape(%116, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %119 = cast(meta[relay.Constant][3] /* ty=Tensor[(250), bool] */, dtype="bool") /* ty=Tensor[(250), bool] */;
  %120 = cast(meta[relay.Constant][3] /* ty=Tensor[(250), bool] */, dtype="bool") /* ty=Tensor[(250), bool] */;
  %121 = reshape(%119, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %122 = reshape(%120, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
  %123 = @func_2364(%121, %122) /* ty=(Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) */;
  %124 = @func_4510() /* ty=Tensor[(2304), int8] */;
  %125 = @func_320(%117, %118) /* ty=Tensor[(7, 11, 7), uint8] */;
  %126 = %123.0;
  (%124, %125, %var_5224, %126, meta[relay.Constant][3] /* ty=Tensor[(250), bool] */)
}

def @func_6642() -> Tensor[(7, 4, 9), float64] {
  %127 = fn () -> Tensor[(7, 4, 9), float64] {
    @func_2427() /* ty=Tensor[(7, 4, 9), float64] */
  };
  %127() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_6430(%var_6429: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) {
  %136 = fn (%var_6353: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) {
    %128 = cast(%var_6353, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
    %129 = exp(%128) /* ty=Tensor[(9, 10, 10), float32] */;
    %130 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
    %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%129, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %134 = subtract(%132, %133) /* ty=Tensor[(9, 10, 10), float32] */;
    %135 = @func_4308() /* ty=Tensor[(11, 13, 5), float64] */;
    (%134, %135)
  };
  %136(%var_6429) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) */
}

def @func_12699(%var_12698: int32) -> (Tensor[(6, 1, 14), int32], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64]) {
  %144 = fn (%var_12680: int32) -> (Tensor[(6, 1, 14), int32], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64]) {
    %137 = cast(%var_12680, dtype="int32") /* ty=int32 */;
    %138 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 1, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 1, 14), int32] */;
    %139 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
    %140 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %141 = bitwise_xor(%137, %138) /* ty=Tensor[(6, 1, 14), int32] */;
    %142 = %139.0;
    %143 = %140.1;
    (%141, %142, %143)
  };
  %144(%var_12698) /* ty=(Tensor[(6, 1, 14), int32], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_13818() -> (Tensor[(7, 4, 9), float64],) {
  %147 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %145 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %146 = %145.0;
    (%146,)
  };
  %147() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_7815() -> (Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %161 = fn () -> (Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %148 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %149 = cast(meta[relay.Constant][6] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %150 = reshape(%149, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
    %151 = @func_3388(%150) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
    %152 = @func_5488() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %153 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
    %154 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %155 = %148.0;
    %156 = %151.2;
    %157 = %152.0;
    %158 = %153.3;
    %159 = @func_5369() /* ty=Tensor[(7, 4, 9), float64] */;
    %160 = %154.0;
    (%155, %156, meta[relay.Constant][6] /* ty=Tensor[(80), float64] */, %157, %158, %159, %160)
  };
  %161() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_10765() -> (Tensor[(2304), int8],) {
  %162 = @func_6596() /* ty=Tensor[(2304), int8] */;
  (%162,)
}

def @func_1982() -> Tensor[(7, 4, 9), float32] {
  %163 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %164 = %163.1;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
  erf(%165) /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_16872(%var_16870: Tensor[(252), float32], %var_16871: Tensor[(336), float64]) -> (Tensor[(2304), int8], Tensor[(7, 4, 9), bool], Tensor[(252), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %183 = fn (%var_16811: Tensor[(252), float32], %var_16829: Tensor[(336), float64]) -> (Tensor[(2304), int8], Tensor[(7, 4, 9), bool], Tensor[(252), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %166 = @func_8064() /* ty=(Tensor[(2304), int8],) */;
    %167 = cast(%var_16811, dtype="float32") /* ty=Tensor[(252), float32] */;
    %168 = reshape(%167, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float32] */;
    %169 = @func_6239(%168) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
    %170 = cast(%var_16829, dtype="float64") /* ty=Tensor[(336), float64] */;
    %171 = cast(meta[relay.Constant][7] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
    %172 = reshape(%170, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
    %173 = reshape(%171, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
    %174 = @func_5899(%172, %173) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
    %175 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %176 = @func_15585() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */;
    %177 = %166.0;
    %178 = %169.0;
    %179 = %174.3;
    %180 = %175.0;
    %181 = %176.0;
    %182 = @func_6641() /* ty=Tensor[(7, 4, 9), float64] */;
    (%177, %178, %var_16811, %179, %var_16829, meta[relay.Constant][7] /* ty=Tensor[(4032), float64] */, %180, %181, %182)
  };
  %183(%var_16870, %var_16871) /* ty=(Tensor[(2304), int8], Tensor[(7, 4, 9), bool], Tensor[(252), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_9726() -> (Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %184 = @func_8671() /* ty=(Tensor[(5, 10, 5), float64],) */;
  %185 = @func_7619() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %186 = @func_7953() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %187 = %184.0;
  %188 = %185.0;
  %189 = %186.3;
  (%187, %188, %189)
}

def @func_14920() -> Tensor[(75), float32] {
  @func_13318() /* ty=Tensor[(75), float32] */
}

def @func_2837(%var_2836: Tensor[(336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) {
  %197 = fn (%var_2821: Tensor[(336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) {
    %190 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %191 = cast(%var_2821, dtype="float64") /* ty=Tensor[(336), float64] */;
    %192 = reshape(%191, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float64] */;
    %193 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %194 = %190.0;
    %195 = @func_705(%192) /* ty=Tensor[(12, 4, 7), float64] */;
    %196 = %193.0;
    (%194, %195, %var_2821, %196)
  };
  %197(%var_2836) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_5200() -> Tensor[(7, 4, 9), float64] {
  %198 = fn () -> Tensor[(7, 4, 9), float64] {
    @func_2229() /* ty=Tensor[(7, 4, 9), float64] */
  };
  %198() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_5154() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) {
  %199 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %200 = cast(meta[relay.Constant][8] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %202 = reshape(%200, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %203 = reshape(%201, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %204 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %205 = %199.0;
  %206 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  %207 = @func_320(%202, %203) /* ty=Tensor[(7, 11, 7), uint8] */;
  %208 = %204.0;
  (%205, %206, %207, meta[relay.Constant][8] /* ty=Tensor[(539), uint8] */, %208)
}

def @func_6738() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %215 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
    %209 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %210 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %211 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %212 = %209.0;
    %213 = %210.0;
    %214 = %211.0;
    (%212, %213, %214)
  };
  %215() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */
}

def @func_13943() -> (Tensor[(1, 15, 16), float64],) {
  %216 = @func_8482() /* ty=Tensor[(1, 15, 16), float64] */;
  (%216,)
}

def @func_11774() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  @func_11772() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */
}

def @func_6012() -> Tensor[(2304), int8] {
  @func_6010() /* ty=Tensor[(2304), int8] */
}

def @func_10259() -> Tensor[(33, 4), float32] {
  %222 = fn () -> Tensor[(33, 4), float32] {
    %217 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
    %218 = %217.2;
    %219 = cast(%218, dtype="float64") /* ty=Tensor[(33, 4), float64] */;
    %220 = sqrt(%219) /* ty=Tensor[(33, 4), float64] */;
    %221 = cast(%220, dtype="float32") /* ty=Tensor[(33, 4), float32] */;
    cosh(%221) /* ty=Tensor[(33, 4), float32] */
  };
  %222() /* ty=Tensor[(33, 4), float32] */
}

def @func_11473(%var_11471: Tensor[(33, 4), uint8]) -> (Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) {
  @func_11470(%var_11471) /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) */
}

def @func_4497(%var_4495: Tensor[(240), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) {
  @func_4494(%var_4495) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */
}

def @func_4884(%var_4882: Tensor[(2, 8, 6), uint16], %var_4883: Tensor[(2, 8, 6), uint16]) -> Tensor[(2, 8, 6), uint16] {
  @func_4880(%var_4882, %var_4883) /* ty=Tensor[(2, 8, 6), uint16] */
}

def @func_9554() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %223 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
  %224 = @func_3488() /* ty=Tensor[(7, 4, 9), float64] */;
  %225 = %223.0;
  (%224, %225)
}

def @func_10561() -> Tensor[(7, 4, 9), float64] {
  @func_10559() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_5238(%var_5236: Tensor[(11, 49), uint8]) -> (Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) {
  @func_5235(%var_5236) /* ty=(Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) */
}

def @func_9778() -> Tensor[(7, 4, 9), float32] {
  @func_9776() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_12876() -> (Tensor[(132), uint8], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) {
  %226 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
  %227 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %228 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %229 = %226.2;
  %230 = %227.0;
  %231 = %228.4;
  (%229, %230, %231)
}

def @func_15853() -> (Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8], Tensor[(132), uint8]) {
  %232 = @func_15188() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(8, 8, 12), float64]) */;
  %233 = cast(meta[relay.Constant][9] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %234 = reshape(%233, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint8] */;
  %235 = @func_11470(%234) /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) */;
  %236 = %232.0;
  %237 = %235.4;
  (%236, %237, meta[relay.Constant][9] /* ty=Tensor[(132), uint8] */)
}

def @func_5899(%var_5867: Tensor[(336, 1), float64], %var_5876: Tensor[(336, 12), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) {
  %238 = cast(meta[relay.Constant][10] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %239 = reshape(%238, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
  %240 = @func_208(%239) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
  %241 = cast(%var_5867, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %242 = reshape(%241, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %243 = @func_2835(%242) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) */;
  %244 = cast(%var_5867, dtype="int64") /* ty=Tensor[(336, 1), int64] */;
  %245 = cast(%var_5876, dtype="int64") /* ty=Tensor[(336, 12), int64] */;
  %246 = @func_4067() /* ty=Tensor[(5, 10, 5), bool] */;
  %247 = %240.1;
  %248 = %243.0;
  %249 = multiply(%244, %245) /* ty=Tensor[(336, 12), int64] */;
  (%246, %247, meta[relay.Constant][10] /* ty=Tensor[(2304), int8] */, %248, %249)
}

def @func_4046(%var_3990: Tensor[(539), uint8], %var_4025: Tensor[(539), float64]) -> (Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) {
  %250 = cast(%var_3990, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %251 = cast(%var_3990, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %252 = reshape(%250, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %253 = reshape(%251, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %254 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %255 = cast(%var_3990, dtype="float64") /* ty=Tensor[(539), float64] */;
  %256 = sin(%255) /* ty=Tensor[(539), float64] */;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(539), float64] */;
  %258 = acos(%257) /* ty=Tensor[(539), float64] */;
  %259 = cast(%var_4025, dtype="int64") /* ty=Tensor[(539), int64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(1), int32] */;
  %261 = cast(%258, dtype="int64") /* ty=Tensor[(539), int64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?), int64] */;
  %263 = bitwise_or(%261, %262) /* ty=Tensor[(539), int64] */;
  %264 = cast(%258, dtype="int16") /* ty=Tensor[(539), int16] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(1), int32] */;
  %266 = cast(%263, dtype="int16") /* ty=Tensor[(539), int16] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?), int16] */;
  %268 = @func_2764() /* ty=Tensor[(7, 4, 9), float32] */;
  %269 = @func_320(%252, %253) /* ty=Tensor[(7, 11, 7), uint8] */;
  %270 = %254.0;
  %271 = bitwise_xor(%266, %267) /* ty=Tensor[(539), int16] */;
  (%268, %269, %270, %271)
}

def @func_6981() -> Tensor[(5, 10, 5), float32] {
  %275 = fn () -> Tensor[(5, 10, 5), float32] {
    %272 = @func_5739() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %273 = %272.0;
    %274 = cast(%273, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
    asin(%274) /* ty=Tensor[(5, 10, 5), float32] */
  };
  %275() /* ty=Tensor[(5, 10, 5), float32] */
}

def @func_10318() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) {
  %280 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) {
    %276 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
    %277 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
    %278 = @func_9632() /* ty=Tensor[(7, 4, 9), float64] */;
    %279 = %276.0;
    (%277, %278, %279)
  };
  %280() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) */
}

def @func_9419() -> Tensor[(7, 4, 9), uint16] {
  @func_9417() /* ty=Tensor[(7, 4, 9), uint16] */
}

def @func_10513(%var_10488: Tensor[(252), float32]) -> (Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(252), float32]) {
  %281 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %282 = cast(%var_10488, dtype="float32") /* ty=Tensor[(252), float32] */;
  %283 = reshape(%282, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float32] */;
  %284 = @func_6239(%283) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
  %285 = %281.0;
  %286 = %284.3;
  (%285, %286, %var_10488)
}

def @func_16397() -> (Tensor[(7, 4, 9), uint16],) {
  %289 = fn () -> (Tensor[(7, 4, 9), uint16],) {
    %287 = @func_15943() /* ty=(Tensor[(7, 4, 9), uint16],) */;
    %288 = %287.0;
    (%288,)
  };
  %289() /* ty=(Tensor[(7, 4, 9), uint16],) */
}

def @func_4755() -> (Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) {
  %300 = fn () -> (Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) {
    %290 = @func_4670() /* ty=(Tensor[(7, 4, 9), bool],) */;
    %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %292 = reshape(%291, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
    %293 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %294 = @func_298(%292) /* ty=Tensor[(1, 15, 16), float64] */;
    %295 = cast(%294, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    %296 = reshape(%295, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
    %297 = %290.0;
    %298 = %293.0;
    %299 = @func_298(%296) /* ty=Tensor[(1, 15, 16), float64] */;
    (%297, %294, meta[relay.Constant][11] /* ty=Tensor[(240), float64] */, %298, %299)
  };
  %300() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */
}

def @func_8510() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %304 = fn () -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
    %301 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %302 = %301.0;
    %303 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
    (%302, %303)
  };
  %304() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */
}

def @func_208(%var_129: Tensor[(16, 16, 9), int8]) -> (Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) {
  %305 = cast(%var_129, dtype="uint8") /* ty=Tensor[(16, 16, 9), uint8] */;
  %306 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1, 9), int8] */, dtype="uint8") /* ty=Tensor[(1, 1, 9), uint8] */;
  %307 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1, 9), int8] */, dtype="bool") /* ty=Tensor[(1, 1, 9), bool] */;
  %308 = cast(%var_129, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
  %309 = not_equal(%307, %308) /* ty=Tensor[(16, 16, 9), bool] */;
  %310 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 16, 9), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="bool") /* ty=Tensor[(16, 16, 9), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = right_shift(%305, %306) /* ty=Tensor[(16, 16, 9), uint8] */;
  %315 = logical_or(%312, %313) /* ty=Tensor[(16, 16, 9), bool] */;
  (%314, %315)
}

def @func_5283(%var_5281: Tensor[(33, 4), uint8]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) {
  @func_5280(%var_5281) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */
}

def @func_6862() -> (Tensor[(5, 10, 5), bool],) {
  %318 = fn () -> (Tensor[(5, 10, 5), bool],) {
    %316 = @func_6096() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
    %317 = %316.1;
    (%317,)
  };
  %318() /* ty=(Tensor[(5, 10, 5), bool],) */
}

def @func_10894() -> (Tensor[(5, 10, 5), bool], Tensor[(539), float32]) {
  %319 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %320 = cast(meta[relay.Constant][14] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %321 = reshape(%320, newshape=[11, 49]) /* ty=Tensor[(11, 49), uint8] */;
  %322 = @func_5235(%321) /* ty=(Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) */;
  %323 = %322.2;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(11, 49), float32] */;
  %325 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(539), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %326 = cast(meta[relay.Constant][14] /* ty=Tensor[(539), uint8] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?), float32] */;
  %328 = %319.0;
  %329 = mod(%326, %327) /* ty=Tensor[(539), float32] */;
  (%328, %329)
}

def @func_7884() -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(252), float64]) {
  @func_7882() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(252), float64]) */
}

def @func_3388(%var_3352: Tensor[(5, 1, 16), float64]) -> (Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) {
  %330 = cast(%var_3352, dtype="float64") /* ty=Tensor[(5, 1, 16), float64] */;
  %331 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 240), float64] */, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %332 = reshape(%331, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %333 = @func_2269(%332) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(2, 15, 13), float64], float64, Tensor[(1, 390), float64], Tensor[(240), float64]) */;
  %334 = sqrt(%330) /* ty=Tensor[(5, 1, 16), float64] */;
  %335 = %333.0;
  (%334, %335, meta[relay.Constant][15] /* ty=Tensor[(1, 240), float64] */)
}

def @func_12156() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) {
  @func_12154() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) */
}

def @func_8064() -> (Tensor[(2304), int8],) {
  %336 = @func_4510() /* ty=Tensor[(2304), int8] */;
  (%336,)
}

def @func_16742() -> (Tensor[(390), float64], Tensor[(7, 4, 9), float64]) {
  %340 = fn () -> (Tensor[(390), float64], Tensor[(7, 4, 9), float64]) {
    %337 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %338 = @func_12094() /* ty=Tensor[(390), float64] */;
    %339 = %337.0;
    (%338, %339)
  };
  %340() /* ty=(Tensor[(390), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_7307() -> Tensor[(7, 4, 9), float64] {
  %342 = fn () -> Tensor[(7, 4, 9), float64] {
    %341 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %341.0
  };
  %342() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_1895() -> (Tensor[(7, 4, 9), float64],) {
  @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_16209() -> (Tensor[(7, 4, 9), float64], Tensor[(539, 1), uint8]) {
  %346 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(539, 1), uint8]) {
    %343 = @func_13437() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) */;
    %344 = @func_10430() /* ty=Tensor[(7, 4, 9), float64] */;
    %345 = %343.2;
    (%344, %345)
  };
  %346() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(539, 1), uint8]) */
}

def @func_12096() -> Tensor[(390), float64] {
  @func_12094() /* ty=Tensor[(390), float64] */
}

def @func_2456() -> (Tensor[(7, 4, 9), float64],) {
  @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_5940() -> Tensor[(7, 4, 9), float64] {
  @func_3488() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_12201() -> (Tensor[(7, 4, 9), bool],) {
  %347 = @func_7701() /* ty=Tensor[(7, 4, 9), bool] */;
  (%347,)
}

def @func_16966() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %348 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %349 = @func_9417() /* ty=Tensor[(7, 4, 9), uint16] */;
  %350 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  %351 = %348.0;
  (%349, %350, %351)
}

def @main() -> Tensor[(33, 4), int16] {
  %352 = @func_14641() /* ty=(Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) */;
  %353 = %352.0;
  %354 = cast(meta[relay.Constant][16] /* ty=Tensor[(33, 4), float32] */, dtype="int16") /* ty=Tensor[(33, 4), int16] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(2), int32] */;
  %356 = cast(%353, dtype="int16") /* ty=Tensor[(33, 4), int16] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  left_shift(%356, %357) /* ty=Tensor[(33, 4), int16] */
}

def @func_938(%var_867: float64, %var_889: Tensor[(2304), int8]) -> (Tensor[(4, 1, 6), float64], Tensor[(4, 1, 6), float32], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) {
  %358 = cast(%var_867, dtype="float64") /* ty=float64 */;
  %359 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(4, 1, 6), float64] */;
  %360 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 1, 6), float64] */, dtype="float32") /* ty=Tensor[(4, 1, 6), float32] */;
  %361 = cast(%var_867, dtype="float32") /* ty=float32 */;
  %362 = cast(%var_889, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %363 = reshape(%362, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
  %364 = @func_208(%363) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
  %365 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 240), float64] */, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %366 = reshape(%365, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %367 = power(%358, %359) /* ty=Tensor[(4, 1, 6), float64] */;
  %368 = divide(%360, %361) /* ty=Tensor[(4, 1, 6), float32] */;
  %369 = %364.0;
  %370 = @func_298(%366) /* ty=Tensor[(1, 15, 16), float64] */;
  (%367, %368, %369, %var_889, %370, meta[relay.Constant][18] /* ty=Tensor[(1, 240), float64] */)
}

def @func_10747() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) {
  %377 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) {
    %371 = @func_6096() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
    %372 = @func_8969() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) */;
    %373 = %372.5;
    %374 = cast(%373, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
    %375 = %371.0;
    %376 = tan(%374) /* ty=Tensor[(5, 10, 5), float64] */;
    (%375, %376)
  };
  %377() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */
}

def @func_4369() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
  %382 = fn () -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
    %378 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
    %379 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %380 = %378.0;
    %381 = %379.0;
    (%380, %381)
  };
  %382() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */
}

def @func_3586() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_4900() -> (Tensor[(7, 4, 9), float64],) {
  %385 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %383 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %384 = %383.0;
    (%384,)
  };
  %385() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_300(%var_299: Tensor[(1, 15, 16), float64]) -> Tensor[(1, 15, 16), float64] {
  %387 = fn (%var_280: Tensor[(1, 15, 16), float64]) -> Tensor[(1, 15, 16), float64] {
    %386 = cast(%var_280, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    atanh(%386) /* ty=Tensor[(1, 15, 16), float64] */
  };
  %387(%var_299) /* ty=Tensor[(1, 15, 16), float64] */
}

def @func_2229() -> Tensor[(7, 4, 9), float64] {
  %388 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %388.0
}

def @func_12203() -> (Tensor[(7, 4, 9), bool],) {
  @func_12201() /* ty=(Tensor[(7, 4, 9), bool],) */
}

def @func_6469(%var_6450: Tensor[(336), float64], %var_6451: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(5, 10, 5), bool]) {
  %389 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %390 = @func_3028() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
  %391 = cast(%var_6450, dtype="float64") /* ty=Tensor[(336), float64] */;
  %392 = cast(%var_6451, dtype="float64") /* ty=Tensor[(4032), float64] */;
  %393 = reshape(%391, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
  %394 = reshape(%392, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
  %395 = @func_5899(%393, %394) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
  %396 = @func_5739() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %397 = %389.0;
  %398 = %390.1;
  %399 = %395.3;
  %400 = %396.0;
  (%397, %398, %399, %var_6450, %var_6451, %400)
}

def @func_2051() -> Tensor[(7, 4, 9), float32] {
  @func_1982() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_12953() -> Tensor[(7, 4, 9), float64] {
  %401 = @func_8175() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %401.0
}

def @func_11470(%var_11379: Tensor[(33, 4), uint8]) -> (Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) {
  %402 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %403 = %402.2;
  %404 = cast(%var_11379, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %408 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %409 = %408.1;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %411 = @func_8509() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %412 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %413 = cast(meta[relay.Constant][19] /* ty=Tensor[(33, 4), uint8] */, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
  %414 = shape_of(%var_11379, dtype="int32") /* ty=Tensor[(2), int32] */;
  %415 = cast(%var_11379, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %417 = logical_or(%406, %407) /* ty=Tensor[(33, 4), bool] */;
  %418 = acos(%410) /* ty=Tensor[(7, 4, 9), float64] */;
  %419 = %411.1;
  %420 = %412.0;
  %421 = maximum(%415, %416) /* ty=Tensor[(33, 4), uint8] */;
  (%417, %418, %419, %420, %421)
}

def @func_7594(%var_7593: Tensor[(32), uint64]) -> (Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(8, 52), uint64], Tensor[(7, 4, 9), float64], Tensor[(20, 4), float64], Tensor[(7, 4, 9), float64]) {
  %436 = fn (%var_7582: Tensor[(32), uint64]) -> (Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(8, 52), uint64], Tensor[(7, 4, 9), float64], Tensor[(20, 4), float64], Tensor[(7, 4, 9), float64]) {
    %422 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %423 = cast(%var_7582, dtype="uint64") /* ty=Tensor[(32), uint64] */;
    %424 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 52), uint64] */, dtype="uint64") /* ty=Tensor[(8, 52), uint64] */;
    %425 = reshape(%423, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
    %426 = reshape(%424, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
    %427 = @func_6518(%425, %426) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
    %428 = cast(meta[relay.Constant][21] /* ty=Tensor[(20, 4), float64] */, dtype="float64") /* ty=Tensor[(20, 4), float64] */;
    %429 = reshape(%428, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
    %430 = @func_3388(%429) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
    %431 = @func_6435() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %432 = %422.0;
    %433 = %427.2;
    %434 = %430.1;
    %435 = %431.0;
    (%432, %433, %var_7582, meta[relay.Constant][20] /* ty=Tensor[(8, 52), uint64] */, %434, meta[relay.Constant][21] /* ty=Tensor[(20, 4), float64] */, %435)
  };
  %436(%var_7593) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(8, 52), uint64], Tensor[(7, 4, 9), float64], Tensor[(20, 4), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_3874() -> Tensor[(7, 4, 9), float32] {
  %445 = fn () -> Tensor[(7, 4, 9), float32] {
    %437 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %438 = %437.1;
    %439 = @func_3028() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
    %440 = %439.0;
    %441 = cast(%440, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %442 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%438, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%443, %444) /* ty=Tensor[(7, 4, 9), float32] */
  };
  %445() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_6115() -> (Tensor[(7, 4, 9), float64],) {
  %446 = @func_6027() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %447 = %446.0;
  (%447,)
}

def @func_10516(%var_10514: Tensor[(252), float32]) -> (Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(252), float32]) {
  @func_10513(%var_10514) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(252), float32]) */
}

def @func_15808(%var_15806: Tensor[(6, 11, 15), float32]) -> (Tensor[(6, 11, 15), float32],) {
  @func_15805(%var_15806) /* ty=(Tensor[(6, 11, 15), float32],) */
}

def @func_1458() -> (Tensor[(7, 4, 9), float64],) {
  %450 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %448 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
    %449 = tan(%448) /* ty=Tensor[(7, 4, 9), float64] */;
    (%449,)
  };
  %450() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_3533() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16]) {
  %455 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16]) {
    %451 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %452 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
    %453 = %451.0;
    %454 = %452.0;
    (%453, %454)
  };
  %455() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16]) */
}

def @func_5280(%var_5269: Tensor[(33, 4), uint8]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) {
  %456 = cast(%var_5269, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
  %457 = reshape(%456, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
  %458 = @func_3086(%457) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
  %459 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
  %460 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  %461 = %458.2;
  (%459, %460, %461, %var_5269)
}

def @func_3895() -> Tensor[(7, 4, 9), float64] {
  @func_2229() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_7954() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %471 = fn () -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
    %462 = @func_7882() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(252), float64]) */;
    %463 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %464 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %465 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
    %466 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
    %467 = @func_5369() /* ty=Tensor[(7, 4, 9), float64] */;
    %468 = %462.1;
    %469 = %463.0;
    %470 = %464.0;
    (%465, %466, %467, %468, %469, %470)
  };
  %471() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_8429() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %478 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %472 = @func_6435() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %473 = @func_5521() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %474 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %475 = %472.0;
    %476 = %473.1;
    %477 = %474.0;
    (%475, %476, %477)
  };
  %478() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_12549() -> (Tensor[(8, 8, 12), float64], Tensor[(7, 4, 9), float64]) {
  %482 = fn () -> (Tensor[(8, 8, 12), float64], Tensor[(7, 4, 9), float64]) {
    %479 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
    %480 = @func_11011() /* ty=Tensor[(8, 8, 12), float64] */;
    %481 = %479.0;
    (%480, %481)
  };
  %482() /* ty=(Tensor[(8, 8, 12), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_3977(%var_3932: Tensor[(10, 16, 6), float64]) -> (Tensor[(10, 16, 6), float64], Tensor[(10, 16, 6), float32]) {
  %483 = cast(%var_3932, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
  %484 = cast(%var_3932, dtype="float32") /* ty=Tensor[(10, 16, 6), float32] */;
  %485 = cosh(%483) /* ty=Tensor[(10, 16, 6), float64] */;
  %486 = erf(%484) /* ty=Tensor[(10, 16, 6), float32] */;
  (%485, %486)
}

def @func_17372() -> (Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64]) {
  @func_17370() /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64]) */
}

def @func_15698() -> (Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64]) {
  %487 = @func_7861() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) */;
  %488 = @func_5216() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
  %491 = %487.2;
  %492 = log2(%490) /* ty=Tensor[(5, 10, 5), float64] */;
  (%491, %492)
}

def @func_13514(%var_13500: Tensor[(16, 240), float64]) -> (Tensor[(16, 240), float64], Tensor[(16, 240), int8]) {
  %493 = @func_7814() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %494 = %493.1;
  %495 = cast(%494, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %496 = cast(%var_13500, dtype="float64") /* ty=Tensor[(16, 240), float64] */;
  %497 = cast(%var_13500, dtype="int8") /* ty=Tensor[(16, 240), int8] */;
  %498 = cast(%494, dtype="int8") /* ty=Tensor[(1, 240), int8] */;
  %499 = mod(%495, %496) /* ty=Tensor[(16, 240), float64] */;
  %500 = add(%497, %498) /* ty=Tensor[(16, 240), int8] */;
  (%499, %500)
}

def @func_3489() -> Tensor[(7, 4, 9), float64] {
  %502 = fn () -> Tensor[(7, 4, 9), float64] {
    %501 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %501.0
  };
  %502() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_5370() -> Tensor[(7, 4, 9), float64] {
  %504 = fn () -> Tensor[(7, 4, 9), float64] {
    %503 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %503.0
  };
  %504() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9776() -> Tensor[(7, 4, 9), float32] {
  %505 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %505.0
}

def @func_5022() -> Tensor[(7, 4, 9), float64] {
  %507 = fn () -> Tensor[(7, 4, 9), float64] {
    %506 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %506.0
  };
  %507() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_16292(%var_16290: Tensor[(5, 7, 16), float64]) -> (Tensor[(5, 7, 16), bool], Tensor[(7, 4, 9), float64], Tensor[(5, 7, 16), float32]) {
  @func_16289(%var_16290) /* ty=(Tensor[(5, 7, 16), bool], Tensor[(7, 4, 9), float64], Tensor[(5, 7, 16), float32]) */
}

def @func_15727() -> Tensor[(7, 4, 9), float64] {
  %508 = @func_7568() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %508.0
}

def @func_3897() -> Tensor[(7, 4, 9), float64] {
  @func_3895() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_14885() -> (Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), bool]) {
  @func_14883() /* ty=(Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), bool]) */
}

def @func_8484() -> Tensor[(1, 15, 16), float64] {
  @func_8482() /* ty=Tensor[(1, 15, 16), float64] */
}

def @func_6058() -> (Tensor[(7, 4, 9), float64],) {
  @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_4308() -> Tensor[(11, 13, 5), float64] {
  %509 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  exp(%509) /* ty=Tensor[(11, 13, 5), float64] */
}

def @func_3391(%var_3389: Tensor[(5, 1, 16), float64]) -> (Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) {
  @func_3388(%var_3389) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */
}

def @func_8012() -> Tensor[(7, 4, 9), uint16] {
  %510 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %510.0
}

def @func_15239() -> Tensor[(7, 4, 9), float64] {
  @func_15237() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_17437() -> (Tensor[(7, 4, 9), float32],) {
  @func_17435() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_17734() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %511 = @func_3028() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
  %512 = @func_6165() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) */;
  %513 = @func_8525() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %514 = %511.1;
  %515 = %512.0;
  %516 = %513.2;
  (%514, %515, %516)
}

def @func_8358(%var_8357: Tensor[(2304), int8]) -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], float64, Tensor[(2304), int8], Tensor[(7, 4, 9), float64]) {
  %527 = fn (%var_8336: Tensor[(2304), int8]) -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], float64, Tensor[(2304), int8], Tensor[(7, 4, 9), float64]) {
    %517 = cast(-0.760556f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %518 = cast(%var_8336, dtype="int8") /* ty=Tensor[(2304), int8] */;
    %519 = reshape(%517, newshape=[]) /* ty=float64 */;
    %520 = reshape(%518, newshape=[2304]) /* ty=Tensor[(2304), int8] */;
    %521 = @func_938(%519, %520) /* ty=(Tensor[(4, 1, 6), float64], Tensor[(4, 1, 6), float32], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */;
    %522 = @func_6884() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %523 = @func_5021() /* ty=Tensor[(7, 4, 9), float64] */;
    %524 = @func_4067() /* ty=Tensor[(5, 10, 5), bool] */;
    %525 = %521.4;
    %526 = %522.1;
    (%523, %524, %525, -0.760556f64 /* ty=float64 */, %var_8336, %526)
  };
  %527(%var_8357) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], float64, Tensor[(2304), int8], Tensor[(7, 4, 9), float64]) */
}

def @func_6239(%var_6206: Tensor[(7, 4, 9), float32]) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) {
  %528 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
  %529 = cast(%var_6206, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %534 = cast(meta[relay.Constant][24] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %535 = cast(meta[relay.Constant][24] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %536 = reshape(%534, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %537 = reshape(%535, newshape=[7, 11, 7]) /* ty=Tensor[(7, 11, 7), uint8] */;
  %538 = equal(%531, %532) /* ty=Tensor[(7, 4, 9), bool] */;
  %539 = %533.0;
  %540 = @func_320(%536, %537) /* ty=Tensor[(7, 11, 7), uint8] */;
  (%538, %539, %540, meta[relay.Constant][24] /* ty=Tensor[(539), uint8] */)
}

def @func_8969() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) {
  %541 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %542 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %543 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %544 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %545 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %546 = @func_7861() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) */;
  %547 = %541.0;
  %548 = @func_7343() /* ty=Tensor[(7, 4, 9), float64] */;
  %549 = %542.0;
  %550 = %543.2;
  %551 = %544.0;
  %552 = %545.0;
  %553 = %546.1;
  (%547, %548, %549, %550, %551, %552, %553)
}

def @func_15043() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(250), int64], Tensor[(250, 1), bool], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %554 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %555 = @func_12548() /* ty=(Tensor[(8, 8, 12), float64], Tensor[(7, 4, 9), float64]) */;
  %556 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %557 = @func_8428() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %558 = %556.0;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %560 = reshape(%559, newshape=[252]) /* ty=Tensor[(252), float64] */;
  %561 = @func_14494(%560) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(252), float64]) */;
  %562 = cast(meta[relay.Constant][25] /* ty=Tensor[(250, 1), bool] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
  %563 = cast(meta[relay.Constant][25] /* ty=Tensor[(250, 1), bool] */, dtype="bool") /* ty=Tensor[(250, 1), bool] */;
  %564 = reshape(%562, newshape=[250]) /* ty=Tensor[(250), bool] */;
  %565 = reshape(%563, newshape=[250]) /* ty=Tensor[(250), bool] */;
  %566 = @func_4985(%564, %565) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32], Tensor[(250), int64]) */;
  %567 = @func_7211() /* ty=Tensor[(7, 4, 9), float64] */;
  %568 = cast(%567, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %569 = reshape(%568, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %570 = @func_7383(%569) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
  %571 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %572 = %554.0;
  %573 = %555.1;
  %574 = %557.0;
  %575 = @func_10841() /* ty=Tensor[(7, 4, 9), float64] */;
  %576 = %561.1;
  %577 = %566.6;
  %578 = %570.0;
  %579 = %571.1;
  (%572, %573, %558, %574, %567, %575, %576, %577, meta[relay.Constant][25] /* ty=Tensor[(250, 1), bool] */, %578, %579)
}

def @func_3305() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_1549() -> (Tensor[(5, 10, 5), bool],) {
  %580 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %581 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 5), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %582 = logical_and(%580, %581) /* ty=Tensor[(5, 10, 5), bool] */;
  (%582,)
}

def @func_7541(%var_7540: Tensor[(1, 15, 16), float64]) -> Tensor[(?, 15, 16), uint32] {
  %589 = fn (%var_7517: Tensor[(1, 15, 16), float64]) -> Tensor[(?, 15, 16), uint32] {
    %583 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
    %584 = %583.1;
    %585 = cast(%var_7517, dtype="uint32") /* ty=Tensor[(1, 15, 16), uint32] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="uint32") /* ty=Tensor[(1, 15, 16), uint32] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%587, %588) /* ty=Tensor[(?, 15, 16), uint32] */
  };
  %589(%var_7540) /* ty=Tensor[(?, 15, 16), uint32] */
}

def @func_8066() -> (Tensor[(2304), int8],) {
  @func_8064() /* ty=(Tensor[(2304), int8],) */
}

def @func_3335() -> (Tensor[(7, 4, 9), float64],) {
  %592 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %590 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %591 = %590.0;
    (%591,)
  };
  %592() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_12373() -> (Tensor[(75), float32], Tensor[(7, 4, 9), float32]) {
  @func_12371() /* ty=(Tensor[(75), float32], Tensor[(7, 4, 9), float32]) */
}

def @func_12814() -> Tensor[(33, 4), float32] {
  %593 = @func_10258() /* ty=Tensor[(33, 4), float32] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(33, 4), float32] */;
  sigmoid(%594) /* ty=Tensor[(33, 4), float32] */
}

def @func_2271(%var_2270: Tensor[(240), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(2, 15, 13), float64], float64, Tensor[(1, 390), float64], Tensor[(240), float64]) {
  %606 = fn (%var_2266: Tensor[(240), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(2, 15, 13), float64], float64, Tensor[(1, 390), float64], Tensor[(240), float64]) {
    %595 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %596 = cast(-1.71345f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %597 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 390), float64] */, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
    %598 = cast(%var_2266, dtype="float64") /* ty=Tensor[(240), float64] */;
    %599 = reshape(%596, newshape=[]) /* ty=float64 */;
    %600 = reshape(%597, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float64] */;
    %601 = reshape(%598, newshape=[1, 240]) /* ty=Tensor[(1, 240), float64] */;
    %602 = @func_815(%599, %600, %601) /* ty=(Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */;
    %603 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
    %604 = %595.0;
    %605 = %602.0;
    (%603, %604, %605, -1.71345f64 /* ty=float64 */, meta[relay.Constant][27] /* ty=Tensor[(1, 390), float64] */, %var_2266)
  };
  %606(%var_2270) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(2, 15, 13), float64], float64, Tensor[(1, 390), float64], Tensor[(240), float64]) */
}

def @func_12154() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) {
  %607 = @func_3532() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16]) */;
  %608 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 84), float64] */, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %609 = reshape(%608, newshape=[1, 336]) /* ty=Tensor[(1, 336), float64] */;
  %610 = @func_7198(%609) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 336), int16]) */;
  %611 = cast(meta[relay.Constant][29] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %612 = cast(meta[relay.Constant][29] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %613 = reshape(%611, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %614 = reshape(%612, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %615 = @func_2527(%613, %614) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) */;
  %616 = %607.0;
  %617 = @func_9417() /* ty=Tensor[(7, 4, 9), uint16] */;
  %618 = %610.3;
  %619 = %615.1;
  (%616, %617, %618, meta[relay.Constant][28] /* ty=Tensor[(4, 84), float64] */, %619, meta[relay.Constant][29] /* ty=Tensor[(75), float32] */)
}

def @func_15901() -> (Tensor[(7, 4, 9), float64],) {
  @func_15899() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_11223() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %620 = @func_8428() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %621 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %622 = @func_7211() /* ty=Tensor[(7, 4, 9), float64] */;
  %623 = %620.1;
  %624 = %621.0;
  (%622, %623, %624)
}

def @func_9479(%var_9466: Tensor[(96, 1), uint16]) -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(2, 8, 6), uint16], Tensor[(96, 1), uint16], Tensor[(7, 4, 9), uint16], Tensor[(11, 13, 5), float64], Tensor[(900), float32]) {
  %625 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %626 = cast(%var_9466, dtype="uint16") /* ty=Tensor[(96, 1), uint16] */;
  %627 = cast(%var_9466, dtype="uint16") /* ty=Tensor[(96, 1), uint16] */;
  %628 = reshape(%626, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), uint16] */;
  %629 = reshape(%627, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), uint16] */;
  %630 = cast(meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %631 = reshape(%630, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %632 = @func_6428(%631) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) */;
  %633 = %625.4;
  %634 = @func_6596() /* ty=Tensor[(2304), int8] */;
  %635 = @func_4880(%628, %629) /* ty=Tensor[(2, 8, 6), uint16] */;
  %636 = @func_8012() /* ty=Tensor[(7, 4, 9), uint16] */;
  %637 = %632.1;
  (%633, %634, %635, %var_9466, %636, %637, meta[relay.Constant][30] /* ty=Tensor[(900), float32] */)
}

def @func_12586() -> (Tensor[(7, 4, 9), float32],) {
  %639 = fn () -> (Tensor[(7, 4, 9), float32],) {
    %638 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
    (%638,)
  };
  %639() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_15611() -> (Tensor[(7, 4, 9), float64],) {
  %640 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %641 = %640.1;
  (%641,)
}

def @func_6010() -> Tensor[(2304), int8] {
  @func_4510() /* ty=Tensor[(2304), int8] */
}

def @func_5598() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  @func_5596() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */
}

def @func_16968() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  @func_16966() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */
}

def @func_15315() -> (Tensor[(33, 4), float32],) {
  %643 = fn () -> (Tensor[(33, 4), float32],) {
    %642 = @func_10258() /* ty=Tensor[(33, 4), float32] */;
    (%642,)
  };
  %643() /* ty=(Tensor[(33, 4), float32],) */
}

def @func_1551() -> (Tensor[(5, 10, 5), bool],) {
  @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */
}

def @func_17370() -> (Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64]) {
  %644 = @func_13895() /* ty=Tensor[(33, 4), float32] */;
  %645 = cast(meta[relay.Constant][31] /* ty=Tensor[(33, 4), float32] */, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(2), int32] */;
  %647 = cast(%644, dtype="bool") /* ty=Tensor[(33, 4), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %649 = @func_12876() /* ty=(Tensor[(132), uint8], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) */;
  %650 = greater_equal(%647, %648) /* ty=Tensor[(33, 4), bool] */;
  %651 = %649.1;
  (%650, %651)
}

def @func_17540() -> (Tensor[(33, 4), bool],) {
  %652 = @func_17370() /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64]) */;
  %653 = %652.0;
  (%653,)
}

def @func_1828() -> Tensor[(7, 4, 9), float64] {
  %654 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %654.0
}

def @func_11225() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  @func_11223() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_6852() -> (Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) {
  %666 = fn () -> (Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) {
    %655 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
    %656 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
    %657 = cast(meta[relay.Constant][32] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %658 = reshape(%657, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
    %659 = @func_6428(%658) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) */;
    %660 = @func_5154() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) */;
    %661 = %655.2;
    %662 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
    %663 = %656.0;
    %664 = %659.0;
    %665 = %660.2;
    (%661, %662, %663, %664, meta[relay.Constant][32] /* ty=Tensor[(900), float32] */, %665)
  };
  %666() /* ty=(Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) */
}

def @func_9556() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_9554() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_10896() -> (Tensor[(5, 10, 5), bool], Tensor[(539), float32]) {
  @func_10894() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(539), float32]) */
}

def @func_16494() -> (Tensor[(7, 4, 9), float64], Tensor[(33, 4), float32]) {
  %671 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(33, 4), float32]) {
    %667 = @func_9554() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %668 = @func_14640() /* ty=(Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) */;
    %669 = %667.1;
    %670 = %668.0;
    (%669, %670)
  };
  %671() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(33, 4), float32]) */
}

def @func_4050(%var_4048: Tensor[(539), uint8], %var_4049: Tensor[(539), float64]) -> (Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) {
  @func_4046(%var_4048, %var_4049) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) */
}

def @func_13438() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) {
  %680 = fn () -> (Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) {
    %672 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %673 = cast(meta[relay.Constant][33] /* ty=Tensor[(539, 1), uint8] */, dtype="uint8") /* ty=Tensor[(539, 1), uint8] */;
    %674 = reshape(%673, newshape=[11, 49]) /* ty=Tensor[(11, 49), uint8] */;
    %675 = @func_5235(%674) /* ty=(Tensor[(2304), int8], Tensor[(7, 11, 7), uint8], Tensor[(11, 49), uint8], Tensor[(5, 10, 5), int8], Tensor[(250), bool]) */;
    %676 = @func_8553() /* ty=(Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) */;
    %677 = %672.0;
    %678 = %675.1;
    %679 = %676.1;
    (%677, %678, meta[relay.Constant][33] /* ty=Tensor[(539, 1), uint8] */, %679)
  };
  %680() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) */
}

def @func_13195() -> (Tensor[(14, 2, 3), float32], Tensor[(14, 2, 3), float32]) {
  @func_13193() /* ty=(Tensor[(14, 2, 3), float32], Tensor[(14, 2, 3), float32]) */
}

def @func_12094() -> Tensor[(390), float64] {
  %681 = @func_5216() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) */;
  %681.3
}

def @func_12267() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %682 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %683 = %682.0;
  %684 = @func_10174() /* ty=Tensor[(7, 4, 9), float32] */;
  (%683, %684)
}

def @func_13535() -> (Tensor[(7, 4, 9), float64],) {
  %685 = @func_7953() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %686 = %685.1;
  (%686,)
}

def @func_9482(%var_9480: Tensor[(96, 1), uint16]) -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(2, 8, 6), uint16], Tensor[(96, 1), uint16], Tensor[(7, 4, 9), uint16], Tensor[(11, 13, 5), float64], Tensor[(900), float32]) {
  @func_9479(%var_9480) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(2, 8, 6), uint16], Tensor[(96, 1), uint16], Tensor[(7, 4, 9), uint16], Tensor[(11, 13, 5), float64], Tensor[(900), float32]) */
}

def @func_7882() -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(252), float64]) {
  %687 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %688 = cast(meta[relay.Constant][34] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %689 = reshape(%688, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %690 = @func_7383(%689) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
  %691 = %687.0;
  %692 = %690.1;
  (%691, %692, meta[relay.Constant][34] /* ty=Tensor[(252), float64] */)
}

def @func_15899() -> (Tensor[(7, 4, 9), float64],) {
  %693 = @func_14852() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(390), float64]) */;
  %694 = %693.0;
  (%694,)
}

def @func_16643() -> Tensor[(7, 4, 9), float64] {
  @func_16641() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9031() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %699 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %695 = @func_8553() /* ty=(Tensor[(2304), float64], Tensor[(7, 4, 9), float64]) */;
    %696 = @func_8525() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %697 = %695.1;
    %698 = %696.1;
    (%697, %698)
  };
  %699() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_15426() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) {
  @func_15424() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) */
}

def @func_17182() -> (Tensor[(7, 11, 7), uint8],) {
  %702 = fn () -> (Tensor[(7, 11, 7), uint8],) {
    %700 = @func_6165() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) */;
    %701 = %700.1;
    (%701,)
  };
  %702() /* ty=(Tensor[(7, 11, 7), uint8],) */
}

def @func_12371() -> (Tensor[(75), float32], Tensor[(7, 4, 9), float32]) {
  %703 = @func_12154() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(?, 336), int16], Tensor[(4, 84), float64], Tensor[(5, 10, 5), bool], Tensor[(75), float32]) */;
  %704 = %703.5;
  %705 = @func_11814() /* ty=Tensor[(7, 4, 9), float32] */;
  (%704, %705)
}

def @func_15341() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %712 = fn () -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %706 = @func_8588() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
    %707 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %708 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %709 = %706.0;
    %710 = %707.0;
    %711 = %708.0;
    (%709, %710, %711)
  };
  %712() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_17882() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %713 = @func_7814() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(1, 240), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %714 = @func_14139() /* ty=Tensor[(7, 4, 9), float64] */;
  %715 = %713.5;
  (%714, %715)
}

def @func_4672() -> (Tensor[(7, 4, 9), bool],) {
  @func_4670() /* ty=(Tensor[(7, 4, 9), bool],) */
}

def @func_2068() -> (Tensor[(7, 4, 9), float64],) {
  %716 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  (%716,)
}

def @func_17700() -> (Tensor[(7, 4, 9), float32],) {
  %717 = @func_11814() /* ty=Tensor[(7, 4, 9), float32] */;
  (%717,)
}

def @func_6884() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %718 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %719 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
  %720 = %718.1;
  (%719, %720)
}

def @func_5660() -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %731 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %721 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %722 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
    %723 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %724 = reshape(%723, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
    %725 = @func_3388(%724) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
    %726 = %721.0;
    %727 = %722.4;
    %728 = %725.0;
    %729 = @func_2427() /* ty=Tensor[(7, 4, 9), float64] */;
    %730 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
    (%726, %727, %728, meta[relay.Constant][35] /* ty=Tensor[(80), float64] */, %729, %730)
  };
  %731() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_7211() -> Tensor[(7, 4, 9), float64] {
  @func_1828() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_10559() -> Tensor[(7, 4, 9), float64] {
  %732 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %732.0
}

def @func_10279(%var_10278: Tensor[(539), uint8]) -> (Tensor[(2304), int8], Tensor[(539), int16], Tensor[(539), uint8]) {
  %740 = fn (%var_10271: Tensor[(539), uint8]) -> (Tensor[(2304), int8], Tensor[(539), int16], Tensor[(539), uint8]) {
    %733 = cast(%var_10271, dtype="uint8") /* ty=Tensor[(539), uint8] */;
    %734 = cast(%var_10271, dtype="float64") /* ty=Tensor[(539), float64] */;
    %735 = reshape(%733, newshape=[539]) /* ty=Tensor[(539), uint8] */;
    %736 = reshape(%734, newshape=[539]) /* ty=Tensor[(539), float64] */;
    %737 = @func_4046(%735, %736) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) */;
    %738 = @func_4510() /* ty=Tensor[(2304), int8] */;
    %739 = %737.3;
    (%738, %739, %var_10271)
  };
  %740(%var_10278) /* ty=(Tensor[(2304), int8], Tensor[(539), int16], Tensor[(539), uint8]) */
}

def @func_10767() -> (Tensor[(2304), int8],) {
  @func_10765() /* ty=(Tensor[(2304), int8],) */
}

def @func_4109(%var_4108: Tensor[(7, 4, 9), float64]) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) {
  %749 = fn (%var_4093: Tensor[(7, 4, 9), float64]) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) {
    %741 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
    %742 = cast(%var_4093, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
    %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%741, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %746 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %747 = logical_or(%744, %745) /* ty=Tensor[(7, 4, 9), bool] */;
    %748 = %746.0;
    (%747, %748)
  };
  %749(%var_4108) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) */
}

def @func_7385(%var_7384: Tensor[(7, 4, 9), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) {
  %759 = fn (%var_7373: Tensor[(7, 4, 9), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) {
    %750 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %751 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
    %752 = %751.1;
    %753 = cast(%var_7373, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
    %755 = cast(%752, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %757 = %750.0;
    %758 = subtract(%755, %756) /* ty=Tensor[(7, 4, 9), float32] */;
    (%757, %758)
  };
  %759(%var_7384) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */
}

def @func_11815() -> Tensor[(7, 4, 9), float32] {
  %761 = fn () -> Tensor[(7, 4, 9), float32] {
    %760 = @func_6956() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
    %760.1
  };
  %761() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_7344() -> Tensor[(7, 4, 9), float64] {
  %763 = fn () -> Tensor[(7, 4, 9), float64] {
    %762 = @func_4368() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
    %762.1
  };
  %763() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_13477() -> (Tensor[(2304), int8], Tensor[(7, 4, 9), float32], Tensor[(5, 10, 5), bool]) {
  %770 = fn () -> (Tensor[(2304), int8], Tensor[(7, 4, 9), float32], Tensor[(5, 10, 5), bool]) {
    %764 = @func_8064() /* ty=(Tensor[(2304), int8],) */;
    %765 = @func_5596() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
    %766 = @func_8969() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) */;
    %767 = %764.0;
    %768 = %765.0;
    %769 = %766.5;
    (%767, %768, %769)
  };
  %770() /* ty=(Tensor[(2304), int8], Tensor[(7, 4, 9), float32], Tensor[(5, 10, 5), bool]) */
}

def @func_10175() -> Tensor[(7, 4, 9), float32] {
  %771 = fn () -> Tensor[(7, 4, 9), float32] {
    @func_2764() /* ty=Tensor[(7, 4, 9), float32] */
  };
  %771() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_16141() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %772 = @func_8588() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
  %773 = @func_2764() /* ty=Tensor[(7, 4, 9), float32] */;
  %774 = %772.1;
  (%773, %774)
}

def @func_8971() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) {
  @func_8969() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), uint16], Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), bool]) */
}

def @func_9728() -> (Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  @func_9726() /* ty=(Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_13747(%var_13746: Tensor[(250), bool]) -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), uint8], Tensor[(250), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(2304), int8], Tensor[(1, 96), uint16]) {
  %795 = fn (%var_13682: Tensor[(250), bool]) -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), uint8], Tensor[(250), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(2304), int8], Tensor[(1, 96), uint16]) {
    %775 = @func_6956() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
    %776 = cast(%var_13682, dtype="bool") /* ty=Tensor[(250), bool] */;
    %777 = cast(%var_13682, dtype="bool") /* ty=Tensor[(250), bool] */;
    %778 = reshape(%776, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
    %779 = reshape(%777, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), bool] */;
    %780 = @func_2364(%778, %779) /* ty=(Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) */;
    %781 = cast(%var_13682, dtype="float64") /* ty=Tensor[(250), float64] */;
    %782 = %775.0;
    %783 = cast(%782, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
    %784 = reshape(%783, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
    %785 = @func_7383(%784) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
    %786 = @func_12801() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) */;
    %787 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 96), uint16] */, dtype="uint16") /* ty=Tensor[(1, 96), uint16] */;
    %788 = reshape(%787, newshape=[96, 1]) /* ty=Tensor[(96, 1), uint16] */;
    %789 = @func_9479(%788) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(2, 8, 6), uint16], Tensor[(96, 1), uint16], Tensor[(7, 4, 9), uint16], Tensor[(11, 13, 5), float64], Tensor[(900), float32]) */;
    %790 = %780.1;
    %791 = cos(%781) /* ty=Tensor[(250), float64] */;
    %792 = %785.1;
    %793 = %786.1;
    %794 = %789.1;
    (%782, %790, %791, %792, %793, %794, meta[relay.Constant][36] /* ty=Tensor[(1, 96), uint16] */)
  };
  %795(%var_13746) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), uint8], Tensor[(250), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(2304), int8], Tensor[(1, 96), uint16]) */
}

def @func_11517() -> (Tensor[(16, 16, 9), uint8],) {
  %796 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %797 = %796.2;
  (%797,)
}

def @func_17564(%var_17562: Tensor[(11, 14, 13), int8], %var_17563: Tensor[(11, 14, 13), int8]) -> (Tensor[(11, 14, 13), int8],) {
  %803 = fn (%var_17543: Tensor[(11, 14, 13), int8], %var_17544: Tensor[(11, 14, 13), int8]) -> (Tensor[(11, 14, 13), int8],) {
    %798 = cast(%var_17544, dtype="int8") /* ty=Tensor[(11, 14, 13), int8] */;
    %799 = shape_of(%var_17543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %800 = cast(%var_17543, dtype="int8") /* ty=Tensor[(11, 14, 13), int8] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %802 = multiply(%800, %801) /* ty=Tensor[(11, 14, 13), int8] */;
    (%802,)
  };
  %803(%var_17562, %var_17563) /* ty=(Tensor[(11, 14, 13), int8],) */
}

def @func_819(%var_816: float64, %var_817: Tensor[(2, 15, 13), float64], %var_818: Tensor[(1, 240), float64]) -> (Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) {
  %810 = fn (%var_795: float64, %var_796: Tensor[(2, 15, 13), float64], %var_801: Tensor[(1, 240), float64]) -> (Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) {
    %804 = cast(%var_795, dtype="float64") /* ty=float64 */;
    %805 = cast(%var_796, dtype="float64") /* ty=Tensor[(2, 15, 13), float64] */;
    %806 = cast(%var_801, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
    %807 = reshape(%806, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
    %808 = floor_mod(%804, %805) /* ty=Tensor[(2, 15, 13), float64] */;
    %809 = @func_298(%807) /* ty=Tensor[(1, 15, 16), float64] */;
    (%808, %809, %var_801)
  };
  %810(%var_816, %var_817, %var_818) /* ty=(Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */
}

def @func_14599(%var_14598: Tensor[(336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(4032), bool], Tensor[(33, 4), uint64]) {
  %837 = fn (%var_14547: Tensor[(336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(4032), bool], Tensor[(33, 4), uint64]) {
    %811 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %812 = cast(%var_14547, dtype="float64") /* ty=Tensor[(336), float64] */;
    %813 = cast(meta[relay.Constant][38] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %814 = cast(meta[relay.Constant][37] /* ty=Tensor[(4032), float64] */, dtype="float64") /* ty=Tensor[(4032), float64] */;
    %815 = reshape(%812, newshape=[8, 42]) /* ty=Tensor[(8, 42), float64] */;
    %816 = reshape(%813, newshape=[132]) /* ty=Tensor[(132), uint8] */;
    %817 = reshape(%814, newshape=[4032]) /* ty=Tensor[(4032), float64] */;
    %818 = @func_11152(%815, %816, %817) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(8, 42), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8], Tensor[(2304), int8], Tensor[(4032), int32], Tensor[(4032), float64], Tensor[(4032), int8]) */;
    %819 = %818.9;
    %820 = cast(%819, dtype="float64") /* ty=Tensor[(4032), float64] */;
    %821 = log10(%820) /* ty=Tensor[(4032), float64] */;
    %822 = cast(%819, dtype="bool") /* ty=Tensor[(4032), bool] */;
    %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(1), int32] */;
    %824 = cast(%821, dtype="bool") /* ty=Tensor[(4032), bool] */;
    %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?), bool] */;
    %826 = cast(meta[relay.Constant][38] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %827 = reshape(%826, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint8] */;
    %828 = @func_11470(%827) /* ty=(Tensor[(33, 4), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8]) */;
    %829 = %828.4;
    %830 = cast(meta[relay.Constant][38] /* ty=Tensor[(132), uint8] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
    %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(2), int32] */;
    %832 = cast(%829, dtype="uint64") /* ty=Tensor[(33, 4), uint64] */;
    %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %834 = %811.0;
    %835 = logical_and(%824, %825) /* ty=Tensor[(4032), bool] */;
    %836 = multiply(%832, %833) /* ty=Tensor[(33, 4), uint64] */;
    (%834, %var_14547, meta[relay.Constant][37] /* ty=Tensor[(4032), float64] */, %835, %836)
  };
  %837(%var_14598) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(4032), bool], Tensor[(33, 4), uint64]) */
}

def @func_16641() -> Tensor[(7, 4, 9), float64] {
  @func_9632() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9192() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %838 = @func_8525() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %839 = @func_7306() /* ty=Tensor[(7, 4, 9), float64] */;
  %840 = %838.3;
  (%839, %840)
}

def @func_3584() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %841 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %842 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %843 = %841.0;
  %844 = %842.0;
  (%843, %844)
}

def @func_4494(%var_4483: Tensor[(240), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) {
  %845 = cast(%var_4483, dtype="float64") /* ty=Tensor[(240), float64] */;
  %846 = reshape(%845, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %847 = cast(meta[relay.Constant][39] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
  %848 = cast(meta[relay.Constant][39] /* ty=Tensor[(539), uint8] */, dtype="float64") /* ty=Tensor[(539), float64] */;
  %849 = reshape(%847, newshape=[539]) /* ty=Tensor[(539), uint8] */;
  %850 = reshape(%848, newshape=[539]) /* ty=Tensor[(539), float64] */;
  %851 = @func_4046(%849, %850) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) */;
  %852 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  %853 = @func_298(%846) /* ty=Tensor[(1, 15, 16), float64] */;
  %854 = %851.1;
  (%852, %853, %var_4483, %854, meta[relay.Constant][39] /* ty=Tensor[(539), uint8] */)
}

def @func_5218() -> (Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) {
  @func_5216() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) */
}

def @func_14853() -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(390), float64]) {
  %859 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(390), float64]) {
    %855 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %856 = %855.0;
    %857 = @func_6010() /* ty=Tensor[(2304), int8] */;
    %858 = @func_12094() /* ty=Tensor[(390), float64] */;
    (%856, %857, %858)
  };
  %859() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(390), float64]) */
}

def @func_17736() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_17734() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_6435() -> (Tensor[(7, 4, 9), float64],) {
  %860 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
  (%860,)
}

def @func_7703() -> Tensor[(7, 4, 9), bool] {
  @func_7701() /* ty=Tensor[(7, 4, 9), bool] */
}

def @func_14724(%var_14721: Tensor[(6, 42), float64], %var_14722: Tensor[(6, 42), float64], %var_14723: Tensor[(6, 42), float64]) -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(6, 42), bool], Tensor[(6, 42), float64], Tensor[(7, 4, 9), float64]) {
  @func_14719(%var_14721, %var_14722, %var_14723) /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(6, 42), bool], Tensor[(6, 42), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_323(%var_321: Tensor[(7, 11, 7), uint8], %var_322: Tensor[(7, 11, 7), uint8]) -> Tensor[(7, 11, 7), uint8] {
  %865 = fn (%var_313: Tensor[(7, 11, 7), uint8], %var_314: Tensor[(7, 11, 7), uint8]) -> Tensor[(7, 11, 7), uint8] {
    %861 = cast(%var_314, dtype="uint8") /* ty=Tensor[(7, 11, 7), uint8] */;
    %862 = shape_of(%var_313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(%var_313, dtype="uint8") /* ty=Tensor[(7, 11, 7), uint8] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%863, %864) /* ty=Tensor[(7, 11, 7), uint8] */
  };
  %865(%var_321, %var_322) /* ty=Tensor[(7, 11, 7), uint8] */
}

def @func_5596() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %866 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %867 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
  %868 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %869 = %866.0;
  (%867, %868, %869)
}

def @func_12477() -> Tensor[(7, 4, 9), float64] {
  %870 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %870.0
}

def @func_3348() -> (Tensor[(7, 4, 9), float32],) {
  @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_8278() -> (Tensor[(7, 4, 9), float64],) {
  %872 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %871 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
    (%871,)
  };
  %872() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_4989(%var_4987: Tensor[(250), bool], %var_4988: Tensor[(250), bool]) -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32], Tensor[(250), int64]) {
  @func_4985(%var_4987, %var_4988) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32], Tensor[(250), int64]) */
}

def @func_2053() -> Tensor[(7, 4, 9), float32] {
  @func_2051() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_6165() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) {
  %873 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %874 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 120), float64] */, dtype="float64") /* ty=Tensor[(2, 120), float64] */;
  %875 = reshape(%874, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %876 = @func_4494(%875) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
  %877 = %873.0;
  %878 = %876.3;
  (%877, %878, meta[relay.Constant][40] /* ty=Tensor[(2, 120), float64] */)
}

def @func_7701() -> Tensor[(7, 4, 9), bool] {
  %879 = @func_4670() /* ty=(Tensor[(7, 4, 9), bool],) */;
  %879.0
}

def @func_11627() -> (Tensor[(7, 11, 7), uint8], Tensor[(7, 4, 9), float64]) {
  %884 = fn () -> (Tensor[(7, 11, 7), uint8], Tensor[(7, 4, 9), float64]) {
    %880 = @func_6165() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(2, 120), float64]) */;
    %881 = @func_11284() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %882 = %880.1;
    %883 = %881.0;
    (%882, %883)
  };
  %884() /* ty=(Tensor[(7, 11, 7), uint8], Tensor[(7, 4, 9), float64]) */
}

def @func_6056() -> (Tensor[(7, 4, 9), float64],) {
  %885 = @func_5021() /* ty=Tensor[(7, 4, 9), float64] */;
  (%885,)
}

def @func_16165() -> Tensor[(132), uint8] {
  %886 = @func_15151() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(132), uint8]) */;
  %886.2
}

def @func_9417() -> Tensor[(7, 4, 9), uint16] {
  %887 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
  %887.0
}

def @func_10432() -> Tensor[(7, 4, 9), float64] {
  @func_10430() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_6117() -> (Tensor[(7, 4, 9), float64],) {
  @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_16439() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
  %891 = fn () -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
    %888 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
    %889 = @func_8012() /* ty=Tensor[(7, 4, 9), uint16] */;
    %890 = %888.0;
    (%889, %890)
  };
  %891() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */
}

def @func_15237() -> Tensor[(7, 4, 9), float64] {
  %892 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %892.0
}

def @func_15424() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) {
  %893 = @func_14651() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %894 = @func_14651() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %895 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
  %896 = @func_10765() /* ty=(Tensor[(2304), int8],) */;
  %897 = %893.0;
  %898 = %894.1;
  %899 = %895.2;
  %900 = @func_14741() /* ty=Tensor[(7, 4, 9), float64] */;
  %901 = %896.0;
  (%897, %898, %899, %900, %901)
}

def @func_16909() -> (Tensor[(5, 10, 5), float64],) {
  @func_16907() /* ty=(Tensor[(5, 10, 5), float64],) */
}

def @func_16718() -> (Tensor[(80), float64],) {
  %904 = fn () -> (Tensor[(80), float64],) {
    %902 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %903 = %902.3;
    (%903,)
  };
  %904() /* ty=(Tensor[(80), float64],) */
}

def @func_1984() -> Tensor[(7, 4, 9), float32] {
  @func_1982() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_11285() -> (Tensor[(7, 4, 9), float64],) {
  %906 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %905 = @func_7343() /* ty=Tensor[(7, 4, 9), float64] */;
    (%905,)
  };
  %906() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_10843() -> Tensor[(7, 4, 9), float64] {
  @func_10841() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_10357(%var_10353: Tensor[(15, 12, 12), float32], %var_10354: Tensor[(15, 12, 12), float32], %var_10355: Tensor[(15, 12, 12), bool], %var_10356: Tensor[(75), float32]) -> (Tensor[(15, 12, 12), uint32], Tensor[(240), float64], Tensor[(80), float64], Tensor[(75), float32], Tensor[(7, 4, 9), float64]) {
  %924 = fn (%var_10319: Tensor[(15, 12, 12), float32], %var_10320: Tensor[(15, 12, 12), float32], %var_10326: Tensor[(15, 12, 12), bool], %var_10337: Tensor[(75), float32]) -> (Tensor[(15, 12, 12), uint32], Tensor[(240), float64], Tensor[(80), float64], Tensor[(75), float32], Tensor[(7, 4, 9), float64]) {
    %907 = cast(%var_10320, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
    %908 = shape_of(%var_10319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %909 = cast(%var_10319, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
    %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %911 = greater(%909, %910) /* ty=Tensor[(15, 12, 12), bool] */;
    %912 = cast(%var_10326, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
    %913 = shape_of(%911, dtype="int32") /* ty=Tensor[(3), int32] */;
    %914 = cast(%911, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
    %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %916 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
    %917 = cast(%var_10337, dtype="float32") /* ty=Tensor[(75), float32] */;
    %918 = reshape(%917, newshape=[75]) /* ty=Tensor[(75), float32] */;
    %919 = @func_3762(%918) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 1, 16), float64], Tensor[(80), float64]) */;
    %920 = bitwise_or(%914, %915) /* ty=Tensor[(15, 12, 12), uint32] */;
    %921 = %916.2;
    %922 = %919.7;
    %923 = @func_6641() /* ty=Tensor[(7, 4, 9), float64] */;
    (%920, %921, %922, %var_10337, %923)
  };
  %924(%var_10353, %var_10354, %var_10355, %var_10356) /* ty=(Tensor[(15, 12, 12), uint32], Tensor[(240), float64], Tensor[(80), float64], Tensor[(75), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_5740() -> (Tensor[(5, 10, 5), bool],) {
  %927 = fn () -> (Tensor[(5, 10, 5), bool],) {
    %925 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %926 = %925.0;
    (%926,)
  };
  %927() /* ty=(Tensor[(5, 10, 5), bool],) */
}

def @func_17509() -> Tensor[(7, 4, 9), float64] {
  @func_17507() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_17291() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %932 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
    %928 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %929 = @func_11223() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
    %930 = %928.0;
    %931 = %929.2;
    (%930, %931)
  };
  %932() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_8526() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %943 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %933 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %934 = @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */;
    %935 = %934.0;
    %936 = cast(%935, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
    %937 = reshape(%936, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
    %938 = @func_4107(%937) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) */;
    %939 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %940 = %933.0;
    %941 = %938.1;
    %942 = %939.0;
    (%940, %935, %941, %942)
  };
  %943() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_14446() -> (Tensor[(7, 4, 9), float64],) {
  %944 = @func_10317() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) */;
  %945 = %944.0;
  (%945,)
}

def @func_15805(%var_15785: Tensor[(6, 11, 15), float32]) -> (Tensor[(6, 11, 15), float32],) {
  %946 = cast(%var_15785, dtype="float32") /* ty=Tensor[(6, 11, 15), float32] */;
  %947 = acosh(%946) /* ty=Tensor[(6, 11, 15), float32] */;
  (%947,)
}

def @func_6521(%var_6519: Tensor[(1, 16, 2), uint64], %var_6520: Tensor[(13, 16, 2), uint64]) -> (Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) {
  %955 = fn (%var_6501: Tensor[(1, 16, 2), uint64], %var_6502: Tensor[(13, 16, 2), uint64]) -> (Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) {
    %948 = cast(%var_6501, dtype="uint64") /* ty=Tensor[(1, 16, 2), uint64] */;
    %949 = cast(%var_6502, dtype="uint64") /* ty=Tensor[(13, 16, 2), uint64] */;
    %950 = cast(meta[relay.Constant][41] /* ty=Tensor[(120, 2), float64] */, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
    %951 = reshape(%950, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %952 = @func_4494(%951) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */;
    %953 = bitwise_and(%948, %949) /* ty=Tensor[(13, 16, 2), uint64] */;
    %954 = %952.1;
    (%953, %954, meta[relay.Constant][41] /* ty=Tensor[(120, 2), float64] */)
  };
  %955(%var_6519, %var_6520) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */
}

def @func_2367(%var_2365: Tensor[(5, 10, 5), bool], %var_2366: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) {
  %968 = fn (%var_2332: Tensor[(5, 10, 5), bool], %var_2346: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) {
    %956 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %957 = %956.0;
    %958 = cast(%var_2332, dtype="int8") /* ty=Tensor[(5, 10, 5), int8] */;
    %959 = shape_of(%957, dtype="int32") /* ty=Tensor[(3), int32] */;
    %960 = cast(%957, dtype="int8") /* ty=Tensor[(5, 10, 5), int8] */;
    %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %962 = cast(%var_2346, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
    %963 = shape_of(%var_2332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %964 = cast(%var_2332, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
    %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %966 = add(%960, %961) /* ty=Tensor[(5, 10, 5), int8] */;
    %967 = maximum(%964, %965) /* ty=Tensor[(5, 10, 5), uint8] */;
    (%966, %967)
  };
  %968(%var_2365, %var_2366) /* ty=(Tensor[(5, 10, 5), int8], Tensor[(5, 10, 5), uint8]) */
}

def @func_6437() -> (Tensor[(7, 4, 9), float64],) {
  @func_6435() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_6886() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_6884() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_7102() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  @func_7100() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_7569() -> (Tensor[(7, 4, 9), float64],) {
  %970 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %969 = @func_2427() /* ty=Tensor[(7, 4, 9), float64] */;
    (%969,)
  };
  %970() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_5216() -> (Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) {
  %971 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %972 = cast(-1.20043f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %973 = cast(meta[relay.Constant][42] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %974 = cast(meta[relay.Constant][43] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %975 = reshape(%972, newshape=[]) /* ty=float64 */;
  %976 = reshape(%973, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), float64] */;
  %977 = reshape(%974, newshape=[1, 240]) /* ty=Tensor[(1, 240), float64] */;
  %978 = @func_815(%975, %976, %977) /* ty=(Tensor[(2, 15, 13), float64], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */;
  %979 = %971.0;
  %980 = %978.2;
  (%979, %980, -1.20043f64 /* ty=float64 */, meta[relay.Constant][42] /* ty=Tensor[(390), float64] */, meta[relay.Constant][43] /* ty=Tensor[(240), float64] */)
}

def @func_12911() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %985 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %981 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
    %982 = @func_11284() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %983 = %981.1;
    %984 = %982.0;
    (%983, %984)
  };
  %985() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_6339() -> (Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) {
  @func_6337() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) */
}

def @func_13389() -> (Tensor[(7, 4, 9), float64], Tensor[(390), float64]) {
  @func_13387() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(390), float64]) */
}

def @func_13080(%var_13078: Tensor[(5, 10, 5), float32]) -> (Tensor[(1, 15, 16), float64], Tensor[(2304), int8], Tensor[(5, 10, 5), uint8]) {
  @func_13077(%var_13078) /* ty=(Tensor[(1, 15, 16), float64], Tensor[(2304), int8], Tensor[(5, 10, 5), uint8]) */
}

def @func_4296() -> (Tensor[(7, 4, 9), float32],) {
  %989 = fn () -> (Tensor[(7, 4, 9), float32],) {
    %986 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
    %987 = cast(%986, dtype="float32") /* ty=Tensor[(7, 4, 9), float32] */;
    %988 = log2(%987) /* ty=Tensor[(7, 4, 9), float32] */;
    (%988,)
  };
  %989() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_12802() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) {
  %995 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) {
    %990 = @func_6851() /* ty=(Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) */;
    %991 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
    %992 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
    %993 = %990.5;
    %994 = %991.1;
    (%992, %993, %994)
  };
  %995() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) */
}

def @func_5156() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) {
  @func_5154() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) */
}

def @func_6957() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %1000 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
    %996 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %997 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
    %998 = %996.0;
    %999 = %997.0;
    (%998, %999)
  };
  %1000() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_8571() -> (Tensor[(11, 13, 5), float64],) {
  %1001 = @func_4308() /* ty=Tensor[(11, 13, 5), float64] */;
  (%1001,)
}

def @func_2618() -> Tensor[(7, 4, 9), float64] {
  %1002 = fn () -> Tensor[(7, 4, 9), float64] {
    @func_2229() /* ty=Tensor[(7, 4, 9), float64] */
  };
  %1002() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_15944() -> (Tensor[(7, 4, 9), uint16],) {
  %1005 = fn () -> (Tensor[(7, 4, 9), uint16],) {
    %1003 = @func_11736() /* ty=(Tensor[(7, 4, 9), uint16],) */;
    %1004 = %1003.0;
    (%1004,)
  };
  %1005() /* ty=(Tensor[(7, 4, 9), uint16],) */
}

def @func_942(%var_940: float64, %var_941: Tensor[(2304), int8]) -> (Tensor[(4, 1, 6), float64], Tensor[(4, 1, 6), float32], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) {
  @func_938(%var_940, %var_941) /* ty=(Tensor[(4, 1, 6), float64], Tensor[(4, 1, 6), float32], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8], Tensor[(1, 15, 16), float64], Tensor[(1, 240), float64]) */
}

def @func_13896() -> Tensor[(33, 4), float32] {
  %1006 = fn () -> Tensor[(33, 4), float32] {
    @func_12814() /* ty=Tensor[(33, 4), float32] */
  };
  %1006() /* ty=Tensor[(33, 4), float32] */
}

def @func_8672() -> (Tensor[(5, 10, 5), float64],) {
  %1011 = fn () -> (Tensor[(5, 10, 5), float64],) {
    %1007 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1008 = %1007.0;
    %1009 = cast(%1008, dtype="float64") /* ty=Tensor[(5, 10, 5), float64] */;
    %1010 = log(%1009) /* ty=Tensor[(5, 10, 5), float64] */;
    (%1010,)
  };
  %1011() /* ty=(Tensor[(5, 10, 5), float64],) */
}

def @func_16289(%var_16247: Tensor[(5, 7, 16), float64]) -> (Tensor[(5, 7, 16), bool], Tensor[(7, 4, 9), float64], Tensor[(5, 7, 16), float32]) {
  %1012 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1013 = %1012.2;
  %1014 = cast(%1013, dtype="bool") /* ty=Tensor[(5, 1, 16), bool] */;
  %1015 = cast(%var_16247, dtype="bool") /* ty=Tensor[(5, 7, 16), bool] */;
  %1016 = @func_14640() /* ty=(Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) */;
  %1017 = cast(%var_16247, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
  %1018 = cast(%1013, dtype="float32") /* ty=Tensor[(5, 1, 16), float32] */;
  %1019 = not_equal(%1014, %1015) /* ty=Tensor[(5, 7, 16), bool] */;
  %1020 = %1016.1;
  %1021 = mod(%1017, %1018) /* ty=Tensor[(5, 7, 16), float32] */;
  (%1019, %1020, %1021)
}

def @func_3632() -> (Tensor[(7, 4, 9), float64],) {
  %1022 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1023 = %1022.0;
  (%1023,)
}

def @func_14433() -> (Tensor[(2304), int8], Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float64]) {
  @func_14431() /* ty=(Tensor[(2304), int8], Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_14651() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1024 = @func_3303() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1025 = @func_5154() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8], Tensor[(7, 4, 9), float64]) */;
  %1026 = @func_10746() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */;
  %1027 = %1024.0;
  %1028 = %1025.1;
  %1029 = %1026.0;
  (%1027, %1028, %1029)
}

def @func_5928() -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) {
  %1035 = fn () -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) {
    %1030 = cast(meta[relay.Constant][44] /* ty=Tensor[(33, 4), uint8] */, dtype="uint8") /* ty=Tensor[(33, 4), uint8] */;
    %1031 = reshape(%1030, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
    %1032 = @func_3086(%1031) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
    %1033 = @func_4308() /* ty=Tensor[(11, 13, 5), float64] */;
    %1034 = %1032.2;
    (%1033, %1034, meta[relay.Constant][44] /* ty=Tensor[(33, 4), uint8] */)
  };
  %1035() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */
}

def @func_5175() -> (Tensor[(7, 4, 9), uint16],) {
  %1038 = fn () -> (Tensor[(7, 4, 9), uint16],) {
    %1036 = @func_1931() /* ty=(Tensor[(7, 4, 9), uint16],) */;
    %1037 = %1036.0;
    (%1037,)
  };
  %1038() /* ty=(Tensor[(7, 4, 9), uint16],) */
}

def @func_8573() -> (Tensor[(11, 13, 5), float64],) {
  @func_8571() /* ty=(Tensor[(11, 13, 5), float64],) */
}

def @func_15855() -> (Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8], Tensor[(132), uint8]) {
  @func_15853() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(33, 4), uint8], Tensor[(132), uint8]) */
}

def @func_14140() -> Tensor[(7, 4, 9), float64] {
  %1039 = fn () -> Tensor[(7, 4, 9), float64] {
    @func_2427() /* ty=Tensor[(7, 4, 9), float64] */
  };
  %1039() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_4068() -> Tensor[(5, 10, 5), bool] {
  %1041 = fn () -> Tensor[(5, 10, 5), bool] {
    %1040 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1040.0
  };
  %1041() /* ty=Tensor[(5, 10, 5), bool] */
}

def @func_9056() -> Tensor[(7, 4, 9), float32] {
  %1043 = fn () -> Tensor[(7, 4, 9), float32] {
    %1042 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
    %1042.0
  };
  %1043() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_4827() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) {
  %1063 = fn () -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) {
    %1044 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %1045 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
    %1046 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
    %1047 = %1046.4;
    %1048 = cast(%1047, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    %1049 = tan(%1048) /* ty=Tensor[(1, 15, 16), float64] */;
    %1050 = cast(%1049, dtype="float32") /* ty=Tensor[(1, 15, 16), float32] */;
    %1051 = sinh(%1050) /* ty=Tensor[(1, 15, 16), float32] */;
    %1052 = cast(%1051, dtype="int16") /* ty=Tensor[(1, 15, 16), int16] */;
    %1053 = shape_of(%1049, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1054 = cast(%1049, dtype="int16") /* ty=Tensor[(1, 15, 16), int16] */;
    %1055 = dyn.reshape(%1052, %1053, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1056 = cast(meta[relay.Constant][45] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
    %1057 = reshape(%1056, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
    %1058 = @func_208(%1057) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
    %1059 = %1044.0;
    %1060 = %1045.1;
    %1061 = left_shift(%1054, %1055) /* ty=Tensor[(?, 15, 16), int16] */;
    %1062 = %1058.1;
    (%1059, %1060, %1061, %1062, meta[relay.Constant][45] /* ty=Tensor[(2304), int8] */)
  };
  %1063() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */
}

def @func_5903(%var_5901: Tensor[(336, 1), float64], %var_5902: Tensor[(336, 12), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) {
  @func_5899(%var_5901, %var_5902) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */
}

def @func_7213() -> Tensor[(7, 4, 9), float64] {
  @func_7211() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_13260(%var_13259: Tensor[(10, 4, 15), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(10, 4, 15), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %1080 = fn (%var_13204: Tensor[(10, 4, 15), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(10, 4, 15), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
    %1064 = @func_11284() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1065 = @func_12993() /* ty=(Tensor[(2304), int8],) */;
    %1066 = cast(%var_13204, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
    %1067 = log10(%1066) /* ty=Tensor[(10, 4, 15), float64] */;
    %1068 = cast(%var_13204, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
    %1069 = exp(%1068) /* ty=Tensor[(10, 4, 15), float64] */;
    %1070 = cast(%1069, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
    %1071 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1072 = cast(%1067, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
    %1073 = dyn.reshape(%1070, %1071, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1074 = @func_10317() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool]) */;
    %1075 = %1064.0;
    %1076 = %1065.0;
    %1077 = minimum(%1072, %1073) /* ty=Tensor[(10, 4, 15), float64] */;
    %1078 = %1074.0;
    %1079 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
    (%1075, %1076, %1077, %1078, %1079)
  };
  %1080(%var_13259) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(10, 4, 15), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_14496(%var_14495: Tensor[(252), float64]) -> (Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(252), float64]) {
  %1087 = fn (%var_14486: Tensor[(252), float64]) -> (Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(252), float64]) {
    %1081 = @func_11517() /* ty=(Tensor[(16, 16, 9), uint8],) */;
    %1082 = cast(%var_14486, dtype="float64") /* ty=Tensor[(252), float64] */;
    %1083 = reshape(%1082, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
    %1084 = @func_4107(%1083) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64]) */;
    %1085 = %1081.0;
    %1086 = %1084.1;
    (%1085, %1086, %var_14486)
  };
  %1087(%var_14495) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(7, 4, 9), float64], Tensor[(252), float64]) */
}

def @func_2675() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) {
  %1088 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1089 = cast(meta[relay.Constant][46] /* ty=Tensor[(2304), int8] */, dtype="int8") /* ty=Tensor[(2304), int8] */;
  %1090 = reshape(%1089, newshape=[16, 16, 9]) /* ty=Tensor[(16, 16, 9), int8] */;
  %1091 = @func_208(%1090) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */;
  %1092 = %1088.0;
  %1093 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
  %1094 = %1091.0;
  (%1092, %1093, %1094, meta[relay.Constant][46] /* ty=Tensor[(2304), int8] */)
}

def @func_6028() -> (Tensor[(7, 4, 9), float64],) {
  %1097 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %1095 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1096 = %1095.0;
    (%1096,)
  };
  %1097() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_7200(%var_7199: Tensor[(1, 336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 336), int16]) {
  %1112 = fn (%var_7173: Tensor[(1, 336), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 336), int16]) {
    %1098 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %1099 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
    %1100 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1101 = cast(%var_7173, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
    %1102 = reshape(%1101, newshape=[12, 4, 7]) /* ty=Tensor[(12, 4, 7), float64] */;
    %1103 = @func_705(%1102) /* ty=Tensor[(12, 4, 7), float64] */;
    %1104 = cast(%1103, dtype="int16") /* ty=Tensor[(12, 4, 7), int16] */;
    %1105 = shape_of(%var_7173, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1106 = cast(%var_7173, dtype="int16") /* ty=Tensor[(1, 336), int16] */;
    %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %1108 = %1098.1;
    %1109 = %1099.0;
    %1110 = %1100.0;
    %1111 = logical_xor(%1106, %1107) /* ty=Tensor[(?, 336), int16] */;
    (%1108, %1109, %1110, %1111)
  };
  %1112(%var_7199) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float64], Tensor[(?, 336), int16]) */
}

def @func_13193() -> (Tensor[(14, 2, 3), float32], Tensor[(14, 2, 3), float32]) {
  %1113 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %1114 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(14, 2, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1117 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %1118 = maximum(%1115, %1116) /* ty=Tensor[(14, 2, 3), float32] */;
  %1119 = log2(%1117) /* ty=Tensor[(14, 2, 3), float32] */;
  (%1118, %1119)
}

def @func_11519() -> (Tensor[(16, 16, 9), uint8],) {
  @func_11517() /* ty=(Tensor[(16, 16, 9), uint8],) */
}

def @func_17687() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1126 = fn () -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %1120 = @func_12801() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool]) */;
    %1121 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %1122 = @func_14073() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1123 = %1120.2;
    %1124 = %1121.0;
    %1125 = %1122.0;
    (%1123, %1124, %1125)
  };
  %1126() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_3089(%var_3087: Tensor[(11, 4, 3), uint8]) -> (Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) {
  @func_3086(%var_3087) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_8177() -> (Tensor[(7, 4, 9), float64],) {
  @func_8175() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_10112(%var_10110: Tensor[(11, 13, 5), float64], %var_10111: Tensor[(416), uint64]) -> (Tensor[(11, 13, 5), float32], Tensor[(120, 2), float64], Tensor[(4, 8), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(11, 13, 5), uint8]) {
  @func_10108(%var_10110, %var_10111) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(120, 2), float64], Tensor[(4, 8), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(11, 13, 5), uint8]) */
}

def @func_12816() -> Tensor[(33, 4), float32] {
  @func_12814() /* ty=Tensor[(33, 4), float32] */
}

def @func_17702() -> (Tensor[(7, 4, 9), float32],) {
  @func_17700() /* ty=(Tensor[(7, 4, 9), float32],) */
}

def @func_11967(%var_11965: Tensor[(36, 1), float32], %var_11966: Tensor[(336), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(1, 12, 3), float32], Tensor[(36, 1), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64]) {
  %1136 = fn (%var_11956: Tensor[(36, 1), float32], %var_11961: Tensor[(336), float64]) -> (Tensor[(5, 10, 5), bool], Tensor[(1, 12, 3), float32], Tensor[(36, 1), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64]) {
    %1127 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1128 = cast(%var_11956, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
    %1129 = reshape(%1128, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), float32] */;
    %1130 = cast(%var_11961, dtype="float64") /* ty=Tensor[(336), float64] */;
    %1131 = reshape(%1130, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %1132 = @func_2835(%1131) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) */;
    %1133 = %1127.0;
    %1134 = @func_1394(%1129) /* ty=Tensor[(1, 12, 3), float32] */;
    %1135 = %1132.0;
    (%1133, %1134, %var_11956, %1135, %var_11961)
  };
  %1136(%var_11965, %var_11966) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 12, 3), float32], Tensor[(36, 1), float32], Tensor[(7, 4, 9), float64], Tensor[(336), float64]) */
}

def @func_9864() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1139 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %1137 = @func_7343() /* ty=Tensor[(7, 4, 9), float64] */;
    %1138 = @func_7306() /* ty=Tensor[(7, 4, 9), float64] */;
    (%1137, %1138)
  };
  %1139() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_6097() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %1144 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
    %1140 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
    %1141 = @func_2591() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1142 = %1140.3;
    %1143 = %1141.0;
    (%1142, %1143)
  };
  %1144() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */
}

def @func_1830() -> Tensor[(7, 4, 9), float64] {
  @func_1828() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_7046() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
  %1148 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) {
    %1145 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
    %1146 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
    %1147 = %1145.1;
    (%1146, %1147)
  };
  %1148() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */
}

def @func_11737() -> (Tensor[(7, 4, 9), uint16],) {
  %1151 = fn () -> (Tensor[(7, 4, 9), uint16],) {
    %1149 = @func_5174() /* ty=(Tensor[(7, 4, 9), uint16],) */;
    %1150 = %1149.0;
    (%1150,)
  };
  %1151() /* ty=(Tensor[(7, 4, 9), uint16],) */
}

def @func_1525() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1156 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %1152 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1153 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1154 = %1152.0;
    %1155 = %1153.0;
    (%1154, %1155)
  };
  %1156() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_7028() -> Tensor[(7, 4, 9), float64] {
  %1158 = fn () -> Tensor[(7, 4, 9), float64] {
    %1157 = @func_6956() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
    %1157.0
  };
  %1158() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9194() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_9192() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_4880(%var_4865: Tensor[(2, 8, 6), uint16], %var_4866: Tensor[(2, 8, 6), uint16]) -> Tensor[(2, 8, 6), uint16] {
  %1159 = cast(%var_4866, dtype="uint16") /* ty=Tensor[(2, 8, 6), uint16] */;
  %1160 = shape_of(%var_4865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1161 = cast(%var_4865, dtype="uint16") /* ty=Tensor[(2, 8, 6), uint16] */;
  %1162 = dyn.reshape(%1159, %1160, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%1161, %1162) /* ty=Tensor[(2, 8, 6), uint16] */
}

def @func_12955() -> Tensor[(7, 4, 9), float64] {
  @func_12953() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9633() -> Tensor[(7, 4, 9), float64] {
  %1164 = fn () -> Tensor[(7, 4, 9), float64] {
    %1163 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
    %1163.0
  };
  %1164() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_3346() -> (Tensor[(7, 4, 9), float32],) {
  %1165 = @func_2764() /* ty=Tensor[(7, 4, 9), float32] */;
  (%1165,)
}

def @func_15152() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(132), uint8]) {
  %1172 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(132), uint8]) {
    %1166 = @func_13437() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 11, 7), uint8], Tensor[(539, 1), uint8], Tensor[(7, 4, 9), float64]) */;
    %1167 = cast(meta[relay.Constant][49] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %1168 = reshape(%1167, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
    %1169 = @func_3086(%1168) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
    %1170 = %1166.3;
    %1171 = %1169.2;
    (%1170, %1171, meta[relay.Constant][49] /* ty=Tensor[(132), uint8] */)
  };
  %1172() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(132), uint8]) */
}

def @func_16907() -> (Tensor[(5, 10, 5), float64],) {
  %1173 = @func_15585() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), float64]) */;
  %1174 = %1173.1;
  (%1174,)
}

def @func_17884() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_17882() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_8175() -> (Tensor[(7, 4, 9), float64],) {
  %1175 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
  (%1175,)
}

def @func_14883() -> (Tensor[(5, 10, 5), float64], Tensor[(7, 4, 9), bool]) {
  %1176 = @func_8671() /* ty=(Tensor[(5, 10, 5), float64],) */;
  %1177 = @func_12201() /* ty=(Tensor[(7, 4, 9), bool],) */;
  %1178 = %1176.0;
  %1179 = %1177.0;
  (%1178, %1179)
}

def @func_7253() -> (Tensor[(16, 16, 9), bool],) {
  %1182 = fn () -> (Tensor[(16, 16, 9), bool],) {
    %1180 = @func_4826() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(?, 15, 16), int16], Tensor[(16, 16, 9), bool], Tensor[(2304), int8]) */;
    %1181 = %1180.3;
    (%1181,)
  };
  %1182() /* ty=(Tensor[(16, 16, 9), bool],) */
}

def @func_16167() -> Tensor[(132), uint8] {
  @func_16165() /* ty=Tensor[(132), uint8] */
}

def @func_15613() -> (Tensor[(7, 4, 9), float64],) {
  @func_15611() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_4512() -> Tensor[(2304), int8] {
  @func_4510() /* ty=Tensor[(2304), int8] */
}

def @func_1590() -> (Tensor[(7, 4, 9), float64],) {
  @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_5521() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1183 = @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */;
  %1184 = @func_2454() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1185 = @func_3895() /* ty=Tensor[(7, 4, 9), float64] */;
  %1186 = %1183.0;
  %1187 = %1184.0;
  (%1185, %1186, %1187)
}

def @func_8482() -> Tensor[(1, 15, 16), float64] {
  %1188 = @func_4754() /* ty=(Tensor[(7, 4, 9), bool], Tensor[(1, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 15, 16), float64]) */;
  %1188.4
}

def @func_1588() -> (Tensor[(7, 4, 9), float64],) {
  %1189 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1190 = %1189.0;
  (%1190,)
}

def @func_15189() -> (Tensor[(7, 4, 9), float64], Tensor[(8, 8, 12), float64]) {
  %1196 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(8, 8, 12), float64]) {
    %1191 = @func_6115() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1192 = @func_11011() /* ty=Tensor[(8, 8, 12), float64] */;
    %1193 = cast(%1192, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
    %1194 = %1191.0;
    %1195 = exp(%1193) /* ty=Tensor[(8, 8, 12), float64] */;
    (%1194, %1195)
  };
  %1196() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(8, 8, 12), float64]) */
}

def @func_15538(%var_15537: Tensor[(900), float32]) -> (Tensor[(7, 4, 9), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(16, 16, 9), uint8]) {
  %1204 = fn (%var_15511: Tensor[(900), float32]) -> (Tensor[(7, 4, 9), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(16, 16, 9), uint8]) {
    %1197 = cast(%var_15511, dtype="float32") /* ty=Tensor[(900), float32] */;
    %1198 = reshape(%1197, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
    %1199 = @func_6428(%1198) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(11, 13, 5), float64]) */;
    %1200 = @func_11517() /* ty=(Tensor[(16, 16, 9), uint8],) */;
    %1201 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
    %1202 = %1199.0;
    %1203 = %1200.0;
    (%1201, %1202, %var_15511, %1203)
  };
  %1204(%var_15537) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(16, 16, 9), uint8]) */
}

def @func_17435() -> (Tensor[(7, 4, 9), float32],) {
  %1205 = @func_5073() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */;
  %1206 = %1205.0;
  (%1206,)
}

def @func_11012() -> Tensor[(8, 8, 12), float64] {
  %1208 = fn () -> Tensor[(8, 8, 12), float64] {
    %1207 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 12), float64] */;
    erf(%1207) /* ty=Tensor[(8, 8, 12), float64] */
  };
  %1208() /* ty=Tensor[(8, 8, 12), float64] */
}

def @func_13387() -> (Tensor[(7, 4, 9), float64], Tensor[(390), float64]) {
  %1209 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1210 = %1209.0;
  %1211 = @func_12094() /* ty=Tensor[(390), float64] */;
  (%1210, %1211)
}

def @func_9529() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %1215 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
    %1212 = @func_8175() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1213 = %1212.0;
    %1214 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
    (%1213, %1214)
  };
  %1215() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_7862() -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) {
  %1226 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) {
    %1216 = @func_6027() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1217 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1218 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 16), uint64] */, dtype="uint64") /* ty=Tensor[(2, 16), uint64] */;
    %1219 = cast(meta[relay.Constant][52] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %1220 = reshape(%1218, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
    %1221 = reshape(%1219, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
    %1222 = @func_6518(%1220, %1221) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
    %1223 = %1216.0;
    %1224 = %1217.0;
    %1225 = %1222.1;
    (%1223, %1224, %1225, meta[relay.Constant][51] /* ty=Tensor[(2, 16), uint64] */, meta[relay.Constant][52] /* ty=Tensor[(416), uint64] */)
  };
  %1226() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(1, 15, 16), float64], Tensor[(2, 16), uint64], Tensor[(416), uint64]) */
}

def @func_15700() -> (Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64]) {
  @func_15698() /* ty=(Tensor[(1, 15, 16), float64], Tensor[(5, 10, 5), float64]) */
}

def @func_17507() -> Tensor[(7, 4, 9), float64] {
  %1227 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1227.0
}

def @func_10430() -> Tensor[(7, 4, 9), float64] {
  @func_5369() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_7100() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %1228 = @func_1893() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1229 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
  %1230 = %1228.0;
  (%1229, %1230)
}

def @func_4670() -> (Tensor[(7, 4, 9), bool],) {
  %1231 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %1232 = %1231.0;
  %1233 = @func_3488() /* ty=Tensor[(7, 4, 9), float64] */;
  %1234 = cast(%1233, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %1235 = shape_of(%1232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1236 = cast(%1232, dtype="bool") /* ty=Tensor[(7, 4, 9), bool] */;
  %1237 = dyn.reshape(%1234, %1235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1238 = less(%1236, %1237) /* ty=Tensor[(7, 4, 9), bool] */;
  (%1238,)
}

def @func_8014() -> Tensor[(7, 4, 9), uint16] {
  @func_8012() /* ty=Tensor[(7, 4, 9), uint16] */
}

def @func_14074() -> (Tensor[(7, 4, 9), float64],) {
  %1240 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %1239 = @func_9632() /* ty=Tensor[(7, 4, 9), float64] */;
    (%1239,)
  };
  %1240() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_13537() -> (Tensor[(7, 4, 9), float64],) {
  @func_13535() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_14431() -> (Tensor[(2304), int8], Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float64]) {
  %1241 = @func_12993() /* ty=(Tensor[(2304), int8],) */;
  %1242 = @func_13535() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1243 = %1241.0;
  %1244 = @func_6980() /* ty=Tensor[(5, 10, 5), float32] */;
  %1245 = %1242.0;
  (%1243, %1244, %1245)
}

def @func_14448() -> (Tensor[(7, 4, 9), float64],) {
  @func_14446() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_17646() -> Tensor[(7, 4, 9), float64] {
  %1246 = fn () -> Tensor[(7, 4, 9), float64] {
    @func_3895() /* ty=Tensor[(7, 4, 9), float64] */
  };
  %1246() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_3086(%var_3038: Tensor[(11, 4, 3), uint8]) -> (Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) {
  %1247 = cast(%var_3038, dtype="uint8") /* ty=Tensor[(11, 4, 3), uint8] */;
  %1248 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1249 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="uint8") /* ty=Tensor[(11, 4, 3), uint8] */;
  %1250 = dyn.reshape(%1247, %1248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1251 = cast(%var_3038, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  %1252 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1253 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 4, 3), uint8] */, dtype="float64") /* ty=Tensor[(11, 4, 3), float64] */;
  %1254 = dyn.reshape(%1251, %1252, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1255 = add(%1249, %1250) /* ty=Tensor[(11, 4, 3), uint8] */;
  %1256 = floor_divide(%1253, %1254) /* ty=Tensor[(11, 4, 3), float64] */;
  %1257 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
  (%1255, %1256, %1257)
}

def @func_14719(%var_14671: Tensor[(6, 42), float64], %var_14685: Tensor[(6, 42), float64], %var_14697: Tensor[(6, 42), float64]) -> (Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(6, 42), bool], Tensor[(6, 42), float64], Tensor[(7, 4, 9), float64]) {
  %1258 = @func_5927() /* ty=(Tensor[(11, 13, 5), float64], Tensor[(7, 4, 9), float32], Tensor[(33, 4), uint8]) */;
  %1259 = cast(%var_14671, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %1260 = reshape(%1259, newshape=[7, 4, 9]) /* ty=Tensor[(7, 4, 9), float64] */;
  %1261 = @func_7383(%1260) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float32]) */;
  %1262 = cast(%var_14671, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %1263 = tan(%1262) /* ty=Tensor[(6, 42), float64] */;
  %1264 = cast(%var_14685, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %1265 = shape_of(%1263, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1266 = cast(%1263, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %1267 = dyn.reshape(%1264, %1265, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1268 = cast(%var_14697, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %1269 = shape_of(%var_14685, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1270 = cast(%var_14685, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %1271 = dyn.reshape(%1268, %1269, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1272 = @func_5488() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1273 = %1258.0;
  %1274 = %1261.1;
  %1275 = greater_equal(%1266, %1267) /* ty=Tensor[(6, 42), bool] */;
  %1276 = divide(%1270, %1271) /* ty=Tensor[(6, 42), float64] */;
  %1277 = %1272.0;
  (%1273, %1274, %1275, %1276, %1277)
}

def @func_3764(%var_3763: Tensor[(75), float32]) -> (Tensor[(7, 4, 9), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 1, 16), float64], Tensor[(80), float64]) {
  %1294 = fn (%var_3729: Tensor[(75), float32]) -> (Tensor[(7, 4, 9), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 1, 16), float64], Tensor[(80), float64]) {
    %1278 = cast(%var_3729, dtype="float32") /* ty=Tensor[(75), float32] */;
    %1279 = cast(%var_3729, dtype="float32") /* ty=Tensor[(75), float32] */;
    %1280 = reshape(%1278, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
    %1281 = reshape(%1279, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
    %1282 = @func_2527(%1280, %1281) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) */;
    %1283 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %1284 = @func_3632() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1285 = cast(meta[relay.Constant][54] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %1286 = reshape(%1285, newshape=[5, 1, 16]) /* ty=Tensor[(5, 1, 16), float64] */;
    %1287 = @func_3388(%1286) /* ty=(Tensor[(5, 1, 16), float64], Tensor[(7, 4, 9), float64], Tensor[(1, 240), float64]) */;
    %1288 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
    %1289 = %1282.0;
    %1290 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
    %1291 = %1283.0;
    %1292 = %1284.0;
    %1293 = %1287.0;
    (%1288, %1289, %var_3729, %1290, %1291, %1292, %1293, meta[relay.Constant][54] /* ty=Tensor[(80), float64] */)
  };
  %1294(%var_3763) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 1, 16), float64], Tensor[(80), float64]) */
}

def @func_6242(%var_6240: Tensor[(7, 4, 9), float32]) -> (Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) {
  @func_6239(%var_6240) /* ty=(Tensor[(7, 4, 9), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 11, 7), uint8], Tensor[(539), uint8]) */
}

def @func_2231() -> Tensor[(7, 4, 9), float64] {
  @func_2229() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_12616() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %1295 = @func_7953() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */;
  %1296 = @func_6737() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) */;
  %1297 = %1295.5;
  %1298 = %1296.2;
  %1299 = @func_3873() /* ty=Tensor[(7, 4, 9), float32] */;
  (%1297, %1298, %1299)
}

def @func_3980(%var_3978: Tensor[(10, 16, 6), float64]) -> (Tensor[(10, 16, 6), float64], Tensor[(10, 16, 6), float32]) {
  @func_3977(%var_3978) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 16, 6), float32]) */
}

def @func_705(%var_691: Tensor[(12, 4, 7), float64]) -> Tensor[(12, 4, 7), float64] {
  %1300 = cast(%var_691, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
  log10(%1300) /* ty=Tensor[(12, 4, 7), float64] */
}

def @func_16094() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  %1306 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
    %1301 = @func_4899() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1302 = @func_4295() /* ty=(Tensor[(7, 4, 9), float32],) */;
    %1303 = @func_9632() /* ty=Tensor[(7, 4, 9), float64] */;
    %1304 = %1301.0;
    %1305 = %1302.0;
    (%1303, %1304, %1305)
  };
  %1306() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_2765() -> Tensor[(7, 4, 9), float32] {
  %1307 = fn () -> Tensor[(7, 4, 9), float32] {
    @func_1982() /* ty=Tensor[(7, 4, 9), float32] */
  };
  %1307() /* ty=Tensor[(7, 4, 9), float32] */
}

def @func_211(%var_209: Tensor[(16, 16, 9), int8]) -> (Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) {
  @func_208(%var_209) /* ty=(Tensor[(16, 16, 9), uint8], Tensor[(16, 16, 9), bool]) */
}

def @func_13077(%var_13062: Tensor[(5, 10, 5), float32]) -> (Tensor[(1, 15, 16), float64], Tensor[(2304), int8], Tensor[(5, 10, 5), uint8]) {
  %1308 = @func_5596() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
  %1309 = %1308.2;
  %1310 = cast(%1309, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %1311 = cos(%1310) /* ty=Tensor[(5, 10, 5), float32] */;
  %1312 = cast(%var_13062, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
  %1313 = shape_of(%1311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1314 = cast(%1311, dtype="uint8") /* ty=Tensor[(5, 10, 5), uint8] */;
  %1315 = dyn.reshape(%1312, %1313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1316 = @func_8482() /* ty=Tensor[(1, 15, 16), float64] */;
  %1317 = @func_4510() /* ty=Tensor[(2304), int8] */;
  %1318 = bitwise_or(%1314, %1315) /* ty=Tensor[(5, 10, 5), uint8] */;
  (%1316, %1317, %1318)
}

def @func_4204(%var_4201: Tensor[(7, 15, 2), float32], %var_4202: Tensor[(539), uint8], %var_4203: Tensor[(7, 15, 2), float32]) -> (Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(7, 4, 9), float64], Tensor[(7, 15, 2), bool]) {
  %1334 = fn (%var_4158: Tensor[(7, 15, 2), float32], %var_4172: Tensor[(539), uint8], %var_4191: Tensor[(7, 15, 2), float32]) -> (Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(7, 4, 9), float64], Tensor[(7, 15, 2), bool]) {
    %1319 = cast(%var_4172, dtype="uint8") /* ty=Tensor[(539), uint8] */;
    %1320 = cast(%var_4172, dtype="float64") /* ty=Tensor[(539), float64] */;
    %1321 = reshape(%1319, newshape=[539]) /* ty=Tensor[(539), uint8] */;
    %1322 = reshape(%1320, newshape=[539]) /* ty=Tensor[(539), float64] */;
    %1323 = @func_4046(%1321, %1322) /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 11, 7), uint8], Tensor[(5, 10, 5), bool], Tensor[(539), int16]) */;
    %1324 = @func_3584() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %1325 = cast(%var_4158, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
    %1326 = rsqrt(%1325) /* ty=Tensor[(7, 15, 2), float32] */;
    %1327 = cast(%var_4191, dtype="bool") /* ty=Tensor[(7, 15, 2), bool] */;
    %1328 = shape_of(%1326, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1329 = cast(%1326, dtype="bool") /* ty=Tensor[(7, 15, 2), bool] */;
    %1330 = dyn.reshape(%1327, %1328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1331 = %1323.2;
    %1332 = %1324.0;
    %1333 = greater_equal(%1329, %1330) /* ty=Tensor[(7, 15, 2), bool] */;
    (%1331, %var_4172, %1332, %1333)
  };
  %1334(%var_4201, %var_4202, %var_4203) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(7, 4, 9), float64], Tensor[(7, 15, 2), bool]) */
}

def @func_12618() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) {
  @func_12616() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float32]) */
}

def @func_8589() -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
  %1338 = fn () -> (Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) {
    %1335 = @func_7045() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(5, 10, 5), bool]) */;
    %1336 = @func_8012() /* ty=Tensor[(7, 4, 9), uint16] */;
    %1337 = %1335.0;
    (%1336, %1337)
  };
  %1338() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */
}

def @func_10108(%var_10023: Tensor[(11, 13, 5), float64], %var_10055: Tensor[(416), uint64]) -> (Tensor[(11, 13, 5), float32], Tensor[(120, 2), float64], Tensor[(4, 8), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(11, 13, 5), uint8]) {
  %1339 = @func_8571() /* ty=(Tensor[(11, 13, 5), float64],) */;
  %1340 = %1339.0;
  %1341 = cast(%var_10023, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %1342 = shape_of(%1340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1343 = cast(%1340, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %1344 = dyn.reshape(%1341, %1342, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1345 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 8), uint64] */, dtype="uint64") /* ty=Tensor[(4, 8), uint64] */;
  %1346 = cast(%var_10055, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %1347 = reshape(%1345, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
  %1348 = reshape(%1346, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
  %1349 = @func_6518(%1347, %1348) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
  %1350 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1351 = @func_5659() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(2304), int8], Tensor[(5, 1, 16), float64], Tensor[(80), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
  %1352 = cast(meta[relay.Constant][56] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %1353 = reshape(%1352, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %1354 = @func_2835(%1353) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(12, 4, 7), float64], Tensor[(336), float64], Tensor[(7, 4, 9), float64]) */;
  %1355 = @func_8277() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1356 = cast(%1340, dtype="float64") /* ty=Tensor[(11, 13, 5), float64] */;
  %1357 = acos(%1356) /* ty=Tensor[(11, 13, 5), float64] */;
  %1358 = cast(%1357, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %1359 = cos(%1358) /* ty=Tensor[(11, 13, 5), float32] */;
  %1360 = cast(meta[relay.Constant][57] /* ty=Tensor[(11, 13, 5), float32] */, dtype="uint8") /* ty=Tensor[(11, 13, 5), uint8] */;
  %1361 = shape_of(%1359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1362 = cast(%1359, dtype="uint8") /* ty=Tensor[(11, 13, 5), uint8] */;
  %1363 = dyn.reshape(%1360, %1361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1364 = floor_mod(%1343, %1344) /* ty=Tensor[(11, 13, 5), float32] */;
  %1365 = %1349.2;
  %1366 = %1350.0;
  %1367 = %1351.0;
  %1368 = %1354.3;
  %1369 = %1355.0;
  %1370 = @func_7701() /* ty=Tensor[(7, 4, 9), bool] */;
  %1371 = bitwise_and(%1362, %1363) /* ty=Tensor[(11, 13, 5), uint8] */;
  (%1364, %1365, meta[relay.Constant][55] /* ty=Tensor[(4, 8), uint64] */, %var_10055, %1366, %1367, %1368, meta[relay.Constant][56] /* ty=Tensor[(336), float64] */, %1369, %1370, %1371)
}

def @func_10841() -> Tensor[(7, 4, 9), float64] {
  %1372 = @func_3334() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1372.0
}

def @func_1932() -> (Tensor[(7, 4, 9), uint16],) {
  %1382 = fn () -> (Tensor[(7, 4, 9), uint16],) {
    %1373 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %1374 = %1373.0;
    %1375 = cast(%1374, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
    %1376 = log10(%1375) /* ty=Tensor[(7, 4, 9), float64] */;
    %1377 = cast(%1374, dtype="uint16") /* ty=Tensor[(7, 4, 9), uint16] */;
    %1378 = shape_of(%1376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1379 = cast(%1376, dtype="uint16") /* ty=Tensor[(7, 4, 9), uint16] */;
    %1380 = dyn.reshape(%1377, %1378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1381 = logical_xor(%1379, %1380) /* ty=Tensor[(7, 4, 9), uint16] */;
    (%1381,)
  };
  %1382() /* ty=(Tensor[(7, 4, 9), uint16],) */
}

def @func_14653() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  @func_14651() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_15108() -> (Tensor[(5, 10, 5), bool],) {
  %1385 = fn () -> (Tensor[(5, 10, 5), bool],) {
    %1383 = @func_6861() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1384 = %1383.0;
    (%1384,)
  };
  %1385() /* ty=(Tensor[(5, 10, 5), bool],) */
}

def @func_17542() -> (Tensor[(33, 4), bool],) {
  @func_17540() /* ty=(Tensor[(33, 4), bool],) */
}

def @func_2530(%var_2528: Tensor[(5, 3, 5), float32], %var_2529: Tensor[(5, 3, 5), float32]) -> (Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) {
  %1398 = fn (%var_2489: Tensor[(5, 3, 5), float32], %var_2490: Tensor[(5, 3, 5), float32]) -> (Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) {
    %1386 = cast(%var_2490, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
    %1387 = shape_of(%var_2489, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1388 = cast(%var_2489, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
    %1389 = dyn.reshape(%1386, %1387, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1390 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1391 = @func_1457() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1392 = cast(%var_2489, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
    %1393 = power(%1388, %1389) /* ty=Tensor[(5, 3, 5), float32] */;
    %1394 = %1390.0;
    %1395 = %1391.0;
    %1396 = @func_2229() /* ty=Tensor[(7, 4, 9), float64] */;
    %1397 = atan(%1392) /* ty=Tensor[(5, 3, 5), float32] */;
    (%1393, %1394, %1395, %1396, %1397)
  };
  %1398(%var_2528, %var_2529) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(5, 3, 5), float32]) */
}

def @func_14742() -> Tensor[(7, 4, 9), float64] {
  %1400 = fn () -> Tensor[(7, 4, 9), float64] {
    %1399 = @func_13817() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1399.0
  };
  %1400() /* ty=Tensor[(7, 4, 9), float64] */
}

def @func_9153(%var_9152: Tensor[(210), float32]) -> (Tensor[(7, 4, 9), float64], Tensor[(210), float32], Tensor[(539), uint8], Tensor[(539), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1417 = fn (%var_9094: Tensor[(210), float32]) -> (Tensor[(7, 4, 9), float64], Tensor[(210), float32], Tensor[(539), uint8], Tensor[(539), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %1401 = cast(%var_9094, dtype="float32") /* ty=Tensor[(210), float32] */;
    %1402 = cast(meta[relay.Constant][58] /* ty=Tensor[(539), uint8] */, dtype="uint8") /* ty=Tensor[(539), uint8] */;
    %1403 = cast(%var_9094, dtype="float32") /* ty=Tensor[(210), float32] */;
    %1404 = reshape(%1401, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float32] */;
    %1405 = reshape(%1402, newshape=[539]) /* ty=Tensor[(539), uint8] */;
    %1406 = reshape(%1403, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), float32] */;
    %1407 = @func_4200(%1404, %1405, %1406) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(539), uint8], Tensor[(7, 4, 9), float64], Tensor[(7, 15, 2), bool]) */;
    %1408 = %1407.1;
    %1409 = cast(%1408, dtype="float32") /* ty=Tensor[(539), float32] */;
    %1410 = @func_6884() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %1411 = @func_8588() /* ty=(Tensor[(7, 4, 9), uint16], Tensor[(7, 4, 9), float64]) */;
    %1412 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
    %1413 = sinh(%1409) /* ty=Tensor[(539), float32] */;
    %1414 = @func_7306() /* ty=Tensor[(7, 4, 9), float64] */;
    %1415 = %1410.0;
    %1416 = %1411.1;
    (%1412, %var_9094, meta[relay.Constant][58] /* ty=Tensor[(539), uint8] */, %1413, %1414, %1415, %1416)
  };
  %1417(%var_9152) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(210), float32], Tensor[(539), uint8], Tensor[(539), float32], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_14641() -> (Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) {
  %1420 = fn () -> (Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) {
    %1418 = @func_13895() /* ty=Tensor[(33, 4), float32] */;
    %1419 = @func_5199() /* ty=Tensor[(7, 4, 9), float64] */;
    (%1418, %1419)
  };
  %1420() /* ty=(Tensor[(33, 4), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_15959() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(416), uint64], Tensor[(336), float64], Tensor[(48, 84), float64]) {
  %1430 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(416), uint64], Tensor[(336), float64], Tensor[(48, 84), float64]) {
    %1421 = cast(meta[relay.Constant][59] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %1422 = cast(meta[relay.Constant][60] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %1423 = cast(meta[relay.Constant][61] /* ty=Tensor[(48, 84), float64] */, dtype="float64") /* ty=Tensor[(48, 84), float64] */;
    %1424 = reshape(%1421, newshape=[416]) /* ty=Tensor[(416), uint64] */;
    %1425 = reshape(%1422, newshape=[24, 14]) /* ty=Tensor[(24, 14), float64] */;
    %1426 = reshape(%1423, newshape=[4032]) /* ty=Tensor[(4032), float64] */;
    %1427 = @func_7454(%1424, %1425, %1426) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(24, 14), float64], Tensor[(4032), float64], float64, Tensor[(240), float64]) */;
    %1428 = @func_7027() /* ty=Tensor[(7, 4, 9), float64] */;
    %1429 = %1427.0;
    (%1428, %1429, meta[relay.Constant][59] /* ty=Tensor[(416), uint64] */, meta[relay.Constant][60] /* ty=Tensor[(336), float64] */, meta[relay.Constant][61] /* ty=Tensor[(48, 84), float64] */)
  };
  %1430() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(416), uint64], Tensor[(336), float64], Tensor[(48, 84), float64]) */
}

def @func_708(%var_706: Tensor[(12, 4, 7), float64]) -> Tensor[(12, 4, 7), float64] {
  @func_705(%var_706) /* ty=Tensor[(12, 4, 7), float64] */
}

def @func_5489() -> (Tensor[(7, 4, 9), float64],) {
  %1433 = fn () -> (Tensor[(7, 4, 9), float64],) {
    %1431 = @func_2068() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1432 = %1431.0;
    (%1432,)
  };
  %1433() /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_11772() -> (Tensor[(5, 10, 5), bool], Tensor[(7, 4, 9), float64]) {
  %1434 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
  %1435 = @func_8175() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1436 = %1434.0;
  %1437 = %1435.0;
  (%1436, %1437)
}

def @func_11884(%var_11883: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float32]) {
  %1446 = fn (%var_11870: Tensor[(5, 10, 5), bool]) -> (Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float32]) {
    %1438 = @func_1549() /* ty=(Tensor[(5, 10, 5), bool],) */;
    %1439 = %1438.0;
    %1440 = cast(%var_11870, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
    %1441 = shape_of(%1439, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1442 = cast(%1439, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
    %1443 = dyn.reshape(%1440, %1441, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1444 = mod(%1442, %1443) /* ty=Tensor[(5, 10, 5), float32] */;
    %1445 = @func_1982() /* ty=Tensor[(7, 4, 9), float32] */;
    (%1444, %1445)
  };
  %1446(%var_11883) /* ty=(Tensor[(5, 10, 5), float32], Tensor[(7, 4, 9), float32]) */
}

def @func_7620() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
  %1450 = fn () -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) {
    %1447 = @func_1524() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */;
    %1448 = %1447.1;
    %1449 = @func_5940() /* ty=Tensor[(7, 4, 9), float64] */;
    (%1448, %1449)
  };
  %1450() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64]) */
}

def @func_1893() -> (Tensor[(7, 4, 9), float64],) {
  %1451 = @func_1828() /* ty=Tensor[(7, 4, 9), float64] */;
  (%1451,)
}

def @func_1396(%var_1395: Tensor[(1, 12, 3), float32]) -> Tensor[(1, 12, 3), float32] {
  %1454 = fn (%var_1379: Tensor[(1, 12, 3), float32]) -> Tensor[(1, 12, 3), float32] {
    %1452 = cast(2.51503f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1453 = cast(%var_1379, dtype="float32") /* ty=Tensor[(1, 12, 3), float32] */;
    add(%1452, %1453) /* ty=Tensor[(1, 12, 3), float32] */
  };
  %1454(%var_1395) /* ty=Tensor[(1, 12, 3), float32] */
}

def @func_6337() -> (Tensor[(7, 4, 9), float64], Tensor[(11, 4, 3), float64], Tensor[(132), uint8]) {
  %1455 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
  %1456 = cast(meta[relay.Constant][62] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %1457 = reshape(%1456, newshape=[11, 4, 3]) /* ty=Tensor[(11, 4, 3), uint8] */;
  %1458 = @func_3086(%1457) /* ty=(Tensor[(11, 4, 3), uint8], Tensor[(11, 4, 3), float64], Tensor[(7, 4, 9), float32]) */;
  %1459 = %1455.0;
  %1460 = %1458.1;
  (%1459, %1460, meta[relay.Constant][62] /* ty=Tensor[(132), uint8] */)
}

def @func_6473(%var_6471: Tensor[(336), float64], %var_6472: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(5, 10, 5), bool]) {
  @func_6469(%var_6471, %var_6472) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(336), float64], Tensor[(4032), float64], Tensor[(5, 10, 5), bool]) */
}

def @func_17794() -> (Tensor[(2304), int8],) {
  %1463 = fn () -> (Tensor[(2304), int8],) {
    %1461 = @func_16564() /* ty=(Tensor[(2304), int8],) */;
    %1462 = %1461.0;
    (%1462,)
  };
  %1463() /* ty=(Tensor[(2304), int8],) */
}

def @func_3029() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %1467 = fn () -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
    %1464 = @func_1588() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1465 = @func_2051() /* ty=Tensor[(7, 4, 9), float32] */;
    %1466 = %1464.0;
    (%1465, %1466)
  };
  %1467() /* ty=(Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) */
}

def @func_12878() -> (Tensor[(132), uint8], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) {
  @func_12876() /* ty=(Tensor[(132), uint8], Tensor[(7, 4, 9), float64], Tensor[(2304), int8]) */
}

def @func_5073() -> (Tensor[(7, 4, 9), float32], Tensor[(7, 4, 9), float64]) {
  %1468 = @func_3346() /* ty=(Tensor[(7, 4, 9), float32],) */;
  %1469 = %1468.0;
  %1470 = @func_2617() /* ty=Tensor[(7, 4, 9), float64] */;
  (%1469, %1470)
}

def @func_2677() -> (Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) {
  @func_2675() /* ty=(Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), float64], Tensor[(16, 16, 9), uint8], Tensor[(2304), int8]) */
}

def @func_12994() -> (Tensor[(2304), int8],) {
  %1472 = fn () -> (Tensor[(2304), int8],) {
    %1471 = @func_4510() /* ty=Tensor[(2304), int8] */;
    (%1471,)
  };
  %1472() /* ty=(Tensor[(2304), int8],) */
}

def @func_7458(%var_7455: Tensor[(416), uint64], %var_7456: Tensor[(24, 14), float64], %var_7457: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(24, 14), float64], Tensor[(4032), float64], float64, Tensor[(240), float64]) {
  %1491 = fn (%var_7408: Tensor[(416), uint64], %var_7418: Tensor[(24, 14), float64], %var_7419: Tensor[(4032), float64]) -> (Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(24, 14), float64], Tensor[(4032), float64], float64, Tensor[(240), float64]) {
    %1473 = @func_6056() /* ty=(Tensor[(7, 4, 9), float64],) */;
    %1474 = cast(meta[relay.Constant][63] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
    %1475 = cast(%var_7408, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %1476 = reshape(%1474, newshape=[1, 16, 2]) /* ty=Tensor[(1, 16, 2), uint64] */;
    %1477 = reshape(%1475, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), uint64] */;
    %1478 = @func_6518(%1476, %1477) /* ty=(Tensor[(13, 16, 2), uint64], Tensor[(1, 15, 16), float64], Tensor[(120, 2), float64]) */;
    %1479 = cast(%var_7418, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
    %1480 = cast(%var_7419, dtype="float64") /* ty=Tensor[(4032), float64] */;
    %1481 = reshape(%1479, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
    %1482 = reshape(%1480, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
    %1483 = @func_5899(%1481, %1482) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(16, 16, 9), bool], Tensor[(2304), int8], Tensor[(7, 4, 9), float64], Tensor[(336, 12), int64]) */;
    %1484 = @func_5216() /* ty=(Tensor[(5, 10, 5), bool], Tensor[(1, 240), float64], float64, Tensor[(390), float64], Tensor[(240), float64]) */;
    %1485 = @func_6851() /* ty=(Tensor[(240), float64], Tensor[(7, 4, 9), float64], Tensor[(7, 4, 9), bool], Tensor[(9, 10, 10), float32], Tensor[(900), float32], Tensor[(7, 11, 7), uint8]) */;
    %1486 = %1473.0;
    %1487 = %1478.2;
    %1488 = %1483.3;
    %1489 = %1484.2;
    %1490 = %1485.0;
    (%1486, %1487, meta[relay.Constant][63] /* ty=Tensor[(32), uint64] */, %var_7408, %1488, %var_7418, %var_7419, %1489, %1490)
  };
  %1491(%var_7455, %var_7456, %var_7457) /* ty=(Tensor[(7, 4, 9), float64], Tensor[(120, 2), float64], Tensor[(32), uint64], Tensor[(416), uint64], Tensor[(7, 4, 9), float64], Tensor[(24, 14), float64], Tensor[(4032), float64], float64, Tensor[(240), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen858/build/output.py", line 5169, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:30:36] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

