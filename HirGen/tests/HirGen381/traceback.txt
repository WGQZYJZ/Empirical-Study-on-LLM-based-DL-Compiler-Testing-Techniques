==========mod==========
#[version = "0.0.5"]
def @func_5825() -> (Tensor[(364), int8], Tensor[(16, 1, 4), float32]) {
  %0 = @func_4318() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */;
  %1 = %0.2;
  %2 = @func_3895() /* ty=Tensor[(16, 1, 4), float32] */;
  (%1, %2)
}

def @func_448(%var_437: Tensor[(14, 2, 13), int8], %var_438: Tensor[(14, 2, 13), int8]) -> Tensor[(14, 2, 13), bool] {
  %3 = cast(%var_438, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
  %4 = shape_of(%var_437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_437, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%5, %6) /* ty=Tensor[(14, 2, 13), bool] */
}

def @func_1783() -> Tensor[(16, 1, 4), float32] {
  @func_1615() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2306(%var_2299: Tensor[(2, 660), float64], %var_2300: Tensor[(168), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(11, 15, 8), bool], Tensor[(2, 660), float64], Tensor[(168), float32]) {
  %7 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %8 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %9 = cast(%var_2299, dtype="float64") /* ty=Tensor[(2, 660), float64] */;
  %10 = cast(%var_2300, dtype="float32") /* ty=Tensor[(168), float32] */;
  %11 = cast(%var_2299, dtype="float64") /* ty=Tensor[(2, 660), float64] */;
  %12 = reshape(%9, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %13 = reshape(%10, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %14 = reshape(%11, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %15 = @func_275(%12, %13, %14) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
  %16 = %7.0;
  %17 = %8.0;
  %18 = %15.2;
  (%16, %17, %18, %var_2299, %var_2300)
}

def @func_3163(%var_3136: Tensor[(1638), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(1638), int8], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
  %19 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %20 = cast(%var_3136, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %21 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(1638), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(1638), float32] */, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?), int8] */;
  %24 = right_shift(%22, %23) /* ty=Tensor[(1638), int8] */;
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %26 = reshape(%25, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
  %27 = @func_1116(%26) /* ty=(Tensor[(13, 9, 14), float32],) */;
  %28 = %27.0;
  %29 = cast(%28, dtype="int8") /* ty=Tensor[(13, 9, 14), int8] */;
  %30 = shape_of(%24, dtype="int32") /* ty=Tensor[(1), int32] */;
  %31 = cast(%24, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?), int8] */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %34 = reshape(%33, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
  %35 = %19.0;
  %36 = logical_xor(%31, %32) /* ty=Tensor[(1638), int8] */;
  %37 = @func_618(%34) /* ty=Tensor[(14, 9, 2), float32] */;
  (%35, %36, %37, meta[relay.Constant][1] /* ty=Tensor[(252), uint64] */)
}

def @func_5533(%var_5464: Tensor[(10, 7, 11), float64], %var_5465: Tensor[(10, 7, 11), float64], %var_5495: Tensor[(256), float32], %var_5496: Tensor[(512), float32]) -> (Tensor[(10, 7, 11), float64], Tensor[(7, 234), float32], Tensor[(14, 9, 2), float32], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64], Tensor[(13, 9, 14), float32], Tensor[(10, 7, 11), bool]) {
  %38 = cast(%var_5465, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %39 = shape_of(%var_5464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%var_5464, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %42 = cast(%var_5495, dtype="float32") /* ty=Tensor[(256), float32] */;
  %43 = cast(%var_5496, dtype="float32") /* ty=Tensor[(512), float32] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %45 = reshape(%42, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %46 = reshape(%43, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %47 = reshape(%44, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %48 = @func_2263(%45, %46, %47) /* ty=(Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 234), float32] */, dtype="float32") /* ty=Tensor[(7, 234), float32] */;
  %50 = reshape(%49, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
  %51 = @func_1116(%50) /* ty=(Tensor[(13, 9, 14), float32],) */;
  %52 = %51.0;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(13, 9, 14), float64] */;
  %54 = sqrt(%53) /* ty=Tensor[(13, 9, 14), float64] */;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
  %56 = cast(%var_5464, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %57 = shape_of(%var_5465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_5465, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %60 = divide(%40, %41) /* ty=Tensor[(10, 7, 11), float64] */;
  %61 = %48.2;
  %62 = sin(%55) /* ty=Tensor[(13, 9, 14), float32] */;
  %63 = less_equal(%58, %59) /* ty=Tensor[(10, 7, 11), bool] */;
  (%60, meta[relay.Constant][2] /* ty=Tensor[(7, 234), float32] */, %61, %var_5495, %var_5496, meta[relay.Constant][3] /* ty=Tensor[(252), uint64] */, %62, %63)
}

def @func_4533() -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %64 = @func_3459() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %65 = %64.0;
  %66 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
  %67 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  (%65, %66, %67)
}

def @func_4287(%var_4245: Tensor[(1320), float64]) -> (Tensor[(1320), float32], Tensor[(252), uint64], Tensor[(252), uint64]) {
  %68 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %69 = %68.3;
  %70 = cast(%var_4245, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(1), int32] */;
  %72 = cast(%69, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %74 = maximum(%72, %73) /* ty=Tensor[(1320), uint8] */;
  %75 = cast(%74, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %77 = reshape(%76, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %78 = @func_2840(%77) /* ty=(Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
  %79 = asinh(%75) /* ty=Tensor[(1320), float32] */;
  %80 = %78.3;
  (%79, %80, meta[relay.Constant][4] /* ty=Tensor[(252), uint64] */)
}

def @func_6975() -> Tensor[(16, 1, 4), float32] {
  @func_2127() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2094() -> (Tensor[(16, 1, 4), float32],) {
  %81 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  (%81,)
}

def @func_4005() -> (Tensor[(16, 1, 4), float32],) {
  %82 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %83 = %82.0;
  (%83,)
}

def @func_6643() -> (Tensor[(16, 1, 4), float32],) {
  %84 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %85 = %84.0;
  (%85,)
}

def @func_5116() -> (Tensor[(16, ?, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16]) {
  %86 = @func_4430() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %89 = asin(%88) /* ty=Tensor[(16, 1, 4), float32] */;
  %90 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %91 = %90.0;
  %92 = cast(%91, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %93 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%89, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %96 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %97 = cast(%87, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %98 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%89, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %101 = power(%99, %100) /* ty=Tensor[(16, ?, 4), float32] */;
  %102 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %103 = %102.0;
  %104 = cast(%103, dtype="int16") /* ty=Tensor[(16, 1, 4), int16] */;
  %105 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%101, dtype="int16") /* ty=Tensor[(16, ?, 4), int16] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %108 = not_equal(%94, %95) /* ty=Tensor[(16, ?, 4), bool] */;
  %109 = %96.0;
  %110 = subtract(%106, %107) /* ty=Tensor[(16, ?, 4), int16] */;
  (%108, %109, %110)
}

def @func_3283(%var_3245: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(1320), float64], Tensor[(1, 168), float32], Tensor[(11, 15, 8), bool], Tensor[(252), uint64], Tensor[(1638), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %111 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %112 = cast(%var_3245, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %114 = cast(%var_3245, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %115 = reshape(%112, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %116 = reshape(%113, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %117 = reshape(%114, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %118 = @func_275(%115, %116, %117) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
  %119 = %118.2;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 15, 8), bool] */, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %125 = reshape(%124, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
  %126 = @func_3163(%125) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(1638), int8], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
  %127 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %128 = %111.0;
  %129 = greater_equal(%122, %123) /* ty=Tensor[(11, 15, 8), bool] */;
  %130 = %126.3;
  %131 = %127.4;
  %132 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  %133 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%128, %var_3245, meta[relay.Constant][5] /* ty=Tensor[(1, 168), float32] */, %129, %130, meta[relay.Constant][7] /* ty=Tensor[(1638), float32] */, %131, %132, %133)
}

def @func_4080() -> (Tensor[(16, ?, 4), float64],) {
  %134 = @func_3459() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %135 = %134.0;
  %136 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %138 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%135, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %141 = floor_mod(%139, %140) /* ty=Tensor[(16, ?, 4), float64] */;
  (%141,)
}

def @func_6857() -> Tensor[(16, 1, 4), float32] {
  %142 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %142.0
}

def @func_1626() -> (Tensor[(16, 1, 4), float32],) {
  %143 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  (%143,)
}

def @func_5580() -> Tensor[(16, 1, 4), float32] {
  %144 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %144.0
}

def @func_1918(%var_1900: Tensor[(105), float64], %var_1901: Tensor[(364), int8], %var_1902: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) {
  %145 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %147 = reshape(%146, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
  %148 = @func_1116(%147) /* ty=(Tensor[(13, 9, 14), float32],) */;
  %149 = cast(%var_1900, dtype="float64") /* ty=Tensor[(105), float64] */;
  %150 = cast(%var_1901, dtype="int8") /* ty=Tensor[(364), int8] */;
  %151 = cast(%var_1902, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %152 = reshape(%149, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float64] */;
  %153 = reshape(%150, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %154 = reshape(%151, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %155 = @func_501(%152, %153, %154) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) */;
  %156 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %158 = sin(%157) /* ty=Tensor[(16, 1, 4), float32] */;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %160 = %145.0;
  %161 = %148.0;
  %162 = %155.4;
  %163 = exp(%159) /* ty=Tensor[(16, 1, 4), float32] */;
  (%160, %161, meta[relay.Constant][8] /* ty=Tensor[(1638), float32] */, %162, %var_1900, %var_1901, %var_1902, %163)
}

def @func_3531(%var_3526: Tensor[(128), uint64], %var_3528: Tensor[(1024), float32]) -> (Tensor[(1, 105), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(16, 16, 4), bool], Tensor[(128), uint64], Tensor[(4, 128), uint64], Tensor[(1024), float32]) {
  %164 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %165 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %166 = cast(%var_3526, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %167 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 128), uint64] */, dtype="uint64") /* ty=Tensor[(4, 128), uint64] */;
  %168 = cast(%var_3528, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %169 = cast(%var_3528, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %170 = reshape(%166, newshape=[128]) /* ty=Tensor[(128), uint64] */;
  %171 = reshape(%167, newshape=[512]) /* ty=Tensor[(512), uint64] */;
  %172 = reshape(%168, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
  %173 = reshape(%169, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), bool] */;
  %174 = @func_3433(%170, %171, %172, %173) /* ty=(Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) */;
  %175 = %164.1;
  %176 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %177 = %165.5;
  %178 = %174.6;
  (%175, %176, %177, %178, %var_3526, meta[relay.Constant][9] /* ty=Tensor[(4, 128), uint64] */, %var_3528)
}

def @func_4165(%var_4140: Tensor[(16, 3, 4), float32], %var_4150: Tensor[(364), int8], %var_4157: Tensor[(16, 3, 4), float32]) -> (Tensor[(16, 3, 4), bool], Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(16, 3, 4), float32]) {
  %179 = @func_3227() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %180 = %179.0;
  %181 = cast(%180, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %182 = cast(%var_4140, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %183 = cast(%var_4150, dtype="int8") /* ty=Tensor[(364), int8] */;
  %184 = cast(%var_4150, dtype="int8") /* ty=Tensor[(364), int8] */;
  %185 = reshape(%183, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %186 = reshape(%184, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %187 = cast(%var_4157, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
  %188 = shape_of(%var_4140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%var_4140, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %191 = greater(%181, %182) /* ty=Tensor[(16, 3, 4), bool] */;
  %192 = @func_448(%185, %186) /* ty=Tensor[(14, 2, 13), bool] */;
  %193 = divide(%189, %190) /* ty=Tensor[(16, 3, 4), float32] */;
  (%191, %192, %var_4150, %193)
}

def @func_1837() -> Tensor[(16, 1, 4), float32] {
  @func_1615() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_618(%var_594: Tensor[(14, 9, 2), uint64]) -> Tensor[(14, 9, 2), float32] {
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(14, 9, 2), uint64] */;
  %195 = shape_of(%var_594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_594, dtype="uint64") /* ty=Tensor[(14, 9, 2), uint64] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %198 = minimum(%196, %197) /* ty=Tensor[(14, 9, 2), uint64] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(14, 9, 2), float32] */;
  exp(%199) /* ty=Tensor[(14, 9, 2), float32] */
}

def @func_1116(%var_1109: Tensor[(13, 9, 14), float32]) -> (Tensor[(13, 9, 14), float32],) {
  %200 = cast(%var_1109, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
  %201 = rsqrt(%200) /* ty=Tensor[(13, 9, 14), float32] */;
  (%201,)
}

def @func_7224(%var_7162: Tensor[(16, 14, 4), float64]) -> (Tensor[(16, 7, 4), float64], Tensor[(16, 14, 4), float32], Tensor[(252), uint64], Tensor[(1, 252), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 14, 4), float64]) {
  %202 = @func_6416() /* ty=(Tensor[(16, 7, 4), float64], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
  %203 = @func_5116() /* ty=(Tensor[(16, ?, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16]) */;
  %204 = %203.2;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(16, ?, 4), float64] */;
  %206 = sigmoid(%205) /* ty=Tensor[(16, ?, 4), float64] */;
  %207 = cast(%206, dtype="uint64") /* ty=Tensor[(16, ?, 4), uint64] */;
  %208 = cast(%var_7162, dtype="uint64") /* ty=Tensor[(16, 14, 4), uint64] */;
  %209 = add(%207, %208) /* ty=Tensor[(16, 14, 4), uint64] */;
  %210 = cast(%209, dtype="int16") /* ty=Tensor[(16, 14, 4), int16] */;
  %211 = cast(%204, dtype="int16") /* ty=Tensor[(16, ?, 4), int16] */;
  %212 = bitwise_and(%210, %211) /* ty=Tensor[(16, 14, 4), int16] */;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
  %214 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 252), uint64] */, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
  %215 = reshape(%214, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %216 = @func_2840(%215) /* ty=(Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
  %217 = @func_5058() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %218 = cast(%212, dtype="uint8") /* ty=Tensor[(16, 14, 4), uint8] */;
  %219 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%209, dtype="uint8") /* ty=Tensor[(16, 14, 4), uint8] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %222 = minimum(%220, %221) /* ty=Tensor[(16, 14, 4), uint8] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(16, 14, 4), float64] */;
  %224 = %202.0;
  %225 = exp(%213) /* ty=Tensor[(16, 14, 4), float32] */;
  %226 = %216.3;
  %227 = %217.0;
  %228 = tan(%223) /* ty=Tensor[(16, 14, 4), float64] */;
  (%224, %225, %226, meta[relay.Constant][11] /* ty=Tensor[(1, 252), uint64] */, %227, %228)
}

def @func_3895() -> Tensor[(16, 1, 4), float32] {
  @func_3595() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_6117() -> (Tensor[(16, 1, 4), float32],) {
  %229 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
  (%229,)
}

def @func_6164(%var_6151: Tensor[(105), float64], %var_6152: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 7, 4), bool], Tensor[(252), uint64], Tensor[(105), float64], Tensor[(1320), float64]) {
  %230 = cast(meta[relay.Constant][12] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %231 = cast(%var_6151, dtype="float64") /* ty=Tensor[(105), float64] */;
  %232 = cast(%var_6152, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %233 = reshape(%230, newshape=[6, 42]) /* ty=Tensor[(6, 42), uint64] */;
  %234 = reshape(%231, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %235 = reshape(%232, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %236 = @func_3884(%233, %234, %235) /* ty=(Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) */;
  %237 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %238 = %236.1;
  (%237, %238, meta[relay.Constant][12] /* ty=Tensor[(252), uint64] */, %var_6151, %var_6152)
}

def @func_6777(%var_6767: Tensor[(128), float32], %var_6775: Tensor[(2240), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(10, 14, 16), float64], Tensor[(2240), float64]) {
  %239 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %240 = @func_4005() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %241 = cast(%var_6767, dtype="float32") /* ty=Tensor[(128), float32] */;
  %242 = cast(%var_6767, dtype="bool") /* ty=Tensor[(128), bool] */;
  %243 = reshape(%241, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %244 = reshape(%242, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), bool] */;
  %245 = @func_3341(%243, %244) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) */;
  %246 = cast(%var_6775, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %247 = cast(%var_6775, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %248 = reshape(%246, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %249 = reshape(%247, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
  %250 = @func_4498() /* ty=Tensor[(16, 1, 4), float32] */;
  %251 = %239.0;
  %252 = %240.0;
  %253 = %245.1;
  %254 = @func_970(%248, %249) /* ty=Tensor[(10, 14, 16), float64] */;
  (%250, %251, %252, %253, %var_6767, %254, %var_6775)
}

def @func_2540() -> Tensor[(16, 1, 4), float32] {
  @func_1837() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2570() -> (Tensor[(16, 1, 4), float32],) {
  %255 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  (%255,)
}

def @func_6306() -> (Tensor[(16, 1, 4), float32],) {
  %256 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %257 = %256.0;
  (%257,)
}

def @func_4318() -> (Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  %258 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %259 = cast(meta[relay.Constant][13] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %260 = cast(meta[relay.Constant][13] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %261 = reshape(%259, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %262 = reshape(%260, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %263 = %258.0;
  %264 = @func_448(%261, %262) /* ty=Tensor[(14, 2, 13), bool] */;
  (%263, %264, meta[relay.Constant][13] /* ty=Tensor[(364), int8] */)
}

def @func_2127() -> Tensor[(16, 1, 4), float32] {
  @func_1645() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_652(%var_639: Tensor[(7, 9, 8), uint64]) -> Tensor[(7, 9, 8), uint64] {
  %265 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %266 = cast(%var_639, dtype="uint64") /* ty=Tensor[(7, 9, 8), uint64] */;
  minimum(%265, %266) /* ty=Tensor[(7, 9, 8), uint64] */
}

def @func_2609(%var_2590: Tensor[(16, 5, 4), float32], %var_2603: Tensor[(364), int8]) -> (Tensor[(16, 5, 4), uint64], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  %267 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %268 = cast(%267, dtype="uint64") /* ty=Tensor[(16, 1, 4), uint64] */;
  %269 = cast(%var_2590, dtype="uint64") /* ty=Tensor[(16, 5, 4), uint64] */;
  %270 = cast(%var_2603, dtype="int8") /* ty=Tensor[(364), int8] */;
  %271 = cast(%var_2603, dtype="int8") /* ty=Tensor[(364), int8] */;
  %272 = reshape(%270, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %273 = reshape(%271, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %274 = bitwise_xor(%268, %269) /* ty=Tensor[(16, 5, 4), uint64] */;
  %275 = @func_448(%272, %273) /* ty=Tensor[(14, 2, 13), bool] */;
  (%274, %275, %var_2603)
}

def @func_3015() -> (Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) {
  %276 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
  %277 = cast(%276, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 2, 4), float32] */, dtype="bool") /* ty=Tensor[(16, 2, 4), bool] */;
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 110), float64] */, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %280 = cast(meta[relay.Constant][16] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %281 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 110), float64] */, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %282 = reshape(%279, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %283 = reshape(%280, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %284 = reshape(%281, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %285 = @func_275(%282, %283, %284) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
  %286 = %285.2;
  %287 = cast(%286, dtype="int32") /* ty=Tensor[(11, 15, 8), int32] */;
  %288 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(12, 110), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %289 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 110), float64] */, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %291 = logical_and(%277, %278) /* ty=Tensor[(16, 2, 4), bool] */;
  %292 = @func_2888() /* ty=Tensor[(16, 16, 4), float64] */;
  %293 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %294 = right_shift(%289, %290) /* ty=Tensor[(12, 110), int32] */;
  (%291, %292, meta[relay.Constant][16] /* ty=Tensor[(168), float32] */, %293, %294)
}

def @func_3493(%var_3488: Tensor[(3, 2, 14), uint32], %var_3489: Tensor[(3, 2, 14), uint32]) -> (Tensor[(3, 2, 14), bool],) {
  %295 = cast(%var_3489, dtype="bool") /* ty=Tensor[(3, 2, 14), bool] */;
  %296 = shape_of(%var_3488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_3488, dtype="bool") /* ty=Tensor[(3, 2, 14), bool] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %299 = greater(%297, %298) /* ty=Tensor[(3, 2, 14), bool] */;
  (%299,)
}

def @func_1615() -> Tensor[(16, 1, 4), float32] {
  %300 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  cosh(%300) /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2263(%var_2235: Tensor[(256), float32], %var_2236: Tensor[(512), float32], %var_2241: Tensor[(252), uint64]) -> (Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) {
  %301 = cast(%var_2241, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %302 = reshape(%301, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
  %303 = cast(%var_2235, dtype="float32") /* ty=Tensor[(256), float32] */;
  %304 = cast(%var_2236, dtype="float32") /* ty=Tensor[(512), float32] */;
  %305 = reshape(%303, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
  %306 = reshape(%304, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
  %307 = @func_2159(%305, %306) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 8, 4), uint32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */;
  %308 = %307.1;
  %309 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %310 = cast(%308, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %311 = cast(%309, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %312 = @func_618(%302) /* ty=Tensor[(14, 9, 2), float32] */;
  %313 = add(%310, %311) /* ty=Tensor[(16, 8, 4), float64] */;
  (%var_2235, %var_2236, %312, %var_2241, %313)
}

def @func_5058() -> (Tensor[(16, 1, 4), float32],) {
  %314 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %316 = erf(%315) /* ty=Tensor[(16, 1, 4), float32] */;
  (%316,)
}

def @func_6716(%var_6683: Tensor[(16, 8, 4), float32]) -> (Tensor[(16, 8, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %317 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="int64") /* ty=Tensor[(16, 1, 4), int64] */;
  %320 = cast(%var_6683, dtype="int64") /* ty=Tensor[(16, 8, 4), int64] */;
  %321 = bitwise_xor(%319, %320) /* ty=Tensor[(16, 8, 4), int64] */;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %323 = cosh(%322) /* ty=Tensor[(16, 8, 4), float64] */;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %325 = cast(%318, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %326 = @func_3227() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %327 = greater(%324, %325) /* ty=Tensor[(16, 8, 4), bool] */;
  %328 = %326.0;
  %329 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %330 = @func_5329() /* ty=Tensor[(16, 1, 4), float32] */;
  (%327, %328, %329, %330)
}

def @func_6827() -> (Tensor[(16, 1, 4), float32],) {
  %331 = @func_4035() /* ty=Tensor[(16, 1, 4), float32] */;
  (%331,)
}

def @func_2502(%var_2445: Tensor[(16, 13, 4), float32], %var_2483: Tensor[(512), float32]) -> (Tensor[(16, 13, 4), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 8, 4), float64], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64]) {
  %332 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
  %333 = cast(%332, dtype="uint64") /* ty=Tensor[(16, 1, 4), uint64] */;
  %334 = cast(%var_2445, dtype="uint64") /* ty=Tensor[(16, 13, 4), uint64] */;
  %335 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %336 = cast(%var_2483, dtype="float32") /* ty=Tensor[(512), float32] */;
  %337 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %338 = reshape(%335, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %339 = reshape(%336, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %340 = reshape(%337, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %341 = @func_2263(%338, %339, %340) /* ty=(Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) */;
  %342 = bitwise_and(%333, %334) /* ty=Tensor[(16, 13, 4), uint64] */;
  %343 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %344 = %341.4;
  (%342, %343, %344, meta[relay.Constant][19] /* ty=Tensor[(256), float32] */, %var_2483, meta[relay.Constant][20] /* ty=Tensor[(252), uint64] */)
}

def @func_3433(%var_3360: Tensor[(128), uint64], %var_3361: Tensor[(512), uint64], %var_3411: Tensor[(1024), float32], %var_3424: Tensor[(16, 16, 4), bool]) -> (Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) {
  %345 = cast(%var_3360, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %346 = cast(%var_3361, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %347 = reshape(%345, newshape=[8, 16, 1]) /* ty=Tensor[(8, 16, 1), uint64] */;
  %348 = reshape(%346, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %349 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %350 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %353 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%349, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = greater(%354, %355) /* ty=Tensor[(16, ?, 4), bool] */;
  %357 = cast(%349, dtype="int16") /* ty=Tensor[(16, 1, 4), int16] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="int16") /* ty=Tensor[(16, ?, 4), int16] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %361 = cast(%var_3360, dtype="float64") /* ty=Tensor[(128), float64] */;
  %362 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %363 = cast(%var_3411, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %364 = reshape(%363, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
  %365 = @func_2912(%364) /* ty=(Tensor[(16, 16, 4), bool],) */;
  %366 = %365.0;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %368 = reshape(%367, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
  %369 = @func_2912(%368) /* ty=(Tensor[(16, 16, 4), bool],) */;
  %370 = cast(%var_3424, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %371 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%366, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %374 = @func_3181(%347, %348) /* ty=Tensor[(8, 16, 4), uint64] */;
  %375 = bitwise_or(%359, %360) /* ty=Tensor[(16, ?, 4), int16] */;
  %376 = atanh(%361) /* ty=Tensor[(128), float64] */;
  %377 = %362.0;
  %378 = %369.0;
  %379 = less(%372, %373) /* ty=Tensor[(16, 16, 4), bool] */;
  (%374, %var_3361, %375, %376, %var_3411, %377, %378, %379)
}

def @func_5911(%var_5906: Tensor[(16, 6, 7), float32], %var_5907: Tensor[(16, 6, 7), float32]) -> Tensor[(16, 6, 7), float32] {
  %380 = cast(%var_5907, dtype="float32") /* ty=Tensor[(16, 6, 7), float32] */;
  %381 = shape_of(%var_5906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%var_5906, dtype="float32") /* ty=Tensor[(16, 6, 7), float32] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%382, %383) /* ty=Tensor[(16, 6, 7), float32] */
}

def @func_3089(%var_3053: Tensor[(16, 7, 4), float32]) -> (Tensor[(16, 7, 4), bool], Tensor[(16, 1, 4), float32]) {
  %384 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %385 = cast(%384, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %386 = cast(%var_3053, dtype="bool") /* ty=Tensor[(16, 7, 4), bool] */;
  %387 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %388 = less_equal(%385, %386) /* ty=Tensor[(16, 7, 4), bool] */;
  %389 = %387.0;
  (%388, %389)
}

def @func_4864(%var_4831: Tensor[(1024), float32], %var_4847: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(128), uint64], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), bool]) {
  %390 = cast(meta[relay.Constant][21] /* ty=Tensor[(128), uint64] */, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %391 = cast(%var_4831, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %392 = reshape(%390, newshape=[128]) /* ty=Tensor[(128), uint64] */;
  %393 = reshape(%391, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
  %394 = @func_3531(%392, %393) /* ty=(Tensor[(1, 105), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(16, 16, 4), bool], Tensor[(128), uint64], Tensor[(4, 128), uint64], Tensor[(1024), float32]) */;
  %395 = cast(%var_4847, dtype="float64") /* ty=Tensor[(105), float64] */;
  %396 = reshape(%395, newshape=[21, 5]) /* ty=Tensor[(21, 5), float64] */;
  %397 = @func_3761(%396) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) */;
  %398 = cast(%var_4831, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %399 = log10(%398) /* ty=Tensor[(1024), float64] */;
  %400 = cast(%var_4831, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(1), int32] */;
  %402 = cast(%399, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?), bool] */;
  %404 = @func_4546() /* ty=Tensor[(16, 1, 4), float32] */;
  %405 = %394.2;
  %406 = %397.1;
  %407 = greater(%402, %403) /* ty=Tensor[(1024), bool] */;
  (%404, %405, meta[relay.Constant][21] /* ty=Tensor[(128), uint64] */, %406, %var_4847, %407)
}

def @func_3239() -> (Tensor[(16, 1, 4), float32],) {
  %408 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  (%408,)
}

def @func_3341(%var_3320: Tensor[(16, 2, 4), float32], %var_3335: Tensor[(16, 2, 4), bool]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) {
  %409 = @func_3227() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %410 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  %411 = cast(%410, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %412 = cast(%var_3320, dtype="bool") /* ty=Tensor[(16, 2, 4), bool] */;
  %413 = greater_equal(%411, %412) /* ty=Tensor[(16, 2, 4), bool] */;
  %414 = cast(%var_3335, dtype="uint8") /* ty=Tensor[(16, 2, 4), uint8] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="uint8") /* ty=Tensor[(16, 2, 4), uint8] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %418 = %409.0;
  %419 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %420 = logical_xor(%416, %417) /* ty=Tensor[(16, 2, 4), uint8] */;
  (%418, %419, %420)
}

def @func_6416() -> (Tensor[(16, 7, 4), float64], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
  %421 = @func_4358() /* ty=(Tensor[(16, 7, 4), float64],) */;
  %422 = cast(meta[relay.Constant][22] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %423 = reshape(%422, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
  %424 = %421.0;
  %425 = @func_618(%423) /* ty=Tensor[(14, 9, 2), float32] */;
  (%424, %425, meta[relay.Constant][22] /* ty=Tensor[(252), uint64] */)
}

def @func_6084(%var_6041: Tensor[(128), uint64], %var_6043: Tensor[(1024), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16], Tensor[(128), uint64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(21, 5), float64], Tensor[(105), float64], Tensor[(16, 1, 4), float32], Tensor[(512, 1), float64]) {
  %426 = cast(%var_6041, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %427 = cast(meta[relay.Constant][23] /* ty=Tensor[(512, 1), uint64] */, dtype="uint64") /* ty=Tensor[(512, 1), uint64] */;
  %428 = cast(%var_6043, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %429 = cast(%var_6043, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %430 = reshape(%426, newshape=[128]) /* ty=Tensor[(128), uint64] */;
  %431 = reshape(%427, newshape=[512]) /* ty=Tensor[(512), uint64] */;
  %432 = reshape(%428, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
  %433 = reshape(%429, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), bool] */;
  %434 = @func_3433(%430, %431, %432, %433) /* ty=(Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) */;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
  %436 = reshape(%435, newshape=[21, 5]) /* ty=Tensor[(21, 5), float64] */;
  %437 = @func_3761(%436) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) */;
  %438 = cast(%var_6041, dtype="float32") /* ty=Tensor[(128), float32] */;
  %439 = reshape(%438, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %440 = @func_5629(%439) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) */;
  %441 = cast(meta[relay.Constant][23] /* ty=Tensor[(512, 1), uint64] */, dtype="float64") /* ty=Tensor[(512, 1), float64] */;
  %442 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
  %443 = %434.2;
  %444 = @func_5641() /* ty=Tensor[(16, 1, 4), float32] */;
  %445 = @func_5580() /* ty=Tensor[(16, 1, 4), float32] */;
  %446 = %437.2;
  %447 = %440.0;
  %448 = asinh(%441) /* ty=Tensor[(512, 1), float64] */;
  (%442, %443, %var_6041, %var_6043, %444, %445, %446, meta[relay.Constant][24] /* ty=Tensor[(105), float64] */, %447, %448)
}

def @func_6382() -> Tensor[(16, 1, 4), float32] {
  @func_4546() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_275(%var_235: Tensor[(11, 15, 8), float64], %var_255: Tensor[(168), float32], %var_269: Tensor[(11, 15, 8), float64]) -> (Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) {
  %449 = cast(%var_255, dtype="float32") /* ty=Tensor[(168), float32] */;
  %450 = cast(%var_255, dtype="float32") /* ty=Tensor[(168), float32] */;
  %451 = reshape(%449, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %452 = reshape(%450, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %453 = cast(%var_235, dtype="float64") /* ty=Tensor[(11, 15, 8), float64] */;
  %454 = sinh(%453) /* ty=Tensor[(11, 15, 8), float64] */;
  %455 = cast(%var_269, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %459 = @func_141(%451, %452) /* ty=Tensor[(4, 3, 14), uint64] */;
  %460 = equal(%457, %458) /* ty=Tensor[(11, 15, 8), bool] */;
  (%459, %var_255, %460)
}

def @func_6615() -> (Tensor[(16, 1, 4), float32],) {
  %461 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  (%461,)
}

def @func_2075(%var_2003: Tensor[(105), float64], %var_2005: Tensor[(1320), float64], %var_2007: Tensor[(91, 4), int8]) -> (Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(1320), float64], Tensor[(91, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int32]) {
  %462 = cast(%var_2003, dtype="float64") /* ty=Tensor[(105), float64] */;
  %463 = cast(meta[relay.Constant][25] /* ty=Tensor[(91, 4), int8] */, dtype="int8") /* ty=Tensor[(91, 4), int8] */;
  %464 = cast(%var_2005, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %465 = reshape(%462, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %466 = reshape(%463, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %467 = reshape(%464, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %468 = @func_1918(%465, %466, %467) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
  %469 = cast(%var_2007, dtype="bool") /* ty=Tensor[(91, 4), bool] */;
  %470 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(91, 4), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %471 = cast(meta[relay.Constant][25] /* ty=Tensor[(91, 4), int8] */, dtype="bool") /* ty=Tensor[(91, 4), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %473 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %474 = %473.0;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %476 = atanh(%475) /* ty=Tensor[(16, 1, 4), float32] */;
  %477 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %478 = cast(%477, dtype="int32") /* ty=Tensor[(16, 1, 4), int32] */;
  %479 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%476, dtype="int32") /* ty=Tensor[(16, 1, 4), int32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %482 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %483 = %468.5;
  %484 = logical_and(%471, %472) /* ty=Tensor[(91, 4), bool] */;
  %485 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %486 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %487 = right_shift(%480, %481) /* ty=Tensor[(16, ?, 4), int32] */;
  (%482, %483, %var_2003, %var_2005, %484, %485, %486, %487)
}

def @func_3595() -> Tensor[(16, 1, 4), float32] {
  @func_1645() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_4653(%var_4633: Tensor[(14, 2, 13), bool]) -> (Tensor[(14, 2, 13), uint16], Tensor[(14, 2, 13), float32]) {
  %488 = @func_4318() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */;
  %489 = %488.1;
  %490 = cast(%var_4633, dtype="uint16") /* ty=Tensor[(14, 2, 13), uint16] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="uint16") /* ty=Tensor[(14, 2, 13), uint16] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %494 = cast(%489, dtype="float32") /* ty=Tensor[(14, 2, 13), float32] */;
  %495 = bitwise_and(%492, %493) /* ty=Tensor[(14, 2, 13), uint16] */;
  %496 = rsqrt(%494) /* ty=Tensor[(14, 2, 13), float32] */;
  (%495, %496)
}

def @func_2652() -> (Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) {
  %497 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 105), float64] */, dtype="float64") /* ty=Tensor[(1, 105), float64] */;
  %498 = cast(meta[relay.Constant][27] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %499 = cast(meta[relay.Constant][28] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %500 = reshape(%497, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %501 = reshape(%498, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %502 = reshape(%499, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %503 = @func_1918(%500, %501, %502) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
  %504 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %506 = cast(meta[relay.Constant][29] /* ty=Tensor[(504), uint64] */, dtype="uint64") /* ty=Tensor[(504), uint64] */;
  %507 = reshape(%506, newshape=[7, 9, 8]) /* ty=Tensor[(7, 9, 8), uint64] */;
  %508 = %503.2;
  %509 = log(%505) /* ty=Tensor[(16, 1, 4), float32] */;
  %510 = @func_652(%507) /* ty=Tensor[(7, 9, 8), uint64] */;
  %511 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%508, meta[relay.Constant][26] /* ty=Tensor[(1, 105), float64] */, meta[relay.Constant][27] /* ty=Tensor[(364), int8] */, meta[relay.Constant][28] /* ty=Tensor[(1320), float64] */, %509, %510, meta[relay.Constant][29] /* ty=Tensor[(504), uint64] */, %511)
}

def @func_4546() -> Tensor[(16, 1, 4), float32] {
  %512 = @func_3204() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %512.0
}

def @func_970(%var_956: Tensor[(10, 14, 16), float64], %var_957: Tensor[(10, 14, 16), float64]) -> Tensor[(10, 14, 16), float64] {
  %513 = cast(%var_957, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %514 = shape_of(%var_956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_956, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%515, %516) /* ty=Tensor[(10, 14, 16), float64] */
}

def @func_7015() -> Tensor[(16, 1, 4), float32] {
  @func_1837() /* ty=Tensor[(16, 1, 4), float32] */
}

def @main(%var_7315: Tensor[(8, 8, 3), float32]) -> Tensor[(8, 8, 3), float32] {
  %517 = cast(%var_7315, dtype="float32") /* ty=Tensor[(8, 8, 3), float32] */;
  rsqrt(%517) /* ty=Tensor[(8, 8, 3), float32] */
}

def @func_1973(%var_1960: Tensor[(105), float64], %var_1962: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(4, 3, 14), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(7, 52), int8], Tensor[(1320), float64]) {
  %518 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %519 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %520 = reshape(%518, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %521 = reshape(%519, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %522 = @func_141(%520, %521) /* ty=Tensor[(4, 3, 14), uint64] */;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %524 = cast(%522, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %525 = reshape(%523, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %526 = reshape(%524, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %527 = cast(%var_1960, dtype="float64") /* ty=Tensor[(105), float64] */;
  %528 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 52), int8] */, dtype="int8") /* ty=Tensor[(7, 52), int8] */;
  %529 = cast(%var_1962, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %530 = reshape(%527, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %531 = reshape(%528, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %532 = reshape(%529, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %533 = @func_1918(%530, %531, %532) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
  %534 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %535 = @func_141(%525, %526) /* ty=Tensor[(4, 3, 14), uint64] */;
  %536 = %533.6;
  (%534, %522, meta[relay.Constant][30] /* ty=Tensor[(168), float32] */, %535, %536, %var_1960, meta[relay.Constant][31] /* ty=Tensor[(7, 52), int8] */, %var_1962)
}

def @func_3761(%var_3755: Tensor[(21, 5), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) {
  %537 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %538 = cast(%var_3755, dtype="float64") /* ty=Tensor[(21, 5), float64] */;
  %539 = cast(meta[relay.Constant][32] /* ty=Tensor[(364, 1), int8] */, dtype="int8") /* ty=Tensor[(364, 1), int8] */;
  %540 = cast(meta[relay.Constant][33] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %541 = reshape(%538, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float64] */;
  %542 = reshape(%539, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %543 = reshape(%540, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %544 = @func_501(%541, %542, %543) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) */;
  %545 = %537.0;
  %546 = %544.2;
  (%545, %546, %var_3755, meta[relay.Constant][32] /* ty=Tensor[(364, 1), int8] */, meta[relay.Constant][33] /* ty=Tensor[(1320), float64] */)
}

def @func_3227() -> (Tensor[(16, 1, 4), float32],) {
  %547 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%547,)
}

def @func_3204() -> (Tensor[(16, 1, 4), float32],) {
  %548 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%548,)
}

def @func_2840(%var_2828: Tensor[(252), uint64]) -> (Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
  %549 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %550 = cast(%var_2828, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %551 = reshape(%550, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
  %552 = %549.5;
  %553 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %554 = @func_618(%551) /* ty=Tensor[(14, 9, 2), float32] */;
  (%552, %553, %554, %var_2828)
}

def @func_1645() -> Tensor[(16, 1, 4), float32] {
  %555 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %555.0
}

def @func_3834() -> (Tensor[(16, 1, 4), float32],) {
  %556 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %559 = sinh(%558) /* ty=Tensor[(16, 1, 4), float32] */;
  (%559,)
}

def @func_2888() -> Tensor[(16, 16, 4), float64] {
  %560 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %562 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float64") /* ty=Tensor[(16, 16, 4), float64] */;
  floor_divide(%561, %562) /* ty=Tensor[(16, 16, 4), float64] */
}

def @func_4358() -> (Tensor[(16, 7, 4), float64],) {
  %563 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %564 = %563.0;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %566 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 7, 4), float32] */, dtype="float64") /* ty=Tensor[(16, 7, 4), float64] */;
  %567 = minimum(%565, %566) /* ty=Tensor[(16, 7, 4), float64] */;
  (%567,)
}

def @func_141(%var_74: Tensor[(4, 3, 14), float32], %var_75: Tensor[(4, 3, 14), float32]) -> Tensor[(4, 3, 14), uint64] {
  %568 = cast(%var_75, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %569 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%var_74, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %572 = divide(%570, %571) /* ty=Tensor[(4, 3, 14), float32] */;
  %573 = cast(%572, dtype="uint64") /* ty=Tensor[(4, 3, 14), uint64] */;
  %574 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_74, dtype="uint64") /* ty=Tensor[(4, 3, 14), uint64] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%575, %576) /* ty=Tensor[(4, 3, 14), uint64] */
}

def @func_5768() -> (Tensor[(16, 1, 4), float32],) {
  %577 = @func_4005() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %578 = %577.0;
  (%578,)
}

def @func_4035() -> Tensor[(16, 1, 4), float32] {
  @func_1837() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_501(%var_474: Tensor[(3, 7, 5), float64], %var_478: Tensor[(364), int8], %var_488: Tensor[(1320), float64]) -> (Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) {
  %579 = cast(%var_478, dtype="int8") /* ty=Tensor[(364), int8] */;
  %580 = cast(%var_478, dtype="int8") /* ty=Tensor[(364), int8] */;
  %581 = reshape(%579, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %582 = reshape(%580, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %583 = cast(%var_474, dtype="float64") /* ty=Tensor[(3, 7, 5), float64] */;
  %584 = log10(%583) /* ty=Tensor[(3, 7, 5), float64] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(3, 7, 5), float32] */;
  %586 = cast(%var_488, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %587 = cast(meta[relay.Constant][36] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %588 = cast(%var_488, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %589 = reshape(%586, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %590 = reshape(%587, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %591 = reshape(%588, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %592 = @func_275(%589, %590, %591) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
  %593 = @func_448(%581, %582) /* ty=Tensor[(14, 2, 13), bool] */;
  %594 = exp(%585) /* ty=Tensor[(3, 7, 5), float32] */;
  %595 = %592.1;
  (%593, %var_478, %594, %595, %var_488, meta[relay.Constant][36] /* ty=Tensor[(168), float32] */)
}

def @func_6568() -> (Tensor[(16, 3, 4), uint64],) {
  %596 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="uint64") /* ty=Tensor[(16, 1, 4), uint64] */;
  %599 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 3, 4), float32] */, dtype="uint64") /* ty=Tensor[(16, 3, 4), uint64] */;
  %600 = bitwise_xor(%598, %599) /* ty=Tensor[(16, 3, 4), uint64] */;
  (%600,)
}

def @func_7290(%var_7247: Tensor[(16, 12, 4), float32], %var_7280: Tensor[(512), float32]) -> (Tensor[(16, 12, 4), float64], Tensor[(13, 9, 14), float32], Tensor[(770), float64], Tensor[(256), float32], Tensor[(512), float32]) {
  %601 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %602 = cast(%601, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %603 = cast(%var_7247, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
  %604 = cast(meta[relay.Constant][38] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %605 = cast(meta[relay.Constant][38] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %606 = cast(meta[relay.Constant][39] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %607 = cast(%var_7280, dtype="float32") /* ty=Tensor[(512), float32] */;
  %608 = reshape(%604, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %609 = reshape(%605, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %610 = reshape(%606, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %611 = reshape(%607, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %612 = @func_5533(%608, %609, %610, %611) /* ty=(Tensor[(10, 7, 11), float64], Tensor[(7, 234), float32], Tensor[(14, 9, 2), float32], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64], Tensor[(13, 9, 14), float32], Tensor[(10, 7, 11), bool]) */;
  %613 = power(%602, %603) /* ty=Tensor[(16, 12, 4), float64] */;
  %614 = %612.6;
  (%613, %614, meta[relay.Constant][38] /* ty=Tensor[(770), float64] */, meta[relay.Constant][39] /* ty=Tensor[(256), float32] */, %var_7280)
}

def @func_3985() -> (Tensor[(16, 1, 4), float32],) {
  %615 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %616 = %615.4;
  (%616,)
}

def @func_4498() -> Tensor[(16, 1, 4), float32] {
  @func_2359() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_4908() -> (Tensor[(16, 1, 4), float32],) {
  %617 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%617,)
}

def @func_5705() -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), bool]) {
  %618 = @func_4005() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %619 = %618.0;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %621 = cast(%619, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %622 = cast(%619, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %623 = acosh(%622) /* ty=Tensor[(16, 1, 4), float32] */;
  %624 = @func_4430() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %625 = %624.0;
  %626 = cast(%625, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %627 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%623, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %630 = sqrt(%620) /* ty=Tensor[(16, 1, 4), float32] */;
  %631 = asinh(%621) /* ty=Tensor[(16, 1, 4), float64] */;
  %632 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %633 = equal(%628, %629) /* ty=Tensor[(16, ?, 4), bool] */;
  (%630, %631, %632, %633)
}

def @func_6009() -> (Tensor[(12, 110), int32], Tensor[(16, 1, 4), float32]) {
  %634 = @func_3015() /* ty=(Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) */;
  %635 = %634.4;
  %636 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  (%635, %636)
}

def @func_5641() -> Tensor[(16, 1, 4), float32] {
  %637 = @func_3985() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %637.0
}

def @func_6362(%var_6354: Tensor[(16, 2, 4), float32]) -> (Tensor[(16, 2, 4), bool],) {
  %638 = @func_4498() /* ty=Tensor[(16, 1, 4), float32] */;
  %639 = cast(%638, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %640 = cast(%var_6354, dtype="bool") /* ty=Tensor[(16, 2, 4), bool] */;
  %641 = logical_or(%639, %640) /* ty=Tensor[(16, 2, 4), bool] */;
  (%641,)
}

def @func_6935(%var_6900: Tensor[(15, 2, 1), float64]) -> (Tensor[(15, 2, ?), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %642 = cast(%var_6900, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  %643 = sinh(%642) /* ty=Tensor[(15, 2, 1), float64] */;
  %644 = cast(%var_6900, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %648 = floor_divide(%646, %647) /* ty=Tensor[(15, 2, ?), float32] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(15, 2, ?), float64] */;
  %650 = @func_5825() /* ty=(Tensor[(364), int8], Tensor[(16, 1, 4), float32]) */;
  %651 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %652 = atan(%649) /* ty=Tensor[(15, 2, ?), float64] */;
  %653 = %650.1;
  %654 = %651.0;
  (%652, %653, %654)
}

def @func_6320() -> Tensor[(16, 2, 4), bool] {
  %655 = @func_3015() /* ty=(Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) */;
  %655.0
}

def @func_6479(%var_6469: Tensor[(7, 3, 2), float32]) -> (Tensor[(7, 3, 2), float32],) {
  %656 = cast(%var_6469, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %657 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 3, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %660 = mod(%658, %659) /* ty=Tensor[(7, 3, 2), float32] */;
  (%660,)
}

def @func_2912(%var_2904: Tensor[(16, 16, 4), float32]) -> (Tensor[(16, 16, 4), bool],) {
  %661 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %662 = cast(%661, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %663 = cast(%var_2904, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %664 = less_equal(%662, %663) /* ty=Tensor[(16, 16, 4), bool] */;
  (%664,)
}

def @func_6514() -> (Tensor[(16, 1, 4), float32],) {
  %665 = @func_5058() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %666 = %665.0;
  (%666,)
}

def @func_5629(%var_5618: Tensor[(128), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) {
  %667 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %668 = cast(%var_5618, dtype="float32") /* ty=Tensor[(128), float32] */;
  %669 = cast(%var_5618, dtype="bool") /* ty=Tensor[(128), bool] */;
  %670 = reshape(%668, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %671 = reshape(%669, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), bool] */;
  %672 = @func_3341(%670, %671) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) */;
  %673 = cast(%var_5618, dtype="float32") /* ty=Tensor[(128), float32] */;
  %674 = %667.0;
  %675 = %672.0;
  %676 = cosh(%673) /* ty=Tensor[(128), float32] */;
  (%674, %675, %676)
}

def @func_6237(%var_6178: Tensor[(1, 11, 4), bool], %var_6222: Tensor[(168), float32]) -> (Tensor[(8, 11, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(11, 15, 8), bool], Tensor[(1320), float64], Tensor[(168), float32], Tensor[(8, 11, 4), uint32], Tensor[(16, 1, 4), float32]) {
  %677 = cast(%var_6178, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
  %678 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 11, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %679 = logical_or(%677, %678) /* ty=Tensor[(8, 11, 4), bool] */;
  %680 = cast(%679, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
  %681 = log10(%680) /* ty=Tensor[(8, 11, 4), float64] */;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
  %683 = @func_4533() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */;
  %684 = cast(meta[relay.Constant][42] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %685 = reshape(%684, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %686 = @func_5629(%685) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) */;
  %687 = cast(meta[relay.Constant][43] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %688 = cast(%var_6222, dtype="float32") /* ty=Tensor[(168), float32] */;
  %689 = cast(meta[relay.Constant][43] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %690 = reshape(%687, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %691 = reshape(%688, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %692 = reshape(%689, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %693 = @func_275(%690, %691, %692) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
  %694 = cast(%679, dtype="uint32") /* ty=Tensor[(8, 11, 4), uint32] */;
  %695 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%681, dtype="uint32") /* ty=Tensor[(8, 11, 4), uint32] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %698 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %699 = sigmoid(%682) /* ty=Tensor[(8, 11, 4), float64] */;
  %700 = %683.1;
  %701 = %686.0;
  %702 = %693.2;
  %703 = multiply(%696, %697) /* ty=Tensor[(8, 11, 4), uint32] */;
  %704 = %698.0;
  (%699, %700, %701, meta[relay.Constant][42] /* ty=Tensor[(128), float32] */, %702, meta[relay.Constant][43] /* ty=Tensor[(1320), float64] */, %var_6222, %703, %704)
}

def @func_4714(%var_4668: float64, %var_4669: Tensor[(2, 3, 10), float64], %var_4676: Tensor[(1024), float32], %var_4686: Tensor[(1320), float64]) -> (Tensor[(2, 3, 10), float32], Tensor[(16, 16, 4), bool], Tensor[(1024), float32], Tensor[(252), uint64], Tensor[(1320), float64], Tensor[(2, 3, 10), float32]) {
  %705 = cast(%var_4668, dtype="float64") /* ty=float64 */;
  %706 = cast(%var_4669, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
  %707 = multiply(%705, %706) /* ty=Tensor[(2, 3, 10), float64] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %709 = cast(%var_4676, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %710 = reshape(%709, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
  %711 = @func_2912(%710) /* ty=(Tensor[(16, 16, 4), bool],) */;
  %712 = cast(%var_4686, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %713 = reshape(%712, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %714 = @func_3283(%713) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(1320), float64], Tensor[(1, 168), float32], Tensor[(11, 15, 8), bool], Tensor[(252), uint64], Tensor[(1638), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */;
  %715 = cast(%707, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %716 = acos(%708) /* ty=Tensor[(2, 3, 10), float32] */;
  %717 = %711.0;
  %718 = %714.4;
  %719 = log(%715) /* ty=Tensor[(2, 3, 10), float32] */;
  (%716, %717, %var_4676, %718, %var_4686, %719)
}

def @func_2359() -> Tensor[(16, 1, 4), float32] {
  %720 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %722 = cos(%721) /* ty=Tensor[(16, 1, 4), float64] */;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  log10(%723) /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_5329() -> Tensor[(16, 1, 4), float32] {
  @func_4546() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_5428(%var_5408: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), float32]) {
  %724 = cast(meta[relay.Constant][44] /* ty=Tensor[(1024), float32] */, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %725 = cast(%var_5408, dtype="float64") /* ty=Tensor[(105), float64] */;
  %726 = reshape(%724, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
  %727 = reshape(%725, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %728 = @func_4864(%726, %727) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(128), uint64], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), bool]) */;
  %729 = cast(meta[relay.Constant][44] /* ty=Tensor[(1024), float32] */, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %730 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
  %731 = %728.3;
  %732 = atan(%729) /* ty=Tensor[(1024), float32] */;
  (%730, %731, %var_5408, %732)
}

def @func_6871() -> Tensor[(16, 1, 4), float32] {
  %733 = @func_5058() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %733.0
}

def @func_7079(%var_7045: Tensor[(182, 2), int8], %var_7070: Tensor[(1024), float32]) -> (Tensor[(12, 110), int32], Tensor[(364), int8], Tensor[(182, 2), int8], Tensor[(8, 105), bool], Tensor[(16, 16, 4), int64]) {
  %734 = @func_6009() /* ty=(Tensor[(12, 110), int32], Tensor[(16, 1, 4), float32]) */;
  %735 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 105), float64] */, dtype="float64") /* ty=Tensor[(1, 105), float64] */;
  %736 = cast(%var_7045, dtype="int8") /* ty=Tensor[(182, 2), int8] */;
  %737 = %734.0;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %739 = reshape(%735, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float64] */;
  %740 = reshape(%736, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %741 = reshape(%738, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %742 = @func_501(%739, %740, %741) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) */;
  %743 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 105), float64] */, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
  %744 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 105), float64] */, dtype="bool") /* ty=Tensor[(8, 105), bool] */;
  %745 = cast(%var_7070, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %746 = reshape(%745, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
  %747 = @func_2912(%746) /* ty=(Tensor[(16, 16, 4), bool],) */;
  %748 = %747.0;
  %749 = cast(%var_7070, dtype="int64") /* ty=Tensor[(1024), int64] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="int64") /* ty=Tensor[(16, 16, 4), int64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %753 = %742.1;
  %754 = less(%743, %744) /* ty=Tensor[(8, 105), bool] */;
  %755 = bitwise_or(%751, %752) /* ty=Tensor[(16, 16, 4), int64] */;
  (%737, %753, %var_7045, %754, %755)
}

def @func_2182(%var_2178: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(182, 2), int8], Tensor[(1320), float64]) {
  %756 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %758 = cast(%var_2178, dtype="float64") /* ty=Tensor[(105), float64] */;
  %759 = cast(meta[relay.Constant][47] /* ty=Tensor[(182, 2), int8] */, dtype="int8") /* ty=Tensor[(182, 2), int8] */;
  %760 = cast(meta[relay.Constant][48] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %761 = reshape(%758, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %762 = reshape(%759, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %763 = reshape(%760, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %764 = @func_1918(%761, %762, %763) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
  %765 = atan(%757) /* ty=Tensor[(16, 1, 4), float32] */;
  %766 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %767 = %764.5;
  (%765, %766, %767, %var_2178, meta[relay.Constant][47] /* ty=Tensor[(182, 2), int8] */, meta[relay.Constant][48] /* ty=Tensor[(1320), float64] */)
}

def @func_5898(%var_5888: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), float64], Tensor[(16, ?, 4), uint32], Tensor[(3, 84), uint64], Tensor[(105), float64], Tensor[(1320), float64]) {
  %768 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  %769 = cast(%768, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %770 = rsqrt(%769) /* ty=Tensor[(16, 1, 4), float64] */;
  %771 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 1, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %775 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 84), uint64] */, dtype="uint64") /* ty=Tensor[(3, 84), uint64] */;
  %776 = cast(%var_5888, dtype="float64") /* ty=Tensor[(105), float64] */;
  %777 = cast(meta[relay.Constant][51] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %778 = reshape(%775, newshape=[6, 42]) /* ty=Tensor[(6, 42), uint64] */;
  %779 = reshape(%776, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %780 = reshape(%777, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %781 = @func_3884(%778, %779, %780) /* ty=(Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) */;
  %782 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %783 = floor_divide(%773, %774) /* ty=Tensor[(16, ?, 4), float64] */;
  %784 = %781.0;
  (%782, %783, %784, meta[relay.Constant][50] /* ty=Tensor[(3, 84), uint64] */, %var_5888, meta[relay.Constant][51] /* ty=Tensor[(1320), float64] */)
}

def @func_3181(%var_3176: Tensor[(8, 16, 1), uint64], %var_3177: Tensor[(8, 16, 4), uint64]) -> Tensor[(8, 16, 4), uint64] {
  %785 = cast(%var_3176, dtype="uint64") /* ty=Tensor[(8, 16, 1), uint64] */;
  %786 = cast(%var_3177, dtype="uint64") /* ty=Tensor[(8, 16, 4), uint64] */;
  multiply(%785, %786) /* ty=Tensor[(8, 16, 4), uint64] */
}

def @func_3884(%var_3872: Tensor[(6, 42), uint64], %var_3875: Tensor[(105), float64], %var_3876: Tensor[(1320), float64]) -> (Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) {
  %787 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %788 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %789 = cast(%788, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
  %790 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%787, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %793 = cast(meta[relay.Constant][52] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %794 = reshape(%793, newshape=[16, 7, 4]) /* ty=Tensor[(16, 7, 4), float32] */;
  %795 = @func_3089(%794) /* ty=(Tensor[(16, 7, 4), bool], Tensor[(16, 1, 4), float32]) */;
  %796 = cast(%var_3872, dtype="uint64") /* ty=Tensor[(6, 42), uint64] */;
  %797 = reshape(%796, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %798 = @func_2840(%797) /* ty=(Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
  %799 = cast(%var_3875, dtype="float64") /* ty=Tensor[(105), float64] */;
  %800 = cast(%var_3876, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %801 = reshape(%799, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %802 = reshape(%800, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %803 = @func_1973(%801, %802) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(4, 3, 14), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(7, 52), int8], Tensor[(1320), float64]) */;
  %804 = bitwise_xor(%791, %792) /* ty=Tensor[(16, ?, 4), uint32] */;
  %805 = %795.0;
  %806 = %798.0;
  %807 = %803.7;
  (%804, %805, meta[relay.Constant][52] /* ty=Tensor[(448), float32] */, %806, %var_3872, %807, %var_3875, %var_3876)
}

def @func_5593() -> (Tensor[(16, 1, 4), float32],) {
  %808 = @func_5329() /* ty=Tensor[(16, 1, 4), float32] */;
  (%808,)
}

def @func_5187(%var_5170: Tensor[(1638), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32]) {
  %809 = cast(%var_5170, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %810 = reshape(%809, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
  %811 = @func_1116(%810) /* ty=(Tensor[(13, 9, 14), float32],) */;
  %812 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
  %813 = %811.0;
  (%812, %813, %var_5170)
}

def @func_4430() -> (Tensor[(16, 1, 4), float32],) {
  %814 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%814,)
}

def @func_3459() -> (Tensor[(16, 1, 4), float32],) {
  %815 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  (%815,)
}

def @func_2159(%var_2131: Tensor[(16, 4, 4), float32], %var_2139: Tensor[(16, 8, 4), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 8, 4), uint32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  %816 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %817 = cast(%816, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %818 = cast(%var_2131, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %819 = cast(%816, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
  %820 = cast(%var_2139, dtype="uint32") /* ty=Tensor[(16, 8, 4), uint32] */;
  %821 = cast(meta[relay.Constant][53] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %822 = cast(meta[relay.Constant][53] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %823 = reshape(%821, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %824 = reshape(%822, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %825 = subtract(%817, %818) /* ty=Tensor[(16, 4, 4), float32] */;
  %826 = right_shift(%819, %820) /* ty=Tensor[(16, 8, 4), uint32] */;
  %827 = @func_448(%823, %824) /* ty=Tensor[(14, 2, 13), bool] */;
  (%825, %826, %827, meta[relay.Constant][53] /* ty=Tensor[(364), int8] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6364(%var_6363: Tensor[(16, 2, 4), float32]) -> (Tensor[(16, 2, 4), bool],) {
  %4 = fn (%var_6354: Tensor[(16, 2, 4), float32]) -> (Tensor[(16, 2, 4), bool],) {
    %0 = @func_4498() /* ty=Tensor[(16, 1, 4), float32] */;
    %1 = cast(%0, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
    %2 = cast(%var_6354, dtype="bool") /* ty=Tensor[(16, 2, 4), bool] */;
    %3 = logical_or(%1, %2) /* ty=Tensor[(16, 2, 4), bool] */;
    (%3,)
  };
  %4(%var_6363) /* ty=(Tensor[(16, 2, 4), bool],) */
}

def @func_2502(%var_2445: Tensor[(16, 13, 4), float32], %var_2483: Tensor[(512), float32]) -> (Tensor[(16, 13, 4), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 8, 4), float64], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64]) {
  %5 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
  %6 = cast(%5, dtype="uint64") /* ty=Tensor[(16, 1, 4), uint64] */;
  %7 = cast(%var_2445, dtype="uint64") /* ty=Tensor[(16, 13, 4), uint64] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %9 = cast(%var_2483, dtype="float32") /* ty=Tensor[(512), float32] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %11 = reshape(%8, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %12 = reshape(%9, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %13 = reshape(%10, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %14 = @func_2263(%11, %12, %13) /* ty=(Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) */;
  %15 = bitwise_and(%6, %7) /* ty=Tensor[(16, 13, 4), uint64] */;
  %16 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %17 = %14.4;
  (%15, %16, %17, meta[relay.Constant][0] /* ty=Tensor[(256), float32] */, %var_2483, meta[relay.Constant][1] /* ty=Tensor[(252), uint64] */)
}

def @func_6780(%var_6778: Tensor[(128), float32], %var_6779: Tensor[(2240), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(10, 14, 16), float64], Tensor[(2240), float64]) {
  %34 = fn (%var_6767: Tensor[(128), float32], %var_6775: Tensor[(2240), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(10, 14, 16), float64], Tensor[(2240), float64]) {
    %18 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %19 = @func_4005() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %20 = cast(%var_6767, dtype="float32") /* ty=Tensor[(128), float32] */;
    %21 = cast(%var_6767, dtype="bool") /* ty=Tensor[(128), bool] */;
    %22 = reshape(%20, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
    %23 = reshape(%21, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), bool] */;
    %24 = @func_3341(%22, %23) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) */;
    %25 = cast(%var_6775, dtype="float64") /* ty=Tensor[(2240), float64] */;
    %26 = cast(%var_6775, dtype="float64") /* ty=Tensor[(2240), float64] */;
    %27 = reshape(%25, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
    %28 = reshape(%26, newshape=[10, 14, 16]) /* ty=Tensor[(10, 14, 16), float64] */;
    %29 = @func_4498() /* ty=Tensor[(16, 1, 4), float32] */;
    %30 = %18.0;
    %31 = %19.0;
    %32 = %24.1;
    %33 = @func_970(%27, %28) /* ty=Tensor[(10, 14, 16), float64] */;
    (%29, %30, %31, %32, %var_6767, %33, %var_6775)
  };
  %34(%var_6778, %var_6779) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(10, 14, 16), float64], Tensor[(2240), float64]) */
}

def @func_3459() -> (Tensor[(16, 1, 4), float32],) {
  %35 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  (%35,)
}

def @func_6935(%var_6900: Tensor[(15, 2, 1), float64]) -> (Tensor[(15, 2, ?), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %36 = cast(%var_6900, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  %37 = sinh(%36) /* ty=Tensor[(15, 2, 1), float64] */;
  %38 = cast(%var_6900, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %42 = floor_divide(%40, %41) /* ty=Tensor[(15, 2, ?), float32] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(15, 2, ?), float64] */;
  %44 = @func_5825() /* ty=(Tensor[(364), int8], Tensor[(16, 1, 4), float32]) */;
  %45 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %46 = atan(%43) /* ty=Tensor[(15, 2, ?), float64] */;
  %47 = %44.1;
  %48 = %45.0;
  (%46, %47, %48)
}

def @func_2890() -> Tensor[(16, 16, 4), float64] {
  @func_2888() /* ty=Tensor[(16, 16, 4), float64] */
}

def @func_3228() -> (Tensor[(16, 1, 4), float32],) {
  %50 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %49 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
    (%49,)
  };
  %50() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_3433(%var_3360: Tensor[(128), uint64], %var_3361: Tensor[(512), uint64], %var_3411: Tensor[(1024), float32], %var_3424: Tensor[(16, 16, 4), bool]) -> (Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) {
  %51 = cast(%var_3360, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %52 = cast(%var_3361, dtype="uint64") /* ty=Tensor[(512), uint64] */;
  %53 = reshape(%51, newshape=[8, 16, 1]) /* ty=Tensor[(8, 16, 1), uint64] */;
  %54 = reshape(%52, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), uint64] */;
  %55 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %56 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %59 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%55, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %62 = greater(%60, %61) /* ty=Tensor[(16, ?, 4), bool] */;
  %63 = cast(%55, dtype="int16") /* ty=Tensor[(16, 1, 4), int16] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="int16") /* ty=Tensor[(16, ?, 4), int16] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %67 = cast(%var_3360, dtype="float64") /* ty=Tensor[(128), float64] */;
  %68 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %69 = cast(%var_3411, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %70 = reshape(%69, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
  %71 = @func_2912(%70) /* ty=(Tensor[(16, 16, 4), bool],) */;
  %72 = %71.0;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %74 = reshape(%73, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
  %75 = @func_2912(%74) /* ty=(Tensor[(16, 16, 4), bool],) */;
  %76 = cast(%var_3424, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %77 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%72, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %80 = @func_3181(%53, %54) /* ty=Tensor[(8, 16, 4), uint64] */;
  %81 = bitwise_or(%65, %66) /* ty=Tensor[(16, ?, 4), int16] */;
  %82 = atanh(%67) /* ty=Tensor[(128), float64] */;
  %83 = %68.0;
  %84 = %75.0;
  %85 = less(%78, %79) /* ty=Tensor[(16, 16, 4), bool] */;
  (%80, %var_3361, %81, %82, %var_3411, %83, %84, %85)
}

def @func_3597() -> Tensor[(16, 1, 4), float32] {
  @func_3595() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_505(%var_502: Tensor[(3, 7, 5), float64], %var_503: Tensor[(364), int8], %var_504: Tensor[(1320), float64]) -> (Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) {
  %103 = fn (%var_474: Tensor[(3, 7, 5), float64], %var_478: Tensor[(364), int8], %var_488: Tensor[(1320), float64]) -> (Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) {
    %86 = cast(%var_478, dtype="int8") /* ty=Tensor[(364), int8] */;
    %87 = cast(%var_478, dtype="int8") /* ty=Tensor[(364), int8] */;
    %88 = reshape(%86, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
    %89 = reshape(%87, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
    %90 = cast(%var_474, dtype="float64") /* ty=Tensor[(3, 7, 5), float64] */;
    %91 = log10(%90) /* ty=Tensor[(3, 7, 5), float64] */;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(3, 7, 5), float32] */;
    %93 = cast(%var_488, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %94 = cast(meta[relay.Constant][2] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %95 = cast(%var_488, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %96 = reshape(%93, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
    %97 = reshape(%94, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %98 = reshape(%95, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
    %99 = @func_275(%96, %97, %98) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
    %100 = @func_448(%88, %89) /* ty=Tensor[(14, 2, 13), bool] */;
    %101 = exp(%92) /* ty=Tensor[(3, 7, 5), float32] */;
    %102 = %99.1;
    (%100, %var_478, %101, %102, %var_488, meta[relay.Constant][2] /* ty=Tensor[(168), float32] */)
  };
  %103(%var_502, %var_503, %var_504) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) */
}

def @func_452(%var_450: Tensor[(14, 2, 13), int8], %var_451: Tensor[(14, 2, 13), int8]) -> Tensor[(14, 2, 13), bool] {
  @func_448(%var_450, %var_451) /* ty=Tensor[(14, 2, 13), bool] */
}

def @func_4081() -> (Tensor[(16, ?, 4), float64],) {
  %112 = fn () -> (Tensor[(16, ?, 4), float64],) {
    %104 = @func_3459() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %105 = %104.0;
    %106 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
    %107 = cast(%106, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
    %108 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%105, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %111 = floor_mod(%109, %110) /* ty=Tensor[(16, ?, 4), float64] */;
    (%111,)
  };
  %112() /* ty=(Tensor[(16, ?, 4), float64],) */
}

def @func_6087(%var_6085: Tensor[(128), uint64], %var_6086: Tensor[(1024), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16], Tensor[(128), uint64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(21, 5), float64], Tensor[(105), float64], Tensor[(16, 1, 4), float32], Tensor[(512, 1), float64]) {
  %136 = fn (%var_6041: Tensor[(128), uint64], %var_6043: Tensor[(1024), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16], Tensor[(128), uint64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(21, 5), float64], Tensor[(105), float64], Tensor[(16, 1, 4), float32], Tensor[(512, 1), float64]) {
    %113 = cast(%var_6041, dtype="uint64") /* ty=Tensor[(128), uint64] */;
    %114 = cast(meta[relay.Constant][3] /* ty=Tensor[(512, 1), uint64] */, dtype="uint64") /* ty=Tensor[(512, 1), uint64] */;
    %115 = cast(%var_6043, dtype="float32") /* ty=Tensor[(1024), float32] */;
    %116 = cast(%var_6043, dtype="bool") /* ty=Tensor[(1024), bool] */;
    %117 = reshape(%113, newshape=[128]) /* ty=Tensor[(128), uint64] */;
    %118 = reshape(%114, newshape=[512]) /* ty=Tensor[(512), uint64] */;
    %119 = reshape(%115, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
    %120 = reshape(%116, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), bool] */;
    %121 = @func_3433(%117, %118, %119, %120) /* ty=(Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) */;
    %122 = cast(meta[relay.Constant][4] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
    %123 = reshape(%122, newshape=[21, 5]) /* ty=Tensor[(21, 5), float64] */;
    %124 = @func_3761(%123) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) */;
    %125 = cast(%var_6041, dtype="float32") /* ty=Tensor[(128), float32] */;
    %126 = reshape(%125, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %127 = @func_5629(%126) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) */;
    %128 = cast(meta[relay.Constant][3] /* ty=Tensor[(512, 1), uint64] */, dtype="float64") /* ty=Tensor[(512, 1), float64] */;
    %129 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
    %130 = %121.2;
    %131 = @func_5641() /* ty=Tensor[(16, 1, 4), float32] */;
    %132 = @func_5580() /* ty=Tensor[(16, 1, 4), float32] */;
    %133 = %124.2;
    %134 = %127.0;
    %135 = asinh(%128) /* ty=Tensor[(512, 1), float64] */;
    (%129, %130, %var_6041, %var_6043, %131, %132, %133, meta[relay.Constant][4] /* ty=Tensor[(105), float64] */, %134, %135)
  };
  %136(%var_6085, %var_6086) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16], Tensor[(128), uint64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(21, 5), float64], Tensor[(105), float64], Tensor[(16, 1, 4), float32], Tensor[(512, 1), float64]) */
}

def @func_1923(%var_1920: Tensor[(105), float64], %var_1921: Tensor[(364), int8], %var_1922: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) {
  @func_1918(%var_1920, %var_1921, %var_1922) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */
}

def @func_2267(%var_2264: Tensor[(256), float32], %var_2265: Tensor[(512), float32], %var_2266: Tensor[(252), uint64]) -> (Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) {
  %150 = fn (%var_2235: Tensor[(256), float32], %var_2236: Tensor[(512), float32], %var_2241: Tensor[(252), uint64]) -> (Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) {
    %137 = cast(%var_2241, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %138 = reshape(%137, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
    %139 = cast(%var_2235, dtype="float32") /* ty=Tensor[(256), float32] */;
    %140 = cast(%var_2236, dtype="float32") /* ty=Tensor[(512), float32] */;
    %141 = reshape(%139, newshape=[16, 4, 4]) /* ty=Tensor[(16, 4, 4), float32] */;
    %142 = reshape(%140, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), float32] */;
    %143 = @func_2159(%141, %142) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 8, 4), uint32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */;
    %144 = %143.1;
    %145 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
    %146 = cast(%144, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
    %147 = cast(%145, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
    %148 = @func_618(%138) /* ty=Tensor[(14, 9, 2), float32] */;
    %149 = add(%146, %147) /* ty=Tensor[(16, 8, 4), float64] */;
    (%var_2235, %var_2236, %148, %var_2241, %149)
  };
  %150(%var_2264, %var_2265, %var_2266) /* ty=(Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) */
}

def @func_4535() -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  @func_4533() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */
}

def @func_6481(%var_6480: Tensor[(7, 3, 2), float32]) -> (Tensor[(7, 3, 2), float32],) {
  %156 = fn (%var_6469: Tensor[(7, 3, 2), float32]) -> (Tensor[(7, 3, 2), float32],) {
    %151 = cast(%var_6469, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
    %152 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(7, 3, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %155 = mod(%153, %154) /* ty=Tensor[(7, 3, 2), float32] */;
    (%155,)
  };
  %156(%var_6480) /* ty=(Tensor[(7, 3, 2), float32],) */
}

def @func_1616() -> Tensor[(16, 1, 4), float32] {
  %158 = fn () -> Tensor[(16, 1, 4), float32] {
    %157 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    cosh(%157) /* ty=Tensor[(16, 1, 4), float32] */
  };
  %158() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_275(%var_235: Tensor[(11, 15, 8), float64], %var_255: Tensor[(168), float32], %var_269: Tensor[(11, 15, 8), float64]) -> (Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) {
  %159 = cast(%var_255, dtype="float32") /* ty=Tensor[(168), float32] */;
  %160 = cast(%var_255, dtype="float32") /* ty=Tensor[(168), float32] */;
  %161 = reshape(%159, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %162 = reshape(%160, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
  %163 = cast(%var_235, dtype="float64") /* ty=Tensor[(11, 15, 8), float64] */;
  %164 = sinh(%163) /* ty=Tensor[(11, 15, 8), float64] */;
  %165 = cast(%var_269, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = @func_141(%161, %162) /* ty=Tensor[(4, 3, 14), uint64] */;
  %170 = equal(%167, %168) /* ty=Tensor[(11, 15, 8), bool] */;
  (%169, %var_255, %170)
}

def @func_5825() -> (Tensor[(364), int8], Tensor[(16, 1, 4), float32]) {
  %171 = @func_4318() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */;
  %172 = %171.2;
  %173 = @func_3895() /* ty=Tensor[(16, 1, 4), float32] */;
  (%172, %173)
}

def @func_6859() -> Tensor[(16, 1, 4), float32] {
  @func_6857() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3987() -> (Tensor[(16, 1, 4), float32],) {
  @func_3985() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_4547() -> Tensor[(16, 1, 4), float32] {
  %175 = fn () -> Tensor[(16, 1, 4), float32] {
    %174 = @func_3204() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %174.0
  };
  %175() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_4533() -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %176 = @func_3459() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %177 = %176.0;
  %178 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
  %179 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  (%177, %178, %179)
}

def @func_3344(%var_3342: Tensor[(16, 2, 4), float32], %var_3343: Tensor[(16, 2, 4), bool]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) {
  %192 = fn (%var_3320: Tensor[(16, 2, 4), float32], %var_3335: Tensor[(16, 2, 4), bool]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) {
    %180 = @func_3227() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %181 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
    %182 = cast(%181, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
    %183 = cast(%var_3320, dtype="bool") /* ty=Tensor[(16, 2, 4), bool] */;
    %184 = greater_equal(%182, %183) /* ty=Tensor[(16, 2, 4), bool] */;
    %185 = cast(%var_3335, dtype="uint8") /* ty=Tensor[(16, 2, 4), uint8] */;
    %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %187 = cast(%184, dtype="uint8") /* ty=Tensor[(16, 2, 4), uint8] */;
    %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %189 = %180.0;
    %190 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
    %191 = logical_xor(%187, %188) /* ty=Tensor[(16, 2, 4), uint8] */;
    (%189, %190, %191)
  };
  %192(%var_3342, %var_3343) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) */
}

def @func_3835() -> (Tensor[(16, 1, 4), float32],) {
  %197 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %193 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %194 = %193.0;
    %195 = cast(%194, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    %196 = sinh(%195) /* ty=Tensor[(16, 1, 4), float32] */;
    (%196,)
  };
  %197() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_5580() -> Tensor[(16, 1, 4), float32] {
  %198 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %198.0
}

def @func_5595() -> (Tensor[(16, 1, 4), float32],) {
  @func_5593() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_5914(%var_5912: Tensor[(16, 6, 7), float32], %var_5913: Tensor[(16, 6, 7), float32]) -> Tensor[(16, 6, 7), float32] {
  %203 = fn (%var_5906: Tensor[(16, 6, 7), float32], %var_5907: Tensor[(16, 6, 7), float32]) -> Tensor[(16, 6, 7), float32] {
    %199 = cast(%var_5907, dtype="float32") /* ty=Tensor[(16, 6, 7), float32] */;
    %200 = shape_of(%var_5906, dtype="int32") /* ty=Tensor[(3), int32] */;
    %201 = cast(%var_5906, dtype="float32") /* ty=Tensor[(16, 6, 7), float32] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%201, %202) /* ty=Tensor[(16, 6, 7), float32] */
  };
  %203(%var_5912, %var_5913) /* ty=Tensor[(16, 6, 7), float32] */
}

def @func_5582() -> Tensor[(16, 1, 4), float32] {
  @func_5580() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_5707() -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), bool]) {
  @func_5705() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), bool]) */
}

def @func_7294(%var_7292: Tensor[(16, 12, 4), float32], %var_7293: Tensor[(512), float32]) -> (Tensor[(16, 12, 4), float64], Tensor[(13, 9, 14), float32], Tensor[(770), float64], Tensor[(256), float32], Tensor[(512), float32]) {
  @func_7290(%var_7292, %var_7293) /* ty=(Tensor[(16, 12, 4), float64], Tensor[(13, 9, 14), float32], Tensor[(770), float64], Tensor[(256), float32], Tensor[(512), float32]) */
}

def @func_4358() -> (Tensor[(16, 7, 4), float64],) {
  %204 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %207 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 7, 4), float32] */, dtype="float64") /* ty=Tensor[(16, 7, 4), float64] */;
  %208 = minimum(%206, %207) /* ty=Tensor[(16, 7, 4), float64] */;
  (%208,)
}

def @func_2306(%var_2299: Tensor[(2, 660), float64], %var_2300: Tensor[(168), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(11, 15, 8), bool], Tensor[(2, 660), float64], Tensor[(168), float32]) {
  %209 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %210 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %211 = cast(%var_2299, dtype="float64") /* ty=Tensor[(2, 660), float64] */;
  %212 = cast(%var_2300, dtype="float32") /* ty=Tensor[(168), float32] */;
  %213 = cast(%var_2299, dtype="float64") /* ty=Tensor[(2, 660), float64] */;
  %214 = reshape(%211, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %215 = reshape(%212, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %216 = reshape(%213, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %217 = @func_275(%214, %215, %216) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
  %218 = %209.0;
  %219 = %210.0;
  %220 = %217.2;
  (%218, %219, %220, %var_2299, %var_2300)
}

def @func_1839() -> Tensor[(16, 1, 4), float32] {
  @func_1837() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_6118() -> (Tensor[(16, 1, 4), float32],) {
  %222 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %221 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
    (%221,)
  };
  %222() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_4006() -> (Tensor[(16, 1, 4), float32],) {
  %225 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %223 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %224 = %223.0;
    (%224,)
  };
  %225() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_6873() -> Tensor[(16, 1, 4), float32] {
  @func_6871() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3493(%var_3488: Tensor[(3, 2, 14), uint32], %var_3489: Tensor[(3, 2, 14), uint32]) -> (Tensor[(3, 2, 14), bool],) {
  %226 = cast(%var_3489, dtype="bool") /* ty=Tensor[(3, 2, 14), bool] */;
  %227 = shape_of(%var_3488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_3488, dtype="bool") /* ty=Tensor[(3, 2, 14), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %230 = greater(%228, %229) /* ty=Tensor[(3, 2, 14), bool] */;
  (%230,)
}

def @func_4360() -> (Tensor[(16, 7, 4), float64],) {
  @func_4358() /* ty=(Tensor[(16, 7, 4), float64],) */
}

def @func_3985() -> (Tensor[(16, 1, 4), float32],) {
  %231 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %232 = %231.4;
  (%232,)
}

def @func_6976() -> Tensor[(16, 1, 4), float32] {
  %233 = fn () -> Tensor[(16, 1, 4), float32] {
    @func_2127() /* ty=Tensor[(16, 1, 4), float32] */
  };
  %233() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_6938(%var_6936: Tensor[(15, 2, 1), float64]) -> (Tensor[(15, 2, ?), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  @func_6935(%var_6936) /* ty=(Tensor[(15, 2, ?), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */
}

def @func_1837() -> Tensor[(16, 1, 4), float32] {
  @func_1615() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2360() -> Tensor[(16, 1, 4), float32] {
  %238 = fn () -> Tensor[(16, 1, 4), float32] {
    %234 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
    %235 = cast(%234, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
    %236 = cos(%235) /* ty=Tensor[(16, 1, 4), float64] */;
    %237 = cast(%236, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    log10(%237) /* ty=Tensor[(16, 1, 4), float32] */
  };
  %238() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_4868(%var_4866: Tensor[(1024), float32], %var_4867: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(128), uint64], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), bool]) {
  @func_4864(%var_4866, %var_4867) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(128), uint64], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), bool]) */
}

def @func_6382() -> Tensor[(16, 1, 4), float32] {
  @func_4546() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_1628() -> (Tensor[(16, 1, 4), float32],) {
  @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_3761(%var_3755: Tensor[(21, 5), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) {
  %239 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %240 = cast(%var_3755, dtype="float64") /* ty=Tensor[(21, 5), float64] */;
  %241 = cast(meta[relay.Constant][8] /* ty=Tensor[(364, 1), int8] */, dtype="int8") /* ty=Tensor[(364, 1), int8] */;
  %242 = cast(meta[relay.Constant][9] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %243 = reshape(%240, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float64] */;
  %244 = reshape(%241, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %245 = reshape(%242, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %246 = @func_501(%243, %244, %245) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) */;
  %247 = %239.0;
  %248 = %246.2;
  (%247, %248, %var_3755, meta[relay.Constant][8] /* ty=Tensor[(364, 1), int8] */, meta[relay.Constant][9] /* ty=Tensor[(1320), float64] */)
}

def @func_1976(%var_1974: Tensor[(105), float64], %var_1975: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(4, 3, 14), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(7, 52), int8], Tensor[(1320), float64]) {
  %268 = fn (%var_1960: Tensor[(105), float64], %var_1962: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(4, 3, 14), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(7, 52), int8], Tensor[(1320), float64]) {
    %249 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %250 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %251 = reshape(%249, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
    %252 = reshape(%250, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
    %253 = @func_141(%251, %252) /* ty=Tensor[(4, 3, 14), uint64] */;
    %254 = cast(%253, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
    %255 = cast(%253, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
    %256 = reshape(%254, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
    %257 = reshape(%255, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float32] */;
    %258 = cast(%var_1960, dtype="float64") /* ty=Tensor[(105), float64] */;
    %259 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 52), int8] */, dtype="int8") /* ty=Tensor[(7, 52), int8] */;
    %260 = cast(%var_1962, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %261 = reshape(%258, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %262 = reshape(%259, newshape=[364]) /* ty=Tensor[(364), int8] */;
    %263 = reshape(%260, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %264 = @func_1918(%261, %262, %263) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
    %265 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
    %266 = @func_141(%256, %257) /* ty=Tensor[(4, 3, 14), uint64] */;
    %267 = %264.6;
    (%265, %253, meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, %266, %267, %var_1960, meta[relay.Constant][11] /* ty=Tensor[(7, 52), int8] */, %var_1962)
  };
  %268(%var_1974, %var_1975) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(4, 3, 14), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(7, 52), int8], Tensor[(1320), float64]) */
}

def @func_3461() -> (Tensor[(16, 1, 4), float32],) {
  @func_3459() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_3015() -> (Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) {
  %269 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
  %270 = cast(%269, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %271 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 2, 4), float32] */, dtype="bool") /* ty=Tensor[(16, 2, 4), bool] */;
  %272 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 110), float64] */, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %273 = cast(meta[relay.Constant][13] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %274 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 110), float64] */, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %275 = reshape(%272, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %276 = reshape(%273, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %277 = reshape(%274, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
  %278 = @func_275(%275, %276, %277) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
  %279 = %278.2;
  %280 = cast(%279, dtype="int32") /* ty=Tensor[(11, 15, 8), int32] */;
  %281 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(12, 110), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %282 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 110), float64] */, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %284 = logical_and(%270, %271) /* ty=Tensor[(16, 2, 4), bool] */;
  %285 = @func_2888() /* ty=Tensor[(16, 16, 4), float64] */;
  %286 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %287 = right_shift(%282, %283) /* ty=Tensor[(12, 110), int32] */;
  (%284, %285, meta[relay.Constant][13] /* ty=Tensor[(168), float32] */, %286, %287)
}

def @func_4290(%var_4288: Tensor[(1320), float64]) -> (Tensor[(1320), float32], Tensor[(252), uint64], Tensor[(252), uint64]) {
  @func_4287(%var_4288) /* ty=(Tensor[(1320), float32], Tensor[(252), uint64], Tensor[(252), uint64]) */
}

def @func_3092(%var_3090: Tensor[(16, 7, 4), float32]) -> (Tensor[(16, 7, 4), bool], Tensor[(16, 1, 4), float32]) {
  @func_3089(%var_3090) /* ty=(Tensor[(16, 7, 4), bool], Tensor[(16, 1, 4), float32]) */
}

def @main(%var_7315: Tensor[(8, 8, 3), float32]) -> Tensor[(8, 8, 3), float32] {
  %288 = cast(%var_7315, dtype="float32") /* ty=Tensor[(8, 8, 3), float32] */;
  rsqrt(%288) /* ty=Tensor[(8, 8, 3), float32] */
}

def @func_5901(%var_5899: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), float64], Tensor[(16, ?, 4), uint32], Tensor[(3, 84), uint64], Tensor[(105), float64], Tensor[(1320), float64]) {
  @func_5898(%var_5899) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), float64], Tensor[(16, ?, 4), uint32], Tensor[(3, 84), uint64], Tensor[(105), float64], Tensor[(1320), float64]) */
}

def @func_5898(%var_5888: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), float64], Tensor[(16, ?, 4), uint32], Tensor[(3, 84), uint64], Tensor[(105), float64], Tensor[(1320), float64]) {
  %289 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %291 = rsqrt(%290) /* ty=Tensor[(16, 1, 4), float64] */;
  %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 1, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %296 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 84), uint64] */, dtype="uint64") /* ty=Tensor[(3, 84), uint64] */;
  %297 = cast(%var_5888, dtype="float64") /* ty=Tensor[(105), float64] */;
  %298 = cast(meta[relay.Constant][17] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %299 = reshape(%296, newshape=[6, 42]) /* ty=Tensor[(6, 42), uint64] */;
  %300 = reshape(%297, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %301 = reshape(%298, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %302 = @func_3884(%299, %300, %301) /* ty=(Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) */;
  %303 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %304 = floor_divide(%294, %295) /* ty=Tensor[(16, ?, 4), float64] */;
  %305 = %302.0;
  (%303, %304, %305, meta[relay.Constant][16] /* ty=Tensor[(3, 84), uint64] */, %var_5888, meta[relay.Constant][17] /* ty=Tensor[(1320), float64] */)
}

def @func_5705() -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), bool]) {
  %306 = @func_4005() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %307 = %306.0;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %309 = cast(%307, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %310 = cast(%307, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %311 = acosh(%310) /* ty=Tensor[(16, 1, 4), float32] */;
  %312 = @func_4430() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %313 = %312.0;
  %314 = cast(%313, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %315 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%311, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = sqrt(%308) /* ty=Tensor[(16, 1, 4), float32] */;
  %319 = asinh(%309) /* ty=Tensor[(16, 1, 4), float64] */;
  %320 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %321 = equal(%316, %317) /* ty=Tensor[(16, ?, 4), bool] */;
  (%318, %319, %320, %321)
}

def @func_4910() -> (Tensor[(16, 1, 4), float32],) {
  @func_4908() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_3205() -> (Tensor[(16, 1, 4), float32],) {
  %323 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %322 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
    (%322,)
  };
  %323() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_2915(%var_2913: Tensor[(16, 16, 4), float32]) -> (Tensor[(16, 16, 4), bool],) {
  @func_2912(%var_2913) /* ty=(Tensor[(16, 16, 4), bool],) */
}

def @func_5430(%var_5429: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), float32]) {
  %333 = fn (%var_5408: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), float32]) {
    %324 = cast(meta[relay.Constant][18] /* ty=Tensor[(1024), float32] */, dtype="float32") /* ty=Tensor[(1024), float32] */;
    %325 = cast(%var_5408, dtype="float64") /* ty=Tensor[(105), float64] */;
    %326 = reshape(%324, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
    %327 = reshape(%325, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %328 = @func_4864(%326, %327) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(128), uint64], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), bool]) */;
    %329 = cast(meta[relay.Constant][18] /* ty=Tensor[(1024), float32] */, dtype="float32") /* ty=Tensor[(1024), float32] */;
    %330 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
    %331 = %328.3;
    %332 = atan(%329) /* ty=Tensor[(1024), float32] */;
    (%330, %331, %var_5408, %332)
  };
  %333(%var_5429) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), float32]) */
}

def @func_1626() -> (Tensor[(16, 1, 4), float32],) {
  %334 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  (%334,)
}

def @func_2652() -> (Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) {
  %335 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 105), float64] */, dtype="float64") /* ty=Tensor[(1, 105), float64] */;
  %336 = cast(meta[relay.Constant][20] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %337 = cast(meta[relay.Constant][21] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %338 = reshape(%335, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %339 = reshape(%336, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %340 = reshape(%337, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %341 = @func_1918(%338, %339, %340) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
  %342 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %344 = cast(meta[relay.Constant][22] /* ty=Tensor[(504), uint64] */, dtype="uint64") /* ty=Tensor[(504), uint64] */;
  %345 = reshape(%344, newshape=[7, 9, 8]) /* ty=Tensor[(7, 9, 8), uint64] */;
  %346 = %341.2;
  %347 = log(%343) /* ty=Tensor[(16, 1, 4), float32] */;
  %348 = @func_652(%345) /* ty=Tensor[(7, 9, 8), uint64] */;
  %349 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%346, meta[relay.Constant][19] /* ty=Tensor[(1, 105), float64] */, meta[relay.Constant][20] /* ty=Tensor[(364), int8] */, meta[relay.Constant][21] /* ty=Tensor[(1320), float64] */, %347, %348, meta[relay.Constant][22] /* ty=Tensor[(504), uint64] */, %349)
}

def @func_1645() -> Tensor[(16, 1, 4), float32] {
  %350 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %350.0
}

def @func_6307() -> (Tensor[(16, 1, 4), float32],) {
  %353 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %351 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %352 = %351.0;
    (%352,)
  };
  %353() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_5642() -> Tensor[(16, 1, 4), float32] {
  %355 = fn () -> Tensor[(16, 1, 4), float32] {
    %354 = @func_3985() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %354.0
  };
  %355() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3239() -> (Tensor[(16, 1, 4), float32],) {
  %356 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  (%356,)
}

def @func_4035() -> Tensor[(16, 1, 4), float32] {
  @func_1837() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_5770() -> (Tensor[(16, 1, 4), float32],) {
  @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_6716(%var_6683: Tensor[(16, 8, 4), float32]) -> (Tensor[(16, 8, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %357 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %358 = %357.0;
  %359 = cast(%358, dtype="int64") /* ty=Tensor[(16, 1, 4), int64] */;
  %360 = cast(%var_6683, dtype="int64") /* ty=Tensor[(16, 8, 4), int64] */;
  %361 = bitwise_xor(%359, %360) /* ty=Tensor[(16, 8, 4), int64] */;
  %362 = cast(%361, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %363 = cosh(%362) /* ty=Tensor[(16, 8, 4), float64] */;
  %364 = cast(%363, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %365 = cast(%358, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %366 = @func_3227() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %367 = greater(%364, %365) /* ty=Tensor[(16, 8, 4), bool] */;
  %368 = %366.0;
  %369 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %370 = @func_5329() /* ty=Tensor[(16, 1, 4), float32] */;
  (%367, %368, %369, %370)
}

def @func_3089(%var_3053: Tensor[(16, 7, 4), float32]) -> (Tensor[(16, 7, 4), bool], Tensor[(16, 1, 4), float32]) {
  %371 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %372 = cast(%371, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %373 = cast(%var_3053, dtype="bool") /* ty=Tensor[(16, 7, 4), bool] */;
  %374 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %375 = less_equal(%372, %373) /* ty=Tensor[(16, 7, 4), bool] */;
  %376 = %374.0;
  (%375, %376)
}

def @func_2612(%var_2610: Tensor[(16, 5, 4), float32], %var_2611: Tensor[(364), int8]) -> (Tensor[(16, 5, 4), uint64], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  %386 = fn (%var_2590: Tensor[(16, 5, 4), float32], %var_2603: Tensor[(364), int8]) -> (Tensor[(16, 5, 4), uint64], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
    %377 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
    %378 = cast(%377, dtype="uint64") /* ty=Tensor[(16, 1, 4), uint64] */;
    %379 = cast(%var_2590, dtype="uint64") /* ty=Tensor[(16, 5, 4), uint64] */;
    %380 = cast(%var_2603, dtype="int8") /* ty=Tensor[(364), int8] */;
    %381 = cast(%var_2603, dtype="int8") /* ty=Tensor[(364), int8] */;
    %382 = reshape(%380, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
    %383 = reshape(%381, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
    %384 = bitwise_xor(%378, %379) /* ty=Tensor[(16, 5, 4), uint64] */;
    %385 = @func_448(%382, %383) /* ty=Tensor[(14, 2, 13), bool] */;
    (%384, %385, %var_2603)
  };
  %386(%var_2610, %var_2611) /* ty=(Tensor[(16, 5, 4), uint64], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */
}

def @func_2128() -> Tensor[(16, 1, 4), float32] {
  %387 = fn () -> Tensor[(16, 1, 4), float32] {
    @func_1645() /* ty=Tensor[(16, 1, 4), float32] */
  };
  %387() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2542() -> Tensor[(16, 1, 4), float32] {
  @func_2540() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3165(%var_3164: Tensor[(1638), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(1638), int8], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
  %407 = fn (%var_3136: Tensor[(1638), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(1638), int8], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
    %388 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %389 = cast(%var_3136, dtype="int8") /* ty=Tensor[(1638), int8] */;
    %390 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(1638), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %391 = cast(meta[relay.Constant][23] /* ty=Tensor[(1638), float32] */, dtype="int8") /* ty=Tensor[(1638), int8] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?), int8] */;
    %393 = right_shift(%391, %392) /* ty=Tensor[(1638), int8] */;
    %394 = cast(meta[relay.Constant][23] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
    %395 = reshape(%394, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
    %396 = @func_1116(%395) /* ty=(Tensor[(13, 9, 14), float32],) */;
    %397 = %396.0;
    %398 = cast(%397, dtype="int8") /* ty=Tensor[(13, 9, 14), int8] */;
    %399 = shape_of(%393, dtype="int32") /* ty=Tensor[(1), int32] */;
    %400 = cast(%393, dtype="int8") /* ty=Tensor[(1638), int8] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?), int8] */;
    %402 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %403 = reshape(%402, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
    %404 = %388.0;
    %405 = logical_xor(%400, %401) /* ty=Tensor[(1638), int8] */;
    %406 = @func_618(%403) /* ty=Tensor[(14, 9, 2), float32] */;
    (%404, %405, %406, meta[relay.Constant][24] /* ty=Tensor[(252), uint64] */)
  };
  %407(%var_3164) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(1638), int8], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */
}

def @func_3439(%var_3435: Tensor[(128), uint64], %var_3436: Tensor[(512), uint64], %var_3437: Tensor[(1024), float32], %var_3438: Tensor[(16, 16, 4), bool]) -> (Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) {
  @func_3433(%var_3435, %var_3436, %var_3437, %var_3438) /* ty=(Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) */
}

def @func_2080(%var_2077: Tensor[(105), float64], %var_2078: Tensor[(1320), float64], %var_2079: Tensor[(91, 4), int8]) -> (Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(1320), float64], Tensor[(91, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int32]) {
  @func_2075(%var_2077, %var_2078, %var_2079) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(1320), float64], Tensor[(91, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int32]) */
}

def @func_3595() -> Tensor[(16, 1, 4), float32] {
  @func_1645() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_6719(%var_6717: Tensor[(16, 8, 4), float32]) -> (Tensor[(16, 8, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  @func_6716(%var_6717) /* ty=(Tensor[(16, 8, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */
}

def @func_2163(%var_2161: Tensor[(16, 4, 4), float32], %var_2162: Tensor[(16, 8, 4), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 8, 4), uint32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  @func_2159(%var_2161, %var_2162) /* ty=(Tensor[(16, 4, 4), float32], Tensor[(16, 8, 4), uint32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */
}

def @func_6168(%var_6166: Tensor[(105), float64], %var_6167: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 7, 4), bool], Tensor[(252), uint64], Tensor[(105), float64], Tensor[(1320), float64]) {
  @func_6164(%var_6166, %var_6167) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 7, 4), bool], Tensor[(252), uint64], Tensor[(105), float64], Tensor[(1320), float64]) */
}

def @func_4499() -> Tensor[(16, 1, 4), float32] {
  %408 = fn () -> Tensor[(16, 1, 4), float32] {
    @func_2359() /* ty=Tensor[(16, 1, 4), float32] */
  };
  %408() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2310(%var_2308: Tensor[(2, 660), float64], %var_2309: Tensor[(168), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(11, 15, 8), bool], Tensor[(2, 660), float64], Tensor[(168), float32]) {
  @func_2306(%var_2308, %var_2309) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(11, 15, 8), bool], Tensor[(2, 660), float64], Tensor[(168), float32]) */
}

def @func_6616() -> (Tensor[(16, 1, 4), float32],) {
  %410 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %409 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
    (%409,)
  };
  %410() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_7290(%var_7247: Tensor[(16, 12, 4), float32], %var_7280: Tensor[(512), float32]) -> (Tensor[(16, 12, 4), float64], Tensor[(13, 9, 14), float32], Tensor[(770), float64], Tensor[(256), float32], Tensor[(512), float32]) {
  %411 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %412 = cast(%411, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %413 = cast(%var_7247, dtype="float64") /* ty=Tensor[(16, 12, 4), float64] */;
  %414 = cast(meta[relay.Constant][25] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %415 = cast(meta[relay.Constant][25] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %416 = cast(meta[relay.Constant][26] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %417 = cast(%var_7280, dtype="float32") /* ty=Tensor[(512), float32] */;
  %418 = reshape(%414, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %419 = reshape(%415, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %420 = reshape(%416, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %421 = reshape(%417, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %422 = @func_5533(%418, %419, %420, %421) /* ty=(Tensor[(10, 7, 11), float64], Tensor[(7, 234), float32], Tensor[(14, 9, 2), float32], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64], Tensor[(13, 9, 14), float32], Tensor[(10, 7, 11), bool]) */;
  %423 = power(%412, %413) /* ty=Tensor[(16, 12, 4), float64] */;
  %424 = %422.6;
  (%423, %424, meta[relay.Constant][25] /* ty=Tensor[(770), float64] */, meta[relay.Constant][26] /* ty=Tensor[(256), float32] */, %var_7280)
}

def @func_6857() -> Tensor[(16, 1, 4), float32] {
  %425 = @func_2094() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %425.0
}

def @func_5539(%var_5535: Tensor[(10, 7, 11), float64], %var_5536: Tensor[(10, 7, 11), float64], %var_5537: Tensor[(256), float32], %var_5538: Tensor[(512), float32]) -> (Tensor[(10, 7, 11), float64], Tensor[(7, 234), float32], Tensor[(14, 9, 2), float32], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64], Tensor[(13, 9, 14), float32], Tensor[(10, 7, 11), bool]) {
  @func_5533(%var_5535, %var_5536, %var_5537, %var_5538) /* ty=(Tensor[(10, 7, 11), float64], Tensor[(7, 234), float32], Tensor[(14, 9, 2), float32], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64], Tensor[(13, 9, 14), float32], Tensor[(10, 7, 11), bool]) */
}

def @func_6417() -> (Tensor[(16, 7, 4), float64], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
  %431 = fn () -> (Tensor[(16, 7, 4), float64], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
    %426 = @func_4358() /* ty=(Tensor[(16, 7, 4), float64],) */;
    %427 = cast(meta[relay.Constant][27] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %428 = reshape(%427, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
    %429 = %426.0;
    %430 = @func_618(%428) /* ty=Tensor[(14, 9, 2), float32] */;
    (%429, %430, meta[relay.Constant][27] /* ty=Tensor[(252), uint64] */)
  };
  %431() /* ty=(Tensor[(16, 7, 4), float64], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */
}

def @func_6010() -> (Tensor[(12, 110), int32], Tensor[(16, 1, 4), float32]) {
  %435 = fn () -> (Tensor[(12, 110), int32], Tensor[(16, 1, 4), float32]) {
    %432 = @func_3015() /* ty=(Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) */;
    %433 = %432.4;
    %434 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
    (%433, %434)
  };
  %435() /* ty=(Tensor[(12, 110), int32], Tensor[(16, 1, 4), float32]) */
}

def @func_1647() -> Tensor[(16, 1, 4), float32] {
  @func_1645() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3535(%var_3533: Tensor[(128), uint64], %var_3534: Tensor[(1024), float32]) -> (Tensor[(1, 105), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(16, 16, 4), bool], Tensor[(128), uint64], Tensor[(4, 128), uint64], Tensor[(1024), float32]) {
  @func_3531(%var_3533, %var_3534) /* ty=(Tensor[(1, 105), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(16, 16, 4), bool], Tensor[(128), uint64], Tensor[(4, 128), uint64], Tensor[(1024), float32]) */
}

def @func_3241() -> (Tensor[(16, 1, 4), float32],) {
  @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_6384() -> Tensor[(16, 1, 4), float32] {
  @func_6382() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_4431() -> (Tensor[(16, 1, 4), float32],) {
  %437 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %436 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
    (%436,)
  };
  %437() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_2571() -> (Tensor[(16, 1, 4), float32],) {
  %439 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %438 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
    (%438,)
  };
  %439() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_2095() -> (Tensor[(16, 1, 4), float32],) {
  %441 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %440 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
    (%440,)
  };
  %441() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_5632(%var_5630: Tensor[(128), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) {
  @func_5629(%var_5630) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) */
}

def @func_7226(%var_7225: Tensor[(16, 14, 4), float64]) -> (Tensor[(16, 7, 4), float64], Tensor[(16, 14, 4), float32], Tensor[(252), uint64], Tensor[(1, 252), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 14, 4), float64]) {
  %469 = fn (%var_7162: Tensor[(16, 14, 4), float64]) -> (Tensor[(16, 7, 4), float64], Tensor[(16, 14, 4), float32], Tensor[(252), uint64], Tensor[(1, 252), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 14, 4), float64]) {
    %442 = @func_6416() /* ty=(Tensor[(16, 7, 4), float64], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
    %443 = @func_5116() /* ty=(Tensor[(16, ?, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16]) */;
    %444 = %443.2;
    %445 = cast(%444, dtype="float64") /* ty=Tensor[(16, ?, 4), float64] */;
    %446 = sigmoid(%445) /* ty=Tensor[(16, ?, 4), float64] */;
    %447 = cast(%446, dtype="uint64") /* ty=Tensor[(16, ?, 4), uint64] */;
    %448 = cast(%var_7162, dtype="uint64") /* ty=Tensor[(16, 14, 4), uint64] */;
    %449 = add(%447, %448) /* ty=Tensor[(16, 14, 4), uint64] */;
    %450 = cast(%449, dtype="int16") /* ty=Tensor[(16, 14, 4), int16] */;
    %451 = cast(%444, dtype="int16") /* ty=Tensor[(16, ?, 4), int16] */;
    %452 = bitwise_and(%450, %451) /* ty=Tensor[(16, 14, 4), int16] */;
    %453 = cast(%452, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
    %454 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 252), uint64] */, dtype="uint64") /* ty=Tensor[(1, 252), uint64] */;
    %455 = reshape(%454, newshape=[252]) /* ty=Tensor[(252), uint64] */;
    %456 = @func_2840(%455) /* ty=(Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
    %457 = @func_5058() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %458 = cast(%452, dtype="uint8") /* ty=Tensor[(16, 14, 4), uint8] */;
    %459 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(%449, dtype="uint8") /* ty=Tensor[(16, 14, 4), uint8] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %462 = minimum(%460, %461) /* ty=Tensor[(16, 14, 4), uint8] */;
    %463 = cast(%462, dtype="float64") /* ty=Tensor[(16, 14, 4), float64] */;
    %464 = %442.0;
    %465 = exp(%453) /* ty=Tensor[(16, 14, 4), float32] */;
    %466 = %456.3;
    %467 = %457.0;
    %468 = tan(%463) /* ty=Tensor[(16, 14, 4), float64] */;
    (%464, %465, %466, meta[relay.Constant][28] /* ty=Tensor[(1, 252), uint64] */, %467, %468)
  };
  %469(%var_7225) /* ty=(Tensor[(16, 7, 4), float64], Tensor[(16, 14, 4), float32], Tensor[(252), uint64], Tensor[(1, 252), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 14, 4), float64]) */
}

def @func_6827() -> (Tensor[(16, 1, 4), float32],) {
  %470 = @func_4035() /* ty=Tensor[(16, 1, 4), float32] */;
  (%470,)
}

def @func_2540() -> Tensor[(16, 1, 4), float32] {
  @func_1837() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_5827() -> (Tensor[(364), int8], Tensor[(16, 1, 4), float32]) {
  @func_5825() /* ty=(Tensor[(364), int8], Tensor[(16, 1, 4), float32]) */
}

def @func_5768() -> (Tensor[(16, 1, 4), float32],) {
  %471 = @func_4005() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %472 = %471.0;
  (%472,)
}

def @func_2888() -> Tensor[(16, 16, 4), float64] {
  %473 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %475 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float64") /* ty=Tensor[(16, 16, 4), float64] */;
  floor_divide(%474, %475) /* ty=Tensor[(16, 16, 4), float64] */
}

def @func_974(%var_972: Tensor[(10, 14, 16), float64], %var_973: Tensor[(10, 14, 16), float64]) -> Tensor[(10, 14, 16), float64] {
  @func_970(%var_972, %var_973) /* ty=Tensor[(10, 14, 16), float64] */
}

def @func_5329() -> Tensor[(16, 1, 4), float32] {
  @func_4546() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3497(%var_3495: Tensor[(3, 2, 14), uint32], %var_3496: Tensor[(3, 2, 14), uint32]) -> (Tensor[(3, 2, 14), bool],) {
  @func_3493(%var_3495, %var_3496) /* ty=(Tensor[(3, 2, 14), bool],) */
}

def @func_2842(%var_2841: Tensor[(252), uint64]) -> (Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
  %482 = fn (%var_2828: Tensor[(252), uint64]) -> (Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) {
    %476 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
    %477 = cast(%var_2828, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %478 = reshape(%477, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), uint64] */;
    %479 = %476.5;
    %480 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
    %481 = @func_618(%478) /* ty=Tensor[(14, 9, 2), float32] */;
    (%479, %480, %481, %var_2828)
  };
  %482(%var_2841) /* ty=(Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */
}

def @func_618(%var_594: Tensor[(14, 9, 2), uint64]) -> Tensor[(14, 9, 2), float32] {
  %483 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(14, 9, 2), uint64] */;
  %484 = shape_of(%var_594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_594, dtype="uint64") /* ty=Tensor[(14, 9, 2), uint64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %487 = minimum(%485, %486) /* ty=Tensor[(14, 9, 2), uint64] */;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(14, 9, 2), float32] */;
  exp(%488) /* ty=Tensor[(14, 9, 2), float32] */
}

def @func_3185(%var_3183: Tensor[(8, 16, 1), uint64], %var_3184: Tensor[(8, 16, 4), uint64]) -> Tensor[(8, 16, 4), uint64] {
  @func_3181(%var_3183, %var_3184) /* ty=Tensor[(8, 16, 4), uint64] */
}

def @func_4719(%var_4715: float64, %var_4716: Tensor[(2, 3, 10), float64], %var_4717: Tensor[(1024), float32], %var_4718: Tensor[(1320), float64]) -> (Tensor[(2, 3, 10), float32], Tensor[(16, 16, 4), bool], Tensor[(1024), float32], Tensor[(252), uint64], Tensor[(1320), float64], Tensor[(2, 3, 10), float32]) {
  %504 = fn (%var_4668: float64, %var_4669: Tensor[(2, 3, 10), float64], %var_4676: Tensor[(1024), float32], %var_4686: Tensor[(1320), float64]) -> (Tensor[(2, 3, 10), float32], Tensor[(16, 16, 4), bool], Tensor[(1024), float32], Tensor[(252), uint64], Tensor[(1320), float64], Tensor[(2, 3, 10), float32]) {
    %489 = cast(%var_4668, dtype="float64") /* ty=float64 */;
    %490 = cast(%var_4669, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
    %491 = multiply(%489, %490) /* ty=Tensor[(2, 3, 10), float64] */;
    %492 = cast(%491, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
    %493 = cast(%var_4676, dtype="float32") /* ty=Tensor[(1024), float32] */;
    %494 = reshape(%493, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
    %495 = @func_2912(%494) /* ty=(Tensor[(16, 16, 4), bool],) */;
    %496 = cast(%var_4686, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %497 = reshape(%496, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %498 = @func_3283(%497) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(1320), float64], Tensor[(1, 168), float32], Tensor[(11, 15, 8), bool], Tensor[(252), uint64], Tensor[(1638), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */;
    %499 = cast(%491, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
    %500 = acos(%492) /* ty=Tensor[(2, 3, 10), float32] */;
    %501 = %495.0;
    %502 = %498.4;
    %503 = log(%499) /* ty=Tensor[(2, 3, 10), float32] */;
    (%500, %501, %var_4676, %502, %var_4686, %503)
  };
  %504(%var_4715, %var_4716, %var_4717, %var_4718) /* ty=(Tensor[(2, 3, 10), float32], Tensor[(16, 16, 4), bool], Tensor[(1024), float32], Tensor[(252), uint64], Tensor[(1320), float64], Tensor[(2, 3, 10), float32]) */
}

def @func_3896() -> Tensor[(16, 1, 4), float32] {
  %505 = fn () -> Tensor[(16, 1, 4), float32] {
    @func_3595() /* ty=Tensor[(16, 1, 4), float32] */
  };
  %505() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_6240(%var_6238: Tensor[(1, 11, 4), bool], %var_6239: Tensor[(168), float32]) -> (Tensor[(8, 11, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(11, 15, 8), bool], Tensor[(1320), float64], Tensor[(168), float32], Tensor[(8, 11, 4), uint32], Tensor[(16, 1, 4), float32]) {
  %534 = fn (%var_6178: Tensor[(1, 11, 4), bool], %var_6222: Tensor[(168), float32]) -> (Tensor[(8, 11, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(11, 15, 8), bool], Tensor[(1320), float64], Tensor[(168), float32], Tensor[(8, 11, 4), uint32], Tensor[(16, 1, 4), float32]) {
    %506 = cast(%var_6178, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
    %507 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 11, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
    %508 = logical_or(%506, %507) /* ty=Tensor[(8, 11, 4), bool] */;
    %509 = cast(%508, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
    %510 = log10(%509) /* ty=Tensor[(8, 11, 4), float64] */;
    %511 = cast(%510, dtype="float64") /* ty=Tensor[(8, 11, 4), float64] */;
    %512 = @func_4533() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */;
    %513 = cast(meta[relay.Constant][32] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
    %514 = reshape(%513, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %515 = @func_5629(%514) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) */;
    %516 = cast(meta[relay.Constant][33] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %517 = cast(%var_6222, dtype="float32") /* ty=Tensor[(168), float32] */;
    %518 = cast(meta[relay.Constant][33] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %519 = reshape(%516, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
    %520 = reshape(%517, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %521 = reshape(%518, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
    %522 = @func_275(%519, %520, %521) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
    %523 = cast(%508, dtype="uint32") /* ty=Tensor[(8, 11, 4), uint32] */;
    %524 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%510, dtype="uint32") /* ty=Tensor[(8, 11, 4), uint32] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %527 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %528 = sigmoid(%511) /* ty=Tensor[(8, 11, 4), float64] */;
    %529 = %512.1;
    %530 = %515.0;
    %531 = %522.2;
    %532 = multiply(%525, %526) /* ty=Tensor[(8, 11, 4), uint32] */;
    %533 = %527.0;
    (%528, %529, %530, meta[relay.Constant][32] /* ty=Tensor[(128), float32] */, %531, meta[relay.Constant][33] /* ty=Tensor[(1320), float64] */, %var_6222, %532, %533)
  };
  %534(%var_6238, %var_6239) /* ty=(Tensor[(8, 11, 4), float64], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32], Tensor[(11, 15, 8), bool], Tensor[(1320), float64], Tensor[(168), float32], Tensor[(8, 11, 4), uint32], Tensor[(16, 1, 4), float32]) */
}

def @func_6644() -> (Tensor[(16, 1, 4), float32],) {
  %537 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %535 = @func_5768() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %536 = %535.0;
    (%536,)
  };
  %537() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_6829() -> (Tensor[(16, 1, 4), float32],) {
  @func_6827() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_7016() -> Tensor[(16, 1, 4), float32] {
  %538 = fn () -> Tensor[(16, 1, 4), float32] {
    @func_1837() /* ty=Tensor[(16, 1, 4), float32] */
  };
  %538() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3531(%var_3526: Tensor[(128), uint64], %var_3528: Tensor[(1024), float32]) -> (Tensor[(1, 105), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(16, 16, 4), bool], Tensor[(128), uint64], Tensor[(4, 128), uint64], Tensor[(1024), float32]) {
  %539 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %540 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %541 = cast(%var_3526, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %542 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 128), uint64] */, dtype="uint64") /* ty=Tensor[(4, 128), uint64] */;
  %543 = cast(%var_3528, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %544 = cast(%var_3528, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %545 = reshape(%541, newshape=[128]) /* ty=Tensor[(128), uint64] */;
  %546 = reshape(%542, newshape=[512]) /* ty=Tensor[(512), uint64] */;
  %547 = reshape(%543, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
  %548 = reshape(%544, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), bool] */;
  %549 = @func_3433(%545, %546, %547, %548) /* ty=(Tensor[(8, 16, 4), uint64], Tensor[(512), uint64], Tensor[(16, ?, 4), int16], Tensor[(128), float64], Tensor[(1024), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 16, 4), bool], Tensor[(16, 16, 4), bool]) */;
  %550 = %539.1;
  %551 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %552 = %540.5;
  %553 = %549.6;
  (%550, %551, %552, %553, %var_3526, meta[relay.Constant][34] /* ty=Tensor[(4, 128), uint64] */, %var_3528)
}

def @func_621(%var_619: Tensor[(14, 9, 2), uint64]) -> Tensor[(14, 9, 2), float32] {
  @func_618(%var_619) /* ty=Tensor[(14, 9, 2), float32] */
}

def @func_2654() -> (Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) {
  @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */
}

def @func_5189(%var_5188: Tensor[(1638), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32]) {
  %559 = fn (%var_5170: Tensor[(1638), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32]) {
    %554 = cast(%var_5170, dtype="float32") /* ty=Tensor[(1638), float32] */;
    %555 = reshape(%554, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
    %556 = @func_1116(%555) /* ty=(Tensor[(13, 9, 14), float32],) */;
    %557 = @func_2540() /* ty=Tensor[(16, 1, 4), float32] */;
    %558 = %556.0;
    (%557, %558, %var_5170)
  };
  %559(%var_5188) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32]) */
}

def @func_7083(%var_7081: Tensor[(182, 2), int8], %var_7082: Tensor[(1024), float32]) -> (Tensor[(12, 110), int32], Tensor[(364), int8], Tensor[(182, 2), int8], Tensor[(8, 105), bool], Tensor[(16, 16, 4), int64]) {
  @func_7079(%var_7081, %var_7082) /* ty=(Tensor[(12, 110), int32], Tensor[(364), int8], Tensor[(182, 2), int8], Tensor[(8, 105), bool], Tensor[(16, 16, 4), int64]) */
}

def @func_1785() -> Tensor[(16, 1, 4), float32] {
  @func_1783() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3888(%var_3885: Tensor[(6, 42), uint64], %var_3886: Tensor[(105), float64], %var_3887: Tensor[(1320), float64]) -> (Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) {
  %581 = fn (%var_3872: Tensor[(6, 42), uint64], %var_3875: Tensor[(105), float64], %var_3876: Tensor[(1320), float64]) -> (Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) {
    %560 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
    %561 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
    %562 = cast(%561, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
    %563 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%560, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %566 = cast(meta[relay.Constant][35] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
    %567 = reshape(%566, newshape=[16, 7, 4]) /* ty=Tensor[(16, 7, 4), float32] */;
    %568 = @func_3089(%567) /* ty=(Tensor[(16, 7, 4), bool], Tensor[(16, 1, 4), float32]) */;
    %569 = cast(%var_3872, dtype="uint64") /* ty=Tensor[(6, 42), uint64] */;
    %570 = reshape(%569, newshape=[252]) /* ty=Tensor[(252), uint64] */;
    %571 = @func_2840(%570) /* ty=(Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
    %572 = cast(%var_3875, dtype="float64") /* ty=Tensor[(105), float64] */;
    %573 = cast(%var_3876, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %574 = reshape(%572, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %575 = reshape(%573, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %576 = @func_1973(%574, %575) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(4, 3, 14), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(7, 52), int8], Tensor[(1320), float64]) */;
    %577 = bitwise_xor(%564, %565) /* ty=Tensor[(16, ?, 4), uint32] */;
    %578 = %568.0;
    %579 = %571.0;
    %580 = %576.7;
    (%577, %578, meta[relay.Constant][35] /* ty=Tensor[(448), float32] */, %579, %var_3872, %580, %var_3875, %var_3876)
  };
  %581(%var_3885, %var_3886, %var_3887) /* ty=(Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) */
}

def @func_4287(%var_4245: Tensor[(1320), float64]) -> (Tensor[(1320), float32], Tensor[(252), uint64], Tensor[(252), uint64]) {
  %582 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
  %583 = %582.3;
  %584 = cast(%var_4245, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %586 = cast(%583, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %588 = maximum(%586, %587) /* ty=Tensor[(1320), uint8] */;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %590 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %591 = reshape(%590, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %592 = @func_2840(%591) /* ty=(Tensor[(7, 9, 8), uint64], Tensor[(16, 1, 4), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
  %593 = asinh(%589) /* ty=Tensor[(1320), float32] */;
  %594 = %592.3;
  (%593, %594, meta[relay.Constant][36] /* ty=Tensor[(252), uint64] */)
}

def @func_5593() -> (Tensor[(16, 1, 4), float32],) {
  %595 = @func_5329() /* ty=Tensor[(16, 1, 4), float32] */;
  (%595,)
}

def @func_2184(%var_2183: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(182, 2), int8], Tensor[(1320), float64]) {
  %608 = fn (%var_2178: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(182, 2), int8], Tensor[(1320), float64]) {
    %596 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
    %597 = cast(%596, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    %598 = cast(%var_2178, dtype="float64") /* ty=Tensor[(105), float64] */;
    %599 = cast(meta[relay.Constant][37] /* ty=Tensor[(182, 2), int8] */, dtype="int8") /* ty=Tensor[(182, 2), int8] */;
    %600 = cast(meta[relay.Constant][38] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %601 = reshape(%598, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %602 = reshape(%599, newshape=[364]) /* ty=Tensor[(364), int8] */;
    %603 = reshape(%600, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %604 = @func_1918(%601, %602, %603) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
    %605 = atan(%597) /* ty=Tensor[(16, 1, 4), float32] */;
    %606 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
    %607 = %604.5;
    (%605, %606, %607, %var_2178, meta[relay.Constant][37] /* ty=Tensor[(182, 2), int8] */, meta[relay.Constant][38] /* ty=Tensor[(1320), float64] */)
  };
  %608(%var_2183) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(182, 2), int8], Tensor[(1320), float64]) */
}

def @func_5118() -> (Tensor[(16, ?, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16]) {
  @func_5116() /* ty=(Tensor[(16, ?, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16]) */
}

def @func_4864(%var_4831: Tensor[(1024), float32], %var_4847: Tensor[(105), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(128), uint64], Tensor[(3, 7, 5), float32], Tensor[(105), float64], Tensor[(1024), bool]) {
  %609 = cast(meta[relay.Constant][39] /* ty=Tensor[(128), uint64] */, dtype="uint64") /* ty=Tensor[(128), uint64] */;
  %610 = cast(%var_4831, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %611 = reshape(%609, newshape=[128]) /* ty=Tensor[(128), uint64] */;
  %612 = reshape(%610, newshape=[1024]) /* ty=Tensor[(1024), float32] */;
  %613 = @func_3531(%611, %612) /* ty=(Tensor[(1, 105), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(16, 16, 4), bool], Tensor[(128), uint64], Tensor[(4, 128), uint64], Tensor[(1024), float32]) */;
  %614 = cast(%var_4847, dtype="float64") /* ty=Tensor[(105), float64] */;
  %615 = reshape(%614, newshape=[21, 5]) /* ty=Tensor[(21, 5), float64] */;
  %616 = @func_3761(%615) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) */;
  %617 = cast(%var_4831, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %618 = log10(%617) /* ty=Tensor[(1024), float64] */;
  %619 = cast(%var_4831, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(1), int32] */;
  %621 = cast(%618, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?), bool] */;
  %623 = @func_4546() /* ty=Tensor[(16, 1, 4), float32] */;
  %624 = %613.2;
  %625 = %616.1;
  %626 = greater(%621, %622) /* ty=Tensor[(1024), bool] */;
  (%623, %624, meta[relay.Constant][39] /* ty=Tensor[(128), uint64] */, %625, %var_4847, %626)
}

def @func_1118(%var_1117: Tensor[(13, 9, 14), float32]) -> (Tensor[(13, 9, 14), float32],) {
  %629 = fn (%var_1109: Tensor[(13, 9, 14), float32]) -> (Tensor[(13, 9, 14), float32],) {
    %627 = cast(%var_1109, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
    %628 = rsqrt(%627) /* ty=Tensor[(13, 9, 14), float32] */;
    (%628,)
  };
  %629(%var_1117) /* ty=(Tensor[(13, 9, 14), float32],) */
}

def @func_970(%var_956: Tensor[(10, 14, 16), float64], %var_957: Tensor[(10, 14, 16), float64]) -> Tensor[(10, 14, 16), float64] {
  %630 = cast(%var_957, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %631 = shape_of(%var_956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_956, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%632, %633) /* ty=Tensor[(10, 14, 16), float64] */
}

def @func_6321() -> Tensor[(16, 2, 4), bool] {
  %635 = fn () -> Tensor[(16, 2, 4), bool] {
    %634 = @func_3015() /* ty=(Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) */;
    %634.0
  };
  %635() /* ty=Tensor[(16, 2, 4), bool] */
}

def @func_448(%var_437: Tensor[(14, 2, 13), int8], %var_438: Tensor[(14, 2, 13), int8]) -> Tensor[(14, 2, 13), bool] {
  %636 = cast(%var_438, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
  %637 = shape_of(%var_437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%var_437, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%638, %639) /* ty=Tensor[(14, 2, 13), bool] */
}

def @func_3181(%var_3176: Tensor[(8, 16, 1), uint64], %var_3177: Tensor[(8, 16, 4), uint64]) -> Tensor[(8, 16, 4), uint64] {
  %640 = cast(%var_3176, dtype="uint64") /* ty=Tensor[(8, 16, 1), uint64] */;
  %641 = cast(%var_3177, dtype="uint64") /* ty=Tensor[(8, 16, 4), uint64] */;
  multiply(%640, %641) /* ty=Tensor[(8, 16, 4), uint64] */
}

def @func_1783() -> Tensor[(16, 1, 4), float32] {
  @func_1615() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_3285(%var_3284: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(1320), float64], Tensor[(1, 168), float32], Tensor[(11, 15, 8), bool], Tensor[(252), uint64], Tensor[(1638), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
  %665 = fn (%var_3245: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(1320), float64], Tensor[(1, 168), float32], Tensor[(11, 15, 8), bool], Tensor[(252), uint64], Tensor[(1638), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) {
    %642 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %643 = cast(%var_3245, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %644 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
    %645 = cast(%var_3245, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %646 = reshape(%643, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
    %647 = reshape(%644, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %648 = reshape(%645, newshape=[11, 15, 8]) /* ty=Tensor[(11, 15, 8), float64] */;
    %649 = @func_275(%646, %647, %648) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */;
    %650 = %649.2;
    %651 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 15, 8), bool] */, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
    %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%650, dtype="bool") /* ty=Tensor[(11, 15, 8), bool] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %655 = cast(meta[relay.Constant][42] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
    %656 = reshape(%655, newshape=[1638]) /* ty=Tensor[(1638), float32] */;
    %657 = @func_3163(%656) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(1638), int8], Tensor[(14, 9, 2), float32], Tensor[(252), uint64]) */;
    %658 = @func_2652() /* ty=(Tensor[(1638), float32], Tensor[(1, 105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32], Tensor[(7, 9, 8), uint64], Tensor[(504), uint64], Tensor[(16, 1, 4), float32]) */;
    %659 = %642.0;
    %660 = greater_equal(%653, %654) /* ty=Tensor[(11, 15, 8), bool] */;
    %661 = %657.3;
    %662 = %658.4;
    %663 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
    %664 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
    (%659, %var_3245, meta[relay.Constant][40] /* ty=Tensor[(1, 168), float32] */, %660, %661, meta[relay.Constant][42] /* ty=Tensor[(1638), float32] */, %662, %663, %664)
  };
  %665(%var_3284) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(1320), float64], Tensor[(1, 168), float32], Tensor[(11, 15, 8), bool], Tensor[(252), uint64], Tensor[(1638), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32]) */
}

def @func_5331() -> Tensor[(16, 1, 4), float32] {
  @func_5329() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_6516() -> (Tensor[(16, 1, 4), float32],) {
  @func_6514() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_7079(%var_7045: Tensor[(182, 2), int8], %var_7070: Tensor[(1024), float32]) -> (Tensor[(12, 110), int32], Tensor[(364), int8], Tensor[(182, 2), int8], Tensor[(8, 105), bool], Tensor[(16, 16, 4), int64]) {
  %666 = @func_6009() /* ty=(Tensor[(12, 110), int32], Tensor[(16, 1, 4), float32]) */;
  %667 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 105), float64] */, dtype="float64") /* ty=Tensor[(1, 105), float64] */;
  %668 = cast(%var_7045, dtype="int8") /* ty=Tensor[(182, 2), int8] */;
  %669 = %666.0;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %671 = reshape(%667, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float64] */;
  %672 = reshape(%668, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %673 = reshape(%670, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %674 = @func_501(%671, %672, %673) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) */;
  %675 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 105), float64] */, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
  %676 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 105), float64] */, dtype="bool") /* ty=Tensor[(8, 105), bool] */;
  %677 = cast(%var_7070, dtype="float32") /* ty=Tensor[(1024), float32] */;
  %678 = reshape(%677, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float32] */;
  %679 = @func_2912(%678) /* ty=(Tensor[(16, 16, 4), bool],) */;
  %680 = %679.0;
  %681 = cast(%var_7070, dtype="int64") /* ty=Tensor[(1024), int64] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="int64") /* ty=Tensor[(16, 16, 4), int64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %685 = %674.1;
  %686 = less(%675, %676) /* ty=Tensor[(8, 105), bool] */;
  %687 = bitwise_or(%683, %684) /* ty=Tensor[(16, 16, 4), int64] */;
  (%669, %685, %var_7045, %686, %687)
}

def @func_4318() -> (Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  %688 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %689 = cast(meta[relay.Constant][45] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %690 = cast(meta[relay.Constant][45] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %691 = reshape(%689, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %692 = reshape(%690, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %693 = %688.0;
  %694 = @func_448(%691, %692) /* ty=Tensor[(14, 2, 13), bool] */;
  (%693, %694, meta[relay.Constant][45] /* ty=Tensor[(364), int8] */)
}

def @func_1918(%var_1900: Tensor[(105), float64], %var_1901: Tensor[(364), int8], %var_1902: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) {
  %695 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %696 = cast(meta[relay.Constant][46] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %697 = reshape(%696, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
  %698 = @func_1116(%697) /* ty=(Tensor[(13, 9, 14), float32],) */;
  %699 = cast(%var_1900, dtype="float64") /* ty=Tensor[(105), float64] */;
  %700 = cast(%var_1901, dtype="int8") /* ty=Tensor[(364), int8] */;
  %701 = cast(%var_1902, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %702 = reshape(%699, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float64] */;
  %703 = reshape(%700, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %704 = reshape(%701, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %705 = @func_501(%702, %703, %704) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(3, 7, 5), float32], Tensor[(168), float32], Tensor[(1320), float64], Tensor[(168), float32]) */;
  %706 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %708 = sin(%707) /* ty=Tensor[(16, 1, 4), float32] */;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %710 = %695.0;
  %711 = %698.0;
  %712 = %705.4;
  %713 = exp(%709) /* ty=Tensor[(16, 1, 4), float32] */;
  (%710, %711, meta[relay.Constant][46] /* ty=Tensor[(1638), float32] */, %712, %var_1900, %var_1901, %var_1902, %713)
}

def @func_4655(%var_4654: Tensor[(14, 2, 13), bool]) -> (Tensor[(14, 2, 13), uint16], Tensor[(14, 2, 13), float32]) {
  %723 = fn (%var_4633: Tensor[(14, 2, 13), bool]) -> (Tensor[(14, 2, 13), uint16], Tensor[(14, 2, 13), float32]) {
    %714 = @func_4318() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */;
    %715 = %714.1;
    %716 = cast(%var_4633, dtype="uint16") /* ty=Tensor[(14, 2, 13), uint16] */;
    %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %718 = cast(%715, dtype="uint16") /* ty=Tensor[(14, 2, 13), uint16] */;
    %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %720 = cast(%715, dtype="float32") /* ty=Tensor[(14, 2, 13), float32] */;
    %721 = bitwise_and(%718, %719) /* ty=Tensor[(14, 2, 13), uint16] */;
    %722 = rsqrt(%720) /* ty=Tensor[(14, 2, 13), float32] */;
    (%721, %722)
  };
  %723(%var_4654) /* ty=(Tensor[(14, 2, 13), uint16], Tensor[(14, 2, 13), float32]) */
}

def @func_144(%var_142: Tensor[(4, 3, 14), float32], %var_143: Tensor[(4, 3, 14), float32]) -> Tensor[(4, 3, 14), uint64] {
  %733 = fn (%var_74: Tensor[(4, 3, 14), float32], %var_75: Tensor[(4, 3, 14), float32]) -> Tensor[(4, 3, 14), uint64] {
    %724 = cast(%var_75, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
    %725 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%var_74, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %728 = divide(%726, %727) /* ty=Tensor[(4, 3, 14), float32] */;
    %729 = cast(%728, dtype="uint64") /* ty=Tensor[(4, 3, 14), uint64] */;
    %730 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%var_74, dtype="uint64") /* ty=Tensor[(4, 3, 14), uint64] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    add(%731, %732) /* ty=Tensor[(4, 3, 14), uint64] */
  };
  %733(%var_142, %var_143) /* ty=Tensor[(4, 3, 14), uint64] */
}

def @func_2506(%var_2504: Tensor[(16, 13, 4), float32], %var_2505: Tensor[(512), float32]) -> (Tensor[(16, 13, 4), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 8, 4), float64], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64]) {
  @func_2502(%var_2504, %var_2505) /* ty=(Tensor[(16, 13, 4), uint64], Tensor[(16, 1, 4), float32], Tensor[(16, 8, 4), float64], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64]) */
}

def @func_6164(%var_6151: Tensor[(105), float64], %var_6152: Tensor[(1320), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 7, 4), bool], Tensor[(252), uint64], Tensor[(105), float64], Tensor[(1320), float64]) {
  %734 = cast(meta[relay.Constant][47] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %735 = cast(%var_6151, dtype="float64") /* ty=Tensor[(105), float64] */;
  %736 = cast(%var_6152, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %737 = reshape(%734, newshape=[6, 42]) /* ty=Tensor[(6, 42), uint64] */;
  %738 = reshape(%735, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %739 = reshape(%736, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %740 = @func_3884(%737, %738, %739) /* ty=(Tensor[(16, ?, 4), uint32], Tensor[(16, 7, 4), bool], Tensor[(448), float32], Tensor[(7, 9, 8), uint64], Tensor[(6, 42), uint64], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(1320), float64]) */;
  %741 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %742 = %740.1;
  (%741, %742, meta[relay.Constant][47] /* ty=Tensor[(252), uint64] */, %var_6151, %var_6152)
}

def @func_5629(%var_5618: Tensor[(128), float32]) -> (Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(128), float32]) {
  %743 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %744 = cast(%var_5618, dtype="float32") /* ty=Tensor[(128), float32] */;
  %745 = cast(%var_5618, dtype="bool") /* ty=Tensor[(128), bool] */;
  %746 = reshape(%744, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), float32] */;
  %747 = reshape(%745, newshape=[16, 2, 4]) /* ty=Tensor[(16, 2, 4), bool] */;
  %748 = @func_3341(%746, %747) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, 2, 4), uint8]) */;
  %749 = cast(%var_5618, dtype="float32") /* ty=Tensor[(128), float32] */;
  %750 = %743.0;
  %751 = %748.0;
  %752 = cosh(%749) /* ty=Tensor[(128), float32] */;
  (%750, %751, %752)
}

def @func_2912(%var_2904: Tensor[(16, 16, 4), float32]) -> (Tensor[(16, 16, 4), bool],) {
  %753 = @func_1615() /* ty=Tensor[(16, 1, 4), float32] */;
  %754 = cast(%753, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %755 = cast(%var_2904, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %756 = less_equal(%754, %755) /* ty=Tensor[(16, 16, 4), bool] */;
  (%756,)
}

def @func_6871() -> Tensor[(16, 1, 4), float32] {
  %757 = @func_5058() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %757.0
}

def @func_4320() -> (Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  @func_4318() /* ty=(Tensor[(16, 1, 4), float32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) */
}

def @func_5533(%var_5464: Tensor[(10, 7, 11), float64], %var_5465: Tensor[(10, 7, 11), float64], %var_5495: Tensor[(256), float32], %var_5496: Tensor[(512), float32]) -> (Tensor[(10, 7, 11), float64], Tensor[(7, 234), float32], Tensor[(14, 9, 2), float32], Tensor[(256), float32], Tensor[(512), float32], Tensor[(252), uint64], Tensor[(13, 9, 14), float32], Tensor[(10, 7, 11), bool]) {
  %758 = cast(%var_5465, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %759 = shape_of(%var_5464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%var_5464, dtype="float64") /* ty=Tensor[(10, 7, 11), float64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %762 = cast(%var_5495, dtype="float32") /* ty=Tensor[(256), float32] */;
  %763 = cast(%var_5496, dtype="float32") /* ty=Tensor[(512), float32] */;
  %764 = cast(meta[relay.Constant][49] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %765 = reshape(%762, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %766 = reshape(%763, newshape=[512]) /* ty=Tensor[(512), float32] */;
  %767 = reshape(%764, newshape=[252]) /* ty=Tensor[(252), uint64] */;
  %768 = @func_2263(%765, %766, %767) /* ty=(Tensor[(256), float32], Tensor[(512), float32], Tensor[(14, 9, 2), float32], Tensor[(252), uint64], Tensor[(16, 8, 4), float64]) */;
  %769 = cast(meta[relay.Constant][48] /* ty=Tensor[(7, 234), float32] */, dtype="float32") /* ty=Tensor[(7, 234), float32] */;
  %770 = reshape(%769, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float32] */;
  %771 = @func_1116(%770) /* ty=(Tensor[(13, 9, 14), float32],) */;
  %772 = %771.0;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(13, 9, 14), float64] */;
  %774 = sqrt(%773) /* ty=Tensor[(13, 9, 14), float64] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
  %776 = cast(%var_5464, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %777 = shape_of(%var_5465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%var_5465, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = divide(%760, %761) /* ty=Tensor[(10, 7, 11), float64] */;
  %781 = %768.2;
  %782 = sin(%775) /* ty=Tensor[(13, 9, 14), float32] */;
  %783 = less_equal(%778, %779) /* ty=Tensor[(10, 7, 11), bool] */;
  (%780, meta[relay.Constant][48] /* ty=Tensor[(7, 234), float32] */, %781, %var_5495, %var_5496, meta[relay.Constant][49] /* ty=Tensor[(252), uint64] */, %782, %783)
}

def @func_6569() -> (Tensor[(16, 3, 4), uint64],) {
  %789 = fn () -> (Tensor[(16, 3, 4), uint64],) {
    %784 = @func_3239() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %785 = %784.0;
    %786 = cast(%785, dtype="uint64") /* ty=Tensor[(16, 1, 4), uint64] */;
    %787 = cast(meta[relay.Constant][50] /* ty=Tensor[(16, 3, 4), float32] */, dtype="uint64") /* ty=Tensor[(16, 3, 4), uint64] */;
    %788 = bitwise_xor(%786, %787) /* ty=Tensor[(16, 3, 4), uint64] */;
    (%788,)
  };
  %789() /* ty=(Tensor[(16, 3, 4), uint64],) */
}

def @func_4908() -> (Tensor[(16, 1, 4), float32],) {
  %790 = @func_2127() /* ty=Tensor[(16, 1, 4), float32] */;
  (%790,)
}

def @func_6514() -> (Tensor[(16, 1, 4), float32],) {
  %791 = @func_5058() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %792 = %791.0;
  (%792,)
}

def @func_2159(%var_2131: Tensor[(16, 4, 4), float32], %var_2139: Tensor[(16, 8, 4), float32]) -> (Tensor[(16, 4, 4), float32], Tensor[(16, 8, 4), uint32], Tensor[(14, 2, 13), bool], Tensor[(364), int8]) {
  %793 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %795 = cast(%var_2131, dtype="float32") /* ty=Tensor[(16, 4, 4), float32] */;
  %796 = cast(%793, dtype="uint32") /* ty=Tensor[(16, 1, 4), uint32] */;
  %797 = cast(%var_2139, dtype="uint32") /* ty=Tensor[(16, 8, 4), uint32] */;
  %798 = cast(meta[relay.Constant][51] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %799 = cast(meta[relay.Constant][51] /* ty=Tensor[(364), int8] */, dtype="int8") /* ty=Tensor[(364), int8] */;
  %800 = reshape(%798, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %801 = reshape(%799, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
  %802 = subtract(%794, %795) /* ty=Tensor[(16, 4, 4), float32] */;
  %803 = right_shift(%796, %797) /* ty=Tensor[(16, 8, 4), uint32] */;
  %804 = @func_448(%800, %801) /* ty=Tensor[(14, 2, 13), bool] */;
  (%802, %803, %804, meta[relay.Constant][51] /* ty=Tensor[(364), int8] */)
}

def @func_280(%var_277: Tensor[(11, 15, 8), float64], %var_278: Tensor[(168), float32], %var_279: Tensor[(11, 15, 8), float64]) -> (Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) {
  @func_275(%var_277, %var_278, %var_279) /* ty=(Tensor[(4, 3, 14), uint64], Tensor[(168), float32], Tensor[(11, 15, 8), bool]) */
}

def @func_4037() -> Tensor[(16, 1, 4), float32] {
  @func_4035() /* ty=Tensor[(16, 1, 4), float32] */
}

def @func_2075(%var_2003: Tensor[(105), float64], %var_2005: Tensor[(1320), float64], %var_2007: Tensor[(91, 4), int8]) -> (Tensor[(16, 1, 4), float32], Tensor[(364), int8], Tensor[(105), float64], Tensor[(1320), float64], Tensor[(91, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int32]) {
  %805 = cast(%var_2003, dtype="float64") /* ty=Tensor[(105), float64] */;
  %806 = cast(meta[relay.Constant][52] /* ty=Tensor[(91, 4), int8] */, dtype="int8") /* ty=Tensor[(91, 4), int8] */;
  %807 = cast(%var_2005, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %808 = reshape(%805, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %809 = reshape(%806, newshape=[364]) /* ty=Tensor[(364), int8] */;
  %810 = reshape(%807, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %811 = @func_1918(%808, %809, %810) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(13, 9, 14), float32], Tensor[(1638), float32], Tensor[(1320), float64], Tensor[(105), float64], Tensor[(364), int8], Tensor[(1320), float64], Tensor[(16, 1, 4), float32]) */;
  %812 = cast(%var_2007, dtype="bool") /* ty=Tensor[(91, 4), bool] */;
  %813 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(91, 4), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %814 = cast(meta[relay.Constant][52] /* ty=Tensor[(91, 4), int8] */, dtype="bool") /* ty=Tensor[(91, 4), bool] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %816 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %819 = atanh(%818) /* ty=Tensor[(16, 1, 4), float32] */;
  %820 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %821 = cast(%820, dtype="int32") /* ty=Tensor[(16, 1, 4), int32] */;
  %822 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%819, dtype="int32") /* ty=Tensor[(16, 1, 4), int32] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %825 = @func_1645() /* ty=Tensor[(16, 1, 4), float32] */;
  %826 = %811.5;
  %827 = logical_and(%814, %815) /* ty=Tensor[(91, 4), bool] */;
  %828 = @func_1837() /* ty=Tensor[(16, 1, 4), float32] */;
  %829 = @func_1783() /* ty=Tensor[(16, 1, 4), float32] */;
  %830 = right_shift(%823, %824) /* ty=Tensor[(16, ?, 4), int32] */;
  (%825, %826, %var_2003, %var_2005, %827, %828, %829, %830)
}

def @func_4169(%var_4166: Tensor[(16, 3, 4), float32], %var_4167: Tensor[(364), int8], %var_4168: Tensor[(16, 3, 4), float32]) -> (Tensor[(16, 3, 4), bool], Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(16, 3, 4), float32]) {
  %846 = fn (%var_4140: Tensor[(16, 3, 4), float32], %var_4150: Tensor[(364), int8], %var_4157: Tensor[(16, 3, 4), float32]) -> (Tensor[(16, 3, 4), bool], Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(16, 3, 4), float32]) {
    %831 = @func_3227() /* ty=(Tensor[(16, 1, 4), float32],) */;
    %832 = %831.0;
    %833 = cast(%832, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
    %834 = cast(%var_4140, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
    %835 = cast(%var_4150, dtype="int8") /* ty=Tensor[(364), int8] */;
    %836 = cast(%var_4150, dtype="int8") /* ty=Tensor[(364), int8] */;
    %837 = reshape(%835, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
    %838 = reshape(%836, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), int8] */;
    %839 = cast(%var_4157, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
    %840 = shape_of(%var_4140, dtype="int32") /* ty=Tensor[(3), int32] */;
    %841 = cast(%var_4140, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
    %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %843 = greater(%833, %834) /* ty=Tensor[(16, 3, 4), bool] */;
    %844 = @func_448(%837, %838) /* ty=Tensor[(14, 2, 13), bool] */;
    %845 = divide(%841, %842) /* ty=Tensor[(16, 3, 4), float32] */;
    (%843, %844, %var_4150, %845)
  };
  %846(%var_4166, %var_4167, %var_4168) /* ty=(Tensor[(16, 3, 4), bool], Tensor[(14, 2, 13), bool], Tensor[(364), int8], Tensor[(16, 3, 4), float32]) */
}

def @func_3764(%var_3762: Tensor[(21, 5), float64]) -> (Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) {
  @func_3761(%var_3762) /* ty=(Tensor[(16, 1, 4), float32], Tensor[(3, 7, 5), float32], Tensor[(21, 5), float64], Tensor[(364, 1), int8], Tensor[(1320), float64]) */
}

def @func_3017() -> (Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) {
  @func_3015() /* ty=(Tensor[(16, 2, 4), bool], Tensor[(16, 16, 4), float64], Tensor[(168), float32], Tensor[(16, 1, 4), float32], Tensor[(12, 110), int32]) */
}

def @func_5059() -> (Tensor[(16, 1, 4), float32],) {
  %850 = fn () -> (Tensor[(16, 1, 4), float32],) {
    %847 = @func_2359() /* ty=Tensor[(16, 1, 4), float32] */;
    %848 = cast(%847, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
    %849 = erf(%848) /* ty=Tensor[(16, 1, 4), float32] */;
    (%849,)
  };
  %850() /* ty=(Tensor[(16, 1, 4), float32],) */
}

def @func_654(%var_653: Tensor[(7, 9, 8), uint64]) -> Tensor[(7, 9, 8), uint64] {
  %853 = fn (%var_639: Tensor[(7, 9, 8), uint64]) -> Tensor[(7, 9, 8), uint64] {
    %851 = cast(meta[relay.Constant][53] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %852 = cast(%var_639, dtype="uint64") /* ty=Tensor[(7, 9, 8), uint64] */;
    minimum(%851, %852) /* ty=Tensor[(7, 9, 8), uint64] */
  };
  %853(%var_653) /* ty=Tensor[(7, 9, 8), uint64] */
}

def @func_5116() -> (Tensor[(16, ?, 4), bool], Tensor[(16, 1, 4), float32], Tensor[(16, ?, 4), int16]) {
  %854 = @func_4430() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %855 = %854.0;
  %856 = cast(%855, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %857 = asin(%856) /* ty=Tensor[(16, 1, 4), float32] */;
  %858 = @func_1626() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %859 = %858.0;
  %860 = cast(%859, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %861 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%857, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %864 = @func_2570() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %865 = cast(%855, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %866 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = cast(%857, dtype="float32") /* ty=Tensor[(16, 1, 4), float32] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %869 = power(%867, %868) /* ty=Tensor[(16, ?, 4), float32] */;
  %870 = @func_3834() /* ty=(Tensor[(16, 1, 4), float32],) */;
  %871 = %870.0;
  %872 = cast(%871, dtype="int16") /* ty=Tensor[(16, 1, 4), int16] */;
  %873 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%869, dtype="int16") /* ty=Tensor[(16, ?, 4), int16] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %876 = not_equal(%862, %863) /* ty=Tensor[(16, ?, 4), bool] */;
  %877 = %864.0;
  %878 = subtract(%874, %875) /* ty=Tensor[(16, ?, 4), int16] */;
  (%876, %877, %878)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen381/build/output.py:2375: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen381/build/output.py", line 2380, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(192) tvmgen_default_fused_rsqrt_kernel0(float* __restrict__ tensor, float* __restrict__ placeholder) {
  tensor[(((int)threadIdx.x))] = (1.000000e+00f / sqrtf(placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

